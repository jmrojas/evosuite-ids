package de.unisb.cs.st.evosuite.coverage.behavioral;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import de.unisb.cs.st.evosuite.Properties;
import de.unisb.cs.st.evosuite.testcase.TestCase;

/**
 * This class provides the main programming interface for test-suite generation
 * covering the <i>behavior</i> of the class under test (CUT).
 * 
 * <p>Behavioral coverage is defined as transition coverage over the object behavior model
 * of the CUT mined by <tt>ADABU</tt> via observing program execution.
 * An object behavior model is an automaton that summarizes object behavior,
 * whereby the transitions are possible method calls of the object and the states
 * are vectors &lt;x <sub>1</sub>, ... , x <sub>n</sub>&gt; of concrete values
 * x <sub>i</sub> of object fields.</p>
 * 
 * <p>The process of generating such a test-suite consists of two main steps:</br>
 * <ol>
 * <li><b>Exploring the object behavior model.</b></br>
 * The object behavior model is generated by first creating one test for every constructor
 * of the class under test. These tests are executed by <tt>ADABU</tt> and
 * the basic object behavior model containing all constructor calls is computed.
 * To learn new states and transitions new tests are then created for every method
 * expanding the old ones. This step is repeated until no more new abstract states
 * are produced. The so generated object behavior model delivers the basis to cover.</li>
 * </br></br>
 * <li><b>Minimal transition covering of the model.</b></br>
 * To achieve full behavioral coverage all transitions of the object behavior model
 * have to be covered. Since the behavior of one transition (method call) only
 * depends on the state this transition is executed it is sufficient that the resulting
 * test-suite covering the behavior contains every transition exactly ones.
 * Therefore the smallest set of transition sequences covering the object behavior model
 * is computed to minimize the test redundancy by solving the optimization (minimization)
 * problem of shortest edge connection in a graph.</li>
 * </ol>
 * <b>For abstraction see:</b></br>
 * {@link AdabuRunner#getAbstractModel(TransitiveObjectModel)}
 * </p>
 */
public class BehavioralCoverage {
	
	/**
	 * Generates a test-suite achieving full behavioral coverage.</p>
	 * 
	 * @return a list of test-cases covering the behavior of the class under test.
	 * 
	 * @see BehavioralCoverage
	 */
	public static List<TestCase> generateTestSuite() {
		List<TestCase> result;
		ModelExplorer explorer;
		CoverageGenerator generator;
		
		System.out.println("* Generating the object behavior model");
		
		// generate and explore the model
		explorer = new ModelExplorer(Properties.getTargetClass());
		BCGraph graph = explorer.generateExploredModel();
		if (graph == null) // not able to mine the model
			return new ArrayList<TestCase>(0);
		
		System.out.println("* Covering the transitions of the object behavior model");
		
		// compute the minimal test sequences covering the model
		generator = new CoverageGenerator();
		Set<TransitionSequence> trans_seq = generator.generateTransitionSequences(graph);
		result = new ArrayList<TestCase>(trans_seq.size());
		// for every transition sequence get the test-case
		for (TransitionSequence alpha : trans_seq) {
			result.add(alpha.getTestCase());
		}
		
		return result;
	}
}
