package org.evosuite.runtime;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.evosuite.runtime.vfs.FSObject;
import org.evosuite.runtime.vfs.VFile;
import org.evosuite.runtime.vfs.VFolder;

/**
 * A virtual file system (VFS) to handle the files accessed/generated by the test cases.
 * No file is ever written to disk.
 * 
 * <p>
 * The VFS reflects the actual OS in which the JVM is running (eg Windows vs Unix) 
 * 
 * <p>
 * This class is also used to keep track of what the test cases have tried
 * to do. This is useful guide the search. 
 * 
 * @author arcuri
 *
 */
public class VirtualFileSystem {


	private static final VirtualFileSystem singleton = new VirtualFileSystem();
	
	private VFolder root;
	
	private VirtualFileSystem(){		
	}
	
	public static VirtualFileSystem getInstance(){
		return singleton;
	}
	
	
	public void resetSingleton(){
		root = null;
	}
	
	/**
	 * Initialize the virtual file system with the current directory the JVM
	 * was started from
	 */
	public void init(){
		
		root = new VFolder(null,null);
		
		String workingDir = java.lang.System.getProperty("user.dir");
		createFolder(workingDir);
	}
	
	public boolean exists(String rawPath){
		return findFSObject(rawPath) != null;
	}
	
	public FSObject findFSObject(String rawPath){
		String[] tokens = tokenize(new File(rawPath).getAbsolutePath());
		
		VFolder parent = root;
		for(int i=0; i<tokens.length; i++){
			String name = tokens[i];
			FSObject child = parent.getChild(name);
			
			//child might not exist
			if(child == null || child.isDeleted()){
				return null;
			}
			
			//we might end up with a file on the path that is not a folder
			if(i< (tokens.length - 1) && !child.isFolder()){
				return null;
			} else {
				if(i == (tokens.length -1)){
					return child;
				}
			}
			
			parent = (VFolder) child;			
		}
		
		return parent;
	}
	
	public boolean deleteFSObject(String rawPath){
		FSObject obj = findFSObject(rawPath);
		if(obj==null || !obj.isWritePermission()){
			return false;
		}
		return obj.delete();
	}
	
	public boolean createFile(String rawPath){
		String parent = new File(rawPath).getParent();
		boolean created = createFolder(parent);
		if(!created){
			return false;
		}
		
		VFolder folder = (VFolder)findFSObject(parent);
		VFile file = new VFile(rawPath,folder);
		folder.addChild(file);
		return true;
	}
	
	public boolean createFolder(String rawPath){		
		String[] tokens = tokenize(new File(rawPath).getAbsolutePath());
		
		VFolder parent = root;
		for(String name : tokens){
			
			if(!parent.isReadPermission() || !parent.isWritePermission() || parent.isDeleted()){
				return false;
			}
			
			VFolder folder = null;
			
			if(!parent.hasChild(name)){
				String path = parent.getPath() + File.separator + name;
				folder = new VFolder(path,parent);
			} else {
				FSObject child = parent.getChild(name);
				if(!child.isFolder()){
					return false;
				}
				folder = (VFolder) child;
			}

			parent.addChild(folder);
			parent = folder;
		}
		
		return true;
	}
	
	private String[] tokenize(String path){
		String[] tokens =  path.split(File.separator);
		List<String> list = new ArrayList<String>(tokens.length);
		for(String token : tokens){
			if(!token.isEmpty()){
				list.add(token);
			}
		}
		return list.toArray(new String[0]);
	}
	
	private boolean isUnixStyle(){
		return File.separator.equals("/");
	}
}
