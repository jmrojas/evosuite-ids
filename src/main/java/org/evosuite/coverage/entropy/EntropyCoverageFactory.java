package org.evosuite.coverage.entropy;import java.util.ArrayList;import java.util.List;import org.evosuite.Properties;import org.evosuite.TestGenerationContext;import org.evosuite.graphs.cfg.BytecodeInstruction;import org.evosuite.graphs.cfg.BytecodeInstructionPool;import org.evosuite.testsuite.AbstractFitnessFactory;import org.evosuite.utils.LoggingUtils;/** *  */public class EntropyCoverageFactory extends		AbstractFitnessFactory<EntropyCoverageTestFitness>{	private static boolean called = false;	private static boolean[][] matrix;	private static int numTests;	private static int numGoals;	private static double rho;	private static double bar_rho;	private static List<EntropyCoverageTestFitness> goals = new ArrayList<EntropyCoverageTestFitness>();	private static void computeGoals()	{		if (called)			return ;		long start = System.currentTimeMillis();		String targetMethod = Properties.TARGET_METHOD;		String targetClass = Properties.TARGET_CLASS;		for (String className : BytecodeInstructionPool.getInstance(TestGenerationContext.getClassLoader()).knownClasses())		{			if (!(targetClass.equals("") || className.endsWith(targetClass)))				continue;			for (String methodName : BytecodeInstructionPool.getInstance(TestGenerationContext.getClassLoader()).knownMethods(className))			{				if (!targetMethod.equals("") && !methodName.equals(targetMethod))					continue;				for (BytecodeInstruction ins : BytecodeInstructionPool.getInstance(TestGenerationContext.getClassLoader()).getInstructionsIn(className, methodName))					if (isUsable(ins))						goals.add(new EntropyCoverageTestFitness(ins));			}		}		long end = System.currentTimeMillis();		LoggingUtils.getEvoLogger().info("* Total number of coverage goals: "		                                         + goals.size() + " took "		                                         + (end - start) + "ms");		called = true;		numTests = 5; //FIXME		numGoals = goals.size();		matrix = new boolean[numTests][numGoals];	}	private static boolean isUsable(BytecodeInstruction ins) {		return !ins.isLabel() && !ins.isLineNumber();	}	public static boolean[][] getMatrix() {		return matrix;	}	public static int getNumTests() {		return numTests;	}	public static int getNumGoals() {		return numGoals;	}	public static double getRho() {		return rho;	}	public static double getBar_Rho() {		return bar_rho;	}	@Override	public List<EntropyCoverageTestFitness> getCoverageGoals() {		if (!called)			computeGoals();		return goals;	}	public static List<EntropyCoverageTestFitness> retrieveCoverageGoals() {		if (!called)			computeGoals();		return goals;	}}