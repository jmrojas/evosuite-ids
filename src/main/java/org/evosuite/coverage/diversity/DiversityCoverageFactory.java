package org.evosuite.coverage.diversity;import java.io.BufferedReader;import java.io.File;import java.io.FileReader;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import java.util.HashSet;import java.util.List;import java.util.Set;import org.evosuite.Properties;import org.evosuite.TestGenerationContext;import org.evosuite.graphs.cfg.BytecodeInstruction;import org.evosuite.graphs.cfg.BytecodeInstructionPool;import org.evosuite.testsuite.AbstractFitnessFactory;import org.evosuite.utils.LoggingUtils;/** *  */public class DiversityCoverageFactory extends		AbstractFitnessFactory<DiversityCoverageTestFitness>{	private static boolean			called = false;	private static boolean			debug = false;	public static HashMap<Double, Integer> coverage = new HashMap<Double, Integer>();	private static int				number_of_goals = 0;	private static List<DiversityCoverageTestFitness> goals = new ArrayList<DiversityCoverageTestFitness>();	private static Set<Integer> lineNumbers = new HashSet<Integer>();	private static void computeGoals()	{		if (called)			return ;		Properties.MINIMIZE = false; // FIXME put this somewhere else		long start = System.currentTimeMillis();		String targetMethod = Properties.TARGET_METHOD;		String targetClass = Properties.TARGET_CLASS;		for (String className : BytecodeInstructionPool.getInstance(TestGenerationContext.getClassLoader()).knownClasses())		{			if (!(targetClass.equals("") || className.endsWith(targetClass)))				continue;			for (String methodName : BytecodeInstructionPool.getInstance(TestGenerationContext.getClassLoader()).knownMethods(className))			{				if (!targetMethod.equals("") && !methodName.equals(targetMethod))					continue;				for (BytecodeInstruction ins : BytecodeInstructionPool.getInstance(TestGenerationContext.getClassLoader()).getInstructionsIn(className, methodName)) {					if (isUsable(ins))						goals.add(new DiversityCoverageTestFitness(ins));				}			}		}		long end = System.currentTimeMillis();		number_of_goals = goals.size();		LoggingUtils.getEvoLogger().info("* Total number of coverage goals: "		                                         + number_of_goals + " took "		                                         + (end - start) + "ms");		called = true;		if (debug) {			for (DiversityCoverageTestFitness e : goals)				LoggingUtils.getEvoLogger().info(e.toString());		}		loadOriginalMatrix();	}	private static boolean isUsable(BytecodeInstruction ins) {		if (lineNumbers.add(ins.getLineNumber()) == false) // the line number already exists, and cannot be added			return false;		return ins.isLineNumber();	}	private static void loadOriginalMatrix()	{		/*		 * Read the original matrix if the Coverage File exists		 */		BufferedReader br = null;		try		{			String sCurrentLine;			br = new BufferedReader(new FileReader("evosuite-report" + File.separator + "data" + File.separator + Properties.TARGET_CLASS + ".matrix"));			String[] split;			while ((sCurrentLine = br.readLine()) != null)			{				split = sCurrentLine.split(" ");				int count = 0;				double category = 0;				for (int i = 0; i < split.length - 1; i++) // - 1, because we don't want the test results				{					if (split[i].compareTo("1") == 0) {						count++;						category += (Math.pow(2.0, i) / 100.0);					}				}				category *= ((double)count);				if (coverage.get(category) != null)					coverage.put(category, coverage.get(category) + 1);				else					coverage.put(category, 1);			}			double fitness = 0.0;			double N = 0.0;			for (Integer ni : coverage.values()) {				N += ni;				fitness += (ni * (ni - 0.01));			}			fitness /= (N * (N - 0.01));			LoggingUtils.getEvoLogger().info("* Original fitness: " + fitness);		}		catch (IOException e) {			// the coverage matrix file does not exist, ok no problem... we will generate new test cases from scratch		}		finally {			try {				if (br != null)					br.close();			}			catch (IOException ex) {				ex.printStackTrace();			}		}	}	public static int getNumberOfGoals() {		return number_of_goals;	}	@Override	public List<DiversityCoverageTestFitness> getCoverageGoals() {		if (!called)			computeGoals();		return goals;	}	public static List<DiversityCoverageTestFitness> retrieveCoverageGoals() {		if (!called)			computeGoals();		return goals;	}}