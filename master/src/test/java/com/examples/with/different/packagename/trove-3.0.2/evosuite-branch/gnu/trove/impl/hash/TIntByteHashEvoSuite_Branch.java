/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.hash.TIntByteHashMap;
import gnu.trove.procedure.TIntProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntByteHashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TIntByteHash.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   * 2 gnu.trove.impl.hash.TIntByteHash.<init>(IFIB)V: root-Branch
   * 3 gnu.trove.impl.hash.TIntByteHash.setUp(I)I: root-Branch
   */

//   @Test
//   public void test0()  throws Throwable  {
//       TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(847, (float) 0, (int) (byte)0, (byte)0);
//       ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
//       ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
//       tIntByteHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
//       assertEquals(0, tIntByteHashMap0.getNoEntryKey());
//       assertEquals(0, tIntByteHashMap0.getNoEntryValue());
//   }

  //Test case number: 1
  /*
   * 10 covered goals:
   * 1 gnu.trove.impl.hash.TIntByteHash.removeAt(I)V: root-Branch
   * 2 gnu.trove.impl.hash.TIntByteHash.index(I)I: I37 Branch 5 IFNE L228 - true
   * 3 gnu.trove.impl.hash.TIntByteHash.index(I)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 4 gnu.trove.impl.hash.TIntByteHash.index(I)I: I51 Branch 7 IF_ICMPNE L231 - false
   * 5 gnu.trove.impl.hash.TIntByteHash.insertKeyAt(II)V: root-Branch
   * 6 gnu.trove.impl.hash.TIntByteHash.<init>(I)V: root-Branch
   * 7 gnu.trove.impl.hash.TIntByteHash.insertKey(I)I: I30 Branch 13 IFNE L279 - true
   * 8 gnu.trove.impl.hash.TIntByteHash.insertKey(I)I: I30 Branch 13 IFNE L279 - false
   * 9 gnu.trove.impl.hash.TIntByteHash.insertKey(I)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 10 gnu.trove.impl.hash.TIntByteHash.insertKey(I)I: I56 Branch 15 IF_ICMPNE L286 - false
   */

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[7];
      byte[] byteArray0 = new byte[7];
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(intArray0, byteArray0);
      assertEquals(false, tIntByteHashMap0.isEmpty());
      
      tIntByteHashMap0.remove((int) (byte)0);
      assertEquals(true, tIntByteHashMap0.isEmpty());
      assertEquals("{}", tIntByteHashMap0.toString());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TIntByteHash.getNoEntryValue()B: root-Branch
   * 2 gnu.trove.impl.hash.TIntByteHash.<init>()V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap();
      byte byte0 = tIntByteHashMap0.getNoEntryValue();
      assertEquals(0, tIntByteHashMap0.getNoEntryKey());
      assertEquals(23, tIntByteHashMap0.capacity());
      assertEquals((byte)0, byte0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TIntByteHash.<init>(IF)V: root-Branch
   */

//   @Test
//   public void test3()  throws Throwable  {
//       TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(Integer.MAX_VALUE, Integer.MAX_VALUE);
//       assertEquals(0, tIntByteHashMap0.getNoEntryKey());
//       assertEquals(0, tIntByteHashMap0.getNoEntryValue());
//   }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TIntByteHash.getNoEntryKey()I: root-Branch
   */

//   @Test
//   public void test4()  throws Throwable  {
//       TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap();
//       int int0 = tIntByteHashMap0.getNoEntryKey();
//       assertEquals(0, int0);
//       assertEquals(23, tIntByteHashMap0.capacity());
//       assertEquals(0, tIntByteHashMap0.getNoEntryValue());
//   }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TIntByteHash.contains(I)Z: I5 Branch 1 IFLT L178 - true
   * 2 gnu.trove.impl.hash.TIntByteHash.index(I)I: I37 Branch 5 IFNE L228 - false
   */

//   @Test
//   public void test5()  throws Throwable  {
//       TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(Integer.MAX_VALUE, (float) Integer.MAX_VALUE, Integer.MAX_VALUE, (byte)86);
//       boolean boolean0 = tIntByteHashMap0.contains(1053);
//       assertEquals(2147483647, tIntByteHashMap0.getNoEntryKey());
//       assertEquals(86, tIntByteHashMap0.getNoEntryValue());
//       assertEquals(false, boolean0);
//   }

  //Test case number: 6
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TIntByteHash.contains(I)Z: I5 Branch 1 IFLT L178 - false
   * 2 gnu.trove.impl.hash.TIntByteHash.index(I)I: I51 Branch 7 IF_ICMPNE L231 - false
   */

//   @Test
//   public void test6()  throws Throwable  {
//       TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap();
//       TIntByteHashMap tIntByteHashMap1 = new TIntByteHashMap(tIntByteHashMap0._set, tIntByteHashMap0._states);
//       boolean boolean0 = tIntByteHashMap1.containsKey(0);
//       assertEquals(true, boolean0);
//       assertEquals(0, tIntByteHashMap0.getNoEntryValue());
//       assertEquals(0, tIntByteHashMap1.getNoEntryValue());
//       assertEquals(1, tIntByteHashMap1.size());
//   }

  //Test case number: 7
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TIntByteHash.forEach(Lgnu/trove/procedure/TIntProcedure;)Z: I18 Branch 2 IFLE L192 - true
   * 2 gnu.trove.impl.hash.TIntByteHash.forEach(Lgnu/trove/procedure/TIntProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TIntByteHash.forEach(Lgnu/trove/procedure/TIntProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

//   @Test
//   public void test7()  throws Throwable  {
//       TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(Integer.MAX_VALUE, (float) Integer.MAX_VALUE, Integer.MAX_VALUE, (byte)86);
//       boolean boolean0 = tIntByteHashMap0.forEach((TIntProcedure) null);
//       assertEquals(2147483647, tIntByteHashMap0.getNoEntryKey());
//       assertEquals(86, tIntByteHashMap0.getNoEntryValue());
//       assertEquals(true, boolean0);
//   }

  //Test case number: 8
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TIntByteHash.forEach(Lgnu/trove/procedure/TIntProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - false
   * 2 gnu.trove.impl.hash.TIntByteHash.forEach(Lgnu/trove/procedure/TIntProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TIntByteHash.forEach(Lgnu/trove/procedure/TIntProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

  @Test
  public void test8()  throws Throwable  {
      int[] intArray0 = new int[4];
      byte[] byteArray0 = new byte[10];
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(intArray0, byteArray0);
      // Undeclared exception!
      try {
        tIntByteHashMap0.forEach((TIntProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 7 covered goals:
   * 1 gnu.trove.impl.hash.TIntByteHash.indexRehashed(IIIB)I: I46 Branch 9 IFNE L250 - true
   * 2 gnu.trove.impl.hash.TIntByteHash.indexRehashed(IIIB)I: I58 Branch 10 IF_ICMPNE L254 - true
   * 3 gnu.trove.impl.hash.TIntByteHash.indexRehashed(IIIB)I: I70 Branch 12 IF_ICMPNE L256 - true
   * 4 gnu.trove.impl.hash.TIntByteHash.indexRehashed(IIIB)I: I46 Branch 9 IFNE L250 - false
   * 5 gnu.trove.impl.hash.TIntByteHash.indexRehashed(IIIB)I: I29 Branch 8 IFGE L245 - true
   * 6 gnu.trove.impl.hash.TIntByteHash.indexRehashed(IIIB)I: I29 Branch 8 IFGE L245 - false
   * 7 gnu.trove.impl.hash.TIntByteHash.index(I)I: I46 Branch 6 IF_ICMPNE L231 - true
   */

//   @Test
//   public void test9()  throws Throwable  {
//       TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(Integer.MAX_VALUE, (float) Integer.MAX_VALUE, Integer.MAX_VALUE, (byte)86);
//       byte[] byteArray0 = new byte[9];
//       byteArray0[0] = (byte)86;
//       byteArray0[2] = (byte)86;
//       tIntByteHashMap0._states = byteArray0;
//       boolean boolean0 = tIntByteHashMap0.contains(1053);
//       assertEquals(86, tIntByteHashMap0.getNoEntryValue());
//       assertEquals(2147483647, tIntByteHashMap0.getNoEntryKey());
//       assertEquals(false, boolean0);
//   }

  //Test case number: 10
  /*
   * 9 covered goals:
   * 1 gnu.trove.impl.hash.TIntByteHash.indexRehashed(IIIB)I: I58 Branch 10 IF_ICMPNE L254 - false
   * 2 gnu.trove.impl.hash.TIntByteHash.indexRehashed(IIIB)I: I61 Branch 11 IF_ICMPEQ L254 - false
   * 3 gnu.trove.impl.hash.TIntByteHash.insertKey(I)I: I56 Branch 15 IF_ICMPNE L286 - true
   * 4 gnu.trove.impl.hash.TIntByteHash.insertKeyRehash(IIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 5 gnu.trove.impl.hash.TIntByteHash.insertKeyRehash(IIIB)I: I45 Branch 18 IFGE L310 - true
   * 6 gnu.trove.impl.hash.TIntByteHash.insertKeyRehash(IIIB)I: I62 Branch 19 IFNE L316 - false
   * 7 gnu.trove.impl.hash.TIntByteHash.insertKeyRehash(IIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 8 gnu.trove.impl.hash.TIntByteHash.index(I)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 9 gnu.trove.impl.hash.TIntByteHash.index(I)I: I51 Branch 7 IF_ICMPNE L231 - true
   */

  @Test
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = (-1179);
      intArray0[3] = 1380;
      byte[] byteArray0 = new byte[7];
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(intArray0, byteArray0);
      boolean boolean0 = tIntByteHashMap0.increment(1380);
      assertEquals("{-1179=0, 1380=1, 0=0}", tIntByteHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 11
  /*
   * 10 covered goals:
   * 1 gnu.trove.impl.hash.TIntByteHash.indexRehashed(IIIB)I: I70 Branch 12 IF_ICMPNE L256 - false
   * 2 gnu.trove.impl.hash.TIntByteHash.<init>(IFIB)V: root-Branch
   * 3 gnu.trove.impl.hash.TIntByteHash.indexRehashed(IIIB)I: I29 Branch 8 IFGE L245 - true
   * 4 gnu.trove.impl.hash.TIntByteHash.indexRehashed(IIIB)I: I29 Branch 8 IFGE L245 - false
   * 5 gnu.trove.impl.hash.TIntByteHash.indexRehashed(IIIB)I: I46 Branch 9 IFNE L250 - true
   * 6 gnu.trove.impl.hash.TIntByteHash.indexRehashed(IIIB)I: I58 Branch 10 IF_ICMPNE L254 - true
   * 7 gnu.trove.impl.hash.TIntByteHash.indexRehashed(IIIB)I: I70 Branch 12 IF_ICMPNE L256 - true
   * 8 gnu.trove.impl.hash.TIntByteHash.index(I)I: I37 Branch 5 IFNE L228 - true
   * 9 gnu.trove.impl.hash.TIntByteHash.index(I)I: I46 Branch 6 IF_ICMPNE L231 - true
   * 10 gnu.trove.impl.hash.TIntByteHash.contains(I)Z: I5 Branch 1 IFLT L178 - true
   */

//   @Test
//   public void test11()  throws Throwable  {
//       TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(Integer.MAX_VALUE, (float) Integer.MAX_VALUE, Integer.MAX_VALUE, (byte)86);
//       byte[] byteArray0 = new byte[9];
//       byteArray0[0] = (byte)86;
//       byteArray0[1] = (byte)86;
//       byteArray0[2] = (byte)86;
//       tIntByteHashMap0._states = byteArray0;
//       boolean boolean0 = tIntByteHashMap0.contains(1053);
//       assertEquals(86, tIntByteHashMap0.getNoEntryValue());
//       assertEquals(2147483647, tIntByteHashMap0.getNoEntryKey());
//       assertEquals(false, boolean0);
//   }

  //Test case number: 12
  /*
   * 5 covered goals:
   * 1 gnu.trove.impl.hash.TIntByteHash.insertKeyRehash(IIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 2 gnu.trove.impl.hash.TIntByteHash.insertKeyRehash(IIIB)I: I103 Branch 22 IF_ICMPNE L327 - true
   * 3 gnu.trove.impl.hash.TIntByteHash.insertKey(I)I: I56 Branch 15 IF_ICMPNE L286 - false
   * 4 gnu.trove.impl.hash.TIntByteHash.insertKeyRehash(IIIB)I: I62 Branch 19 IFNE L316 - true
   * 5 gnu.trove.impl.hash.TIntByteHash.insertKeyRehash(IIIB)I: I115 Branch 23 IF_ICMPNE L332 - true
   */

  @Test
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 19;
      intArray0[2] = (-1179);
      intArray0[3] = 1380;
      byte[] byteArray0 = new byte[7];
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(intArray0, byteArray0);
      assertEquals("{-1179=0, 19=0, 1380=0, 0=0}", tIntByteHashMap0.toString());
      assertEquals(4, tIntByteHashMap0.size());
  }

  //Test case number: 13
  /*
   * 10 covered goals:
   * 1 gnu.trove.impl.hash.TIntByteHash.insertKeyRehash(IIIB)I: I103 Branch 22 IF_ICMPNE L327 - false
   * 2 gnu.trove.impl.hash.TIntByteHash.insertKeyAt(II)V: root-Branch
   * 3 gnu.trove.impl.hash.TIntByteHash.<init>(I)V: root-Branch
   * 4 gnu.trove.impl.hash.TIntByteHash.insertKeyRehash(IIIB)I: I62 Branch 19 IFNE L316 - false
   * 5 gnu.trove.impl.hash.TIntByteHash.insertKeyRehash(IIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 6 gnu.trove.impl.hash.TIntByteHash.insertKeyRehash(IIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 7 gnu.trove.impl.hash.TIntByteHash.insertKey(I)I: I30 Branch 13 IFNE L279 - false
   * 8 gnu.trove.impl.hash.TIntByteHash.insertKey(I)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 9 gnu.trove.impl.hash.TIntByteHash.insertKey(I)I: I56 Branch 15 IF_ICMPNE L286 - true
   * 10 gnu.trove.impl.hash.TIntByteHash.insertKeyRehash(IIIB)I: I45 Branch 18 IFGE L310 - false
   */

  @Test
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 2040;
      byte[] byteArray0 = new byte[7];
      intArray0[0] = (int) (byte)75;
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(intArray0, byteArray0);
      assertEquals(0, tIntByteHashMap0.getNoEntryKey());
      assertEquals(3, tIntByteHashMap0.size());
      assertEquals("{0=0, 75=0, 2040=0}", tIntByteHashMap0.toString());
  }

  //Test case number: 14
  /*
   * 12 covered goals:
   * 1 gnu.trove.impl.hash.TIntByteHash.insertKeyRehash(IIIB)I: I115 Branch 23 IF_ICMPNE L332 - false
   * 2 gnu.trove.impl.hash.TIntByteHash.insertKeyRehash(IIIB)I: I120 Branch 24 IF_ICMPEQ L336 - true
   * 3 gnu.trove.impl.hash.TIntByteHash.<init>()V: root-Branch
   * 4 gnu.trove.impl.hash.TIntByteHash.setUp(I)I: root-Branch
   * 5 gnu.trove.impl.hash.TIntByteHash.insertKeyRehash(IIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 6 gnu.trove.impl.hash.TIntByteHash.insertKeyRehash(IIIB)I: I45 Branch 18 IFGE L310 - true
   * 7 gnu.trove.impl.hash.TIntByteHash.insertKeyRehash(IIIB)I: I45 Branch 18 IFGE L310 - false
   * 8 gnu.trove.impl.hash.TIntByteHash.insertKeyRehash(IIIB)I: I62 Branch 19 IFNE L316 - true
   * 9 gnu.trove.impl.hash.TIntByteHash.insertKeyRehash(IIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 10 gnu.trove.impl.hash.TIntByteHash.insertKeyRehash(IIIB)I: I115 Branch 23 IF_ICMPNE L332 - true
   * 11 gnu.trove.impl.hash.TIntByteHash.insertKey(I)I: I30 Branch 13 IFNE L279 - true
   * 12 gnu.trove.impl.hash.TIntByteHash.insertKey(I)I: I50 Branch 14 IF_ICMPNE L286 - true
   */

  @Test
  public void test14()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)63;
      tIntByteHashMap0.trimToSize();
      tIntByteHashMap0._states = byteArray0;
      // Undeclared exception!
      try {
        tIntByteHashMap0.put((int) (byte)63, (byte)63);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No free or removed slots available. Key set full?!!
         //
      }
  }
}
