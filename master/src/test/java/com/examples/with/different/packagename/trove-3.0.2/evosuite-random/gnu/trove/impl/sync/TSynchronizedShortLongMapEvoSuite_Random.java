/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedLongCollection;
import gnu.trove.impl.sync.TSynchronizedShortLongMap;
import gnu.trove.map.TShortLongMap;
import gnu.trove.map.hash.TShortLongHashMap;
import gnu.trove.procedure.TLongProcedure;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedShortLongMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-32);
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(int0, int0);
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      short short0 = (short)0;
      TSynchronizedLongCollection tSynchronizedLongCollection0 = (TSynchronizedLongCollection)tSynchronizedShortLongMap0.valueCollection();
      assertNotNull(tSynchronizedLongCollection0);
      
      long long0 = (-721L);
      TLongProcedure tLongProcedure0 = null;
      tSynchronizedShortLongMap0.forEachValue(tLongProcedure0);
      long long1 = 0L;
      TSynchronizedShortLongMap tSynchronizedShortLongMap1 = new TSynchronizedShortLongMap((TShortLongMap) tSynchronizedShortLongMap0);
      tShortLongHashMap0.adjustOrPutValue(short0, long0, long1);
      short short1 = (short)0;
      tSynchronizedShortLongMap0.containsValue((long) int0);
      tSynchronizedShortLongMap0.remove(short1);
      short[] shortArray0 = new short[6];
      shortArray0[0] = short0;
      shortArray0[0] = short1;
      shortArray0[1] = short1;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short1;
      shortArray0[1] = short1;
      shortArray0[0] = short1;
      shortArray0[1] = short0;
      shortArray0[2] = short1;
      shortArray0[3] = short1;
      shortArray0[4] = short0;
      short short2 = (short) (-1192);
      shortArray0[5] = short2;
      shortArray0[2] = short0;
      shortArray0[3] = short1;
      tSynchronizedShortLongMap0.toString();
      shortArray0[4] = short0;
      shortArray0[5] = short1;
      tShortLongHashMap0.keys(shortArray0);
      assertEquals(3, tShortLongHashMap0.capacity());
      assertEquals(0, tShortLongHashMap0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short) (-1664);
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)502;
      shortArray0[2] = short2;
      TShortLongMap tShortLongMap0 = null;
      TShortLongHashMap tShortLongHashMap0 = null;
      try {
        tShortLongHashMap0 = new TShortLongHashMap(tShortLongMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 233;
          TShortLongMap tShortLongMap0 = null;
          String string0 = " exceeds size ";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      short[] shortArray0 = new short[5];
      short short0 = (short)1601;
      shortArray0[0] = short0;
      short short1 = (short)1367;
      shortArray0[1] = short1;
      short short2 = (short) (-925);
      shortArray0[2] = short2;
      short short3 = (short) (-1287);
      shortArray0[3] = short3;
      short short4 = (short)693;
      shortArray0[4] = short4;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) short2;
      longArray0[1] = (long) short4;
      longArray0[2] = (long) shortArray0[1];
      longArray0[3] = (long) int0;
      longArray0[4] = (long) short4;
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap((TShortLongMap) tShortLongHashMap0);
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap1);
      String string0 = "(<";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0);
      String string1 = stringTokenizer0.nextToken();
      TSynchronizedShortLongMap tSynchronizedShortLongMap1 = new TSynchronizedShortLongMap((TShortLongMap) tSynchronizedShortLongMap0, (Object) string1);
      TSynchronizedShortLongMap tSynchronizedShortLongMap2 = new TSynchronizedShortLongMap((TShortLongMap) tSynchronizedShortLongMap1);
      tSynchronizedShortLongMap2.getNoEntryValue();
      TShortLongHashMap tShortLongHashMap2 = new TShortLongHashMap(int0, int0);
      TSynchronizedShortLongMap tSynchronizedShortLongMap3 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap2);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      short short0 = (short)217;
      float float0 = (-1621.1895F);
      short short1 = (short)0;
      long long0 = 0L;
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(int0, float0, short1, long0);
      Locale locale0 = Locale.KOREA;
      Locale locale1 = Locale.JAPANESE;
      String string0 = locale0.getDisplayCountry(locale1);
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0, (Object) string0);
      tSynchronizedShortLongMap0.putAll((TShortLongMap) tShortLongHashMap0);
      long long1 = 1998L;
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap(int0, (float) int0, short0, long1);
      Locale locale2 = Locale.JAPAN;
      String string1 = locale2.getISO3Language();
      TSynchronizedShortLongMap tSynchronizedShortLongMap1 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap1, (Object) string1);
      String string2 = locale2.getISO3Country();
      TSynchronizedShortLongMap tSynchronizedShortLongMap2 = new TSynchronizedShortLongMap((TShortLongMap) tSynchronizedShortLongMap1, (Object) string2);
      String string3 = tSynchronizedShortLongMap2.toString();
      assertFalse(string3.equals(string0));
  }

  @Test
  public void test5()  throws Throwable  {
      TShortLongMap tShortLongMap0 = null;
      long long0 = 0L;
      String string0 = Long.toHexString(long0);
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap(tShortLongMap0, (Object) string0);
      short[] shortArray0 = new short[6];
      short short0 = (short)625;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)155;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      // Undeclared exception!
      try {
        tSynchronizedShortLongMap0.keys(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 1623;
      short[] shortArray0 = new short[3];
      short short0 = (short)1;
      shortArray0[0] = short0;
      short short1 = (short)1665;
      shortArray0[1] = short1;
      short short2 = (short) (-506);
      shortArray0[2] = short2;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) short1;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) short2;
      longArray0[4] = (long) short2;
      longArray0[5] = (long) short1;
      longArray0[6] = (long) shortArray0[0];
      longArray0[7] = (long) short2;
      longArray0[8] = (long) short2;
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      tSynchronizedShortLongMap0.getNoEntryKey();
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap(int0);
      TSynchronizedShortLongMap tSynchronizedShortLongMap1 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap1);
      long[] longArray1 = new long[6];
      long long0 = (-526L);
      longArray1[0] = long0;
      longArray1[1] = (long) int0;
      longArray1[2] = (long) int0;
      longArray1[3] = (long) int0;
      longArray1[4] = (long) int0;
      tSynchronizedShortLongMap1.clear();
      longArray1[5] = (long) int0;
      long[] longArray2 = tSynchronizedShortLongMap1.values(longArray1);
      assertFalse(longArray2.equals(longArray0));
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      String string0 = "";
      tShortLongHashMap0.isEmpty();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      short short0 = (short)1904;
      tSynchronizedShortLongMap0.get(short0);
      tSynchronizedShortLongMap0.size();
      tSynchronizedShortLongMap0.hashCode();
      URI uRI0 = new URI(string0);
      String string1 = uRI0.getScheme();
      TSynchronizedShortLongMap tSynchronizedShortLongMap1 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0, (Object) string1);
      // Undeclared exception!
      try {
        tSynchronizedShortLongMap0.putAll((TShortLongMap) tSynchronizedShortLongMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TShortLongMap tShortLongMap0 = null;
      short short0 = (short)0;
      int int0 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = null;
      try {
        tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap(tShortLongMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short) (-1860);
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short) (-1211);
      shortArray0[2] = short2;
      short short3 = (short)86;
      shortArray0[3] = short3;
      short short4 = (short) (-44);
      shortArray0[4] = short4;
      short short5 = (short) (-1637);
      shortArray0[5] = short5;
      short short6 = (short)934;
      shortArray0[6] = short6;
      short short7 = (short)1387;
      shortArray0[7] = short7;
      long[] longArray0 = new long[10];
      longArray0[0] = (long) short5;
      longArray0[1] = (long) shortArray0[2];
      longArray0[2] = (long) shortArray0[5];
      longArray0[3] = (long) shortArray0[2];
      longArray0[4] = (long) shortArray0[1];
      longArray0[5] = (long) shortArray0[3];
      longArray0[6] = (long) short2;
      longArray0[7] = (long) short3;
      longArray0[8] = (long) short7;
      long long0 = 0L;
      longArray0[9] = long0;
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      short short8 = (short)103;
      boolean boolean0 = tSynchronizedShortLongMap0.containsKey(short8);
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      TShortLongMap tShortLongMap0 = null;
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = null;
      try {
        tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap(tShortLongMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      float float0 = 1.0F;
      short short0 = (short)1587;
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((int) short0);
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      long long0 = 0L;
      String string0 = Long.toHexString(long0);
      TSynchronizedShortLongMap tSynchronizedShortLongMap1 = new TSynchronizedShortLongMap((TShortLongMap) tSynchronizedShortLongMap0, (Object) string0);
      long long1 = 1649L;
      tSynchronizedShortLongMap1.adjustValue(short0, long1);
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap(int0, float0, short0, (long) int0);
      String string1 = Long.toHexString((long) int0);
      TSynchronizedShortLongMap tSynchronizedShortLongMap2 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap1, (Object) string1);
      assertEquals("{}", tSynchronizedShortLongMap2.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1472;
      int int1 = (-1);
      float float0 = (-1746.6824F);
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(int1, float0);
      String string0 = "";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0);
      // Undeclared exception!
      try {
        stringTokenizer0.nextToken(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      TShortLongMap tShortLongMap0 = null;
      Long long0 = new Long((long) int0);
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap(tShortLongMap0, (Object) long0);
      TSynchronizedShortLongMap tSynchronizedShortLongMap1 = new TSynchronizedShortLongMap((TShortLongMap) tSynchronizedShortLongMap0);
      // Undeclared exception!
      try {
        tSynchronizedShortLongMap1.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TShortLongMap tShortLongMap0 = null;
      String string0 = "";
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap(tShortLongMap0, (Object) string0);
      // Undeclared exception!
      try {
        tSynchronizedShortLongMap0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 1576;
      short short0 = (short) (-1);
      TShortLongMap tShortLongMap0 = null;
      int int1 = 0;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = (short) (-604);
      shortArray0[0] = short0;
      short short1 = (short)381;
      shortArray0[1] = short1;
      short short2 = (short)444;
      shortArray0[2] = short2;
      long[] longArray0 = new long[3];
      long long0 = 0L;
      longArray0[0] = long0;
      longArray0[1] = (long) short1;
      longArray0[2] = (long) shortArray0[1];
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap((TShortLongMap) tSynchronizedShortLongMap0);
      String string0 = Long.toBinaryString((long) short1);
      TSynchronizedShortLongMap tSynchronizedShortLongMap1 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap1, (Object) string0);
      tSynchronizedShortLongMap1.iterator();
      assertEquals(3, tSynchronizedShortLongMap0.size());
      assertTrue(tSynchronizedShortLongMap1.equals(tSynchronizedShortLongMap0));
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 458;
      short short0 = (short)1226;
      long long0 = 0L;
      short[] shortArray0 = new short[9];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      shortArray0[7] = short0;
      shortArray0[8] = short0;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) shortArray0[0];
      longArray0[1] = (long) shortArray0[5];
      longArray0[2] = (long) shortArray0[6];
      longArray0[3] = (long) shortArray0[4];
      longArray0[4] = (long) shortArray0[7];
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
      String string0 = "942PR!b9;;";
      File file0 = new File(string0, string0);
      File file1 = file0.getCanonicalFile();
      String string1 = file1.getAbsolutePath();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0, (Object) string1);
      tSynchronizedShortLongMap0.getNoEntryKey();
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap(int0, (float) int0, short0, long0);
      TSynchronizedShortLongMap tSynchronizedShortLongMap1 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap1);
      InputStream inputStream0 = null;
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      // Undeclared exception!
      try {
        dataInputStream0.readUTF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
