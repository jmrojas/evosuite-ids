/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedShortByteMap;
import gnu.trove.impl.sync.TSynchronizedShortSet;
import gnu.trove.map.TShortByteMap;
import gnu.trove.map.hash.TShortByteHashMap;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedShortByteMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      OutputStream outputStream0 = null;
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 369;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(int0);
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap((TShortByteMap) tShortByteHashMap0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = "";
      try {
        byteArrayOutputStream0.toString(string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // 
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 0;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      TSynchronizedShortByteMap tSynchronizedShortByteMap0 = new TSynchronizedShortByteMap((TShortByteMap) tShortByteHashMap0);
      tSynchronizedShortByteMap0.isEmpty();
      tShortByteHashMap0.size();
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap(int0);
      short short0 = (short)0;
      tSynchronizedShortByteMap0.remove(short0);
      tSynchronizedShortByteMap0.increment(short0);
      TSynchronizedShortByteMap tSynchronizedShortByteMap1 = new TSynchronizedShortByteMap((TShortByteMap) tShortByteHashMap1);
      boolean boolean0 = tSynchronizedShortByteMap1.isEmpty();
      assertEquals(true, boolean0);
      
      tSynchronizedShortByteMap1.getNoEntryValue();
      TSynchronizedShortSet tSynchronizedShortSet0 = (TSynchronizedShortSet)tSynchronizedShortByteMap1.keySet();
      assertNotNull(tSynchronizedShortSet0);
      assertEquals(true, tSynchronizedShortByteMap1.isEmpty());
  }

  @Test
  public void test3()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)2030;
      shortArray0[0] = short0;
      short short1 = (short) (-620);
      shortArray0[1] = short1;
      short short2 = (short)9;
      shortArray0[2] = short2;
      short short3 = (short)557;
      shortArray0[3] = short3;
      short short4 = (short) (-921);
      shortArray0[4] = short4;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)19;
      byteArray0[0] = byte0;
      byte byte1 = (byte)109;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(shortArray0, byteArray0);
      TSynchronizedShortByteMap tSynchronizedShortByteMap0 = new TSynchronizedShortByteMap((TShortByteMap) tShortByteHashMap0);
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap((TShortByteMap) tSynchronizedShortByteMap0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string0 = locale0.getScript();
      TSynchronizedShortByteMap tSynchronizedShortByteMap1 = new TSynchronizedShortByteMap((TShortByteMap) tShortByteHashMap1, (Object) string0);
      byte byte3 = (byte)0;
      Byte byte4 = new Byte(byte3);
      TSynchronizedShortByteMap tSynchronizedShortByteMap2 = new TSynchronizedShortByteMap((TShortByteMap) tSynchronizedShortByteMap1, (Object) byte4);
      tSynchronizedShortByteMap2.putIfAbsent(shortArray0[2], (byte) byte4);
      assertEquals(3, tSynchronizedShortByteMap1.size());
      assertTrue(tShortByteHashMap1.equals(tShortByteHashMap0));
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-71);
      float float0 = 538.336F;
      short short0 = (short) (-1635);
      byte byte0 = (byte)0;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(int0, float0, short0, byte0);
      TSynchronizedShortByteMap tSynchronizedShortByteMap0 = new TSynchronizedShortByteMap((TShortByteMap) tShortByteHashMap0);
      int int1 = (-1145);
      float float1 = 0.0F;
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap(int1, float1);
      TSynchronizedShortByteMap tSynchronizedShortByteMap1 = new TSynchronizedShortByteMap((TShortByteMap) tShortByteHashMap1);
      TShortByteHashMap tShortByteHashMap2 = new TShortByteHashMap();
      TSynchronizedShortByteMap tSynchronizedShortByteMap2 = new TSynchronizedShortByteMap((TShortByteMap) tShortByteHashMap2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short)1295;
      shortArray0[0] = short0;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)107;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-49);
      byteArray0[3] = byte3;
      byte byte4 = (byte)34;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-87);
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-95);
      byteArray0[7] = byte7;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(shortArray0, byteArray0);
      String string0 = "pR.5G";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0);
      // Undeclared exception!
      try {
        stringTokenizer0.nextToken();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 1881;
          int int1 = (-1259);
          float float0 = 1184.6329F;
          short short0 = (short) (-1605);
          byte byte0 = (byte)9;
          TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(int1, float0, short0, byte0);
          String string0 = "";
          boolean boolean0 = false;
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0, boolean0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:136)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap((TShortByteMap) tShortByteHashMap0);
      Locale locale0 = Locale.JAPAN;
      String string0 = "?~7~Van'N.Z";
      Locale locale1 = new Locale(string0, string0);
      String string1 = locale0.getDisplayLanguage(locale1);
      TSynchronizedShortByteMap tSynchronizedShortByteMap0 = new TSynchronizedShortByteMap((TShortByteMap) tShortByteHashMap1);
      TSynchronizedShortByteMap tSynchronizedShortByteMap1 = new TSynchronizedShortByteMap((TShortByteMap) tShortByteHashMap1, (Object) string1);
      byte byte0 = tSynchronizedShortByteMap1.getNoEntryValue();
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test8()  throws Throwable  {
      TShortByteMap tShortByteMap0 = null;
      TSynchronizedShortByteMap tSynchronizedShortByteMap0 = null;
      try {
        tSynchronizedShortByteMap0 = new TSynchronizedShortByteMap(tShortByteMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(int0);
      Locale locale0 = Locale.ENGLISH;
      String string0 = locale0.getISO3Country();
      TSynchronizedShortByteMap tSynchronizedShortByteMap0 = new TSynchronizedShortByteMap((TShortByteMap) tShortByteHashMap0, (Object) string0);
      byte byte0 = (byte) (-1);
      tSynchronizedShortByteMap0.containsValue(byte0);
      TSynchronizedShortByteMap tSynchronizedShortByteMap1 = new TSynchronizedShortByteMap((TShortByteMap) tShortByteHashMap0);
      byte[] byteArray0 = tSynchronizedShortByteMap1.values();
      assertNotNull(byteArray0);
      
      int int1 = 1;
      float float0 = (-1.0F);
      float float1 = 758.78253F;
      short short0 = (short)1490;
      byte byte1 = (byte) (-57);
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap(int1, float1, short0, byte1);
      short short1 = (short)1;
      tShortByteHashMap1.containsKey(short1);
      TShortByteHashMap tShortByteHashMap2 = new TShortByteHashMap((TShortByteMap) tShortByteHashMap1);
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      String string1 = locale1.toLanguageTag();
      Locale locale2 = Locale.JAPAN;
      Locale.setDefault(locale2);
      TSynchronizedShortByteMap tSynchronizedShortByteMap2 = new TSynchronizedShortByteMap((TShortByteMap) tShortByteHashMap2, (Object) string1);
      byte byte2 = (byte)1;
      tSynchronizedShortByteMap2.put(short0, byte2);
      TShortByteHashMap tShortByteHashMap3 = new TShortByteHashMap(int1, float0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      tSynchronizedShortByteMap2.keySet();
      assertEquals(1, tSynchronizedShortByteMap2.size());
      
      tShortByteHashMap3.compact();
      String string2 = hashMap0.toString();
      TSynchronizedShortByteMap tSynchronizedShortByteMap3 = new TSynchronizedShortByteMap((TShortByteMap) tShortByteHashMap3, (Object) string2);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte2;
      shortArray0[2] = (short) byte1;
      shortArray0[3] = short0;
      short short2 = (short) (-1);
      shortArray0[4] = short2;
      shortArray0[5] = (short) byte1;
      tSynchronizedShortByteMap0.keys(shortArray0);
      boolean boolean0 = tSynchronizedShortByteMap3.isEmpty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 247;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(int0);
      TSynchronizedShortByteMap tSynchronizedShortByteMap0 = new TSynchronizedShortByteMap((TShortByteMap) tShortByteHashMap0);
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap((TShortByteMap) tSynchronizedShortByteMap0);
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = locale0.getISO3Country();
      TSynchronizedShortByteMap tSynchronizedShortByteMap1 = new TSynchronizedShortByteMap((TShortByteMap) tShortByteHashMap1, (Object) string0);
      TSynchronizedShortSet tSynchronizedShortSet0 = (TSynchronizedShortSet)tSynchronizedShortByteMap1.keySet();
      assertNotNull(tSynchronizedShortSet0);
      
      TShortByteHashMap tShortByteHashMap2 = new TShortByteHashMap(int0, int0);
      TSynchronizedShortByteMap tSynchronizedShortByteMap2 = new TSynchronizedShortByteMap((TShortByteMap) tShortByteHashMap2);
      short short0 = (short)1263;
      tSynchronizedShortByteMap2.increment(short0);
      String string1 = "*`-P<$^=_X2.@8}";
      tSynchronizedShortByteMap2.values();
      tSynchronizedShortByteMap2.putAll((TShortByteMap) tShortByteHashMap2);
      boolean boolean0 = true;
      StringTokenizer stringTokenizer0 = new StringTokenizer(string1, string1, boolean0);
      tSynchronizedShortByteMap2.valueCollection();
      String string2 = stringTokenizer0.nextToken();
      TSynchronizedShortByteMap tSynchronizedShortByteMap3 = new TSynchronizedShortByteMap((TShortByteMap) tSynchronizedShortByteMap2, (Object) string2);
      short short1 = (short) (-573);
      byte byte0 = (byte)0;
      byte byte1 = (byte)75;
      tSynchronizedShortByteMap3.adjustOrPutValue(short1, byte0, byte1);
      assertEquals(false, tShortByteHashMap2.isEmpty());
      
      int int1 = 1;
      TShortByteHashMap tShortByteHashMap3 = new TShortByteHashMap(int1, int1);
      tSynchronizedShortByteMap1.values();
      TSynchronizedShortByteMap tSynchronizedShortByteMap4 = new TSynchronizedShortByteMap((TShortByteMap) tShortByteHashMap3);
      short short2 = (short)90;
      tSynchronizedShortByteMap4.increment(short2);
      TSynchronizedShortByteMap tSynchronizedShortByteMap5 = new TSynchronizedShortByteMap((TShortByteMap) tSynchronizedShortByteMap4);
      tSynchronizedShortByteMap5.valueCollection();
      short short3 = (short)1198;
      Short short4 = new Short(short3);
      tSynchronizedShortByteMap4.isEmpty();
      String string3 = short4.toString();
      tSynchronizedShortByteMap5.toString();
      boolean boolean1 = tSynchronizedShortByteMap4.equals((Object) string3);
      assertEquals(false, boolean1);
  }

  @Test
  public void test11()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short) (-472);
      shortArray0[1] = short1;
      short short2 = (short) (-305);
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short) (-1797);
      shortArray0[4] = short4;
      short short5 = (short)1;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short) (-2004);
      shortArray0[7] = short7;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-57);
      byteArray0[0] = byte0;
      byte byte1 = (byte)115;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)93;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-87);
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(shortArray0, byteArray0);
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap((TShortByteMap) tShortByteHashMap0);
      TSynchronizedShortByteMap tSynchronizedShortByteMap0 = new TSynchronizedShortByteMap((TShortByteMap) tShortByteHashMap1);
      TShortByteMap tShortByteMap0 = null;
      Object object0 = null;
      TSynchronizedShortByteMap tSynchronizedShortByteMap1 = new TSynchronizedShortByteMap(tShortByteMap0, object0);
      short short8 = (short) (-1630);
      // Undeclared exception!
      try {
        tSynchronizedShortByteMap1.get(short8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short) (-1);
      shortArray0[0] = short0;
      short short1 = (short) (-1686);
      shortArray0[1] = short1;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)69;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-109);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-11);
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-120);
      byteArray0[7] = byte7;
      byte byte8 = (byte)81;
      byteArray0[8] = byte8;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(shortArray0, byteArray0);
      String string0 = "+#AD4`D";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in fragment at index 5: +#AD4`D:+%23AD4%60D#+%23AD4%60D
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 601;
      int int1 = 672196673;
      TShortByteHashMap tShortByteHashMap0 = null;
      try {
        tShortByteHashMap0 = new TShortByteHashMap(int1);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1458;
      short[] shortArray0 = new short[3];
      short short0 = (short)918;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)1676;
      shortArray0[2] = short2;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)40;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)84;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)77;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte)122;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-65);
      byteArray0[8] = byte8;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(shortArray0, byteArray0);
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://#
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      TSynchronizedShortByteMap tSynchronizedShortByteMap0 = new TSynchronizedShortByteMap((TShortByteMap) tShortByteHashMap0);
      short short0 = (short)1941;
      byte byte0 = (byte)50;
      tSynchronizedShortByteMap0.adjustOrPutValue(short0, byte0, byte0);
      TSynchronizedShortByteMap tSynchronizedShortByteMap1 = new TSynchronizedShortByteMap((TShortByteMap) tSynchronizedShortByteMap0);
      tSynchronizedShortByteMap1.hashCode();
      tSynchronizedShortByteMap1.keys();
      assertEquals(false, tShortByteHashMap0.isEmpty());
      
      TShortByteMap tShortByteMap0 = null;
      int int0 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      String string0 = "";
      try {
        byteArrayOutputStream0.toString(string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // 
         //
      }
  }

//   @Test
//   public void test16()  throws Throwable  {
//       int int0 = 102;
//       TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(int0);
//       TSynchronizedShortByteMap tSynchronizedShortByteMap0 = new TSynchronizedShortByteMap((TShortByteMap) tShortByteHashMap0);
//       assertEquals(0, tSynchronizedShortByteMap0.getNoEntryKey());
//   }

  @Test
  public void test17()  throws Throwable  {
      TShortByteMap tShortByteMap0 = null;
      String string0 = "5G<%G;wiU";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 5G<%G;wiU://5G<%G;wiU5G%3C%25G;wiU#5G%3C%25G;wiU
         //
      }
  }
}
