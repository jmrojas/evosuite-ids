/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TDoubleObjectMapDecorator;
import gnu.trove.map.TDoubleObjectMap;
import gnu.trove.map.hash.TDoubleObjectHashMap;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleObjectMapDecoratorEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TDoubleObjectMapDecorator<AbstractMap.SimpleEntry<Double, Double>> tDoubleObjectMapDecorator0 = new TDoubleObjectMapDecorator<AbstractMap.SimpleEntry<Double, Double>>();
      // Undeclared exception!
      try {
        tDoubleObjectMapDecorator0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TDoubleObjectMapDecorator<AbstractMap.SimpleImmutableEntry<Integer, Object>> tDoubleObjectMapDecorator0 = new TDoubleObjectMapDecorator<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      // Undeclared exception!
      try {
        tDoubleObjectMapDecorator0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 0;
      TDoubleObjectMap<Double> tDoubleObjectMap0 = null;
      TDoubleObjectMapDecorator<Double> tDoubleObjectMapDecorator0 = new TDoubleObjectMapDecorator<Double>(tDoubleObjectMap0);
      String string0 = "#G%!O3_zUR $)*aU";
      try {
        Double.valueOf(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"#G%!O3_zUR $)*aU\"
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-1549);
      TDoubleObjectMapDecorator<Double> tDoubleObjectMapDecorator0 = new TDoubleObjectMapDecorator<Double>();
      // Undeclared exception!
      try {
        tDoubleObjectMapDecorator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-1);
      Double double0 = new Double((double) int0);
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double0, double0);
      AbstractMap.SimpleEntry<Object, Double> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Double>((Map.Entry<?, ? extends Double>) abstractMap_SimpleImmutableEntry0);
      abstractMap_SimpleEntry0.getKey();
      TDoubleObjectMap<String> tDoubleObjectMap0 = null;
      TDoubleObjectMapDecorator<String> tDoubleObjectMapDecorator0 = new TDoubleObjectMapDecorator<String>(tDoubleObjectMap0);
      // Undeclared exception!
      try {
        tDoubleObjectMapDecorator0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TDoubleObjectMapDecorator<String> tDoubleObjectMapDecorator0 = new TDoubleObjectMapDecorator<String>();
          String string0 = "5y-)h>92G}paxTT";
          double double0 = 68.29149316487955;
          Double double1 = new Double(double0);
          AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double1, (Double) double0);
          abstractMap_SimpleImmutableEntry0.getValue();
          File file0 = new File(string0);
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"5y-)h>92G}paxTT\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:165)
             // java.io.PrintStream.<init>(PrintStream.java:279)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
      TDoubleObjectMapDecorator<Integer> tDoubleObjectMapDecorator0 = new TDoubleObjectMapDecorator<Integer>();
      TDoubleObjectMapDecorator<TDoubleObjectHashMap<Object>> tDoubleObjectMapDecorator1 = new TDoubleObjectMapDecorator<TDoubleObjectHashMap<Object>>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.getDefault(locale_Category0);
      String string0 = "";
      Locale locale0 = new Locale(string0, string0);
      TDoubleObjectMapDecorator<Double> tDoubleObjectMapDecorator2 = new TDoubleObjectMapDecorator<Double>();
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>();
      tDoubleObjectMapDecorator2.get((Object) tDoubleObjectHashMap0);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://#
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 2010;
      TDoubleObjectMapDecorator<Object> tDoubleObjectMapDecorator0 = new TDoubleObjectMapDecorator<Object>();
      // Undeclared exception!
      try {
        tDoubleObjectMapDecorator0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 117;
      TDoubleObjectHashMap<String> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<String>(int0);
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Object>();
      TDoubleObjectMapDecorator<Object> tDoubleObjectMapDecorator0 = new TDoubleObjectMapDecorator<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap1);
      tDoubleObjectMapDecorator0.clear();
      double double0 = 1.7976931348623157E308;
      Double double1 = Double.valueOf(double0);
      Double double2 = new Double((double) double1);
      AbstractMap.SimpleImmutableEntry<Double, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Object>(double1, (Object) double2);
      AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<Double, Object>, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<Double, Object>, Integer>(abstractMap_SimpleImmutableEntry0, (Integer) int0);
      abstractMap_SimpleImmutableEntry1.getValue();
      TDoubleObjectHashMap<AbstractMap.SimpleEntry<Integer, Double>> tDoubleObjectHashMap2 = new TDoubleObjectHashMap<AbstractMap.SimpleEntry<Integer, Double>>();
      TDoubleObjectMapDecorator<AbstractMap.SimpleEntry<Integer, Double>> tDoubleObjectMapDecorator1 = new TDoubleObjectMapDecorator<AbstractMap.SimpleEntry<Integer, Double>>((TDoubleObjectMap<AbstractMap.SimpleEntry<Integer, Double>>) tDoubleObjectHashMap2);
      String string0 = "=q";
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // =q (No such file or directory)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TDoubleObjectMapDecorator<AbstractMap.SimpleEntry<Double, Integer>> tDoubleObjectMapDecorator0 = new TDoubleObjectMapDecorator<AbstractMap.SimpleEntry<Double, Integer>>();
          Locale locale0 = Locale.FRENCH;
          String string0 = locale0.toString();
          TDoubleObjectMapDecorator<Double> tDoubleObjectMapDecorator1 = new TDoubleObjectMapDecorator<Double>();
          double double0 = (-346.21473993767165);
          String string1 = Double.toString(double0);
          tDoubleObjectMapDecorator1.remove((Object) string1);
          boolean boolean0 = false;
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0, boolean0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"fr\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:136)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
      TDoubleObjectHashMap<String> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<String>();
      TDoubleObjectMapDecorator<String> tDoubleObjectMapDecorator0 = new TDoubleObjectMapDecorator<String>((TDoubleObjectMap<String>) tDoubleObjectHashMap0);
      String string0 = "Ax->ID81<n=";
      String string1 = "A`DQ8]ItAb<!=mIDYW&";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string1, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 3: Ax->ID81<n=:A%60DQ8]ItAb%3C!=mIDYW&#Ax-%3EID81%3Cn=
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>();
      TDoubleObjectMapDecorator<Double> tDoubleObjectMapDecorator0 = new TDoubleObjectMapDecorator<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      double double0 = 539.2761396567997;
      Double double1 = new Double(double0);
      tDoubleObjectMapDecorator0.put(double1, (Double) double0);
      assertEquals(false, tDoubleObjectMapDecorator0.isEmpty());
      assertEquals("{539.2761396567997=539.2761396567997}", tDoubleObjectHashMap0.toString());
  }
}
