/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.hash.TCharIntHashMap;
import gnu.trove.procedure.TCharProcedure;
import java.io.ByteArrayOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharIntHashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 11 covered goals:
   * 1 gnu.trove.impl.hash.TCharIntHash.removeAt(I)V: root-Branch
   * 2 gnu.trove.impl.hash.TCharIntHash.insertKeyAt(IC)V: root-Branch
   * 3 gnu.trove.impl.hash.TCharIntHash.<init>(I)V: root-Branch
   * 4 gnu.trove.impl.hash.TCharIntHash.index(C)I: I37 Branch 5 IFNE L228 - true
   * 5 gnu.trove.impl.hash.TCharIntHash.index(C)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 6 gnu.trove.impl.hash.TCharIntHash.index(C)I: I51 Branch 7 IF_ICMPNE L231 - false
   * 7 gnu.trove.impl.hash.TCharIntHash.insertKey(C)I: I30 Branch 13 IFNE L279 - true
   * 8 gnu.trove.impl.hash.TCharIntHash.insertKey(C)I: I30 Branch 13 IFNE L279 - false
   * 9 gnu.trove.impl.hash.TCharIntHash.insertKey(C)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 10 gnu.trove.impl.hash.TCharIntHash.insertKey(C)I: I56 Branch 15 IF_ICMPNE L286 - false
   * 11 gnu.trove.impl.hash.TCharIntHash.setUp(I)I: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      char[] charArray0 = new char[9];
      int[] intArray0 = new int[3];
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      assertEquals(false, tCharIntHashMap0.isEmpty());
      
      tCharIntHashMap0.remove('\u0000');
      assertEquals(0, tCharIntHashMap0.size());
      assertEquals(true, tCharIntHashMap0.isEmpty());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TCharIntHash.getNoEntryKey()C: root-Branch
   * 2 gnu.trove.impl.hash.TCharIntHash.<init>(IF)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap((-1458), (-1458));
      char char0 = tCharIntHashMap0.getNoEntryKey();
      assertEquals(0, tCharIntHashMap0.getNoEntryValue());
      assertEquals('\u0000', char0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TCharIntHash.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      char[] charArray0 = new char[2];
      int[] intArray0 = new int[8];
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) filterOutputStream0);
      tCharIntHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(17, tCharIntHashMap0.capacity());
      assertEquals(0, tCharIntHashMap0.getNoEntryValue());
      assertEquals(1, tCharIntHashMap0.size());
      assertEquals("{\u0000=0}", tCharIntHashMap0.toString());
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TCharIntHash.getNoEntryValue()I: root-Branch
   * 2 gnu.trove.impl.hash.TCharIntHash.<init>()V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      int int0 = tCharIntHashMap0.getNoEntryValue();
      assertEquals('\u0000', tCharIntHashMap0.getNoEntryKey());
      assertEquals(0, int0);
      assertEquals(23, tCharIntHashMap0.capacity());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TCharIntHash.contains(C)Z: I5 Branch 1 IFLT L178 - true
   * 2 gnu.trove.impl.hash.TCharIntHash.index(C)I: I37 Branch 5 IFNE L228 - false
   */

  @Test
  public void test4()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap((-1458), (-1458));
      boolean boolean0 = tCharIntHashMap0.containsKey('(');
      assertEquals(0, tCharIntHashMap0.getNoEntryValue());
      assertEquals('\u0000', tCharIntHashMap0.getNoEntryKey());
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TCharIntHash.contains(C)Z: I5 Branch 1 IFLT L178 - false
   * 2 gnu.trove.impl.hash.TCharIntHash.index(C)I: I51 Branch 7 IF_ICMPNE L231 - false
   * 3 gnu.trove.impl.hash.TCharIntHash.<init>(IFCI)V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(0, (float) 0, '>', (int) '>');
      tCharIntHashMap0.put('a', 'a');
      boolean boolean0 = tCharIntHashMap0.containsKey('a');
      assertEquals(7, tCharIntHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TCharIntHash.forEach(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 2 IFLE L192 - true
   * 2 gnu.trove.impl.hash.TCharIntHash.forEach(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TCharIntHash.forEach(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   * 4 gnu.trove.impl.hash.TCharIntHash.<init>()V: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      boolean boolean0 = tCharIntHashMap0.forEachKey((TCharProcedure) null);
      assertEquals(true, boolean0);
      assertEquals(23, tCharIntHashMap0.capacity());
      assertEquals(0, tCharIntHashMap0.getNoEntryValue());
      assertEquals('\u0000', tCharIntHashMap0.getNoEntryKey());
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TCharIntHash.forEach(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - false
   * 2 gnu.trove.impl.hash.TCharIntHash.forEach(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 2 IFLE L192 - false
   */

  @Test
  public void test7()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(0, (float) 0, '>', (int) '>');
      tCharIntHashMap0.put('a', 'a');
      // Undeclared exception!
      try {
        tCharIntHashMap0.forEach((TCharProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 8
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TCharIntHash.index(C)I: I51 Branch 7 IF_ICMPNE L231 - true
   * 2 gnu.trove.impl.hash.TCharIntHash.indexRehashed(CIIB)I: I29 Branch 8 IFGE L245 - true
   * 3 gnu.trove.impl.hash.TCharIntHash.<init>(IFCI)V: root-Branch
   * 4 gnu.trove.impl.hash.TCharIntHash.indexRehashed(CIIB)I: I46 Branch 9 IFNE L250 - false
   */

  @Test
  public void test8()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(0, (float) 0, '>', (int) '>');
      tCharIntHashMap0.put('a', 'a');
      boolean boolean0 = tCharIntHashMap0.containsKey('>');
      assertEquals(false, tCharIntHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 9
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.TCharIntHash.indexRehashed(CIIB)I: I46 Branch 9 IFNE L250 - true
   * 2 gnu.trove.impl.hash.TCharIntHash.indexRehashed(CIIB)I: I58 Branch 10 IF_ICMPNE L254 - true
   * 3 gnu.trove.impl.hash.TCharIntHash.indexRehashed(CIIB)I: I70 Branch 12 IF_ICMPNE L256 - true
   * 4 gnu.trove.impl.hash.TCharIntHash.indexRehashed(CIIB)I: I46 Branch 9 IFNE L250 - false
   * 5 gnu.trove.impl.hash.TCharIntHash.index(C)I: I46 Branch 6 IF_ICMPNE L231 - true
   * 6 gnu.trove.impl.hash.TCharIntHash.indexRehashed(CIIB)I: I29 Branch 8 IFGE L245 - false
   */

  @Test
  public void test9()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap((-1458), (-1458));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      tCharIntHashMap0._states = byteArray0;
      boolean boolean0 = tCharIntHashMap0.containsKey('(');
      assertEquals(false, boolean0);
      assertEquals('\u0000', tCharIntHashMap0.getNoEntryKey());
      assertEquals(0, tCharIntHashMap0.getNoEntryValue());
  }

  //Test case number: 10
  /*
   * 12 covered goals:
   * 1 gnu.trove.impl.hash.TCharIntHash.indexRehashed(CIIB)I: I58 Branch 10 IF_ICMPNE L254 - false
   * 2 gnu.trove.impl.hash.TCharIntHash.indexRehashed(CIIB)I: I61 Branch 11 IF_ICMPEQ L254 - false
   * 3 gnu.trove.impl.hash.TCharIntHash.insertKey(C)I: I56 Branch 15 IF_ICMPNE L286 - true
   * 4 gnu.trove.impl.hash.TCharIntHash.insertKeyRehash(CIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 5 gnu.trove.impl.hash.TCharIntHash.insertKeyRehash(CIIB)I: I45 Branch 18 IFGE L310 - false
   * 6 gnu.trove.impl.hash.TCharIntHash.insertKeyRehash(CIIB)I: I62 Branch 19 IFNE L316 - true
   * 7 gnu.trove.impl.hash.TCharIntHash.insertKeyRehash(CIIB)I: I62 Branch 19 IFNE L316 - false
   * 8 gnu.trove.impl.hash.TCharIntHash.insertKeyRehash(CIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 9 gnu.trove.impl.hash.TCharIntHash.insertKeyRehash(CIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 10 gnu.trove.impl.hash.TCharIntHash.insertKeyRehash(CIIB)I: I103 Branch 22 IF_ICMPNE L327 - false
   * 11 gnu.trove.impl.hash.TCharIntHash.index(C)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 12 gnu.trove.impl.hash.TCharIntHash.index(C)I: I51 Branch 7 IF_ICMPNE L231 - true
   */

  @Test
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      int[] intArray0 = new int[8];
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      boolean boolean0 = tCharIntHashMap0.adjustValue('\u0000', 'f');
      assertEquals("{\u0000=102, f=0}", tCharIntHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 11
  /*
   * 10 covered goals:
   * 1 gnu.trove.impl.hash.TCharIntHash.indexRehashed(CIIB)I: I70 Branch 12 IF_ICMPNE L256 - false
   * 2 gnu.trove.impl.hash.TCharIntHash.<init>(IF)V: root-Branch
   * 3 gnu.trove.impl.hash.TCharIntHash.contains(C)Z: I5 Branch 1 IFLT L178 - true
   * 4 gnu.trove.impl.hash.TCharIntHash.index(C)I: I37 Branch 5 IFNE L228 - true
   * 5 gnu.trove.impl.hash.TCharIntHash.index(C)I: I46 Branch 6 IF_ICMPNE L231 - true
   * 6 gnu.trove.impl.hash.TCharIntHash.indexRehashed(CIIB)I: I29 Branch 8 IFGE L245 - true
   * 7 gnu.trove.impl.hash.TCharIntHash.indexRehashed(CIIB)I: I29 Branch 8 IFGE L245 - false
   * 8 gnu.trove.impl.hash.TCharIntHash.indexRehashed(CIIB)I: I46 Branch 9 IFNE L250 - true
   * 9 gnu.trove.impl.hash.TCharIntHash.indexRehashed(CIIB)I: I58 Branch 10 IF_ICMPNE L254 - true
   * 10 gnu.trove.impl.hash.TCharIntHash.indexRehashed(CIIB)I: I70 Branch 12 IF_ICMPNE L256 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap((-1458), (-1458));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      tCharIntHashMap0._states = byteArray0;
      boolean boolean0 = tCharIntHashMap0.containsKey('(');
      assertEquals('\u0000', tCharIntHashMap0.getNoEntryKey());
      assertEquals(false, boolean0);
  }

  //Test case number: 12
  /*
   * 11 covered goals:
   * 1 gnu.trove.impl.hash.TCharIntHash.insertKeyRehash(CIIB)I: I103 Branch 22 IF_ICMPNE L327 - true
   * 2 gnu.trove.impl.hash.TCharIntHash.insertKeyAt(IC)V: root-Branch
   * 3 gnu.trove.impl.hash.TCharIntHash.insertKey(C)I: I30 Branch 13 IFNE L279 - false
   * 4 gnu.trove.impl.hash.TCharIntHash.insertKey(C)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 5 gnu.trove.impl.hash.TCharIntHash.insertKey(C)I: I56 Branch 15 IF_ICMPNE L286 - true
   * 6 gnu.trove.impl.hash.TCharIntHash.insertKey(C)I: I56 Branch 15 IF_ICMPNE L286 - false
   * 7 gnu.trove.impl.hash.TCharIntHash.insertKeyRehash(CIIB)I: I62 Branch 19 IFNE L316 - false
   * 8 gnu.trove.impl.hash.TCharIntHash.insertKeyRehash(CIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 9 gnu.trove.impl.hash.TCharIntHash.insertKeyRehash(CIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 10 gnu.trove.impl.hash.TCharIntHash.insertKeyRehash(CIIB)I: I45 Branch 18 IFGE L310 - true
   * 11 gnu.trove.impl.hash.TCharIntHash.insertKeyRehash(CIIB)I: I115 Branch 23 IF_ICMPNE L332 - true
   */

  @Test
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'z';
      charArray0[7] = 'y';
      charArray0[4] = 'i';
      int[] intArray0 = new int[8];
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      assertEquals('\u0000', tCharIntHashMap0.getNoEntryKey());
      assertEquals("{y=0, z=0, i=0, \u0000=0}", tCharIntHashMap0.toString());
      assertEquals(0, tCharIntHashMap0.getNoEntryValue());
      assertEquals(4, tCharIntHashMap0.size());
  }

  //Test case number: 13
  /*
   * 12 covered goals:
   * 1 gnu.trove.impl.hash.TCharIntHash.insertKeyRehash(CIIB)I: I115 Branch 23 IF_ICMPNE L332 - false
   * 2 gnu.trove.impl.hash.TCharIntHash.insertKeyRehash(CIIB)I: I120 Branch 24 IF_ICMPEQ L336 - true
   * 3 gnu.trove.impl.hash.TCharIntHash.setUp(I)I: root-Branch
   * 4 gnu.trove.impl.hash.TCharIntHash.<init>(I)V: root-Branch
   * 5 gnu.trove.impl.hash.TCharIntHash.insertKey(C)I: I30 Branch 13 IFNE L279 - true
   * 6 gnu.trove.impl.hash.TCharIntHash.insertKey(C)I: I50 Branch 14 IF_ICMPNE L286 - true
   * 7 gnu.trove.impl.hash.TCharIntHash.insertKeyRehash(CIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 8 gnu.trove.impl.hash.TCharIntHash.insertKeyRehash(CIIB)I: I45 Branch 18 IFGE L310 - true
   * 9 gnu.trove.impl.hash.TCharIntHash.insertKeyRehash(CIIB)I: I45 Branch 18 IFGE L310 - false
   * 10 gnu.trove.impl.hash.TCharIntHash.insertKeyRehash(CIIB)I: I62 Branch 19 IFNE L316 - true
   * 11 gnu.trove.impl.hash.TCharIntHash.insertKeyRehash(CIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 12 gnu.trove.impl.hash.TCharIntHash.insertKeyRehash(CIIB)I: I115 Branch 23 IF_ICMPNE L332 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)103;
      tCharIntHashMap0._states = byteArray0;
      // Undeclared exception!
      try {
        tCharIntHashMap0.adjustOrPutValue('}', (int) (byte)103, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No free or removed slots available. Key set full?!!
         //
      }
  }
}
