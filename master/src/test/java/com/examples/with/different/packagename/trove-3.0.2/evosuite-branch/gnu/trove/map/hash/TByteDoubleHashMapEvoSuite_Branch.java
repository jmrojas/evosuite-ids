/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TDoubleFunction;
import gnu.trove.map.TByteDoubleMap;
import gnu.trove.map.hash.TByteDoubleHashMap;
import gnu.trove.procedure.TByteDoubleProcedure;
import gnu.trove.procedure.TByteProcedure;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.set.TByteSet;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteDoubleHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.containsKey(B)Z: root-Branch
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.setUp(I)I: root-Branch
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.<init>()V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap();
      tByteDoubleHashMap0.containsKey((byte)0);
      assertEquals(23, tByteDoubleHashMap0.capacity());
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.keySet()Lgnu/trove/set/TByteSet;: root-Branch
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.<init>(IF)V: root-Branch
   * 3 gnu.trove.map.hash.TByteDoubleHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TByteDoubleHashMap;)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap((-1039), (-1039));
      TByteSet tByteSet0 = tByteDoubleHashMap0.keySet();
      assertEquals(true, tByteSet0.isEmpty());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.clear()V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap();
      tByteDoubleHashMap0.clear();
      assertEquals("{}", tByteDoubleHashMap0.toString());
      assertEquals(23, tByteDoubleHashMap0.capacity());
  }

  //Test case number: 3
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.put(BD)D: root-Branch
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.<init>([B[D)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 4 gnu.trove.map.hash.TByteDoubleHashMap.<init>([B[D)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 5 gnu.trove.map.hash.TByteDoubleHashMap.doPut(BDI)D: I12 Branch 40 IFGE L214 - true
   * 6 gnu.trove.map.hash.TByteDoubleHashMap.doPut(BDI)D: I41 Branch 41 IFEQ L221 - false
   * 7 gnu.trove.map.hash.TByteDoubleHashMap.remove(B)D: I14 Branch 46 IFLT L276 - false
   */

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      double[] doubleArray0 = new double[6];
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(byteArray0, doubleArray0);
      assertEquals("{46=0.0, 0=0.0}", tByteDoubleHashMap0.toString());
      
      double double0 = tByteDoubleHashMap0.remove((byte)46);
      assertEquals("{0=0.0}", tByteDoubleHashMap0.toString());
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.valueCollection()Lgnu/trove/TDoubleCollection;: root-Branch
   * 2 gnu.trove.map.hash.TByteDoubleHashMap$TValueView.<init>(Lgnu/trove/map/hash/TByteDoubleHashMap;)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap();
      tByteDoubleHashMap0.valueCollection();
      assertEquals(23, tByteDoubleHashMap0.capacity());
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.increment(B)Z: root-Branch
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.adjustValue(BD)Z: I9 Branch 71 IFGE L477 - false
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap((-18));
      boolean boolean0 = tByteDoubleHashMap0.increment((byte)52);
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.forEachKey(Lgnu/trove/procedure/TByteProcedure;)Z: root-Branch
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.doPut(BDI)D: I12 Branch 40 IFGE L214 - false
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.doPut(BDI)D: I41 Branch 41 IFEQ L221 - true
   */

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      double[] doubleArray0 = new double[3];
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(byteArray0, doubleArray0);
      // Undeclared exception!
      try {
        tByteDoubleHashMap0.forEachKey((TByteProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 7
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.<init>(Lgnu/trove/map/TByteDoubleMap;)V: I38 Branch 35 IFEQ L139 - false
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.<init>(Lgnu/trove/map/TByteDoubleMap;)V: I52 Branch 36 IFEQ L143 - false
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 4 gnu.trove.map.hash.TByteDoubleHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 5 gnu.trove.map.hash.TByteDoubleHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 6 gnu.trove.map.hash.TByteDoubleHashMap.iterator()Lgnu/trove/iterator/TByteDoubleIterator;: root-Branch
   * 7 gnu.trove.map.hash.TByteDoubleHashMap.<init>(IFBD)V: root-Branch
   * 8 gnu.trove.map.hash.TByteDoubleHashMap.putAll(Lgnu/trove/map/TByteDoubleMap;)V: I15 Branch 43 IFEQ L243 - true
   * 9 gnu.trove.map.hash.TByteDoubleHashMap.<init>(Lgnu/trove/map/TByteDoubleMap;)V: I10 Branch 34 IFEQ L133 - false
   * 10 gnu.trove.map.hash.TByteDoubleHashMap$TByteDoubleHashIterator.<init>(Lgnu/trove/map/hash/TByteDoubleHashMap;Lgnu/trove/map/hash/TByteDoubleHashMap;)V: root-Branch
   */

//   @Test
//   public void test7()  throws Throwable  {
//       TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap((int) (byte)0, (-764.57196F), (byte)119, (double) (-764.57196F));
//       TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap((TByteDoubleMap) tByteDoubleHashMap0);
//       assertEquals((-764.5719604492188), tByteDoubleHashMap1.getNoEntryValue(), 0.01D);
//       assertEquals(3, tByteDoubleHashMap1.capacity());
//       assertEquals(119, tByteDoubleHashMap1.getNoEntryKey());
//   }

  //Test case number: 8
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.putIfAbsent(BD)D: I9 Branch 39 IFGE L205 - false
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.adjustOrPutValue(BDD)D: I9 Branch 72 IFGE L491 - true
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.adjustOrPutValue(BDD)D: I58 Branch 73 IFEQ L502 - false
   */

  @Test
  public void test8()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap();
      tByteDoubleHashMap0.adjustOrPutValue((byte)0, 215.23906722184523, (double) (byte)0);
      double double0 = tByteDoubleHashMap0.putIfAbsent((byte)0, 0.0);
      assertEquals(false, tByteDoubleHashMap0.isEmpty());
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   */

  @Test
  public void test9()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap();
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      tByteDoubleHashMap0.putAll((Map<? extends Byte, ? extends Double>) hashMap0);
      assertEquals(23, tByteDoubleHashMap0.capacity());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.get(B)D: I9 Branch 44 IFGE L253 - false
   */

  @Test
  public void test10()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap((-1039), (-1039));
      double double0 = tByteDoubleHashMap0.get((byte)96);
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap((-18));
      tByteDoubleHashMap0.adjustOrPutValue((byte)1, (double) (-18), (-1835.487090777323));
      boolean boolean0 = tByteDoubleHashMap0.isEmpty();
      assertEquals(1, tByteDoubleHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test12()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(15);
      boolean boolean0 = tByteDoubleHashMap0.isEmpty();
      assertEquals(31, tByteDoubleHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.remove(B)D: I14 Branch 46 IFLT L276 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(0, 0);
      double double0 = tByteDoubleHashMap0.remove((byte) (-120));
      assertEquals(0, tByteDoubleHashMap0.size());
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 14
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.keys()[B: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.keys()[B: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.keys()[B: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TByteDoubleHashMap.keys()[B: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test14()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap();
      tByteDoubleHashMap0.adjustOrPutValue((byte)0, 215.23906722184523, (double) (byte)0);
      tByteDoubleHashMap0.keys();
      assertEquals("{0=0.0}", tByteDoubleHashMap0.toString());
      assertEquals(1, tByteDoubleHashMap0.size());
  }

  //Test case number: 15
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.keys([B)[B: I10 Branch 49 IF_ICMPGE L315 - true
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.keys([B)[B: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.keys([B)[B: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TByteDoubleHashMap.keys([B)[B: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap((-18));
      byte[] byteArray0 = tByteDoubleHashMap0.keys(tByteDoubleHashMap0._states);
      assertNotNull(byteArray0);
  }

  //Test case number: 16
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.keys([B)[B: I10 Branch 49 IF_ICMPGE L315 - false
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.keys([B)[B: I44 Branch 51 IF_ICMPNE L323 - false
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.keys([B)[B: I37 Branch 50 IFLE L322 - true
   * 4 gnu.trove.map.hash.TByteDoubleHashMap.keys([B)[B: I37 Branch 50 IFLE L322 - false
   * 5 gnu.trove.map.hash.TByteDoubleHashMap.keys([B)[B: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap();
      byte[] byteArray0 = new byte[1];
      tByteDoubleHashMap0.put((byte)0, 0.0);
      tByteDoubleHashMap0.put((byte)36, (-1703.679958328302));
      tByteDoubleHashMap0.keys(byteArray0);
      assertEquals(2, tByteDoubleHashMap0.size());
      assertEquals("{36=-1703.679958328302, 0=0.0}", tByteDoubleHashMap0.toString());
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.values()[D: I27 Branch 52 IFLE L343 - true
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.values()[D: I27 Branch 52 IFLE L343 - false
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.values()[D: I34 Branch 53 IF_ICMPNE L344 - true
   * 4 gnu.trove.map.hash.TByteDoubleHashMap.values()[D: I34 Branch 53 IF_ICMPNE L344 - false
   */

  @Test
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      double[] doubleArray0 = new double[6];
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(byteArray0, doubleArray0);
      double[] doubleArray1 = tByteDoubleHashMap0.values();
      assertNotNull(doubleArray1);
      assertEquals(17, tByteDoubleHashMap0.capacity());
      assertEquals(1, tByteDoubleHashMap0.size());
      assertEquals("{0=0.0}", tByteDoubleHashMap0.toString());
      assertEquals(false, tByteDoubleHashMap0.isEmpty());
  }

  //Test case number: 18
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.values([D)[D: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.values([D)[D: I44 Branch 56 IF_ICMPNE L363 - false
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.values([D)[D: I10 Branch 54 IF_ICMPGE L355 - true
   * 4 gnu.trove.map.hash.TByteDoubleHashMap.values([D)[D: I37 Branch 55 IFLE L362 - true
   * 5 gnu.trove.map.hash.TByteDoubleHashMap.values([D)[D: I37 Branch 55 IFLE L362 - false
   * 6 gnu.trove.map.hash.TByteDoubleHashMap.values([D)[D: I44 Branch 56 IF_ICMPNE L363 - true
   * 7 gnu.trove.map.hash.TByteDoubleHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   */

  @Test
  public void test18()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap((int) (byte)0);
      tByteDoubleHashMap0.put((byte)0, (byte)0);
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = tByteDoubleHashMap0.values(doubleArray0);
      tByteDoubleHashMap0.adjustOrPutValue((byte)14, (byte) (-7), (byte)0);
      tByteDoubleHashMap0.values(doubleArray1);
      assertEquals(2, tByteDoubleHashMap0.size());
      assertEquals("{0=0.0, 14=0.0}", tByteDoubleHashMap0.toString());
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.containsValue(D)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.containsValue(D)Z: I31 Branch 59 IFNE L377 - false
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.containsValue(D)Z: I18 Branch 57 IFLE L376 - false
   * 4 gnu.trove.map.hash.TByteDoubleHashMap.containsValue(D)Z: I25 Branch 58 IF_ICMPNE L377 - true
   */

  @Test
  public void test19()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap();
      tByteDoubleHashMap0.put((byte)0, (byte)0);
      boolean boolean0 = tByteDoubleHashMap0.containsValue((double) (byte)0);
      assertEquals(1, tByteDoubleHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 20
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.containsValue(D)Z: I31 Branch 59 IFNE L377 - true
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.containsValue(D)Z: I18 Branch 57 IFLE L376 - true
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.containsValue(D)Z: I18 Branch 57 IFLE L376 - false
   * 4 gnu.trove.map.hash.TByteDoubleHashMap.containsValue(D)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 5 gnu.trove.map.hash.TByteDoubleHashMap.containsValue(D)Z: I25 Branch 58 IF_ICMPNE L377 - false
   */

  @Test
  public void test20()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap();
      tByteDoubleHashMap0.put((byte)0, 0.0);
      boolean boolean0 = tByteDoubleHashMap0.containsValue((-1620.9361584648832));
      assertEquals(1, tByteDoubleHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 21
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap();
      boolean boolean0 = tByteDoubleHashMap0.forEachValue((TDoubleProcedure) null);
      assertEquals(23, tByteDoubleHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   * 4 gnu.trove.map.hash.TByteDoubleHashMap.putAll(Lgnu/trove/map/TByteDoubleMap;)V: I15 Branch 43 IFEQ L243 - false
   * 5 gnu.trove.map.hash.TByteDoubleHashMap$TByteDoubleHashIterator.advance()V: root-Branch
   * 6 gnu.trove.map.hash.TByteDoubleHashMap$TByteDoubleHashIterator.value()D: root-Branch
   * 7 gnu.trove.map.hash.TByteDoubleHashMap$TByteDoubleHashIterator.key()B: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(15);
      double[] doubleArray0 = new double[5];
      TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap(tByteDoubleHashMap0._set, doubleArray0);
      tByteDoubleHashMap0.putAll((TByteDoubleMap) tByteDoubleHashMap1);
      // Undeclared exception!
      try {
        tByteDoubleHashMap0.forEachValue((TDoubleProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test23()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap();
      tByteDoubleHashMap0.transformValues((TDoubleFunction) null);
      assertEquals(23, tByteDoubleHashMap0.capacity());
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.putIfAbsent(BD)D: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap((-1039), (-1039));
      tByteDoubleHashMap0.putIfAbsent((byte) (-17), 292.50100791334245);
      // Undeclared exception!
      try {
        tByteDoubleHashMap0.transformValues((TDoubleFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.retainEntries(Lgnu/trove/procedure/TByteDoubleProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.retainEntries(Lgnu/trove/procedure/TByteDoubleProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.retainEntries(Lgnu/trove/procedure/TByteDoubleProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test25()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(1006, (float) (byte)0);
      boolean boolean0 = tByteDoubleHashMap0.retainEntries((TByteDoubleProcedure) null);
      assertEquals(false, boolean0);
      assertEquals("{}", tByteDoubleHashMap0.toString());
      assertEquals(3, tByteDoubleHashMap0.capacity());
  }

  //Test case number: 26
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.retainEntries(Lgnu/trove/procedure/TByteDoubleProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.adjustOrPutValue(BDD)D: I9 Branch 72 IFGE L491 - true
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.adjustOrPutValue(BDD)D: I58 Branch 73 IFEQ L502 - false
   * 4 gnu.trove.map.hash.TByteDoubleHashMap.retainEntries(Lgnu/trove/procedure/TByteDoubleProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 5 gnu.trove.map.hash.TByteDoubleHashMap.retainEntries(Lgnu/trove/procedure/TByteDoubleProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap();
      tByteDoubleHashMap0.adjustOrPutValue((byte)0, (double) (byte)0, (-175.98764816259686));
      // Undeclared exception!
      try {
        tByteDoubleHashMap0.retainEntries((TByteDoubleProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 27
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.adjustValue(BD)Z: I9 Branch 71 IFGE L477 - true
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.<init>(IF)V: root-Branch
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 4 gnu.trove.map.hash.TByteDoubleHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 5 gnu.trove.map.hash.TByteDoubleHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 6 gnu.trove.map.hash.TByteDoubleHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 7 gnu.trove.map.hash.TByteDoubleHashMap.putIfAbsent(BD)D: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test27()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap((-1039), (-1039));
      tByteDoubleHashMap0.putIfAbsent((byte) (-17), 292.50100791334245);
      boolean boolean0 = tByteDoubleHashMap0.adjustValue((byte) (-17), 0.0);
      assertEquals(7, tByteDoubleHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.adjustOrPutValue(BDD)D: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.adjustOrPutValue(BDD)D: I58 Branch 73 IFEQ L502 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap();
      tByteDoubleHashMap0.put((byte)0, (byte)0);
      double double0 = tByteDoubleHashMap0.adjustOrPutValue((byte)0, 215.23906722184523, (-175.98764816259686));
      assertEquals("{0=215.23906722184523}", tByteDoubleHashMap0.toString());
      assertEquals(215.23906722184523, double0, 0.01D);
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test29()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap((-18));
      boolean boolean0 = tByteDoubleHashMap0.equals((Object) "{1=-1835.487090777323}");
      assertEquals(false, boolean0);
  }

  //Test case number: 30
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.<init>(IFBD)V: root-Branch
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   */

  @Test
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap((int) (byte)0, (-764.57196F), (byte)119, (double) (-764.57196F));
      double[] doubleArray0 = new double[7];
      TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap(byteArray0, doubleArray0);
      boolean boolean0 = tByteDoubleHashMap1.equals((Object) tByteDoubleHashMap0);
      assertEquals(false, boolean0);
      assertFalse(tByteDoubleHashMap0.equals(tByteDoubleHashMap1));
      assertEquals("{0=0.0}", tByteDoubleHashMap1.toString());
      assertEquals(1, tByteDoubleHashMap1.size());
      assertEquals(17, tByteDoubleHashMap1.capacity());
  }

  //Test case number: 31
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - false
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.equals(Ljava/lang/Object;)Z: I89 Branch 79 IFEQ L1200 - false
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.equals(Ljava/lang/Object;)Z: I93 Branch 80 IFEQ L1200 - true
   * 4 gnu.trove.map.hash.TByteDoubleHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - true
   * 5 gnu.trove.map.hash.TByteDoubleHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 6 gnu.trove.map.hash.TByteDoubleHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 7 gnu.trove.map.hash.TByteDoubleHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 8 gnu.trove.map.hash.TByteDoubleHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 9 gnu.trove.map.hash.TByteDoubleHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 10 gnu.trove.map.hash.TByteDoubleHashMap.get(B)D: I9 Branch 44 IFGE L253 - true
   * 11 gnu.trove.map.hash.TByteDoubleHashMap.<init>(Lgnu/trove/map/TByteDoubleMap;)V: I38 Branch 35 IFEQ L139 - true
   * 12 gnu.trove.map.hash.TByteDoubleHashMap.<init>(Lgnu/trove/map/TByteDoubleMap;)V: I52 Branch 36 IFEQ L143 - true
   */

  @Test
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-74);
      double[] doubleArray0 = new double[7];
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(byteArray0, doubleArray0);
      TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap((TByteDoubleMap) tByteDoubleHashMap0);
      tByteDoubleHashMap1.adjustValue((byte) (-74), (byte) (-74));
      boolean boolean0 = tByteDoubleHashMap1.equals((Object) tByteDoubleHashMap0);
      assertEquals("{-74=-74.0, 0=0.0}", tByteDoubleHashMap1.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 32
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.equals(Ljava/lang/Object;)Z: I89 Branch 79 IFEQ L1200 - true
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   */

  @Test
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      double[] doubleArray0 = new double[7];
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(byteArray0, doubleArray0);
      TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap((TByteDoubleMap) tByteDoubleHashMap0);
      tByteDoubleHashMap0.adjustValue((byte)0, (-1026.4750448324485));
      boolean boolean0 = tByteDoubleHashMap1.equals((Object) tByteDoubleHashMap0);
      assertEquals("{0=-1026.4750448324485}", tByteDoubleHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 33
  /*
   * 20 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.equals(Ljava/lang/Object;)Z: I93 Branch 80 IFEQ L1200 - false
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.iterator()Lgnu/trove/iterator/TByteDoubleIterator;: root-Branch
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 4 gnu.trove.map.hash.TByteDoubleHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 5 gnu.trove.map.hash.TByteDoubleHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 6 gnu.trove.map.hash.TByteDoubleHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 7 gnu.trove.map.hash.TByteDoubleHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 8 gnu.trove.map.hash.TByteDoubleHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - false
   * 9 gnu.trove.map.hash.TByteDoubleHashMap.equals(Ljava/lang/Object;)Z: I89 Branch 79 IFEQ L1200 - false
   * 10 gnu.trove.map.hash.TByteDoubleHashMap.adjustValue(BD)Z: I9 Branch 71 IFGE L477 - true
   * 11 gnu.trove.map.hash.TByteDoubleHashMap.putAll(Lgnu/trove/map/TByteDoubleMap;)V: I15 Branch 43 IFEQ L243 - true
   * 12 gnu.trove.map.hash.TByteDoubleHashMap.putAll(Lgnu/trove/map/TByteDoubleMap;)V: I15 Branch 43 IFEQ L243 - false
   * 13 gnu.trove.map.hash.TByteDoubleHashMap.get(B)D: I9 Branch 44 IFGE L253 - true
   * 14 gnu.trove.map.hash.TByteDoubleHashMap.<init>(Lgnu/trove/map/TByteDoubleMap;)V: I10 Branch 34 IFEQ L133 - false
   * 15 gnu.trove.map.hash.TByteDoubleHashMap.<init>(Lgnu/trove/map/TByteDoubleMap;)V: I38 Branch 35 IFEQ L139 - true
   * 16 gnu.trove.map.hash.TByteDoubleHashMap.<init>(Lgnu/trove/map/TByteDoubleMap;)V: I52 Branch 36 IFEQ L143 - true
   * 17 gnu.trove.map.hash.TByteDoubleHashMap$TByteDoubleHashIterator.<init>(Lgnu/trove/map/hash/TByteDoubleHashMap;Lgnu/trove/map/hash/TByteDoubleHashMap;)V: root-Branch
   * 18 gnu.trove.map.hash.TByteDoubleHashMap$TByteDoubleHashIterator.advance()V: root-Branch
   * 19 gnu.trove.map.hash.TByteDoubleHashMap$TByteDoubleHashIterator.value()D: root-Branch
   * 20 gnu.trove.map.hash.TByteDoubleHashMap$TByteDoubleHashIterator.key()B: root-Branch
   */

  @Test
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (byte) (-62);
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(byteArray0, doubleArray0);
      TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap((TByteDoubleMap) tByteDoubleHashMap0);
      tByteDoubleHashMap0.adjustValue((byte)0, (-321.95985070793836));
      boolean boolean0 = tByteDoubleHashMap1.equals((Object) tByteDoubleHashMap0);
      assertEquals("{0=-383.95985070793836}", tByteDoubleHashMap0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 34
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 4 gnu.trove.map.hash.TByteDoubleHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 5 gnu.trove.map.hash.TByteDoubleHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   */

  @Test
  public void test34()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap();
      tByteDoubleHashMap0.put((byte)0, (byte)0);
      int int0 = tByteDoubleHashMap0.hashCode();
      assertEquals("{0=0.0}", tByteDoubleHashMap0.toString());
      assertEquals(0, int0);
  }

  //Test case number: 35
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap$1.execute(BD)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.toString()Ljava/lang/String;: root-Branch
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TByteDoubleProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 4 gnu.trove.map.hash.TByteDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TByteDoubleProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 5 gnu.trove.map.hash.TByteDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TByteDoubleProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 6 gnu.trove.map.hash.TByteDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TByteDoubleProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 7 gnu.trove.map.hash.TByteDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TByteDoubleProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 8 gnu.trove.map.hash.TByteDoubleHashMap$1.<init>(Lgnu/trove/map/hash/TByteDoubleHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 9 gnu.trove.map.hash.TByteDoubleHashMap$1.execute(BD)Z: I4 Branch 115 IFEQ L1233 - false
   */

  @Test
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)81;
      double[] doubleArray0 = new double[3];
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(byteArray0, doubleArray0);
      String string0 = tByteDoubleHashMap0.toString();
      assertEquals(2, tByteDoubleHashMap0.size());
      assertNotNull(string0);
      assertEquals("{81=0.0, 0=0.0}", string0);
      assertEquals(11, tByteDoubleHashMap0.capacity());
  }

  //Test case number: 36
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TByteDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 2 gnu.trove.map.hash.TByteDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 3 gnu.trove.map.hash.TByteDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 4 gnu.trove.map.hash.TByteDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 5 gnu.trove.map.hash.TByteDoubleHashMap.setUp(I)I: root-Branch
   * 6 gnu.trove.map.hash.TByteDoubleHashMap.put(BD)D: root-Branch
   * 7 gnu.trove.map.hash.TByteDoubleHashMap.<init>([B[D)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 8 gnu.trove.map.hash.TByteDoubleHashMap.<init>([B[D)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 9 gnu.trove.map.hash.TByteDoubleHashMap.doPut(BDI)D: I12 Branch 40 IFGE L214 - true
   * 10 gnu.trove.map.hash.TByteDoubleHashMap.doPut(BDI)D: I12 Branch 40 IFGE L214 - false
   * 11 gnu.trove.map.hash.TByteDoubleHashMap.doPut(BDI)D: I41 Branch 41 IFEQ L221 - true
   * 12 gnu.trove.map.hash.TByteDoubleHashMap.doPut(BDI)D: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      double[] doubleArray0 = new double[4];
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(byteArray0, doubleArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tByteDoubleHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(1, tByteDoubleHashMap0.size());
      assertEquals("{0=0.0}", tByteDoubleHashMap0.toString());
      assertEquals(31, tByteDoubleHashMap0.capacity());
  }
}
