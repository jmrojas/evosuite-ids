/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TByteCollection;
import gnu.trove.function.TByteFunction;
import gnu.trove.map.TShortByteMap;
import gnu.trove.map.hash.TShortByteHashMap;
import gnu.trove.procedure.TByteProcedure;
import gnu.trove.procedure.TShortByteProcedure;
import gnu.trove.procedure.TShortProcedure;
import gnu.trove.set.TShortSet;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortByteHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap$TValueView.<init>(Lgnu/trove/map/hash/TShortByteHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TShortByteHashMap.valueCollection()Lgnu/trove/TByteCollection;: root-Branch
   * 3 gnu.trove.map.hash.TShortByteHashMap.setUp(I)I: root-Branch
   * 4 gnu.trove.map.hash.TShortByteHashMap.<init>(I)V: root-Branch
   */

//   @Test
//   public void test0()  throws Throwable  {
//       TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap((-487));
//       TByteCollection tByteCollection0 = tShortByteHashMap0.valueCollection();
//       assertEquals(0, tByteCollection0.getNoEntryValue());
//   }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TShortByteHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TShortByteHashMap.keySet()Lgnu/trove/set/TShortSet;: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap((-487));
      TShortSet tShortSet0 = tShortByteHashMap0.keySet();
      assertEquals(true, tShortSet0.isEmpty());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.clear()V: root-Branch
   * 2 gnu.trove.map.hash.TShortByteHashMap.<init>()V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      tShortByteHashMap0.clear();
      assertEquals(23, tShortByteHashMap0.capacity());
      assertEquals("{}", tShortByteHashMap0.toString());
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.containsKey(S)Z: root-Branch
   * 2 gnu.trove.map.hash.TShortByteHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(1493, 1493);
      boolean boolean0 = tShortByteHashMap0.containsKey((short) (-1239));
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.increment(S)Z: root-Branch
   * 2 gnu.trove.map.hash.TShortByteHashMap.adjustValue(SB)Z: I9 Branch 71 IFGE L477 - false
   */

  @Test
  public void test4()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap((-487));
      boolean boolean0 = tShortByteHashMap0.increment((short)2039);
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TShortByteHashMap.forEachKey(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      boolean boolean0 = tShortByteHashMap0.forEachKey((TShortProcedure) null);
      assertEquals(true, boolean0);
      assertEquals(23, tShortByteHashMap0.capacity());
  }

  //Test case number: 6
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TShortByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 3 gnu.trove.map.hash.TShortByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 4 gnu.trove.map.hash.TShortByteHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 5 gnu.trove.map.hash.TShortByteHashMap.remove(S)B: I14 Branch 46 IFLT L276 - false
   * 6 gnu.trove.map.hash.TShortByteHashMap.put(SB)B: root-Branch
   * 7 gnu.trove.map.hash.TShortByteHashMap.doPut(SBI)B: I12 Branch 40 IFGE L214 - true
   * 8 gnu.trove.map.hash.TShortByteHashMap.doPut(SBI)B: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test6()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(1493, 1493);
      tShortByteHashMap0.put((short)0, (byte)0);
      assertEquals("{0=0}", tShortByteHashMap0.toString());
      
      byte byte0 = tShortByteHashMap0.remove((short) (byte)0);
      assertEquals((byte)0, byte0);
  }

  //Test case number: 7
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.<init>(Lgnu/trove/map/TShortByteMap;)V: I38 Branch 35 IFEQ L139 - false
   * 2 gnu.trove.map.hash.TShortByteHashMap.<init>(Lgnu/trove/map/TShortByteMap;)V: I50 Branch 36 IFEQ L143 - false
   * 3 gnu.trove.map.hash.TShortByteHashMap.<init>(IFSB)V: root-Branch
   * 4 gnu.trove.map.hash.TShortByteHashMap.iterator()Lgnu/trove/iterator/TShortByteIterator;: root-Branch
   * 5 gnu.trove.map.hash.TShortByteHashMap.<init>(Lgnu/trove/map/TShortByteMap;)V: I10 Branch 34 IFEQ L133 - false
   * 6 gnu.trove.map.hash.TShortByteHashMap.putAll(Lgnu/trove/map/TShortByteMap;)V: I15 Branch 43 IFEQ L243 - true
   * 7 gnu.trove.map.hash.TShortByteHashMap$TShortByteHashIterator.<init>(Lgnu/trove/map/hash/TShortByteHashMap;Lgnu/trove/map/hash/TShortByteHashMap;)V: root-Branch
   */

//   @Test
//   public void test7()  throws Throwable  {
//       TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(460, (float) 460, (short)25, (byte)12);
//       TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap((TShortByteMap) tShortByteHashMap0);
//       assertEquals(12, tShortByteHashMap1.getNoEntryValue());
//       assertEquals(25, tShortByteHashMap1.getNoEntryKey());
//       assertEquals(3, tShortByteHashMap1.capacity());
//   }

  //Test case number: 8
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 2 gnu.trove.map.hash.TShortByteHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   * 3 gnu.trove.map.hash.TShortByteHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - false
   */

  @Test
  public void test8()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      HashMap<Short, Byte> hashMap0 = new HashMap<Short, Byte>();
      Short short0 = new Short((short) (-1533));
      hashMap0.put(short0, (Byte) (byte)47);
      tShortByteHashMap0.putAll((Map<? extends Short, ? extends Byte>) hashMap0);
      tShortByteHashMap0.trimToSize();
      assertEquals(1, tShortByteHashMap0.size());
      assertEquals("{-1533=47}", tShortByteHashMap0.toString());
  }

  //Test case number: 9
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.putIfAbsent(SB)B: I9 Branch 39 IFGE L205 - false
   * 2 gnu.trove.map.hash.TShortByteHashMap.<init>([S[B)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 3 gnu.trove.map.hash.TShortByteHashMap.<init>([S[B)V: I24 Branch 33 IF_ICMPGE L119 - false
   */

  @Test
  public void test9()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)199;
      byte[] byteArray0 = new byte[4];
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(shortArray0, byteArray0);
      byte byte0 = tShortByteHashMap0.putIfAbsent((short)199, (byte)127);
      assertEquals("{199=0}", tShortByteHashMap0.toString());
      assertEquals(11, tShortByteHashMap0.capacity());
      assertEquals((byte)0, byte0);
      assertEquals(1, tShortByteHashMap0.size());
  }

  //Test case number: 10
  /*
   * 18 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.get(S)B: I9 Branch 44 IFGE L253 - false
   * 2 gnu.trove.map.hash.TShortByteHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - false
   * 3 gnu.trove.map.hash.TShortByteHashMap.equals(Ljava/lang/Object;)Z: I87 Branch 79 IF_ICMPEQ L1200 - false
   * 4 gnu.trove.map.hash.TShortByteHashMap.equals(Ljava/lang/Object;)Z: I90 Branch 80 IF_ICMPEQ L1200 - true
   * 5 gnu.trove.map.hash.TShortByteHashMap.<init>(Lgnu/trove/map/TShortByteMap;)V: I10 Branch 34 IFEQ L133 - false
   * 6 gnu.trove.map.hash.TShortByteHashMap.<init>(Lgnu/trove/map/TShortByteMap;)V: I38 Branch 35 IFEQ L139 - true
   * 7 gnu.trove.map.hash.TShortByteHashMap.<init>(Lgnu/trove/map/TShortByteMap;)V: I50 Branch 36 IFEQ L143 - true
   * 8 gnu.trove.map.hash.TShortByteHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 9 gnu.trove.map.hash.TShortByteHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 10 gnu.trove.map.hash.TShortByteHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 11 gnu.trove.map.hash.TShortByteHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 12 gnu.trove.map.hash.TShortByteHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 13 gnu.trove.map.hash.TShortByteHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 14 gnu.trove.map.hash.TShortByteHashMap.putIfAbsent(SB)B: I9 Branch 39 IFGE L205 - true
   * 15 gnu.trove.map.hash.TShortByteHashMap.putAll(Lgnu/trove/map/TShortByteMap;)V: I15 Branch 43 IFEQ L243 - false
   * 16 gnu.trove.map.hash.TShortByteHashMap$TShortByteHashIterator.key()S: root-Branch
   * 17 gnu.trove.map.hash.TShortByteHashMap$TShortByteHashIterator.advance()V: root-Branch
   * 18 gnu.trove.map.hash.TShortByteHashMap$TShortByteHashIterator.value()B: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap((int) (byte)16, (float) (byte)16);
      tShortByteHashMap0._states = tShortByteHashMap1._states;
      tShortByteHashMap1.putIfAbsent((short) (byte)16, (byte)16);
      TShortByteHashMap tShortByteHashMap2 = new TShortByteHashMap((TShortByteMap) tShortByteHashMap0);
      boolean boolean0 = tShortByteHashMap1.equals((Object) tShortByteHashMap2);
      assertEquals(false, tShortByteHashMap1.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TShortByteHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(1493, 1493);
      tShortByteHashMap0.put((short)0, (byte)0);
      boolean boolean0 = tShortByteHashMap0.isEmpty();
      assertEquals(1, tShortByteHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TShortByteHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test12()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap((-487));
      boolean boolean0 = tShortByteHashMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TShortByteHashMap.remove(S)B: I14 Branch 46 IFLT L276 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(1493, 1493);
      byte byte0 = tShortByteHashMap0.remove((short) (-1239));
      assertEquals(0, tShortByteHashMap0.size());
      assertEquals((byte)0, byte0);
  }

  //Test case number: 14
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.keys()[S: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TShortByteHashMap.keys()[S: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TShortByteHashMap.keys()[S: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TShortByteHashMap.keys()[S: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test14()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      tShortByteHashMap0.putIfAbsent((short)0, (byte)0);
      tShortByteHashMap0.keys();
      assertEquals("{0=0}", tShortByteHashMap0.toString());
      assertEquals(false, tShortByteHashMap0.isEmpty());
  }

  //Test case number: 15
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.keys([S)[S: I10 Branch 49 IF_ICMPGE L315 - true
   * 2 gnu.trove.map.hash.TShortByteHashMap.keys([S)[S: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TShortByteHashMap.keys([S)[S: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TShortByteHashMap.keys([S)[S: I44 Branch 51 IF_ICMPNE L323 - true
   * 5 gnu.trove.map.hash.TShortByteHashMap.keys([S)[S: I44 Branch 51 IF_ICMPNE L323 - false
   * 6 gnu.trove.map.hash.TShortByteHashMap.doPut(SBI)B: I12 Branch 40 IFGE L214 - false
   * 7 gnu.trove.map.hash.TShortByteHashMap.doPut(SBI)B: I41 Branch 41 IFEQ L221 - true
   */

  @Test
  public void test15()  throws Throwable  {
      short[] shortArray0 = new short[3];
      byte[] byteArray0 = new byte[22];
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(shortArray0, byteArray0);
      short[] shortArray1 = tShortByteHashMap0.keys(shortArray0);
      assertSame(shortArray1, shortArray0);
      assertEquals(1, tShortByteHashMap0.size());
      assertNotNull(shortArray1);
      assertEquals("{0=0}", tShortByteHashMap0.toString());
  }

  //Test case number: 16
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.keys([S)[S: I10 Branch 49 IF_ICMPGE L315 - false
   * 2 gnu.trove.map.hash.TShortByteHashMap.keys([S)[S: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TShortByteHashMap.keys([S)[S: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TShortByteHashMap.keys([S)[S: I44 Branch 51 IF_ICMPNE L323 - true
   * 5 gnu.trove.map.hash.TShortByteHashMap.keys([S)[S: I44 Branch 51 IF_ICMPNE L323 - false
   * 6 gnu.trove.map.hash.TShortByteHashMap.keys()[S: I27 Branch 47 IFLE L303 - true
   * 7 gnu.trove.map.hash.TShortByteHashMap.keys()[S: I27 Branch 47 IFLE L303 - false
   * 8 gnu.trove.map.hash.TShortByteHashMap.keys()[S: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(10);
      short[] shortArray0 = tShortByteHashMap0.keys();
      tShortByteHashMap0.put((short)0, (byte)0);
      tShortByteHashMap0.keys(shortArray0);
      assertEquals(false, tShortByteHashMap0.isEmpty());
      assertEquals("{0=0}", tShortByteHashMap0.toString());
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.values()[B: I34 Branch 53 IF_ICMPNE L344 - false
   * 2 gnu.trove.map.hash.TShortByteHashMap.values()[B: I27 Branch 52 IFLE L343 - true
   * 3 gnu.trove.map.hash.TShortByteHashMap.values()[B: I27 Branch 52 IFLE L343 - false
   * 4 gnu.trove.map.hash.TShortByteHashMap.values()[B: I34 Branch 53 IF_ICMPNE L344 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      tShortByteHashMap0.put((short) (byte)2, (byte)2);
      tShortByteHashMap0.values();
      assertEquals(false, tShortByteHashMap0.isEmpty());
      assertEquals("{2=2}", tShortByteHashMap0.toString());
  }

  //Test case number: 18
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.values([B)[B: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TShortByteHashMap.values([B)[B: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TShortByteHashMap.values([B)[B: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TShortByteHashMap.values([B)[B: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      byte[] byteArray0 = tShortByteHashMap0.values(tShortByteHashMap0._states);
      assertEquals(23, tShortByteHashMap0.capacity());
      assertNotNull(byteArray0);
  }

  //Test case number: 19
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.values([B)[B: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TShortByteHashMap.values([B)[B: I44 Branch 56 IF_ICMPNE L363 - false
   * 3 gnu.trove.map.hash.TShortByteHashMap.values([B)[B: I37 Branch 55 IFLE L362 - true
   * 4 gnu.trove.map.hash.TShortByteHashMap.values([B)[B: I37 Branch 55 IFLE L362 - false
   * 5 gnu.trove.map.hash.TShortByteHashMap.values([B)[B: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test19()  throws Throwable  {
      short[] shortArray0 = new short[8];
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      shortArray0[5] = (short) (-25);
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap(shortArray0, tShortByteHashMap0._states);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = tShortByteHashMap1.values(byteArray0);
      assertEquals(2, tShortByteHashMap1.size());
      assertNotNull(byteArray1);
      assertEquals("{-25=0, 0=0}", tShortByteHashMap1.toString());
  }

  //Test case number: 20
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.containsValue(B)Z: I18 Branch 57 IFLE L376 - true
   * 2 gnu.trove.map.hash.TShortByteHashMap.containsValue(B)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TShortByteHashMap.containsValue(B)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 4 gnu.trove.map.hash.TShortByteHashMap.containsValue(B)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 5 gnu.trove.map.hash.TShortByteHashMap.containsValue(B)Z: I30 Branch 59 IF_ICMPNE L377 - true
   */

  @Test
  public void test20()  throws Throwable  {
      short[] shortArray0 = new short[18];
      byte[] byteArray0 = new byte[3];
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(shortArray0, byteArray0);
      boolean boolean0 = tShortByteHashMap0.containsValue((byte) (-38));
      assertEquals(1, tShortByteHashMap0.size());
      assertEquals(false, boolean0);
      assertEquals("{0=0}", tShortByteHashMap0.toString());
  }

  //Test case number: 21
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.containsValue(B)Z: I30 Branch 59 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TShortByteHashMap.containsValue(B)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TShortByteHashMap.containsValue(B)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 4 gnu.trove.map.hash.TShortByteHashMap.containsValue(B)Z: I25 Branch 58 IF_ICMPNE L377 - false
   */

  @Test
  public void test21()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(10);
      tShortByteHashMap0.put((short)0, (byte)0);
      boolean boolean0 = tShortByteHashMap0.containsValue((byte)0);
      assertEquals("{0=0}", tShortByteHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TShortByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TShortByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      boolean boolean0 = tShortByteHashMap0.forEachValue((TByteProcedure) null);
      assertEquals(true, boolean0);
      assertEquals(23, tShortByteHashMap0.capacity());
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TShortByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TShortByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test23()  throws Throwable  {
      short[] shortArray0 = new short[24];
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap(shortArray0, tShortByteHashMap0._states);
      // Undeclared exception!
      try {
        tShortByteHashMap1.forEachValue((TByteProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TShortByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TShortByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      tShortByteHashMap0.transformValues((TByteFunction) null);
      assertEquals(23, tShortByteHashMap0.capacity());
  }

  //Test case number: 25
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TShortByteHashMap.iterator()Lgnu/trove/iterator/TShortByteIterator;: root-Branch
   * 3 gnu.trove.map.hash.TShortByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I18 Branch 66 IFLE L434 - false
   * 4 gnu.trove.map.hash.TShortByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   * 5 gnu.trove.map.hash.TShortByteHashMap.putAll(Lgnu/trove/map/TShortByteMap;)V: I15 Branch 43 IFEQ L243 - true
   * 6 gnu.trove.map.hash.TShortByteHashMap.putAll(Lgnu/trove/map/TShortByteMap;)V: I15 Branch 43 IFEQ L243 - false
   * 7 gnu.trove.map.hash.TShortByteHashMap$TShortByteHashIterator.<init>(Lgnu/trove/map/hash/TShortByteHashMap;Lgnu/trove/map/hash/TShortByteHashMap;)V: root-Branch
   * 8 gnu.trove.map.hash.TShortByteHashMap$TShortByteHashIterator.key()S: root-Branch
   * 9 gnu.trove.map.hash.TShortByteHashMap$TShortByteHashIterator.advance()V: root-Branch
   * 10 gnu.trove.map.hash.TShortByteHashMap$TShortByteHashIterator.value()B: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap(tShortByteHashMap0._set, tShortByteHashMap0._states);
      tShortByteHashMap0.putAll((TShortByteMap) tShortByteHashMap1);
      // Undeclared exception!
      try {
        tShortByteHashMap0.transformValues((TByteFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.retainEntries(Lgnu/trove/procedure/TShortByteProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TShortByteHashMap.retainEntries(Lgnu/trove/procedure/TShortByteProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TShortByteHashMap.retainEntries(Lgnu/trove/procedure/TShortByteProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      boolean boolean0 = tShortByteHashMap0.retainEntries((TShortByteProcedure) null);
      assertEquals(23, tShortByteHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.retainEntries(Lgnu/trove/procedure/TShortByteProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TShortByteHashMap.retainEntries(Lgnu/trove/procedure/TShortByteProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TShortByteHashMap.retainEntries(Lgnu/trove/procedure/TShortByteProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test27()  throws Throwable  {
      short[] shortArray0 = new short[8];
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap(shortArray0, tShortByteHashMap0._states);
      // Undeclared exception!
      try {
        tShortByteHashMap1.retainEntries((TShortByteProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.adjustOrPutValue(SBB)B: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TShortByteHashMap.adjustOrPutValue(SBB)B: I59 Branch 73 IFEQ L502 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(10);
      tShortByteHashMap0.put((short)0, (byte)0);
      byte byte0 = tShortByteHashMap0.adjustOrPutValue((short) (byte)0, (byte)0, (byte)0);
      assertEquals(false, tShortByteHashMap0.isEmpty());
      assertEquals((byte)0, byte0);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TShortByteHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap((-487));
      boolean boolean0 = tShortByteHashMap0.equals((Object) "");
      assertEquals(false, boolean0);
  }

  //Test case number: 30
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   * 2 gnu.trove.map.hash.TShortByteHashMap.adjustOrPutValue(SBB)B: I9 Branch 72 IFGE L491 - true
   * 3 gnu.trove.map.hash.TShortByteHashMap.adjustOrPutValue(SBB)B: I59 Branch 73 IFEQ L502 - false
   */

  @Test
  public void test30()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap();
      tShortByteHashMap0.adjustOrPutValue((short) (byte)47, (byte)47, (byte)47);
      boolean boolean0 = tShortByteHashMap0.equals((Object) tShortByteHashMap1);
      assertEquals(false, tShortByteHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 31
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.equals(Ljava/lang/Object;)Z: I87 Branch 79 IF_ICMPEQ L1200 - true
   * 2 gnu.trove.map.hash.TShortByteHashMap.<init>([S[B)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 3 gnu.trove.map.hash.TShortByteHashMap.<init>([S[B)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 4 gnu.trove.map.hash.TShortByteHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 5 gnu.trove.map.hash.TShortByteHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - true
   * 6 gnu.trove.map.hash.TShortByteHashMap.doPut(SBI)B: I12 Branch 40 IFGE L214 - false
   * 7 gnu.trove.map.hash.TShortByteHashMap.doPut(SBI)B: I41 Branch 41 IFEQ L221 - true
   * 8 gnu.trove.map.hash.TShortByteHashMap.get(S)B: I9 Branch 44 IFGE L253 - true
   */

  @Test
  public void test31()  throws Throwable  {
      short[] shortArray0 = new short[8];
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      shortArray0[5] = (short) (-25);
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap(shortArray0, tShortByteHashMap0._states);
      TShortByteHashMap tShortByteHashMap2 = new TShortByteHashMap(tShortByteHashMap1._set, tShortByteHashMap1._states);
      boolean boolean0 = tShortByteHashMap1.equals((Object) tShortByteHashMap2);
      assertEquals("{-25=0, 0=0}", tShortByteHashMap1.toString());
      assertEquals(true, boolean0);
      assertFalse(tShortByteHashMap2.equals(tShortByteHashMap0));
      assertTrue(tShortByteHashMap2.equals(tShortByteHashMap1));
      assertEquals("{-25=1, 0=0}", tShortByteHashMap2.toString());
  }

  //Test case number: 32
  /*
   * 17 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.equals(Ljava/lang/Object;)Z: I90 Branch 80 IF_ICMPEQ L1200 - false
   * 2 gnu.trove.map.hash.TShortByteHashMap.increment(S)Z: root-Branch
   * 3 gnu.trove.map.hash.TShortByteHashMap.<init>(IF)V: root-Branch
   * 4 gnu.trove.map.hash.TShortByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 5 gnu.trove.map.hash.TShortByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 6 gnu.trove.map.hash.TShortByteHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 7 gnu.trove.map.hash.TShortByteHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 8 gnu.trove.map.hash.TShortByteHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 9 gnu.trove.map.hash.TShortByteHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 10 gnu.trove.map.hash.TShortByteHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 11 gnu.trove.map.hash.TShortByteHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 12 gnu.trove.map.hash.TShortByteHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 13 gnu.trove.map.hash.TShortByteHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - false
   * 14 gnu.trove.map.hash.TShortByteHashMap.equals(Ljava/lang/Object;)Z: I87 Branch 79 IF_ICMPEQ L1200 - false
   * 15 gnu.trove.map.hash.TShortByteHashMap.putIfAbsent(SB)B: I9 Branch 39 IFGE L205 - true
   * 16 gnu.trove.map.hash.TShortByteHashMap.adjustValue(SB)Z: I9 Branch 71 IFGE L477 - true
   * 17 gnu.trove.map.hash.TShortByteHashMap.get(S)B: I9 Branch 44 IFGE L253 - true
   */

  @Test
  public void test32()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      tShortByteHashMap0.adjustOrPutValue((short) (byte)0, (byte)0, (byte)62);
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap(474, (float) (byte)0);
      tShortByteHashMap1.putIfAbsent((short) (byte)0, (byte)0);
      tShortByteHashMap1.increment((short) (byte)0);
      boolean boolean0 = tShortByteHashMap1.equals((Object) tShortByteHashMap0);
      assertEquals("{0=62}", tShortByteHashMap0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 33
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 2 gnu.trove.map.hash.TShortByteHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 3 gnu.trove.map.hash.TShortByteHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   * 4 gnu.trove.map.hash.TShortByteHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test33()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap((-487));
      int int0 = tShortByteHashMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 34
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 2 gnu.trove.map.hash.TShortByteHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 3 gnu.trove.map.hash.TShortByteHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 4 gnu.trove.map.hash.TShortByteHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   */

  @Test
  public void test34()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      tShortByteHashMap0.adjustOrPutValue((short) (byte)34, (byte)0, (byte)0);
      int int0 = tShortByteHashMap0.hashCode();
      assertEquals(false, tShortByteHashMap0.isEmpty());
      assertEquals(34, int0);
  }

  //Test case number: 35
  /*
   * 11 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap$1.execute(SB)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TShortByteHashMap$1.<init>(Lgnu/trove/map/hash/TShortByteHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 3 gnu.trove.map.hash.TShortByteHashMap$1.execute(SB)Z: I4 Branch 115 IFEQ L1233 - false
   * 4 gnu.trove.map.hash.TShortByteHashMap.toString()Ljava/lang/String;: root-Branch
   * 5 gnu.trove.map.hash.TShortByteHashMap.forEachEntry(Lgnu/trove/procedure/TShortByteProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 6 gnu.trove.map.hash.TShortByteHashMap.forEachEntry(Lgnu/trove/procedure/TShortByteProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 7 gnu.trove.map.hash.TShortByteHashMap.forEachEntry(Lgnu/trove/procedure/TShortByteProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 8 gnu.trove.map.hash.TShortByteHashMap.forEachEntry(Lgnu/trove/procedure/TShortByteProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 9 gnu.trove.map.hash.TShortByteHashMap.forEachEntry(Lgnu/trove/procedure/TShortByteProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 10 gnu.trove.map.hash.TShortByteHashMap.adjustOrPutValue(SBB)B: I9 Branch 72 IFGE L491 - true
   * 11 gnu.trove.map.hash.TShortByteHashMap.adjustOrPutValue(SBB)B: I59 Branch 73 IFEQ L502 - false
   */

  @Test
  public void test35()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      tShortByteHashMap0.adjustOrPutValue((short) (byte)34, (byte)0, (byte)0);
      tShortByteHashMap0.adjustOrPutValue((short) (byte)0, (byte)0, (byte)0);
      String string0 = tShortByteHashMap0.toString();
      assertEquals(2, tShortByteHashMap0.size());
      assertEquals("{34=0, 0=0}", string0);
  }

  //Test case number: 36
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TShortByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 2 gnu.trove.map.hash.TShortByteHashMap.put(SB)B: root-Branch
   * 3 gnu.trove.map.hash.TShortByteHashMap.setUp(I)I: root-Branch
   * 4 gnu.trove.map.hash.TShortByteHashMap.<init>()V: root-Branch
   * 5 gnu.trove.map.hash.TShortByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 6 gnu.trove.map.hash.TShortByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 7 gnu.trove.map.hash.TShortByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 8 gnu.trove.map.hash.TShortByteHashMap.doPut(SBI)B: I12 Branch 40 IFGE L214 - true
   * 9 gnu.trove.map.hash.TShortByteHashMap.doPut(SBI)B: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test36()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      tShortByteHashMap0.put((short) (byte)2, (byte)2);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tShortByteHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(1, tShortByteHashMap0.size());
      assertEquals("{2=2}", tShortByteHashMap0.toString());
  }
}
