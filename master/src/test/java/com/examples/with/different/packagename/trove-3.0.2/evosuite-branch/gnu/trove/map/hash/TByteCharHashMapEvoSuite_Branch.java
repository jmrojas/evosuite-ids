/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TCharCollection;
import gnu.trove.function.TCharFunction;
import gnu.trove.map.TByteCharMap;
import gnu.trove.map.hash.TByteCharHashMap;
import gnu.trove.procedure.TByteCharProcedure;
import gnu.trove.procedure.TByteProcedure;
import gnu.trove.procedure.TCharProcedure;
import gnu.trove.set.TByteSet;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteCharHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap$TValueView.<init>(Lgnu/trove/map/hash/TByteCharHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TByteCharHashMap.put(BC)C: root-Branch
   * 3 gnu.trove.map.hash.TByteCharHashMap.setUp(I)I: root-Branch
   * 4 gnu.trove.map.hash.TByteCharHashMap.valueCollection()Lgnu/trove/TCharCollection;: root-Branch
   * 5 gnu.trove.map.hash.TByteCharHashMap.<init>([B[C)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 6 gnu.trove.map.hash.TByteCharHashMap.<init>([B[C)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 7 gnu.trove.map.hash.TByteCharHashMap.doPut(BCI)C: I12 Branch 40 IFGE L214 - true
   * 8 gnu.trove.map.hash.TByteCharHashMap.doPut(BCI)C: I12 Branch 40 IFGE L214 - false
   * 9 gnu.trove.map.hash.TByteCharHashMap.doPut(BCI)C: I41 Branch 41 IFEQ L221 - true
   * 10 gnu.trove.map.hash.TByteCharHashMap.doPut(BCI)C: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      char[] charArray0 = new char[9];
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
      TCharCollection tCharCollection0 = tByteCharHashMap0.valueCollection();
      assertEquals(1, tCharCollection0.size());
      assertEquals(23, tByteCharHashMap0.capacity());
      assertEquals("{0=\u0000}", tByteCharHashMap0.toString());
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TByteCharHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TByteCharHashMap.keySet()Lgnu/trove/set/TByteSet;: root-Branch
   * 3 gnu.trove.map.hash.TByteCharHashMap.<init>(I)V: root-Branch
   */

//   @Test
//   public void test1()  throws Throwable  {
//       TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(0);
//       TByteSet tByteSet0 = tByteCharHashMap0.keySet();
//       assertEquals(0, tByteSet0.getNoEntryValue());
//   }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TByteCharHashMap.remove(B)C: I14 Branch 46 IFLT L276 - false
   */

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)105;
      char[] charArray0 = new char[9];
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
      assertEquals("{105=\u0000, 0=\u0000}", tByteCharHashMap0.toString());
      
      char char0 = tByteCharHashMap0.remove((byte)105);
      assertEquals("{0=\u0000}", tByteCharHashMap0.toString());
      assertEquals('\u0000', char0);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.increment(B)Z: root-Branch
   * 2 gnu.trove.map.hash.TByteCharHashMap.adjustValue(BC)Z: I9 Branch 71 IFGE L477 - false
   */

  @Test
  public void test3()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap((-1284));
      boolean boolean0 = tByteCharHashMap0.increment((byte) (-28));
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.containsKey(B)Z: root-Branch
   * 2 gnu.trove.map.hash.TByteCharHashMap.<init>(IFBC)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap((-1189), (float) (-1189), (byte) (-1), '9');
      boolean boolean0 = tByteCharHashMap0.containsKey((byte) (-43));
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteCharHashMap.forEachKey(Lgnu/trove/procedure/TByteProcedure;)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(0);
      boolean boolean0 = tByteCharHashMap0.forEachKey((TByteProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteCharHashMap.clear()V: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap((-1284));
      tByteCharHashMap0.clear();
      assertEquals("{}", tByteCharHashMap0.toString());
  }

  //Test case number: 7
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.<init>(Lgnu/trove/map/TByteCharMap;)V: I38 Branch 35 IFEQ L139 - true
   * 2 gnu.trove.map.hash.TByteCharHashMap.<init>(Lgnu/trove/map/TByteCharMap;)V: I50 Branch 36 IFEQ L143 - true
   * 3 gnu.trove.map.hash.TByteCharHashMap$TByteCharHashIterator.key()B: root-Branch
   * 4 gnu.trove.map.hash.TByteCharHashMap$TByteCharHashIterator.advance()V: root-Branch
   * 5 gnu.trove.map.hash.TByteCharHashMap$TByteCharHashIterator.value()C: root-Branch
   * 6 gnu.trove.map.hash.TByteCharHashMap.putAll(Lgnu/trove/map/TByteCharMap;)V: I15 Branch 43 IFEQ L243 - false
   * 7 gnu.trove.map.hash.TByteCharHashMap$TByteCharHashIterator.<init>(Lgnu/trove/map/hash/TByteCharHashMap;Lgnu/trove/map/hash/TByteCharHashMap;)V: root-Branch
   * 8 gnu.trove.map.hash.TByteCharHashMap.iterator()Lgnu/trove/iterator/TByteCharIterator;: root-Branch
   * 9 gnu.trove.map.hash.TByteCharHashMap.putAll(Lgnu/trove/map/TByteCharMap;)V: I15 Branch 43 IFEQ L243 - true
   * 10 gnu.trove.map.hash.TByteCharHashMap.<init>(Lgnu/trove/map/TByteCharMap;)V: I10 Branch 34 IFEQ L133 - false
   */

//   @Test
//   public void test7()  throws Throwable  {
//       byte[] byteArray0 = new byte[13];
//       char[] charArray0 = new char[7];
//       TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
//       TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap((TByteCharMap) tByteCharHashMap0);
//       assertEquals("{0=\u0000}", tByteCharHashMap1.toString());
//       assertEquals(0, tByteCharHashMap1.getNoEntryKey());
//       assertEquals(1, tByteCharHashMap0.size());
//       assertEquals(23, tByteCharHashMap1.capacity());
//   }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteCharHashMap.putIfAbsent(BC)C: I9 Branch 39 IFGE L205 - false
   */

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-19);
      char[] charArray0 = new char[7];
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
      char char0 = tByteCharHashMap0.putIfAbsent((byte) (-19), '/');
      assertEquals(31, tByteCharHashMap0.capacity());
      assertEquals(2, tByteCharHashMap0.size());
      assertEquals("{-19=\u0000, 0=\u0000}", tByteCharHashMap0.toString());
      assertEquals('\u0000', char0);
  }

  //Test case number: 9
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   * 2 gnu.trove.map.hash.TByteCharHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 3 gnu.trove.map.hash.TByteCharHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 4 gnu.trove.map.hash.TByteCharHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   */

  @Test
  public void test9()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap((-1189), (float) (-1189), (byte) (-1), '9');
      HashMap<Byte, Character> hashMap0 = new HashMap<Byte, Character>();
      tByteCharHashMap0.putAll((Map<? extends Byte, ? extends Character>) hashMap0);
      assertEquals(3, tByteCharHashMap0.capacity());
      assertEquals("{}", tByteCharHashMap0.toString());
  }

  //Test case number: 10
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.get(B)C: I9 Branch 44 IFGE L253 - true
   * 2 gnu.trove.map.hash.TByteCharHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 3 gnu.trove.map.hash.TByteCharHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 4 gnu.trove.map.hash.TByteCharHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 5 gnu.trove.map.hash.TByteCharHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 6 gnu.trove.map.hash.TByteCharHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 7 gnu.trove.map.hash.TByteCharHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 8 gnu.trove.map.hash.TByteCharHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - true
   */

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      char[] charArray0 = new char[7];
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
      boolean boolean0 = tByteCharHashMap0.equals((Object) tByteCharHashMap0);
      assertEquals(31, tByteCharHashMap0.capacity());
      assertEquals(1, tByteCharHashMap0.size());
      assertEquals("{0=\u0000}", tByteCharHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 11
  /*
   * 11 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.get(B)C: I9 Branch 44 IFGE L253 - false
   * 2 gnu.trove.map.hash.TByteCharHashMap.adjustOrPutValue(BCC)C: I9 Branch 72 IFGE L491 - true
   * 3 gnu.trove.map.hash.TByteCharHashMap.adjustOrPutValue(BCC)C: I59 Branch 73 IFEQ L502 - false
   * 4 gnu.trove.map.hash.TByteCharHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - false
   * 5 gnu.trove.map.hash.TByteCharHashMap.equals(Ljava/lang/Object;)Z: I87 Branch 79 IF_ICMPEQ L1200 - false
   * 6 gnu.trove.map.hash.TByteCharHashMap.equals(Ljava/lang/Object;)Z: I90 Branch 80 IF_ICMPEQ L1200 - true
   * 7 gnu.trove.map.hash.TByteCharHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 8 gnu.trove.map.hash.TByteCharHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 9 gnu.trove.map.hash.TByteCharHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 10 gnu.trove.map.hash.TByteCharHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 11 gnu.trove.map.hash.TByteCharHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   */

  @Test
  public void test11()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(0);
      tByteCharHashMap0.adjustOrPutValue((byte) (-66), '_', '_');
      char[] charArray0 = new char[2];
      TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap(tByteCharHashMap0._set, charArray0);
      boolean boolean0 = tByteCharHashMap0.equals((Object) tByteCharHashMap1);
      assertEquals(1, tByteCharHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteCharHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(0);
      tByteCharHashMap0.adjustOrPutValue((byte) (-66), '_', '_');
      boolean boolean0 = tByteCharHashMap0.isEmpty();
      assertEquals(1, tByteCharHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteCharHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test13()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap((-1189), (float) (-1189), (byte) (-1), '9');
      boolean boolean0 = tByteCharHashMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteCharHashMap.remove(B)C: I14 Branch 46 IFLT L276 - true
   */

  @Test
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      char[] charArray0 = new char[9];
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
      char char0 = tByteCharHashMap0.remove((byte)127);
      assertEquals('\u0000', char0);
      assertEquals(23, tByteCharHashMap0.capacity());
      assertEquals("{0=\u0000}", tByteCharHashMap0.toString());
      assertEquals(1, tByteCharHashMap0.size());
  }

  //Test case number: 15
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.keys()[B: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TByteCharHashMap.keys()[B: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TByteCharHashMap.keys()[B: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TByteCharHashMap.keys()[B: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      char[] charArray0 = new char[2];
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
      byte[] byteArray1 = tByteCharHashMap0.keys();
      assertNotNull(byteArray1);
      assertEquals(1, tByteCharHashMap0.size());
      assertEquals("{0=\u0000}", tByteCharHashMap0.toString());
      assertEquals(11, tByteCharHashMap0.capacity());
  }

  //Test case number: 16
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.keys([B)[B: I10 Branch 49 IF_ICMPGE L315 - true
   * 2 gnu.trove.map.hash.TByteCharHashMap.keys([B)[B: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TByteCharHashMap.keys([B)[B: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TByteCharHashMap.keys([B)[B: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(0);
      byte[] byteArray1 = tByteCharHashMap0.keys(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
  }

  //Test case number: 17
  /*
   * 18 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.keys([B)[B: I10 Branch 49 IF_ICMPGE L315 - false
   * 2 gnu.trove.map.hash.TByteCharHashMap.keys([B)[B: I44 Branch 51 IF_ICMPNE L323 - false
   * 3 gnu.trove.map.hash.TByteCharHashMap$TByteCharHashIterator.<init>(Lgnu/trove/map/hash/TByteCharHashMap;Lgnu/trove/map/hash/TByteCharHashMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TByteCharHashMap.iterator()Lgnu/trove/iterator/TByteCharIterator;: root-Branch
   * 5 gnu.trove.map.hash.TByteCharHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 6 gnu.trove.map.hash.TByteCharHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 7 gnu.trove.map.hash.TByteCharHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 8 gnu.trove.map.hash.TByteCharHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 9 gnu.trove.map.hash.TByteCharHashMap.putAll(Lgnu/trove/map/TByteCharMap;)V: I15 Branch 43 IFEQ L243 - true
   * 10 gnu.trove.map.hash.TByteCharHashMap.keys([B)[B: I37 Branch 50 IFLE L322 - true
   * 11 gnu.trove.map.hash.TByteCharHashMap.keys([B)[B: I37 Branch 50 IFLE L322 - false
   * 12 gnu.trove.map.hash.TByteCharHashMap.keys([B)[B: I44 Branch 51 IF_ICMPNE L323 - true
   * 13 gnu.trove.map.hash.TByteCharHashMap.keys()[B: I27 Branch 47 IFLE L303 - true
   * 14 gnu.trove.map.hash.TByteCharHashMap.keys()[B: I27 Branch 47 IFLE L303 - false
   * 15 gnu.trove.map.hash.TByteCharHashMap.keys()[B: I34 Branch 48 IF_ICMPNE L304 - true
   * 16 gnu.trove.map.hash.TByteCharHashMap.<init>(Lgnu/trove/map/TByteCharMap;)V: I10 Branch 34 IFEQ L133 - false
   * 17 gnu.trove.map.hash.TByteCharHashMap.<init>(Lgnu/trove/map/TByteCharMap;)V: I38 Branch 35 IFEQ L139 - false
   * 18 gnu.trove.map.hash.TByteCharHashMap.<init>(Lgnu/trove/map/TByteCharMap;)V: I50 Branch 36 IFEQ L143 - false
   */

//   @Test
//   public void test17()  throws Throwable  {
//       TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap((-1189), (float) (-1189), (byte) (-1), '9');
//       TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap((TByteCharMap) tByteCharHashMap0);
//       tByteCharHashMap1.put((byte) (-33), ')');
//       byte[] byteArray0 = tByteCharHashMap0.keys();
//       tByteCharHashMap1.keys(byteArray0);
//       assertEquals(7, tByteCharHashMap1.capacity());
//       assertEquals(-1, tByteCharHashMap1.getNoEntryKey());
//   }

  //Test case number: 18
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.values()[C: I34 Branch 53 IF_ICMPNE L344 - false
   * 2 gnu.trove.map.hash.TByteCharHashMap.values()[C: I27 Branch 52 IFLE L343 - true
   * 3 gnu.trove.map.hash.TByteCharHashMap.values()[C: I27 Branch 52 IFLE L343 - false
   * 4 gnu.trove.map.hash.TByteCharHashMap.values()[C: I34 Branch 53 IF_ICMPNE L344 - true
   */

  @Test
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      char[] charArray0 = new char[9];
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
      char[] charArray1 = tByteCharHashMap0.values();
      assertEquals(23, tByteCharHashMap0.capacity());
      assertEquals("{0=\u0000}", tByteCharHashMap0.toString());
      assertEquals(1, tByteCharHashMap0.size());
      assertNotNull(charArray1);
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.values([C)[C: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TByteCharHashMap.values([C)[C: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TByteCharHashMap.values([C)[C: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TByteCharHashMap.values([C)[C: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test19()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(0);
      char[] charArray0 = new char[2];
      char[] charArray1 = tByteCharHashMap0.values(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray1, charArray0);
  }

  //Test case number: 20
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.values([C)[C: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TByteCharHashMap.values([C)[C: I44 Branch 56 IF_ICMPNE L363 - false
   * 3 gnu.trove.map.hash.TByteCharHashMap.<init>(IFBC)V: root-Branch
   * 4 gnu.trove.map.hash.TByteCharHashMap.values([C)[C: I37 Branch 55 IFLE L362 - true
   * 5 gnu.trove.map.hash.TByteCharHashMap.values([C)[C: I37 Branch 55 IFLE L362 - false
   * 6 gnu.trove.map.hash.TByteCharHashMap.values([C)[C: I44 Branch 56 IF_ICMPNE L363 - true
   * 7 gnu.trove.map.hash.TByteCharHashMap.values()[C: I27 Branch 52 IFLE L343 - true
   * 8 gnu.trove.map.hash.TByteCharHashMap.values()[C: I27 Branch 52 IFLE L343 - false
   * 9 gnu.trove.map.hash.TByteCharHashMap.values()[C: I34 Branch 53 IF_ICMPNE L344 - true
   */

  @Test
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      char[] charArray0 = new char[7];
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap((-1189), (float) (-1189), (byte) (-1), '9');
      TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap(byteArray0, charArray0);
      char[] charArray1 = tByteCharHashMap0.values();
      assertNotNull(charArray1);
      
      char[] charArray2 = tByteCharHashMap1.values(charArray1);
      assertEquals(1, tByteCharHashMap1.size());
      assertNotNull(charArray2);
      assertEquals(31, tByteCharHashMap1.capacity());
      assertEquals("{0=\u0000}", tByteCharHashMap1.toString());
  }

  //Test case number: 21
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.containsValue(C)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TByteCharHashMap.containsValue(C)Z: I30 Branch 59 IF_ICMPNE L377 - true
   * 3 gnu.trove.map.hash.TByteCharHashMap.containsValue(C)Z: I18 Branch 57 IFLE L376 - true
   * 4 gnu.trove.map.hash.TByteCharHashMap.containsValue(C)Z: I18 Branch 57 IFLE L376 - false
   * 5 gnu.trove.map.hash.TByteCharHashMap.containsValue(C)Z: I25 Branch 58 IF_ICMPNE L377 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap((-1284));
      tByteCharHashMap0.adjustOrPutValue((byte) (-1), 'e', 'e');
      boolean boolean0 = tByteCharHashMap0.containsValue('C');
      assertEquals(1, tByteCharHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 22
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.containsValue(C)Z: I30 Branch 59 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TByteCharHashMap.containsValue(C)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TByteCharHashMap.containsValue(C)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 4 gnu.trove.map.hash.TByteCharHashMap.containsValue(C)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 5 gnu.trove.map.hash.TByteCharHashMap.<init>()V: root-Branch
   * 6 gnu.trove.map.hash.TByteCharHashMap.putIfAbsent(BC)C: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap();
      tByteCharHashMap0.putIfAbsent((byte)63, 'i');
      boolean boolean0 = tByteCharHashMap0.containsValue('i');
      assertEquals(false, tByteCharHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TByteCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TByteCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test23()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap();
      boolean boolean0 = tByteCharHashMap0.forEachValue((TCharProcedure) null);
      assertEquals(23, tByteCharHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TByteCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TByteCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      char[] charArray0 = new char[2];
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
      // Undeclared exception!
      try {
        tByteCharHashMap0.forEachValue((TCharProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 25
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.forEachEntry(Lgnu/trove/procedure/TByteCharProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 2 gnu.trove.map.hash.TByteCharHashMap.forEachEntry(Lgnu/trove/procedure/TByteCharProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 3 gnu.trove.map.hash.TByteCharHashMap$1.execute(BC)Z: I4 Branch 115 IFEQ L1233 - false
   * 4 gnu.trove.map.hash.TByteCharHashMap.<init>()V: root-Branch
   * 5 gnu.trove.map.hash.TByteCharHashMap.putIfAbsent(BC)C: I9 Branch 39 IFGE L205 - true
   * 6 gnu.trove.map.hash.TByteCharHashMap$1.<init>(Lgnu/trove/map/hash/TByteCharHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 7 gnu.trove.map.hash.TByteCharHashMap.toString()Ljava/lang/String;: root-Branch
   * 8 gnu.trove.map.hash.TByteCharHashMap.forEachEntry(Lgnu/trove/procedure/TByteCharProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 9 gnu.trove.map.hash.TByteCharHashMap.forEachEntry(Lgnu/trove/procedure/TByteCharProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 10 gnu.trove.map.hash.TByteCharHashMap.forEachEntry(Lgnu/trove/procedure/TByteCharProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   */

  @Test
  public void test25()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap();
      tByteCharHashMap0.putIfAbsent((byte)63, 'i');
      String string0 = tByteCharHashMap0.toString();
      assertEquals(1, tByteCharHashMap0.size());
      assertEquals("{63=i}", string0);
  }

  //Test case number: 26
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TByteCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TByteCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   * 4 gnu.trove.map.hash.TByteCharHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap((int) (byte) (-65), (float) (byte) (-65));
      tByteCharHashMap0.transformValues((TCharFunction) null);
      assertEquals(3, tByteCharHashMap0.capacity());
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TByteCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TByteCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      char[] charArray0 = new char[8];
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
      // Undeclared exception!
      try {
        tByteCharHashMap0.transformValues((TCharFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.retainEntries(Lgnu/trove/procedure/TByteCharProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TByteCharHashMap.retainEntries(Lgnu/trove/procedure/TByteCharProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TByteCharHashMap.retainEntries(Lgnu/trove/procedure/TByteCharProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(0);
      boolean boolean0 = tByteCharHashMap0.retainEntries((TByteCharProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 29
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.retainEntries(Lgnu/trove/procedure/TByteCharProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TByteCharHashMap.adjustOrPutValue(BCC)C: I9 Branch 72 IFGE L491 - true
   * 3 gnu.trove.map.hash.TByteCharHashMap.adjustOrPutValue(BCC)C: I59 Branch 73 IFEQ L502 - false
   * 4 gnu.trove.map.hash.TByteCharHashMap.retainEntries(Lgnu/trove/procedure/TByteCharProcedure;)Z: I31 Branch 68 IFLE L453 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(0);
      tByteCharHashMap0.adjustOrPutValue((byte) (-66), '_', '_');
      // Undeclared exception!
      try {
        tByteCharHashMap0.retainEntries((TByteCharProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.adjustValue(BC)Z: I9 Branch 71 IFGE L477 - true
   * 2 gnu.trove.map.hash.TByteCharHashMap.increment(B)Z: root-Branch
   */

  @Test
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      char[] charArray0 = new char[2];
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
      boolean boolean0 = tByteCharHashMap0.increment((byte)9);
      assertEquals("{9=\u0001, 0=\u0000}", tByteCharHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 31
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.adjustOrPutValue(BCC)C: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TByteCharHashMap.adjustOrPutValue(BCC)C: I59 Branch 73 IFEQ L502 - true
   */

  @Test
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      char[] charArray0 = new char[2];
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
      char char0 = tByteCharHashMap0.adjustOrPutValue((byte)9, '4', '4');
      assertEquals("{9=4, 0=\u0000}", tByteCharHashMap0.toString());
      assertEquals('4', char0);
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteCharHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   */

  @Test
  public void test32()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap((-920));
      boolean boolean0 = tByteCharHashMap0.equals((Object) "en-GB");
      assertEquals(false, boolean0);
  }

  //Test case number: 33
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   * 2 gnu.trove.map.hash.TByteCharHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   */

  @Test
  public void test33()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(0);
      char[] charArray0 = new char[2];
      TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap(tByteCharHashMap0._set, charArray0);
      boolean boolean0 = tByteCharHashMap0.equals((Object) tByteCharHashMap1);
      assertEquals(1, tByteCharHashMap1.size());
      assertEquals("{0=\u0000}", tByteCharHashMap1.toString());
      assertEquals(7, tByteCharHashMap1.capacity());
      assertEquals(false, boolean0);
      assertFalse(tByteCharHashMap1.equals(tByteCharHashMap0));
  }

  //Test case number: 34
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 2 gnu.trove.map.hash.TByteCharHashMap.<init>(I)V: root-Branch
   * 3 gnu.trove.map.hash.TByteCharHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 4 gnu.trove.map.hash.TByteCharHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 5 gnu.trove.map.hash.TByteCharHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   */

  @Test
  public void test34()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(0);
      tByteCharHashMap0.put((byte) (-117), 'Y');
      int int0 = tByteCharHashMap0.hashCode();
      assertEquals(false, tByteCharHashMap0.isEmpty());
      assertEquals((-46), int0);
  }

  //Test case number: 35
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap$1.execute(BC)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TByteCharHashMap$1.<init>(Lgnu/trove/map/hash/TByteCharHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 3 gnu.trove.map.hash.TByteCharHashMap$1.execute(BC)Z: I4 Branch 115 IFEQ L1233 - false
   * 4 gnu.trove.map.hash.TByteCharHashMap.toString()Ljava/lang/String;: root-Branch
   * 5 gnu.trove.map.hash.TByteCharHashMap.forEachEntry(Lgnu/trove/procedure/TByteCharProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 6 gnu.trove.map.hash.TByteCharHashMap.forEachEntry(Lgnu/trove/procedure/TByteCharProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 7 gnu.trove.map.hash.TByteCharHashMap.forEachEntry(Lgnu/trove/procedure/TByteCharProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 8 gnu.trove.map.hash.TByteCharHashMap.forEachEntry(Lgnu/trove/procedure/TByteCharProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 9 gnu.trove.map.hash.TByteCharHashMap.forEachEntry(Lgnu/trove/procedure/TByteCharProcedure;)Z: I39 Branch 65 IFNE L422 - true
   */

  @Test
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      char[] charArray0 = new char[2];
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
      String string0 = tByteCharHashMap0.toString();
      assertEquals(11, tByteCharHashMap0.capacity());
      assertEquals("{38=\u0000, 0=\u0000}", string0);
      assertEquals(2, tByteCharHashMap0.size());
      assertNotNull(string0);
  }

  //Test case number: 36
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TByteCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 2 gnu.trove.map.hash.TByteCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 3 gnu.trove.map.hash.TByteCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 4 gnu.trove.map.hash.TByteCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 5 gnu.trove.map.hash.TByteCharHashMap.put(BC)C: root-Branch
   * 6 gnu.trove.map.hash.TByteCharHashMap.setUp(I)I: root-Branch
   * 7 gnu.trove.map.hash.TByteCharHashMap.doPut(BCI)C: I12 Branch 40 IFGE L214 - true
   * 8 gnu.trove.map.hash.TByteCharHashMap.doPut(BCI)C: I12 Branch 40 IFGE L214 - false
   * 9 gnu.trove.map.hash.TByteCharHashMap.doPut(BCI)C: I41 Branch 41 IFEQ L221 - true
   * 10 gnu.trove.map.hash.TByteCharHashMap.doPut(BCI)C: I41 Branch 41 IFEQ L221 - false
   * 11 gnu.trove.map.hash.TByteCharHashMap.<init>([B[C)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 12 gnu.trove.map.hash.TByteCharHashMap.<init>([B[C)V: I24 Branch 33 IF_ICMPGE L119 - false
   */

  @Test
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      char[] charArray0 = new char[9];
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tByteCharHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(23, tByteCharHashMap0.capacity());
      assertEquals(1, tByteCharHashMap0.size());
      assertEquals("{0=\u0000}", tByteCharHashMap0.toString());
  }
}
