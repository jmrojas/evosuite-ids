/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TByteShortMapDecorator;
import gnu.trove.map.TByteShortMap;
import gnu.trove.map.hash.TByteShortHashMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteShortMapDecoratorEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-1612);
      float float0 = 1.0F;
      byte byte0 = (byte)0;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0, float0, byte0, (short) byte0);
      TByteShortMapDecorator tByteShortMapDecorator0 = new TByteShortMapDecorator((TByteShortMap) tByteShortHashMap0);
      assertEquals(true, tByteShortMapDecorator0.isEmpty());
  }

  @Test
  public void test1()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short(short0);
      int int0 = 0;
      float float0 = 0.0F;
      byte byte0 = (byte) (-28);
      short short2 = (short)0;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0, float0, byte0, short2);
      TByteShortMapDecorator tByteShortMapDecorator0 = new TByteShortMapDecorator((TByteShortMap) tByteShortHashMap0);
      AbstractMap.SimpleImmutableEntry<Short, Short> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Short, Short>(short1, (Short) short0);
      int int1 = abstractMap_SimpleImmutableEntry0.hashCode();
      assertEquals(0, int1);
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)72;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)97;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-81);
      byteArray0[5] = byte5;
      byte byte6 = (byte)1;
      byteArray0[6] = byte6;
      byte byte7 = (byte)1;
      byteArray0[7] = byte7;
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) byteArray0[2];
      shortArray0[1] = (short) byteArray0[1];
      shortArray0[2] = (short) byteArray0[1];
      short short0 = (short) (-1);
      shortArray0[3] = short0;
      shortArray0[4] = (short) byteArray0[6];
      shortArray0[5] = (short) byteArray0[3];
      shortArray0[6] = (short) byteArray0[7];
      shortArray0[7] = (short) byteArray0[7];
      shortArray0[8] = (short) byte2;
      shortArray0[9] = (short) byte5;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      TByteShortMapDecorator tByteShortMapDecorator0 = new TByteShortMapDecorator((TByteShortMap) tByteShortHashMap0);
      Object object0 = null;
      tByteShortMapDecorator0.containsKey(object0);
      TByteShortMapDecorator tByteShortMapDecorator1 = new TByteShortMapDecorator();
      String string0 = "T1U:2-%#|r9\"";
      File file0 = new File(string0, string0);
      URI uRI0 = file0.toURI();
      String string1 = uRI0.getRawAuthority();
      // Undeclared exception!
      try {
        tByteShortMapDecorator1.remove((Object) string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TByteShortMapDecorator tByteShortMapDecorator0 = new TByteShortMapDecorator();
      // Undeclared exception!
      try {
        tByteShortMapDecorator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TByteShortMapDecorator tByteShortMapDecorator0 = new TByteShortMapDecorator();
      Object object0 = null;
      tByteShortMapDecorator0.containsValue(object0);
      int int0 = 39;
      Map.Entry<Object, Object> map_Entry0 = null;
      int int1 = 0;
      float float0 = (-1321.6538F);
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int1, float0);
      AbstractMap.SimpleEntry<Integer, TByteShortHashMap> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, TByteShortHashMap>((Integer) int0, tByteShortHashMap0);
      abstractMap_SimpleEntry0.setValue(tByteShortHashMap0);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = null;
      try {
        abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(map_Entry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)117;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-19);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-33);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-83);
      byteArray0[4] = byte4;
      byte byte5 = (byte)43;
      byteArray0[5] = byte5;
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) byte2;
      shortArray0[1] = (short) byteArray0[5];
      shortArray0[2] = (short) byteArray0[2];
      shortArray0[3] = (short) byteArray0[4];
      shortArray0[4] = (short) byteArray0[3];
      shortArray0[5] = (short) byteArray0[5];
      shortArray0[6] = (short) byteArray0[3];
      shortArray0[7] = (short) byteArray0[4];
      shortArray0[8] = (short) byte4;
      shortArray0[9] = (short) byteArray0[0];
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      TByteShortMapDecorator tByteShortMapDecorator0 = new TByteShortMapDecorator((TByteShortMap) tByteShortHashMap0);
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap((TByteShortMap) tByteShortHashMap0);
      tByteShortMapDecorator0.remove((Object) tByteShortHashMap1);
      assertEquals(6, tByteShortHashMap0.size());
      assertTrue(tByteShortHashMap0.equals(tByteShortHashMap1));
  }

  @Test
  public void test6()  throws Throwable  {
      HashMap<Short, AbstractMap.SimpleImmutableEntry<TByteShortHashMap, Object>> hashMap0 = new HashMap<Short, AbstractMap.SimpleImmutableEntry<TByteShortHashMap, Object>>();
      hashMap0.toString();
      String string0 = "] 2";
      TByteShortMapDecorator tByteShortMapDecorator0 = new TByteShortMapDecorator();
      // Undeclared exception!
      try {
        tByteShortMapDecorator0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TByteShortMap tByteShortMap0 = null;
      TByteShortMapDecorator tByteShortMapDecorator0 = new TByteShortMapDecorator(tByteShortMap0);
      String string0 = "";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // 
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TByteShortMapDecorator tByteShortMapDecorator0 = new TByteShortMapDecorator();
      // Undeclared exception!
      try {
        tByteShortMapDecorator0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      String string0 = "";
      String string1 = "begin index ";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          short short0 = (short)89;
          Short short1 = new Short(short0);
          AbstractMap.SimpleEntry<Short, Short> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Short, Short>(short1, (Short) short0);
          String string0 = "";
          TByteShortMapDecorator tByteShortMapDecorator0 = new TByteShortMapDecorator();
          String string1 = "end index > size: ";
          File file0 = new File(string1);
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"end index > size: \" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:165)
             // java.io.PrintStream.<init>(PrintStream.java:279)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
      byte byte0 = (byte)0;
      Byte byte1 = new Byte(byte0);
      float float0 = 6.6360896E8F;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap((int) byte0, float0, byte0, (short) byte1);
      AbstractMap.SimpleEntry<Byte, TByteShortHashMap> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, TByteShortHashMap>(byte1, tByteShortHashMap0);
      HashMap<Short, AbstractMap.SimpleImmutableEntry<TByteShortHashMap, Object>> hashMap0 = new HashMap<Short, AbstractMap.SimpleImmutableEntry<TByteShortHashMap, Object>>();
      String string0 = hashMap0.toString();
      abstractMap_SimpleEntry0.equals((Object) string0);
      int int0 = 0;
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap(int0);
      TByteShortHashMap tByteShortHashMap2 = new TByteShortHashMap((TByteShortMap) tByteShortHashMap1);
      TByteShortMapDecorator tByteShortMapDecorator0 = new TByteShortMapDecorator((TByteShortMap) tByteShortHashMap2);
      tByteShortMapDecorator0.values();
      tByteShortMapDecorator0.hashCode();
      TByteShortMapDecorator tByteShortMapDecorator1 = new TByteShortMapDecorator();
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-92);
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0);
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap((TByteShortMap) tByteShortHashMap0);
      TByteShortMapDecorator tByteShortMapDecorator0 = new TByteShortMapDecorator((TByteShortMap) tByteShortHashMap1);
      int int1 = (-615);
      byte byte0 = (byte)22;
      short short0 = (short)1057;
      TByteShortHashMap tByteShortHashMap2 = new TByteShortHashMap(int1, (float) int0, byte0, short0);
      tByteShortMapDecorator0.get((Object) tByteShortHashMap2);
      String string0 = "HG~52";
      File file0 = new File(string0);
      File file1 = file0.getAbsoluteFile();
      String string1 = file1.getName();
      short short1 = (short)785;
      Short short2 = new Short(short1);
      AbstractMap.SimpleEntry<Object, Short> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Short>((Object) string1, short2);
      try {
        Short.parseShort(string0, (int) short1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 785 greater than Character.MAX_RADIX
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TByteShortMapDecorator tByteShortMapDecorator0 = new TByteShortMapDecorator();
      String string0 = "";
      URI uRI0 = URI.create(string0);
      URI uRI1 = uRI0.parseServerAuthority();
      String string1 = uRI1.getRawQuery();
      tByteShortMapDecorator0.equals((Object) string1);
      TByteShortMap tByteShortMap0 = null;
      TByteShortHashMap tByteShortHashMap0 = null;
      try {
        tByteShortHashMap0 = new TByteShortHashMap(tByteShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0, float0);
      tByteShortHashMap0.keySet();
      TByteShortMapDecorator tByteShortMapDecorator0 = new TByteShortMapDecorator((TByteShortMap) tByteShortHashMap0);
      Locale locale0 = Locale.UK;
      byte byte0 = (byte) (-53);
      Byte byte1 = new Byte(byte0);
      short short0 = (short)0;
      Short short1 = new Short(short0);
      tByteShortMapDecorator0.put(byte1, short1);
      tByteShortMapDecorator0.clear();
      String string0 = locale0.getDisplayLanguage();
      tByteShortMapDecorator0.get((Object) string0);
      TByteShortMapDecorator tByteShortMapDecorator1 = new TByteShortMapDecorator();
      Object object0 = null;
      // Undeclared exception!
      try {
        tByteShortMapDecorator1.get(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TByteShortMapDecorator tByteShortMapDecorator0 = new TByteShortMapDecorator();
      // Undeclared exception!
      try {
        tByteShortMapDecorator0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      TByteShortMapDecorator tByteShortMapDecorator0 = new TByteShortMapDecorator();
      // Undeclared exception!
      try {
        tByteShortMapDecorator0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
