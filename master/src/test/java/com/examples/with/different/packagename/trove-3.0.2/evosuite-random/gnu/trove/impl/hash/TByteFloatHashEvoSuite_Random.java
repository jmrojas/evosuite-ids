/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TByteFloatMap;
import gnu.trove.map.hash.TByteFloatHashMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInput;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteFloatHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      int int0 = Integer.MAX_VALUE;
      float float0 = 1.0F;
      TByteFloatHashMap tByteFloatHashMap0 = null;
      try {
        tByteFloatHashMap0 = new TByteFloatHashMap(int0, float0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

//   @Test
//   public void test1()  throws Throwable  {
//       int int0 = 61;
//       byte[] byteArray0 = new byte[8];
//       byte byte0 = (byte) (-84);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)35;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)13;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte)88;
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)95;
//       byteArray0[4] = byte4;
//       byte byte5 = (byte)34;
//       byteArray0[5] = byte5;
//       byte byte6 = (byte)1;
//       byteArray0[6] = byte6;
//       byte byte7 = (byte) (-1);
//       byteArray0[7] = byte7;
//       float[] floatArray0 = new float[6];
//       floatArray0[0] = (float) byte5;
//       floatArray0[1] = (float) byteArray0[7];
//       floatArray0[2] = (float) byteArray0[0];
//       floatArray0[3] = (float) byte7;
//       floatArray0[4] = (float) byte1;
//       floatArray0[5] = (float) byte2;
//       TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(byteArray0, floatArray0);
//       float float0 = (-1.0F);
//       byte byte8 = (byte)50;
//       TByteFloatHashMap tByteFloatHashMap1 = new TByteFloatHashMap(int0, float0, byte8, (float) byte8);
//       byte byte9 = (byte) (-33);
//       float float1 = 0.0F;
//       tByteFloatHashMap1.adjustOrPutValue(byte9, float1, (float) int0);
//       TByteFloatHashMap tByteFloatHashMap2 = new TByteFloatHashMap();
//       TByteFloatHashMap tByteFloatHashMap3 = new TByteFloatHashMap(int0);
//       assertEquals(0.5F, tByteFloatHashMap3.getAutoCompactionFactor(), 0.01F);
//   }

//   @Test
//   public void test2()  throws Throwable  {
//       int int0 = 0;
//       float float0 = (-1408.2949F);
//       TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(int0, float0);
//       tByteFloatHashMap0.getAutoCompactionFactor();
//       assertEquals(0.0F, tByteFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(0, tByteFloatHashMap0.getNoEntryKey());
//   }

//   @Test
//   public void test3()  throws Throwable  {
//       int int0 = 0;
//       TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(int0);
//       byte[] byteArray0 = new byte[2];
//       byte byte0 = (byte)0;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)0;
//       byteArray0[1] = byte1;
//       byte[] byteArray1 = tByteFloatHashMap0.keys(byteArray0);
//       assertEquals(0.0F, tByteFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertNotNull(byteArray1);
//       assertEquals(0, tByteFloatHashMap0.getNoEntryKey());
//   }

//   @Test
//   public void test4()  throws Throwable  {
//       int int0 = (-1);
//       int int1 = 0;
//       float float0 = (-1794.2312F);
//       byte byte0 = (byte)0;
//       byte[] byteArray0 = new byte[7];
//       byteArray0[0] = byte0;
//       byteArray0[1] = byte0;
//       byte byte1 = (byte) (-78);
//       int int2 = (-1953);
//       byte byte2 = (byte) (-124);
//       TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(int2, float0, byte2, (float) byteArray0[1]);
//       float float1 = tByteFloatHashMap0.getNoEntryValue();
//       assertEquals(0.0F, float1, 0.01F);
//       assertEquals(-124, tByteFloatHashMap0.getNoEntryKey());
//       
//       byteArray0[2] = byte1;
//       byteArray0[3] = byte0;
//       byte byte3 = (byte)33;
//       byteArray0[4] = byte3;
//       byteArray0[5] = byte0;
//       byteArray0[6] = byte0;
//       float[] floatArray0 = new float[5];
//       float float2 = 0.0F;
//       floatArray0[0] = (float) int0;
//       floatArray0[1] = (float) int0;
//       floatArray0[2] = (float) byte1;
//       floatArray0[3] = (float) byteArray0[6];
//       floatArray0[4] = (float) int0;
//       floatArray0[0] = float2;
//       floatArray0[1] = (float) byteArray0[0];
//       floatArray0[2] = (float) byte1;
//       floatArray0[3] = (float) byteArray0[2];
//       floatArray0[4] = (float) byteArray0[6];
//       TByteFloatHashMap tByteFloatHashMap1 = new TByteFloatHashMap(byteArray0, floatArray0);
//       tByteFloatHashMap1.getNoEntryKey();
//       TByteFloatHashMap tByteFloatHashMap2 = new TByteFloatHashMap(int1, float0, byte0, (float) byte0);
//       floatArray0[0] = (float) int1;
//       floatArray0[1] = (float) byte3;
//       floatArray0[2] = (float) int0;
//       floatArray0[3] = (float) byte2;
//       floatArray0[4] = (float) byteArray0[4];
//       TByteFloatHashMap tByteFloatHashMap3 = new TByteFloatHashMap(int0, int0);
//       tByteFloatHashMap3.containsKey(byte0);
//       tByteFloatHashMap3.tempDisableAutoCompaction();
//       assertEquals(0, tByteFloatHashMap3.getNoEntryKey());
//       
//       byte byte4 = (byte) (-126);
//       boolean boolean0 = tByteFloatHashMap1.contains(byte4);
//       assertEquals(3, tByteFloatHashMap1.size());
//       assertEquals(false, boolean0);
//       assertEquals("{-78=-78.0, 33=0.0, 0=-78.0}", tByteFloatHashMap1.toString());
//   }

  @Test
  public void test5()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
      assertEquals(23, tByteFloatHashMap0.capacity());
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-75);
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      tByteFloatHashMap0._states = byteArray0;
      int int0 = 0;
      float float0 = 0.0F;
      byte byte3 = (byte) (-109);
      TByteFloatHashMap tByteFloatHashMap1 = new TByteFloatHashMap(int0, float0, byte3, (float) byte3);
      // Undeclared exception!
      try {
        tByteFloatHashMap0.keys();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
      }
  }

//   @Test
//   public void test6()  throws Throwable  {
//       TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
//       tByteFloatHashMap0.clear();
//       byte byte0 = (byte)1;
//       float float0 = tByteFloatHashMap0.getNoEntryValue();
//       assertEquals(0.0F, float0, 0.01F);
//       
//       boolean boolean0 = tByteFloatHashMap0.increment(byte0);
//       assertEquals(23, tByteFloatHashMap0.capacity());
//       assertEquals(false, boolean0);
//       assertEquals(0, tByteFloatHashMap0.getNoEntryKey());
//   }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 0;
          byte[] byteArray0 = new byte[1];
          byte byte0 = (byte) (-12);
          byteArray0[0] = byte0;
          float[] floatArray0 = new float[2];
          float float0 = 1.0F;
          floatArray0[0] = float0;
          floatArray0[1] = (float) byteArray0[0];
          TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(byteArray0, floatArray0);
          TByteFloatHashMap tByteFloatHashMap1 = new TByteFloatHashMap((TByteFloatMap) tByteFloatHashMap0);
          String string0 = "[Nv{uOV-1Os\\P:m,Pm";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

//   @Test
//   public void test8()  throws Throwable  {
//       int int0 = 0;
//       TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(int0, int0);
//       boolean boolean0 = false;
//       tByteFloatHashMap0.reenableAutoCompaction(boolean0);
//       assertEquals(0.0F, tByteFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(0, tByteFloatHashMap0.getNoEntryKey());
//       
//       int int1 = (-1158);
//       TByteFloatHashMap tByteFloatHashMap1 = new TByteFloatHashMap(int1);
//       boolean boolean1 = true;
//       tByteFloatHashMap1.reenableAutoCompaction(boolean1);
//       assertEquals(0, tByteFloatHashMap1.getNoEntryKey());
//       assertEquals(0.0F, tByteFloatHashMap1.getNoEntryValue(), 0.01F);
//   }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-71);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) byteArray0[1];
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(byteArray0, floatArray0);
      TByteFloatHashMap tByteFloatHashMap1 = new TByteFloatHashMap((int) byte3);
      tByteFloatHashMap0.putAll((TByteFloatMap) tByteFloatHashMap1);
      int int0 = 73;
      byte byte6 = (byte) (-80);
      float float0 = (-1283.9333F);
      TByteFloatHashMap tByteFloatHashMap2 = new TByteFloatHashMap(int0, (float) int0, byte6, float0);
      int int1 = (-632);
      int int2 = 631;
      TByteFloatHashMap tByteFloatHashMap3 = new TByteFloatHashMap(int2, int2);
      tByteFloatHashMap3.getNoEntryKey();
      int int3 = (-340);
      TByteFloatHashMap tByteFloatHashMap4 = new TByteFloatHashMap(int1);
      tByteFloatHashMap3.isEmpty();
      tByteFloatHashMap4.trimToSize();
      TByteFloatHashMap tByteFloatHashMap5 = new TByteFloatHashMap(int3);
      byte byte7 = (byte) (-1);
      tByteFloatHashMap3.putIfAbsent(byte7, byte7);
      assertEquals(false, tByteFloatHashMap3.isEmpty());
      
      ObjectInput objectInput0 = null;
      tByteFloatHashMap5.capacity();
      // Undeclared exception!
      try {
        tByteFloatHashMap5.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test10()  throws Throwable  {
//       TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
//       tByteFloatHashMap0.iterator();
//       boolean boolean0 = false;
//       int int0 = tByteFloatHashMap0.capacity();
//       assertEquals(23, int0);
//       
//       tByteFloatHashMap0.reenableAutoCompaction(boolean0);
//       assertEquals(0, tByteFloatHashMap0.getNoEntryKey());
//       assertEquals(0.0F, tByteFloatHashMap0.getNoEntryValue(), 0.01F);
//   }

//   @Test
//   public void test11()  throws Throwable  {
//       int int0 = 0;
//       byte byte0 = (byte)25;
//       int int1 = 0;
//       byte byte1 = (byte)44;
//       float float0 = 0.0F;
//       TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(int1, (float) int1, byte1, float0);
//       boolean boolean0 = tByteFloatHashMap0.adjustValue(byte0, (float) int1);
//       assertEquals(false, boolean0);
//       
//       TByteFloatHashMap tByteFloatHashMap1 = new TByteFloatHashMap(int0, (float) int0, byte0, (float) int0);
//       assertEquals(0.0F, tByteFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals(25, tByteFloatHashMap1.getNoEntryKey());
//   }

//   @Test
//   public void test12()  throws Throwable  {
//       byte[] byteArray0 = new byte[4];
//       byte byte0 = (byte)0;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)1;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte) (-93);
//       byteArray0[2] = byte2;
//       byte byte3 = (byte)0;
//       byteArray0[3] = byte3;
//       float[] floatArray0 = new float[4];
//       floatArray0[0] = (float) byteArray0[1];
//       TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(byteArray0, floatArray0);
//       int int0 = tByteFloatHashMap0.capacity();
//       assertEquals(11, int0);
//       
//       floatArray0[1] = (float) byteArray0[0];
//       floatArray0[2] = (float) byteArray0[2];
//       floatArray0[3] = (float) byte2;
//       TByteFloatHashMap tByteFloatHashMap1 = new TByteFloatHashMap(byteArray0, floatArray0);
//       tByteFloatHashMap1.isEmpty();
//       assertEquals("{-93=-93.0, 1=0.0, 0=-93.0}", tByteFloatHashMap1.toString());
//       assertEquals(0.0F, tByteFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals(0, tByteFloatHashMap1.getNoEntryKey());
//       assertEquals(3, tByteFloatHashMap1.size());
//   }

//   @Test
//   public void test13()  throws Throwable  {
//       byte[] byteArray0 = new byte[7];
//       byte byte0 = (byte) (-1);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte) (-1);
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)98;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte) (-1);
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)2;
//       byteArray0[4] = byte4;
//       byte byte5 = (byte)1;
//       byteArray0[5] = byte5;
//       byte byte6 = (byte)0;
//       byteArray0[6] = byte6;
//       float[] floatArray0 = new float[2];
//       floatArray0[0] = (float) byteArray0[4];
//       floatArray0[1] = (float) byteArray0[4];
//       TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(byteArray0, floatArray0);
//       int int0 = tByteFloatHashMap0.size();
//       assertEquals(1, int0);
//       assertEquals(0, tByteFloatHashMap0.getNoEntryKey());
//       assertEquals("{-1=2.0}", tByteFloatHashMap0.toString());
//       assertEquals(0.0F, tByteFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(17, tByteFloatHashMap0.capacity());
//   }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 1335;
          int int1 = 177;
          float float0 = 0.0F;
          float float1 = 0.0F;
          byte byte0 = (byte) (-1);
          TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(int1, float1, byte0, (float) int0);
          byte byte1 = (byte)0;
          boolean boolean0 = tByteFloatHashMap0.contains(byte1);
          assertEquals(1335.0F, tByteFloatHashMap0.getNoEntryValue(), 0.01F);
          assertEquals(false, boolean0);
          assertEquals(-1, tByteFloatHashMap0.getNoEntryKey());
          
          TByteFloatHashMap tByteFloatHashMap1 = new TByteFloatHashMap(int1, float0);
          tByteFloatHashMap1.trimToSize();
          assertEquals(0.0F, tByteFloatHashMap1.getNoEntryValue(), 0.01F);
          assertEquals(0, tByteFloatHashMap1.getNoEntryKey());
          
          byte[] byteArray0 = new byte[1];
          byte byte2 = (byte)74;
          byteArray0[0] = byte2;
          String string0 = "4+X9g";
          File file0 = new File(string0);
          boolean boolean1 = true;
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(file0, boolean1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"4+X9g\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

//   @Test
//   public void test15()  throws Throwable  {
//       byte[] byteArray0 = new byte[2];
//       byte byte0 = (byte)0;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)75;
//       byteArray0[1] = byte1;
//       float[] floatArray0 = new float[1];
//       floatArray0[0] = (float) byteArray0[1];
//       TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(byteArray0, floatArray0);
//       assertEquals(0, tByteFloatHashMap0.getNoEntryKey());
//       assertEquals(0.0F, tByteFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals("{0=75.0}", tByteFloatHashMap0.toString());
//       assertEquals(5, tByteFloatHashMap0.capacity());
//       assertEquals(false, tByteFloatHashMap0.isEmpty());
//   }

//   @Test
//   public void test16()  throws Throwable  {
//       int int0 = (-532);
//       float float0 = (-527.31775F);
//       byte byte0 = (byte)0;
//       float float1 = 0.0F;
//       TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(int0, float0, byte0, float1);
//       float float2 = tByteFloatHashMap0.put(byte0, float1);
//       assertEquals(1, tByteFloatHashMap0.size());
//       assertEquals(0.0F, float2, 0.01F);
//   }

//   @Test
//   public void test17()  throws Throwable  {
//       int int0 = Integer.MAX_VALUE;
//       TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(int0);
//       tByteFloatHashMap0.setAutoCompactionFactor((float) int0);
//       assertEquals(0.0F, tByteFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(0, tByteFloatHashMap0.getNoEntryKey());
//       
//       int int1 = 0;
//       byte byte0 = (byte)0;
//       TByteFloatHashMap tByteFloatHashMap1 = new TByteFloatHashMap(int1, (float) int1, byte0, (float) byte0);
//       byte byte1 = (byte) (-1);
//       float float0 = tByteFloatHashMap1.get(byte1);
//       assertEquals(0.0F, float0, 0.01F);
//       assertEquals(0, tByteFloatHashMap1.getNoEntryKey());
//   }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 451;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)95;
      byteArray0[0] = byte0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) byteArray0[0];
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap((int) byte0, (float) int0);
      tByteFloatHashMap0.keySet();
      floatArray0[1] = (float) byte0;
      floatArray0[2] = (float) int0;
      TByteFloatHashMap tByteFloatHashMap1 = new TByteFloatHashMap(byteArray0, floatArray0);
      TByteFloatHashMap tByteFloatHashMap2 = new TByteFloatHashMap((TByteFloatMap) tByteFloatHashMap1);
      TByteFloatHashMap tByteFloatHashMap3 = new TByteFloatHashMap((TByteFloatMap) tByteFloatHashMap2);
      tByteFloatHashMap3.isEmpty();
      float float0 = 1104.3805F;
      byte byte1 = (byte)0;
      TByteFloatHashMap tByteFloatHashMap4 = new TByteFloatHashMap(int0, float0, byte1, (float) int0);
      byte byte2 = (byte)0;
      tByteFloatHashMap2.increment(byte2);
      assertEquals("{95=95.0}", tByteFloatHashMap1.toString());
      
      float float1 = (-1208.816F);
      tByteFloatHashMap4.containsValue(float1);
      int int1 = 317;
      byte byte3 = (byte)1;
      tByteFloatHashMap4.put(byte3, float1);
      TByteFloatHashMap tByteFloatHashMap5 = new TByteFloatHashMap(int1);
      float float2 = tByteFloatHashMap4.put(byte3, float1);
      assertEquals(1, tByteFloatHashMap4.size());
      
      tByteFloatHashMap5.containsValue(float1);
      assertTrue(float1 == float2);
  }
}
