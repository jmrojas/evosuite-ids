/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedRandomAccessDoubleList;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessDoubleList;
import gnu.trove.list.TDoubleList;
import gnu.trove.list.array.TDoubleArrayList;
import gnu.trove.list.linked.TDoubleLinkedList;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.set.hash.TDoubleHashSet;
import java.util.Random;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableDoubleListEvoSuite_StrongMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 10 covered goals:
   * 1 Strong Mutation 2: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.equals(Ljava/lang/Object;)Z:62 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 2 Strong Mutation 0: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.<init>(Lgnu/trove/list/TDoubleList;)V:59 - ReplaceVariable list -> list
   * 3 Strong Mutation 1: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.equals(Ljava/lang/Object;)Z:62 - ReplaceComparisonOperator == -> !=
   * 4 Strong Mutation 2: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.equals(Ljava/lang/Object;)Z:62 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 5 Strong Mutation 3: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.equals(Ljava/lang/Object;)Z:62 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 6 Strong Mutation 4: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.equals(Ljava/lang/Object;)Z:62 - ReplaceComparisonOperator == -> !=
   * 7 Strong Mutation 5: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.equals(Ljava/lang/Object;)Z:62 - ReplaceConstant - 1 -> 0
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.<init>(Lgnu/trove/list/TDoubleList;)V: root-Branch
   * 9 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.equals(Ljava/lang/Object;)Z: I4 Branch 1 IF_ACMPEQ L62 - false
   * 10 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.equals(Ljava/lang/Object;)Z: I9 Branch 2 IFEQ L62 - false
   */

//   @Test
//   public void test0()  throws Throwable  {
//       TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
//       Random random0 = new Random();
//       assertEquals(0.2928071F, random0.nextFloat(), 0.01F);
//       
//       TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
//       boolean boolean0 = tUnmodifiableRandomAccessDoubleList0.equals((Object) tDoubleArrayList0);
//       assertEquals(true, boolean0);
//   }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 Strong Mutation 5: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.equals(Ljava/lang/Object;)Z:62 - ReplaceConstant - 1 -> 0
   * 2 Strong Mutation 3: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.equals(Ljava/lang/Object;)Z:62 - DeleteStatement: equals(Ljava/lang/Object;)Z
   */

  @Test
  public void test1()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      boolean boolean0 = tUnmodifiableRandomAccessDoubleList0.equals((Object) tDoubleArrayList0);
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 5 covered goals:
   * 1 Strong Mutation 6: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.equals(Ljava/lang/Object;)Z:62 - ReplaceConstant - 0 -> 1
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.equals(Ljava/lang/Object;)Z: I9 Branch 2 IFEQ L62 - true
   * 3 Strong Mutation 1: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.equals(Ljava/lang/Object;)Z:62 - ReplaceComparisonOperator == -> !=
   * 4 Strong Mutation 4: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.equals(Ljava/lang/Object;)Z:62 - ReplaceComparisonOperator == -> !=
   * 5 Strong Mutation 6: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.equals(Ljava/lang/Object;)Z:62 - ReplaceConstant - 0 -> 1
   */

  @Test
  public void test2()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      boolean boolean0 = tUnmodifiableDoubleList0.equals((Object) "\u4E2D\u6587");
      assertEquals(false, boolean0);
  }

  //Test case number: 3
  /*
   * 5 covered goals:
   * 1 Strong Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.hashCode()I:63 - DeleteStatement: hashCode()I
   * 2 Strong Mutation 7: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.hashCode()I:63 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 3 Strong Mutation 7: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.hashCode()I:63 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 4 Strong Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.hashCode()I:63 - DeleteStatement: hashCode()I
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.hashCode()I: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      Random random0 = new Random();
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      int int0 = tUnmodifiableRandomAccessDoubleList0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 4
  /*
   * 5 covered goals:
   * 1 Strong Mutation 11: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.get(I)D:65 - InsertUnaryOp IINC 1 index
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.get(I)D: root-Branch
   * 3 Strong Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.get(I)D:65 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 4 Strong Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.get(I)D:65 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 5 Strong Mutation 11: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.get(I)D:65 - InsertUnaryOp IINC 1 index
   */

  @Test
  public void test4()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleLinkedList0);
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tUnmodifiableDoubleList0);
      double[] doubleArray0 = new double[10];
      doubleArray0[4] = (double) (-1757);
      tUnmodifiableRandomAccessDoubleList0.get((-1));
      doubleArray0[4] = (double) 0;
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 Strong Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.get(I)D:65 - InsertUnaryOp IINC -1 index
   * 2 Strong Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.get(I)D:65 - InsertUnaryOp IINC -1 index
   */

  @Test
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1909.2109366959157);
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0, (-1909.2109366959157));
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      double double0 = tUnmodifiableRandomAccessDoubleList0.get(1);
      assertEquals((-1909.2109366959157), double0, 0.01D);
  }

  //Test case number: 6
  /*
   * 5 covered goals:
   * 1 Strong Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.indexOf(D)I:66 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.indexOf(D)I: root-Branch
   * 3 Strong Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.indexOf(D)I:66 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 4 Strong Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.indexOf(D)I:66 - InsertUnaryOp Negation of o
   * 5 Strong Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.indexOf(D)I:66 - DeleteStatement: indexOf(D)I
   */

//   @Test
//   public void test6()  throws Throwable  {
//       TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
//       TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
//       Random random0 = new Random();
//       assertEquals(0.8837587F, random0.nextFloat(), 0.01F);
//       
//       int int0 = tUnmodifiableDoubleList0.indexOf((double) (-1));
//       assertEquals((-1), int0);
//   }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 Strong Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.indexOf(D)I:66 - InsertUnaryOp Negation of o
   */

//   @Test
//   public void test7()  throws Throwable  {
//       TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
//       TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
//       tUnmodifiableDoubleList0.indexOf((double) (-1));
//       Random random0 = new Random();
//       assertEquals(0.1431312F, random0.nextFloat(), 0.01F);
//   }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 Strong Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.indexOf(D)I:66 - DeleteStatement: indexOf(D)I
   */

  @Test
  public void test8()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      int int0 = tUnmodifiableDoubleList0.indexOf((double) (-1));
      assertEquals((-1), int0);
  }

  //Test case number: 9
  /*
   * 7 covered goals:
   * 1 Strong Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.lastIndexOf(D)I:67 - InsertUnaryOp Negation of o
   * 2 Strong Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.lastIndexOf(D)I:67 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 3 Strong Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.lastIndexOf(D)I:67 - DeleteStatement: lastIndexOf(D)I
   * 4 Strong Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.lastIndexOf(D)I:67 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 5 Strong Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.lastIndexOf(D)I:67 - DeleteStatement: lastIndexOf(D)I
   * 6 Strong Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.lastIndexOf(D)I:67 - InsertUnaryOp Negation of o
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.lastIndexOf(D)I: root-Branch
   */

//   @Test
//   public void test9()  throws Throwable  {
//       TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
//       Random random0 = new Random();
//       assertEquals(0.717229762859742, random0.nextGaussian(), 0.01D);
//       
//       TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
//       int int0 = tUnmodifiableRandomAccessDoubleList0.lastIndexOf(584.2306385595198);
//       assertEquals((-1), int0);
//   }

  //Test case number: 10
  /*
   * 14 covered goals:
   * 1 Strong Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray(II)[D:70 - InsertUnaryOp Negation of len
   * 2 Strong Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray(II)[D:70 - ReplaceVariable offset -> len
   * 3 Strong Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray(II)[D:70 - InsertUnaryOp IINC 1 offset
   * 4 Strong Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray(II)[D:70 - InsertUnaryOp Negation of offset
   * 5 Strong Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray(II)[D:70 - InsertUnaryOp IINC -1 offset
   * 6 Strong Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray(II)[D:70 - ReplaceVariable offset -> len
   * 7 Strong Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray(II)[D:70 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 8 Strong Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray(II)[D:70 - InsertUnaryOp IINC 1 offset
   * 9 Strong Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray(II)[D:70 - InsertUnaryOp Negation of offset
   * 10 Strong Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray(II)[D:70 - InsertUnaryOp IINC -1 offset
   * 11 Strong Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray(II)[D:70 - InsertUnaryOp IINC 1 len
   * 12 Strong Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray(II)[D:70 - InsertUnaryOp Negation of len
   * 13 Strong Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray(II)[D:70 - InsertUnaryOp IINC -1 len
   * 14 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray(II)[D: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(1);
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      Random random0 = new Random();
      // Undeclared exception!
      try {
        tUnmodifiableDoubleList0.toArray((-1), 472);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -1
         //
      }
  }

  //Test case number: 11
  /*
   * 4 covered goals:
   * 1 Strong Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray(II)[D:70 - InsertUnaryOp IINC -1 len
   * 2 Strong Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray(II)[D:70 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 3 Strong Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray(II)[D:70 - InsertUnaryOp IINC 1 len
   * 4 Strong Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray(II)[D:70 - DeleteStatement: toArray(II)[D
   */

  @Test
  public void test11()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      double[] doubleArray0 = tUnmodifiableDoubleList0.toArray(0, 0);
      assertNotNull(doubleArray0);
  }

  //Test case number: 12
  /*
   * 14 covered goals:
   * 1 Strong Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DII)[D:73 - InsertUnaryOp Negation of len
   * 2 Strong Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DII)[D:73 - ReplaceVariable offset -> len
   * 3 Strong Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DII)[D:73 - InsertUnaryOp IINC -1 offset
   * 4 Strong Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DII)[D:73 - InsertUnaryOp Negation of offset
   * 5 Strong Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DII)[D:73 - InsertUnaryOp IINC 1 offset
   * 6 Strong Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DII)[D:73 - ReplaceVariable offset -> len
   * 7 Strong Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DII)[D:73 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 8 Strong Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DII)[D:73 - InsertUnaryOp IINC -1 offset
   * 9 Strong Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DII)[D:73 - InsertUnaryOp Negation of offset
   * 10 Strong Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DII)[D:73 - InsertUnaryOp IINC 1 offset
   * 11 Strong Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DII)[D:73 - InsertUnaryOp IINC -1 len
   * 12 Strong Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DII)[D:73 - InsertUnaryOp Negation of len
   * 13 Strong Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DII)[D:73 - InsertUnaryOp IINC 1 len
   * 14 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DII)[D: root-Branch
   */

//   @Test
//   public void test12()  throws Throwable  {
//       TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(25);
//       TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
//       double[] doubleArray0 = new double[1];
//       double[] doubleArray1 = tUnmodifiableDoubleList0.toArray(doubleArray0, (-1), 0);
//       assertNotNull(doubleArray1);
//       
//       Random random0 = new Random();
//       assertEquals(1398530901, random0.nextInt());
//   }

  //Test case number: 13
  /*
   * 4 covered goals:
   * 1 Strong Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DII)[D:73 - InsertUnaryOp IINC 1 len
   * 2 Strong Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DII)[D:73 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 3 Strong Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DII)[D:73 - InsertUnaryOp IINC -1 len
   * 4 Strong Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DII)[D:73 - DeleteStatement: toArray([DII)[D
   */

  @Test
  public void test13()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = tUnmodifiableDoubleList0.toArray(doubleArray0, 2480729, 0);
      assertSame(doubleArray1, doubleArray0);
  }

  //Test case number: 14
  /*
   * 28 covered goals:
   * 1 Strong Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - InsertUnaryOp Negation of len
   * 2 Strong Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - ReplaceVariable source_pos -> len
   * 3 Strong Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - InsertUnaryOp Negation of source_pos
   * 4 Strong Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - ReplaceVariable source_pos -> dest_pos
   * 5 Strong Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - ReplaceVariable dest_pos -> len
   * 6 Strong Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - ReplaceVariable dest_pos -> source_pos
   * 7 Strong Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - InsertUnaryOp IINC 1 source_pos
   * 8 Strong Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - InsertUnaryOp IINC -1 source_pos
   * 9 Strong Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - InsertUnaryOp IINC -1 dest_pos
   * 10 Strong Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - InsertUnaryOp IINC 1 dest_pos
   * 11 Strong Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - InsertUnaryOp Negation of dest_pos
   * 12 Strong Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - ReplaceVariable source_pos -> len
   * 13 Strong Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - InsertUnaryOp Negation of source_pos
   * 14 Strong Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 15 Strong Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - ReplaceVariable source_pos -> dest_pos
   * 16 Strong Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - ReplaceVariable dest_pos -> len
   * 17 Strong Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - ReplaceVariable dest_pos -> source_pos
   * 18 Strong Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - InsertUnaryOp IINC 1 source_pos
   * 19 Strong Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - InsertUnaryOp IINC -1 source_pos
   * 20 Strong Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - ReplaceVariable len -> dest_pos
   * 21 Strong Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - InsertUnaryOp IINC -1 dest_pos
   * 22 Strong Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - InsertUnaryOp IINC 1 dest_pos
   * 23 Strong Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - InsertUnaryOp Negation of dest_pos
   * 24 Strong Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - InsertUnaryOp IINC -1 len
   * 25 Strong Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - InsertUnaryOp IINC 1 len
   * 26 Strong Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - InsertUnaryOp Negation of len
   * 27 Strong Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - ReplaceVariable len -> source_pos
   * 28 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      Random random0 = new Random();
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleLinkedList0);
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = tUnmodifiableDoubleList0.toArray(doubleArray0, (-1443), 581, 0);
      assertSame(doubleArray1, doubleArray0);
  }

  //Test case number: 15
  /*
   * 5 covered goals:
   * 1 Strong Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - ReplaceVariable len -> source_pos
   * 2 Strong Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 3 Strong Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - ReplaceVariable len -> dest_pos
   * 4 Strong Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - InsertUnaryOp IINC -1 len
   * 5 Strong Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D:76 - InsertUnaryOp IINC 1 len
   */

  @Test
  public void test15()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleLinkedList0);
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = tUnmodifiableDoubleList0.toArray(doubleArray0, (-1443), 581, 0);
      assertSame(doubleArray0, doubleArray1);
  }

  //Test case number: 16
  /*
   * 3 covered goals:
   * 1 Strong Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.forEachDescending(Lgnu/trove/procedure/TDoubleProcedure;)Z:80 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.forEachDescending(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   * 3 Strong Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.forEachDescending(Lgnu/trove/procedure/TDoubleProcedure;)Z:80 - DeleteField: listLgnu/trove/list/TDoubleList;
   */

  @Test
  public void test16()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      double[] doubleArray0 = new double[10];
      doubleArray0[5] = 0.0;
      tUnmodifiableDoubleList0.forEachDescending((TDoubleProcedure) null);
      doubleArray0[5] = 1.0;
  }

  //Test case number: 17
  /*
   * 7 covered goals:
   * 1 Strong Mutation 60: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.binarySearch(D)I:83 - InsertUnaryOp Negation of value
   * 2 Strong Mutation 59: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.binarySearch(D)I:83 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 3 Strong Mutation 61: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.binarySearch(D)I:83 - DeleteStatement: binarySearch(D)I
   * 4 Strong Mutation 59: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.binarySearch(D)I:83 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 5 Strong Mutation 61: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.binarySearch(D)I:83 - DeleteStatement: binarySearch(D)I
   * 6 Strong Mutation 60: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.binarySearch(D)I:83 - InsertUnaryOp Negation of value
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.binarySearch(D)I: root-Branch
   */

//   @Test
//   public void test17()  throws Throwable  {
//       TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
//       TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
//       Random random0 = new Random();
//       assertEquals(0.6345111755344116, random0.nextDouble(), 0.01D);
//       
//       int int0 = tUnmodifiableDoubleList0.binarySearch(0.0);
//       assertEquals((-1), int0);
//   }

  //Test case number: 18
  /*
   * 10 covered goals:
   * 1 Strong Mutation 71: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.binarySearch(DII)I:85 - InsertUnaryOp IINC -1 toIndex
   * 2 Strong Mutation 63: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.binarySearch(DII)I:85 - InsertUnaryOp Negation of value
   * 3 Strong Mutation 62: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.binarySearch(DII)I:85 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 4 Strong Mutation 70: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.binarySearch(DII)I:85 - InsertUnaryOp IINC 1 toIndex
   * 5 Strong Mutation 63: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.binarySearch(DII)I:85 - InsertUnaryOp Negation of value
   * 6 Strong Mutation 62: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.binarySearch(DII)I:85 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 7 Strong Mutation 70: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.binarySearch(DII)I:85 - InsertUnaryOp IINC 1 toIndex
   * 8 Strong Mutation 66: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.binarySearch(DII)I:85 - InsertUnaryOp IINC 1 fromIndex
   * 9 Strong Mutation 67: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.binarySearch(DII)I:85 - InsertUnaryOp IINC -1 fromIndex
   * 10 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.binarySearch(DII)I: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(1);
      Random random0 = new Random();
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessDoubleList0.binarySearch((double) 1, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1
         //
      }
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * 1 Strong Mutation 67: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.binarySearch(DII)I:85 - InsertUnaryOp IINC -1 fromIndex
   * 2 Strong Mutation 64: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.binarySearch(DII)I:85 - ReplaceVariable fromIndex -> toIndex
   * 3 Strong Mutation 66: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.binarySearch(DII)I:85 - InsertUnaryOp IINC 1 fromIndex
   * 4 Strong Mutation 64: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.binarySearch(DII)I:85 - ReplaceVariable fromIndex -> toIndex
   */

  @Test
  public void test19()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList((double) 1284);
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleLinkedList0);
      int int0 = tUnmodifiableDoubleList0.binarySearch(211.79502759449525, 507, 0);
      assertEquals((-508), int0);
  }

  //Test case number: 20
  /*
   * 4 covered goals:
   * 1 Strong Mutation 77: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.indexOf(ID)I:88 - InsertUnaryOp Negation of value
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.indexOf(ID)I: root-Branch
   * 3 Strong Mutation 77: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.indexOf(ID)I:88 - InsertUnaryOp Negation of value
   * 4 Strong Mutation 78: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.indexOf(ID)I:88 - DeleteStatement: indexOf(ID)I
   */

//   @Test
//   public void test20()  throws Throwable  {
//       TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet(0, 0, 0);
//       TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(tDoubleHashSet0._set);
//       TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
//       tUnmodifiableDoubleList0.indexOf(96, 0.0);
//       Random random0 = new Random();
//       assertEquals(6504706080293716194L, random0.nextLong());
//   }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 Strong Mutation 78: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.indexOf(ID)I:88 - DeleteStatement: indexOf(ID)I
   */

  @Test
  public void test21()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tSynchronizedRandomAccessDoubleList0);
      int int0 = tUnmodifiableDoubleList0.indexOf(0, 0);
      assertEquals((-1), int0);
  }

  //Test case number: 22
  /*
   * 4 covered goals:
   * 1 Strong Mutation 79: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.lastIndexOf(ID)I:89 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.lastIndexOf(ID)I: root-Branch
   * 3 Strong Mutation 79: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.lastIndexOf(ID)I:89 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 4 Strong Mutation 84: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.lastIndexOf(ID)I:89 - DeleteStatement: lastIndexOf(ID)I
   */

  @Test
  public void test22()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleLinkedList0);
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tUnmodifiableDoubleList0);
      double[] doubleArray0 = new double[10];
      doubleArray0[4] = (double) (-1757);
      tUnmodifiableRandomAccessDoubleList0.lastIndexOf(0, (-1.0));
      doubleArray0[4] = (double) 0;
  }

  //Test case number: 23
  /*
   * 5 covered goals:
   * 1 Strong Mutation 80: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.lastIndexOf(ID)I:89 - InsertUnaryOp Negation of offset
   * 2 Strong Mutation 81: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.lastIndexOf(ID)I:89 - InsertUnaryOp IINC 1 offset
   * 3 Strong Mutation 80: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.lastIndexOf(ID)I:89 - InsertUnaryOp Negation of offset
   * 4 Strong Mutation 83: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.lastIndexOf(ID)I:89 - InsertUnaryOp Negation of value
   * 5 Strong Mutation 82: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.lastIndexOf(ID)I:89 - InsertUnaryOp IINC -1 offset
   */

//   @Test
//   public void test23()  throws Throwable  {
//       TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
//       TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
//       tUnmodifiableDoubleList0.lastIndexOf((-1), 1334.8991996251982);
//       Random random0 = new Random();
//       assertEquals(-881509404, random0.nextInt());
//   }

  //Test case number: 24
  /*
   * 4 covered goals:
   * 1 Strong Mutation 82: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.lastIndexOf(ID)I:89 - InsertUnaryOp IINC -1 offset
   * 2 Strong Mutation 84: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.lastIndexOf(ID)I:89 - DeleteStatement: lastIndexOf(ID)I
   * 3 Strong Mutation 81: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.lastIndexOf(ID)I:89 - InsertUnaryOp IINC 1 offset
   * 4 Strong Mutation 83: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.lastIndexOf(ID)I:89 - InsertUnaryOp Negation of value
   */

//   @Test
//   public void test24()  throws Throwable  {
//       TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
//       TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
//       tUnmodifiableDoubleList0.lastIndexOf((-2042), (-2042));
//       Random random0 = new Random();
//       assertEquals(0.16643256F, random0.nextFloat(), 0.01F);
//   }

  //Test case number: 25
  /*
   * 5 covered goals:
   * 1 Strong Mutation 86: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.grep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;:90 - DeleteStatement: grep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;
   * 2 Strong Mutation 85: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.grep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;:90 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 3 Strong Mutation 85: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.grep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;:90 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 4 Strong Mutation 86: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.grep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;:90 - DeleteStatement: grep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.grep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0);
      TDoubleLinkedList tDoubleLinkedList1 = (TDoubleLinkedList)tUnmodifiableRandomAccessDoubleList0.grep((TDoubleProcedure) null);
      assertTrue(tDoubleLinkedList0.equals(tDoubleLinkedList1));
  }

  //Test case number: 26
  /*
   * 5 covered goals:
   * 1 Strong Mutation 88: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.inverseGrep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;:91 - DeleteStatement: inverseGrep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;
   * 2 Strong Mutation 87: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.inverseGrep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;:91 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 3 Strong Mutation 87: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.inverseGrep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;:91 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 4 Strong Mutation 88: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.inverseGrep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;:91 - DeleteStatement: inverseGrep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.inverseGrep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      TDoubleArrayList tDoubleArrayList1 = (TDoubleArrayList)tUnmodifiableDoubleList0.inverseGrep((TDoubleProcedure) null);
      assertEquals(0.0, tDoubleArrayList1.sum(), 0.01D);
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 Strong Mutation 89: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.max()D:93 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.max()D: root-Branch
   * 3 Strong Mutation 89: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.max()D:93 - DeleteField: listLgnu/trove/list/TDoubleList;
   */

  @Test
  public void test27()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      Random random0 = new Random();
      // Undeclared exception!
      try {
        tUnmodifiableDoubleList0.max();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot find maximum of an empty list
         //
      }
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * 1 Strong Mutation 90: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.max()D:93 - DeleteStatement: max()D
   */

  @Test
  public void test28()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1565.1260577947492;
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      tDoubleArrayList0.addAll(doubleArray0);
      double double0 = tUnmodifiableDoubleList0.max();
      assertEquals(1565.1260577947492, double0, 0.01D);
  }

  //Test case number: 29
  /*
   * 3 covered goals:
   * 1 Strong Mutation 91: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.min()D:94 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.min()D: root-Branch
   * 3 Strong Mutation 91: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.min()D:94 - DeleteField: listLgnu/trove/list/TDoubleList;
   */

  @Test
  public void test29()  throws Throwable  {
      Random random0 = new Random();
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleLinkedList0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleList0.min();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 4 covered goals:
   * 1 Strong Mutation 93: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.sum()D:95 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.sum()D: root-Branch
   * 3 Strong Mutation 93: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.sum()D:95 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 4 Strong Mutation 94: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.sum()D:95 - DeleteStatement: sum()D
   */

  @Test
  public void test30()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      Random random0 = new Random();
      double double0 = tUnmodifiableDoubleList0.sum();
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * 1 Strong Mutation 94: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.sum()D:95 - DeleteStatement: sum()D
   */

  @Test
  public void test31()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1565.1260577947492;
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      tDoubleArrayList0.addAll(doubleArray0);
      double double0 = tUnmodifiableDoubleList0.sum();
      assertEquals(1565.1260577947492, double0, 0.01D);
  }

  //Test case number: 32
  /*
   * 2 covered goals:
   * 1 Strong Mutation 100: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:98 - ReplaceVariable toIndex -> fromIndex
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.subList(II)Lgnu/trove/list/TDoubleList;: root-Branch
   */

  @Test
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0, (-1600.3982260070188));
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleList0.subList(2, 234);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // end index < 2
         //
      }
  }

  //Test case number: 33
  /*
   * 1 covered goal:
   * 1 Strong Mutation 96: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:98 - ReplaceVariable fromIndex -> toIndex
   */

  @Test
  public void test33()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(1);
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleList0.subList((-1333), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // begin index can not be < 0
         //
      }
  }

  //Test case number: 34
  /*
   * 10 covered goals:
   * 1 Strong Mutation 97: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:98 - InsertUnaryOp Negation of fromIndex
   * 2 Strong Mutation 101: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:98 - InsertUnaryOp Negation of toIndex
   * 3 Strong Mutation 95: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:98 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 4 Strong Mutation 102: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:98 - InsertUnaryOp IINC 1 toIndex
   * 5 Strong Mutation 103: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:98 - InsertUnaryOp IINC -1 toIndex
   * 6 Strong Mutation 101: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:98 - InsertUnaryOp Negation of toIndex
   * 7 Strong Mutation 98: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:98 - InsertUnaryOp IINC 1 fromIndex
   * 8 Strong Mutation 99: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:98 - InsertUnaryOp IINC -1 fromIndex
   * 9 Strong Mutation 97: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:98 - InsertUnaryOp Negation of fromIndex
   * 10 Strong Mutation 104: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:98 - DeleteStatement: subList(II)Lgnu/trove/list/TDoubleList;
   */

  @Test
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(doubleArray0);
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      TUnmodifiableDoubleList tUnmodifiableDoubleList1 = (TUnmodifiableDoubleList)tUnmodifiableDoubleList0.subList(5, 5);
      assertNotNull(tUnmodifiableDoubleList1);
      assertEquals("{}", tUnmodifiableDoubleList1.toString());
  }

  //Test case number: 35
  /*
   * 6 covered goals:
   * 1 Strong Mutation 104: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:98 - DeleteStatement: subList(II)Lgnu/trove/list/TDoubleList;
   * 2 Strong Mutation 95: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:98 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 3 Strong Mutation 102: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:98 - InsertUnaryOp IINC 1 toIndex
   * 4 Strong Mutation 103: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:98 - InsertUnaryOp IINC -1 toIndex
   * 5 Strong Mutation 98: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:98 - InsertUnaryOp IINC 1 fromIndex
   * 6 Strong Mutation 99: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:98 - InsertUnaryOp IINC -1 fromIndex
   */

  @Test
  public void test35()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      TUnmodifiableDoubleList tUnmodifiableDoubleList1 = (TUnmodifiableDoubleList)tUnmodifiableDoubleList0.subList(0, 0);
      assertNotNull(tUnmodifiableDoubleList1);
      assertEquals(true, tUnmodifiableDoubleList1.isEmpty());
  }

  //Test case number: 36
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.shuffle(Ljava/util/Random;)V: root-Branch
   * 2 Strong Mutation 0: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.<init>(Lgnu/trove/list/TDoubleList;)V:59 - ReplaceVariable list -> list
   */

  @Test
  public void test36()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      Random random0 = new Random();
      // Undeclared exception!
      try {
        tUnmodifiableDoubleList0.shuffle(random0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
