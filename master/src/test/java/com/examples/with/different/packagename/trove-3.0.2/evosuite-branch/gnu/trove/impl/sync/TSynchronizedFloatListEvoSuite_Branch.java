/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TFloatCollection;
import gnu.trove.function.TFloatFunction;
import gnu.trove.impl.sync.TSynchronizedFloatList;
import gnu.trove.impl.sync.TSynchronizedRandomAccessFloatList;
import gnu.trove.impl.unmodifiable.TUnmodifiableFloatList;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessFloatList;
import gnu.trove.list.TFloatList;
import gnu.trove.list.array.TFloatArrayList;
import gnu.trove.list.linked.TFloatLinkedList;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.set.hash.TFloatHashSet;
import java.util.Random;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedFloatListEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.set(I[F)V: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatList.<init>(Lgnu/trove/list/TFloatList;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      float[] floatArray0 = new float[3];
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0, (Object) ":");
      tSynchronizedFloatList0.set(0, floatArray0);
      assertEquals(3, tSynchronizedFloatList0.size());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.forEachDescending(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(0, 0);
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0, (Object) tFloatArrayList0);
      boolean boolean0 = tSynchronizedFloatList0.forEachDescending((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.remove(II)V: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatList.<init>(Lgnu/trove/list/TFloatList;)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList(109.63719F);
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatLinkedList0);
      tSynchronizedFloatList0.remove(0, 0);
      assertEquals("{}", tSynchronizedFloatList0.toString());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.grep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0, (Object) "");
      TUnmodifiableRandomAccessFloatList tUnmodifiableRandomAccessFloatList0 = new TUnmodifiableRandomAccessFloatList((TFloatList) tSynchronizedFloatList0);
      TFloatArrayList tFloatArrayList1 = (TFloatArrayList)tUnmodifiableRandomAccessFloatList0.grep((TFloatProcedure) null);
      assertTrue(tFloatArrayList0.equals(tFloatArrayList1));
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.insert(IF)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      float[] floatArray0 = new float[4];
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0);
      tSynchronizedRandomAccessFloatList0.insert(0, 0.0F);
      assertEquals("{0.0, 0.0, 0.0, 0.0, 0.0}", tFloatArrayList0.toString());
      assertEquals(5, tSynchronizedRandomAccessFloatList0.size());
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.binarySearch(FII)I: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0, (Object) tFloatArrayList0);
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessFloatList0.binarySearch(719.0904F, (-1334), (-1334));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -1334
         //
      }
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.sum()F: root-Branch
   */

//   @Test
//   public void test6()  throws Throwable  {
//       float[] floatArray0 = new float[7];
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
//       TUnmodifiableFloatList tUnmodifiableFloatList0 = new TUnmodifiableFloatList((TFloatList) tFloatArrayList0);
//       TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tUnmodifiableFloatList0);
//       float float0 = tSynchronizedRandomAccessFloatList0.sum();
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.equals(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList();
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatLinkedList0, (Object) "{}");
      boolean boolean0 = tSynchronizedFloatList0.equals((Object) "{}");
      assertEquals(false, boolean0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.toArray(II)[F: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(10936);
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList((TFloatCollection) tFloatHashSet0);
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
      float[] floatArray0 = tSynchronizedFloatList0.toArray(0, 0);
      assertNotNull(floatArray0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.lastIndexOf(F)I: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
      int int0 = tSynchronizedFloatList0.lastIndexOf((float) 0);
      assertEquals((-1), int0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.lastIndexOf(IF)I: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList();
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatLinkedList0);
      int int0 = tSynchronizedFloatList0.lastIndexOf((-3), (-3));
      assertEquals((-1), int0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.add([FII)V: root-Branch
   */

//   @Test
//   public void test11()  throws Throwable  {
//       float[] floatArray0 = new float[1];
//       TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList();
//       TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatLinkedList0);
//       tSynchronizedFloatList0.add(floatArray0, (-3), (-3));
//       assertEquals(0.0F, tSynchronizedFloatList0.sum(), 0.01F);
//   }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FII)[F: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(0, 0);
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet();
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0, (Object) tFloatArrayList0);
      float[] floatArray0 = tSynchronizedFloatList0.toArray(tFloatHashSet0._set, 0, 0);
      assertNotNull(floatArray0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.removeAt(I)F: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(10936);
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList((TFloatCollection) tFloatHashSet0);
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
      // Undeclared exception!
      try {
        tSynchronizedFloatList0.removeAt(10936);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 10936
         //
      }
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.reverse(II)V: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList();
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatLinkedList0);
      // Undeclared exception!
      try {
        tSynchronizedFloatList0.reverse((-1), (-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // from > to : -1>-3
         //
      }
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.binarySearch(F)I: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
      int int0 = tSynchronizedFloatList0.binarySearch((float) 0);
      assertEquals((-1), int0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.indexOf(IF)I: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(10936);
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList((TFloatCollection) tFloatHashSet0);
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
      int int0 = tSynchronizedFloatList0.indexOf(10936, 10936);
      assertEquals((-1), int0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.transformValues(Lgnu/trove/function/TFloatFunction;)V: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
      tSynchronizedFloatList0.transformValues((TFloatFunction) null);
      assertEquals(true, tSynchronizedFloatList0.isEmpty());
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.fill(F)V: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(10936);
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList((TFloatCollection) tFloatHashSet0);
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
      tSynchronizedFloatList0.fill((float) 0);
      assertEquals(true, tSynchronizedFloatList0.isEmpty());
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.fill(IIF)V: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      float[] floatArray0 = new float[4];
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0);
      tSynchronizedRandomAccessFloatList0.fill(0, 0, 0);
      assertEquals("{0.0, 0.0, 0.0, 0.0}", tSynchronizedRandomAccessFloatList0.toString());
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.replace(IF)F: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      float[] floatArray0 = new float[7];
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
      TUnmodifiableFloatList tUnmodifiableFloatList0 = new TUnmodifiableFloatList((TFloatList) tFloatArrayList0);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tUnmodifiableFloatList0);
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessFloatList0.replace(0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.reverse()V: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
      tSynchronizedFloatList0.reverse();
      assertEquals(true, tSynchronizedFloatList0.isEmpty());
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FIII)[F: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList();
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatLinkedList0);
      float[] floatArray0 = new float[5];
      float[] floatArray1 = tSynchronizedFloatList0.toArray(floatArray0, 0, 0, 0);
      assertSame(floatArray0, floatArray1);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.shuffle(Ljava/util/Random;)V: root-Branch
   */

//   @Test
//   public void test23()  throws Throwable  {
//       float[] floatArray0 = new float[4];
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
//       TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0);
//       Random random0 = new Random();
//       tSynchronizedRandomAccessFloatList0.shuffle(random0);
//       assertEquals(0.83448213F, random0.nextFloat(), 0.01F);
//       assertEquals(787721541766048487L, random0.nextLong());
//   }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.hashCode()I: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
      int int0 = tSynchronizedFloatList0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.insert(I[F)V: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList();
      TUnmodifiableRandomAccessFloatList tUnmodifiableRandomAccessFloatList0 = new TUnmodifiableRandomAccessFloatList((TFloatList) tFloatLinkedList0);
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tUnmodifiableRandomAccessFloatList0, (Object) "en_GB");
      float[] floatArray0 = new float[10];
      // Undeclared exception!
      try {
        tSynchronizedFloatList0.insert(978, floatArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.indexOf(F)I: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
      int int0 = tSynchronizedFloatList0.indexOf((float) 0);
      assertEquals((-1), int0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.add([F)V: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) null, (Object) "");
      float[] floatArray0 = new float[3];
      // Undeclared exception!
      try {
        tSynchronizedFloatList0.add(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.set(IF)F: root-Branch
   */

  @Test
  public void test28()  throws Throwable  {
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList((float) 0);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatLinkedList0, (Object) "");
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessFloatList0.set((-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // at offset -1
         //
      }
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.min()F: root-Branch
   */

//   @Test
//   public void test29()  throws Throwable  {
//       float[] floatArray0 = new float[7];
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
//       TUnmodifiableFloatList tUnmodifiableFloatList0 = new TUnmodifiableFloatList((TFloatList) tFloatArrayList0);
//       TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tUnmodifiableFloatList0);
//       float float0 = tSynchronizedRandomAccessFloatList0.min();
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 30
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.inverseGrep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;: root-Branch
   */

//   @Test
//   public void test30()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
//       TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
//       TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tSynchronizedFloatList0);
//       TFloatArrayList tFloatArrayList1 = (TFloatArrayList)tSynchronizedRandomAccessFloatList0.inverseGrep((TFloatProcedure) null);
//       assertEquals(0.0F, tFloatArrayList1.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 31
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.insert(I[FII)V: root-Branch
   */

  @Test
  public void test31()  throws Throwable  {
      float[] floatArray0 = new float[5];
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0);
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
      // Undeclared exception!
      try {
        tSynchronizedFloatList0.insert((-607), floatArray0, (-607), (-607));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.set(I[FII)V: root-Branch
   */

//   @Test
//   public void test32()  throws Throwable  {
//       float[] floatArray0 = new float[1];
//       TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList();
//       TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatLinkedList0);
//       tSynchronizedFloatList0.set((-3), floatArray0, (-3), (-3));
//       assertEquals(0.0F, tSynchronizedFloatList0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 33
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.get(I)F: root-Branch
   */

//   @Test
//   public void test33()  throws Throwable  {
//       float[] floatArray0 = new float[4];
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
//       TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0);
//       float float0 = tSynchronizedRandomAccessFloatList0.get(0);
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 34
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.max()F: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatList.<init>(Lgnu/trove/list/TFloatList;Ljava/lang/Object;)V: root-Branch
   */

//   @Test
//   public void test34()  throws Throwable  {
//       float[] floatArray0 = new float[3];
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
//       TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0, (Object) ":");
//       float float0 = tSynchronizedFloatList0.max();
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 35
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.subList(II)Lgnu/trove/list/TFloatList;: root-Branch
   */

  @Test
  public void test35()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tSynchronizedFloatList0);
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessFloatList0.subList((-14), (-14));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // begin index can not be < 0
         //
      }
  }

  //Test case number: 36
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.sort(II)V: root-Branch
   */

//   @Test
//   public void test36()  throws Throwable  {
//       TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList(109.63719F);
//       TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatLinkedList0);
//       tSynchronizedFloatList0.sort(0, 0);
//       assertEquals(109.63719F, tSynchronizedFloatList0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 37
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatList.sort()V: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatList.<init>(Lgnu/trove/list/TFloatList;)V: root-Branch
   */

//   @Test
//   public void test37()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
//       TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
//       tSynchronizedFloatList0.sort();
//       assertEquals(0.0F, tSynchronizedFloatList0.sum(), 0.01F);
//   }
}
