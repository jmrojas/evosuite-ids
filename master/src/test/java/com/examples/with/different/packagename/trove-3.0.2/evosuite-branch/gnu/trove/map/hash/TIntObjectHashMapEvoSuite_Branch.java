/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TIntCollection;
import gnu.trove.function.TObjectFunction;
import gnu.trove.impl.sync.TSynchronizedIntSet;
import gnu.trove.impl.unmodifiable.TUnmodifiableIntSet;
import gnu.trove.map.TIntObjectMap;
import gnu.trove.map.hash.TIntObjectHashMap;
import gnu.trove.procedure.TIntObjectProcedure;
import gnu.trove.procedure.TIntProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import gnu.trove.set.TIntSet;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntObjectHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 18 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap$ValueView.iterator()Ljava/util/Iterator;: root-Branch
   * 2 gnu.trove.map.hash.TIntObjectHashMap$ValueView.<init>(Lgnu/trove/map/hash/TIntObjectHashMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TIntObjectHashMap$ValueView$TIntObjectValueHashIterator.<init>(Lgnu/trove/map/hash/TIntObjectHashMap$ValueView;Lgnu/trove/map/hash/TIntObjectHashMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TIntObjectHashMap$KeyView.<init>(Lgnu/trove/map/hash/TIntObjectHashMap;)V: root-Branch
   * 5 gnu.trove.map.hash.TIntObjectHashMap$1.<init>(Lgnu/trove/map/hash/TIntObjectHashMap;)V: root-Branch
   * 6 gnu.trove.map.hash.TIntObjectHashMap$ValueView$1.<init>(Lgnu/trove/map/hash/TIntObjectHashMap$ValueView;Lgnu/trove/map/hash/TIntObjectHashMap;)V: root-Branch
   * 7 gnu.trove.map.hash.TIntObjectHashMap.<init>()V: root-Branch
   * 8 gnu.trove.map.hash.TIntObjectHashMap.setUp(I)I: root-Branch
   * 9 gnu.trove.map.hash.TIntObjectHashMap.getNoEntryKey()I: root-Branch
   * 10 gnu.trove.map.hash.TIntObjectHashMap.valueCollection()Ljava/util/Collection;: root-Branch
   * 11 gnu.trove.map.hash.TIntObjectHashMap.keySet()Lgnu/trove/set/TIntSet;: root-Branch
   * 12 gnu.trove.map.hash.TIntObjectHashMap.<init>(IFI)V: root-Branch
   * 13 gnu.trove.map.hash.TIntObjectHashMap.<init>(Lgnu/trove/map/TIntObjectMap;)V: root-Branch
   * 14 gnu.trove.map.hash.TIntObjectHashMap.putAll(Lgnu/trove/map/TIntObjectMap;)V: root-Branch
   * 15 gnu.trove.map.hash.TIntObjectHashMap.forEachEntry(Lgnu/trove/procedure/TIntObjectProcedure;)Z: I23 Branch 65 IFLE L416 - true
   * 16 gnu.trove.map.hash.TIntObjectHashMap.forEachEntry(Lgnu/trove/procedure/TIntObjectProcedure;)Z: I23 Branch 65 IFLE L416 - false
   * 17 gnu.trove.map.hash.TIntObjectHashMap.forEachEntry(Lgnu/trove/procedure/TIntObjectProcedure;)Z: I30 Branch 66 IF_ICMPNE L417 - true
   * 18 gnu.trove.map.hash.TIntObjectHashMap$KeyView.containsAll(Ljava/util/Collection;)Z: I8 Branch 3 IFEQ L561 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      TIntObjectHashMap<Object> tIntObjectHashMap1 = new TIntObjectHashMap<Object>((TIntObjectMap<?>) tIntObjectHashMap0);
      Collection<Object> collection0 = tIntObjectHashMap1.valueCollection();
      TIntSet tIntSet0 = tIntObjectHashMap0.keySet();
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet(tIntSet0);
      tSynchronizedIntSet0.containsAll(collection0);
      assertEquals(23, tIntObjectHashMap0.capacity());
      assertEquals(0, tIntObjectHashMap1.getNoEntryKey());
      assertEquals(0, collection0.size());
      assertEquals("{}", tIntObjectHashMap0.toString());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntObjectHashMap$KeyView.size()I: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      TIntSet tIntSet0 = tIntObjectHashMap0.keySet();
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet(tIntSet0);
      tSynchronizedIntSet0.size();
      assertEquals(23, tIntObjectHashMap0.capacity());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntObjectHashMap$KeyView.addAll([I)Z: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TIntObjectHashMap<String> tIntObjectHashMap0 = new TIntObjectHashMap<String>(17, 17, 17);
      TIntObjectHashMap<Integer> tIntObjectHashMap1 = new TIntObjectHashMap<Integer>();
      TIntSet tIntSet0 = tIntObjectHashMap1.keySet();
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet(tIntSet0);
      // Undeclared exception!
      try {
        tSynchronizedIntSet0.addAll(tIntObjectHashMap0._set);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 3
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap$KeyView.toArray([I)[I: root-Branch
   * 2 gnu.trove.map.hash.TIntObjectHashMap.keys([I)[I: I6 Branch 54 IF_ICMPGE L327 - true
   * 3 gnu.trove.map.hash.TIntObjectHashMap.keys([I)[I: I34 Branch 55 IFLE L334 - true
   * 4 gnu.trove.map.hash.TIntObjectHashMap.keys([I)[I: I34 Branch 55 IFLE L334 - false
   * 5 gnu.trove.map.hash.TIntObjectHashMap.keys([I)[I: I41 Branch 56 IF_ICMPNE L335 - true
   */

  @Test
  public void test3()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      TIntSet tIntSet0 = tIntObjectHashMap0.keySet();
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet(tIntSet0);
      int[] intArray0 = tSynchronizedIntSet0.toArray(tIntObjectHashMap0._set);
      assertEquals(23, tIntObjectHashMap0.capacity());
      assertNotNull(intArray0);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap$KeyView.clear()V: root-Branch
   * 2 gnu.trove.map.hash.TIntObjectHashMap.clear()V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      TIntSet tIntSet0 = tIntObjectHashMap0.keySet();
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet(tIntSet0);
      tSynchronizedIntSet0.clear();
      assertEquals(23, tIntObjectHashMap0.capacity());
      assertEquals("{", tSynchronizedIntSet0.toString());
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntObjectHashMap$KeyView.add(I)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      TIntSet tIntSet0 = tIntObjectHashMap0.keySet();
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet(tIntSet0);
      // Undeclared exception!
      try {
        tSynchronizedIntSet0.add(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntObjectHashMap$KeyView.getNoEntryValue()I: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      TIntSet tIntSet0 = tIntObjectHashMap0.keySet();
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet(tIntSet0);
      tSynchronizedIntSet0.getNoEntryValue();
      assertEquals(23, tIntObjectHashMap0.capacity());
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap$KeyView.contains(I)Z: root-Branch
   * 2 gnu.trove.map.hash.TIntObjectHashMap.containsKey(I)Z: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      TIntSet tIntSet0 = tIntObjectHashMap0.keySet();
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet(tIntSet0);
      tSynchronizedIntSet0.contains(0);
      assertEquals(23, tIntObjectHashMap0.capacity());
  }

  //Test case number: 8
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap$1.execute(ILjava/lang/Object;)Z: root-Branch
   * 2 gnu.trove.map.hash.TIntObjectHashMap.put(ILjava/lang/Object;)Ljava/lang/Object;: root-Branch
   * 3 gnu.trove.map.hash.TIntObjectHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I11 Branch 48 IFGE L239 - true
   * 4 gnu.trove.map.hash.TIntObjectHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I40 Branch 49 IFEQ L247 - false
   * 5 gnu.trove.map.hash.TIntObjectHashMap.forEachEntry(Lgnu/trove/procedure/TIntObjectProcedure;)Z: I30 Branch 66 IF_ICMPNE L417 - false
   * 6 gnu.trove.map.hash.TIntObjectHashMap.forEachEntry(Lgnu/trove/procedure/TIntObjectProcedure;)Z: I39 Branch 67 IFNE L417 - true
   */

  @Test
  public void test8()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      tIntObjectHashMap0.put(0, (Integer) 0);
      TIntObjectHashMap<Object> tIntObjectHashMap1 = new TIntObjectHashMap<Object>((TIntObjectMap<?>) tIntObjectHashMap0);
      assertEquals(false, tIntObjectHashMap0.isEmpty());
      assertEquals(0, tIntObjectHashMap1.getNoEntryKey());
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntObjectHashMap.forEachKey(Lgnu/trove/procedure/TIntProcedure;)Z: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TIntObjectHashMap<String> tIntObjectHashMap0 = new TIntObjectHashMap<String>((-19), (-19), (-19));
      boolean boolean0 = tIntObjectHashMap0.forEachKey((TIntProcedure) null);
      assertEquals(-19, tIntObjectHashMap0.getNoEntryKey());
      assertEquals(true, boolean0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntObjectHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>(143483);
      assertEquals(286973, tIntObjectHashMap0.capacity());
      assertEquals(0, tIntObjectHashMap0.getNoEntryKey());
  }

  //Test case number: 11
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap$KeyView$TIntHashIterator.next()I: root-Branch
   * 2 gnu.trove.map.hash.TIntObjectHashMap$KeyView.containsAll(Lgnu/trove/TIntCollection;)Z: I18 Branch 6 IFEQ L577 - false
   * 3 gnu.trove.map.hash.TIntObjectHashMap$KeyView.containsAll(Lgnu/trove/TIntCollection;)Z: I26 Branch 7 IFNE L578 - true
   * 4 gnu.trove.map.hash.TIntObjectHashMap$KeyView.containsAll(Lgnu/trove/TIntCollection;)Z: I4 Branch 5 IF_ACMPNE L573 - false
   * 5 gnu.trove.map.hash.TIntObjectHashMap$KeyView.containsAll(Lgnu/trove/TIntCollection;)Z: I18 Branch 6 IFEQ L577 - true
   * 6 gnu.trove.map.hash.TIntObjectHashMap$KeyView.iterator()Lgnu/trove/iterator/TIntIterator;: root-Branch
   * 7 gnu.trove.map.hash.TIntObjectHashMap$KeyView$TIntHashIterator.<init>(Lgnu/trove/map/hash/TIntObjectHashMap$KeyView;Lgnu/trove/impl/hash/TIntHash;)V: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      tIntObjectHashMap0.put(862, (Integer) 862);
      TIntSet tIntSet0 = tIntObjectHashMap0.keySet();
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet(tIntSet0);
      TUnmodifiableIntSet tUnmodifiableIntSet0 = new TUnmodifiableIntSet((TIntSet) tSynchronizedIntSet0);
      boolean boolean0 = tSynchronizedIntSet0.containsAll((TIntCollection) tUnmodifiableIntSet0);
      assertEquals(1, tIntObjectHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 17 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap$TIntObjectHashIterator.key()I: root-Branch
   * 2 gnu.trove.map.hash.TIntObjectHashMap$TIntObjectHashIterator.value()Ljava/lang/Object;: root-Branch
   * 3 gnu.trove.map.hash.TIntObjectHashMap$TIntObjectHashIterator.advance()V: root-Branch
   * 4 gnu.trove.map.hash.TIntObjectHashMap.get(I)Ljava/lang/Object;: I9 Branch 46 IFGE L213 - false
   * 5 gnu.trove.map.hash.TIntObjectHashMap.putIfAbsent(ILjava/lang/Object;)Ljava/lang/Object;: I9 Branch 47 IFGE L229 - true
   * 6 gnu.trove.map.hash.TIntObjectHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 75 IFEQ L476 - false
   * 7 gnu.trove.map.hash.TIntObjectHashMap.equals(Ljava/lang/Object;)Z: I52 Branch 76 IFNONNULL L480 - false
   * 8 gnu.trove.map.hash.TIntObjectHashMap.equals(Ljava/lang/Object;)Z: I58 Branch 77 IFNONNULL L481 - false
   * 9 gnu.trove.map.hash.TIntObjectHashMap.equals(Ljava/lang/Object;)Z: I62 Branch 78 IFNE L481 - false
   * 10 gnu.trove.map.hash.TIntObjectHashMap.iterator()Lgnu/trove/iterator/TIntObjectIterator;: root-Branch
   * 11 gnu.trove.map.hash.TIntObjectHashMap.rehash(I)V: I47 Branch 36 IFLE L161 - true
   * 12 gnu.trove.map.hash.TIntObjectHashMap.rehash(I)V: I47 Branch 36 IFLE L161 - false
   * 13 gnu.trove.map.hash.TIntObjectHashMap.rehash(I)V: I54 Branch 37 IF_ICMPNE L162 - true
   * 14 gnu.trove.map.hash.TIntObjectHashMap.rehash(I)V: I54 Branch 37 IF_ICMPNE L162 - false
   * 15 gnu.trove.map.hash.TIntObjectHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 73 IFNE L467 - true
   * 16 gnu.trove.map.hash.TIntObjectHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 74 IF_ICMPEQ L471 - true
   * 17 gnu.trove.map.hash.TIntObjectHashMap$TIntObjectHashIterator.<init>(Lgnu/trove/map/hash/TIntObjectHashMap;Lgnu/trove/map/hash/TIntObjectHashMap;)V: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>((-1484), (-1484), (-1059));
      TIntObjectHashMap<String> tIntObjectHashMap1 = new TIntObjectHashMap<String>();
      tIntObjectHashMap0.putIfAbsent((-1484), (Integer) (-1484));
      tIntObjectHashMap1._states = tIntObjectHashMap0._states;
      boolean boolean0 = tIntObjectHashMap1.equals((Object) tIntObjectHashMap1);
      assertEquals(7, tIntObjectHashMap1.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap.containsValue(Ljava/lang/Object;)Z: I30 Branch 40 IF_ICMPNE L194 - false
   * 2 gnu.trove.map.hash.TIntObjectHashMap.containsValue(Ljava/lang/Object;)Z: I35 Branch 41 IF_ACMPNE L194 - true
   * 3 gnu.trove.map.hash.TIntObjectHashMap.containsValue(Ljava/lang/Object;)Z: I14 Branch 38 IF_ACMPNE L192 - false
   * 4 gnu.trove.map.hash.TIntObjectHashMap.containsValue(Ljava/lang/Object;)Z: I23 Branch 39 IFLE L193 - true
   * 5 gnu.trove.map.hash.TIntObjectHashMap.containsValue(Ljava/lang/Object;)Z: I23 Branch 39 IFLE L193 - false
   * 6 gnu.trove.map.hash.TIntObjectHashMap.containsValue(Ljava/lang/Object;)Z: I30 Branch 40 IF_ICMPNE L194 - true
   * 7 gnu.trove.map.hash.TIntObjectHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>((-692), 0.0F);
      tIntObjectHashMap0.putIfAbsent(0, (Integer) (-692));
      boolean boolean0 = tIntObjectHashMap0.containsValue((Object) null);
      assertEquals(false, tIntObjectHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 14
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap.containsValue(Ljava/lang/Object;)Z: I57 Branch 43 IF_ICMPNE L200 - false
   * 2 gnu.trove.map.hash.TIntObjectHashMap.containsValue(Ljava/lang/Object;)Z: I62 Branch 44 IF_ACMPEQ L200 - false
   * 3 gnu.trove.map.hash.TIntObjectHashMap.containsValue(Ljava/lang/Object;)Z: I68 Branch 45 IFEQ L200 - true
   * 4 gnu.trove.map.hash.TIntObjectHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 73 IFNE L467 - false
   * 5 gnu.trove.map.hash.TIntObjectHashMap.containsValue(Ljava/lang/Object;)Z: I14 Branch 38 IF_ACMPNE L192 - true
   * 6 gnu.trove.map.hash.TIntObjectHashMap.containsValue(Ljava/lang/Object;)Z: I50 Branch 42 IFLE L199 - true
   * 7 gnu.trove.map.hash.TIntObjectHashMap.containsValue(Ljava/lang/Object;)Z: I50 Branch 42 IFLE L199 - false
   * 8 gnu.trove.map.hash.TIntObjectHashMap.containsValue(Ljava/lang/Object;)Z: I57 Branch 43 IF_ICMPNE L200 - true
   */

  @Test
  public void test14()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>((-9), (-9));
      tIntObjectHashMap0.put((-9), (Integer) 0);
      boolean boolean0 = tIntObjectHashMap0.containsValue((Object) tIntObjectHashMap0);
      assertEquals(false, tIntObjectHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 15
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap.get(I)Ljava/lang/Object;: I9 Branch 46 IFGE L213 - true
   * 2 gnu.trove.map.hash.TIntObjectHashMap.equals(Ljava/lang/Object;)Z: I62 Branch 78 IFNE L481 - true
   * 3 gnu.trove.map.hash.TIntObjectHashMap.equals(Ljava/lang/Object;)Z: I52 Branch 76 IFNONNULL L480 - false
   * 4 gnu.trove.map.hash.TIntObjectHashMap.equals(Ljava/lang/Object;)Z: I58 Branch 77 IFNONNULL L481 - false
   * 5 gnu.trove.map.hash.TIntObjectHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 75 IFEQ L476 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>((-1484), (-1484), (-1059));
      TIntObjectHashMap<String> tIntObjectHashMap1 = new TIntObjectHashMap<String>();
      tIntObjectHashMap0.putIfAbsent((-1484), (Integer) (-1484));
      tIntObjectHashMap1._states = tIntObjectHashMap0._states;
      tIntObjectHashMap0.put((-1059), (Integer) (-1484));
      boolean boolean0 = tIntObjectHashMap1.equals((Object) tIntObjectHashMap1);
      assertEquals(7, tIntObjectHashMap1.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 16
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap.putIfAbsent(ILjava/lang/Object;)Ljava/lang/Object;: I9 Branch 47 IFGE L229 - false
   * 2 gnu.trove.map.hash.TIntObjectHashMap.putAll(Ljava/util/Map;)V: I13 Branch 51 IFEQ L279 - true
   * 3 gnu.trove.map.hash.TIntObjectHashMap.putAll(Ljava/util/Map;)V: I13 Branch 51 IFEQ L279 - false
   */

  @Test
  public void test16()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put((Integer) 0, (Integer) 0);
      tIntObjectHashMap0.putAll((Map<? extends Integer, ? extends Integer>) hashMap0);
      tIntObjectHashMap0.putIfAbsent(0, (Integer) 0);
      assertEquals(false, tIntObjectHashMap0.isEmpty());
      assertEquals(1, tIntObjectHashMap0.size());
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I11 Branch 48 IFGE L239 - false
   * 2 gnu.trove.map.hash.TIntObjectHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I40 Branch 49 IFEQ L247 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>(0, 0);
      tIntObjectHashMap0.put(0, (Integer) 0);
      tIntObjectHashMap0.put(0, (Integer) 0);
      assertEquals(false, tIntObjectHashMap0.isEmpty());
      assertEquals(1, tIntObjectHashMap0.size());
  }

  //Test case number: 18
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap.keys()[I: I34 Branch 53 IF_ICMPNE L316 - false
   * 2 gnu.trove.map.hash.TIntObjectHashMap$KeyView.toArray()[I: root-Branch
   * 3 gnu.trove.map.hash.TIntObjectHashMap.keys()[I: I27 Branch 52 IFLE L315 - true
   * 4 gnu.trove.map.hash.TIntObjectHashMap.keys()[I: I27 Branch 52 IFLE L315 - false
   * 5 gnu.trove.map.hash.TIntObjectHashMap.keys()[I: I34 Branch 53 IF_ICMPNE L316 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      tIntObjectHashMap0.putIfAbsent(0, (Integer) 0);
      TIntSet tIntSet0 = tIntObjectHashMap0.keySet();
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet(tIntSet0);
      tSynchronizedIntSet0.toArray();
      assertEquals(1, tIntObjectHashMap0.size());
      assertEquals("{0=0}", tIntObjectHashMap0.toString());
  }

  //Test case number: 19
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap.keys([I)[I: I41 Branch 56 IF_ICMPNE L335 - false
   * 2 gnu.trove.map.hash.TIntObjectHashMap.keys([I)[I: I6 Branch 54 IF_ICMPGE L327 - true
   * 3 gnu.trove.map.hash.TIntObjectHashMap.keys([I)[I: I34 Branch 55 IFLE L334 - true
   * 4 gnu.trove.map.hash.TIntObjectHashMap.keys([I)[I: I34 Branch 55 IFLE L334 - false
   * 5 gnu.trove.map.hash.TIntObjectHashMap.keys([I)[I: I41 Branch 56 IF_ICMPNE L335 - true
   */

  @Test
  public void test19()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put((Integer) 0, (Integer) 0);
      tIntObjectHashMap0.putAll((Map<? extends Integer, ? extends Integer>) hashMap0);
      tIntObjectHashMap0.keys(tIntObjectHashMap0._set);
      assertEquals(1, tIntObjectHashMap0.size());
      assertEquals(false, tIntObjectHashMap0.isEmpty());
  }

  //Test case number: 20
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap.values()[Ljava/lang/Object;: I35 Branch 58 IF_ICMPNE L357 - false
   * 2 gnu.trove.map.hash.TIntObjectHashMap.values()[Ljava/lang/Object;: I28 Branch 57 IFLE L356 - true
   * 3 gnu.trove.map.hash.TIntObjectHashMap.values()[Ljava/lang/Object;: I28 Branch 57 IFLE L356 - false
   * 4 gnu.trove.map.hash.TIntObjectHashMap.values()[Ljava/lang/Object;: I35 Branch 58 IF_ICMPNE L357 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>((-692), 0.0F);
      tIntObjectHashMap0.putIfAbsent(0, (Integer) (-692));
      tIntObjectHashMap0.values();
      assertEquals(7, tIntObjectHashMap0.capacity());
      assertEquals("{0=-692}", tIntObjectHashMap0.toString());
  }

  //Test case number: 21
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: I46 Branch 61 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TIntObjectHashMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: I6 Branch 59 IF_ICMPGE L368 - true
   * 3 gnu.trove.map.hash.TIntObjectHashMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: I39 Branch 60 IFLE L376 - true
   * 4 gnu.trove.map.hash.TIntObjectHashMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: I39 Branch 60 IFLE L376 - false
   * 5 gnu.trove.map.hash.TIntObjectHashMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: I46 Branch 61 IF_ICMPNE L377 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>((-692), 0.0F);
      tIntObjectHashMap0.putIfAbsent(0, (Integer) (-692));
      Integer[] integerArray0 = new Integer[6];
      tIntObjectHashMap0.values(integerArray0);
      assertEquals("{0=-692}", tIntObjectHashMap0.toString());
      assertEquals(7, tIntObjectHashMap0.capacity());
  }

  //Test case number: 22
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I25 Branch 63 IF_ICMPNE L402 - false
   * 2 gnu.trove.map.hash.TIntObjectHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I31 Branch 64 IFNE L402 - true
   * 3 gnu.trove.map.hash.TIntObjectHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I18 Branch 62 IFLE L401 - true
   * 4 gnu.trove.map.hash.TIntObjectHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I18 Branch 62 IFLE L401 - false
   * 5 gnu.trove.map.hash.TIntObjectHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I25 Branch 63 IF_ICMPNE L402 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>((-1484), (-1484), (-1059));
      tIntObjectHashMap0.putIfAbsent((-1484), (Integer) (-1484));
      Integer[] integerArray0 = new Integer[7];
      ToObjectArrayProceedure<Integer> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Integer>(integerArray0);
      boolean boolean0 = tIntObjectHashMap0.forEachValue((TObjectProcedure<? super Integer>) toObjectArrayProceedure0);
      assertEquals(false, tIntObjectHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap.retainEntries(Lgnu/trove/procedure/TIntObjectProcedure;)Z: I31 Branch 68 IFLE L436 - true
   * 2 gnu.trove.map.hash.TIntObjectHashMap.retainEntries(Lgnu/trove/procedure/TIntObjectProcedure;)Z: I31 Branch 68 IFLE L436 - false
   * 3 gnu.trove.map.hash.TIntObjectHashMap.retainEntries(Lgnu/trove/procedure/TIntObjectProcedure;)Z: I38 Branch 69 IF_ICMPNE L437 - true
   */

  @Test
  public void test23()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>(0, 231823147, 231823147);
      boolean boolean0 = tIntObjectHashMap0.retainEntries((TIntObjectProcedure<? super Integer>) null);
      assertEquals(false, boolean0);
      assertEquals(231823147, tIntObjectHashMap0.getNoEntryKey());
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I18 Branch 71 IFLE L455 - true
   * 2 gnu.trove.map.hash.TIntObjectHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I18 Branch 71 IFLE L455 - false
   * 3 gnu.trove.map.hash.TIntObjectHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I25 Branch 72 IF_ICMPNE L456 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TIntObjectHashMap<String> tIntObjectHashMap0 = new TIntObjectHashMap<String>(0, 0);
      tIntObjectHashMap0.transformValues((TObjectFunction<String, String>) null);
      assertEquals(0, tIntObjectHashMap0.getNoEntryKey());
  }

  //Test case number: 25
  /*
   * 13 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap.equals(Ljava/lang/Object;)Z: I52 Branch 76 IFNONNULL L480 - true
   * 2 gnu.trove.map.hash.TIntObjectHashMap.equals(Ljava/lang/Object;)Z: I75 Branch 79 IFNE L485 - true
   * 3 gnu.trove.map.hash.TIntObjectHashMap.<init>(IF)V: root-Branch
   * 4 gnu.trove.map.hash.TIntObjectHashMap.iterator()Lgnu/trove/iterator/TIntObjectIterator;: root-Branch
   * 5 gnu.trove.map.hash.TIntObjectHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 73 IFNE L467 - true
   * 6 gnu.trove.map.hash.TIntObjectHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 74 IF_ICMPEQ L471 - true
   * 7 gnu.trove.map.hash.TIntObjectHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 75 IFEQ L476 - true
   * 8 gnu.trove.map.hash.TIntObjectHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 75 IFEQ L476 - false
   * 9 gnu.trove.map.hash.TIntObjectHashMap.get(I)Ljava/lang/Object;: I9 Branch 46 IFGE L213 - true
   * 10 gnu.trove.map.hash.TIntObjectHashMap$TIntObjectHashIterator.key()I: root-Branch
   * 11 gnu.trove.map.hash.TIntObjectHashMap$TIntObjectHashIterator.value()Ljava/lang/Object;: root-Branch
   * 12 gnu.trove.map.hash.TIntObjectHashMap$TIntObjectHashIterator.advance()V: root-Branch
   * 13 gnu.trove.map.hash.TIntObjectHashMap$TIntObjectHashIterator.<init>(Lgnu/trove/map/hash/TIntObjectHashMap;Lgnu/trove/map/hash/TIntObjectHashMap;)V: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TIntObjectHashMap<String> tIntObjectHashMap0 = new TIntObjectHashMap<String>((-1481), (-1481));
      tIntObjectHashMap0.putIfAbsent((-1481), "");
      boolean boolean0 = tIntObjectHashMap0.equals((Object) tIntObjectHashMap0);
      assertEquals(1, tIntObjectHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 26
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap.hashCode()I: I29 Branch 81 IF_ICMPNE L503 - false
   * 2 gnu.trove.map.hash.TIntObjectHashMap.hashCode()I: I41 Branch 82 IFNONNULL L504 - false
   * 3 gnu.trove.map.hash.TIntObjectHashMap.putAll(Ljava/util/Map;)V: I13 Branch 51 IFEQ L279 - true
   * 4 gnu.trove.map.hash.TIntObjectHashMap.putAll(Ljava/util/Map;)V: I13 Branch 51 IFEQ L279 - false
   * 5 gnu.trove.map.hash.TIntObjectHashMap.hashCode()I: I22 Branch 80 IFLE L502 - true
   * 6 gnu.trove.map.hash.TIntObjectHashMap.hashCode()I: I22 Branch 80 IFLE L502 - false
   * 7 gnu.trove.map.hash.TIntObjectHashMap.hashCode()I: I29 Branch 81 IF_ICMPNE L503 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      TIntObjectHashMap<Object> tIntObjectHashMap1 = new TIntObjectHashMap<Object>((TIntObjectMap<?>) tIntObjectHashMap0);
      tIntObjectHashMap1._states = tIntObjectHashMap0._states;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put((Integer) 0, (Integer) 0);
      tIntObjectHashMap0.putAll((Map<? extends Integer, ? extends Integer>) hashMap0);
      int int0 = tIntObjectHashMap1.hashCode();
      assertEquals(false, tIntObjectHashMap0.isEmpty());
      assertEquals(0, int0);
  }

  //Test case number: 27
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap.hashCode()I: I41 Branch 82 IFNONNULL L504 - true
   * 2 gnu.trove.map.hash.TIntObjectHashMap.hashCode()I: I22 Branch 80 IFLE L502 - true
   * 3 gnu.trove.map.hash.TIntObjectHashMap.hashCode()I: I22 Branch 80 IFLE L502 - false
   * 4 gnu.trove.map.hash.TIntObjectHashMap.hashCode()I: I29 Branch 81 IF_ICMPNE L503 - true
   * 5 gnu.trove.map.hash.TIntObjectHashMap.hashCode()I: I29 Branch 81 IF_ICMPNE L503 - false
   */

  @Test
  public void test27()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      tIntObjectHashMap0.put(0, (Integer) 0);
      int int0 = tIntObjectHashMap0.hashCode();
      assertEquals("{0=0}", tIntObjectHashMap0.toString());
      assertEquals(0, int0);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntObjectHashMap$KeyView.isEmpty()Z: I5 Branch 1 IFNE L526 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      tIntObjectHashMap0.putIfAbsent(0, (Integer) 0);
      TIntSet tIntSet0 = tIntObjectHashMap0.keySet();
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet(tIntSet0);
      TUnmodifiableIntSet tUnmodifiableIntSet0 = new TUnmodifiableIntSet((TIntSet) tSynchronizedIntSet0);
      boolean boolean0 = tUnmodifiableIntSet0.isEmpty();
      assertEquals(false, tIntObjectHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap$KeyView.remove(I)Z: I7 Branch 2 IF_ACMPEQ L556 - true
   * 2 gnu.trove.map.hash.TIntObjectHashMap.remove(I)Ljava/lang/Object;: I13 Branch 50 IFLT L259 - true
   */

  @Test
  public void test29()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      TIntSet tIntSet0 = tIntObjectHashMap0.keySet();
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet(tIntSet0);
      tSynchronizedIntSet0.remove(43);
      assertEquals(true, tIntObjectHashMap0.isEmpty());
      assertEquals(23, tIntObjectHashMap0.capacity());
      assertEquals(true, tSynchronizedIntSet0.isEmpty());
  }

  //Test case number: 30
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap$KeyView.remove(I)Z: I7 Branch 2 IF_ACMPEQ L556 - false
   * 2 gnu.trove.map.hash.TIntObjectHashMap$KeyView.removeAll(Lgnu/trove/TIntCollection;)Z: I4 Branch 21 IF_ACMPNE L672 - false
   * 3 gnu.trove.map.hash.TIntObjectHashMap$KeyView.removeAll(Lgnu/trove/TIntCollection;)Z: I26 Branch 22 IFEQ L678 - false
   * 4 gnu.trove.map.hash.TIntObjectHashMap$KeyView.removeAll(Lgnu/trove/TIntCollection;)Z: I37 Branch 23 IFEQ L680 - false
   * 5 gnu.trove.map.hash.TIntObjectHashMap.removeAt(I)V: root-Branch
   * 6 gnu.trove.map.hash.TIntObjectHashMap.remove(I)Ljava/lang/Object;: I13 Branch 50 IFLT L259 - false
   */

  @Test
  public void test30()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      tIntObjectHashMap0.putIfAbsent(0, (Integer) 0);
      TIntSet tIntSet0 = tIntObjectHashMap0.keySet();
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet(tIntSet0);
      TUnmodifiableIntSet tUnmodifiableIntSet0 = new TUnmodifiableIntSet((TIntSet) tSynchronizedIntSet0);
      assertEquals(1, tIntObjectHashMap0.size());
      
      // Undeclared exception!
      try {
        tSynchronizedIntSet0.removeAll((TIntCollection) tUnmodifiableIntSet0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 31
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap$KeyView.containsAll(Lgnu/trove/TIntCollection;)Z: I4 Branch 5 IF_ACMPNE L573 - true
   * 2 gnu.trove.map.hash.TIntObjectHashMap$KeyView.containsAll(Lgnu/trove/TIntCollection;)Z: I26 Branch 7 IFNE L578 - false
   * 3 gnu.trove.map.hash.TIntObjectHashMap$KeyView.retainAll([I)Z: I28 Branch 15 IFLE L647 - true
   * 4 gnu.trove.map.hash.TIntObjectHashMap$KeyView.retainAll([I)Z: I28 Branch 15 IFLE L647 - false
   * 5 gnu.trove.map.hash.TIntObjectHashMap$KeyView.retainAll([I)Z: I35 Branch 16 IF_ICMPNE L648 - true
   * 6 gnu.trove.map.hash.TIntObjectHashMap$KeyView.retainAll([I)Z: I35 Branch 16 IF_ICMPNE L648 - false
   * 7 gnu.trove.map.hash.TIntObjectHashMap$KeyView.retainAll([I)Z: I41 Branch 17 IFGE L648 - true
   * 8 gnu.trove.map.hash.TIntObjectHashMap$KeyView.containsAll(Lgnu/trove/TIntCollection;)Z: I18 Branch 6 IFEQ L577 - false
   * 9 gnu.trove.map.hash.TIntObjectHashMap$KeyView$TIntHashIterator.next()I: root-Branch
   */

  @Test
  public void test31()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      tIntObjectHashMap0.put(862, (Integer) 862);
      TIntSet tIntSet0 = tIntObjectHashMap0.keySet();
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet(tIntSet0);
      tSynchronizedIntSet0.retainAll(tIntObjectHashMap0._set);
      TUnmodifiableIntSet tUnmodifiableIntSet0 = new TUnmodifiableIntSet((TIntSet) tSynchronizedIntSet0);
      boolean boolean0 = tSynchronizedIntSet0.containsAll((TIntCollection) tUnmodifiableIntSet0);
      assertEquals(1, tIntObjectHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 32
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap$KeyView.containsAll([I)Z: I14 Branch 8 IF_ICMPGE L587 - true
   * 2 gnu.trove.map.hash.TIntObjectHashMap$KeyView.containsAll([I)Z: I14 Branch 8 IF_ICMPGE L587 - false
   * 3 gnu.trove.map.hash.TIntObjectHashMap$KeyView.containsAll([I)Z: I25 Branch 9 IFNE L588 - true
   */

  @Test
  public void test32()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      tIntObjectHashMap0.putIfAbsent(0, (Integer) 0);
      TIntSet tIntSet0 = tIntObjectHashMap0.keySet();
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet(tIntSet0);
      TUnmodifiableIntSet tUnmodifiableIntSet0 = new TUnmodifiableIntSet((TIntSet) tSynchronizedIntSet0);
      boolean boolean0 = tUnmodifiableIntSet0.containsAll(tIntObjectHashMap0._set);
      assertEquals("{0=0}", tIntObjectHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 33
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap$KeyView.containsAll([I)Z: I25 Branch 9 IFNE L588 - false
   * 2 gnu.trove.map.hash.TIntObjectHashMap$KeyView.containsAll([I)Z: I14 Branch 8 IF_ICMPGE L587 - false
   * 3 gnu.trove.map.hash.TIntObjectHashMap.containsKey(I)Z: root-Branch
   */

  @Test
  public void test33()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      TIntSet tIntSet0 = tIntObjectHashMap0.keySet();
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet(tIntSet0);
      TUnmodifiableIntSet tUnmodifiableIntSet0 = new TUnmodifiableIntSet((TIntSet) tSynchronizedIntSet0);
      tUnmodifiableIntSet0.containsAll(tIntObjectHashMap0._set);
      assertEquals(23, tIntObjectHashMap0.capacity());
  }

  //Test case number: 34
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap$KeyView.retainAll(Ljava/util/Collection;)Z: I13 Branch 10 IFEQ L614 - true
   * 2 gnu.trove.map.hash.TIntObjectHashMap$ValueView.<init>(Lgnu/trove/map/hash/TIntObjectHashMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TIntObjectHashMap$KeyView.iterator()Lgnu/trove/iterator/TIntIterator;: root-Branch
   * 4 gnu.trove.map.hash.TIntObjectHashMap.getNoEntryKey()I: root-Branch
   * 5 gnu.trove.map.hash.TIntObjectHashMap.valueCollection()Ljava/util/Collection;: root-Branch
   * 6 gnu.trove.map.hash.TIntObjectHashMap.<init>(Lgnu/trove/map/TIntObjectMap;)V: root-Branch
   * 7 gnu.trove.map.hash.TIntObjectHashMap.putAll(Lgnu/trove/map/TIntObjectMap;)V: root-Branch
   * 8 gnu.trove.map.hash.TIntObjectHashMap$KeyView$TIntHashIterator.<init>(Lgnu/trove/map/hash/TIntObjectHashMap$KeyView;Lgnu/trove/impl/hash/TIntHash;)V: root-Branch
   */

  @Test
  public void test34()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      TIntObjectHashMap<Object> tIntObjectHashMap1 = new TIntObjectHashMap<Object>((TIntObjectMap<?>) tIntObjectHashMap0);
      Collection<Object> collection0 = tIntObjectHashMap1.valueCollection();
      TIntSet tIntSet0 = tIntObjectHashMap0.keySet();
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet(tIntSet0);
      tSynchronizedIntSet0.retainAll(collection0);
      assertEquals(0, tIntObjectHashMap1.getNoEntryKey());
      assertEquals(23, tIntObjectHashMap0.capacity());
      assertEquals("{}", tIntObjectHashMap1.toString());
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntObjectHashMap$KeyView.equals(Ljava/lang/Object;)Z: I4 Branch 26 IFNE L710 - false
   */

  @Test
  public void test35()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      TIntSet tIntSet0 = tIntObjectHashMap0.keySet();
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet(tIntSet0);
      tSynchronizedIntSet0.equals((Object) "{");
      assertEquals(23, tIntObjectHashMap0.capacity());
  }

  //Test case number: 36
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap$KeyView.toString()Ljava/lang/String;: I30 Branch 34 IF_ICMPNE L743 - false
   * 2 gnu.trove.map.hash.TIntObjectHashMap$KeyView.toString()Ljava/lang/String;: I34 Branch 35 IFEQ L744 - false
   * 3 gnu.trove.map.hash.TIntObjectHashMap$KeyView.<init>(Lgnu/trove/map/hash/TIntObjectHashMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TIntObjectHashMap$KeyView.toString()Ljava/lang/String;: I21 Branch 33 IFLE L742 - true
   * 5 gnu.trove.map.hash.TIntObjectHashMap$KeyView.toString()Ljava/lang/String;: I21 Branch 33 IFLE L742 - false
   * 6 gnu.trove.map.hash.TIntObjectHashMap$KeyView.toString()Ljava/lang/String;: I30 Branch 34 IF_ICMPNE L743 - true
   * 7 gnu.trove.map.hash.TIntObjectHashMap.keySet()Lgnu/trove/set/TIntSet;: root-Branch
   */

  @Test
  public void test36()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      tIntObjectHashMap0.put(862, (Integer) 862);
      TIntSet tIntSet0 = tIntObjectHashMap0.keySet();
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet(tIntSet0);
      String string0 = tSynchronizedIntSet0.toString();
      assertEquals(false, tIntObjectHashMap0.isEmpty());
      assertEquals("{862", string0);
  }

  //Test case number: 37
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I39 Branch 84 IF_ICMPNE L974 - false
   * 2 gnu.trove.map.hash.TIntObjectHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TIntObjectHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 83 IFLE L973 - true
   * 4 gnu.trove.map.hash.TIntObjectHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 83 IFLE L973 - false
   * 5 gnu.trove.map.hash.TIntObjectHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I39 Branch 84 IF_ICMPNE L974 - true
   */

  @Test
  public void test37()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      tIntObjectHashMap0.put(0, (Integer) 0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tIntObjectHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals("{0=0}", tIntObjectHashMap0.toString());
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\u0016\u0000\u0000?\u0000\u0000\u0000?\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000sr\u0000\u0011java.lang.Integer\u0012\u2824\uFFFD\uFFFD\uFFFD8\u0002\u0000\u0001I\u0000\u0005valuexr\u0000\u0010java.lang.Number\uFFFD\uFFFD\uFFFD\u001D\u000B\uFFFD\uFFFD\uFFFD\u0002\u0000\u0000xp\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  //Test case number: 38
  /*
   * 20 covered goals:
   * 1 gnu.trove.map.hash.TIntObjectHashMap$2.execute(ILjava/lang/Object;)Z: I4 Branch 97 IFEQ L1013 - true
   * 2 gnu.trove.map.hash.TIntObjectHashMap$2.execute(ILjava/lang/Object;)Z: I4 Branch 97 IFEQ L1013 - false
   * 3 gnu.trove.map.hash.TIntObjectHashMap$2.<init>(Lgnu/trove/map/hash/TIntObjectHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 4 gnu.trove.map.hash.TIntObjectHashMap$1.<init>(Lgnu/trove/map/hash/TIntObjectHashMap;)V: root-Branch
   * 5 gnu.trove.map.hash.TIntObjectHashMap.setUp(I)I: root-Branch
   * 6 gnu.trove.map.hash.TIntObjectHashMap.<init>(IFI)V: root-Branch
   * 7 gnu.trove.map.hash.TIntObjectHashMap.toString()Ljava/lang/String;: root-Branch
   * 8 gnu.trove.map.hash.TIntObjectHashMap.put(ILjava/lang/Object;)Ljava/lang/Object;: root-Branch
   * 9 gnu.trove.map.hash.TIntObjectHashMap.putIfAbsent(ILjava/lang/Object;)Ljava/lang/Object;: I9 Branch 47 IFGE L229 - true
   * 10 gnu.trove.map.hash.TIntObjectHashMap.rehash(I)V: I47 Branch 36 IFLE L161 - true
   * 11 gnu.trove.map.hash.TIntObjectHashMap.rehash(I)V: I47 Branch 36 IFLE L161 - false
   * 12 gnu.trove.map.hash.TIntObjectHashMap.rehash(I)V: I54 Branch 37 IF_ICMPNE L162 - true
   * 13 gnu.trove.map.hash.TIntObjectHashMap.rehash(I)V: I54 Branch 37 IF_ICMPNE L162 - false
   * 14 gnu.trove.map.hash.TIntObjectHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I11 Branch 48 IFGE L239 - true
   * 15 gnu.trove.map.hash.TIntObjectHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I40 Branch 49 IFEQ L247 - false
   * 16 gnu.trove.map.hash.TIntObjectHashMap.forEachEntry(Lgnu/trove/procedure/TIntObjectProcedure;)Z: I23 Branch 65 IFLE L416 - true
   * 17 gnu.trove.map.hash.TIntObjectHashMap.forEachEntry(Lgnu/trove/procedure/TIntObjectProcedure;)Z: I23 Branch 65 IFLE L416 - false
   * 18 gnu.trove.map.hash.TIntObjectHashMap.forEachEntry(Lgnu/trove/procedure/TIntObjectProcedure;)Z: I30 Branch 66 IF_ICMPNE L417 - true
   * 19 gnu.trove.map.hash.TIntObjectHashMap.forEachEntry(Lgnu/trove/procedure/TIntObjectProcedure;)Z: I30 Branch 66 IF_ICMPNE L417 - false
   * 20 gnu.trove.map.hash.TIntObjectHashMap.forEachEntry(Lgnu/trove/procedure/TIntObjectProcedure;)Z: I39 Branch 67 IFNE L417 - true
   */

  @Test
  public void test38()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>((-1484), (-1484), (-1059));
      tIntObjectHashMap0.putIfAbsent((-1484), (Integer) (-1484));
      tIntObjectHashMap0.put((-1059), (Integer) (-1484));
      String string0 = tIntObjectHashMap0.toString();
      assertEquals(false, tIntObjectHashMap0.isEmpty());
      assertEquals("{-1059=-1484,-1484=-1484}", string0);
  }
}
