/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TShortFunction;
import gnu.trove.impl.sync.TSynchronizedFloatSet;
import gnu.trove.impl.sync.TSynchronizedFloatShortMap;
import gnu.trove.impl.sync.TSynchronizedShortCollection;
import gnu.trove.iterator.TFloatShortIterator;
import gnu.trove.map.TFloatShortMap;
import gnu.trove.map.hash.TFloatShortHashMap;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.procedure.TFloatShortProcedure;
import gnu.trove.procedure.TShortProcedure;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedFloatShortMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.increment(F)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatShortMap.<init>(Lgnu/trove/map/TFloatShortMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(1, 1);
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      boolean boolean0 = tSynchronizedFloatShortMap0.increment((float) 1);
      assertEquals(false, boolean0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(905);
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      String string0 = tSynchronizedFloatShortMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-4));
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      boolean boolean0 = tSynchronizedFloatShortMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.size()I: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatShortMap.getNoEntryValue()S: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      boolean boolean0 = tFloatShortHashMap0.equals((Object) tSynchronizedFloatShortMap0);
      assertEquals(true, boolean0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.<init>(Lgnu/trove/map/TFloatShortMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(989, (float) 989, (float) 989, (short) (-3));
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap1 = new TSynchronizedFloatShortMap((TFloatShortMap) tSynchronizedFloatShortMap0, (Object) "");
      assertEquals(0, tSynchronizedFloatShortMap1.size());
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      // Undeclared exception!
      try {
        tSynchronizedFloatShortMap0.putAll((Map<? extends Float, ? extends Short>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.adjustOrPutValue(FSS)S: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(989, (float) 989, (float) 989, (short) (-3));
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      short short0 = tSynchronizedFloatShortMap0.adjustOrPutValue((float) 989, (short) (-3), (short) (-3));
      assertEquals(false, tFloatShortHashMap0.isEmpty());
      assertEquals((short) (-3), short0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.values()[S: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1077));
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      short[] shortArray0 = tSynchronizedFloatShortMap0.values();
      assertNotNull(shortArray0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.putIfAbsent(FS)S: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(905);
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      tSynchronizedFloatShortMap0.putIfAbsent((float) (short) (-1649), (short) (-1649));
      assertEquals(1, tFloatShortHashMap0.size());
      assertEquals("{-1649.0=-1649}", tSynchronizedFloatShortMap0.toString());
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.containsValue(S)Z: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(905);
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      boolean boolean0 = tSynchronizedFloatShortMap0.containsValue((short) (-1649));
      assertEquals(false, boolean0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.remove(F)S: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(1, 1);
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      short short0 = tSynchronizedFloatShortMap0.remove((float) 1);
      assertEquals((short)0, short0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.clear()V: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-4));
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      tSynchronizedFloatShortMap0.clear();
      assertEquals(0, tSynchronizedFloatShortMap0.size());
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.retainEntries(Lgnu/trove/procedure/TFloatShortProcedure;)Z: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-14), (float) (-14), (float) (-14), (short)0);
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      boolean boolean0 = tSynchronizedFloatShortMap0.retainEntries((TFloatShortProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.keys([F)[F: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(989, (float) 989, (float) 989, (short) (-3));
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      float[] floatArray0 = tSynchronizedFloatShortMap0.keys(tFloatShortHashMap0._set);
      assertNotNull(floatArray0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.get(F)S: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-4));
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      short short0 = tSynchronizedFloatShortMap0.get((float) (-4));
      assertEquals((short)0, short0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.values([S)[S: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(1, 1);
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      short[] shortArray0 = new short[8];
      short[] shortArray1 = tSynchronizedFloatShortMap0.values(shortArray0);
      assertSame(shortArray1, shortArray0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.putAll(Lgnu/trove/map/TFloatShortMap;)V: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      tSynchronizedFloatShortMap0.putAll((TFloatShortMap) tFloatShortHashMap0);
      assertEquals(0, tSynchronizedFloatShortMap0.size());
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.forEachEntry(Lgnu/trove/procedure/TFloatShortProcedure;)Z: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(905);
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      boolean boolean0 = tSynchronizedFloatShortMap0.forEachEntry((TFloatShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.equals(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(905);
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      boolean boolean0 = tSynchronizedFloatShortMap0.equals((Object) "{}");
      assertEquals(false, boolean0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.iterator()Lgnu/trove/iterator/TFloatShortIterator;: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(905);
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      TFloatShortIterator tFloatShortIterator0 = tSynchronizedFloatShortMap0.iterator();
      assertEquals(false, tFloatShortIterator0.hasNext());
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.keys()[F: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(905);
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      float[] floatArray0 = tSynchronizedFloatShortMap0.keys();
      assertNotNull(floatArray0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(989, (float) 989, (float) 989, (short) (-3));
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      boolean boolean0 = tSynchronizedFloatShortMap0.forEachKey((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.getNoEntryKey()F: root-Branch
   */

//   @Test
//   public void test22()  throws Throwable  {
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(1, 1);
//       TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
//       float float0 = tSynchronizedFloatShortMap0.getNoEntryKey();
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.adjustValue(FS)Z: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(905);
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      boolean boolean0 = tSynchronizedFloatShortMap0.adjustValue((float) 905, (short)0);
      assertEquals(false, boolean0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.hashCode()I: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(905);
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      int int0 = tSynchronizedFloatShortMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.transformValues(Lgnu/trove/function/TShortFunction;)V: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1077));
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      tSynchronizedFloatShortMap0.transformValues((TShortFunction) null);
      assertEquals(true, tSynchronizedFloatShortMap0.isEmpty());
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.put(FS)S: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      tSynchronizedFloatShortMap0.put((float) 0, (short)73);
      assertEquals(1, tFloatShortHashMap0.size());
      assertEquals("{0.0=73}", tSynchronizedFloatShortMap0.toString());
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.containsKey(F)Z: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      boolean boolean0 = tSynchronizedFloatShortMap0.containsKey((float) 0);
      assertEquals(false, boolean0);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.forEachValue(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   */

  @Test
  public void test28()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-14), (float) (-14), (float) (-14), (short)0);
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      boolean boolean0 = tSynchronizedFloatShortMap0.forEachValue((TShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.<init>(Lgnu/trove/map/TFloatShortMap;)V: I17 Branch 1 IFNONNULL L59 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = null;
      try {
        tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.keySet()Lgnu/trove/set/TFloatSet;: I11 Branch 2 IFNONNULL L107 - true
   * 2 gnu.trove.impl.sync.TSynchronizedFloatShortMap.keySet()Lgnu/trove/set/TFloatSet;: I11 Branch 2 IFNONNULL L107 - false
   */

  @Test
  public void test30()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(989, (float) 989, (float) 989, (short) (-3));
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      TSynchronizedFloatSet tSynchronizedFloatSet0 = (TSynchronizedFloatSet)tSynchronizedFloatShortMap0.keySet();
      assertNotNull(tSynchronizedFloatSet0);
      
      TSynchronizedFloatSet tSynchronizedFloatSet1 = (TSynchronizedFloatSet)tSynchronizedFloatShortMap0.keySet();
      assertSame(tSynchronizedFloatSet1, tSynchronizedFloatSet0);
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatShortMap.valueCollection()Lgnu/trove/TShortCollection;: I11 Branch 3 IFNONNULL L121 - true
   * 2 gnu.trove.impl.sync.TSynchronizedFloatShortMap.valueCollection()Lgnu/trove/TShortCollection;: I11 Branch 3 IFNONNULL L121 - false
   * 3 gnu.trove.impl.sync.TSynchronizedFloatShortMap.<init>(Lgnu/trove/map/TFloatShortMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test31()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(989, (float) 989, (float) 989, (short) (-3));
      TSynchronizedFloatShortMap tSynchronizedFloatShortMap0 = new TSynchronizedFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      TSynchronizedShortCollection tSynchronizedShortCollection0 = (TSynchronizedShortCollection)tSynchronizedFloatShortMap0.valueCollection();
      assertNotNull(tSynchronizedShortCollection0);
      
      TSynchronizedShortCollection tSynchronizedShortCollection1 = (TSynchronizedShortCollection)tSynchronizedFloatShortMap0.valueCollection();
      assertSame(tSynchronizedShortCollection1, tSynchronizedShortCollection0);
  }
}
