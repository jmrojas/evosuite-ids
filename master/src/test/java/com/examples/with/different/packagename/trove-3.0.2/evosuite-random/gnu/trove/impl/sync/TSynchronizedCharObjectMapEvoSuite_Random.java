/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedCharObjectMap;
import gnu.trove.impl.sync.TSynchronizedCharSet;
import gnu.trove.map.TCharObjectMap;
import gnu.trove.map.hash.TCharObjectHashMap;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.RandomAccessFile;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedCharObjectMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-1686);
      float float0 = 0.0F;
      TCharObjectHashMap<Integer> tCharObjectHashMap0 = new TCharObjectHashMap<Integer>(int0, float0);
      Locale locale0 = Locale.getDefault();
      String string0 = locale0.getDisplayVariant();
      TSynchronizedCharObjectMap<Integer> tSynchronizedCharObjectMap0 = new TSynchronizedCharObjectMap<Integer>((TCharObjectMap<Integer>) tCharObjectHashMap0, (Object) string0);
      tSynchronizedCharObjectMap0.keySet();
      float float1 = 1903.7545F;
      char char0 = '3';
      TCharObjectHashMap<Integer> tCharObjectHashMap1 = new TCharObjectHashMap<Integer>(int0, float1, char0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string1 = ";,XngFu01'lXy^g";
      try {
        byteArrayOutputStream0.toString(string1);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // ;,XngFu01'lXy^g
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 355;
      TCharObjectHashMap<Integer> tCharObjectHashMap0 = new TCharObjectHashMap<Integer>(int0);
      TSynchronizedCharObjectMap<Integer> tSynchronizedCharObjectMap0 = new TSynchronizedCharObjectMap<Integer>((TCharObjectMap<Integer>) tCharObjectHashMap0);
      TSynchronizedCharObjectMap<Integer> tSynchronizedCharObjectMap1 = new TSynchronizedCharObjectMap<Integer>((TCharObjectMap<Integer>) tSynchronizedCharObjectMap0);
      int int1 = (-1943);
      char char0 = 'l';
      TCharObjectHashMap<Character> tCharObjectHashMap1 = new TCharObjectHashMap<Character>(int1, (float) int0, char0);
      TSynchronizedCharObjectMap<Character> tSynchronizedCharObjectMap2 = new TSynchronizedCharObjectMap<Character>((TCharObjectMap<Character>) tCharObjectHashMap1);
      tSynchronizedCharObjectMap2.isEmpty();
      float float0 = 725.2689F;
      char char1 = 'k';
      TCharObjectHashMap<Character> tCharObjectHashMap2 = new TCharObjectHashMap<Character>(int0, float0, char1);
      TCharObjectHashMap<Character> tCharObjectHashMap3 = new TCharObjectHashMap<Character>((TCharObjectMap<? extends Character>) tCharObjectHashMap2);
      TSynchronizedCharObjectMap<Character> tSynchronizedCharObjectMap3 = new TSynchronizedCharObjectMap<Character>((TCharObjectMap<Character>) tCharObjectHashMap3);
      TCharObjectHashMap<String> tCharObjectHashMap4 = new TCharObjectHashMap<String>((int) char1);
      String string0 = "Factor must be >= 0: ";
      TSynchronizedCharObjectMap<String> tSynchronizedCharObjectMap4 = new TSynchronizedCharObjectMap<String>((TCharObjectMap<String>) tCharObjectHashMap4, (Object) string0);
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try {
        locale0.getUnicodeLocaleType(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: Factor must be >= 0: 
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-1413);
      TCharObjectMap<Character> tCharObjectMap0 = null;
      TSynchronizedCharObjectMap<Character> tSynchronizedCharObjectMap0 = null;
      try {
        tSynchronizedCharObjectMap0 = new TSynchronizedCharObjectMap<Character>(tCharObjectMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TCharObjectMap<Object> tCharObjectMap0 = null;
      String string0 = "DEFAULT_BYTE_NO_ENTRY_VALUE: ";
      int int0 = (-1404);
      float float0 = 0.5F;
      TCharObjectHashMap<Integer> tCharObjectHashMap0 = new TCharObjectHashMap<Integer>(int0, float0);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: DEFAULT_BYTE_NO_ENTRY_VALUE: ://DEFAULT_BYTE_NO_ENTRY_VALUE:%20DEFAULT_BYTE_NO_ENTRY_VALUE:%20?DEFAULT_BYTE_NO_ENTRY_VALUE:%20#DEFAULT_BYTE_NO_ENTRY_VALUE:%20
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-369);
      char char0 = '1';
      TCharObjectHashMap<Integer> tCharObjectHashMap0 = new TCharObjectHashMap<Integer>(int0, (float) int0, char0);
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try {
        locale0.getExtension(char0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed extension key: 1
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TCharObjectHashMap<Integer> tCharObjectHashMap0 = new TCharObjectHashMap<Integer>();
      String string0 = "";
      TCharObjectMap<String> tCharObjectMap0 = null;
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://?#
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      TCharObjectHashMap<Integer> tCharObjectHashMap0 = new TCharObjectHashMap<Integer>(int0, int0);
      String string0 = "[U";
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"[U\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      float float0 = (-870.30145F);
      TCharObjectHashMap<Integer> tCharObjectHashMap0 = new TCharObjectHashMap<Integer>(int0, float0);
      TCharObjectHashMap<Object> tCharObjectHashMap1 = new TCharObjectHashMap<Object>((TCharObjectMap<?>) tCharObjectHashMap0);
      String string0 = "*T^f67ZVaCw";
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // *T^f67ZVaCw (No such file or directory)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TCharObjectHashMap<String> tCharObjectHashMap0 = new TCharObjectHashMap<String>();
      TSynchronizedCharObjectMap<String> tSynchronizedCharObjectMap0 = new TSynchronizedCharObjectMap<String>((TCharObjectMap<String>) tCharObjectHashMap0);
      int int0 = tSynchronizedCharObjectMap0.size();
      char char0 = 'o';
      TCharObjectHashMap<Object> tCharObjectHashMap1 = new TCharObjectHashMap<Object>(int0, (float) int0, char0);
      Object object0 = null;
      TSynchronizedCharObjectMap<Object> tSynchronizedCharObjectMap1 = new TSynchronizedCharObjectMap<Object>((TCharObjectMap<Object>) tCharObjectHashMap1, object0);
      String string0 = tSynchronizedCharObjectMap0.toString();
      assertEquals("{}", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      TCharObjectMap<Integer> tCharObjectMap0 = null;
      TSynchronizedCharObjectMap<Integer> tSynchronizedCharObjectMap0 = null;
      try {
        tSynchronizedCharObjectMap0 = new TSynchronizedCharObjectMap<Integer>(tCharObjectMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-857);
      char char0 = 'X';
      TCharObjectHashMap<String> tCharObjectHashMap0 = new TCharObjectHashMap<String>(int0, (float) int0, char0);
      String string0 = "Ld-";
      boolean boolean0 = false;
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0, boolean0);
      // Undeclared exception!
      try {
        stringTokenizer0.nextToken(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 865;
      float float0 = 1885.07F;
      char char0 = '3';
      TCharObjectHashMap<Object> tCharObjectHashMap0 = new TCharObjectHashMap<Object>(int0, float0, char0);
      TCharObjectHashMap<Integer> tCharObjectHashMap1 = new TCharObjectHashMap<Integer>();
      Locale locale0 = Locale.KOREAN;
      String string0 = locale0.toLanguageTag();
      TSynchronizedCharObjectMap<Integer> tSynchronizedCharObjectMap0 = new TSynchronizedCharObjectMap<Integer>((TCharObjectMap<Integer>) tCharObjectHashMap1, (Object) string0);
      String string1 = locale0.toString();
      TSynchronizedCharObjectMap<Integer> tSynchronizedCharObjectMap1 = new TSynchronizedCharObjectMap<Integer>((TCharObjectMap<Integer>) tCharObjectHashMap1, (Object) string1);
      Locale locale1 = Locale.ROOT;
      tSynchronizedCharObjectMap0.iterator();
      Locale locale2 = Locale.getDefault();
      Locale.setDefault(locale0);
      tSynchronizedCharObjectMap0.putAll((TCharObjectMap<? extends Integer>) tCharObjectHashMap1);
      String string2 = locale1.getDisplayCountry(locale2);
      TSynchronizedCharObjectMap<Object> tSynchronizedCharObjectMap2 = new TSynchronizedCharObjectMap<Object>((TCharObjectMap<Object>) tCharObjectHashMap0, (Object) string2);
      TCharObjectMap<String> tCharObjectMap0 = null;
      File file0 = null;
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(file0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"ko\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

//   @Test
//   public void test12()  throws Throwable  {
//       TCharObjectHashMap<Character> tCharObjectHashMap0 = new TCharObjectHashMap<Character>();
//       TSynchronizedCharObjectMap<Character> tSynchronizedCharObjectMap0 = new TSynchronizedCharObjectMap<Character>((TCharObjectMap<Character>) tCharObjectHashMap0);
//       int int0 = 0;
//       float float0 = 0.0F;
//       char char0 = '\"';
//       TCharObjectHashMap<Integer> tCharObjectHashMap1 = new TCharObjectHashMap<Integer>(int0, float0, char0);
//       Locale locale0 = Locale.KOREAN;
//       Locale locale1 = Locale.GERMANY;
//       String string0 = locale0.getDisplayCountry(locale1);
//       TSynchronizedCharObjectMap<Integer> tSynchronizedCharObjectMap1 = new TSynchronizedCharObjectMap<Integer>((TCharObjectMap<Integer>) tCharObjectHashMap1, (Object) string0);
//       tSynchronizedCharObjectMap1.values();
//       Character[] characterArray0 = tSynchronizedCharObjectMap0.values();
//       assertNotNull(characterArray0);
//   }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 116;
      float float0 = (-1537.8257F);
      TCharObjectHashMap<Object> tCharObjectHashMap0 = new TCharObjectHashMap<Object>(int0, float0);
      TCharObjectHashMap<Object> tCharObjectHashMap1 = new TCharObjectHashMap<Object>((TCharObjectMap<?>) tCharObjectHashMap0);
      TSynchronizedCharObjectMap<Object> tSynchronizedCharObjectMap0 = new TSynchronizedCharObjectMap<Object>((TCharObjectMap<Object>) tCharObjectHashMap1);
      TSynchronizedCharSet tSynchronizedCharSet0 = (TSynchronizedCharSet)tSynchronizedCharObjectMap0.keySet();
      assertEquals('\u0000', tSynchronizedCharSet0.getNoEntryValue());
  }
}
