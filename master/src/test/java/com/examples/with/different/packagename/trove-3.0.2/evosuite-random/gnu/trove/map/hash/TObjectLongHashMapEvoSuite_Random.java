/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TObjectLongMap;
import gnu.trove.map.custom_hash.TObjectLongCustomHashMap;
import gnu.trove.map.hash.TObjectLongHashMap;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectLongHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TObjectLongHashMap<Long> tObjectLongHashMap0 = new TObjectLongHashMap<Long>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-821);
      TObjectLongHashMap<TObjectLongHashMap<Integer>> tObjectLongHashMap0 = new TObjectLongHashMap<TObjectLongHashMap<Integer>>(int0);
      tObjectLongHashMap0.clear();
      int int1 = 0;
      TObjectLongHashMap<Integer> tObjectLongHashMap1 = new TObjectLongHashMap<Integer>(int1);
      long long0 = 9223372036854775807L;
      tObjectLongHashMap1.adjustOrPutValue((Integer) int1, (long) int0, long0);
      tObjectLongHashMap0.increment(tObjectLongHashMap1);
      TObjectLongHashMap<Integer> tObjectLongHashMap2 = new TObjectLongHashMap<Integer>();
      TObjectLongHashMap<TObjectLongHashMap<String>> tObjectLongHashMap3 = new TObjectLongHashMap<TObjectLongHashMap<String>>();
      TObjectLongHashMap<Object> tObjectLongHashMap4 = new TObjectLongHashMap<Object>((TObjectLongMap<?>) tObjectLongHashMap0);
      long long1 = 1022L;
      tObjectLongHashMap0.containsValue(long1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 0;
      TObjectLongHashMap<Integer> tObjectLongHashMap0 = new TObjectLongHashMap<Integer>(int0, int0);
      int int1 = 259;
      int int2 = (-361);
      float float0 = 0.0F;
      long long0 = 0L;
      TObjectLongHashMap<TObjectLongHashMap<String>> tObjectLongHashMap1 = new TObjectLongHashMap<TObjectLongHashMap<String>>(int2, float0, long0);
      float float1 = 1.0F;
      TObjectLongHashMap<TObjectLongCustomHashMap<Long>> tObjectLongHashMap2 = new TObjectLongHashMap<TObjectLongCustomHashMap<Long>>(int1, float1, (long) int1);
      int int3 = 433;
      TObjectLongHashMap<String> tObjectLongHashMap3 = new TObjectLongHashMap<String>(int3);
      long[] longArray0 = new long[5];
      longArray0[0] = long0;
      longArray0[1] = (long) int3;
      longArray0[2] = long0;
      longArray0[3] = (long) int3;
      longArray0[4] = (long) int2;
      long[] longArray1 = tObjectLongHashMap3.values(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      
      TObjectLongHashMap<TObjectLongHashMap<Long>> tObjectLongHashMap4 = new TObjectLongHashMap<TObjectLongHashMap<Long>>();
      float float2 = 0.5F;
      long long1 = 9223372036854775807L;
      TObjectLongHashMap<Long> tObjectLongHashMap5 = new TObjectLongHashMap<Long>(int0, float2, long1);
      assertEquals(9223372036854775807L, tObjectLongHashMap5.getNoEntryValue());
      
      TObjectLongHashMap<Object> tObjectLongHashMap6 = null;
      try {
        tObjectLongHashMap6 = new TObjectLongHashMap<Object>((TObjectLongMap<?>) tObjectLongHashMap1);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-1499);
      TObjectLongHashMap<Integer> tObjectLongHashMap0 = new TObjectLongHashMap<Integer>();
      String string0 = tObjectLongHashMap0.toString();
      assertNotNull(string0);
      
      TObjectLongHashMap<Object> tObjectLongHashMap1 = new TObjectLongHashMap<Object>(int0);
      tObjectLongHashMap0.getAutoCompactionFactor();
      tObjectLongHashMap1.compact();
      assertEquals("{}", tObjectLongHashMap1.toString());
      assertEquals(3, tObjectLongHashMap1.capacity());
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      float float0 = (-1655.906F);
      TObjectLongHashMap<Long> tObjectLongHashMap0 = new TObjectLongHashMap<Long>(int0, float0, (long) int0);
      int int1 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int1);
      int int2 = (-348);
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream((OutputStream) byteArrayOutputStream0, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 0;
      TObjectLongHashMap<Long> tObjectLongHashMap0 = new TObjectLongHashMap<Long>(int0);
      Long long0 = new Long((long) int0);
      TObjectLongHashMap<TObjectLongHashMap<String>> tObjectLongHashMap1 = new TObjectLongHashMap<TObjectLongHashMap<String>>();
      tObjectLongHashMap1.getNoEntryValue();
      tObjectLongHashMap1.isEmpty();
      long long1 = 0L;
      TObjectLongHashMap<Object> tObjectLongHashMap2 = new TObjectLongHashMap<Object>();
      tObjectLongHashMap2.keySet();
      tObjectLongHashMap0.putIfAbsent(long0, long1);
      boolean boolean0 = false;
      tObjectLongHashMap0.tempDisableAutoCompaction();
      tObjectLongHashMap0.reenableAutoCompaction(boolean0);
      String string0 = "8tZ?`9:";
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // 8tZ?`9: (No such file or directory)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TObjectLongHashMap<Object> tObjectLongHashMap0 = new TObjectLongHashMap<Object>();
      String string0 = "QfMc&24kN`";
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // QfMc&24kN` (No such file or directory)
         //
      }
  }

//  @Test
//  public void test7()  throws Throwable  {
//      int int0 = 0;
//      float float0 = Float.POSITIVE_INFINITY;
//      int int1 = (-879);
//      long long0 = 0L;
//      TObjectLongHashMap<Long> tObjectLongHashMap0 = new TObjectLongHashMap<Long>(int1, (float) int0, long0);
//      AbstractMap.SimpleImmutableEntry<String, Long>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<String, Long>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 10);
//      AbstractMap.SimpleImmutableEntry<String, Long> abstractMap_SimpleImmutableEntry0 = null;
//      try {
//        abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Long>((Map.Entry<? extends String, ? extends Long>) abstractMap_SimpleImmutableEntryArray0);
//        fail("Expecting exception: IllegalArgumentException");
//      
//      } catch(IllegalArgumentException e) {
//         //
//         // java.lang.ClassCastException@53b03713
//         //
//      }
//  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-1);
      int int1 = 200019221;
      TObjectLongHashMap<Long> tObjectLongHashMap0 = null;
      try {
        tObjectLongHashMap0 = new TObjectLongHashMap<Long>(int1);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }
}
