/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TShortDoubleMap;
import gnu.trove.map.hash.TShortDoubleHashMap;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.RandomAccessFile;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortDoubleHashEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


//   @Test
//   public void test0()  throws Throwable  {
//       TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
//       tShortDoubleHashMap0.clear();
//       boolean boolean0 = false;
//       tShortDoubleHashMap0.reenableAutoCompaction(boolean0);
//       assertEquals(0.0, tShortDoubleHashMap0.getNoEntryValue(), 0.01D);
//       assertEquals(23, tShortDoubleHashMap0.capacity());
//       assertEquals(0, tShortDoubleHashMap0.getNoEntryKey());
//   }

//   @Test
//   public void test1()  throws Throwable  {
//       int int0 = (-231);
//       TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0);
//       TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap((TShortDoubleMap) tShortDoubleHashMap0);
//       TShortDoubleHashMap tShortDoubleHashMap2 = new TShortDoubleHashMap((TShortDoubleMap) tShortDoubleHashMap1);
//       int int1 = 2879;
//       ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int1);
//       boolean boolean0 = true;
//       PrintStream printStream0 = new PrintStream((OutputStream) byteArrayOutputStream0, boolean0);
//       Locale locale0 = Locale.GERMAN;
//       String string0 = "_0pU|cIUt*1(n";
//       Object[] objectArray0 = new Object[6];
//       objectArray0[0] = (Object) tShortDoubleHashMap2;
//       objectArray0[1] = (Object) int0;
//       Object object0 = new Object();
//       objectArray0[2] = object0;
//       Object object1 = new Object();
//       objectArray0[3] = object1;
//       objectArray0[4] = (Object) tShortDoubleHashMap0;
//       objectArray0[5] = (Object) byteArrayOutputStream0;
//       PrintStream printStream1 = printStream0.printf(locale0, string0, objectArray0);
//       ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream1);
//       tShortDoubleHashMap2.writeExternal((ObjectOutput) objectOutputStream0);
//       assertEquals(0, tShortDoubleHashMap0.getNoEntryKey());
//       assertEquals(0.0, tShortDoubleHashMap0.getNoEntryValue(), 0.01D);
//       assertEquals(23, tShortDoubleHashMap1.capacity());
//       assertEquals(0.0, tShortDoubleHashMap2.getNoEntryValue(), 0.01D);
//   }

//   @Test
//   public void test2()  throws Throwable  {
//       int int0 = 1063;
//       float float0 = (-1904.4843F);
//       short short0 = (short)1;
//       int int1 = (-651);
//       float float1 = (-1200.0062F);
//       short short1 = (short) (-466);
//       double double0 = (-1313.8626899197998);
//       TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int1, float1, short1, double0);
//       double double1 = (-903.068360023453);
//       TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap(int0, float0, short0, double1);
//       TShortDoubleHashMap tShortDoubleHashMap2 = new TShortDoubleHashMap((TShortDoubleMap) tShortDoubleHashMap1);
//       short short2 = (short)1;
//       double double2 = tShortDoubleHashMap2.get(short2);
//       assertEquals((-903.068360023453), double2, 0.01D);
//       
//       tShortDoubleHashMap1.keys(tShortDoubleHashMap2._set);
//       assertEquals(1, tShortDoubleHashMap2.getNoEntryKey());
//       
//       TShortDoubleHashMap tShortDoubleHashMap3 = new TShortDoubleHashMap();
//       short short3 = (short) (-649);
//       boolean boolean0 = tShortDoubleHashMap3.contains(short3);
//       assertEquals(0, tShortDoubleHashMap3.getNoEntryKey());
//       assertEquals(0.0, tShortDoubleHashMap3.getNoEntryValue(), 0.01D);
//       assertEquals(false, boolean0);
//       assertEquals(23, tShortDoubleHashMap3.capacity());
//   }

  @Test
  public void test3()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      short[] shortArray0 = new short[1];
      short short0 = (short)24;
      double double0 = (-2001.9115519034067);
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap((int) short0, (float) short0, short0, double0);
      shortArray0[0] = short0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) shortArray0[0];
      doubleArray0[1] = (double) short0;
      doubleArray0[2] = (double) short0;
      doubleArray0[3] = (double) short0;
      doubleArray0[4] = (double) shortArray0[0];
      short short1 = (short) (-129);
      tShortDoubleHashMap1.increment(short1);
      tShortDoubleHashMap1.isEmpty();
      doubleArray0[5] = (double) shortArray0[0];
      doubleArray0[6] = (double) short0;
      doubleArray0[7] = (double) short0;
      TShortDoubleHashMap tShortDoubleHashMap2 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      short short2 = (short)0;
      double double1 = 1.0;
      tShortDoubleHashMap2.putIfAbsent(short2, double1);
      tShortDoubleHashMap2.values();
      assertEquals(2, tShortDoubleHashMap2.size());
      
      short[] shortArray1 = new short[4];
      tShortDoubleHashMap2.getAutoCompactionFactor();
      short short3 = (short)1854;
      short short4 = (short) (-953);
      tShortDoubleHashMap1.contains(short4);
      shortArray1[0] = short3;
      tShortDoubleHashMap1.containsKey(short3);
      short short5 = (short)1;
      shortArray1[1] = short5;
      short short6 = (short)852;
      shortArray1[2] = short6;
      short short7 = (short) (-13541);
      shortArray1[3] = short7;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) shortArray1[2];
      TShortDoubleHashMap tShortDoubleHashMap3 = new TShortDoubleHashMap(shortArray1, doubleArray1);
      assertEquals("{1854=852.0}", tShortDoubleHashMap3.toString());
  }

//   @Test
//   public void test4()  throws Throwable  {
//       short[] shortArray0 = new short[7];
//       short short0 = (short) (-55);
//       shortArray0[0] = short0;
//       short short1 = (short) (-886);
//       shortArray0[1] = short1;
//       short short2 = (short)0;
//       shortArray0[2] = short2;
//       short short3 = (short)183;
//       shortArray0[3] = short3;
//       short short4 = (short)1440;
//       shortArray0[4] = short4;
//       short short5 = (short) (-1587);
//       shortArray0[5] = short5;
//       short short6 = (short)0;
//       shortArray0[6] = short6;
//       double[] doubleArray0 = new double[8];
//       doubleArray0[0] = (double) shortArray0[2];
//       double double0 = 7.805296535842736;
//       doubleArray0[1] = double0;
//       doubleArray0[2] = (double) shortArray0[3];
//       doubleArray0[3] = (double) shortArray0[1];
//       doubleArray0[4] = (double) shortArray0[3];
//       doubleArray0[5] = (double) short3;
//       double double1 = 0.0;
//       doubleArray0[6] = double1;
//       doubleArray0[7] = (double) shortArray0[6];
//       TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
//       boolean boolean0 = tShortDoubleHashMap0.containsValue(double1);
//       assertEquals("{183=-886.0, 1440=183.0, -886=7.805296535842736, -55=0.0, -1587=183.0, 0=0.0}", tShortDoubleHashMap0.toString());
//       assertEquals(0, tShortDoubleHashMap0.getNoEntryKey());
//       assertEquals(0.0, tShortDoubleHashMap0.getNoEntryValue(), 0.01D);
//       assertEquals(6, tShortDoubleHashMap0.size());
//       assertEquals(true, boolean0);
//   }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 0;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0, int0);
      TShortDoubleHashMap tShortDoubleHashMap1 = null;
      try {
        tShortDoubleHashMap1 = new TShortDoubleHashMap((TShortDoubleMap) tShortDoubleHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 1;
      short[] shortArray0 = new short[3];
      short short0 = (short) (-1);
      shortArray0[0] = short0;
      short short1 = (short)207;
      shortArray0[1] = short1;
      short short2 = (short) (-1);
      shortArray0[2] = short2;
      double[] doubleArray0 = new double[6];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      doubleArray0[2] = (double) short1;
      doubleArray0[3] = (double) shortArray0[1];
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) shortArray0[0];
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      // Undeclared exception!
      try {
        tShortDoubleHashMap0.setAutoCompactionFactor((float) shortArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1.0
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)1735;
      shortArray0[1] = short1;
      double[] doubleArray0 = new double[2];
      int int0 = 0;
      float float0 = 1410.2223F;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0, float0);
      short short2 = tShortDoubleHashMap0.getNoEntryKey();
      assertEquals((short)0, short2);
      
      doubleArray0[0] = (double) shortArray0[0];
      double double0 = 474.5908505762508;
      doubleArray0[1] = double0;
      doubleArray0[0] = (double) short0;
      doubleArray0[1] = (double) shortArray0[0];
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      tShortDoubleHashMap1.values(doubleArray0);
      tShortDoubleHashMap1.tempDisableAutoCompaction();
      boolean boolean0 = tShortDoubleHashMap1.adjustValue(shortArray0[0], short0);
      assertEquals(5, tShortDoubleHashMap1.capacity());
      assertEquals(true, boolean0);
      assertEquals("{1735=0.0, 0=0.0}", tShortDoubleHashMap1.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0);
      tShortDoubleHashMap0.toString();
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap();
      tShortDoubleHashMap0.putAll((TShortDoubleMap) tShortDoubleHashMap1);
      int int1 = 851;
      TShortDoubleHashMap tShortDoubleHashMap2 = new TShortDoubleHashMap(int1);
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getDisplayLanguage();
      tShortDoubleHashMap1.equals((Object) string0);
      tShortDoubleHashMap2.keys();
      boolean boolean0 = true;
      tShortDoubleHashMap2.reenableAutoCompaction(boolean0);
      tShortDoubleHashMap2.keys();
      int int2 = 0;
      short short0 = (short)605;
      tShortDoubleHashMap2.containsKey(short0);
      TShortDoubleHashMap tShortDoubleHashMap3 = new TShortDoubleHashMap();
      TShortDoubleHashMap tShortDoubleHashMap4 = new TShortDoubleHashMap(int2, int2);
      TShortDoubleHashMap tShortDoubleHashMap5 = new TShortDoubleHashMap();
      short short1 = (short)0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int2;
      tShortDoubleHashMap0.compact();
      tShortDoubleHashMap3.values(doubleArray0);
      doubleArray0[2] = (double) short1;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int1;
      doubleArray0[5] = (double) int2;
      tShortDoubleHashMap4.values(doubleArray0);
      boolean boolean1 = true;
      short[] shortArray0 = tShortDoubleHashMap4._set;
      tShortDoubleHashMap4.reenableAutoCompaction(boolean1);
      short[] shortArray1 = tShortDoubleHashMap1._set;
      tShortDoubleHashMap5.values();
      tShortDoubleHashMap4.putIfAbsent(short1, (double) int2);
      tShortDoubleHashMap4.capacity();
      short short2 = tShortDoubleHashMap4.getNoEntryKey();
      assertEquals(1, tShortDoubleHashMap4.size());
      assertEquals((short)0, short2);
  }

  @Test
  public void test9()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short)239;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short) (-1566);
      shortArray0[2] = short2;
      short short3 = (short)891;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)1514;
      shortArray0[5] = short5;
      short short6 = (short) (-2030);
      shortArray0[6] = short6;
      short short7 = (short)196;
      shortArray0[7] = short7;
      short short8 = (short)0;
      shortArray0[8] = short8;
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) shortArray0[5];
      doubleArray0[1] = (double) short6;
      doubleArray0[2] = (double) short3;
      doubleArray0[3] = (double) short6;
      doubleArray0[4] = (double) short8;
      doubleArray0[5] = (double) shortArray0[1];
      doubleArray0[6] = (double) shortArray0[5];
      doubleArray0[7] = (double) shortArray0[0];
      doubleArray0[8] = (double) shortArray0[8];
      doubleArray0[9] = (double) shortArray0[8];
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      assertEquals("{1514=0.0, 891=-2030.0, -2030=1514.0, 196=239.0, 239=1514.0, -1566=891.0, 0=0.0}", tShortDoubleHashMap0.toString());
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-123);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-105);
      byteArray0[1] = byte1;
      tShortDoubleHashMap0._states = byteArray0;
      assertEquals(0.0, tShortDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals(7, tShortDoubleHashMap0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short) (-72);
      shortArray0[0] = short0;
      short short1 = (short) (-127);
      shortArray0[1] = short1;
      short short2 = (short)160;
      shortArray0[2] = short2;
      short short3 = (short)11;
      shortArray0[3] = short3;
      short short4 = (short)1354;
      shortArray0[4] = short4;
      short short5 = (short) (-683);
      shortArray0[5] = short5;
      short short6 = (short) (-1);
      shortArray0[6] = short6;
      short short7 = (short)1848;
      shortArray0[7] = short7;
      double[] doubleArray0 = new double[8];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) shortArray0[2];
      doubleArray0[2] = (double) shortArray0[4];
      double double1 = 1.0;
      doubleArray0[3] = double1;
      doubleArray0[4] = (double) shortArray0[5];
      doubleArray0[5] = (double) short4;
      doubleArray0[6] = (double) shortArray0[4];
      doubleArray0[7] = (double) short1;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      byte[] byteArray0 = tShortDoubleHashMap0._states;
      assertEquals("{1848=-127.0, 11=1.0, -1=1354.0, 160=1354.0, 1354=-683.0, -72=0.0, -683=1354.0, -127=160.0}", tShortDoubleHashMap0.toString());
      assertEquals(0.0, tShortDoubleHashMap0.getNoEntryValue(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 1402;
      short short0 = (short)31;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0, (float) int0, short0, (double) short0);
      tShortDoubleHashMap0.getAutoCompactionFactor();
      tShortDoubleHashMap0.trimToSize();
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap();
      tShortDoubleHashMap1.compact();
      int int1 = 100009607;
      float float0 = 1.0F;
      tShortDoubleHashMap1.getAutoCompactionFactor();
      TShortDoubleMap tShortDoubleMap0 = null;
      TShortDoubleHashMap tShortDoubleHashMap2 = null;
      try {
        tShortDoubleHashMap2 = new TShortDoubleHashMap(tShortDoubleMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      short[] shortArray0 = new short[5];
      tShortDoubleHashMap0.valueCollection();
      short short0 = (short)12411;
      tShortDoubleHashMap0.contains(short0);
      tShortDoubleHashMap0.clear();
      short short1 = (short)0;
      tShortDoubleHashMap0.get(short1);
      short short2 = (short) (-961);
      shortArray0[0] = short2;
      shortArray0[0] = short1;
      short short3 = (short)1072;
      shortArray0[1] = short3;
      shortArray0[2] = short2;
      shortArray0[3] = short2;
      shortArray0[4] = short2;
      short short4 = (short)397;
      tShortDoubleHashMap0.get(short2);
      shortArray0[1] = short4;
      short short5 = (short) (-1737);
      shortArray0[2] = short5;
      short short6 = (short)1752;
      shortArray0[3] = short6;
      short short7 = (short)0;
      short short8 = (short) (-873);
      tShortDoubleHashMap0.remove(short8);
      tShortDoubleHashMap0.getNoEntryValue();
      String string0 = "pYNU%h";
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"pYNU%h\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

//   @Test
//   public void test13()  throws Throwable  {
//       short[] shortArray0 = new short[7];
//       short short0 = (short)0;
//       shortArray0[0] = short0;
//       short short1 = (short)172;
//       shortArray0[1] = short1;
//       short short2 = (short)1488;
//       shortArray0[2] = short2;
//       short short3 = (short)0;
//       shortArray0[3] = short3;
//       short short4 = (short)0;
//       shortArray0[4] = short4;
//       short short5 = (short)0;
//       shortArray0[5] = short5;
//       short short6 = (short) (-32075);
//       shortArray0[6] = short6;
//       double[] doubleArray0 = new double[2];
//       double double0 = 0.0;
//       doubleArray0[0] = double0;
//       doubleArray0[1] = (double) short2;
//       TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
//       short short7 = (short)0;
//       boolean boolean0 = tShortDoubleHashMap0.contains(short7);
//       assertEquals("{172=1488.0, 0=0.0}", tShortDoubleHashMap0.toString());
//       assertEquals(true, boolean0);
//       assertEquals(0, tShortDoubleHashMap0.getNoEntryKey());
//       assertEquals(0.0, tShortDoubleHashMap0.getNoEntryValue(), 0.01D);
//       assertEquals(17, tShortDoubleHashMap0.capacity());
//   }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-1703);
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      tShortDoubleHashMap0.toString();
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap(int0);
      tShortDoubleHashMap1.toString();
      short short0 = (short)0;
      short[] shortArray0 = tShortDoubleHashMap1.keys();
      tShortDoubleHashMap1.containsKey(short0);
      String string0 = tShortDoubleHashMap1.toString();
      int int1 = 1;
      tShortDoubleHashMap1.ensureCapacity(int0);
      tShortDoubleHashMap1.ensureCapacity(int1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) short0;
      doubleArray0[2] = (double) short0;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) short0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      tShortDoubleHashMap1.values(doubleArray0);
      tShortDoubleHashMap1.remove(short0);
      tShortDoubleHashMap1.isEmpty();
      tShortDoubleHashMap1.putIfAbsent(short0, (double) int0);
      short short1 = (short)0;
      tShortDoubleHashMap1.hashCode();
      tShortDoubleHashMap1.getAutoCompactionFactor();
      assertEquals(false, tShortDoubleHashMap1.isEmpty());
      
      tShortDoubleHashMap1.remove(short1);
      tShortDoubleHashMap1.keys(shortArray0);
      tShortDoubleHashMap1.ensureCapacity(int1);
      double double0 = 0.0;
      tShortDoubleHashMap1.capacity();
      tShortDoubleHashMap1.capacity();
      tShortDoubleHashMap1.containsValue(double0);
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // {} (No such file or directory)
         //
      }
  }

//   @Test
//   public void test15()  throws Throwable  {
//       int int0 = 1849;
//       TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0, int0);
//       tShortDoubleHashMap0.iterator();
//       assertEquals(0, tShortDoubleHashMap0.getNoEntryKey());
//       assertEquals(0.0, tShortDoubleHashMap0.getNoEntryValue(), 0.01D);
//   }
}
