/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.PrimeFinder;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class PrimeFinderEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 0;
      int int1 = PrimeFinder.nextPrime(int0);
      assertEquals(3, int1);
      
      PrimeFinder primeFinder0 = new PrimeFinder();
      PrimeFinder primeFinder1 = new PrimeFinder();
      PrimeFinder primeFinder2 = new PrimeFinder();
      int int2 = 710;
      PrimeFinder.nextPrime(int2);
      int int3 = (-1);
      PrimeFinder.nextPrime(int3);
      PrimeFinder primeFinder3 = new PrimeFinder();
      PrimeFinder.nextPrime(int2);
      PrimeFinder primeFinder4 = new PrimeFinder();
      int int4 = 148;
      int int5 = PrimeFinder.nextPrime(int4);
      assertEquals(163, int5);
      
      int int6 = (-1);
      PrimeFinder.nextPrime(int6);
      PrimeFinder primeFinder5 = new PrimeFinder();
      PrimeFinder.nextPrime(int0);
      PrimeFinder primeFinder6 = new PrimeFinder();
      int int7 = 0;
      PrimeFinder.nextPrime(int7);
      PrimeFinder.nextPrime(int0);
      PrimeFinder primeFinder7 = new PrimeFinder();
      PrimeFinder.nextPrime(int3);
      PrimeFinder primeFinder8 = new PrimeFinder();
      int int8 = PrimeFinder.nextPrime(int3);
      assertEquals(3, int8);
  }

  @Test
  public void test1()  throws Throwable  {
      PrimeFinder primeFinder0 = new PrimeFinder();
      int int0 = 0;
      PrimeFinder.nextPrime(int0);
      PrimeFinder primeFinder1 = new PrimeFinder();
      int int1 = PrimeFinder.nextPrime(int0);
      int int2 = (-1806);
      PrimeFinder.nextPrime(int2);
      PrimeFinder.nextPrime(int1);
      int int3 = PrimeFinder.nextPrime(int0);
      int int4 = 0;
      PrimeFinder.nextPrime(int4);
      PrimeFinder.nextPrime(int4);
      int int5 = PrimeFinder.nextPrime(int4);
      int int6 = 231823147;
      PrimeFinder primeFinder2 = new PrimeFinder();
      int int7 = PrimeFinder.nextPrime(int6);
      PrimeFinder.nextPrime(int3);
      PrimeFinder.nextPrime(int5);
      PrimeFinder.nextPrime(int7);
      PrimeFinder.nextPrime(int5);
      PrimeFinder primeFinder3 = new PrimeFinder();
      int int8 = (-712);
      PrimeFinder.nextPrime(int8);
      PrimeFinder primeFinder4 = new PrimeFinder();
      int int9 = 1898;
      int int10 = 108;
      PrimeFinder.nextPrime(int10);
      PrimeFinder.nextPrime(int9);
      int int11 = 1;
      PrimeFinder.nextPrime(int11);
      PrimeFinder primeFinder5 = new PrimeFinder();
      assertNotSame(primeFinder5, primeFinder4);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 1;
      PrimeFinder.nextPrime(int0);
      PrimeFinder primeFinder0 = new PrimeFinder();
      PrimeFinder primeFinder1 = new PrimeFinder();
      assertNotSame(primeFinder1, primeFinder0);
  }

  @Test
  public void test3()  throws Throwable  {
      PrimeFinder primeFinder0 = new PrimeFinder();
      int int0 = 0;
      int int1 = PrimeFinder.nextPrime(int0);
      assertEquals(3, int1);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-506);
      int int1 = PrimeFinder.nextPrime(int0);
      assertEquals(3, int1);
      
      int int2 = 0;
      int int3 = 463646329;
      int int4 = PrimeFinder.nextPrime(int3);
      assertEquals(463646329, int4);
      
      int int5 = PrimeFinder.nextPrime(int2);
      assertEquals(3, int5);
  }

  @Test
  public void test5()  throws Throwable  {
      PrimeFinder primeFinder0 = new PrimeFinder();
      int int0 = (-1);
      PrimeFinder.nextPrime(int0);
      PrimeFinder.nextPrime(int0);
      PrimeFinder primeFinder1 = new PrimeFinder();
      int int1 = (-902);
      PrimeFinder.nextPrime(int0);
      PrimeFinder.nextPrime(int1);
      PrimeFinder primeFinder2 = new PrimeFinder();
      PrimeFinder primeFinder3 = new PrimeFinder();
      int int2 = 275;
      PrimeFinder primeFinder4 = new PrimeFinder();
      PrimeFinder primeFinder5 = new PrimeFinder();
      PrimeFinder.nextPrime(int2);
      int int3 = 1000;
      PrimeFinder.nextPrime(int3);
      PrimeFinder primeFinder6 = new PrimeFinder();
      assertNotSame(primeFinder6, primeFinder1);
  }

  @Test
  public void test6()  throws Throwable  {
      PrimeFinder primeFinder0 = new PrimeFinder();
      int int0 = (-1206);
      int int1 = PrimeFinder.nextPrime(int0);
      int int2 = 0;
      PrimeFinder primeFinder1 = new PrimeFinder();
      PrimeFinder primeFinder2 = new PrimeFinder();
      int int3 = PrimeFinder.nextPrime(int2);
      PrimeFinder.nextPrime(int3);
      int int4 = 1801;
      PrimeFinder.nextPrime(int2);
      PrimeFinder primeFinder3 = new PrimeFinder();
      PrimeFinder primeFinder4 = new PrimeFinder();
      PrimeFinder.nextPrime(int4);
      int int5 = (-1);
      int int6 = PrimeFinder.nextPrime(int1);
      PrimeFinder.nextPrime(int2);
      PrimeFinder.nextPrime(int5);
      PrimeFinder primeFinder5 = new PrimeFinder();
      PrimeFinder.nextPrime(int2);
      PrimeFinder primeFinder6 = new PrimeFinder();
      PrimeFinder.nextPrime(int2);
      PrimeFinder primeFinder7 = new PrimeFinder();
      int int7 = 3292489;
      int int8 = PrimeFinder.nextPrime(int7);
      PrimeFinder primeFinder8 = new PrimeFinder();
      PrimeFinder.nextPrime(int8);
      PrimeFinder primeFinder9 = new PrimeFinder();
      PrimeFinder primeFinder10 = new PrimeFinder();
      PrimeFinder.nextPrime(int4);
      int int9 = (-3);
      PrimeFinder.nextPrime(int9);
      PrimeFinder.nextPrime(int6);
      PrimeFinder primeFinder11 = new PrimeFinder();
      assertNotSame(primeFinder11, primeFinder8);
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-127);
      int int1 = PrimeFinder.nextPrime(int0);
      assertEquals(3, int1);
      
      PrimeFinder primeFinder0 = new PrimeFinder();
      PrimeFinder primeFinder1 = new PrimeFinder();
      int int2 = 61;
      PrimeFinder primeFinder2 = new PrimeFinder();
      PrimeFinder.nextPrime(int2);
      PrimeFinder.nextPrime(int2);
      PrimeFinder primeFinder3 = new PrimeFinder();
      int int3 = PrimeFinder.nextPrime(int2);
      assertEquals(67, int3);
      
      int int4 = 0;
      PrimeFinder.nextPrime(int4);
      int int5 = (-723);
      PrimeFinder.nextPrime(int5);
      int int6 = 1;
      int int7 = PrimeFinder.nextPrime(int3);
      assertEquals(67, int7);
      
      int int8 = PrimeFinder.nextPrime(int6);
      assertEquals(3, int8);
  }

  @Test
  public void test8()  throws Throwable  {
      PrimeFinder primeFinder0 = new PrimeFinder();
      int int0 = (-1855);
      PrimeFinder primeFinder1 = new PrimeFinder();
      int int1 = PrimeFinder.nextPrime(int0);
      int int2 = 620171;
      int int3 = PrimeFinder.nextPrime(int0);
      int int4 = PrimeFinder.nextPrime(int2);
      PrimeFinder.nextPrime(int1);
      int int5 = (-1);
      PrimeFinder.nextPrime(int0);
      PrimeFinder.nextPrime(int5);
      PrimeFinder primeFinder2 = new PrimeFinder();
      int int6 = PrimeFinder.nextPrime(int4);
      assertEquals(620171, int6);
      
      PrimeFinder primeFinder3 = new PrimeFinder();
      int int7 = PrimeFinder.nextPrime(int3);
      assertEquals(3, int7);
      
      PrimeFinder.nextPrime(int5);
      int int8 = (-1);
      PrimeFinder.nextPrime(int8);
      int int9 = PrimeFinder.nextPrime(int5);
      assertEquals(3, int9);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 995;
      PrimeFinder primeFinder0 = new PrimeFinder();
      PrimeFinder.nextPrime(int0);
      int int1 = (-1);
      PrimeFinder.nextPrime(int1);
      PrimeFinder.nextPrime(int0);
      PrimeFinder primeFinder1 = new PrimeFinder();
      PrimeFinder primeFinder2 = new PrimeFinder();
      assertNotSame(primeFinder2, primeFinder1);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-524);
      PrimeFinder primeFinder0 = new PrimeFinder();
      PrimeFinder primeFinder1 = new PrimeFinder();
      int int1 = (-798);
      int int2 = PrimeFinder.nextPrime(int1);
      int int3 = 920;
      int int4 = 1372;
      PrimeFinder.nextPrime(int4);
      PrimeFinder.nextPrime(int3);
      PrimeFinder primeFinder2 = new PrimeFinder();
      int int5 = PrimeFinder.nextPrime(int0);
      PrimeFinder.nextPrime(int5);
      PrimeFinder.nextPrime(int2);
      PrimeFinder.nextPrime(int0);
      PrimeFinder primeFinder3 = new PrimeFinder();
      int int6 = PrimeFinder.nextPrime(int2);
      assertEquals(3, int6);
      
      PrimeFinder primeFinder4 = new PrimeFinder();
      int int7 = 1743;
      int int8 = PrimeFinder.nextPrime(int7);
      assertEquals(1759, int8);
  }

  @Test
  public void test11()  throws Throwable  {
      PrimeFinder primeFinder0 = new PrimeFinder();
      PrimeFinder primeFinder1 = new PrimeFinder();
      assertNotSame(primeFinder1, primeFinder0);
      
      int int0 = 1382;
      int int1 = PrimeFinder.nextPrime(int0);
      assertEquals(1439, int1);
      
      int int2 = (-849);
      PrimeFinder.nextPrime(int2);
      int int3 = (-749);
      PrimeFinder.nextPrime(int3);
      int int4 = 0;
      PrimeFinder.nextPrime(int4);
      int int5 = (-918);
      int int6 = PrimeFinder.nextPrime(int5);
      assertEquals(3, int6);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-719);
      PrimeFinder.nextPrime(int0);
      int int1 = 0;
      PrimeFinder.nextPrime(int1);
      int int2 = (-1626);
      PrimeFinder.nextPrime(int1);
      PrimeFinder.nextPrime(int2);
      PrimeFinder primeFinder0 = new PrimeFinder();
      PrimeFinder.nextPrime(int1);
      PrimeFinder primeFinder1 = new PrimeFinder();
      int int3 = (-1496);
      int int4 = PrimeFinder.nextPrime(int3);
      assertEquals(3, int4);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      PrimeFinder primeFinder0 = new PrimeFinder();
      int int1 = 0;
      PrimeFinder.nextPrime(int1);
      PrimeFinder.nextPrime(int0);
      PrimeFinder.nextPrime(int0);
      PrimeFinder primeFinder1 = new PrimeFinder();
      int int2 = 94;
      int int3 = PrimeFinder.nextPrime(int2);
      assertEquals(97, int3);
      
      int int4 = PrimeFinder.nextPrime(int0);
      PrimeFinder primeFinder2 = new PrimeFinder();
      int int5 = PrimeFinder.nextPrime(int4);
      assertEquals(3, int5);
      
      int int6 = 1926;
      PrimeFinder.nextPrime(int0);
      int int7 = PrimeFinder.nextPrime(int6);
      assertEquals(2081, int7);
  }

  @Test
  public void test14()  throws Throwable  {
      PrimeFinder primeFinder0 = new PrimeFinder();
      int int0 = (-1);
      int int1 = PrimeFinder.nextPrime(int0);
      assertEquals(3, int1);
  }

  @Test
  public void test15()  throws Throwable  {
      PrimeFinder primeFinder0 = new PrimeFinder();
      PrimeFinder primeFinder1 = new PrimeFinder();
      int int0 = 1057;
      int int1 = PrimeFinder.nextPrime(int0);
      assertEquals(1117, int1);
      
      int int2 = 0;
      PrimeFinder.nextPrime(int2);
      PrimeFinder primeFinder2 = new PrimeFinder();
      int int3 = 0;
      PrimeFinder.nextPrime(int3);
      int int4 = 0;
      PrimeFinder.nextPrime(int4);
      PrimeFinder primeFinder3 = new PrimeFinder();
      PrimeFinder.nextPrime(int4);
      PrimeFinder primeFinder4 = new PrimeFinder();
      int int5 = 0;
      int int6 = 1770;
      PrimeFinder.nextPrime(int4);
      PrimeFinder.nextPrime(int6);
      int int7 = PrimeFinder.nextPrime(int5);
      PrimeFinder primeFinder5 = new PrimeFinder();
      PrimeFinder primeFinder6 = new PrimeFinder();
      PrimeFinder primeFinder7 = new PrimeFinder();
      int int8 = 629;
      PrimeFinder.nextPrime(int8);
      PrimeFinder primeFinder8 = new PrimeFinder();
      PrimeFinder primeFinder9 = new PrimeFinder();
      PrimeFinder primeFinder10 = new PrimeFinder();
      int int9 = PrimeFinder.nextPrime(int7);
      assertEquals(3, int9);
  }

  @Test
  public void test16()  throws Throwable  {
      PrimeFinder primeFinder0 = new PrimeFinder();
      int int0 = 0;
      PrimeFinder.nextPrime(int0);
      int int1 = 187;
      int int2 = PrimeFinder.nextPrime(int1);
      assertEquals(197, int2);
      
      PrimeFinder primeFinder1 = new PrimeFinder();
      int int3 = 208;
      int int4 = (-282);
      PrimeFinder.nextPrime(int4);
      PrimeFinder primeFinder2 = new PrimeFinder();
      int int5 = PrimeFinder.nextPrime(int4);
      PrimeFinder primeFinder3 = new PrimeFinder();
      PrimeFinder.nextPrime(int3);
      int int6 = 1449;
      int int7 = (-734);
      PrimeFinder.nextPrime(int7);
      int int8 = (-204);
      PrimeFinder.nextPrime(int8);
      PrimeFinder.nextPrime(int6);
      int int9 = PrimeFinder.nextPrime(int3);
      PrimeFinder primeFinder4 = new PrimeFinder();
      PrimeFinder primeFinder5 = new PrimeFinder();
      int int10 = 1202;
      int int11 = PrimeFinder.nextPrime(int10);
      assertEquals(1277, int11);
      
      PrimeFinder.nextPrime(int5);
      int int12 = PrimeFinder.nextPrime(int9);
      assertEquals(277, int12);
      
      PrimeFinder.nextPrime(int3);
      PrimeFinder.nextPrime(int3);
      int int13 = 0;
      PrimeFinder.nextPrime(int6);
      PrimeFinder.nextPrime(int3);
      PrimeFinder primeFinder6 = new PrimeFinder();
      PrimeFinder.nextPrime(int13);
      int int14 = (-1755);
      int int15 = PrimeFinder.nextPrime(int14);
      assertEquals(3, int15);
  }

  @Test
  public void test17()  throws Throwable  {
      PrimeFinder primeFinder0 = new PrimeFinder();
      int int0 = 0;
      PrimeFinder.nextPrime(int0);
      int int1 = PrimeFinder.nextPrime(int0);
      int int2 = 0;
      PrimeFinder primeFinder1 = new PrimeFinder();
      PrimeFinder.nextPrime(int2);
      PrimeFinder.nextPrime(int1);
      int int3 = 1;
      PrimeFinder.nextPrime(int3);
      PrimeFinder primeFinder2 = new PrimeFinder();
      PrimeFinder primeFinder3 = new PrimeFinder();
      int int4 = PrimeFinder.nextPrime(int0);
      int int5 = PrimeFinder.nextPrime(int3);
      PrimeFinder.nextPrime(int0);
      PrimeFinder.nextPrime(int0);
      int int6 = 0;
      PrimeFinder.nextPrime(int6);
      int int7 = 0;
      PrimeFinder.nextPrime(int4);
      int int8 = PrimeFinder.nextPrime(int7);
      assertEquals(3, int8);
      
      PrimeFinder primeFinder4 = new PrimeFinder();
      int int9 = PrimeFinder.nextPrime(int5);
      assertEquals(3, int9);
  }
}
