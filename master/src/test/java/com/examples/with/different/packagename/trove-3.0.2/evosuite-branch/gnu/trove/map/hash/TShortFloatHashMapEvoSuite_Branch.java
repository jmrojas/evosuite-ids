/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TFloatFunction;
import gnu.trove.map.TShortFloatMap;
import gnu.trove.map.hash.TShortFloatHashMap;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.procedure.TShortFloatProcedure;
import gnu.trove.procedure.TShortProcedure;
import gnu.trove.set.TShortSet;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortFloatHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 16 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap$TShortFloatHashIterator.value()F: root-Branch
   * 2 gnu.trove.map.hash.TShortFloatHashMap$TShortFloatHashIterator.advance()V: root-Branch
   * 3 gnu.trove.map.hash.TShortFloatHashMap$TShortFloatHashIterator.key()S: root-Branch
   * 4 gnu.trove.map.hash.TShortFloatHashMap$TShortFloatHashIterator.<init>(Lgnu/trove/map/hash/TShortFloatHashMap;Lgnu/trove/map/hash/TShortFloatHashMap;)V: root-Branch
   * 5 gnu.trove.map.hash.TShortFloatHashMap.iterator()Lgnu/trove/iterator/TShortFloatIterator;: root-Branch
   * 6 gnu.trove.map.hash.TShortFloatHashMap.put(SF)F: root-Branch
   * 7 gnu.trove.map.hash.TShortFloatHashMap.<init>()V: root-Branch
   * 8 gnu.trove.map.hash.TShortFloatHashMap.setUp(I)I: root-Branch
   * 9 gnu.trove.map.hash.TShortFloatHashMap.<init>(Lgnu/trove/map/TShortFloatMap;)V: I10 Branch 34 IFEQ L133 - false
   * 10 gnu.trove.map.hash.TShortFloatHashMap.<init>(Lgnu/trove/map/TShortFloatMap;)V: I38 Branch 35 IFEQ L139 - true
   * 11 gnu.trove.map.hash.TShortFloatHashMap.<init>(Lgnu/trove/map/TShortFloatMap;)V: I52 Branch 36 IFEQ L143 - true
   * 12 gnu.trove.map.hash.TShortFloatHashMap.putIfAbsent(SF)F: I9 Branch 39 IFGE L205 - true
   * 13 gnu.trove.map.hash.TShortFloatHashMap.doPut(SFI)F: I12 Branch 40 IFGE L214 - true
   * 14 gnu.trove.map.hash.TShortFloatHashMap.doPut(SFI)F: I41 Branch 41 IFEQ L221 - false
   * 15 gnu.trove.map.hash.TShortFloatHashMap.putAll(Lgnu/trove/map/TShortFloatMap;)V: I15 Branch 43 IFEQ L243 - true
   * 16 gnu.trove.map.hash.TShortFloatHashMap.putAll(Lgnu/trove/map/TShortFloatMap;)V: I15 Branch 43 IFEQ L243 - false
   */

  @Test
  public void test0()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      tShortFloatHashMap0.putIfAbsent((short)1527, (short)1527);
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap((TShortFloatMap) tShortFloatHashMap0);
      assertEquals(1, tShortFloatHashMap0.size());
      assertEquals(23, tShortFloatHashMap1.capacity());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap$TValueView.<init>(Lgnu/trove/map/hash/TShortFloatHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TShortFloatHashMap.valueCollection()Lgnu/trove/TFloatCollection;: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      tShortFloatHashMap0.valueCollection();
      assertEquals(23, tShortFloatHashMap0.capacity());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.clear()V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      tShortFloatHashMap0.clear();
      assertEquals("{}", tShortFloatHashMap0.toString());
      assertEquals(23, tShortFloatHashMap0.capacity());
  }

  //Test case number: 3
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.keySet()Lgnu/trove/set/TShortSet;: root-Branch
   * 2 gnu.trove.map.hash.TShortFloatHashMap.<init>(IFSF)V: root-Branch
   * 3 gnu.trove.map.hash.TShortFloatHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TShortFloatHashMap;)V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((-1660), (float) (-1660), (short)0, (float) (short)0);
      TShortSet tShortSet0 = tShortFloatHashMap0.keySet();
      assertEquals(true, tShortSet0.isEmpty());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.forEachKey(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      boolean boolean0 = tShortFloatHashMap0.forEachKey((TShortProcedure) null);
      assertEquals(23, tShortFloatHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.increment(S)Z: root-Branch
   * 2 gnu.trove.map.hash.TShortFloatHashMap.adjustValue(SF)Z: I9 Branch 71 IFGE L477 - false
   */

  @Test
  public void test5()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      boolean boolean0 = tShortFloatHashMap0.increment((short) (-1));
      assertEquals(23, tShortFloatHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.containsKey(S)Z: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((int) (short)11, 0.0F, (short)11, 0.0F);
      boolean boolean0 = tShortFloatHashMap0.containsKey((short)11);
      assertEquals(false, boolean0);
  }

  //Test case number: 7
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TShortFloatHashMap.<init>([S[F)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 3 gnu.trove.map.hash.TShortFloatHashMap.<init>([S[F)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 4 gnu.trove.map.hash.TShortFloatHashMap.doPut(SFI)F: I12 Branch 40 IFGE L214 - false
   * 5 gnu.trove.map.hash.TShortFloatHashMap.doPut(SFI)F: I41 Branch 41 IFEQ L221 - true
   * 6 gnu.trove.map.hash.TShortFloatHashMap.remove(S)F: I14 Branch 46 IFLT L276 - false
   */

//   @Test
//   public void test7()  throws Throwable  {
//       short[] shortArray0 = new short[17];
//       float[] floatArray0 = new float[4];
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
//       assertEquals(1, tShortFloatHashMap0.size());
//       
//       float float0 = tShortFloatHashMap0.remove((short)0);
//       assertEquals(0, tShortFloatHashMap0.size());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 8
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.<init>(Lgnu/trove/map/TShortFloatMap;)V: I38 Branch 35 IFEQ L139 - false
   * 2 gnu.trove.map.hash.TShortFloatHashMap.<init>(Lgnu/trove/map/TShortFloatMap;)V: I52 Branch 36 IFEQ L143 - false
   * 3 gnu.trove.map.hash.TShortFloatHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 4 gnu.trove.map.hash.TShortFloatHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 5 gnu.trove.map.hash.TShortFloatHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 6 gnu.trove.map.hash.TShortFloatHashMap$TShortFloatHashIterator.<init>(Lgnu/trove/map/hash/TShortFloatHashMap;Lgnu/trove/map/hash/TShortFloatHashMap;)V: root-Branch
   * 7 gnu.trove.map.hash.TShortFloatHashMap.iterator()Lgnu/trove/iterator/TShortFloatIterator;: root-Branch
   * 8 gnu.trove.map.hash.TShortFloatHashMap.putAll(Lgnu/trove/map/TShortFloatMap;)V: I15 Branch 43 IFEQ L243 - true
   * 9 gnu.trove.map.hash.TShortFloatHashMap.<init>(Lgnu/trove/map/TShortFloatMap;)V: I10 Branch 34 IFEQ L133 - false
   */

//   @Test
//   public void test8()  throws Throwable  {
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((-1869), (float) (-1869), (short)1209, (float) (-1869));
//       TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap((TShortFloatMap) tShortFloatHashMap0);
//       assertEquals(3, tShortFloatHashMap1.capacity());
//       assertEquals((-1869.0F), tShortFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals(1209, tShortFloatHashMap1.getNoEntryKey());
//   }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.putIfAbsent(SF)F: I9 Branch 39 IFGE L205 - false
   */

//   @Test
//   public void test9()  throws Throwable  {
//       short[] shortArray0 = new short[5];
//       shortArray0[4] = (short)31;
//       float[] floatArray0 = new float[10];
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
//       float float0 = tShortFloatHashMap0.putIfAbsent((short)31, 0.0F);
//       assertEquals(0.0F, float0, 0.01F);
//       assertEquals(2, tShortFloatHashMap0.size());
//       assertEquals(23, tShortFloatHashMap0.capacity());
//   }

  //Test case number: 10
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - false
   * 2 gnu.trove.map.hash.TShortFloatHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   * 3 gnu.trove.map.hash.TShortFloatHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   */

  @Test
  public void test10()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((-4), (float) (-4), (short)199, (float) (short)199);
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      hashMap0.put((Short) (short)199, (Float) 199.0F);
      tShortFloatHashMap0.putAll((Map<? extends Short, ? extends Float>) hashMap0);
      assertEquals(1, tShortFloatHashMap0.size());
      assertEquals("{199=199.0}", tShortFloatHashMap0.toString());
  }

  //Test case number: 11
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.get(S)F: I9 Branch 44 IFGE L253 - true
   * 2 gnu.trove.map.hash.TShortFloatHashMap.adjustOrPutValue(SFF)F: I9 Branch 72 IFGE L491 - true
   * 3 gnu.trove.map.hash.TShortFloatHashMap.adjustOrPutValue(SFF)F: I58 Branch 73 IFEQ L502 - false
   * 4 gnu.trove.map.hash.TShortFloatHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 5 gnu.trove.map.hash.TShortFloatHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 6 gnu.trove.map.hash.TShortFloatHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 7 gnu.trove.map.hash.TShortFloatHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 8 gnu.trove.map.hash.TShortFloatHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 9 gnu.trove.map.hash.TShortFloatHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 10 gnu.trove.map.hash.TShortFloatHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      tShortFloatHashMap0.adjustOrPutValue((short) (-1), 0.0F, (float) Integer.MAX_VALUE);
      boolean boolean0 = tShortFloatHashMap0.equals((Object) tShortFloatHashMap0);
      assertEquals(false, tShortFloatHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   * 2 gnu.trove.map.hash.TShortFloatHashMap.putIfAbsent(SF)F: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      tShortFloatHashMap0.putIfAbsent((short)1527, (short)1527);
      boolean boolean0 = tShortFloatHashMap0.isEmpty();
      assertEquals("{1527=1527.0}", tShortFloatHashMap0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test13()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      boolean boolean0 = tShortFloatHashMap0.isEmpty();
      assertEquals(true, boolean0);
      assertEquals(23, tShortFloatHashMap0.capacity());
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.remove(S)F: I14 Branch 46 IFLT L276 - true
   */

//   @Test
//   public void test14()  throws Throwable  {
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
//       float float0 = tShortFloatHashMap0.remove((short)929);
//       assertEquals(0.0F, float0, 0.01F);
//       assertEquals(23, tShortFloatHashMap0.capacity());
//       assertEquals(0, tShortFloatHashMap0.size());
//   }

  //Test case number: 15
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.keys()[S: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TShortFloatHashMap.keys()[S: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TShortFloatHashMap.keys()[S: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TShortFloatHashMap.keys()[S: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      tShortFloatHashMap0.adjustOrPutValue((short) (-1), 0.0F, (float) Integer.MAX_VALUE);
      tShortFloatHashMap0.keys();
      assertEquals("{-1=2.14748365E9}", tShortFloatHashMap0.toString());
      assertEquals(false, tShortFloatHashMap0.isEmpty());
  }

  //Test case number: 16
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.keys([S)[S: I10 Branch 49 IF_ICMPGE L315 - true
   * 2 gnu.trove.map.hash.TShortFloatHashMap.keys([S)[S: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TShortFloatHashMap.keys([S)[S: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TShortFloatHashMap.keys([S)[S: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((-4), (float) (-4), (short)199, (float) (short)199);
      short[] shortArray0 = tShortFloatHashMap0.keys(tShortFloatHashMap0._set);
      assertNotNull(shortArray0);
  }

  //Test case number: 17
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.keys([S)[S: I10 Branch 49 IF_ICMPGE L315 - false
   * 2 gnu.trove.map.hash.TShortFloatHashMap.keys([S)[S: I44 Branch 51 IF_ICMPNE L323 - false
   * 3 gnu.trove.map.hash.TShortFloatHashMap.keys([S)[S: I37 Branch 50 IFLE L322 - true
   * 4 gnu.trove.map.hash.TShortFloatHashMap.keys([S)[S: I37 Branch 50 IFLE L322 - false
   * 5 gnu.trove.map.hash.TShortFloatHashMap.keys([S)[S: I44 Branch 51 IF_ICMPNE L323 - true
   * 6 gnu.trove.map.hash.TShortFloatHashMap.keys()[S: I27 Branch 47 IFLE L303 - true
   * 7 gnu.trove.map.hash.TShortFloatHashMap.keys()[S: I27 Branch 47 IFLE L303 - false
   * 8 gnu.trove.map.hash.TShortFloatHashMap.keys()[S: I34 Branch 48 IF_ICMPNE L304 - true
   * 9 gnu.trove.map.hash.TShortFloatHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(1313, 1313);
      short[] shortArray0 = tShortFloatHashMap0.keys();
      tShortFloatHashMap0.put((short) (-381), (float) 1313);
      tShortFloatHashMap0.keys(shortArray0);
      assertEquals("{-381=1313.0}", tShortFloatHashMap0.toString());
      assertEquals(1, tShortFloatHashMap0.size());
  }

  //Test case number: 18
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.values()[F: I34 Branch 53 IF_ICMPNE L344 - false
   * 2 gnu.trove.map.hash.TShortFloatHashMap.values()[F: I27 Branch 52 IFLE L343 - true
   * 3 gnu.trove.map.hash.TShortFloatHashMap.values()[F: I27 Branch 52 IFLE L343 - false
   * 4 gnu.trove.map.hash.TShortFloatHashMap.values()[F: I34 Branch 53 IF_ICMPNE L344 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(1313, 1313);
      tShortFloatHashMap0.put((short) (-381), (float) 1313);
      tShortFloatHashMap0.values();
      assertEquals("{-381=1313.0}", tShortFloatHashMap0.toString());
      assertEquals(false, tShortFloatHashMap0.isEmpty());
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.values([F)[F: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TShortFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TShortFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TShortFloatHashMap.values([F)[F: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test19()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      float[] floatArray0 = new float[4];
      float[] floatArray1 = tShortFloatHashMap0.values(floatArray0);
      assertEquals(23, tShortFloatHashMap0.capacity());
      assertSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
  }

  //Test case number: 20
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.values([F)[F: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TShortFloatHashMap.values([F)[F: I44 Branch 56 IF_ICMPNE L363 - false
   * 3 gnu.trove.map.hash.TShortFloatHashMap.values()[F: I27 Branch 52 IFLE L343 - true
   * 4 gnu.trove.map.hash.TShortFloatHashMap.values()[F: I27 Branch 52 IFLE L343 - false
   * 5 gnu.trove.map.hash.TShortFloatHashMap.values()[F: I34 Branch 53 IF_ICMPNE L344 - true
   * 6 gnu.trove.map.hash.TShortFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - true
   * 7 gnu.trove.map.hash.TShortFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - false
   * 8 gnu.trove.map.hash.TShortFloatHashMap.values([F)[F: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      float[] floatArray0 = tShortFloatHashMap0.values();
      tShortFloatHashMap0.adjustOrPutValue((short) (-1), 0.0F, (float) Integer.MAX_VALUE);
      tShortFloatHashMap0.values(floatArray0);
      assertEquals(1, tShortFloatHashMap0.size());
      assertEquals("{-1=2.14748365E9}", tShortFloatHashMap0.toString());
  }

  //Test case number: 21
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TShortFloatHashMap.containsValue(F)Z: I31 Branch 59 IFNE L377 - true
   * 3 gnu.trove.map.hash.TShortFloatHashMap.containsValue(F)Z: I18 Branch 57 IFLE L376 - true
   * 4 gnu.trove.map.hash.TShortFloatHashMap.<init>(I)V: root-Branch
   * 5 gnu.trove.map.hash.TShortFloatHashMap.containsValue(F)Z: I18 Branch 57 IFLE L376 - false
   * 6 gnu.trove.map.hash.TShortFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(Integer.MAX_VALUE);
      tShortFloatHashMap0.adjustOrPutValue((short)411, (float) (short)12, (float) Integer.MAX_VALUE);
      boolean boolean0 = tShortFloatHashMap0.containsValue(0.0F);
      assertEquals(false, tShortFloatHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 22
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.containsValue(F)Z: I31 Branch 59 IFNE L377 - false
   * 2 gnu.trove.map.hash.TShortFloatHashMap.containsValue(F)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TShortFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 4 gnu.trove.map.hash.TShortFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - false
   */

  @Test
  public void test22()  throws Throwable  {
      short[] shortArray0 = new short[5];
      float[] floatArray0 = new float[4];
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      boolean boolean0 = tShortFloatHashMap0.containsValue((float) (short)0);
      assertEquals(11, tShortFloatHashMap0.capacity());
      assertEquals(1, tShortFloatHashMap0.size());
      assertEquals(true, boolean0);
      assertEquals("{0=0.0}", tShortFloatHashMap0.toString());
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TShortFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TShortFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test23()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((-1), (float) (-1), (short)1104, (float) (short)1104);
      boolean boolean0 = tShortFloatHashMap0.forEachValue((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TShortFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TShortFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test24()  throws Throwable  {
      short[] shortArray0 = new short[9];
      float[] floatArray0 = new float[7];
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      // Undeclared exception!
      try {
        tShortFloatHashMap0.forEachValue((TFloatProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TShortFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TShortFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test25()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      tShortFloatHashMap0.transformValues((TFloatFunction) null);
      assertEquals(23, tShortFloatHashMap0.capacity());
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TShortFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TShortFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test26()  throws Throwable  {
      short[] shortArray0 = new short[6];
      float[] floatArray0 = new float[5];
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      // Undeclared exception!
      try {
        tShortFloatHashMap0.transformValues((TFloatFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.retainEntries(Lgnu/trove/procedure/TShortFloatProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TShortFloatHashMap.retainEntries(Lgnu/trove/procedure/TShortFloatProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TShortFloatHashMap.retainEntries(Lgnu/trove/procedure/TShortFloatProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test27()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(0, (-1832.0642F));
      boolean boolean0 = tShortFloatHashMap0.retainEntries((TShortFloatProcedure) null);
      assertEquals(false, boolean0);
      assertEquals(3, tShortFloatHashMap0.capacity());
      assertEquals("{}", tShortFloatHashMap0.toString());
  }

  //Test case number: 28
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.retainEntries(Lgnu/trove/procedure/TShortFloatProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TShortFloatHashMap.retainEntries(Lgnu/trove/procedure/TShortFloatProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TShortFloatHashMap.retainEntries(Lgnu/trove/procedure/TShortFloatProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test28()  throws Throwable  {
      short[] shortArray0 = new short[5];
      float[] floatArray0 = new float[4];
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      // Undeclared exception!
      try {
        tShortFloatHashMap0.retainEntries((TShortFloatProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.adjustOrPutValue(SFF)F: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TShortFloatHashMap.adjustOrPutValue(SFF)F: I58 Branch 73 IFEQ L502 - true
   */

//   @Test
//   public void test29()  throws Throwable  {
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((-4), (float) (-4), (short)199, (float) (short)199);
//       tShortFloatHashMap0.put((short)199, (float) (-4));
//       float float0 = tShortFloatHashMap0.adjustOrPutValue((short)199, (float) (short)199, 904.78143F);
//       assertEquals(false, tShortFloatHashMap0.isEmpty());
//       assertEquals(195.0F, float0, 0.01F);
//   }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   * 2 gnu.trove.map.hash.TShortFloatHashMap.<init>(IFSF)V: root-Branch
   */

  @Test
  public void test30()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((int) (short)11, 0.0F, (short)11, 0.0F);
      AbstractMap.SimpleImmutableEntry<Short, TShortFloatHashMap> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Short, TShortFloatHashMap>((Short) (short)11, tShortFloatHashMap0);
      boolean boolean0 = tShortFloatHashMap0.equals((Object) abstractMap_SimpleImmutableEntry0);
      assertEquals(false, boolean0);
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   */

  @Test
  public void test31()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((int) (byte)0);
      tShortFloatHashMap0.put((short) (byte)0, (float) (short)0);
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(184, 25.55437F);
      boolean boolean0 = tShortFloatHashMap0.equals((Object) tShortFloatHashMap1);
      assertEquals(false, tShortFloatHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 32
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - false
   * 2 gnu.trove.map.hash.TShortFloatHashMap.equals(Ljava/lang/Object;)Z: I89 Branch 79 IFEQ L1200 - true
   */

  @Test
  public void test32()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(Integer.MAX_VALUE);
      tShortFloatHashMap0.adjustOrPutValue((short) (-1), 0.0F, (float) Integer.MAX_VALUE);
      tShortFloatHashMap1.adjustOrPutValue((short) (-1), (float) 0, 0.0F);
      boolean boolean0 = tShortFloatHashMap1.equals((Object) tShortFloatHashMap0);
      assertEquals(1, tShortFloatHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 33
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.equals(Ljava/lang/Object;)Z: I89 Branch 79 IFEQ L1200 - false
   * 2 gnu.trove.map.hash.TShortFloatHashMap.equals(Ljava/lang/Object;)Z: I93 Branch 80 IFEQ L1200 - false
   * 3 gnu.trove.map.hash.TShortFloatHashMap.get(S)F: I9 Branch 44 IFGE L253 - true
   * 4 gnu.trove.map.hash.TShortFloatHashMap.adjustValue(SF)Z: I9 Branch 71 IFGE L477 - true
   */

  @Test
  public void test33()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(Integer.MAX_VALUE);
      tShortFloatHashMap0.adjustOrPutValue((short) (-1), 0.0F, (float) Integer.MAX_VALUE);
      tShortFloatHashMap1.adjustOrPutValue((short) (-1), (float) 0, 0.0F);
      tShortFloatHashMap1.increment((short) (-1));
      boolean boolean0 = tShortFloatHashMap1.equals((Object) tShortFloatHashMap0);
      assertEquals(1, tShortFloatHashMap1.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 34
  /*
   * 13 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.equals(Ljava/lang/Object;)Z: I93 Branch 80 IFEQ L1200 - true
   * 2 gnu.trove.map.hash.TShortFloatHashMap.increment(S)Z: root-Branch
   * 3 gnu.trove.map.hash.TShortFloatHashMap.<init>(I)V: root-Branch
   * 4 gnu.trove.map.hash.TShortFloatHashMap.adjustValue(SF)Z: I9 Branch 71 IFGE L477 - true
   * 5 gnu.trove.map.hash.TShortFloatHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 6 gnu.trove.map.hash.TShortFloatHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 7 gnu.trove.map.hash.TShortFloatHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 8 gnu.trove.map.hash.TShortFloatHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 9 gnu.trove.map.hash.TShortFloatHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 10 gnu.trove.map.hash.TShortFloatHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 11 gnu.trove.map.hash.TShortFloatHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - false
   * 12 gnu.trove.map.hash.TShortFloatHashMap.equals(Ljava/lang/Object;)Z: I89 Branch 79 IFEQ L1200 - false
   * 13 gnu.trove.map.hash.TShortFloatHashMap.get(S)F: I9 Branch 44 IFGE L253 - false
   */

  @Test
  public void test34()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(Integer.MAX_VALUE);
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(Integer.MAX_VALUE);
      tShortFloatHashMap0.adjustOrPutValue((short)411, (float) (short)12, (float) Integer.MAX_VALUE);
      tShortFloatHashMap1.adjustOrPutValue((short)12, (float) 0, 0.0F);
      tShortFloatHashMap1.increment((short)12);
      boolean boolean0 = tShortFloatHashMap1.equals((Object) tShortFloatHashMap0);
      assertEquals("{411=2.14748365E9}", tShortFloatHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 35
  /*
   * 11 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 2 gnu.trove.map.hash.TShortFloatHashMap.<init>(IF)V: root-Branch
   * 3 gnu.trove.map.hash.TShortFloatHashMap.adjustOrPutValue(SFF)F: I9 Branch 72 IFGE L491 - true
   * 4 gnu.trove.map.hash.TShortFloatHashMap.adjustOrPutValue(SFF)F: I58 Branch 73 IFEQ L502 - false
   * 5 gnu.trove.map.hash.TShortFloatHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 6 gnu.trove.map.hash.TShortFloatHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 7 gnu.trove.map.hash.TShortFloatHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 8 gnu.trove.map.hash.TShortFloatHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 9 gnu.trove.map.hash.TShortFloatHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 10 gnu.trove.map.hash.TShortFloatHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 11 gnu.trove.map.hash.TShortFloatHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   */

  @Test
  public void test35()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(0, (-1832.0642F));
      tShortFloatHashMap0.adjustOrPutValue((short)0, (-926.9211F), (-1832.0642F));
      int int0 = tShortFloatHashMap0.hashCode();
      assertEquals(1, tShortFloatHashMap0.size());
      assertEquals((-745699099), int0);
  }

  //Test case number: 36
  /*
   * 13 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap$1.execute(SF)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TShortFloatHashMap$1.<init>(Lgnu/trove/map/hash/TShortFloatHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 3 gnu.trove.map.hash.TShortFloatHashMap$1.execute(SF)Z: I4 Branch 115 IFEQ L1233 - false
   * 4 gnu.trove.map.hash.TShortFloatHashMap.toString()Ljava/lang/String;: root-Branch
   * 5 gnu.trove.map.hash.TShortFloatHashMap.forEachEntry(Lgnu/trove/procedure/TShortFloatProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 6 gnu.trove.map.hash.TShortFloatHashMap.forEachEntry(Lgnu/trove/procedure/TShortFloatProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 7 gnu.trove.map.hash.TShortFloatHashMap.forEachEntry(Lgnu/trove/procedure/TShortFloatProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 8 gnu.trove.map.hash.TShortFloatHashMap.forEachEntry(Lgnu/trove/procedure/TShortFloatProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 9 gnu.trove.map.hash.TShortFloatHashMap.forEachEntry(Lgnu/trove/procedure/TShortFloatProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 10 gnu.trove.map.hash.TShortFloatHashMap.doPut(SFI)F: I12 Branch 40 IFGE L214 - false
   * 11 gnu.trove.map.hash.TShortFloatHashMap.doPut(SFI)F: I41 Branch 41 IFEQ L221 - true
   * 12 gnu.trove.map.hash.TShortFloatHashMap.<init>([S[F)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 13 gnu.trove.map.hash.TShortFloatHashMap.<init>([S[F)V: I24 Branch 33 IF_ICMPGE L119 - false
   */

  @Test
  public void test36()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[4] = (short)31;
      float[] floatArray0 = new float[10];
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      String string0 = tShortFloatHashMap0.toString();
      assertNotNull(string0);
      assertEquals(2, tShortFloatHashMap0.size());
      assertEquals("{31=0.0, 0=0.0}", string0);
      assertEquals(23, tShortFloatHashMap0.capacity());
  }

  //Test case number: 37
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TShortFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 2 gnu.trove.map.hash.TShortFloatHashMap.put(SF)F: root-Branch
   * 3 gnu.trove.map.hash.TShortFloatHashMap.<init>()V: root-Branch
   * 4 gnu.trove.map.hash.TShortFloatHashMap.setUp(I)I: root-Branch
   * 5 gnu.trove.map.hash.TShortFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 6 gnu.trove.map.hash.TShortFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 7 gnu.trove.map.hash.TShortFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 8 gnu.trove.map.hash.TShortFloatHashMap.doPut(SFI)F: I12 Branch 40 IFGE L214 - true
   * 9 gnu.trove.map.hash.TShortFloatHashMap.doPut(SFI)F: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test37()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      tShortFloatHashMap0.put((short) (-424), (short) (-424));
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
      tShortFloatHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
  }
}
