/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TIntLongMapDecorator;
import gnu.trove.map.TIntLongMap;
import gnu.trove.map.hash.TIntLongHashMap;
import java.io.BufferedInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.Set;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntLongMapDecoratorEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TIntLongMap tIntLongMap0 = null;
      TIntLongMapDecorator tIntLongMapDecorator0 = new TIntLongMapDecorator(tIntLongMap0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream((InputStream) pipedInputStream0, (InputStream) pipedInputStream0);
      int int0 = (-1031);
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream((InputStream) sequenceInputStream0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap();
      int int0 = (-1767);
      long long0 = 0L;
      TIntLongMapDecorator tIntLongMapDecorator0 = new TIntLongMapDecorator();
      // Undeclared exception!
      try {
        tIntLongMapDecorator0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 67;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 105;
      intArray0[2] = int2;
      int int3 = 1;
      intArray0[3] = int3;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) intArray0[0];
      long long0 = 1286L;
      longArray0[1] = long0;
      longArray0[2] = (long) intArray0[2];
      long long1 = (-1L);
      longArray0[0] = long1;
      longArray0[1] = (long) int3;
      longArray0[2] = (long) int0;
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(intArray0, longArray0);
      TIntLongMapDecorator tIntLongMapDecorator0 = new TIntLongMapDecorator((TIntLongMap) tIntLongHashMap0);
      TIntLongHashMap tIntLongHashMap1 = new TIntLongHashMap((TIntLongMap) tIntLongHashMap0);
      boolean boolean0 = tIntLongMapDecorator0.containsValue((Object) tIntLongHashMap1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-1007);
      TIntLongMapDecorator tIntLongMapDecorator0 = new TIntLongMapDecorator();
      TIntLongMapDecorator tIntLongMapDecorator1 = new TIntLongMapDecorator();
      Locale locale0 = Locale.CANADA;
      locale0.getScript();
      Long long0 = new Long((long) int0);
      // Undeclared exception!
      try {
        tIntLongMapDecorator1.put((Integer) int0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      TIntLongMapDecorator tIntLongMapDecorator0 = new TIntLongMapDecorator();
      // Undeclared exception!
      try {
        tIntLongMapDecorator0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = (-52);
      intArray0[1] = int1;
      int int2 = (-255);
      intArray0[2] = int2;
      int int3 = 1368;
      intArray0[3] = int3;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) int1;
      longArray0[1] = (long) int1;
      longArray0[2] = (long) int2;
      longArray0[3] = (long) int2;
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(intArray0, longArray0);
      TIntLongMapDecorator tIntLongMapDecorator0 = new TIntLongMapDecorator((TIntLongMap) tIntLongHashMap0);
      tIntLongMapDecorator0.keySet();
      TIntLongMapDecorator tIntLongMapDecorator1 = new TIntLongMapDecorator();
      Locale locale0 = Locale.ENGLISH;
      locale0.getDisplayScript();
      // Undeclared exception!
      try {
        tIntLongMapDecorator1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TIntLongMapDecorator tIntLongMapDecorator0 = new TIntLongMapDecorator();
      int int0 = (-1141);
      Integer integer0 = Integer.valueOf(int0);
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap();
      String string0 = tIntLongHashMap0.toString();
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(integer0, (Object) string0);
      Long long0 = new Long((long) int0);
      AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Long> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Long>(abstractMap_SimpleImmutableEntry0, long0);
      Locale locale0 = Locale.US;
      String string1 = locale0.getDisplayScript();
      abstractMap_SimpleEntry0.equals((Object) string1);
      DataInput dataInput0 = null;
      // Undeclared exception!
      try {
        DataInputStream.readUTF(dataInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap();
      int int0 = (-1966);
      long long0 = (-933L);
      long long1 = (-1637L);
      tIntLongHashMap0.adjustOrPutValue(int0, long0, long1);
      TIntLongMapDecorator tIntLongMapDecorator0 = new TIntLongMapDecorator((TIntLongMap) tIntLongHashMap0);
      tIntLongMapDecorator0.toString();
      TIntLongMapDecorator tIntLongMapDecorator1 = new TIntLongMapDecorator();
      // Undeclared exception!
      try {
        tIntLongMapDecorator1.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      String string0 = "Inserting same object twice, rehashing bug. Object= ";
      int[] intArray0 = new int[9];
      int int0 = 1562;
      intArray0[0] = int0;
      int int1 = 1282;
      intArray0[1] = int1;
      int int2 = (-128);
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 73467739;
      intArray0[4] = int4;
      int int5 = (-567);
      intArray0[5] = int5;
      int int6 = (-861);
      intArray0[6] = int6;
      int int7 = 1341;
      intArray0[7] = int7;
      int int8 = 0;
      intArray0[8] = int8;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) int2;
      longArray0[1] = (long) intArray0[0];
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int5;
      longArray0[4] = (long) intArray0[4];
      longArray0[5] = (long) intArray0[4];
      longArray0[6] = (long) intArray0[1];
      longArray0[7] = (long) int2;
      longArray0[8] = (long) intArray0[8];
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(intArray0, longArray0);
      AbstractMap.SimpleEntry<String, TIntLongHashMap> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, TIntLongHashMap>(string0, tIntLongHashMap0);
      Locale locale0 = Locale.TAIWAN;
      char char0 = '\\';
      // Undeclared exception!
      try {
        locale0.getExtension(char0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed extension key: \\
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 767;
      float float0 = (-1592.3315F);
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(int0, float0, int0, (long) int0);
      TIntLongMapDecorator tIntLongMapDecorator0 = new TIntLongMapDecorator((TIntLongMap) tIntLongHashMap0);
      int int1 = 2557;
      float float1 = 1559.4551F;
      TIntLongHashMap tIntLongHashMap1 = new TIntLongHashMap(int1, float1);
      TIntLongMapDecorator tIntLongMapDecorator1 = new TIntLongMapDecorator((TIntLongMap) tIntLongHashMap1);
      Locale locale0 = Locale.KOREAN;
      String string0 = locale0.getDisplayCountry();
      tIntLongMapDecorator0.get((Object) string0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-115);
      float float0 = (-822.2618F);
      int int1 = (-539);
      TIntLongMapDecorator tIntLongMapDecorator0 = new TIntLongMapDecorator();
      TIntLongMapDecorator tIntLongMapDecorator1 = new TIntLongMapDecorator();
      Locale locale0 = Locale.FRENCH;
      String string0 = locale0.toString();
      tIntLongMapDecorator1.containsValue((Object) string0);
      long long0 = (-1L);
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(int0, float0, int1, long0);
      TIntLongMapDecorator tIntLongMapDecorator2 = new TIntLongMapDecorator((TIntLongMap) tIntLongHashMap0);
      TIntLongHashMap tIntLongHashMap1 = (TIntLongHashMap)tIntLongMapDecorator2.getMap();
      TIntLongMapDecorator tIntLongMapDecorator3 = new TIntLongMapDecorator((TIntLongMap) tIntLongHashMap1);
      String string1 = "";
      URI uRI0 = URI.create(string1);
      String string2 = uRI0.getPath();
      tIntLongMapDecorator3.remove((Object) string2);
      tIntLongMapDecorator3.put((Integer) int1, (Long) long0);
      tIntLongMapDecorator3.clear();
      assertEquals(7, tIntLongHashMap0.capacity());
      assertEquals(true, tIntLongMapDecorator2.isEmpty());
  }

  @Test
  public void test11()  throws Throwable  {
      TIntLongMapDecorator tIntLongMapDecorator0 = new TIntLongMapDecorator();
      String string0 = "iAjERS~\"qawmV/";
      int int0 = 0;
      TIntLongMapDecorator tIntLongMapDecorator1 = new TIntLongMapDecorator();
      try {
        Integer.valueOf(string0, int0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "GfO[8}d~:A";
      int int0 = (-547);
      float float0 = 0.0F;
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(int0, float0);
      AbstractMap.SimpleImmutableEntry<String, TIntLongHashMap> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, TIntLongHashMap>(string0, tIntLongHashMap0);
      // Undeclared exception!
      try {
        abstractMap_SimpleImmutableEntry0.setValue(tIntLongHashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = (-837);
      intArray0[1] = int1;
      int int2 = 55;
      intArray0[2] = int2;
      int int3 = 1;
      intArray0[3] = int3;
      int int4 = 267713;
      intArray0[4] = int4;
      int int5 = (-1065);
      intArray0[5] = int5;
      int int6 = 0;
      intArray0[6] = int6;
      int int7 = (-1871);
      intArray0[7] = int7;
      int int8 = 30;
      intArray0[8] = int8;
      int int9 = 0;
      intArray0[9] = int9;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) int6;
      long long0 = (-1096L);
      longArray0[1] = long0;
      longArray0[2] = (long) intArray0[5];
      longArray0[3] = (long) int5;
      longArray0[4] = (long) int4;
      longArray0[5] = (long) int7;
      long long1 = (-1L);
      longArray0[6] = long1;
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(intArray0, longArray0);
      TIntLongMapDecorator tIntLongMapDecorator0 = new TIntLongMapDecorator((TIntLongMap) tIntLongHashMap0);
      TIntLongHashMap tIntLongHashMap1 = (TIntLongHashMap)tIntLongMapDecorator0.getMap();
      TIntLongHashMap tIntLongHashMap2 = new TIntLongHashMap((TIntLongMap) tIntLongHashMap1);
      TIntLongMapDecorator tIntLongMapDecorator1 = new TIntLongMapDecorator((TIntLongMap) tIntLongHashMap2);
      Set<Integer> set0 = tIntLongMapDecorator1.keySet();
      assertEquals(false, set0.isEmpty());
  }

  @Test
  public void test14()  throws Throwable  {
      TIntLongMapDecorator tIntLongMapDecorator0 = new TIntLongMapDecorator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale0 = Locale.getDefault(locale_Category0);
      Locale locale1 = Locale.FRANCE;
      String string0 = locale0.getDisplayLanguage(locale1);
      boolean boolean0 = tIntLongMapDecorator0.equals((Object) string0);
      assertEquals(false, boolean0);
  }
}
