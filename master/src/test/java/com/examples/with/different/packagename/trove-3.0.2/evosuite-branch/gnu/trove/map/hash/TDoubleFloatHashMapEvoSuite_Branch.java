/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TFloatCollection;
import gnu.trove.function.TFloatFunction;
import gnu.trove.map.TDoubleFloatMap;
import gnu.trove.map.hash.TDoubleFloatHashMap;
import gnu.trove.procedure.TDoubleFloatProcedure;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.set.TDoubleSet;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleFloatHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap$TValueView.<init>(Lgnu/trove/map/hash/TDoubleFloatHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.<init>(IF)V: root-Branch
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap.setUp(I)I: root-Branch
   * 4 gnu.trove.map.hash.TDoubleFloatHashMap.valueCollection()Lgnu/trove/TFloatCollection;: root-Branch
   */

//   @Test
//   public void test0()  throws Throwable  {
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1), (-1));
//       TFloatCollection tFloatCollection0 = tDoubleFloatHashMap0.valueCollection();
//       assertEquals(0.0F, tFloatCollection0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TDoubleFloatHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.keySet()Lgnu/trove/set/TDoubleSet;: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1), (-1));
      TDoubleSet tDoubleSet0 = tDoubleFloatHashMap0.keySet();
      assertEquals(0, tDoubleSet0.size());
  }

  //Test case number: 2
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap.remove(D)F: I14 Branch 46 IFLT L276 - false
   * 4 gnu.trove.map.hash.TDoubleFloatHashMap.adjustOrPutValue(DFF)F: I9 Branch 72 IFGE L491 - true
   * 5 gnu.trove.map.hash.TDoubleFloatHashMap.adjustOrPutValue(DFF)F: I58 Branch 73 IFEQ L502 - false
   */

//   @Test
//   public void test2()  throws Throwable  {
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
//       tDoubleFloatHashMap0.adjustOrPutValue((double) 0, (float) 0, (float) 0);
//       assertEquals("{0.0=0.0}", tDoubleFloatHashMap0.toString());
//       
//       float float0 = tDoubleFloatHashMap0.remove((double) 0);
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.containsKey(D)Z: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1), (-1));
      boolean boolean0 = tDoubleFloatHashMap0.containsKey((double) 0.0F);
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.increment(D)Z: root-Branch
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.adjustValue(DF)Z: I9 Branch 71 IFGE L477 - false
   */

  @Test
  public void test4()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1), (-1));
      boolean boolean0 = tDoubleFloatHashMap0.increment(0.0);
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1), (-1));
      boolean boolean0 = tDoubleFloatHashMap0.forEachKey((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.clear()V: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1), (-1));
      tDoubleFloatHashMap0.clear();
      assertEquals("{}", tDoubleFloatHashMap0.toString());
  }

  //Test case number: 7
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.<init>(Lgnu/trove/map/TDoubleFloatMap;)V: I40 Branch 35 IFEQ L139 - false
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.<init>(Lgnu/trove/map/TDoubleFloatMap;)V: I54 Branch 36 IFEQ L143 - false
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap$TDoubleFloatHashIterator.<init>(Lgnu/trove/map/hash/TDoubleFloatHashMap;Lgnu/trove/map/hash/TDoubleFloatHashMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TDoubleFloatHashMap.iterator()Lgnu/trove/iterator/TDoubleFloatIterator;: root-Branch
   * 5 gnu.trove.map.hash.TDoubleFloatHashMap.<init>(IFDF)V: root-Branch
   * 6 gnu.trove.map.hash.TDoubleFloatHashMap.putAll(Lgnu/trove/map/TDoubleFloatMap;)V: I15 Branch 43 IFEQ L243 - true
   * 7 gnu.trove.map.hash.TDoubleFloatHashMap.<init>(Lgnu/trove/map/TDoubleFloatMap;)V: I10 Branch 34 IFEQ L133 - false
   */

//   @Test
//   public void test7()  throws Throwable  {
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(1380, (float) 1380, (-185.7397732153588), 1380.0F);
//       TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap((TDoubleFloatMap) tDoubleFloatHashMap0);
//       assertEquals(1380.0F, tDoubleFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals(3, tDoubleFloatHashMap1.capacity());
//       assertEquals((-185.7397732153588), tDoubleFloatHashMap1.getNoEntryKey(), 0.01D);
//   }

  //Test case number: 8
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.putIfAbsent(DF)F: I9 Branch 39 IFGE L205 - false
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.put(DF)F: root-Branch
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap.doPut(DFI)F: I12 Branch 40 IFGE L214 - true
   * 4 gnu.trove.map.hash.TDoubleFloatHashMap.doPut(DFI)F: I12 Branch 40 IFGE L214 - false
   * 5 gnu.trove.map.hash.TDoubleFloatHashMap.doPut(DFI)F: I41 Branch 41 IFEQ L221 - true
   * 6 gnu.trove.map.hash.TDoubleFloatHashMap.doPut(DFI)F: I41 Branch 41 IFEQ L221 - false
   * 7 gnu.trove.map.hash.TDoubleFloatHashMap.<init>([D[F)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 8 gnu.trove.map.hash.TDoubleFloatHashMap.<init>([D[F)V: I24 Branch 33 IF_ICMPGE L119 - false
   */

//   @Test
//   public void test8()  throws Throwable  {
//       double[] doubleArray0 = new double[8];
//       float[] floatArray0 = new float[4];
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
//       float float0 = tDoubleFloatHashMap0.putIfAbsent(0.0, (-1.0F));
//       assertEquals(1, tDoubleFloatHashMap0.size());
//       assertEquals(17, tDoubleFloatHashMap0.capacity());
//       assertEquals("{0.0=0.0}", tDoubleFloatHashMap0.toString());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   */

  @Test
  public void test9()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      tDoubleFloatHashMap0.adjustOrPutValue((double) Float.POSITIVE_INFINITY, (-252.69775F), (float) 23);
      boolean boolean0 = tDoubleFloatHashMap0.isEmpty();
      assertEquals(1, tDoubleFloatHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-932));
      boolean boolean0 = tDoubleFloatHashMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.remove(D)F: I14 Branch 46 IFLT L276 - true
   */

//   @Test
//   public void test11()  throws Throwable  {
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
//       float float0 = tDoubleFloatHashMap0.remove((double) 0);
//       assertEquals(23, tDoubleFloatHashMap0.capacity());
//       assertEquals(true, tDoubleFloatHashMap0.isEmpty());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 12
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.keys()[D: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.keys()[D: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap.keys()[D: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TDoubleFloatHashMap.keys()[D: I34 Branch 48 IF_ICMPNE L304 - true
   * 5 gnu.trove.map.hash.TDoubleFloatHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 6 gnu.trove.map.hash.TDoubleFloatHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 7 gnu.trove.map.hash.TDoubleFloatHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 8 gnu.trove.map.hash.TDoubleFloatHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 9 gnu.trove.map.hash.TDoubleFloatHashMap.putIfAbsent(DF)F: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1), (-1));
      tDoubleFloatHashMap0.putIfAbsent((-1788.4806273767601), (float) (-1));
      tDoubleFloatHashMap0.keys();
      assertEquals(1, tDoubleFloatHashMap0.size());
      assertEquals("{-1788.4806273767601=-1.0}", tDoubleFloatHashMap0.toString());
  }

  //Test case number: 13
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.keys([D)[D: I10 Branch 49 IF_ICMPGE L315 - true
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.keys([D)[D: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap.keys([D)[D: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TDoubleFloatHashMap.keys([D)[D: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      double[] doubleArray0 = tDoubleFloatHashMap0.keys(tDoubleFloatHashMap0._set);
      assertNotNull(doubleArray0);
      assertEquals(23, tDoubleFloatHashMap0.capacity());
  }

  //Test case number: 14
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.keys([D)[D: I10 Branch 49 IF_ICMPGE L315 - false
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.keys([D)[D: I44 Branch 51 IF_ICMPNE L323 - false
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap.keys([D)[D: I37 Branch 50 IFLE L322 - true
   * 4 gnu.trove.map.hash.TDoubleFloatHashMap.keys([D)[D: I37 Branch 50 IFLE L322 - false
   * 5 gnu.trove.map.hash.TDoubleFloatHashMap.keys([D)[D: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (-1.0);
      float[] floatArray0 = new float[6];
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      double[] doubleArray1 = new double[1];
      double[] doubleArray2 = tDoubleFloatHashMap0.keys(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, tDoubleFloatHashMap0.size());
      assertEquals(17, tDoubleFloatHashMap0.capacity());
      assertEquals("{-1.0=0.0, 0.0=0.0}", tDoubleFloatHashMap0.toString());
  }

  //Test case number: 15
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.values()[F: I34 Branch 53 IF_ICMPNE L344 - false
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.values()[F: I27 Branch 52 IFLE L343 - true
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap.values()[F: I27 Branch 52 IFLE L343 - false
   * 4 gnu.trove.map.hash.TDoubleFloatHashMap.values()[F: I34 Branch 53 IF_ICMPNE L344 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-932));
      tDoubleFloatHashMap0.putIfAbsent((double) (-932), (float) (-932));
      tDoubleFloatHashMap0.values();
      assertEquals("{-932.0=-932.0}", tDoubleFloatHashMap0.toString());
      assertEquals(false, tDoubleFloatHashMap0.isEmpty());
  }

  //Test case number: 16
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.values([F)[F: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TDoubleFloatHashMap.values([F)[F: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1), (-1));
      float[] floatArray0 = tDoubleFloatHashMap0.values();
      assertNotNull(floatArray0);
      
      float[] floatArray1 = tDoubleFloatHashMap0.values(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
  }

  //Test case number: 17
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.values([F)[F: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.values([F)[F: I44 Branch 56 IF_ICMPNE L363 - false
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap.values()[F: I27 Branch 52 IFLE L343 - true
   * 4 gnu.trove.map.hash.TDoubleFloatHashMap.values()[F: I27 Branch 52 IFLE L343 - false
   * 5 gnu.trove.map.hash.TDoubleFloatHashMap.values()[F: I34 Branch 53 IF_ICMPNE L344 - true
   * 6 gnu.trove.map.hash.TDoubleFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - true
   * 7 gnu.trove.map.hash.TDoubleFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - false
   * 8 gnu.trove.map.hash.TDoubleFloatHashMap.values([F)[F: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1), (-1));
      float[] floatArray0 = tDoubleFloatHashMap0.values();
      tDoubleFloatHashMap0.adjustOrPutValue(0.0, (float) (-1), 344.06653F);
      tDoubleFloatHashMap0.values(floatArray0);
      assertEquals("{0.0=344.06653}", tDoubleFloatHashMap0.toString());
      assertEquals(7, tDoubleFloatHashMap0.capacity());
  }

  //Test case number: 18
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.containsValue(F)Z: I31 Branch 59 IFNE L377 - true
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap.containsValue(F)Z: I18 Branch 57 IFLE L376 - true
   * 4 gnu.trove.map.hash.TDoubleFloatHashMap.containsValue(F)Z: I18 Branch 57 IFLE L376 - false
   * 5 gnu.trove.map.hash.TDoubleFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1), (-1));
      tDoubleFloatHashMap0.putIfAbsent((-1788.4806273767601), (float) (-1));
      boolean boolean0 = tDoubleFloatHashMap0.containsValue(41.292747F);
      assertEquals(false, tDoubleFloatHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.containsValue(F)Z: I31 Branch 59 IFNE L377 - false
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.containsValue(F)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 4 gnu.trove.map.hash.TDoubleFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - false
   */

  @Test
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      float[] floatArray0 = new float[3];
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      boolean boolean0 = tDoubleFloatHashMap0.containsValue(0.0F);
      assertEquals(1, tDoubleFloatHashMap0.size());
      assertEquals("{0.0=0.0}", tDoubleFloatHashMap0.toString());
      assertEquals(true, boolean0);
      assertEquals(23, tDoubleFloatHashMap0.capacity());
  }

  //Test case number: 20
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-932));
      boolean boolean0 = tDoubleFloatHashMap0.forEachValue((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 21
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - false
   * 4 gnu.trove.map.hash.TDoubleFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 5 gnu.trove.map.hash.TDoubleFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      hashMap0.put((Double) (-325.35446826701565), (Float) 0.0F);
      tDoubleFloatHashMap0.putAll((Map<? extends Double, ? extends Float>) hashMap0);
      // Undeclared exception!
      try {
        tDoubleFloatHashMap0.forEachValue((TFloatProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 22
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      tDoubleFloatHashMap0.transformValues((TFloatFunction) null);
      assertEquals(23, tDoubleFloatHashMap0.capacity());
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      float[] floatArray0 = new float[10];
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      // Undeclared exception!
      try {
        tDoubleFloatHashMap0.transformValues((TFloatFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.retainEntries(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.retainEntries(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap.retainEntries(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1), (-1));
      boolean boolean0 = tDoubleFloatHashMap0.retainEntries((TDoubleFloatProcedure) null);
      assertEquals("{}", tDoubleFloatHashMap0.toString());
      assertEquals(false, boolean0);
      assertEquals(3, tDoubleFloatHashMap0.capacity());
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.retainEntries(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.retainEntries(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap.retainEntries(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test25()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(1000);
      tDoubleFloatHashMap0.putIfAbsent(1.0, 0.0F);
      // Undeclared exception!
      try {
        tDoubleFloatHashMap0.retainEntries((TDoubleFloatProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.adjustValue(DF)Z: I9 Branch 71 IFGE L477 - true
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.increment(D)Z: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1), (-1));
      tDoubleFloatHashMap0.adjustOrPutValue(0.0, (float) (-1), 344.06653F);
      boolean boolean0 = tDoubleFloatHashMap0.increment(0.0);
      assertEquals(1, tDoubleFloatHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 27
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.adjustOrPutValue(DFF)F: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.adjustOrPutValue(DFF)F: I58 Branch 73 IFEQ L502 - true
   */

//   @Test
//   public void test27()  throws Throwable  {
//       double[] doubleArray0 = new double[27];
//       float[] floatArray0 = new float[4];
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
//       float float0 = tDoubleFloatHashMap0.adjustOrPutValue(0.0, (-20.193815F), 0.0F);
//       assertEquals("{0.0=-20.193815}", tDoubleFloatHashMap0.toString());
//       assertEquals((-20.193815F), float0, 0.01F);
//   }

  //Test case number: 28
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   */

  @Test
  public void test28()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(1000);
      boolean boolean0 = tDoubleFloatHashMap0.equals((Object) "");
      assertEquals(false, boolean0);
      assertEquals(2081, tDoubleFloatHashMap0.capacity());
  }

  //Test case number: 29
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.<init>(IFDF)V: root-Branch
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   */

  @Test
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      float[] floatArray0 = new float[17];
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(1380, (float) 1380, (-185.7397732153588), 1380.0F);
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      boolean boolean0 = tDoubleFloatHashMap0.equals((Object) tDoubleFloatHashMap1);
      assertEquals(false, boolean0);
      assertEquals(1, tDoubleFloatHashMap1.size());
      assertEquals(37, tDoubleFloatHashMap1.capacity());
      assertFalse(tDoubleFloatHashMap1.equals(tDoubleFloatHashMap0));
      assertEquals("{0.0=0.0}", tDoubleFloatHashMap1.toString());
  }

  //Test case number: 30
  /*
   * 11 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - false
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.equals(Ljava/lang/Object;)Z: I89 Branch 79 IFEQ L1200 - false
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap.equals(Ljava/lang/Object;)Z: I93 Branch 80 IFEQ L1200 - true
   * 4 gnu.trove.map.hash.TDoubleFloatHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 5 gnu.trove.map.hash.TDoubleFloatHashMap.get(D)F: I9 Branch 44 IFGE L253 - true
   * 6 gnu.trove.map.hash.TDoubleFloatHashMap.get(D)F: I9 Branch 44 IFGE L253 - false
   * 7 gnu.trove.map.hash.TDoubleFloatHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 8 gnu.trove.map.hash.TDoubleFloatHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 9 gnu.trove.map.hash.TDoubleFloatHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 10 gnu.trove.map.hash.TDoubleFloatHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 11 gnu.trove.map.hash.TDoubleFloatHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - true
   */

  @Test
  public void test30()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      tDoubleFloatHashMap0.adjustOrPutValue(1165.175754256031, (float) 236, Float.NEGATIVE_INFINITY);
      tDoubleFloatHashMap0.putIfAbsent((double) Float.NEGATIVE_INFINITY, (-1.0F));
      float[] floatArray0 = new float[5];
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap(tDoubleFloatHashMap0._set, floatArray0);
      boolean boolean0 = tDoubleFloatHashMap0.equals((Object) tDoubleFloatHashMap1);
      assertEquals(2, tDoubleFloatHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 31
  /*
   * 25 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.equals(Ljava/lang/Object;)Z: I93 Branch 80 IFEQ L1200 - false
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap$TDoubleFloatHashIterator.<init>(Lgnu/trove/map/hash/TDoubleFloatHashMap;Lgnu/trove/map/hash/TDoubleFloatHashMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap$TDoubleFloatHashIterator.key()D: root-Branch
   * 4 gnu.trove.map.hash.TDoubleFloatHashMap$TDoubleFloatHashIterator.value()F: root-Branch
   * 5 gnu.trove.map.hash.TDoubleFloatHashMap$TDoubleFloatHashIterator.advance()V: root-Branch
   * 6 gnu.trove.map.hash.TDoubleFloatHashMap.iterator()Lgnu/trove/iterator/TDoubleFloatIterator;: root-Branch
   * 7 gnu.trove.map.hash.TDoubleFloatHashMap.get(D)F: I9 Branch 44 IFGE L253 - true
   * 8 gnu.trove.map.hash.TDoubleFloatHashMap.get(D)F: I9 Branch 44 IFGE L253 - false
   * 9 gnu.trove.map.hash.TDoubleFloatHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 10 gnu.trove.map.hash.TDoubleFloatHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 11 gnu.trove.map.hash.TDoubleFloatHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 12 gnu.trove.map.hash.TDoubleFloatHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 13 gnu.trove.map.hash.TDoubleFloatHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 14 gnu.trove.map.hash.TDoubleFloatHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - true
   * 15 gnu.trove.map.hash.TDoubleFloatHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - false
   * 16 gnu.trove.map.hash.TDoubleFloatHashMap.equals(Ljava/lang/Object;)Z: I89 Branch 79 IFEQ L1200 - false
   * 17 gnu.trove.map.hash.TDoubleFloatHashMap.doPut(DFI)F: I12 Branch 40 IFGE L214 - false
   * 18 gnu.trove.map.hash.TDoubleFloatHashMap.doPut(DFI)F: I41 Branch 41 IFEQ L221 - true
   * 19 gnu.trove.map.hash.TDoubleFloatHashMap.putAll(Lgnu/trove/map/TDoubleFloatMap;)V: I15 Branch 43 IFEQ L243 - true
   * 20 gnu.trove.map.hash.TDoubleFloatHashMap.putAll(Lgnu/trove/map/TDoubleFloatMap;)V: I15 Branch 43 IFEQ L243 - false
   * 21 gnu.trove.map.hash.TDoubleFloatHashMap.<init>([D[F)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 22 gnu.trove.map.hash.TDoubleFloatHashMap.<init>([D[F)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 23 gnu.trove.map.hash.TDoubleFloatHashMap.<init>(Lgnu/trove/map/TDoubleFloatMap;)V: I10 Branch 34 IFEQ L133 - false
   * 24 gnu.trove.map.hash.TDoubleFloatHashMap.<init>(Lgnu/trove/map/TDoubleFloatMap;)V: I40 Branch 35 IFEQ L139 - true
   * 25 gnu.trove.map.hash.TDoubleFloatHashMap.<init>(Lgnu/trove/map/TDoubleFloatMap;)V: I54 Branch 36 IFEQ L143 - true
   */

  @Test
  public void test31()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(236);
      tDoubleFloatHashMap0.adjustOrPutValue(1165.175754256031, (float) 236, Float.NEGATIVE_INFINITY);
      tDoubleFloatHashMap0.putIfAbsent((double) Float.NEGATIVE_INFINITY, (-1.0F));
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 906.23254F;
      TDoubleFloatHashMap tDoubleFloatHashMap2 = new TDoubleFloatHashMap(tDoubleFloatHashMap1._set, floatArray0);
      boolean boolean0 = tDoubleFloatHashMap0.equals((Object) tDoubleFloatHashMap2);
      assertEquals(2, tDoubleFloatHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 32
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   * 4 gnu.trove.map.hash.TDoubleFloatHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test32()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1), (-1));
      int int0 = tDoubleFloatHashMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 33
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 4 gnu.trove.map.hash.TDoubleFloatHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   */

  @Test
  public void test33()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      tDoubleFloatHashMap0.adjustOrPutValue((double) 0, (float) 0, (float) 0);
      int int0 = tDoubleFloatHashMap0.hashCode();
      assertEquals("{0.0=0.0}", tDoubleFloatHashMap0.toString());
      assertEquals(0, int0);
  }

  //Test case number: 34
  /*
   * 18 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap$1.execute(DF)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap$1.<init>(Lgnu/trove/map/hash/TDoubleFloatHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap$1.execute(DF)Z: I4 Branch 115 IFEQ L1233 - false
   * 4 gnu.trove.map.hash.TDoubleFloatHashMap.toString()Ljava/lang/String;: root-Branch
   * 5 gnu.trove.map.hash.TDoubleFloatHashMap.put(DF)F: root-Branch
   * 6 gnu.trove.map.hash.TDoubleFloatHashMap.<init>(I)V: root-Branch
   * 7 gnu.trove.map.hash.TDoubleFloatHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 8 gnu.trove.map.hash.TDoubleFloatHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 9 gnu.trove.map.hash.TDoubleFloatHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 10 gnu.trove.map.hash.TDoubleFloatHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 11 gnu.trove.map.hash.TDoubleFloatHashMap.doPut(DFI)F: I12 Branch 40 IFGE L214 - true
   * 12 gnu.trove.map.hash.TDoubleFloatHashMap.doPut(DFI)F: I41 Branch 41 IFEQ L221 - false
   * 13 gnu.trove.map.hash.TDoubleFloatHashMap.forEachEntry(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 14 gnu.trove.map.hash.TDoubleFloatHashMap.forEachEntry(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 15 gnu.trove.map.hash.TDoubleFloatHashMap.forEachEntry(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 16 gnu.trove.map.hash.TDoubleFloatHashMap.forEachEntry(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 17 gnu.trove.map.hash.TDoubleFloatHashMap.forEachEntry(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 18 gnu.trove.map.hash.TDoubleFloatHashMap.putIfAbsent(DF)F: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test34()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-932));
      tDoubleFloatHashMap0.putIfAbsent((double) (-932), (float) (-932));
      tDoubleFloatHashMap0.put((double) (-1338.5756F), (float) (-932));
      String string0 = tDoubleFloatHashMap0.toString();
      assertEquals(2, tDoubleFloatHashMap0.size());
      assertEquals("{-932.0=-932.0, -1338.5755615234375=-932.0}", string0);
  }

  //Test case number: 35
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TDoubleFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 2 gnu.trove.map.hash.TDoubleFloatHashMap.setUp(I)I: root-Branch
   * 3 gnu.trove.map.hash.TDoubleFloatHashMap.<init>()V: root-Branch
   * 4 gnu.trove.map.hash.TDoubleFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 5 gnu.trove.map.hash.TDoubleFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 6 gnu.trove.map.hash.TDoubleFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 7 gnu.trove.map.hash.TDoubleFloatHashMap.adjustOrPutValue(DFF)F: I9 Branch 72 IFGE L491 - true
   * 8 gnu.trove.map.hash.TDoubleFloatHashMap.adjustOrPutValue(DFF)F: I58 Branch 73 IFEQ L502 - false
   */

  @Test
  public void test35()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      tDoubleFloatHashMap0.adjustOrPutValue((double) Float.POSITIVE_INFINITY, (-252.69775F), (float) 23);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(23);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) dataOutputStream0);
      tDoubleFloatHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals("{Infinity=23.0}", tDoubleFloatHashMap0.toString());
      assertEquals(1, tDoubleFloatHashMap0.size());
  }
}
