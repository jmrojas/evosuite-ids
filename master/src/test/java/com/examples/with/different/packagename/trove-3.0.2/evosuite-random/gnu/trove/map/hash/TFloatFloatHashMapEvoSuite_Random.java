/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TFloatFloatMap;
import gnu.trove.map.hash.TFloatFloatHashMap;
import gnu.trove.set.TFloatSet;
import java.io.IOException;
import java.io.InputStream;
import java.io.InterruptedIOException;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatFloatHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float float0 = (-318.98682F);
      floatArray0[0] = float0;
      float float1 = 538.0241F;
      floatArray0[1] = float1;
      float[] floatArray1 = new float[5];
      floatArray1[0] = float1;
      float float2 = (-136.42291F);
      floatArray1[1] = float2;
      floatArray1[2] = float1;
      floatArray1[3] = float1;
      floatArray1[4] = float0;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray1, floatArray1);
      float float3 = 1369.9634F;
      tFloatFloatHashMap0.increment(float3);
      float float4 = 1242.7748F;
      int int0 = 582;
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(int0);
      TFloatFloatHashMap tFloatFloatHashMap2 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap1);
      float float5 = (-2017.5365F);
      tFloatFloatHashMap2.adjustOrPutValue(floatArray0[1], float5, float1);
      assertEquals(false, tFloatFloatHashMap2.isEmpty());
      
      floatArray0[2] = float4;
      TFloatFloatHashMap tFloatFloatHashMap3 = new TFloatFloatHashMap(floatArray0, floatArray0);
      tFloatFloatHashMap3.getNoEntryKey();
      assertFalse(tFloatFloatHashMap3.equals(tFloatFloatHashMap1));
  }

//   @Test
//   public void test1()  throws Throwable  {
//       int int0 = 1925;
//       int int1 = (-1787);
//       float float0 = 531.72833F;
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int1, float0);
//       float float1 = tFloatFloatHashMap0.remove((float) int0);
//       tFloatFloatHashMap0.setAutoCompactionFactor(float1);
//       assertEquals(0.0F, tFloatFloatHashMap0.getAutoCompactionFactor(), 0.01F);
//       
//       TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(int0);
//       TFloatFloatHashMap tFloatFloatHashMap2 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap1);
//       tFloatFloatHashMap2.clear();
//       assertEquals(23, tFloatFloatHashMap2.capacity());
//   }

//   @Test
//   public void test2()  throws Throwable  {
//       float[] floatArray0 = new float[7];
//       float float0 = 1866.5405F;
//       floatArray0[0] = float0;
//       float float1 = 0.0F;
//       floatArray0[1] = float1;
//       float float2 = 281.81195F;
//       floatArray0[2] = float2;
//       float float3 = 0.0F;
//       floatArray0[3] = float3;
//       float float4 = 1135.6918F;
//       floatArray0[4] = float4;
//       float float5 = 305.08542F;
//       floatArray0[5] = float5;
//       float float6 = 2012.452F;
//       floatArray0[6] = float6;
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
//       TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap0);
//       assertEquals(6, tFloatFloatHashMap0.size());
//       assertEquals("{305.08542=305.08542, 2012.452=2012.452, 281.81195=281.81195, 1866.5405=1866.5405, 1135.6918=1135.6918, 0.0=0.0}", tFloatFloatHashMap0.toString());
//       assertEquals(0.0F, tFloatFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals("{305.08542=305.08542, 281.81195=281.81195, 2012.452=2012.452, 1866.5405=1866.5405, 1135.6918=1135.6918, 0.0=0.0}", tFloatFloatHashMap1.toString());
//   }

//   @Test
//   public void test3()  throws Throwable  {
//       int int0 = 1257;
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0, int0);
//       float[] floatArray0 = new float[1];
//       float float0 = 1327.7075F;
//       Locale locale0 = Locale.CANADA;
//       String string0 = locale0.getDisplayVariant();
//       tFloatFloatHashMap0.equals((Object) string0);
//       floatArray0[0] = float0;
//       float float1 = 1407.1317F;
//       PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
//       PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, int0);
//       ObjectInputStream objectInputStream0 = null;
//       try {
//         objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
//         fail("Expecting exception: InterruptedIOException");
//       
//       } catch(InterruptedIOException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test4()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      float float0 = 0.0F;
      tFloatFloatHashMap0.increment(float0);
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap();
      float[] floatArray0 = new float[4];
      float float1 = (-1714.2902F);
      int int0 = 0;
      tFloatFloatHashMap1.ensureCapacity(int0);
      floatArray0[0] = float1;
      float float2 = 1.0F;
      floatArray0[1] = float2;
      float float3 = (-896.79596F);
      floatArray0[2] = float3;
      float float4 = (-1577.8456F);
      floatArray0[3] = float4;
      tFloatFloatHashMap1.values(floatArray0);
      int int1 = 0;
      TFloatFloatMap tFloatFloatMap0 = null;
      TFloatFloatHashMap tFloatFloatHashMap2 = null;
      try {
        tFloatFloatHashMap2 = new TFloatFloatHashMap(tFloatFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      ObjectInput objectInput0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)77;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-2);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)35;
      byteArray0[4] = byte4;
      byte byte5 = (byte)119;
      byteArray0[5] = byte5;
      byte byte6 = (byte)1;
      byteArray0[6] = byte6;
      byte byte7 = (byte)41;
      byteArray0[7] = byte7;
      byte byte8 = (byte)91;
      byteArray0[8] = byte8;
      tFloatFloatHashMap0._states = byteArray0;
      // Undeclared exception!
      try {
        tFloatFloatHashMap0.hashCode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-838);
      float float0 = (-216.02255F);
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0, (float) int0, float0, float0);
      TFloatSet tFloatSet0 = tFloatFloatHashMap0.keySet();
      assertEquals(0, tFloatSet0.size());
  }

//   @Test
//   public void test7()  throws Throwable  {
//       int int0 = (-891);
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0, int0, int0, int0);
//       float[] floatArray0 = new float[6];
//       floatArray0[0] = (float) int0;
//       floatArray0[1] = (float) int0;
//       floatArray0[2] = (float) int0;
//       floatArray0[0] = (float) int0;
//       floatArray0[1] = (float) int0;
//       floatArray0[2] = (float) int0;
//       boolean boolean0 = tFloatFloatHashMap0.isEmpty();
//       floatArray0[3] = (float) int0;
//       floatArray0[4] = (float) int0;
//       floatArray0[5] = (float) int0;
//       floatArray0[3] = (float) int0;
//       floatArray0[4] = (float) int0;
//       float[] floatArray1 = tFloatFloatHashMap0.keys();
//       assertNotNull(floatArray1);
//       
//       floatArray0[5] = (float) int0;
//       boolean boolean1 = tFloatFloatHashMap0.adjustValue(floatArray0[0], floatArray0[0]);
//       assertFalse(boolean1 == boolean0);
//       
//       tFloatFloatHashMap0._set = floatArray0;
//       floatArray0[0] = (float) int0;
//       floatArray0[1] = (float) int0;
//       floatArray0[2] = (float) int0;
//       floatArray0[3] = (float) int0;
//       floatArray0[4] = (float) int0;
//       byte[] byteArray0 = tFloatFloatHashMap0._states;
//       floatArray0[5] = (float) int0;
//       float[] floatArray2 = tFloatFloatHashMap0.values(floatArray0);
//       assertNotNull(floatArray2);
//       assertSame(floatArray2, floatArray0);
//       
//       TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap0);
//       assertEquals((-891.0F), tFloatFloatHashMap1.getNoEntryKey(), 0.01F);
//       assertEquals((-891.0F), tFloatFloatHashMap1.getNoEntryValue(), 0.01F);
//       
//       // Undeclared exception!
//       try {
//         tFloatFloatHashMap0.compact();
//         fail("Expecting exception: ArrayIndexOutOfBoundsException");
//       
//       } catch(ArrayIndexOutOfBoundsException e) {
//          //
//          // 5
//          //
//       }
//   }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0, int0);
      float float0 = (-2009.6191F);
      float float1 = 0.0F;
      tFloatFloatHashMap0.put(float0, float1);
      assertEquals(7, tFloatFloatHashMap0.capacity());
      
      float float2 = 1.0F;
      float float3 = (-1017.36584F);
      float float4 = 1426.9408F;
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(int0, float2, float3, float4);
      tFloatFloatHashMap1.trimToSize();
      assertFalse(tFloatFloatHashMap1.equals(tFloatFloatHashMap0));
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-814);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0);
      tFloatFloatHashMap0.compact();
      assertEquals("{}", tFloatFloatHashMap0.toString());
      
      float float0 = 33.04477F;
      floatArray0[0] = float0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = float0;
      floatArray0[3] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap();
      tFloatFloatHashMap1.getNoEntryValue();
      tFloatFloatHashMap1.put(floatArray0[3], (float) int0);
      tFloatFloatHashMap1.getAutoCompactionFactor();
      tFloatFloatHashMap1.tempDisableAutoCompaction();
      tFloatFloatHashMap1.increment((float) int0);
      assertEquals(false, tFloatFloatHashMap1.isEmpty());
      
      TFloatFloatHashMap tFloatFloatHashMap2 = new TFloatFloatHashMap(floatArray0, floatArray0);
      tFloatFloatHashMap1.remove((float) int0);
      TFloatFloatHashMap tFloatFloatHashMap3 = new TFloatFloatHashMap(int0);
      tFloatFloatHashMap3.valueCollection();
      float float1 = (-1757.0712F);
      tFloatFloatHashMap1.compact();
      tFloatFloatHashMap3.increment(float1);
      float float2 = 1458.702F;
      String string0 = Float.toString(float2);
      tFloatFloatHashMap3.equals((Object) string0);
      tFloatFloatHashMap3.capacity();
      assertTrue(tFloatFloatHashMap3.equals(tFloatFloatHashMap1));
  }

//   @Test
//   public void test10()  throws Throwable  {
//       int int0 = 564;
//       float float0 = 10.0F;
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0, float0);
//       float float1 = 0.0F;
//       tFloatFloatHashMap0.increment(float1);
//       tFloatFloatHashMap0.valueCollection();
//       float float2 = (-436.58984F);
//       TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(int0, float2);
//       float float3 = tFloatFloatHashMap1.putIfAbsent((float) int0, float2);
//       assertEquals(1, tFloatFloatHashMap1.size());
//       assertEquals(0.0F, float3, 0.01F);
//   }

  @Test
  public void test11()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = 1057;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0, int0);
      tFloatFloatHashMap0.ensureCapacity(int0);
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(int0, int0);
      float float0 = tFloatFloatHashMap1.put((float) int0, (float) int0);
      float float1 = (-64.596115F);
      floatArray0[0] = float1;
      float float2 = 0.0F;
      floatArray0[0] = float2;
      byte[] byteArray0 = tFloatFloatHashMap1._states;
      tFloatFloatHashMap1.adjustOrPutValue(floatArray0[0], (float) int0, float0);
      tFloatFloatHashMap1.tempDisableAutoCompaction();
      int int1 = (-742);
      tFloatFloatHashMap1.values(floatArray0);
      TFloatFloatHashMap tFloatFloatHashMap2 = new TFloatFloatHashMap(int1);
      float float3 = 0.0F;
      Integer integer0 = null;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) int0, integer0);
      tFloatFloatHashMap2.values(tFloatFloatHashMap1._set);
      // Undeclared exception!
      try {
        abstractMap_SimpleImmutableEntry0.setValue(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test12()  throws Throwable  {
//       float[] floatArray0 = new float[3];
//       float float0 = 73.86103F;
//       floatArray0[0] = float0;
//       float float1 = 637.34357F;
//       floatArray0[1] = float1;
//       float float2 = (-542.4996F);
//       floatArray0[2] = float2;
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
//       TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap0);
//       tFloatFloatHashMap1.putAll((TFloatFloatMap) tFloatFloatHashMap0);
//       assertEquals(7, tFloatFloatHashMap0.capacity());
//       assertTrue(tFloatFloatHashMap1.equals(tFloatFloatHashMap0));
//       assertEquals("{637.34357=637.34357, -542.4996=-542.4996, 73.86103=73.86103}", tFloatFloatHashMap0.toString());
//       assertEquals("{637.34357=637.34357, -542.4996=-542.4996, 73.86103=73.86103}", tFloatFloatHashMap1.toString());
//       
//       TFloatFloatHashMap tFloatFloatHashMap2 = new TFloatFloatHashMap();
//       TFloatFloatHashMap tFloatFloatHashMap3 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap2);
//       TFloatFloatHashMap tFloatFloatHashMap4 = new TFloatFloatHashMap();
//       tFloatFloatHashMap3.size();
//       tFloatFloatHashMap3.keySet();
//       float float3 = 945.9762F;
//       float float4 = tFloatFloatHashMap3.get(float3);
//       assertEquals(0.0F, float4, 0.01F);
//       
//       float float5 = (-683.9804F);
//       tFloatFloatHashMap3.contains(float5);
//       tFloatFloatHashMap3.size();
//       assertEquals(23, tFloatFloatHashMap3.capacity());
//       assertFalse(tFloatFloatHashMap3.equals(tFloatFloatHashMap1));
//       assertEquals(0.0F, tFloatFloatHashMap3.getNoEntryKey(), 0.01F);
//   }

  @Test
  public void test13()  throws Throwable  {
      TFloatFloatMap tFloatFloatMap0 = null;
      TFloatFloatHashMap tFloatFloatHashMap0 = null;
      try {
        tFloatFloatHashMap0 = new TFloatFloatHashMap(tFloatFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      String string0 = "=";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: =://==#=
         //
      }
  }

//   @Test
//   public void test15()  throws Throwable  {
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
//       float float0 = (-1.0F);
//       float float1 = 0.0F;
//       float float2 = 0.0F;
//       float float3 = tFloatFloatHashMap0.adjustOrPutValue(float0, float1, float2);
//       assertEquals("{-1.0=0.0}", tFloatFloatHashMap0.toString());
//       assertEquals(0.0F, float3, 0.01F);
//   }

  @Test
  public void test16()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = (-109.83405F);
      floatArray0[0] = float0;
      float float1 = (-708.1819F);
      floatArray0[1] = float1;
      float float2 = (-1.0F);
      floatArray0[2] = float2;
      float float3 = 0.0F;
      floatArray0[3] = float3;
      float float4 = 1394.7769F;
      floatArray0[4] = float4;
      float float5 = 479.3714F;
      floatArray0[5] = float5;
      float float6 = (-835.65466F);
      floatArray0[6] = float6;
      float float7 = 1083.224F;
      floatArray0[7] = float7;
      float float8 = 10.0F;
      floatArray0[8] = float8;
      float[] floatArray1 = new float[8];
      floatArray1[0] = float4;
      floatArray1[1] = float4;
      floatArray1[2] = float3;
      floatArray1[3] = float6;
      floatArray1[4] = float3;
      floatArray1[5] = float6;
      floatArray1[6] = float4;
      floatArray1[7] = float7;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray1);
      tFloatFloatHashMap0.compact();
      assertEquals("{-708.1819=1394.7769, -1.0=0.0, -109.83405=1394.7769, 479.3714=-835.65466, 1083.224=1083.224, -835.65466=1394.7769, 1394.7769=0.0, 0.0=-835.65466}", tFloatFloatHashMap0.toString());
  }
}
