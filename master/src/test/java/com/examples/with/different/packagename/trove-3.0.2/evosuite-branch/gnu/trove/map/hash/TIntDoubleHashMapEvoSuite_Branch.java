/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TDoubleFunction;
import gnu.trove.map.TIntDoubleMap;
import gnu.trove.map.hash.TIntDoubleHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.procedure.TIntDoubleProcedure;
import gnu.trove.procedure.TIntProcedure;
import gnu.trove.set.TIntSet;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntDoubleHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.keySet()Lgnu/trove/set/TIntSet;: root-Branch
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.<init>(IF)V: root-Branch
   * 3 gnu.trove.map.hash.TIntDoubleHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TIntDoubleHashMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TIntDoubleHashMap.setUp(I)I: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(Integer.MIN_VALUE, Integer.MIN_VALUE);
      TIntSet tIntSet0 = tIntDoubleHashMap0.keySet();
      assertEquals(true, tIntSet0.isEmpty());
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.valueCollection()Lgnu/trove/TDoubleCollection;: root-Branch
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TIntDoubleHashMap$TValueView.<init>(Lgnu/trove/map/hash/TIntDoubleHashMap;)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      tIntDoubleHashMap0.valueCollection();
      assertEquals(23, tIntDoubleHashMap0.capacity());
  }

  //Test case number: 2
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.put(ID)D: root-Branch
   * 3 gnu.trove.map.hash.TIntDoubleHashMap.<init>([I[D)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 4 gnu.trove.map.hash.TIntDoubleHashMap.<init>([I[D)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 5 gnu.trove.map.hash.TIntDoubleHashMap.doPut(IDI)D: I12 Branch 40 IFGE L214 - true
   * 6 gnu.trove.map.hash.TIntDoubleHashMap.doPut(IDI)D: I41 Branch 41 IFEQ L221 - false
   * 7 gnu.trove.map.hash.TIntDoubleHashMap.remove(I)D: I14 Branch 46 IFLT L276 - false
   */

  @Test
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[4];
      double[] doubleArray0 = new double[1];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      assertEquals("{0=0.0}", tIntDoubleHashMap0.toString());
      
      double double0 = tIntDoubleHashMap0.remove(0);
      assertEquals(0, tIntDoubleHashMap0.size());
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.containsKey(I)Z: root-Branch
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.<init>(IFID)V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(0, 0, 0, 0);
      boolean boolean0 = tIntDoubleHashMap0.containsKey(186);
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.increment(I)Z: root-Branch
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.adjustValue(ID)Z: I9 Branch 71 IFGE L477 - false
   */

  @Test
  public void test4()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      boolean boolean0 = tIntDoubleHashMap0.increment((-1595));
      assertEquals(false, boolean0);
      assertEquals(23, tIntDoubleHashMap0.capacity());
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.forEachKey(Lgnu/trove/procedure/TIntProcedure;)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      boolean boolean0 = tIntDoubleHashMap0.forEachKey((TIntProcedure) null);
      assertEquals(23, tIntDoubleHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.clear()V: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      tIntDoubleHashMap0.clear();
      assertEquals(23, tIntDoubleHashMap0.capacity());
      assertEquals("{}", tIntDoubleHashMap0.toString());
  }

  //Test case number: 7
  /*
   * 15 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap$TIntDoubleHashIterator.advance()V: root-Branch
   * 2 gnu.trove.map.hash.TIntDoubleHashMap$TIntDoubleHashIterator.value()D: root-Branch
   * 3 gnu.trove.map.hash.TIntDoubleHashMap$TIntDoubleHashIterator.key()I: root-Branch
   * 4 gnu.trove.map.hash.TIntDoubleHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 5 gnu.trove.map.hash.TIntDoubleHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 6 gnu.trove.map.hash.TIntDoubleHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 7 gnu.trove.map.hash.TIntDoubleHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 8 gnu.trove.map.hash.TIntDoubleHashMap.doPut(IDI)D: I12 Branch 40 IFGE L214 - false
   * 9 gnu.trove.map.hash.TIntDoubleHashMap.doPut(IDI)D: I41 Branch 41 IFEQ L221 - true
   * 10 gnu.trove.map.hash.TIntDoubleHashMap.putAll(Lgnu/trove/map/TIntDoubleMap;)V: I15 Branch 43 IFEQ L243 - false
   * 11 gnu.trove.map.hash.TIntDoubleHashMap.adjustOrPutValue(IDD)D: I9 Branch 72 IFGE L491 - true
   * 12 gnu.trove.map.hash.TIntDoubleHashMap.adjustOrPutValue(IDD)D: I58 Branch 73 IFEQ L502 - false
   * 13 gnu.trove.map.hash.TIntDoubleHashMap.iterator()Lgnu/trove/iterator/TIntDoubleIterator;: root-Branch
   * 14 gnu.trove.map.hash.TIntDoubleHashMap.putAll(Lgnu/trove/map/TIntDoubleMap;)V: I15 Branch 43 IFEQ L243 - true
   * 15 gnu.trove.map.hash.TIntDoubleHashMap$TIntDoubleHashIterator.<init>(Lgnu/trove/map/hash/TIntDoubleHashMap;Lgnu/trove/map/hash/TIntDoubleHashMap;)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(0, 0);
      tIntDoubleHashMap0.adjustOrPutValue(0, 0, 0);
      tIntDoubleHashMap0.putAll((TIntDoubleMap) tIntDoubleHashMap0);
      assertEquals(false, tIntDoubleHashMap0.isEmpty());
      assertEquals("{0=0.0}", tIntDoubleHashMap0.toString());
  }

  //Test case number: 8
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.<init>(Lgnu/trove/map/TIntDoubleMap;)V: I10 Branch 34 IFEQ L133 - false
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.<init>(Lgnu/trove/map/TIntDoubleMap;)V: I38 Branch 35 IFEQ L139 - true
   * 3 gnu.trove.map.hash.TIntDoubleHashMap.<init>(Lgnu/trove/map/TIntDoubleMap;)V: I52 Branch 36 IFEQ L143 - true
   * 4 gnu.trove.map.hash.TIntDoubleHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(1231);
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap((TIntDoubleMap) tIntDoubleHashMap0);
      assertEquals(0, tIntDoubleHashMap1.getNoEntryKey());
      assertEquals(23, tIntDoubleHashMap1.capacity());
      assertEquals(0.0, tIntDoubleHashMap1.getNoEntryValue(), 0.01D);
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.<init>(Lgnu/trove/map/TIntDoubleMap;)V: I38 Branch 35 IFEQ L139 - false
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.<init>(Lgnu/trove/map/TIntDoubleMap;)V: I52 Branch 36 IFEQ L143 - true
   */

  @Test
  public void test9()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(1312867, (float) 1312867, 1312867, Double.NEGATIVE_INFINITY);
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap((TIntDoubleMap) tIntDoubleHashMap0);
      assertEquals(Double.NEGATIVE_INFINITY, tIntDoubleHashMap1.getNoEntryValue(), 0.01D);
      assertEquals(1312867, tIntDoubleHashMap1.getNoEntryKey());
      assertEquals(3, tIntDoubleHashMap1.capacity());
  }

  //Test case number: 10
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.<init>(Lgnu/trove/map/TIntDoubleMap;)V: I52 Branch 36 IFEQ L143 - false
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.iterator()Lgnu/trove/iterator/TIntDoubleIterator;: root-Branch
   * 3 gnu.trove.map.hash.TIntDoubleHashMap.putAll(Lgnu/trove/map/TIntDoubleMap;)V: I15 Branch 43 IFEQ L243 - true
   * 4 gnu.trove.map.hash.TIntDoubleHashMap.<init>(Lgnu/trove/map/TIntDoubleMap;)V: I10 Branch 34 IFEQ L133 - false
   * 5 gnu.trove.map.hash.TIntDoubleHashMap.<init>(Lgnu/trove/map/TIntDoubleMap;)V: I38 Branch 35 IFEQ L139 - false
   * 6 gnu.trove.map.hash.TIntDoubleHashMap$TIntDoubleHashIterator.<init>(Lgnu/trove/map/hash/TIntDoubleHashMap;Lgnu/trove/map/hash/TIntDoubleHashMap;)V: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(587742049, 587742049, (-263), 587742049);
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap((TIntDoubleMap) tIntDoubleHashMap0);
      assertEquals(-263, tIntDoubleHashMap1.getNoEntryKey());
      assertEquals(3, tIntDoubleHashMap1.capacity());
      assertEquals(5.87742049E8, tIntDoubleHashMap1.getNoEntryValue(), 0.01D);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.putIfAbsent(ID)D: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(Integer.MIN_VALUE, Integer.MIN_VALUE);
      double double0 = tIntDoubleHashMap0.putIfAbsent((-745), 1796.4758760622217);
      assertEquals(1, tIntDoubleHashMap0.size());
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.putIfAbsent(ID)D: I9 Branch 39 IFGE L205 - false
   */

  @Test
  public void test12()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(1677);
      tIntDoubleHashMap0.put(1677, 1677);
      double double0 = tIntDoubleHashMap0.putIfAbsent(1677, 1677);
      assertEquals(false, tIntDoubleHashMap0.isEmpty());
      assertEquals(1677.0, double0, 0.01D);
  }

  //Test case number: 13
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.get(I)D: I9 Branch 44 IFGE L253 - true
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 3 gnu.trove.map.hash.TIntDoubleHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 4 gnu.trove.map.hash.TIntDoubleHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 5 gnu.trove.map.hash.TIntDoubleHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 6 gnu.trove.map.hash.TIntDoubleHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 7 gnu.trove.map.hash.TIntDoubleHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 8 gnu.trove.map.hash.TIntDoubleHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(1994);
      tIntDoubleHashMap0.adjustOrPutValue(1994, Double.POSITIVE_INFINITY, (-1.0));
      boolean boolean0 = tIntDoubleHashMap0.equals((Object) tIntDoubleHashMap0);
      assertEquals(1, tIntDoubleHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   */

  @Test
  public void test14()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(1994);
      tIntDoubleHashMap0.adjustOrPutValue(1994, Double.POSITIVE_INFINITY, (-1.0));
      boolean boolean0 = tIntDoubleHashMap0.isEmpty();
      assertEquals(1, tIntDoubleHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test15()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(1994);
      boolean boolean0 = tIntDoubleHashMap0.isEmpty();
      assertEquals(4177, tIntDoubleHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.remove(I)D: I14 Branch 46 IFLT L276 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(1747);
      double double0 = tIntDoubleHashMap0.remove(1747);
      assertEquals(3527, tIntDoubleHashMap0.capacity());
      assertEquals(0.0, double0, 0.01D);
      assertEquals(true, tIntDoubleHashMap0.isEmpty());
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.keys()[I: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.keys()[I: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TIntDoubleHashMap.keys()[I: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TIntDoubleHashMap.keys()[I: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(0, 0);
      tIntDoubleHashMap0.adjustOrPutValue(0, 0, 0);
      tIntDoubleHashMap0.keys();
      assertEquals(false, tIntDoubleHashMap0.isEmpty());
      assertEquals("{0=0.0}", tIntDoubleHashMap0.toString());
  }

  //Test case number: 18
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.keys([I)[I: I10 Branch 49 IF_ICMPGE L315 - true
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.keys([I)[I: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TIntDoubleHashMap.keys([I)[I: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TIntDoubleHashMap.keys([I)[I: I44 Branch 51 IF_ICMPNE L323 - true
   * 5 gnu.trove.map.hash.TIntDoubleHashMap.keys([I)[I: I44 Branch 51 IF_ICMPNE L323 - false
   */

  @Test
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[4];
      double[] doubleArray0 = new double[1];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      int[] intArray1 = tIntDoubleHashMap0.keys(tIntDoubleHashMap0._set);
      assertEquals(11, tIntDoubleHashMap0.capacity());
      assertEquals("{0=0.0}", tIntDoubleHashMap0.toString());
      assertNotNull(intArray1);
      assertEquals(1, tIntDoubleHashMap0.size());
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.values()[D: I34 Branch 53 IF_ICMPNE L344 - false
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.values()[D: I27 Branch 52 IFLE L343 - true
   * 3 gnu.trove.map.hash.TIntDoubleHashMap.values()[D: I27 Branch 52 IFLE L343 - false
   * 4 gnu.trove.map.hash.TIntDoubleHashMap.values()[D: I34 Branch 53 IF_ICMPNE L344 - true
   */

  @Test
  public void test19()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(0, 0);
      tIntDoubleHashMap0.adjustOrPutValue(0, 0, 0);
      tIntDoubleHashMap0.values();
      assertEquals(1, tIntDoubleHashMap0.size());
      assertEquals("{0=0.0}", tIntDoubleHashMap0.toString());
  }

  //Test case number: 20
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.values([D)[D: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.values([D)[D: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TIntDoubleHashMap.values([D)[D: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TIntDoubleHashMap.values([D)[D: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(0, 0);
      double[] doubleArray0 = tIntDoubleHashMap0.values();
      assertNotNull(doubleArray0);
      
      double[] doubleArray1 = tIntDoubleHashMap0.values(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  //Test case number: 21
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.values([D)[D: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.values([D)[D: I44 Branch 56 IF_ICMPNE L363 - false
   * 3 gnu.trove.map.hash.TIntDoubleHashMap.values([D)[D: I37 Branch 55 IFLE L362 - true
   * 4 gnu.trove.map.hash.TIntDoubleHashMap.values([D)[D: I37 Branch 55 IFLE L362 - false
   * 5 gnu.trove.map.hash.TIntDoubleHashMap.values([D)[D: I44 Branch 56 IF_ICMPNE L363 - true
   * 6 gnu.trove.map.hash.TIntDoubleHashMap.values()[D: I27 Branch 52 IFLE L343 - true
   * 7 gnu.trove.map.hash.TIntDoubleHashMap.values()[D: I27 Branch 52 IFLE L343 - false
   * 8 gnu.trove.map.hash.TIntDoubleHashMap.values()[D: I34 Branch 53 IF_ICMPNE L344 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(0, 0);
      double[] doubleArray0 = tIntDoubleHashMap0.values();
      tIntDoubleHashMap0.adjustOrPutValue(0, 0, 0);
      tIntDoubleHashMap0.values(doubleArray0);
      assertEquals(false, tIntDoubleHashMap0.isEmpty());
      assertEquals(7, tIntDoubleHashMap0.capacity());
  }

  //Test case number: 22
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.containsValue(D)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.containsValue(D)Z: I31 Branch 59 IFNE L377 - true
   * 3 gnu.trove.map.hash.TIntDoubleHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   * 4 gnu.trove.map.hash.TIntDoubleHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - false
   * 5 gnu.trove.map.hash.TIntDoubleHashMap.containsValue(D)Z: I18 Branch 57 IFLE L376 - true
   * 6 gnu.trove.map.hash.TIntDoubleHashMap.containsValue(D)Z: I18 Branch 57 IFLE L376 - false
   * 7 gnu.trove.map.hash.TIntDoubleHashMap.containsValue(D)Z: I25 Branch 58 IF_ICMPNE L377 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(Integer.MIN_VALUE, Integer.MIN_VALUE);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Double double0 = new Double((double) 0);
      hashMap0.put((Integer) 0, double0);
      tIntDoubleHashMap0.putAll((Map<? extends Integer, ? extends Double>) hashMap0);
      boolean boolean0 = tIntDoubleHashMap0.containsValue(1796.4758760622217);
      assertEquals(false, tIntDoubleHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 23
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.containsValue(D)Z: I31 Branch 59 IFNE L377 - false
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.containsValue(D)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TIntDoubleHashMap.containsValue(D)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 4 gnu.trove.map.hash.TIntDoubleHashMap.containsValue(D)Z: I25 Branch 58 IF_ICMPNE L377 - false
   */

  @Test
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[4];
      double[] doubleArray0 = new double[1];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      boolean boolean0 = tIntDoubleHashMap0.containsValue(0.0);
      assertEquals("{0=0.0}", tIntDoubleHashMap0.toString());
      assertEquals(11, tIntDoubleHashMap0.capacity());
      assertEquals(true, boolean0);
      assertEquals(1, tIntDoubleHashMap0.size());
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TIntDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(0, 0, 0, 0);
      boolean boolean0 = tIntDoubleHashMap0.forEachValue((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TIntDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test25()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(1677);
      tIntDoubleHashMap0.put(1677, 1677);
      // Undeclared exception!
      try {
        tIntDoubleHashMap0.forEachValue((TDoubleProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TIntDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   * 4 gnu.trove.map.hash.TIntDoubleHashMap.<init>(IFID)V: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(0, (-333.91916F), 0, (double) 0);
      tIntDoubleHashMap0.transformValues((TDoubleFunction) null);
      assertEquals("{}", tIntDoubleHashMap0.toString());
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.retainEntries(Lgnu/trove/procedure/TIntDoubleProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.retainEntries(Lgnu/trove/procedure/TIntDoubleProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TIntDoubleHashMap.retainEntries(Lgnu/trove/procedure/TIntDoubleProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test27()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      boolean boolean0 = tIntDoubleHashMap0.retainEntries((TIntDoubleProcedure) null);
      assertEquals(false, boolean0);
      assertEquals(23, tIntDoubleHashMap0.capacity());
  }

  //Test case number: 28
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.retainEntries(Lgnu/trove/procedure/TIntDoubleProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.retainEntries(Lgnu/trove/procedure/TIntDoubleProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TIntDoubleHashMap.retainEntries(Lgnu/trove/procedure/TIntDoubleProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[4];
      double[] doubleArray0 = new double[1];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      // Undeclared exception!
      try {
        tIntDoubleHashMap0.retainEntries((TIntDoubleProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.adjustValue(ID)Z: I9 Branch 71 IFGE L477 - true
   */

  @Test
  public void test29()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(0, 0);
      tIntDoubleHashMap0.adjustOrPutValue(0, 0, 0);
      boolean boolean0 = tIntDoubleHashMap0.adjustValue(0, 0);
      assertEquals(1, tIntDoubleHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.adjustOrPutValue(IDD)D: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.adjustOrPutValue(IDD)D: I58 Branch 73 IFEQ L502 - true
   */

  @Test
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[6];
      double[] doubleArray0 = new double[10];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      double double0 = tIntDoubleHashMap0.adjustOrPutValue(0, 0.0, (double) 587742049);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(1, tIntDoubleHashMap0.size());
      assertEquals(23, tIntDoubleHashMap0.capacity());
      assertEquals("{0=0.0}", tIntDoubleHashMap0.toString());
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   */

  @Test
  public void test31()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      boolean boolean0 = tIntDoubleHashMap0.equals((Object) "1661.329533022965");
      assertEquals(23, tIntDoubleHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   */

  @Test
  public void test32()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      double[] doubleArray0 = new double[3];
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(tIntDoubleHashMap0._set, doubleArray0);
      boolean boolean0 = tIntDoubleHashMap0.equals((Object) tIntDoubleHashMap1);
      assertEquals("{0=0.0}", tIntDoubleHashMap1.toString());
      assertFalse(tIntDoubleHashMap1.equals(tIntDoubleHashMap0));
      assertEquals(1, tIntDoubleHashMap1.size());
      assertEquals(false, boolean0);
      assertEquals(23, tIntDoubleHashMap0.capacity());
  }

  //Test case number: 33
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - false
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.equals(Ljava/lang/Object;)Z: I89 Branch 79 IFEQ L1200 - false
   * 3 gnu.trove.map.hash.TIntDoubleHashMap.equals(Ljava/lang/Object;)Z: I93 Branch 80 IFEQ L1200 - true
   * 4 gnu.trove.map.hash.TIntDoubleHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 5 gnu.trove.map.hash.TIntDoubleHashMap.get(I)D: I9 Branch 44 IFGE L253 - false
   */

  @Test
  public void test33()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(1231);
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(1231, 1231);
      tIntDoubleHashMap0.adjustOrPutValue(0, 0, 1231);
      tIntDoubleHashMap1.put(1231, 1.0);
      boolean boolean0 = tIntDoubleHashMap0.equals((Object) tIntDoubleHashMap1);
      assertEquals(1, tIntDoubleHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 34
  /*
   * 17 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.equals(Ljava/lang/Object;)Z: I93 Branch 80 IFEQ L1200 - false
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.<init>(I)V: root-Branch
   * 3 gnu.trove.map.hash.TIntDoubleHashMap.<init>(IF)V: root-Branch
   * 4 gnu.trove.map.hash.TIntDoubleHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 5 gnu.trove.map.hash.TIntDoubleHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 6 gnu.trove.map.hash.TIntDoubleHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 7 gnu.trove.map.hash.TIntDoubleHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 8 gnu.trove.map.hash.TIntDoubleHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 9 gnu.trove.map.hash.TIntDoubleHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 10 gnu.trove.map.hash.TIntDoubleHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 11 gnu.trove.map.hash.TIntDoubleHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 12 gnu.trove.map.hash.TIntDoubleHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 13 gnu.trove.map.hash.TIntDoubleHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - false
   * 14 gnu.trove.map.hash.TIntDoubleHashMap.equals(Ljava/lang/Object;)Z: I89 Branch 79 IFEQ L1200 - false
   * 15 gnu.trove.map.hash.TIntDoubleHashMap.adjustOrPutValue(IDD)D: I9 Branch 72 IFGE L491 - true
   * 16 gnu.trove.map.hash.TIntDoubleHashMap.adjustOrPutValue(IDD)D: I58 Branch 73 IFEQ L502 - false
   * 17 gnu.trove.map.hash.TIntDoubleHashMap.get(I)D: I9 Branch 44 IFGE L253 - true
   */

  @Test
  public void test34()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(1994);
      tIntDoubleHashMap0.adjustOrPutValue(1994, Double.POSITIVE_INFINITY, (-1.0));
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap((-1), (-1));
      tIntDoubleHashMap1.put(1994, 1.0);
      boolean boolean0 = tIntDoubleHashMap0.equals((Object) tIntDoubleHashMap1);
      assertEquals(false, tIntDoubleHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 35
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 3 gnu.trove.map.hash.TIntDoubleHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   * 4 gnu.trove.map.hash.TIntDoubleHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   */

  @Test
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[4];
      double[] doubleArray0 = new double[1];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      int int0 = tIntDoubleHashMap0.hashCode();
      assertEquals(0, int0);
      assertEquals(11, tIntDoubleHashMap0.capacity());
      assertEquals(1, tIntDoubleHashMap0.size());
      assertEquals("{0=0.0}", tIntDoubleHashMap0.toString());
  }

  //Test case number: 36
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap$1.execute(ID)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.toString()Ljava/lang/String;: root-Branch
   * 3 gnu.trove.map.hash.TIntDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TIntDoubleProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 4 gnu.trove.map.hash.TIntDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TIntDoubleProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 5 gnu.trove.map.hash.TIntDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TIntDoubleProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 6 gnu.trove.map.hash.TIntDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TIntDoubleProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 7 gnu.trove.map.hash.TIntDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TIntDoubleProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 8 gnu.trove.map.hash.TIntDoubleHashMap$1.<init>(Lgnu/trove/map/hash/TIntDoubleHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 9 gnu.trove.map.hash.TIntDoubleHashMap$1.execute(ID)Z: I4 Branch 115 IFEQ L1233 - false
   */

  @Test
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1209;
      double[] doubleArray0 = new double[7];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      String string0 = tIntDoubleHashMap0.toString();
      assertEquals(17, tIntDoubleHashMap0.capacity());
      assertEquals(2, tIntDoubleHashMap0.size());
      assertEquals("{1209=0.0, 0=0.0}", string0);
      assertNotNull(string0);
  }

  //Test case number: 37
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 3 gnu.trove.map.hash.TIntDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 4 gnu.trove.map.hash.TIntDoubleHashMap.<init>()V: root-Branch
   */

  @Test
  public void test37()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1209);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tIntDoubleHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(23, tIntDoubleHashMap0.capacity());
  }

  //Test case number: 38
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TIntDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 2 gnu.trove.map.hash.TIntDoubleHashMap.setUp(I)I: root-Branch
   * 3 gnu.trove.map.hash.TIntDoubleHashMap.put(ID)D: root-Branch
   * 4 gnu.trove.map.hash.TIntDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 5 gnu.trove.map.hash.TIntDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 6 gnu.trove.map.hash.TIntDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 7 gnu.trove.map.hash.TIntDoubleHashMap.<init>([I[D)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 8 gnu.trove.map.hash.TIntDoubleHashMap.<init>([I[D)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 9 gnu.trove.map.hash.TIntDoubleHashMap.doPut(IDI)D: I12 Branch 40 IFGE L214 - true
   * 10 gnu.trove.map.hash.TIntDoubleHashMap.doPut(IDI)D: I12 Branch 40 IFGE L214 - false
   * 11 gnu.trove.map.hash.TIntDoubleHashMap.doPut(IDI)D: I41 Branch 41 IFEQ L221 - true
   * 12 gnu.trove.map.hash.TIntDoubleHashMap.doPut(IDI)D: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[4];
      double[] doubleArray0 = new double[7];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1209);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tIntDoubleHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals("{0=0.0}", tIntDoubleHashMap0.toString());
      assertEquals(1, tIntDoubleHashMap0.size());
      assertEquals(17, tIntDoubleHashMap0.capacity());
  }
}
