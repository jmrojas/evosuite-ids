/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TShortCharMapDecorator;
import gnu.trove.map.TShortCharMap;
import gnu.trove.map.hash.TShortCharHashMap;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.RandomAccessFile;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.StringTokenizer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.text.Segment;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortCharMapDecoratorEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TShortCharMapDecorator tShortCharMapDecorator0 = new TShortCharMapDecorator();
      short short0 = (short)0;
      Short short1 = new Short(short0);
      Locale locale0 = Locale.ITALY;
      TShortCharMap tShortCharMap0 = null;
      TShortCharHashMap tShortCharHashMap0 = null;
      try {
        tShortCharHashMap0 = new TShortCharHashMap(tShortCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short) (-792);
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short) (-1);
      shortArray0[3] = short3;
      short short4 = (short) (-1021);
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short) (-1560);
      shortArray0[7] = short7;
      char[] charArray0 = new char[8];
      char char0 = '$';
      charArray0[0] = char0;
      char char1 = '4';
      charArray0[1] = char1;
      char char2 = 'i';
      charArray0[2] = char2;
      char char3 = '+';
      charArray0[3] = char3;
      char char4 = 'B';
      charArray0[4] = char4;
      char char5 = 'p';
      charArray0[5] = char5;
      char char6 = ')';
      charArray0[6] = char6;
      char char7 = 't';
      charArray0[7] = char7;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      TShortCharMapDecorator tShortCharMapDecorator0 = new TShortCharMapDecorator((TShortCharMap) tShortCharHashMap0);
      tShortCharMapDecorator0.clear();
      assertEquals("{}", tShortCharHashMap0.toString());
      
      int int0 = 178;
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap(int0);
      TShortCharMapDecorator tShortCharMapDecorator1 = new TShortCharMapDecorator((TShortCharMap) tShortCharHashMap1);
      tShortCharMapDecorator1.values();
      TShortCharHashMap tShortCharHashMap2 = new TShortCharHashMap();
      TShortCharMapDecorator tShortCharMapDecorator2 = new TShortCharMapDecorator((TShortCharMap) tShortCharHashMap2);
      Short short8 = null;
      Character character0 = null;
      Character character1 = tShortCharMapDecorator2.put(short8, character0);
      tShortCharMapDecorator2.put(short8, character1);
      boolean boolean0 = tShortCharMapDecorator2.isEmpty();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = ">1eI$f!6QN0kh;CCX(F";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: >1eI$f!6QN0kh;CCX(F://%3E1eI$f!6QN0kh;CCX(F%3E1eI$f!6QN0kh;CCX(F?%3E1eI$f!6QN0kh;CCX(F#%3E1eI$f!6QN0kh;CCX(F
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      short short0 = (short) (-85);
      Short short1 = new Short(short0);
      short[] shortArray0 = new short[4];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      float float0 = 1371.8555F;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap((int) short0, float0);
      TShortCharMapDecorator tShortCharMapDecorator0 = new TShortCharMapDecorator((TShortCharMap) tShortCharHashMap0);
      short short2 = (short) (-1551);
      shortArray0[2] = short2;
      short1.floatValue();
      shortArray0[3] = short0;
      char[] charArray0 = new char[3];
      char char0 = 'V';
      charArray0[0] = char0;
      char char1 = '?';
      charArray0[1] = char1;
      char char2 = 'P';
      charArray0[2] = char2;
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap(shortArray0, charArray0);
      TShortCharMapDecorator tShortCharMapDecorator1 = new TShortCharMapDecorator((TShortCharMap) tShortCharHashMap1);
      String string0 = "";
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 138;
      String string0 = "wL?O0eQ~\"";
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>((Integer) int0, string0);
      abstractMap_SimpleEntry0.getKey();
      String string1 = "";
      boolean boolean0 = false;
      abstractMap_SimpleEntry0.setValue(string0);
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string1, boolean0);
      String string2 = stringTokenizer0.nextToken();
      abstractMap_SimpleEntry0.equals((Object) string2);
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      TShortCharMapDecorator tShortCharMapDecorator0 = new TShortCharMapDecorator((TShortCharMap) tShortCharHashMap0);
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap(int0, int0);
      short[] shortArray0 = new short[9];
      short short0 = (short)125;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)1839;
      shortArray0[3] = short3;
      short short4 = (short)397;
      shortArray0[4] = short4;
      short short5 = (short)638;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)0;
      shortArray0[7] = short7;
      short short8 = (short)7837;
      shortArray0[8] = short8;
      char[] charArray0 = new char[4];
      char char0 = 'G';
      charArray0[0] = char0;
      char char1 = '!';
      charArray0[1] = char1;
      char char2 = 'G';
      charArray0[2] = char2;
      char char3 = 'v';
      charArray0[3] = char3;
      TShortCharHashMap tShortCharHashMap2 = new TShortCharHashMap(shortArray0, charArray0);
      tShortCharMapDecorator0.remove((Object) tShortCharHashMap2);
      TShortCharMapDecorator tShortCharMapDecorator1 = new TShortCharMapDecorator((TShortCharMap) tShortCharHashMap1);
      tShortCharMapDecorator1.size();
  }

  @Test
  public void test5()  throws Throwable  {
      String string0 = "%:";
      int int0 = 1292;
      try {
        Short.valueOf(string0, int0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1292 greater than Character.MAX_RADIX
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short) (-650);
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short) (-1);
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short) (-453);
      shortArray0[7] = short7;
      short short8 = (short) (-1066);
      shortArray0[8] = short8;
      short short9 = (short) (-1686);
      shortArray0[9] = short9;
      char[] charArray0 = new char[7];
      char char0 = 'M';
      charArray0[0] = char0;
      char char1 = 'Y';
      charArray0[1] = char1;
      char char2 = 'p';
      charArray0[2] = char2;
      char char3 = '1';
      charArray0[3] = char3;
      char char4 = 'O';
      charArray0[4] = char4;
      char char5 = '^';
      charArray0[5] = char5;
      char char6 = '&';
      charArray0[6] = char6;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      TShortCharMapDecorator tShortCharMapDecorator0 = new TShortCharMapDecorator((TShortCharMap) tShortCharHashMap0);
      TShortCharHashMap tShortCharHashMap1 = (TShortCharHashMap)tShortCharMapDecorator0.getMap();
      TShortCharHashMap tShortCharHashMap2 = new TShortCharHashMap((TShortCharMap) tShortCharHashMap1);
      TShortCharMapDecorator tShortCharMapDecorator1 = new TShortCharMapDecorator((TShortCharMap) tShortCharHashMap2);
      Object object0 = null;
      tShortCharMapDecorator1.remove(object0);
      TShortCharMapDecorator tShortCharMapDecorator2 = new TShortCharMapDecorator();
      // Undeclared exception!
      try {
        tShortCharMapDecorator2.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short) (-1);
      shortArray0[1] = short1;
      short short2 = (short)1;
      shortArray0[2] = short2;
      short short3 = (short)12;
      shortArray0[3] = short3;
      char[] charArray0 = new char[8];
      char char0 = 'p';
      charArray0[0] = char0;
      char char1 = 'U';
      charArray0[1] = char1;
      char char2 = 'Q';
      charArray0[2] = char2;
      char char3 = '^';
      charArray0[3] = char3;
      char char4 = '*';
      charArray0[4] = char4;
      char char5 = '7';
      charArray0[5] = char5;
      char char6 = '<';
      charArray0[6] = char6;
      char char7 = '*';
      charArray0[7] = char7;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap((TShortCharMap) tShortCharHashMap0);
      TShortCharMapDecorator tShortCharMapDecorator0 = new TShortCharMapDecorator((TShortCharMap) tShortCharHashMap1);
      boolean boolean0 = tShortCharMapDecorator0.isEmpty();
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      TShortCharMapDecorator tShortCharMapDecorator0 = new TShortCharMapDecorator();
      // Undeclared exception!
      try {
        tShortCharMapDecorator0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-1);
      float float0 = 0.0F;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0, float0);
      TShortCharMapDecorator tShortCharMapDecorator0 = new TShortCharMapDecorator((TShortCharMap) tShortCharHashMap0);
      char[] charArray0 = new char[10];
      char char0 = 'k';
      charArray0[0] = char0;
      char char1 = '`';
      charArray0[1] = char1;
      char char2 = '[';
      charArray0[2] = char2;
      char char3 = 'U';
      charArray0[3] = char3;
      char char4 = 'S';
      charArray0[4] = char4;
      char char5 = '(';
      charArray0[5] = char5;
      char char6 = 'A';
      charArray0[6] = char6;
      char char7 = '>';
      charArray0[7] = char7;
      char char8 = '*';
      charArray0[8] = char8;
      char char9 = '{';
      charArray0[9] = char9;
      int int1 = (-1179);
      int int2 = (-1);
      Segment segment0 = new Segment(charArray0, int1, int2);
      // Undeclared exception!
      try {
        segment0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1179
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-1);
      TShortCharMap tShortCharMap0 = null;
      TShortCharMapDecorator tShortCharMapDecorator0 = new TShortCharMapDecorator(tShortCharMap0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-12);
      byteArray0[0] = byte0;
      byte byte1 = (byte)58;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-96);
      byteArray0[5] = byte5;
      byte byte6 = (byte)1;
      byteArray0[6] = byte6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int1 = 0;
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream((InputStream) byteArrayInputStream0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      short short0 = (short)307;
      TShortCharMapDecorator tShortCharMapDecorator0 = new TShortCharMapDecorator();
      TShortCharMap tShortCharMap0 = tShortCharMapDecorator0.getMap();
      TShortCharHashMap tShortCharHashMap0 = null;
      try {
        tShortCharHashMap0 = new TShortCharHashMap(tShortCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          short[] shortArray0 = new short[7];
          short short0 = (short) (-2011);
          shortArray0[0] = short0;
          short short1 = (short)0;
          shortArray0[1] = short1;
          short short2 = (short) (-1);
          shortArray0[2] = short2;
          short short3 = (short)1076;
          shortArray0[3] = short3;
          short short4 = (short)0;
          shortArray0[4] = short4;
          short short5 = (short)1878;
          shortArray0[5] = short5;
          short short6 = (short) (-28851);
          shortArray0[6] = short6;
          char[] charArray0 = new char[7];
          char char0 = '{';
          charArray0[0] = char0;
          char char1 = 'L';
          charArray0[1] = char1;
          char char2 = 'k';
          charArray0[2] = char2;
          char char3 = '\\';
          charArray0[3] = char3;
          char char4 = 'C';
          charArray0[4] = char4;
          char char5 = '0';
          charArray0[5] = char5;
          char char6 = '/';
          charArray0[6] = char6;
          TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
          TShortCharMapDecorator tShortCharMapDecorator0 = new TShortCharMapDecorator((TShortCharMap) tShortCharHashMap0);
          String string0 = "";
          File file0 = new File(string0);
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:165)
             // java.io.PrintStream.<init>(PrintStream.java:279)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
      TShortCharMapDecorator tShortCharMapDecorator0 = new TShortCharMapDecorator();
      Short short0 = null;
      Object object0 = null;
      // Undeclared exception!
      try {
        tShortCharMapDecorator0.get(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short) (-1544);
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short) (-5503);
      shortArray0[3] = short3;
      short short4 = (short)39;
      shortArray0[4] = short4;
      short short5 = (short) (-983);
      shortArray0[5] = short5;
      short short6 = (short)740;
      shortArray0[6] = short6;
      char[] charArray0 = new char[4];
      char char0 = 'Z';
      charArray0[0] = char0;
      char char1 = 'f';
      charArray0[1] = char1;
      char char2 = '`';
      charArray0[2] = char2;
      char char3 = 'K';
      charArray0[3] = char3;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      TShortCharMapDecorator tShortCharMapDecorator0 = new TShortCharMapDecorator((TShortCharMap) tShortCharHashMap0);
      TShortCharHashMap tShortCharHashMap1 = (TShortCharHashMap)tShortCharMapDecorator0.getMap();
      TShortCharMapDecorator tShortCharMapDecorator1 = new TShortCharMapDecorator((TShortCharMap) tShortCharHashMap1);
      String string0 = tShortCharMapDecorator1.toString();
      assertNotNull(string0);
      assertEquals("{-5503=K, -1544=Z, null=`}", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-1949);
      float float0 = 114.92282F;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0, float0);
      TShortCharMapDecorator tShortCharMapDecorator0 = new TShortCharMapDecorator((TShortCharMap) tShortCharHashMap0);
      tShortCharMapDecorator0.isEmpty();
      int int1 = 359339171;
      float float1 = 724.6803F;
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap(int1, float1);
      TShortCharMapDecorator tShortCharMapDecorator1 = new TShortCharMapDecorator((TShortCharMap) tShortCharHashMap1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      TShortCharMapDecorator tShortCharMapDecorator0 = new TShortCharMapDecorator((TShortCharMap) tShortCharHashMap0);
      short short0 = (short) (-948);
      String string0 = "at offset ";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // at offset 
         //
      }
  }
}
