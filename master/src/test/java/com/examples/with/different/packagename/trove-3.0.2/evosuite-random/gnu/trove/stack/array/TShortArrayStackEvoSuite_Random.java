/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.stack.array;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.stack.TShortStack;
import gnu.trove.stack.array.TShortArrayStack;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortArrayStackEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-342);
      TShortArrayStack tShortArrayStack0 = null;
      try {
        tShortArrayStack0 = new TShortArrayStack(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 10;
      short short0 = (short)0;
      TShortArrayStack tShortArrayStack0 = new TShortArrayStack(int0, short0);
      tShortArrayStack0.clear();
      short[] shortArray0 = new short[1];
      Locale locale0 = Locale.CHINA;
      Locale locale1 = Locale.ENGLISH;
      String string0 = locale0.getDisplayScript(locale1);
      tShortArrayStack0.equals((Object) string0);
      tShortArrayStack0.getNoEntryValue();
      shortArray0[0] = short0;
      int int1 = 0;
      short short1 = (short) (-1240);
      TShortArrayStack tShortArrayStack1 = new TShortArrayStack(int1, short1);
      tShortArrayStack0.toArray(shortArray0);
      TShortArrayStack tShortArrayStack2 = new TShortArrayStack();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int2 = 0;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-257);
      TShortArrayStack tShortArrayStack0 = null;
      try {
        tShortArrayStack0 = new TShortArrayStack(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 200;
      TShortArrayStack tShortArrayStack0 = new TShortArrayStack(int0);
      tShortArrayStack0.size();
      tShortArrayStack0.size();
      int int1 = 0;
      int int2 = 230;
      TShortArrayStack tShortArrayStack1 = new TShortArrayStack(int2);
      tShortArrayStack1.clear();
      TShortArrayStack tShortArrayStack2 = new TShortArrayStack();
      TShortArrayStack tShortArrayStack3 = new TShortArrayStack((TShortStack) tShortArrayStack2);
      tShortArrayStack2.getNoEntryValue();
      // Undeclared exception!
      try {
        tShortArrayStack2.peek();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 1;
      TShortArrayStack tShortArrayStack0 = new TShortArrayStack(int0);
      String string0 = ">";
      File file0 = new File(string0);
      URI uRI0 = file0.toURI();
      URI uRI1 = uRI0.normalize();
      uRI1.getScheme();
      int int1 = (-1);
      TShortArrayStack tShortArrayStack1 = null;
      try {
        tShortArrayStack1 = new TShortArrayStack(int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TShortArrayStack tShortArrayStack0 = new TShortArrayStack();
      String string0 = "";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // 
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      TShortArrayStack tShortArrayStack0 = new TShortArrayStack(int0);
      tShortArrayStack0.hashCode();
      short[] shortArray0 = new short[10];
      short short0 = (short) (-1);
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)1;
      shortArray0[2] = short2;
      short short3 = (short) (-1);
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short) (-1467);
      shortArray0[5] = short5;
      short short6 = (short)789;
      shortArray0[6] = short6;
      short short7 = (short) (-1358);
      shortArray0[7] = short7;
      short short8 = (short) (-2006);
      TShortArrayStack tShortArrayStack1 = new TShortArrayStack(int0, short8);
      short short9 = (short) (-107);
      shortArray0[8] = short9;
      short short10 = (short)1205;
      shortArray0[9] = short10;
      tShortArrayStack0.toArray(shortArray0);
      TShortArrayStack tShortArrayStack2 = new TShortArrayStack();
      // Undeclared exception!
      try {
        tShortArrayStack2.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 195;
      short short0 = (short) (-1);
      TShortArrayStack tShortArrayStack0 = new TShortArrayStack(int0, short0);
      PipedOutputStream pipedOutputStream0 = null;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 31;
      int int1 = 0;
      short short0 = (short)0;
      TShortArrayStack tShortArrayStack0 = new TShortArrayStack(int1, short0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      short short0 = (short) (-967);
      TShortArrayStack tShortArrayStack0 = new TShortArrayStack(int0, short0);
      TShortArrayStack tShortArrayStack1 = new TShortArrayStack((TShortStack) tShortArrayStack0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

//   @Test
//   public void test10()  throws Throwable  {
//       int int0 = 448;
//       short short0 = (short) (-552);
//       TShortArrayStack tShortArrayStack0 = new TShortArrayStack(int0, short0);
//       String string0 = tShortArrayStack0.toString();
//       assertEquals(-552, tShortArrayStack0.getNoEntryValue());
//       assertNotNull(string0);
//       assertEquals("{}", string0);
//       
//       TShortArrayStack tShortArrayStack1 = new TShortArrayStack(int0);
//       tShortArrayStack1.size();
//       TShortArrayStack tShortArrayStack2 = new TShortArrayStack();
//       // Undeclared exception!
//       try {
//         tShortArrayStack2.peek();
//         fail("Expecting exception: ArrayIndexOutOfBoundsException");
//       
//       } catch(ArrayIndexOutOfBoundsException e) {
//          //
//          // -1
//          //
//       }
//   }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = (-1192);
          TShortArrayStack tShortArrayStack0 = new TShortArrayStack();
          String string0 = "<wQ@qD)i9,RkEAg?fa_";
          boolean boolean0 = false;
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0, boolean0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"<wQ@qD)i9,RkEAg?fa_\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:136)
             // sun.reflect.GeneratedConstructorAccessor13.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
      TShortArrayStack tShortArrayStack0 = new TShortArrayStack();
      tShortArrayStack0.hashCode();
      TShortStack tShortStack0 = null;
      TShortArrayStack tShortArrayStack1 = new TShortArrayStack();
      TShortArrayStack tShortArrayStack2 = null;
      try {
        tShortArrayStack2 = new TShortArrayStack(tShortStack0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Only support TShortArrayStack
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      short short0 = (short) (-1349);
      TShortArrayStack tShortArrayStack0 = new TShortArrayStack(int0, short0);
      TShortArrayStack tShortArrayStack1 = new TShortArrayStack();
      tShortArrayStack1.toArray();
      tShortArrayStack1.getNoEntryValue();
      tShortArrayStack1.getNoEntryValue();
      tShortArrayStack1.toArray();
      TShortArrayStack tShortArrayStack2 = new TShortArrayStack();
      tShortArrayStack2.size();
      int int1 = tShortArrayStack2.size();
      assertEquals(0, int1);
  }

  @Test
  public void test14()  throws Throwable  {
      TShortArrayStack tShortArrayStack0 = new TShortArrayStack();
      tShortArrayStack0.toArray();
      int int0 = (-1461);
      TShortStack tShortStack0 = null;
      TShortArrayStack tShortArrayStack1 = null;
      try {
        tShortArrayStack1 = new TShortArrayStack(tShortStack0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Only support TShortArrayStack
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1195);
      TShortArrayStack tShortArrayStack0 = null;
      try {
        tShortArrayStack0 = new TShortArrayStack(int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = (-214);
      TShortArrayStack tShortArrayStack0 = null;
      try {
        tShortArrayStack0 = new TShortArrayStack(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      short short0 = (short)0;
      TShortArrayStack tShortArrayStack0 = new TShortArrayStack(int1, short0);
      // Undeclared exception!
      try {
        tShortArrayStack0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 0;
      TShortArrayStack tShortArrayStack0 = new TShortArrayStack(int0);
      short[] shortArray0 = new short[10];
      short short0 = (short) (-1730);
      shortArray0[0] = short0;
      short short1 = (short)1;
      shortArray0[1] = short1;
      short short2 = (short)915;
      shortArray0[2] = short2;
      short short3 = (short)92;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short) (-172);
      shortArray0[5] = short5;
      short short6 = (short) (-1);
      shortArray0[6] = short6;
      short short7 = (short)0;
      shortArray0[7] = short7;
      short short8 = (short)0;
      shortArray0[8] = short8;
      short short9 = (short) (-408);
      shortArray0[9] = short9;
      tShortArrayStack0.toArray(shortArray0);
      assertEquals(0, tShortArrayStack0.size());
  }

  @Test
  public void test19()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 551;
          TShortArrayStack tShortArrayStack0 = new TShortArrayStack(int0);
          TShortArrayStack tShortArrayStack1 = new TShortArrayStack((TShortStack) tShortArrayStack0);
          short[] shortArray0 = new short[10];
          short short0 = (short)1886;
          shortArray0[0] = short0;
          short short1 = (short)0;
          shortArray0[1] = short1;
          short short2 = (short)0;
          shortArray0[2] = short2;
          short short3 = (short)0;
          shortArray0[3] = short3;
          short short4 = (short)31;
          shortArray0[4] = short4;
          short short5 = (short)943;
          shortArray0[5] = short5;
          short short6 = (short)10;
          shortArray0[6] = short6;
          short short7 = (short)10;
          shortArray0[7] = short7;
          short short8 = (short) (-1298);
          shortArray0[8] = short8;
          short short9 = (short)0;
          shortArray0[9] = short9;
          tShortArrayStack1.toArray(shortArray0);
          TShortArrayStack tShortArrayStack2 = new TShortArrayStack();
          String string0 = "o<HO,r&)~r/";
          boolean boolean0 = false;
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0, boolean0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"o<HO,r&)~r\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:136)
             // sun.reflect.GeneratedConstructorAccessor13.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
