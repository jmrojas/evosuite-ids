/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TFloatIntMapDecorator;
import gnu.trove.map.TFloatIntMap;
import gnu.trove.map.hash.TFloatIntHashMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatIntMapDecoratorEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TFloatIntMapDecorator tFloatIntMapDecorator0 = new TFloatIntMapDecorator();
      // Undeclared exception!
      try {
        tFloatIntMapDecorator0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 0;
          Float float0 = new Float((float) int0);
          String string0 = " greater than last index ";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      TFloatIntMapDecorator tFloatIntMapDecorator0 = new TFloatIntMapDecorator();
      float[] floatArray0 = new float[6];
      float float0 = (-1299.2098F);
      floatArray0[0] = float0;
      float float1 = (-1109.2587F);
      floatArray0[1] = float1;
      float float2 = 1839.5818F;
      floatArray0[2] = float2;
      float float3 = (-1.0F);
      floatArray0[3] = float3;
      float float4 = 0.0F;
      floatArray0[4] = float4;
      float float5 = 0.0F;
      floatArray0[5] = float5;
      int[] intArray0 = new int[4];
      int int0 = 1711;
      intArray0[0] = int0;
      int int1 = (-1);
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = (-144);
      intArray0[3] = int3;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      tFloatIntMapDecorator0.containsKey((Object) tFloatIntHashMap0);
      int int4 = (-588);
      TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap(int4);
      TFloatIntMapDecorator tFloatIntMapDecorator1 = new TFloatIntMapDecorator((TFloatIntMap) tFloatIntHashMap1);
      int int5 = tFloatIntMapDecorator1.size();
      assertFalse(int5 == int1);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 9;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(int0);
      TFloatIntMapDecorator tFloatIntMapDecorator0 = new TFloatIntMapDecorator();
      Locale locale0 = Locale.GERMAN;
      tFloatIntMapDecorator0.entrySet();
      String string0 = locale0.getCountry();
      tFloatIntMapDecorator0.equals((Object) string0);
      TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap((TFloatIntMap) tFloatIntHashMap0);
      float float0 = 1.0F;
      tFloatIntHashMap0.contains(float0);
      TFloatIntMapDecorator tFloatIntMapDecorator1 = new TFloatIntMapDecorator((TFloatIntMap) tFloatIntHashMap1);
      tFloatIntMapDecorator1.getMap();
      tFloatIntMapDecorator1.put((Float) float0, (Integer) int0);
      assertEquals(1, tFloatIntHashMap1.size());
      assertEquals("{1.0=9}", tFloatIntMapDecorator1.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      Integer integer0 = null;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      String string0 = "";
      AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, String>(abstractMap_SimpleImmutableEntry0, string0);
      abstractMap_SimpleEntry0.getValue();
      TFloatIntMapDecorator tFloatIntMapDecorator0 = new TFloatIntMapDecorator();
      // Undeclared exception!
      try {
        tFloatIntMapDecorator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-1);
      TFloatIntMapDecorator tFloatIntMapDecorator0 = new TFloatIntMapDecorator();
      tFloatIntMapDecorator0.keySet();
      int int1 = (-1271);
      float float0 = 0.0F;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(int1, float0);
      TFloatIntMapDecorator tFloatIntMapDecorator1 = new TFloatIntMapDecorator((TFloatIntMap) tFloatIntHashMap0);
      tFloatIntHashMap0.values();
      tFloatIntMapDecorator1.put((Float) float0, (Integer) int0);
      // Undeclared exception!
      try {
        tFloatIntMapDecorator1.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 616;
      TFloatIntMapDecorator tFloatIntMapDecorator0 = new TFloatIntMapDecorator();
      // Undeclared exception!
      try {
        tFloatIntMapDecorator0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TFloatIntMapDecorator tFloatIntMapDecorator0 = new TFloatIntMapDecorator();
      double double0 = 0.0;
      Float float0 = new Float(double0);
      String string0 = "";
      int int0 = (-503);
      Integer integer0 = Integer.getInteger(string0, int0);
      // Undeclared exception!
      try {
        tFloatIntMapDecorator0.put(float0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = (-616);
          TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(int0, int0, int0, int0);
          TFloatIntMapDecorator tFloatIntMapDecorator0 = new TFloatIntMapDecorator((TFloatIntMap) tFloatIntHashMap0);
          String string0 = "";
          boolean boolean0 = true;
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0, boolean0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:136)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
      TFloatIntMapDecorator tFloatIntMapDecorator0 = new TFloatIntMapDecorator();
      int int0 = 0;
      float float0 = 0.0F;
      // Undeclared exception!
      try {
        tFloatIntMapDecorator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(int0, int0, int0, int1);
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = null;
      // Undeclared exception!
      try {
        locale0.getDisplayLanguage(locale1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TFloatIntMapDecorator tFloatIntMapDecorator0 = new TFloatIntMapDecorator();
      TFloatIntMap tFloatIntMap0 = tFloatIntMapDecorator0.getMap();
      TFloatIntMapDecorator tFloatIntMapDecorator1 = new TFloatIntMapDecorator(tFloatIntMap0);
      int int0 = (-353);
      float float0 = 617.4302F;
      String string0 = "";
      AbstractMap.SimpleEntry<Float, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Float, String>((Float) float0, string0);
      abstractMap_SimpleEntry0.getKey();
      int int1 = 0;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(int0, (float) int0, float0, int1);
      boolean boolean0 = tFloatIntMapDecorator1.equals((Object) tFloatIntHashMap0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 1140;
          float float0 = (-1.0F);
          TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(int0, (float) int0, float0, int0);
          TFloatIntMapDecorator tFloatIntMapDecorator0 = new TFloatIntMapDecorator((TFloatIntMap) tFloatIntHashMap0);
          String string0 = "";
          File file0 = new File(string0, string0);
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:165)
             // java.io.PrintStream.<init>(PrintStream.java:279)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
      TFloatIntMapDecorator tFloatIntMapDecorator0 = new TFloatIntMapDecorator();
      HashMap<TFloatIntHashMap, Integer> hashMap0 = new HashMap<TFloatIntHashMap, Integer>();
      // Undeclared exception!
      try {
        tFloatIntMapDecorator0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TFloatIntMapDecorator tFloatIntMapDecorator0 = new TFloatIntMapDecorator();
      // Undeclared exception!
      try {
        tFloatIntMapDecorator0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
