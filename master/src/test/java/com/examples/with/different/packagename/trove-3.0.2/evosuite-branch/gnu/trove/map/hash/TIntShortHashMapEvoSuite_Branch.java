/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TShortCollection;
import gnu.trove.function.TShortFunction;
import gnu.trove.map.TIntShortMap;
import gnu.trove.map.hash.TIntShortHashMap;
import gnu.trove.procedure.TIntProcedure;
import gnu.trove.procedure.TIntShortProcedure;
import gnu.trove.procedure.TShortProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntShortHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 18 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap$TIntShortHashIterator.key()I: root-Branch
   * 2 gnu.trove.map.hash.TIntShortHashMap$TIntShortHashIterator.value()S: root-Branch
   * 3 gnu.trove.map.hash.TIntShortHashMap$TIntShortHashIterator.advance()V: root-Branch
   * 4 gnu.trove.map.hash.TIntShortHashMap.put(IS)S: root-Branch
   * 5 gnu.trove.map.hash.TIntShortHashMap.<init>([I[S)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 6 gnu.trove.map.hash.TIntShortHashMap.<init>([I[S)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 7 gnu.trove.map.hash.TIntShortHashMap.doPut(ISI)S: I12 Branch 40 IFGE L214 - true
   * 8 gnu.trove.map.hash.TIntShortHashMap.doPut(ISI)S: I12 Branch 40 IFGE L214 - false
   * 9 gnu.trove.map.hash.TIntShortHashMap.doPut(ISI)S: I41 Branch 41 IFEQ L221 - true
   * 10 gnu.trove.map.hash.TIntShortHashMap.doPut(ISI)S: I41 Branch 41 IFEQ L221 - false
   * 11 gnu.trove.map.hash.TIntShortHashMap.putAll(Lgnu/trove/map/TIntShortMap;)V: I15 Branch 43 IFEQ L243 - false
   * 12 gnu.trove.map.hash.TIntShortHashMap.<init>(Lgnu/trove/map/TIntShortMap;)V: I38 Branch 35 IFEQ L139 - true
   * 13 gnu.trove.map.hash.TIntShortHashMap.<init>(Lgnu/trove/map/TIntShortMap;)V: I50 Branch 36 IFEQ L143 - true
   * 14 gnu.trove.map.hash.TIntShortHashMap$TIntShortHashIterator.<init>(Lgnu/trove/map/hash/TIntShortHashMap;Lgnu/trove/map/hash/TIntShortHashMap;)V: root-Branch
   * 15 gnu.trove.map.hash.TIntShortHashMap.iterator()Lgnu/trove/iterator/TIntShortIterator;: root-Branch
   * 16 gnu.trove.map.hash.TIntShortHashMap.setUp(I)I: root-Branch
   * 17 gnu.trove.map.hash.TIntShortHashMap.<init>(Lgnu/trove/map/TIntShortMap;)V: I10 Branch 34 IFEQ L133 - false
   * 18 gnu.trove.map.hash.TIntShortHashMap.putAll(Lgnu/trove/map/TIntShortMap;)V: I15 Branch 43 IFEQ L243 - true
   */

  @Test
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[10];
      short[] shortArray0 = new short[9];
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(intArray0, shortArray0);
      TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap((TIntShortMap) tIntShortHashMap0);
      assertEquals(0, tIntShortHashMap1.getNoEntryKey());
      assertEquals("{0=0}", tIntShortHashMap1.toString());
      assertEquals(1, tIntShortHashMap0.size());
      assertEquals(23, tIntShortHashMap1.capacity());
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap$TValueView.<init>(Lgnu/trove/map/hash/TIntShortHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TIntShortHashMap.valueCollection()Lgnu/trove/TShortCollection;: root-Branch
   * 3 gnu.trove.map.hash.TIntShortHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(0);
      TShortCollection tShortCollection0 = tIntShortHashMap0.valueCollection();
      assertEquals(true, tShortCollection0.isEmpty());
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TIntShortHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TIntShortHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TIntShortHashMap.keySet()Lgnu/trove/set/TIntSet;: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      tIntShortHashMap0.keySet();
      assertEquals(23, tIntShortHashMap0.capacity());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntShortHashMap.containsKey(I)Z: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      tIntShortHashMap0.containsKey(10);
      assertEquals(23, tIntShortHashMap0.capacity());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntShortHashMap.forEachKey(Lgnu/trove/procedure/TIntProcedure;)Z: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      boolean boolean0 = tIntShortHashMap0.forEachKey((TIntProcedure) null);
      assertEquals(true, boolean0);
      assertEquals(23, tIntShortHashMap0.capacity());
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntShortHashMap.clear()V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(0);
      tIntShortHashMap0.clear();
      assertEquals("{}", tIntShortHashMap0.toString());
  }

  //Test case number: 6
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.increment(I)Z: root-Branch
   * 2 gnu.trove.map.hash.TIntShortHashMap.adjustValue(IS)Z: I9 Branch 71 IFGE L477 - false
   * 3 gnu.trove.map.hash.TIntShortHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(684, 684);
      boolean boolean0 = tIntShortHashMap0.increment(684);
      assertEquals(false, boolean0);
  }

  //Test case number: 7
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.<init>(Lgnu/trove/map/TIntShortMap;)V: I38 Branch 35 IFEQ L139 - false
   * 2 gnu.trove.map.hash.TIntShortHashMap.<init>(Lgnu/trove/map/TIntShortMap;)V: I50 Branch 36 IFEQ L143 - false
   * 3 gnu.trove.map.hash.TIntShortHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 4 gnu.trove.map.hash.TIntShortHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 5 gnu.trove.map.hash.TIntShortHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 6 gnu.trove.map.hash.TIntShortHashMap$TIntShortHashIterator.<init>(Lgnu/trove/map/hash/TIntShortHashMap;Lgnu/trove/map/hash/TIntShortHashMap;)V: root-Branch
   * 7 gnu.trove.map.hash.TIntShortHashMap.iterator()Lgnu/trove/iterator/TIntShortIterator;: root-Branch
   * 8 gnu.trove.map.hash.TIntShortHashMap.<init>(Lgnu/trove/map/TIntShortMap;)V: I10 Branch 34 IFEQ L133 - false
   * 9 gnu.trove.map.hash.TIntShortHashMap.putAll(Lgnu/trove/map/TIntShortMap;)V: I15 Branch 43 IFEQ L243 - true
   * 10 gnu.trove.map.hash.TIntShortHashMap.<init>(IFIS)V: root-Branch
   */

//   @Test
//   public void test7()  throws Throwable  {
//       TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap((-90), (float) (-90), (-90), (short) (-1));
//       TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap((TIntShortMap) tIntShortHashMap0);
//       assertEquals(3, tIntShortHashMap1.capacity());
//       assertEquals(-1, tIntShortHashMap1.getNoEntryValue());
//       assertEquals(-90, tIntShortHashMap1.getNoEntryKey());
//   }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntShortHashMap.putIfAbsent(IS)S: I9 Branch 39 IFGE L205 - false
   */

  @Test
  public void test8()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(761);
      tIntShortHashMap0.put(1, (short)1074);
      short short0 = tIntShortHashMap0.putIfAbsent(1, (short)1930);
      assertEquals(false, tIntShortHashMap0.isEmpty());
      assertEquals((short)1074, short0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntShortHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   */

  @Test
  public void test9()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(1082);
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      tIntShortHashMap0.putAll((Map<? extends Integer, ? extends Short>) hashMap0);
      assertEquals(2237, tIntShortHashMap0.capacity());
  }

  //Test case number: 10
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.get(I)S: I9 Branch 44 IFGE L253 - true
   * 2 gnu.trove.map.hash.TIntShortHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 3 gnu.trove.map.hash.TIntShortHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 4 gnu.trove.map.hash.TIntShortHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 5 gnu.trove.map.hash.TIntShortHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 6 gnu.trove.map.hash.TIntShortHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 7 gnu.trove.map.hash.TIntShortHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 8 gnu.trove.map.hash.TIntShortHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - true
   * 9 gnu.trove.map.hash.TIntShortHashMap.putIfAbsent(IS)S: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test10()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      tIntShortHashMap0.putIfAbsent(0, (short) (-2036));
      boolean boolean0 = tIntShortHashMap0.equals((Object) tIntShortHashMap0);
      assertEquals(1, tIntShortHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 11
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.get(I)S: I9 Branch 44 IFGE L253 - false
   * 2 gnu.trove.map.hash.TIntShortHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - false
   * 3 gnu.trove.map.hash.TIntShortHashMap.equals(Ljava/lang/Object;)Z: I87 Branch 79 IF_ICMPEQ L1200 - false
   * 4 gnu.trove.map.hash.TIntShortHashMap.equals(Ljava/lang/Object;)Z: I90 Branch 80 IF_ICMPEQ L1200 - true
   * 5 gnu.trove.map.hash.TIntShortHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(761);
      tIntShortHashMap0.put(1, (short)1074);
      int[] intArray0 = new int[6];
      tIntShortHashMap0._set = intArray0;
      boolean boolean0 = tIntShortHashMap0.equals((Object) tIntShortHashMap0);
      assertEquals(1, tIntShortHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntShortHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   */

  @Test
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[10];
      short[] shortArray0 = new short[9];
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(intArray0, shortArray0);
      boolean boolean0 = tIntShortHashMap0.isEmpty();
      assertEquals(1, tIntShortHashMap0.size());
      assertEquals("{0=0}", tIntShortHashMap0.toString());
      assertEquals(23, tIntShortHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntShortHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test13()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      boolean boolean0 = tIntShortHashMap0.isEmpty();
      assertEquals(23, tIntShortHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 14
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.remove(I)S: I14 Branch 46 IFLT L276 - true
   * 2 gnu.trove.map.hash.TIntShortHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(761);
      short short0 = tIntShortHashMap0.remove((-1370));
      assertEquals((short)0, short0);
      assertEquals(1523, tIntShortHashMap0.capacity());
      assertEquals(true, tIntShortHashMap0.isEmpty());
  }

  //Test case number: 15
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.keys()[I: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TIntShortHashMap.keys()[I: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TIntShortHashMap.keys()[I: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TIntShortHashMap.keys()[I: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[10];
      short[] shortArray0 = new short[9];
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(intArray0, shortArray0);
      int[] intArray1 = tIntShortHashMap0.keys();
      assertNotNull(intArray1);
      assertEquals("{0=0}", tIntShortHashMap0.toString());
      assertEquals(1, tIntShortHashMap0.size());
      assertEquals(false, tIntShortHashMap0.isEmpty());
  }

  //Test case number: 16
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.keys([I)[I: I10 Branch 49 IF_ICMPGE L315 - true
   * 2 gnu.trove.map.hash.TIntShortHashMap.keys([I)[I: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TIntShortHashMap.keys([I)[I: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TIntShortHashMap.keys([I)[I: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(397, (-998));
      int[] intArray0 = tIntShortHashMap0.keys(tIntShortHashMap0._set);
      assertNotNull(intArray0);
  }

  //Test case number: 17
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.keys([I)[I: I10 Branch 49 IF_ICMPGE L315 - false
   * 2 gnu.trove.map.hash.TIntShortHashMap.keys([I)[I: I44 Branch 51 IF_ICMPNE L323 - false
   * 3 gnu.trove.map.hash.TIntShortHashMap.keys()[I: I27 Branch 47 IFLE L303 - true
   * 4 gnu.trove.map.hash.TIntShortHashMap.keys()[I: I27 Branch 47 IFLE L303 - false
   * 5 gnu.trove.map.hash.TIntShortHashMap.keys()[I: I34 Branch 48 IF_ICMPNE L304 - true
   * 6 gnu.trove.map.hash.TIntShortHashMap.keys([I)[I: I37 Branch 50 IFLE L322 - true
   * 7 gnu.trove.map.hash.TIntShortHashMap.keys([I)[I: I37 Branch 50 IFLE L322 - false
   * 8 gnu.trove.map.hash.TIntShortHashMap.keys([I)[I: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      int[] intArray0 = tIntShortHashMap0.keys();
      tIntShortHashMap0.putIfAbsent(0, (short)0);
      tIntShortHashMap0.keys(intArray0);
      assertEquals("{0=0}", tIntShortHashMap0.toString());
      assertEquals(false, tIntShortHashMap0.isEmpty());
  }

  //Test case number: 18
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.values()[S: I34 Branch 53 IF_ICMPNE L344 - false
   * 2 gnu.trove.map.hash.TIntShortHashMap.values()[S: I27 Branch 52 IFLE L343 - true
   * 3 gnu.trove.map.hash.TIntShortHashMap.values()[S: I27 Branch 52 IFLE L343 - false
   * 4 gnu.trove.map.hash.TIntShortHashMap.values()[S: I34 Branch 53 IF_ICMPNE L344 - true
   * 5 gnu.trove.map.hash.TIntShortHashMap.adjustOrPutValue(ISS)S: I9 Branch 72 IFGE L491 - true
   * 6 gnu.trove.map.hash.TIntShortHashMap.adjustOrPutValue(ISS)S: I59 Branch 73 IFEQ L502 - false
   */

  @Test
  public void test18()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      tIntShortHashMap0.adjustOrPutValue(1, (short)0, (short)1683);
      tIntShortHashMap0.values();
      assertEquals("{1=1683}", tIntShortHashMap0.toString());
      assertEquals(false, tIntShortHashMap0.isEmpty());
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.values([S)[S: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TIntShortHashMap.values([S)[S: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TIntShortHashMap.values([S)[S: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TIntShortHashMap.values([S)[S: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test19()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap((-90), (float) (-90), (-90), (short) (-1));
      short[] shortArray0 = new short[1];
      short[] shortArray1 = tIntShortHashMap0.values(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  //Test case number: 20
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.values([S)[S: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TIntShortHashMap.values([S)[S: I44 Branch 56 IF_ICMPNE L363 - false
   * 3 gnu.trove.map.hash.TIntShortHashMap.values()[S: I27 Branch 52 IFLE L343 - true
   * 4 gnu.trove.map.hash.TIntShortHashMap.values()[S: I27 Branch 52 IFLE L343 - false
   * 5 gnu.trove.map.hash.TIntShortHashMap.values()[S: I34 Branch 53 IF_ICMPNE L344 - true
   * 6 gnu.trove.map.hash.TIntShortHashMap.values([S)[S: I37 Branch 55 IFLE L362 - true
   * 7 gnu.trove.map.hash.TIntShortHashMap.values([S)[S: I37 Branch 55 IFLE L362 - false
   * 8 gnu.trove.map.hash.TIntShortHashMap.values([S)[S: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      short[] shortArray0 = tIntShortHashMap0.values();
      tIntShortHashMap0.putIfAbsent((int) (short)0, (short)0);
      short[] shortArray1 = tIntShortHashMap0.values(shortArray0);
      assertEquals("{0=0}", tIntShortHashMap0.toString());
      assertNotSame(shortArray0, shortArray1);
  }

  //Test case number: 21
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.containsValue(S)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TIntShortHashMap.containsValue(S)Z: I30 Branch 59 IF_ICMPNE L377 - true
   * 3 gnu.trove.map.hash.TIntShortHashMap.containsValue(S)Z: I18 Branch 57 IFLE L376 - true
   * 4 gnu.trove.map.hash.TIntShortHashMap.containsValue(S)Z: I18 Branch 57 IFLE L376 - false
   * 5 gnu.trove.map.hash.TIntShortHashMap.containsValue(S)Z: I25 Branch 58 IF_ICMPNE L377 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      tIntShortHashMap0.adjustOrPutValue(1, (short)0, (short)1683);
      boolean boolean0 = tIntShortHashMap0.containsValue((short)0);
      assertEquals(1, tIntShortHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 22
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.containsValue(S)Z: I30 Branch 59 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TIntShortHashMap.containsValue(S)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TIntShortHashMap.containsValue(S)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 4 gnu.trove.map.hash.TIntShortHashMap.containsValue(S)Z: I25 Branch 58 IF_ICMPNE L377 - false
   */

  @Test
  public void test22()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      tIntShortHashMap0.put((int) (short)0, (short)0);
      boolean boolean0 = tIntShortHashMap0.containsValue((short)0);
      assertEquals("{0=0}", tIntShortHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 23
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.forEachValue(Lgnu/trove/procedure/TShortProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TIntShortHashMap.forEachValue(Lgnu/trove/procedure/TShortProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TIntShortHashMap.forEachValue(Lgnu/trove/procedure/TShortProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   * 4 gnu.trove.map.hash.TIntShortHashMap.removeAt(I)V: root-Branch
   * 5 gnu.trove.map.hash.TIntShortHashMap.remove(I)S: I14 Branch 46 IFLT L276 - false
   */

  @Test
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[2];
      short[] shortArray0 = new short[21];
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(intArray0, shortArray0);
      assertEquals("{0=0}", tIntShortHashMap0.toString());
      
      tIntShortHashMap0.remove(0);
      boolean boolean0 = tIntShortHashMap0.forEachValue((TShortProcedure) null);
      assertEquals(true, tIntShortHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.forEachValue(Lgnu/trove/procedure/TShortProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TIntShortHashMap.forEachValue(Lgnu/trove/procedure/TShortProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TIntShortHashMap.forEachValue(Lgnu/trove/procedure/TShortProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[8];
      short[] shortArray0 = new short[9];
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(intArray0, shortArray0);
      // Undeclared exception!
      try {
        tIntShortHashMap0.forEachValue((TShortProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 25
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.transformValues(Lgnu/trove/function/TShortFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TIntShortHashMap.transformValues(Lgnu/trove/function/TShortFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TIntShortHashMap.transformValues(Lgnu/trove/function/TShortFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   * 4 gnu.trove.map.hash.TIntShortHashMap.<init>(IFIS)V: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap((-90), (float) (-90), (-90), (short) (-1));
      tIntShortHashMap0.transformValues((TShortFunction) null);
      assertEquals("{}", tIntShortHashMap0.toString());
  }

  //Test case number: 26
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.transformValues(Lgnu/trove/function/TShortFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TIntShortHashMap.transformValues(Lgnu/trove/function/TShortFunction;)V: I18 Branch 66 IFLE L434 - false
   */

  @Test
  public void test26()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(1946, 1946);
      tIntShortHashMap0.put(848, (short) (-1933));
      // Undeclared exception!
      try {
        tIntShortHashMap0.transformValues((TShortFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.retainEntries(Lgnu/trove/procedure/TIntShortProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TIntShortHashMap.retainEntries(Lgnu/trove/procedure/TIntShortProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TIntShortHashMap.retainEntries(Lgnu/trove/procedure/TIntShortProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test27()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(397, (-998));
      boolean boolean0 = tIntShortHashMap0.retainEntries((TIntShortProcedure) null);
      assertEquals(false, boolean0);
      assertEquals("{}", tIntShortHashMap0.toString());
      assertEquals(3, tIntShortHashMap0.capacity());
  }

  //Test case number: 28
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.retainEntries(Lgnu/trove/procedure/TIntShortProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TIntShortHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 3 gnu.trove.map.hash.TIntShortHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 4 gnu.trove.map.hash.TIntShortHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 5 gnu.trove.map.hash.TIntShortHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 6 gnu.trove.map.hash.TIntShortHashMap.retainEntries(Lgnu/trove/procedure/TIntShortProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 7 gnu.trove.map.hash.TIntShortHashMap.retainEntries(Lgnu/trove/procedure/TIntShortProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(0, 0);
      tIntShortHashMap0.putIfAbsent(0, (short) (-102));
      // Undeclared exception!
      try {
        tIntShortHashMap0.retainEntries((TIntShortProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntShortHashMap.adjustValue(IS)Z: I9 Branch 71 IFGE L477 - true
   */

  @Test
  public void test29()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      tIntShortHashMap0.adjustOrPutValue(1, (short)0, (short)1683);
      boolean boolean0 = tIntShortHashMap0.adjustValue(1, (short)0);
      assertEquals(1, tIntShortHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.adjustOrPutValue(ISS)S: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TIntShortHashMap.adjustOrPutValue(ISS)S: I59 Branch 73 IFEQ L502 - true
   */

  @Test
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[10];
      short[] shortArray0 = new short[9];
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(intArray0, shortArray0);
      short short0 = tIntShortHashMap0.adjustOrPutValue((int) (short)0, (short)182, (short)0);
      assertEquals("{0=182}", tIntShortHashMap0.toString());
      assertEquals((short)182, short0);
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntShortHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   */

  @Test
  public void test31()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      boolean boolean0 = tIntShortHashMap0.equals((Object) null);
      assertEquals(false, boolean0);
      assertEquals(23, tIntShortHashMap0.capacity());
  }

  //Test case number: 32
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   * 2 gnu.trove.map.hash.TIntShortHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[6];
      short[] shortArray0 = new short[5];
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(intArray0, shortArray0);
      TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap(0, 331);
      boolean boolean0 = tIntShortHashMap0.equals((Object) tIntShortHashMap1);
      assertEquals(17, tIntShortHashMap0.capacity());
      assertEquals("{0=0}", tIntShortHashMap0.toString());
      assertEquals(1, tIntShortHashMap0.size());
      assertFalse(tIntShortHashMap1.equals(tIntShortHashMap0));
      assertEquals(false, boolean0);
  }

  //Test case number: 33
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.equals(Ljava/lang/Object;)Z: I90 Branch 80 IF_ICMPEQ L1200 - false
   * 2 gnu.trove.map.hash.TIntShortHashMap.get(I)S: I9 Branch 44 IFGE L253 - true
   * 3 gnu.trove.map.hash.TIntShortHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 4 gnu.trove.map.hash.TIntShortHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 5 gnu.trove.map.hash.TIntShortHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 6 gnu.trove.map.hash.TIntShortHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 7 gnu.trove.map.hash.TIntShortHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 8 gnu.trove.map.hash.TIntShortHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - false
   * 9 gnu.trove.map.hash.TIntShortHashMap.equals(Ljava/lang/Object;)Z: I87 Branch 79 IF_ICMPEQ L1200 - false
   * 10 gnu.trove.map.hash.TIntShortHashMap.putIfAbsent(IS)S: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test33()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      short[] shortArray0 = new short[1];
      tIntShortHashMap0.putIfAbsent(0, (short) (-2036));
      shortArray0[0] = (short) (-570);
      TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap(tIntShortHashMap0._set, shortArray0);
      boolean boolean0 = tIntShortHashMap0.equals((Object) tIntShortHashMap1);
      assertEquals(1, tIntShortHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 34
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 2 gnu.trove.map.hash.TIntShortHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 3 gnu.trove.map.hash.TIntShortHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 4 gnu.trove.map.hash.TIntShortHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   */

  @Test
  public void test34()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      tIntShortHashMap0.adjustOrPutValue(1, (short)0, (short)1683);
      int int0 = tIntShortHashMap0.hashCode();
      assertEquals(false, tIntShortHashMap0.isEmpty());
      assertEquals(1682, int0);
  }

  //Test case number: 35
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap$1.execute(IS)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TIntShortHashMap.toString()Ljava/lang/String;: root-Branch
   * 3 gnu.trove.map.hash.TIntShortHashMap.<init>()V: root-Branch
   * 4 gnu.trove.map.hash.TIntShortHashMap.adjustOrPutValue(ISS)S: I9 Branch 72 IFGE L491 - true
   * 5 gnu.trove.map.hash.TIntShortHashMap.adjustOrPutValue(ISS)S: I59 Branch 73 IFEQ L502 - false
   * 6 gnu.trove.map.hash.TIntShortHashMap.forEachEntry(Lgnu/trove/procedure/TIntShortProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 7 gnu.trove.map.hash.TIntShortHashMap.forEachEntry(Lgnu/trove/procedure/TIntShortProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 8 gnu.trove.map.hash.TIntShortHashMap.forEachEntry(Lgnu/trove/procedure/TIntShortProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 9 gnu.trove.map.hash.TIntShortHashMap.forEachEntry(Lgnu/trove/procedure/TIntShortProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 10 gnu.trove.map.hash.TIntShortHashMap.forEachEntry(Lgnu/trove/procedure/TIntShortProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 11 gnu.trove.map.hash.TIntShortHashMap$1.<init>(Lgnu/trove/map/hash/TIntShortHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 12 gnu.trove.map.hash.TIntShortHashMap$1.execute(IS)Z: I4 Branch 115 IFEQ L1233 - false
   */

  @Test
  public void test35()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      tIntShortHashMap0.adjustOrPutValue(1, (short)0, (short)1683);
      tIntShortHashMap0.put((int) (short)0, (short)0);
      String string0 = tIntShortHashMap0.toString();
      assertEquals(2, tIntShortHashMap0.size());
      assertEquals("{1=1683, 0=0}", string0);
  }

  //Test case number: 36
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TIntShortHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 2 gnu.trove.map.hash.TIntShortHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 3 gnu.trove.map.hash.TIntShortHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 4 gnu.trove.map.hash.TIntShortHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 5 gnu.trove.map.hash.TIntShortHashMap.setUp(I)I: root-Branch
   * 6 gnu.trove.map.hash.TIntShortHashMap.put(IS)S: root-Branch
   * 7 gnu.trove.map.hash.TIntShortHashMap.<init>([I[S)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 8 gnu.trove.map.hash.TIntShortHashMap.<init>([I[S)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 9 gnu.trove.map.hash.TIntShortHashMap.doPut(ISI)S: I12 Branch 40 IFGE L214 - true
   * 10 gnu.trove.map.hash.TIntShortHashMap.doPut(ISI)S: I12 Branch 40 IFGE L214 - false
   * 11 gnu.trove.map.hash.TIntShortHashMap.doPut(ISI)S: I41 Branch 41 IFEQ L221 - true
   * 12 gnu.trove.map.hash.TIntShortHashMap.doPut(ISI)S: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[10];
      short[] shortArray0 = new short[9];
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(intArray0, shortArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tIntShortHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(23, tIntShortHashMap0.capacity());
      assertEquals(1, tIntShortHashMap0.size());
      assertEquals("{0=0}", tIntShortHashMap0.toString());
  }
}
