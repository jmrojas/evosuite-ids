/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TShortDoubleMap;
import gnu.trove.map.hash.TShortDoubleHashMap;
import java.io.PipedInputStream;
import java.net.URI;
import java.util.AbstractMap;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortDoubleHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 788;
      float float0 = 1921.9768F;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0, float0);
      tShortDoubleHashMap0.getNoEntryKey();
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap();
      int int1 = (-32768);
      TShortDoubleHashMap tShortDoubleHashMap2 = new TShortDoubleHashMap(int1);
      short short0 = (short)472;
      double double0 = tShortDoubleHashMap2.remove(short0);
      tShortDoubleHashMap1.hashCode();
      tShortDoubleHashMap1.putIfAbsent(short0, double0);
      assertEquals(1, tShortDoubleHashMap1.size());
      
      short short1 = (short)32767;
      tShortDoubleHashMap2.containsKey(short1);
      assertTrue(tShortDoubleHashMap2.equals(tShortDoubleHashMap0));
  }

  @Test
  public void test1()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short) (-1637);
      shortArray0[0] = short0;
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) shortArray0[0];
      doubleArray0[1] = (double) short0;
      doubleArray0[2] = (double) short0;
      doubleArray0[3] = (double) shortArray0[0];
      doubleArray0[4] = (double) shortArray0[0];
      doubleArray0[5] = (double) short0;
      doubleArray0[6] = (double) shortArray0[0];
      doubleArray0[7] = (double) short0;
      doubleArray0[8] = (double) short0;
      double double0 = 0.0;
      doubleArray0[9] = double0;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) short0;
      doubleArray1[1] = (double) short0;
      doubleArray1[2] = (double) short0;
      short[] shortArray1 = tShortDoubleHashMap0.keys();
      assertNotNull(shortArray1);
      
      doubleArray1[3] = (double) short0;
      doubleArray1[4] = (double) shortArray0[0];
      tShortDoubleHashMap0.iterator();
      assertEquals("{-1637=-1637.0}", tShortDoubleHashMap0.toString());
      
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap(shortArray0, doubleArray1);
      boolean boolean0 = tShortDoubleHashMap1.contains(short0);
      assertEquals(11, tShortDoubleHashMap1.capacity());
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-1552);
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0);
      float float0 = 1176.5688F;
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap(int0, float0);
      short short0 = tShortDoubleHashMap1.getNoEntryKey();
      tShortDoubleHashMap1.getAutoCompactionFactor();
      double double0 = 1481.1773313159963;
      byte[] byteArray0 = tShortDoubleHashMap0._states;
      Double double1 = new Double(double0);
      AbstractMap.SimpleEntry<Short, Double> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Short, Double>((Short) short0, double1);
      abstractMap_SimpleEntry0.getKey();
      short short1 = (short)436;
      tShortDoubleHashMap1.containsKey(short1);
      String string0 = tShortDoubleHashMap0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      tShortDoubleHashMap0.putAll((TShortDoubleMap) tShortDoubleHashMap1);
      TShortDoubleHashMap tShortDoubleHashMap2 = new TShortDoubleHashMap();
      assertEquals(23, tShortDoubleHashMap2.capacity());
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-1727);
      float float0 = (-1002.7828F);
      short short0 = (short)1;
      double double0 = 1510.6408770390817;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0, float0, short0, double0);
      short[] shortArray0 = new short[6];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      short[] shortArray1 = tShortDoubleHashMap0.keys(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test
  public void test4()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short)726;
      shortArray0[0] = short0;
      short short1 = (short)432;
      shortArray0[1] = short1;
      short short2 = (short) (-1088);
      shortArray0[2] = short2;
      short short3 = (short)1524;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short) (-1211);
      shortArray0[5] = short5;
      short short6 = (short)1187;
      shortArray0[6] = short6;
      short short7 = (short)0;
      shortArray0[7] = short7;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) shortArray0[4];
      doubleArray0[1] = (double) short2;
      doubleArray0[2] = (double) shortArray0[3];
      doubleArray0[3] = (double) short3;
      doubleArray0[4] = (double) shortArray0[0];
      doubleArray0[5] = (double) shortArray0[4];
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      tShortDoubleHashMap0.get(short2);
      int int0 = (-1);
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap();
      int int1 = (-1);
      TShortDoubleHashMap tShortDoubleHashMap2 = new TShortDoubleHashMap(int1);
      tShortDoubleHashMap2.compact();
      tShortDoubleHashMap1.iterator();
      short short8 = (short)1156;
      tShortDoubleHashMap1.increment(short8);
      tShortDoubleHashMap1.keys();
      float float0 = 0.0F;
      short short9 = (short) (-1510);
      tShortDoubleHashMap1.values();
      tShortDoubleHashMap1.adjustValue(short9, short9);
      TShortDoubleHashMap tShortDoubleHashMap3 = new TShortDoubleHashMap();
      tShortDoubleHashMap1.putAll((TShortDoubleMap) tShortDoubleHashMap3);
      assertEquals(23, tShortDoubleHashMap3.capacity());
      
      tShortDoubleHashMap1.trimToSize();
      assertEquals(3, tShortDoubleHashMap1.capacity());
      
      TShortDoubleHashMap tShortDoubleHashMap4 = new TShortDoubleHashMap(int0, float0);
      assertFalse(tShortDoubleHashMap4.equals(tShortDoubleHashMap0));
  }

//   @Test
//   public void test5()  throws Throwable  {
//       int int0 = 0;
//       float float0 = 690.0636F;
//       short short0 = (short)666;
//       TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0, float0, short0, (double) float0);
//       TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap((TShortDoubleMap) tShortDoubleHashMap0);
//       assertEquals(3, tShortDoubleHashMap1.capacity());
//       assertEquals(666, tShortDoubleHashMap1.getNoEntryKey());
//       assertEquals(690.0635986328125, tShortDoubleHashMap1.getNoEntryValue(), 0.01D);
//       
//       int int1 = 320;
//       Double double0 = new Double((double) float0);
//       AbstractMap.SimpleEntry<Double, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Double, Integer>(double0, (Integer) int0);
//       abstractMap_SimpleEntry0.getKey();
//       TShortDoubleHashMap tShortDoubleHashMap2 = new TShortDoubleHashMap(int1);
//       double[] doubleArray0 = tShortDoubleHashMap2.values();
//       assertNotNull(doubleArray0);
//       
//       tShortDoubleHashMap2.valueCollection();
//       TShortDoubleHashMap tShortDoubleHashMap3 = new TShortDoubleHashMap(int1);
//       tShortDoubleHashMap2.getAutoCompactionFactor();
//       tShortDoubleHashMap2.putAll((TShortDoubleMap) tShortDoubleHashMap3);
//       abstractMap_SimpleEntry0.getKey();
//       short short1 = (short)1671;
//       tShortDoubleHashMap3.valueCollection();
//       boolean boolean0 = tShortDoubleHashMap2.adjustValue(short1, (double) int1);
//       assertEquals(false, boolean0);
//       
//       tShortDoubleHashMap3.tempDisableAutoCompaction();
//       assertEquals(673, tShortDoubleHashMap3.capacity());
//   }

  @Test
  public void test6()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      int int0 = 0;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short) (-1740);
      shortArray0[0] = short0;
      short short1 = (short)21083;
      shortArray0[1] = short1;
      short short2 = (short)531;
      shortArray0[2] = short2;
      short short3 = (short)1883;
      shortArray0[3] = short3;
      short short4 = (short)1045;
      shortArray0[4] = short4;
      short short5 = (short)878;
      shortArray0[5] = short5;
      short short6 = (short)923;
      shortArray0[6] = short6;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) shortArray0[3];
      doubleArray0[1] = (double) shortArray0[2];
      doubleArray0[2] = (double) short5;
      doubleArray0[3] = (double) short4;
      doubleArray0[4] = (double) shortArray0[4];
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      tShortDoubleHashMap0.get(short3);
      int int0 = 754;
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap(int0);
      tShortDoubleHashMap1.tempDisableAutoCompaction();
      short short7 = (short)1883;
      tShortDoubleHashMap1.increment(short7);
      double double0 = (-274.0048674960712);
      double double1 = tShortDoubleHashMap1.putIfAbsent(short7, double0);
      assertEquals(false, tShortDoubleHashMap1.isEmpty());
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 329;
      float float0 = (-973.78107F);
      short short0 = (short) (-1);
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0, float0, short0, (double) int0);
      boolean boolean0 = tShortDoubleHashMap0.containsValue((double) int0);
      assertEquals(false, boolean0);
      
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap();
      short short1 = (short)0;
      boolean boolean1 = tShortDoubleHashMap1.containsKey(short1);
      assertEquals(23, tShortDoubleHashMap1.capacity());
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 1;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0);
      short short0 = (short)1;
      float float0 = 71.21915F;
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap((int) short0, float0);
      boolean boolean0 = tShortDoubleHashMap0.increment(short0);
      assertEquals(false, boolean0);
      
      short[] shortArray0 = new short[10];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      short short1 = (short) (-346);
      shortArray0[4] = short1;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      shortArray0[7] = short0;
      shortArray0[8] = short0;
      shortArray0[9] = short0;
      short[] shortArray1 = tShortDoubleHashMap0.keys(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      int int1 = (-1);
      tShortDoubleHashMap0.capacity();
      TShortDoubleHashMap tShortDoubleHashMap2 = new TShortDoubleHashMap(int1);
      int int2 = tShortDoubleHashMap2.hashCode();
      assertEquals(0, int2);
      
      TShortDoubleHashMap tShortDoubleHashMap3 = new TShortDoubleHashMap();
      assertEquals(23, tShortDoubleHashMap3.capacity());
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-1445);
      short short0 = (short)1558;
      double double0 = (-559.7232557513295);
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0, (float) int0, short0, double0);
      short[] shortArray0 = new short[9];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      short short1 = (short) (-342);
      shortArray0[3] = short1;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      short short2 = (short) (-1600);
      shortArray0[7] = short2;
      short short3 = (short) (-987);
      shortArray0[8] = short3;
      short[] shortArray1 = tShortDoubleHashMap0.keys(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test
  public void test11()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = (short)466;
      shortArray0[0] = short0;
      short short1 = (short)743;
      shortArray0[1] = short1;
      short short2 = (short)157;
      shortArray0[2] = short2;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) short0;
      doubleArray0[1] = (double) short2;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      double[] doubleArray1 = tShortDoubleHashMap0.values();
      assertNotNull(doubleArray1);
      
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap();
      short short3 = (short)0;
      double double0 = (-1586.361971350734);
      tShortDoubleHashMap1.adjustOrPutValue(short3, double0, double0);
      boolean boolean0 = true;
      tShortDoubleHashMap1.reenableAutoCompaction(boolean0);
      double double1 = 0.0;
      double double2 = 1.0;
      tShortDoubleHashMap1.containsValue(double2);
      tShortDoubleHashMap1.containsValue(double1);
      assertEquals(1, tShortDoubleHashMap1.size());
      
      tShortDoubleHashMap1.clear();
      int int0 = 0;
      float float0 = 0.0F;
      TShortDoubleHashMap tShortDoubleHashMap2 = new TShortDoubleHashMap((TShortDoubleMap) tShortDoubleHashMap1);
      tShortDoubleHashMap1.capacity();
      short short4 = (short) (-584);
      TShortDoubleHashMap tShortDoubleHashMap3 = new TShortDoubleHashMap(int0, float0, short4, (double) int0);
      short short5 = (short)1080;
      double double3 = 0.0;
      tShortDoubleHashMap1.adjustValue(short5, double3);
      short[] shortArray1 = tShortDoubleHashMap1._set;
      assertTrue(tShortDoubleHashMap1.equals(tShortDoubleHashMap2));
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-1);
      float float0 = 813.00867F;
      short short0 = (short)1353;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0, float0, short0, (double) short0);
      int int1 = 599;
      tShortDoubleHashMap0.ensureCapacity(int1);
      assertEquals(3, tShortDoubleHashMap0.capacity());
      assertEquals("{}", tShortDoubleHashMap0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short)1301;
      shortArray0[0] = short0;
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      short short1 = (short)1428;
      shortArray0[1] = short1;
      short short2 = (short) (-1);
      shortArray0[2] = short2;
      short short3 = (short) (-243);
      shortArray0[3] = short3;
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) shortArray0[2];
      doubleArray0[2] = (double) shortArray0[2];
      doubleArray0[3] = (double) short3;
      doubleArray0[4] = (double) shortArray0[1];
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap((TShortDoubleMap) tShortDoubleHashMap0);
      tShortDoubleHashMap1.ensureCapacity((int) short0);
      tShortDoubleHashMap1.size();
      assertEquals(2729, tShortDoubleHashMap1.capacity());
      
      TShortDoubleHashMap tShortDoubleHashMap2 = new TShortDoubleHashMap();
      assertFalse(tShortDoubleHashMap2.equals(tShortDoubleHashMap1));
  }

  @Test
  public void test14()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short(short0);
      AbstractMap.SimpleEntry<Short, Short> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Short, Short>(short1, (Short) short0);
      String string0 = "Q,{>DmTI6N*PS:J";
      Locale locale0 = new Locale(string0);
      int int0 = (-200);
      try {
        Short.valueOf(string0, int0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -200 less than Character.MIN_RADIX
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 1;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0);
      String string0 = ", ";
      // Undeclared exception!
      try {
        URI.create(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 1: , 
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      TShortDoubleMap tShortDoubleMap0 = null;
      String string0 = "u:O";
      try {
        Short.valueOf(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"u:O\"
         //
      }
  }
}
