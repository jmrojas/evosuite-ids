/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.strategy;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.strategy.IdentityHashingStrategy;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class IdentityHashingStrategyEvoSuite_StrongMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 Strong Mutation 0: gnu.trove.strategy.IdentityHashingStrategy.computeHashCode(Ljava/lang/Object;)I:11 - DeleteStatement: identityHashCode(Ljava/lang/Object;)I
   * 2 gnu.trove.strategy.IdentityHashingStrategy.<init>()V: root-Branch
   * 3 gnu.trove.strategy.IdentityHashingStrategy.computeHashCode(Ljava/lang/Object;)I: root-Branch
   * 4 Strong Mutation 0: gnu.trove.strategy.IdentityHashingStrategy.computeHashCode(Ljava/lang/Object;)I:11 - DeleteStatement: identityHashCode(Ljava/lang/Object;)I
   */

//   @Test
//   public void test0()  throws Throwable  {
//       IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
//       Object object0 = new Object();
//       int int0 = identityHashingStrategy0.computeHashCode(object0);
//       assertEquals(1682916581, int0);
//   }

  //Test case number: 1
  /*
   * 4 covered goals:
   * 1 Strong Mutation 4: gnu.trove.strategy.IdentityHashingStrategy.equals(Ljava/lang/Object;Ljava/lang/Object;)Z:15 - ReplaceConstant - 1 -> 0
   * 2 gnu.trove.strategy.IdentityHashingStrategy.equals(Ljava/lang/Object;Ljava/lang/Object;)Z: I4 Branch 1 IF_ACMPNE L15 - false
   * 3 Strong Mutation 3: gnu.trove.strategy.IdentityHashingStrategy.equals(Ljava/lang/Object;Ljava/lang/Object;)Z:15 - ReplaceComparisonOperator != -> ==
   * 4 Strong Mutation 4: gnu.trove.strategy.IdentityHashingStrategy.equals(Ljava/lang/Object;Ljava/lang/Object;)Z:15 - ReplaceConstant - 1 -> 0
   */

  @Test
  public void test1()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      Object object0 = new Object();
      boolean boolean0 = identityHashingStrategy0.equals(object0, object0);
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 8 covered goals:
   * 1 Strong Mutation 5: gnu.trove.strategy.IdentityHashingStrategy.equals(Ljava/lang/Object;Ljava/lang/Object;)Z:15 - ReplaceConstant - 0 -> 1
   * 2 Strong Mutation 1: gnu.trove.strategy.IdentityHashingStrategy.equals(Ljava/lang/Object;Ljava/lang/Object;)Z:15 - ReplaceVariable o1 -> o2
   * 3 Strong Mutation 2: gnu.trove.strategy.IdentityHashingStrategy.equals(Ljava/lang/Object;Ljava/lang/Object;)Z:15 - ReplaceVariable o2 -> o1
   * 4 Strong Mutation 3: gnu.trove.strategy.IdentityHashingStrategy.equals(Ljava/lang/Object;Ljava/lang/Object;)Z:15 - ReplaceComparisonOperator != -> ==
   * 5 Strong Mutation 1: gnu.trove.strategy.IdentityHashingStrategy.equals(Ljava/lang/Object;Ljava/lang/Object;)Z:15 - ReplaceVariable o1 -> o2
   * 6 Strong Mutation 2: gnu.trove.strategy.IdentityHashingStrategy.equals(Ljava/lang/Object;Ljava/lang/Object;)Z:15 - ReplaceVariable o2 -> o1
   * 7 Strong Mutation 5: gnu.trove.strategy.IdentityHashingStrategy.equals(Ljava/lang/Object;Ljava/lang/Object;)Z:15 - ReplaceConstant - 0 -> 1
   * 8 gnu.trove.strategy.IdentityHashingStrategy.equals(Ljava/lang/Object;Ljava/lang/Object;)Z: I4 Branch 1 IF_ACMPNE L15 - true
   */

  @Test
  public void test2()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      Object object0 = new Object();
      boolean boolean0 = identityHashingStrategy0.equals((Object) "", object0);
      assertEquals(false, boolean0);
  }
}
