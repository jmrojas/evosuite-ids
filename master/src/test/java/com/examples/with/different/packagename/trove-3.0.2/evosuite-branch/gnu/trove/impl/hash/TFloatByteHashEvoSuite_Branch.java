/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TFloatByteMap;
import gnu.trove.map.hash.TFloatByteHashMap;
import gnu.trove.procedure.TFloatProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatByteHashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TFloatByteHash.<init>()V: root-Branch
   * 2 gnu.trove.impl.hash.TFloatByteHash.setUp(I)I: root-Branch
   */

//   @Test
//   public void test0()  throws Throwable  {
//       TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap();
//       assertEquals(23, tFloatByteHashMap0.capacity());
//       assertEquals(0, tFloatByteHashMap0.getNoEntryValue());
//       assertEquals(0.0F, tFloatByteHashMap0.getNoEntryKey(), 0.01F);
//   }

  //Test case number: 1
  /*
   * 7 covered goals:
   * 1 gnu.trove.impl.hash.TFloatByteHash.getNoEntryValue()B: root-Branch
   * 2 gnu.trove.impl.hash.TFloatByteHash.insertKey(F)I: I30 Branch 13 IFNE L279 - true
   * 3 gnu.trove.impl.hash.TFloatByteHash.insertKey(F)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 4 gnu.trove.impl.hash.TFloatByteHash.insertKey(F)I: I57 Branch 15 IFNE L286 - false
   * 5 gnu.trove.impl.hash.TFloatByteHash.<init>(I)V: root-Branch
   * 6 gnu.trove.impl.hash.TFloatByteHash.insertKeyAt(IF)V: root-Branch
   * 7 gnu.trove.impl.hash.TFloatByteHash.insertKey(F)I: I30 Branch 13 IFNE L279 - false
   */

//   @Test
//   public void test1()  throws Throwable  {
//       float[] floatArray0 = new float[10];
//       byte[] byteArray0 = new byte[9];
//       TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
//       byte byte0 = tFloatByteHashMap0.getNoEntryValue();
//       assertEquals(23, tFloatByteHashMap0.capacity());
//       assertEquals(1, tFloatByteHashMap0.size());
//       assertEquals("{0.0=0}", tFloatByteHashMap0.toString());
//       assertEquals((byte)0, byte0);
//       assertEquals(0.0F, tFloatByteHashMap0.getNoEntryKey(), 0.01F);
//   }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TFloatByteHash.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   * 2 gnu.trove.impl.hash.TFloatByteHash.<init>(IFFB)V: root-Branch
   */

//   @Test
//   public void test2()  throws Throwable  {
//       TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(61169, (float) 61169, (float) 61169, (byte)64);
//       ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
//       ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
//       tFloatByteHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
//       assertEquals(61169.0F, tFloatByteHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals(64, tFloatByteHashMap0.getNoEntryValue());
//   }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TFloatByteHash.<init>(IF)V: root-Branch
   */

//   @Test
//   public void test3()  throws Throwable  {
//       TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(0, (-1149.6008F));
//       assertEquals(0.0F, tFloatByteHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals(0, tFloatByteHashMap0.getNoEntryValue());
//   }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TFloatByteHash.getNoEntryKey()F: root-Branch
   */

//   @Test
//   public void test4()  throws Throwable  {
//       float[] floatArray0 = new float[10];
//       byte[] byteArray0 = new byte[9];
//       TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
//       float float0 = tFloatByteHashMap0.getNoEntryKey();
//       assertEquals(23, tFloatByteHashMap0.capacity());
//       assertEquals(0, tFloatByteHashMap0.getNoEntryValue());
//       assertEquals(1, tFloatByteHashMap0.size());
//       assertEquals(0.0F, float0, 0.01F);
//       assertEquals("{0.0=0}", tFloatByteHashMap0.toString());
//   }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TFloatByteHash.contains(F)Z: I5 Branch 1 IFLT L178 - true
   * 2 gnu.trove.impl.hash.TFloatByteHash.index(F)I: I37 Branch 5 IFNE L228 - false
   */

//   @Test
//   public void test5()  throws Throwable  {
//       TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(0);
//       boolean boolean0 = tFloatByteHashMap0.containsKey((float) 0);
//       assertEquals(0, tFloatByteHashMap0.getNoEntryValue());
//       assertEquals(0.0F, tFloatByteHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals(false, boolean0);
//   }

  //Test case number: 6
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TFloatByteHash.contains(F)Z: I5 Branch 1 IFLT L178 - false
   * 2 gnu.trove.impl.hash.TFloatByteHash.index(F)I: I37 Branch 5 IFNE L228 - true
   * 3 gnu.trove.impl.hash.TFloatByteHash.index(F)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 4 gnu.trove.impl.hash.TFloatByteHash.index(F)I: I52 Branch 7 IFNE L231 - false
   */

//   @Test
//   public void test6()  throws Throwable  {
//       float[] floatArray0 = new float[3];
//       floatArray0[1] = 1786.8744F;
//       byte[] byteArray0 = new byte[10];
//       TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
//       boolean boolean0 = tFloatByteHashMap0.containsKey(1786.8744F);
//       assertEquals(23, tFloatByteHashMap0.capacity());
//       assertEquals(true, boolean0);
//       assertEquals(2, tFloatByteHashMap0.size());
//       assertEquals(0.0F, tFloatByteHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals(0, tFloatByteHashMap0.getNoEntryValue());
//   }

  //Test case number: 7
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TFloatByteHash.forEach(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 2 IFLE L192 - true
   * 2 gnu.trove.impl.hash.TFloatByteHash.forEach(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TFloatByteHash.forEach(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

//   @Test
//   public void test7()  throws Throwable  {
//       TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap((-1));
//       boolean boolean0 = tFloatByteHashMap0.forEachKey((TFloatProcedure) null);
//       assertEquals(0, tFloatByteHashMap0.getNoEntryValue());
//       assertEquals(0.0F, tFloatByteHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals(true, boolean0);
//   }

  //Test case number: 8
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TFloatByteHash.forEach(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - false
   * 2 gnu.trove.impl.hash.TFloatByteHash.forEach(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TFloatByteHash.forEach(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

  @Test
  public void test8()  throws Throwable  {
      float[] floatArray0 = new float[2];
      byte[] byteArray0 = new byte[9];
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      // Undeclared exception!
      try {
        tFloatByteHashMap0.forEachKey((TFloatProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 11 covered goals:
   * 1 gnu.trove.impl.hash.TFloatByteHash.index(F)I: I52 Branch 7 IFNE L231 - true
   * 2 gnu.trove.impl.hash.TFloatByteHash.indexRehashed(FIIB)I: I29 Branch 8 IFGE L245 - false
   * 3 gnu.trove.impl.hash.TFloatByteHash.indexRehashed(FIIB)I: I46 Branch 9 IFNE L250 - true
   * 4 gnu.trove.impl.hash.TFloatByteHash.indexRehashed(FIIB)I: I59 Branch 10 IFNE L254 - false
   * 5 gnu.trove.impl.hash.TFloatByteHash.indexRehashed(FIIB)I: I62 Branch 11 IF_ICMPEQ L254 - false
   * 6 gnu.trove.impl.hash.TFloatByteHash.insertKey(F)I: I57 Branch 15 IFNE L286 - true
   * 7 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 8 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I45 Branch 18 IFGE L310 - true
   * 9 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I45 Branch 18 IFGE L310 - false
   * 10 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I62 Branch 19 IFNE L316 - false
   * 11 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   */

  @Test
  public void test9()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[0] = (-239.8175F);
      floatArray0[1] = 1407.4021F;
      floatArray0[2] = 1.0F;
      byte[] byteArray0 = new byte[9];
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      tFloatByteHashMap0.compact();
      tFloatByteHashMap0.get(0.0F);
      assertEquals(11, tFloatByteHashMap0.capacity());
      assertEquals("{0.0=0, -239.8175=0, 1.0=0, 1407.4021=0}", tFloatByteHashMap0.toString());
  }

  //Test case number: 10
  /*
   * 5 covered goals:
   * 1 gnu.trove.impl.hash.TFloatByteHash.indexRehashed(FIIB)I: I59 Branch 10 IFNE L254 - true
   * 2 gnu.trove.impl.hash.TFloatByteHash.indexRehashed(FIIB)I: I71 Branch 12 IF_ICMPNE L256 - true
   * 3 gnu.trove.impl.hash.TFloatByteHash.indexRehashed(FIIB)I: I46 Branch 9 IFNE L250 - false
   * 4 gnu.trove.impl.hash.TFloatByteHash.indexRehashed(FIIB)I: I29 Branch 8 IFGE L245 - true
   * 5 gnu.trove.impl.hash.TFloatByteHash.index(F)I: I46 Branch 6 IF_ICMPNE L231 - true
   */

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(0);
      tFloatByteHashMap0._states = byteArray0;
      byte byte0 = tFloatByteHashMap0.remove((-1335.42F));
      assertEquals(8, tFloatByteHashMap0.capacity());
      assertEquals((byte)0, byte0);
  }

  //Test case number: 11
  /*
   * 7 covered goals:
   * 1 gnu.trove.impl.hash.TFloatByteHash.indexRehashed(FIIB)I: I71 Branch 12 IF_ICMPNE L256 - false
   * 2 gnu.trove.impl.hash.TFloatByteHash.indexRehashed(FIIB)I: I29 Branch 8 IFGE L245 - true
   * 3 gnu.trove.impl.hash.TFloatByteHash.indexRehashed(FIIB)I: I29 Branch 8 IFGE L245 - false
   * 4 gnu.trove.impl.hash.TFloatByteHash.indexRehashed(FIIB)I: I46 Branch 9 IFNE L250 - true
   * 5 gnu.trove.impl.hash.TFloatByteHash.indexRehashed(FIIB)I: I59 Branch 10 IFNE L254 - true
   * 6 gnu.trove.impl.hash.TFloatByteHash.indexRehashed(FIIB)I: I71 Branch 12 IF_ICMPNE L256 - true
   * 7 gnu.trove.impl.hash.TFloatByteHash.index(F)I: I46 Branch 6 IF_ICMPNE L231 - true
   */

//   @Test
//   public void test11()  throws Throwable  {
//       byte[] byteArray0 = new byte[8];
//       byteArray0[0] = (byte) (-1);
//       byteArray0[1] = (byte) (-1);
//       byteArray0[2] = (byte) (-1);
//       TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(0);
//       tFloatByteHashMap0._states = byteArray0;
//       tFloatByteHashMap0.remove((-1335.42F));
//       assertEquals(8, tFloatByteHashMap0.capacity());
//       assertEquals(0.0F, tFloatByteHashMap0.getNoEntryKey(), 0.01F);
//   }

  //Test case number: 12
  /*
   * 9 covered goals:
   * 1 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I31 Branch 17 IF_ICMPNE L306 - true
   * 2 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I121 Branch 24 IF_ICMPEQ L336 - false
   * 3 gnu.trove.impl.hash.TFloatByteHash.insertKey(F)I: I50 Branch 14 IF_ICMPNE L286 - true
   * 4 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 5 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 6 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I62 Branch 19 IFNE L316 - true
   * 7 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 8 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I116 Branch 23 IF_ICMPNE L332 - true
   * 9 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I116 Branch 23 IF_ICMPNE L332 - false
   */

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(0);
      tFloatByteHashMap0._states = byteArray0;
      tFloatByteHashMap0.put((float) 0, (byte)0);
      assertEquals(false, tFloatByteHashMap0.isEmpty());
      assertEquals(1, tFloatByteHashMap0.size());
  }

  //Test case number: 13
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I67 Branch 20 IF_ICMPEQ L317 - false
   * 2 gnu.trove.impl.hash.TFloatByteHash.removeAt(I)V: root-Branch
   * 3 gnu.trove.impl.hash.TFloatByteHash.insertKey(F)I: I57 Branch 15 IFNE L286 - false
   * 4 gnu.trove.impl.hash.TFloatByteHash.index(F)I: I37 Branch 5 IFNE L228 - true
   * 5 gnu.trove.impl.hash.TFloatByteHash.index(F)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 6 gnu.trove.impl.hash.TFloatByteHash.index(F)I: I52 Branch 7 IFNE L231 - false
   * 7 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 8 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   */

  @Test
  public void test13()  throws Throwable  {
      float[] floatArray0 = new float[17];
      floatArray0[3] = (-142.82437F);
      byte[] byteArray0 = new byte[7];
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(floatArray0, tFloatByteHashMap0._states);
      tFloatByteHashMap1.remove((-142.82437F));
      assertEquals(1, tFloatByteHashMap1.size());
      
      tFloatByteHashMap1.putAll((TFloatByteMap) tFloatByteHashMap0);
      assertTrue(tFloatByteHashMap1.equals(tFloatByteHashMap0));
  }

  //Test case number: 14
  /*
   * 5 covered goals:
   * 1 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I104 Branch 22 IFNE L327 - false
   * 2 gnu.trove.impl.hash.TFloatByteHash.insertKey(F)I: I30 Branch 13 IFNE L279 - false
   * 3 gnu.trove.impl.hash.TFloatByteHash.insertKey(F)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 4 gnu.trove.impl.hash.TFloatByteHash.insertKey(F)I: I57 Branch 15 IFNE L286 - true
   * 5 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   */

//   @Test
//   public void test14()  throws Throwable  {
//       float[] floatArray0 = new float[3];
//       floatArray0[0] = (-1.0F);
//       floatArray0[1] = 1786.8744F;
//       floatArray0[2] = 1786.8744F;
//       byte[] byteArray0 = new byte[10];
//       TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
//       assertEquals(0, tFloatByteHashMap0.getNoEntryValue());
//       assertEquals(0.0F, tFloatByteHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals("{-1.0=0, 1786.8744=0}", tFloatByteHashMap0.toString());
//       assertEquals(2, tFloatByteHashMap0.size());
//   }

  //Test case number: 15
  /*
   * 17 covered goals:
   * 1 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I121 Branch 24 IF_ICMPEQ L336 - true
   * 2 gnu.trove.impl.hash.TFloatByteHash.setUp(I)I: root-Branch
   * 3 gnu.trove.impl.hash.TFloatByteHash.<init>(I)V: root-Branch
   * 4 gnu.trove.impl.hash.TFloatByteHash.insertKeyAt(IF)V: root-Branch
   * 5 gnu.trove.impl.hash.TFloatByteHash.insertKey(F)I: I30 Branch 13 IFNE L279 - true
   * 6 gnu.trove.impl.hash.TFloatByteHash.insertKey(F)I: I50 Branch 14 IF_ICMPNE L286 - true
   * 7 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 8 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I45 Branch 18 IFGE L310 - true
   * 9 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I45 Branch 18 IFGE L310 - false
   * 10 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I62 Branch 19 IFNE L316 - true
   * 11 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I62 Branch 19 IFNE L316 - false
   * 12 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 13 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 14 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 15 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I104 Branch 22 IFNE L327 - true
   * 16 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I116 Branch 23 IF_ICMPNE L332 - true
   * 17 gnu.trove.impl.hash.TFloatByteHash.insertKeyRehash(FIIB)I: I116 Branch 23 IF_ICMPNE L332 - false
   */

  @Test
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(0);
      tFloatByteHashMap0._states = byteArray0;
      tFloatByteHashMap0.put((float) 0, (byte)0);
      // Undeclared exception!
      try {
        tFloatByteHashMap0.put(1655.2108F, (byte)0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No free or removed slots available. Key set full?!!
         //
      }
  }
}
