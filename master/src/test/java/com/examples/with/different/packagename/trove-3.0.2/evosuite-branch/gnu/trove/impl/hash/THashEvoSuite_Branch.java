/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TFloatCollection;
import gnu.trove.map.TByteLongMap;
import gnu.trove.map.TIntByteMap;
import gnu.trove.map.hash.TByteIntHashMap;
import gnu.trove.map.hash.TByteLongHashMap;
import gnu.trove.map.hash.TByteObjectHashMap;
import gnu.trove.map.hash.TByteShortHashMap;
import gnu.trove.map.hash.TCharFloatHashMap;
import gnu.trove.map.hash.TFloatDoubleHashMap;
import gnu.trove.map.hash.TFloatFloatHashMap;
import gnu.trove.map.hash.TFloatObjectHashMap;
import gnu.trove.map.hash.THashMap;
import gnu.trove.map.hash.TIntByteHashMap;
import gnu.trove.map.hash.TIntCharHashMap;
import gnu.trove.map.hash.TObjectCharHashMap;
import gnu.trove.map.hash.TShortCharHashMap;
import gnu.trove.map.hash.TShortObjectHashMap;
import gnu.trove.set.hash.TFloatHashSet;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class THashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.hash.THash.trimToSize()V: root-Branch
   * 2 gnu.trove.impl.hash.THash.computeMaxSize(I)V: root-Branch
   * 3 gnu.trove.impl.hash.THash.<init>()V: root-Branch
   * 4 gnu.trove.impl.hash.THash.setUp(I)I: root-Branch
   * 5 gnu.trove.impl.hash.THash.size()I: root-Branch
   * 6 gnu.trove.impl.hash.THash.<init>(IF)V: root-Branch
   * 7 gnu.trove.impl.hash.THash.compact()V: I31 Branch 3 IFEQ L206 - false
   * 8 gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V: I6 Branch 11 IFEQ L361 - false
   */

  @Test
  public void test0()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(1567);
      assertEquals(3203, tFloatDoubleHashMap0.capacity());
      
      tFloatDoubleHashMap0.trimToSize();
      assertEquals(3, tFloatDoubleHashMap0.capacity());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.THash.getAutoCompactionFactor()F: root-Branch
   */

//   @Test
//   public void test1()  throws Throwable  {
//       TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(0, (float) 0, 0, '%');
//       float float0 = tIntCharHashMap0.getAutoCompactionFactor();
//       assertEquals(0.5F, float0, 0.01F);
//       assertEquals(3, tIntCharHashMap0.capacity());
//   }

  //Test case number: 2
  /*
   * 7 covered goals:
   * 1 gnu.trove.impl.hash.THash.tempDisableAutoCompaction()V: root-Branch
   * 2 gnu.trove.impl.hash.THash.removeAt(I)V: I14 Branch 5 IFEQ L266 - false
   * 3 gnu.trove.impl.hash.THash.removeAt(I)V: I27 Branch 6 IFNE L269 - true
   * 4 gnu.trove.impl.hash.THash.reenableAutoCompaction(Z)V: I8 Branch 8 IFEQ L331 - true
   * 5 gnu.trove.impl.hash.THash.postInsertHook(Z)V: I3 Branch 12 IFEQ L377 - false
   * 6 gnu.trove.impl.hash.THash.postInsertHook(Z)V: I23 Branch 13 IF_ICMPGT L382 - false
   * 7 gnu.trove.impl.hash.THash.postInsertHook(Z)V: I26 Branch 14 IFNE L382 - true
   */

  @Test
  public void test2()  throws Throwable  {
      float[] floatArray0 = new float[7];
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(floatArray0);
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap((int) (byte)0, (float) (byte)0);
      TFloatCollection tFloatCollection0 = tFloatFloatHashMap0.valueCollection();
      tFloatHashSet0.retainAll(tFloatCollection0);
      assertEquals(true, tFloatHashSet0.isEmpty());
      assertEquals(0, tFloatHashSet0.size());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.THash.clear()V: root-Branch
   */

//   @Test
//   public void test3()  throws Throwable  {
//       TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>(32772);
//       tFloatObjectHashMap0.clear();
//       assertEquals(0.5F, tFloatObjectHashMap0.getAutoCompactionFactor(), 0.01F);
//       assertEquals(true, tFloatObjectHashMap0.isEmpty());
//       assertEquals(66923, tFloatObjectHashMap0.capacity());
//   }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.THash.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
      tCharFloatHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.THash.isEmpty()Z: I5 Branch 1 IF_ICMPNE L147 - true
   * 2 gnu.trove.impl.hash.THash.postInsertHook(Z)V: I23 Branch 13 IF_ICMPGT L382 - true
   * 3 gnu.trove.impl.hash.THash.postInsertHook(Z)V: I33 Branch 15 IF_ICMPLE L387 - false
   */

  @Test
  public void test5()  throws Throwable  {
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>(0, 0.0F);
      tShortObjectHashMap0.putIfAbsent((short) (-560), (Integer) 0);
      boolean boolean0 = tShortObjectHashMap0.isEmpty();
      assertEquals(1, tShortObjectHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.THash.isEmpty()Z: I5 Branch 1 IF_ICMPNE L147 - false
   * 2 gnu.trove.impl.hash.THash.<init>(I)V: root-Branch
   */

//   @Test
//   public void test6()  throws Throwable  {
//       TObjectCharHashMap<Object> tObjectCharHashMap0 = new TObjectCharHashMap<Object>((int) (byte)0);
//       boolean boolean0 = tObjectCharHashMap0.isEmpty();
//       assertEquals(true, boolean0);
//       assertEquals(3, tObjectCharHashMap0.capacity());
//       assertEquals(0.5F, tObjectCharHashMap0.getAutoCompactionFactor(), 0.01F);
//   }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.THash.ensureCapacity(I)V: I8 Branch 2 IF_ICMPLE L174 - true
   */

  @Test
  public void test7()  throws Throwable  {
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(32772);
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap((TByteLongMap) tByteLongHashMap0);
      assertEquals(0, tByteLongHashMap1.size());
      assertEquals(23, tByteLongHashMap1.capacity());
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.THash.ensureCapacity(I)V: I8 Branch 2 IF_ICMPLE L174 - false
   */

//   @Test
//   public void test8()  throws Throwable  {
//       TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-1777), (-1777));
//       TIntByteHashMap tIntByteHashMap1 = new TIntByteHashMap((TIntByteMap) tIntByteHashMap0);
//       assertEquals(0, tIntByteHashMap0.size());
//       assertEquals(0.5F, tIntByteHashMap0.getAutoCompactionFactor(), 0.01F);
//       assertEquals(3, tIntByteHashMap0.capacity());
//   }

  //Test case number: 9
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.THash.compact()V: I31 Branch 3 IFEQ L206 - true
   * 2 gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V: I6 Branch 11 IFEQ L361 - true
   */

//   @Test
//   public void test9()  throws Throwable  {
//       THashMap<Integer, Object> tHashMap0 = new THashMap<Integer, Object>((int) (byte)0, (float) (byte)0);
//       tHashMap0.compact();
//       assertEquals(3, tHashMap0.capacity());
//       assertEquals(0.0F, tHashMap0.getAutoCompactionFactor(), 0.01F);
//       assertEquals(0, tHashMap0.size());
//   }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.THash.setAutoCompactionFactor(F)V: I5 Branch 4 IFGE L224 - true
   */

//   @Test
//   public void test10()  throws Throwable  {
//       TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>();
//       tByteObjectHashMap0.setAutoCompactionFactor((float) (byte)0);
//       assertEquals(0.0F, tByteObjectHashMap0.getAutoCompactionFactor(), 0.01F);
//   }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.THash.setAutoCompactionFactor(F)V: I5 Branch 4 IFGE L224 - false
   */

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int[] intArray0 = new int[7];
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(byteArray0, intArray0);
      // Undeclared exception!
      try {
        tByteIntHashMap0.setAutoCompactionFactor((float) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1.0
         //
      }
  }

  //Test case number: 12
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.THash.removeAt(I)V: I27 Branch 6 IFNE L269 - false
   * 2 gnu.trove.impl.hash.THash.removeAt(I)V: I30 Branch 7 IFGT L269 - false
   */

  @Test
  public void test12()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(0);
      tShortCharHashMap0.put((short) (-560), '%');
      assertEquals("{-560=%}", tShortCharHashMap0.toString());
      
      tShortCharHashMap0.remove((short) (-560));
      assertEquals(0, tShortCharHashMap0.size());
  }

  //Test case number: 13
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.THash.removeAt(I)V: I30 Branch 7 IFGT L269 - true
   * 2 gnu.trove.impl.hash.THash.removeAt(I)V: I14 Branch 5 IFEQ L266 - false
   * 3 gnu.trove.impl.hash.THash.removeAt(I)V: I27 Branch 6 IFNE L269 - false
   * 4 gnu.trove.impl.hash.THash.postInsertHook(Z)V: I3 Branch 12 IFEQ L377 - false
   * 5 gnu.trove.impl.hash.THash.postInsertHook(Z)V: I23 Branch 13 IF_ICMPGT L382 - false
   * 6 gnu.trove.impl.hash.THash.postInsertHook(Z)V: I26 Branch 14 IFNE L382 - true
   */

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[1] = (byte) (-18);
      short[] shortArray0 = new short[2];
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      tByteShortHashMap0.remove((byte) (-18));
      assertEquals(1, tByteShortHashMap0.size());
  }

  //Test case number: 14
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.THash.reenableAutoCompaction(Z)V: I8 Branch 8 IFEQ L331 - false
   * 2 gnu.trove.impl.hash.THash.reenableAutoCompaction(Z)V: I11 Branch 9 IFGT L331 - true
   */

  @Test
  public void test14()  throws Throwable  {
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(32772);
      tByteLongHashMap0.reenableAutoCompaction(true);
      assertEquals(66923, tByteLongHashMap0.capacity());
  }

  //Test case number: 15
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.THash.reenableAutoCompaction(Z)V: I11 Branch 9 IFGT L331 - false
   * 2 gnu.trove.impl.hash.THash.reenableAutoCompaction(Z)V: I16 Branch 10 IFEQ L331 - false
   * 3 gnu.trove.impl.hash.THash.<init>()V: root-Branch
   * 4 gnu.trove.impl.hash.THash.size()I: root-Branch
   * 5 gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V: I6 Branch 11 IFEQ L361 - false
   * 6 gnu.trove.impl.hash.THash.compact()V: I31 Branch 3 IFEQ L206 - false
   */

//   @Test
//   public void test15()  throws Throwable  {
//       TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(0, (float) 0, 0, '%');
//       assertEquals(3, tIntCharHashMap0.capacity());
//       
//       tIntCharHashMap0.reenableAutoCompaction(true);
//       assertEquals(0.5F, tIntCharHashMap0.getAutoCompactionFactor(), 0.01F);
//       assertEquals(0, tIntCharHashMap0.size());
//   }

  //Test case number: 16
  /*
   * 7 covered goals:
   * 1 gnu.trove.impl.hash.THash.reenableAutoCompaction(Z)V: I16 Branch 10 IFEQ L331 - true
   * 2 gnu.trove.impl.hash.THash.computeMaxSize(I)V: root-Branch
   * 3 gnu.trove.impl.hash.THash.setUp(I)I: root-Branch
   * 4 gnu.trove.impl.hash.THash.<init>(IF)V: root-Branch
   * 5 gnu.trove.impl.hash.THash.reenableAutoCompaction(Z)V: I8 Branch 8 IFEQ L331 - false
   * 6 gnu.trove.impl.hash.THash.reenableAutoCompaction(Z)V: I11 Branch 9 IFGT L331 - false
   * 7 gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V: I6 Branch 11 IFEQ L361 - true
   */

//   @Test
//   public void test16()  throws Throwable  {
//       TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(1266, (float) (byte)0);
//       tObjectCharHashMap0.reenableAutoCompaction(true);
//       assertEquals(3, tObjectCharHashMap0.capacity());
//       assertEquals(0.0F, tObjectCharHashMap0.getAutoCompactionFactor(), 0.01F);
//   }
}
