/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TCharFunction;
import gnu.trove.map.TDoubleCharMap;
import gnu.trove.map.hash.TDoubleCharHashMap;
import gnu.trove.procedure.TCharProcedure;
import gnu.trove.procedure.TDoubleCharProcedure;
import gnu.trove.procedure.TDoubleProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleCharHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TDoubleCharHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TDoubleCharHashMap.setUp(I)I: root-Branch
   * 4 gnu.trove.map.hash.TDoubleCharHashMap.keySet()Lgnu/trove/set/TDoubleSet;: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      tDoubleCharHashMap0.keySet();
      assertEquals(23, tDoubleCharHashMap0.capacity());
  }

  //Test case number: 1
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.remove(D)C: I14 Branch 46 IFLT L276 - false
   * 3 gnu.trove.map.hash.TDoubleCharHashMap.put(DC)C: root-Branch
   * 4 gnu.trove.map.hash.TDoubleCharHashMap.<init>([D[C)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 5 gnu.trove.map.hash.TDoubleCharHashMap.<init>([D[C)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 6 gnu.trove.map.hash.TDoubleCharHashMap.doPut(DCI)C: I12 Branch 40 IFGE L214 - true
   * 7 gnu.trove.map.hash.TDoubleCharHashMap.doPut(DCI)C: I12 Branch 40 IFGE L214 - false
   * 8 gnu.trove.map.hash.TDoubleCharHashMap.doPut(DCI)C: I41 Branch 41 IFEQ L221 - true
   * 9 gnu.trove.map.hash.TDoubleCharHashMap.doPut(DCI)C: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (-1.0F);
      char[] charArray0 = new char[23];
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      assertEquals("{-1.0=\u0000, 0.0=\u0000}", tDoubleCharHashMap0.toString());
      
      char char0 = tDoubleCharHashMap0.remove((-1.0));
      assertEquals("{0.0=\u0000}", tDoubleCharHashMap0.toString());
      assertEquals('\u0000', char0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.clear()V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      tDoubleCharHashMap0.clear();
      assertEquals(23, tDoubleCharHashMap0.capacity());
      assertEquals("{}", tDoubleCharHashMap0.toString());
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.valueCollection()Lgnu/trove/TCharCollection;: root-Branch
   * 2 gnu.trove.map.hash.TDoubleCharHashMap$TValueView.<init>(Lgnu/trove/map/hash/TDoubleCharHashMap;)V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      tDoubleCharHashMap0.valueCollection();
      assertEquals(23, tDoubleCharHashMap0.capacity());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.increment(D)Z: root-Branch
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.adjustValue(DC)Z: I9 Branch 71 IFGE L477 - false
   */

  @Test
  public void test4()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      boolean boolean0 = tDoubleCharHashMap0.increment((double) 'S');
      assertEquals(23, tDoubleCharHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.containsKey(D)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      tDoubleCharHashMap0.containsKey(0.0);
      assertEquals(23, tDoubleCharHashMap0.capacity());
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap((-165), (-165));
      boolean boolean0 = tDoubleCharHashMap0.forEachKey((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 7
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.<init>(Lgnu/trove/map/TDoubleCharMap;)V: I10 Branch 34 IFEQ L133 - false
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.<init>(Lgnu/trove/map/TDoubleCharMap;)V: I40 Branch 35 IFEQ L139 - true
   * 3 gnu.trove.map.hash.TDoubleCharHashMap.<init>(Lgnu/trove/map/TDoubleCharMap;)V: I52 Branch 36 IFEQ L143 - true
   * 4 gnu.trove.map.hash.TDoubleCharHashMap$TDoubleCharHashIterator.<init>(Lgnu/trove/map/hash/TDoubleCharHashMap;Lgnu/trove/map/hash/TDoubleCharHashMap;)V: root-Branch
   * 5 gnu.trove.map.hash.TDoubleCharHashMap.iterator()Lgnu/trove/iterator/TDoubleCharIterator;: root-Branch
   * 6 gnu.trove.map.hash.TDoubleCharHashMap.putAll(Lgnu/trove/map/TDoubleCharMap;)V: I15 Branch 43 IFEQ L243 - true
   */

  @Test
  public void test7()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap((TDoubleCharMap) tDoubleCharHashMap0);
      assertEquals(0.0, tDoubleCharHashMap1.getNoEntryKey(), 0.01D);
      assertEquals(23, tDoubleCharHashMap1.capacity());
  }

  //Test case number: 8
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.<init>(Lgnu/trove/map/TDoubleCharMap;)V: I40 Branch 35 IFEQ L139 - false
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.<init>(Lgnu/trove/map/TDoubleCharMap;)V: I52 Branch 36 IFEQ L143 - false
   * 3 gnu.trove.map.hash.TDoubleCharHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 4 gnu.trove.map.hash.TDoubleCharHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 5 gnu.trove.map.hash.TDoubleCharHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 6 gnu.trove.map.hash.TDoubleCharHashMap.<init>(IFDC)V: root-Branch
   * 7 gnu.trove.map.hash.TDoubleCharHashMap.<init>(Lgnu/trove/map/TDoubleCharMap;)V: I10 Branch 34 IFEQ L133 - false
   */

  @Test
  public void test8()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(31, (-1.0F), (-1.0), 't');
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap((TDoubleCharMap) tDoubleCharHashMap0);
      assertEquals('t', tDoubleCharHashMap1.getNoEntryValue());
      assertEquals(3, tDoubleCharHashMap1.capacity());
      assertEquals(3, tDoubleCharHashMap0.capacity());
      assertEquals((-1.0), tDoubleCharHashMap1.getNoEntryKey(), 0.01D);
  }

  //Test case number: 9
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 3 gnu.trove.map.hash.TDoubleCharHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 4 gnu.trove.map.hash.TDoubleCharHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 5 gnu.trove.map.hash.TDoubleCharHashMap$TDoubleCharHashIterator.key()D: root-Branch
   * 6 gnu.trove.map.hash.TDoubleCharHashMap$TDoubleCharHashIterator.advance()V: root-Branch
   * 7 gnu.trove.map.hash.TDoubleCharHashMap$TDoubleCharHashIterator.value()C: root-Branch
   * 8 gnu.trove.map.hash.TDoubleCharHashMap.putAll(Lgnu/trove/map/TDoubleCharMap;)V: I15 Branch 43 IFEQ L243 - false
   */

  @Test
  public void test9()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      char[] charArray0 = new char[3];
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap(tDoubleCharHashMap0._set, charArray0);
      tDoubleCharHashMap0.putAll((TDoubleCharMap) tDoubleCharHashMap1);
      tDoubleCharHashMap0.trimToSize();
      assertEquals(1, tDoubleCharHashMap0.size());
      assertEquals("{0.0=\u0000}", tDoubleCharHashMap0.toString());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.putIfAbsent(DC)C: I9 Branch 39 IFGE L205 - false
   */

  @Test
  public void test10()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      char[] charArray0 = new char[3];
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap(tDoubleCharHashMap0._set, charArray0);
      tDoubleCharHashMap0.putAll((TDoubleCharMap) tDoubleCharHashMap1);
      char char0 = tDoubleCharHashMap0.putIfAbsent(0.0, 'G');
      assertEquals(false, tDoubleCharHashMap0.isEmpty());
      assertEquals('\u0000', char0);
  }

  //Test case number: 11
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - false
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      HashMap<Double, Character> hashMap0 = new HashMap<Double, Character>();
      hashMap0.put((Double) (-1505.117611741421), (Character) '\u0000');
      tDoubleCharHashMap0.putAll((Map<? extends Double, ? extends Character>) hashMap0);
      assertEquals("{-1505.117611741421=\u0000}", tDoubleCharHashMap0.toString());
      assertEquals(false, tDoubleCharHashMap0.isEmpty());
  }

  //Test case number: 12
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.get(D)C: I9 Branch 44 IFGE L253 - false
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap((-165), (-165));
      char char0 = tDoubleCharHashMap0.get((double) '\u0000');
      assertEquals('\u0000', char0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      char[] charArray0 = new char[3];
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap(tDoubleCharHashMap0._set, charArray0);
      tDoubleCharHashMap0.putAll((TDoubleCharMap) tDoubleCharHashMap1);
      boolean boolean0 = tDoubleCharHashMap0.isEmpty();
      assertEquals(1, tDoubleCharHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test14()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      boolean boolean0 = tDoubleCharHashMap0.isEmpty();
      assertEquals(true, boolean0);
      assertEquals(23, tDoubleCharHashMap0.capacity());
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.remove(D)C: I14 Branch 46 IFLT L276 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      char char0 = tDoubleCharHashMap0.remove((double) 0);
      assertEquals('\u0000', char0);
      assertEquals(23, tDoubleCharHashMap0.capacity());
      assertEquals(true, tDoubleCharHashMap0.isEmpty());
  }

  //Test case number: 16
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.keys()[D: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.keys()[D: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TDoubleCharHashMap.keys()[D: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TDoubleCharHashMap.keys()[D: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      tDoubleCharHashMap0.put(Double.POSITIVE_INFINITY, '~');
      tDoubleCharHashMap0.keys();
      assertEquals(false, tDoubleCharHashMap0.isEmpty());
      assertEquals("{Infinity=~}", tDoubleCharHashMap0.toString());
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.keys([D)[D: I10 Branch 49 IF_ICMPGE L315 - true
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.keys([D)[D: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TDoubleCharHashMap.keys([D)[D: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TDoubleCharHashMap.keys([D)[D: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      double[] doubleArray0 = tDoubleCharHashMap0.keys(tDoubleCharHashMap0._set);
      assertEquals(23, tDoubleCharHashMap0.capacity());
      assertNotNull(doubleArray0);
  }

  //Test case number: 18
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.keys([D)[D: I10 Branch 49 IF_ICMPGE L315 - false
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.keys([D)[D: I44 Branch 51 IF_ICMPNE L323 - false
   * 3 gnu.trove.map.hash.TDoubleCharHashMap.keys([D)[D: I37 Branch 50 IFLE L322 - true
   * 4 gnu.trove.map.hash.TDoubleCharHashMap.keys([D)[D: I37 Branch 50 IFLE L322 - false
   * 5 gnu.trove.map.hash.TDoubleCharHashMap.keys([D)[D: I44 Branch 51 IF_ICMPNE L323 - true
   * 6 gnu.trove.map.hash.TDoubleCharHashMap.putIfAbsent(DC)C: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      tDoubleCharHashMap0.put(1470.3496784216782, '+');
      tDoubleCharHashMap0.put(177.33649766445055, 'C');
      tDoubleCharHashMap0.putIfAbsent((double) '+', 'S');
      double[] doubleArray0 = new double[2];
      tDoubleCharHashMap0.keys(doubleArray0);
      assertEquals(false, tDoubleCharHashMap0.isEmpty());
      assertEquals("{1470.3496784216782=+, 43.0=S, 177.33649766445055=C}", tDoubleCharHashMap0.toString());
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.values()[C: I34 Branch 53 IF_ICMPNE L344 - false
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.values()[C: I27 Branch 52 IFLE L343 - true
   * 3 gnu.trove.map.hash.TDoubleCharHashMap.values()[C: I27 Branch 52 IFLE L343 - false
   * 4 gnu.trove.map.hash.TDoubleCharHashMap.values()[C: I34 Branch 53 IF_ICMPNE L344 - true
   */

  @Test
  public void test19()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      char[] charArray0 = new char[3];
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap(tDoubleCharHashMap0._set, charArray0);
      tDoubleCharHashMap0.putAll((TDoubleCharMap) tDoubleCharHashMap1);
      tDoubleCharHashMap0.values();
      assertEquals(false, tDoubleCharHashMap0.isEmpty());
      assertEquals("{0.0=\u0000}", tDoubleCharHashMap0.toString());
  }

  //Test case number: 20
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.values([C)[C: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.values([C)[C: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TDoubleCharHashMap.values([C)[C: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TDoubleCharHashMap.values([C)[C: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      char[] charArray0 = new char[3];
      char[] charArray1 = tDoubleCharHashMap0.values(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertEquals(23, tDoubleCharHashMap0.capacity());
  }

  //Test case number: 21
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.values([C)[C: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.values([C)[C: I44 Branch 56 IF_ICMPNE L363 - false
   * 3 gnu.trove.map.hash.TDoubleCharHashMap.values([C)[C: I37 Branch 55 IFLE L362 - true
   * 4 gnu.trove.map.hash.TDoubleCharHashMap.values([C)[C: I37 Branch 55 IFLE L362 - false
   * 5 gnu.trove.map.hash.TDoubleCharHashMap.values([C)[C: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      char[] charArray0 = new char[3];
      tDoubleCharHashMap0.put(1470.3496784216782, '+');
      tDoubleCharHashMap0.put(177.33649766445055, 'C');
      tDoubleCharHashMap0.putIfAbsent((double) '+', 'S');
      tDoubleCharHashMap0.put((double) 'S', 'p');
      tDoubleCharHashMap0.values(charArray0);
      assertEquals(false, tDoubleCharHashMap0.isEmpty());
      assertEquals("{1470.3496784216782=+, 43.0=S, 83.0=p, 177.33649766445055=C}", tDoubleCharHashMap0.toString());
  }

  //Test case number: 22
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.containsValue(C)Z: I18 Branch 57 IFLE L376 - true
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.containsValue(C)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TDoubleCharHashMap.containsValue(C)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 4 gnu.trove.map.hash.TDoubleCharHashMap.containsValue(C)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 5 gnu.trove.map.hash.TDoubleCharHashMap.containsValue(C)Z: I30 Branch 59 IF_ICMPNE L377 - true
   */

  @Test
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      char[] charArray0 = new char[23];
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      boolean boolean0 = tDoubleCharHashMap0.containsValue('$');
      assertEquals("{0.0=\u0000}", tDoubleCharHashMap0.toString());
      assertEquals(false, boolean0);
      assertEquals(1, tDoubleCharHashMap0.size());
      assertEquals(47, tDoubleCharHashMap0.capacity());
  }

  //Test case number: 23
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.containsValue(C)Z: I30 Branch 59 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.containsValue(C)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TDoubleCharHashMap.containsValue(C)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 4 gnu.trove.map.hash.TDoubleCharHashMap.containsValue(C)Z: I25 Branch 58 IF_ICMPNE L377 - false
   */

  @Test
  public void test23()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      tDoubleCharHashMap0.putIfAbsent((double) 239, '&');
      boolean boolean0 = tDoubleCharHashMap0.containsValue('&');
      assertEquals(false, tDoubleCharHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TDoubleCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      boolean boolean0 = tDoubleCharHashMap0.forEachValue((TCharProcedure) null);
      assertEquals(23, tDoubleCharHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TDoubleCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test25()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      tDoubleCharHashMap0.putIfAbsent((-1748.2407151244126), 'k');
      // Undeclared exception!
      try {
        tDoubleCharHashMap0.forEachValue((TCharProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TDoubleCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      tDoubleCharHashMap0.transformValues((TCharFunction) null);
      assertEquals(23, tDoubleCharHashMap0.capacity());
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TDoubleCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      char[] charArray0 = new char[6];
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      // Undeclared exception!
      try {
        tDoubleCharHashMap0.transformValues((TCharFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.retainEntries(Lgnu/trove/procedure/TDoubleCharProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.retainEntries(Lgnu/trove/procedure/TDoubleCharProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TDoubleCharHashMap.retainEntries(Lgnu/trove/procedure/TDoubleCharProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      boolean boolean0 = tDoubleCharHashMap0.retainEntries((TDoubleCharProcedure) null);
      assertEquals(23, tDoubleCharHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 29
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.retainEntries(Lgnu/trove/procedure/TDoubleCharProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.retainEntries(Lgnu/trove/procedure/TDoubleCharProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TDoubleCharHashMap.retainEntries(Lgnu/trove/procedure/TDoubleCharProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test29()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      tDoubleCharHashMap0.put((double) '%', '%');
      // Undeclared exception!
      try {
        tDoubleCharHashMap0.retainEntries((TDoubleCharProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.adjustValue(DC)Z: I9 Branch 71 IFGE L477 - true
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.increment(D)Z: root-Branch
   */

  @Test
  public void test30()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      tDoubleCharHashMap0.put((double) 'S', 'p');
      boolean boolean0 = tDoubleCharHashMap0.increment((double) 'S');
      assertEquals(1, tDoubleCharHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 31
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.adjustOrPutValue(DCC)C: I9 Branch 72 IFGE L491 - true
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.adjustOrPutValue(DCC)C: I59 Branch 73 IFEQ L502 - false
   */

  @Test
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      char[] charArray0 = new char[23];
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      char char0 = tDoubleCharHashMap0.adjustOrPutValue((double) '-', '-', 't');
      assertEquals("{45.0=t, 0.0=\u0000}", tDoubleCharHashMap0.toString());
      assertEquals('t', char0);
  }

  //Test case number: 32
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.adjustOrPutValue(DCC)C: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.adjustOrPutValue(DCC)C: I59 Branch 73 IFEQ L502 - true
   */

  @Test
  public void test32()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      char[] charArray0 = new char[9];
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap(tDoubleCharHashMap0._set, charArray0);
      char char0 = tDoubleCharHashMap1.adjustOrPutValue(0.0, 'k', 'k');
      assertEquals("{0.0=k}", tDoubleCharHashMap1.toString());
      assertEquals('k', char0);
  }

  //Test case number: 33
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   */

  @Test
  public void test33()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      boolean boolean0 = tDoubleCharHashMap0.equals((Object) null);
      assertEquals(23, tDoubleCharHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 34
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.<init>(I)V: root-Branch
   * 3 gnu.trove.map.hash.TDoubleCharHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   */

  @Test
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      char[] charArray0 = new char[23];
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap((-11));
      boolean boolean0 = tDoubleCharHashMap0.equals((Object) tDoubleCharHashMap1);
      assertEquals(47, tDoubleCharHashMap0.capacity());
      assertEquals(false, boolean0);
      assertEquals("{0.0=\u0000}", tDoubleCharHashMap0.toString());
      assertEquals(1, tDoubleCharHashMap0.size());
      assertFalse(tDoubleCharHashMap1.equals(tDoubleCharHashMap0));
  }

  //Test case number: 35
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - true
   * 3 gnu.trove.map.hash.TDoubleCharHashMap.get(D)C: I9 Branch 44 IFGE L253 - true
   * 4 gnu.trove.map.hash.TDoubleCharHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 5 gnu.trove.map.hash.TDoubleCharHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 6 gnu.trove.map.hash.TDoubleCharHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 7 gnu.trove.map.hash.TDoubleCharHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 8 gnu.trove.map.hash.TDoubleCharHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   */

  @Test
  public void test35()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      tDoubleCharHashMap0.put((double) (-844), '9');
      boolean boolean0 = tDoubleCharHashMap0.equals((Object) tDoubleCharHashMap0);
      assertEquals(false, tDoubleCharHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 36
  /*
   * 11 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 2 gnu.trove.map.hash.TDoubleCharHashMap$TDoubleCharHashIterator.key()D: root-Branch
   * 3 gnu.trove.map.hash.TDoubleCharHashMap$TDoubleCharHashIterator.<init>(Lgnu/trove/map/hash/TDoubleCharHashMap;Lgnu/trove/map/hash/TDoubleCharHashMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TDoubleCharHashMap$TDoubleCharHashIterator.advance()V: root-Branch
   * 5 gnu.trove.map.hash.TDoubleCharHashMap$TDoubleCharHashIterator.value()C: root-Branch
   * 6 gnu.trove.map.hash.TDoubleCharHashMap.iterator()Lgnu/trove/iterator/TDoubleCharIterator;: root-Branch
   * 7 gnu.trove.map.hash.TDoubleCharHashMap.putAll(Lgnu/trove/map/TDoubleCharMap;)V: I15 Branch 43 IFEQ L243 - true
   * 8 gnu.trove.map.hash.TDoubleCharHashMap.putAll(Lgnu/trove/map/TDoubleCharMap;)V: I15 Branch 43 IFEQ L243 - false
   * 9 gnu.trove.map.hash.TDoubleCharHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 10 gnu.trove.map.hash.TDoubleCharHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 11 gnu.trove.map.hash.TDoubleCharHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   */

  @Test
  public void test36()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      char[] charArray0 = new char[3];
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap(tDoubleCharHashMap0._set, charArray0);
      tDoubleCharHashMap0.putAll((TDoubleCharMap) tDoubleCharHashMap1);
      int int0 = tDoubleCharHashMap0.hashCode();
      assertEquals("{0.0=\u0000}", tDoubleCharHashMap0.toString());
      assertEquals(0, int0);
  }

  //Test case number: 37
  /*
   * 14 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap$1.execute(DC)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.toString()Ljava/lang/String;: root-Branch
   * 3 gnu.trove.map.hash.TDoubleCharHashMap.put(DC)C: root-Branch
   * 4 gnu.trove.map.hash.TDoubleCharHashMap.<init>([D[C)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 5 gnu.trove.map.hash.TDoubleCharHashMap.<init>([D[C)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 6 gnu.trove.map.hash.TDoubleCharHashMap.forEachEntry(Lgnu/trove/procedure/TDoubleCharProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 7 gnu.trove.map.hash.TDoubleCharHashMap.forEachEntry(Lgnu/trove/procedure/TDoubleCharProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 8 gnu.trove.map.hash.TDoubleCharHashMap.forEachEntry(Lgnu/trove/procedure/TDoubleCharProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 9 gnu.trove.map.hash.TDoubleCharHashMap.forEachEntry(Lgnu/trove/procedure/TDoubleCharProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 10 gnu.trove.map.hash.TDoubleCharHashMap.forEachEntry(Lgnu/trove/procedure/TDoubleCharProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 11 gnu.trove.map.hash.TDoubleCharHashMap.doPut(DCI)C: I12 Branch 40 IFGE L214 - false
   * 12 gnu.trove.map.hash.TDoubleCharHashMap.doPut(DCI)C: I41 Branch 41 IFEQ L221 - true
   * 13 gnu.trove.map.hash.TDoubleCharHashMap$1.<init>(Lgnu/trove/map/hash/TDoubleCharHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 14 gnu.trove.map.hash.TDoubleCharHashMap$1.execute(DC)Z: I4 Branch 115 IFEQ L1233 - false
   */

  @Test
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (-1.0F);
      char[] charArray0 = new char[23];
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      String string0 = tDoubleCharHashMap0.toString();
      assertEquals(47, tDoubleCharHashMap0.capacity());
      assertNotNull(string0);
      assertEquals(2, tDoubleCharHashMap0.size());
      assertEquals("{-1.0=\u0000, 0.0=\u0000}", string0);
  }

  //Test case number: 38
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TDoubleCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 2 gnu.trove.map.hash.TDoubleCharHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TDoubleCharHashMap.setUp(I)I: root-Branch
   * 4 gnu.trove.map.hash.TDoubleCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 5 gnu.trove.map.hash.TDoubleCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 6 gnu.trove.map.hash.TDoubleCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 7 gnu.trove.map.hash.TDoubleCharHashMap.doPut(DCI)C: I12 Branch 40 IFGE L214 - true
   * 8 gnu.trove.map.hash.TDoubleCharHashMap.doPut(DCI)C: I41 Branch 41 IFEQ L221 - false
   * 9 gnu.trove.map.hash.TDoubleCharHashMap.putIfAbsent(DC)C: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test38()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      tDoubleCharHashMap0.putIfAbsent((double) 239, '&');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PrintStream printStream0 = new PrintStream((OutputStream) byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      tDoubleCharHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(1, tDoubleCharHashMap0.size());
      assertEquals("{239.0=&}", tDoubleCharHashMap0.toString());
  }
}
