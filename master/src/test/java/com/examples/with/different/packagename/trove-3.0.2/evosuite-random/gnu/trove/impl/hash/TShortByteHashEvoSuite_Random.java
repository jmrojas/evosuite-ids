/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TShortByteMap;
import gnu.trove.map.hash.TShortByteHashMap;
import gnu.trove.procedure.TShortProcedure;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.StreamCorruptedException;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortByteHashEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


//   @Test
//   public void test0()  throws Throwable  {
//       short[] shortArray0 = new short[7];
//       short short0 = (short)0;
//       shortArray0[0] = short0;
//       short short1 = (short) (-1);
//       shortArray0[1] = short1;
//       short short2 = (short) (-327);
//       shortArray0[2] = short2;
//       short short3 = (short)1697;
//       shortArray0[3] = short3;
//       short short4 = (short) (-1);
//       shortArray0[4] = short4;
//       short short5 = (short) (-1);
//       shortArray0[5] = short5;
//       short short6 = (short)1048;
//       shortArray0[6] = short6;
//       byte[] byteArray0 = new byte[5];
//       byte byte0 = (byte) (-12);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte) (-2);
//       byteArray0[1] = byte1;
//       byte byte2 = (byte) (-59);
//       byteArray0[2] = byte2;
//       byte byte3 = (byte) (-29);
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)0;
//       byteArray0[4] = byte4;
//       TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(shortArray0, byteArray0);
//       assertEquals("{1697=-29, -1=0, -327=-59, 0=-12}", tShortByteHashMap0.toString());
//       
//       tShortByteHashMap0._states = byteArray0;
//       assertEquals(0, tShortByteHashMap0.getNoEntryKey());
//       assertEquals(0, tShortByteHashMap0.getNoEntryValue());
//       assertEquals(4, tShortByteHashMap0.size());
//   }

  @Test
  public void test1()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short)26997;
      shortArray0[0] = short0;
      short short1 = (short) (-1395);
      shortArray0[1] = short1;
      short short2 = (short)595;
      shortArray0[2] = short2;
      short short3 = (short) (-475);
      shortArray0[3] = short3;
      short short4 = (short) (-1353);
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short) (-1);
      shortArray0[6] = short6;
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte) (-113);
      byteArray0[0] = byte0;
      byte byte1 = (byte)125;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-108);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-11);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-69);
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-1);
      byteArray0[8] = byte8;
      byte byte9 = (byte)79;
      byteArray0[9] = byte9;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(shortArray0, byteArray0);
      short short7 = (short)988;
      tShortByteHashMap0.putIfAbsent(short7, byte0);
      assertEquals(8, tShortByteHashMap0.size());
      
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap();
      TShortByteHashMap tShortByteHashMap2 = new TShortByteHashMap(tShortByteHashMap1._set, tShortByteHashMap1._states);
      tShortByteHashMap1.valueCollection();
      assertFalse(tShortByteHashMap1.equals(tShortByteHashMap2));
  }

  @Test
  public void test2()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      int int0 = (-250);
      tShortByteHashMap0.ensureCapacity(int0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tShortByteHashMap0._states);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 00000000
         //
      }
  }

//   @Test
//   public void test3()  throws Throwable  {
//       short[] shortArray0 = new short[8];
//       short short0 = (short) (-1);
//       shortArray0[0] = short0;
//       short short1 = (short) (-1);
//       shortArray0[1] = short1;
//       short short2 = (short) (-1);
//       shortArray0[2] = short2;
//       short short3 = (short)0;
//       shortArray0[3] = short3;
//       short short4 = (short)10243;
//       shortArray0[4] = short4;
//       short short5 = (short) (-1163);
//       shortArray0[5] = short5;
//       short short6 = (short)0;
//       shortArray0[6] = short6;
//       short short7 = (short)0;
//       shortArray0[7] = short7;
//       byte[] byteArray0 = new byte[7];
//       byte byte0 = (byte)55;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte) (-28);
//       byteArray0[1] = byte1;
//       byte byte2 = (byte) (-128);
//       byteArray0[2] = byte2;
//       byte byte3 = (byte)0;
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)89;
//       byteArray0[4] = byte4;
//       byte byte5 = (byte)0;
//       byteArray0[5] = byte5;
//       byte byte6 = (byte) (-101);
//       byteArray0[6] = byte6;
//       TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(shortArray0, byteArray0);
//       tShortByteHashMap0.compact();
//       assertEquals(11, tShortByteHashMap0.capacity());
//       
//       int int0 = 1688;
//       TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap(int0);
//       byte byte7 = (byte)0;
//       tShortByteHashMap1.containsValue(byte7);
//       assertEquals(0, tShortByteHashMap1.getNoEntryKey());
//   }

//   @Test
//   public void test4()  throws Throwable  {
//       int int0 = 0;
//       short short0 = (short)121;
//       float float0 = 1300.9972F;
//       byte byte0 = (byte)0;
//       TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(int0, float0, short0, byte0);
//       tShortByteHashMap0.hashCode();
//       byte byte1 = (byte)1;
//       TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap(int0, (float) int0, short0, byte1);
//       tShortByteHashMap1.tempDisableAutoCompaction();
//       int int1 = 0;
//       float float1 = 0.5F;
//       short short1 = (short)0;
//       short short2 = (short) (-788);
//       boolean boolean0 = tShortByteHashMap1.containsKey(short2);
//       assertEquals(false, boolean0);
//       
//       byte byte2 = (byte)0;
//       TShortByteHashMap tShortByteHashMap2 = new TShortByteHashMap(int1, float1, short1, byte2);
//       tShortByteHashMap1.setAutoCompactionFactor((float) short0);
//       byte byte3 = tShortByteHashMap2.remove(short1);
//       assertEquals((byte)0, byte3);
//       
//       tShortByteHashMap1.hashCode();
//       assertEquals(1, tShortByteHashMap1.getNoEntryValue());
//       assertEquals(121, tShortByteHashMap1.getNoEntryKey());
//       
//       float float2 = 0.0F;
//       tShortByteHashMap2.setAutoCompactionFactor(float2);
//       assertEquals(0, tShortByteHashMap2.size());
//       assertTrue(tShortByteHashMap2.equals(tShortByteHashMap1));
//   }

  @Test
  public void test5()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)75;
      int int0 = (-349);
      tShortByteHashMap0.ensureCapacity(int0);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      tShortByteHashMap0.capacity();
      byteArray0[2] = byte2;
      tShortByteHashMap0.hashCode();
      byte byte3 = (byte)2;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      String string0 = " greater than last index ";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         //  greater than last index 
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short)797;
      shortArray0[0] = short0;
      short short1 = (short) (-435);
      shortArray0[1] = short1;
      int int0 = 0;
      float float0 = 0.0F;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(int0, float0);
      int int1 = 0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tShortByteHashMap0._states, int1, (int) shortArray0[0]);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test7()  throws Throwable  {
//       int int0 = (-1987);
//       short short0 = (short)210;
//       byte byte0 = (byte)21;
//       TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(int0, (float) int0, short0, byte0);
//       int int1 = (-1978);
//       tShortByteHashMap0.ensureCapacity(int1);
//       short short1 = (short)153;
//       byte byte1 = (byte) (-55);
//       tShortByteHashMap0.valueCollection();
//       tShortByteHashMap0.containsValue(byte0);
//       TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap(int0, (float) int0, short1, byte1);
//       byte byte2 = tShortByteHashMap0.getNoEntryValue();
//       assertEquals((byte)21, byte2);
//       
//       boolean boolean0 = tShortByteHashMap1.contains(short1);
//       assertEquals(153, tShortByteHashMap1.getNoEntryKey());
//       assertEquals(false, boolean0);
//   }

  @Test
  public void test8()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)459;
      shortArray0[1] = short1;
      short short2 = (short) (-1);
      shortArray0[2] = short2;
      short short3 = (short) (-618);
      shortArray0[3] = short3;
      short short4 = (short) (-1204);
      shortArray0[4] = short4;
      short short5 = (short)1;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)93;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-19);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte)26;
      byteArray0[8] = byte8;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(shortArray0, byteArray0);
      short short7 = (short)802;
      byte byte9 = (byte)24;
      boolean boolean0 = tShortByteHashMap0.adjustValue(short7, byte9);
      assertEquals("{459=-19, -1204=-1, -618=0, -1=0, 1=0, 0=0}", tShortByteHashMap0.toString());
      assertEquals(6, tShortByteHashMap0.size());
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      short short0 = (short) (-17599);
      tShortByteHashMap0.getNoEntryKey();
      tShortByteHashMap0.toString();
      tShortByteHashMap0.ensureCapacity((int) short0);
      short[] shortArray0 = new short[3];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (int) shortArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 520;
      short short0 = (short)1405;
      int int1 = 499;
      float float0 = 0.0F;
      short short1 = (short) (-1927);
      byte byte0 = (byte)75;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(int1, float0, short1, byte0);
      TShortByteHashMap tShortByteHashMap1 = null;
      try {
        tShortByteHashMap1 = new TShortByteHashMap((TShortByteMap) tShortByteHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      short short0 = (short) (-435);
      tShortByteHashMap0.containsKey(short0);
      assertEquals(23, tShortByteHashMap0.capacity());
      
      byteArray0[1] = byte0;
      byte byte1 = (byte)121;
      byteArray0[0] = byte1;
      tShortByteHashMap0._states = byteArray0;
      byte byte2 = (byte) (-1);
      byteArray0[1] = byte2;
      // Undeclared exception!
      try {
        tShortByteHashMap0.compact();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1942;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(int0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      PipedInputStream pipedInputStream0 = new PipedInputStream(int0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-30);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)3;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-19);
      byteArray0[4] = byte4;
      byte byte5 = (byte)37;
      byteArray0[5] = byte5;
      byte byte6 = (byte)39;
      byteArray0[6] = byte6;
      tShortByteHashMap0._states = byteArray0;
      tShortByteHashMap0.ensureCapacity(int0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
      }
  }

//   @Test
//   public void test13()  throws Throwable  {
//       short[] shortArray0 = new short[10];
//       short short0 = (short) (-97);
//       shortArray0[0] = short0;
//       short short1 = (short)1;
//       shortArray0[1] = short1;
//       short short2 = (short) (-283);
//       shortArray0[2] = short2;
//       short short3 = (short)867;
//       shortArray0[3] = short3;
//       short short4 = (short)1;
//       shortArray0[4] = short4;
//       short short5 = (short) (-1156);
//       shortArray0[5] = short5;
//       short short6 = (short) (-1);
//       shortArray0[6] = short6;
//       short short7 = (short)0;
//       shortArray0[7] = short7;
//       short short8 = (short)1523;
//       shortArray0[8] = short8;
//       short short9 = (short)0;
//       shortArray0[9] = short9;
//       byte[] byteArray0 = new byte[3];
//       byte byte0 = (byte) (-62);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte) (-107);
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)45;
//       byteArray0[2] = byte2;
//       TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(shortArray0, byteArray0);
//       assertEquals("{1=-107, -283=45, -97=-62}", tShortByteHashMap0.toString());
//       
//       tShortByteHashMap0.trimToSize();
//       int int0 = 644;
//       TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap(int0, int0);
//       TShortByteHashMap tShortByteHashMap2 = new TShortByteHashMap((TShortByteMap) tShortByteHashMap1);
//       TShortProcedure tShortProcedure0 = null;
//       tShortByteHashMap2.forEach(tShortProcedure0);
//       assertEquals(0, tShortByteHashMap1.getNoEntryKey());
//   }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(int0);
      tShortByteHashMap0.isEmpty();
      tShortByteHashMap0.capacity();
      short[] shortArray0 = new short[4];
      short short0 = (short)869;
      tShortByteHashMap0.trimToSize();
      shortArray0[0] = short0;
      short short1 = (short) (-1);
      tShortByteHashMap0.size();
      tShortByteHashMap0.values();
      shortArray0[1] = short1;
      short short2 = (short) (-130);
      tShortByteHashMap0.setAutoCompactionFactor((float) shortArray0[0]);
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[0] = short3;
      shortArray0[1] = short2;
      TShortByteMap tShortByteMap0 = null;
      // Undeclared exception!
      try {
        tShortByteHashMap0.putAll(tShortByteMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-1);
      float float0 = (-28.886757F);
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(int0, float0);
      tShortByteHashMap0.getNoEntryKey();
      int int1 = 0;
      float float1 = 0.0F;
      short short0 = (short)169;
      int int2 = 1509;
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap(int2);
      byte byte0 = (byte)0;
      byte byte1 = (byte)0;
      tShortByteHashMap0.adjustOrPutValue(short0, byte0, byte1);
      assertEquals(1, tShortByteHashMap0.size());
      
      float float2 = (-1224.3964F);
      // Undeclared exception!
      try {
        tShortByteHashMap1.setAutoCompactionFactor(float2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1224.3964
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 14;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(int0);
      assertEquals(31, tShortByteHashMap0.capacity());
      
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)83;
      byteArray0[0] = byte0;
      byte byte1 = (byte)66;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)12;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-113);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-60);
      byteArray0[6] = byte6;
      byte byte7 = (byte)77;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-53);
      byteArray0[8] = byte8;
      byte byte9 = (byte)1;
      byteArray0[9] = byte9;
      tShortByteHashMap0._states = byteArray0;
      int int1 = 681;
      short short0 = (short) (-476);
      byte byte10 = (byte) (-14);
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap(int1, (float) int1, short0, byte10);
      byte byte11 = tShortByteHashMap1.remove((short) byte10);
      tShortByteHashMap1.capacity();
      assertTrue(byte10 == byte11);
  }
}
