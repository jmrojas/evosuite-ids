/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TObjectFunction;
import gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableFloatSet;
import gnu.trove.iterator.TFloatObjectIterator;
import gnu.trove.map.TFloatObjectMap;
import gnu.trove.map.hash.TFloatObjectHashMap;
import gnu.trove.procedure.TFloatObjectProcedure;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.procedure.TObjectProcedure;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableFloatObjectMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap$1.<init>(Lgnu/trove/impl/unmodifiable/TUnmodifiableFloatObjectMap;)V: root-Branch
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.iterator()Lgnu/trove/iterator/TFloatObjectIterator;: root-Branch
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.<init>(Lgnu/trove/map/TFloatObjectMap;)V: I17 Branch 1 IFNONNULL L53 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>();
      TUnmodifiableFloatObjectMap<Integer> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
      TFloatObjectIterator<Integer> tFloatObjectIterator0 = tUnmodifiableFloatObjectMap0.iterator();
      assertEquals(false, tFloatObjectIterator0.hasNext());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.put(FLjava/lang/Object;)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>(2729);
      TUnmodifiableFloatObjectMap<Float> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Float>((TFloatObjectMap<Float>) tFloatObjectHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableFloatObjectMap0.put((float) 2729, (Float) (-335.57547F));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.containsValue(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>(417);
      TUnmodifiableFloatObjectMap<Float> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Float>((TFloatObjectMap<Float>) tFloatObjectHashMap0);
      Float float0 = new Float((float) 417);
      boolean boolean0 = tUnmodifiableFloatObjectMap0.containsValue((Object) float0);
      assertEquals(false, boolean0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.get(F)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>(0, 0, 0);
      TUnmodifiableFloatObjectMap<String> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<String>((TFloatObjectMap<String>) tFloatObjectHashMap0);
      String string0 = tUnmodifiableFloatObjectMap0.get((float) 0);
      assertNull(string0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.putIfAbsent(FLjava/lang/Object;)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>(417);
      TUnmodifiableFloatObjectMap<Float> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Float>((TFloatObjectMap<Float>) tFloatObjectHashMap0);
      Float float0 = new Float((float) 417);
      // Undeclared exception!
      try {
        tUnmodifiableFloatObjectMap0.putIfAbsent((float) float0, float0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>();
      TUnmodifiableFloatObjectMap<Object> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap0);
      boolean boolean0 = tUnmodifiableFloatObjectMap0.forEachKey((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keys([F)[F: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>(787, 787);
      TUnmodifiableFloatObjectMap<Float> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Float>((TFloatObjectMap<Float>) tFloatObjectHashMap0);
      float[] floatArray0 = tUnmodifiableFloatObjectMap0.keys(tFloatObjectHashMap0._set);
      assertNotNull(floatArray0);
  }

  //Test case number: 7
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.getNoEntryKey()F: root-Branch
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.forEachEntry(Lgnu/trove/procedure/TFloatObjectProcedure;)Z: root-Branch
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.size()I: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>(2729);
      TUnmodifiableFloatObjectMap<Float> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Float>((TFloatObjectMap<Float>) tFloatObjectHashMap0);
      TFloatObjectHashMap<Float> tFloatObjectHashMap1 = new TFloatObjectHashMap<Float>((TFloatObjectMap<? extends Float>) tUnmodifiableFloatObjectMap0);
      assertEquals(true, tFloatObjectHashMap1.isEmpty());
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>();
      TUnmodifiableFloatObjectMap<String> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<String>((TFloatObjectMap<String>) tFloatObjectHashMap0);
      boolean boolean0 = tUnmodifiableFloatObjectMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>(417);
      TUnmodifiableFloatObjectMap<Float> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Float>((TFloatObjectMap<Float>) tFloatObjectHashMap0);
      boolean boolean0 = tUnmodifiableFloatObjectMap0.forEachValue((TObjectProcedure<? super Float>) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.containsKey(F)Z: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>();
      TUnmodifiableFloatObjectMap<Object> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap0);
      boolean boolean0 = tUnmodifiableFloatObjectMap0.containsKey((float) 787);
      assertEquals(false, boolean0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.hashCode()I: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>();
      TUnmodifiableFloatObjectMap<String> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<String>((TFloatObjectMap<String>) tFloatObjectHashMap0);
      int int0 = tUnmodifiableFloatObjectMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>();
      TUnmodifiableFloatObjectMap<Object> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap0);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      // Undeclared exception!
      try {
        tUnmodifiableFloatObjectMap0.putAll((Map<? extends Float, ?>) hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>(0, 0, 0);
      TUnmodifiableFloatObjectMap<Float> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Float>((TFloatObjectMap<Float>) tFloatObjectHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableFloatObjectMap0.transformValues((TObjectFunction<Float, Float>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>(1178);
      TUnmodifiableFloatObjectMap<Object> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap0);
      Object[] objectArray0 = new Object[12];
      Object[] objectArray1 = tUnmodifiableFloatObjectMap0.values(objectArray0);
      assertSame(objectArray0, objectArray1);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.clear()V: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(1741, 0.0F);
      TUnmodifiableFloatObjectMap<Integer> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableFloatObjectMap0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.putAll(Lgnu/trove/map/TFloatObjectMap;)V: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>(0, 0, 0);
      TUnmodifiableFloatObjectMap<String> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<String>((TFloatObjectMap<String>) tFloatObjectHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableFloatObjectMap0.putAll((TFloatObjectMap<? extends String>) tFloatObjectHashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keys()[F: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(417, 417, 417);
      TUnmodifiableFloatObjectMap<Integer> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
      float[] floatArray0 = tUnmodifiableFloatObjectMap0.keys();
      assertNotNull(floatArray0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.values()[Ljava/lang/Object;: root-Branch
   */

//   @Test
//   public void test18()  throws Throwable  {
//       TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>();
//       TUnmodifiableFloatObjectMap<String> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<String>((TFloatObjectMap<String>) tFloatObjectHashMap0);
//       String[] stringArray0 = tUnmodifiableFloatObjectMap0.values();
//       assertNotNull(stringArray0);
//   }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.retainEntries(Lgnu/trove/procedure/TFloatObjectProcedure;)Z: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>(1712);
      TUnmodifiableFloatObjectMap<Float> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Float>((TFloatObjectMap<Float>) tFloatObjectHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableFloatObjectMap0.retainEntries((TFloatObjectProcedure<? super Float>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>(787, 787);
      TUnmodifiableFloatObjectMap<Float> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Float>((TFloatObjectMap<Float>) tFloatObjectHashMap0);
      String string0 = tUnmodifiableFloatObjectMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.remove(F)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>((-11), (-11));
      TUnmodifiableFloatObjectMap<Object> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableFloatObjectMap0.remove((float) (-11));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.<init>(Lgnu/trove/map/TFloatObjectMap;)V: I17 Branch 1 IFNONNULL L53 - false
   */

  @Test
  public void test22()  throws Throwable  {
      TUnmodifiableFloatObjectMap<Integer> tUnmodifiableFloatObjectMap0 = null;
      try {
        tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Integer>((TFloatObjectMap<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 23
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keySet()Lgnu/trove/set/TFloatSet;: I4 Branch 2 IFNONNULL L74 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keySet()Lgnu/trove/set/TFloatSet;: I4 Branch 2 IFNONNULL L74 - false
   */

  @Test
  public void test23()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>();
      TUnmodifiableFloatObjectMap<Integer> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
      TUnmodifiableFloatSet tUnmodifiableFloatSet0 = (TUnmodifiableFloatSet)tUnmodifiableFloatObjectMap0.keySet();
      assertNotNull(tUnmodifiableFloatSet0);
      
      TUnmodifiableFloatSet tUnmodifiableFloatSet1 = (TUnmodifiableFloatSet)tUnmodifiableFloatObjectMap0.keySet();
      assertSame(tUnmodifiableFloatSet1, tUnmodifiableFloatSet0);
  }

  //Test case number: 24
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.valueCollection()Ljava/util/Collection;: I4 Branch 3 IFNONNULL L82 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.valueCollection()Ljava/util/Collection;: I4 Branch 3 IFNONNULL L82 - false
   */

  @Test
  public void test24()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>(527, 527);
      TFloatObjectHashMap<Object> tFloatObjectHashMap1 = new TFloatObjectHashMap<Object>((TFloatObjectMap<?>) tFloatObjectHashMap0);
      TUnmodifiableFloatObjectMap<Object> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap1);
      Collection<Object> collection0 = tUnmodifiableFloatObjectMap0.valueCollection();
      assertNotNull(collection0);
      
      Collection<Object> collection1 = tUnmodifiableFloatObjectMap0.valueCollection();
      assertSame(collection1, collection0);
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - false
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.size()I: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(2729, (float) 2729, (-335.57547F));
      TUnmodifiableFloatObjectMap<Integer> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
      TFloatObjectHashMap<Object> tFloatObjectHashMap1 = new TFloatObjectHashMap<Object>(2729);
      TUnmodifiableFloatObjectMap<Object> tUnmodifiableFloatObjectMap1 = new TUnmodifiableFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap1);
      boolean boolean0 = tUnmodifiableFloatObjectMap0.equals((Object) tUnmodifiableFloatObjectMap1);
      assertEquals(true, boolean0);
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - false
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - true
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.<init>(Lgnu/trove/map/TFloatObjectMap;)V: I17 Branch 1 IFNONNULL L53 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>();
      TUnmodifiableFloatObjectMap<Object> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap0);
      boolean boolean0 = tUnmodifiableFloatObjectMap0.equals((Object) "");
      assertEquals(false, boolean0);
  }
}
