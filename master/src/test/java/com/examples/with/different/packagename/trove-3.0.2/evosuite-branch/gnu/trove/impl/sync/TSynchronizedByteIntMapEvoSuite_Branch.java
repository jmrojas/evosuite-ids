/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TIntFunction;
import gnu.trove.impl.sync.TSynchronizedByteIntMap;
import gnu.trove.impl.sync.TSynchronizedByteSet;
import gnu.trove.impl.sync.TSynchronizedIntCollection;
import gnu.trove.iterator.TByteIntIterator;
import gnu.trove.map.TByteIntMap;
import gnu.trove.map.hash.TByteIntHashMap;
import gnu.trove.procedure.TByteIntProcedure;
import gnu.trove.procedure.TByteProcedure;
import gnu.trove.procedure.TIntProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedByteIntMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.forEachEntry(Lgnu/trove/procedure/TByteIntProcedure;)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedByteIntMap.<init>(Lgnu/trove/map/TByteIntMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap();
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      boolean boolean0 = tSynchronizedByteIntMap0.forEachEntry((TByteIntProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap();
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      tSynchronizedByteIntMap0.putAll((Map<? extends Byte, ? extends Integer>) hashMap0);
      assertEquals(0, tSynchronizedByteIntMap0.size());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.size()I: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(1474);
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      int int0 = tSynchronizedByteIntMap0.size();
      assertEquals(0, int0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.get(B)I: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(1474);
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      int int0 = tSynchronizedByteIntMap0.get((byte)0);
      assertEquals(0, int0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.containsValue(I)Z: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap();
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      boolean boolean0 = tSynchronizedByteIntMap0.containsValue((int) (byte)17);
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.putIfAbsent(BI)I: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap();
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      tSynchronizedByteIntMap0.putIfAbsent((byte)17, (-173));
      assertEquals(false, tByteIntHashMap0.isEmpty());
      assertEquals("{17=-173}", tByteIntHashMap0.toString());
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.equals(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(538, 538);
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      boolean boolean0 = tSynchronizedByteIntMap0.equals((Object) "1");
      assertEquals(false, boolean0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(538, 538);
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      String string0 = tSynchronizedByteIntMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.adjustOrPutValue(BII)I: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap();
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      int int0 = tSynchronizedByteIntMap0.adjustOrPutValue((byte)17, (byte)17, (byte)17);
      assertEquals("{17=17}", tByteIntHashMap0.toString());
      assertEquals(17, int0);
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.transformValues(Lgnu/trove/function/TIntFunction;)V: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedByteIntMap.<init>(Lgnu/trove/map/TByteIntMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int[] intArray0 = new int[5];
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(byteArray0, intArray0);
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0, (Object) "");
      // Undeclared exception!
      try {
        tSynchronizedByteIntMap0.transformValues((TIntFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.values()[I: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap();
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      int[] intArray0 = tSynchronizedByteIntMap0.values();
      assertNotNull(intArray0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.hashCode()I: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap();
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      int int0 = tSynchronizedByteIntMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.put(BI)I: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(1474);
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      tSynchronizedByteIntMap0.put((byte)0, (byte)0);
      assertEquals(false, tByteIntHashMap0.isEmpty());
      assertEquals(1, tByteIntHashMap0.size());
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.keys()[B: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(538, 538);
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      byte[] byteArray0 = tSynchronizedByteIntMap0.keys();
      assertNotNull(byteArray0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.iterator()Lgnu/trove/iterator/TByteIntIterator;: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap();
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      TByteIntIterator tByteIntIterator0 = tSynchronizedByteIntMap0.iterator();
      assertEquals(false, tByteIntIterator0.hasNext());
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.putAll(Lgnu/trove/map/TByteIntMap;)V: root-Branch
   */

//   @Test
//   public void test15()  throws Throwable  {
//       TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap();
//       TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
//       tSynchronizedByteIntMap0.putAll((TByteIntMap) tByteIntHashMap0);
//       assertEquals(0, tByteIntHashMap0.getNoEntryKey());
//   }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.clear()V: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(1474);
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      tSynchronizedByteIntMap0.clear();
      assertEquals(true, tSynchronizedByteIntMap0.isEmpty());
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.forEachKey(Lgnu/trove/procedure/TByteProcedure;)Z: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap();
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      boolean boolean0 = tSynchronizedByteIntMap0.forEachKey((TByteProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.retainEntries(Lgnu/trove/procedure/TByteIntProcedure;)Z: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(538, 538);
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      boolean boolean0 = tSynchronizedByteIntMap0.retainEntries((TByteIntProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.values([I)[I: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(1474);
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      int[] intArray0 = new int[8];
      int[] intArray1 = tSynchronizedByteIntMap0.values(intArray0);
      assertSame(intArray0, intArray1);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap();
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      boolean boolean0 = tSynchronizedByteIntMap0.forEachValue((TIntProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.getNoEntryValue()I: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(1474);
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      int int0 = tSynchronizedByteIntMap0.getNoEntryValue();
      assertEquals(0, int0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.adjustValue(BI)Z: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(1474);
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      boolean boolean0 = tSynchronizedByteIntMap0.adjustValue((byte)0, 0);
      assertEquals(false, boolean0);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.keys([B)[B: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap();
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      byte[] byteArray0 = tSynchronizedByteIntMap0.keys(tByteIntHashMap0._set);
      assertNotNull(byteArray0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.getNoEntryKey()B: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(1474);
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      byte byte0 = tSynchronizedByteIntMap0.getNoEntryKey();
      assertEquals((byte)0, byte0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.increment(B)Z: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(538, 538);
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      boolean boolean0 = tSynchronizedByteIntMap0.increment((byte)1);
      assertEquals(false, boolean0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.containsKey(B)Z: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap();
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      boolean boolean0 = tSynchronizedByteIntMap0.containsKey((byte)17);
      assertEquals(false, boolean0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap();
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      boolean boolean0 = tSynchronizedByteIntMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.remove(B)I: root-Branch
   */

  @Test
  public void test28()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(538, 538);
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      int int0 = tSynchronizedByteIntMap0.remove((byte)1);
      assertEquals(0, int0);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.<init>(Lgnu/trove/map/TByteIntMap;)V: I17 Branch 1 IFNONNULL L59 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = null;
      try {
        tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.keySet()Lgnu/trove/set/TByteSet;: I11 Branch 2 IFNONNULL L107 - true
   * 2 gnu.trove.impl.sync.TSynchronizedByteIntMap.keySet()Lgnu/trove/set/TByteSet;: I11 Branch 2 IFNONNULL L107 - false
   */

  @Test
  public void test30()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(1474);
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      TSynchronizedByteSet tSynchronizedByteSet0 = (TSynchronizedByteSet)tSynchronizedByteIntMap0.keySet();
      assertNotNull(tSynchronizedByteSet0);
      
      TSynchronizedByteSet tSynchronizedByteSet1 = (TSynchronizedByteSet)tSynchronizedByteIntMap0.keySet();
      assertSame(tSynchronizedByteSet1, tSynchronizedByteSet0);
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedByteIntMap.valueCollection()Lgnu/trove/TIntCollection;: I11 Branch 3 IFNONNULL L121 - true
   * 2 gnu.trove.impl.sync.TSynchronizedByteIntMap.valueCollection()Lgnu/trove/TIntCollection;: I11 Branch 3 IFNONNULL L121 - false
   * 3 gnu.trove.impl.sync.TSynchronizedByteIntMap.<init>(Lgnu/trove/map/TByteIntMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test31()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(538, 538);
      TSynchronizedByteIntMap tSynchronizedByteIntMap0 = new TSynchronizedByteIntMap((TByteIntMap) tByteIntHashMap0);
      TSynchronizedIntCollection tSynchronizedIntCollection0 = (TSynchronizedIntCollection)tSynchronizedByteIntMap0.valueCollection();
      assertNotNull(tSynchronizedIntCollection0);
      
      TSynchronizedIntCollection tSynchronizedIntCollection1 = (TSynchronizedIntCollection)tSynchronizedByteIntMap0.valueCollection();
      assertSame(tSynchronizedIntCollection1, tSynchronizedIntCollection0);
  }
}
