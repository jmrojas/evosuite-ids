/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedDoubleObjectMap;
import gnu.trove.map.TDoubleObjectMap;
import gnu.trove.map.hash.TDoubleObjectHashMap;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedDoubleObjectMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>();
      Object object0 = null;
      TSynchronizedDoubleObjectMap<Integer> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap0, object0);
      double double0 = (-1.0);
      Integer integer0 = null;
      // Undeclared exception!
      try {
        tSynchronizedDoubleObjectMap0.putIfAbsent(double0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 674;
      float float0 = 0.5F;
      float float1 = (-618.67584F);
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>(int0, float1);
      double double0 = 219.27861092246127;
      Double double1 = new Double(double0);
      int int1 = 0;
      float float2 = 0.0F;
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Double>(int1, float2);
      String string0 = tDoubleObjectHashMap0.toString();
      TSynchronizedDoubleObjectMap<Double> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap1, (Object) string0);
      TSynchronizedDoubleObjectMap<Double> tSynchronizedDoubleObjectMap1 = new TSynchronizedDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tSynchronizedDoubleObjectMap0);
      TSynchronizedDoubleObjectMap<Integer> tSynchronizedDoubleObjectMap2 = new TSynchronizedDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap0, (Object) double1);
      double double2 = (-1.0);
      tSynchronizedDoubleObjectMap2.putIfAbsent(double2, (Integer) int0);
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap2 = new TDoubleObjectHashMap<Integer>(int0, float0, (double) float0);
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try {
        locale0.getUnicodeLocaleType(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: {}
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>();
      Locale locale0 = Locale.FRENCH;
      String string0 = locale0.getDisplayLanguage();
      TSynchronizedDoubleObjectMap<Object> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0, (Object) string0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      int int0 = 953;
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Integer>(int0, int0);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: French://FrenchFrench#French
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 795;
      float float0 = 0.0F;
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>(int0, float0, (double) float0);
      Object object0 = null;
      TSynchronizedDoubleObjectMap<Double> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0, object0);
      // Undeclared exception!
      try {
        tSynchronizedDoubleObjectMap0.values();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-1349);
      float float0 = (-1379.2395F);
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>(int0, float0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = "";
      try {
        byteArrayOutputStream0.toString(string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // 
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TDoubleObjectMap<String> tDoubleObjectMap0 = null;
      TSynchronizedDoubleObjectMap<String> tSynchronizedDoubleObjectMap0 = null;
      try {
        tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<String>(tDoubleObjectMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      double double0 = 4.9E-324;
      int int1 = 324;
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>(int1);
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Double>((TDoubleObjectMap<? extends Double>) tDoubleObjectHashMap0);
      String string0 = "";
      URI uRI0 = new URI(string0);
      String string1 = uRI0.getRawSchemeSpecificPart();
      TSynchronizedDoubleObjectMap<Double> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap1, (Object) string1);
      tSynchronizedDoubleObjectMap0.clear();
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap2 = new TDoubleObjectHashMap<Double>(int0, (float) int0, double0);
      TSynchronizedDoubleObjectMap<Double> tSynchronizedDoubleObjectMap1 = new TSynchronizedDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap2);
      String string2 = "u~r\\*+;%cfz";
      int int2 = 0;
      String string3 = "DEFAULT_INT_NO_ENTRY_VALUE: ";
      URI uRI1 = null;
      try {
        uRI1 = new URI(string2, string2, string2, int2, string3, string3, string3);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: u~r\\*+;%cfz://u~%7Fr%5C*+;%7F%25cfz@u~r\\*+;%cfz:0DEFAULT_INT_NO_ENTRY_VALUE:%20?DEFAULT_INT_NO_ENTRY_VALUE:%20#DEFAULT_INT_NO_ENTRY_VALUE:%20
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>();
      String string0 = "MqANFojPyzq8";
      URI uRI0 = new URI(string0, string0, string0);
      int int0 = (-583);
      Locale locale0 = Locale.CANADA;
      String string1 = locale0.getISO3Language();
      TSynchronizedDoubleObjectMap<Double> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0, (Object) string1);
      double double0 = (-1815.5580920189723);
      Double double1 = new Double(double0);
      tSynchronizedDoubleObjectMap0.put((double) int0, double1);
      double double2 = 0.0;
      tSynchronizedDoubleObjectMap0.remove(double2);
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Double>(int0);
      Locale locale1 = Locale.ITALIAN;
      String string2 = locale1.getCountry();
      TSynchronizedDoubleObjectMap<Double> tSynchronizedDoubleObjectMap1 = new TSynchronizedDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap1, (Object) string2);
      String string3 = uRI0.getRawQuery();
      TSynchronizedDoubleObjectMap<Double> tSynchronizedDoubleObjectMap2 = new TSynchronizedDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0, (Object) string3);
      double double3 = 1.0;
      // Undeclared exception!
      try {
        tSynchronizedDoubleObjectMap2.get(double3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-1);
      float float0 = 575.10175F;
      double double0 = 0.0;
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>(int0, float0, double0);
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Object>((TDoubleObjectMap<?>) tDoubleObjectHashMap0);
      String string0 = "";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0);
      // Undeclared exception!
      try {
        stringTokenizer0.nextToken();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TDoubleObjectMap<Object> tDoubleObjectMap0 = null;
      String string0 = "I";
      String string1 = "f~vHm(q<7N:D.";
      URI uRI0 = new URI(string0, string1, string1);
      int int0 = 0;
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>(int0, int0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      try {
        byteArrayOutputStream0.toString(string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // I
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>();
      int int0 = 1119;
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Double>(int0);
      tDoubleObjectHashMap1.clear();
      TSynchronizedDoubleObjectMap<Double> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap1);
      Locale locale0 = Locale.UK;
      String string0 = locale0.getScript();
      tSynchronizedDoubleObjectMap0.equals((Object) string0);
      tSynchronizedDoubleObjectMap0.size();
      String string1 = "ZuFHJCpE";
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(string1, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"ZuFHJCpE\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-1328);
      float float0 = (-389.10895F);
      double double0 = 2010.0645766678294;
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>(int0, float0, double0);
      Locale locale0 = Locale.KOREA;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = "P&f}Rg-";
      try {
        byteArrayOutputStream0.toString(string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // P&f}Rg-
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 378;
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>(int0);
      TSynchronizedDoubleObjectMap<Double> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      tSynchronizedDoubleObjectMap0.size();
      int int1 = 1706;
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Object>(int1, int1);
      TSynchronizedDoubleObjectMap<Object> tSynchronizedDoubleObjectMap1 = new TSynchronizedDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap1);
      int int2 = (-1);
      tSynchronizedDoubleObjectMap1.keys(tDoubleObjectHashMap1._set);
      // Undeclared exception!
      try {
        tDoubleObjectHashMap1.setAutoCompactionFactor((float) int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1.0
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1201;
      float float0 = (-945.26526F);
      double double0 = 174.29848436871694;
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>(int0, float0, double0);
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Object>((TDoubleObjectMap<?>) tDoubleObjectHashMap0);
      Locale locale0 = Locale.UK;
      String string0 = locale0.getLanguage();
      TSynchronizedDoubleObjectMap<Object> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap1, (Object) string0);
      tSynchronizedDoubleObjectMap0.iterator();
      int int1 = (-972);
      locale0.toString();
      tSynchronizedDoubleObjectMap0.keySet();
      float float1 = 6.6360896E8F;
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap2 = new TDoubleObjectHashMap<Integer>(int1, float1, (double) float1);
      tSynchronizedDoubleObjectMap0.iterator();
      TSynchronizedDoubleObjectMap<Integer> tSynchronizedDoubleObjectMap1 = new TSynchronizedDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap2);
      tSynchronizedDoubleObjectMap1.putAll((TDoubleObjectMap<? extends Integer>) tDoubleObjectHashMap2);
      assertEquals(6.6360896E8, tDoubleObjectHashMap2.getNoEntryKey(), 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>(int0, int0);
      Locale locale0 = Locale.ITALIAN;
      String string0 = locale0.getVariant();
      TSynchronizedDoubleObjectMap<Double> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0, (Object) string0);
      URI uRI0 = new URI(string0);
      URI uRI1 = uRI0.resolve(string0);
      String string1 = uRI1.getRawSchemeSpecificPart();
      TSynchronizedDoubleObjectMap<Double> tSynchronizedDoubleObjectMap1 = new TSynchronizedDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tSynchronizedDoubleObjectMap0, (Object) string1);
      tSynchronizedDoubleObjectMap1.iterator();
      TDoubleObjectMap<Object> tDoubleObjectMap0 = null;
      TSynchronizedDoubleObjectMap<Object> tSynchronizedDoubleObjectMap2 = null;
      try {
        tSynchronizedDoubleObjectMap2 = new TSynchronizedDoubleObjectMap<Object>(tDoubleObjectMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 61;
      float float0 = (-751.89374F);
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>(int0, float0);
      String string0 = "jjK|!X!*}%Ba8`p";
      String string1 = "";
      File file0 = new File(string0, string1);
      File file1 = file0.getAbsoluteFile();
      String string2 = file1.getCanonicalPath();
      TSynchronizedDoubleObjectMap<Double> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0, (Object) string2);
      try {
        Double.valueOf(string2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/mnt/fastdata/ac1gf/Experiments_Major/apps/trove-3.0.2/jjK|!X!*}%Ba8`p\"
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 0;
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>(int0);
      TSynchronizedDoubleObjectMap<Object> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      TSynchronizedDoubleObjectMap<Object> tSynchronizedDoubleObjectMap1 = new TSynchronizedDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tSynchronizedDoubleObjectMap0);
      tSynchronizedDoubleObjectMap1.containsKey((double) int0);
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Object>();
      int int1 = 0;
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap2 = new TDoubleObjectHashMap<Integer>(int1, int1, int1);
      String string0 = "4DVOs4As\\z.Mq";
      Locale locale0 = new Locale(string0, string0);
      char char0 = 'O';
      String string1 = locale0.getExtension(char0);
      TSynchronizedDoubleObjectMap<Integer> tSynchronizedDoubleObjectMap2 = new TSynchronizedDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap2, (Object) string1);
      TSynchronizedDoubleObjectMap<Integer> tSynchronizedDoubleObjectMap3 = new TSynchronizedDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tSynchronizedDoubleObjectMap2);
      // Undeclared exception!
      try {
        tSynchronizedDoubleObjectMap3.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>();
      int int0 = (-1872);
      TDoubleObjectHashMap<String> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<String>(int0);
      TSynchronizedDoubleObjectMap<Double> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      String string0 = "~bR@%pH?sF";
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"~bR@%pH?sF\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }
}
