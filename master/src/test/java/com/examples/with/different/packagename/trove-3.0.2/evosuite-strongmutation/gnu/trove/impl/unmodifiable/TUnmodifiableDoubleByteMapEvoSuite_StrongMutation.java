/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableByteCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleSet;
import gnu.trove.map.TDoubleByteMap;
import gnu.trove.map.hash.TDoubleByteHashMap;
import gnu.trove.procedure.TByteProcedure;
import gnu.trove.procedure.TDoubleProcedure;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableDoubleByteMapEvoSuite_StrongMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 5 covered goals:
   * 1 Strong Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.isEmpty()Z:64 - DeleteStatement: isEmpty()Z
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.isEmpty()Z: root-Branch
   * 3 Strong Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.<init>(Lgnu/trove/map/TDoubleByteMap;)V:58 - ReplaceComparisonOperator != null -> = null
   * 4 Strong Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.isEmpty()Z:64 - DeleteStatement: isEmpty()Z
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.<init>(Lgnu/trove/map/TDoubleByteMap;)V: I17 Branch 1 IFNONNULL L58 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tUnmodifiableDoubleByteMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * 1 Strong Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.containsKey(D)Z:65 - DeleteField: mLgnu/trove/map/TDoubleByteMap;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.containsKey(D)Z: root-Branch
   * 3 Strong Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.containsKey(D)Z:65 - DeleteField: mLgnu/trove/map/TDoubleByteMap;
   */

  @Test
  public void test1()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(1, 1);
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      tUnmodifiableDoubleByteMap0.containsKey((-1972.6948706142437));
      byteArray0[0] = (byte) (-122);
  }

  //Test case number: 2
  /*
   * 4 covered goals:
   * 1 Strong Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.containsKey(D)Z:65 - DeleteStatement: containsKey(D)Z
   * 2 Strong Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.containsKey(D)Z:65 - InsertUnaryOp Negation of key
   * 3 Strong Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.containsKey(D)Z:65 - InsertUnaryOp Negation of key
   * 4 Strong Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.containsKey(D)Z:65 - DeleteStatement: containsKey(D)Z
   */

  @Test
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[7] = (-1.0);
      byte[] byteArray0 = new byte[9];
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tUnmodifiableDoubleByteMap0.containsKey((-1.0));
      assertEquals(true, boolean0);
  }

  //Test case number: 3
  /*
   * 9 covered goals:
   * 1 Strong Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.containsValue(B)Z:66 - DeleteStatement: containsValue(B)Z
   * 2 Strong Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.containsValue(B)Z:66 - InsertUnaryOp Negation of val
   * 3 Strong Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.containsValue(B)Z:66 - InsertUnaryOp IINC -1 val
   * 4 Strong Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.containsValue(B)Z:66 - InsertUnaryOp IINC 1 val
   * 5 Strong Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.containsValue(B)Z:66 - InsertUnaryOp Negation of val
   * 6 Strong Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.containsValue(B)Z:66 - InsertUnaryOp IINC -1 val
   * 7 Strong Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.containsValue(B)Z:66 - InsertUnaryOp IINC 1 val
   * 8 Strong Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.containsValue(B)Z:66 - DeleteStatement: containsValue(B)Z
   * 9 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.containsValue(B)Z: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-25);
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tUnmodifiableDoubleByteMap0.containsValue((byte) (-25));
      assertEquals(true, boolean0);
  }

  //Test case number: 4
  /*
   * 3 covered goals:
   * 1 Strong Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.get(D)B:67 - DeleteStatement: get(D)B
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.get(D)B: root-Branch
   * 3 Strong Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.get(D)B:67 - DeleteStatement: get(D)B
   */

  @Test
  public void test4()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(647, 0.0F, (double) 0.0F, (byte)1);
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      byte byte0 = tUnmodifiableDoubleByteMap0.get(1535.963735454088);
      assertEquals((byte)1, byte0);
  }

  //Test case number: 5
  /*
   * 11 covered goals:
   * 1 Strong Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keySet()Lgnu/trove/set/TDoubleSet;:81 - DeleteField: keySetLgnu/trove/set/TDoubleSet;
   * 2 Strong Mutation 25: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keySet()Lgnu/trove/set/TDoubleSet;:79 - ReplaceComparisonOperator != null -> = null
   * 3 Strong Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keySet()Lgnu/trove/set/TDoubleSet;:80 - DeleteStatement: keySet()Lgnu/trove/set/TDoubleSet;
   * 4 Strong Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keySet()Lgnu/trove/set/TDoubleSet;:80 - DeleteField: mLgnu/trove/map/TDoubleByteMap;
   * 5 Strong Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keySet()Lgnu/trove/set/TDoubleSet;:80 - DeleteStatement: unmodifiableSet(Lgnu/trove/set/TDoubleSet;)Lgnu/trove/set/TDoubleSet;
   * 6 Strong Mutation 25: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keySet()Lgnu/trove/set/TDoubleSet;:79 - ReplaceComparisonOperator != null -> = null
   * 7 Strong Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keySet()Lgnu/trove/set/TDoubleSet;:80 - DeleteStatement: keySet()Lgnu/trove/set/TDoubleSet;
   * 8 Strong Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keySet()Lgnu/trove/set/TDoubleSet;:80 - DeleteField: mLgnu/trove/map/TDoubleByteMap;
   * 9 Strong Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keySet()Lgnu/trove/set/TDoubleSet;:81 - DeleteField: keySetLgnu/trove/set/TDoubleSet;
   * 10 Strong Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keySet()Lgnu/trove/set/TDoubleSet;:80 - DeleteStatement: unmodifiableSet(Lgnu/trove/set/TDoubleSet;)Lgnu/trove/set/TDoubleSet;
   * 11 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keySet()Lgnu/trove/set/TDoubleSet;: I4 Branch 2 IFNONNULL L79 - false
   */

  @Test
  public void test5()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = (TUnmodifiableDoubleSet)tUnmodifiableDoubleByteMap0.keySet();
      assertEquals("{}", tUnmodifiableDoubleSet0.toString());
  }

  //Test case number: 6
  /*
   * 5 covered goals:
   * 1 Strong Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keys()[D:83 - DeleteField: mLgnu/trove/map/TDoubleByteMap;
   * 2 Strong Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keys()[D:83 - DeleteStatement: keys()[D
   * 3 Strong Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keys()[D:83 - DeleteStatement: keys()[D
   * 4 Strong Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keys()[D:83 - DeleteField: mLgnu/trove/map/TDoubleByteMap;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keys()[D: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      byte[] byteArray0 = new byte[9];
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      double[] doubleArray1 = tUnmodifiableDoubleByteMap0.keys();
      assertNotSame(doubleArray0, doubleArray1);
  }

  //Test case number: 7
  /*
   * 5 covered goals:
   * 1 Strong Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keys([D)[D:84 - DeleteStatement: keys([D)[D
   * 2 Strong Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keys([D)[D:84 - DeleteField: mLgnu/trove/map/TDoubleByteMap;
   * 3 Strong Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keys([D)[D:84 - DeleteField: mLgnu/trove/map/TDoubleByteMap;
   * 4 Strong Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keys([D)[D:84 - DeleteStatement: keys([D)[D
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keys([D)[D: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      double[] doubleArray0 = tUnmodifiableDoubleByteMap0.keys(tDoubleByteHashMap0._set);
      assertNotNull(doubleArray0);
  }

  //Test case number: 8
  /*
   * 11 covered goals:
   * 1 Strong Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.valueCollection()Lgnu/trove/TByteCollection;:89 - DeleteField: valuesLgnu/trove/TByteCollection;
   * 2 Strong Mutation 35: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.valueCollection()Lgnu/trove/TByteCollection;:87 - ReplaceComparisonOperator != null -> = null
   * 3 Strong Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.valueCollection()Lgnu/trove/TByteCollection;:88 - DeleteStatement: unmodifiableCollection(Lgnu/trove/TByteCollection;)Lgnu/trove/TByteCollection;
   * 4 Strong Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.valueCollection()Lgnu/trove/TByteCollection;:88 - DeleteField: mLgnu/trove/map/TDoubleByteMap;
   * 5 Strong Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.valueCollection()Lgnu/trove/TByteCollection;:88 - DeleteStatement: valueCollection()Lgnu/trove/TByteCollection;
   * 6 Strong Mutation 35: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.valueCollection()Lgnu/trove/TByteCollection;:87 - ReplaceComparisonOperator != null -> = null
   * 7 Strong Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.valueCollection()Lgnu/trove/TByteCollection;:88 - DeleteStatement: unmodifiableCollection(Lgnu/trove/TByteCollection;)Lgnu/trove/TByteCollection;
   * 8 Strong Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.valueCollection()Lgnu/trove/TByteCollection;:89 - DeleteField: valuesLgnu/trove/TByteCollection;
   * 9 Strong Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.valueCollection()Lgnu/trove/TByteCollection;:88 - DeleteField: mLgnu/trove/map/TDoubleByteMap;
   * 10 Strong Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.valueCollection()Lgnu/trove/TByteCollection;:88 - DeleteStatement: valueCollection()Lgnu/trove/TByteCollection;
   * 11 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.valueCollection()Lgnu/trove/TByteCollection;: I4 Branch 3 IFNONNULL L87 - false
   */

  @Test
  public void test8()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      TUnmodifiableByteCollection tUnmodifiableByteCollection0 = (TUnmodifiableByteCollection)tUnmodifiableDoubleByteMap0.valueCollection();
      assertEquals(0, tUnmodifiableByteCollection0.size());
  }

  //Test case number: 9
  /*
   * 5 covered goals:
   * 1 Strong Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.values()[B:91 - DeleteStatement: values()[B
   * 2 Strong Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.values()[B:91 - DeleteField: mLgnu/trove/map/TDoubleByteMap;
   * 3 Strong Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.values()[B:91 - DeleteField: mLgnu/trove/map/TDoubleByteMap;
   * 4 Strong Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.values()[B:91 - DeleteStatement: values()[B
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.values()[B: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      byte[] byteArray0 = tUnmodifiableDoubleByteMap0.values();
      assertNotNull(byteArray0);
  }

  //Test case number: 10
  /*
   * 5 covered goals:
   * 1 Strong Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.values([B)[B:92 - DeleteStatement: values([B)[B
   * 2 Strong Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.values([B)[B:92 - DeleteField: mLgnu/trove/map/TDoubleByteMap;
   * 3 Strong Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.values([B)[B:92 - DeleteField: mLgnu/trove/map/TDoubleByteMap;
   * 4 Strong Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.values([B)[B:92 - DeleteStatement: values([B)[B
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.values([B)[B: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      byte[] byteArray0 = tUnmodifiableDoubleByteMap0.values(tDoubleByteHashMap0._states);
      assertNotNull(byteArray0);
  }

  //Test case number: 11
  /*
   * 7 covered goals:
   * 1 Strong Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.equals(Ljava/lang/Object;)Z:94 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L94 - false
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L94 - true
   * 4 Strong Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.equals(Ljava/lang/Object;)Z:94 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 5 Strong Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.equals(Ljava/lang/Object;)Z:94 - ReplaceComparisonOperator == -> !=
   * 6 Strong Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.equals(Ljava/lang/Object;)Z:94 - ReplaceComparisonOperator == -> !=
   * 7 Strong Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.equals(Ljava/lang/Object;)Z:94 - ReplaceConstant - 0 -> 1
   */

  @Test
  public void test11()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-615), (-615));
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap1 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tUnmodifiableDoubleByteMap0.equals((Object) "[H]h\"^Lgv~:(n#ne\"");
      assertEquals(false, boolean0);
      assertTrue(tUnmodifiableDoubleByteMap0.equals(tUnmodifiableDoubleByteMap1));
  }

  //Test case number: 12
  /*
   * 3 covered goals:
   * 1 Strong Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.equals(Ljava/lang/Object;)Z:94 - ReplaceConstant - 0 -> 1
   * 2 Strong Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.equals(Ljava/lang/Object;)Z:94 - ReplaceComparisonOperator == -> !=
   * 3 Strong Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.equals(Ljava/lang/Object;)Z:94 - ReplaceComparisonOperator == -> !=
   */

  @Test
  public void test12()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-615), (-615));
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tUnmodifiableDoubleByteMap0.equals((Object) "[H]h\"^Lgv~:(n#ne\"");
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 3 covered goals:
   * 1 Strong Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.hashCode()I:95 - DeleteStatement: hashCode()I
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.hashCode()I: root-Branch
   * 3 Strong Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.hashCode()I:95 - DeleteStatement: hashCode()I
   */

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (-1433.3518177158521);
      byte[] byteArray0 = new byte[6];
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      int int0 = tUnmodifiableDoubleByteMap0.hashCode();
      assertEquals((-2106500196), int0);
  }

  //Test case number: 14
  /*
   * 5 covered goals:
   * 1 Strong Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.toString()Ljava/lang/String;:96 - DeleteField: mLgnu/trove/map/TDoubleByteMap;
   * 2 Strong Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.toString()Ljava/lang/String;:96 - DeleteStatement: toString()Ljava/lang/String;
   * 3 Strong Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.toString()Ljava/lang/String;:96 - DeleteStatement: toString()Ljava/lang/String;
   * 4 Strong Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.toString()Ljava/lang/String;:96 - DeleteField: mLgnu/trove/map/TDoubleByteMap;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-615), (-615));
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      String string0 = tUnmodifiableDoubleByteMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 15
  /*
   * 3 covered goals:
   * 1 Strong Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.getNoEntryKey()D:97 - DeleteStatement: getNoEntryKey()D
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.getNoEntryKey()D: root-Branch
   * 3 Strong Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.getNoEntryKey()D:97 - DeleteStatement: getNoEntryKey()D
   */

  @Test
  public void test15()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-1498), (float) (-1), Double.POSITIVE_INFINITY, (byte)19);
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      double double0 = tUnmodifiableDoubleByteMap0.getNoEntryKey();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  //Test case number: 16
  /*
   * 3 covered goals:
   * 1 Strong Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.getNoEntryValue()B:98 - DeleteStatement: getNoEntryValue()B
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.getNoEntryValue()B: root-Branch
   * 3 Strong Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.getNoEntryValue()B:98 - DeleteStatement: getNoEntryValue()B
   */

  @Test
  public void test16()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(744, (-495.39246F), (double) 0, (byte)109);
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      byte byte0 = tUnmodifiableDoubleByteMap0.getNoEntryValue();
      assertEquals((byte)109, byte0);
  }

  //Test case number: 17
  /*
   * 3 covered goals:
   * 1 Strong Mutation 59: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z:101 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   * 3 Strong Mutation 59: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z:101 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z
   */

  @Test
  public void test17()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tUnmodifiableDoubleByteMap0.forEachKey((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 18
  /*
   * 3 covered goals:
   * 1 Strong Mutation 61: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z:104 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: root-Branch
   * 3 Strong Mutation 61: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z:104 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z
   */

  @Test
  public void test18()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tUnmodifiableDoubleByteMap0.forEachValue((TByteProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 19
  /*
   * 19 covered goals:
   * 1 Strong Mutation 3: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.value()B:115 - DeleteStatement: value()B
   * 2 Strong Mutation 1: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.key()D:114 - DeleteStatement: key()D
   * 3 Strong Mutation 0: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.key()D:114 - DeleteField: iterLgnu/trove/iterator/TDoubleByteIterator;
   * 4 Strong Mutation 1: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.key()D:114 - DeleteStatement: key()D
   * 5 Strong Mutation 2: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.value()B:115 - DeleteField: iterLgnu/trove/iterator/TDoubleByteIterator;
   * 6 Strong Mutation 3: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.value()B:115 - DeleteStatement: value()B
   * 7 Strong Mutation 4: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.advance()V:116 - DeleteField: iterLgnu/trove/iterator/TDoubleByteIterator;
   * 8 Strong Mutation 5: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.advance()V:116 - DeleteStatement: advance()V
   * 9 Strong Mutation 6: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.hasNext()Z:117 - DeleteField: iterLgnu/trove/iterator/TDoubleByteIterator;
   * 10 Strong Mutation 7: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.hasNext()Z:117 - DeleteStatement: hasNext()Z
   * 11 Strong Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.size()I:63 - DeleteField: mLgnu/trove/map/TDoubleByteMap;
   * 12 Strong Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.size()I:63 - DeleteStatement: size()I
   * 13 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.<init>(Lgnu/trove/impl/unmodifiable/TUnmodifiableDoubleByteMap;)V: root-Branch
   * 14 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.hasNext()Z: root-Branch
   * 15 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.value()B: root-Branch
   * 16 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.key()D: root-Branch
   * 17 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.advance()V: root-Branch
   * 18 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.iterator()Lgnu/trove/iterator/TDoubleByteIterator;: root-Branch
   * 19 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.size()I: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (-1.0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap((TDoubleByteMap) tUnmodifiableDoubleByteMap0);
      assertEquals(5, tDoubleByteHashMap1.capacity());
      assertEquals("{-1.0=48, 0.0=0}", tDoubleByteHashMap1.toString());
  }

  //Test case number: 20
  /*
   * 8 covered goals:
   * 1 Strong Mutation 7: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.hasNext()Z:117 - DeleteStatement: hasNext()Z
   * 2 Strong Mutation 0: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.key()D:114 - DeleteField: iterLgnu/trove/iterator/TDoubleByteIterator;
   * 3 Strong Mutation 2: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.value()B:115 - DeleteField: iterLgnu/trove/iterator/TDoubleByteIterator;
   * 4 Strong Mutation 4: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.advance()V:116 - DeleteField: iterLgnu/trove/iterator/TDoubleByteIterator;
   * 5 Strong Mutation 5: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.advance()V:116 - DeleteStatement: advance()V
   * 6 Strong Mutation 6: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.hasNext()Z:117 - DeleteField: iterLgnu/trove/iterator/TDoubleByteIterator;
   * 7 Strong Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.size()I:63 - DeleteField: mLgnu/trove/map/TDoubleByteMap;
   * 8 Strong Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.size()I:63 - DeleteStatement: size()I
   */

  @Test
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      byte[] byteArray0 = new byte[5];
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap((TDoubleByteMap) tUnmodifiableDoubleByteMap0);
      assertEquals(1, tUnmodifiableDoubleByteMap0.size());
      assertEquals("{0.0=0}", tDoubleByteHashMap1.toString());
  }

  //Test case number: 21
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.<init>(Lgnu/trove/map/TDoubleByteMap;)V: I17 Branch 1 IFNONNULL L58 - false
   * 2 Strong Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.<init>(Lgnu/trove/map/TDoubleByteMap;)V:58 - ReplaceComparisonOperator != null -> = null
   */

  @Test
  public void test21()  throws Throwable  {
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = null;
      try {
        tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
