/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.stack.array;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.list.array.TDoubleArrayList;
import gnu.trove.stack.TDoubleStack;
import gnu.trove.stack.array.TDoubleArrayStack;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleArrayStackEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 0;
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack(int0);
      tDoubleArrayStack0.clear();
      int int1 = 1009;
      TDoubleArrayStack tDoubleArrayStack1 = new TDoubleArrayStack(int1, int1);
      tDoubleArrayStack1.clear();
      TDoubleArrayStack tDoubleArrayStack2 = new TDoubleArrayStack(int1, int1);
      int int2 = (-1);
      // Undeclared exception!
      try {
        tDoubleArrayStack0.peek();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack(int0);
      TDoubleArrayStack tDoubleArrayStack1 = new TDoubleArrayStack((TDoubleStack) tDoubleArrayStack0);
      TDoubleArrayStack tDoubleArrayStack2 = new TDoubleArrayStack((TDoubleStack) tDoubleArrayStack1);
      tDoubleArrayStack2.hashCode();
      int int1 = 10;
      TDoubleArrayStack tDoubleArrayStack3 = new TDoubleArrayStack(int1);
      tDoubleArrayStack3.size();
      String string0 = "M80eIC;g)#C8Dc]=";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: M80eIC;g)#C8Dc]=://M80eIC;g)%23C8Dc%5D=@M80eIC;g)#C8Dc]=:0M80eIC;g)%23C8Dc%5D=?M80eIC;g)%23C8Dc]=#M80eIC;g)%23C8Dc]=
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 10;
      int int1 = 0;
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack(int1);
      TDoubleArrayStack tDoubleArrayStack1 = new TDoubleArrayStack((TDoubleStack) tDoubleArrayStack0);
      TDoubleArrayStack tDoubleArrayStack2 = new TDoubleArrayStack((TDoubleStack) tDoubleArrayStack1);
      tDoubleArrayStack2.getNoEntryValue();
      double double0 = (-1572.2010654936755);
      TDoubleArrayStack tDoubleArrayStack3 = new TDoubleArrayStack(int0, int0);
      double double1 = 1.0;
      tDoubleArrayStack3.push(double1);
      TDoubleArrayStack tDoubleArrayStack4 = new TDoubleArrayStack(int0, double0);
      int int2 = 0;
      double double2 = (-1.0);
      TDoubleArrayStack tDoubleArrayStack5 = new TDoubleArrayStack(int2, double2);
      tDoubleArrayStack5.toArray();
      TDoubleArrayStack tDoubleArrayStack6 = new TDoubleArrayStack(int2);
      tDoubleArrayStack3.toArray();
      tDoubleArrayStack6.clear();
      int int3 = (-2025);
      tDoubleArrayStack5.toArray();
      double double3 = (-1730.893534493373);
      tDoubleArrayStack6.size();
      tDoubleArrayStack3.peek();
      TDoubleArrayStack tDoubleArrayStack7 = null;
      try {
        tDoubleArrayStack7 = new TDoubleArrayStack(int3, double3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack();
      // Undeclared exception!
      try {
        tDoubleArrayStack0.peek();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-965);
      TDoubleArrayStack tDoubleArrayStack0 = null;
      try {
        tDoubleArrayStack0 = new TDoubleArrayStack(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 1;
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack();
      TDoubleArrayStack tDoubleArrayStack1 = new TDoubleArrayStack(int0, int0);
      TDoubleArrayStack tDoubleArrayStack2 = new TDoubleArrayStack();
      TDoubleArrayStack tDoubleArrayStack3 = new TDoubleArrayStack((TDoubleStack) tDoubleArrayStack2);
      // Undeclared exception!
      try {
        tDoubleArrayStack0.peek();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack(int0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      double double0 = 0.0;
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0, double0);
      String string0 = tDoubleArrayList0.toString();
      boolean boolean0 = tDoubleArrayStack0.equals((Object) string0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 1415;
      double double0 = (-1214.7176248148928);
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack(int0);
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 1;
      double double0 = 0.0;
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack(int0, double0);
      // Undeclared exception!
      try {
        tDoubleArrayStack0.peek();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack();
      tDoubleArrayStack0.getNoEntryValue();
      tDoubleArrayStack0.hashCode();
      String string0 = "[";
      File file0 = new File(string0, string0);
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // [/[ (No such file or directory)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack(int0);
      // Undeclared exception!
      try {
        tDoubleArrayStack0.peek();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 148;
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack(int0);
      String string0 = "from > to : ";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // from > to : 
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1624;
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack();
      TDoubleArrayStack tDoubleArrayStack1 = new TDoubleArrayStack((TDoubleStack) tDoubleArrayStack0);
      // Undeclared exception!
      try {
        tDoubleArrayStack1.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          int int0 = 10;
          double double0 = (-1.0);
          TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack(int0, double0);
          String string0 = "GLz^6@|Z/oGO";
          File file0 = new File(string0);
          double[] doubleArray0 = new double[5];
          double double1 = 920.3698851764284;
          doubleArray0[0] = double1;
          doubleArray0[1] = (double) int0;
          doubleArray0[2] = (double) int0;
          doubleArray0[3] = (double) int0;
          doubleArray0[4] = (double) int0;
          tDoubleArrayStack0.toArray(doubleArray0);
          tDoubleArrayStack0.hashCode();
          String string1 = file0.getName();
          tDoubleArrayStack0.equals((Object) string1);
          String string2 = File.separator;
          tDoubleArrayStack0.equals((Object) string2);
          TDoubleArrayStack tDoubleArrayStack1 = new TDoubleArrayStack();
          TDoubleArrayStack tDoubleArrayStack2 = new TDoubleArrayStack(int0, int0);
          // Undeclared exception!
          try {
            file0.deleteOnExit();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"GLz^6@|Z/oGO\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // java.io.File.deleteOnExit(File.java:1006)
             // sun.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:601)
             // org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:264)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1894;
      double double0 = 961.2850630954474;
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack(int0, double0);
      int int1 = 1094;
      TDoubleArrayStack tDoubleArrayStack1 = new TDoubleArrayStack(int1, int1);
      tDoubleArrayStack1.getNoEntryValue();
      tDoubleArrayStack1.toArray();
      int int2 = (-121);
      TDoubleArrayStack tDoubleArrayStack2 = null;
      try {
        tDoubleArrayStack2 = new TDoubleArrayStack(int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-62);
      int int1 = 1022;
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack(int1);
      double double0 = (-52.13324348046741);
      tDoubleArrayStack0.push(double0);
      double double1 = 0.0;
      TDoubleArrayStack tDoubleArrayStack1 = new TDoubleArrayStack();
      tDoubleArrayStack1.hashCode();
      TDoubleArrayStack tDoubleArrayStack2 = null;
      try {
        tDoubleArrayStack2 = new TDoubleArrayStack(int0, double1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 0;
      double double0 = 0.0;
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack(int0, double0);
      double double1 = tDoubleArrayStack0.getNoEntryValue();
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) int0;
      double double2 = (-2006.9167517766068);
      doubleArray0[3] = double2;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = double1;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[8] = (double) int0;
      double double3 = 0.0;
      doubleArray0[9] = double3;
      tDoubleArrayStack0.toArray(doubleArray0);
      int int1 = 0;
      TDoubleArrayStack tDoubleArrayStack1 = new TDoubleArrayStack(int1);
      TDoubleArrayStack tDoubleArrayStack2 = new TDoubleArrayStack((TDoubleStack) tDoubleArrayStack1);
      String string0 = tDoubleArrayStack2.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-1);
      double double0 = 0.0;
      TDoubleArrayStack tDoubleArrayStack0 = null;
      try {
        tDoubleArrayStack0 = new TDoubleArrayStack(int0, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 535;
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack(int0, int0);
      TDoubleArrayStack tDoubleArrayStack1 = new TDoubleArrayStack((TDoubleStack) tDoubleArrayStack0);
      tDoubleArrayStack1.size();
      // Undeclared exception!
      try {
        tDoubleArrayStack1.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = (-42);
      double double0 = 1987.4482486155928;
      TDoubleArrayStack tDoubleArrayStack0 = null;
      try {
        tDoubleArrayStack0 = new TDoubleArrayStack(int0, double0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
