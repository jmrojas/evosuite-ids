/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TCharByteMap;
import gnu.trove.map.hash.TCharByteHashMap;
import gnu.trove.procedure.TCharByteProcedure;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.PushbackInputStream;
import java.net.URI;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.text.Segment;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharByteHashMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 0;
      float float0 = 1088.343F;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, float0);
      tCharByteHashMap0.iterator();
      char[] charArray0 = new char[9];
      char char0 = ':';
      charArray0[0] = char0;
      char char1 = '~';
      charArray0[1] = char1;
      char char2 = '&';
      charArray0[2] = char2;
      char char3 = 'n';
      charArray0[3] = char3;
      char char4 = 'H';
      charArray0[4] = char4;
      char char5 = ' ';
      charArray0[5] = char5;
      char char6 = '!';
      charArray0[6] = char6;
      char char7 = '>';
      charArray0[7] = char7;
      char char8 = 'w';
      charArray0[8] = char8;
      tCharByteHashMap0._set = charArray0;
      float float1 = 0.0F;
      char char9 = '(';
      tCharByteHashMap0.getNoEntryValue();
      byte byte0 = (byte) (-1);
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(int0, float1, char9, byte0);
      byte byte1 = (byte)64;
      boolean boolean0 = tCharByteHashMap1.containsValue(byte1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      float float0 = (-1.0F);
      char char0 = '{';
      byte byte0 = (byte)0;
      float float1 = (-1636.1045F);
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, float1);
      String string0 = tCharByteHashMap0.toString();
      assertNotNull(string0);
      
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(int0, float0, char0, byte0);
      char char1 = ']';
      byte byte1 = (byte) (-59);
      byte byte2 = tCharByteHashMap1.adjustOrPutValue(char1, byte1, byte0);
      assertEquals(1, tCharByteHashMap1.size());
      assertEquals((byte)0, byte2);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-520);
      float float0 = (-1240.2178F);
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, float0);
      byte byte0 = (byte)85;
      boolean boolean0 = tCharByteHashMap0.containsValue(byte0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          char[] charArray0 = new char[7];
          char char0 = 'z';
          charArray0[0] = char0;
          String string0 = "Factor must be >= 0: ";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0);
      URI uRI0 = null;
      File file0 = null;
      try {
        file0 = new File(uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap();
      char char0 = 'K';
      byte byte0 = (byte) (-114);
      tCharByteHashMap0.put(char0, byte0);
      tCharByteHashMap0.adjustValue(char0, byte0);
      TCharByteProcedure tCharByteProcedure0 = null;
      tCharByteHashMap0.values();
      // Undeclared exception!
      try {
        tCharByteHashMap0.retainEntries(tCharByteProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 42;
      float float0 = (-1.0F);
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, float0);
      char[] charArray0 = new char[8];
      char char0 = '4';
      charArray0[0] = char0;
      char char1 = 'C';
      charArray0[1] = char1;
      char char2 = '\"';
      charArray0[2] = char2;
      char char3 = 'Q';
      charArray0[3] = char3;
      char char4 = '9';
      charArray0[4] = char4;
      char char5 = 'H';
      charArray0[5] = char5;
      char char6 = 'Q';
      charArray0[6] = char6;
      char char7 = ' ';
      charArray0[7] = char7;
      char[] charArray1 = tCharByteHashMap0.keys(charArray0);
      assertNotNull(charArray1);
      assertEquals(3, tCharByteHashMap0.capacity());
      assertSame(charArray1, charArray0);
  }

  @Test
  public void test7()  throws Throwable  {
      String string0 = "=";
      char[] charArray0 = new char[2];
      char char0 = 'b';
      charArray0[0] = char0;
      int int0 = 0;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0);
      tCharByteHashMap0.get(charArray0[0]);
      char char1 = '9';
      charArray0[1] = char1;
      tCharByteHashMap0.keys(charArray0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)91;
      byteArray0[1] = byte1;
      byteArray0[0] = byte0;
      byteArray0[1] = byte1;
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(charArray0, byteArray0);
      tCharByteHashMap1.getNoEntryKey();
      String string1 = " > ";
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(string0, string1);
      Locale locale0 = Locale.ROOT;
      String string2 = locale0.getDisplayCountry();
      abstractMap_SimpleEntry0.equals((Object) string2);
      String string3 = abstractMap_SimpleEntry0.getValue();
      assertSame(string3, string1);
  }

  @Test
  public void test8()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '\\';
      charArray0[0] = char0;
      char char1 = 'D';
      charArray0[1] = char1;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)115;
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-5);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-100);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-71);
      byteArray0[5] = byte5;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      assertEquals("{\\=115, D=1}", tCharByteHashMap0.toString());
      assertEquals(17, tCharByteHashMap0.capacity());
      assertEquals(false, tCharByteHashMap0.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      int int1 = 1476;
      char char0 = '-';
      byte byte0 = (byte) (-23);
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int1, (float) int1, char0, byte0);
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap((TCharByteMap) tCharByteHashMap0);
      int int2 = (-1051);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tCharByteHashMap0._states, int2, (int) byte0);
      int int3 = 0;
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream((InputStream) byteArrayInputStream0, int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 848;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, int0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)98;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      tCharByteHashMap0._states = byteArray0;
      int int1 = (-821);
      float float0 = 0.0F;
      char char0 = ':';
      byte byte2 = (byte) (-1);
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(int1, float0, char0, byte2);
      TCharByteHashMap tCharByteHashMap2 = null;
      try {
        tCharByteHashMap2 = new TCharByteHashMap((TCharByteMap) tCharByteHashMap1);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[3];
      char char0 = '4';
      charArray0[0] = char0;
      char char1 = 'P';
      charArray0[1] = char1;
      char char2 = 'f';
      charArray0[2] = char2;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-12);
      byteArray0[0] = byte0;
      byte byte1 = (byte)106;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      assertEquals("{f=0, 4=-12, P=106}", tCharByteHashMap0.toString());
      
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(int0);
      ObjectInput objectInput0 = null;
      TCharByteMap tCharByteMap0 = null;
      // Undeclared exception!
      try {
        tCharByteHashMap1.putAll(tCharByteMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap();
      char char0 = '<';
      char char1 = 'J';
      byte byte0 = (byte)16;
      tCharByteHashMap0.valueCollection();
      byte byte1 = (byte)52;
      tCharByteHashMap0.adjustOrPutValue(char1, byte0, byte1);
      tCharByteHashMap0.contains(char0);
      assertEquals(false, tCharByteHashMap0.isEmpty());
      assertEquals("{J=52}", tCharByteHashMap0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap();
      char[] charArray0 = tCharByteHashMap0._set;
      assertEquals(23, tCharByteHashMap0.capacity());
      
      tCharByteHashMap0.compact();
      char char0 = '3';
      tCharByteHashMap0.contains(char0);
      assertEquals(3, tCharByteHashMap0.capacity());
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-476);
      char[] charArray0 = new char[8];
      char char0 = 'c';
      charArray0[0] = char0;
      char char1 = 'e';
      charArray0[1] = char1;
      char char2 = '@';
      charArray0[2] = char2;
      char char3 = 'N';
      charArray0[3] = char3;
      char char4 = 'Z';
      charArray0[4] = char4;
      char char5 = ')';
      charArray0[5] = char5;
      char char6 = ']';
      charArray0[6] = char6;
      char char7 = 'i';
      charArray0[7] = char7;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-9);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-2);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)1;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      boolean boolean0 = tCharByteHashMap0.containsValue(byte4);
      assertEquals(true, boolean0);
      assertEquals("{e=-9, c=0, @=-1, N=-2, ]=0, )=1, Z=0}", tCharByteHashMap0.toString());
      
      char char8 = '`';
      int int1 = 1409;
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(int1);
      byte byte7 = (byte)0;
      TCharByteHashMap tCharByteHashMap2 = new TCharByteHashMap(int0, (float) int0, char8, byte7);
      TCharByteHashMap tCharByteHashMap3 = new TCharByteHashMap((TCharByteMap) tCharByteHashMap2);
      byte byte8 = tCharByteHashMap3.getNoEntryValue();
      assertEquals((byte)0, byte8);
      assertEquals('`', tCharByteHashMap3.getNoEntryKey());
      assertEquals(3, tCharByteHashMap3.capacity());
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, int0);
      Segment segment0 = new Segment();
      String string0 = segment0.toString();
      boolean boolean0 = tCharByteHashMap0.equals((Object) string0);
      assertEquals(false, boolean0);
  }
}
