/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.hash.TIntFloatHashMap;
import gnu.trove.procedure.TIntProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntFloatHashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TIntFloatHash.getNoEntryKey()I: root-Branch
   * 2 gnu.trove.impl.hash.TIntFloatHash.<init>()V: root-Branch
   * 3 gnu.trove.impl.hash.TIntFloatHash.setUp(I)I: root-Branch
   */

//   @Test
//   public void test0()  throws Throwable  {
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
//       int int0 = tIntFloatHashMap0.getNoEntryKey();
//       assertEquals(0, int0);
//       assertEquals(23, tIntFloatHashMap0.capacity());
//       assertEquals(0.0F, tIntFloatHashMap0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TIntFloatHash.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   */

//   @Test
//   public void test1()  throws Throwable  {
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
//       ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
//       ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
//       tIntFloatHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
//       assertEquals(23, tIntFloatHashMap0.capacity());
//       assertEquals(0, tIntFloatHashMap0.getNoEntryKey());
//       assertEquals(0.0F, tIntFloatHashMap0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TIntFloatHash.<init>(IFIF)V: root-Branch
   */

//   @Test
//   public void test2()  throws Throwable  {
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(9, 9, 9, 9);
//       assertEquals(9, tIntFloatHashMap0.getNoEntryKey());
//       assertEquals(9.0F, tIntFloatHashMap0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TIntFloatHash.getNoEntryValue()F: root-Branch
   */

//   @Test
//   public void test3()  throws Throwable  {
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
//       float float0 = tIntFloatHashMap0.getNoEntryValue();
//       assertEquals(23, tIntFloatHashMap0.capacity());
//       assertEquals(0, tIntFloatHashMap0.getNoEntryKey());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TIntFloatHash.contains(I)Z: I5 Branch 1 IFLT L178 - true
   * 2 gnu.trove.impl.hash.TIntFloatHash.index(I)I: I37 Branch 5 IFNE L228 - false
   */

//   @Test
//   public void test4()  throws Throwable  {
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
//       boolean boolean0 = tIntFloatHashMap0.containsKey((int) (byte) (-119));
//       assertEquals(false, boolean0);
//       assertEquals(0, tIntFloatHashMap0.getNoEntryKey());
//       assertEquals(0.0F, tIntFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(23, tIntFloatHashMap0.capacity());
//   }

  //Test case number: 5
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.TIntFloatHash.contains(I)Z: I5 Branch 1 IFLT L178 - false
   * 2 gnu.trove.impl.hash.TIntFloatHash.insertKeyAt(II)V: root-Branch
   * 3 gnu.trove.impl.hash.TIntFloatHash.index(I)I: I37 Branch 5 IFNE L228 - true
   * 4 gnu.trove.impl.hash.TIntFloatHash.index(I)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 5 gnu.trove.impl.hash.TIntFloatHash.index(I)I: I51 Branch 7 IF_ICMPNE L231 - false
   * 6 gnu.trove.impl.hash.TIntFloatHash.insertKey(I)I: I30 Branch 13 IFNE L279 - false
   */

  @Test
  public void test5()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      tIntFloatHashMap0.putIfAbsent((-1175), 23);
      boolean boolean0 = tIntFloatHashMap0.containsKey((-1175));
      assertEquals(1, tIntFloatHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TIntFloatHash.forEach(Lgnu/trove/procedure/TIntProcedure;)Z: I18 Branch 2 IFLE L192 - true
   * 2 gnu.trove.impl.hash.TIntFloatHash.forEach(Lgnu/trove/procedure/TIntProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TIntFloatHash.forEach(Lgnu/trove/procedure/TIntProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

//   @Test
//   public void test6()  throws Throwable  {
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
//       boolean boolean0 = tIntFloatHashMap0.forEachKey((TIntProcedure) null);
//       assertEquals(0, tIntFloatHashMap0.getNoEntryKey());
//       assertEquals(true, boolean0);
//       assertEquals(23, tIntFloatHashMap0.capacity());
//       assertEquals(0.0F, tIntFloatHashMap0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 7
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TIntFloatHash.forEach(Lgnu/trove/procedure/TIntProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - false
   * 2 gnu.trove.impl.hash.TIntFloatHash.forEach(Lgnu/trove/procedure/TIntProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TIntFloatHash.forEach(Lgnu/trove/procedure/TIntProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   * 4 gnu.trove.impl.hash.TIntFloatHash.<init>(I)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap((-418));
      tIntFloatHashMap0.put((-418), 1084.5687F);
      // Undeclared exception!
      try {
        tIntFloatHashMap0.forEach((TIntProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 8
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.hash.TIntFloatHash.indexRehashed(IIIB)I: I29 Branch 8 IFGE L245 - true
   * 2 gnu.trove.impl.hash.TIntFloatHash.indexRehashed(IIIB)I: I46 Branch 9 IFNE L250 - true
   * 3 gnu.trove.impl.hash.TIntFloatHash.indexRehashed(IIIB)I: I58 Branch 10 IF_ICMPNE L254 - true
   * 4 gnu.trove.impl.hash.TIntFloatHash.indexRehashed(IIIB)I: I70 Branch 12 IF_ICMPNE L256 - true
   * 5 gnu.trove.impl.hash.TIntFloatHash.<init>(IF)V: root-Branch
   * 6 gnu.trove.impl.hash.TIntFloatHash.indexRehashed(IIIB)I: I46 Branch 9 IFNE L250 - false
   * 7 gnu.trove.impl.hash.TIntFloatHash.indexRehashed(IIIB)I: I29 Branch 8 IFGE L245 - false
   * 8 gnu.trove.impl.hash.TIntFloatHash.index(I)I: I51 Branch 7 IF_ICMPNE L231 - true
   */

//   @Test
//   public void test8()  throws Throwable  {
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap((-1175), 0.0F);
//       tIntFloatHashMap0.putIfAbsent((-1175), 23);
//       tIntFloatHashMap0.adjustOrPutValue((-1593), 0.0F, (float) 23);
//       tIntFloatHashMap0.reenableAutoCompaction(true);
//       float float0 = tIntFloatHashMap0.get(0);
//       assertEquals("{-1593=23.0, -1175=23.0}", tIntFloatHashMap0.toString());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 9
  /*
   * 10 covered goals:
   * 1 gnu.trove.impl.hash.TIntFloatHash.indexRehashed(IIIB)I: I58 Branch 10 IF_ICMPNE L254 - false
   * 2 gnu.trove.impl.hash.TIntFloatHash.indexRehashed(IIIB)I: I61 Branch 11 IF_ICMPEQ L254 - false
   * 3 gnu.trove.impl.hash.TIntFloatHash.insertKey(I)I: I56 Branch 15 IF_ICMPNE L286 - true
   * 4 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 5 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I45 Branch 18 IFGE L310 - false
   * 6 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I62 Branch 19 IFNE L316 - false
   * 7 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 8 gnu.trove.impl.hash.TIntFloatHash.index(I)I: I51 Branch 7 IF_ICMPNE L231 - true
   * 9 gnu.trove.impl.hash.TIntFloatHash.insertKey(I)I: I30 Branch 13 IFNE L279 - true
   * 10 gnu.trove.impl.hash.TIntFloatHash.insertKey(I)I: I50 Branch 14 IF_ICMPNE L286 - false
   */

//   @Test
//   public void test9()  throws Throwable  {
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
//       tIntFloatHashMap0.put(23, (-847));
//       tIntFloatHashMap0.putIfAbsent(0, 23);
//       float float0 = tIntFloatHashMap0.get(0);
//       assertEquals(2, tIntFloatHashMap0.size());
//       assertEquals(23.0F, float0, 0.01F);
//   }

  //Test case number: 10
  /*
   * 13 covered goals:
   * 1 gnu.trove.impl.hash.TIntFloatHash.indexRehashed(IIIB)I: I70 Branch 12 IF_ICMPNE L256 - false
   * 2 gnu.trove.impl.hash.TIntFloatHash.insertKey(I)I: I50 Branch 14 IF_ICMPNE L286 - true
   * 3 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I45 Branch 18 IFGE L310 - true
   * 4 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I62 Branch 19 IFNE L316 - true
   * 5 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 6 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I115 Branch 23 IF_ICMPNE L332 - true
   * 7 gnu.trove.impl.hash.TIntFloatHash.indexRehashed(IIIB)I: I29 Branch 8 IFGE L245 - true
   * 8 gnu.trove.impl.hash.TIntFloatHash.indexRehashed(IIIB)I: I29 Branch 8 IFGE L245 - false
   * 9 gnu.trove.impl.hash.TIntFloatHash.indexRehashed(IIIB)I: I46 Branch 9 IFNE L250 - true
   * 10 gnu.trove.impl.hash.TIntFloatHash.indexRehashed(IIIB)I: I58 Branch 10 IF_ICMPNE L254 - true
   * 11 gnu.trove.impl.hash.TIntFloatHash.indexRehashed(IIIB)I: I70 Branch 12 IF_ICMPNE L256 - true
   * 12 gnu.trove.impl.hash.TIntFloatHash.index(I)I: I46 Branch 6 IF_ICMPNE L231 - true
   * 13 gnu.trove.impl.hash.TIntFloatHash.contains(I)Z: I5 Branch 1 IFLT L178 - true
   */

  @Test
  public void test10()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      byteArray0[3] = (byte) (-119);
      tIntFloatHashMap0.compact();
      byteArray0[4] = (byte) (-12);
      tIntFloatHashMap0._states = byteArray0;
      tIntFloatHashMap0.put((int) (byte) (-12), (float) (byte) (-12));
      boolean boolean0 = tIntFloatHashMap0.contains(1);
      assertEquals("{-12=-12.0}", tIntFloatHashMap0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 11
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 2 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 3 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I67 Branch 20 IF_ICMPEQ L317 - false
   * 4 gnu.trove.impl.hash.TIntFloatHash.removeAt(I)V: root-Branch
   * 5 gnu.trove.impl.hash.TIntFloatHash.index(I)I: I37 Branch 5 IFNE L228 - true
   * 6 gnu.trove.impl.hash.TIntFloatHash.index(I)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 7 gnu.trove.impl.hash.TIntFloatHash.index(I)I: I51 Branch 7 IF_ICMPNE L231 - false
   * 8 gnu.trove.impl.hash.TIntFloatHash.insertKey(I)I: I56 Branch 15 IF_ICMPNE L286 - false
   */

//   @Test
//   public void test11()  throws Throwable  {
//       int[] intArray0 = new int[9];
//       intArray0[1] = Integer.MAX_VALUE;
//       float[] floatArray0 = new float[18];
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
//       tIntFloatHashMap0.remove(Integer.MAX_VALUE);
//       float float0 = tIntFloatHashMap0.put(Integer.MAX_VALUE, 162.05983F);
//       assertEquals("{2147483647=162.05983, 0=0.0}", tIntFloatHashMap0.toString());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 12
  /*
   * 9 covered goals:
   * 1 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 2 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I103 Branch 22 IF_ICMPNE L327 - true
   * 3 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I115 Branch 23 IF_ICMPNE L332 - false
   * 4 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I120 Branch 24 IF_ICMPEQ L336 - true
   * 5 gnu.trove.impl.hash.TIntFloatHash.<init>()V: root-Branch
   * 6 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I45 Branch 18 IFGE L310 - false
   * 7 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 8 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I115 Branch 23 IF_ICMPNE L332 - true
   * 9 gnu.trove.impl.hash.TIntFloatHash.insertKey(I)I: I50 Branch 14 IF_ICMPNE L286 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      byteArray0[3] = (byte) (-119);
      tIntFloatHashMap0.compact();
      byteArray0[4] = (byte) (-12);
      tIntFloatHashMap0._states = byteArray0;
      tIntFloatHashMap0.put((int) (byte) (-12), (float) (byte) (-12));
      // Undeclared exception!
      try {
        tIntFloatHashMap0.adjustOrPutValue(1675, (float) (byte)0, 0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No free or removed slots available. Key set full?!!
         //
      }
  }

  //Test case number: 13
  /*
   * 15 covered goals:
   * 1 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I103 Branch 22 IF_ICMPNE L327 - false
   * 2 gnu.trove.impl.hash.TIntFloatHash.<init>(I)V: root-Branch
   * 3 gnu.trove.impl.hash.TIntFloatHash.setUp(I)I: root-Branch
   * 4 gnu.trove.impl.hash.TIntFloatHash.insertKeyAt(II)V: root-Branch
   * 5 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 6 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I45 Branch 18 IFGE L310 - true
   * 7 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I62 Branch 19 IFNE L316 - true
   * 8 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I62 Branch 19 IFNE L316 - false
   * 9 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 10 gnu.trove.impl.hash.TIntFloatHash.insertKeyRehash(IIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 11 gnu.trove.impl.hash.TIntFloatHash.insertKey(I)I: I30 Branch 13 IFNE L279 - true
   * 12 gnu.trove.impl.hash.TIntFloatHash.insertKey(I)I: I30 Branch 13 IFNE L279 - false
   * 13 gnu.trove.impl.hash.TIntFloatHash.insertKey(I)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 14 gnu.trove.impl.hash.TIntFloatHash.insertKey(I)I: I56 Branch 15 IF_ICMPNE L286 - true
   * 15 gnu.trove.impl.hash.TIntFloatHash.insertKey(I)I: I56 Branch 15 IF_ICMPNE L286 - false
   */

//   @Test
//   public void test13()  throws Throwable  {
//       int[] intArray0 = new int[9];
//       intArray0[2] = (-817);
//       intArray0[4] = (-311);
//       intArray0[5] = (-311);
//       float[] floatArray0 = new float[9];
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
//       assertEquals(3, tIntFloatHashMap0.size());
//       assertEquals(0, tIntFloatHashMap0.getNoEntryKey());
//       assertEquals("{-817=0.0, -311=0.0, 0=0.0}", tIntFloatHashMap0.toString());
//       assertEquals(0.0F, tIntFloatHashMap0.getNoEntryValue(), 0.01F);
//   }
}
