/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedIntIntMap;
import gnu.trove.map.TIntIntMap;
import gnu.trove.map.hash.TIntIntHashMap;
import gnu.trove.procedure.TIntIntProcedure;
import gnu.trove.procedure.TIntProcedure;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedIntIntMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-1164);
      float float0 = (-975.4912F);
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, float0);
      int[] intArray0 = new int[9];
      intArray0[0] = int0;
      intArray0[1] = int0;
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      tIntIntHashMap0.compact();
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      tSynchronizedIntIntMap0.getNoEntryKey();
      intArray0[6] = int0;
      intArray0[7] = int0;
      intArray0[8] = int0;
      int[] intArray1 = tIntIntHashMap0.values(intArray0);
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap0);
      String string0 = "r9u0E}x,Ga}";
      int int1 = 1604;
      tIntIntHashMap1.containsValue(int1);
      tSynchronizedIntIntMap0.values(intArray1);
      String string1 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string1, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: r9u0E}x,Ga}://r9u0E%7Dx,Ga%7D?r9u0E%7Dx,Ga%7D#r9u0E%7Dx,Ga%7D
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = (-32);
      intArray0[0] = int0;
      int int1 = 209;
      intArray0[1] = int1;
      int int2 = 1694;
      intArray0[2] = int2;
      int int3 = 65;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = 106;
      intArray0[5] = int5;
      int int6 = (-742);
      intArray0[6] = int6;
      int int7 = 0;
      intArray0[7] = int7;
      int int8 = 1924;
      intArray0[8] = int8;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      String string0 = "^.j@n2Z>X@*rTT+PQ(:";
      int int9 = 1213;
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int9, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ^.j@n2Z>X@*rTT+PQ(:://%5E.j%40n2Z%3EX%40*rTT+PQ(:@[^.j@n2Z>X@*rTT+PQ(:]:1213%5E.j@n2Z%3EX@*rTT+PQ(:?%5E.j@n2Z%3EX@*rTT+PQ(:#%5E.j@n2Z%3EX@*rTT+PQ(:
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-659);
      int[] intArray0 = new int[5];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      int[] intArray1 = new int[10];
      intArray1[0] = int0;
      intArray1[1] = int0;
      intArray1[2] = int0;
      intArray1[3] = int0;
      intArray1[4] = int0;
      intArray1[5] = int0;
      intArray1[6] = int0;
      intArray1[7] = int0;
      intArray1[8] = int0;
      intArray1[9] = int0;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray1);
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap0);
      Locale locale0 = Locale.TAIWAN;
      String string0 = locale0.getISO3Country();
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap1, (Object) string0);
      int int1 = 1833;
      int int2 = tSynchronizedIntIntMap0.adjustOrPutValue(int1, intArray1[0], intArray0[1]);
      assertEquals("{1833=-659, -659=-659}", tIntIntHashMap1.toString());
      
      int int3 = 14;
      TIntIntHashMap tIntIntHashMap2 = new TIntIntHashMap(int0, int0, int3, int0);
      TSynchronizedIntIntMap tSynchronizedIntIntMap1 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap2);
      tSynchronizedIntIntMap1.toString();
      assertTrue(int0 == int2);
  }

  @Test
  public void test3()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://#
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 164089;
      intArray0[0] = int0;
      int int1 = (-276);
      intArray0[1] = int1;
      int int2 = 1796;
      intArray0[2] = int2;
      int int3 = 124;
      intArray0[3] = int3;
      int int4 = 51437;
      intArray0[4] = int4;
      int int5 = (-99);
      intArray0[5] = int5;
      int int6 = 3049;
      intArray0[6] = int6;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      String string0 = File.pathSeparator;
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0, (Object) string0);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      String string1 = locale0.getDisplayName(locale1);
      TSynchronizedIntIntMap tSynchronizedIntIntMap1 = new TSynchronizedIntIntMap((TIntIntMap) tSynchronizedIntIntMap0, (Object) string1);
      int int7 = tSynchronizedIntIntMap1.put(int6, intArray0[3]);
      assertEquals("{-99=-99, 51437=51437, 1796=1796, 3049=124, 164089=164089, -276=-276, 124=124}", tIntIntHashMap0.toString());
      assertEquals(3049, int7);
  }

  @Test
  public void test5()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      tSynchronizedIntIntMap0.size();
      tSynchronizedIntIntMap0.hashCode();
      tIntIntHashMap0.keys();
      int int0 = 0;
      tSynchronizedIntIntMap0.remove(int0);
      int[] intArray0 = tSynchronizedIntIntMap0.values();
      assertNotNull(intArray0);
      
      boolean boolean0 = tSynchronizedIntIntMap0.isEmpty();
      TIntProcedure tIntProcedure0 = null;
      boolean boolean1 = tSynchronizedIntIntMap0.forEachValue(tIntProcedure0);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-681);
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      int int1 = 189788857;
      tSynchronizedIntIntMap0.putIfAbsent(int1, int0);
      tSynchronizedIntIntMap0.valueCollection();
      tIntIntHashMap0.keySet();
      String string0 = "B)@(H@";
      File file0 = new File(string0, string0);
      String string1 = file0.getName();
      TSynchronizedIntIntMap tSynchronizedIntIntMap1 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0, (Object) string1);
      int int2 = 161;
      tSynchronizedIntIntMap1.containsValue(int2);
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap0);
      TSynchronizedIntIntMap tSynchronizedIntIntMap2 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap1);
      tIntIntHashMap1.size();
      tSynchronizedIntIntMap2.keySet();
      tSynchronizedIntIntMap2.getNoEntryKey();
      File file1 = file0.getAbsoluteFile();
      file0.compareTo(file1);
      tSynchronizedIntIntMap2.values();
      tIntIntHashMap0.putAll((TIntIntMap) tSynchronizedIntIntMap2);
      tSynchronizedIntIntMap2.keys(tIntIntHashMap0._set);
      tSynchronizedIntIntMap0.keys();
      float float0 = 0.0F;
      tSynchronizedIntIntMap2.putAll((TIntIntMap) tIntIntHashMap1);
      int int3 = 1;
      TIntIntHashMap tIntIntHashMap2 = new TIntIntHashMap(int0, float0, int3, int3);
      tIntIntHashMap2.values();
      Locale locale0 = Locale.GERMANY;
      String string2 = locale0.getVariant();
      tSynchronizedIntIntMap2.size();
      assertEquals(1, tIntIntHashMap0.size());
      
      TSynchronizedIntIntMap tSynchronizedIntIntMap3 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap2, (Object) string2);
      TSynchronizedIntIntMap tSynchronizedIntIntMap4 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap2);
      tSynchronizedIntIntMap3.clear();
      assertFalse(tSynchronizedIntIntMap3.equals(tSynchronizedIntIntMap2));
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      float float0 = 0.0F;
      int int2 = 0;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int1, float0, int1, int2);
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      tSynchronizedIntIntMap0.toString();
      float float1 = (-310.32394F);
      TIntIntMap tIntIntMap0 = null;
      TSynchronizedIntIntMap tSynchronizedIntIntMap1 = null;
      try {
        tSynchronizedIntIntMap1 = new TSynchronizedIntIntMap(tIntIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 9183457;
      float float0 = 10.0F;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, float0);
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap0);
      String string0 = "";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0);
      // Undeclared exception!
      try {
        stringTokenizer0.nextToken(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TIntIntMap tIntIntMap0 = null;
      int int0 = 195311;
      float float0 = 0.0F;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, float0);
      String string0 = tIntIntHashMap0.toString();
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: {}://%7B%7D@{}:195311%7B%7D?%7B%7D#%7B%7D
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-903);
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0);
      int int1 = 576;
      int int2 = 1;
      String string0 = Integer.toString(int1, int2);
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0, (Object) string0);
      tSynchronizedIntIntMap0.values();
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap();
      Locale locale0 = Locale.JAPANESE;
      String string1 = locale0.getScript();
      TSynchronizedIntIntMap tSynchronizedIntIntMap1 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap1, (Object) string1);
      int int3 = (-1461);
      int int4 = 0;
      boolean boolean0 = tSynchronizedIntIntMap1.adjustValue(int3, int4);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 0;
          TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0);
          String string0 = "MMo/sR]XJGngE";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 827;
      int int1 = 0;
      float float0 = 0.0F;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int1, float0);
      String string0 = "px{/[gL";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: px{/[gL://px{/[gLpx%7B/%5BgL#px%7B/[gL
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1097;
      float float0 = 1517.1813F;
      int[] intArray0 = new int[1];
      intArray0[0] = int0;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      tIntIntHashMap0.clear();
      Object object0 = null;
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0, object0);
      // Undeclared exception!
      try {
        tSynchronizedIntIntMap0.remove(intArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = 770;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 120;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 15661423;
      intArray0[4] = int4;
      int int5 = (-457);
      intArray0[5] = int5;
      int int6 = 0;
      intArray0[6] = int6;
      int int7 = 0;
      intArray0[7] = int7;
      int int8 = 1333;
      intArray0[8] = int8;
      int int9 = (-1);
      intArray0[9] = int9;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      Locale locale0 = Locale.getDefault();
      String string0 = locale0.getDisplayVariant();
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0, (Object) string0);
      boolean boolean0 = tSynchronizedIntIntMap0.isEmpty();
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = locale0.getVariant();
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0, (Object) string0);
      tIntIntHashMap0.iterator();
      int int0 = tSynchronizedIntIntMap0.getNoEntryKey();
      tIntIntHashMap0.toString();
      tSynchronizedIntIntMap0.keys();
      tIntIntHashMap0.size();
      TSynchronizedIntIntMap tSynchronizedIntIntMap1 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0, (Object) string0);
      tSynchronizedIntIntMap0.putAll((TIntIntMap) tSynchronizedIntIntMap1);
      int int1 = tIntIntHashMap0.size();
      tIntIntHashMap0.adjustOrPutValue(int1, int1, int1);
      tSynchronizedIntIntMap1.keys();
      Object object0 = new Object();
      TSynchronizedIntIntMap tSynchronizedIntIntMap2 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0, object0);
      locale0.clone();
      int int2 = 0;
      int int3 = 81;
      tSynchronizedIntIntMap0.adjustOrPutValue(int3, int2, int3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int2);
      int int4 = 1530;
      tSynchronizedIntIntMap0.adjustOrPutValue(int0, int4, int4);
      tSynchronizedIntIntMap2.isEmpty();
      tSynchronizedIntIntMap2.iterator();
      tSynchronizedIntIntMap1.size();
      String string1 = byteArrayOutputStream0.toString();
      int int5 = 0;
      tSynchronizedIntIntMap1.containsKey(int5);
      byteArrayOutputStream0.write(tIntIntHashMap0._states);
      tSynchronizedIntIntMap1.equals((Object) string1);
      tSynchronizedIntIntMap1.getNoEntryKey();
      int int6 = 114;
      tSynchronizedIntIntMap2.increment(int6);
      TSynchronizedIntIntMap tSynchronizedIntIntMap3 = new TSynchronizedIntIntMap((TIntIntMap) tSynchronizedIntIntMap1);
      tSynchronizedIntIntMap2.toString();
      int int7 = tSynchronizedIntIntMap2.remove(int3);
      assertEquals(1, tIntIntHashMap0.size());
      assertEquals(81, int7);
  }

  @Test
  public void test16()  throws Throwable  {
      TIntIntMap tIntIntMap0 = null;
      Locale locale0 = Locale.FRENCH;
      char char0 = 'E';
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = byteArrayOutputStream0.toString();
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap(tIntIntMap0, (Object) string0);
      TIntIntProcedure tIntIntProcedure0 = null;
      // Undeclared exception!
      try {
        tSynchronizedIntIntMap0.forEachEntry(tIntIntProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      TIntIntMap tIntIntMap0 = null;
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = null;
      try {
        tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap(tIntIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = (-818);
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, int0);
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      TSynchronizedIntIntMap tSynchronizedIntIntMap1 = new TSynchronizedIntIntMap((TIntIntMap) tSynchronizedIntIntMap0);
      int int1 = 14;
      boolean boolean0 = tSynchronizedIntIntMap1.adjustValue(int0, int1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      TIntIntMap tIntIntMap0 = null;
      TIntIntHashMap tIntIntHashMap0 = null;
      try {
        tIntIntHashMap0 = new TIntIntHashMap(tIntIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
