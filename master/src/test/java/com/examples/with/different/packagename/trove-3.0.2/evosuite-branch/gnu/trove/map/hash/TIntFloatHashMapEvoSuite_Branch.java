/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TFloatCollection;
import gnu.trove.function.TFloatFunction;
import gnu.trove.map.TIntFloatMap;
import gnu.trove.map.hash.TIntFloatHashMap;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.procedure.TIntFloatProcedure;
import gnu.trove.procedure.TIntProcedure;
import gnu.trove.set.TIntSet;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntFloatHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TIntFloatHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TIntFloatHashMap.keySet()Lgnu/trove/set/TIntSet;: root-Branch
   * 3 gnu.trove.map.hash.TIntFloatHashMap.setUp(I)I: root-Branch
   * 4 gnu.trove.map.hash.TIntFloatHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap((-1287), (-1287));
      TIntSet tIntSet0 = tIntFloatHashMap0.keySet();
      assertEquals(0, tIntSet0.size());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap$TValueView.<init>(Lgnu/trove/map/hash/TIntFloatHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TIntFloatHashMap.valueCollection()Lgnu/trove/TFloatCollection;: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap((-1287), (-1287));
      TFloatCollection tFloatCollection0 = tIntFloatHashMap0.valueCollection();
      assertEquals(0, tFloatCollection0.size());
  }

  //Test case number: 2
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap$TIntFloatHashIterator.<init>(Lgnu/trove/map/hash/TIntFloatHashMap;Lgnu/trove/map/hash/TIntFloatHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TIntFloatHashMap.iterator()Lgnu/trove/iterator/TIntFloatIterator;: root-Branch
   * 3 gnu.trove.map.hash.TIntFloatHashMap.<init>(IFIF)V: root-Branch
   * 4 gnu.trove.map.hash.TIntFloatHashMap.<init>(Lgnu/trove/map/TIntFloatMap;)V: I10 Branch 34 IFEQ L133 - false
   * 5 gnu.trove.map.hash.TIntFloatHashMap.<init>(Lgnu/trove/map/TIntFloatMap;)V: I38 Branch 35 IFEQ L139 - false
   * 6 gnu.trove.map.hash.TIntFloatHashMap.<init>(Lgnu/trove/map/TIntFloatMap;)V: I52 Branch 36 IFEQ L143 - false
   * 7 gnu.trove.map.hash.TIntFloatHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 8 gnu.trove.map.hash.TIntFloatHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 9 gnu.trove.map.hash.TIntFloatHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 10 gnu.trove.map.hash.TIntFloatHashMap.putAll(Lgnu/trove/map/TIntFloatMap;)V: I15 Branch 43 IFEQ L243 - true
   */

//   @Test
//   public void test2()  throws Throwable  {
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap((-821), (float) (-821), (-1526), 1082.0355F);
//       TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap((TIntFloatMap) tIntFloatHashMap0);
//       assertEquals(1082.0355F, tIntFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals(-1526, tIntFloatHashMap1.getNoEntryKey());
//       assertEquals(3, tIntFloatHashMap1.capacity());
//   }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.clear()V: root-Branch
   * 2 gnu.trove.map.hash.TIntFloatHashMap.<init>()V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      tIntFloatHashMap0.clear();
      assertEquals("{}", tIntFloatHashMap0.toString());
      assertEquals(23, tIntFloatHashMap0.capacity());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.containsKey(I)Z: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      tIntFloatHashMap0.containsKey(0);
      assertEquals(23, tIntFloatHashMap0.capacity());
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.forEachKey(Lgnu/trove/procedure/TIntProcedure;)Z: root-Branch
   * 2 gnu.trove.map.hash.TIntFloatHashMap.<init>(IFIF)V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(1395, 1395, 0, 1395);
      boolean boolean0 = tIntFloatHashMap0.forEachKey((TIntProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TIntFloatHashMap.remove(I)F: I14 Branch 46 IFLT L276 - false
   * 3 gnu.trove.map.hash.TIntFloatHashMap.put(IF)F: root-Branch
   * 4 gnu.trove.map.hash.TIntFloatHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 5 gnu.trove.map.hash.TIntFloatHashMap.doPut(IFI)F: I12 Branch 40 IFGE L214 - true
   * 6 gnu.trove.map.hash.TIntFloatHashMap.doPut(IFI)F: I41 Branch 41 IFEQ L221 - false
   */

//   @Test
//   public void test6()  throws Throwable  {
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(0, 0);
//       tIntFloatHashMap0.put(0, 0.0F);
//       assertEquals(false, tIntFloatHashMap0.isEmpty());
//       
//       float float0 = tIntFloatHashMap0.remove(0);
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 7
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.increment(I)Z: root-Branch
   * 2 gnu.trove.map.hash.TIntFloatHashMap.adjustValue(IF)Z: I9 Branch 71 IFGE L477 - false
   */

  @Test
  public void test7()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      boolean boolean0 = tIntFloatHashMap0.increment(0);
      assertEquals(23, tIntFloatHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 8
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.putIfAbsent(IF)F: I9 Branch 39 IFGE L205 - false
   * 2 gnu.trove.map.hash.TIntFloatHashMap.doPut(IFI)F: I12 Branch 40 IFGE L214 - false
   * 3 gnu.trove.map.hash.TIntFloatHashMap.doPut(IFI)F: I41 Branch 41 IFEQ L221 - true
   * 4 gnu.trove.map.hash.TIntFloatHashMap.<init>([I[F)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 5 gnu.trove.map.hash.TIntFloatHashMap.<init>([I[F)V: I24 Branch 33 IF_ICMPGE L119 - false
   */

//   @Test
//   public void test8()  throws Throwable  {
//       int[] intArray0 = new int[19];
//       float[] floatArray0 = new float[4];
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
//       float float0 = tIntFloatHashMap0.putIfAbsent(0, 0.0F);
//       assertEquals(1, tIntFloatHashMap0.size());
//       assertEquals(43, tIntFloatHashMap0.capacity());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 9
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - false
   * 2 gnu.trove.map.hash.TIntFloatHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   */

  @Test
  public void test9()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      hashMap0.put((Integer) 1907, (Float) 1642.0F);
      tIntFloatHashMap0.putAll((Map<? extends Integer, ? extends Float>) hashMap0);
      assertEquals("{1907=1642.0}", tIntFloatHashMap0.toString());
      assertEquals(false, tIntFloatHashMap0.isEmpty());
  }

  //Test case number: 10
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.get(I)F: I9 Branch 44 IFGE L253 - true
   * 2 gnu.trove.map.hash.TIntFloatHashMap.adjustOrPutValue(IFF)F: I9 Branch 72 IFGE L491 - true
   * 3 gnu.trove.map.hash.TIntFloatHashMap.adjustOrPutValue(IFF)F: I58 Branch 73 IFEQ L502 - false
   * 4 gnu.trove.map.hash.TIntFloatHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 5 gnu.trove.map.hash.TIntFloatHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 6 gnu.trove.map.hash.TIntFloatHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 7 gnu.trove.map.hash.TIntFloatHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 8 gnu.trove.map.hash.TIntFloatHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 9 gnu.trove.map.hash.TIntFloatHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 10 gnu.trove.map.hash.TIntFloatHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - true
   */

  @Test
  public void test10()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      tIntFloatHashMap0.adjustOrPutValue(0, 0.0F, (-1492.2437F));
      boolean boolean0 = tIntFloatHashMap0.equals((Object) tIntFloatHashMap0);
      assertEquals(1, tIntFloatHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.get(I)F: I9 Branch 44 IFGE L253 - false
   */

//   @Test
//   public void test11()  throws Throwable  {
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap((-1287), (-1287));
//       float float0 = tIntFloatHashMap0.get(0);
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      tIntFloatHashMap0.adjustOrPutValue(0, 0.0F, (-1492.2437F));
      boolean boolean0 = tIntFloatHashMap0.isEmpty();
      assertEquals(1, tIntFloatHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test13()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap((-1287), (-1287));
      boolean boolean0 = tIntFloatHashMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.remove(I)F: I14 Branch 46 IFLT L276 - true
   */

//   @Test
//   public void test14()  throws Throwable  {
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap((-1287), (-1287));
//       float float0 = tIntFloatHashMap0.remove((-1287));
//       assertEquals(true, tIntFloatHashMap0.isEmpty());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 15
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.keys()[I: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TIntFloatHashMap.keys()[I: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TIntFloatHashMap.keys()[I: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TIntFloatHashMap.keys()[I: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[19];
      float[] floatArray0 = new float[4];
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      int[] intArray1 = tIntFloatHashMap0.keys();
      assertNotNull(intArray1);
      assertEquals("{0=0.0}", tIntFloatHashMap0.toString());
      assertEquals(1, tIntFloatHashMap0.size());
      assertEquals(43, tIntFloatHashMap0.capacity());
  }

  //Test case number: 16
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.keys([I)[I: I44 Branch 51 IF_ICMPNE L323 - false
   * 2 gnu.trove.map.hash.TIntFloatHashMap.keys([I)[I: I10 Branch 49 IF_ICMPGE L315 - true
   * 3 gnu.trove.map.hash.TIntFloatHashMap.keys([I)[I: I37 Branch 50 IFLE L322 - true
   * 4 gnu.trove.map.hash.TIntFloatHashMap.keys([I)[I: I37 Branch 50 IFLE L322 - false
   * 5 gnu.trove.map.hash.TIntFloatHashMap.keys([I)[I: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[21];
      float[] floatArray0 = new float[10];
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      int[] intArray1 = tIntFloatHashMap0.keys(tIntFloatHashMap0._set);
      assertEquals(1, tIntFloatHashMap0.size());
      assertEquals(43, tIntFloatHashMap0.capacity());
      assertNotNull(intArray1);
      assertEquals("{0=0.0}", tIntFloatHashMap0.toString());
  }

  //Test case number: 17
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.values()[F: I34 Branch 53 IF_ICMPNE L344 - false
   * 2 gnu.trove.map.hash.TIntFloatHashMap.values()[F: I27 Branch 52 IFLE L343 - true
   * 3 gnu.trove.map.hash.TIntFloatHashMap.values()[F: I27 Branch 52 IFLE L343 - false
   * 4 gnu.trove.map.hash.TIntFloatHashMap.values()[F: I34 Branch 53 IF_ICMPNE L344 - true
   * 5 gnu.trove.map.hash.TIntFloatHashMap.putIfAbsent(IF)F: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(1505, 0.0F);
      tIntFloatHashMap0.putIfAbsent(1505, 73.73619F);
      tIntFloatHashMap0.values();
      assertEquals(1, tIntFloatHashMap0.size());
      assertEquals(7, tIntFloatHashMap0.capacity());
  }

  //Test case number: 18
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.values([F)[F: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TIntFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TIntFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TIntFloatHashMap.values([F)[F: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      float[] floatArray0 = new float[2];
      float[] floatArray1 = tIntFloatHashMap0.values(floatArray0);
      assertEquals(23, tIntFloatHashMap0.capacity());
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
  }

  //Test case number: 19
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.values([F)[F: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TIntFloatHashMap.values([F)[F: I44 Branch 56 IF_ICMPNE L363 - false
   * 3 gnu.trove.map.hash.TIntFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - true
   * 4 gnu.trove.map.hash.TIntFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - false
   * 5 gnu.trove.map.hash.TIntFloatHashMap.values([F)[F: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 487;
      intArray0[4] = (-1293);
      float[] floatArray0 = new float[10];
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      float[] floatArray1 = new float[2];
      float[] floatArray2 = tIntFloatHashMap0.values(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(3, tIntFloatHashMap0.size());
      assertEquals("{487=0.0, -1293=0.0, 0=0.0}", tIntFloatHashMap0.toString());
      assertNotSame(floatArray2, floatArray1);
  }

  //Test case number: 20
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TIntFloatHashMap.containsValue(F)Z: I31 Branch 59 IFNE L377 - true
   * 3 gnu.trove.map.hash.TIntFloatHashMap.containsValue(F)Z: I18 Branch 57 IFLE L376 - true
   * 4 gnu.trove.map.hash.TIntFloatHashMap.containsValue(F)Z: I18 Branch 57 IFLE L376 - false
   * 5 gnu.trove.map.hash.TIntFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      tIntFloatHashMap0.putIfAbsent(1642, 1642);
      boolean boolean0 = tIntFloatHashMap0.containsValue(6.6360896E8F);
      assertEquals("{1642=1642.0}", tIntFloatHashMap0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 21
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.containsValue(F)Z: I31 Branch 59 IFNE L377 - false
   * 2 gnu.trove.map.hash.TIntFloatHashMap.containsValue(F)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TIntFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 4 gnu.trove.map.hash.TIntFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - false
   */

  @Test
  public void test21()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      tIntFloatHashMap0.putIfAbsent(0, 0);
      boolean boolean0 = tIntFloatHashMap0.containsValue((float) 0);
      assertEquals("{0=0.0}", tIntFloatHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TIntFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TIntFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   * 4 gnu.trove.map.hash.TIntFloatHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(0);
      boolean boolean0 = tIntFloatHashMap0.forEachValue((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TIntFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TIntFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[6];
      float[] floatArray0 = new float[6];
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      // Undeclared exception!
      try {
        tIntFloatHashMap0.forEachValue((TFloatProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TIntFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TIntFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(581);
      tIntFloatHashMap0.transformValues((TFloatFunction) null);
      assertEquals(1201, tIntFloatHashMap0.capacity());
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TIntFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TIntFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[21];
      float[] floatArray0 = new float[10];
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      // Undeclared exception!
      try {
        tIntFloatHashMap0.transformValues((TFloatFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.retainEntries(Lgnu/trove/procedure/TIntFloatProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TIntFloatHashMap.retainEntries(Lgnu/trove/procedure/TIntFloatProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TIntFloatHashMap.retainEntries(Lgnu/trove/procedure/TIntFloatProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   * 4 gnu.trove.map.hash.TIntFloatHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(0);
      boolean boolean0 = tIntFloatHashMap0.retainEntries((TIntFloatProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 27
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.adjustValue(IF)Z: I9 Branch 71 IFGE L477 - true
   * 2 gnu.trove.map.hash.TIntFloatHashMap.increment(I)Z: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[6];
      float[] floatArray0 = new float[5];
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      boolean boolean0 = tIntFloatHashMap0.increment(0);
      assertEquals("{0=1.0}", tIntFloatHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.adjustOrPutValue(IFF)F: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TIntFloatHashMap.adjustOrPutValue(IFF)F: I58 Branch 73 IFEQ L502 - true
   */

//   @Test
//   public void test28()  throws Throwable  {
//       int[] intArray0 = new int[6];
//       intArray0[1] = 1;
//       float[] floatArray0 = new float[5];
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
//       float float0 = tIntFloatHashMap0.adjustOrPutValue(1, (float) (-1727), (-1230.1804F));
//       assertEquals("{1=-1727.0, 0=0.0}", tIntFloatHashMap0.toString());
//       assertEquals((-1727.0F), float0, 0.01F);
//   }

  //Test case number: 29
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(1505, 0.0F);
      boolean boolean0 = tIntFloatHashMap0.equals((Object) "-1.0");
      assertEquals(false, boolean0);
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   */

  @Test
  public void test30()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap((-1287), (-1287));
      float[] floatArray0 = new float[9];
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(tIntFloatHashMap0._set, floatArray0);
      boolean boolean0 = tIntFloatHashMap0.equals((Object) tIntFloatHashMap1);
      assertEquals(23, tIntFloatHashMap1.capacity());
      assertEquals(1, tIntFloatHashMap1.size());
      assertEquals(false, boolean0);
      assertFalse(tIntFloatHashMap1.equals(tIntFloatHashMap0));
      assertEquals("{0=0.0}", tIntFloatHashMap1.toString());
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - false
   * 2 gnu.trove.map.hash.TIntFloatHashMap.equals(Ljava/lang/Object;)Z: I89 Branch 79 IFEQ L1200 - false
   * 3 gnu.trove.map.hash.TIntFloatHashMap.equals(Ljava/lang/Object;)Z: I93 Branch 80 IFEQ L1200 - true
   */

  @Test
  public void test31()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      float[] floatArray0 = new float[9];
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(tIntFloatHashMap0._set, floatArray0);
      tIntFloatHashMap0.adjustOrPutValue(0, 0.0F, (-1492.2437F));
      boolean boolean0 = tIntFloatHashMap0.equals((Object) tIntFloatHashMap1);
      assertEquals("{0=-1492.2437}", tIntFloatHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 32
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.equals(Ljava/lang/Object;)Z: I89 Branch 79 IFEQ L1200 - true
   * 2 gnu.trove.map.hash.TIntFloatHashMap$TIntFloatHashIterator.<init>(Lgnu/trove/map/hash/TIntFloatHashMap;Lgnu/trove/map/hash/TIntFloatHashMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TIntFloatHashMap$TIntFloatHashIterator.value()F: root-Branch
   * 4 gnu.trove.map.hash.TIntFloatHashMap$TIntFloatHashIterator.advance()V: root-Branch
   * 5 gnu.trove.map.hash.TIntFloatHashMap$TIntFloatHashIterator.key()I: root-Branch
   * 6 gnu.trove.map.hash.TIntFloatHashMap.iterator()Lgnu/trove/iterator/TIntFloatIterator;: root-Branch
   * 7 gnu.trove.map.hash.TIntFloatHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 8 gnu.trove.map.hash.TIntFloatHashMap.<init>(Lgnu/trove/map/TIntFloatMap;)V: I10 Branch 34 IFEQ L133 - false
   * 9 gnu.trove.map.hash.TIntFloatHashMap.<init>(Lgnu/trove/map/TIntFloatMap;)V: I38 Branch 35 IFEQ L139 - true
   * 10 gnu.trove.map.hash.TIntFloatHashMap.<init>(Lgnu/trove/map/TIntFloatMap;)V: I52 Branch 36 IFEQ L143 - true
   * 11 gnu.trove.map.hash.TIntFloatHashMap.putAll(Lgnu/trove/map/TIntFloatMap;)V: I15 Branch 43 IFEQ L243 - true
   * 12 gnu.trove.map.hash.TIntFloatHashMap.putAll(Lgnu/trove/map/TIntFloatMap;)V: I15 Branch 43 IFEQ L243 - false
   */

  @Test
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[6];
      float[] floatArray0 = new float[5];
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap((TIntFloatMap) tIntFloatHashMap0);
      tIntFloatHashMap1.put(0, (-1727));
      boolean boolean0 = tIntFloatHashMap0.equals((Object) tIntFloatHashMap1);
      assertEquals("{0=-1727.0}", tIntFloatHashMap1.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 33
  /*
   * 11 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.equals(Ljava/lang/Object;)Z: I93 Branch 80 IFEQ L1200 - false
   * 2 gnu.trove.map.hash.TIntFloatHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 3 gnu.trove.map.hash.TIntFloatHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 4 gnu.trove.map.hash.TIntFloatHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 5 gnu.trove.map.hash.TIntFloatHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 6 gnu.trove.map.hash.TIntFloatHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 7 gnu.trove.map.hash.TIntFloatHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - false
   * 8 gnu.trove.map.hash.TIntFloatHashMap.equals(Ljava/lang/Object;)Z: I89 Branch 79 IFEQ L1200 - false
   * 9 gnu.trove.map.hash.TIntFloatHashMap.get(I)F: I9 Branch 44 IFGE L253 - true
   * 10 gnu.trove.map.hash.TIntFloatHashMap.adjustOrPutValue(IFF)F: I9 Branch 72 IFGE L491 - true
   * 11 gnu.trove.map.hash.TIntFloatHashMap.adjustOrPutValue(IFF)F: I58 Branch 73 IFEQ L502 - false
   */

  @Test
  public void test33()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap((-1287), (-1287));
      float[] floatArray0 = new float[9];
      floatArray0[2] = (-1241.0022F);
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(tIntFloatHashMap0._set, floatArray0);
      tIntFloatHashMap0.adjustOrPutValue(0, 0.0F, (-1492.2437F));
      boolean boolean0 = tIntFloatHashMap0.equals((Object) tIntFloatHashMap1);
      assertEquals("{0=-1492.2437}", tIntFloatHashMap0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 34
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 2 gnu.trove.map.hash.TIntFloatHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TIntFloatHashMap.putIfAbsent(IF)F: I9 Branch 39 IFGE L205 - true
   * 4 gnu.trove.map.hash.TIntFloatHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 5 gnu.trove.map.hash.TIntFloatHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 6 gnu.trove.map.hash.TIntFloatHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   */

  @Test
  public void test34()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      tIntFloatHashMap0.putIfAbsent(0, 0);
      int int0 = tIntFloatHashMap0.hashCode();
      assertEquals("{0=0.0}", tIntFloatHashMap0.toString());
      assertEquals(0, int0);
  }

  //Test case number: 35
  /*
   * 13 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap$1.execute(IF)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TIntFloatHashMap$1.<init>(Lgnu/trove/map/hash/TIntFloatHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 3 gnu.trove.map.hash.TIntFloatHashMap$1.execute(IF)Z: I4 Branch 115 IFEQ L1233 - false
   * 4 gnu.trove.map.hash.TIntFloatHashMap.toString()Ljava/lang/String;: root-Branch
   * 5 gnu.trove.map.hash.TIntFloatHashMap.forEachEntry(Lgnu/trove/procedure/TIntFloatProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 6 gnu.trove.map.hash.TIntFloatHashMap.forEachEntry(Lgnu/trove/procedure/TIntFloatProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 7 gnu.trove.map.hash.TIntFloatHashMap.forEachEntry(Lgnu/trove/procedure/TIntFloatProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 8 gnu.trove.map.hash.TIntFloatHashMap.forEachEntry(Lgnu/trove/procedure/TIntFloatProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 9 gnu.trove.map.hash.TIntFloatHashMap.forEachEntry(Lgnu/trove/procedure/TIntFloatProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 10 gnu.trove.map.hash.TIntFloatHashMap.doPut(IFI)F: I12 Branch 40 IFGE L214 - false
   * 11 gnu.trove.map.hash.TIntFloatHashMap.doPut(IFI)F: I41 Branch 41 IFEQ L221 - true
   * 12 gnu.trove.map.hash.TIntFloatHashMap.<init>([I[F)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 13 gnu.trove.map.hash.TIntFloatHashMap.<init>([I[F)V: I24 Branch 33 IF_ICMPGE L119 - false
   */

  @Test
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-943);
      float[] floatArray0 = new float[3];
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      String string0 = tIntFloatHashMap0.toString();
      assertEquals("{-943=0.0, 0=0.0}", string0);
      assertNotNull(string0);
      assertEquals(7, tIntFloatHashMap0.capacity());
      assertEquals(2, tIntFloatHashMap0.size());
  }

  //Test case number: 36
  /*
   * 13 covered goals:
   * 1 gnu.trove.map.hash.TIntFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 2 gnu.trove.map.hash.TIntFloatHashMap.put(IF)F: root-Branch
   * 3 gnu.trove.map.hash.TIntFloatHashMap.setUp(I)I: root-Branch
   * 4 gnu.trove.map.hash.TIntFloatHashMap.<init>(IF)V: root-Branch
   * 5 gnu.trove.map.hash.TIntFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 6 gnu.trove.map.hash.TIntFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 7 gnu.trove.map.hash.TIntFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 8 gnu.trove.map.hash.TIntFloatHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 9 gnu.trove.map.hash.TIntFloatHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 10 gnu.trove.map.hash.TIntFloatHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 11 gnu.trove.map.hash.TIntFloatHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 12 gnu.trove.map.hash.TIntFloatHashMap.doPut(IFI)F: I12 Branch 40 IFGE L214 - true
   * 13 gnu.trove.map.hash.TIntFloatHashMap.doPut(IFI)F: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test36()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(0, 0);
      tIntFloatHashMap0.put(0, 0.0F);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) pipedOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) bufferedOutputStream0);
      tIntFloatHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
  }
}
