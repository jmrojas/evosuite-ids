/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableObjectIntMap;
import gnu.trove.map.TObjectIntMap;
import gnu.trove.map.custom_hash.TObjectIntCustomHashMap;
import gnu.trove.map.hash.TObjectIntHashMap;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableObjectIntMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TObjectIntMap<Object> tObjectIntMap0 = null;
      TUnmodifiableObjectIntMap<Object> tUnmodifiableObjectIntMap0 = null;
      try {
        tUnmodifiableObjectIntMap0 = new TUnmodifiableObjectIntMap<Object>(tObjectIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      int int1 = 0;
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>(int0, float0, int1);
      TObjectIntHashMap<Object> tObjectIntHashMap1 = null;
      try {
        tObjectIntHashMap1 = new TObjectIntHashMap<Object>((TObjectIntMap<?>) tObjectIntHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-1);
      float float0 = 0.0F;
      TObjectIntCustomHashMap<Integer> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<Integer>();
      TUnmodifiableObjectIntMap<Integer> tUnmodifiableObjectIntMap0 = new TUnmodifiableObjectIntMap<Integer>((TObjectIntMap<Integer>) tObjectIntCustomHashMap0);
      int int1 = 0;
      // Undeclared exception!
      try {
        tObjectIntCustomHashMap0.put((Integer) int0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 0;
          TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>(int0);
          TUnmodifiableObjectIntMap<Integer> tUnmodifiableObjectIntMap0 = new TUnmodifiableObjectIntMap<Integer>((TObjectIntMap<Integer>) tObjectIntHashMap0);
          Locale locale0 = Locale.CHINESE;
          String string0 = locale0.getDisplayLanguage();
          tUnmodifiableObjectIntMap0.get((Object) string0);
          TObjectIntHashMap<Object> tObjectIntHashMap1 = new TObjectIntHashMap<Object>((TObjectIntMap<?>) tUnmodifiableObjectIntMap0);
          TUnmodifiableObjectIntMap<Object> tUnmodifiableObjectIntMap1 = new TUnmodifiableObjectIntMap<Object>((TObjectIntMap<Object>) tObjectIntHashMap1);
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      int int0 = 1764;
      TObjectIntCustomHashMap<Integer> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, int0);
      TUnmodifiableObjectIntMap<Integer> tUnmodifiableObjectIntMap0 = new TUnmodifiableObjectIntMap<Integer>((TObjectIntMap<Integer>) tObjectIntCustomHashMap0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      String string0 = "%";
      String string1 = "[Warning] apparent concurrent modification of the key set. Size before and after rehash() do not match ";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: %://%%5BWarning%5D%20apparent%20concurrent%20modification%20of%20the%20key%20set.%20Size%20before%20and%20after%20rehash()%20do%20not%20match%20#[Warning]%20apparent%20concurrent%20modification%20of%20the%20key%20set.%20Size%20before%20and%20after%20rehash()%20do%20not%20match%20
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      HashingStrategy<Object> hashingStrategy0 = null;
      int int0 = 189;
      TObjectIntCustomHashMap<Integer> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<Integer>((HashingStrategy<? super Integer>) hashingStrategy0, int0, (float) int0);
      TUnmodifiableObjectIntMap<Integer> tUnmodifiableObjectIntMap0 = new TUnmodifiableObjectIntMap<Integer>((TObjectIntMap<Integer>) tObjectIntCustomHashMap0);
      int int1 = tUnmodifiableObjectIntMap0.getNoEntryValue();
      assertFalse(int1 == int0);
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
          int int0 = (-728);
          float float0 = 1142.4595F;
          TObjectIntCustomHashMap<Object> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, int0, float0, int0);
          TUnmodifiableObjectIntMap<Object> tUnmodifiableObjectIntMap0 = new TUnmodifiableObjectIntMap<Object>((TObjectIntMap<Object>) tObjectIntCustomHashMap0);
          String string0 = "bzF\"iV+k27";
          String string1 = "";
          File file0 = new File(string0, string1);
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"bzF\"iV+k27/bzF\"iV+k274968591928014159500bzF\"iV+k27\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.File.createTempFile(File.java:1871)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:601)
             // org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:264)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
      TObjectIntHashMap<Object> tObjectIntHashMap0 = new TObjectIntHashMap<Object>();
      TUnmodifiableObjectIntMap<Object> tUnmodifiableObjectIntMap0 = new TUnmodifiableObjectIntMap<Object>((TObjectIntMap<Object>) tObjectIntHashMap0);
      tUnmodifiableObjectIntMap0.isEmpty();
      int int0 = (-1);
      float float0 = 1050.9069F;
      TObjectIntHashMap<Integer> tObjectIntHashMap1 = new TObjectIntHashMap<Integer>(int0, float0);
      TUnmodifiableObjectIntMap<Integer> tUnmodifiableObjectIntMap1 = new TUnmodifiableObjectIntMap<Integer>((TObjectIntMap<Integer>) tObjectIntHashMap1);
      int int1 = 422;
      String string0 = Integer.toString(int1);
      tUnmodifiableObjectIntMap1.equals((Object) string0);
      TObjectIntMap<Integer> tObjectIntMap0 = null;
      TUnmodifiableObjectIntMap<Integer> tUnmodifiableObjectIntMap2 = null;
      try {
        tUnmodifiableObjectIntMap2 = new TUnmodifiableObjectIntMap<Integer>(tObjectIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TObjectIntMap<String> tObjectIntMap0 = null;
      TUnmodifiableObjectIntMap<String> tUnmodifiableObjectIntMap0 = null;
      try {
        tUnmodifiableObjectIntMap0 = new TUnmodifiableObjectIntMap<String>(tObjectIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      HashingStrategy<Object> hashingStrategy0 = null;
      TObjectIntHashMap<Object> tObjectIntHashMap0 = new TObjectIntHashMap<Object>();
      TUnmodifiableObjectIntMap<Object> tUnmodifiableObjectIntMap0 = new TUnmodifiableObjectIntMap<Object>((TObjectIntMap<Object>) tObjectIntHashMap0);
      int int0 = 963;
      float float0 = 446.611F;
      TObjectIntCustomHashMap<Integer> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<Integer>((HashingStrategy<? super Integer>) hashingStrategy0, int0, float0);
      TUnmodifiableObjectIntMap<Integer> tUnmodifiableObjectIntMap1 = new TUnmodifiableObjectIntMap<Integer>((TObjectIntMap<Integer>) tObjectIntCustomHashMap0);
      TObjectProcedure<Object> tObjectProcedure0 = null;
      boolean boolean0 = tUnmodifiableObjectIntMap1.forEachKey(tObjectProcedure0);
      assertEquals(true, boolean0);
  }

//   @Test
//   public void test10()  throws Throwable  {
//       int int0 = 84024581;
//       TObjectIntHashMap<Object> tObjectIntHashMap0 = null;
//       try {
//         tObjectIntHashMap0 = new TObjectIntHashMap<Object>(int0);
//         fail("Expecting exception: OutOfMemoryError");
//       
//       } catch(OutOfMemoryError e) {
//          //
//          // Java heap space
//          //
//       }
//   }
}
