/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TShortCharMap;
import gnu.trove.map.hash.TShortCharHashMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.util.AbstractMap;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortCharHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TShortCharMap tShortCharMap0 = null;
      int int0 = (-1389);
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0);
      short short0 = (short) (-1);
      char char0 = 'C';
      tShortCharHashMap0.put(short0, char0);
      char char1 = 'u';
      tShortCharHashMap0.adjustValue(short0, char1);
      TShortCharHashMap tShortCharHashMap1 = null;
      try {
        tShortCharHashMap1 = new TShortCharHashMap(tShortCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = (short) (-266);
      shortArray0[0] = short0;
      short short1 = (short) (-429);
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      char[] charArray0 = new char[9];
      char char0 = 'S';
      charArray0[0] = char0;
      char char1 = 'a';
      charArray0[1] = char1;
      char char2 = 'u';
      charArray0[2] = char2;
      char char3 = '.';
      charArray0[3] = char3;
      char char4 = 'q';
      charArray0[4] = char4;
      char char5 = ')';
      charArray0[5] = char5;
      char char6 = '^';
      charArray0[6] = char6;
      char char7 = '';
      charArray0[7] = char7;
      char char8 = 'r';
      charArray0[8] = char8;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      float float0 = 183.92053F;
      tShortCharHashMap0.setAutoCompactionFactor(float0);
      assertEquals(23, tShortCharHashMap0.capacity());
      assertEquals(false, tShortCharHashMap0.isEmpty());
      assertEquals("{-266=S, -429=a, 0=u}", tShortCharHashMap0.toString());
      assertEquals(3, tShortCharHashMap0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 133853;
      float float0 = 1.0F;
      short short0 = (short)0;
      char char0 = '+';
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0, float0, short0, char0);
      tShortCharHashMap0.valueCollection();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)75;
      byteArray0[0] = byte0;
      byte byte1 = (byte)90;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-47);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-126);
      byteArray0[3] = byte3;
      tShortCharHashMap0._states = byteArray0;
      assertSame(tShortCharHashMap0._states, byteArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short) (-233);
      shortArray0[0] = short0;
      short short1 = (short)1616;
      shortArray0[1] = short1;
      short short2 = (short) (-375);
      shortArray0[2] = short2;
      short short3 = (short) (-1957);
      shortArray0[3] = short3;
      short short4 = (short) (-1);
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      char[] charArray0 = new char[8];
      char char0 = 'R';
      charArray0[0] = char0;
      char char1 = ')';
      charArray0[1] = char1;
      char char2 = '#';
      charArray0[2] = char2;
      char char3 = 'A';
      charArray0[3] = char3;
      char char4 = 'V';
      charArray0[4] = char4;
      char char5 = 'w';
      charArray0[5] = char5;
      char char6 = 'G';
      charArray0[6] = char6;
      char char7 = '1';
      charArray0[7] = char7;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      tShortCharHashMap0.getAutoCompactionFactor();
      assertEquals("{0=w, -233=R, -375=#, -1957=A, 1616=), -1=V}", tShortCharHashMap0.toString());
      assertEquals(false, tShortCharHashMap0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 195;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0, int0);
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap((TShortCharMap) tShortCharHashMap0);
      String string0 = "end index < ";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // end index < 
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = (short) (-1405);
      shortArray0[0] = short0;
      short short1 = (short)1112;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      char[] charArray0 = new char[6];
      char char0 = ';';
      charArray0[0] = char0;
      char char1 = ')';
      charArray0[1] = char1;
      char char2 = 'v';
      charArray0[2] = char2;
      char char3 = 'L';
      charArray0[3] = char3;
      char char4 = 'h';
      charArray0[4] = char4;
      char char5 = 'w';
      charArray0[5] = char5;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      tShortCharHashMap0.adjustValue(shortArray0[2], charArray0[3]);
      assertEquals("{-1405=;, 1112=), 0=\u00C2}", tShortCharHashMap0.toString());
      
      int int0 = (-459);
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap(int0);
      tShortCharHashMap1.size();
      int int1 = (-1);
      TShortCharHashMap tShortCharHashMap2 = new TShortCharHashMap(int1);
      byte[] byteArray0 = tShortCharHashMap2._states;
      short short3 = (short)157;
      tShortCharHashMap2.contains(short3);
      short short4 = (short)1676;
      tShortCharHashMap1.get(short4);
      assertFalse(tShortCharHashMap1.equals(tShortCharHashMap0));
  }

  @Test
  public void test6()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)833;
      shortArray0[0] = short0;
      short short1 = (short) (-16719);
      shortArray0[1] = short1;
      short short2 = (short)854;
      shortArray0[2] = short2;
      short short3 = (short) (-1542);
      shortArray0[3] = short3;
      short short4 = (short) (-28);
      shortArray0[4] = short4;
      char[] charArray0 = new char[3];
      char char0 = '*';
      charArray0[0] = char0;
      char char1 = 'R';
      charArray0[1] = char1;
      char char2 = 'g';
      charArray0[2] = char2;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      assertEquals("{833=*, 854=g, -16719=R}", tShortCharHashMap0.toString());
      assertEquals(false, tShortCharHashMap0.isEmpty());
  }

//   @Test
//   public void test7()  throws Throwable  {
//       int int0 = 0;
//       TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0, int0);
//       float float0 = tShortCharHashMap0.getAutoCompactionFactor();
//       assertEquals(0.5F, float0, 0.01F);
//   }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-1);
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0, int0);
      char[] charArray0 = new char[8];
      char char0 = 'O';
      charArray0[0] = char0;
      char char1 = '\\';
      charArray0[1] = char1;
      char char2 = '{';
      charArray0[2] = char2;
      char char3 = 'N';
      charArray0[3] = char3;
      char char4 = '6';
      charArray0[4] = char4;
      char char5 = '9';
      charArray0[5] = char5;
      char char6 = '=';
      charArray0[0] = char2;
      charArray0[1] = char1;
      charArray0[2] = char2;
      charArray0[3] = char2;
      charArray0[4] = char1;
      char char7 = 'c';
      charArray0[5] = char7;
      charArray0[6] = char7;
      char char8 = 'F';
      charArray0[7] = char8;
      charArray0[6] = char6;
      char char9 = 'Z';
      charArray0[0] = char9;
      charArray0[1] = char0;
      charArray0[2] = char5;
      tShortCharHashMap0.trimToSize();
      assertEquals("{}", tShortCharHashMap0.toString());
      
      short short0 = (short) (-587);
      char char10 = tShortCharHashMap0.remove(short0);
      assertEquals('\u0000', char10);
      
      charArray0[3] = char6;
      charArray0[4] = char9;
      charArray0[5] = char4;
      charArray0[6] = char5;
      charArray0[7] = char5;
      char char11 = '*';
      charArray0[7] = char11;
      char[] charArray1 = tShortCharHashMap0.values(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      
      short[] shortArray0 = tShortCharHashMap0._set;
      assertEquals(3, tShortCharHashMap0.capacity());
      assertEquals(0, tShortCharHashMap0.size());
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0);
      tShortCharHashMap0.ensureCapacity(int0);
      char[] charArray0 = new char[9];
      char char0 = 'e';
      charArray0[0] = char0;
      char char1 = '%';
      charArray0[1] = char1;
      char char2 = '<';
      charArray0[2] = char2;
      char char3 = 'G';
      charArray0[3] = char3;
      char char4 = 'O';
      charArray0[4] = char4;
      int int1 = 0;
      float float0 = (-1255.661F);
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap(int1, float0);
      tShortCharHashMap0.putAll((TShortCharMap) tShortCharHashMap1);
      char char5 = '{';
      charArray0[5] = char5;
      char char6 = 'd';
      charArray0[6] = char6;
      char char7 = 'E';
      charArray0[7] = char7;
      char char8 = '3';
      charArray0[8] = char8;
      TShortCharHashMap tShortCharHashMap2 = new TShortCharHashMap(tShortCharHashMap0._set, charArray0);
      assertEquals(23, tShortCharHashMap2.capacity());
      assertEquals(1, tShortCharHashMap2.size());
      assertEquals("{0=<}", tShortCharHashMap2.toString());
      
      boolean boolean0 = false;
      tShortCharHashMap0.reenableAutoCompaction(boolean0);
      tShortCharHashMap0.getNoEntryValue();
      TShortCharHashMap tShortCharHashMap3 = new TShortCharHashMap((TShortCharMap) tShortCharHashMap0);
      assertEquals(23, tShortCharHashMap3.capacity());
  }

  @Test
  public void test10()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)947;
      shortArray0[0] = short0;
      short short1 = (short)1746;
      shortArray0[1] = short1;
      short short2 = (short)2033;
      shortArray0[2] = short2;
      short short3 = (short) (-1099);
      TShortCharMap tShortCharMap0 = null;
      TShortCharHashMap tShortCharHashMap0 = null;
      try {
        tShortCharHashMap0 = new TShortCharHashMap(tShortCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 2965421;
      float float0 = 0.0F;
      short[] shortArray0 = new short[7];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short) (-1233);
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short) (-1207);
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)1048;
      shortArray0[6] = short6;
      char[] charArray0 = new char[4];
      char char0 = 'V';
      charArray0[0] = char0;
      char char1 = '0';
      charArray0[1] = char1;
      char char2 = 'A';
      charArray0[2] = char2;
      char char3 = 'P';
      charArray0[3] = char3;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      short[] shortArray1 = tShortCharHashMap0.keys();
      assertEquals(17, tShortCharHashMap0.capacity());
      assertEquals("{-1233=0, 0=P}", tShortCharHashMap0.toString());
      assertNotNull(shortArray1);
      
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap(int0, float0);
      assertFalse(tShortCharHashMap1.equals(tShortCharHashMap0));
  }

  @Test
  public void test12()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)1804;
      shortArray0[1] = short1;
      short short2 = (short)1;
      shortArray0[2] = short2;
      short short3 = (short)1602;
      shortArray0[3] = short3;
      short short4 = (short) (-23901);
      shortArray0[4] = short4;
      short short5 = (short)102;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)535;
      shortArray0[7] = short7;
      short short8 = (short)0;
      shortArray0[8] = short8;
      short short9 = (short) (-1015);
      shortArray0[9] = short9;
      char[] charArray0 = new char[8];
      char char0 = '(';
      charArray0[0] = char0;
      char char1 = '3';
      charArray0[1] = char1;
      char char2 = 'z';
      charArray0[2] = char2;
      char char3 = 'V';
      charArray0[3] = char3;
      char char4 = '`';
      charArray0[4] = char4;
      char char5 = '';
      charArray0[5] = char5;
      char char6 = '<';
      charArray0[6] = char6;
      char char7 = '^';
      charArray0[7] = char7;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      short short10 = (short)1586;
      tShortCharHashMap0.put(short10, char6);
      String string0 = "No free or removed slots available. Key set full?!!";
      File file0 = new File(string0);
      String string1 = file0.getAbsolutePath();
      Object object0 = null;
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>((Object) string1, object0);
      abstractMap_SimpleEntry0.hashCode();
      Object object1 = abstractMap_SimpleEntry0.setValue(object0);
      assertNull(object1);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 191;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0);
      short short0 = (short)1089;
      char char0 = 'z';
      char char1 = 'P';
      tShortCharHashMap0.adjustOrPutValue(short0, char0, char1);
      tShortCharHashMap0.getNoEntryValue();
      assertEquals("{1089=P}", tShortCharHashMap0.toString());
      assertEquals(false, tShortCharHashMap0.isEmpty());
  }
}
