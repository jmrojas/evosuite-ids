/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.hash.TFloatShortHashMap;
import gnu.trove.procedure.TFloatProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatShortHashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TFloatShortHash.getNoEntryKey()F: root-Branch
   * 2 gnu.trove.impl.hash.TFloatShortHash.setUp(I)I: root-Branch
   * 3 gnu.trove.impl.hash.TFloatShortHash.<init>(I)V: root-Branch
   */

//   @Test
//   public void test0()  throws Throwable  {
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1));
//       float float0 = tFloatShortHashMap0.getNoEntryKey();
//       assertEquals(0, tFloatShortHashMap0.getNoEntryValue());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TFloatShortHash.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   * 2 gnu.trove.impl.hash.TFloatShortHash.<init>(IF)V: root-Branch
   */

//   @Test
//   public void test1()  throws Throwable  {
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((int) (short)1178, 0.0F);
//       ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((int) (short)1178);
//       ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
//       tFloatShortHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
//       assertEquals(0, tFloatShortHashMap0.getNoEntryValue());
//       assertEquals(0.0F, tFloatShortHashMap0.getNoEntryKey(), 0.01F);
//   }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TFloatShortHash.getNoEntryValue()S: root-Branch
   */

//   @Test
//   public void test2()  throws Throwable  {
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1));
//       short short0 = tFloatShortHashMap0.getNoEntryValue();
//       assertEquals((short)0, short0);
//       assertEquals(0.0F, tFloatShortHashMap0.getNoEntryKey(), 0.01F);
//   }

  //Test case number: 3
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TFloatShortHash.contains(F)Z: I5 Branch 1 IFLT L178 - true
   * 2 gnu.trove.impl.hash.TFloatShortHash.index(F)I: I37 Branch 5 IFNE L228 - false
   * 3 gnu.trove.impl.hash.TFloatShortHash.<init>()V: root-Branch
   */

//   @Test
//   public void test3()  throws Throwable  {
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
//       boolean boolean0 = tFloatShortHashMap0.contains(655.7937F);
//       assertEquals(23, tFloatShortHashMap0.capacity());
//       assertEquals(0.0F, tFloatShortHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals(false, boolean0);
//       assertEquals(0, tFloatShortHashMap0.getNoEntryValue());
//   }

  //Test case number: 4
  /*
   * 9 covered goals:
   * 1 gnu.trove.impl.hash.TFloatShortHash.contains(F)Z: I5 Branch 1 IFLT L178 - false
   * 2 gnu.trove.impl.hash.TFloatShortHash.insertKey(F)I: I30 Branch 13 IFNE L279 - true
   * 3 gnu.trove.impl.hash.TFloatShortHash.insertKey(F)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 4 gnu.trove.impl.hash.TFloatShortHash.insertKey(F)I: I57 Branch 15 IFNE L286 - false
   * 5 gnu.trove.impl.hash.TFloatShortHash.insertKeyAt(IF)V: root-Branch
   * 6 gnu.trove.impl.hash.TFloatShortHash.insertKey(F)I: I30 Branch 13 IFNE L279 - false
   * 7 gnu.trove.impl.hash.TFloatShortHash.index(F)I: I37 Branch 5 IFNE L228 - true
   * 8 gnu.trove.impl.hash.TFloatShortHash.index(F)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 9 gnu.trove.impl.hash.TFloatShortHash.index(F)I: I52 Branch 7 IFNE L231 - false
   */

//   @Test
//   public void test4()  throws Throwable  {
//       float[] floatArray0 = new float[8];
//       short[] shortArray0 = new short[7];
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
//       boolean boolean0 = tFloatShortHashMap0.contains(0.0F);
//       assertEquals(1, tFloatShortHashMap0.size());
//       assertEquals(17, tFloatShortHashMap0.capacity());
//       assertEquals(true, boolean0);
//       assertEquals("{0.0=0}", tFloatShortHashMap0.toString());
//       assertEquals(0.0F, tFloatShortHashMap0.getNoEntryKey(), 0.01F);
//   }

  //Test case number: 5
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TFloatShortHash.forEach(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 2 IFLE L192 - true
   * 2 gnu.trove.impl.hash.TFloatShortHash.forEach(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TFloatShortHash.forEach(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   * 4 gnu.trove.impl.hash.TFloatShortHash.<init>(IFFS)V: root-Branch
   */

//   @Test
//   public void test5()  throws Throwable  {
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-14), (float) (-14), (float) (-14), (short)1548);
//       boolean boolean0 = tFloatShortHashMap0.forEach((TFloatProcedure) null);
//       assertEquals(true, boolean0);
//       assertEquals(1548, tFloatShortHashMap0.getNoEntryValue());
//       assertEquals((-14.0F), tFloatShortHashMap0.getNoEntryKey(), 0.01F);
//   }

  //Test case number: 6
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TFloatShortHash.forEach(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - false
   * 2 gnu.trove.impl.hash.TFloatShortHash.forEach(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TFloatShortHash.forEach(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   * 4 gnu.trove.impl.hash.TFloatShortHash.insertKey(F)I: I57 Branch 15 IFNE L286 - false
   */

  @Test
  public void test6()  throws Throwable  {
      float[] floatArray0 = new float[7];
      short[] shortArray0 = new short[4];
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      // Undeclared exception!
      try {
        tFloatShortHashMap0.forEach((TFloatProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 7
  /*
   * 5 covered goals:
   * 1 gnu.trove.impl.hash.TFloatShortHash.index(F)I: I52 Branch 7 IFNE L231 - true
   * 2 gnu.trove.impl.hash.TFloatShortHash.<init>()V: root-Branch
   * 3 gnu.trove.impl.hash.TFloatShortHash.insertKey(F)I: I30 Branch 13 IFNE L279 - false
   * 4 gnu.trove.impl.hash.TFloatShortHash.indexRehashed(FIIB)I: I29 Branch 8 IFGE L245 - false
   * 5 gnu.trove.impl.hash.TFloatShortHash.indexRehashed(FIIB)I: I46 Branch 9 IFNE L250 - false
   */

  @Test
  public void test7()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      tFloatShortHashMap0.putIfAbsent((-368.90118F), (short) (-945));
      short short0 = tFloatShortHashMap0.remove(1.0F);
      assertEquals(false, tFloatShortHashMap0.isEmpty());
      assertEquals((short)0, short0);
  }

  //Test case number: 8
  /*
   * 9 covered goals:
   * 1 gnu.trove.impl.hash.TFloatShortHash.indexRehashed(FIIB)I: I62 Branch 11 IF_ICMPEQ L254 - true
   * 2 gnu.trove.impl.hash.TFloatShortHash.indexRehashed(FIIB)I: I46 Branch 9 IFNE L250 - false
   * 3 gnu.trove.impl.hash.TFloatShortHash.indexRehashed(FIIB)I: I59 Branch 10 IFNE L254 - false
   * 4 gnu.trove.impl.hash.TFloatShortHash.indexRehashed(FIIB)I: I62 Branch 11 IF_ICMPEQ L254 - false
   * 5 gnu.trove.impl.hash.TFloatShortHash.removeAt(I)V: root-Branch
   * 6 gnu.trove.impl.hash.TFloatShortHash.indexRehashed(FIIB)I: I29 Branch 8 IFGE L245 - true
   * 7 gnu.trove.impl.hash.TFloatShortHash.indexRehashed(FIIB)I: I46 Branch 9 IFNE L250 - true
   * 8 gnu.trove.impl.hash.TFloatShortHash.indexRehashed(FIIB)I: I71 Branch 12 IF_ICMPNE L256 - true
   * 9 gnu.trove.impl.hash.TFloatShortHash.index(F)I: I46 Branch 6 IF_ICMPNE L231 - true
   */

  @Test
  public void test8()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byteArray0[2] = (byte)107;
      tFloatShortHashMap0._states = byteArray0;
      tFloatShortHashMap0.tempDisableAutoCompaction();
      tFloatShortHashMap0.remove(0.0F);
      boolean boolean0 = tFloatShortHashMap0.adjustValue((float) (short)0, (short) (byte)2);
      assertEquals(-1, tFloatShortHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 9
  /*
   * 7 covered goals:
   * 1 gnu.trove.impl.hash.TFloatShortHash.indexRehashed(FIIB)I: I71 Branch 12 IF_ICMPNE L256 - false
   * 2 gnu.trove.impl.hash.TFloatShortHash.indexRehashed(FIIB)I: I29 Branch 8 IFGE L245 - true
   * 3 gnu.trove.impl.hash.TFloatShortHash.indexRehashed(FIIB)I: I29 Branch 8 IFGE L245 - false
   * 4 gnu.trove.impl.hash.TFloatShortHash.indexRehashed(FIIB)I: I46 Branch 9 IFNE L250 - true
   * 5 gnu.trove.impl.hash.TFloatShortHash.indexRehashed(FIIB)I: I59 Branch 10 IFNE L254 - true
   * 6 gnu.trove.impl.hash.TFloatShortHash.indexRehashed(FIIB)I: I71 Branch 12 IF_ICMPNE L256 - true
   * 7 gnu.trove.impl.hash.TFloatShortHash.index(F)I: I46 Branch 6 IF_ICMPNE L231 - true
   */

//   @Test
//   public void test9()  throws Throwable  {
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(0);
//       byte[] byteArray0 = new byte[5];
//       byteArray0[0] = (byte)107;
//       byteArray0[1] = (byte)1;
//       byteArray0[2] = (byte)107;
//       tFloatShortHashMap0._states = byteArray0;
//       boolean boolean0 = tFloatShortHashMap0.adjustValue((float) (byte)107, (short) (byte)0);
//       assertEquals(false, boolean0);
//       assertEquals(0.0F, tFloatShortHashMap0.getNoEntryKey(), 0.01F);
//   }

  //Test case number: 10
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.TFloatShortHash.insertKey(F)I: I50 Branch 14 IF_ICMPNE L286 - true
   * 2 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 3 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 4 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I45 Branch 18 IFGE L310 - false
   * 5 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I62 Branch 19 IFNE L316 - false
   * 6 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I67 Branch 20 IF_ICMPEQ L317 - false
   */

  @Test
  public void test10()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      tFloatShortHashMap0._states = byteArray0;
      tFloatShortHashMap0.tempDisableAutoCompaction();
      tFloatShortHashMap0.remove(0.0F);
      tFloatShortHashMap0.adjustOrPutValue((float) (byte)1, (short) (byte) (-54), (short) (byte)0);
      assertEquals("{1.0=0}", tFloatShortHashMap0.toString());
      assertEquals(0, tFloatShortHashMap0.size());
  }

  //Test case number: 11
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I45 Branch 18 IFGE L310 - true
   * 2 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I62 Branch 19 IFNE L316 - true
   * 3 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 4 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I116 Branch 23 IF_ICMPNE L332 - true
   * 5 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I62 Branch 19 IFNE L316 - false
   * 6 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 7 gnu.trove.impl.hash.TFloatShortHash.insertKey(F)I: I57 Branch 15 IFNE L286 - true
   * 8 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte) (-54);
      tFloatShortHashMap0._states = byteArray0;
      tFloatShortHashMap0.adjustOrPutValue((float) (byte)1, (short) (byte) (-54), (short) (byte)0);
      assertEquals(false, tFloatShortHashMap0.isEmpty());
      assertEquals("{1.0=0, 0.0=0}", tFloatShortHashMap0.toString());
  }

  //Test case number: 12
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 2 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I104 Branch 22 IFNE L327 - true
   * 3 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I116 Branch 23 IF_ICMPNE L332 - false
   * 4 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I121 Branch 24 IF_ICMPEQ L336 - true
   * 5 gnu.trove.impl.hash.TFloatShortHash.insertKey(F)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 6 gnu.trove.impl.hash.TFloatShortHash.insertKey(F)I: I57 Branch 15 IFNE L286 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-54);
      tFloatShortHashMap0._states = byteArray0;
      // Undeclared exception!
      try {
        tFloatShortHashMap0.adjustOrPutValue((float) (byte)1, (short) (byte) (-54), (short) (byte)0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No free or removed slots available. Key set full?!!
         //
      }
  }

  //Test case number: 13
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I104 Branch 22 IFNE L327 - false
   * 2 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   */

  @Test
  public void test13()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)107;
      tFloatShortHashMap0._states = byteArray0;
      short short0 = tFloatShortHashMap0.adjustOrPutValue(0.0F, (short)0, (short) (byte)107);
      assertEquals("{0.0=0}", tFloatShortHashMap0.toString());
      assertEquals((short)0, short0);
  }

  //Test case number: 14
  /*
   * 19 covered goals:
   * 1 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I121 Branch 24 IF_ICMPEQ L336 - false
   * 2 gnu.trove.impl.hash.TFloatShortHash.setUp(I)I: root-Branch
   * 3 gnu.trove.impl.hash.TFloatShortHash.removeAt(I)V: root-Branch
   * 4 gnu.trove.impl.hash.TFloatShortHash.insertKeyAt(IF)V: root-Branch
   * 5 gnu.trove.impl.hash.TFloatShortHash.<init>(I)V: root-Branch
   * 6 gnu.trove.impl.hash.TFloatShortHash.insertKey(F)I: I30 Branch 13 IFNE L279 - true
   * 7 gnu.trove.impl.hash.TFloatShortHash.insertKey(F)I: I50 Branch 14 IF_ICMPNE L286 - true
   * 8 gnu.trove.impl.hash.TFloatShortHash.index(F)I: I37 Branch 5 IFNE L228 - true
   * 9 gnu.trove.impl.hash.TFloatShortHash.index(F)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 10 gnu.trove.impl.hash.TFloatShortHash.index(F)I: I52 Branch 7 IFNE L231 - false
   * 11 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 12 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 13 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 14 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I45 Branch 18 IFGE L310 - true
   * 15 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I45 Branch 18 IFGE L310 - false
   * 16 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I62 Branch 19 IFNE L316 - true
   * 17 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 18 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I116 Branch 23 IF_ICMPNE L332 - true
   * 19 gnu.trove.impl.hash.TFloatShortHash.insertKeyRehash(FIIB)I: I116 Branch 23 IF_ICMPNE L332 - false
   */

  @Test
  public void test14()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-54);
      tFloatShortHashMap0._states = byteArray0;
      tFloatShortHashMap0.tempDisableAutoCompaction();
      tFloatShortHashMap0.remove(0.0F);
      tFloatShortHashMap0.adjustOrPutValue((float) (byte)1, (short) (byte) (-54), (short) (byte)0);
      assertEquals("{1.0=0}", tFloatShortHashMap0.toString());
  }
}
