/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TCharShortMap;
import gnu.trove.map.hash.TCharShortHashMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.RandomAccessFile;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.MissingResourceException;
import javax.swing.text.Segment;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharShortHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = 'r';
      charArray0[0] = char0;
      char char1 = '3';
      charArray0[1] = char1;
      char char2 = '$';
      charArray0[2] = char2;
      char char3 = '7';
      charArray0[3] = char3;
      char char4 = ':';
      charArray0[4] = char4;
      short[] shortArray0 = new short[3];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short) (-1);
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(charArray0, shortArray0);
      assertEquals(false, tCharShortHashMap0.isEmpty());
      assertEquals("{3=-1, r=0, $=0}", tCharShortHashMap0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-57);
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(int0, int0);
      TCharShortMap tCharShortMap0 = null;
      // Undeclared exception!
      try {
        tCharShortHashMap0.putAll(tCharShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap();
      tCharShortHashMap0.iterator();
      int int0 = 6421;
      char char0 = 'L';
      short short0 = (short)0;
      short short1 = (short)45;
      tCharShortHashMap0.adjustOrPutValue(char0, short0, short1);
      Object object0 = null;
      tCharShortHashMap0.equals(object0);
      tCharShortHashMap0.capacity();
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap(int0);
      tCharShortHashMap1.size();
      tCharShortHashMap0.putAll((TCharShortMap) tCharShortHashMap1);
      char char1 = 'Y';
      tCharShortHashMap0.increment(char1);
      assertEquals("{L=45}", tCharShortHashMap0.toString());
      
      tCharShortHashMap1.isEmpty();
      AbstractMap.SimpleImmutableEntry<Short, TCharShortHashMap> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Short, TCharShortHashMap>((Short) short1, tCharShortHashMap1);
      int int1 = 1386;
      TCharShortHashMap tCharShortHashMap2 = new TCharShortHashMap(int1, (float) short0);
      // Undeclared exception!
      try {
        abstractMap_SimpleImmutableEntry0.setValue(tCharShortHashMap2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      String string0 = "|@iE{T]E#";
      short short0 = (short)0;
      int int0 = 954;
      float float0 = (-968.704F);
      char char0 = '#';
      short short1 = (short)32113;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(int0, float0, char0, short1);
      tCharShortHashMap0.clear();
      Short short2 = new Short(short0);
      AbstractMap.SimpleImmutableEntry<String, Short> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Short>(string0, short2);
      String string1 = abstractMap_SimpleImmutableEntry0.getKey();
      assertSame(string0, string1);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 939;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(int0);
      Locale locale0 = Locale.ENGLISH;
      locale0.getDisplayScript();
      char[] charArray0 = new char[1];
      char char0 = 'A';
      charArray0[0] = char0;
      int int1 = 6421;
      Segment segment0 = new Segment(charArray0, (int) char0, int1);
      // Undeclared exception!
      try {
        segment0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 6486
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-1243);
      char[] charArray0 = new char[6];
      char char0 = '}';
      charArray0[0] = char0;
      char char1 = 'J';
      charArray0[1] = char1;
      char char2 = 'u';
      charArray0[2] = char2;
      char char3 = 'q';
      charArray0[3] = char3;
      char char4 = '\"';
      charArray0[4] = char4;
      char char5 = '%';
      charArray0[5] = char5;
      short[] shortArray0 = new short[8];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short) (-1);
      shortArray0[2] = short2;
      short short3 = (short)1;
      shortArray0[3] = short3;
      short short4 = (short) (-1205);
      shortArray0[4] = short4;
      short short5 = (short) (-915);
      shortArray0[5] = short5;
      short short6 = (short) (-1);
      shortArray0[6] = short6;
      short short7 = (short)0;
      shortArray0[7] = short7;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(charArray0, shortArray0);
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap((TCharShortMap) tCharShortHashMap0);
      assertTrue(tCharShortHashMap0.equals(tCharShortHashMap1));
      assertEquals("{q=1, %=-915, \"=-1205, }=0, J=0, u=-1}", tCharShortHashMap1.toString());
      
      char char6 = '~';
      short short8 = (short)1779;
      TCharShortHashMap tCharShortHashMap2 = new TCharShortHashMap(int0, (float) int0, char6, short8);
      assertFalse(tCharShortHashMap2.equals(tCharShortHashMap1));
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(int0);
      char char0 = 'V';
      short short0 = (short)202;
      short short1 = (short)0;
      short short2 = tCharShortHashMap0.adjustOrPutValue(char0, short0, short1);
      assertEquals("{V=0}", tCharShortHashMap0.toString());
      assertEquals((short)0, short2);
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 1846;
      String string0 = ", ";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 1: , 
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap();
      char char0 = '1';
      tCharShortHashMap0.containsKey(char0);
      Locale locale0 = Locale.TAIWAN;
      String string0 = locale0.getISO3Language();
      File file0 = null;
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(file0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"zho\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-9);
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(int0);
      boolean boolean0 = true;
      tCharShortHashMap0.reenableAutoCompaction(boolean0);
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap();
      String string0 = "Po=kF";
      tCharShortHashMap1.values();
      tCharShortHashMap0.trimToSize();
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: Po=kF://Po=%7FkFPo=%7FkF?Po=%7FkF#Po=%7FkF
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap();
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap((TCharShortMap) tCharShortHashMap0);
      tCharShortHashMap1.iterator();
      assertEquals(23, tCharShortHashMap1.capacity());
      
      int int0 = 830;
      TCharShortHashMap tCharShortHashMap2 = new TCharShortHashMap(int0);
      short[] shortArray0 = new short[2];
      short short0 = (short) (-663);
      shortArray0[0] = short0;
      short short1 = (short) (-645);
      shortArray0[1] = short1;
      tCharShortHashMap2.valueCollection();
      short[] shortArray1 = tCharShortHashMap2.values(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = 'O';
      charArray0[0] = char0;
      char char1 = '?';
      charArray0[1] = char1;
      char char2 = 'A';
      charArray0[2] = char2;
      char char3 = '6';
      charArray0[3] = char3;
      char char4 = 'v';
      charArray0[4] = char4;
      char char5 = 'A';
      charArray0[5] = char5;
      short[] shortArray0 = new short[2];
      short short0 = (short)809;
      shortArray0[0] = short0;
      short short1 = (short) (-905);
      shortArray0[1] = short1;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(charArray0, shortArray0);
      boolean boolean0 = tCharShortHashMap0.contains(char1);
      assertEquals("{?=-905, O=809}", tCharShortHashMap0.toString());
      assertEquals(false, tCharShortHashMap0.isEmpty());
      assertEquals(17, tCharShortHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 776;
      float float0 = 1754.4215F;
      char char0 = 'n';
      char[] charArray0 = new char[3];
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = char0;
      short[] shortArray0 = new short[5];
      short short0 = (short)561;
      shortArray0[0] = short0;
      short short1 = (short)799;
      shortArray0[1] = short1;
      short short2 = (short)528;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short) (-1139);
      shortArray0[4] = short4;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(charArray0, shortArray0);
      assertEquals(false, tCharShortHashMap0.isEmpty());
      
      tCharShortHashMap0.clear();
      int int1 = (-1620);
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap();
      char[] charArray1 = tCharShortHashMap1._set;
      int int2 = 1661;
      TCharShortHashMap tCharShortHashMap2 = new TCharShortHashMap(int2);
      tCharShortHashMap2.toString();
      TCharShortHashMap tCharShortHashMap3 = new TCharShortHashMap(int1);
      tCharShortHashMap3.hashCode();
      tCharShortHashMap3.values();
      short short5 = (short)1669;
      TCharShortHashMap tCharShortHashMap4 = new TCharShortHashMap(int0, float0, char0, short5);
      char char1 = '6';
      tCharShortHashMap1.increment(char1);
      tCharShortHashMap4.keys(tCharShortHashMap3._set);
      tCharShortHashMap4.contains(char0);
      short short6 = (short)1783;
      tCharShortHashMap2.put(char0, short6);
      tCharShortHashMap3.getNoEntryValue();
      short short7 = (short) (-1864);
      tCharShortHashMap3.isEmpty();
      TCharShortHashMap tCharShortHashMap5 = new TCharShortHashMap();
      tCharShortHashMap3.capacity();
      short short8 = (short)374;
      tCharShortHashMap3.getNoEntryValue();
      tCharShortHashMap4.adjustOrPutValue(char0, short7, short8);
      int int3 = 9677;
      float float1 = 0.0F;
      TCharShortHashMap tCharShortHashMap6 = new TCharShortHashMap(int3, float1);
      TCharShortHashMap tCharShortHashMap7 = new TCharShortHashMap();
      assertFalse(tCharShortHashMap7.equals(tCharShortHashMap2));
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-1);
      char char0 = '0';
      char[] charArray0 = new char[6];
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = char0;
      charArray0[3] = char0;
      charArray0[4] = char0;
      charArray0[5] = char0;
      short[] shortArray0 = new short[2];
      short short0 = (short) (-1);
      shortArray0[0] = short0;
      short short1 = (short)1999;
      shortArray0[1] = short1;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(charArray0, shortArray0);
      char char1 = 'l';
      tCharShortHashMap0.putIfAbsent(char1, shortArray0[1]);
      assertEquals(2, tCharShortHashMap0.size());
      
      short short2 = (short)0;
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap(int0, (float) int0, char0, short2);
      tCharShortHashMap1.put(char0, short2);
      TCharShortHashMap tCharShortHashMap2 = new TCharShortHashMap();
      boolean boolean0 = tCharShortHashMap2.isEmpty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap();
      char char0 = 'd';
      char char1 = 'O';
      short short0 = (short)0;
      tCharShortHashMap0.put(char1, short0);
      short[] shortArray0 = new short[5];
      char char2 = 'p';
      short short1 = tCharShortHashMap0.get(char2);
      short short2 = (short)245;
      shortArray0[0] = short2;
      short short3 = (short)0;
      shortArray0[1] = short3;
      short short4 = (short)0;
      shortArray0[2] = short4;
      short short5 = (short) (-131);
      shortArray0[3] = short5;
      short short6 = (short)179;
      char char3 = 'M';
      tCharShortHashMap0.contains(char3);
      shortArray0[4] = short6;
      short[] shortArray1 = new short[5];
      shortArray1[0] = short5;
      shortArray1[1] = short4;
      shortArray1[2] = short1;
      shortArray1[3] = short4;
      shortArray1[4] = short6;
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap(tCharShortHashMap0._set, shortArray1);
      TCharShortHashMap tCharShortHashMap2 = new TCharShortHashMap(tCharShortHashMap0._set, shortArray0);
      tCharShortHashMap2.toString();
      tCharShortHashMap0.putAll((TCharShortMap) tCharShortHashMap2);
      tCharShortHashMap0.hashCode();
      tCharShortHashMap0.contains(char0);
      assertEquals(false, tCharShortHashMap0.isEmpty());
      assertEquals(2, tCharShortHashMap0.size());
  }
}
