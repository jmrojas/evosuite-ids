/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TIntIntMap;
import gnu.trove.map.hash.TIntIntHashMap;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InterruptedIOException;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.Map;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntIntHashEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, float0);
      int[] intArray0 = new int[3];
      int int1 = 27;
      boolean boolean0 = tIntIntHashMap0.containsKey(int0);
      assertEquals(false, boolean0);
      
      intArray0[0] = int1;
      int int2 = 1;
      float float1 = 0.0F;
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(int2, float1);
      int int3 = 724;
      intArray0[0] = int3;
      intArray0[1] = int1;
      intArray0[2] = int3;
      float float2 = 100.55875F;
      int int4 = 0;
      TIntIntHashMap tIntIntHashMap2 = new TIntIntHashMap(int3, float2, intArray0[0], int4);
      float float3 = 1140.8605F;
      int int5 = 0;
      tIntIntHashMap1.trimToSize();
      int int6 = tIntIntHashMap1.get(int5);
      assertEquals(0, tIntIntHashMap1.getNoEntryKey());
      assertEquals(0, int6);
      
      tIntIntHashMap2.setAutoCompactionFactor(float3);
      TIntIntHashMap tIntIntHashMap3 = new TIntIntHashMap(int1);
      tIntIntHashMap3.contains(int1);
      float float4 = 683.2386F;
      TIntIntHashMap tIntIntHashMap4 = new TIntIntHashMap(intArray0[0], float4, intArray0[0], intArray0[0]);
      int[] intArray1 = tIntIntHashMap4.values(intArray0);
      assertNotNull(intArray1);
      
      tIntIntHashMap3.values();
      assertEquals(0, tIntIntHashMap3.getNoEntryValue());
      assertEquals(0, tIntIntHashMap3.getNoEntryKey());
      
      tIntIntHashMap2.setAutoCompactionFactor((float) intArray0[1]);
      tIntIntHashMap4.keySet();
      assertEquals(724, tIntIntHashMap4.getNoEntryValue());
      
      ObjectInput objectInput0 = null;
      // Undeclared exception!
      try {
        tIntIntHashMap2.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 51;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 3125257;
      intArray0[2] = int2;
      int int3 = 1717;
      intArray0[3] = int3;
      int int4 = (-1693);
      intArray0[4] = int4;
      int int5 = 0;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int1, int0, intArray0[1], int5);
      tIntIntHashMap0.getAutoCompactionFactor();
      assertEquals(0, tIntIntHashMap0.getNoEntryKey());
      
      int int6 = 1964;
      intArray0[5] = int6;
      int int7 = Integer.MAX_VALUE;
      intArray0[6] = int7;
      int int8 = Integer.MAX_VALUE;
      intArray0[7] = int8;
      int[] intArray1 = new int[1];
      intArray1[0] = int8;
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(intArray0, intArray1);
      int[] intArray2 = tIntIntHashMap1.keys();
      assertNotNull(intArray2);
      
      int int9 = (-291);
      TIntIntHashMap tIntIntHashMap2 = new TIntIntHashMap(intArray0, intArray0);
      TIntIntHashMap tIntIntHashMap3 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap2);
      int int10 = 32;
      boolean boolean0 = tIntIntHashMap3.increment(int10);
      assertEquals("{3125257=3125257, 1717=1717, 1964=1964, 51=51, -1693=-1693, 2147483647=2147483647, 0=0}", tIntIntHashMap3.toString());
      assertEquals(false, boolean0);
      
      intArray0[8] = int9;
      TIntIntHashMap tIntIntHashMap4 = new TIntIntHashMap(intArray0, intArray0);
      assertFalse(tIntIntHashMap4.equals(tIntIntHashMap2));
      assertEquals(0, tIntIntHashMap4.getNoEntryKey());
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 311;
      float float0 = 794.91473F;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, float0, int0, int0);
      int int1 = (-1875);
      boolean boolean0 = tIntIntHashMap0.contains(int1);
      assertEquals(311, tIntIntHashMap0.getNoEntryKey());
      assertEquals(false, boolean0);
      assertEquals(311, tIntIntHashMap0.getNoEntryValue());
  }

  @Test
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 297;
      intArray0[0] = int0;
      int int1 = 246;
      intArray0[1] = int1;
      int int2 = 1394;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 1356;
      intArray0[4] = int4;
      int int5 = 10;
      intArray0[5] = int5;
      int int6 = 317534141;
      intArray0[6] = int6;
      int int7 = 801;
      intArray0[7] = int7;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      assertEquals("{0=0, 317534141=317534141, 1356=1356, 10=10, 297=297, 801=801, 246=246, 1394=1394}", tIntIntHashMap0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap0);
      int[] intArray0 = tIntIntHashMap1.values(tIntIntHashMap0._set);
      assertNotNull(intArray0);
      
      int int0 = 0;
      boolean boolean0 = tIntIntHashMap0.adjustValue(int0, int0);
      assertEquals(0, tIntIntHashMap0.getNoEntryValue());
      assertEquals(23, tIntIntHashMap0.capacity());
      assertEquals(0, tIntIntHashMap0.getNoEntryKey());
      assertEquals(false, boolean0);
      
      int int1 = (-738);
      float float0 = 0.0F;
      int int2 = (-1);
      float float1 = 236.90402F;
      TIntIntHashMap tIntIntHashMap2 = new TIntIntHashMap(int2, float1);
      tIntIntHashMap2.keys();
      tIntIntHashMap2.iterator();
      int int3 = tIntIntHashMap2.getNoEntryValue();
      assertEquals(0, int3);
      
      TIntIntHashMap tIntIntHashMap3 = new TIntIntHashMap(int1, float0);
      tIntIntHashMap3.toString();
      tIntIntHashMap3.values();
      ObjectOutput objectOutput0 = null;
      // Undeclared exception!
      try {
        tIntIntHashMap3.writeExternal(objectOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[2];
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap();
      tIntIntHashMap0.putAll((TIntIntMap) tIntIntHashMap1);
      assertEquals(0, tIntIntHashMap1.getNoEntryKey());
      assertEquals(0, tIntIntHashMap1.getNoEntryValue());
      
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = (-1);
      intArray0[1] = int1;
      TIntIntHashMap tIntIntHashMap2 = new TIntIntHashMap(intArray0, intArray0);
      int int2 = tIntIntHashMap2.size();
      assertEquals(0, tIntIntHashMap2.getNoEntryKey());
      assertEquals(5, tIntIntHashMap2.capacity());
      assertEquals(0, tIntIntHashMap2.getNoEntryValue());
      assertEquals("{-1=-1, 0=0}", tIntIntHashMap2.toString());
      assertEquals(2, int2);
  }

  @Test
  public void test6()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      boolean boolean0 = true;
      tIntIntHashMap0.reenableAutoCompaction(boolean0);
      int int0 = (-1);
      float float0 = (-483.8182F);
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(int0, float0);
      TIntIntHashMap tIntIntHashMap2 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap1);
      tIntIntHashMap2.getNoEntryKey();
      TIntIntHashMap tIntIntHashMap3 = new TIntIntHashMap();
      assertEquals(23, tIntIntHashMap3.capacity());
      
      tIntIntHashMap3.trimToSize();
      int int1 = (-1);
      tIntIntHashMap3.containsValue(int1);
      TIntIntHashMap tIntIntHashMap4 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap3);
      TIntIntHashMap tIntIntHashMap5 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap4);
      tIntIntHashMap3.valueCollection();
      Map<Object, String> map0 = null;
      int int2 = (-1973);
      tIntIntHashMap3.values();
      // Undeclared exception!
      try {
        tIntIntHashMap4.setAutoCompactionFactor((float) int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1973.0
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int[] intArray0 = new int[5];
      intArray0[0] = int1;
      intArray0[1] = int0;
      intArray0[2] = int1;
      intArray0[3] = int1;
      intArray0[4] = int0;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      assertEquals(1, tIntIntHashMap0.size());
      assertEquals("{0=0}", tIntIntHashMap0.toString());
      
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(int1, int0);
      int int2 = 9;
      tIntIntHashMap1.ensureCapacity(int2);
      assertEquals(0, tIntIntHashMap1.getNoEntryValue());
      assertEquals(0, tIntIntHashMap1.getNoEntryKey());
      
      TIntIntHashMap tIntIntHashMap2 = new TIntIntHashMap(int0);
      TIntIntHashMap tIntIntHashMap3 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap2);
      tIntIntHashMap3.toString();
      int int3 = 49;
      TIntIntHashMap tIntIntHashMap4 = new TIntIntHashMap(int3);
      TIntIntMap tIntIntMap0 = null;
      // Undeclared exception!
      try {
        tIntIntHashMap4.putAll(tIntIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 1070;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, int0);
      int[] intArray0 = new int[7];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      tIntIntHashMap0._set = intArray0;
      assertEquals(0, tIntIntHashMap0.getNoEntryKey());
      assertEquals(0, tIntIntHashMap0.getNoEntryValue());
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-935);
      float float0 = (-542.3733F);
      int int1 = 1;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, float0, int0, int1);
      tIntIntHashMap0.size();
      assertEquals(-935, tIntIntHashMap0.getNoEntryKey());
      assertEquals(1, tIntIntHashMap0.getNoEntryValue());
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 886;
      int int1 = (-292);
      int[] intArray0 = new int[2];
      intArray0[0] = int0;
      intArray0[1] = int0;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      tIntIntHashMap0.tempDisableAutoCompaction();
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(int0, int0, int0, int1);
      int int2 = (-130);
      int int3 = 0;
      File file0 = null;
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name can't be null
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 185;
      intArray0[2] = int2;
      int int3 = 185;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      assertEquals(2, tIntIntHashMap0.size());
      assertEquals(0, tIntIntHashMap0.getNoEntryKey());
      assertEquals(11, tIntIntHashMap0.capacity());
      assertEquals("{185=185, 0=0}", tIntIntHashMap0.toString());
      assertEquals(0, tIntIntHashMap0.getNoEntryValue());
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 0;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0);
      int int1 = 535481;
      tIntIntHashMap0.increment(int1);
      tIntIntHashMap0.getNoEntryValue();
      tIntIntHashMap0.setAutoCompactionFactor((float) int0);
      float float0 = (-630.38116F);
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(tIntIntHashMap0._set, tIntIntHashMap0._set);
      tIntIntHashMap0.putAll((TIntIntMap) tIntIntHashMap1);
      // Undeclared exception!
      try {
        tIntIntHashMap0.setAutoCompactionFactor(float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -630.38116
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 1523;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 34271747;
      intArray0[2] = int2;
      int int3 = 828;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = 3622219;
      intArray0[5] = int5;
      int int6 = (-233);
      intArray0[6] = int6;
      int int7 = 140;
      intArray0[7] = int7;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      assertEquals("{-233=-233, 828=828, 1523=1523, 3622219=3622219, 140=140, 34271747=34271747, 0=0}", tIntIntHashMap0.toString());
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)7;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)53;
      byteArray0[2] = byte2;
      byte byte3 = (byte)20;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)34;
      byteArray0[5] = byte5;
      tIntIntHashMap0._states = byteArray0;
      assertEquals(0, tIntIntHashMap0.getNoEntryValue());
      assertEquals(7, tIntIntHashMap0.size());
      assertEquals(0, tIntIntHashMap0.getNoEntryKey());
  }

  @Test
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = (-1);
      intArray0[0] = int0;
      int int1 = (-1595);
      intArray0[1] = int1;
      int int2 = 1;
      intArray0[2] = int2;
      int int3 = 201;
      intArray0[3] = int3;
      int int4 = 1593;
      intArray0[4] = int4;
      int int5 = 1129;
      intArray0[5] = int5;
      int int6 = 1257;
      intArray0[6] = int6;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap0);
      int[] intArray1 = tIntIntHashMap1.values();
      assertEquals("{1257=1257, 201=201, -1595=-1595, -1=-1, 1129=1129, 1593=1593, 1=1}", tIntIntHashMap0.toString());
      assertNotNull(intArray1);
      
      int int7 = 1600153859;
      TIntIntHashMap tIntIntHashMap2 = new TIntIntHashMap(int7, int7);
      tIntIntHashMap2.containsValue(int7);
      assertEquals(0, tIntIntHashMap2.getNoEntryKey());
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 207;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0);
      tIntIntHashMap0.put(int0, int0);
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap0);
      tIntIntHashMap1.setAutoCompactionFactor((float) int0);
      int int1 = 1556;
      Object object0 = null;
      tIntIntHashMap0.equals(object0);
      tIntIntHashMap0.adjustOrPutValue(int0, int0, int1);
      int int2 = 0;
      int int3 = 477;
      tIntIntHashMap0.adjustOrPutValue(int2, int3, int3);
      byte[] byteArray0 = tIntIntHashMap0._states;
      tIntIntHashMap1.clear();
      assertEquals(2, tIntIntHashMap0.size());
      assertEquals("{207=414, 0=477}", tIntIntHashMap0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 1462;
      float float0 = 1491.5619F;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, float0);
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap0);
      tIntIntHashMap1.trimToSize();
      assertEquals(0, tIntIntHashMap1.getNoEntryValue());
      assertEquals(0, tIntIntHashMap1.getNoEntryKey());
      assertEquals(0, tIntIntHashMap0.getNoEntryKey());
  }

  @Test
  public void test17()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      int int0 = 0;
      tIntIntHashMap0.values();
      tIntIntHashMap0.contains(int0);
      String string0 = "qhk*|BEi`L7!DhvQMi";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

//   @Test
//   public void test18()  throws Throwable  {
//       int int0 = 0;
//       TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, int0, int0, int0);
//       tIntIntHashMap0.tempDisableAutoCompaction();
//       int int1 = (-1805);
//       int int2 = (-528);
//       tIntIntHashMap0.increment(int2);
//       tIntIntHashMap0.isEmpty();
//       PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
//       PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
//       BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) pipedInputStream0);
//       tIntIntHashMap0.capacity();
//       tIntIntHashMap0.containsValue(int1);
//       ObjectInputStream objectInputStream0 = null;
//       try {
//         objectInputStream0 = new ObjectInputStream((InputStream) bufferedInputStream0);
//         fail("Expecting exception: InterruptedIOException");
//       
//       } catch(InterruptedIOException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }
}
