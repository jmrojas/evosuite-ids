/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TLongIntMap;
import gnu.trove.map.hash.TLongIntHashMap;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.util.AbstractMap;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TLongIntHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TLongIntMap tLongIntMap0 = null;
      long[] longArray0 = new long[7];
      long long0 = (-1L);
      longArray0[0] = long0;
      long long1 = (-755L);
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = 0L;
      int int0 = 0;
      float float0 = (-1684.8645F);
      int int1 = 0;
      TLongIntHashMap tLongIntHashMap0 = new TLongIntHashMap(int0, float0, longArray0[0], int1);
      longArray0[3] = long3;
      long long4 = (-453L);
      longArray0[4] = long4;
      long long5 = 737L;
      longArray0[5] = long5;
      long long6 = (-881L);
      longArray0[6] = long6;
      int[] intArray0 = new int[1];
      int int2 = (-879);
      intArray0[0] = int2;
      intArray0[0] = int2;
      TLongIntHashMap tLongIntHashMap1 = new TLongIntHashMap(longArray0, intArray0);
      boolean boolean0 = true;
      tLongIntHashMap1.reenableAutoCompaction(boolean0);
      int int3 = (-1205);
      tLongIntHashMap1.containsValue(int3);
      TLongIntHashMap tLongIntHashMap2 = null;
      try {
        tLongIntHashMap2 = new TLongIntHashMap(tLongIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = 9223372036854775807L;
      longArray0[0] = long0;
      long long1 = (-986L);
      longArray0[1] = long1;
      long long2 = (-462L);
      longArray0[2] = long2;
      long long3 = 1231L;
      longArray0[3] = long3;
      int[] intArray0 = new int[9];
      int int0 = (-1);
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 32;
      intArray0[2] = int2;
      int int3 = 1;
      intArray0[3] = int3;
      int int4 = 1572;
      intArray0[4] = int4;
      int int5 = 31322867;
      intArray0[5] = int5;
      int int6 = 0;
      intArray0[6] = int6;
      int int7 = 0;
      intArray0[7] = int7;
      int int8 = 574;
      intArray0[8] = int8;
      TLongIntHashMap tLongIntHashMap0 = new TLongIntHashMap(longArray0, intArray0);
      assertEquals("{-986=0, 1231=1, -462=32, 9223372036854775807=-1}", tLongIntHashMap0.toString());
      assertEquals(23, tLongIntHashMap0.capacity());
      
      int int9 = 1552;
      TLongIntHashMap tLongIntHashMap1 = new TLongIntHashMap(int9);
      tLongIntHashMap1.getNoEntryKey();
      assertFalse(tLongIntHashMap1.equals(tLongIntHashMap0));
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-1059);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      int[] intArray0 = new int[2];
      intArray0[0] = int0;
      intArray0[1] = int0;
      TLongIntHashMap tLongIntHashMap0 = new TLongIntHashMap(longArray0, intArray0);
      float float0 = 1.0F;
      tLongIntHashMap0.setAutoCompactionFactor(float0);
      Integer integer0 = new Integer(int0);
      String string0 = "";
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, string0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      try {
        byteArrayOutputStream0.toString(string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // 
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      TLongIntHashMap tLongIntHashMap0 = new TLongIntHashMap(int0);
      tLongIntHashMap0.setAutoCompactionFactor((float) int0);
      int int1 = 534;
      TLongIntHashMap tLongIntHashMap1 = new TLongIntHashMap(int1);
      TLongIntHashMap tLongIntHashMap2 = new TLongIntHashMap();
      tLongIntHashMap2.size();
      assertEquals(23, tLongIntHashMap2.capacity());
      
      int int2 = 0;
      float float0 = 0.0F;
      int int3 = 521;
      tLongIntHashMap2.compact();
      tLongIntHashMap2.capacity();
      Locale locale0 = Locale.CANADA;
      String string0 = locale0.getCountry();
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>((Integer) int2, (Object) string0);
      abstractMap_SimpleImmutableEntry0.getValue();
      Object object0 = null;
      tLongIntHashMap2.equals(object0);
      assertEquals(3, tLongIntHashMap2.capacity());
      
      TLongIntHashMap tLongIntHashMap3 = new TLongIntHashMap(int2, float0, (long) int2, int3);
      tLongIntHashMap3.containsValue(int3);
      AbstractMap.SimpleEntry<Integer, Long> abstractMap_SimpleEntry0 = null;
      long long0 = 0L;
      int int4 = (-2042);
      tLongIntHashMap3.adjustValue(long0, int4);
      AbstractMap.SimpleEntry<TLongIntHashMap, AbstractMap.SimpleEntry<Integer, Long>> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<TLongIntHashMap, AbstractMap.SimpleEntry<Integer, Long>>(tLongIntHashMap3, abstractMap_SimpleEntry0);
      abstractMap_SimpleEntry1.hashCode();
      OutputStream outputStream0 = null;
      boolean boolean0 = true;
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(outputStream0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = (-1214L);
      longArray0[0] = long0;
      int int0 = 0;
      TLongIntHashMap tLongIntHashMap0 = new TLongIntHashMap(int0, int0);
      TLongIntHashMap tLongIntHashMap1 = null;
      try {
        tLongIntHashMap1 = new TLongIntHashMap((TLongIntMap) tLongIntHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 177;
      TLongIntHashMap tLongIntHashMap0 = new TLongIntHashMap(int0);
      TLongIntHashMap tLongIntHashMap1 = new TLongIntHashMap((TLongIntMap) tLongIntHashMap0);
      TLongIntHashMap tLongIntHashMap2 = new TLongIntHashMap((TLongIntMap) tLongIntHashMap1);
      String string0 = Integer.toBinaryString(int0);
      tLongIntHashMap0.adjustOrPutValue((long) int0, int0, int0);
      tLongIntHashMap2.equals((Object) string0);
      assertEquals("{177=177}", tLongIntHashMap0.toString());
      
      int int1 = 19373;
      TLongIntHashMap tLongIntHashMap3 = new TLongIntHashMap(int1);
      assertFalse(tLongIntHashMap3.equals(tLongIntHashMap0));
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      TLongIntHashMap tLongIntHashMap0 = new TLongIntHashMap(int0, int0);
      TLongIntHashMap tLongIntHashMap1 = null;
      try {
        tLongIntHashMap1 = new TLongIntHashMap((TLongIntMap) tLongIntHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TLongIntMap tLongIntMap0 = null;
      TLongIntHashMap tLongIntHashMap0 = null;
      try {
        tLongIntHashMap0 = new TLongIntHashMap(tLongIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) int1;
      longArray0[1] = (long) int1;
      longArray0[2] = (long) int1;
      longArray0[3] = (long) int1;
      int[] intArray0 = new int[3];
      intArray0[0] = int1;
      intArray0[1] = int0;
      intArray0[2] = int0;
      TLongIntHashMap tLongIntHashMap0 = new TLongIntHashMap(longArray0, intArray0);
      tLongIntHashMap0.valueCollection();
      assertEquals(1, tLongIntHashMap0.size());
      assertEquals("{-1=0}", tLongIntHashMap0.toString());
      assertEquals(11, tLongIntHashMap0.capacity());
      
      TLongIntHashMap tLongIntHashMap1 = new TLongIntHashMap(int1, int0);
      tLongIntHashMap1.capacity();
      TLongIntHashMap tLongIntHashMap2 = new TLongIntHashMap(int0, int0);
      boolean boolean0 = tLongIntHashMap2.containsValue(int0);
      String string0 = tLongIntHashMap1.toString();
      assertNotNull(string0);
      
      tLongIntHashMap2.ensureCapacity(int1);
      int int2 = 0;
      tLongIntHashMap2.keySet();
      tLongIntHashMap2.toString();
      long long0 = (-59L);
      boolean boolean1 = tLongIntHashMap2.adjustValue(long0, int2);
      assertTrue(boolean1 == boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tLongIntHashMap2._states, int2, int2);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-1993);
      TLongIntHashMap tLongIntHashMap0 = new TLongIntHashMap(int0);
      tLongIntHashMap0.valueCollection();
      tLongIntHashMap0.tempDisableAutoCompaction();
      boolean boolean0 = tLongIntHashMap0.isEmpty();
      TLongIntMap tLongIntMap0 = null;
      long long0 = 0L;
      int int1 = tLongIntHashMap0.get((long) int0);
      assertEquals(0, int1);
      
      tLongIntHashMap0.getAutoCompactionFactor();
      int int2 = (-507);
      TLongIntHashMap tLongIntHashMap1 = new TLongIntHashMap(int2);
      int int3 = (-1427);
      boolean boolean1 = tLongIntHashMap0.adjustValue(long0, int3);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try {
        tLongIntHashMap0.putAll(tLongIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-764);
      int int1 = (-134);
      TLongIntHashMap tLongIntHashMap0 = new TLongIntHashMap(int1);
      tLongIntHashMap0.hashCode();
      TLongIntHashMap tLongIntHashMap1 = new TLongIntHashMap(int0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tLongIntHashMap1._states);
      tLongIntHashMap1.keySet();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) int0;
      long long0 = 1L;
      longArray0[1] = long0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      int[] intArray0 = new int[5];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      TLongIntHashMap tLongIntHashMap0 = new TLongIntHashMap(longArray0, intArray0);
      String string0 = tLongIntHashMap0.toString();
      assertEquals(17, tLongIntHashMap0.capacity());
      assertEquals(2, tLongIntHashMap0.size());
      assertNotNull(string0);
      assertEquals("{1=0, 0=0}", string0);
      
      long long1 = 0L;
      TLongIntHashMap tLongIntHashMap1 = new TLongIntHashMap(int0, (float) int0, long1, int0);
      long long2 = (-277L);
      int int1 = tLongIntHashMap1.remove(long2);
      assertEquals(0, int1);
      
      int int2 = (-670);
      tLongIntHashMap1.iterator();
      long long3 = (-1L);
      int int3 = 0;
      TLongIntHashMap tLongIntHashMap2 = new TLongIntHashMap(int2, (float) int2, long3, int3);
      boolean boolean0 = true;
      tLongIntHashMap2.reenableAutoCompaction(boolean0);
      assertEquals(3, tLongIntHashMap2.capacity());
      assertEquals("{}", tLongIntHashMap2.toString());
      assertFalse(tLongIntHashMap2.equals(tLongIntHashMap0));
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1;
      long long0 = 0L;
      Long long1 = new Long(long0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) long1;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) long1;
      longArray0[4] = long0;
      long long2 = 879L;
      longArray0[5] = long2;
      longArray0[6] = (long) int0;
      int[] intArray0 = new int[5];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      TLongIntHashMap tLongIntHashMap0 = new TLongIntHashMap(longArray0, intArray0);
      AbstractMap.SimpleEntry<Long, TLongIntHashMap> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, TLongIntHashMap>(long1, tLongIntHashMap0);
      int int1 = abstractMap_SimpleEntry0.hashCode();
      assertEquals("0={1=1, 0=1}", abstractMap_SimpleEntry0.toString());
      assertEquals(2, tLongIntHashMap0.size());
      assertEquals(1, int1);
      
      TLongIntHashMap tLongIntHashMap1 = new TLongIntHashMap(int0);
      tLongIntHashMap1.trimToSize();
      assertEquals(3, tLongIntHashMap1.capacity());
      assertEquals("{}", tLongIntHashMap1.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 390;
      float float0 = 0.0F;
      long long0 = (-592L);
      TLongIntHashMap tLongIntHashMap0 = new TLongIntHashMap(int0, float0, long0, int0);
      TLongIntHashMap tLongIntHashMap1 = null;
      try {
        tLongIntHashMap1 = new TLongIntHashMap((TLongIntMap) tLongIntHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[10];
      long long0 = (-1899L);
      longArray0[0] = long0;
      long long1 = (-1L);
      longArray0[1] = long1;
      long long2 = (-1398L);
      longArray0[2] = long2;
      long long3 = (-1459L);
      longArray0[3] = long3;
      long long4 = 1646L;
      longArray0[4] = long4;
      long long5 = 1736L;
      longArray0[5] = long5;
      long long6 = (-9223372036854775808L);
      longArray0[6] = long6;
      long long7 = 9223372036854775807L;
      longArray0[7] = long7;
      long long8 = (-1L);
      longArray0[8] = long8;
      long long9 = 0L;
      longArray0[9] = long9;
      int[] intArray0 = new int[8];
      int int0 = 356;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 1131;
      intArray0[2] = int2;
      int int3 = (-1238);
      intArray0[3] = int3;
      int int4 = (-125);
      intArray0[4] = int4;
      int int5 = 1292;
      intArray0[5] = int5;
      int int6 = 1;
      intArray0[6] = int6;
      int int7 = 0;
      intArray0[7] = int7;
      TLongIntHashMap tLongIntHashMap0 = new TLongIntHashMap(longArray0, intArray0);
      float float0 = 555.24255F;
      tLongIntHashMap0.setAutoCompactionFactor(float0);
      assertEquals("{-9223372036854775808=1, 9223372036854775807=0, -1398=1131, 1646=-125, -1899=356, 1736=1292, -1459=-1238, -1=0}", tLongIntHashMap0.toString());
      
      int int8 = 0;
      float float1 = 1961.4266F;
      TLongIntHashMap tLongIntHashMap1 = new TLongIntHashMap(int8, float1);
      assertFalse(tLongIntHashMap1.equals(tLongIntHashMap0));
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "i";
      long long0 = (-455L);
      Long long1 = new Long(long0);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(string0, (Object) long1);
      AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, Object>, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, Object>, String>(abstractMap_SimpleImmutableEntry0, string0);
      Object object0 = new Object();
      abstractMap_SimpleEntry0.equals(object0);
      long long2 = (-29L);
      Long long3 = new Long(long2);
      AbstractMap.SimpleEntry<Long, Long> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, Long>(long3, (Long) long2);
      Long long4 = abstractMap_SimpleEntry1.setValue((Long) long2);
      assertEquals("-29", long4.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = (-895L);
      longArray0[0] = long0;
      long long1 = 0L;
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = (-1L);
      longArray0[3] = long3;
      long long4 = 136L;
      longArray0[4] = long4;
      long long5 = (-9223372036854775808L);
      longArray0[5] = long5;
      int[] intArray0 = new int[9];
      int int0 = (-816);
      intArray0[0] = int0;
      int int1 = 711;
      intArray0[1] = int1;
      int int2 = 1426;
      intArray0[2] = int2;
      int int3 = (-1571);
      intArray0[3] = int3;
      int int4 = (-1997);
      intArray0[4] = int4;
      int int5 = 216;
      intArray0[5] = int5;
      int int6 = 1057;
      intArray0[6] = int6;
      int int7 = (-476);
      intArray0[7] = int7;
      int int8 = 161;
      intArray0[8] = int8;
      TLongIntHashMap tLongIntHashMap0 = new TLongIntHashMap(longArray0, intArray0);
      int[] intArray1 = tLongIntHashMap0.values();
      assertEquals("{-1=-1571, 136=-1997, -895=-816, -9223372036854775808=216, 0=1426}", tLongIntHashMap0.toString());
      assertEquals(5, tLongIntHashMap0.size());
      assertNotNull(intArray1);
  }
}
