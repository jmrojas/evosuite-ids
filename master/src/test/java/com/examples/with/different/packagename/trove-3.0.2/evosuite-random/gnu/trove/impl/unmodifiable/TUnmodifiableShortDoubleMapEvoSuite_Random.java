/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap;
import gnu.trove.map.TShortDoubleMap;
import gnu.trove.map.hash.TShortDoubleHashMap;
import gnu.trove.procedure.TShortDoubleProcedure;
import java.net.URI;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableShortDoubleMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TShortDoubleMap tShortDoubleMap0 = null;
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = null;
      try {
        tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap(tShortDoubleMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      float float0 = 1171.5557F;
      short short0 = (short)0;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0, float0, short0, (double) float0);
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap((TShortDoubleMap) tShortDoubleHashMap0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap1);
      // Undeclared exception!
      try {
        tUnmodifiableShortDoubleMap0.remove(short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short) (-1);
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)1074;
      shortArray0[2] = short2;
      short short3 = (short)1677;
      shortArray0[3] = short3;
      short short4 = (short) (-1101);
      shortArray0[4] = short4;
      short short5 = (short)167;
      shortArray0[5] = short5;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) short4;
      doubleArray0[1] = (double) short2;
      doubleArray0[2] = (double) shortArray0[1];
      doubleArray0[3] = (double) shortArray0[0];
      doubleArray0[4] = (double) shortArray0[2];
      double double0 = (-1.0);
      doubleArray0[5] = double0;
      double double1 = (-704.6957806174222);
      doubleArray0[6] = double1;
      doubleArray0[7] = (double) short2;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap((TShortDoubleMap) tShortDoubleHashMap0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap1);
      tUnmodifiableShortDoubleMap0.keySet();
      int int0 = 51437;
      float float0 = (-1.0F);
      short short6 = (short)387;
      double double2 = (-1672.7759288467762);
      TShortDoubleHashMap tShortDoubleHashMap2 = new TShortDoubleHashMap(int0, float0, short6, double2);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap1 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap2);
      String string0 = "YZUZSoD]L";
      // Undeclared exception!
      try {
        URI.create(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 7: YZUZSoD]L
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      doubleArray0[8] = (double) int0;
      double double0 = (-1700.9350843497214);
      doubleArray0[9] = double0;
      tUnmodifiableShortDoubleMap0.values(doubleArray0);
      int int1 = 0;
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap(int1);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap1 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap1);
      short[] shortArray0 = tUnmodifiableShortDoubleMap1.keys(tShortDoubleHashMap1._set);
      assertNotNull(shortArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-1499);
      short short0 = (short) (-1);
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0, (float) int0, short0, (double) short0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortDoubleMap0.adjustValue(short0, (double) int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 1;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      short short0 = (short) (-1013);
      // Undeclared exception!
      try {
        tUnmodifiableShortDoubleMap0.increment(short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short) (-107);
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      short short1 = (short) (-1049);
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((int) shortArray0[3], (float) short0, short1, (double) short0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      shortArray0[4] = short0;
      TShortDoubleMap tShortDoubleMap0 = null;
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap1 = null;
      try {
        tUnmodifiableShortDoubleMap1 = new TUnmodifiableShortDoubleMap(tShortDoubleMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      short short0 = (short)0;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0, float0, short0, (double) float0);
      tShortDoubleHashMap0.tempDisableAutoCompaction();
      tShortDoubleHashMap0.valueCollection();
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortDoubleMap0.putAll((TShortDoubleMap) tShortDoubleHashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short) (-467);
      shortArray0[0] = short0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) shortArray0[0];
      doubleArray0[1] = (double) shortArray0[0];
      doubleArray0[2] = (double) short0;
      double double0 = 0.0;
      doubleArray0[3] = double0;
      doubleArray0[4] = (double) shortArray0[0];
      doubleArray0[5] = (double) short0;
      doubleArray0[6] = (double) short0;
      doubleArray0[7] = (double) shortArray0[0];
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      short short1 = (short) (-252);
      boolean boolean0 = tUnmodifiableShortDoubleMap0.containsKey(short1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short) (-333);
      shortArray0[0] = short0;
      short short1 = (short) (-355);
      shortArray0[1] = short1;
      short short2 = (short)160;
      shortArray0[2] = short2;
      short short3 = (short)1825;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) shortArray0[1];
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      assertEquals(false, tUnmodifiableShortDoubleMap0.isEmpty());
  }

  @Test
  public void test10()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)5;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)520;
      shortArray0[2] = short2;
      short short3 = (short) (-1462);
      shortArray0[3] = short3;
      short short4 = (short) (-15871);
      shortArray0[4] = short4;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) short2;
      doubleArray0[1] = (double) short4;
      doubleArray0[2] = (double) shortArray0[0];
      doubleArray0[3] = (double) short1;
      doubleArray0[4] = (double) short4;
      doubleArray0[5] = (double) short0;
      doubleArray0[6] = (double) short3;
      doubleArray0[7] = (double) short1;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      short short5 = (short)26997;
      double double0 = 0.0;
      double double1 = 0.0;
      // Undeclared exception!
      try {
        tUnmodifiableShortDoubleMap0.adjustOrPutValue(short5, double0, double1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      short[] shortArray0 = new short[7];
      short short0 = (short)1899;
      shortArray0[0] = short0;
      short short1 = (short) (-323);
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)404;
      shortArray0[6] = short6;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) short3;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) shortArray0[0];
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) shortArray0[6];
      doubleArray0[5] = (double) short1;
      doubleArray0[6] = (double) shortArray0[3];
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap1 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tUnmodifiableShortDoubleMap0);
      tUnmodifiableShortDoubleMap1.getNoEntryValue();
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap(int0, int0);
      TShortDoubleHashMap tShortDoubleHashMap2 = null;
      try {
        tShortDoubleHashMap2 = new TShortDoubleHashMap((TShortDoubleMap) tShortDoubleHashMap1);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 0;
      float float0 = 564.127F;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0, float0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      tUnmodifiableShortDoubleMap0.keys(tShortDoubleHashMap0._set);
      short short0 = (short) (-750);
      tUnmodifiableShortDoubleMap0.iterator();
      tShortDoubleHashMap0.isEmpty();
      // Undeclared exception!
      try {
        tUnmodifiableShortDoubleMap0.adjustOrPutValue(short0, (double) float0, (double) int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 388;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0, int0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      String string0 = tUnmodifiableShortDoubleMap0.toString();
      assertEquals("{}", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 186;
      float float0 = (-1.0F);
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      tUnmodifiableShortDoubleMap0.toString();
      short short0 = (short) (-1548);
      double double0 = (-1.0);
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap(int0, float0, short0, double0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap1 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap1);
      tUnmodifiableShortDoubleMap1.size();
      tUnmodifiableShortDoubleMap1.keys(tShortDoubleHashMap1._set);
      float float1 = 0.0F;
      short short1 = (short) (-966);
      double double1 = (-307.74886977263054);
      TShortDoubleHashMap tShortDoubleHashMap2 = new TShortDoubleHashMap(int0, float1, short1, double1);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap2 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap2);
      tUnmodifiableShortDoubleMap2.keys();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = double1;
      doubleArray0[1] = (double) short1;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      tUnmodifiableShortDoubleMap1.keys();
      doubleArray0[4] = double1;
      tUnmodifiableShortDoubleMap2.values(doubleArray0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap3 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tUnmodifiableShortDoubleMap2);
      assertTrue(tUnmodifiableShortDoubleMap3.equals(tUnmodifiableShortDoubleMap0));
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-1);
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      tUnmodifiableShortDoubleMap0.getNoEntryKey();
      short short0 = (short)19;
      double double0 = (-1687.4702529938813);
      short short1 = (short)0;
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap1 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tUnmodifiableShortDoubleMap0);
      double double1 = 1220.2002890046813;
      TShortDoubleProcedure tShortDoubleProcedure0 = null;
      tUnmodifiableShortDoubleMap1.forEachEntry(tShortDoubleProcedure0);
      // Undeclared exception!
      try {
        tUnmodifiableShortDoubleMap0.putIfAbsent(short1, double1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short)1950;
      shortArray0[0] = short0;
      short short1 = (short)853;
      shortArray0[1] = short1;
      short short2 = (short) (-426);
      shortArray0[2] = short2;
      short short3 = (short) (-1597);
      shortArray0[3] = short3;
      short short4 = (short) (-97);
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short) (-722);
      shortArray0[6] = short6;
      short short7 = (short) (-1442);
      shortArray0[7] = short7;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) short5;
      doubleArray0[1] = (double) short3;
      doubleArray0[2] = (double) short1;
      doubleArray0[3] = (double) shortArray0[4];
      doubleArray0[4] = (double) short2;
      doubleArray0[5] = (double) shortArray0[2];
      short short8 = (short)1416;
      double double0 = (-921.9081696884235);
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) shortArray0[6];
      doubleArray0[2] = (double) shortArray0[2];
      doubleArray0[3] = (double) shortArray0[7];
      doubleArray0[4] = (double) shortArray0[4];
      doubleArray0[5] = (double) short7;
      doubleArray0[6] = (double) short4;
      double double1 = 0.0;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((int) short5, (float) short1, short8, double1);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      short short9 = (short) (-764);
      // Undeclared exception!
      try {
        tUnmodifiableShortDoubleMap0.remove(short9);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short) (-849);
      shortArray0[0] = short0;
      short short1 = (short) (-1722);
      shortArray0[1] = short1;
      short short2 = (short)734;
      shortArray0[2] = short2;
      short short3 = (short) (-1768);
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short) (-301);
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)0;
      shortArray0[7] = short7;
      short short8 = (short) (-155);
      shortArray0[8] = short8;
      short short9 = (short) (-1281);
      shortArray0[9] = short9;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) short1;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      double double0 = (-354.52786919393776);
      double double1 = (-1703.3780425957139);
      // Undeclared exception!
      try {
        tUnmodifiableShortDoubleMap0.adjustOrPutValue(shortArray0[9], double0, double1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = (-1671);
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0, int0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      tUnmodifiableShortDoubleMap0.keys();
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap1 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      short short0 = (short)1390;
      double double0 = 1.0;
      double double1 = (-1355.3163595145502);
      // Undeclared exception!
      try {
        tUnmodifiableShortDoubleMap1.adjustOrPutValue(short0, double0, double1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
