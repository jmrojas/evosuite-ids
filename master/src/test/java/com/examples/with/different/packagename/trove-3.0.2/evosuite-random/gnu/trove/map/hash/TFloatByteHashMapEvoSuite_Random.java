/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TFloatByteMap;
import gnu.trove.map.hash.TFloatByteHashMap;
import gnu.trove.procedure.TFloatByteProcedure;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.StreamCorruptedException;
import java.util.AbstractMap;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatByteHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float float0 = 762.1387F;
      int int0 = 0;
      float float1 = (-1.0F);
      float float2 = 0.0F;
      byte byte0 = (byte)0;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(int0, float1, float2, byte0);
      String string0 = tFloatByteHashMap0.toString();
      assertNotNull(string0);
      
      floatArray0[0] = float0;
      float float3 = 1601.6467F;
      floatArray0[1] = float3;
      float float4 = 990.42676F;
      floatArray0[2] = float4;
      byte[] byteArray0 = new byte[9];
      byte byte1 = (byte) (-58);
      byteArray0[0] = byte1;
      byte byte2 = (byte)93;
      byteArray0[1] = byte2;
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>((Integer) int0, string0);
      AbstractMap.SimpleEntry<Byte, AbstractMap.SimpleImmutableEntry<Integer, String>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, AbstractMap.SimpleImmutableEntry<Integer, String>>((Byte) byteArray0[0], abstractMap_SimpleImmutableEntry0);
      abstractMap_SimpleEntry0.setValue(abstractMap_SimpleImmutableEntry0);
      byte byte3 = (byte)79;
      byteArray0[2] = byte3;
      byte byte4 = (byte)2;
      byteArray0[3] = byte4;
      byte byte5 = (byte) (-76);
      byteArray0[4] = byte5;
      byte byte6 = (byte)0;
      byteArray0[5] = byte6;
      byte byte7 = (byte) (-89);
      byteArray0[6] = byte7;
      byte byte8 = (byte)124;
      byteArray0[7] = byte8;
      byte byte9 = (byte) (-112);
      byteArray0[8] = byte9;
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(floatArray0, byteArray0);
      assertEquals(23, tFloatByteHashMap1.capacity());
      assertEquals("{990.42676=79, 1601.6467=93, 762.1387=-58}", tFloatByteHashMap1.toString());
      assertEquals(3, tFloatByteHashMap1.size());
  }

  @Test
  public void test1()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      float float2 = (-1229.0767F);
      floatArray0[2] = float2;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-1);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-64);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-66);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-6);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-41);
      byteArray0[4] = byte4;
      byte byte5 = (byte)83;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap((TFloatByteMap) tFloatByteHashMap0);
      tFloatByteHashMap1.capacity();
      TFloatByteHashMap tFloatByteHashMap2 = new TFloatByteHashMap();
      tFloatByteHashMap2.getAutoCompactionFactor();
      TFloatByteHashMap tFloatByteHashMap3 = new TFloatByteHashMap((TFloatByteMap) tFloatByteHashMap2);
      tFloatByteHashMap3.keys(tFloatByteHashMap2._set);
      int int0 = (-1387);
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1387
         //
      }
  }

//   @Test
//   public void test2()  throws Throwable  {
//       float[] floatArray0 = new float[9];
//       float float0 = 984.7735F;
//       floatArray0[0] = float0;
//       float float1 = 1.0F;
//       floatArray0[1] = float1;
//       float float2 = 1.0F;
//       floatArray0[2] = float2;
//       float float3 = 10.0F;
//       floatArray0[3] = float3;
//       float float4 = 0.0F;
//       floatArray0[4] = float4;
//       float float5 = 0.0F;
//       floatArray0[5] = float5;
//       float float6 = (-200.904F);
//       floatArray0[6] = float6;
//       float float7 = 1.0F;
//       floatArray0[7] = float7;
//       float float8 = 0.0F;
//       floatArray0[8] = float8;
//       byte[] byteArray0 = new byte[2];
//       byte byte0 = (byte) (-16);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte) (-59);
//       byteArray0[1] = byte1;
//       TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
//       assertEquals("{1.0=-59, 984.7735=-16}", tFloatByteHashMap0.toString());
//       
//       int int0 = 1105;
//       TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(int0, int0);
//       TFloatByteHashMap tFloatByteHashMap2 = new TFloatByteHashMap((TFloatByteMap) tFloatByteHashMap1);
//       assertEquals(0.0F, tFloatByteHashMap2.getNoEntryKey(), 0.01F);
//       assertEquals(0, tFloatByteHashMap2.getNoEntryValue());
//       
//       int int1 = 0;
//       TFloatByteHashMap tFloatByteHashMap3 = new TFloatByteHashMap(int1, int1);
//       TFloatByteHashMap tFloatByteHashMap4 = null;
//       try {
//         tFloatByteHashMap4 = new TFloatByteHashMap((TFloatByteMap) tFloatByteHashMap3);
//         fail("Expecting exception: OutOfMemoryError");
//       
//       } catch(OutOfMemoryError e) {
//          //
//          // Java heap space
//          //
//       }
//   }

  @Test
  public void test3()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float float0 = (-1485.7109F);
      floatArray0[0] = float0;
      float float1 = (-943.4487F);
      floatArray0[1] = float1;
      float float2 = 657.98895F;
      floatArray0[2] = float2;
      float float3 = 0.0F;
      floatArray0[3] = float3;
      float float4 = (-1173.4329F);
      floatArray0[4] = float4;
      float float5 = (-1792.3729F);
      floatArray0[5] = float5;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-113);
      byteArray0[0] = byte0;
      byte byte1 = (byte)43;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)81;
      byteArray0[3] = byte3;
      byte byte4 = (byte)80;
      byteArray0[4] = byte4;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      int int0 = (-908);
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(int0);
      TFloatByteHashMap tFloatByteHashMap2 = new TFloatByteHashMap((TFloatByteMap) tFloatByteHashMap1);
      byte[] byteArray1 = tFloatByteHashMap2.values();
      assertNotNull(byteArray1);
      
      int int1 = 0;
      TFloatByteHashMap tFloatByteHashMap3 = new TFloatByteHashMap(int1);
      float float6 = tFloatByteHashMap3.getNoEntryKey();
      byte byte5 = (byte)0;
      byte byte6 = tFloatByteHashMap3.adjustOrPutValue(float6, byte5, byte5);
      assertEquals("{0.0=0}", tFloatByteHashMap3.toString());
      assertEquals((byte)0, byte6);
  }

//   @Test
//   public void test4()  throws Throwable  {
//       int int0 = 770;
//       byte byte0 = (byte)19;
//       TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(int0, (float) int0, (float) int0, byte0);
//       boolean boolean0 = tFloatByteHashMap0.isEmpty();
//       assertEquals(true, boolean0);
//       
//       float[] floatArray0 = new float[10];
//       floatArray0[0] = (float) byte0;
//       floatArray0[1] = (float) byte0;
//       floatArray0[2] = (float) int0;
//       floatArray0[3] = (float) int0;
//       floatArray0[0] = (float) int0;
//       floatArray0[1] = (float) int0;
//       floatArray0[2] = (float) int0;
//       floatArray0[3] = (float) int0;
//       floatArray0[4] = (float) int0;
//       floatArray0[5] = (float) int0;
//       floatArray0[6] = (float) byte0;
//       floatArray0[7] = (float) byte0;
//       floatArray0[8] = (float) byte0;
//       floatArray0[9] = (float) byte0;
//       floatArray0[4] = (float) int0;
//       floatArray0[5] = (float) int0;
//       tFloatByteHashMap0.containsKey((float) byte0);
//       floatArray0[6] = (float) int0;
//       float float0 = 0.0F;
//       byte byte1 = tFloatByteHashMap0.get(float0);
//       assertEquals((byte)19, byte1);
//       
//       floatArray0[7] = (float) byte0;
//       tFloatByteHashMap0.trimToSize();
//       floatArray0[8] = (float) byte0;
//       floatArray0[9] = (float) byte0;
//       String string0 = tFloatByteHashMap0.toString();
//       assertNotNull(string0);
//       
//       tFloatByteHashMap0.getNoEntryValue();
//       float[] floatArray1 = tFloatByteHashMap0.keys(floatArray0);
//       assertNotNull(floatArray1);
//       assertEquals(3, tFloatByteHashMap0.capacity());
//       assertEquals("{}", tFloatByteHashMap0.toString());
//       assertSame(floatArray0, floatArray1);
//       
//       int int1 = 0;
//       TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(int1);
//       tFloatByteHashMap1.setAutoCompactionFactor((float) int1);
//       TFloatByteHashMap tFloatByteHashMap2 = new TFloatByteHashMap((TFloatByteMap) tFloatByteHashMap1);
//       assertEquals(0.0F, tFloatByteHashMap2.getNoEntryKey(), 0.01F);
//       assertEquals(0, tFloatByteHashMap2.getNoEntryValue());
//       assertEquals(23, tFloatByteHashMap2.capacity());
//   }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 463646329;
      float float0 = 1.0F;
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = float0;
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) int0;
      floatArray0[6] = (float) int0;
      floatArray0[7] = float0;
      floatArray0[8] = float0;
      floatArray0[9] = float0;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-1);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-53);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-24);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-111);
      byteArray0[3] = byte3;
      byte byte4 = (byte)99;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-81);
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      tFloatByteHashMap0.getAutoCompactionFactor();
      assertEquals("{1.0=-24, 4.63646336E8=0}", tFloatByteHashMap0.toString());
      
      byte byte7 = (byte)64;
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(int0, (float) int0, float0, byte7);
      byte byte8 = tFloatByteHashMap1.get((float) byte7);
      assertEquals((byte)64, byte8);
      
      tFloatByteHashMap1.trimToSize();
      assertEquals("{}", tFloatByteHashMap1.toString());
      
      boolean boolean0 = true;
      tFloatByteHashMap1.reenableAutoCompaction(boolean0);
      float float1 = 0.0F;
      tFloatByteHashMap1.setAutoCompactionFactor(float1);
      boolean boolean1 = false;
      tFloatByteHashMap1.reenableAutoCompaction(boolean1);
      TFloatByteHashMap tFloatByteHashMap2 = new TFloatByteHashMap(tFloatByteHashMap1._set, tFloatByteHashMap1._states);
      assertEquals(3, tFloatByteHashMap1.capacity());
      
      TFloatByteHashMap tFloatByteHashMap3 = new TFloatByteHashMap();
      float float2 = 0.0F;
      byte byte9 = tFloatByteHashMap3.remove(float2);
      assertEquals((byte)0, byte9);
      assertFalse(tFloatByteHashMap3.equals(tFloatByteHashMap0));
      assertEquals(true, tFloatByteHashMap3.isEmpty());
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 876;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(int0);
      tFloatByteHashMap0.size();
      assertEquals(1759, tFloatByteHashMap0.capacity());
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(int0, int0);
      byte byte0 = (byte)0;
      tFloatByteHashMap0.putIfAbsent((float) int0, byte0);
      int int1 = 1722;
      float float0 = 0.0F;
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(int1, float0);
      tFloatByteHashMap1.increment((float) int0);
      tFloatByteHashMap1.isEmpty();
      tFloatByteHashMap1.trimToSize();
      float float1 = 993.12634F;
      tFloatByteHashMap0.increment(float1);
      tFloatByteHashMap1.trimToSize();
      tFloatByteHashMap1.compact();
      tFloatByteHashMap0.putAll((TFloatByteMap) tFloatByteHashMap1);
      tFloatByteHashMap1.getNoEntryValue();
      TFloatByteHashMap tFloatByteHashMap2 = null;
      try {
        tFloatByteHashMap2 = new TFloatByteHashMap((TFloatByteMap) tFloatByteHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      float float0 = (-1588.3448F);
      byte byte0 = (byte)0;
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) byte0;
      floatArray0[2] = (float) int0;
      float float1 = Float.NEGATIVE_INFINITY;
      floatArray0[3] = float1;
      floatArray0[4] = (float) byte0;
      floatArray0[5] = (float) byte0;
      floatArray0[6] = (float) int0;
      floatArray0[7] = (float) byte0;
      float float2 = (-706.629F);
      floatArray0[8] = float2;
      floatArray0[9] = float0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byte byte1 = (byte) (-53);
      byteArray0[3] = byte1;
      byte byte2 = (byte)1;
      byteArray0[4] = byte2;
      byteArray0[5] = byte0;
      byteArray0[6] = byte0;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      byte[] byteArray1 = tFloatByteHashMap0.values(byteArray0);
      assertNotNull(byteArray1);
      assertEquals("{-Infinity=-53, 0.0=0}", tFloatByteHashMap0.toString());
      assertSame(byteArray1, byteArray0);
      assertEquals(2, tFloatByteHashMap0.size());
      
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(int0, (float) int0, float0, byte0);
      TFloatByteHashMap tFloatByteHashMap2 = null;
      try {
        tFloatByteHashMap2 = new TFloatByteHashMap((TFloatByteMap) tFloatByteHashMap1);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = (-49.30139F);
      floatArray0[1] = float1;
      float float2 = 1.0F;
      floatArray0[2] = float2;
      float float3 = (-1.0F);
      floatArray0[3] = float3;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-107);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-104);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-105);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-118);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-33);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      TFloatByteProcedure tFloatByteProcedure0 = null;
      // Undeclared exception!
      try {
        tFloatByteHashMap0.forEachEntry(tFloatByteProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-26);
      byteArray0[1] = byte1;
      byte byte2 = (byte)44;
      byteArray0[2] = byte2;
      byte byte3 = (byte)55;
      byteArray0[3] = byte3;
      byte byte4 = (byte)86;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-1);
      byteArray0[5] = byte5;
      byte byte6 = (byte)1;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      byteArray0[8] = byte8;
      byte byte9 = (byte)15;
      byteArray0[9] = byte9;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      tFloatByteHashMap0.iterator();
      assertEquals(23, tFloatByteHashMap0.capacity());
      assertEquals(false, tFloatByteHashMap0.isEmpty());
      assertEquals("{0.0=0}", tFloatByteHashMap0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap();
      boolean boolean0 = tFloatByteHashMap0.isEmpty();
      tFloatByteHashMap0.trimToSize();
      int int0 = 26;
      byte byte0 = (byte) (-19);
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(int0, (float) int0, (float) int0, byte0);
      tFloatByteHashMap0.putAll((TFloatByteMap) tFloatByteHashMap1);
      tFloatByteHashMap0.hashCode();
      int int1 = 1273;
      byte[] byteArray0 = new byte[2];
      tFloatByteHashMap0.clear();
      byte byte1 = (byte)104;
      byte[] byteArray1 = tFloatByteHashMap0._states;
      byteArray0[0] = byte1;
      byte byte2 = (byte)0;
      byteArray0[1] = byte2;
      tFloatByteHashMap0.values(byteArray0);
      float float0 = 0.0F;
      byte byte3 = (byte)15;
      TFloatByteHashMap tFloatByteHashMap2 = new TFloatByteHashMap(int1, (float) int1, float0, byte3);
      TFloatByteHashMap tFloatByteHashMap3 = new TFloatByteHashMap(int1);
      tFloatByteHashMap3.values();
      float[] floatArray0 = tFloatByteHashMap0._set;
      assertEquals(3, tFloatByteHashMap0.capacity());
      
      boolean boolean1 = tFloatByteHashMap3.containsKey((float) int1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap();
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap((TFloatByteMap) tFloatByteHashMap0);
      float float1 = 1.0F;
      byte byte1 = (byte)98;
      tFloatByteHashMap1.put(float1, byte1);
      assertEquals(false, tFloatByteHashMap1.isEmpty());
      
      byteArray0[0] = byte0;
      byte byte2 = (byte) (-110);
      byteArray0[0] = byte2;
      TFloatByteHashMap tFloatByteHashMap2 = new TFloatByteHashMap(floatArray0, byteArray0);
      tFloatByteHashMap2.iterator();
      assertEquals("{0.0=-110}", tFloatByteHashMap2.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      float float0 = 10.0F;
      byte byte0 = (byte) (-1);
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(int0, (float) int0, float0, byte0);
      tFloatByteHashMap0.trimToSize();
      int int1 = (-89);
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(int1);
      int int2 = 0;
      TFloatByteHashMap tFloatByteHashMap2 = new TFloatByteHashMap(int2);
      tFloatByteHashMap1.putAll((TFloatByteMap) tFloatByteHashMap2);
      int int3 = 0;
      TFloatByteHashMap tFloatByteHashMap3 = new TFloatByteHashMap(int3, int3);
      float float1 = tFloatByteHashMap3.getAutoCompactionFactor();
      float float2 = tFloatByteHashMap3.getAutoCompactionFactor();
      assertTrue(float2 == float1);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 985;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap();
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(tFloatByteHashMap0._set, tFloatByteHashMap0._states);
      tFloatByteHashMap0.values();
      TFloatByteHashMap tFloatByteHashMap2 = new TFloatByteHashMap(int0);
      tFloatByteHashMap2.capacity();
      TFloatByteHashMap tFloatByteHashMap3 = new TFloatByteHashMap(int0, int0);
      tFloatByteHashMap3.contains((float) int0);
      tFloatByteHashMap3.toString();
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-49);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)85;
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      byte byte4 = (byte)80;
      tFloatByteHashMap0.hashCode();
      byteArray0[4] = byte4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: CFFF5501
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "";
      byte byte0 = (byte)92;
      Byte byte1 = new Byte(byte0);
      AbstractMap.SimpleEntry<String, Byte> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Byte>(string0, byte1);
      abstractMap_SimpleEntry0.hashCode();
      String string1 = abstractMap_SimpleEntry0.getKey();
      assertSame(string0, string1);
  }
}
