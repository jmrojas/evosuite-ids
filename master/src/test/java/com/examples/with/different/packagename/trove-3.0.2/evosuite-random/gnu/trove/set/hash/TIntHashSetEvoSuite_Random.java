/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.set.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TIntCollection;
import gnu.trove.impl.sync.TSynchronizedRandomAccessIntList;
import gnu.trove.list.TIntList;
import gnu.trove.list.array.TIntArrayList;
import gnu.trove.set.hash.TIntHashSet;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntHashSetEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try {
        linkedList0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 459;
          float float0 = 0.0F;
          int int1 = 175;
          TIntHashSet tIntHashSet0 = new TIntHashSet(int0, float0, int1);
          int[] intArray0 = new int[6];
          intArray0[0] = int0;
          intArray0[1] = int1;
          String string0 = tIntHashSet0.toString();
          assertNotNull(string0);
          
          intArray0[2] = int0;
          intArray0[3] = int1;
          intArray0[4] = int0;
          intArray0[5] = int0;
          TIntHashSet tIntHashSet1 = new TIntHashSet(tIntHashSet0._set);
          assertEquals("{175}", tIntHashSet1.toString());
          
          boolean boolean0 = tIntHashSet0.removeAll(intArray0);
          assertEquals(false, boolean0);
          
          LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
          int int2 = 1;
          Integer integer0 = new Integer(int2);
          linkedList0.add((Integer) int2);
          linkedList0.add(integer0);
          int int3 = 10;
          TIntHashSet tIntHashSet2 = new TIntHashSet(int3);
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"{}\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // sun.reflect.GeneratedConstructorAccessor9.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-1342);
      int int1 = 1572;
      TIntHashSet tIntHashSet0 = new TIntHashSet();
      tIntHashSet0.getNoEntryValue();
      TIntHashSet tIntHashSet1 = new TIntHashSet(int1);
      tIntHashSet0.tempDisableAutoCompaction();
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      TSynchronizedRandomAccessIntList tSynchronizedRandomAccessIntList0 = new TSynchronizedRandomAccessIntList((TIntList) tIntArrayList0);
      int[] intArray0 = new int[7];
      intArray0[0] = int1;
      intArray0[1] = int1;
      intArray0[2] = int1;
      intArray0[3] = int1;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int1;
      tIntHashSet1.retainAll(intArray0);
      int int2 = 1;
      int int3 = 1719;
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessIntList0.subList(int2, int3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // end index < 10
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TIntHashSet tIntHashSet0 = new TIntHashSet();
      tIntHashSet0.clear();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = tIntHashSet0.addAll((Collection<? extends Integer>) linkedList0);
      assertEquals("{}", tIntHashSet0.toString());
      
      int int0 = 0;
      TIntArrayList tIntArrayList0 = new TIntArrayList(int0);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-84);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-13);
      byteArray0[1] = byte1;
      byte byte2 = (byte)107;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)103;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-11);
      byteArray0[6] = byte6;
      byte byte7 = (byte)122;
      byteArray0[7] = byte7;
      tIntHashSet0._states = byteArray0;
      boolean boolean1 = tIntHashSet0.removeAll((TIntCollection) tIntArrayList0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = tIntHashSet0.isEmpty();
      assertFalse(boolean2 == boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 1265;
      TIntHashSet tIntHashSet0 = new TIntHashSet(int0);
      int int1 = (-858);
      tIntHashSet0.ensureCapacity(int1);
      int[] intArray0 = new int[1];
      int int2 = 1090;
      tIntHashSet0.add(int2);
      intArray0[0] = int0;
      tIntHashSet0.tempDisableAutoCompaction();
      tIntHashSet0.toArray(intArray0);
      int int3 = 0;
      boolean boolean0 = tIntHashSet0.add(int3);
      assertEquals(false, tIntHashSet0.isEmpty());
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 10;
      intArray0[0] = int0;
      int int1 = 872;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[0] = int2;
      intArray0[1] = int2;
      intArray0[2] = int2;
      int int3 = 228;
      intArray0[3] = int3;
      intArray0[4] = int2;
      intArray0[5] = int0;
      intArray0[6] = int0;
      int int4 = 0;
      intArray0[2] = int4;
      int int5 = 1684;
      intArray0[3] = int5;
      int int6 = 0;
      intArray0[4] = int6;
      int int7 = 10;
      intArray0[5] = int7;
      int int8 = (-1757);
      intArray0[6] = int8;
      TIntHashSet tIntHashSet0 = new TIntHashSet(intArray0);
      boolean boolean0 = tIntHashSet0.removeAll(intArray0);
      assertEquals(true, boolean0);
      assertEquals(true, tIntHashSet0.isEmpty());
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-569);
      TIntHashSet tIntHashSet0 = new TIntHashSet(int0, int0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      tIntHashSet0.addAll((Collection<? extends Integer>) linkedList0);
      int int1 = (-616);
      TIntHashSet tIntHashSet1 = new TIntHashSet(int1, int1);
      tIntHashSet1.compact();
      int int2 = 1934;
      TIntArrayList tIntArrayList0 = new TIntArrayList(int2);
      tIntArrayList0.clear();
      tIntArrayList0.sort();
      String string0 = "kcc#c:5BSc";
      int int3 = (-223);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int3, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: kcc#c:5BSc://kcc%23c:5BSc@[kcc#c:5BSc]:-223kcc%23c:5BSc?kcc%23c:5BSc#kcc%23c:5BSc
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 1489;
      intArray0[0] = int0;
      int int1 = (-1408);
      intArray0[1] = int1;
      int int2 = 774;
      intArray0[2] = int2;
      int int3 = 0;
      TIntHashSet tIntHashSet0 = new TIntHashSet();
      tIntHashSet0.addAll(intArray0);
      assertEquals(false, tIntHashSet0.isEmpty());
      
      intArray0[3] = int3;
      int int4 = 0;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      TIntHashSet tIntHashSet1 = new TIntHashSet((Collection<? extends Integer>) linkedList0);
      tIntHashSet1.isEmpty();
      intArray0[4] = int4;
      TIntHashSet tIntHashSet2 = new TIntHashSet(intArray0);
      int int5 = 656429;
      tIntHashSet2.remove(int5);
      int int6 = 0;
      TIntHashSet tIntHashSet3 = new TIntHashSet(int6, int6, int6);
      tIntHashSet3.hashCode();
      int int7 = 0;
      tIntHashSet1.iterator();
      tIntHashSet3.contains(int7);
      tIntHashSet3.capacity();
      assertFalse(tIntHashSet3.equals(tIntHashSet0));
  }

  @Test
  public void test8()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 1905;
      intArray0[0] = int0;
      int int1 = (-470);
      intArray0[1] = int1;
      int int2 = 630;
      intArray0[2] = int2;
      int int3 = 369;
      intArray0[3] = int3;
      int int4 = 10;
      intArray0[4] = int4;
      int int5 = 10;
      intArray0[5] = int5;
      int int6 = 163;
      intArray0[6] = int6;
      int int7 = 10;
      intArray0[7] = int7;
      int int8 = 6;
      intArray0[8] = int8;
      TIntHashSet tIntHashSet0 = new TIntHashSet(intArray0);
      tIntHashSet0.capacity();
      assertEquals("{-470,10,630,6,1905,163,369}", tIntHashSet0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = (-1731);
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 1;
      intArray0[4] = int4;
      TIntHashSet tIntHashSet0 = new TIntHashSet(intArray0);
      int int5 = 10;
      tIntHashSet0.remove(int5);
      assertEquals("{-1731,1,0}", tIntHashSet0.toString());
      
      TIntHashSet tIntHashSet1 = new TIntHashSet();
      int[] intArray1 = new int[4];
      int int6 = (-1259);
      intArray1[0] = int6;
      int int7 = 62;
      intArray1[1] = int7;
      int int8 = 1440;
      intArray1[2] = int8;
      int int9 = (-2016);
      intArray1[3] = int9;
      boolean boolean0 = tIntHashSet1.removeAll(intArray1);
      assertEquals(false, boolean0);
      
      int int10 = 0;
      TIntHashSet tIntHashSet2 = new TIntHashSet(int10);
      tIntHashSet2.getAutoCompactionFactor();
      assertFalse(tIntHashSet2.equals(tIntHashSet0));
  }

  @Test
  public void test10()  throws Throwable  {
      TIntHashSet tIntHashSet0 = new TIntHashSet();
      boolean boolean0 = tIntHashSet0.isEmpty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      int int1 = 1119;
      TIntHashSet tIntHashSet0 = new TIntHashSet(int0, int0, int1);
      int int2 = (-524);
      tIntHashSet0.ensureCapacity(int2);
      assertFalse(int2 == int1);
  }

  @Test
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 5119;
      intArray0[0] = int0;
      int int1 = 1;
      intArray0[1] = int1;
      TIntHashSet tIntHashSet0 = new TIntHashSet(int0, intArray0[1], int1);
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0);
      // Undeclared exception!
      try {
        tIntArrayList0.subList(intArray0[0], int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // end index < 4
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = (-1);
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = (-1);
      intArray0[2] = int2;
      int int3 = (-1);
      intArray0[3] = int3;
      int int4 = 1482707;
      intArray0[4] = int4;
      int int5 = 14143;
      intArray0[5] = int5;
      TIntHashSet tIntHashSet0 = new TIntHashSet(intArray0);
      int int6 = (-1011);
      boolean boolean0 = tIntHashSet0.remove(int6);
      assertEquals("{14143,1482707,-1,0}", tIntHashSet0.toString());
      assertEquals(false, boolean0);
  }
}
