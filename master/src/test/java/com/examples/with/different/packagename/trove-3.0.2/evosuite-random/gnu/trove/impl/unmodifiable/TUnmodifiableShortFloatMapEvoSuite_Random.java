/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap;
import gnu.trove.map.TShortFloatMap;
import gnu.trove.map.hash.TShortFloatHashMap;
import java.util.HashMap;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableShortFloatMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 0;
      float float0 = Float.NEGATIVE_INFINITY;
      short short0 = (short)0;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, float0, short0, (float) int0);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) short0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) short0;
      floatArray0[3] = float0;
      tUnmodifiableShortFloatMap0.values(floatArray0);
      int int1 = Integer.MAX_VALUE;
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(int1);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap1 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap1);
      short short1 = (short) (-84);
      // Undeclared exception!
      try {
        tUnmodifiableShortFloatMap1.putIfAbsent(short1, short1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 1579;
      int int1 = 184;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int1);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap();
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      String string0 = hashMap0.toString();
      boolean boolean0 = tUnmodifiableShortFloatMap0.equals((Object) string0);
      assertEquals(false, boolean0);
      
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap1 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap1);
      short short0 = (short)244;
      float float0 = (-24.905151F);
      TShortFloatHashMap tShortFloatHashMap2 = new TShortFloatHashMap(int0, (float) int0, short0, float0);
      short short1 = (short)1745;
      float float1 = 1871.1774F;
      // Undeclared exception!
      try {
        tUnmodifiableShortFloatMap0.adjustOrPutValue(short1, (float) int0, float1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short)1987;
      shortArray0[0] = short0;
      short short1 = (short)322;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short) (-266);
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) short3;
      floatArray0[1] = (float) shortArray0[5];
      float float0 = 0.0F;
      floatArray0[2] = float0;
      floatArray0[3] = (float) short3;
      floatArray0[4] = (float) shortArray0[1];
      floatArray0[5] = (float) shortArray0[0];
      floatArray0[6] = (float) short5;
      floatArray0[7] = (float) short1;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      short short7 = (short) (-519);
      float float1 = 0.0F;
      // Undeclared exception!
      try {
        tUnmodifiableShortFloatMap0.put(short7, float1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TShortFloatMap tShortFloatMap0 = null;
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = null;
      try {
        tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap(tShortFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-242);
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0);
      short[] shortArray0 = new short[9];
      short short0 = (short)220;
      shortArray0[0] = short0;
      short short1 = (short) (-1);
      shortArray0[1] = short1;
      short short2 = (short) (-599);
      shortArray0[2] = short2;
      short short3 = (short) (-1695);
      shortArray0[3] = short3;
      short short4 = (short) (-45);
      shortArray0[4] = short4;
      short short5 = (short) (-1);
      shortArray0[5] = short5;
      short short6 = (short)508;
      shortArray0[6] = short6;
      short short7 = (short) (-268);
      shortArray0[7] = short7;
      short short8 = (short)984;
      shortArray0[8] = short8;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) shortArray0[3];
      floatArray0[1] = (float) shortArray0[6];
      floatArray0[2] = (float) short2;
      floatArray0[3] = (float) shortArray0[8];
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(shortArray0, floatArray0);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap1);
      tUnmodifiableShortFloatMap0.keys();
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap1 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      assertFalse(tUnmodifiableShortFloatMap1.equals(tUnmodifiableShortFloatMap0));
  }

  @Test
  public void test5()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)1906;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short) (-1);
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short) (-1);
      shortArray0[5] = short5;
      short short6 = (short)11193;
      shortArray0[6] = short6;
      short short7 = (short) (-618);
      shortArray0[7] = short7;
      float[] floatArray0 = new float[7];
      float float0 = Float.POSITIVE_INFINITY;
      floatArray0[0] = float0;
      floatArray0[1] = (float) short0;
      floatArray0[2] = (float) short0;
      floatArray0[3] = (float) short3;
      floatArray0[4] = (float) shortArray0[2];
      floatArray0[5] = (float) shortArray0[4];
      floatArray0[6] = (float) short5;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      float float1 = (-1437.621F);
      // Undeclared exception!
      try {
        tUnmodifiableShortFloatMap0.putIfAbsent(short6, float1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 82;
      TShortFloatMap tShortFloatMap0 = null;
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = null;
      try {
        tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap(tShortFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 1117;
      int int1 = (-228);
      float float0 = 1702.7338F;
      short short0 = (short)517;
      float float1 = 0.0F;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int1, float0, short0, float1);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      tShortFloatHashMap0.putIfAbsent(short0, (float) int1);
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap((TShortFloatMap) tUnmodifiableShortFloatMap0);
      String string0 = tShortFloatHashMap1.toString();
      Locale locale0 = Locale.forLanguageTag(string0);
      String string1 = locale0.getScript();
      Short short1 = new Short(short0);
      locale0.equals((Object) short1);
      tShortFloatHashMap0.equals((Object) string1);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap1 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap1);
      tUnmodifiableShortFloatMap1.keySet();
      tUnmodifiableShortFloatMap1.size();
      short short2 = (short) (-1677);
      tUnmodifiableShortFloatMap1.keySet();
      float float2 = (-500.7692F);
      Locale locale1 = Locale.ENGLISH;
      char char0 = 'W';
      String string2 = locale1.getExtension(char0);
      tUnmodifiableShortFloatMap1.equals((Object) string2);
      tUnmodifiableShortFloatMap0.size();
      assertEquals(1, tUnmodifiableShortFloatMap0.size());
      
      TShortFloatHashMap tShortFloatHashMap2 = new TShortFloatHashMap(int0, (float) int0, short2, float2);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap2 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap2);
      short short3 = (short) (-784);
      tUnmodifiableShortFloatMap2.containsKey(short3);
      short short4 = (short)0;
      float float3 = 1024.5951F;
      // Undeclared exception!
      try {
        tUnmodifiableShortFloatMap2.adjustOrPutValue(short4, float3, (float) short2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      short short0 = (short)0;
      float float0 = 124.183495F;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, (float) int0, short0, float0);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortFloatMap0.increment(short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      short[] shortArray0 = new short[4];
      float[] floatArray0 = new float[5];
      float float0 = 517.4973F;
      floatArray0[0] = float0;
      float float1 = (-1.0F);
      floatArray0[1] = float1;
      float float2 = 0.0F;
      floatArray0[2] = float2;
      float float3 = (-832.35547F);
      floatArray0[3] = float3;
      float float4 = (-1903.4729F);
      floatArray0[4] = float4;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      short short0 = (short)0;
      float float5 = Float.POSITIVE_INFINITY;
      // Undeclared exception!
      try {
        tUnmodifiableShortFloatMap0.adjustOrPutValue(short0, floatArray0[0], float5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 397;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, int0);
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap((TShortFloatMap) tShortFloatHashMap0);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap1);
      int int1 = tUnmodifiableShortFloatMap0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test
  public void test11()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) shortArray0[0];
      float float0 = 0.0F;
      floatArray0[1] = float0;
      floatArray0[2] = (float) short1;
      float float1 = 0.0F;
      floatArray0[3] = float1;
      floatArray0[4] = (float) shortArray0[0];
      floatArray0[5] = (float) shortArray0[1];
      floatArray0[6] = (float) short1;
      floatArray0[7] = (float) short0;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap((TShortFloatMap) tShortFloatHashMap0);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap1);
      tUnmodifiableShortFloatMap0.keySet();
      float float2 = 558.273F;
      floatArray0[8] = float2;
      short short2 = (short)369;
      // Undeclared exception!
      try {
        tUnmodifiableShortFloatMap0.adjustValue(short2, floatArray0[3]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)75;
      shortArray0[1] = short1;
      short short2 = (short)1;
      shortArray0[2] = short2;
      short short3 = (short)64;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) shortArray0[0];
      float float0 = (-280.05457F);
      floatArray0[1] = float0;
      floatArray0[2] = (float) shortArray0[2];
      floatArray0[3] = (float) short3;
      floatArray0[4] = (float) shortArray0[0];
      floatArray0[5] = (float) shortArray0[2];
      floatArray0[6] = (float) shortArray0[1];
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      tUnmodifiableShortFloatMap0.keys(shortArray0);
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap();
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap1 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap1);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap2 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap1);
      short short5 = tUnmodifiableShortFloatMap2.getNoEntryKey();
      assertFalse(short5 == short3);
  }

  @Test
  public void test13()  throws Throwable  {
      TShortFloatMap tShortFloatMap0 = null;
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = null;
      try {
        tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap(tShortFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1644;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, int0);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      short short0 = (short) (-1);
      tUnmodifiableShortFloatMap0.toString();
      float float0 = (-165.46446F);
      // Undeclared exception!
      try {
        tUnmodifiableShortFloatMap0.adjustValue(short0, float0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 1;
      float float0 = (-1397.7582F);
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, float0);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      float[] floatArray0 = tUnmodifiableShortFloatMap0.values();
      assertNotNull(floatArray0);
  }

  @Test
  public void test16()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap((TShortFloatMap) tShortFloatHashMap0);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap1);
      short short0 = (short)77;
      float float0 = (-457.05185F);
      // Undeclared exception!
      try {
        tUnmodifiableShortFloatMap0.adjustOrPutValue(short0, float0, (float) short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      short short0 = (short)0;
      float float0 = (-387.84268F);
      // Undeclared exception!
      try {
        tUnmodifiableShortFloatMap0.put(short0, float0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
