/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TDoubleFunction;
import gnu.trove.map.TDoubleDoubleMap;
import gnu.trove.map.hash.TDoubleDoubleHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleDoubleHashMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 1;
      int int1 = (-1);
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(int1);
      double double0 = Double.POSITIVE_INFINITY;
      tDoubleDoubleHashMap0.put(double0, (double) int1);
      assertEquals(1, tDoubleDoubleHashMap0.size());
      
      TDoubleDoubleHashMap tDoubleDoubleHashMap1 = new TDoubleDoubleHashMap(int0, int0);
      tDoubleDoubleHashMap1.capacity();
      assertFalse(tDoubleDoubleHashMap1.equals(tDoubleDoubleHashMap0));
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-1442);
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(int0, int0);
      tDoubleDoubleHashMap0.contains((double) int0);
      TDoubleDoubleHashMap tDoubleDoubleHashMap1 = new TDoubleDoubleHashMap(int0);
      double[] doubleArray0 = new double[4];
      double double0 = 1475.8727203896258;
      doubleArray0[0] = double0;
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[1] = (double) int0;
      double double1 = 0.0;
      double double2 = (-885.2686955016072);
      tDoubleDoubleHashMap0.putIfAbsent(double2, double0);
      assertEquals("{-885.2686955016072=1475.8727203896258}", tDoubleDoubleHashMap0.toString());
      
      doubleArray0[2] = double1;
      tDoubleDoubleHashMap1.keySet();
      TDoubleFunction tDoubleFunction0 = null;
      tDoubleDoubleHashMap1.transformValues(tDoubleFunction0);
      TDoubleDoubleHashMap tDoubleDoubleHashMap2 = new TDoubleDoubleHashMap(int0);
      tDoubleDoubleHashMap2.contains(doubleArray0[1]);
      doubleArray0[3] = (double) int0;
      tDoubleDoubleHashMap2.iterator();
      tDoubleDoubleHashMap1.values(doubleArray0);
      assertFalse(tDoubleDoubleHashMap1.equals(tDoubleDoubleHashMap0));
  }

  @Test
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 1119.4041547762329;
      doubleArray0[0] = double0;
      double double1 = Double.POSITIVE_INFINITY;
      doubleArray0[1] = double1;
      double double2 = (-378.17636293397817);
      doubleArray0[2] = double2;
      double double3 = 1677.6675425258954;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = (-1344.9610487640825);
      doubleArray0[5] = double5;
      double double6 = 1.0;
      doubleArray0[6] = double6;
      double double7 = (-1.0);
      doubleArray0[7] = double7;
      double double8 = 0.0;
      doubleArray0[8] = double8;
      double double9 = (-721.2426317368389);
      doubleArray0[9] = double9;
      double[] doubleArray1 = new double[1];
      double double10 = 0.0;
      doubleArray1[0] = double10;
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(doubleArray0, doubleArray1);
      tDoubleDoubleHashMap0.hashCode();
      int int0 = (-583);
      TDoubleDoubleHashMap tDoubleDoubleHashMap1 = new TDoubleDoubleHashMap(int0, int0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap();
      tDoubleDoubleHashMap0.containsKey((double) int0);
      TDoubleDoubleHashMap tDoubleDoubleHashMap1 = new TDoubleDoubleHashMap(int0);
      TDoubleProcedure tDoubleProcedure0 = null;
      tDoubleDoubleHashMap1.adjustValue((double) int0, (double) int0);
      tDoubleDoubleHashMap1.forEach(tDoubleProcedure0);
      Object object0 = null;
      Double double0 = new Double((double) int0);
      TDoubleDoubleHashMap tDoubleDoubleHashMap2 = new TDoubleDoubleHashMap();
      String string0 = "";
      try {
        Double.valueOf(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // empty String
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap();
      double double0 = 546.166855076079;
      double double1 = (-1957.2550929176186);
      tDoubleDoubleHashMap0.put(double0, double1);
      int int0 = 1296;
      float float0 = 1154.8392F;
      tDoubleDoubleHashMap0.keys();
      TDoubleDoubleHashMap tDoubleDoubleHashMap1 = new TDoubleDoubleHashMap(int0, float0);
      tDoubleDoubleHashMap0.getAutoCompactionFactor();
      double double2 = 1.0;
      tDoubleDoubleHashMap0.remove(double2);
      tDoubleDoubleHashMap0.trimToSize();
      tDoubleDoubleHashMap1.putAll((TDoubleDoubleMap) tDoubleDoubleHashMap0);
      tDoubleDoubleHashMap1.setAutoCompactionFactor((float) int0);
      tDoubleDoubleHashMap1.values();
      tDoubleDoubleHashMap1.size();
      boolean boolean0 = false;
      tDoubleDoubleHashMap1.size();
      tDoubleDoubleHashMap0.reenableAutoCompaction(boolean0);
      double double3 = 38.18703179808664;
      tDoubleDoubleHashMap1.capacity();
      tDoubleDoubleHashMap0.capacity();
      tDoubleDoubleHashMap0.put(double3, double3);
      tDoubleDoubleHashMap0.keys(tDoubleDoubleHashMap1._set);
      int int1 = tDoubleDoubleHashMap0.capacity();
      assertEquals(2, tDoubleDoubleHashMap0.size());
      assertEquals(7, int1);
  }

  @Test
  public void test5()  throws Throwable  {
      Map.Entry<Integer, Integer> map_Entry0 = null;
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = null;
      try {
        abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(map_Entry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = (-505.6902671202019);
      doubleArray0[1] = double1;
      double double2 = (-1.0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = double2;
      doubleArray1[1] = double0;
      doubleArray1[2] = double0;
      doubleArray1[3] = double1;
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(doubleArray0, doubleArray1);
      tDoubleDoubleHashMap0.trimToSize();
      assertEquals(5, tDoubleDoubleHashMap0.capacity());
      
      doubleArray0[2] = double2;
      double double3 = (-292.2455650714535);
      doubleArray0[3] = double3;
      double double4 = (-1156.9512786864423);
      doubleArray0[4] = double4;
      double double5 = 0.0;
      doubleArray0[5] = double5;
      TDoubleDoubleHashMap tDoubleDoubleHashMap1 = new TDoubleDoubleHashMap(doubleArray0, doubleArray0);
      tDoubleDoubleHashMap1.keys();
      assertFalse(tDoubleDoubleHashMap1.equals(tDoubleDoubleHashMap0));
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 449;
          TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(int0);
          byte[] byteArray0 = new byte[10];
          byte byte0 = (byte)109;
          byteArray0[0] = byte0;
          byte byte1 = (byte) (-15);
          byteArray0[1] = byte1;
          byte byte2 = (byte)1;
          byteArray0[2] = byte2;
          byte byte3 = (byte)0;
          byteArray0[3] = byte3;
          byte byte4 = (byte) (-75);
          byteArray0[4] = byte4;
          byte byte5 = (byte) (-62);
          byteArray0[5] = byte5;
          byte byte6 = (byte) (-70);
          byteArray0[6] = byte6;
          byte byte7 = (byte) (-3);
          byteArray0[7] = byte7;
          byte byte8 = (byte)0;
          byteArray0[8] = byte8;
          byte byte9 = (byte)0;
          byteArray0[9] = byte9;
          tDoubleDoubleHashMap0._states = byteArray0;
          int int1 = (-1465);
          int int2 = (-1782);
          TDoubleDoubleHashMap tDoubleDoubleHashMap1 = new TDoubleDoubleHashMap(int2, int1);
          double[] doubleArray0 = new double[3];
          doubleArray0[0] = (double) int2;
          tDoubleDoubleHashMap1.increment((double) int2);
          doubleArray0[1] = (double) int1;
          doubleArray0[2] = (double) int2;
          tDoubleDoubleHashMap1.values(doubleArray0);
          TDoubleDoubleHashMap tDoubleDoubleHashMap2 = new TDoubleDoubleHashMap((TDoubleDoubleMap) tDoubleDoubleHashMap1);
          tDoubleDoubleHashMap2.size();
          String string0 = "d`o";
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"d`o\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.GeneratedConstructorAccessor15.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 1910.7492709249816;
      doubleArray0[0] = double0;
      double double1 = (-123.57953208011199);
      doubleArray0[1] = double1;
      double double2 = (-1712.6493732139122);
      doubleArray0[2] = double2;
      double double3 = 1253.217449557603;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = 1345.29674859921;
      doubleArray0[5] = double5;
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(doubleArray0, doubleArray0);
      double double6 = 73.16614340221463;
      tDoubleDoubleHashMap0.putIfAbsent(doubleArray0[2], double6);
      TDoubleDoubleHashMap tDoubleDoubleHashMap1 = new TDoubleDoubleHashMap();
      double double7 = (-1039.9047184019425);
      int int0 = (-857);
      tDoubleDoubleHashMap1.ensureCapacity(int0);
      float float0 = tDoubleDoubleHashMap0.getAutoCompactionFactor();
      TDoubleDoubleHashMap tDoubleDoubleHashMap2 = new TDoubleDoubleHashMap(int0, float0);
      double double8 = (-1502.7835040165105);
      double double9 = tDoubleDoubleHashMap0.putIfAbsent(doubleArray0[2], double8);
      assertEquals((-1712.6493732139122), double9, 0.01D);
      
      double double10 = tDoubleDoubleHashMap1.get(double7);
      assertEquals(0.0, double10, 0.01D);
      
      boolean boolean0 = tDoubleDoubleHashMap1.isEmpty();
      tDoubleDoubleHashMap0.valueCollection();
      assertEquals(false, tDoubleDoubleHashMap0.isEmpty());
      assertEquals("{1253.217449557603=1253.217449557603, 1910.7492709249816=1910.7492709249816, 1345.29674859921=1345.29674859921, -1712.6493732139122=-1712.6493732139122, -123.57953208011199=-123.57953208011199, 0.0=0.0}", tDoubleDoubleHashMap0.toString());
      
      int int1 = tDoubleDoubleHashMap1.capacity();
      assertEquals(23, int1);
      
      double double11 = (-1766.3046039861522);
      tDoubleDoubleHashMap1.contains(double11);
      double double12 = 544.6587966711749;
      tDoubleDoubleHashMap1.tempDisableAutoCompaction();
      boolean boolean1 = tDoubleDoubleHashMap1.adjustValue(double11, double12);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      String string0 = locale0.getDisplayLanguage();
      try {
        Double.valueOf(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"French\"
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 957;
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(int0, int0);
      assertEquals(3, tDoubleDoubleHashMap0.capacity());
  }

  @Test
  public void test11()  throws Throwable  {
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap();
      int int0 = (-1570);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 1984.3342034265304;
      doubleArray0[1] = double1;
      double double2 = 1669.690288243879;
      doubleArray0[2] = double2;
      double double3 = 942.8218597797024;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = 1.0;
      doubleArray0[5] = double5;
      double double6 = (-1.0);
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(doubleArray0, doubleArray0);
      boolean boolean0 = tDoubleDoubleHashMap0.isEmpty();
      assertEquals(false, boolean0);
      
      doubleArray0[6] = double6;
      double double7 = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = double7;
      double double8 = 0.0;
      doubleArray0[8] = double8;
      double double9 = (-1751.9222196411158);
      doubleArray0[9] = double9;
      TDoubleDoubleHashMap tDoubleDoubleHashMap1 = new TDoubleDoubleHashMap(doubleArray0, doubleArray0);
      tDoubleDoubleHashMap1.keySet();
      assertEquals("{1.0=1.0, 1984.3342034265304=1984.3342034265304, -1751.9222196411158=-1751.9222196411158, 942.8218597797024=942.8218597797024, 1669.690288243879=1669.690288243879, -Infinity=-Infinity, -1.0=-1.0, 0.0=0.0}", tDoubleDoubleHashMap1.toString());
      assertEquals(8, tDoubleDoubleHashMap1.size());
  }

  @Test
  public void test13()  throws Throwable  {
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap();
      double double0 = 1030.1791719377973;
      tDoubleDoubleHashMap0.containsKey(double0);
      assertEquals(23, tDoubleDoubleHashMap0.capacity());
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-573.2090225142655);
      doubleArray0[0] = double0;
      double double1 = 1785.2379559208428;
      doubleArray0[1] = double1;
      int int0 = (-1907);
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(int0);
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      double double2 = 2004.1183598355792;
      String string0 = "Nu)aftt@";
      File file0 = new File(string0);
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(file0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // Nu)aftt@
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-591);
      float float0 = 0.0F;
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(int0, float0);
      boolean boolean0 = tDoubleDoubleHashMap0.containsValue((double) int0);
      assertEquals(false, boolean0);
      
      double[] doubleArray0 = new double[5];
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 1933.3317071687825;
      doubleArray0[2] = double2;
      int int1 = (-284);
      TDoubleDoubleHashMap tDoubleDoubleHashMap1 = new TDoubleDoubleHashMap(int1, int1);
      tDoubleDoubleHashMap1.ensureCapacity(int1);
      assertEquals("{}", tDoubleDoubleHashMap1.toString());
      assertEquals(3, tDoubleDoubleHashMap1.capacity());
      
      double double3 = (-367.6366250513473);
      doubleArray0[3] = double3;
      double double4 = (-1957.3757043438354);
      doubleArray0[4] = double4;
      TDoubleDoubleHashMap tDoubleDoubleHashMap2 = new TDoubleDoubleHashMap(doubleArray0, doubleArray0);
      assertEquals("{-367.6366250513473=-367.6366250513473, 1933.3317071687825=1933.3317071687825, -1957.3757043438354=-1957.3757043438354, Infinity=Infinity, 0.0=0.0}", tDoubleDoubleHashMap2.toString());
      assertEquals(false, tDoubleDoubleHashMap2.isEmpty());
  }
}
