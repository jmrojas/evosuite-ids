/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TDoubleShortMap;
import gnu.trove.map.TFloatShortMap;
import gnu.trove.map.TIntDoubleMap;
import gnu.trove.map.custom_hash.TObjectIntCustomHashMap;
import gnu.trove.map.custom_hash.TObjectShortCustomHashMap;
import gnu.trove.map.hash.TByteDoubleHashMap;
import gnu.trove.map.hash.TByteIntHashMap;
import gnu.trove.map.hash.TByteObjectHashMap;
import gnu.trove.map.hash.TCustomHashMap;
import gnu.trove.map.hash.TDoubleFloatHashMap;
import gnu.trove.map.hash.TDoubleObjectHashMap;
import gnu.trove.map.hash.TDoubleShortHashMap;
import gnu.trove.map.hash.TFloatFloatHashMap;
import gnu.trove.map.hash.TFloatShortHashMap;
import gnu.trove.map.hash.TIntDoubleHashMap;
import gnu.trove.map.hash.TIntFloatHashMap;
import gnu.trove.map.hash.TIntLongHashMap;
import gnu.trove.map.hash.TIntObjectHashMap;
import gnu.trove.map.hash.TLongShortHashMap;
import gnu.trove.map.hash.TObjectByteHashMap;
import gnu.trove.map.hash.TObjectDoubleHashMap;
import gnu.trove.map.hash.TShortCharHashMap;
import gnu.trove.map.hash.TShortDoubleHashMap;
import gnu.trove.map.hash.TShortLongHashMap;
import gnu.trove.map.hash.TShortObjectHashMap;
import gnu.trove.set.hash.TCustomHashSet;
import gnu.trove.set.hash.TLongHashSet;
import gnu.trove.set.hash.TShortHashSet;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class THashEvoSuite_StrongMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 25 covered goals:
   * 1 Strong Mutation 20: gnu.trove.impl.hash.THash.isEmpty()Z:147 - ReplaceComparisonOperator != -> -1
   * 2 Strong Mutation 15: gnu.trove.impl.hash.THash.isEmpty()Z:147 - InsertUnaryOp +1
   * 3 Strong Mutation 21: gnu.trove.impl.hash.THash.isEmpty()Z:147 - ReplaceConstant - 1 -> 0
   * 4 Strong Mutation 2: gnu.trove.impl.hash.THash.<init>(IF)V:135 - InsertUnaryOp Negation of loadFactor
   * 5 Strong Mutation 7: gnu.trove.impl.hash.THash.<init>(IF)V:137 - ReplaceArithmeticOperator / -> -
   * 6 Strong Mutation 8: gnu.trove.impl.hash.THash.<init>(IF)V:137 - ReplaceArithmeticOperator / -> +
   * 7 Strong Mutation 13: gnu.trove.impl.hash.THash.isEmpty()Z:147 - ReplaceConstant - 0 -> 1
   * 8 Strong Mutation 15: gnu.trove.impl.hash.THash.isEmpty()Z:147 - InsertUnaryOp +1
   * 9 Strong Mutation 16: gnu.trove.impl.hash.THash.isEmpty()Z:147 - InsertUnaryOp -1
   * 10 Strong Mutation 21: gnu.trove.impl.hash.THash.isEmpty()Z:147 - ReplaceConstant - 1 -> 0
   * 11 Strong Mutation 20: gnu.trove.impl.hash.THash.isEmpty()Z:147 - ReplaceComparisonOperator != -> -1
   * 12 Strong Mutation 171: gnu.trove.impl.hash.THash.setUp(I)I:296 - InsertUnaryOp IINC 1 capacity
   * 13 Strong Mutation 172: gnu.trove.impl.hash.THash.setUp(I)I:296 - InsertUnaryOp IINC -1 capacity
   * 14 Strong Mutation 167: gnu.trove.impl.hash.THash.setUp(I)I:295 - InsertUnaryOp IINC -1 initialCapacity
   * 15 Strong Mutation 179: gnu.trove.impl.hash.THash.setUp(I)I:299 - ReplaceVariable capacity -> initialCapacity
   * 16 Strong Mutation 182: gnu.trove.impl.hash.THash.setUp(I)I:299 - InsertUnaryOp IINC -1 capacity
   * 17 Strong Mutation 180: gnu.trove.impl.hash.THash.setUp(I)I:299 - InsertUnaryOp Negation of capacity
   * 18 Strong Mutation 181: gnu.trove.impl.hash.THash.setUp(I)I:299 - InsertUnaryOp IINC 1 capacity
   * 19 Strong Mutation 230: gnu.trove.impl.hash.THash.computeMaxSize(I)V:350 - ReplaceArithmeticOperator - -> /
   * 20 Strong Mutation 229: gnu.trove.impl.hash.THash.computeMaxSize(I)V:350 - ReplaceArithmeticOperator - -> %
   * 21 gnu.trove.impl.hash.THash.computeMaxSize(I)V: root-Branch
   * 22 gnu.trove.impl.hash.THash.setUp(I)I: root-Branch
   * 23 gnu.trove.impl.hash.THash.<init>(IF)V: root-Branch
   * 24 gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V: I6 Branch 11 IFEQ L361 - true
   * 25 gnu.trove.impl.hash.THash.isEmpty()Z: I5 Branch 1 IF_ICMPNE L147 - false
   */

//   @Test
//   public void test0()  throws Throwable  {
//       IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
//       TObjectShortCustomHashMap<Object> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, 105, 0.0F);
//       boolean boolean0 = tObjectShortCustomHashMap0.isEmpty();
//       assertEquals(3, tObjectShortCustomHashMap0.capacity());
//       assertEquals(0.0F, tObjectShortCustomHashMap0.getAutoCompactionFactor(), 0.01F);
//       assertEquals(true, boolean0);
//   }

  //Test case number: 1
  /*
   * 30 covered goals:
   * 1 Strong Mutation 22: gnu.trove.impl.hash.THash.isEmpty()Z:147 - ReplaceConstant - 0 -> 1
   * 2 Strong Mutation 13: gnu.trove.impl.hash.THash.isEmpty()Z:147 - ReplaceConstant - 0 -> 1
   * 3 Strong Mutation 17: gnu.trove.impl.hash.THash.isEmpty()Z:147 - DeleteField: _sizeI
   * 4 Strong Mutation 16: gnu.trove.impl.hash.THash.isEmpty()Z:147 - InsertUnaryOp -1
   * 5 Strong Mutation 18: gnu.trove.impl.hash.THash.isEmpty()Z:147 - ReplaceComparisonOperator != -> >
   * 6 Strong Mutation 17: gnu.trove.impl.hash.THash.isEmpty()Z:147 - DeleteField: _sizeI
   * 7 Strong Mutation 18: gnu.trove.impl.hash.THash.isEmpty()Z:147 - ReplaceComparisonOperator != -> >
   * 8 Strong Mutation 22: gnu.trove.impl.hash.THash.isEmpty()Z:147 - ReplaceConstant - 0 -> 1
   * 9 Strong Mutation 170: gnu.trove.impl.hash.THash.setUp(I)I:296 - InsertUnaryOp Negation of capacity
   * 10 Strong Mutation 173: gnu.trove.impl.hash.THash.setUp(I)I:296 - DeleteStatement: computeMaxSize(I)V
   * 11 Strong Mutation 203: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - InsertUnaryOp Negation of capacity
   * 12 Strong Mutation 220: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - DeleteStatement: min(II)I
   * 13 Strong Mutation 218: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - ReplaceArithmeticOperator * -> %
   * 14 Strong Mutation 214: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - InsertUnaryOp Negation
   * 15 Strong Mutation 215: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - DeleteField: _loadFactorF
   * 16 Strong Mutation 208: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - ReplaceArithmeticOperator - -> %
   * 17 Strong Mutation 211: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - InsertUnaryOp Negation of capacity
   * 18 Strong Mutation 275: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - ReplaceConstant - 1 -> 0
   * 19 Strong Mutation 273: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - InsertUnaryOp -1
   * 20 Strong Mutation 272: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - InsertUnaryOp +1
   * 21 Strong Mutation 279: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - ReplaceArithmeticOperator + -> *
   * 22 Strong Mutation 278: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - ReplaceArithmeticOperator + -> /
   * 23 Strong Mutation 277: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - ReplaceArithmeticOperator + -> %
   * 24 Strong Mutation 276: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - ReplaceArithmeticOperator + -> -
   * 25 gnu.trove.impl.hash.THash.<init>()V: root-Branch
   * 26 gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V: I6 Branch 11 IFEQ L361 - false
   * 27 gnu.trove.impl.hash.THash.postInsertHook(Z)V: I3 Branch 12 IFEQ L377 - false
   * 28 gnu.trove.impl.hash.THash.postInsertHook(Z)V: I23 Branch 13 IF_ICMPGT L382 - false
   * 29 gnu.trove.impl.hash.THash.postInsertHook(Z)V: I26 Branch 14 IFNE L382 - true
   * 30 gnu.trove.impl.hash.THash.isEmpty()Z: I5 Branch 1 IF_ICMPNE L147 - true
   */

//   @Test
//   public void test1()  throws Throwable  {
//       long[] longArray0 = new long[7];
//       TLongHashSet tLongHashSet0 = new TLongHashSet(longArray0);
//       boolean boolean0 = tLongHashSet0.isEmpty();
//       assertEquals(1, tLongHashSet0.size());
//       assertEquals(0.5F, tLongHashSet0.getAutoCompactionFactor(), 0.01F);
//       assertEquals(23, tLongHashSet0.capacity());
//       assertEquals(false, boolean0);
//   }

  //Test case number: 2
  /*
   * 10 covered goals:
   * 1 Strong Mutation 28: gnu.trove.impl.hash.THash.ensureCapacity(I)V:174 - InsertUnaryOp IINC 1 desiredCapacity
   * 2 Strong Mutation 23: gnu.trove.impl.hash.THash.size()I:157 - InsertUnaryOp Negation
   * 3 Strong Mutation 25: gnu.trove.impl.hash.THash.size()I:157 - InsertUnaryOp -1
   * 4 Strong Mutation 24: gnu.trove.impl.hash.THash.size()I:157 - InsertUnaryOp +1
   * 5 Strong Mutation 26: gnu.trove.impl.hash.THash.size()I:157 - DeleteField: _sizeI
   * 6 Strong Mutation 28: gnu.trove.impl.hash.THash.ensureCapacity(I)V:174 - InsertUnaryOp IINC 1 desiredCapacity
   * 7 Strong Mutation 274: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - DeleteField: _sizeI
   * 8 Strong Mutation 271: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - InsertUnaryOp Negation
   * 9 gnu.trove.impl.hash.THash.size()I: root-Branch
   * 10 gnu.trove.impl.hash.THash.ensureCapacity(I)V: I8 Branch 2 IF_ICMPLE L174 - true
   */

  @Test
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1388.81828473459);
      doubleArray0[1] = (-1820.0101108095048);
      doubleArray0[2] = (-1.0);
      short[] shortArray0 = new short[4];
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      tDoubleShortHashMap0.putAll((TDoubleShortMap) tDoubleShortHashMap0);
      assertEquals(4, tDoubleShortHashMap0.size());
      assertEquals(17, tDoubleShortHashMap0.capacity());
  }

  //Test case number: 3
  /*
   * 9 covered goals:
   * 1 Strong Mutation 37: gnu.trove.impl.hash.THash.ensureCapacity(I)V:174 - ReplaceArithmeticOperator - -> /
   * 2 Strong Mutation 30: gnu.trove.impl.hash.THash.ensureCapacity(I)V:174 - InsertUnaryOp Negation
   * 3 Strong Mutation 33: gnu.trove.impl.hash.THash.ensureCapacity(I)V:174 - DeleteField: _maxSizeI
   * 4 Strong Mutation 39: gnu.trove.impl.hash.THash.ensureCapacity(I)V:174 - ReplaceComparisonOperator <= -> ==
   * 5 Strong Mutation 30: gnu.trove.impl.hash.THash.ensureCapacity(I)V:174 - InsertUnaryOp Negation
   * 6 Strong Mutation 33: gnu.trove.impl.hash.THash.ensureCapacity(I)V:174 - DeleteField: _maxSizeI
   * 7 Strong Mutation 39: gnu.trove.impl.hash.THash.ensureCapacity(I)V:174 - ReplaceComparisonOperator <= -> ==
   * 8 Strong Mutation 36: gnu.trove.impl.hash.THash.ensureCapacity(I)V:174 - ReplaceArithmeticOperator - -> %
   * 9 Strong Mutation 37: gnu.trove.impl.hash.THash.ensureCapacity(I)V:174 - ReplaceArithmeticOperator - -> /
   */

//   @Test
//   public void test3()  throws Throwable  {
//       TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap((-616));
//       float[] floatArray0 = new float[3];
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, tShortCharHashMap0._set);
//       TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap((TFloatShortMap) tFloatShortHashMap0);
//       assertEquals(23, tFloatShortHashMap1.capacity());
//       assertEquals(7, tFloatShortHashMap0.capacity());
//       assertEquals(0.5F, tShortCharHashMap0.getAutoCompactionFactor(), 0.01F);
//       assertEquals(1, tFloatShortHashMap0.size());
//   }

  //Test case number: 4
  /*
   * 30 covered goals:
   * 1 Strong Mutation 52: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator + -> -
   * 2 Strong Mutation 29: gnu.trove.impl.hash.THash.ensureCapacity(I)V:174 - InsertUnaryOp IINC -1 desiredCapacity
   * 3 Strong Mutation 38: gnu.trove.impl.hash.THash.ensureCapacity(I)V:174 - ReplaceArithmeticOperator - -> *
   * 4 Strong Mutation 51: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - DeleteStatement: size()I
   * 5 Strong Mutation 50: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - InsertUnaryOp IINC -1 desiredCapacity
   * 6 Strong Mutation 55: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator + -> *
   * 7 Strong Mutation 27: gnu.trove.impl.hash.THash.ensureCapacity(I)V:174 - InsertUnaryOp Negation of desiredCapacity
   * 8 Strong Mutation 29: gnu.trove.impl.hash.THash.ensureCapacity(I)V:174 - InsertUnaryOp IINC -1 desiredCapacity
   * 9 Strong Mutation 38: gnu.trove.impl.hash.THash.ensureCapacity(I)V:174 - ReplaceArithmeticOperator - -> *
   * 10 Strong Mutation 41: gnu.trove.impl.hash.THash.ensureCapacity(I)V:174 - ReplaceComparisonOperator <= -> -1
   * 11 Strong Mutation 51: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - DeleteStatement: size()I
   * 12 Strong Mutation 50: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - InsertUnaryOp IINC -1 desiredCapacity
   * 13 Strong Mutation 48: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - InsertUnaryOp Negation of desiredCapacity
   * 14 Strong Mutation 55: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator + -> *
   * 15 Strong Mutation 54: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator + -> /
   * 16 Strong Mutation 53: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator + -> %
   * 17 Strong Mutation 52: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator + -> -
   * 18 Strong Mutation 59: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator / -> +
   * 19 Strong Mutation 58: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator / -> -
   * 20 Strong Mutation 57: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - DeleteField: _loadFactorF
   * 21 Strong Mutation 56: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - InsertUnaryOp Negation
   * 22 Strong Mutation 62: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - DeleteStatement: fastCeil(F)I
   * 23 Strong Mutation 61: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator / -> *
   * 24 Strong Mutation 60: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator / -> %
   * 25 Strong Mutation 68: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - DeleteStatement: max(II)I
   * 26 Strong Mutation 69: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - DeleteStatement: nextPrime(I)I
   * 27 Strong Mutation 70: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - DeleteStatement: rehash(I)V
   * 28 Strong Mutation 64: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator + -> -
   * 29 Strong Mutation 65: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator + -> %
   * 30 gnu.trove.impl.hash.THash.ensureCapacity(I)V: I8 Branch 2 IF_ICMPLE L174 - false
   */

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-109);
      double[] doubleArray0 = new double[4];
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(byteArray0, doubleArray0);
      tByteDoubleHashMap0.ensureCapacity(10);
      assertEquals(31, tByteDoubleHashMap0.capacity());
  }

  //Test case number: 5
  /*
   * 23 covered goals:
   * 1 Strong Mutation 67: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator + -> *
   * 2 Strong Mutation 27: gnu.trove.impl.hash.THash.ensureCapacity(I)V:174 - InsertUnaryOp Negation of desiredCapacity
   * 3 Strong Mutation 41: gnu.trove.impl.hash.THash.ensureCapacity(I)V:174 - ReplaceComparisonOperator <= -> -1
   * 4 Strong Mutation 48: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - InsertUnaryOp Negation of desiredCapacity
   * 5 Strong Mutation 54: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator + -> /
   * 6 Strong Mutation 53: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator + -> %
   * 7 Strong Mutation 59: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator / -> +
   * 8 Strong Mutation 58: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator / -> -
   * 9 Strong Mutation 57: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - DeleteField: _loadFactorF
   * 10 Strong Mutation 56: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - InsertUnaryOp Negation
   * 11 Strong Mutation 63: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceConstant - 1 -> 0
   * 12 Strong Mutation 62: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - DeleteStatement: fastCeil(F)I
   * 13 Strong Mutation 61: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator / -> *
   * 14 Strong Mutation 60: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator / -> %
   * 15 Strong Mutation 68: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - DeleteStatement: max(II)I
   * 16 Strong Mutation 69: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - DeleteStatement: nextPrime(I)I
   * 17 Strong Mutation 70: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - DeleteStatement: rehash(I)V
   * 18 Strong Mutation 64: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator + -> -
   * 19 Strong Mutation 65: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator + -> %
   * 20 Strong Mutation 66: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator + -> /
   * 21 Strong Mutation 63: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceConstant - 1 -> 0
   * 22 Strong Mutation 66: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator + -> /
   * 23 Strong Mutation 67: gnu.trove.impl.hash.THash.ensureCapacity(I)V:175 - ReplaceArithmeticOperator + -> *
   */

  @Test
  public void test5()  throws Throwable  {
      TByteObjectHashMap<Object> tByteObjectHashMap0 = new TByteObjectHashMap<Object>(17, 17);
      tByteObjectHashMap0.ensureCapacity(517);
      assertEquals(37, tByteObjectHashMap0.capacity());
  }

  //Test case number: 6
  /*
   * 24 covered goals:
   * 1 Strong Mutation 91: gnu.trove.impl.hash.THash.compact()V:201 - ReplaceArithmeticOperator + -> -
   * 2 Strong Mutation 84: gnu.trove.impl.hash.THash.compact()V:201 - DeleteField: _loadFactorF
   * 3 Strong Mutation 87: gnu.trove.impl.hash.THash.compact()V:201 - ReplaceArithmeticOperator / -> %
   * 4 Strong Mutation 86: gnu.trove.impl.hash.THash.compact()V:201 - ReplaceArithmeticOperator / -> +
   * 5 Strong Mutation 83: gnu.trove.impl.hash.THash.compact()V:201 - InsertUnaryOp Negation
   * 6 Strong Mutation 82: gnu.trove.impl.hash.THash.compact()V:201 - DeleteStatement: size()I
   * 7 Strong Mutation 92: gnu.trove.impl.hash.THash.compact()V:201 - ReplaceArithmeticOperator + -> %
   * 8 Strong Mutation 95: gnu.trove.impl.hash.THash.compact()V:201 - DeleteStatement: max(II)I
   * 9 Strong Mutation 89: gnu.trove.impl.hash.THash.compact()V:201 - DeleteStatement: fastCeil(F)I
   * 10 Strong Mutation 88: gnu.trove.impl.hash.THash.compact()V:201 - ReplaceArithmeticOperator / -> *
   * 11 Strong Mutation 85: gnu.trove.impl.hash.THash.compact()V:201 - ReplaceArithmeticOperator / -> -
   * 12 Strong Mutation 84: gnu.trove.impl.hash.THash.compact()V:201 - DeleteField: _loadFactorF
   * 13 Strong Mutation 87: gnu.trove.impl.hash.THash.compact()V:201 - ReplaceArithmeticOperator / -> %
   * 14 Strong Mutation 86: gnu.trove.impl.hash.THash.compact()V:201 - ReplaceArithmeticOperator / -> +
   * 15 Strong Mutation 83: gnu.trove.impl.hash.THash.compact()V:201 - InsertUnaryOp Negation
   * 16 Strong Mutation 82: gnu.trove.impl.hash.THash.compact()V:201 - DeleteStatement: size()I
   * 17 Strong Mutation 92: gnu.trove.impl.hash.THash.compact()V:201 - ReplaceArithmeticOperator + -> %
   * 18 Strong Mutation 95: gnu.trove.impl.hash.THash.compact()V:201 - DeleteStatement: max(II)I
   * 19 Strong Mutation 89: gnu.trove.impl.hash.THash.compact()V:201 - DeleteStatement: fastCeil(F)I
   * 20 Strong Mutation 88: gnu.trove.impl.hash.THash.compact()V:201 - ReplaceArithmeticOperator / -> *
   * 21 Strong Mutation 91: gnu.trove.impl.hash.THash.compact()V:201 - ReplaceArithmeticOperator + -> -
   * 22 Strong Mutation 96: gnu.trove.impl.hash.THash.compact()V:201 - DeleteStatement: nextPrime(I)I
   * 23 Strong Mutation 97: gnu.trove.impl.hash.THash.compact()V:201 - DeleteStatement: rehash(I)V
   * 24 gnu.trove.impl.hash.THash.compact()V: I31 Branch 3 IFEQ L206 - false
   */

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)69;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte) (-62);
      byteArray0[8] = (byte)70;
      int[] intArray0 = new int[10];
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(byteArray0, intArray0);
      tByteIntHashMap0.compact();
      assertEquals("{69=0, 13=0, 10=0, -62=0, 76=0, -70=0, -117=0, 70=0, 0=0}", tByteIntHashMap0.toString());
  }

  //Test case number: 7
  /*
   * 15 covered goals:
   * 1 Strong Mutation 98: gnu.trove.impl.hash.THash.compact()V:203 - DeleteStatement: capacity()I
   * 2 gnu.trove.impl.hash.THash.removeAt(I)V: I14 Branch 5 IFEQ L266 - false
   * 3 gnu.trove.impl.hash.THash.removeAt(I)V: I27 Branch 6 IFNE L269 - false
   * 4 gnu.trove.impl.hash.THash.removeAt(I)V: I30 Branch 7 IFGT L269 - false
   * 5 Strong Mutation 1: gnu.trove.impl.hash.THash.<init>(IF)V:131 - InsertUnaryOp Negation of loadFactor
   * 6 Strong Mutation 12: gnu.trove.impl.hash.THash.<init>(IF)V:137 - DeleteStatement: setUp(I)I
   * 7 Strong Mutation 98: gnu.trove.impl.hash.THash.compact()V:203 - DeleteStatement: capacity()I
   * 8 Strong Mutation 127: gnu.trove.impl.hash.THash.removeAt(I)V:263 - InsertUnaryOp +1
   * 9 Strong Mutation 128: gnu.trove.impl.hash.THash.removeAt(I)V:263 - InsertUnaryOp -1
   * 10 Strong Mutation 131: gnu.trove.impl.hash.THash.removeAt(I)V:263 - ReplaceArithmeticOperator - -> +
   * 11 Strong Mutation 130: gnu.trove.impl.hash.THash.removeAt(I)V:263 - ReplaceConstant - 1 -> 0
   * 12 Strong Mutation 133: gnu.trove.impl.hash.THash.removeAt(I)V:263 - ReplaceArithmeticOperator - -> /
   * 13 Strong Mutation 132: gnu.trove.impl.hash.THash.removeAt(I)V:263 - ReplaceArithmeticOperator - -> %
   * 14 Strong Mutation 134: gnu.trove.impl.hash.THash.removeAt(I)V:263 - ReplaceArithmeticOperator - -> *
   * 15 gnu.trove.impl.hash.THash.<init>(I)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(0, (float) (short)0, (-1), (-83.70027F));
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashMap<String, String> tCustomHashMap0 = new TCustomHashMap<String, String>((HashingStrategy<? super String>) identityHashingStrategy0, 0, (-1071.2914F));
      TCustomHashMap<Object, Object> tCustomHashMap1 = new TCustomHashMap<Object, Object>((HashingStrategy<? super Object>) identityHashingStrategy0, (TCustomHashMap<?, ?>) tCustomHashMap0);
      tCustomHashMap1.removeAt(0);
      tCustomHashMap1.put((Object) tIntFloatHashMap0, (Object) tIntFloatHashMap0);
      assertEquals(0, tCustomHashMap1.size());
      assertEquals(3, tCustomHashMap0.capacity());
  }

  //Test case number: 8
  /*
   * 3 covered goals:
   * 1 Strong Mutation 113: gnu.trove.impl.hash.THash.setAutoCompactionFactor(F)V:224 - DeleteStatement: floatSub(FF)I
   * 2 Strong Mutation 116: gnu.trove.impl.hash.THash.setAutoCompactionFactor(F)V:224 - ReplaceComparisonOperator >= -> -1
   * 3 gnu.trove.impl.hash.THash.setAutoCompactionFactor(F)V: I5 Branch 4 IFGE L224 - false
   */

  @Test
  public void test8()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(627);
      // Undeclared exception!
      try {
        tLongShortHashMap0.setAutoCompactionFactor((-1685.8112F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1685.8112
         //
      }
  }

  //Test case number: 9
  /*
   * 6 covered goals:
   * 1 Strong Mutation 122: gnu.trove.impl.hash.THash.setAutoCompactionFactor(F)V:228 - InsertUnaryOp Negation of factor
   * 2 Strong Mutation 110: gnu.trove.impl.hash.THash.setAutoCompactionFactor(F)V:224 - InsertUnaryOp Negation of factor
   * 3 Strong Mutation 114: gnu.trove.impl.hash.THash.setAutoCompactionFactor(F)V:224 - ReplaceComparisonOperator >= -> ==
   * 4 Strong Mutation 114: gnu.trove.impl.hash.THash.setAutoCompactionFactor(F)V:224 - ReplaceComparisonOperator >= -> ==
   * 5 Strong Mutation 122: gnu.trove.impl.hash.THash.setAutoCompactionFactor(F)V:228 - InsertUnaryOp Negation of factor
   * 6 gnu.trove.impl.hash.THash.setAutoCompactionFactor(F)V: I5 Branch 4 IFGE L224 - true
   */

//   @Test
//   public void test9()  throws Throwable  {
//       TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>((-1863), (float) (-1863), 0.0);
//       tDoubleObjectHashMap0.setAutoCompactionFactor(941.44617F);
//       assertEquals(941.44617F, tDoubleObjectHashMap0.getAutoCompactionFactor(), 0.01F);
//       assertEquals(3, tDoubleObjectHashMap0.capacity());
//   }

  //Test case number: 10
  /*
   * 10 covered goals:
   * 1 Strong Mutation 123: gnu.trove.impl.hash.THash.getAutoCompactionFactor()F:238 - InsertUnaryOp Negation
   * 2 Strong Mutation 124: gnu.trove.impl.hash.THash.getAutoCompactionFactor()F:238 - DeleteField: _autoCompactionFactorF
   * 3 Strong Mutation 3: gnu.trove.impl.hash.THash.<init>(IF)V:137 - InsertUnaryOp Negation of initialCapacity
   * 4 Strong Mutation 6: gnu.trove.impl.hash.THash.<init>(IF)V:137 - InsertUnaryOp Negation of loadFactor
   * 5 Strong Mutation 9: gnu.trove.impl.hash.THash.<init>(IF)V:137 - ReplaceArithmeticOperator / -> %
   * 6 Strong Mutation 10: gnu.trove.impl.hash.THash.<init>(IF)V:137 - ReplaceArithmeticOperator / -> *
   * 7 Strong Mutation 11: gnu.trove.impl.hash.THash.<init>(IF)V:137 - DeleteStatement: fastCeil(F)I
   * 8 Strong Mutation 124: gnu.trove.impl.hash.THash.getAutoCompactionFactor()F:238 - DeleteField: _autoCompactionFactorF
   * 9 Strong Mutation 123: gnu.trove.impl.hash.THash.getAutoCompactionFactor()F:238 - InsertUnaryOp Negation
   * 10 gnu.trove.impl.hash.THash.getAutoCompactionFactor()F: root-Branch
   */

//   @Test
//   public void test10()  throws Throwable  {
//       TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>();
//       float float0 = tShortObjectHashMap0.getAutoCompactionFactor();
//       assertEquals(23, tShortObjectHashMap0.capacity());
//       assertEquals(0.5F, float0, 0.01F);
//   }

  //Test case number: 11
  /*
   * 4 covered goals:
   * 1 Strong Mutation 125: gnu.trove.impl.hash.THash.trimToSize()V:252 - DeleteStatement: compact()V
   * 2 Strong Mutation 97: gnu.trove.impl.hash.THash.compact()V:201 - DeleteStatement: rehash(I)V
   * 3 Strong Mutation 125: gnu.trove.impl.hash.THash.trimToSize()V:252 - DeleteStatement: compact()V
   * 4 gnu.trove.impl.hash.THash.trimToSize()V: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>(2, 2, 2);
      long[] longArray0 = new long[3];
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(tIntObjectHashMap0._set, longArray0);
      tIntLongHashMap0.trimToSize();
      assertEquals(3, tIntLongHashMap0.capacity());
      assertEquals(1, tIntLongHashMap0.size());
  }

  //Test case number: 12
  /*
   * 6 covered goals:
   * 1 Strong Mutation 134: gnu.trove.impl.hash.THash.removeAt(I)V:263 - ReplaceArithmeticOperator - -> *
   * 2 Strong Mutation 23: gnu.trove.impl.hash.THash.size()I:157 - InsertUnaryOp Negation
   * 3 Strong Mutation 26: gnu.trove.impl.hash.THash.size()I:157 - DeleteField: _sizeI
   * 4 Strong Mutation 36: gnu.trove.impl.hash.THash.ensureCapacity(I)V:174 - ReplaceArithmeticOperator - -> %
   * 5 Strong Mutation 37: gnu.trove.impl.hash.THash.ensureCapacity(I)V:174 - ReplaceArithmeticOperator - -> /
   * 6 Strong Mutation 132: gnu.trove.impl.hash.THash.removeAt(I)V:263 - ReplaceArithmeticOperator - -> %
   */

  @Test
  public void test12()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashMap<String, String> tCustomHashMap0 = new TCustomHashMap<String, String>((HashingStrategy<? super String>) identityHashingStrategy0, 0, (-1071.2914F));
      TCustomHashMap<Object, Object> tCustomHashMap1 = new TCustomHashMap<Object, Object>((HashingStrategy<? super Object>) identityHashingStrategy0, (TCustomHashMap<?, ?>) tCustomHashMap0);
      tCustomHashMap1.removeAt(0);
      assertEquals(false, tCustomHashMap1.isEmpty());
      assertEquals(-1, tCustomHashMap1.size());
  }

  //Test case number: 13
  /*
   * 3 covered goals:
   * 1 Strong Mutation 163: gnu.trove.impl.hash.THash.clear()V:280 - ReplaceConstant - 0 -> 1
   * 2 gnu.trove.impl.hash.THash.clear()V: root-Branch
   * 3 Strong Mutation 163: gnu.trove.impl.hash.THash.clear()V:280 - ReplaceConstant - 0 -> 1
   */

//   @Test
//   public void test13()  throws Throwable  {
//       TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
//       tShortDoubleHashMap0.clear();
//       assertEquals(0, tShortDoubleHashMap0.size());
//       assertEquals(23, tShortDoubleHashMap0.capacity());
//       assertEquals(0.5F, tShortDoubleHashMap0.getAutoCompactionFactor(), 0.01F);
//   }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 Strong Mutation 166: gnu.trove.impl.hash.THash.setUp(I)I:295 - InsertUnaryOp IINC 1 initialCapacity
   */

  @Test
  public void test14()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(10, 0.0F, 0, (double) 10);
      TIntDoubleHashMap tIntDoubleHashMap1 = null;
      try {
        tIntDoubleHashMap1 = new TIntDoubleHashMap((TIntDoubleMap) tIntDoubleHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  //Test case number: 15
  /*
   * 25 covered goals:
   * 1 Strong Mutation 212: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - InsertUnaryOp IINC 1 capacity
   * 2 Strong Mutation 204: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - InsertUnaryOp IINC 1 capacity
   * 3 Strong Mutation 204: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - InsertUnaryOp IINC 1 capacity
   * 4 Strong Mutation 216: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - ReplaceArithmeticOperator * -> -
   * 5 Strong Mutation 217: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - ReplaceArithmeticOperator * -> +
   * 6 Strong Mutation 219: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - ReplaceArithmeticOperator * -> /
   * 7 Strong Mutation 212: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - InsertUnaryOp IINC 1 capacity
   * 8 Strong Mutation 281: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - InsertUnaryOp +1
   * 9 Strong Mutation 286: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - ReplaceComparisonOperator > -> -2
   * 10 Strong Mutation 305: gnu.trove.impl.hash.THash.postInsertHook(Z)V:387 - DeleteStatement: capacity()I
   * 11 Strong Mutation 304: gnu.trove.impl.hash.THash.postInsertHook(Z)V:387 - ReplaceComparisonOperator <= -> -1
   * 12 Strong Mutation 307: gnu.trove.impl.hash.THash.postInsertHook(Z)V:387 - ReplaceBitwiseOperator << -> >>>
   * 13 Strong Mutation 306: gnu.trove.impl.hash.THash.postInsertHook(Z)V:387 - ReplaceConstant - 1 -> 0
   * 14 Strong Mutation 309: gnu.trove.impl.hash.THash.postInsertHook(Z)V:387 - DeleteStatement: nextPrime(I)I
   * 15 Strong Mutation 308: gnu.trove.impl.hash.THash.postInsertHook(Z)V:387 - ReplaceBitwiseOperator << -> >>
   * 16 Strong Mutation 311: gnu.trove.impl.hash.THash.postInsertHook(Z)V:388 - InsertUnaryOp Negation of newCapacity
   * 17 Strong Mutation 313: gnu.trove.impl.hash.THash.postInsertHook(Z)V:388 - InsertUnaryOp IINC -1 newCapacity
   * 18 Strong Mutation 312: gnu.trove.impl.hash.THash.postInsertHook(Z)V:388 - InsertUnaryOp IINC 1 newCapacity
   * 19 Strong Mutation 314: gnu.trove.impl.hash.THash.postInsertHook(Z)V:388 - DeleteStatement: rehash(I)V
   * 20 Strong Mutation 294: gnu.trove.impl.hash.THash.postInsertHook(Z)V:387 - InsertUnaryOp Negation
   * 21 Strong Mutation 296: gnu.trove.impl.hash.THash.postInsertHook(Z)V:387 - InsertUnaryOp -1
   * 22 Strong Mutation 297: gnu.trove.impl.hash.THash.postInsertHook(Z)V:387 - DeleteField: _sizeI
   * 23 Strong Mutation 299: gnu.trove.impl.hash.THash.postInsertHook(Z)V:387 - InsertUnaryOp +1
   * 24 gnu.trove.impl.hash.THash.postInsertHook(Z)V: I23 Branch 13 IF_ICMPGT L382 - true
   * 25 gnu.trove.impl.hash.THash.postInsertHook(Z)V: I33 Branch 15 IF_ICMPLE L387 - false
   */

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      float[] floatArray0 = new float[1];
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      tDoubleFloatHashMap0.put(Double.POSITIVE_INFINITY, Float.POSITIVE_INFINITY);
      assertEquals("{Infinity=Infinity, 0.0=0.0}", tDoubleFloatHashMap0.toString());
      assertEquals(2, tDoubleFloatHashMap0.size());
  }

  //Test case number: 16
  /*
   * 21 covered goals:
   * 1 Strong Mutation 240: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:364 - InsertUnaryOp Negation of size
   * 2 Strong Mutation 5: gnu.trove.impl.hash.THash.<init>(IF)V:137 - InsertUnaryOp IINC -1 initialCapacity
   * 3 Strong Mutation 187: gnu.trove.impl.hash.THash.reenableAutoCompaction(Z)V:331 - InsertUnaryOp Negation
   * 4 Strong Mutation 190: gnu.trove.impl.hash.THash.reenableAutoCompaction(Z)V:331 - DeleteField: _autoCompactRemovesRemainingI
   * 5 Strong Mutation 193: gnu.trove.impl.hash.THash.reenableAutoCompaction(Z)V:331 - ReplaceComparisonOperator > -> -2
   * 6 Strong Mutation 5: gnu.trove.impl.hash.THash.<init>(IF)V:137 - InsertUnaryOp IINC -1 initialCapacity
   * 7 Strong Mutation 175: gnu.trove.impl.hash.THash.setUp(I)I:297 - InsertUnaryOp Negation of initialCapacity
   * 8 Strong Mutation 187: gnu.trove.impl.hash.THash.reenableAutoCompaction(Z)V:331 - InsertUnaryOp Negation
   * 9 Strong Mutation 190: gnu.trove.impl.hash.THash.reenableAutoCompaction(Z)V:331 - DeleteField: _autoCompactRemovesRemainingI
   * 10 Strong Mutation 178: gnu.trove.impl.hash.THash.setUp(I)I:297 - DeleteStatement: computeNextAutoCompactionAmount(I)V
   * 11 Strong Mutation 193: gnu.trove.impl.hash.THash.reenableAutoCompaction(Z)V:331 - ReplaceComparisonOperator > -> -2
   * 12 Strong Mutation 237: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:361 - ReplaceComparisonOperator == -> >=
   * 13 Strong Mutation 236: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:361 - DeleteStatement: floatSub(FF)I
   * 14 Strong Mutation 233: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:361 - DeleteField: _autoCompactionFactorF
   * 15 Strong Mutation 255: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:364 - ReplaceArithmeticOperator + -> %
   * 16 Strong Mutation 247: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:364 - ReplaceArithmeticOperator * -> %
   * 17 Strong Mutation 244: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:364 - DeleteField: _autoCompactionFactorF
   * 18 Strong Mutation 243: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:364 - InsertUnaryOp Negation
   * 19 Strong Mutation 240: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:364 - InsertUnaryOp Negation of size
   * 20 gnu.trove.impl.hash.THash.reenableAutoCompaction(Z)V: I8 Branch 8 IFEQ L331 - false
   * 21 gnu.trove.impl.hash.THash.reenableAutoCompaction(Z)V: I11 Branch 9 IFGT L331 - true
   */

  @Test
  public void test16()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashSet<Object> tCustomHashSet0 = new TCustomHashSet<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, 99);
      tCustomHashSet0.reenableAutoCompaction(true);
      assertEquals(277, tCustomHashSet0.capacity());
  }

  //Test case number: 17
  /*
   * 45 covered goals:
   * 1 Strong Mutation 257: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:364 - ReplaceArithmeticOperator + -> *
   * 2 Strong Mutation 127: gnu.trove.impl.hash.THash.removeAt(I)V:263 - InsertUnaryOp +1
   * 3 Strong Mutation 126: gnu.trove.impl.hash.THash.removeAt(I)V:263 - InsertUnaryOp Negation
   * 4 Strong Mutation 143: gnu.trove.impl.hash.THash.removeAt(I)V:267 - InsertUnaryOp Negation
   * 5 Strong Mutation 129: gnu.trove.impl.hash.THash.removeAt(I)V:263 - DeleteField: _sizeI
   * 6 Strong Mutation 128: gnu.trove.impl.hash.THash.removeAt(I)V:263 - InsertUnaryOp -1
   * 7 Strong Mutation 131: gnu.trove.impl.hash.THash.removeAt(I)V:263 - ReplaceArithmeticOperator - -> +
   * 8 Strong Mutation 130: gnu.trove.impl.hash.THash.removeAt(I)V:263 - ReplaceConstant - 1 -> 0
   * 9 Strong Mutation 133: gnu.trove.impl.hash.THash.removeAt(I)V:263 - ReplaceArithmeticOperator - -> /
   * 10 Strong Mutation 134: gnu.trove.impl.hash.THash.removeAt(I)V:263 - ReplaceArithmeticOperator - -> *
   * 11 Strong Mutation 155: gnu.trove.impl.hash.THash.removeAt(I)V:269 - InsertUnaryOp Negation
   * 12 Strong Mutation 157: gnu.trove.impl.hash.THash.removeAt(I)V:269 - InsertUnaryOp -1
   * 13 Strong Mutation 158: gnu.trove.impl.hash.THash.removeAt(I)V:269 - DeleteField: _autoCompactRemovesRemainingI
   * 14 Strong Mutation 145: gnu.trove.impl.hash.THash.removeAt(I)V:267 - InsertUnaryOp -1
   * 15 Strong Mutation 146: gnu.trove.impl.hash.THash.removeAt(I)V:267 - DeleteField: _autoCompactRemovesRemainingI
   * 16 Strong Mutation 149: gnu.trove.impl.hash.THash.removeAt(I)V:267 - ReplaceArithmeticOperator - -> %
   * 17 Strong Mutation 175: gnu.trove.impl.hash.THash.setUp(I)I:297 - InsertUnaryOp Negation of initialCapacity
   * 18 Strong Mutation 161: gnu.trove.impl.hash.THash.removeAt(I)V:269 - ReplaceComparisonOperator > -> -2
   * 19 Strong Mutation 178: gnu.trove.impl.hash.THash.setUp(I)I:297 - DeleteStatement: computeNextAutoCompactionAmount(I)V
   * 20 Strong Mutation 237: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:361 - ReplaceComparisonOperator == -> >=
   * 21 Strong Mutation 236: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:361 - DeleteStatement: floatSub(FF)I
   * 22 Strong Mutation 233: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:361 - DeleteField: _autoCompactionFactorF
   * 23 Strong Mutation 254: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:364 - ReplaceArithmeticOperator + -> -
   * 24 Strong Mutation 255: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:364 - ReplaceArithmeticOperator + -> %
   * 25 Strong Mutation 252: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:364 - ReplaceConstant - 0.5 -> -0.5
   * 26 Strong Mutation 251: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:364 - ReplaceConstant - 0.5 -> -1.0
   * 27 Strong Mutation 247: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:364 - ReplaceArithmeticOperator * -> %
   * 28 Strong Mutation 244: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:364 - DeleteField: _autoCompactionFactorF
   * 29 Strong Mutation 243: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:364 - InsertUnaryOp Negation
   * 30 Strong Mutation 240: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:364 - InsertUnaryOp Negation of size
   * 31 Strong Mutation 126: gnu.trove.impl.hash.THash.removeAt(I)V:263 - InsertUnaryOp Negation
   * 32 Strong Mutation 143: gnu.trove.impl.hash.THash.removeAt(I)V:267 - InsertUnaryOp Negation
   * 33 Strong Mutation 129: gnu.trove.impl.hash.THash.removeAt(I)V:263 - DeleteField: _sizeI
   * 34 Strong Mutation 155: gnu.trove.impl.hash.THash.removeAt(I)V:269 - InsertUnaryOp Negation
   * 35 Strong Mutation 157: gnu.trove.impl.hash.THash.removeAt(I)V:269 - InsertUnaryOp -1
   * 36 Strong Mutation 158: gnu.trove.impl.hash.THash.removeAt(I)V:269 - DeleteField: _autoCompactRemovesRemainingI
   * 37 Strong Mutation 145: gnu.trove.impl.hash.THash.removeAt(I)V:267 - InsertUnaryOp -1
   * 38 Strong Mutation 146: gnu.trove.impl.hash.THash.removeAt(I)V:267 - DeleteField: _autoCompactRemovesRemainingI
   * 39 Strong Mutation 149: gnu.trove.impl.hash.THash.removeAt(I)V:267 - ReplaceArithmeticOperator - -> %
   * 40 Strong Mutation 161: gnu.trove.impl.hash.THash.removeAt(I)V:269 - ReplaceComparisonOperator > -> -2
   * 41 Strong Mutation 254: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:364 - ReplaceArithmeticOperator + -> -
   * 42 Strong Mutation 252: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:364 - ReplaceConstant - 0.5 -> -0.5
   * 43 Strong Mutation 251: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:364 - ReplaceConstant - 0.5 -> -1.0
   * 44 Strong Mutation 257: gnu.trove.impl.hash.THash.computeNextAutoCompactionAmount(I)V:364 - ReplaceArithmeticOperator + -> *
   * 45 gnu.trove.impl.hash.THash.removeAt(I)V: I30 Branch 7 IFGT L269 - true
   */

  @Test
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[2];
      float[] floatArray0 = new float[1];
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      tIntFloatHashMap0.remove(0);
      assertEquals(0, tIntFloatHashMap0.size());
      assertEquals(true, tIntFloatHashMap0.isEmpty());
  }

  //Test case number: 18
  /*
   * 3 covered goals:
   * 1 Strong Mutation 276: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - ReplaceArithmeticOperator + -> -
   * 2 Strong Mutation 169: gnu.trove.impl.hash.THash.setUp(I)I:296 - ReplaceVariable capacity -> initialCapacity
   * 3 Strong Mutation 169: gnu.trove.impl.hash.THash.setUp(I)I:296 - ReplaceVariable capacity -> initialCapacity
   */

  @Test
  public void test18()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectShortCustomHashMap<Integer> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, Integer.MAX_VALUE);
      tObjectShortCustomHashMap0.put((Integer) Integer.MAX_VALUE, (short) (-548));
      assertEquals(1, tObjectShortCustomHashMap0.size());
      assertEquals(3, tObjectShortCustomHashMap0.capacity());
  }

  //Test case number: 19
  /*
   * 5 covered goals:
   * 1 Strong Mutation 284: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - ReplaceComparisonOperator > -> >=
   * 2 Strong Mutation 282: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - InsertUnaryOp -1
   * 3 Strong Mutation 282: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - InsertUnaryOp -1
   * 4 Strong Mutation 285: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - ReplaceComparisonOperator > -> !=
   * 5 Strong Mutation 284: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - ReplaceComparisonOperator > -> >=
   */

//   @Test
//   public void test19()  throws Throwable  {
//       short[] shortArray0 = new short[5];
//       shortArray0[0] = (short) (-1263);
//       shortArray0[1] = (short) (-128);
//       shortArray0[3] = (short)935;
//       shortArray0[4] = (short)1086;
//       long[] longArray0 = new long[5];
//       TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
//       assertEquals(0.5F, tShortLongHashMap0.getAutoCompactionFactor(), 0.01F);
//       assertEquals("{1086=0, -128=0, -1263=0, 935=0, 0=0}", tShortLongHashMap0.toString());
//       assertEquals(5, tShortLongHashMap0.size());
//   }

  //Test case number: 20
  /*
   * 12 covered goals:
   * 1 Strong Mutation 291: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - ReplaceComparisonOperator != -> <
   * 2 Strong Mutation 274: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - DeleteField: _sizeI
   * 3 Strong Mutation 283: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - DeleteField: _maxSizeI
   * 4 Strong Mutation 285: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - ReplaceComparisonOperator > -> !=
   * 5 Strong Mutation 271: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - InsertUnaryOp Negation
   * 6 Strong Mutation 268: gnu.trove.impl.hash.THash.postInsertHook(Z)V:378 - ReplaceArithmeticOperator - -> %
   * 7 Strong Mutation 290: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - DeleteField: _freeI
   * 8 Strong Mutation 283: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - DeleteField: _maxSizeI
   * 9 Strong Mutation 280: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - InsertUnaryOp Negation
   * 10 Strong Mutation 268: gnu.trove.impl.hash.THash.postInsertHook(Z)V:378 - ReplaceArithmeticOperator - -> %
   * 11 Strong Mutation 290: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - DeleteField: _freeI
   * 12 Strong Mutation 291: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - ReplaceComparisonOperator != -> <
   */

//   @Test
//   public void test20()  throws Throwable  {
//       byte[] byteArray0 = new byte[9];
//       byteArray0[2] = (byte)69;
//       byteArray0[4] = (byte) (-117);
//       byteArray0[5] = (byte)76;
//       byteArray0[6] = (byte) (-70);
//       byteArray0[7] = (byte) (-62);
//       int[] intArray0 = new int[10];
//       TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(byteArray0, intArray0);
//       assertEquals("{69=0, -62=0, 76=0, -70=0, -117=0, 0=0}", tByteIntHashMap0.toString());
//       assertEquals(0.5F, tByteIntHashMap0.getAutoCompactionFactor(), 0.01F);
//       assertEquals(6, tByteIntHashMap0.size());
//   }

  //Test case number: 21
  /*
   * 7 covered goals:
   * 1 Strong Mutation 299: gnu.trove.impl.hash.THash.postInsertHook(Z)V:387 - InsertUnaryOp +1
   * 2 Strong Mutation 217: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - ReplaceArithmeticOperator * -> +
   * 3 Strong Mutation 219: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - ReplaceArithmeticOperator * -> /
   * 4 Strong Mutation 281: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - InsertUnaryOp +1
   * 5 Strong Mutation 294: gnu.trove.impl.hash.THash.postInsertHook(Z)V:387 - InsertUnaryOp Negation
   * 6 Strong Mutation 296: gnu.trove.impl.hash.THash.postInsertHook(Z)V:387 - InsertUnaryOp -1
   * 7 Strong Mutation 297: gnu.trove.impl.hash.THash.postInsertHook(Z)V:387 - DeleteField: _sizeI
   */

  @Test
  public void test21()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap((int) 'M', 0.0F);
      tFloatFloatHashMap0.put(2017.0665F, 0.0F);
      assertEquals("{2017.0665=0.0}", tFloatFloatHashMap0.toString());
      assertEquals(7, tFloatFloatHashMap0.capacity());
  }

  //Test case number: 22
  /*
   * 15 covered goals:
   * 1 Strong Mutation 314: gnu.trove.impl.hash.THash.postInsertHook(Z)V:388 - DeleteStatement: rehash(I)V
   * 2 Strong Mutation 216: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - ReplaceArithmeticOperator * -> -
   * 3 Strong Mutation 280: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - InsertUnaryOp Negation
   * 4 Strong Mutation 286: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - ReplaceComparisonOperator > -> -2
   * 5 Strong Mutation 305: gnu.trove.impl.hash.THash.postInsertHook(Z)V:387 - DeleteStatement: capacity()I
   * 6 Strong Mutation 304: gnu.trove.impl.hash.THash.postInsertHook(Z)V:387 - ReplaceComparisonOperator <= -> -1
   * 7 Strong Mutation 307: gnu.trove.impl.hash.THash.postInsertHook(Z)V:387 - ReplaceBitwiseOperator << -> >>>
   * 8 Strong Mutation 306: gnu.trove.impl.hash.THash.postInsertHook(Z)V:387 - ReplaceConstant - 1 -> 0
   * 9 Strong Mutation 309: gnu.trove.impl.hash.THash.postInsertHook(Z)V:387 - DeleteStatement: nextPrime(I)I
   * 10 Strong Mutation 308: gnu.trove.impl.hash.THash.postInsertHook(Z)V:387 - ReplaceBitwiseOperator << -> >>
   * 11 Strong Mutation 311: gnu.trove.impl.hash.THash.postInsertHook(Z)V:388 - InsertUnaryOp Negation of newCapacity
   * 12 Strong Mutation 313: gnu.trove.impl.hash.THash.postInsertHook(Z)V:388 - InsertUnaryOp IINC -1 newCapacity
   * 13 Strong Mutation 312: gnu.trove.impl.hash.THash.postInsertHook(Z)V:388 - InsertUnaryOp IINC 1 newCapacity
   * 14 Strong Mutation 298: gnu.trove.impl.hash.THash.postInsertHook(Z)V:387 - InsertUnaryOp Negation
   * 15 Strong Mutation 298: gnu.trove.impl.hash.THash.postInsertHook(Z)V:387 - InsertUnaryOp Negation
   */

  @Test
  public void test22()  throws Throwable  {
      TShortHashSet tShortHashSet0 = new TShortHashSet((-2027), (-972.8296F));
      boolean boolean0 = tShortHashSet0.addAll(tShortHashSet0._set);
      assertEquals(1, tShortHashSet0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 23
  /*
   * 23 covered goals:
   * 1 Strong Mutation 328: gnu.trove.impl.hash.THash.writeExternal(Ljava/io/ObjectOutput;)V:407 - DeleteStatement: writeFloat(F)V
   * 2 Strong Mutation 1: gnu.trove.impl.hash.THash.<init>(IF)V:131 - InsertUnaryOp Negation of loadFactor
   * 3 Strong Mutation 7: gnu.trove.impl.hash.THash.<init>(IF)V:137 - ReplaceArithmeticOperator / -> -
   * 4 Strong Mutation 8: gnu.trove.impl.hash.THash.<init>(IF)V:137 - ReplaceArithmeticOperator / -> +
   * 5 Strong Mutation 9: gnu.trove.impl.hash.THash.<init>(IF)V:137 - ReplaceArithmeticOperator / -> %
   * 6 Strong Mutation 10: gnu.trove.impl.hash.THash.<init>(IF)V:137 - ReplaceArithmeticOperator / -> *
   * 7 Strong Mutation 11: gnu.trove.impl.hash.THash.<init>(IF)V:137 - DeleteStatement: fastCeil(F)I
   * 8 Strong Mutation 326: gnu.trove.impl.hash.THash.writeExternal(Ljava/io/ObjectOutput;)V:407 - InsertUnaryOp Negation
   * 9 Strong Mutation 327: gnu.trove.impl.hash.THash.writeExternal(Ljava/io/ObjectOutput;)V:407 - DeleteField: _autoCompactionFactorF
   * 10 Strong Mutation 324: gnu.trove.impl.hash.THash.writeExternal(Ljava/io/ObjectOutput;)V:404 - DeleteField: _loadFactorF
   * 11 Strong Mutation 325: gnu.trove.impl.hash.THash.writeExternal(Ljava/io/ObjectOutput;)V:404 - DeleteStatement: writeFloat(F)V
   * 12 Strong Mutation 322: gnu.trove.impl.hash.THash.writeExternal(Ljava/io/ObjectOutput;)V:401 - DeleteStatement: writeByte(I)V
   * 13 Strong Mutation 323: gnu.trove.impl.hash.THash.writeExternal(Ljava/io/ObjectOutput;)V:404 - InsertUnaryOp Negation
   * 14 Strong Mutation 321: gnu.trove.impl.hash.THash.writeExternal(Ljava/io/ObjectOutput;)V:401 - ReplaceConstant - 0 -> 1
   * 15 Strong Mutation 326: gnu.trove.impl.hash.THash.writeExternal(Ljava/io/ObjectOutput;)V:407 - InsertUnaryOp Negation
   * 16 Strong Mutation 327: gnu.trove.impl.hash.THash.writeExternal(Ljava/io/ObjectOutput;)V:407 - DeleteField: _autoCompactionFactorF
   * 17 Strong Mutation 324: gnu.trove.impl.hash.THash.writeExternal(Ljava/io/ObjectOutput;)V:404 - DeleteField: _loadFactorF
   * 18 Strong Mutation 325: gnu.trove.impl.hash.THash.writeExternal(Ljava/io/ObjectOutput;)V:404 - DeleteStatement: writeFloat(F)V
   * 19 Strong Mutation 322: gnu.trove.impl.hash.THash.writeExternal(Ljava/io/ObjectOutput;)V:401 - DeleteStatement: writeByte(I)V
   * 20 Strong Mutation 323: gnu.trove.impl.hash.THash.writeExternal(Ljava/io/ObjectOutput;)V:404 - InsertUnaryOp Negation
   * 21 Strong Mutation 321: gnu.trove.impl.hash.THash.writeExternal(Ljava/io/ObjectOutput;)V:401 - ReplaceConstant - 0 -> 1
   * 22 Strong Mutation 328: gnu.trove.impl.hash.THash.writeExternal(Ljava/io/ObjectOutput;)V:407 - DeleteStatement: writeFloat(F)V
   * 23 gnu.trove.impl.hash.THash.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(10);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(159);
      PrintStream printStream0 = new PrintStream((OutputStream) byteArrayOutputStream0);
      tObjectDoubleHashMap0.adjustOrPutValue((Integer) 23, 835.8254806423304, 777.520448734129);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      tObjectDoubleHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(1, tObjectDoubleHashMap0.size());
      assertEquals(23, tObjectDoubleHashMap0.capacity());
  }

  //Test case number: 24
  /*
   * 18 covered goals:
   * 1 gnu.trove.impl.hash.THash.tempDisableAutoCompaction()V: root-Branch
   * 2 Strong Mutation 170: gnu.trove.impl.hash.THash.setUp(I)I:296 - InsertUnaryOp Negation of capacity
   * 3 Strong Mutation 173: gnu.trove.impl.hash.THash.setUp(I)I:296 - DeleteStatement: computeMaxSize(I)V
   * 4 Strong Mutation 167: gnu.trove.impl.hash.THash.setUp(I)I:295 - InsertUnaryOp IINC -1 initialCapacity
   * 5 Strong Mutation 203: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - InsertUnaryOp Negation of capacity
   * 6 Strong Mutation 220: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - DeleteStatement: min(II)I
   * 7 Strong Mutation 218: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - ReplaceArithmeticOperator * -> %
   * 8 Strong Mutation 214: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - InsertUnaryOp Negation
   * 9 Strong Mutation 215: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - DeleteField: _loadFactorF
   * 10 Strong Mutation 208: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - ReplaceArithmeticOperator - -> %
   * 11 Strong Mutation 211: gnu.trove.impl.hash.THash.computeMaxSize(I)V:349 - InsertUnaryOp Negation of capacity
   * 12 Strong Mutation 275: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - ReplaceConstant - 1 -> 0
   * 13 Strong Mutation 273: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - InsertUnaryOp -1
   * 14 Strong Mutation 272: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - InsertUnaryOp +1
   * 15 Strong Mutation 279: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - ReplaceArithmeticOperator + -> *
   * 16 Strong Mutation 278: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - ReplaceArithmeticOperator + -> /
   * 17 Strong Mutation 277: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - ReplaceArithmeticOperator + -> %
   * 18 Strong Mutation 276: gnu.trove.impl.hash.THash.postInsertHook(Z)V:382 - ReplaceArithmeticOperator + -> -
   */

//   @Test
//   public void test24()  throws Throwable  {
//       TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap((-616));
//       float[] floatArray0 = new float[3];
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, tShortCharHashMap0._set);
//       tFloatShortHashMap0.tempDisableAutoCompaction();
//       assertEquals(0.5F, tShortCharHashMap0.getAutoCompactionFactor(), 0.01F);
//       assertEquals(7, tFloatShortHashMap0.capacity());
//       assertEquals(1, tFloatShortHashMap0.size());
//   }

  //Test case number: 25
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.THash.compact()V: I31 Branch 3 IFEQ L206 - true
   * 2 Strong Mutation 12: gnu.trove.impl.hash.THash.<init>(IF)V:137 - DeleteStatement: setUp(I)I
   */

//   @Test
//   public void test25()  throws Throwable  {
//       TObjectByteHashMap<Object> tObjectByteHashMap0 = new TObjectByteHashMap<Object>(0, (float) 0, (byte) (-25));
//       tObjectByteHashMap0.trimToSize();
//       assertEquals(3, tObjectByteHashMap0.capacity());
//       assertEquals(0, tObjectByteHashMap0.size());
//       assertEquals(0.0F, tObjectByteHashMap0.getAutoCompactionFactor(), 0.01F);
//   }

  //Test case number: 26
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.THash.reenableAutoCompaction(Z)V: I8 Branch 8 IFEQ L331 - true
   * 2 Strong Mutation 3: gnu.trove.impl.hash.THash.<init>(IF)V:137 - InsertUnaryOp Negation of initialCapacity
   * 3 Strong Mutation 6: gnu.trove.impl.hash.THash.<init>(IF)V:137 - InsertUnaryOp Negation of loadFactor
   * 4 Strong Mutation 165: gnu.trove.impl.hash.THash.setUp(I)I:295 - InsertUnaryOp Negation of initialCapacity
   */

//   @Test
//   public void test26()  throws Throwable  {
//       IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
//       TObjectIntCustomHashMap<Integer> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, (-520));
//       tObjectIntCustomHashMap0.reenableAutoCompaction(false);
//       assertEquals(3, tObjectIntCustomHashMap0.capacity());
//       assertEquals(0.5F, tObjectIntCustomHashMap0.getAutoCompactionFactor(), 0.01F);
//   }

  //Test case number: 27
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.THash.reenableAutoCompaction(Z)V: I11 Branch 9 IFGT L331 - false
   * 2 gnu.trove.impl.hash.THash.reenableAutoCompaction(Z)V: I16 Branch 10 IFEQ L331 - false
   * 3 Strong Mutation 25: gnu.trove.impl.hash.THash.size()I:157 - InsertUnaryOp -1
   * 4 Strong Mutation 24: gnu.trove.impl.hash.THash.size()I:157 - InsertUnaryOp +1
   * 5 Strong Mutation 85: gnu.trove.impl.hash.THash.compact()V:201 - ReplaceArithmeticOperator / -> -
   * 6 Strong Mutation 96: gnu.trove.impl.hash.THash.compact()V:201 - DeleteStatement: nextPrime(I)I
   */

//   @Test
//   public void test27()  throws Throwable  {
//       TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(0, (-1082.2559F));
//       tByteDoubleHashMap0.reenableAutoCompaction(true);
//       assertEquals(3, tByteDoubleHashMap0.capacity());
//       assertEquals(0, tByteDoubleHashMap0.size());
//       assertEquals(0.5F, tByteDoubleHashMap0.getAutoCompactionFactor(), 0.01F);
//   }

  //Test case number: 28
  /*
   * 16 covered goals:
   * 1 gnu.trove.impl.hash.THash.reenableAutoCompaction(Z)V: I16 Branch 10 IFEQ L331 - true
   * 2 Strong Mutation 2: gnu.trove.impl.hash.THash.<init>(IF)V:135 - InsertUnaryOp Negation of loadFactor
   * 3 Strong Mutation 111: gnu.trove.impl.hash.THash.setAutoCompactionFactor(F)V:224 - ReplaceConstant - 0.0 -> 1.0
   * 4 Strong Mutation 115: gnu.trove.impl.hash.THash.setAutoCompactionFactor(F)V:224 - ReplaceComparisonOperator >= -> >
   * 5 Strong Mutation 122: gnu.trove.impl.hash.THash.setAutoCompactionFactor(F)V:228 - InsertUnaryOp Negation of factor
   * 6 Strong Mutation 171: gnu.trove.impl.hash.THash.setUp(I)I:296 - InsertUnaryOp IINC 1 capacity
   * 7 Strong Mutation 168: gnu.trove.impl.hash.THash.setUp(I)I:295 - DeleteStatement: nextPrime(I)I
   * 8 Strong Mutation 172: gnu.trove.impl.hash.THash.setUp(I)I:296 - InsertUnaryOp IINC -1 capacity
   * 9 Strong Mutation 179: gnu.trove.impl.hash.THash.setUp(I)I:299 - ReplaceVariable capacity -> initialCapacity
   * 10 Strong Mutation 182: gnu.trove.impl.hash.THash.setUp(I)I:299 - InsertUnaryOp IINC -1 capacity
   * 11 Strong Mutation 180: gnu.trove.impl.hash.THash.setUp(I)I:299 - InsertUnaryOp Negation of capacity
   * 12 Strong Mutation 181: gnu.trove.impl.hash.THash.setUp(I)I:299 - InsertUnaryOp IINC 1 capacity
   * 13 Strong Mutation 230: gnu.trove.impl.hash.THash.computeMaxSize(I)V:350 - ReplaceArithmeticOperator - -> /
   * 14 Strong Mutation 229: gnu.trove.impl.hash.THash.computeMaxSize(I)V:350 - ReplaceArithmeticOperator - -> %
   * 15 Strong Mutation 111: gnu.trove.impl.hash.THash.setAutoCompactionFactor(F)V:224 - ReplaceConstant - 0.0 -> 1.0
   * 16 Strong Mutation 115: gnu.trove.impl.hash.THash.setAutoCompactionFactor(F)V:224 - ReplaceComparisonOperator >= -> >
   */

//   @Test
//   public void test28()  throws Throwable  {
//       TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(0, (-1082.2559F));
//       tByteDoubleHashMap0.setAutoCompactionFactor((float) 0);
//       tByteDoubleHashMap0.reenableAutoCompaction(true);
//       assertEquals(0.0F, tByteDoubleHashMap0.getAutoCompactionFactor(), 0.01F);
//       assertEquals(3, tByteDoubleHashMap0.capacity());
//   }
}
