/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.HashFunctions;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class HashFunctionsEvoSuite_StrongMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 28 covered goals:
   * 1 Strong Mutation 16: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceBitwiseOperator >>> -> >>
   * 2 Strong Mutation 0: gnu.trove.impl.HashFunctions.hash(D)I:26 - InsertUnaryOp Negation
   * 3 Strong Mutation 2: gnu.trove.impl.HashFunctions.hash(D)I:26 - ReplaceComparisonOperator != -> ==
   * 4 Strong Mutation 3: gnu.trove.impl.HashFunctions.hash(D)I:26 - InsertUnaryOp Negation of value
   * 5 Strong Mutation 4: gnu.trove.impl.HashFunctions.hash(D)I:26 - DeleteStatement: isNaN(D)Z
   * 6 Strong Mutation 5: gnu.trove.impl.HashFunctions.hash(D)I:26 - ReplaceComparisonOperator == -> !=
   * 7 Strong Mutation 0: gnu.trove.impl.HashFunctions.hash(D)I:26 - InsertUnaryOp Negation
   * 8 Strong Mutation 2: gnu.trove.impl.HashFunctions.hash(D)I:26 - ReplaceComparisonOperator != -> ==
   * 9 Strong Mutation 3: gnu.trove.impl.HashFunctions.hash(D)I:26 - InsertUnaryOp Negation of value
   * 10 Strong Mutation 4: gnu.trove.impl.HashFunctions.hash(D)I:26 - DeleteStatement: isNaN(D)Z
   * 11 Strong Mutation 5: gnu.trove.impl.HashFunctions.hash(D)I:26 - ReplaceComparisonOperator == -> !=
   * 12 Strong Mutation 7: gnu.trove.impl.HashFunctions.hash(D)I:28 - InsertUnaryOp Negation of value
   * 13 Strong Mutation 8: gnu.trove.impl.HashFunctions.hash(D)I:28 - DeleteStatement: doubleToLongBits(D)J
   * 14 Strong Mutation 9: gnu.trove.impl.HashFunctions.hash(D)I:29 - InsertUnaryOp Negation of bits
   * 15 Strong Mutation 10: gnu.trove.impl.HashFunctions.hash(D)I:29 - InsertUnaryOp Negation of bits
   * 16 Strong Mutation 11: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceConstant - 32 -> 0
   * 17 Strong Mutation 12: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceConstant - 32 -> 1
   * 18 Strong Mutation 13: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceConstant - 32 -> -1
   * 19 Strong Mutation 14: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceConstant - 32 -> 31
   * 20 Strong Mutation 15: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceConstant - 32 -> 33
   * 21 Strong Mutation 17: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceBitwiseOperator >>> -> <<
   * 22 Strong Mutation 16: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceBitwiseOperator >>> -> >>
   * 23 Strong Mutation 18: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceBitwiseOperator ^ -> &
   * 24 Strong Mutation 51: gnu.trove.impl.HashFunctions.hash(Ljava/lang/Object;)I:72 - ReplaceComparisonOperator != null -> = null
   * 25 Strong Mutation 53: gnu.trove.impl.HashFunctions.hash(Ljava/lang/Object;)I:72 - DeleteStatement: hashCode()I
   * 26 gnu.trove.impl.HashFunctions.hash(D)I: I3 Branch 1 IFNE L26 - false
   * 27 gnu.trove.impl.HashFunctions.hash(D)I: I6 Branch 2 IFEQ L26 - true
   * 28 gnu.trove.impl.HashFunctions.hash(Ljava/lang/Object;)I: I3 Branch 5 IFNONNULL L72 - true
   */

//   @Test
//   public void test0()  throws Throwable  {
//       Object object0 = new Object();
//       int int0 = HashFunctions.hash(object0);
//       assertEquals(842252093, int0);
//       
//       int int1 = HashFunctions.hash((double) (-1));
//       assertEquals((-1074790400), int1);
//   }

  //Test case number: 1
  /*
   * 13 covered goals:
   * 1 Strong Mutation 18: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceBitwiseOperator ^ -> &
   * 2 Strong Mutation 7: gnu.trove.impl.HashFunctions.hash(D)I:28 - InsertUnaryOp Negation of value
   * 3 Strong Mutation 8: gnu.trove.impl.HashFunctions.hash(D)I:28 - DeleteStatement: doubleToLongBits(D)J
   * 4 Strong Mutation 9: gnu.trove.impl.HashFunctions.hash(D)I:29 - InsertUnaryOp Negation of bits
   * 5 Strong Mutation 10: gnu.trove.impl.HashFunctions.hash(D)I:29 - InsertUnaryOp Negation of bits
   * 6 Strong Mutation 11: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceConstant - 32 -> 0
   * 7 Strong Mutation 12: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceConstant - 32 -> 1
   * 8 Strong Mutation 13: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceConstant - 32 -> -1
   * 9 Strong Mutation 14: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceConstant - 32 -> 31
   * 10 Strong Mutation 15: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceConstant - 32 -> 33
   * 11 Strong Mutation 17: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceBitwiseOperator >>> -> <<
   * 12 Strong Mutation 19: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceBitwiseOperator ^ -> |
   * 13 Strong Mutation 19: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceBitwiseOperator ^ -> |
   */

  @Test
  public void test1()  throws Throwable  {
      int int0 = HashFunctions.hash((-1933.0808290040397));
      assertEquals(71866367, int0);
  }

  //Test case number: 2
  /*
   * 24 covered goals:
   * 1 Strong Mutation 31: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceConstant - 6.6360896E8 -> 6.6360896E8
   * 2 Strong Mutation 20: gnu.trove.impl.HashFunctions.hash(F)I:41 - InsertUnaryOp Negation
   * 3 Strong Mutation 23: gnu.trove.impl.HashFunctions.hash(F)I:41 - InsertUnaryOp Negation of value
   * 4 Strong Mutation 22: gnu.trove.impl.HashFunctions.hash(F)I:41 - ReplaceComparisonOperator != -> ==
   * 5 Strong Mutation 25: gnu.trove.impl.HashFunctions.hash(F)I:41 - ReplaceComparisonOperator == -> !=
   * 6 Strong Mutation 24: gnu.trove.impl.HashFunctions.hash(F)I:41 - DeleteStatement: isNaN(F)Z
   * 7 Strong Mutation 20: gnu.trove.impl.HashFunctions.hash(F)I:41 - InsertUnaryOp Negation
   * 8 Strong Mutation 23: gnu.trove.impl.HashFunctions.hash(F)I:41 - InsertUnaryOp Negation of value
   * 9 Strong Mutation 22: gnu.trove.impl.HashFunctions.hash(F)I:41 - ReplaceComparisonOperator != -> ==
   * 10 Strong Mutation 25: gnu.trove.impl.HashFunctions.hash(F)I:41 - ReplaceComparisonOperator == -> !=
   * 11 Strong Mutation 24: gnu.trove.impl.HashFunctions.hash(F)I:41 - DeleteStatement: isNaN(F)Z
   * 12 Strong Mutation 27: gnu.trove.impl.HashFunctions.hash(F)I:43 - InsertUnaryOp Negation of value
   * 13 Strong Mutation 29: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceConstant - 6.6360896E8 -> 1.0
   * 14 Strong Mutation 28: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceConstant - 6.6360896E8 -> 0.0
   * 15 Strong Mutation 31: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceConstant - 6.6360896E8 -> 6.6360896E8
   * 16 Strong Mutation 30: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceConstant - 6.6360896E8 -> -1.0
   * 17 Strong Mutation 34: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceArithmeticOperator * -> %
   * 18 Strong Mutation 35: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceArithmeticOperator * -> /
   * 19 Strong Mutation 32: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceArithmeticOperator * -> -
   * 20 Strong Mutation 33: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceArithmeticOperator * -> +
   * 21 Strong Mutation 36: gnu.trove.impl.HashFunctions.hash(F)I:43 - DeleteStatement: floatToIntBits(F)I
   * 22 gnu.trove.impl.HashFunctions.<init>()V: root-Branch
   * 23 gnu.trove.impl.HashFunctions.hash(F)I: I3 Branch 3 IFNE L41 - false
   * 24 gnu.trove.impl.HashFunctions.hash(F)I: I6 Branch 4 IFEQ L41 - true
   */

//   @Test
//   public void test2()  throws Throwable  {
//       HashFunctions hashFunctions0 = new HashFunctions();
//       int int0 = HashFunctions.hash((Object) hashFunctions0);
//       assertEquals(626638285, int0);
//       
//       int int1 = HashFunctions.hash(206.99423F);
//       assertEquals(1375722468, int1);
//   }

  //Test case number: 3
  /*
   * 9 covered goals:
   * 1 Strong Mutation 36: gnu.trove.impl.HashFunctions.hash(F)I:43 - DeleteStatement: floatToIntBits(F)I
   * 2 Strong Mutation 27: gnu.trove.impl.HashFunctions.hash(F)I:43 - InsertUnaryOp Negation of value
   * 3 Strong Mutation 29: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceConstant - 6.6360896E8 -> 1.0
   * 4 Strong Mutation 28: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceConstant - 6.6360896E8 -> 0.0
   * 5 Strong Mutation 30: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceConstant - 6.6360896E8 -> -1.0
   * 6 Strong Mutation 34: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceArithmeticOperator * -> %
   * 7 Strong Mutation 35: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceArithmeticOperator * -> /
   * 8 Strong Mutation 32: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceArithmeticOperator * -> -
   * 9 Strong Mutation 33: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceArithmeticOperator * -> +
   */

  @Test
  public void test3()  throws Throwable  {
      int int0 = HashFunctions.hash(206.99423F);
      assertEquals(1375722468, int0);
  }

  //Test case number: 4
  /*
   * 7 covered goals:
   * 1 Strong Mutation 37: gnu.trove.impl.HashFunctions.hash(I)I:54 - InsertUnaryOp Negation of value
   * 2 Strong Mutation 38: gnu.trove.impl.HashFunctions.hash(I)I:54 - InsertUnaryOp IINC 1 value
   * 3 Strong Mutation 39: gnu.trove.impl.HashFunctions.hash(I)I:54 - InsertUnaryOp IINC -1 value
   * 4 Strong Mutation 38: gnu.trove.impl.HashFunctions.hash(I)I:54 - InsertUnaryOp IINC 1 value
   * 5 Strong Mutation 39: gnu.trove.impl.HashFunctions.hash(I)I:54 - InsertUnaryOp IINC -1 value
   * 6 Strong Mutation 37: gnu.trove.impl.HashFunctions.hash(I)I:54 - InsertUnaryOp Negation of value
   * 7 gnu.trove.impl.HashFunctions.hash(I)I: root-Branch
   */

//   @Test
//   public void test4()  throws Throwable  {
//       HashFunctions hashFunctions0 = new HashFunctions();
//       int int0 = HashFunctions.hash((Object) hashFunctions0);
//       assertEquals(1864386162, int0);
//       
//       int int1 = HashFunctions.hash(0);
//       assertEquals(0, int1);
//   }

  //Test case number: 5
  /*
   * 13 covered goals:
   * 1 Strong Mutation 47: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceBitwiseOperator >>> -> >>
   * 2 Strong Mutation 42: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceConstant - 32 -> 0
   * 3 Strong Mutation 43: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceConstant - 32 -> 1
   * 4 Strong Mutation 40: gnu.trove.impl.HashFunctions.hash(J)I:63 - InsertUnaryOp Negation of value
   * 5 Strong Mutation 41: gnu.trove.impl.HashFunctions.hash(J)I:63 - InsertUnaryOp Negation of value
   * 6 Strong Mutation 46: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceConstant - 32 -> 33
   * 7 Strong Mutation 47: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceBitwiseOperator >>> -> >>
   * 8 Strong Mutation 44: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceConstant - 32 -> -1
   * 9 Strong Mutation 45: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceConstant - 32 -> 31
   * 10 Strong Mutation 50: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceBitwiseOperator ^ -> |
   * 11 Strong Mutation 49: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceBitwiseOperator ^ -> &
   * 12 Strong Mutation 48: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceBitwiseOperator >>> -> <<
   * 13 gnu.trove.impl.HashFunctions.hash(J)I: root-Branch
   */

//   @Test
//   public void test5()  throws Throwable  {
//       Object object0 = new Object();
//       int int0 = HashFunctions.hash(object0);
//       assertEquals(770172282, int0);
//       
//       int int1 = HashFunctions.hash((-502L));
//       assertEquals(501, int1);
//   }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 Strong Mutation 50: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceBitwiseOperator ^ -> |
   */

  @Test
  public void test6()  throws Throwable  {
      int int0 = HashFunctions.hash((-502L));
      assertEquals(501, int0);
  }

  //Test case number: 7
  /*
   * 9 covered goals:
   * 1 Strong Mutation 48: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceBitwiseOperator >>> -> <<
   * 2 Strong Mutation 42: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceConstant - 32 -> 0
   * 3 Strong Mutation 43: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceConstant - 32 -> 1
   * 4 Strong Mutation 40: gnu.trove.impl.HashFunctions.hash(J)I:63 - InsertUnaryOp Negation of value
   * 5 Strong Mutation 41: gnu.trove.impl.HashFunctions.hash(J)I:63 - InsertUnaryOp Negation of value
   * 6 Strong Mutation 46: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceConstant - 32 -> 33
   * 7 Strong Mutation 44: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceConstant - 32 -> -1
   * 8 Strong Mutation 45: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceConstant - 32 -> 31
   * 9 Strong Mutation 49: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceBitwiseOperator ^ -> &
   */

//   @Test
//   public void test7()  throws Throwable  {
//       HashFunctions hashFunctions0 = new HashFunctions();
//       int int0 = HashFunctions.hash((Object) hashFunctions0);
//       assertEquals(1694998164, int0);
//       
//       int int1 = HashFunctions.hash(1763L);
//       assertEquals(1763, int1);
//   }

  //Test case number: 8
  /*
   * 3 covered goals:
   * 1 Strong Mutation 52: gnu.trove.impl.HashFunctions.hash(Ljava/lang/Object;)I:72 - ReplaceConstant - 0 -> 1
   * 2 gnu.trove.impl.HashFunctions.hash(Ljava/lang/Object;)I: I3 Branch 5 IFNONNULL L72 - false
   * 3 Strong Mutation 52: gnu.trove.impl.HashFunctions.hash(Ljava/lang/Object;)I:72 - ReplaceConstant - 0 -> 1
   */

  @Test
  public void test8()  throws Throwable  {
      int int0 = HashFunctions.hash((Object) null);
      assertEquals(0, int0);
  }

  //Test case number: 9
  /*
   * 16 covered goals:
   * 1 Strong Mutation 60: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceArithmeticOperator - -> %
   * 2 Strong Mutation 55: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - InsertUnaryOp Negation of v
   * 3 Strong Mutation 54: gnu.trove.impl.HashFunctions.fastCeil(F)I:81 - InsertUnaryOp Negation of v
   * 4 Strong Mutation 58: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - InsertUnaryOp IINC -1 possible_result
   * 5 Strong Mutation 57: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - InsertUnaryOp IINC 1 possible_result
   * 6 Strong Mutation 56: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - InsertUnaryOp Negation of possible_result
   * 7 Strong Mutation 63: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceConstant - 0.0 -> 1.0
   * 8 Strong Mutation 61: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceArithmeticOperator - -> /
   * 9 Strong Mutation 60: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceArithmeticOperator - -> %
   * 10 Strong Mutation 69: gnu.trove.impl.HashFunctions.fastCeil(F)I:83 - InsertUnaryOp Negation of possible_result
   * 11 Strong Mutation 70: gnu.trove.impl.HashFunctions.fastCeil(F)I:83 - InsertUnaryOp IINC 1 possible_result
   * 12 Strong Mutation 71: gnu.trove.impl.HashFunctions.fastCeil(F)I:83 - InsertUnaryOp IINC -1 possible_result
   * 13 Strong Mutation 64: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceConstant - 0.0 -> -1.0
   * 14 Strong Mutation 65: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - DeleteStatement: floatSub(FF)I
   * 15 Strong Mutation 67: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceComparisonOperator <= -> <
   * 16 gnu.trove.impl.HashFunctions.fastCeil(F)I: I13 Branch 6 IFLE L82 - true
   */

//   @Test
//   public void test9()  throws Throwable  {
//       HashFunctions hashFunctions0 = new HashFunctions();
//       int int0 = HashFunctions.hash((Object) hashFunctions0);
//       assertEquals(839220209, int0);
//       
//       int int1 = HashFunctions.fastCeil(0.0F);
//       assertEquals(0, int1);
//   }

  //Test case number: 10
  /*
   * 3 covered goals:
   * 1 Strong Mutation 68: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceComparisonOperator <= -> -1
   * 2 gnu.trove.impl.HashFunctions.fastCeil(F)I: I13 Branch 6 IFLE L82 - false
   * 3 Strong Mutation 68: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceComparisonOperator <= -> -1
   */

  @Test
  public void test10()  throws Throwable  {
      int int0 = HashFunctions.fastCeil(475.84067F);
      assertEquals(476, int0);
  }

  //Test case number: 11
  /*
   * 7 covered goals:
   * 1 Strong Mutation 65: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - DeleteStatement: floatSub(FF)I
   * 2 Strong Mutation 51: gnu.trove.impl.HashFunctions.hash(Ljava/lang/Object;)I:72 - ReplaceComparisonOperator != null -> = null
   * 3 Strong Mutation 53: gnu.trove.impl.HashFunctions.hash(Ljava/lang/Object;)I:72 - DeleteStatement: hashCode()I
   * 4 Strong Mutation 58: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - InsertUnaryOp IINC -1 possible_result
   * 5 Strong Mutation 63: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceConstant - 0.0 -> 1.0
   * 6 Strong Mutation 59: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceArithmeticOperator - -> +
   * 7 Strong Mutation 62: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceArithmeticOperator - -> *
   */

//   @Test
//   public void test11()  throws Throwable  {
//       HashFunctions hashFunctions0 = new HashFunctions();
//       int int0 = HashFunctions.hash((Object) hashFunctions0);
//       assertEquals(970283429, int0);
//       
//       int int1 = HashFunctions.fastCeil((float) 1763L);
//       assertEquals(1763, int1);
//   }

  //Test case number: 12
  /*
   * 3 covered goals:
   * 1 Strong Mutation 66: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceComparisonOperator <= -> ==
   * 2 Strong Mutation 55: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - InsertUnaryOp Negation of v
   * 3 Strong Mutation 66: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceComparisonOperator <= -> ==
   */

  @Test
  public void test12()  throws Throwable  {
      int int0 = HashFunctions.fastCeil((-1206.1339F));
      assertEquals((-1206), int0);
  }

  //Test case number: 13
  /*
   * 11 covered goals:
   * 1 Strong Mutation 71: gnu.trove.impl.HashFunctions.fastCeil(F)I:83 - InsertUnaryOp IINC -1 possible_result
   * 2 Strong Mutation 54: gnu.trove.impl.HashFunctions.fastCeil(F)I:81 - InsertUnaryOp Negation of v
   * 3 Strong Mutation 59: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceArithmeticOperator - -> +
   * 4 Strong Mutation 57: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - InsertUnaryOp IINC 1 possible_result
   * 5 Strong Mutation 56: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - InsertUnaryOp Negation of possible_result
   * 6 Strong Mutation 62: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceArithmeticOperator - -> *
   * 7 Strong Mutation 61: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceArithmeticOperator - -> /
   * 8 Strong Mutation 69: gnu.trove.impl.HashFunctions.fastCeil(F)I:83 - InsertUnaryOp Negation of possible_result
   * 9 Strong Mutation 70: gnu.trove.impl.HashFunctions.fastCeil(F)I:83 - InsertUnaryOp IINC 1 possible_result
   * 10 Strong Mutation 64: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceConstant - 0.0 -> -1.0
   * 11 Strong Mutation 67: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceComparisonOperator <= -> <
   */

  @Test
  public void test13()  throws Throwable  {
      int int0 = HashFunctions.fastCeil((float) 1763L);
      assertEquals(1763, int0);
  }
}
