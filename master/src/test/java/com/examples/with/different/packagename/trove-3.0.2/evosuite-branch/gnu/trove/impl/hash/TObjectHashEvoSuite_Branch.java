/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.custom_hash.TObjectLongCustomHashMap;
import gnu.trove.map.hash.TObjectShortHashMap;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import gnu.trove.set.hash.THashSet;
import gnu.trove.set.hash.TLinkedHashSet;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.Collection;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectHashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TObjectHash.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   * 2 gnu.trove.impl.hash.TObjectHash.setUp(I)I: root-Branch
   * 3 gnu.trove.impl.hash.TObjectHash.<init>()V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TObjectShortHashMap<Integer> tObjectShortHashMap0 = new TObjectShortHashMap<Integer>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tObjectShortHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
  }

  //Test case number: 1
  /*
   * 9 covered goals:
   * 1 gnu.trove.impl.hash.TObjectHash.forEach(Lgnu/trove/procedure/TObjectProcedure;)Z: I20 Branch 2 IF_ACMPEQ L135 - false
   * 2 gnu.trove.impl.hash.TObjectHash.forEach(Lgnu/trove/procedure/TObjectProcedure;)Z: I25 Branch 3 IF_ACMPEQ L135 - false
   * 3 gnu.trove.impl.hash.TObjectHash.forEach(Lgnu/trove/procedure/TObjectProcedure;)Z: I31 Branch 4 IFNE L135 - true
   * 4 gnu.trove.impl.hash.TObjectHash.hash(Ljava/lang/Object;)I: root-Branch
   * 5 gnu.trove.impl.hash.TObjectHash.insertKey(Ljava/lang/Object;)I: I8 Branch 18 IFNONNULL L277 - true
   * 6 gnu.trove.impl.hash.TObjectHash.insertKey(Ljava/lang/Object;)I: I41 Branch 19 IF_ACMPNE L284 - false
   * 7 gnu.trove.impl.hash.TObjectHash.forEach(Lgnu/trove/procedure/TObjectProcedure;)Z: I13 Branch 1 IFLE L134 - true
   * 8 gnu.trove.impl.hash.TObjectHash.forEach(Lgnu/trove/procedure/TObjectProcedure;)Z: I13 Branch 1 IFLE L134 - false
   * 9 gnu.trove.impl.hash.TObjectHash.forEach(Lgnu/trove/procedure/TObjectProcedure;)Z: I20 Branch 2 IF_ACMPEQ L135 - true
   */

  @Test
  public void test1()  throws Throwable  {
      THashSet<String> tHashSet0 = new THashSet<String>();
      tHashSet0.add("{}");
      String string0 = tHashSet0.toString();
      assertEquals(1, tHashSet0.size());
      assertEquals("{{}}", string0);
  }

  //Test case number: 2
  /*
   * 11 covered goals:
   * 1 gnu.trove.impl.hash.TObjectHash.forEach(Lgnu/trove/procedure/TObjectProcedure;)Z: I25 Branch 3 IF_ACMPEQ L135 - true
   * 2 gnu.trove.impl.hash.TObjectHash.forEach(Lgnu/trove/procedure/TObjectProcedure;)Z: I13 Branch 1 IFLE L134 - true
   * 3 gnu.trove.impl.hash.TObjectHash.forEach(Lgnu/trove/procedure/TObjectProcedure;)Z: I13 Branch 1 IFLE L134 - false
   * 4 gnu.trove.impl.hash.TObjectHash.forEach(Lgnu/trove/procedure/TObjectProcedure;)Z: I20 Branch 2 IF_ACMPEQ L135 - true
   * 5 gnu.trove.impl.hash.TObjectHash.forEach(Lgnu/trove/procedure/TObjectProcedure;)Z: I20 Branch 2 IF_ACMPEQ L135 - false
   * 6 gnu.trove.impl.hash.TObjectHash.removeAt(I)V: root-Branch
   * 7 gnu.trove.impl.hash.TObjectHash.capacity()I: root-Branch
   * 8 gnu.trove.impl.hash.TObjectHash.<init>(I)V: root-Branch
   * 9 gnu.trove.impl.hash.TObjectHash.index(Ljava/lang/Object;)I: I3 Branch 6 IFNONNULL L164 - true
   * 10 gnu.trove.impl.hash.TObjectHash.index(Ljava/lang/Object;)I: I36 Branch 7 IF_ACMPNE L173 - false
   * 11 gnu.trove.impl.hash.TObjectHash.contains(Ljava/lang/Object;)Z: I5 Branch 5 IFLT L153 - true
   */

  @Test
  public void test2()  throws Throwable  {
      THashSet<String> tHashSet0 = new THashSet<String>();
      TLinkedHashSet<Object> tLinkedHashSet0 = new TLinkedHashSet<Object>((Collection<?>) tHashSet0);
      tHashSet0.add(")(iiKw");
      assertEquals(false, tHashSet0.isEmpty());
      
      tHashSet0.retainAll((Collection<?>) tLinkedHashSet0);
      String string0 = tHashSet0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 3
  /*
   * 10 covered goals:
   * 1 gnu.trove.impl.hash.TObjectHash.contains(Ljava/lang/Object;)Z: I5 Branch 5 IFLT L153 - false
   * 2 gnu.trove.impl.hash.TObjectHash.index(Ljava/lang/Object;)I: I3 Branch 6 IFNONNULL L164 - false
   * 3 gnu.trove.impl.hash.TObjectHash.indexForNull()I: I19 Branch 15 IF_ICMPGE L235 - false
   * 4 gnu.trove.impl.hash.TObjectHash.indexForNull()I: I27 Branch 16 IFNONNULL L236 - false
   * 5 gnu.trove.impl.hash.TObjectHash.insertKey(Ljava/lang/Object;)I: I8 Branch 18 IFNONNULL L277 - false
   * 6 gnu.trove.impl.hash.TObjectHash.insertKeyForNull()I: I23 Branch 31 IF_ICMPGE L376 - false
   * 7 gnu.trove.impl.hash.TObjectHash.insertKeyForNull()I: I32 Branch 32 IF_ACMPNE L378 - true
   * 8 gnu.trove.impl.hash.TObjectHash.insertKeyForNull()I: I44 Branch 34 IF_ACMPNE L381 - false
   * 9 gnu.trove.impl.hash.TObjectHash.insertKeyForNull()I: I49 Branch 35 IF_ICMPEQ L382 - true
   * 10 gnu.trove.impl.hash.TObjectHash.<init>(IF)V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectLongCustomHashMap<Integer> tObjectLongCustomHashMap0 = new TObjectLongCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, 0, (float) 0);
      tObjectLongCustomHashMap0.put((Integer) null, (long) 0);
      boolean boolean0 = tObjectLongCustomHashMap0.contains((Object) null);
      assertEquals("{null=0}", tObjectLongCustomHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 4
  /*
   * 11 covered goals:
   * 1 gnu.trove.impl.hash.TObjectHash.index(Ljava/lang/Object;)I: I45 Branch 8 IF_ACMPEQ L177 - false
   * 2 gnu.trove.impl.hash.TObjectHash.index(Ljava/lang/Object;)I: I50 Branch 9 IFEQ L177 - true
   * 3 gnu.trove.impl.hash.TObjectHash.indexRehashed(Ljava/lang/Object;IILjava/lang/Object;)I: I33 Branch 10 IFGE L205 - true
   * 4 gnu.trove.impl.hash.TObjectHash.indexRehashed(Ljava/lang/Object;IILjava/lang/Object;)I: I33 Branch 10 IFGE L205 - false
   * 5 gnu.trove.impl.hash.TObjectHash.indexRehashed(Ljava/lang/Object;IILjava/lang/Object;)I: I50 Branch 11 IF_ACMPNE L210 - true
   * 6 gnu.trove.impl.hash.TObjectHash.indexRehashed(Ljava/lang/Object;IILjava/lang/Object;)I: I59 Branch 12 IF_ACMPEQ L214 - false
   * 7 gnu.trove.impl.hash.TObjectHash.indexRehashed(Ljava/lang/Object;IILjava/lang/Object;)I: I64 Branch 13 IFEQ L214 - true
   * 8 gnu.trove.impl.hash.TObjectHash.indexRehashed(Ljava/lang/Object;IILjava/lang/Object;)I: I73 Branch 14 IF_ICMPNE L216 - true
   * 9 gnu.trove.impl.hash.TObjectHash.indexRehashed(Ljava/lang/Object;IILjava/lang/Object;)I: I73 Branch 14 IF_ICMPNE L216 - false
   * 10 gnu.trove.impl.hash.TObjectHash.equals(Ljava/lang/Object;Ljava/lang/Object;)Z: I3 Branch 38 IFNULL L475 - true
   * 11 gnu.trove.impl.hash.TObjectHash.index(Ljava/lang/Object;)I: I36 Branch 7 IF_ACMPNE L173 - true
   */

  @Test
  public void test4()  throws Throwable  {
      TObjectShortHashMap<Integer> tObjectShortHashMap0 = new TObjectShortHashMap<Integer>((-1202), (-1202));
      assertEquals(3, tObjectShortHashMap0.capacity());
      
      Object[] objectArray0 = new Object[10];
      tObjectShortHashMap0._set = objectArray0;
      boolean boolean0 = tObjectShortHashMap0.increment((Integer) (-1202));
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.TObjectHash.indexRehashed(Ljava/lang/Object;IILjava/lang/Object;)I: I59 Branch 12 IF_ACMPEQ L214 - true
   * 2 gnu.trove.impl.hash.TObjectHash.indexRehashed(Ljava/lang/Object;IILjava/lang/Object;)I: I33 Branch 10 IFGE L205 - false
   * 3 gnu.trove.impl.hash.TObjectHash.indexRehashed(Ljava/lang/Object;IILjava/lang/Object;)I: I50 Branch 11 IF_ACMPNE L210 - true
   * 4 gnu.trove.impl.hash.TObjectHash.indexRehashed(Ljava/lang/Object;IILjava/lang/Object;)I: I59 Branch 12 IF_ACMPEQ L214 - false
   * 5 gnu.trove.impl.hash.TObjectHash.indexRehashed(Ljava/lang/Object;IILjava/lang/Object;)I: I64 Branch 13 IFEQ L214 - true
   * 6 gnu.trove.impl.hash.TObjectHash.indexRehashed(Ljava/lang/Object;IILjava/lang/Object;)I: I73 Branch 14 IF_ICMPNE L216 - true
   */

  @Test
  public void test5()  throws Throwable  {
      TObjectShortHashMap<Integer> tObjectShortHashMap0 = new TObjectShortHashMap<Integer>((-1202), (-1202));
      assertEquals(3, tObjectShortHashMap0.capacity());
      
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) (-1202);
      tObjectShortHashMap0._set = objectArray0;
      boolean boolean0 = tObjectShortHashMap0.increment((Integer) (-1202));
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 12 covered goals:
   * 1 gnu.trove.impl.hash.TObjectHash.insertKey(Ljava/lang/Object;)I: I62 Branch 20 IF_ACMPEQ L290 - false
   * 2 gnu.trove.impl.hash.TObjectHash.insertKey(Ljava/lang/Object;)I: I67 Branch 21 IFEQ L290 - true
   * 3 gnu.trove.impl.hash.TObjectHash.insertKeyRehash(Ljava/lang/Object;IILjava/lang/Object;)I: I32 Branch 22 IF_ACMPNE L322 - true
   * 4 gnu.trove.impl.hash.TObjectHash.insertKeyRehash(Ljava/lang/Object;IILjava/lang/Object;)I: I49 Branch 24 IFGE L326 - true
   * 5 gnu.trove.impl.hash.TObjectHash.insertKeyRehash(Ljava/lang/Object;IILjava/lang/Object;)I: I49 Branch 24 IFGE L326 - false
   * 6 gnu.trove.impl.hash.TObjectHash.insertKeyRehash(Ljava/lang/Object;IILjava/lang/Object;)I: I66 Branch 25 IF_ACMPNE L332 - true
   * 7 gnu.trove.impl.hash.TObjectHash.insertKeyRehash(Ljava/lang/Object;IILjava/lang/Object;)I: I103 Branch 27 IF_ACMPEQ L343 - false
   * 8 gnu.trove.impl.hash.TObjectHash.insertKeyRehash(Ljava/lang/Object;IILjava/lang/Object;)I: I108 Branch 28 IFEQ L343 - true
   * 9 gnu.trove.impl.hash.TObjectHash.insertKeyRehash(Ljava/lang/Object;IILjava/lang/Object;)I: I120 Branch 29 IF_ICMPNE L348 - true
   * 10 gnu.trove.impl.hash.TObjectHash.insertKeyRehash(Ljava/lang/Object;IILjava/lang/Object;)I: I120 Branch 29 IF_ICMPNE L348 - false
   * 11 gnu.trove.impl.hash.TObjectHash.insertKeyRehash(Ljava/lang/Object;IILjava/lang/Object;)I: I125 Branch 30 IF_ICMPEQ L352 - true
   * 12 gnu.trove.impl.hash.TObjectHash.insertKey(Ljava/lang/Object;)I: I41 Branch 19 IF_ACMPNE L284 - true
   */

  @Test
  public void test6()  throws Throwable  {
      TObjectShortHashMap<Integer> tObjectShortHashMap0 = new TObjectShortHashMap<Integer>((-1202), (-1202));
      Object[] objectArray0 = new Object[10];
      tObjectShortHashMap0._set = objectArray0;
      // Undeclared exception!
      try {
        tObjectShortHashMap0.adjustOrPutValue((Integer) (-1202), (short)390, (short)390);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No free or removed slots available. Key set full?!!
         //
      }
  }

  //Test case number: 7
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TObjectHash.insertKey(Ljava/lang/Object;)I: I67 Branch 21 IFEQ L290 - false
   * 2 gnu.trove.impl.hash.TObjectHash.insertKey(Ljava/lang/Object;)I: I62 Branch 20 IF_ACMPEQ L290 - true
   * 3 gnu.trove.impl.hash.TObjectHash.equals(Ljava/lang/Object;Ljava/lang/Object;)Z: I3 Branch 38 IFNULL L475 - false
   * 4 gnu.trove.impl.hash.TObjectHash.equals(Ljava/lang/Object;Ljava/lang/Object;)Z: I6 Branch 39 IF_ACMPNE L475 - true
   */

  @Test
  public void test7()  throws Throwable  {
      THashSet<String> tHashSet0 = new THashSet<String>();
      tHashSet0.add("{}");
      boolean boolean0 = tHashSet0.add("{}");
      assertEquals("{{}}", tHashSet0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 8
  /*
   * 7 covered goals:
   * 1 gnu.trove.impl.hash.TObjectHash.insertKeyRehash(Ljava/lang/Object;IILjava/lang/Object;)I: I32 Branch 22 IF_ACMPNE L322 - false
   * 2 gnu.trove.impl.hash.TObjectHash.insertKeyRehash(Ljava/lang/Object;IILjava/lang/Object;)I: I35 Branch 23 IF_ICMPNE L322 - false
   * 3 gnu.trove.impl.hash.TObjectHash.insertKeyRehash(Ljava/lang/Object;IILjava/lang/Object;)I: I66 Branch 25 IF_ACMPNE L332 - false
   * 4 gnu.trove.impl.hash.TObjectHash.insertKeyRehash(Ljava/lang/Object;IILjava/lang/Object;)I: I71 Branch 26 IF_ICMPEQ L333 - false
   * 5 gnu.trove.impl.hash.TObjectHash.equals(Ljava/lang/Object;Ljava/lang/Object;)Z: I6 Branch 39 IF_ACMPNE L475 - false
   * 6 gnu.trove.impl.hash.TObjectHash.index(Ljava/lang/Object;)I: I50 Branch 9 IFEQ L177 - false
   * 7 gnu.trove.impl.hash.TObjectHash.index(Ljava/lang/Object;)I: I45 Branch 8 IF_ACMPEQ L177 - true
   */

  @Test
  public void test8()  throws Throwable  {
      THashSet<String> tHashSet0 = new THashSet<String>();
      tHashSet0.add("{}");
      tHashSet0.remove((Object) "{}");
      boolean boolean0 = tHashSet0.add("{}");
      assertEquals("{{}}", tHashSet0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 9
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TObjectHash.insertKeyRehash(Ljava/lang/Object;IILjava/lang/Object;)I: I71 Branch 26 IF_ICMPEQ L333 - true
   * 2 gnu.trove.impl.hash.TObjectHash.insertKeyRehash(Ljava/lang/Object;IILjava/lang/Object;)I: I66 Branch 25 IF_ACMPNE L332 - false
   * 3 gnu.trove.impl.hash.TObjectHash.reportPotentialConcurrentMod(II)Ljava/lang/String;: I4 Branch 40 IF_ICMPEQ L488 - true
   */

  @Test
  public void test9()  throws Throwable  {
      THashSet<String> tHashSet0 = new THashSet<String>();
      tHashSet0.add("{}");
      tHashSet0.add("ZF<C~");
      tHashSet0.trimToSize();
      assertEquals("{ZF<C~, {}}", tHashSet0.toString());
  }

  //Test case number: 10
  /*
   * 11 covered goals:
   * 1 gnu.trove.impl.hash.TObjectHash.insertKeyRehash(Ljava/lang/Object;IILjava/lang/Object;)I: I103 Branch 27 IF_ACMPEQ L343 - true
   * 2 gnu.trove.impl.hash.TObjectHash.insertKey(Ljava/lang/Object;)I: I62 Branch 20 IF_ACMPEQ L290 - false
   * 3 gnu.trove.impl.hash.TObjectHash.insertKey(Ljava/lang/Object;)I: I67 Branch 21 IFEQ L290 - true
   * 4 gnu.trove.impl.hash.TObjectHash.insertKeyRehash(Ljava/lang/Object;IILjava/lang/Object;)I: I32 Branch 22 IF_ACMPNE L322 - true
   * 5 gnu.trove.impl.hash.TObjectHash.insertKeyRehash(Ljava/lang/Object;IILjava/lang/Object;)I: I49 Branch 24 IFGE L326 - true
   * 6 gnu.trove.impl.hash.TObjectHash.insertKeyRehash(Ljava/lang/Object;IILjava/lang/Object;)I: I49 Branch 24 IFGE L326 - false
   * 7 gnu.trove.impl.hash.TObjectHash.insertKeyRehash(Ljava/lang/Object;IILjava/lang/Object;)I: I66 Branch 25 IF_ACMPNE L332 - true
   * 8 gnu.trove.impl.hash.TObjectHash.insertKeyRehash(Ljava/lang/Object;IILjava/lang/Object;)I: I103 Branch 27 IF_ACMPEQ L343 - false
   * 9 gnu.trove.impl.hash.TObjectHash.insertKeyRehash(Ljava/lang/Object;IILjava/lang/Object;)I: I108 Branch 28 IFEQ L343 - true
   * 10 gnu.trove.impl.hash.TObjectHash.insertKeyRehash(Ljava/lang/Object;IILjava/lang/Object;)I: I120 Branch 29 IF_ICMPNE L348 - true
   * 11 gnu.trove.impl.hash.TObjectHash.equals(Ljava/lang/Object;Ljava/lang/Object;)Z: I3 Branch 38 IFNULL L475 - true
   */

  @Test
  public void test10()  throws Throwable  {
      TObjectShortHashMap<Integer> tObjectShortHashMap0 = new TObjectShortHashMap<Integer>((-1202), (-1202));
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) (-1202);
      tObjectShortHashMap0._set = objectArray0;
      short short0 = tObjectShortHashMap0.adjustOrPutValue((Integer) (-1202), (short)390, (short)390);
      assertEquals((short)390, short0);
  }

  //Test case number: 11
  /*
   * 11 covered goals:
   * 1 gnu.trove.impl.hash.TObjectHash.insertKeyForNull()I: I35 Branch 33 IF_ICMPNE L378 - true
   * 2 gnu.trove.impl.hash.TObjectHash.insertKeyForNull()I: I32 Branch 32 IF_ACMPNE L378 - false
   * 3 gnu.trove.impl.hash.TObjectHash.insertKeyForNull()I: I35 Branch 33 IF_ICMPNE L378 - false
   * 4 gnu.trove.impl.hash.TObjectHash.insertKeyForNull()I: I49 Branch 35 IF_ICMPEQ L382 - false
   * 5 gnu.trove.impl.hash.TObjectHash.insertKeyForNull()I: I80 Branch 36 IFNONNULL L392 - true
   * 6 gnu.trove.impl.hash.TObjectHash.index(Ljava/lang/Object;)I: I3 Branch 6 IFNONNULL L164 - false
   * 7 gnu.trove.impl.hash.TObjectHash.index(Ljava/lang/Object;)I: I36 Branch 7 IF_ACMPNE L173 - false
   * 8 gnu.trove.impl.hash.TObjectHash.indexForNull()I: I19 Branch 15 IF_ICMPGE L235 - false
   * 9 gnu.trove.impl.hash.TObjectHash.indexForNull()I: I27 Branch 16 IFNONNULL L236 - true
   * 10 gnu.trove.impl.hash.TObjectHash.indexForNull()I: I36 Branch 17 IF_ACMPNE L239 - false
   * 11 gnu.trove.impl.hash.TObjectHash.insertKeyForNull()I: I44 Branch 34 IF_ACMPNE L381 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TObjectShortHashMap<Integer> tObjectShortHashMap0 = new TObjectShortHashMap<Integer>((-37), (-37));
      THashSet<String> tHashSet0 = new THashSet<String>();
      TLinkedHashSet<Object> tLinkedHashSet0 = new TLinkedHashSet<Object>((Collection<?>) tHashSet0);
      tLinkedHashSet0.add((Object) tObjectShortHashMap0);
      tLinkedHashSet0.add((Object) null);
      tLinkedHashSet0.retainAll((Collection<?>) tHashSet0);
      boolean boolean0 = tLinkedHashSet0.add((Object) null);
      assertEquals(7, tLinkedHashSet0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 20 covered goals:
   * 1 gnu.trove.impl.hash.TObjectHash.detectKeyLoss([Ljava/lang/Object;I)Ljava/lang/String;: I16 Branch 42 IF_ICMPEQ L529 - false
   * 2 gnu.trove.impl.hash.TObjectHash.equalsSymmetryInfo(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;: I10 Branch 46 IF_ACMPNE L551 - false
   * 3 gnu.trove.impl.hash.TObjectHash.dumpKeyTypes(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;: I67 Branch 55 IF_ICMPLE L587 - false
   * 4 gnu.trove.impl.hash.TObjectHash.<init>(IF)V: root-Branch
   * 5 gnu.trove.impl.hash.TObjectHash.buildObjectContractViolation(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/IllegalArgumentException;: root-Branch
   * 6 gnu.trove.impl.hash.TObjectHash.throwObjectContractViolation(Ljava/lang/Object;Ljava/lang/Object;II[Ljava/lang/Object;)V: root-Branch
   * 7 gnu.trove.impl.hash.TObjectHash.objectInfo(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 49 IFNONNULL L571 - true
   * 8 gnu.trove.impl.hash.TObjectHash.objectInfo(Ljava/lang/Object;)Ljava/lang/String;: I22 Branch 50 IFNONNULL L571 - true
   * 9 gnu.trove.impl.hash.TObjectHash.dumpExtraInfo(Ljava/lang/Object;Ljava/lang/Object;II[Ljava/lang/Object;)Ljava/lang/String;: I35 Branch 41 IF_ACMPNE L512 - false
   * 10 gnu.trove.impl.hash.TObjectHash.makeKeySet([Ljava/lang/Object;)Ljava/util/Set;: I20 Branch 43 IF_ICMPGE L540 - true
   * 11 gnu.trove.impl.hash.TObjectHash.makeKeySet([Ljava/lang/Object;)Ljava/util/Set;: I20 Branch 43 IF_ICMPGE L540 - false
   * 12 gnu.trove.impl.hash.TObjectHash.makeKeySet([Ljava/lang/Object;)Ljava/util/Set;: I29 Branch 44 IF_ACMPEQ L541 - true
   * 13 gnu.trove.impl.hash.TObjectHash.makeKeySet([Ljava/lang/Object;)Ljava/util/Set;: I29 Branch 44 IF_ACMPEQ L541 - false
   * 14 gnu.trove.impl.hash.TObjectHash.makeKeySet([Ljava/lang/Object;)Ljava/util/Set;: I32 Branch 45 IF_ACMPEQ L541 - false
   * 15 gnu.trove.impl.hash.TObjectHash.dumpKeyTypes(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;: I27 Branch 51 IF_ICMPGE L578 - true
   * 16 gnu.trove.impl.hash.TObjectHash.dumpKeyTypes(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;: I27 Branch 51 IF_ICMPGE L578 - false
   * 17 gnu.trove.impl.hash.TObjectHash.dumpKeyTypes(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;: I36 Branch 52 IF_ACMPEQ L579 - true
   * 18 gnu.trove.impl.hash.TObjectHash.dumpKeyTypes(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;: I36 Branch 52 IF_ACMPEQ L579 - false
   * 19 gnu.trove.impl.hash.TObjectHash.dumpKeyTypes(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;: I39 Branch 53 IF_ACMPEQ L579 - false
   * 20 gnu.trove.impl.hash.TObjectHash.dumpKeyTypes(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;: I43 Branch 54 IFNULL L580 - false
   */

  @Test
  public void test12()  throws Throwable  {
      TObjectShortHashMap<Integer> tObjectShortHashMap0 = new TObjectShortHashMap<Integer>((-37), (-37));
      THashSet<String> tHashSet0 = new THashSet<String>();
      tHashSet0.add("{}");
      TLinkedHashSet<Object> tLinkedHashSet0 = new TLinkedHashSet<Object>((Collection<?>) tHashSet0);
      tLinkedHashSet0.add((Object) tObjectShortHashMap0);
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tHashSet0._set);
      tLinkedHashSet0.forEach((TObjectProcedure<? super Object>) toObjectArrayProceedure0);
      // Undeclared exception!
      try {
        tHashSet0.trimToSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Equal objects must have equal hashcodes. During rehashing, Trove discovered that the following two objects claim to be equal (as in java.lang.Object.equals()) but their hashCodes (or those calculated by your TObjectHashingStrategy) are not equal.This violates the general contract of java.lang.Object.hashCode().  See bullet point two in that method's documentation. object #1 =class java.lang.String id= 20393527 hashCode= 3938 toString= {}; object #2 =class java.lang.String id= 20393527 hashCode= 3938 toString= {}
         // 
         // More than one type used for keys. Watch out for asymmetric equals(). Read about the 'Liskov substitution principle' and the implications for equals() in java.
         // Key types: [class gnu.trove.map.hash.TObjectShortHashMap, class java.lang.String]a == b
         // hashCode() and/or equals() have inconsistent implementation
         // Key set lost entries, now got 2 instead of 1. This can manifest itself as an apparent duplicate key.Inserting same object twice, rehashing bug. Object= {}
         //
      }
  }

  //Test case number: 13
  /*
   * 23 covered goals:
   * 1 gnu.trove.impl.hash.TObjectHash.makeKeySet([Ljava/lang/Object;)Ljava/util/Set;: I32 Branch 45 IF_ACMPEQ L541 - true
   * 2 gnu.trove.impl.hash.TObjectHash.removeAt(I)V: root-Branch
   * 3 gnu.trove.impl.hash.TObjectHash.hash(Ljava/lang/Object;)I: root-Branch
   * 4 gnu.trove.impl.hash.TObjectHash.insertKey(Ljava/lang/Object;)I: I8 Branch 18 IFNONNULL L277 - true
   * 5 gnu.trove.impl.hash.TObjectHash.insertKey(Ljava/lang/Object;)I: I41 Branch 19 IF_ACMPNE L284 - true
   * 6 gnu.trove.impl.hash.TObjectHash.insertKey(Ljava/lang/Object;)I: I41 Branch 19 IF_ACMPNE L284 - false
   * 7 gnu.trove.impl.hash.TObjectHash.insertKey(Ljava/lang/Object;)I: I62 Branch 20 IF_ACMPEQ L290 - true
   * 8 gnu.trove.impl.hash.TObjectHash.objectInfo(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 49 IFNONNULL L571 - true
   * 9 gnu.trove.impl.hash.TObjectHash.objectInfo(Ljava/lang/Object;)Ljava/lang/String;: I22 Branch 50 IFNONNULL L571 - true
   * 10 gnu.trove.impl.hash.TObjectHash.indexRehashed(Ljava/lang/Object;IILjava/lang/Object;)I: I33 Branch 10 IFGE L205 - true
   * 11 gnu.trove.impl.hash.TObjectHash.indexRehashed(Ljava/lang/Object;IILjava/lang/Object;)I: I50 Branch 11 IF_ACMPNE L210 - false
   * 12 gnu.trove.impl.hash.TObjectHash.index(Ljava/lang/Object;)I: I3 Branch 6 IFNONNULL L164 - true
   * 13 gnu.trove.impl.hash.TObjectHash.index(Ljava/lang/Object;)I: I36 Branch 7 IF_ACMPNE L173 - true
   * 14 gnu.trove.impl.hash.TObjectHash.index(Ljava/lang/Object;)I: I45 Branch 8 IF_ACMPEQ L177 - true
   * 15 gnu.trove.impl.hash.TObjectHash.index(Ljava/lang/Object;)I: I45 Branch 8 IF_ACMPEQ L177 - false
   * 16 gnu.trove.impl.hash.TObjectHash.index(Ljava/lang/Object;)I: I50 Branch 9 IFEQ L177 - true
   * 17 gnu.trove.impl.hash.TObjectHash.equals(Ljava/lang/Object;Ljava/lang/Object;)Z: I3 Branch 38 IFNULL L475 - false
   * 18 gnu.trove.impl.hash.TObjectHash.equals(Ljava/lang/Object;Ljava/lang/Object;)Z: I6 Branch 39 IF_ACMPNE L475 - true
   * 19 gnu.trove.impl.hash.TObjectHash.contains(Ljava/lang/Object;)Z: I5 Branch 5 IFLT L153 - true
   * 20 gnu.trove.impl.hash.TObjectHash.contains(Ljava/lang/Object;)Z: I5 Branch 5 IFLT L153 - false
   * 21 gnu.trove.impl.hash.TObjectHash.detectKeyLoss([Ljava/lang/Object;I)Ljava/lang/String;: I16 Branch 42 IF_ICMPEQ L529 - true
   * 22 gnu.trove.impl.hash.TObjectHash.dumpKeyTypes(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;: I43 Branch 54 IFNULL L580 - false
   * 23 gnu.trove.impl.hash.TObjectHash.dumpKeyTypes(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;: I67 Branch 55 IF_ICMPLE L587 - true
   */

  @Test
  public void test13()  throws Throwable  {
      THashSet<String> tHashSet0 = new THashSet<String>();
      tHashSet0.add("{}");
      TLinkedHashSet<Object> tLinkedHashSet0 = new TLinkedHashSet<Object>((Collection<?>) tHashSet0);
      tHashSet0.add(")(iiKw");
      tHashSet0.retainAll((Collection<?>) tLinkedHashSet0);
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tHashSet0._set);
      tLinkedHashSet0.forEach((TObjectProcedure<? super Object>) toObjectArrayProceedure0);
      // Undeclared exception!
      try {
        tHashSet0.trimToSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Equal objects must have equal hashcodes. During rehashing, Trove discovered that the following two objects claim to be equal (as in java.lang.Object.equals()) but their hashCodes (or those calculated by your TObjectHashingStrategy) are not equal.This violates the general contract of java.lang.Object.hashCode().  See bullet point two in that method's documentation. object #1 =class java.lang.String id= 20393527 hashCode= 3938 toString= {}; object #2 =class java.lang.String id= 20393527 hashCode= 3938 toString= {}
         // Inserting same object twice, rehashing bug. Object= {}
         //
      }
  }

  //Test case number: 14
  /*
   * 30 covered goals:
   * 1 gnu.trove.impl.hash.TObjectHash.objectInfo(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 49 IFNONNULL L571 - false
   * 2 gnu.trove.impl.hash.TObjectHash.objectInfo(Ljava/lang/Object;)Ljava/lang/String;: I22 Branch 50 IFNONNULL L571 - false
   * 3 gnu.trove.impl.hash.TObjectHash.dumpKeyTypes(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;: I43 Branch 54 IFNULL L580 - true
   * 4 gnu.trove.impl.hash.TObjectHash.buildObjectContractViolation(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/IllegalArgumentException;: root-Branch
   * 5 gnu.trove.impl.hash.TObjectHash.throwObjectContractViolation(Ljava/lang/Object;Ljava/lang/Object;II[Ljava/lang/Object;)V: root-Branch
   * 6 gnu.trove.impl.hash.TObjectHash.setUp(I)I: root-Branch
   * 7 gnu.trove.impl.hash.TObjectHash.capacity()I: root-Branch
   * 8 gnu.trove.impl.hash.TObjectHash.<init>(I)V: root-Branch
   * 9 gnu.trove.impl.hash.TObjectHash.<init>()V: root-Branch
   * 10 gnu.trove.impl.hash.TObjectHash.insertKey(Ljava/lang/Object;)I: I8 Branch 18 IFNONNULL L277 - false
   * 11 gnu.trove.impl.hash.TObjectHash.insertKeyForNull()I: I23 Branch 31 IF_ICMPGE L376 - false
   * 12 gnu.trove.impl.hash.TObjectHash.insertKeyForNull()I: I32 Branch 32 IF_ACMPNE L378 - true
   * 13 gnu.trove.impl.hash.TObjectHash.insertKeyForNull()I: I44 Branch 34 IF_ACMPNE L381 - true
   * 14 gnu.trove.impl.hash.TObjectHash.insertKeyForNull()I: I44 Branch 34 IF_ACMPNE L381 - false
   * 15 gnu.trove.impl.hash.TObjectHash.insertKeyForNull()I: I49 Branch 35 IF_ICMPEQ L382 - true
   * 16 gnu.trove.impl.hash.TObjectHash.insertKeyForNull()I: I80 Branch 36 IFNONNULL L392 - false
   * 17 gnu.trove.impl.hash.TObjectHash.dumpExtraInfo(Ljava/lang/Object;Ljava/lang/Object;II[Ljava/lang/Object;)Ljava/lang/String;: I35 Branch 41 IF_ACMPNE L512 - false
   * 18 gnu.trove.impl.hash.TObjectHash.makeKeySet([Ljava/lang/Object;)Ljava/util/Set;: I20 Branch 43 IF_ICMPGE L540 - true
   * 19 gnu.trove.impl.hash.TObjectHash.makeKeySet([Ljava/lang/Object;)Ljava/util/Set;: I20 Branch 43 IF_ICMPGE L540 - false
   * 20 gnu.trove.impl.hash.TObjectHash.makeKeySet([Ljava/lang/Object;)Ljava/util/Set;: I29 Branch 44 IF_ACMPEQ L541 - true
   * 21 gnu.trove.impl.hash.TObjectHash.makeKeySet([Ljava/lang/Object;)Ljava/util/Set;: I29 Branch 44 IF_ACMPEQ L541 - false
   * 22 gnu.trove.impl.hash.TObjectHash.makeKeySet([Ljava/lang/Object;)Ljava/util/Set;: I32 Branch 45 IF_ACMPEQ L541 - false
   * 23 gnu.trove.impl.hash.TObjectHash.reportPotentialConcurrentMod(II)Ljava/lang/String;: I4 Branch 40 IF_ICMPEQ L488 - true
   * 24 gnu.trove.impl.hash.TObjectHash.detectKeyLoss([Ljava/lang/Object;I)Ljava/lang/String;: I16 Branch 42 IF_ICMPEQ L529 - false
   * 25 gnu.trove.impl.hash.TObjectHash.dumpKeyTypes(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;: I27 Branch 51 IF_ICMPGE L578 - true
   * 26 gnu.trove.impl.hash.TObjectHash.dumpKeyTypes(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;: I27 Branch 51 IF_ICMPGE L578 - false
   * 27 gnu.trove.impl.hash.TObjectHash.dumpKeyTypes(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;: I36 Branch 52 IF_ACMPEQ L579 - true
   * 28 gnu.trove.impl.hash.TObjectHash.dumpKeyTypes(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;: I36 Branch 52 IF_ACMPEQ L579 - false
   * 29 gnu.trove.impl.hash.TObjectHash.dumpKeyTypes(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;: I39 Branch 53 IF_ACMPEQ L579 - false
   * 30 gnu.trove.impl.hash.TObjectHash.dumpKeyTypes(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;: I67 Branch 55 IF_ICMPLE L587 - true
   */

  @Test
  public void test14()  throws Throwable  {
      THashSet<String> tHashSet0 = new THashSet<String>();
      TLinkedHashSet<Object> tLinkedHashSet0 = new TLinkedHashSet<Object>((Collection<?>) tHashSet0);
      tLinkedHashSet0.add((Object) null);
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tHashSet0._set);
      tLinkedHashSet0.forEach((TObjectProcedure<? super Object>) toObjectArrayProceedure0);
      toObjectArrayProceedure0.execute((Object) null);
      // Undeclared exception!
      try {
        tHashSet0.trimToSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Equal objects must have equal hashcodes. During rehashing, Trove discovered that the following two objects claim to be equal (as in java.lang.Object.equals()) but their hashCodes (or those calculated by your TObjectHashingStrategy) are not equal.This violates the general contract of java.lang.Object.hashCode().  See bullet point two in that method's documentation. object #1 =class null id= 0 hashCode= 0 toString= null; object #2 =class null id= 0 hashCode= 0 toString= null
         // 
         // hashCode() and/or equals() have inconsistent implementation
         // Key set lost entries, now got 1 instead of 0. This can manifest itself as an apparent duplicate key.Inserting same object twice, rehashing bug. Object= null
         //
      }
  }
}
