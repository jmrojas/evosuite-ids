/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TFloatFunction;
import gnu.trove.impl.sync.TSynchronizedByteFloatMap;
import gnu.trove.impl.sync.TSynchronizedByteSet;
import gnu.trove.impl.sync.TSynchronizedFloatCollection;
import gnu.trove.iterator.TByteFloatIterator;
import gnu.trove.map.TByteFloatMap;
import gnu.trove.map.hash.TByteFloatHashMap;
import gnu.trove.procedure.TByteFloatProcedure;
import gnu.trove.procedure.TByteProcedure;
import gnu.trove.procedure.TFloatProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedByteFloatMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.put(BF)F: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedByteFloatMap.<init>(Lgnu/trove/map/TByteFloatMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      tSynchronizedByteFloatMap0.put((byte)8, (byte)8);
      assertEquals(false, tByteFloatHashMap0.isEmpty());
      assertEquals("{8=8.0}", tSynchronizedByteFloatMap0.toString());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.getNoEntryKey()B: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(57955729, 57955729);
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      byte byte0 = tSynchronizedByteFloatMap0.getNoEntryKey();
      assertEquals((byte)0, byte0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.forEachKey(Lgnu/trove/procedure/TByteProcedure;)Z: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(57955729, 57955729);
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      boolean boolean0 = tSynchronizedByteFloatMap0.forEachKey((TByteProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.keys([B)[B: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(18366923, (float) 18366923, (byte)59, (float) (byte)59);
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      byte[] byteArray0 = tSynchronizedByteFloatMap0.keys(tByteFloatHashMap0._states);
      assertNotNull(byteArray0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.increment(B)Z: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(57955729, 57955729);
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      boolean boolean0 = tSynchronizedByteFloatMap0.increment((byte)0);
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.remove(B)F: root-Branch
   */

//   @Test
//   public void test5()  throws Throwable  {
//       TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
//       TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
//       float float0 = tSynchronizedByteFloatMap0.remove((byte)8);
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.keys()[B: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(18366923, (float) 18366923, (byte)59, (float) (byte)59);
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      byte[] byteArray0 = tSynchronizedByteFloatMap0.keys();
      assertNotNull(byteArray0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(57955729, 57955729);
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      String string0 = tSynchronizedByteFloatMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.putAll(Lgnu/trove/map/TByteFloatMap;)V: root-Branch
   */

//   @Test
//   public void test8()  throws Throwable  {
//       TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(1925, 1925);
//       TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
//       tSynchronizedByteFloatMap0.putAll((TByteFloatMap) tByteFloatHashMap0);
//       assertEquals(0, tSynchronizedByteFloatMap0.getNoEntryKey());
//   }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.values([F)[F: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      float[] floatArray0 = new float[1];
      float[] floatArray1 = tSynchronizedByteFloatMap0.values(floatArray0);
      assertSame(floatArray0, floatArray1);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.adjustOrPutValue(BFF)F: root-Branch
   */

//   @Test
//   public void test10()  throws Throwable  {
//       TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap((-1156));
//       TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
//       float float0 = tSynchronizedByteFloatMap0.adjustOrPutValue((byte)24, (byte)24, (byte)24);
//       assertEquals(false, tByteFloatHashMap0.isEmpty());
//       assertEquals(24.0F, float0, 0.01F);
//   }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.putIfAbsent(BF)F: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      tSynchronizedByteFloatMap0.putIfAbsent((byte)8, (byte)8);
      assertEquals(1, tByteFloatHashMap0.size());
      assertEquals("{8=8.0}", tByteFloatHashMap0.toString());
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.getNoEntryValue()F: root-Branch
   */

//   @Test
//   public void test12()  throws Throwable  {
//       TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
//       TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
//       float float0 = tSynchronizedByteFloatMap0.getNoEntryValue();
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.adjustValue(BF)Z: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(18366923, (float) 18366923, (byte)59, (float) (byte)59);
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      boolean boolean0 = tSynchronizedByteFloatMap0.adjustValue((byte)59, (float) 18366923);
      assertEquals(false, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.equals(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      Object object0 = new Object();
      boolean boolean0 = tSynchronizedByteFloatMap0.equals(object0);
      assertEquals(false, boolean0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.containsValue(F)Z: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(57955729, 57955729);
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      boolean boolean0 = tSynchronizedByteFloatMap0.containsValue((float) (byte)0);
      assertEquals(false, boolean0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.get(B)F: root-Branch
   */

//   @Test
//   public void test16()  throws Throwable  {
//       byte[] byteArray0 = new byte[17];
//       float[] floatArray0 = new float[5];
//       TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(byteArray0, floatArray0);
//       TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
//       float float0 = tSynchronizedByteFloatMap0.get((byte)0);
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.iterator()Lgnu/trove/iterator/TByteFloatIterator;: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      TByteFloatIterator tByteFloatIterator0 = tSynchronizedByteFloatMap0.iterator();
      assertEquals(false, tByteFloatIterator0.hasNext());
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(18366923, (float) 18366923, (byte)59, (float) (byte)59);
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      tSynchronizedByteFloatMap0.transformValues((TFloatFunction) null);
      assertEquals("{}", tSynchronizedByteFloatMap0.toString());
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      float[] floatArray0 = new float[5];
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(byteArray0, floatArray0);
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      tSynchronizedByteFloatMap0.putAll((Map<? extends Byte, ? extends Float>) hashMap0);
      assertEquals("{}", hashMap0.toString());
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(57955729, 57955729);
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      boolean boolean0 = tSynchronizedByteFloatMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.containsKey(B)Z: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(18366923, (float) 18366923, (byte)59, (float) (byte)59);
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      boolean boolean0 = tSynchronizedByteFloatMap0.containsKey((byte)59);
      assertEquals(false, boolean0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.clear()V: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(18366923, (float) 18366923, (byte)59, (float) (byte)59);
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      tSynchronizedByteFloatMap0.clear();
      assertEquals("{}", tSynchronizedByteFloatMap0.toString());
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.size()I: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(57955729, 57955729);
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      int int0 = tSynchronizedByteFloatMap0.size();
      assertEquals(0, int0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.values()[F: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      float[] floatArray0 = tSynchronizedByteFloatMap0.values();
      assertNotNull(floatArray0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.forEachEntry(Lgnu/trove/procedure/TByteFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(18366923, (float) 18366923, (byte)59, (float) (byte)59);
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      boolean boolean0 = tSynchronizedByteFloatMap0.forEachEntry((TByteFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.hashCode()I: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(1925, 1925);
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      int int0 = tSynchronizedByteFloatMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(1925, 1925);
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      boolean boolean0 = tSynchronizedByteFloatMap0.forEachValue((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.retainEntries(Lgnu/trove/procedure/TByteFloatProcedure;)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedByteFloatMap.<init>(Lgnu/trove/map/TByteFloatMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test28()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(1530);
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0, (Object) "17");
      boolean boolean0 = tSynchronizedByteFloatMap0.retainEntries((TByteFloatProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.<init>(Lgnu/trove/map/TByteFloatMap;)V: I17 Branch 1 IFNONNULL L59 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = null;
      try {
        tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.keySet()Lgnu/trove/set/TByteSet;: I11 Branch 2 IFNONNULL L107 - true
   * 2 gnu.trove.impl.sync.TSynchronizedByteFloatMap.keySet()Lgnu/trove/set/TByteSet;: I11 Branch 2 IFNONNULL L107 - false
   */

  @Test
  public void test30()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(1925, 1925);
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      TSynchronizedByteSet tSynchronizedByteSet0 = (TSynchronizedByteSet)tSynchronizedByteFloatMap0.keySet();
      assertNotNull(tSynchronizedByteSet0);
      
      TSynchronizedByteSet tSynchronizedByteSet1 = (TSynchronizedByteSet)tSynchronizedByteFloatMap0.keySet();
      assertSame(tSynchronizedByteSet1, tSynchronizedByteSet0);
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedByteFloatMap.valueCollection()Lgnu/trove/TFloatCollection;: I11 Branch 3 IFNONNULL L121 - true
   * 2 gnu.trove.impl.sync.TSynchronizedByteFloatMap.valueCollection()Lgnu/trove/TFloatCollection;: I11 Branch 3 IFNONNULL L121 - false
   * 3 gnu.trove.impl.sync.TSynchronizedByteFloatMap.<init>(Lgnu/trove/map/TByteFloatMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test31()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
      TSynchronizedByteFloatMap tSynchronizedByteFloatMap0 = new TSynchronizedByteFloatMap((TByteFloatMap) tByteFloatHashMap0);
      TSynchronizedFloatCollection tSynchronizedFloatCollection0 = (TSynchronizedFloatCollection)tSynchronizedByteFloatMap0.valueCollection();
      assertNotNull(tSynchronizedFloatCollection0);
      
      TSynchronizedFloatCollection tSynchronizedFloatCollection1 = (TSynchronizedFloatCollection)tSynchronizedByteFloatMap0.valueCollection();
      assertSame(tSynchronizedFloatCollection1, tSynchronizedFloatCollection0);
  }
}
