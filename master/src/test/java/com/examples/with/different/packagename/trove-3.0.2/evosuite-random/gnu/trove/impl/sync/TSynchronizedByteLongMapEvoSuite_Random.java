/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedByteLongMap;
import gnu.trove.impl.sync.TSynchronizedByteSet;
import gnu.trove.iterator.TByteLongIterator;
import gnu.trove.map.TByteLongMap;
import gnu.trove.map.hash.TByteLongHashMap;
import gnu.trove.procedure.TByteLongProcedure;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedByteLongMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)94;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-18);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-32);
      byteArray0[3] = byte3;
      byte byte4 = (byte)91;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-92);
      byteArray0[5] = byte5;
      byte byte6 = (byte)119;
      byteArray0[6] = byte6;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) byte4;
      longArray0[1] = (long) byteArray0[1];
      longArray0[2] = (long) byte4;
      longArray0[3] = (long) byte3;
      longArray0[4] = (long) byteArray0[4];
      longArray0[5] = (long) byte5;
      longArray0[6] = (long) byteArray0[4];
      long long0 = 0L;
      longArray0[7] = long0;
      longArray0[8] = (long) byteArray0[1];
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(byteArray0, longArray0);
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getScript();
      TSynchronizedByteLongMap tSynchronizedByteLongMap0 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap0, (Object) string0);
      byte byte7 = (byte)0;
      boolean boolean0 = tSynchronizedByteLongMap0.containsKey(byte7);
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap();
      tByteLongHashMap0.toString();
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap((TByteLongMap) tByteLongHashMap0);
      String string0 = "";
      Locale locale0 = new Locale(string0, string0, string0);
      String string1 = locale0.getCountry();
      TSynchronizedByteLongMap tSynchronizedByteLongMap0 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap1, (Object) string1);
      byte byte0 = (byte)0;
      tSynchronizedByteLongMap0.increment(byte0);
      byte byte1 = (byte) (-107);
      long long0 = tSynchronizedByteLongMap0.adjustOrPutValue(byte1, byte1, byte1);
      assertEquals(false, tByteLongHashMap1.isEmpty());
      assertEquals((-107L), long0);
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)57;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-121);
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap();
      TSynchronizedByteLongMap tSynchronizedByteLongMap0 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap0);
      tSynchronizedByteLongMap0.size();
      Locale locale0 = Locale.ITALY;
      String string0 = locale0.toString();
      TSynchronizedByteLongMap tSynchronizedByteLongMap1 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap0, (Object) string0);
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap((TByteLongMap) tSynchronizedByteLongMap1);
      tByteLongHashMap0.increment(byte1);
      TSynchronizedByteLongMap tSynchronizedByteLongMap2 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap1);
      TSynchronizedByteLongMap tSynchronizedByteLongMap3 = new TSynchronizedByteLongMap((TByteLongMap) tSynchronizedByteLongMap2);
      tSynchronizedByteLongMap3.values();
      byteArray0[1] = byte1;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) byte1;
      longArray0[1] = (long) byte0;
      long long0 = (-1312L);
      tSynchronizedByteLongMap3.putIfAbsent(byteArray0[0], long0);
      assertEquals(false, tByteLongHashMap1.isEmpty());
      
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) byte1;
      longArray0[4] = (long) byte0;
      longArray0[5] = (long) byte0;
      longArray0[6] = (long) byteArray0[1];
      TByteLongHashMap tByteLongHashMap2 = new TByteLongHashMap(byteArray0, longArray0);
      String string1 = File.pathSeparator;
      TSynchronizedByteLongMap tSynchronizedByteLongMap4 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap2, (Object) string1);
      tSynchronizedByteLongMap4.getNoEntryValue();
      assertEquals(2, tSynchronizedByteLongMap4.size());
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)64;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-42);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-17);
      byteArray0[2] = byte2;
      byte byte3 = (byte)9;
      byteArray0[3] = byte3;
      byte byte4 = (byte)77;
      byteArray0[4] = byte4;
      byte byte5 = (byte)37;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-48);
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      byteArray0[8] = byte8;
      byte byte9 = (byte)121;
      byteArray0[9] = byte9;
      long[] longArray0 = new long[10];
      longArray0[0] = (long) byte8;
      longArray0[1] = (long) byteArray0[8];
      longArray0[2] = (long) byteArray0[7];
      longArray0[3] = (long) byteArray0[8];
      longArray0[4] = (long) byteArray0[7];
      longArray0[5] = (long) byteArray0[8];
      longArray0[6] = (long) byte3;
      int int0 = 0;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int0);
      TSynchronizedByteLongMap tSynchronizedByteLongMap0 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap0);
      tSynchronizedByteLongMap0.size();
      longArray0[7] = (long) byte9;
      longArray0[8] = (long) byte8;
      longArray0[9] = (long) byte4;
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap(byteArray0, longArray0);
      TSynchronizedByteLongMap tSynchronizedByteLongMap1 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap1);
      assertEquals(9, tSynchronizedByteLongMap1.size());
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)103;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-13);
      byteArray0[1] = byte1;
      byte byte2 = (byte)19;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-86);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)1;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-64);
      byteArray0[7] = byte7;
      byte byte8 = (byte)10;
      byteArray0[8] = byte8;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) byte8;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(byteArray0, longArray0);
      Locale locale0 = Locale.ENGLISH;
      String string0 = locale0.getVariant();
      TSynchronizedByteLongMap tSynchronizedByteLongMap0 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap0, (Object) string0);
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap((TByteLongMap) tSynchronizedByteLongMap0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      String string1 = hashMap0.toString();
      TSynchronizedByteLongMap tSynchronizedByteLongMap1 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap1, (Object) string1);
      assertEquals(1, tSynchronizedByteLongMap0.size());
      assertTrue(tSynchronizedByteLongMap1.equals(tSynchronizedByteLongMap0));
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)29;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-1);
      byteArray0[3] = byte3;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) byteArray0[2];
      longArray0[1] = (long) byte1;
      longArray0[2] = (long) byteArray0[3];
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(byteArray0, longArray0);
      TSynchronizedByteLongMap tSynchronizedByteLongMap0 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap0);
      int int0 = 1644;
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap(int0);
      Locale locale0 = Locale.ITALIAN;
      char char0 = '(';
      // Undeclared exception!
      try {
        locale0.getExtension(char0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed extension key: (
         //
      }
  }

//   @Test
//   public void test6()  throws Throwable  {
//       int int0 = 958;
//       float float0 = 1769.5345F;
//       TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int0, float0);
//       String string0 = "dM\"7i1/Ll;?{%kn";
//       TSynchronizedByteLongMap tSynchronizedByteLongMap0 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap0, (Object) string0);
//       TSynchronizedByteLongMap tSynchronizedByteLongMap1 = new TSynchronizedByteLongMap((TByteLongMap) tSynchronizedByteLongMap0);
//       assertEquals(0, tSynchronizedByteLongMap1.getNoEntryKey());
//   }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-52);
      byteArray0[0] = byte0;
      byte byte1 = (byte)23;
      byteArray0[1] = byte1;
      byte byte2 = (byte)1;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-1);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) byteArray0[3];
      longArray0[1] = (long) byte1;
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) byteArray0[1];
      longArray0[4] = (long) byte0;
      longArray0[5] = (long) byteArray0[1];
      longArray0[6] = (long) byteArray0[1];
      longArray0[7] = (long) byteArray0[3];
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(byteArray0, longArray0);
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = locale0.getDisplayName();
      TSynchronizedByteLongMap tSynchronizedByteLongMap0 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap0, (Object) string0);
      TSynchronizedByteLongMap tSynchronizedByteLongMap1 = new TSynchronizedByteLongMap((TByteLongMap) tSynchronizedByteLongMap0);
      TSynchronizedByteLongMap tSynchronizedByteLongMap2 = new TSynchronizedByteLongMap((TByteLongMap) tSynchronizedByteLongMap1);
      byte byte5 = (byte)0;
      long long0 = 924L;
      boolean boolean0 = tSynchronizedByteLongMap2.adjustValue(byte5, long0);
      assertEquals("{0=872, -52=-1, 23=23, 1=-52, -1=23}", tByteLongHashMap0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 242;
      float float0 = 115.33785F;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int0, float0);
      TSynchronizedByteLongMap tSynchronizedByteLongMap0 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap0);
      boolean boolean0 = tSynchronizedByteLongMap0.containsValue((long) int0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap();
      TSynchronizedByteLongMap tSynchronizedByteLongMap0 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap0);
      tSynchronizedByteLongMap0.keys();
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap(int0);
      byte byte0 = (byte)88;
      long long0 = 304L;
      tByteLongHashMap1.putIfAbsent(byte0, long0);
      String string0 = Byte.toString(byte0);
      TSynchronizedByteLongMap tSynchronizedByteLongMap1 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap1, (Object) string0);
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      int int0 = 125;
      byte byte0 = (byte)0;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int0, (float) int0, byte0, (long) byte0);
      Object object0 = null;
      TSynchronizedByteLongMap tSynchronizedByteLongMap0 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap0, object0);
      byte byte1 = (byte)10;
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-107);
      byteArray0[1] = byte2;
      byte byte3 = (byte)0;
      byteArray0[2] = byte3;
      byte byte4 = (byte)124;
      byteArray0[3] = byte4;
      byte byte5 = (byte)1;
      byteArray0[4] = byte5;
      byte byte6 = (byte)81;
      byteArray0[5] = byte6;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) byteArray0[3];
      longArray0[1] = (long) byteArray0[2];
      longArray0[2] = (long) byte6;
      longArray0[0] = (long) byteArray0[1];
      long long0 = 780L;
      longArray0[1] = long0;
      longArray0[2] = (long) byteArray0[2];
      longArray0[3] = (long) int0;
      longArray0[3] = (long) byteArray0[3];
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap(byteArray0, longArray0);
      String string0 = "end index > size: ";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: end index > size: ://end%20index%20%3E%20size:%20end%20index%20%3E%20size:%20?end%20index%20%3E%20size:%20#end%20index%20%3E%20size:%20
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-418);
      byte byte0 = (byte) (-1);
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int0, (float) int0, byte0, (long) int0);
      TSynchronizedByteLongMap tSynchronizedByteLongMap0 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap0);
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap((TByteLongMap) tSynchronizedByteLongMap0);
      TSynchronizedByteLongMap tSynchronizedByteLongMap1 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap1);
      tSynchronizedByteLongMap1.getNoEntryValue();
      assertEquals((-418L), tSynchronizedByteLongMap0.getNoEntryValue());
  }

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)122;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-78);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-89);
      byteArray0[3] = byte3;
      byte byte4 = (byte)8;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-35);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-1);
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-1);
      byteArray0[7] = byte7;
      long[] longArray0 = new long[10];
      long long0 = 570L;
      longArray0[0] = long0;
      long long1 = 1376L;
      longArray0[1] = long1;
      longArray0[2] = (long) byteArray0[5];
      longArray0[3] = (long) byte0;
      long long2 = 0L;
      longArray0[4] = long2;
      longArray0[5] = (long) byteArray0[3];
      longArray0[6] = (long) byte2;
      longArray0[7] = (long) byte3;
      longArray0[8] = (long) byteArray0[3];
      longArray0[9] = (long) byteArray0[3];
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(byteArray0, longArray0);
      String string0 = "{";
      String string1 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: {://%7B%7B?%7B#
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap();
      TSynchronizedByteLongMap tSynchronizedByteLongMap0 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap0);
      byte byte0 = (byte) (-1);
      tSynchronizedByteLongMap0.get(byte0);
      float float0 = 0.0F;
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap();
      byte byte1 = (byte)0;
      String string0 = Byte.toString(byte1);
      TSynchronizedByteLongMap tSynchronizedByteLongMap1 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap1);
      TByteLongProcedure tByteLongProcedure0 = null;
      tSynchronizedByteLongMap1.retainEntries(tByteLongProcedure0);
      TSynchronizedByteLongMap tSynchronizedByteLongMap2 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap1, (Object) string0);
      TByteLongIterator tByteLongIterator0 = tSynchronizedByteLongMap2.iterator();
      assertNotNull(tByteLongIterator0);
      
      TSynchronizedByteSet tSynchronizedByteSet0 = (TSynchronizedByteSet)tSynchronizedByteLongMap2.keySet();
      assertNotNull(tSynchronizedByteSet0);
      
      TByteLongHashMap tByteLongHashMap2 = new TByteLongHashMap(int0, float0);
      String string1 = Long.toString((long) int0);
      byte byte2 = (byte)0;
      Byte byte3 = new Byte(byte2);
      TSynchronizedByteLongMap tSynchronizedByteLongMap3 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap2, (Object) byte3);
      boolean boolean0 = tSynchronizedByteLongMap2.isEmpty();
      assertEquals(true, boolean0);
      
      tByteLongHashMap0.size();
      tSynchronizedByteLongMap3.keySet();
      TSynchronizedByteLongMap tSynchronizedByteLongMap4 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap2, (Object) string1);
      String string2 = File.separator;
      tSynchronizedByteLongMap2.equals((Object) string2);
      byte byte4 = (byte)119;
      tSynchronizedByteLongMap4.remove(byte4);
      boolean boolean1 = tSynchronizedByteLongMap2.containsKey((byte) byte3);
      assertTrue(tSynchronizedByteLongMap2.equals(tSynchronizedByteLongMap0));
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      TByteLongMap tByteLongMap0 = null;
      String string0 = "Vw&O\"q+JYX";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 4: Vw&O\"q+JYX
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-4);
      byteArray0[0] = byte0;
      byte byte1 = (byte)113;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-87);
      byteArray0[3] = byte3;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) byte0;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(byteArray0, longArray0);
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap((TByteLongMap) tByteLongHashMap0);
      String string0 = "";
      File file0 = new File(string0, string0);
      String string1 = file0.toString();
      TSynchronizedByteLongMap tSynchronizedByteLongMap0 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap1, (Object) string1);
      long long0 = (-1435L);
      tSynchronizedByteLongMap0.adjustValue(byteArray0[0], long0);
      TByteLongMap tByteLongMap0 = null;
      TSynchronizedByteLongMap tSynchronizedByteLongMap1 = null;
      try {
        tSynchronizedByteLongMap1 = new TSynchronizedByteLongMap(tByteLongMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = (-595);
      byte byte0 = (byte)67;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int0, (float) int0, byte0, (long) int0);
      TSynchronizedByteLongMap tSynchronizedByteLongMap0 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap0);
      long[] longArray0 = tSynchronizedByteLongMap0.values();
      assertNotNull(longArray0);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)15;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-93);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) byte3;
      long long0 = (-97L);
      longArray0[1] = long0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) byteArray0[5];
      long long1 = 1L;
      longArray0[4] = long1;
      longArray0[5] = (long) byte1;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(byteArray0, longArray0);
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap((TByteLongMap) tByteLongHashMap0);
      String string0 = "";
      URI uRI0 = new URI(string0);
      String string1 = uRI0.getScheme();
      TSynchronizedByteLongMap tSynchronizedByteLongMap0 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap1, (Object) string1);
      // Undeclared exception!
      try {
        tSynchronizedByteLongMap0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 25717;
      int int1 = 1;
      float float0 = 0.0F;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int1, float0);
      TSynchronizedByteLongMap tSynchronizedByteLongMap0 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap0);
      TSynchronizedByteLongMap tSynchronizedByteLongMap1 = new TSynchronizedByteLongMap((TByteLongMap) tSynchronizedByteLongMap0);
      byte byte0 = (byte)0;
      long long0 = (-1324L);
      tSynchronizedByteLongMap1.adjustValue(byte0, long0);
      float float1 = 1343.3195F;
      byte byte1 = (byte) (-44);
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap(int1, float1, byte1, (long) int1);
      TSynchronizedByteLongMap tSynchronizedByteLongMap2 = new TSynchronizedByteLongMap((TByteLongMap) tByteLongHashMap1);
      float float2 = 0.0F;
      byte byte2 = (byte)0;
      long long1 = 0L;
      TByteLongHashMap tByteLongHashMap2 = new TByteLongHashMap();
      tSynchronizedByteLongMap2.size();
      String string0 = "=";
      tSynchronizedByteLongMap2.clear();
      boolean boolean0 = false;
      tByteLongHashMap1.reenableAutoCompaction(boolean0);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: =://==#=
         //
      }
  }
}
