/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TLongObjectMap;
import gnu.trove.map.hash.TLongObjectHashMap;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.RandomAccessFile;
import java.util.AbstractMap;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TLongObjectHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TLongObjectHashMap<Long> tLongObjectHashMap0 = new TLongObjectHashMap<Long>();
      tLongObjectHashMap0.trimToSize();
      tLongObjectHashMap0.getNoEntryKey();
      int int0 = 1501;
      TLongObjectHashMap<Integer> tLongObjectHashMap1 = new TLongObjectHashMap<Integer>(int0);
      int int1 = (-1800);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TLongObjectHashMap<Integer> tLongObjectHashMap0 = new TLongObjectHashMap<Integer>();
      long long0 = (-355L);
      tLongObjectHashMap0.get(long0);
      assertEquals(23, tLongObjectHashMap0.capacity());
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-1);
      float float0 = (-1600.5547F);
      TLongObjectHashMap<Long> tLongObjectHashMap0 = new TLongObjectHashMap<Long>(int0, float0);
      assertEquals("{}", tLongObjectHashMap0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 958;
      int int1 = (-303);
      TLongObjectHashMap<String> tLongObjectHashMap0 = new TLongObjectHashMap<String>(int1);
      tLongObjectHashMap0.iterator();
      int int2 = 0;
      TLongObjectHashMap<Long> tLongObjectHashMap1 = new TLongObjectHashMap<Long>(int2);
      long long0 = (-264L);
      TLongObjectHashMap<String> tLongObjectHashMap2 = new TLongObjectHashMap<String>(int0, (float) int0, long0);
      String string0 = Long.toString((long) int0, int0);
      long long1 = (-1114L);
      float float0 = (-1668.623F);
      long long2 = 270L;
      TLongObjectHashMap<TLongObjectHashMap<Long>> tLongObjectHashMap3 = new TLongObjectHashMap<TLongObjectHashMap<Long>>(int0, float0, long2);
      long long3 = (-9223372036854775808L);
      tLongObjectHashMap3.remove(long3);
      assertEquals(true, tLongObjectHashMap3.isEmpty());
      
      tLongObjectHashMap2.getAutoCompactionFactor();
      tLongObjectHashMap2.get(long1);
      boolean boolean0 = tLongObjectHashMap2.containsValue((Object) string0);
      assertEquals(false, boolean0);
      
      tLongObjectHashMap2.valueCollection();
      byte[] byteArray0 = tLongObjectHashMap1._states;
      byte[] byteArray1 = tLongObjectHashMap2._states;
      float float1 = (-771.6126F);
      // Undeclared exception!
      try {
        tLongObjectHashMap2.setAutoCompactionFactor(float1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -771.6126
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      TLongObjectHashMap<Integer> tLongObjectHashMap0 = new TLongObjectHashMap<Integer>(int0);
      TLongObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>> tLongObjectHashMap1 = new TLongObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>>(int0);
      String string0 = "DEFAULT_FLOAT_NO_ENTRY_VALUE: ";
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"DEFAULT_FLOAT_NO_ENTRY_VALUE: \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-1);
      int int1 = (-381);
      float float0 = 0.5F;
      TLongObjectHashMap<TLongObjectHashMap<Integer>> tLongObjectHashMap0 = new TLongObjectHashMap<TLongObjectHashMap<Integer>>(int1, float0);
      TLongObjectHashMap<Object> tLongObjectHashMap1 = new TLongObjectHashMap<Object>((TLongObjectMap<?>) tLongObjectHashMap0);
      tLongObjectHashMap1.capacity();
      assertEquals(0L, tLongObjectHashMap1.getNoEntryKey());
      
      TLongObjectHashMap<AbstractMap.SimpleEntry<Long, Integer>> tLongObjectHashMap2 = new TLongObjectHashMap<AbstractMap.SimpleEntry<Long, Integer>>(int0, int0);
      assertEquals("{}", tLongObjectHashMap2.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 1994;
      int int1 = 1075;
      TLongObjectHashMap<String> tLongObjectHashMap0 = new TLongObjectHashMap<String>(int1, int0, int0);
      long long0 = 1L;
      TLongObjectHashMap<Integer> tLongObjectHashMap1 = new TLongObjectHashMap<Integer>(int0, (float) int0, long0);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) int0;
      integerArray0[1] = (Integer) int0;
      integerArray0[2] = (Integer) int0;
      integerArray0[3] = (Integer) int0;
      integerArray0[4] = (Integer) int0;
      tLongObjectHashMap1.values();
      integerArray0[5] = (Integer) int0;
      integerArray0[6] = (Integer) int0;
      integerArray0[7] = (Integer) int0;
      int int2 = 0;
      TLongObjectHashMap<Long> tLongObjectHashMap2 = new TLongObjectHashMap<Long>(int2);
      OutputStream outputStream0 = null;
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TLongObjectHashMap<String> tLongObjectHashMap0 = new TLongObjectHashMap<String>();
      tLongObjectHashMap0.getNoEntryValue();
      assertEquals(23, tLongObjectHashMap0.capacity());
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      TLongObjectHashMap<String> tLongObjectHashMap0 = new TLongObjectHashMap<String>(int1, int0, int1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }
}
