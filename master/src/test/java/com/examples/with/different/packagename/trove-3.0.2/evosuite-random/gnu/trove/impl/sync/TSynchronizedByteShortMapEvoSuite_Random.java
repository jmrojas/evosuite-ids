/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedByteShortMap;
import gnu.trove.map.TByteShortMap;
import gnu.trove.map.hash.TByteShortHashMap;
import gnu.trove.procedure.TByteShortProcedure;
import gnu.trove.procedure.TShortProcedure;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedByteShortMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 14488931;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byteArray0[0];
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      Locale locale0 = Locale.ITALIAN;
      String string0 = locale0.getDisplayName();
      TSynchronizedByteShortMap tSynchronizedByteShortMap0 = new TSynchronizedByteShortMap((TByteShortMap) tByteShortHashMap0, (Object) string0);
      TSynchronizedByteShortMap tSynchronizedByteShortMap1 = new TSynchronizedByteShortMap((TByteShortMap) tSynchronizedByteShortMap0);
      short[] shortArray1 = new short[6];
      shortArray1[0] = (short) byteArray0[0];
      shortArray1[1] = (short) byteArray0[0];
      shortArray1[2] = (short) byte0;
      shortArray1[3] = (short) byteArray0[0];
      shortArray1[4] = (short) byte0;
      shortArray1[5] = (short) byte0;
      short[] shortArray2 = tSynchronizedByteShortMap1.values(shortArray1);
      assertNotNull(shortArray2);
      
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap(int0, int0);
      TSynchronizedByteShortMap tSynchronizedByteShortMap2 = new TSynchronizedByteShortMap((TByteShortMap) tByteShortHashMap1);
      tSynchronizedByteShortMap2.size();
      int int1 = 430;
      float float0 = (-846.42096F);
      TByteShortHashMap tByteShortHashMap2 = new TByteShortHashMap(int1, float0);
      TSynchronizedByteShortMap tSynchronizedByteShortMap3 = new TSynchronizedByteShortMap((TByteShortMap) tByteShortHashMap2);
      byte byte1 = (byte) (-1);
      short short0 = (short)1648;
      tSynchronizedByteShortMap3.adjustValue(byte1, short0);
      byte byte2 = (byte)0;
      float float1 = 0.0F;
      tByteShortHashMap2.setAutoCompactionFactor(float1);
      short short1 = (short) (-1654);
      TByteShortHashMap tByteShortHashMap3 = new TByteShortHashMap(int1, (float) int1, byte2, short1);
      boolean boolean0 = false;
      tByteShortHashMap3.reenableAutoCompaction(boolean0);
      TSynchronizedByteShortMap tSynchronizedByteShortMap4 = new TSynchronizedByteShortMap((TByteShortMap) tByteShortHashMap3);
      float float2 = 0.0F;
      TByteShortHashMap tByteShortHashMap4 = new TByteShortHashMap(int0, float2);
      TShortProcedure tShortProcedure0 = null;
      boolean boolean1 = tSynchronizedByteShortMap4.forEachValue(tShortProcedure0);
      TSynchronizedByteShortMap tSynchronizedByteShortMap5 = new TSynchronizedByteShortMap((TByteShortMap) tByteShortHashMap4);
      TByteShortProcedure tByteShortProcedure0 = null;
      boolean boolean2 = tSynchronizedByteShortMap5.forEachEntry(tByteShortProcedure0);
      assertTrue(boolean2 == boolean1);
      assertFalse(tSynchronizedByteShortMap5.equals(tSynchronizedByteShortMap1));
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 2036;
      float float0 = (-1787.9366F);
      int int1 = (-1432);
      float float1 = (-743.7835F);
      byte byte0 = (byte) (-89);
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int1, float1, byte0, (short) byte0);
      Object object0 = null;
      TSynchronizedByteShortMap tSynchronizedByteShortMap0 = new TSynchronizedByteShortMap((TByteShortMap) tByteShortHashMap0, object0);
      TSynchronizedByteShortMap tSynchronizedByteShortMap1 = new TSynchronizedByteShortMap((TByteShortMap) tSynchronizedByteShortMap0);
      // Undeclared exception!
      try {
        tSynchronizedByteShortMap1.valueCollection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-996);
      float float0 = 1.0F;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0, float0);
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap((TByteShortMap) tByteShortHashMap0);
      TSynchronizedByteShortMap tSynchronizedByteShortMap0 = new TSynchronizedByteShortMap((TByteShortMap) tByteShortHashMap1);
      TSynchronizedByteShortMap tSynchronizedByteShortMap1 = new TSynchronizedByteShortMap((TByteShortMap) tSynchronizedByteShortMap0);
      tSynchronizedByteShortMap1.toString();
      TByteShortMap tByteShortMap0 = null;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      char char0 = 'q';
      byte byte0 = (byte)117;
      tByteShortHashMap1.remove(byte0);
      String string0 = locale0.getExtension(char0);
      tSynchronizedByteShortMap0.valueCollection();
      TSynchronizedByteShortMap tSynchronizedByteShortMap2 = new TSynchronizedByteShortMap(tByteShortMap0, (Object) string0);
      TSynchronizedByteShortMap tSynchronizedByteShortMap3 = new TSynchronizedByteShortMap((TByteShortMap) tSynchronizedByteShortMap2);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) byte1;
      shortArray0[1] = (short) byte1;
      shortArray0[2] = (short) byte1;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      String string0 = " greater than last index ";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 0:  greater than last index 
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-1);
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0);
      tByteShortHashMap0.size();
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap((TByteShortMap) tByteShortHashMap0);
      Locale locale0 = Locale.JAPANESE;
      TSynchronizedByteShortMap tSynchronizedByteShortMap0 = new TSynchronizedByteShortMap((TByteShortMap) tByteShortHashMap1);
      String string0 = locale0.getDisplayCountry();
      TSynchronizedByteShortMap tSynchronizedByteShortMap1 = new TSynchronizedByteShortMap((TByteShortMap) tByteShortHashMap1, (Object) string0);
      String string1 = tByteShortHashMap0.toString();
      TSynchronizedByteShortMap tSynchronizedByteShortMap2 = new TSynchronizedByteShortMap((TByteShortMap) tByteShortHashMap1, (Object) string1);
      TSynchronizedByteShortMap tSynchronizedByteShortMap3 = new TSynchronizedByteShortMap((TByteShortMap) tSynchronizedByteShortMap1);
      tSynchronizedByteShortMap3.values();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      URI uRI0 = null;
      try {
        uRI0 = new URI(string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 0: {}
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-434);
      float float0 = 109.46695F;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0, float0);
      TSynchronizedByteShortMap tSynchronizedByteShortMap0 = new TSynchronizedByteShortMap((TByteShortMap) tByteShortHashMap0);
      int int1 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int1);
      String string0 = "=";
      byte byte0 = (byte)41;
      Locale locale0 = Locale.GERMANY;
      String string1 = locale0.getCountry();
      TSynchronizedByteShortMap tSynchronizedByteShortMap1 = new TSynchronizedByteShortMap((TByteShortMap) tByteShortHashMap0, (Object) string1);
      tSynchronizedByteShortMap1.increment(byte0);
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap((TByteShortMap) tSynchronizedByteShortMap0);
      TSynchronizedByteShortMap tSynchronizedByteShortMap2 = new TSynchronizedByteShortMap((TByteShortMap) tByteShortHashMap1);
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-1516);
      float float0 = 186.75072F;
      byte byte0 = (byte) (-15);
      short short0 = (short)1371;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0, float0, byte0, short0);
      String string0 = "!";
      String string1 = "tC5 lv^FfI%P}5HOI";
      File file0 = new File(string0, string1);
      File file1 = file0.getParentFile();
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0, file1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TByteShortMap tByteShortMap0 = null;
      String string0 = "A5.x0vdS^ 5eg6D";
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"A5.x0vdS^ 5eg6D\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-27);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-66);
      byteArray0[3] = byte3;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) byte1;
      shortArray0[1] = (short) byteArray0[3];
      shortArray0[2] = (short) byte3;
      shortArray0[3] = (short) byte3;
      shortArray0[4] = (short) byteArray0[0];
      shortArray0[5] = (short) byte3;
      shortArray0[6] = (short) byteArray0[2];
      shortArray0[7] = (short) byteArray0[0];
      shortArray0[8] = (short) byteArray0[1];
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      String string0 = Short.toString((short) byteArray0[3]);
      TSynchronizedByteShortMap tSynchronizedByteShortMap0 = new TSynchronizedByteShortMap((TByteShortMap) tByteShortHashMap0, (Object) string0);
      tSynchronizedByteShortMap0.hashCode();
      TByteShortMap tByteShortMap0 = null;
      Locale locale0 = Locale.CHINESE;
      locale0.getLanguage();
      byte byte4 = (byte)0;
      Byte byte5 = new Byte(byte4);
      TSynchronizedByteShortMap tSynchronizedByteShortMap1 = new TSynchronizedByteShortMap(tByteShortMap0, (Object) byte5);
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      TSynchronizedByteShortMap tSynchronizedByteShortMap2 = null;
      try {
        tSynchronizedByteShortMap2 = new TSynchronizedByteShortMap(tByteShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-269);
      TByteShortMap tByteShortMap0 = null;
      TSynchronizedByteShortMap tSynchronizedByteShortMap0 = null;
      try {
        tSynchronizedByteShortMap0 = new TSynchronizedByteShortMap(tByteShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-405);
      float float0 = 0.0F;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0, float0);
      String string0 = "no elemenet at ";
      File file0 = new File(string0, string0);
      File file1 = file0.getParentFile();
      URI uRI0 = file1.toURI();
      String string1 = uRI0.getAuthority();
      TSynchronizedByteShortMap tSynchronizedByteShortMap0 = new TSynchronizedByteShortMap((TByteShortMap) tByteShortHashMap0, (Object) string1);
      // Undeclared exception!
      try {
        tSynchronizedByteShortMap0.keySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-34);
      byteArray0[2] = byte2;
      byte byte3 = (byte)41;
      byteArray0[3] = byte3;
      byte byte4 = (byte)81;
      byteArray0[4] = byte4;
      byte byte5 = (byte)40;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-9);
      byteArray0[7] = byte7;
      byte byte8 = (byte)115;
      byteArray0[8] = byte8;
      byte byte9 = (byte) (-105);
      byteArray0[9] = byte9;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) byte9;
      shortArray0[1] = (short) byteArray0[8];
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byteArray0[8];
      shortArray0[4] = (short) byteArray0[8];
      shortArray0[5] = (short) byte9;
      shortArray0[6] = (short) byte2;
      shortArray0[7] = (short) byte1;
      shortArray0[8] = (short) byte0;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      TSynchronizedByteShortMap tSynchronizedByteShortMap0 = new TSynchronizedByteShortMap((TByteShortMap) tByteShortHashMap0);
      TShortProcedure tShortProcedure0 = null;
      // Undeclared exception!
      try {
        tSynchronizedByteShortMap0.forEachValue(tShortProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test12()  throws Throwable  {
//       byte[] byteArray0 = new byte[3];
//       byte byte0 = (byte)0;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)63;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)1;
//       byteArray0[2] = byte2;
//       short[] shortArray0 = new short[4];
//       shortArray0[0] = (short) byteArray0[1];
//       shortArray0[1] = (short) byteArray0[2];
//       shortArray0[2] = (short) byte2;
//       short short0 = (short)1203;
//       shortArray0[3] = short0;
//       TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
//       TSynchronizedByteShortMap tSynchronizedByteShortMap0 = new TSynchronizedByteShortMap((TByteShortMap) tByteShortHashMap0);
//       assertEquals(0, tSynchronizedByteShortMap0.getNoEntryKey());
//   }

  @Test
  public void test13()  throws Throwable  {
      TByteShortMap tByteShortMap0 = null;
      TSynchronizedByteShortMap tSynchronizedByteShortMap0 = null;
      try {
        tSynchronizedByteShortMap0 = new TSynchronizedByteShortMap(tByteShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      Object object0 = null;
      int int0 = (-1691);
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap(int0);
      TSynchronizedByteShortMap tSynchronizedByteShortMap0 = new TSynchronizedByteShortMap((TByteShortMap) tByteShortHashMap1);
      TSynchronizedByteShortMap tSynchronizedByteShortMap1 = new TSynchronizedByteShortMap((TByteShortMap) tByteShortHashMap0, object0);
      short[] shortArray0 = new short[9];
      short short0 = (short)1546;
      shortArray0[0] = short0;
      // Undeclared exception!
      try {
        tSynchronizedByteShortMap1.keys(tByteShortHashMap0._set);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 1;
      byte byte0 = (byte)0;
      short short0 = (short)0;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap((int) short0);
      byte byte1 = (byte)0;
      Byte byte2 = new Byte(byte1);
      String string0 = byte2.toString();
      TSynchronizedByteShortMap tSynchronizedByteShortMap0 = new TSynchronizedByteShortMap((TByteShortMap) tByteShortHashMap0, (Object) string0);
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap(int0, (float) int0, byte0, short0);
      Locale locale0 = Locale.CANADA_FRENCH;
      String string1 = locale0.getDisplayLanguage();
      TSynchronizedByteShortMap tSynchronizedByteShortMap1 = new TSynchronizedByteShortMap((TByteShortMap) tByteShortHashMap1, (Object) string1);
      int int1 = tSynchronizedByteShortMap1.hashCode();
      assertFalse(int1 == int0);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = (-773);
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0, int0);
      String string0 = "<ub6@v";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: <ub6@v:%3Cub6@v#%3Cub6@v
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)64;
      byteArray0[0] = byte0;
      byte byte1 = (byte)18;
      byteArray0[1] = byte1;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) byte1;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte1;
      shortArray0[4] = (short) byteArray0[0];
      shortArray0[5] = (short) byteArray0[0];
      shortArray0[6] = (short) byteArray0[1];
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      Locale locale0 = Locale.GERMAN;
      String string0 = "";
      // Undeclared exception!
      try {
        locale0.getUnicodeLocaleType(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
      }
  }
}
