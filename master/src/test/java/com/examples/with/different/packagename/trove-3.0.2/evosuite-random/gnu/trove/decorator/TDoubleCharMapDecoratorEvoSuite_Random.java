/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TDoubleCharMapDecorator;
import gnu.trove.map.TDoubleCharMap;
import gnu.trove.map.hash.TDoubleCharHashMap;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.InterruptedIOException;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleCharMapDecoratorEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
          TDoubleCharMapDecorator tDoubleCharMapDecorator0 = new TDoubleCharMapDecorator();
          double double0 = 0.0;
          Double double1 = new Double(double0);
          String string0 = double1.toString();
          tDoubleCharMapDecorator0.containsValue((Object) string0);
          TDoubleCharMapDecorator tDoubleCharMapDecorator1 = new TDoubleCharMapDecorator((TDoubleCharMap) tDoubleCharHashMap0);
          String string1 = "k{9w161q:yf`II)6G%";
          double double2 = (-1923.7615490601486);
          Double double3 = new Double(double2);
          char char0 = 'g';
          Character character0 = Character.valueOf(char0);
          tDoubleCharMapDecorator1.put(double3, character0);
          File file0 = null;
          // Undeclared exception!
          try {
            File.createTempFile(string1, string1, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = Double.POSITIVE_INFINITY;
      doubleArray0[2] = double2;
      double double3 = 4.541539905997159;
      doubleArray0[3] = double3;
      char[] charArray0 = new char[9];
      char char0 = 'F';
      charArray0[0] = char0;
      char char1 = 'W';
      charArray0[1] = char1;
      char char2 = 'Y';
      charArray0[2] = char2;
      char char3 = ']';
      charArray0[3] = char3;
      char char4 = 'n';
      charArray0[4] = char4;
      char char5 = '3';
      charArray0[5] = char5;
      char char6 = 'P';
      charArray0[6] = char6;
      char char7 = '6';
      charArray0[7] = char7;
      char char8 = ';';
      charArray0[8] = char8;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      TDoubleCharMapDecorator tDoubleCharMapDecorator0 = new TDoubleCharMapDecorator((TDoubleCharMap) tDoubleCharHashMap0);
      assertEquals(3, tDoubleCharMapDecorator0.size());
  }

//   @Test
//   public void test2()  throws Throwable  {
//       TDoubleCharMapDecorator tDoubleCharMapDecorator0 = new TDoubleCharMapDecorator();
//       PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
//       int int0 = 2557;
//       PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, int0);
//       ObjectInputStream objectInputStream0 = null;
//       try {
//         objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
//         fail("Expecting exception: InterruptedIOException");
//       
//       } catch(InterruptedIOException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-287);
      float float0 = (-1512.7051F);
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TDoubleCharMapDecorator tDoubleCharMapDecorator0 = new TDoubleCharMapDecorator((TDoubleCharMap) tDoubleCharHashMap0);
      tDoubleCharMapDecorator0.getMap();
      TDoubleCharMapDecorator tDoubleCharMapDecorator1 = new TDoubleCharMapDecorator((TDoubleCharMap) tDoubleCharHashMap0);
      tDoubleCharMapDecorator1.isEmpty();
      tDoubleCharMapDecorator1.clear();
      double double0 = (-1.0);
      Double double1 = new Double(double0);
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double1, (Double) double0);
      abstractMap_SimpleImmutableEntry0.hashCode();
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap(int0, float0);
      TDoubleCharHashMap tDoubleCharHashMap2 = new TDoubleCharHashMap((TDoubleCharMap) tDoubleCharHashMap1);
      TDoubleCharMapDecorator tDoubleCharMapDecorator2 = new TDoubleCharMapDecorator((TDoubleCharMap) tDoubleCharHashMap2);
      // Undeclared exception!
      try {
        tDoubleCharHashMap0.setAutoCompactionFactor(float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1512.7051
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TDoubleCharMapDecorator tDoubleCharMapDecorator0 = new TDoubleCharMapDecorator();
      TDoubleCharMap tDoubleCharMap0 = null;
      TDoubleCharMapDecorator tDoubleCharMapDecorator1 = new TDoubleCharMapDecorator(tDoubleCharMap0);
      int int0 = 1;
      char char0 = '#';
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0, (float) int0, (double) int0, char0);
      double double0 = (-1246.7099172602982);
      Double double1 = new Double(double0);
      // Undeclared exception!
      try {
        tDoubleCharMapDecorator0.put(double1, (Character) char0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = (-1773);
          double[] doubleArray0 = new double[7];
          doubleArray0[0] = (double) int0;
          doubleArray0[1] = (double) int0;
          doubleArray0[2] = (double) int0;
          doubleArray0[3] = (double) int0;
          doubleArray0[4] = (double) int0;
          doubleArray0[5] = (double) int0;
          doubleArray0[6] = (double) int0;
          char[] charArray0 = new char[3];
          char char0 = '^';
          charArray0[0] = char0;
          char char1 = 'f';
          charArray0[1] = char1;
          char char2 = '-';
          charArray0[2] = char2;
          TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
          TDoubleCharMapDecorator tDoubleCharMapDecorator0 = new TDoubleCharMapDecorator((TDoubleCharMap) tDoubleCharHashMap0);
          String string0 = "3~,";
          URI.create(string0);
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
      String string0 = "";
      TDoubleCharMapDecorator tDoubleCharMapDecorator0 = new TDoubleCharMapDecorator();
      double double0 = (-954.0801728998634);
      Double double1 = new Double(double0);
      char char0 = 'P';
      Character character0 = Character.valueOf(char0);
      // Undeclared exception!
      try {
        tDoubleCharMapDecorator0.put(double1, character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 836;
      float float0 = (-1610.5775F);
      double double0 = (-1.0);
      char char0 = '.';
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0, float0, double0, char0);
      TDoubleCharMapDecorator tDoubleCharMapDecorator0 = new TDoubleCharMapDecorator((TDoubleCharMap) tDoubleCharHashMap0);
      String string0 = "";
      String string1 = "end index > size: ";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string1, string0, string1, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://end%20index%20%3E%20size:%20?end%20index%20%3E%20size:%20#
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = (-1003.0795438322634);
      doubleArray0[1] = double1;
      double double2 = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      char[] charArray0 = new char[3];
      char char0 = '@';
      charArray0[0] = char0;
      char char1 = 'H';
      charArray0[1] = char1;
      char char2 = '8';
      charArray0[2] = char2;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      TDoubleCharMapDecorator tDoubleCharMapDecorator0 = new TDoubleCharMapDecorator((TDoubleCharMap) tDoubleCharHashMap0);
      String string0 = "{>;!3{d&iZc'HZ@";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, (int) charArray0[2], string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: {>;!3{d&iZc'HZ@://%7B%3E;!3%7Bd&iZc'HZ%40@{>;!3{d&iZc'HZ@:56%7B%3E;!3%7Bd&iZc'HZ@?%7B%3E;!3%7Bd&iZc'HZ@#%7B%3E;!3%7Bd&iZc'HZ@
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TDoubleCharMapDecorator tDoubleCharMapDecorator0 = new TDoubleCharMapDecorator();
      FileDescriptor fileDescriptor0 = null;
      double double0 = 438.7891524261697;
      Double double1 = new Double(double0);
      char char0 = '&';
      Character character0 = Character.valueOf(char0);
      // Undeclared exception!
      try {
        tDoubleCharMapDecorator0.put(double1, character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TDoubleCharMapDecorator tDoubleCharMapDecorator0 = new TDoubleCharMapDecorator();
      // Undeclared exception!
      try {
        tDoubleCharMapDecorator0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TDoubleCharMapDecorator tDoubleCharMapDecorator0 = new TDoubleCharMapDecorator();
      double double0 = 0.0;
      Double.valueOf(double0);
      String string0 = "";
      Locale locale0 = new Locale(string0);
      String string1 = locale0.getISO3Language();
      Character character0 = tDoubleCharMapDecorator0.get((Object) string1);
      // Undeclared exception!
      try {
        tDoubleCharMapDecorator0.put((Double) double0, character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test12()  throws Throwable  {
//       String string0 = "from > to : ";
//       int int0 = 0;
//       TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0);
//       char[] charArray0 = new char[8];
//       char char0 = 'V';
//       charArray0[0] = char0;
//       char char1 = 'O';
//       charArray0[1] = char1;
//       char char2 = 'G';
//       charArray0[2] = char2;
//       char char3 = '^';
//       charArray0[3] = char3;
//       char char4 = 'y';
//       charArray0[4] = char4;
//       char char5 = 'I';
//       charArray0[5] = char5;
//       char char6 = ',';
//       charArray0[6] = char6;
//       char char7 = '1';
//       charArray0[7] = char7;
//       tDoubleCharHashMap0.values(charArray0);
//       AbstractMap.SimpleEntry<String, TDoubleCharHashMap> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, TDoubleCharHashMap>(string0, tDoubleCharHashMap0);
//       abstractMap_SimpleEntry0.getKey();
//       int int1 = (-1);
//       TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap(int1);
//       tDoubleCharHashMap1.ensureCapacity(int1);
//       tDoubleCharHashMap1.clear();
//       float float0 = 0.0F;
//       PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
//       PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
//       PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) pipedInputStream0);
//       DataInputStream dataInputStream0 = new DataInputStream((InputStream) pushbackInputStream0);
//       ObjectInputStream objectInputStream0 = null;
//       try {
//         objectInputStream0 = new ObjectInputStream((InputStream) dataInputStream0);
//         fail("Expecting exception: InterruptedIOException");
//       
//       } catch(InterruptedIOException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test13()  throws Throwable  {
      TDoubleCharMapDecorator tDoubleCharMapDecorator0 = new TDoubleCharMapDecorator();
      double double0 = 1.0;
      Double double1 = new Double(double0);
      String string0 = File.pathSeparator;
      Character character0 = tDoubleCharMapDecorator0.remove((Object) string0);
      // Undeclared exception!
      try {
        tDoubleCharMapDecorator0.put(double1, character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TDoubleCharMapDecorator tDoubleCharMapDecorator0 = new TDoubleCharMapDecorator((TDoubleCharMap) tDoubleCharHashMap0);
      tDoubleCharHashMap0.compact();
      TDoubleCharMap tDoubleCharMap0 = null;
      TDoubleCharMapDecorator tDoubleCharMapDecorator1 = new TDoubleCharMapDecorator(tDoubleCharMap0);
      double double0 = 737.2788268023903;
      Double double1 = new Double(double0);
      tDoubleCharMapDecorator1.equals((Object) double1);
      TDoubleCharMapDecorator tDoubleCharMapDecorator2 = new TDoubleCharMapDecorator();
  }
}
