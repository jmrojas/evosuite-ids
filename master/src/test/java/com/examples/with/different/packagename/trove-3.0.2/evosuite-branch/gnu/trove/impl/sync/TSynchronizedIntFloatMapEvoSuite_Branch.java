/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TFloatFunction;
import gnu.trove.impl.sync.TSynchronizedFloatCollection;
import gnu.trove.impl.sync.TSynchronizedIntFloatMap;
import gnu.trove.impl.sync.TSynchronizedIntSet;
import gnu.trove.iterator.TIntFloatIterator;
import gnu.trove.map.TIntFloatMap;
import gnu.trove.map.hash.TIntFloatHashMap;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.procedure.TIntFloatProcedure;
import gnu.trove.procedure.TIntProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedIntFloatMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.adjustValue(IF)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedIntFloatMap.<init>(Lgnu/trove/map/TIntFloatMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(5448, 5448);
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      boolean boolean0 = tSynchronizedIntFloatMap0.adjustValue(5448, 5448);
      assertEquals(false, boolean0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.iterator()Lgnu/trove/iterator/TIntFloatIterator;: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      TIntFloatIterator tIntFloatIterator0 = tSynchronizedIntFloatMap0.iterator();
      assertEquals(false, tIntFloatIterator0.hasNext());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.getNoEntryValue()F: root-Branch
   */

//   @Test
//   public void test2()  throws Throwable  {
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
//       TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
//       float float0 = tSynchronizedIntFloatMap0.getNoEntryValue();
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.get(I)F: root-Branch
   */

//   @Test
//   public void test3()  throws Throwable  {
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(5448, 5448);
//       TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
//       float float0 = tSynchronizedIntFloatMap0.get(5448);
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.remove(I)F: root-Branch
   */

//   @Test
//   public void test4()  throws Throwable  {
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
//       TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
//       float float0 = tSynchronizedIntFloatMap0.remove(1743);
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.values()[F: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      float[] floatArray0 = tSynchronizedIntFloatMap0.values();
      assertNotNull(floatArray0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.clear()V: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      tSynchronizedIntFloatMap0.clear();
      assertEquals(0, tSynchronizedIntFloatMap0.getNoEntryKey());
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.increment(I)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedIntFloatMap.<init>(Lgnu/trove/map/TIntFloatMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(1071);
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0, (Object) "");
      boolean boolean0 = tSynchronizedIntFloatMap0.increment(1071);
      assertEquals(false, boolean0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      boolean boolean0 = tSynchronizedIntFloatMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.getNoEntryKey()I: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      int int0 = tSynchronizedIntFloatMap0.getNoEntryKey();
      assertEquals(0, int0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.size()I: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap((-952), (-952), (-952), (-952));
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      int int0 = tSynchronizedIntFloatMap0.size();
      assertEquals(0, int0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.forEachKey(Lgnu/trove/procedure/TIntProcedure;)Z: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(1071);
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0, (Object) "");
      boolean boolean0 = tSynchronizedIntFloatMap0.forEachKey((TIntProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.containsKey(I)Z: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap((-71));
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0, (Object) "-0x1.1cp6");
      boolean boolean0 = tSynchronizedIntFloatMap0.containsKey((-71));
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      tSynchronizedIntFloatMap0.transformValues((TFloatFunction) null);
      assertEquals(true, tSynchronizedIntFloatMap0.isEmpty());
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.putIfAbsent(IF)F: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap((-71));
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0, (Object) "-0x1.1cp6");
      tSynchronizedIntFloatMap0.putIfAbsent((-71), (-71));
      assertEquals("{-71=-71.0}", tIntFloatHashMap0.toString());
      assertEquals(false, tSynchronizedIntFloatMap0.isEmpty());
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.equals(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      boolean boolean0 = tSynchronizedIntFloatMap0.equals((Object) 0.0F);
      assertEquals(false, boolean0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.put(IF)F: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      tSynchronizedIntFloatMap0.put(0, 0);
      assertEquals(false, tIntFloatHashMap0.isEmpty());
      assertEquals(1, tSynchronizedIntFloatMap0.size());
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.keys()[I: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      int[] intArray0 = tSynchronizedIntFloatMap0.keys();
      assertNotNull(intArray0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      boolean boolean0 = tSynchronizedIntFloatMap0.forEachValue((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.adjustOrPutValue(IFF)F: root-Branch
   */

//   @Test
//   public void test19()  throws Throwable  {
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
//       TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
//       float float0 = tSynchronizedIntFloatMap0.adjustOrPutValue(0, 0.0F, (float) 0);
//       assertEquals(false, tIntFloatHashMap0.isEmpty());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.putAll(Lgnu/trove/map/TIntFloatMap;)V: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      tSynchronizedIntFloatMap0.putAll((TIntFloatMap) tIntFloatHashMap0);
      assertEquals(true, tSynchronizedIntFloatMap0.isEmpty());
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.keys([I)[I: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(1071);
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0, (Object) "");
      int[] intArray0 = tSynchronizedIntFloatMap0.keys(tIntFloatHashMap0._set);
      assertNotNull(intArray0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.values([F)[F: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      float[] floatArray0 = new float[4];
      float[] floatArray1 = tSynchronizedIntFloatMap0.values(floatArray0);
      assertSame(floatArray0, floatArray1);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.containsValue(F)Z: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(5448, 5448);
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      boolean boolean0 = tSynchronizedIntFloatMap0.containsValue((float) 5448);
      assertEquals(false, boolean0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      String string0 = tSynchronizedIntFloatMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.retainEntries(Lgnu/trove/procedure/TIntFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(10, 10, 10, 10);
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0, (Object) "French");
      boolean boolean0 = tSynchronizedIntFloatMap0.retainEntries((TIntFloatProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[2];
      float[] floatArray0 = new float[5];
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0, (Object) "English (United Kingdom)");
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      tSynchronizedIntFloatMap0.putAll((Map<? extends Integer, ? extends Float>) hashMap0);
      assertEquals(0, tSynchronizedIntFloatMap0.getNoEntryKey());
  }

  //Test case number: 27
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.forEachEntry(Lgnu/trove/procedure/TIntFloatProcedure;)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedIntFloatMap.<init>(Lgnu/trove/map/TIntFloatMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(10, 10, 10, 10);
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0, (Object) "French");
      boolean boolean0 = tSynchronizedIntFloatMap0.forEachEntry((TIntFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.hashCode()I: root-Branch
   */

  @Test
  public void test28()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap((-952), (-952), (-952), (-952));
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      int int0 = tSynchronizedIntFloatMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.<init>(Lgnu/trove/map/TIntFloatMap;)V: I17 Branch 1 IFNONNULL L59 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = null;
      try {
        tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.keySet()Lgnu/trove/set/TIntSet;: I11 Branch 2 IFNONNULL L107 - true
   * 2 gnu.trove.impl.sync.TSynchronizedIntFloatMap.keySet()Lgnu/trove/set/TIntSet;: I11 Branch 2 IFNONNULL L107 - false
   */

  @Test
  public void test30()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap((-952), (-952), (-952), (-952));
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      TSynchronizedIntSet tSynchronizedIntSet0 = (TSynchronizedIntSet)tSynchronizedIntFloatMap0.keySet();
      assertNotNull(tSynchronizedIntSet0);
      
      TSynchronizedIntSet tSynchronizedIntSet1 = (TSynchronizedIntSet)tSynchronizedIntFloatMap0.keySet();
      assertSame(tSynchronizedIntSet1, tSynchronizedIntSet0);
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedIntFloatMap.valueCollection()Lgnu/trove/TFloatCollection;: I11 Branch 3 IFNONNULL L121 - true
   * 2 gnu.trove.impl.sync.TSynchronizedIntFloatMap.valueCollection()Lgnu/trove/TFloatCollection;: I11 Branch 3 IFNONNULL L121 - false
   * 3 gnu.trove.impl.sync.TSynchronizedIntFloatMap.<init>(Lgnu/trove/map/TIntFloatMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test31()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      TSynchronizedFloatCollection tSynchronizedFloatCollection0 = (TSynchronizedFloatCollection)tSynchronizedIntFloatMap0.valueCollection();
      assertNotNull(tSynchronizedFloatCollection0);
      
      TSynchronizedFloatCollection tSynchronizedFloatCollection1 = (TSynchronizedFloatCollection)tSynchronizedIntFloatMap0.valueCollection();
      assertSame(tSynchronizedFloatCollection1, tSynchronizedFloatCollection0);
  }
}
