/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TFloatLongMap;
import gnu.trove.map.hash.TFloatLongHashMap;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.set.TFloatSet;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatLongHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


//   @Test
//   public void test0()  throws Throwable  {
//       int int0 = 2;
//       TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap();
//       tFloatLongHashMap0.get((float) int0);
//       int int1 = Integer.MAX_VALUE;
//       float float0 = 0.0F;
//       TFloatLongHashMap tFloatLongHashMap1 = new TFloatLongHashMap(int1, float0);
//       tFloatLongHashMap0.putAll((TFloatLongMap) tFloatLongHashMap1);
//       tFloatLongHashMap0.ensureCapacity(int0);
//       TFloatLongHashMap tFloatLongHashMap2 = new TFloatLongHashMap(int0);
//       assertEquals(5, tFloatLongHashMap2.capacity());
//       
//       tFloatLongHashMap2.compact();
//       assertEquals(0.0F, tFloatLongHashMap2.getNoEntryKey(), 0.01F);
//   }

//   @Test
//   public void test1()  throws Throwable  {
//       float[] floatArray0 = new float[6];
//       float float0 = 0.0F;
//       floatArray0[0] = float0;
//       float float1 = 849.74066F;
//       floatArray0[1] = float1;
//       float float2 = 0.0F;
//       floatArray0[2] = float2;
//       float float3 = 218.90987F;
//       floatArray0[3] = float3;
//       float float4 = 476.35608F;
//       floatArray0[4] = float4;
//       float float5 = 10.0F;
//       floatArray0[5] = float5;
//       long[] longArray0 = new long[9];
//       long long0 = (-140L);
//       longArray0[0] = long0;
//       long long1 = (-548L);
//       longArray0[1] = long1;
//       long long2 = 1969L;
//       longArray0[2] = long2;
//       long long3 = (-1L);
//       longArray0[3] = long3;
//       long long4 = 0L;
//       longArray0[4] = long4;
//       long long5 = 0L;
//       longArray0[5] = long5;
//       long long6 = 0L;
//       longArray0[6] = long6;
//       long long7 = 0L;
//       longArray0[7] = long7;
//       long long8 = 701L;
//       longArray0[8] = long8;
//       TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
//       assertEquals(5, tFloatLongHashMap0.size());
//       
//       tFloatLongHashMap0.clear();
//       assertEquals(0.0F, tFloatLongHashMap0.getNoEntryKey(), 0.01F);
//   }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      float float1 = (-45.350357F);
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(int0, float0, float1, (long) int0);
      tFloatLongHashMap0.getAutoCompactionFactor();
      int int1 = (-1385);
      TFloatLongHashMap tFloatLongHashMap1 = new TFloatLongHashMap();
      tFloatLongHashMap1.containsKey((float) int1);
      int int2 = 0;
      TFloatLongHashMap tFloatLongHashMap2 = new TFloatLongHashMap(int2, int1);
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test3()  throws Throwable  {
//       float[] floatArray0 = new float[4];
//       float float0 = 1273.5173F;
//       floatArray0[0] = float0;
//       float float1 = 0.0F;
//       floatArray0[1] = float1;
//       float float2 = 455.00003F;
//       floatArray0[2] = float2;
//       float float3 = 356.93698F;
//       floatArray0[3] = float3;
//       long[] longArray0 = new long[9];
//       long long0 = 1486L;
//       longArray0[0] = long0;
//       long long1 = 1379L;
//       longArray0[1] = long1;
//       long long2 = 0L;
//       longArray0[2] = long2;
//       long long3 = 854L;
//       longArray0[3] = long3;
//       long long4 = (-1L);
//       longArray0[4] = long4;
//       long long5 = (-1158L);
//       longArray0[5] = long5;
//       long long6 = 0L;
//       longArray0[6] = long6;
//       longArray0[0] = long5;
//       longArray0[1] = long4;
//       longArray0[2] = long6;
//       long long7 = 0L;
//       longArray0[3] = long7;
//       longArray0[4] = long7;
//       longArray0[5] = long0;
//       longArray0[6] = long5;
//       longArray0[7] = long7;
//       longArray0[8] = long5;
//       long long8 = (-1810L);
//       longArray0[7] = long8;
//       long long9 = (-9223372036854775808L);
//       longArray0[8] = long9;
//       TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
//       TFloatSet tFloatSet0 = tFloatLongHashMap0.keySet();
//       assertEquals("{1273.5173=-1158, 356.93698=0, 455.00003=0, 0.0=-1}", tFloatLongHashMap0.toString());
//       assertEquals(0.0F, tFloatLongHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals(0L, tFloatLongHashMap0.getNoEntryValue());
//       assertEquals(4, tFloatSet0.size());
//   }

//   @Test
//   public void test4()  throws Throwable  {
//       int int0 = 149;
//       int int1 = (-1734);
//       float[] floatArray0 = new float[6];
//       floatArray0[0] = (float) int0;
//       floatArray0[1] = (float) int0;
//       floatArray0[2] = (float) int0;
//       floatArray0[3] = (float) int0;
//       floatArray0[4] = (float) int1;
//       floatArray0[5] = (float) int0;
//       long[] longArray0 = new long[3];
//       longArray0[0] = (long) int0;
//       longArray0[1] = (long) int1;
//       long long0 = 0L;
//       longArray0[2] = long0;
//       TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
//       assertEquals("{149.0=0}", tFloatLongHashMap0.toString());
//       assertEquals(17, tFloatLongHashMap0.capacity());
//       assertEquals(1, tFloatLongHashMap0.size());
//       
//       float float0 = (-1.0F);
//       TFloatLongHashMap tFloatLongHashMap1 = new TFloatLongHashMap(int1, float0);
//       tFloatLongHashMap1.clear();
//       TFloatLongHashMap tFloatLongHashMap2 = new TFloatLongHashMap((TFloatLongMap) tFloatLongHashMap1);
//       TFloatLongHashMap tFloatLongHashMap3 = new TFloatLongHashMap((TFloatLongMap) tFloatLongHashMap2);
//       tFloatLongHashMap3.tempDisableAutoCompaction();
//       int int2 = tFloatLongHashMap3.hashCode();
//       TFloatLongHashMap tFloatLongHashMap4 = new TFloatLongHashMap(int0);
//       tFloatLongHashMap4.isEmpty();
//       boolean boolean0 = false;
//       tFloatLongHashMap4.reenableAutoCompaction(boolean0);
//       long[] longArray1 = new long[7];
//       longArray1[0] = (long) int0;
//       longArray1[1] = (long) int1;
//       longArray1[2] = (long) int0;
//       long long1 = tFloatLongHashMap2.get((float) int0);
//       assertEquals(0L, long1);
//       
//       long long2 = 362L;
//       boolean boolean1 = tFloatLongHashMap1.adjustValue((float) long1, long2);
//       assertEquals(false, boolean1);
//       
//       longArray1[3] = (long) int1;
//       longArray1[4] = (long) int1;
//       longArray1[5] = (long) int0;
//       longArray1[6] = (long) int2;
//       assertEquals(0.0F, tFloatLongHashMap3.getNoEntryKey(), 0.01F);
//       
//       long[] longArray2 = tFloatLongHashMap4.values(longArray1);
//       assertNotNull(longArray2);
//       
//       tFloatLongHashMap4.getAutoCompactionFactor();
//       assertEquals(0L, tFloatLongHashMap4.getNoEntryValue());
//       assertEquals(0.0F, tFloatLongHashMap4.getNoEntryKey(), 0.01F);
//       assertEquals(311, tFloatLongHashMap4.capacity());
//   }

  @Test
  public void test5()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap();
      float float0 = 0.0F;
      long long0 = 1065L;
      tFloatLongHashMap0.putIfAbsent(float0, long0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      String string0 = ">\":un~s|1}i";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: >\":un~s|1}i://[>\":un~s|1}i]%3E%22:un~s%7F%7C1%7Di#%3E%22:un~s%7F%7C1%7Di
         //
      }
  }

//   @Test
//   public void test6()  throws Throwable  {
//       float[] floatArray0 = new float[7];
//       float float0 = (-811.34924F);
//       floatArray0[0] = float0;
//       float float1 = (-1569.584F);
//       floatArray0[1] = float1;
//       float float2 = 0.0F;
//       floatArray0[2] = float2;
//       float float3 = (-1453.3413F);
//       floatArray0[3] = float3;
//       float float4 = 0.0F;
//       floatArray0[4] = float4;
//       float float5 = (-1.0F);
//       floatArray0[5] = float5;
//       float float6 = 0.0F;
//       floatArray0[6] = float6;
//       long[] longArray0 = new long[10];
//       long long0 = 0L;
//       longArray0[0] = long0;
//       long long1 = 1933L;
//       longArray0[1] = long1;
//       long long2 = 1625L;
//       longArray0[2] = long2;
//       long long3 = 1L;
//       longArray0[3] = long3;
//       long long4 = (-803L);
//       longArray0[4] = long4;
//       long long5 = (-1172L);
//       longArray0[5] = long5;
//       long long6 = 1481L;
//       longArray0[6] = long6;
//       long long7 = (-1819L);
//       longArray0[7] = long7;
//       long long8 = (-414L);
//       longArray0[8] = long8;
//       long long9 = 0L;
//       longArray0[9] = long9;
//       TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
//       assertEquals(5, tFloatLongHashMap0.size());
//       assertEquals(0L, tFloatLongHashMap0.getNoEntryValue());
//       assertEquals("{-1569.584=1933, -1.0=-1172, -811.34924=0, -1453.3413=1, 0.0=1481}", tFloatLongHashMap0.toString());
//       assertEquals(0.0F, tFloatLongHashMap0.getNoEntryKey(), 0.01F);
//   }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 1;
      float float0 = (-1747.0068F);
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(int0, float0, float0, (long) int0);
      long[] longArray0 = new long[7];
      long long0 = 177L;
      longArray0[0] = long0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      longArray0[6] = (long) int0;
      TFloatLongHashMap tFloatLongHashMap1 = new TFloatLongHashMap(tFloatLongHashMap0._set, longArray0);
      tFloatLongHashMap0.putAll((TFloatLongMap) tFloatLongHashMap1);
      assertEquals(1, tFloatLongHashMap0.size());
      assertEquals(1L, tFloatLongHashMap0.getNoEntryValue());
  }

  @Test
  public void test8()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = 307.0231F;
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      long[] longArray0 = new long[6];
      long long0 = 0L;
      longArray0[0] = long0;
      long long1 = (-741L);
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      long long4 = 708L;
      longArray0[4] = long4;
      long long5 = 1639L;
      longArray0[5] = long5;
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
      float float2 = (-1935.4286F);
      long long6 = 1L;
      long long7 = tFloatLongHashMap0.put(float2, long6);
      assertEquals(3, tFloatLongHashMap0.size());
      
      int int0 = (-801);
      float float3 = 0.0F;
      long long8 = 1L;
      TFloatLongHashMap tFloatLongHashMap1 = new TFloatLongHashMap(int0, (float) int0, float3, long8);
      tFloatLongHashMap1.toString();
      assertFalse(long8 == long7);
  }

//   @Test
//   public void test9()  throws Throwable  {
//       int int0 = (-1619);
//       float[] floatArray0 = new float[5];
//       floatArray0[0] = (float) int0;
//       floatArray0[1] = (float) int0;
//       float float0 = (-742.761F);
//       floatArray0[2] = float0;
//       floatArray0[3] = (float) int0;
//       float float1 = 1.0F;
//       floatArray0[4] = float1;
//       long[] longArray0 = new long[9];
//       longArray0[0] = (long) int0;
//       longArray0[1] = (long) int0;
//       TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
//       long[] longArray1 = tFloatLongHashMap0.values(longArray0);
//       assertNotNull(longArray1);
//       
//       longArray0[2] = (long) int0;
//       longArray0[3] = (long) int0;
//       long long0 = 1232L;
//       long long1 = (-1818L);
//       TFloatLongHashMap tFloatLongHashMap1 = new TFloatLongHashMap(int0, float0, float0, long1);
//       assertEquals((-1818L), tFloatLongHashMap1.getNoEntryValue());
//       assertEquals((-742.761F), tFloatLongHashMap1.getNoEntryKey(), 0.01F);
//       
//       longArray0[4] = long0;
//       longArray0[5] = (long) int0;
//       longArray0[6] = (long) int0;
//       longArray0[7] = (long) int0;
//       long long2 = (-1L);
//       longArray0[8] = long2;
//       TFloatLongHashMap tFloatLongHashMap2 = new TFloatLongHashMap(floatArray0, longArray0);
//       int int1 = tFloatLongHashMap2.capacity();
//       assertEquals("{1.0=1232, -1619.0=-1619, -742.761=-1619}", tFloatLongHashMap2.toString());
//       assertEquals(3, tFloatLongHashMap2.size());
//       assertEquals(23, int1);
//       
//       TFloatLongHashMap tFloatLongHashMap3 = new TFloatLongHashMap(int0);
//       assertEquals(0L, tFloatLongHashMap3.getNoEntryValue());
//       assertEquals(0.0F, tFloatLongHashMap3.getNoEntryKey(), 0.01F);
//   }

//   @Test
//   public void test10()  throws Throwable  {
//       float[] floatArray0 = new float[6];
//       float float0 = 1809.1187F;
//       int int0 = 5471;
//       long long0 = (-1065L);
//       TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(int0, (float) int0, (float) int0, long0);
//       boolean boolean0 = tFloatLongHashMap0.contains(float0);
//       assertEquals(false, boolean0);
//       assertEquals((-1065L), tFloatLongHashMap0.getNoEntryValue());
//       
//       floatArray0[0] = float0;
//       float float1 = 0.0F;
//       floatArray0[1] = float1;
//       float float2 = 0.0F;
//       floatArray0[2] = float2;
//       float float3 = 0.0F;
//       floatArray0[3] = float3;
//       float float4 = (-891.8572F);
//       floatArray0[4] = float4;
//       float float5 = (-1101.8428F);
//       floatArray0[5] = float5;
//       long[] longArray0 = new long[7];
//       long long1 = 0L;
//       longArray0[0] = long1;
//       long long2 = 0L;
//       longArray0[1] = long2;
//       long long3 = 0L;
//       longArray0[2] = long3;
//       long long4 = 0L;
//       longArray0[3] = long4;
//       long long5 = 893L;
//       longArray0[4] = long5;
//       long long6 = (-1454L);
//       longArray0[5] = long6;
//       long long7 = 0L;
//       longArray0[6] = long7;
//       TFloatLongHashMap tFloatLongHashMap1 = new TFloatLongHashMap(floatArray0, longArray0);
//       int int1 = tFloatLongHashMap1.size();
//       assertEquals(0L, tFloatLongHashMap1.getNoEntryValue());
//       assertEquals("{0.0=0, -891.8572=893, -1101.8428=-1454, 1809.1187=0}", tFloatLongHashMap1.toString());
//       assertEquals(4, int1);
//       assertEquals(0.0F, tFloatLongHashMap1.getNoEntryKey(), 0.01F);
//   }

//   @Test
//   public void test11()  throws Throwable  {
//       float[] floatArray0 = new float[10];
//       float float0 = 0.0F;
//       floatArray0[0] = float0;
//       float float1 = (-570.0929F);
//       floatArray0[1] = float1;
//       float float2 = 884.5556F;
//       floatArray0[2] = float2;
//       float float3 = 6.6360896E8F;
//       floatArray0[3] = float3;
//       float float4 = 0.0F;
//       floatArray0[4] = float4;
//       float float5 = 0.0F;
//       floatArray0[5] = float5;
//       float float6 = 1138.3555F;
//       floatArray0[6] = float6;
//       float float7 = 1.0F;
//       floatArray0[7] = float7;
//       float float8 = 1762.9117F;
//       floatArray0[8] = float8;
//       float float9 = Float.NEGATIVE_INFINITY;
//       floatArray0[9] = float9;
//       long[] longArray0 = new long[8];
//       long long0 = 533L;
//       longArray0[0] = long0;
//       long long1 = (-1L);
//       longArray0[1] = long1;
//       long long2 = 0L;
//       longArray0[2] = long2;
//       long long3 = 1212L;
//       longArray0[3] = long3;
//       long long4 = 795L;
//       longArray0[4] = long4;
//       long long5 = 1054L;
//       longArray0[5] = long5;
//       long long6 = 1900L;
//       longArray0[6] = long6;
//       long long7 = (-958L);
//       longArray0[7] = long7;
//       TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
//       TFloatLongHashMap tFloatLongHashMap1 = new TFloatLongHashMap((TFloatLongMap) tFloatLongHashMap0);
//       assertEquals(0L, tFloatLongHashMap0.getNoEntryValue());
//       assertEquals(0.0F, tFloatLongHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals(6, tFloatLongHashMap0.size());
//       assertEquals("{-570.0929=-1, 6.6360896E8=1212, 884.5556=0, 1138.3555=1900, 1.0=-958, 0.0=1054}", tFloatLongHashMap1.toString());
//       assertEquals("{-570.0929=-1, 6.6360896E8=1212, 884.5556=0, 1138.3555=1900, 1.0=-958, 0.0=1054}", tFloatLongHashMap0.toString());
//   }

//   @Test
//   public void test12()  throws Throwable  {
//       float[] floatArray0 = new float[5];
//       float float0 = Float.NEGATIVE_INFINITY;
//       floatArray0[0] = float0;
//       float float1 = 0.0F;
//       floatArray0[1] = float1;
//       float float2 = 1.0F;
//       floatArray0[2] = float2;
//       float float3 = 0.0F;
//       floatArray0[3] = float3;
//       float float4 = (-1.0F);
//       floatArray0[4] = float4;
//       long[] longArray0 = new long[4];
//       long long0 = 0L;
//       longArray0[0] = long0;
//       long long1 = 0L;
//       longArray0[1] = long1;
//       long long2 = (-1L);
//       longArray0[2] = long2;
//       long long3 = 1790L;
//       longArray0[3] = long3;
//       TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
//       float float5 = tFloatLongHashMap0.getNoEntryKey();
//       assertEquals(0.0F, float5, 0.01F);
//       assertEquals("{-Infinity=0, 1.0=-1, 0.0=1790}", tFloatLongHashMap0.toString());
//       assertEquals(3, tFloatLongHashMap0.size());
//       assertEquals(0L, tFloatLongHashMap0.getNoEntryValue());
//   }

//   @Test
//   public void test13()  throws Throwable  {
//       float[] floatArray0 = new float[4];
//       float float0 = 0.0F;
//       floatArray0[0] = float0;
//       float float1 = 858.93835F;
//       floatArray0[1] = float1;
//       float float2 = (-1568.552F);
//       floatArray0[2] = float2;
//       float float3 = 1.0F;
//       floatArray0[3] = float3;
//       long[] longArray0 = new long[6];
//       long long0 = 708L;
//       longArray0[0] = long0;
//       long long1 = 1L;
//       longArray0[1] = long1;
//       long long2 = 482L;
//       longArray0[2] = long2;
//       long long3 = 1899L;
//       longArray0[3] = long3;
//       long long4 = 0L;
//       longArray0[4] = long4;
//       long long5 = (-1769L);
//       longArray0[5] = long5;
//       TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
//       long[] longArray1 = tFloatLongHashMap0.values(longArray0);
//       assertEquals(0L, tFloatLongHashMap0.getNoEntryValue());
//       assertEquals(0.0F, tFloatLongHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals("{858.93835=1, 1.0=1899, -1568.552=482, 0.0=708}", tFloatLongHashMap0.toString());
//       assertNotNull(longArray1);
//   }

//   @Test
//   public void test14()  throws Throwable  {
//       int int0 = 1376;
//       TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap();
//       tFloatLongHashMap0.get((float) int0);
//       TFloatProcedure tFloatProcedure0 = null;
//       boolean boolean0 = tFloatLongHashMap0.forEach(tFloatProcedure0);
//       assertEquals(true, boolean0);
//       
//       byte[] byteArray0 = tFloatLongHashMap0._states;
//       tFloatLongHashMap0.valueCollection();
//       tFloatLongHashMap0.keys();
//       tFloatLongHashMap0.tempDisableAutoCompaction();
//       assertEquals(0.0F, tFloatLongHashMap0.getNoEntryKey(), 0.01F);
//       
//       TFloatLongHashMap tFloatLongHashMap1 = new TFloatLongHashMap(int0, int0, int0, int0);
//       tFloatLongHashMap1.values();
//       byte[] byteArray1 = new byte[2];
//       byte byte0 = (byte) (-105);
//       byteArray1[0] = byte0;
//       tFloatLongHashMap1.capacity();
//       byte byte1 = (byte) (-104);
//       byteArray1[1] = byte1;
//       tFloatLongHashMap1._states = byteArray1;
//       String string0 = "* 73z2zdL";
//       File file0 = new File(string0);
//       // Undeclared exception!
//       try {
//         tFloatLongHashMap1.increment((float) byteArray1[0]);
//         fail("Expecting exception: ArrayIndexOutOfBoundsException");
//       
//       } catch(ArrayIndexOutOfBoundsException e) {
//          //
//          // 2
//          //
//       }
//   }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 155;
          TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(int0, int0);
          String string0 = "=";
          boolean boolean0 = false;
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0, boolean0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"=\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:136)
             // sun.reflect.GeneratedConstructorAccessor18.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 1093;
      int int1 = 0;
      float float0 = 0.0F;
      long long0 = 393L;
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(int1, float0, float0, long0);
      tFloatLongHashMap0.keySet();
      float float1 = 0.0F;
      tFloatLongHashMap0.putIfAbsent(float1, long0);
      TFloatLongHashMap tFloatLongHashMap1 = new TFloatLongHashMap(int0);
      int int2 = (-1379);
      tFloatLongHashMap1.size();
      TFloatLongHashMap tFloatLongHashMap2 = new TFloatLongHashMap(int2);
      tFloatLongHashMap2.remove((float) int2);
      tFloatLongHashMap1.putAll((TFloatLongMap) tFloatLongHashMap0);
      assertEquals(7, tFloatLongHashMap0.capacity());
      
      tFloatLongHashMap2.ensureCapacity(int2);
      float float2 = (-727.1392F);
      TFloatLongHashMap tFloatLongHashMap3 = new TFloatLongHashMap(int2, float2);
      assertEquals(0L, tFloatLongHashMap3.getNoEntryValue());
  }

  @Test
  public void test17()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float float0 = 1938.979F;
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      float float2 = 1715.778F;
      floatArray0[2] = float2;
      long[] longArray0 = new long[3];
      long long0 = 0L;
      longArray0[0] = long0;
      long long1 = 968L;
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[0] = long0;
      longArray0[1] = long2;
      longArray0[2] = long1;
      longArray0[2] = long2;
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
      int int0 = 0;
      TFloatLongHashMap tFloatLongHashMap1 = new TFloatLongHashMap(int0, int0);
      float float3 = (-1279.6179F);
      long long3 = 2044L;
      tFloatLongHashMap1.putIfAbsent(float3, long3);
      boolean boolean0 = true;
      tFloatLongHashMap1.reenableAutoCompaction(boolean0);
      int int1 = tFloatLongHashMap1.size();
      tFloatLongHashMap1.toString();
      tFloatLongHashMap1.get((float) int1);
      tFloatLongHashMap0.clear();
      tFloatLongHashMap1.size();
      tFloatLongHashMap1.keySet();
      tFloatLongHashMap1.trimToSize();
      assertEquals("{-1279.6179=2044}", tFloatLongHashMap1.toString());
      
      int int2 = 1651;
      TFloatLongHashMap tFloatLongHashMap2 = new TFloatLongHashMap(int2);
      boolean boolean1 = false;
      tFloatLongHashMap2.reenableAutoCompaction(boolean1);
      tFloatLongHashMap2.tempDisableAutoCompaction();
      assertEquals(3527, tFloatLongHashMap2.capacity());
  }
}
