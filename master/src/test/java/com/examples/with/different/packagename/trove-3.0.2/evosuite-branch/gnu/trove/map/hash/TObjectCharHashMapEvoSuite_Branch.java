/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TCharFunction;
import gnu.trove.map.TObjectCharMap;
import gnu.trove.map.custom_hash.TObjectCharCustomHashMap;
import gnu.trove.map.hash.TObjectCharHashMap;
import gnu.trove.procedure.TCharProcedure;
import gnu.trove.procedure.TObjectCharProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectCharHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap$TCharValueCollection.<init>(Lgnu/trove/map/hash/TObjectCharHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TObjectCharHashMap.valueCollection()Lgnu/trove/TCharCollection;: root-Branch
   * 3 gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I: root-Branch
   * 4 gnu.trove.map.hash.TObjectCharHashMap.<init>()V: root-Branch
   * 5 gnu.trove.map.hash.TObjectCharHashMap$1.<init>(Lgnu/trove/map/hash/TObjectCharHashMap;)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TObjectCharHashMap<Object> tObjectCharHashMap0 = new TObjectCharHashMap<Object>();
      tObjectCharHashMap0.valueCollection();
      assertEquals(23, tObjectCharHashMap0.capacity());
  }

  //Test case number: 1
  /*
   * 16 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap$TObjectCharHashIterator.advance()V: root-Branch
   * 2 gnu.trove.map.hash.TObjectCharHashMap$TObjectCharHashIterator.value()C: root-Branch
   * 3 gnu.trove.map.hash.TObjectCharHashMap$TObjectCharHashIterator.key()Ljava/lang/Object;: root-Branch
   * 4 gnu.trove.map.hash.TObjectCharHashMap$TObjectCharHashIterator.<init>(Lgnu/trove/map/hash/TObjectCharHashMap;Lgnu/trove/map/hash/TObjectCharHashMap;)V: root-Branch
   * 5 gnu.trove.map.hash.TObjectCharHashMap.put(Ljava/lang/Object;C)C: root-Branch
   * 6 gnu.trove.map.hash.TObjectCharHashMap.iterator()Lgnu/trove/iterator/TObjectCharIterator;: root-Branch
   * 7 gnu.trove.map.hash.TObjectCharHashMap.<init>(I)V: root-Branch
   * 8 gnu.trove.map.hash.TObjectCharHashMap.get(Ljava/lang/Object;)C: I9 Branch 19 IFGE L230 - true
   * 9 gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C: I12 Branch 21 IFGE L255 - true
   * 10 gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C: I41 Branch 22 IFEQ L263 - false
   * 11 gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 58 IFNE L576 - true
   * 12 gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 59 IF_ICMPEQ L580 - true
   * 13 gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 60 IFEQ L585 - true
   * 14 gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 60 IFEQ L585 - false
   * 15 gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z: I54 Branch 61 IF_ICMPNE L589 - true
   * 16 gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z: I78 Branch 64 IF_ICMPEQ L596 - true
   */

  @Test
  public void test1()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>((-1822));
      tObjectCharHashMap0.put("n[R&g89@&VE'Yag", '}');
      objectArray0[5] = (Object) tObjectCharHashMap0;
      boolean boolean0 = tObjectCharHashMap0.equals(objectArray0[5]);
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TObjectCharHashMap<Character> tObjectCharHashMap0 = new TObjectCharHashMap<Character>();
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tObjectCharHashMap0._set);
      boolean boolean0 = tObjectCharHashMap0.forEachKey((TObjectProcedure<? super Character>) toObjectArrayProceedure0);
      assertEquals(23, tObjectCharHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 3
  /*
   * 17 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.containsKey(Ljava/lang/Object;)Z: root-Branch
   * 2 gnu.trove.map.hash.TObjectCharHashMap.getNoEntryValue()C: root-Branch
   * 3 gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C: I9 Branch 41 IFGE L443 - true
   * 4 gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C: I52 Branch 42 IFEQ L454 - false
   * 5 gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z: I54 Branch 61 IF_ICMPNE L589 - false
   * 6 gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z: I62 Branch 62 IF_ICMPNE L590 - false
   * 7 gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z: I66 Branch 63 IFNE L590 - true
   * 8 gnu.trove.map.hash.TObjectCharHashMap$TObjectCharHashIterator.advance()V: root-Branch
   * 9 gnu.trove.map.hash.TObjectCharHashMap$TObjectCharHashIterator.value()C: root-Branch
   * 10 gnu.trove.map.hash.TObjectCharHashMap$TObjectCharHashIterator.key()Ljava/lang/Object;: root-Branch
   * 11 gnu.trove.map.hash.TObjectCharHashMap$TObjectCharHashIterator.<init>(Lgnu/trove/map/hash/TObjectCharHashMap;Lgnu/trove/map/hash/TObjectCharHashMap;)V: root-Branch
   * 12 gnu.trove.map.hash.TObjectCharHashMap.iterator()Lgnu/trove/iterator/TObjectCharIterator;: root-Branch
   * 13 gnu.trove.map.hash.TObjectCharHashMap.get(Ljava/lang/Object;)C: I9 Branch 19 IFGE L230 - true
   * 14 gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 58 IFNE L576 - true
   * 15 gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 59 IF_ICMPEQ L580 - true
   * 16 gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 60 IFEQ L585 - true
   * 17 gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 60 IFEQ L585 - false
   */

  @Test
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>((-1822));
      tObjectCharHashMap0.adjustOrPutValue("uQz]gRIlP", '\u0000', '\u0000');
      objectArray0[5] = (Object) tObjectCharHashMap0;
      boolean boolean0 = tObjectCharHashMap0.equals(objectArray0[5]);
      assertEquals(1, tObjectCharHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 4
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TObjectCharHashMap.<init>(IF)V: root-Branch
   * 3 gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - true
   * 4 gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - false
   * 5 gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - true
   * 6 gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - false
   * 7 gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V: I61 Branch 13 IF_ACMPEQ L186 - true
   * 8 gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V: I61 Branch 13 IF_ACMPEQ L186 - false
   * 9 gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V: I77 Branch 14 IFGE L189 - true
   * 10 gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C: I14 Branch 23 IFLT L274 - false
   */

  @Test
  public void test4()  throws Throwable  {
      TObjectCharHashMap<Object> tObjectCharHashMap0 = new TObjectCharHashMap<Object>((-1830), (-1830));
      tObjectCharHashMap0.adjustOrPutValue((Object) 0, '', '');
      assertEquals(7, tObjectCharHashMap0.capacity());
      
      char char0 = tObjectCharHashMap0.remove((Object) 0);
      assertEquals('', char0);
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.keySet()Ljava/util/Set;: root-Branch
   * 2 gnu.trove.map.hash.TObjectCharHashMap$KeyView.<init>(Lgnu/trove/map/hash/TObjectCharHashMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TObjectCharHashMap.<init>(IFC)V: I23 Branch 8 IFEQ L124 - false
   */

  @Test
  public void test5()  throws Throwable  {
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>(1, (float) 1, 'l');
      tObjectCharHashMap0.keySet();
      assertEquals('l', tObjectCharHashMap0.getNoEntryValue());
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.putAll(Lgnu/trove/map/TObjectCharMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V: I13 Branch 9 IFEQ L138 - true
   */

  @Test
  public void test6()  throws Throwable  {
      IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
      TObjectCharCustomHashMap<Integer> tObjectCharCustomHashMap0 = new TObjectCharCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, 33, (float) 33, 'T');
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>((TObjectCharMap<? extends Integer>) tObjectCharCustomHashMap0);
      assertEquals('T', tObjectCharHashMap0.getNoEntryValue());
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.increment(Ljava/lang/Object;)Z: root-Branch
   * 2 gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z: I9 Branch 40 IFGE L427 - false
   */

  @Test
  public void test7()  throws Throwable  {
      TObjectCharHashMap<Object> tObjectCharHashMap0 = new TObjectCharHashMap<Object>(0);
      boolean boolean0 = tObjectCharHashMap0.increment((Object) "\u4E2D\u6587 (\u53F0\u7063)");
      assertEquals(false, boolean0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.clear()V: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>();
      tObjectCharHashMap0.clear();
      assertEquals(23, tObjectCharHashMap0.capacity());
      assertEquals("{}", tObjectCharHashMap0.toString());
  }

  //Test case number: 9
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.<init>(IFC)V: I23 Branch 8 IFEQ L124 - true
   * 2 gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V: I35 Branch 10 IFEQ L143 - true
   * 3 gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I18 Branch 47 IFLE L506 - true
   * 4 gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I18 Branch 47 IFLE L506 - false
   * 5 gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - true
   * 6 gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V: I13 Branch 9 IFEQ L138 - false
   */

  @Test
  public void test9()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(0);
      TObjectCharHashMap<Object> tObjectCharHashMap1 = new TObjectCharHashMap<Object>((TObjectCharMap<?>) tObjectCharHashMap0);
      assertEquals(true, tObjectCharHashMap1.isEmpty());
      assertEquals(23, tObjectCharHashMap1.capacity());
  }

  //Test case number: 10
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z: I25 Branch 16 IF_ACMPEQ L219 - false
   * 2 gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z: I30 Branch 17 IF_ACMPEQ L219 - false
   * 3 gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z: I35 Branch 18 IF_ICMPNE L219 - true
   * 4 gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z: I18 Branch 15 IFLE L218 - true
   * 5 gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z: I18 Branch 15 IFLE L218 - false
   * 6 gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z: I25 Branch 16 IF_ACMPEQ L219 - true
   */

  @Test
  public void test10()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>((-1822));
      tObjectCharHashMap0.put("n[R&g89@&VE'Yag", '}');
      boolean boolean0 = tObjectCharHashMap0.containsValue('{');
      assertEquals("{n[R&g89@&VE'Yag=}}", tObjectCharHashMap0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 11
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z: I30 Branch 17 IF_ACMPEQ L219 - true
   * 2 gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z: I18 Branch 15 IFLE L218 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(341, (float) 341, '}');
      tObjectCharHashMap0.put(":", 'l');
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      
      tObjectCharHashMap0.remove((Object) ":");
      boolean boolean0 = tObjectCharHashMap0.containsValue('(');
      assertEquals(false, boolean0);
  }

  //Test case number: 12
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z: I35 Branch 18 IF_ICMPNE L219 - false
   * 2 gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z: I18 Branch 15 IFLE L218 - false
   * 3 gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z: I25 Branch 16 IF_ACMPEQ L219 - true
   * 4 gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z: I25 Branch 16 IF_ACMPEQ L219 - false
   * 5 gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z: I30 Branch 17 IF_ACMPEQ L219 - false
   */

  @Test
  public void test12()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(341, (float) 341, '}');
      tObjectCharHashMap0.put((String) null, '(');
      boolean boolean0 = tObjectCharHashMap0.containsValue('(');
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.get(Ljava/lang/Object;)C: I9 Branch 19 IFGE L230 - false
   */

  @Test
  public void test13()  throws Throwable  {
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>();
      tObjectCharHashMap0.get((Object) ":");
      assertEquals(23, tObjectCharHashMap0.capacity());
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C: I9 Branch 20 IFGE L246 - false
   */

  @Test
  public void test14()  throws Throwable  {
      Character character0 = Character.valueOf('4');
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>((int) character0);
      tObjectCharHashMap0.adjustOrPutValue((Integer) 0, (char) character0, (char) character0);
      char char0 = tObjectCharHashMap0.putIfAbsent((Integer) 0, '4');
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      assertEquals('4', char0);
  }

  //Test case number: 15
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C: I12 Branch 21 IFGE L255 - false
   * 2 gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C: I41 Branch 22 IFEQ L263 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>();
      tObjectCharHashMap0.put((Integer) 0, 'p');
      char char0 = tObjectCharHashMap0.put((Integer) 0, '`');
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      assertEquals('p', char0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C: I14 Branch 23 IFLT L274 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(1615, (float) 1615, '}');
      char char0 = tObjectCharHashMap0.remove((Object) ":");
      assertEquals(true, tObjectCharHashMap0.isEmpty());
      assertEquals('}', char0);
  }

  //Test case number: 17
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.putAll(Ljava/util/Map;)V: I13 Branch 24 IFEQ L300 - false
   * 2 gnu.trove.map.hash.TObjectCharHashMap.hashCode()I: I22 Branch 65 IFLE L613 - true
   * 3 gnu.trove.map.hash.TObjectCharHashMap.hashCode()I: I22 Branch 65 IFLE L613 - false
   * 4 gnu.trove.map.hash.TObjectCharHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - true
   * 5 gnu.trove.map.hash.TObjectCharHashMap.putAll(Ljava/util/Map;)V: I13 Branch 24 IFEQ L300 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TObjectCharHashMap<Object> tObjectCharHashMap0 = new TObjectCharHashMap<Object>();
      TObjectCharHashMap<Character> tObjectCharHashMap1 = new TObjectCharHashMap<Character>();
      HashMap<Object, Character> hashMap0 = new HashMap<Object, Character>();
      hashMap0.put((Object) tObjectCharHashMap1, (Character) '\u0000');
      tObjectCharHashMap0.putAll((Map<?, ? extends Character>) hashMap0);
      assertEquals("{{}=\u0000}", tObjectCharHashMap0.toString());
      assertEquals(1, tObjectCharHashMap0.size());
  }

  //Test case number: 18
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;: I30 Branch 26 IF_ACMPEQ L335 - false
   * 2 gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;: I35 Branch 27 IF_ACMPEQ L335 - false
   * 3 gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;: I23 Branch 25 IFLE L334 - true
   * 4 gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;: I23 Branch 25 IFLE L334 - false
   * 5 gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;: I30 Branch 26 IF_ACMPEQ L335 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>(1, (float) 1, 'l');
      tObjectCharHashMap0.adjustOrPutValue((Integer) 1, 'l', 'l');
      tObjectCharHashMap0.keys();
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      assertEquals("{1=l}", tObjectCharHashMap0.toString());
  }

  //Test case number: 19
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I44 Branch 30 IF_ACMPEQ L356 - false
   * 2 gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I49 Branch 31 IF_ACMPEQ L356 - false
   * 3 gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C: I9 Branch 20 IFGE L246 - true
   * 4 gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I10 Branch 28 IF_ICMPGE L347 - true
   * 5 gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L355 - true
   * 6 gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L355 - false
   * 7 gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I44 Branch 30 IF_ACMPEQ L356 - true
   */

  @Test
  public void test19()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>();
      tObjectCharHashMap0.putIfAbsent("r1vk.;b2Xr:%P", '');
      String[] stringArray0 = new String[1];
      tObjectCharHashMap0.keys(stringArray0);
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      assertEquals(23, tObjectCharHashMap0.capacity());
  }

  //Test case number: 20
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I49 Branch 31 IF_ACMPEQ L356 - true
   * 2 gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I10 Branch 28 IF_ICMPGE L347 - true
   * 3 gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L355 - true
   * 4 gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L355 - false
   * 5 gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I44 Branch 30 IF_ACMPEQ L356 - true
   * 6 gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I44 Branch 30 IF_ACMPEQ L356 - false
   */

  @Test
  public void test20()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(341, (float) 341, '}');
      tObjectCharHashMap0.put(":", 'l');
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      
      tObjectCharHashMap0.remove((Object) ":");
      String[] stringArray0 = new String[22];
      String[] stringArray1 = tObjectCharHashMap0.keys(stringArray0);
      assertSame(stringArray0, stringArray1);
  }

  //Test case number: 21
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.values()[C: I34 Branch 33 IF_ACMPEQ L378 - false
   * 2 gnu.trove.map.hash.TObjectCharHashMap.values()[C: I39 Branch 34 IF_ACMPEQ L378 - false
   * 3 gnu.trove.map.hash.TObjectCharHashMap.values()[C: I27 Branch 32 IFLE L377 - true
   * 4 gnu.trove.map.hash.TObjectCharHashMap.values()[C: I27 Branch 32 IFLE L377 - false
   * 5 gnu.trove.map.hash.TObjectCharHashMap.values()[C: I34 Branch 33 IF_ACMPEQ L378 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>((-1822));
      tObjectCharHashMap0.put(" vs ", '}');
      tObjectCharHashMap0.values();
      assertEquals("{ vs =}}", tObjectCharHashMap0.toString());
      assertEquals(3, tObjectCharHashMap0.capacity());
  }

  //Test case number: 22
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.values()[C: I39 Branch 34 IF_ACMPEQ L378 - true
   * 2 gnu.trove.map.hash.TObjectCharHashMap.values()[C: I34 Branch 33 IF_ACMPEQ L378 - false
   */

  @Test
  public void test22()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(341, (float) 341, '}');
      tObjectCharHashMap0.put(":", 'l');
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      
      tObjectCharHashMap0.remove((Object) ":");
      tObjectCharHashMap0.values();
      assertEquals(true, tObjectCharHashMap0.isEmpty());
  }

  //Test case number: 23
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.values([C)[C: I10 Branch 35 IF_ICMPGE L389 - false
   * 2 gnu.trove.map.hash.TObjectCharHashMap.values([C)[C: I44 Branch 37 IF_ACMPEQ L397 - false
   * 3 gnu.trove.map.hash.TObjectCharHashMap.values([C)[C: I49 Branch 38 IF_ACMPEQ L397 - false
   * 4 gnu.trove.map.hash.TObjectCharHashMap.values([C)[C: I65 Branch 39 IF_ICMPLE L401 - true
   * 5 gnu.trove.map.hash.TObjectCharHashMap.values()[C: I27 Branch 32 IFLE L377 - true
   * 6 gnu.trove.map.hash.TObjectCharHashMap.values()[C: I27 Branch 32 IFLE L377 - false
   * 7 gnu.trove.map.hash.TObjectCharHashMap.values()[C: I34 Branch 33 IF_ACMPEQ L378 - true
   * 8 gnu.trove.map.hash.TObjectCharHashMap.values([C)[C: I37 Branch 36 IFLE L396 - true
   * 9 gnu.trove.map.hash.TObjectCharHashMap.values([C)[C: I37 Branch 36 IFLE L396 - false
   * 10 gnu.trove.map.hash.TObjectCharHashMap.values([C)[C: I44 Branch 37 IF_ACMPEQ L397 - true
   */

  @Test
  public void test23()  throws Throwable  {
      Character character0 = Character.valueOf('4');
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>((int) character0);
      TObjectCharHashMap<String> tObjectCharHashMap1 = new TObjectCharHashMap<String>();
      tObjectCharHashMap0.adjustOrPutValue((Integer) 0, (char) character0, (char) character0);
      char[] charArray0 = tObjectCharHashMap1.values();
      tObjectCharHashMap0.values(charArray0);
      assertEquals("{0=4}", tObjectCharHashMap0.toString());
      assertEquals(1, tObjectCharHashMap0.size());
  }

  //Test case number: 24
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.values([C)[C: I49 Branch 38 IF_ACMPEQ L397 - true
   * 2 gnu.trove.map.hash.TObjectCharHashMap.values([C)[C: I10 Branch 35 IF_ICMPGE L389 - true
   * 3 gnu.trove.map.hash.TObjectCharHashMap.values([C)[C: I37 Branch 36 IFLE L396 - true
   * 4 gnu.trove.map.hash.TObjectCharHashMap.values([C)[C: I37 Branch 36 IFLE L396 - false
   * 5 gnu.trove.map.hash.TObjectCharHashMap.values([C)[C: I44 Branch 37 IF_ACMPEQ L397 - true
   * 6 gnu.trove.map.hash.TObjectCharHashMap.values([C)[C: I44 Branch 37 IF_ACMPEQ L397 - false
   * 7 gnu.trove.map.hash.TObjectCharHashMap.values([C)[C: I65 Branch 39 IF_ICMPLE L401 - false
   */

  @Test
  public void test24()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(341, (float) 341, '}');
      tObjectCharHashMap0.put(":", 'l');
      assertEquals("{:=l}", tObjectCharHashMap0.toString());
      
      tObjectCharHashMap0.remove((Object) ":");
      char[] charArray0 = new char[6];
      tObjectCharHashMap0.values(charArray0);
      assertEquals("{}", tObjectCharHashMap0.toString());
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z: I9 Branch 40 IFGE L427 - true
   */

  @Test
  public void test25()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>((int) '}', (float) '}', '}');
      tObjectCharHashMap0.adjustOrPutValue(":", '}', '}');
      boolean boolean0 = tObjectCharHashMap0.adjustValue(":", '}');
      assertEquals(1, tObjectCharHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 26
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C: I9 Branch 41 IFGE L443 - false
   * 2 gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C: I52 Branch 42 IFEQ L454 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>(1, (float) 1, 'l');
      tObjectCharHashMap0.adjustOrPutValue((Integer) 1, 'l', 'l');
      char char0 = tObjectCharHashMap0.adjustOrPutValue((Integer) 1, 'l', 'U');
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      assertEquals('\u00D8', char0);
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 43 IFLE L484 - true
   * 2 gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 43 IFLE L484 - false
   * 3 gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 44 IF_ACMPEQ L485 - true
   */

  @Test
  public void test27()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(1615, (float) 1615, '}');
      boolean boolean0 = tObjectCharHashMap0.forEachValue((TCharProcedure) null);
      assertEquals('}', tObjectCharHashMap0.getNoEntryValue());
      assertEquals(true, boolean0);
  }

  //Test case number: 28
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 44 IF_ACMPEQ L485 - false
   * 2 gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I30 Branch 45 IF_ACMPEQ L485 - false
   * 3 gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C: I9 Branch 20 IFGE L246 - true
   * 4 gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 43 IFLE L484 - false
   * 5 gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 44 IF_ACMPEQ L485 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>();
      tObjectCharHashMap0.putIfAbsent("r1vk.;b2Xr:%P", '');
      // Undeclared exception!
      try {
        tObjectCharHashMap0.forEachValue((TCharProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 29
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I30 Branch 49 IF_ACMPEQ L507 - true
   * 2 gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - false
   * 3 gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V: I35 Branch 10 IFEQ L143 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(341, (float) 341, '}');
      tObjectCharHashMap0.put(":", 'l');
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      
      tObjectCharHashMap0.remove((Object) ":");
      TObjectCharHashMap<Object> tObjectCharHashMap1 = new TObjectCharHashMap<Object>((TObjectCharMap<?>) tObjectCharHashMap0);
      assertEquals(true, tObjectCharHashMap1.isEmpty());
  }

  //Test case number: 30
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I27 Branch 51 IFLE L533 - true
   * 2 gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I27 Branch 51 IFLE L533 - false
   * 3 gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I34 Branch 52 IF_ACMPEQ L534 - true
   */

  @Test
  public void test30()  throws Throwable  {
      TObjectCharHashMap<Character> tObjectCharHashMap0 = new TObjectCharHashMap<Character>();
      boolean boolean0 = tObjectCharHashMap0.retainEntries((TObjectCharProcedure<? super Character>) null);
      assertEquals(23, tObjectCharHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 31
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I34 Branch 52 IF_ACMPEQ L534 - false
   * 2 gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I39 Branch 53 IF_ACMPEQ L534 - false
   * 3 gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I27 Branch 51 IFLE L533 - false
   * 4 gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I34 Branch 52 IF_ACMPEQ L534 - true
   * 5 gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - true
   * 6 gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - false
   * 7 gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - true
   * 8 gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - false
   * 9 gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V: I61 Branch 13 IF_ACMPEQ L186 - false
   * 10 gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V: I77 Branch 14 IFGE L189 - true
   */

  @Test
  public void test31()  throws Throwable  {
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>(1831, (-1090.6051F), 'l');
      tObjectCharHashMap0.adjustOrPutValue((Integer) 1843, 'l', 'U');
      // Undeclared exception!
      try {
        tObjectCharHashMap0.retainEntries((TObjectCharProcedure<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 32
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I18 Branch 55 IFLE L558 - false
   * 2 gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I24 Branch 56 IFNULL L559 - false
   * 3 gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I29 Branch 57 IF_ACMPEQ L559 - false
   */

  @Test
  public void test32()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>((int) '}', (float) '}', '}');
      // Undeclared exception!
      try {
        tObjectCharHashMap0.transformValues((TCharFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 33
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 58 IFNE L576 - false
   */

  @Test
  public void test33()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>((-1835));
      boolean boolean0 = tObjectCharHashMap0.equals((Object) null);
      assertEquals(3, tObjectCharHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 34
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - false
   * 2 gnu.trove.map.hash.TObjectCharHashMap.hashCode()I: I34 Branch 67 IF_ACMPEQ L614 - false
   * 3 gnu.trove.map.hash.TObjectCharHashMap.hashCode()I: I45 Branch 68 IFNONNULL L615 - true
   */

  @Test
  public void test34()  throws Throwable  {
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>();
      tObjectCharHashMap0.put((Integer) (-750), '}');
      int int0 = tObjectCharHashMap0.hashCode();
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      assertEquals((-657), int0);
  }

  //Test case number: 35
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.hashCode()I: I34 Branch 67 IF_ACMPEQ L614 - true
   * 2 gnu.trove.map.hash.TObjectCharHashMap.removeAt(I)V: root-Branch
   * 3 gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C: I14 Branch 23 IFLT L274 - false
   */

  @Test
  public void test35()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(341, (float) 341, '}');
      tObjectCharHashMap0.put(":", 'l');
      assertEquals("{:=l}", tObjectCharHashMap0.toString());
      
      tObjectCharHashMap0.remove((Object) ":");
      int int0 = tObjectCharHashMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 36
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.hashCode()I: I45 Branch 68 IFNONNULL L615 - false
   * 2 gnu.trove.map.hash.TObjectCharHashMap.hashCode()I: I22 Branch 65 IFLE L613 - true
   * 3 gnu.trove.map.hash.TObjectCharHashMap.hashCode()I: I22 Branch 65 IFLE L613 - false
   * 4 gnu.trove.map.hash.TObjectCharHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - true
   * 5 gnu.trove.map.hash.TObjectCharHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - false
   * 6 gnu.trove.map.hash.TObjectCharHashMap.hashCode()I: I34 Branch 67 IF_ACMPEQ L614 - false
   */

  @Test
  public void test36()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(341, (float) 341, '}');
      tObjectCharHashMap0.put((String) null, '(');
      int int0 = tObjectCharHashMap0.hashCode();
      assertEquals(1, tObjectCharHashMap0.size());
      assertEquals(40, int0);
  }

  //Test case number: 37
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I45 Branch 71 IF_ACMPEQ L1094 - false
   * 2 gnu.trove.map.hash.TObjectCharHashMap.<init>(I)V: root-Branch
   * 3 gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 69 IFLE L1093 - true
   * 4 gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 69 IFLE L1093 - false
   * 5 gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I39 Branch 70 IF_ACMPEQ L1094 - false
   * 6 gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I45 Branch 71 IF_ACMPEQ L1094 - true
   */

  @Test
  public void test37()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(1129);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      tObjectCharHashMap0.adjustOrPutValue("u7_t[=m<d3k][", '\u0000', '\u0000');
      PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      tObjectCharHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      assertEquals(2411, tObjectCharHashMap0.capacity());
  }

  //Test case number: 38
  /*
   * 24 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z: I4 Branch 102 IFEQ L1134 - true
   * 2 gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z: I4 Branch 102 IFEQ L1134 - false
   * 3 gnu.trove.map.hash.TObjectCharHashMap.put(Ljava/lang/Object;C)C: root-Branch
   * 4 gnu.trove.map.hash.TObjectCharHashMap.putAll(Lgnu/trove/map/TObjectCharMap;)V: root-Branch
   * 5 gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I: root-Branch
   * 6 gnu.trove.map.hash.TObjectCharHashMap.getNoEntryValue()C: root-Branch
   * 7 gnu.trove.map.hash.TObjectCharHashMap.toString()Ljava/lang/String;: root-Branch
   * 8 gnu.trove.map.hash.TObjectCharHashMap.<init>()V: root-Branch
   * 9 gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I18 Branch 47 IFLE L506 - true
   * 10 gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I18 Branch 47 IFLE L506 - false
   * 11 gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - true
   * 12 gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - false
   * 13 gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I30 Branch 49 IF_ACMPEQ L507 - false
   * 14 gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I39 Branch 50 IFNE L507 - true
   * 15 gnu.trove.map.hash.TObjectCharHashMap.<init>(IFC)V: I23 Branch 8 IFEQ L124 - false
   * 16 gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C: I9 Branch 41 IFGE L443 - true
   * 17 gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C: I52 Branch 42 IFEQ L454 - false
   * 18 gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V: I13 Branch 9 IFEQ L138 - false
   * 19 gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V: I35 Branch 10 IFEQ L143 - false
   * 20 gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C: I12 Branch 21 IFGE L255 - true
   * 21 gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C: I41 Branch 22 IFEQ L263 - false
   * 22 gnu.trove.map.hash.TObjectCharHashMap$1.<init>(Lgnu/trove/map/hash/TObjectCharHashMap;)V: root-Branch
   * 23 gnu.trove.map.hash.TObjectCharHashMap$1.execute(Ljava/lang/Object;C)Z: root-Branch
   * 24 gnu.trove.map.hash.TObjectCharHashMap$2.<init>(Lgnu/trove/map/hash/TObjectCharHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   */

  @Test
  public void test38()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(1615, (float) 1615, '}');
      TObjectCharHashMap<Integer> tObjectCharHashMap1 = new TObjectCharHashMap<Integer>();
      tObjectCharHashMap0.adjustOrPutValue(" instead of ", '\u008C', '}');
      tObjectCharHashMap1.put((Integer) (-750), '}');
      TObjectCharHashMap<Object> tObjectCharHashMap2 = new TObjectCharHashMap<Object>((TObjectCharMap<?>) tObjectCharHashMap0);
      tObjectCharHashMap2.putAll((TObjectCharMap<?>) tObjectCharHashMap1);
      assertEquals(1, tObjectCharHashMap1.size());
      
      String string0 = tObjectCharHashMap2.toString();
      assertEquals("{-750=}, instead of =}}", string0);
  }
}
