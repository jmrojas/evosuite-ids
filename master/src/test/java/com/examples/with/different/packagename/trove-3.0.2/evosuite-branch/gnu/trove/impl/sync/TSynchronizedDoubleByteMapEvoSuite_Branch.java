/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TByteFunction;
import gnu.trove.impl.sync.TSynchronizedByteCollection;
import gnu.trove.impl.sync.TSynchronizedDoubleByteMap;
import gnu.trove.impl.sync.TSynchronizedDoubleSet;
import gnu.trove.iterator.TDoubleByteIterator;
import gnu.trove.map.TDoubleByteMap;
import gnu.trove.map.hash.TDoubleByteHashMap;
import gnu.trove.procedure.TByteProcedure;
import gnu.trove.procedure.TDoubleByteProcedure;
import gnu.trove.procedure.TDoubleProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedDoubleByteMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.keys()[D: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.<init>(Lgnu/trove/map/TDoubleByteMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      double[] doubleArray0 = tSynchronizedDoubleByteMap0.keys();
      assertNotNull(doubleArray0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.adjustValue(DB)Z: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tSynchronizedDoubleByteMap0.adjustValue(0.0, (byte) (-30));
      assertEquals(false, boolean0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.iterator()Lgnu/trove/iterator/TDoubleByteIterator;: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      TDoubleByteIterator tDoubleByteIterator0 = tSynchronizedDoubleByteMap0.iterator();
      assertEquals(false, tDoubleByteIterator0.hasNext());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.increment(D)Z: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(1);
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tSynchronizedDoubleByteMap0.increment((double) 1);
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.keys([D)[D: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      double[] doubleArray0 = tSynchronizedDoubleByteMap0.keys(tDoubleByteHashMap0._set);
      assertNotNull(doubleArray0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.containsValue(B)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tSynchronizedDoubleByteMap0.containsValue((byte)0);
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-206), (-206));
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      tSynchronizedDoubleByteMap0.putAll((Map<? extends Double, ? extends Byte>) hashMap0);
      assertEquals(true, tSynchronizedDoubleByteMap0.isEmpty());
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.getNoEntryKey()D: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      double double0 = tSynchronizedDoubleByteMap0.getNoEntryKey();
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.values([B)[B: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      byte[] byteArray0 = tSynchronizedDoubleByteMap0.values(tDoubleByteHashMap0._states);
      assertNotNull(byteArray0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.putAll(Lgnu/trove/map/TDoubleByteMap;)V: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      tSynchronizedDoubleByteMap0.putAll((TDoubleByteMap) tDoubleByteHashMap0);
      assertEquals("{}", tSynchronizedDoubleByteMap0.toString());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.forEachEntry(Lgnu/trove/procedure/TDoubleByteProcedure;)Z: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tSynchronizedDoubleByteMap0.forEachEntry((TDoubleByteProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.hashCode()I: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-206), (-206));
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      int int0 = tSynchronizedDoubleByteMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.clear()V: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      tSynchronizedDoubleByteMap0.clear();
      assertEquals(0, tSynchronizedDoubleByteMap0.size());
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.adjustOrPutValue(DBB)B: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      byte byte0 = tSynchronizedDoubleByteMap0.adjustOrPutValue((double) (byte)0, (byte) (-46), (byte) (-46));
      assertEquals(false, tDoubleByteHashMap0.isEmpty());
      assertEquals((byte) (-46), byte0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.transformValues(Lgnu/trove/function/TByteFunction;)V: root-Branch
   */

//   @Test
//   public void test14()  throws Throwable  {
//       TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
//       TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
//       tSynchronizedDoubleByteMap0.transformValues((TByteFunction) null);
//       assertEquals(0, tSynchronizedDoubleByteMap0.getNoEntryValue());
//   }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.getNoEntryValue()B: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      byte byte0 = tSynchronizedDoubleByteMap0.getNoEntryValue();
      assertEquals((byte)0, byte0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.values()[B: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-19), (-19));
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      byte[] byteArray0 = tSynchronizedDoubleByteMap0.values();
      assertNotNull(byteArray0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.putIfAbsent(DB)B: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-19), (-19));
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      tSynchronizedDoubleByteMap0.putIfAbsent((double) (-19), (byte)0);
      assertEquals(false, tDoubleByteHashMap0.isEmpty());
      assertEquals("{-19.0=0}", tSynchronizedDoubleByteMap0.toString());
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.retainEntries(Lgnu/trove/procedure/TDoubleByteProcedure;)Z: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(1);
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tSynchronizedDoubleByteMap0.retainEntries((TDoubleByteProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.containsKey(D)Z: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tSynchronizedDoubleByteMap0.containsKey((-314.13867573707694));
      assertEquals(false, boolean0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      String string0 = tSynchronizedDoubleByteMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.put(DB)B: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-19), (-19));
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      tSynchronizedDoubleByteMap0.put((double) (-19), (byte)0);
      assertEquals("{-19.0=0}", tDoubleByteHashMap0.toString());
      assertEquals(7, tDoubleByteHashMap0.capacity());
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tSynchronizedDoubleByteMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.size()I: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-19), (-19));
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      int int0 = tSynchronizedDoubleByteMap0.size();
      assertEquals(0, int0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.equals(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tSynchronizedDoubleByteMap0.equals((Object) "");
      assertEquals(false, boolean0);
  }

  //Test case number: 25
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.<init>(Lgnu/trove/map/TDoubleByteMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(0, (float) 0, (double) 0, (byte) (-97));
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0, (Object) "");
      boolean boolean0 = tSynchronizedDoubleByteMap0.forEachKey((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.get(D)B: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      byte byte0 = tSynchronizedDoubleByteMap0.get((double) (byte) (-46));
      assertEquals((byte)0, byte0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-19), (-19));
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tSynchronizedDoubleByteMap0.forEachValue((TByteProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.remove(D)B: root-Branch
   */

  @Test
  public void test28()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0, (Object) double0);
      byte byte0 = tSynchronizedDoubleByteMap0.remove((double) double0);
      assertEquals((byte)0, byte0);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.<init>(Lgnu/trove/map/TDoubleByteMap;)V: I17 Branch 1 IFNONNULL L59 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = null;
      try {
        tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.keySet()Lgnu/trove/set/TDoubleSet;: I11 Branch 2 IFNONNULL L107 - true
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.keySet()Lgnu/trove/set/TDoubleSet;: I11 Branch 2 IFNONNULL L107 - false
   * 3 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.<init>(Lgnu/trove/map/TDoubleByteMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test30()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0, (Object) double0);
      TSynchronizedDoubleSet tSynchronizedDoubleSet0 = (TSynchronizedDoubleSet)tSynchronizedDoubleByteMap0.keySet();
      assertNotNull(tSynchronizedDoubleSet0);
      
      TSynchronizedDoubleSet tSynchronizedDoubleSet1 = (TSynchronizedDoubleSet)tSynchronizedDoubleByteMap0.keySet();
      assertSame(tSynchronizedDoubleSet1, tSynchronizedDoubleSet0);
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.valueCollection()Lgnu/trove/TByteCollection;: I11 Branch 3 IFNONNULL L121 - true
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.valueCollection()Lgnu/trove/TByteCollection;: I11 Branch 3 IFNONNULL L121 - false
   * 3 gnu.trove.impl.sync.TSynchronizedDoubleByteMap.<init>(Lgnu/trove/map/TDoubleByteMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test31()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      TSynchronizedByteCollection tSynchronizedByteCollection0 = (TSynchronizedByteCollection)tSynchronizedDoubleByteMap0.valueCollection();
      assertNotNull(tSynchronizedByteCollection0);
      
      TSynchronizedByteCollection tSynchronizedByteCollection1 = (TSynchronizedByteCollection)tSynchronizedDoubleByteMap0.valueCollection();
      assertSame(tSynchronizedByteCollection1, tSynchronizedByteCollection0);
  }
}
