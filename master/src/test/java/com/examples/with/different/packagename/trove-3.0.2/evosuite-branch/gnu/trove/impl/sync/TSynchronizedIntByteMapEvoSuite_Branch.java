/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TByteFunction;
import gnu.trove.impl.sync.TSynchronizedByteCollection;
import gnu.trove.impl.sync.TSynchronizedIntByteMap;
import gnu.trove.impl.sync.TSynchronizedIntSet;
import gnu.trove.iterator.TIntByteIterator;
import gnu.trove.map.TIntByteMap;
import gnu.trove.map.hash.TIntByteHashMap;
import gnu.trove.procedure.TByteProcedure;
import gnu.trove.procedure.TIntByteProcedure;
import gnu.trove.procedure.TIntProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedIntByteMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.retainEntries(Lgnu/trove/procedure/TIntByteProcedure;)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedIntByteMap.<init>(Lgnu/trove/map/TIntByteMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(0, 0);
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      boolean boolean0 = tSynchronizedIntByteMap0.retainEntries((TIntByteProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.putAll(Lgnu/trove/map/TIntByteMap;)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(0, 0);
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      tSynchronizedIntByteMap0.putAll((TIntByteMap) tIntByteHashMap0);
      assertEquals(0, tIntByteHashMap0.size());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.put(IB)B: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedIntByteMap.<init>(Lgnu/trove/map/TIntByteMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-1446), (-1446));
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0, (Object) "37777775132");
      tSynchronizedIntByteMap0.put((-1446), (byte) (-34));
      assertEquals(1, tIntByteHashMap0.size());
      assertEquals("{-1446=-34}", tSynchronizedIntByteMap0.toString());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.get(I)B: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap();
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      byte byte0 = tSynchronizedIntByteMap0.get((int) (byte)5);
      assertEquals((byte)0, byte0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.keys()[I: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap();
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      int[] intArray0 = tSynchronizedIntByteMap0.keys();
      assertNotNull(intArray0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.getNoEntryKey()I: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(65);
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      int int0 = tSynchronizedIntByteMap0.getNoEntryKey();
      assertEquals(0, int0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.increment(I)Z: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap();
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      boolean boolean0 = tSynchronizedIntByteMap0.increment((int) (byte) (-11));
      assertEquals(false, boolean0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.iterator()Lgnu/trove/iterator/TIntByteIterator;: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(65);
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      TIntByteIterator tIntByteIterator0 = tSynchronizedIntByteMap0.iterator();
      assertEquals(false, tIntByteIterator0.hasNext());
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.hashCode()I: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(51);
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      int int0 = tSynchronizedIntByteMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.putIfAbsent(IB)B: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(65);
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      tSynchronizedIntByteMap0.putIfAbsent((int) (byte)25, (byte)25);
      assertEquals(1, tIntByteHashMap0.size());
      assertEquals("{25=25}", tSynchronizedIntByteMap0.toString());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.values([B)[B: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap();
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      byte[] byteArray0 = tSynchronizedIntByteMap0.values(tIntByteHashMap0._states);
      assertNotNull(byteArray0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap();
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      tSynchronizedIntByteMap0.putAll((Map<? extends Integer, ? extends Byte>) hashMap0);
      assertEquals(0, hashMap0.size());
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.getNoEntryValue()B: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(51);
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      byte byte0 = tSynchronizedIntByteMap0.getNoEntryValue();
      assertEquals((byte)0, byte0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(65);
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      boolean boolean0 = tSynchronizedIntByteMap0.forEachValue((TByteProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.containsValue(B)Z: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(51);
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      boolean boolean0 = tSynchronizedIntByteMap0.containsValue((byte)0);
      assertEquals(false, boolean0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.values()[B: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(0, 0);
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      byte[] byteArray0 = tSynchronizedIntByteMap0.values();
      assertNotNull(byteArray0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap();
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      String string0 = tSynchronizedIntByteMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.containsKey(I)Z: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap();
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      boolean boolean0 = tSynchronizedIntByteMap0.containsKey(557);
      assertEquals(false, boolean0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap();
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      boolean boolean0 = tSynchronizedIntByteMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.size()I: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(0, 0);
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      int int0 = tSynchronizedIntByteMap0.size();
      assertEquals(0, int0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.transformValues(Lgnu/trove/function/TByteFunction;)V: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(51);
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      tSynchronizedIntByteMap0.transformValues((TByteFunction) null);
      assertEquals(0, tSynchronizedIntByteMap0.getNoEntryKey());
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.forEachEntry(Lgnu/trove/procedure/TIntByteProcedure;)Z: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(0, 0);
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      boolean boolean0 = tSynchronizedIntByteMap0.forEachEntry((TIntByteProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.forEachKey(Lgnu/trove/procedure/TIntProcedure;)Z: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(65);
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      boolean boolean0 = tSynchronizedIntByteMap0.forEachKey((TIntProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.keys([I)[I: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap();
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      int[] intArray0 = tSynchronizedIntByteMap0.keys(tIntByteHashMap0._set);
      assertNotNull(intArray0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.clear()V: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(0, 0);
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      tSynchronizedIntByteMap0.clear();
      assertEquals(0, tSynchronizedIntByteMap0.size());
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.adjustValue(IB)Z: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(65);
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      boolean boolean0 = tSynchronizedIntByteMap0.adjustValue(65, (byte)25);
      assertEquals(false, boolean0);
  }

  //Test case number: 26
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.remove(I)B: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedIntByteMap.<init>(Lgnu/trove/map/TIntByteMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-1446), (-1446));
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0, (Object) "37777775132");
      byte byte0 = tSynchronizedIntByteMap0.remove((-1446));
      assertEquals((byte)0, byte0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.equals(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap();
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      boolean boolean0 = tSynchronizedIntByteMap0.equals((Object) "{}");
      assertEquals(false, boolean0);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.adjustOrPutValue(IBB)B: root-Branch
   */

  @Test
  public void test28()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap();
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      byte byte0 = tSynchronizedIntByteMap0.adjustOrPutValue((int) (byte) (-11), (byte) (-11), (byte) (-11));
      assertEquals(false, tIntByteHashMap0.isEmpty());
      assertEquals((byte) (-11), byte0);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.<init>(Lgnu/trove/map/TIntByteMap;)V: I17 Branch 1 IFNONNULL L59 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = null;
      try {
        tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.keySet()Lgnu/trove/set/TIntSet;: I11 Branch 2 IFNONNULL L107 - true
   * 2 gnu.trove.impl.sync.TSynchronizedIntByteMap.keySet()Lgnu/trove/set/TIntSet;: I11 Branch 2 IFNONNULL L107 - false
   */

  @Test
  public void test30()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(65);
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      TSynchronizedIntSet tSynchronizedIntSet0 = (TSynchronizedIntSet)tSynchronizedIntByteMap0.keySet();
      assertNotNull(tSynchronizedIntSet0);
      
      TSynchronizedIntSet tSynchronizedIntSet1 = (TSynchronizedIntSet)tSynchronizedIntByteMap0.keySet();
      assertSame(tSynchronizedIntSet1, tSynchronizedIntSet0);
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedIntByteMap.valueCollection()Lgnu/trove/TByteCollection;: I11 Branch 3 IFNONNULL L121 - true
   * 2 gnu.trove.impl.sync.TSynchronizedIntByteMap.valueCollection()Lgnu/trove/TByteCollection;: I11 Branch 3 IFNONNULL L121 - false
   * 3 gnu.trove.impl.sync.TSynchronizedIntByteMap.<init>(Lgnu/trove/map/TIntByteMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test31()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap();
      TSynchronizedIntByteMap tSynchronizedIntByteMap0 = new TSynchronizedIntByteMap((TIntByteMap) tIntByteHashMap0);
      TSynchronizedByteCollection tSynchronizedByteCollection0 = (TSynchronizedByteCollection)tSynchronizedIntByteMap0.valueCollection();
      assertNotNull(tSynchronizedByteCollection0);
      
      TSynchronizedByteCollection tSynchronizedByteCollection1 = (TSynchronizedByteCollection)tSynchronizedIntByteMap0.valueCollection();
      assertSame(tSynchronizedByteCollection1, tSynchronizedByteCollection0);
  }
}
