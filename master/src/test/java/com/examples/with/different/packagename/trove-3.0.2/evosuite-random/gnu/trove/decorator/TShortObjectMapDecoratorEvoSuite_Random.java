/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TShortObjectMapDecorator;
import gnu.trove.map.TShortObjectMap;
import gnu.trove.map.hash.TShortObjectHashMap;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortObjectMapDecoratorEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TShortObjectMapDecorator<Object> tShortObjectMapDecorator0 = new TShortObjectMapDecorator<Object>();
      // Undeclared exception!
      try {
        tShortObjectMapDecorator0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>();
      TShortObjectMapDecorator<Integer> tShortObjectMapDecorator0 = new TShortObjectMapDecorator<Integer>((TShortObjectMap<Integer>) tShortObjectHashMap0);
      tShortObjectMapDecorator0.clear();
      assertEquals(0, tShortObjectMapDecorator0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      TShortObjectMap<Short> tShortObjectMap0 = null;
      TShortObjectMapDecorator<String> tShortObjectMapDecorator0 = new TShortObjectMapDecorator<String>();
      TShortObjectMapDecorator<AbstractMap.SimpleImmutableEntry<Short, Object>> tShortObjectMapDecorator1 = new TShortObjectMapDecorator<AbstractMap.SimpleImmutableEntry<Short, Object>>();
      tShortObjectMapDecorator1.entrySet();
      short short0 = (short)0;
      Short short1 = new Short(short0);
      String string0 = "";
      TShortObjectMapDecorator<AbstractMap.SimpleEntry<Object, Object>> tShortObjectMapDecorator2 = new TShortObjectMapDecorator<AbstractMap.SimpleEntry<Object, Object>>();
      // Undeclared exception!
      try {
        tShortObjectMapDecorator2.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TShortObjectMapDecorator<Object> tShortObjectMapDecorator0 = new TShortObjectMapDecorator<Object>();
          String string0 = "0SW(=/jmC%C{&";
          boolean boolean0 = false;
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0, boolean0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"0SW(=/jmC%C{&\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:136)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
      TShortObjectMapDecorator<String> tShortObjectMapDecorator0 = new TShortObjectMapDecorator<String>();
      String string0 = "";
      short short0 = (short)0;
      Short short1 = new Short(short0);
      String string1 = "";
      Locale locale0 = Locale.FRENCH;
      Locale locale1 = Locale.JAPAN;
      String string2 = locale0.getDisplayCountry(locale1);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(string0, (Object) string2);
      abstractMap_SimpleEntry0.getValue();
      // Undeclared exception!
      try {
        tShortObjectMapDecorator0.put(short1, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 0;
      TShortObjectHashMap<TShortObjectHashMap<Short>> tShortObjectHashMap0 = new TShortObjectHashMap<TShortObjectHashMap<Short>>(int0);
      TShortObjectMapDecorator<TShortObjectHashMap<Short>> tShortObjectMapDecorator0 = new TShortObjectMapDecorator<TShortObjectHashMap<Short>>((TShortObjectMap<TShortObjectHashMap<Short>>) tShortObjectHashMap0);
      assertEquals(0, tShortObjectMapDecorator0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 48;
      TShortObjectHashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>> tShortObjectHashMap0 = new TShortObjectHashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>>(int0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)47;
      byteArray0[0] = byte0;
      byte byte1 = (byte)110;
      byteArray0[1] = byte1;
      tShortObjectHashMap0._states = byteArray0;
      TShortObjectMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Integer>> tShortObjectMapDecorator0 = new TShortObjectMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Integer>>((TShortObjectMap<AbstractMap.SimpleImmutableEntry<Object, Integer>>) tShortObjectHashMap0);
      int int1 = (-925);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TShortObjectMapDecorator<Integer> tShortObjectMapDecorator0 = new TShortObjectMapDecorator<Integer>();
      TShortObjectMap<Integer> tShortObjectMap0 = null;
      int int0 = 1343;
      float float0 = 0.0F;
      short short0 = (short) (-4367);
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>(int0, float0, short0);
      Map.Entry<Integer, String> map_Entry0 = null;
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = null;
      try {
        abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(map_Entry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 1027;
      float float0 = 0.0F;
      TShortObjectHashMap<String> tShortObjectHashMap0 = new TShortObjectHashMap<String>(int0, float0);
      TShortObjectMapDecorator<String> tShortObjectMapDecorator0 = new TShortObjectMapDecorator<String>((TShortObjectMap<String>) tShortObjectHashMap0);
      String string0 = "";
      URI uRI0 = new URI(string0);
      String string1 = uRI0.getSchemeSpecificPart();
      tShortObjectMapDecorator0.containsValue((Object) string1);
      TShortObjectHashMap<Short> tShortObjectHashMap1 = new TShortObjectHashMap<Short>();
      TShortObjectMapDecorator<Short> tShortObjectMapDecorator1 = new TShortObjectMapDecorator<Short>((TShortObjectMap<Short>) tShortObjectHashMap1);
      TShortObjectMap<TShortObjectHashMap<Integer>> tShortObjectMap0 = null;
      TShortObjectMapDecorator<TShortObjectHashMap<Integer>> tShortObjectMapDecorator2 = new TShortObjectMapDecorator<TShortObjectHashMap<Integer>>(tShortObjectMap0);
      short short0 = (short) (-1);
      tShortObjectHashMap0.put(short0, string1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string2 = "G08wOJ";
      short short1 = (short)0;
      TShortObjectHashMap<String> tShortObjectHashMap2 = new TShortObjectHashMap<String>(int0, (float) int0, short1);
      // Undeclared exception!
      try {
        tShortObjectMapDecorator2.containsValue((Object) tShortObjectHashMap2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test9()  throws Throwable  {
//       TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>();
//       TShortObjectMapDecorator<Short> tShortObjectMapDecorator0 = new TShortObjectMapDecorator<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
//       TShortObjectMap<Short> tShortObjectMap0 = tShortObjectMapDecorator0.getMap();
//       assertEquals(0, tShortObjectMap0.getNoEntryKey());
//   }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 865;
      float float0 = 1611.566F;
      short short0 = (short)24829;
      TShortObjectHashMap<AbstractMap.SimpleEntry<String, Short>> tShortObjectHashMap0 = new TShortObjectHashMap<AbstractMap.SimpleEntry<String, Short>>(int0, float0, short0);
      TShortObjectHashMap<Short> tShortObjectHashMap1 = new TShortObjectHashMap<Short>(int0, float0);
      TShortObjectMapDecorator<Short> tShortObjectMapDecorator0 = new TShortObjectMapDecorator<Short>((TShortObjectMap<Short>) tShortObjectHashMap1);
      tShortObjectMapDecorator0.hashCode();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tShortObjectHashMap1._states);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) byteArrayInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) bufferedInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TShortObjectMapDecorator<Object> tShortObjectMapDecorator0 = new TShortObjectMapDecorator<Object>();
      ObjectInput objectInput0 = null;
      // Undeclared exception!
      try {
        tShortObjectMapDecorator0.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TShortObjectMapDecorator<Short> tShortObjectMapDecorator0 = new TShortObjectMapDecorator<Short>();
      TShortObjectMapDecorator<AbstractMap.SimpleImmutableEntry<Short, String>> tShortObjectMapDecorator1 = new TShortObjectMapDecorator<AbstractMap.SimpleImmutableEntry<Short, String>>();
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      TShortObjectMapDecorator<Object> tShortObjectMapDecorator2 = new TShortObjectMapDecorator<Object>();
      tShortObjectMapDecorator2.getMap();
      String string0 = "";
      short short0 = (short) (-429);
      Short short1 = new Short(short0);
      AbstractMap.SimpleImmutableEntry<String, Short> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Short>(string0, short1);
      Short short2 = new Short(short0);
      String string1 = short2.toString();
      tShortObjectMapDecorator0.equals((Object) string1);
      // Undeclared exception!
      try {
        abstractMap_SimpleImmutableEntry0.setValue((Short) short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TShortObjectMapDecorator<String> tShortObjectMapDecorator0 = new TShortObjectMapDecorator<String>();
      short short0 = (short)288;
      Short short1 = new Short(short0);
      String string0 = "7";
      // Undeclared exception!
      try {
        tShortObjectMapDecorator0.put(short1, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      TShortObjectMapDecorator<AbstractMap.SimpleEntry<Object, Short>> tShortObjectMapDecorator0 = new TShortObjectMapDecorator<AbstractMap.SimpleEntry<Object, Short>>();
      tShortObjectMapDecorator0.keySet();
      TShortObjectHashMap<Object> tShortObjectHashMap0 = null;
      AbstractMap.SimpleImmutableEntry<Integer, TShortObjectHashMap<Object>> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, TShortObjectHashMap<Object>>((Integer) int0, tShortObjectHashMap0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = byteArrayOutputStream0.toString();
      abstractMap_SimpleImmutableEntry0.equals((Object) string0);
      short short0 = (short)18;
      Short short1 = new Short(short0);
      String string1 = File.pathSeparator;
      Short short2 = new Short((short) short1);
      AbstractMap.SimpleEntry<Object, Short> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Short>((Object) string1, short2);
      // Undeclared exception!
      try {
        tShortObjectMapDecorator0.put(short1, abstractMap_SimpleEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
