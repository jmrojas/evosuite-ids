/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TByteCollection;
import gnu.trove.function.TByteFunction;
import gnu.trove.map.TCharByteMap;
import gnu.trove.map.hash.TCharByteHashMap;
import gnu.trove.procedure.TByteProcedure;
import gnu.trove.procedure.TCharByteProcedure;
import gnu.trove.procedure.TCharProcedure;
import gnu.trove.set.TCharSet;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharByteHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 16 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap$TCharByteHashIterator.key()C: root-Branch
   * 2 gnu.trove.map.hash.TCharByteHashMap$TCharByteHashIterator.advance()V: root-Branch
   * 3 gnu.trove.map.hash.TCharByteHashMap$TCharByteHashIterator.<init>(Lgnu/trove/map/hash/TCharByteHashMap;Lgnu/trove/map/hash/TCharByteHashMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TCharByteHashMap$TCharByteHashIterator.value()B: root-Branch
   * 5 gnu.trove.map.hash.TCharByteHashMap.setUp(I)I: root-Branch
   * 6 gnu.trove.map.hash.TCharByteHashMap.<init>(I)V: root-Branch
   * 7 gnu.trove.map.hash.TCharByteHashMap.put(CB)B: root-Branch
   * 8 gnu.trove.map.hash.TCharByteHashMap.iterator()Lgnu/trove/iterator/TCharByteIterator;: root-Branch
   * 9 gnu.trove.map.hash.TCharByteHashMap.<init>(Lgnu/trove/map/TCharByteMap;)V: I10 Branch 34 IFEQ L133 - false
   * 10 gnu.trove.map.hash.TCharByteHashMap.<init>(Lgnu/trove/map/TCharByteMap;)V: I38 Branch 35 IFEQ L139 - true
   * 11 gnu.trove.map.hash.TCharByteHashMap.<init>(Lgnu/trove/map/TCharByteMap;)V: I50 Branch 36 IFEQ L143 - true
   * 12 gnu.trove.map.hash.TCharByteHashMap.putIfAbsent(CB)B: I9 Branch 39 IFGE L205 - true
   * 13 gnu.trove.map.hash.TCharByteHashMap.doPut(CBI)B: I12 Branch 40 IFGE L214 - true
   * 14 gnu.trove.map.hash.TCharByteHashMap.doPut(CBI)B: I41 Branch 41 IFEQ L221 - false
   * 15 gnu.trove.map.hash.TCharByteHashMap.putAll(Lgnu/trove/map/TCharByteMap;)V: I15 Branch 43 IFEQ L243 - true
   * 16 gnu.trove.map.hash.TCharByteHashMap.putAll(Lgnu/trove/map/TCharByteMap;)V: I15 Branch 43 IFEQ L243 - false
   */

  @Test
  public void test0()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap((int) 'd');
      tCharByteHashMap0.putIfAbsent('d', (byte)106);
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap((TCharByteMap) tCharByteHashMap0);
      assertEquals(false, tCharByteHashMap0.isEmpty());
      assertEquals("{d=106}", tCharByteHashMap0.toString());
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TCharByteHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TCharByteHashMap.<init>(IFCB)V: root-Branch
   * 3 gnu.trove.map.hash.TCharByteHashMap.keySet()Lgnu/trove/set/TCharSet;: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(918, (float) 918, '|', (byte)21);
      TCharSet tCharSet0 = tCharByteHashMap0.keySet();
      assertEquals(true, tCharSet0.isEmpty());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap$TValueView.<init>(Lgnu/trove/map/hash/TCharByteHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TCharByteHashMap.valueCollection()Lgnu/trove/TByteCollection;: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(0);
      TByteCollection tByteCollection0 = tCharByteHashMap0.valueCollection();
      assertEquals(true, tByteCollection0.isEmpty());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharByteHashMap.forEachKey(Lgnu/trove/procedure/TCharProcedure;)Z: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap((int) 'd');
      boolean boolean0 = tCharByteHashMap0.forEachKey((TCharProcedure) null);
      assertEquals(277, tCharByteHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharByteHashMap.containsKey(C)Z: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(0);
      boolean boolean0 = tCharByteHashMap0.containsKey('\u0080');
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.increment(C)Z: root-Branch
   * 2 gnu.trove.map.hash.TCharByteHashMap.adjustValue(CB)Z: I9 Branch 71 IFGE L477 - false
   * 3 gnu.trove.map.hash.TCharByteHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(Integer.MAX_VALUE, Integer.MAX_VALUE);
      boolean boolean0 = tCharByteHashMap0.increment('\\');
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TCharByteHashMap.<init>([C[B)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 3 gnu.trove.map.hash.TCharByteHashMap.<init>([C[B)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 4 gnu.trove.map.hash.TCharByteHashMap.doPut(CBI)B: I12 Branch 40 IFGE L214 - false
   * 5 gnu.trove.map.hash.TCharByteHashMap.doPut(CBI)B: I41 Branch 41 IFEQ L221 - true
   * 6 gnu.trove.map.hash.TCharByteHashMap.remove(C)B: I14 Branch 46 IFLT L276 - false
   */

  @Test
  public void test6()  throws Throwable  {
      char[] charArray0 = new char[2];
      byte[] byteArray0 = new byte[5];
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      assertEquals(1, tCharByteHashMap0.size());
      
      byte byte0 = tCharByteHashMap0.remove('\u0000');
      assertEquals("{}", tCharByteHashMap0.toString());
      assertEquals((byte)0, byte0);
  }

  //Test case number: 7
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.<init>(Lgnu/trove/map/TCharByteMap;)V: I38 Branch 35 IFEQ L139 - false
   * 2 gnu.trove.map.hash.TCharByteHashMap.<init>(Lgnu/trove/map/TCharByteMap;)V: I50 Branch 36 IFEQ L143 - false
   * 3 gnu.trove.map.hash.TCharByteHashMap$TCharByteHashIterator.<init>(Lgnu/trove/map/hash/TCharByteHashMap;Lgnu/trove/map/hash/TCharByteHashMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TCharByteHashMap.iterator()Lgnu/trove/iterator/TCharByteIterator;: root-Branch
   * 5 gnu.trove.map.hash.TCharByteHashMap.putAll(Lgnu/trove/map/TCharByteMap;)V: I15 Branch 43 IFEQ L243 - true
   * 6 gnu.trove.map.hash.TCharByteHashMap.<init>(Lgnu/trove/map/TCharByteMap;)V: I10 Branch 34 IFEQ L133 - false
   */

//   @Test
//   public void test7()  throws Throwable  {
//       TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(918, (float) 918, '|', (byte)21);
//       TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap((TCharByteMap) tCharByteHashMap0);
//       assertEquals('|', tCharByteHashMap1.getNoEntryKey());
//       assertEquals(3, tCharByteHashMap1.capacity());
//       assertEquals(21, tCharByteHashMap1.getNoEntryValue());
//   }

  //Test case number: 8
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.putIfAbsent(CB)B: I9 Branch 39 IFGE L205 - false
   * 2 gnu.trove.map.hash.TCharByteHashMap.adjustOrPutValue(CBB)B: I9 Branch 72 IFGE L491 - true
   * 3 gnu.trove.map.hash.TCharByteHashMap.adjustOrPutValue(CBB)B: I59 Branch 73 IFEQ L502 - false
   */

  @Test
  public void test8()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(918, (float) 918, '|', (byte)21);
      tCharByteHashMap0.adjustOrPutValue('|', (byte)21, (byte)21);
      byte byte0 = tCharByteHashMap0.putIfAbsent('|', (byte)21);
      assertEquals("{|=21}", tCharByteHashMap0.toString());
      assertEquals((byte)21, byte0);
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   * 2 gnu.trove.map.hash.TCharByteHashMap.<init>()V: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap();
      HashMap<Character, Byte> hashMap0 = new HashMap<Character, Byte>();
      tCharByteHashMap0.putAll((Map<? extends Character, ? extends Byte>) hashMap0);
      assertEquals(23, tCharByteHashMap0.capacity());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharByteHashMap.get(C)B: I9 Branch 44 IFGE L253 - false
   */

  @Test
  public void test10()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(Integer.MAX_VALUE, Integer.MAX_VALUE);
      Character character0 = Character.valueOf('\\');
      byte byte0 = tCharByteHashMap0.get((char) character0);
      assertEquals((byte)0, byte0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharByteHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   */

  @Test
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[5];
      byte[] byteArray0 = new byte[8];
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      boolean boolean0 = tCharByteHashMap0.isEmpty();
      assertEquals(1, tCharByteHashMap0.size());
      assertEquals(false, boolean0);
      assertEquals(17, tCharByteHashMap0.capacity());
      assertEquals("{\u0000=0}", tCharByteHashMap0.toString());
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharByteHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test12()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap((-1), (-1));
      boolean boolean0 = tCharByteHashMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharByteHashMap.remove(C)B: I14 Branch 46 IFLT L276 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap((-1), (-1));
      byte byte0 = tCharByteHashMap0.remove('+');
      assertEquals((byte)0, byte0);
      assertEquals(0, tCharByteHashMap0.size());
  }

  //Test case number: 14
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.keys()[C: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TCharByteHashMap.keys()[C: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TCharByteHashMap.keys()[C: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TCharByteHashMap.keys()[C: I34 Branch 48 IF_ICMPNE L304 - true
   * 5 gnu.trove.map.hash.TCharByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 6 gnu.trove.map.hash.TCharByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 7 gnu.trove.map.hash.TCharByteHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 8 gnu.trove.map.hash.TCharByteHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   */

  @Test
  public void test14()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap((-1), (-1));
      tCharByteHashMap0.adjustOrPutValue('\"', (byte) (-1), (byte) (-1));
      tCharByteHashMap0.keys();
      assertEquals(false, tCharByteHashMap0.isEmpty());
      assertEquals("{\"=-1}", tCharByteHashMap0.toString());
  }

  //Test case number: 15
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.keys([C)[C: I10 Branch 49 IF_ICMPGE L315 - true
   * 2 gnu.trove.map.hash.TCharByteHashMap.keys([C)[C: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TCharByteHashMap.keys([C)[C: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TCharByteHashMap.keys([C)[C: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap((-1), (-1));
      char[] charArray0 = tCharByteHashMap0.keys(tCharByteHashMap0._set);
      assertNotNull(charArray0);
  }

  //Test case number: 16
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.keys([C)[C: I10 Branch 49 IF_ICMPGE L315 - false
   * 2 gnu.trove.map.hash.TCharByteHashMap.keys([C)[C: I44 Branch 51 IF_ICMPNE L323 - false
   * 3 gnu.trove.map.hash.TCharByteHashMap.keys([C)[C: I37 Branch 50 IFLE L322 - true
   * 4 gnu.trove.map.hash.TCharByteHashMap.keys([C)[C: I37 Branch 50 IFLE L322 - false
   * 5 gnu.trove.map.hash.TCharByteHashMap.keys([C)[C: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap();
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(charArray0, tCharByteHashMap0._states);
      tCharByteHashMap1.putIfAbsent('D', (byte)78);
      tCharByteHashMap1.keys(charArray0);
      assertEquals(3, tCharByteHashMap1.size());
      assertEquals("{D=78, p=0, \u0000=0}", tCharByteHashMap1.toString());
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.values()[B: I34 Branch 53 IF_ICMPNE L344 - false
   * 2 gnu.trove.map.hash.TCharByteHashMap.values()[B: I27 Branch 52 IFLE L343 - true
   * 3 gnu.trove.map.hash.TCharByteHashMap.values()[B: I27 Branch 52 IFLE L343 - false
   * 4 gnu.trove.map.hash.TCharByteHashMap.values()[B: I34 Branch 53 IF_ICMPNE L344 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap();
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(tCharByteHashMap0._set, tCharByteHashMap0._states);
      byte[] byteArray0 = tCharByteHashMap1.values();
      assertEquals("{\u0000=0}", tCharByteHashMap1.toString());
      assertNotNull(byteArray0);
      assertEquals(1, tCharByteHashMap1.size());
  }

  //Test case number: 18
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.values([B)[B: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TCharByteHashMap.values([B)[B: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TCharByteHashMap.values([B)[B: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TCharByteHashMap.values([B)[B: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap((-1475));
      byte[] byteArray0 = tCharByteHashMap0.values(tCharByteHashMap0._states);
      assertNotNull(byteArray0);
  }

  //Test case number: 19
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.values([B)[B: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TCharByteHashMap.values([B)[B: I44 Branch 56 IF_ICMPNE L363 - false
   * 3 gnu.trove.map.hash.TCharByteHashMap.values([B)[B: I37 Branch 55 IFLE L362 - true
   * 4 gnu.trove.map.hash.TCharByteHashMap.values([B)[B: I37 Branch 55 IFLE L362 - false
   * 5 gnu.trove.map.hash.TCharByteHashMap.values([B)[B: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[8];
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(0);
      byte[] byteArray0 = new byte[2];
      charArray0[0] = '[';
      charArray0[1] = 'h';
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(charArray0, tCharByteHashMap0._states);
      byte[] byteArray1 = tCharByteHashMap1.values(byteArray0);
      assertEquals("{[=0, h=0, \u0000=0}", tCharByteHashMap1.toString());
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  //Test case number: 20
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.containsValue(B)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TCharByteHashMap.containsValue(B)Z: I30 Branch 59 IF_ICMPNE L377 - false
   * 3 gnu.trove.map.hash.TCharByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 4 gnu.trove.map.hash.TCharByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 5 gnu.trove.map.hash.TCharByteHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 6 gnu.trove.map.hash.TCharByteHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 7 gnu.trove.map.hash.TCharByteHashMap.containsValue(B)Z: I18 Branch 57 IFLE L376 - false
   */

  @Test
  public void test20()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap((-1), (-1));
      tCharByteHashMap0.adjustOrPutValue('\"', (byte) (-1), (byte) (-1));
      boolean boolean0 = tCharByteHashMap0.containsValue((byte) (-1));
      assertEquals(1, tCharByteHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 21
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.containsValue(B)Z: I30 Branch 59 IF_ICMPNE L377 - true
   * 2 gnu.trove.map.hash.TCharByteHashMap.containsValue(B)Z: I18 Branch 57 IFLE L376 - true
   * 3 gnu.trove.map.hash.TCharByteHashMap.containsValue(B)Z: I18 Branch 57 IFLE L376 - false
   * 4 gnu.trove.map.hash.TCharByteHashMap.containsValue(B)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 5 gnu.trove.map.hash.TCharByteHashMap.containsValue(B)Z: I25 Branch 58 IF_ICMPNE L377 - false
   */

  @Test
  public void test21()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap((int) 'd');
      tCharByteHashMap0.putIfAbsent('d', (byte)106);
      boolean boolean0 = tCharByteHashMap0.containsValue((byte)0);
      assertEquals("{d=106}", tCharByteHashMap0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 22
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TCharByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TCharByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap((int) (byte) (-99), (float) (byte) (-99), '*', (byte) (-99));
      boolean boolean0 = tCharByteHashMap0.forEachValue((TByteProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TCharByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TCharByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test23()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(Integer.MAX_VALUE, Integer.MAX_VALUE);
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(tCharByteHashMap0._set, tCharByteHashMap0._states);
      // Undeclared exception!
      try {
        tCharByteHashMap1.forEachValue((TByteProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TCharByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TCharByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

//   @Test
//   public void test24()  throws Throwable  {
//       TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(0);
//       tCharByteHashMap0.transformValues((TByteFunction) null);
//       assertEquals(0.5F, tCharByteHashMap0.getAutoCompactionFactor(), 0.01F);
//   }

  //Test case number: 25
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TCharByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I18 Branch 66 IFLE L434 - false
   */

  @Test
  public void test25()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(0);
      tCharByteHashMap0.adjustOrPutValue('\u0080', (byte)0, (byte)65);
      // Undeclared exception!
      try {
        tCharByteHashMap0.transformValues((TByteFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.retainEntries(Lgnu/trove/procedure/TCharByteProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TCharByteHashMap.retainEntries(Lgnu/trove/procedure/TCharByteProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TCharByteHashMap.retainEntries(Lgnu/trove/procedure/TCharByteProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap((-1475));
      boolean boolean0 = tCharByteHashMap0.retainEntries((TCharByteProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 27
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.retainEntries(Lgnu/trove/procedure/TCharByteProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TCharByteHashMap.putIfAbsent(CB)B: I9 Branch 39 IFGE L205 - true
   * 3 gnu.trove.map.hash.TCharByteHashMap.retainEntries(Lgnu/trove/procedure/TCharByteProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 4 gnu.trove.map.hash.TCharByteHashMap.retainEntries(Lgnu/trove/procedure/TCharByteProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test27()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap();
      tCharByteHashMap0.putIfAbsent('l', (byte)1);
      // Undeclared exception!
      try {
        tCharByteHashMap0.retainEntries((TCharByteProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharByteHashMap.adjustValue(CB)Z: I9 Branch 71 IFGE L477 - true
   */

  @Test
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = 'r';
      byte[] byteArray0 = new byte[7];
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      boolean boolean0 = tCharByteHashMap0.adjustValue('r', (byte) (-81));
      assertEquals("{r=-81, \u0000=0}", tCharByteHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.adjustOrPutValue(CBB)B: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TCharByteHashMap.adjustOrPutValue(CBB)B: I59 Branch 73 IFEQ L502 - true
   */

  @Test
  public void test29()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(0);
      tCharByteHashMap0.adjustOrPutValue('\u0080', (byte)0, (byte)65);
      byte byte0 = tCharByteHashMap0.adjustOrPutValue('\u0080', (byte)0, (byte)65);
      assertEquals(false, tCharByteHashMap0.isEmpty());
      assertEquals((byte)65, byte0);
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   * 2 gnu.trove.map.hash.TCharByteHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test30()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(Integer.MAX_VALUE, Integer.MAX_VALUE);
      Character character0 = Character.valueOf('\\');
      boolean boolean0 = tCharByteHashMap0.equals((Object) character0);
      assertEquals(false, boolean0);
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   * 2 gnu.trove.map.hash.TCharByteHashMap.clear()V: root-Branch
   * 3 gnu.trove.map.hash.TCharByteHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   */

  @Test
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[8];
      byte[] byteArray0 = new byte[5];
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      assertEquals(false, tCharByteHashMap0.isEmpty());
      
      tCharByteHashMap0.clear();
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(tCharByteHashMap0._set, tCharByteHashMap0._states);
      boolean boolean0 = tCharByteHashMap0.equals((Object) tCharByteHashMap1);
      assertEquals(false, boolean0);
  }

  //Test case number: 32
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - false
   * 2 gnu.trove.map.hash.TCharByteHashMap.equals(Ljava/lang/Object;)Z: I87 Branch 79 IF_ICMPEQ L1200 - false
   * 3 gnu.trove.map.hash.TCharByteHashMap.equals(Ljava/lang/Object;)Z: I90 Branch 80 IF_ICMPEQ L1200 - true
   * 4 gnu.trove.map.hash.TCharByteHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 5 gnu.trove.map.hash.TCharByteHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - true
   * 6 gnu.trove.map.hash.TCharByteHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 7 gnu.trove.map.hash.TCharByteHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 8 gnu.trove.map.hash.TCharByteHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 9 gnu.trove.map.hash.TCharByteHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 10 gnu.trove.map.hash.TCharByteHashMap.get(C)B: I9 Branch 44 IFGE L253 - true
   */

  @Test
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[3] = 'P';
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)1;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(charArray0, tCharByteHashMap0._states);
      boolean boolean0 = tCharByteHashMap0.equals((Object) tCharByteHashMap1);
      assertEquals("{P=0, \u0000=0}", tCharByteHashMap1.toString());
      assertTrue(tCharByteHashMap1.equals(tCharByteHashMap0));
      assertEquals("{P=1, \u0000=0}", tCharByteHashMap0.toString());
      assertEquals(2, tCharByteHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 33
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.equals(Ljava/lang/Object;)Z: I90 Branch 80 IF_ICMPEQ L1200 - false
   * 2 gnu.trove.map.hash.TCharByteHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 3 gnu.trove.map.hash.TCharByteHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 4 gnu.trove.map.hash.TCharByteHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 5 gnu.trove.map.hash.TCharByteHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 6 gnu.trove.map.hash.TCharByteHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 7 gnu.trove.map.hash.TCharByteHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - false
   * 8 gnu.trove.map.hash.TCharByteHashMap.equals(Ljava/lang/Object;)Z: I87 Branch 79 IF_ICMPEQ L1200 - false
   * 9 gnu.trove.map.hash.TCharByteHashMap.get(C)B: I9 Branch 44 IFGE L253 - true
   */

  @Test
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[8];
      byte[] byteArray0 = new byte[4];
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      tCharByteHashMap0.adjustOrPutValue('D', (byte)102, (byte)84);
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(tCharByteHashMap0._set, tCharByteHashMap0._states);
      boolean boolean0 = tCharByteHashMap0.equals((Object) tCharByteHashMap1);
      assertEquals(2, tCharByteHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 34
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 2 gnu.trove.map.hash.TCharByteHashMap.<init>(IFCB)V: root-Branch
   * 3 gnu.trove.map.hash.TCharByteHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 4 gnu.trove.map.hash.TCharByteHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 5 gnu.trove.map.hash.TCharByteHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   * 6 gnu.trove.map.hash.TCharByteHashMap.adjustOrPutValue(CBB)B: I9 Branch 72 IFGE L491 - true
   * 7 gnu.trove.map.hash.TCharByteHashMap.adjustOrPutValue(CBB)B: I59 Branch 73 IFEQ L502 - false
   */

  @Test
  public void test34()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(918, (float) 918, '|', (byte)21);
      tCharByteHashMap0.adjustOrPutValue('|', (byte)21, (byte)21);
      int int0 = tCharByteHashMap0.hashCode();
      assertEquals(false, tCharByteHashMap0.isEmpty());
      assertEquals(105, int0);
  }

  //Test case number: 35
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap$1.execute(CB)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TCharByteHashMap$1.<init>(Lgnu/trove/map/hash/TCharByteHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 3 gnu.trove.map.hash.TCharByteHashMap$1.execute(CB)Z: I4 Branch 115 IFEQ L1233 - false
   * 4 gnu.trove.map.hash.TCharByteHashMap.<init>(I)V: root-Branch
   * 5 gnu.trove.map.hash.TCharByteHashMap.toString()Ljava/lang/String;: root-Branch
   * 6 gnu.trove.map.hash.TCharByteHashMap.forEachEntry(Lgnu/trove/procedure/TCharByteProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 7 gnu.trove.map.hash.TCharByteHashMap.forEachEntry(Lgnu/trove/procedure/TCharByteProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 8 gnu.trove.map.hash.TCharByteHashMap.forEachEntry(Lgnu/trove/procedure/TCharByteProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 9 gnu.trove.map.hash.TCharByteHashMap.forEachEntry(Lgnu/trove/procedure/TCharByteProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 10 gnu.trove.map.hash.TCharByteHashMap.forEachEntry(Lgnu/trove/procedure/TCharByteProcedure;)Z: I39 Branch 65 IFNE L422 - true
   */

  @Test
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[8];
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(0);
      charArray0[0] = 'h';
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(charArray0, tCharByteHashMap0._states);
      String string0 = tCharByteHashMap1.toString();
      assertNotNull(string0);
      assertEquals(17, tCharByteHashMap1.capacity());
      assertEquals(2, tCharByteHashMap1.size());
      assertEquals("{h=0, \u0000=0}", string0);
  }

  //Test case number: 36
  /*
   * 13 covered goals:
   * 1 gnu.trove.map.hash.TCharByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 2 gnu.trove.map.hash.TCharByteHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TCharByteHashMap.setUp(I)I: root-Branch
   * 4 gnu.trove.map.hash.TCharByteHashMap.put(CB)B: root-Branch
   * 5 gnu.trove.map.hash.TCharByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 6 gnu.trove.map.hash.TCharByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 7 gnu.trove.map.hash.TCharByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 8 gnu.trove.map.hash.TCharByteHashMap.<init>([C[B)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 9 gnu.trove.map.hash.TCharByteHashMap.<init>([C[B)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 10 gnu.trove.map.hash.TCharByteHashMap.doPut(CBI)B: I12 Branch 40 IFGE L214 - true
   * 11 gnu.trove.map.hash.TCharByteHashMap.doPut(CBI)B: I12 Branch 40 IFGE L214 - false
   * 12 gnu.trove.map.hash.TCharByteHashMap.doPut(CBI)B: I41 Branch 41 IFEQ L221 - true
   * 13 gnu.trove.map.hash.TCharByteHashMap.doPut(CBI)B: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[2];
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap();
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(charArray0, tCharByteHashMap0._states);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((int) 'F');
      PrintStream printStream0 = new PrintStream((OutputStream) byteArrayOutputStream0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      tCharByteHashMap1.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(1, tCharByteHashMap1.size());
      assertEquals("{\u0000=0}", tCharByteHashMap1.toString());
  }
}
