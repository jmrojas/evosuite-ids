/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedDoubleByteMap;
import gnu.trove.map.TDoubleByteMap;
import gnu.trove.map.hash.TDoubleByteHashMap;
import gnu.trove.procedure.TDoubleByteProcedure;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedDoubleByteMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TDoubleByteMap tDoubleByteMap0 = null;
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = null;
      try {
        tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap(tDoubleByteMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      double double1 = 1453.337994857991;
      doubleArray0[1] = double1;
      double double2 = (-1205.9930615662788);
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = 0.0;
      doubleArray0[5] = double5;
      double double6 = 2024.0355684309266;
      doubleArray0[6] = double6;
      double double7 = 1.0;
      doubleArray0[7] = double7;
      double double8 = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = double8;
      double double9 = 0.0;
      doubleArray0[9] = double9;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)10;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)1;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-15);
      byteArray0[3] = byte3;
      byte byte4 = (byte)17;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-100);
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-48);
      byteArray0[8] = byte8;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      int int0 = tSynchronizedDoubleByteMap0.hashCode();
      assertEquals((-1376064031), int0);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-1);
      float float0 = 0.0F;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(int0, float0);
      TDoubleByteHashMap tDoubleByteHashMap1 = null;
      try {
        tDoubleByteHashMap1 = new TDoubleByteHashMap((TDoubleByteMap) tDoubleByteHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
          String string0 = "E`G0*Hx$&Oi=a";
          File file0 = new File(string0, string0);
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"E`G0*Hx$&Oi=a/E`G0*Hx$&Oi=a/E`G0*Hx$&Oi=a8067329202280136263E`G0*Hx$&Oi=a\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.File.createTempFile(File.java:1871)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:601)
             // org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:264)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = (-696.076835749124);
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 1.0;
      doubleArray0[3] = double3;
      double double4 = (-1418.2421014151244);
      doubleArray0[4] = double4;
      double double5 = 1.0;
      doubleArray0[5] = double5;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)80;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-6);
      byteArray0[2] = byte2;
      byte byte3 = (byte)6;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-69);
      byteArray0[4] = byte4;
      byte byte5 = (byte)124;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-35);
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap((TDoubleByteMap) tDoubleByteHashMap0);
      Object object0 = null;
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap1, object0);
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap1 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tSynchronizedDoubleByteMap0, object0);
      // Undeclared exception!
      try {
        tSynchronizedDoubleByteMap1.values();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      int int0 = (-1818);
      double double0 = 0.0;
      TDoubleByteProcedure tDoubleByteProcedure0 = null;
      tDoubleByteHashMap0.forEachEntry(tDoubleByteProcedure0);
      byte byte0 = (byte)95;
      Object object0 = null;
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0, object0);
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap(int0, (float) int0, double0, byte0);
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap1 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap1);
      byte byte1 = tSynchronizedDoubleByteMap1.getNoEntryValue();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap2 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap1);
      double double1 = 1441.7646729632058;
      byte byte2 = (byte) (-84);
      tSynchronizedDoubleByteMap2.put((double) int0, byte1);
      tSynchronizedDoubleByteMap1.getNoEntryKey();
      tSynchronizedDoubleByteMap2.adjustOrPutValue(double1, byte1, byte2);
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap3 = (TSynchronizedDoubleByteMap)tSynchronizedDoubleByteMap2.mutex;
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap4 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0, (Object) tSynchronizedDoubleByteMap3);
      assertEquals(2, tDoubleByteHashMap1.size());
      assertEquals("{1441.7646729632058=-84, -1818.0=95}", tDoubleByteHashMap1.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 338;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(int0, int0);
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.CANADA;
      String string0 = locale0.getDisplayScript(locale1);
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0, (Object) string0);
      double double0 = 0.0;
      byte byte0 = (byte)0;
      byte byte1 = tSynchronizedDoubleByteMap0.adjustOrPutValue(double0, byte0, byte0);
      assertEquals(1, tDoubleByteHashMap0.size());
      assertEquals((byte)0, byte1);
  }

  @Test
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = double0;
      double double1 = (-1.0);
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = double4;
      double double5 = 0.0;
      doubleArray0[5] = double5;
      double double6 = 502.0097826461709;
      doubleArray0[6] = double6;
      double double7 = 0.0;
      doubleArray0[7] = double7;
      double double8 = 1989.6992484506918;
      doubleArray0[8] = double8;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)16;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)84;
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-114);
      byteArray0[5] = byte5;
      byte byte6 = (byte)18;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-37);
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      byteArray0[8] = byte8;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = locale0.getISO3Language();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0, (Object) string0);
      assertEquals("{0.0=-37, 502.0097826461709=18, -1.0=16, 1989.6992484506918=0, -Infinity=1}", tSynchronizedDoubleByteMap0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-934);
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(int0);
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap(tDoubleByteHashMap0._set, tDoubleByteHashMap0._states);
      tDoubleByteHashMap0.putAll((TDoubleByteMap) tDoubleByteHashMap1);
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      tSynchronizedDoubleByteMap0.keys();
      TDoubleByteHashMap tDoubleByteHashMap2 = new TDoubleByteHashMap((TDoubleByteMap) tSynchronizedDoubleByteMap0);
      double double0 = (-1.0);
      tSynchronizedDoubleByteMap0.containsKey(double0);
      String string0 = "";
      tDoubleByteHashMap2.clear();
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :#
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TDoubleByteMap tDoubleByteMap0 = null;
      Locale locale0 = Locale.KOREA;
      String string0 = locale0.getCountry();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap(tDoubleByteMap0, (Object) string0);
      Object object0 = null;
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap1 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tSynchronizedDoubleByteMap0, object0);
      // Undeclared exception!
      try {
        tSynchronizedDoubleByteMap1.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TDoubleByteMap tDoubleByteMap0 = null;
      String string0 = "[-[34";
      Locale locale0 = new Locale(string0);
      String string1 = locale0.getDisplayName();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap(tDoubleByteMap0, (Object) string1);
      double double0 = (-1.0);
      byte byte0 = (byte)69;
      // Undeclared exception!
      try {
        tSynchronizedDoubleByteMap0.adjustValue(double0, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-468);
      float float0 = (-1835.1039F);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) float0;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-40);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-123);
      byteArray0[3] = byte3;
      byte byte4 = (byte)12;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-27);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-1);
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-7);
      byteArray0[7] = byte7;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      double double0 = (-456.1351178967374);
      tSynchronizedDoubleByteMap0.adjustValue(double0, byte7);
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap(int0, float0);
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap1 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap1);
      String string0 = "0.59nw+S9z*3\\Q";
      // Undeclared exception!
      try {
        URI.create(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 12: 0.59nw+S9z*3\\Q
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TDoubleByteMap tDoubleByteMap0 = null;
      String string0 = "";
      URI uRI0 = URI.create(string0);
      URI uRI1 = new URI(string0);
      double[] doubleArray0 = new double[8];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = (-1587.5548770112741);
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = 638.8273609006964;
      doubleArray0[4] = double4;
      double double5 = 1402.6569192508337;
      doubleArray0[5] = double5;
      double double6 = (-938.2290648296009);
      doubleArray0[6] = double6;
      double double7 = (-1.0);
      doubleArray0[7] = double7;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)25;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-23);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-102);
      byteArray0[3] = byte3;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      tSynchronizedDoubleByteMap0.getNoEntryKey();
      URI uRI2 = uRI0.relativize(uRI1);
      URI uRI3 = uRI2.parseServerAuthority();
      String string1 = uRI3.toString();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap1 = new TSynchronizedDoubleByteMap(tDoubleByteMap0, (Object) string1);
      // Undeclared exception!
      try {
        tSynchronizedDoubleByteMap1.values();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = double0;
      double double1 = 874.7839749570607;
      doubleArray0[1] = double1;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)6;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)1;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-16);
      byteArray0[3] = byte3;
      byte byte4 = (byte)61;
      byteArray0[4] = byte4;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      String string0 = "~pu";
      File file0 = new File(string0);
      String string1 = file0.toString();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0, (Object) string1);
      Object object0 = null;
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap1 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tSynchronizedDoubleByteMap0, object0);
      // Undeclared exception!
      try {
        tSynchronizedDoubleByteMap1.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-329);
      int int1 = 238;
      float float0 = 0.0F;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(int1, float0);
      Locale locale0 = Locale.FRANCE;
      String string0 = locale0.getCountry();
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0, (Object) string0);
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap1 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tSynchronizedDoubleByteMap0);
      tSynchronizedDoubleByteMap1.putAll((TDoubleByteMap) tSynchronizedDoubleByteMap0);
      float float1 = 0.0F;
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap(int0, float1);
      tDoubleByteHashMap1.getAutoCompactionFactor();
      String string1 = "n;";
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(string1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // n; (No such file or directory)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 2043.7311926548255;
      doubleArray0[0] = double0;
      double double1 = 967.0526619449582;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = (-1.0);
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = (-72.50646355169681);
      doubleArray0[5] = double5;
      double double6 = (-1547.085656537378);
      doubleArray0[6] = double6;
      double double7 = (-1354.7107926891026);
      doubleArray0[7] = double7;
      double double8 = 0.0;
      doubleArray0[8] = double8;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte)121;
      byteArray0[3] = byte3;
      byte byte4 = (byte)18;
      byteArray0[4] = byte4;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      TSynchronizedDoubleByteMap tSynchronizedDoubleByteMap0 = new TSynchronizedDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      double double9 = 0.0;
      boolean boolean0 = tSynchronizedDoubleByteMap0.containsKey(double9);
      assertEquals(true, boolean0);
  }
}
