/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TShortFunction;
import gnu.trove.impl.unmodifiable.TUnmodifiableLongSet;
import gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection;
import gnu.trove.map.TLongShortMap;
import gnu.trove.map.hash.TLongShortHashMap;
import gnu.trove.procedure.TLongProcedure;
import gnu.trove.procedure.TLongShortProcedure;
import gnu.trove.procedure.TShortProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableLongShortMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.forEachValue(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.<init>(Lgnu/trove/map/TLongShortMap;)V: I17 Branch 1 IFNONNULL L58 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(104, 104);
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      boolean boolean0 = tUnmodifiableLongShortMap0.forEachValue((TShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.putIfAbsent(JS)S: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableLongShortMap0.putIfAbsent(6L, (short) (-10));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.keys([J)[J: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap((int) (short)0, (float) 893, (long) 893, (short)0);
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      long[] longArray0 = tUnmodifiableLongShortMap0.keys(tLongShortHashMap0._set);
      assertNotNull(longArray0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.values()[S: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap((int) (short)0, (float) 893, (long) 893, (short)0);
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      short[] shortArray0 = tUnmodifiableLongShortMap0.values();
      assertNotNull(shortArray0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.clear()V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableLongShortMap0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.getNoEntryValue()S: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(104, 104);
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      short short0 = tUnmodifiableLongShortMap0.getNoEntryValue();
      assertEquals((short)0, short0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.keys()[J: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap((int) (short)0, (float) 893, (long) 893, (short)0);
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      long[] longArray0 = tUnmodifiableLongShortMap0.keys();
      assertNotNull(longArray0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.retainEntries(Lgnu/trove/procedure/TLongShortProcedure;)Z: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap((-381), (-381));
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableLongShortMap0.retainEntries((TLongShortProcedure) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      HashMap<Long, Short> hashMap0 = new HashMap<Long, Short>(221, 221);
      // Undeclared exception!
      try {
        tUnmodifiableLongShortMap0.putAll((Map<? extends Long, ? extends Short>) hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(1223);
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      boolean boolean0 = tUnmodifiableLongShortMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.values([S)[S: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(104, 104);
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      short[] shortArray0 = new short[3];
      short[] shortArray1 = tUnmodifiableLongShortMap0.values(shortArray0);
      assertSame(shortArray1, shortArray0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.transformValues(Lgnu/trove/function/TShortFunction;)V: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[3];
      short[] shortArray0 = new short[4];
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(longArray0, shortArray0);
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableLongShortMap0.transformValues((TShortFunction) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.containsValue(S)Z: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      boolean boolean0 = tUnmodifiableLongShortMap0.containsValue((short) (-10));
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(104, 104);
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      String string0 = tUnmodifiableLongShortMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.forEachKey(Lgnu/trove/procedure/TLongProcedure;)Z: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap((-381), (-381));
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      boolean boolean0 = tUnmodifiableLongShortMap0.forEachKey((TLongProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.getNoEntryKey()J: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(104, 104);
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      long long0 = tUnmodifiableLongShortMap0.getNoEntryKey();
      assertEquals(0L, long0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.putAll(Lgnu/trove/map/TLongShortMap;)V: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap((-500));
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableLongShortMap0.putAll((TLongShortMap) tLongShortHashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.put(JS)S: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableLongShortMap0.put((-14L), (short) (-879));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.remove(J)S: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableLongShortMap0.remove((long) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.hashCode()I: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap((-381), (-381));
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      int int0 = tUnmodifiableLongShortMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.containsKey(J)Z: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap((int) (short)0, (float) 893, (long) 893, (short)0);
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      boolean boolean0 = tUnmodifiableLongShortMap0.containsKey((long) (short)0);
      assertEquals(false, boolean0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.forEachEntry(Lgnu/trove/procedure/TLongShortProcedure;)Z: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(1223);
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      boolean boolean0 = tUnmodifiableLongShortMap0.forEachEntry((TLongShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.adjustOrPutValue(JSS)S: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(1223);
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableLongShortMap0.adjustOrPutValue((long) (short)6, (short)6, (short)6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.increment(J)Z: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableLongShortMap0.increment((long) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.get(J)S: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap((int) (short)0, (float) 893, (long) 893, (short)0);
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      short short0 = tUnmodifiableLongShortMap0.get((long) (short)316);
      assertEquals((short)0, short0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.adjustValue(JS)Z: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(104, 104);
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableLongShortMap0.adjustValue(0L, (short)0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 7 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap$1.key()J: root-Branch
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap$1.value()S: root-Branch
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap$1.advance()V: root-Branch
   * 4 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.iterator()Lgnu/trove/iterator/TLongShortIterator;: root-Branch
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.size()I: root-Branch
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap$1.<init>(Lgnu/trove/impl/unmodifiable/TUnmodifiableLongShortMap;)V: root-Branch
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap$1.hasNext()Z: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      long[] longArray0 = new long[6];
      short[] shortArray0 = new short[8];
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(longArray0, shortArray0);
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap((TLongShortMap) tUnmodifiableLongShortMap0);
      assertEquals(1, tUnmodifiableLongShortMap0.size());
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.<init>(Lgnu/trove/map/TLongShortMap;)V: I17 Branch 1 IFNONNULL L58 - false
   */

  @Test
  public void test27()  throws Throwable  {
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = null;
      try {
        tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.keySet()Lgnu/trove/set/TLongSet;: I4 Branch 2 IFNONNULL L79 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.keySet()Lgnu/trove/set/TLongSet;: I4 Branch 2 IFNONNULL L79 - false
   */

  @Test
  public void test28()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(0, (float) (-1662L), (long) 0, (short)0);
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      TUnmodifiableLongSet tUnmodifiableLongSet0 = (TUnmodifiableLongSet)tUnmodifiableLongShortMap0.keySet();
      assertNotNull(tUnmodifiableLongSet0);
      
      TUnmodifiableLongSet tUnmodifiableLongSet1 = (TUnmodifiableLongSet)tUnmodifiableLongShortMap0.keySet();
      assertSame(tUnmodifiableLongSet1, tUnmodifiableLongSet0);
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.valueCollection()Lgnu/trove/TShortCollection;: I4 Branch 3 IFNONNULL L87 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.valueCollection()Lgnu/trove/TShortCollection;: I4 Branch 3 IFNONNULL L87 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      TUnmodifiableShortCollection tUnmodifiableShortCollection0 = (TUnmodifiableShortCollection)tUnmodifiableLongShortMap0.valueCollection();
      assertNotNull(tUnmodifiableShortCollection0);
      
      TUnmodifiableShortCollection tUnmodifiableShortCollection1 = (TUnmodifiableShortCollection)tUnmodifiableLongShortMap0.valueCollection();
      assertSame(tUnmodifiableShortCollection1, tUnmodifiableShortCollection0);
  }

  //Test case number: 30
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L94 - false
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L94 - true
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap.<init>(Lgnu/trove/map/TLongShortMap;)V: I17 Branch 1 IFNONNULL L58 - true
   */

  @Test
  public void test30()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(1223);
      TUnmodifiableLongShortMap tUnmodifiableLongShortMap0 = new TUnmodifiableLongShortMap((TLongShortMap) tLongShortHashMap0);
      boolean boolean0 = tUnmodifiableLongShortMap0.equals((Object) "/");
      assertEquals(false, boolean0);
  }
}
