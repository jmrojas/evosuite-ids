/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TCharIntMapDecorator;
import gnu.trove.map.TCharIntMap;
import gnu.trove.map.hash.TCharIntHashMap;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharIntMapDecoratorEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      char char0 = '4';
      Character.valueOf(char0);
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :#
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      TCharIntMapDecorator tCharIntMapDecorator0 = new TCharIntMapDecorator((TCharIntMap) tCharIntHashMap0);
      int int0 = tCharIntMapDecorator0.size();
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap();
      TCharIntMapDecorator tCharIntMapDecorator1 = new TCharIntMapDecorator();
      char char0 = 'j';
      Character character0 = new Character(char0);
      String string0 = "";
      AbstractMap.SimpleImmutableEntry<Character, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Character, String>(character0, string0);
      AbstractMap.SimpleImmutableEntry<Character, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Character, String>((Map.Entry<? extends Character, ? extends String>) abstractMap_SimpleImmutableEntry0);
      abstractMap_SimpleImmutableEntry1.hashCode();
      Locale locale0 = Locale.forLanguageTag(string0);
      tCharIntMapDecorator0.put(character0, (Integer) int0);
      Locale locale1 = Locale.ROOT;
      String string1 = locale0.getDisplayLanguage(locale1);
      tCharIntMapDecorator0.containsKey((Object) string1);
      // Undeclared exception!
      try {
        tCharIntMapDecorator1.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TCharIntMapDecorator tCharIntMapDecorator0 = new TCharIntMapDecorator();
      String string0 = "$h%lE";
      char char0 = 'X';
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      // Undeclared exception!
      try {
        tCharIntMapDecorator0.put((Character) char0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0);
      TCharIntMapDecorator tCharIntMapDecorator0 = new TCharIntMapDecorator((TCharIntMap) tCharIntHashMap0);
      TCharIntHashMap tCharIntHashMap1 = (TCharIntHashMap)tCharIntMapDecorator0.getMap();
      TCharIntHashMap tCharIntHashMap2 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap1);
      TCharIntMapDecorator tCharIntMapDecorator1 = new TCharIntMapDecorator((TCharIntMap) tCharIntHashMap2);
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = Locale.getDefault();
      String string0 = locale0.getDisplayLanguage(locale1);
      boolean boolean0 = tCharIntMapDecorator1.containsValue((Object) string0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
          char char0 = '+';
          tCharIntHashMap0.containsKey(char0);
          TCharIntMapDecorator tCharIntMapDecorator0 = new TCharIntMapDecorator();
          String string0 = "Inserting same object twice, rehashing bug. Object= ";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      int int1 = (-826);
      char char0 = '3';
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int1, (float) int0, char0, (int) integer0);
      TCharIntHashMap tCharIntHashMap1 = null;
      try {
        tCharIntHashMap1 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TCharIntMapDecorator tCharIntMapDecorator0 = new TCharIntMapDecorator();
      char char0 = 'S';
      Character character0 = Character.valueOf(char0);
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      // Undeclared exception!
      try {
        tCharIntMapDecorator0.put(character0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TCharIntMapDecorator tCharIntMapDecorator0 = new TCharIntMapDecorator();
      // Undeclared exception!
      try {
        tCharIntMapDecorator0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      char[] charArray0 = new char[8];
      char char0 = 'L';
      charArray0[0] = char0;
      char char1 = '^';
      charArray0[1] = char1;
      char char2 = '~';
      charArray0[2] = char2;
      char char3 = 'a';
      charArray0[3] = char3;
      char char4 = 'i';
      charArray0[4] = char4;
      char char5 = 'N';
      charArray0[5] = char5;
      char char6 = 'J';
      charArray0[6] = char6;
      char char7 = 'A';
      charArray0[7] = char7;
      int[] intArray0 = new int[10];
      intArray0[0] = (int) charArray0[7];
      intArray0[1] = (int) charArray0[1];
      intArray0[2] = (int) char7;
      intArray0[3] = (int) char2;
      intArray0[4] = (int) char1;
      intArray0[5] = (int) charArray0[4];
      intArray0[6] = (int) charArray0[4];
      intArray0[7] = (int) char3;
      intArray0[8] = (int) char7;
      intArray0[9] = (int) char1;
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      TCharIntMapDecorator tCharIntMapDecorator0 = new TCharIntMapDecorator((TCharIntMap) tCharIntHashMap0);
      TCharIntMapDecorator tCharIntMapDecorator1 = new TCharIntMapDecorator();
      tCharIntMapDecorator1.entrySet();
      TCharIntMapDecorator tCharIntMapDecorator2 = new TCharIntMapDecorator();
      String string0 = File.pathSeparator;
      String string1 = "k)(+Pq:)8H";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string1, string1, string1, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: :://k)(+Pq:)8Hk)(+Pq:)8H?k)(+Pq:)8H#:
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TCharIntMapDecorator tCharIntMapDecorator0 = new TCharIntMapDecorator();
      char char0 = '[';
      Character character0 = new Character(char0);
      Integer integer0 = new Integer((int) char0);
      String string0 = "e7";
      String string1 = "Factor must be >= 0: ";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: e7://e7e7#Factor%20must%20be%20%3E=%200:%20
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TCharIntMapDecorator tCharIntMapDecorator0 = new TCharIntMapDecorator();
      // Undeclared exception!
      try {
        tCharIntMapDecorator0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      TCharIntMapDecorator tCharIntMapDecorator0 = new TCharIntMapDecorator((TCharIntMap) tCharIntHashMap0);
      tCharIntMapDecorator0.hashCode();
      TCharIntMapDecorator tCharIntMapDecorator1 = new TCharIntMapDecorator();
      Character character0 = null;
      String string0 = "O_n9";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 1: O_n9:O_n9#O_n9
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TCharIntMapDecorator tCharIntMapDecorator0 = new TCharIntMapDecorator();
      // Undeclared exception!
      try {
        tCharIntMapDecorator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 84;
      TCharIntMapDecorator tCharIntMapDecorator0 = new TCharIntMapDecorator();
      // Undeclared exception!
      try {
        tCharIntMapDecorator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      TCharIntMapDecorator tCharIntMapDecorator0 = new TCharIntMapDecorator((TCharIntMap) tCharIntHashMap0);
      tCharIntMapDecorator0.isEmpty();
      Character character0 = null;
      int int0 = 824;
      Integer integer0 = new Integer(int0);
      tCharIntMapDecorator0.put(character0, integer0);
      assertEquals(false, tCharIntHashMap0.isEmpty());
      assertEquals("{null=824}", tCharIntMapDecorator0.toString());
  }
}
