/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TIntCollection;
import gnu.trove.function.TIntFunction;
import gnu.trove.map.TFloatIntMap;
import gnu.trove.map.hash.TFloatIntHashMap;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.procedure.TIntProcedure;
import gnu.trove.set.TFloatSet;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatIntHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = 1674.8414F;
      floatArray0[1] = float1;
      float float2 = (-1.0F);
      floatArray0[2] = float2;
      float float3 = (-413.1534F);
      floatArray0[3] = float3;
      float float4 = (-360.01004F);
      floatArray0[4] = float4;
      float float5 = 0.0F;
      floatArray0[5] = float5;
      float float6 = 336.20264F;
      floatArray0[6] = float6;
      int[] intArray0 = new int[9];
      int int0 = (-1);
      intArray0[0] = int0;
      int int1 = (-1293);
      intArray0[1] = int1;
      int int2 = (-1911);
      intArray0[2] = int2;
      int int3 = (-1);
      intArray0[3] = int3;
      int int4 = 1;
      intArray0[4] = int4;
      int int5 = 1467;
      intArray0[5] = int5;
      int int6 = 1;
      intArray0[6] = int6;
      int int7 = 0;
      intArray0[7] = int7;
      int int8 = 94;
      intArray0[8] = int8;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      TFloatSet tFloatSet0 = tFloatIntHashMap0.keySet();
      assertEquals(0, tFloatIntHashMap0.getNoEntryValue());
      assertEquals(6, tFloatIntHashMap0.size());
      assertEquals("{-413.1534=-1, -1.0=-1911, -360.01004=1, 1674.8414=-1293, 336.20264=1, 0.0=1467}", tFloatIntHashMap0.toString());
      assertEquals(6, tFloatSet0.size());
  }

//   @Test
//   public void test1()  throws Throwable  {
//       float[] floatArray0 = new float[3];
//       float float0 = (-747.1544F);
//       floatArray0[0] = float0;
//       floatArray0[0] = float0;
//       int[] intArray0 = new int[9];
//       int int0 = 64;
//       intArray0[0] = int0;
//       int int1 = 0;
//       intArray0[1] = int1;
//       int int2 = 161;
//       intArray0[2] = int2;
//       int int3 = (-1364);
//       intArray0[3] = int3;
//       int int4 = 1777;
//       intArray0[4] = int4;
//       int int5 = (-1325);
//       intArray0[5] = int5;
//       int int6 = 0;
//       intArray0[6] = int6;
//       int int7 = 0;
//       intArray0[7] = int7;
//       int int8 = (-496);
//       intArray0[8] = int8;
//       TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
//       tFloatIntHashMap0.trimToSize();
//       assertEquals(5, tFloatIntHashMap0.capacity());
//       
//       floatArray0[1] = float0;
//       floatArray0[2] = float0;
//       float float1 = 0.0F;
//       floatArray0[1] = float1;
//       float float2 = 0.0F;
//       floatArray0[2] = float2;
//       int[] intArray1 = new int[1];
//       int int9 = 0;
//       intArray1[0] = int9;
//       TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap(floatArray0, intArray1);
//       int int10 = 1329;
//       TFloatIntHashMap tFloatIntHashMap2 = new TFloatIntHashMap(int10);
//       tFloatIntHashMap2.size();
//       assertEquals(0.0F, tFloatIntHashMap2.getNoEntryKey(), 0.01F);
//   }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap();
          float float0 = 52.266712F;
          tFloatIntHashMap0.hashCode();
          tFloatIntHashMap0.increment(float0);
          TFloatProcedure tFloatProcedure0 = null;
          tFloatIntHashMap0.forEachKey(tFloatProcedure0);
          TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap();
          float float1 = (-1895.3232F);
          tFloatIntHashMap1.keySet();
          int int0 = tFloatIntHashMap1.size();
          int[] intArray0 = new int[6];
          intArray0[0] = int0;
          intArray0[1] = int0;
          tFloatIntHashMap1.size();
          TFloatIntHashMap tFloatIntHashMap2 = new TFloatIntHashMap();
          intArray0[2] = int0;
          intArray0[3] = int0;
          tFloatIntHashMap1.clear();
          TFloatIntHashMap tFloatIntHashMap3 = new TFloatIntHashMap(tFloatIntHashMap2._set, intArray0);
          int int1 = 370661;
          tFloatIntHashMap3.ensureCapacity(int1);
          tFloatIntHashMap1.containsValue(intArray0[1]);
          intArray0[4] = int0;
          intArray0[5] = int0;
          tFloatIntHashMap1.values(intArray0);
          int int2 = 1099;
          int int3 = 0;
          String string0 = "end index < ";
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"end index < \" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.GeneratedConstructorAccessor12.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

//   @Test
//   public void test3()  throws Throwable  {
//       float[] floatArray0 = new float[4];
//       float float0 = (-70.40929F);
//       floatArray0[0] = float0;
//       float float1 = (-1364.7001F);
//       floatArray0[1] = float1;
//       float float2 = 0.0F;
//       floatArray0[2] = float2;
//       float float3 = 0.0F;
//       floatArray0[3] = float3;
//       int[] intArray0 = new int[7];
//       int int0 = 0;
//       intArray0[0] = int0;
//       int int1 = (-1877);
//       intArray0[1] = int1;
//       int int2 = 1;
//       intArray0[2] = int2;
//       int int3 = 225;
//       intArray0[3] = int3;
//       int int4 = 10;
//       intArray0[4] = int4;
//       int int5 = Integer.MAX_VALUE;
//       intArray0[5] = int5;
//       int int6 = (-696);
//       intArray0[6] = int6;
//       TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
//       TIntCollection tIntCollection0 = tFloatIntHashMap0.valueCollection();
//       assertEquals(0.0F, tFloatIntHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals(3, tIntCollection0.size());
//       assertEquals("{-70.40929=0, -1364.7001=-1877, 0.0=225}", tFloatIntHashMap0.toString());
//       assertEquals(0, tIntCollection0.getNoEntryValue());
//   }

  @Test
  public void test4()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = (-1858.8645F);
      floatArray0[0] = float0;
      float float1 = 2007.7169F;
      floatArray0[1] = float1;
      float float2 = (-1.0F);
      floatArray0[2] = float2;
      float float3 = 0.0F;
      floatArray0[3] = float3;
      float float4 = 1.0F;
      floatArray0[4] = float4;
      float float5 = 0.0F;
      floatArray0[5] = float5;
      float float6 = (-431.42587F);
      floatArray0[6] = float6;
      float float7 = Float.NEGATIVE_INFINITY;
      floatArray0[7] = float7;
      float float8 = 782.9255F;
      floatArray0[8] = float8;
      float float9 = 113.63927F;
      floatArray0[9] = float9;
      int[] intArray0 = new int[2];
      int int0 = 113;
      intArray0[0] = int0;
      int int1 = 316;
      intArray0[1] = int1;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      TIntProcedure tIntProcedure0 = null;
      // Undeclared exception!
      try {
        tFloatIntHashMap0.forEachValue(tIntProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test5()  throws Throwable  {
//       int int0 = (-74);
//       float float0 = (-1281.5643F);
//       TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(int0, float0);
//       float[] floatArray0 = tFloatIntHashMap0.keys();
//       assertEquals(0, tFloatIntHashMap0.getNoEntryValue());
//       assertNotNull(floatArray0);
//       assertEquals(0.0F, tFloatIntHashMap0.getNoEntryKey(), 0.01F);
//   }

  @Test
  public void test6()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = 0.5F;
      floatArray0[0] = float0;
      float float1 = 10.0F;
      floatArray0[1] = float1;
      float float2 = 1716.1554F;
      floatArray0[2] = float2;
      float float3 = 0.0F;
      floatArray0[3] = float3;
      float float4 = (-408.45602F);
      floatArray0[4] = float4;
      float float5 = 0.0F;
      floatArray0[5] = float5;
      float float6 = Float.POSITIVE_INFINITY;
      floatArray0[6] = float6;
      float float7 = 0.0F;
      floatArray0[7] = float7;
      float float8 = (-279.11844F);
      floatArray0[8] = float8;
      int[] intArray0 = new int[6];
      int int0 = (-103);
      intArray0[0] = int0;
      int int1 = 1381;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = (-205);
      intArray0[4] = int4;
      int int5 = 311;
      intArray0[5] = int5;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      String string0 = "b!S./M@K.WaImS9)1";
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // b!S./M@K.WaImS9)1 (No such file or directory)
         //
      }
  }

//   @Test
//   public void test7()  throws Throwable  {
//       TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap();
//       tFloatIntHashMap0.valueCollection();
//       float float0 = 0.0F;
//       boolean boolean0 = tFloatIntHashMap0.contains(float0);
//       assertEquals(false, boolean0);
//       
//       float[] floatArray0 = new float[6];
//       floatArray0[0] = float0;
//       floatArray0[1] = float0;
//       floatArray0[2] = float0;
//       floatArray0[3] = float0;
//       float float1 = 714.7634F;
//       floatArray0[4] = float1;
//       floatArray0[5] = float0;
//       float[] floatArray1 = tFloatIntHashMap0.keys(floatArray0);
//       assertEquals(23, tFloatIntHashMap0.capacity());
//       assertEquals(0, tFloatIntHashMap0.getNoEntryValue());
//       assertEquals(0.0F, tFloatIntHashMap0.getNoEntryKey(), 0.01F);
//       assertNotNull(floatArray1);
//   }

//   @Test
//   public void test8()  throws Throwable  {
//       float[] floatArray0 = new float[9];
//       float float0 = 0.0F;
//       floatArray0[0] = float0;
//       float float1 = 1176.334F;
//       floatArray0[1] = float1;
//       float float2 = 946.33124F;
//       floatArray0[2] = float2;
//       float float3 = 0.0F;
//       floatArray0[3] = float3;
//       float float4 = (-1434.0918F);
//       floatArray0[4] = float4;
//       float float5 = 425.57578F;
//       floatArray0[5] = float5;
//       float float6 = 0.0F;
//       floatArray0[6] = float6;
//       float float7 = 0.0F;
//       floatArray0[7] = float7;
//       float float8 = 6.6360896E8F;
//       floatArray0[8] = float8;
//       int[] intArray0 = new int[5];
//       int int0 = Integer.MAX_VALUE;
//       intArray0[0] = int0;
//       int int1 = 1;
//       intArray0[1] = int1;
//       int int2 = 0;
//       intArray0[2] = int2;
//       int int3 = 656429;
//       intArray0[3] = int3;
//       int int4 = 67;
//       intArray0[4] = int4;
//       TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
//       int int5 = tFloatIntHashMap0.size();
//       assertEquals(4, int5);
//       assertEquals(0.0F, tFloatIntHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals("{-1434.0918=67, 946.33124=0, 1176.334=1, 0.0=656429}", tFloatIntHashMap0.toString());
//       assertEquals(0, tFloatIntHashMap0.getNoEntryValue());
//       assertEquals(23, tFloatIntHashMap0.capacity());
//   }

  @Test
  public void test9()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = (-1.0F);
      floatArray0[0] = float0;
      float float1 = 10.0F;
      floatArray0[1] = float1;
      int[] intArray0 = new int[9];
      int int0 = 109;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = (-676);
      intArray0[2] = int2;
      int int3 = (-1654);
      intArray0[3] = int3;
      int int4 = 1673;
      intArray0[4] = int4;
      int int5 = 68;
      intArray0[5] = int5;
      int int6 = (-1026);
      intArray0[6] = int6;
      int int7 = 725;
      intArray0[7] = int7;
      int int8 = 1719;
      intArray0[8] = int8;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      boolean boolean0 = true;
      tFloatIntHashMap0.reenableAutoCompaction(boolean0);
      int int9 = 8963;
      TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap(int9);
      float float2 = 0.0F;
      int int10 = tFloatIntHashMap1.put((float) int9, int9);
      int int11 = 1327;
      float float3 = 0.0F;
      TFloatIntHashMap tFloatIntHashMap2 = new TFloatIntHashMap(int11, float3);
      tFloatIntHashMap1.putAll((TFloatIntMap) tFloatIntHashMap2);
      tFloatIntHashMap1.contains(float2);
      tFloatIntHashMap1.contains((float) int9);
      tFloatIntHashMap1.trimToSize();
      tFloatIntHashMap1.keys();
      assertEquals("{8963.0=8963}", tFloatIntHashMap1.toString());
      
      TFloatIntHashMap tFloatIntHashMap3 = new TFloatIntHashMap();
      tFloatIntHashMap3.trimToSize();
      int int12 = tFloatIntHashMap3.hashCode();
      assertTrue(int12 == int10);
  }

//   @Test
//   public void test10()  throws Throwable  {
//       int int0 = (-91);
//       int int1 = 198;
//       TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(int1);
//       tFloatIntHashMap0.clear();
//       assertEquals(0.0F, tFloatIntHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals(0, tFloatIntHashMap0.getNoEntryValue());
//       
//       float float0 = 0.0F;
//       float float1 = 263.58765F;
//       int int2 = 927292699;
//       TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap(int0, float0, float1, int2);
//       TFloatIntHashMap tFloatIntHashMap2 = null;
//       try {
//         tFloatIntHashMap2 = new TFloatIntHashMap((TFloatIntMap) tFloatIntHashMap1);
//         fail("Expecting exception: OutOfMemoryError");
//       
//       } catch(OutOfMemoryError e) {
//          //
//          // Java heap space
//          //
//       }
//   }

  @Test
  public void test11()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float float0 = 1769.5297F;
      floatArray0[0] = float0;
      float float1 = (-1.0F);
      floatArray0[1] = float1;
      float float2 = 0.0F;
      floatArray0[2] = float2;
      float float3 = (-478.37906F);
      floatArray0[3] = float3;
      float float4 = (-778.8469F);
      floatArray0[4] = float4;
      float float5 = 1749.0619F;
      floatArray0[5] = float5;
      int[] intArray0 = new int[6];
      int int0 = (-686);
      intArray0[0] = int0;
      int int1 = (-355);
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 1224;
      intArray0[4] = int4;
      int int5 = (-1317);
      intArray0[5] = int5;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      float float6 = 0.0F;
      boolean boolean0 = tFloatIntHashMap0.increment(float6);
      assertEquals("{1749.0619=-1317, -1.0=-355, 1769.5297=-686, -478.37906=0, -778.8469=1224, 0.0=1}", tFloatIntHashMap0.toString());
      assertEquals(true, boolean0);
  }

//   @Test
//   public void test12()  throws Throwable  {
//       float[] floatArray0 = new float[6];
//       float float0 = 0.0F;
//       floatArray0[0] = float0;
//       float float1 = 1448.789F;
//       floatArray0[1] = float1;
//       float float2 = 0.0F;
//       floatArray0[2] = float2;
//       float float3 = 0.0F;
//       floatArray0[3] = float3;
//       float float4 = 363.16022F;
//       floatArray0[4] = float4;
//       float float5 = 0.5F;
//       floatArray0[5] = float5;
//       int[] intArray0 = new int[9];
//       int int0 = 0;
//       intArray0[0] = int0;
//       int int1 = (-694);
//       intArray0[1] = int1;
//       int int2 = (-1377);
//       intArray0[2] = int2;
//       int int3 = (-1100);
//       intArray0[3] = int3;
//       int int4 = 0;
//       intArray0[4] = int4;
//       int int5 = Integer.MAX_VALUE;
//       intArray0[5] = int5;
//       int int6 = (-1915);
//       intArray0[6] = int6;
//       int int7 = 200019221;
//       intArray0[7] = int7;
//       int int8 = 0;
//       intArray0[8] = int8;
//       TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
//       int int9 = tFloatIntHashMap0.size();
//       assertEquals(4, int9);
//       assertEquals(0, tFloatIntHashMap0.getNoEntryValue());
//       assertEquals(0.0F, tFloatIntHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals("{363.16022=0, 0.5=2147483647, 1448.789=-694, 0.0=-1100}", tFloatIntHashMap0.toString());
//       assertEquals(23, tFloatIntHashMap0.capacity());
//   }

//   @Test
//   public void test13()  throws Throwable  {
//       int int0 = (-946);
//       int int1 = (-1163);
//       float float0 = (-1876.8558F);
//       TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(int0, float0);
//       float float1 = Float.NEGATIVE_INFINITY;
//       tFloatIntHashMap0.contains(float1);
//       float float2 = 1.0F;
//       float float3 = 704.561F;
//       TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap(int1, float2, float3, int1);
//       Locale locale0 = Locale.UK;
//       String string0 = locale0.getISO3Country();
//       tFloatIntHashMap1.equals((Object) string0);
//       TFloatIntHashMap tFloatIntHashMap2 = new TFloatIntHashMap((TFloatIntMap) tFloatIntHashMap1);
//       assertEquals(11, tFloatIntHashMap2.capacity());
//       
//       tFloatIntHashMap2.trimToSize();
//       TFloatIntHashMap tFloatIntHashMap3 = new TFloatIntHashMap(int0);
//       tFloatIntHashMap3.put((float) int0, int0);
//       tFloatIntHashMap1.compact();
//       assertEquals(704.561F, tFloatIntHashMap1.getNoEntryKey(), 0.01F);
//   }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-37);
      float float0 = (-1.0F);
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap();
      tFloatIntHashMap0.hashCode();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = (float) int0;
      floatArray0[6] = (float) int0;
      int[] intArray0 = new int[1];
      TIntFunction tIntFunction0 = null;
      tFloatIntHashMap0.transformValues(tIntFunction0);
      intArray0[0] = int0;
      TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap(floatArray0, intArray0);
      tFloatIntHashMap1.getNoEntryValue();
      tFloatIntHashMap0.iterator();
      assertEquals(23, tFloatIntHashMap0.capacity());
      
      TFloatIntHashMap tFloatIntHashMap2 = new TFloatIntHashMap(int0, float0);
      tFloatIntHashMap0.compact();
      assertFalse(tFloatIntHashMap0.equals(tFloatIntHashMap1));
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      float float0 = (-1844.3823F);
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap();
      float[] floatArray0 = new float[6];
      float float1 = (-1753.8378F);
      // Undeclared exception!
      try {
        tFloatIntHashMap0.setAutoCompactionFactor(float1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1753.8378
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap();
      tFloatIntHashMap0.iterator();
      int int0 = 0;
      TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap(int0);
      TFloatIntHashMap tFloatIntHashMap2 = new TFloatIntHashMap(int0);
      tFloatIntHashMap1.values();
      int int1 = tFloatIntHashMap2.getNoEntryValue();
      tFloatIntHashMap2.isEmpty();
      tFloatIntHashMap2.increment((float) int0);
      TFloatIntHashMap tFloatIntHashMap3 = new TFloatIntHashMap();
      tFloatIntHashMap1.isEmpty();
      TFloatIntHashMap tFloatIntHashMap4 = new TFloatIntHashMap((TFloatIntMap) tFloatIntHashMap3);
      tFloatIntHashMap4.tempDisableAutoCompaction();
      TFloatIntHashMap tFloatIntHashMap5 = new TFloatIntHashMap((TFloatIntMap) tFloatIntHashMap4);
      float float0 = 1.0F;
      tFloatIntHashMap0.remove(float0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      tFloatIntHashMap3.get((float) int1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.connect(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
      }
  }

//   @Test
//   public void test17()  throws Throwable  {
//       int int0 = 0;
//       float float0 = 10.0F;
//       int int1 = 15;
//       float float1 = (-1.0F);
//       float[] floatArray0 = new float[7];
//       floatArray0[0] = float0;
//       floatArray0[1] = float0;
//       floatArray0[2] = (float) int0;
//       floatArray0[3] = (float) int0;
//       floatArray0[4] = float0;
//       floatArray0[5] = (float) int0;
//       floatArray0[6] = (float) int0;
//       int[] intArray0 = new int[8];
//       int int2 = 1588;
//       intArray0[0] = int2;
//       intArray0[1] = int0;
//       intArray0[2] = int0;
//       intArray0[3] = int1;
//       intArray0[4] = int0;
//       int int3 = 0;
//       intArray0[5] = int3;
//       int int4 = 0;
//       intArray0[6] = int4;
//       intArray0[7] = int0;
//       TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
//       TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap((TFloatIntMap) tFloatIntHashMap0);
//       tFloatIntHashMap1.keySet();
//       assertEquals(2, tFloatIntHashMap0.size());
//       assertEquals("{10.0=0, 0.0=0}", tFloatIntHashMap1.toString());
//       assertEquals("{0.0=0, 10.0=0}", tFloatIntHashMap0.toString());
//       
//       float[] floatArray1 = new float[1];
//       floatArray1[0] = float0;
//       int[] intArray1 = new int[3];
//       intArray1[0] = int1;
//       intArray1[1] = int0;
//       intArray1[2] = int0;
//       TFloatIntHashMap tFloatIntHashMap2 = new TFloatIntHashMap(floatArray1, intArray1);
//       float float2 = 0.0F;
//       tFloatIntHashMap2.remove(float2);
//       TFloatIntHashMap tFloatIntHashMap3 = new TFloatIntHashMap(int1, (float) int0, float1, int1);
//       boolean boolean0 = false;
//       tFloatIntHashMap3.reenableAutoCompaction(boolean0);
//       TFloatIntHashMap tFloatIntHashMap4 = new TFloatIntHashMap(int0, float0);
//       TFloatIntHashMap tFloatIntHashMap5 = new TFloatIntHashMap((TFloatIntMap) tFloatIntHashMap4);
//       tFloatIntHashMap5.ensureCapacity(int0);
//       tFloatIntHashMap5.keySet();
//       assertEquals(0.0F, tFloatIntHashMap5.getNoEntryKey(), 0.01F);
//       assertEquals(0.0F, tFloatIntHashMap4.getNoEntryKey(), 0.01F);
//   }

//   @Test
//   public void test18()  throws Throwable  {
//       float[] floatArray0 = new float[2];
//       float float0 = 528.71796F;
//       floatArray0[0] = float0;
//       float float1 = 0.0F;
//       floatArray0[1] = float1;
//       int[] intArray0 = new int[4];
//       int int0 = (-196);
//       intArray0[0] = int0;
//       int int1 = 0;
//       intArray0[1] = int1;
//       int int2 = (-1176);
//       intArray0[2] = int2;
//       int int3 = 400;
//       intArray0[3] = int3;
//       TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(int1, int0, int3, intArray0[3]);
//       String string0 = tFloatIntHashMap0.toString();
//       assertNotNull(string0);
//       
//       tFloatIntHashMap0.setAutoCompactionFactor((float) int1);
//       assertEquals(400.0F, tFloatIntHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals(400, tFloatIntHashMap0.getNoEntryValue());
//       
//       TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap(floatArray0, intArray0);
//       assertEquals(0.0F, tFloatIntHashMap1.getNoEntryKey(), 0.01F);
//       assertEquals(11, tFloatIntHashMap1.capacity());
//       assertEquals(0, tFloatIntHashMap1.getNoEntryValue());
//       assertEquals("{528.71796=-196, 0.0=0}", tFloatIntHashMap1.toString());
//   }
}
