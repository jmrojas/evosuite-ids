/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.stack.array;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedRandomAccessByteList;
import gnu.trove.list.TByteList;
import gnu.trove.list.linked.TByteLinkedList;
import gnu.trove.stack.TByteStack;
import gnu.trove.stack.array.TByteArrayStack;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteArrayStackEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 0;
      byte byte0 = (byte)116;
      TByteArrayStack tByteArrayStack0 = new TByteArrayStack(int0, byte0);
      TByteArrayStack tByteArrayStack1 = new TByteArrayStack((TByteStack) tByteArrayStack0);
      String string0 = "Can not grow ArrayList wrapped external array";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 3: Can not grow ArrayList wrapped external array
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TByteArrayStack tByteArrayStack0 = new TByteArrayStack();
      TByteArrayStack tByteArrayStack1 = new TByteArrayStack((TByteStack) tByteArrayStack0);
      TByteArrayStack tByteArrayStack2 = new TByteArrayStack((TByteStack) tByteArrayStack0);
      TByteArrayStack tByteArrayStack3 = new TByteArrayStack();
      byte byte0 = (byte)0;
      tByteArrayStack3.push(byte0);
      int int0 = (-1543);
      tByteArrayStack0.toArray();
      TByteArrayStack tByteArrayStack4 = null;
      try {
        tByteArrayStack4 = new TByteArrayStack(int0, byte0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test2()  throws Throwable  {
//       int int0 = 0;
//       byte byte0 = (byte)42;
//       TByteArrayStack tByteArrayStack0 = new TByteArrayStack(int0, byte0);
//       tByteArrayStack0.hashCode();
//       assertEquals(42, tByteArrayStack0.getNoEntryValue());
//   }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      byte byte0 = (byte)9;
      TByteArrayStack tByteArrayStack0 = new TByteArrayStack(int0);
      tByteArrayStack0.hashCode();
      int int1 = 0;
      TByteArrayStack tByteArrayStack1 = new TByteArrayStack(int1);
      TByteArrayStack tByteArrayStack2 = new TByteArrayStack(int0, byte0);
      String string0 = "}";
      File file0 = new File(string0);
      // Undeclared exception!
      try {
        tByteArrayStack2.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      int int1 = (-522);
      byte byte0 = (byte)81;
      TByteArrayStack tByteArrayStack0 = null;
      try {
        tByteArrayStack0 = new TByteArrayStack(int1, byte0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 1233;
      int int1 = 308;
      byte byte0 = (byte)83;
      TByteArrayStack tByteArrayStack0 = new TByteArrayStack(int1, byte0);
      // Undeclared exception!
      try {
        tByteArrayStack0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-1568);
      byte byte0 = (byte)114;
      TByteArrayStack tByteArrayStack0 = null;
      try {
        tByteArrayStack0 = new TByteArrayStack(int0, byte0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      TByteArrayStack tByteArrayStack0 = new TByteArrayStack(int0);
      byte byte0 = (byte)114;
      // Undeclared exception!
      try {
        tByteArrayStack0.peek();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-523);
      int int1 = 127;
      byte byte0 = (byte)31;
      TByteArrayStack tByteArrayStack0 = new TByteArrayStack();
      TByteArrayStack tByteArrayStack1 = new TByteArrayStack(int1, byte0);
      byte byte1 = (byte)0;
      TByteArrayStack tByteArrayStack2 = null;
      try {
        tByteArrayStack2 = new TByteArrayStack(int0, byte1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TByteStack tByteStack0 = null;
      TByteArrayStack tByteArrayStack0 = null;
      try {
        tByteArrayStack0 = new TByteArrayStack(tByteStack0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Only support TByteArrayStack
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 301;
      int int1 = (-436);
      int int2 = 0;
      TByteArrayStack tByteArrayStack0 = new TByteArrayStack(int2);
      tByteArrayStack0.size();
      int int3 = (-1342);
      byte byte0 = (byte)10;
      TByteArrayStack tByteArrayStack1 = null;
      try {
        tByteArrayStack1 = new TByteArrayStack(int3, byte0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-1421);
      TByteArrayStack tByteArrayStack0 = null;
      try {
        tByteArrayStack0 = new TByteArrayStack(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 0;
      byte byte0 = (byte) (-1);
      TByteArrayStack tByteArrayStack0 = null;
      try {
        tByteArrayStack0 = new TByteArrayStack((int) byte0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TByteArrayStack tByteArrayStack0 = new TByteArrayStack();
      byte byte0 = (byte)4;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = byte0;
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)127;
      byteArray0[1] = byte1;
      byteArray0[2] = byte0;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byte byte2 = (byte)31;
      byteArray0[5] = byte2;
      byteArray0[6] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      byteArray0[6] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      byte byte3 = (byte)0;
      byteArray0[6] = byte3;
      tByteArrayStack0.toArray(byteArray0);
      tByteArrayStack0.push(byte0);
      assertEquals("{4}", tByteArrayStack0.toString());
      
      int int0 = 1926;
      TByteArrayStack tByteArrayStack1 = new TByteArrayStack();
      // Undeclared exception!
      try {
        tByteArrayStack1.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 317;
      byte byte0 = (byte) (-3);
      TByteArrayStack tByteArrayStack0 = new TByteArrayStack(int0, byte0);
      // Undeclared exception!
      try {
        tByteArrayStack0.peek();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TByteArrayStack tByteArrayStack0 = new TByteArrayStack();
      FileDescriptor fileDescriptor0 = null;
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(fileDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      TByteArrayStack tByteArrayStack0 = new TByteArrayStack();
      URI uRI0 = null;
      File file0 = null;
      try {
        file0 = new File(uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-765);
      byte byte0 = (byte) (-24);
      TByteArrayStack tByteArrayStack0 = null;
      try {
        tByteArrayStack0 = new TByteArrayStack(int0, byte0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test18()  throws Throwable  {
//       int int0 = 0;
//       TByteArrayStack tByteArrayStack0 = new TByteArrayStack();
//       TByteArrayStack tByteArrayStack1 = new TByteArrayStack((TByteStack) tByteArrayStack0);
//       TByteArrayStack tByteArrayStack2 = new TByteArrayStack((TByteStack) tByteArrayStack1);
//       String string0 = "";
//       Locale locale0 = Locale.forLanguageTag(string0);
//       String string1 = locale0.toString();
//       tByteArrayStack0.clear();
//       tByteArrayStack2.equals((Object) string1);
//       byte byte0 = (byte)77;
//       TByteArrayStack tByteArrayStack3 = new TByteArrayStack(int0, byte0);
//       TByteArrayStack tByteArrayStack4 = new TByteArrayStack((TByteStack) tByteArrayStack3);
//       TByteArrayStack tByteArrayStack5 = new TByteArrayStack((TByteStack) tByteArrayStack4);
//       tByteArrayStack0.hashCode();
//       assertTrue(tByteArrayStack0.equals(tByteArrayStack1));
//       
//       TByteLinkedList tByteLinkedList0 = new TByteLinkedList();
//       String string2 = "";
//       File file0 = new File(string2);
//       String string3 = file0.toString();
//       TSynchronizedRandomAccessByteList tSynchronizedRandomAccessByteList0 = new TSynchronizedRandomAccessByteList((TByteList) tByteLinkedList0, (Object) string3);
//       String string4 = tSynchronizedRandomAccessByteList0.toString();
//       boolean boolean0 = tByteArrayStack5.equals((Object) string4);
//       assertEquals(false, boolean0);
//       assertEquals(77, tByteArrayStack3.getNoEntryValue());
//       
//       int int1 = 1856;
//       TByteArrayStack tByteArrayStack6 = new TByteArrayStack(int1);
//       tByteArrayStack6.size();
//       String string5 = tByteArrayStack6.toString();
//       assertEquals("{}", string5);
//       assertNotNull(string5);
//       
//       TByteArrayStack tByteArrayStack7 = new TByteArrayStack(int1);
//       // Undeclared exception!
//       try {
//         tByteArrayStack6.pop();
//         fail("Expecting exception: ArrayIndexOutOfBoundsException");
//       
//       } catch(ArrayIndexOutOfBoundsException e) {
//          //
//          // -1
//          //
//       }
//   }

  @Test
  public void test19()  throws Throwable  {
      TByteArrayStack tByteArrayStack0 = new TByteArrayStack();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tByteArrayStack0.writeExternal((ObjectOutput) objectOutputStream0);
      int int0 = 0;
      TByteArrayStack tByteArrayStack1 = new TByteArrayStack(int0);
      byte[] byteArray0 = tByteArrayStack0.toArray();
      tByteArrayStack1.toArray();
      tByteArrayStack1.clear();
      tByteArrayStack0.toArray(byteArray0);
      tByteArrayStack0.getNoEntryValue();
      tByteArrayStack1.hashCode();
      int int1 = 2;
      tByteArrayStack1.getNoEntryValue();
      byte byte0 = (byte) (-102);
      TByteArrayStack tByteArrayStack2 = null;
      try {
        tByteArrayStack2 = new TByteArrayStack((int) byte0, byte0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
