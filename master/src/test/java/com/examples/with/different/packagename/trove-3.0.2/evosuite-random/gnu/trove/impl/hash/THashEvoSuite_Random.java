/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TByteDoubleMap;
import gnu.trove.map.TDoubleDoubleMap;
import gnu.trove.map.TFloatShortMap;
import gnu.trove.map.TLongByteMap;
import gnu.trove.map.TLongFloatMap;
import gnu.trove.map.TObjectIntMap;
import gnu.trove.map.TShortByteMap;
import gnu.trove.map.custom_hash.TObjectIntCustomHashMap;
import gnu.trove.map.custom_hash.TObjectLongCustomHashMap;
import gnu.trove.map.hash.TByteDoubleHashMap;
import gnu.trove.map.hash.TByteIntHashMap;
import gnu.trove.map.hash.TByteLongHashMap;
import gnu.trove.map.hash.TByteObjectHashMap;
import gnu.trove.map.hash.TCharDoubleHashMap;
import gnu.trove.map.hash.TCharFloatHashMap;
import gnu.trove.map.hash.TCharIntHashMap;
import gnu.trove.map.hash.TDoubleCharHashMap;
import gnu.trove.map.hash.TDoubleDoubleHashMap;
import gnu.trove.map.hash.TDoubleLongHashMap;
import gnu.trove.map.hash.TDoubleObjectHashMap;
import gnu.trove.map.hash.TFloatCharHashMap;
import gnu.trove.map.hash.TFloatObjectHashMap;
import gnu.trove.map.hash.TFloatShortHashMap;
import gnu.trove.map.hash.TIntFloatHashMap;
import gnu.trove.map.hash.TIntIntHashMap;
import gnu.trove.map.hash.TIntShortHashMap;
import gnu.trove.map.hash.TLongByteHashMap;
import gnu.trove.map.hash.TLongFloatHashMap;
import gnu.trove.map.hash.TLongIntHashMap;
import gnu.trove.map.hash.TLongLongHashMap;
import gnu.trove.map.hash.TLongShortHashMap;
import gnu.trove.map.hash.TObjectDoubleHashMap;
import gnu.trove.map.hash.TObjectIntHashMap;
import gnu.trove.map.hash.TObjectShortHashMap;
import gnu.trove.map.hash.TShortByteHashMap;
import gnu.trove.map.hash.TShortIntHashMap;
import gnu.trove.map.hash.TShortShortHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.set.TByteSet;
import gnu.trove.set.hash.TCharHashSet;
import gnu.trove.set.hash.TIntHashSet;
import gnu.trove.set.hash.TLinkedHashSet;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class THashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = (short) (-1);
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) shortArray0[1];
      intArray0[1] = (int) short2;
      intArray0[2] = (int) short0;
      intArray0[3] = (int) shortArray0[0];
      intArray0[4] = (int) short1;
      intArray0[5] = (int) short1;
      intArray0[6] = (int) short0;
      intArray0[7] = (int) short1;
      intArray0[8] = (int) short1;
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      assertEquals(23, tShortIntHashMap0.capacity());
      assertEquals(2, tShortIntHashMap0.size());
  }

//   @Test
//   public void test1()  throws Throwable  {
//       int int0 = (-1535);
//       byte byte0 = (byte)0;
//       TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int0, (float) int0, byte0, (long) byte0);
//       assertEquals(0.5F, tByteLongHashMap0.getAutoCompactionFactor(), 0.01F);
//       assertEquals(3, tByteLongHashMap0.capacity());
//   }

  @Test
  public void test2()  throws Throwable  {
      TByteDoubleMap tByteDoubleMap0 = null;
      TLongByteMap tLongByteMap0 = null;
      TLongByteHashMap tLongByteHashMap0 = null;
      try {
        tLongByteHashMap0 = new TLongByteHashMap(tLongByteMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)110;
      byteArray0[1] = byte1;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) byteArray0[1];
      longArray0[1] = (long) byteArray0[0];
      longArray0[2] = (long) byte1;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(byteArray0, longArray0);
      tByteLongHashMap0.keySet();
      assertEquals(2, tByteLongHashMap0.size());
      assertEquals(7, tByteLongHashMap0.capacity());
      
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Object>();
      assertEquals(23, tObjectDoubleHashMap0.capacity());
      
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int0);
      assertEquals(3, tFloatShortHashMap0.capacity());
  }

  @Test
  public void test4()  throws Throwable  {
      TDoubleObjectHashMap<String> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<String>();
      boolean boolean0 = false;
      tDoubleObjectHashMap0.reenableAutoCompaction(boolean0);
      assertEquals(23, tDoubleObjectHashMap0.capacity());
      
      byte[] byteArray0 = new byte[1];
      float[] floatArray0 = new float[7];
      float float0 = (-1526.8988F);
      floatArray0[0] = float0;
      float float1 = (-1.0F);
      floatArray0[1] = float1;
      float float2 = 0.0F;
      floatArray0[2] = float2;
      float float3 = 0.0F;
      floatArray0[3] = float3;
      float float4 = (-1.0F);
      floatArray0[4] = float4;
      float float5 = 0.0F;
      floatArray0[5] = float5;
      float float6 = Float.NEGATIVE_INFINITY;
      floatArray0[6] = float6;
      short[] shortArray0 = new short[7];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)50;
      shortArray0[1] = short1;
      short short2 = (short)1;
      shortArray0[2] = short2;
      short short3 = (short)182;
      shortArray0[3] = short3;
      short short4 = (short)1;
      shortArray0[4] = short4;
      short short5 = (short)17;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap((TFloatShortMap) tFloatShortHashMap0);
      byte[] byteArray1 = tFloatShortHashMap1._states;
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      tDoubleObjectHashMap0._states = byteArray0;
      int int0 = (-827);
      float float7 = 882.6868F;
      char char0 = '$';
      float float8 = 1241.6216F;
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(int0, float7, char0, float8);
      tCharFloatHashMap0.keys();
      TLongLongHashMap tLongLongHashMap0 = new TLongLongHashMap();
      assertEquals(23, tLongLongHashMap0.capacity());
  }

  @Test
  public void test5()  throws Throwable  {
      TLinkedHashSet<Integer> tLinkedHashSet0 = new TLinkedHashSet<Integer>();
      assertEquals(23, tLinkedHashSet0.capacity());
      
      int int0 = 18366923;
      int int1 = tLinkedHashSet0.setUp(int0);
      assertEquals(18366923, int1);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 226379;
      char char0 = '8';
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int0, (float) int0, char0, (double) char0);
      tCharDoubleHashMap0.put(char0, char0);
      assertEquals(1, tCharDoubleHashMap0.size());
      assertEquals(3, tCharDoubleHashMap0.capacity());
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 619;
      float float0 = 10.0F;
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(int0, float0);
      tLongByteHashMap0.valueCollection();
      int int1 = (-1771);
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int1, int1);
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>();
      byte byte0 = (byte)37;
      tLongByteHashMap0.adjustOrPutValue((long) int1, byte0, byte0);
      assertEquals(false, tLongByteHashMap0.isEmpty());
      
      boolean boolean0 = true;
      tObjectIntHashMap0.reenableAutoCompaction(boolean0);
      tIntShortHashMap0.toString();
      assertEquals(3, tIntShortHashMap0.capacity());
  }

//   @Test
//   public void test8()  throws Throwable  {
//       int int0 = (-1200);
//       float float0 = (-1.0F);
//       byte byte0 = (byte) (-1);
//       TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(int0, float0, (long) int0, byte0);
//       int int1 = (-104);
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int1, int0);
//       float[] floatArray0 = new float[7];
//       floatArray0[0] = (float) int1;
//       float float1 = 0.0F;
//       floatArray0[1] = float1;
//       float float2 = Float.NEGATIVE_INFINITY;
//       floatArray0[2] = float2;
//       floatArray0[3] = (float) byte0;
//       floatArray0[4] = (float) int1;
//       floatArray0[5] = (float) int0;
//       floatArray0[6] = (float) int0;
//       tFloatShortHashMap0.keys(floatArray0);
//       assertEquals(3, tFloatShortHashMap0.capacity());
//       assertEquals(0, tFloatShortHashMap0.size());
//       assertEquals(0.5F, tFloatShortHashMap0.getAutoCompactionFactor(), 0.01F);
//   }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)101;
      byteArray0[0] = byte0;
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap((int) byteArray0[0]);
      tFloatCharHashMap0.trimToSize();
      byte byte1 = (byte)113;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-54);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-97);
      byteArray0[3] = byte3;
      byte byte4 = (byte)76;
      byteArray0[4] = byte4;
      byte byte5 = (byte)38;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-114);
      byteArray0[6] = byte6;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) byte5;
      doubleArray0[1] = (double) byte4;
      doubleArray0[2] = (double) byteArray0[4];
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap((int) byte6, (float) byteArray0[2]);
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      int int0 = 0;
      float float0 = (-1855.7722F);
      TObjectLongCustomHashMap<Object> tObjectLongCustomHashMap0 = new TObjectLongCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, int0, float0, (long) byte4);
      doubleArray0[3] = (double) byteArray0[3];
      doubleArray0[4] = (double) byte0;
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(byteArray0, doubleArray0);
      assertEquals(5, tByteDoubleHashMap0.size());
      
      tByteDoubleHashMap0.clear();
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      tIntShortHashMap0.iterator();
      int int1 = 0;
      float float1 = 1.0F;
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(int1, float1);
      tLongShortHashMap0.clear();
      assertEquals(23, tLongShortHashMap0.capacity());
  }

//   @Test
//   public void test10()  throws Throwable  {
//       long[] longArray0 = new long[9];
//       long long0 = (-1523L);
//       longArray0[0] = long0;
//       long long1 = 1378L;
//       longArray0[1] = long1;
//       long long2 = (-1L);
//       longArray0[2] = long2;
//       long long3 = (-992L);
//       longArray0[3] = long3;
//       long long4 = 2L;
//       longArray0[4] = long4;
//       long long5 = 1713L;
//       longArray0[5] = long5;
//       long long6 = 0L;
//       longArray0[6] = long6;
//       long long7 = 0L;
//       longArray0[7] = long7;
//       long long8 = 0L;
//       longArray0[8] = long8;
//       int[] intArray0 = new int[10];
//       int int0 = (-1083);
//       intArray0[0] = int0;
//       int int1 = 1696;
//       intArray0[1] = int1;
//       int int2 = (-1195);
//       intArray0[2] = int2;
//       int int3 = 2044;
//       intArray0[3] = int3;
//       int int4 = 0;
//       intArray0[4] = int4;
//       int int5 = (-966);
//       intArray0[5] = int5;
//       int int6 = 1;
//       intArray0[6] = int6;
//       int int7 = 800076929;
//       intArray0[7] = int7;
//       int int8 = 10;
//       intArray0[8] = int8;
//       int int9 = (-1957);
//       intArray0[9] = int9;
//       TLongIntHashMap tLongIntHashMap0 = new TLongIntHashMap(longArray0, intArray0);
//       int int10 = tLongIntHashMap0.capacity();
//       assertEquals(0.5F, tLongIntHashMap0.getAutoCompactionFactor(), 0.01F);
//       assertEquals(7, tLongIntHashMap0.size());
//       assertEquals("{2=0, 1378=1696, 0=10, 1713=-966, -1523=-1083, -992=2044, -1=-1195}", tLongIntHashMap0.toString());
//       assertEquals(23, int10);
//   }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 158767069;
      float float0 = 0.0F;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, float0);
      tIntIntHashMap0.ensureCapacity(int0);
      assertEquals(3, tIntIntHashMap0.capacity());
      
      int int1 = (-101);
      float float1 = 0.0F;
      int int2 = 755;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int2, float1);
      TLongFloatHashMap tLongFloatHashMap1 = null;
      try {
        tLongFloatHashMap1 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 0;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0, int0);
      TDoubleProcedure tDoubleProcedure0 = null;
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectIntCustomHashMap<Object> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<Object>();
      TObjectIntCustomHashMap<Object> tObjectIntCustomHashMap1 = new TObjectIntCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, (TObjectIntMap<?>) tObjectIntCustomHashMap0);
      String string0 = "z4,,X<-";
      File file0 = new File(string0, string0);
      String string1 = file0.getName();
      // Undeclared exception!
      try {
        tObjectIntCustomHashMap1.contains((Object) string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1890;
      char char0 = 'I';
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int0, (float) int0, char0, (double) int0);
      double[] doubleArray0 = tCharDoubleHashMap0.values();
      assertNotNull(doubleArray0);
      
      int int1 = 795;
      float float0 = (-1057.0514F);
      float float1 = 0.0F;
      long long0 = 1752L;
      TLongLongHashMap tLongLongHashMap0 = new TLongLongHashMap(int1, float1, long0, (long) int1);
      double double0 = (-62.04531550843808);
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(int1, float0, double0, (double) int1);
      TDoubleDoubleHashMap tDoubleDoubleHashMap1 = new TDoubleDoubleHashMap((TDoubleDoubleMap) tDoubleDoubleHashMap0);
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(int1, int1);
      tLongShortHashMap0.toString();
      int int2 = (-1822);
      byte byte0 = (byte)99;
      int int3 = (-1836);
      int int4 = (-1490);
      float float2 = (-1974.118F);
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(int4, float2);
      tDoubleLongHashMap0.keys();
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int3, (float) long0);
      byte byte1 = (byte)0;
      tByteLongHashMap0.put(byte1, (long) int3);
      assertEquals("{0=-1836}", tByteLongHashMap0.toString());
      
      TByteObjectHashMap<Object> tByteObjectHashMap0 = new TByteObjectHashMap<Object>(int2, (float) int2, byte0);
      String string0 = tByteObjectHashMap0.toString();
      tDoubleDoubleHashMap1.equals((Object) string0);
      int int5 = 10;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(int5);
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap((TShortByteMap) tShortByteHashMap0);
      TObjectShortHashMap<Object> tObjectShortHashMap0 = new TObjectShortHashMap<Object>(int1);
      TCharHashSet tCharHashSet0 = new TCharHashSet(int1);
      String string1 = tCharHashSet0.toString();
      short short0 = (short)0;
      tObjectShortHashMap0.put((Object) string1, short0);
      assertEquals(1, tObjectShortHashMap0.size());
  }

//   @Test
//   public void test14()  throws Throwable  {
//       TCharHashSet tCharHashSet0 = new TCharHashSet();
//       char char0 = '';
//       tCharHashSet0.remove(char0);
//       char[] charArray0 = new char[1];
//       charArray0[0] = char0;
//       tCharHashSet0.containsAll(charArray0);
//       assertEquals(23, tCharHashSet0.capacity());
//       
//       charArray0[0] = char0;
//       int int0 = 242;
//       float float0 = 0.0F;
//       TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>(int0, float0);
//       assertEquals(0.5F, tFloatObjectHashMap0.getAutoCompactionFactor(), 0.01F);
//   }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          short[] shortArray0 = new short[1];
          short short0 = (short)0;
          shortArray0[0] = short0;
          TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(shortArray0, shortArray0);
          tShortShortHashMap0.compact();
          TIntHashSet tIntHashSet0 = new TIntHashSet();
          String string0 = "c[SCt7";
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"c[SCt7\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.GeneratedConstructorAccessor54.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-64);
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byte byte1 = (byte)0;
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)72;
      byteArray0[0] = byte2;
      byte byte3 = (byte) (-109);
      byteArray0[1] = byte3;
      int[] intArray0 = new int[7];
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap((int) byte1);
      intArray0[0] = (int) byteArray0[1];
      intArray0[1] = (int) byteArray0[1];
      intArray0[2] = (int) byteArray0[1];
      intArray0[3] = (int) byte2;
      intArray0[4] = (int) byteArray0[0];
      intArray0[0] = (int) byte3;
      intArray0[1] = (int) byteArray0[0];
      intArray0[2] = (int) byteArray0[0];
      intArray0[3] = (int) byteArray0[0];
      intArray0[4] = (int) byteArray0[0];
      intArray0[5] = (int) byte2;
      int int0 = 0;
      intArray0[6] = int0;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) intArray0[6];
      longArray0[1] = (long) intArray0[0];
      longArray0[2] = (long) int0;
      long long0 = (-169L);
      longArray0[3] = long0;
      longArray0[4] = (long) intArray0[1];
      longArray0[5] = (long) byteArray0[1];
      longArray0[6] = (long) int0;
      longArray0[7] = (long) intArray0[0];
      longArray0[8] = (long) byteArray0[1];
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(longArray0, byteArray0);
      TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap((TLongByteMap) tLongByteHashMap0);
      tLongByteHashMap1.tempDisableAutoCompaction();
      assertEquals(23, tLongByteHashMap1.capacity());
      
      intArray0[5] = (int) byteArray0[1];
      intArray0[6] = (int) byteArray0[1];
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(byteArray0, intArray0);
      TByteSet tByteSet0 = tByteIntHashMap0.keySet();
      assertEquals(17, tByteIntHashMap0.capacity());
      assertEquals(2, tByteIntHashMap0.size());
      assertEquals(false, tByteSet0.isEmpty());
  }

//   @Test
//   public void test17()  throws Throwable  {
//       int int0 = (-278);
//       TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(int0);
//       tLongShortHashMap0.hashCode();
//       assertEquals(0.5F, tLongShortHashMap0.getAutoCompactionFactor(), 0.01F);
//       assertEquals(3, tLongShortHashMap0.capacity());
//   }

//   @Test
//   public void test18()  throws Throwable  {
//       char[] charArray0 = new char[2];
//       char char0 = '{';
//       charArray0[0] = char0;
//       char char1 = '|';
//       charArray0[1] = char1;
//       int[] intArray0 = new int[2];
//       intArray0[0] = (int) char1;
//       intArray0[1] = (int) char0;
//       TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
//       tCharIntHashMap0.getNoEntryValue();
//       assertEquals(0.5F, tCharIntHashMap0.getAutoCompactionFactor(), 0.01F);
//       assertEquals(5, tCharIntHashMap0.capacity());
//       assertEquals(2, tCharIntHashMap0.size());
//   }
}
