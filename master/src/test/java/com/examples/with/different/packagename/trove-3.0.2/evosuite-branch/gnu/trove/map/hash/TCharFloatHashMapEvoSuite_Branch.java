/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TFloatCollection;
import gnu.trove.function.TFloatFunction;
import gnu.trove.map.TCharFloatMap;
import gnu.trove.map.hash.TCharFloatHashMap;
import gnu.trove.procedure.TCharFloatProcedure;
import gnu.trove.procedure.TCharProcedure;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.set.TCharSet;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharFloatHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TCharFloatHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TCharFloatHashMap.setUp(I)I: root-Branch
   * 3 gnu.trove.map.hash.TCharFloatHashMap.put(CF)F: root-Branch
   * 4 gnu.trove.map.hash.TCharFloatHashMap.keySet()Lgnu/trove/set/TCharSet;: root-Branch
   * 5 gnu.trove.map.hash.TCharFloatHashMap.<init>([C[F)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 6 gnu.trove.map.hash.TCharFloatHashMap.<init>([C[F)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 7 gnu.trove.map.hash.TCharFloatHashMap.doPut(CFI)F: I12 Branch 40 IFGE L214 - true
   * 8 gnu.trove.map.hash.TCharFloatHashMap.doPut(CFI)F: I12 Branch 40 IFGE L214 - false
   * 9 gnu.trove.map.hash.TCharFloatHashMap.doPut(CFI)F: I41 Branch 41 IFEQ L221 - true
   * 10 gnu.trove.map.hash.TCharFloatHashMap.doPut(CFI)F: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test0()  throws Throwable  {
      char[] charArray0 = new char[7];
      float[] floatArray0 = new float[6];
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(charArray0, floatArray0);
      TCharSet tCharSet0 = tCharFloatHashMap0.keySet();
      assertEquals("{\u0000=0.0}", tCharFloatHashMap0.toString());
      assertEquals(1, tCharSet0.size());
      assertEquals(17, tCharFloatHashMap0.capacity());
  }

  //Test case number: 1
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.iterator()Lgnu/trove/iterator/TCharFloatIterator;: root-Branch
   * 2 gnu.trove.map.hash.TCharFloatHashMap.<init>(I)V: root-Branch
   * 3 gnu.trove.map.hash.TCharFloatHashMap$TCharFloatHashIterator.<init>(Lgnu/trove/map/hash/TCharFloatHashMap;Lgnu/trove/map/hash/TCharFloatHashMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TCharFloatHashMap.<init>(Lgnu/trove/map/TCharFloatMap;)V: I10 Branch 34 IFEQ L133 - false
   * 5 gnu.trove.map.hash.TCharFloatHashMap.<init>(Lgnu/trove/map/TCharFloatMap;)V: I38 Branch 35 IFEQ L139 - true
   * 6 gnu.trove.map.hash.TCharFloatHashMap.<init>(Lgnu/trove/map/TCharFloatMap;)V: I52 Branch 36 IFEQ L143 - true
   * 7 gnu.trove.map.hash.TCharFloatHashMap.putAll(Lgnu/trove/map/TCharFloatMap;)V: I15 Branch 43 IFEQ L243 - true
   */

//   @Test
//   public void test1()  throws Throwable  {
//       TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap((-205));
//       TCharFloatHashMap tCharFloatHashMap1 = new TCharFloatHashMap((TCharFloatMap) tCharFloatHashMap0);
//       assertEquals(23, tCharFloatHashMap1.capacity());
//       assertEquals(0.0F, tCharFloatHashMap1.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.containsKey(C)Z: root-Branch
   * 2 gnu.trove.map.hash.TCharFloatHashMap.<init>()V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap();
      tCharFloatHashMap0.containsKey('N');
      assertEquals(23, tCharFloatHashMap0.capacity());
  }

  //Test case number: 3
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.toString()Ljava/lang/String;: root-Branch
   * 2 gnu.trove.map.hash.TCharFloatHashMap.<init>(IF)V: root-Branch
   * 3 gnu.trove.map.hash.TCharFloatHashMap$1.<init>(Lgnu/trove/map/hash/TCharFloatHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 4 gnu.trove.map.hash.TCharFloatHashMap.forEachEntry(Lgnu/trove/procedure/TCharFloatProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 5 gnu.trove.map.hash.TCharFloatHashMap.forEachEntry(Lgnu/trove/procedure/TCharFloatProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 6 gnu.trove.map.hash.TCharFloatHashMap.forEachEntry(Lgnu/trove/procedure/TCharFloatProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   */

  @Test
  public void test3()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap((int) 'Z', (-1248.8324F));
      String string0 = tCharFloatHashMap0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  //Test case number: 4
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TCharFloatHashMap.putIfAbsent(CF)F: I9 Branch 39 IFGE L205 - true
   * 3 gnu.trove.map.hash.TCharFloatHashMap.remove(C)F: I14 Branch 46 IFLT L276 - false
   */

//   @Test
//   public void test4()  throws Throwable  {
//       TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(21);
//       tCharFloatHashMap0.putIfAbsent('j', 'j');
//       assertEquals(false, tCharFloatHashMap0.isEmpty());
//       
//       float float0 = tCharFloatHashMap0.remove('j');
//       assertEquals(106.0F, float0, 0.01F);
//   }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.forEachKey(Lgnu/trove/procedure/TCharProcedure;)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap();
      boolean boolean0 = tCharFloatHashMap0.forEachKey((TCharProcedure) null);
      assertEquals(true, boolean0);
      assertEquals(23, tCharFloatHashMap0.capacity());
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.valueCollection()Lgnu/trove/TFloatCollection;: root-Branch
   * 2 gnu.trove.map.hash.TCharFloatHashMap$TValueView.<init>(Lgnu/trove/map/hash/TCharFloatHashMap;)V: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap((-205));
      TFloatCollection tFloatCollection0 = tCharFloatHashMap0.valueCollection();
      assertEquals(true, tFloatCollection0.isEmpty());
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.clear()V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap();
      tCharFloatHashMap0.clear();
      assertEquals(23, tCharFloatHashMap0.capacity());
      assertEquals("{}", tCharFloatHashMap0.toString());
  }

  //Test case number: 8
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.increment(C)Z: root-Branch
   * 2 gnu.trove.map.hash.TCharFloatHashMap.adjustValue(CF)Z: I9 Branch 71 IFGE L477 - false
   * 3 gnu.trove.map.hash.TCharFloatHashMap.<init>(IFCF)V: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap((int) '', (float) 1587, '', 811.7465F);
      boolean boolean0 = tCharFloatHashMap0.increment('');
      assertEquals(false, boolean0);
  }

  //Test case number: 9
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap$TCharFloatHashIterator.value()F: root-Branch
   * 2 gnu.trove.map.hash.TCharFloatHashMap$TCharFloatHashIterator.key()C: root-Branch
   * 3 gnu.trove.map.hash.TCharFloatHashMap$TCharFloatHashIterator.advance()V: root-Branch
   * 4 gnu.trove.map.hash.TCharFloatHashMap.putAll(Lgnu/trove/map/TCharFloatMap;)V: I15 Branch 43 IFEQ L243 - false
   */

  @Test
  public void test9()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap((int) '', (float) 1587, '', 811.7465F);
      tCharFloatHashMap0.putIfAbsent('', '');
      tCharFloatHashMap0.putAll((TCharFloatMap) tCharFloatHashMap0);
      assertEquals(false, tCharFloatHashMap0.isEmpty());
      assertEquals(1, tCharFloatHashMap0.size());
  }

  //Test case number: 10
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.<init>(Lgnu/trove/map/TCharFloatMap;)V: I38 Branch 35 IFEQ L139 - false
   * 2 gnu.trove.map.hash.TCharFloatHashMap.<init>(Lgnu/trove/map/TCharFloatMap;)V: I52 Branch 36 IFEQ L143 - false
   * 3 gnu.trove.map.hash.TCharFloatHashMap.iterator()Lgnu/trove/iterator/TCharFloatIterator;: root-Branch
   * 4 gnu.trove.map.hash.TCharFloatHashMap.<init>(Lgnu/trove/map/TCharFloatMap;)V: I10 Branch 34 IFEQ L133 - false
   * 5 gnu.trove.map.hash.TCharFloatHashMap.putAll(Lgnu/trove/map/TCharFloatMap;)V: I15 Branch 43 IFEQ L243 - true
   * 6 gnu.trove.map.hash.TCharFloatHashMap$TCharFloatHashIterator.<init>(Lgnu/trove/map/hash/TCharFloatHashMap;Lgnu/trove/map/hash/TCharFloatHashMap;)V: root-Branch
   */

//   @Test
//   public void test10()  throws Throwable  {
//       TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap((int) '', (float) 1587, '', 811.7465F);
//       TCharFloatHashMap tCharFloatHashMap1 = new TCharFloatHashMap((TCharFloatMap) tCharFloatHashMap0);
//       assertEquals(3, tCharFloatHashMap1.capacity());
//       assertEquals('', tCharFloatHashMap1.getNoEntryKey());
//       assertEquals(811.7465F, tCharFloatHashMap1.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 11
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 2 gnu.trove.map.hash.TCharFloatHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 3 gnu.trove.map.hash.TCharFloatHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 4 gnu.trove.map.hash.TCharFloatHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(21);
      tCharFloatHashMap0.putIfAbsent('j', 'j');
      tCharFloatHashMap0.trimToSize();
      assertEquals(1, tCharFloatHashMap0.size());
      assertEquals("{j=106.0}", tCharFloatHashMap0.toString());
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.putIfAbsent(CF)F: I9 Branch 39 IFGE L205 - false
   */

//   @Test
//   public void test12()  throws Throwable  {
//       char[] charArray0 = new char[10];
//       charArray0[0] = 'W';
//       float[] floatArray0 = new float[8];
//       TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(charArray0, floatArray0);
//       float float0 = tCharFloatHashMap0.putIfAbsent('W', 0.0F);
//       assertEquals(2, tCharFloatHashMap0.size());
//       assertEquals(23, tCharFloatHashMap0.capacity());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 13
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.get(C)F: I9 Branch 44 IFGE L253 - true
   * 2 gnu.trove.map.hash.TCharFloatHashMap.adjustOrPutValue(CFF)F: I9 Branch 72 IFGE L491 - true
   * 3 gnu.trove.map.hash.TCharFloatHashMap.adjustOrPutValue(CFF)F: I58 Branch 73 IFEQ L502 - false
   * 4 gnu.trove.map.hash.TCharFloatHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 5 gnu.trove.map.hash.TCharFloatHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 6 gnu.trove.map.hash.TCharFloatHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 7 gnu.trove.map.hash.TCharFloatHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 8 gnu.trove.map.hash.TCharFloatHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 9 gnu.trove.map.hash.TCharFloatHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 10 gnu.trove.map.hash.TCharFloatHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap((-510), (float) 147, '?', 0.0F);
      tCharFloatHashMap0.adjustOrPutValue('?', (float) 147, (float) 147);
      boolean boolean0 = tCharFloatHashMap0.equals((Object) tCharFloatHashMap0);
      assertEquals(false, tCharFloatHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.get(C)F: I9 Branch 44 IFGE L253 - false
   */

//   @Test
//   public void test14()  throws Throwable  {
//       TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap();
//       float float0 = tCharFloatHashMap0.get('-');
//       assertEquals(0.0F, float0, 0.01F);
//       assertEquals(23, tCharFloatHashMap0.capacity());
//   }

  //Test case number: 15
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   * 2 gnu.trove.map.hash.TCharFloatHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   * 3 gnu.trove.map.hash.TCharFloatHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - false
   */

  @Test
  public void test15()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap((-510), (float) 147, '?', 0.0F);
      HashMap<Character, Float> hashMap0 = new HashMap<Character, Float>();
      hashMap0.put((Character) '?', (Float) 1.0F);
      tCharFloatHashMap0.putAll((Map<? extends Character, ? extends Float>) hashMap0);
      boolean boolean0 = tCharFloatHashMap0.isEmpty();
      assertEquals(1, tCharFloatHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test16()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap();
      boolean boolean0 = tCharFloatHashMap0.isEmpty();
      assertEquals(23, tCharFloatHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.remove(C)F: I14 Branch 46 IFLT L276 - true
   */

//   @Test
//   public void test17()  throws Throwable  {
//       TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap();
//       float float0 = tCharFloatHashMap0.remove('\u0000');
//       assertEquals(true, tCharFloatHashMap0.isEmpty());
//       assertEquals(23, tCharFloatHashMap0.capacity());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 18
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.keys()[C: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TCharFloatHashMap.keys()[C: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TCharFloatHashMap.keys()[C: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TCharFloatHashMap.keys()[C: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap((int) '', (float) 1587, '', 811.7465F);
      tCharFloatHashMap0.putIfAbsent('', '');
      tCharFloatHashMap0.keys();
      assertEquals(1, tCharFloatHashMap0.size());
      assertEquals("{=127.0}", tCharFloatHashMap0.toString());
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.keys([C)[C: I10 Branch 49 IF_ICMPGE L315 - true
   * 2 gnu.trove.map.hash.TCharFloatHashMap.keys([C)[C: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TCharFloatHashMap.keys([C)[C: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TCharFloatHashMap.keys([C)[C: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test19()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap((-205));
      char[] charArray0 = tCharFloatHashMap0.keys(tCharFloatHashMap0._set);
      assertNotNull(charArray0);
  }

  //Test case number: 20
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.keys([C)[C: I10 Branch 49 IF_ICMPGE L315 - false
   * 2 gnu.trove.map.hash.TCharFloatHashMap.keys([C)[C: I44 Branch 51 IF_ICMPNE L323 - false
   * 3 gnu.trove.map.hash.TCharFloatHashMap.keys([C)[C: I37 Branch 50 IFLE L322 - true
   * 4 gnu.trove.map.hash.TCharFloatHashMap.keys([C)[C: I37 Branch 50 IFLE L322 - false
   * 5 gnu.trove.map.hash.TCharFloatHashMap.keys([C)[C: I44 Branch 51 IF_ICMPNE L323 - true
   * 6 gnu.trove.map.hash.TCharFloatHashMap.putIfAbsent(CF)F: I9 Branch 39 IFGE L205 - true
   * 7 gnu.trove.map.hash.TCharFloatHashMap.keys()[C: I27 Branch 47 IFLE L303 - true
   * 8 gnu.trove.map.hash.TCharFloatHashMap.keys()[C: I27 Branch 47 IFLE L303 - false
   * 9 gnu.trove.map.hash.TCharFloatHashMap.keys()[C: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(21);
      char[] charArray0 = tCharFloatHashMap0.keys();
      tCharFloatHashMap0.putIfAbsent(':', (-1223.7803F));
      tCharFloatHashMap0.keys(charArray0);
      assertEquals(false, tCharFloatHashMap0.isEmpty());
      assertEquals("{:=-1223.7803}", tCharFloatHashMap0.toString());
  }

  //Test case number: 21
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.values()[F: I34 Branch 53 IF_ICMPNE L344 - false
   * 2 gnu.trove.map.hash.TCharFloatHashMap.values()[F: I27 Branch 52 IFLE L343 - true
   * 3 gnu.trove.map.hash.TCharFloatHashMap.values()[F: I27 Branch 52 IFLE L343 - false
   * 4 gnu.trove.map.hash.TCharFloatHashMap.values()[F: I34 Branch 53 IF_ICMPNE L344 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap((-510), (float) 147, '?', 0.0F);
      tCharFloatHashMap0.adjustOrPutValue('?', (float) 147, (float) 147);
      tCharFloatHashMap0.values();
      assertEquals("{?=147.0}", tCharFloatHashMap0.toString());
      assertEquals(1, tCharFloatHashMap0.size());
  }

  //Test case number: 22
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.values([F)[F: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TCharFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TCharFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TCharFloatHashMap.values([F)[F: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap((int) '', (float) 1587, '', 811.7465F);
      float[] floatArray0 = new float[1];
      float[] floatArray1 = tCharFloatHashMap0.values(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  //Test case number: 23
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.values([F)[F: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TCharFloatHashMap.values([F)[F: I44 Branch 56 IF_ICMPNE L363 - false
   * 3 gnu.trove.map.hash.TCharFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - true
   * 4 gnu.trove.map.hash.TCharFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - false
   * 5 gnu.trove.map.hash.TCharFloatHashMap.values([F)[F: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      float[] floatArray0 = new float[9];
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(charArray0, floatArray0);
      tCharFloatHashMap0.adjustOrPutValue('n', (float) 'Z', 99.0F);
      float[] floatArray1 = new float[2];
      float[] floatArray2 = tCharFloatHashMap0.values(floatArray1);
      assertEquals("{Z=0.0, n=99.0, \u0000=0.0}", tCharFloatHashMap0.toString());
      assertNotSame(floatArray2, floatArray1);
  }

  //Test case number: 24
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TCharFloatHashMap.containsValue(F)Z: I31 Branch 59 IFNE L377 - false
   * 3 gnu.trove.map.hash.TCharFloatHashMap.containsValue(F)Z: I18 Branch 57 IFLE L376 - false
   * 4 gnu.trove.map.hash.TCharFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap((-1385));
      tCharFloatHashMap0.put('7', 0.0F);
      boolean boolean0 = tCharFloatHashMap0.containsValue(0.0F);
      assertEquals(1, tCharFloatHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 25
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.containsValue(F)Z: I31 Branch 59 IFNE L377 - true
   * 2 gnu.trove.map.hash.TCharFloatHashMap.containsValue(F)Z: I18 Branch 57 IFLE L376 - true
   * 3 gnu.trove.map.hash.TCharFloatHashMap.containsValue(F)Z: I18 Branch 57 IFLE L376 - false
   * 4 gnu.trove.map.hash.TCharFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 5 gnu.trove.map.hash.TCharFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - false
   */

  @Test
  public void test25()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap((-1385));
      tCharFloatHashMap0.put('7', 0.0F);
      boolean boolean0 = tCharFloatHashMap0.containsValue((float) (-1385));
      assertEquals(false, tCharFloatHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TCharFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TCharFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap();
      boolean boolean0 = tCharFloatHashMap0.forEachValue((TFloatProcedure) null);
      assertEquals(23, tCharFloatHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TCharFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TCharFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test27()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap();
      tCharFloatHashMap0.put(':', 871.2988F);
      // Undeclared exception!
      try {
        tCharFloatHashMap0.forEachValue((TFloatProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TCharFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TCharFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap((-205));
      tCharFloatHashMap0.transformValues((TFloatFunction) null);
      assertEquals(0, tCharFloatHashMap0.size());
  }

  //Test case number: 29
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TCharFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TCharFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[6];
      float[] floatArray0 = new float[5];
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(charArray0, floatArray0);
      // Undeclared exception!
      try {
        tCharFloatHashMap0.transformValues((TFloatFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.retainEntries(Lgnu/trove/procedure/TCharFloatProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TCharFloatHashMap.retainEntries(Lgnu/trove/procedure/TCharFloatProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TCharFloatHashMap.retainEntries(Lgnu/trove/procedure/TCharFloatProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test30()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap();
      boolean boolean0 = tCharFloatHashMap0.retainEntries((TCharFloatProcedure) null);
      assertEquals(23, tCharFloatHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.retainEntries(Lgnu/trove/procedure/TCharFloatProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TCharFloatHashMap.retainEntries(Lgnu/trove/procedure/TCharFloatProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TCharFloatHashMap.retainEntries(Lgnu/trove/procedure/TCharFloatProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[8];
      float[] floatArray0 = new float[9];
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(charArray0, floatArray0);
      // Undeclared exception!
      try {
        tCharFloatHashMap0.retainEntries((TCharFloatProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 32
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.adjustValue(CF)Z: I9 Branch 71 IFGE L477 - true
   * 2 gnu.trove.map.hash.TCharFloatHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   * 3 gnu.trove.map.hash.TCharFloatHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - false
   */

  @Test
  public void test32()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap((-510), (float) 147, '?', 0.0F);
      HashMap<Character, Float> hashMap0 = new HashMap<Character, Float>();
      hashMap0.put((Character) '?', (Float) 1.0F);
      tCharFloatHashMap0.putAll((Map<? extends Character, ? extends Float>) hashMap0);
      boolean boolean0 = tCharFloatHashMap0.adjustValue('?', (float) 147);
      assertEquals(1, tCharFloatHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 33
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.adjustOrPutValue(CFF)F: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TCharFloatHashMap.adjustOrPutValue(CFF)F: I58 Branch 73 IFEQ L502 - true
   */

//   @Test
//   public void test33()  throws Throwable  {
//       char[] charArray0 = new char[2];
//       charArray0[1] = 'c';
//       float[] floatArray0 = new float[9];
//       TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(charArray0, floatArray0);
//       float float0 = tCharFloatHashMap0.adjustOrPutValue('c', 0.0F, (float) 'c');
//       assertEquals(0.0F, float0, 0.01F);
//       assertEquals("{c=0.0, \u0000=0.0}", tCharFloatHashMap0.toString());
//       assertEquals(23, tCharFloatHashMap0.capacity());
//       assertEquals(2, tCharFloatHashMap0.size());
//   }

  //Test case number: 34
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   * 2 gnu.trove.map.hash.TCharFloatHashMap.<init>()V: root-Branch
   */

  @Test
  public void test34()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap();
      boolean boolean0 = tCharFloatHashMap0.equals((Object) "");
      assertEquals(false, boolean0);
      assertEquals(23, tCharFloatHashMap0.capacity());
  }

  //Test case number: 35
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   * 2 gnu.trove.map.hash.TCharFloatHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   */

  @Test
  public void test35()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(0, (float) '?', '?', (-735.422F));
      tCharFloatHashMap0.adjustOrPutValue('!', 0.5F, 0.5F);
      TCharFloatHashMap tCharFloatHashMap1 = new TCharFloatHashMap(147, (float) '?', '!', (float) 0);
      boolean boolean0 = tCharFloatHashMap0.equals((Object) tCharFloatHashMap1);
      assertEquals(false, tCharFloatHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 36
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 2 gnu.trove.map.hash.TCharFloatHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 3 gnu.trove.map.hash.TCharFloatHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   * 4 gnu.trove.map.hash.TCharFloatHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test36()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap((-1385));
      int int0 = tCharFloatHashMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 37
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 2 gnu.trove.map.hash.TCharFloatHashMap.doPut(CFI)F: I12 Branch 40 IFGE L214 - false
   * 3 gnu.trove.map.hash.TCharFloatHashMap.doPut(CFI)F: I41 Branch 41 IFEQ L221 - true
   * 4 gnu.trove.map.hash.TCharFloatHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 5 gnu.trove.map.hash.TCharFloatHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 6 gnu.trove.map.hash.TCharFloatHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   */

  @Test
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[7];
      float[] floatArray0 = new float[6];
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(charArray0, floatArray0);
      int int0 = tCharFloatHashMap0.hashCode();
      assertEquals(17, tCharFloatHashMap0.capacity());
      assertEquals(0, int0);
      assertEquals(1, tCharFloatHashMap0.size());
  }

  //Test case number: 38
  /*
   * 14 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap$1.execute(CF)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TCharFloatHashMap.put(CF)F: root-Branch
   * 3 gnu.trove.map.hash.TCharFloatHashMap.toString()Ljava/lang/String;: root-Branch
   * 4 gnu.trove.map.hash.TCharFloatHashMap.<init>([C[F)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 5 gnu.trove.map.hash.TCharFloatHashMap.<init>([C[F)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 6 gnu.trove.map.hash.TCharFloatHashMap.doPut(CFI)F: I12 Branch 40 IFGE L214 - true
   * 7 gnu.trove.map.hash.TCharFloatHashMap.doPut(CFI)F: I41 Branch 41 IFEQ L221 - false
   * 8 gnu.trove.map.hash.TCharFloatHashMap.forEachEntry(Lgnu/trove/procedure/TCharFloatProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 9 gnu.trove.map.hash.TCharFloatHashMap.forEachEntry(Lgnu/trove/procedure/TCharFloatProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 10 gnu.trove.map.hash.TCharFloatHashMap.forEachEntry(Lgnu/trove/procedure/TCharFloatProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 11 gnu.trove.map.hash.TCharFloatHashMap.forEachEntry(Lgnu/trove/procedure/TCharFloatProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 12 gnu.trove.map.hash.TCharFloatHashMap.forEachEntry(Lgnu/trove/procedure/TCharFloatProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 13 gnu.trove.map.hash.TCharFloatHashMap$1.<init>(Lgnu/trove/map/hash/TCharFloatHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 14 gnu.trove.map.hash.TCharFloatHashMap$1.execute(CF)Z: I4 Branch 115 IFEQ L1233 - false
   */

  @Test
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      float[] floatArray0 = new float[9];
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(charArray0, floatArray0);
      String string0 = tCharFloatHashMap0.toString();
      assertNotNull(string0);
      assertEquals("{Z=0.0, \u0000=0.0}", string0);
      assertEquals(2, tCharFloatHashMap0.size());
      assertEquals(23, tCharFloatHashMap0.capacity());
  }

  //Test case number: 39
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TCharFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 2 gnu.trove.map.hash.TCharFloatHashMap.<init>(IFCF)V: root-Branch
   * 3 gnu.trove.map.hash.TCharFloatHashMap.setUp(I)I: root-Branch
   * 4 gnu.trove.map.hash.TCharFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 5 gnu.trove.map.hash.TCharFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 6 gnu.trove.map.hash.TCharFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 7 gnu.trove.map.hash.TCharFloatHashMap.adjustOrPutValue(CFF)F: I9 Branch 72 IFGE L491 - true
   * 8 gnu.trove.map.hash.TCharFloatHashMap.adjustOrPutValue(CFF)F: I58 Branch 73 IFEQ L502 - false
   */

  @Test
  public void test39()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(0, (float) '?', '?', (-735.422F));
      tCharFloatHashMap0.adjustOrPutValue('!', 0.5F, 0.5F);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tCharFloatHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(false, tCharFloatHashMap0.isEmpty());
      assertEquals("{!=0.5}", tCharFloatHashMap0.toString());
  }
}
