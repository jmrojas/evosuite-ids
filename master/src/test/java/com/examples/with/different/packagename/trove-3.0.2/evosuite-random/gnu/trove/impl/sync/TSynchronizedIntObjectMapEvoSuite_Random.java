/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedIntObjectMap;
import gnu.trove.map.TIntObjectMap;
import gnu.trove.map.hash.TIntObjectHashMap;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Locale;
import java.util.MissingResourceException;
import javax.swing.text.Segment;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedIntObjectMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-1377);
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      TIntObjectHashMap<Object> tIntObjectHashMap1 = new TIntObjectHashMap<Object>((TIntObjectMap<?>) tIntObjectHashMap0);
      String string0 = "";
      Locale locale0 = new Locale(string0);
      Locale locale1 = Locale.GERMANY;
      String string1 = locale0.getDisplayVariant(locale1);
      TSynchronizedIntObjectMap<Object> tSynchronizedIntObjectMap0 = new TSynchronizedIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap1, (Object) string1);
      URI uRI0 = null;
      File file0 = null;
      try {
        file0 = new File(uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-833);
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>(int0);
      TSynchronizedIntObjectMap<Object> tSynchronizedIntObjectMap0 = new TSynchronizedIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap0);
      TSynchronizedIntObjectMap<Object> tSynchronizedIntObjectMap1 = new TSynchronizedIntObjectMap<Object>((TIntObjectMap<Object>) tSynchronizedIntObjectMap0);
      int int1 = 0;
      Locale locale0 = Locale.CANADA;
      String string0 = locale0.getLanguage();
      tSynchronizedIntObjectMap1.put(int1, (Object) string0);
      assertEquals(1, tIntObjectHashMap0.size());
      assertEquals("{0=en}", tSynchronizedIntObjectMap0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>();
      String string0 = "|/~,N[MK]G.)F_-";
      Locale locale0 = new Locale(string0, string0);
      String string1 = locale0.toString();
      TSynchronizedIntObjectMap<Object> tSynchronizedIntObjectMap0 = new TSynchronizedIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap0, (Object) string1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) string1;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) tSynchronizedIntObjectMap0;
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(objectArray0);
      tSynchronizedIntObjectMap0.forEachValue((TObjectProcedure<? super Object>) toObjectArrayProceedure0);
      tIntObjectHashMap0.getNoEntryValue();
      TSynchronizedIntObjectMap<Object> tSynchronizedIntObjectMap1 = new TSynchronizedIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap0);
      Locale locale1 = Locale.ROOT;
      int int0 = (-266);
      TIntObjectHashMap<Integer> tIntObjectHashMap1 = new TIntObjectHashMap<Integer>(int0, int0);
      locale1.getISO3Language();
      tSynchronizedIntObjectMap1.containsKey(int0);
      Segment segment0 = new Segment();
      String string2 = segment0.toString();
      TSynchronizedIntObjectMap<Integer> tSynchronizedIntObjectMap2 = new TSynchronizedIntObjectMap<Integer>((TIntObjectMap<Integer>) tIntObjectHashMap1, (Object) string2);
      tSynchronizedIntObjectMap2.putIfAbsent(segment0.offset, (Integer) int0);
      tSynchronizedIntObjectMap1.get(int0);
      String string3 = locale1.getISO3Country();
      TSynchronizedIntObjectMap<Object> tSynchronizedIntObjectMap3 = new TSynchronizedIntObjectMap<Object>((TIntObjectMap<Object>) tSynchronizedIntObjectMap1, (Object) string3);
      int int1 = tSynchronizedIntObjectMap3.getNoEntryKey();
      assertEquals(0, int1);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 221;
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>(int0);
      String string0 = "aj\"._ZST,";
      File file0 = new File(string0, string0);
      File file1 = file0.getCanonicalFile();
      String string1 = file1.getCanonicalPath();
      TSynchronizedIntObjectMap<Object> tSynchronizedIntObjectMap0 = new TSynchronizedIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap0, (Object) string1);
      TSynchronizedIntObjectMap<Object> tSynchronizedIntObjectMap1 = new TSynchronizedIntObjectMap<Object>((TIntObjectMap<Object>) tSynchronizedIntObjectMap0);
      assertTrue(tSynchronizedIntObjectMap0.equals(tSynchronizedIntObjectMap1));
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 61;
      float float0 = (-1.0F);
      float float1 = 17.170061F;
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>(int0, float1);
      Locale locale0 = Locale.ITALIAN;
      String string0 = locale0.getScript();
      TSynchronizedIntObjectMap<Object> tSynchronizedIntObjectMap0 = new TSynchronizedIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap0, (Object) string0);
      String string1 = tSynchronizedIntObjectMap0.toString();
      TSynchronizedIntObjectMap<Object> tSynchronizedIntObjectMap1 = new TSynchronizedIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap0, (Object) string1);
      TSynchronizedIntObjectMap<Object> tSynchronizedIntObjectMap2 = new TSynchronizedIntObjectMap<Object>((TIntObjectMap<Object>) tSynchronizedIntObjectMap1);
      tSynchronizedIntObjectMap2.keys();
      tSynchronizedIntObjectMap2.iterator();
      TIntObjectMap<Integer> tIntObjectMap0 = null;
      TSynchronizedIntObjectMap<Integer> tSynchronizedIntObjectMap3 = null;
      try {
        tSynchronizedIntObjectMap3 = new TSynchronizedIntObjectMap<Integer>(tIntObjectMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>();
      int int0 = 0;
      float float0 = 0.0F;
      TIntObjectHashMap<Integer> tIntObjectHashMap1 = new TIntObjectHashMap<Integer>(int0, float0);
      String string0 = "\u0000";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 0: \u0000
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      float float0 = (-838.5048F);
      int int1 = 1169;
      TIntObjectHashMap<String> tIntObjectHashMap0 = new TIntObjectHashMap<String>(int1);
      TIntObjectHashMap<Object> tIntObjectHashMap1 = new TIntObjectHashMap<Object>((TIntObjectMap<?>) tIntObjectHashMap0);
      String string0 = "FDtepZKW?bL7i/";
      URI uRI0 = new URI(string0);
      URI uRI1 = new URI(string0);
      URI uRI2 = uRI0.relativize(uRI1);
      URI uRI3 = uRI0.resolve(uRI2);
      String string1 = uRI3.getPath();
      TSynchronizedIntObjectMap<Object> tSynchronizedIntObjectMap0 = new TSynchronizedIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap1, (Object) string1);
      TSynchronizedIntObjectMap<Object> tSynchronizedIntObjectMap1 = new TSynchronizedIntObjectMap<Object>((TIntObjectMap<Object>) tSynchronizedIntObjectMap0);
      TIntObjectHashMap<String> tIntObjectHashMap2 = new TIntObjectHashMap<String>(int0, float0);
      TSynchronizedIntObjectMap<String> tSynchronizedIntObjectMap2 = new TSynchronizedIntObjectMap<String>((TIntObjectMap<String>) tIntObjectHashMap2);
      int[] intArray0 = tSynchronizedIntObjectMap2.keys();
      assertNotNull(intArray0);
  }

  @Test
  public void test7()  throws Throwable  {
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>();
      tIntObjectHashMap0.tempDisableAutoCompaction();
      TSynchronizedIntObjectMap<Object> tSynchronizedIntObjectMap0 = new TSynchronizedIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) tIntObjectHashMap0;
      objectArray0[1] = (Object) tSynchronizedIntObjectMap0;
      objectArray0[2] = (Object) tSynchronizedIntObjectMap0;
      tSynchronizedIntObjectMap0.values(objectArray0);
      tSynchronizedIntObjectMap0.keys(tIntObjectHashMap0._set);
      int int0 = 0;
      int int1 = 0;
      String string0 = Integer.toString(int0, int1);
      TSynchronizedIntObjectMap<Object> tSynchronizedIntObjectMap1 = new TSynchronizedIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap0, (Object) string0);
      int int2 = (-805);
      int int3 = (-1752);
      TIntObjectHashMap<Integer> tIntObjectHashMap1 = new TIntObjectHashMap<Integer>(int2, int0, int3);
      TSynchronizedIntObjectMap<Integer> tSynchronizedIntObjectMap2 = new TSynchronizedIntObjectMap<Integer>((TIntObjectMap<Integer>) tIntObjectHashMap1);
      tSynchronizedIntObjectMap1.isEmpty();
      String string1 = "";
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(string0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 1;
      float float0 = 0.0F;
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>(int0, float0, int0);
      TSynchronizedIntObjectMap<Object> tSynchronizedIntObjectMap0 = new TSynchronizedIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap0);
      int int1 = (-69);
      HashMap<Integer, Object> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Integer, Object>(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -69
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>();
      TSynchronizedIntObjectMap<Object> tSynchronizedIntObjectMap0 = new TSynchronizedIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap0);
      TSynchronizedIntObjectMap<Object> tSynchronizedIntObjectMap1 = new TSynchronizedIntObjectMap<Object>((TIntObjectMap<Object>) tSynchronizedIntObjectMap0);
      tSynchronizedIntObjectMap1.clear();
      TIntObjectHashMap<String> tIntObjectHashMap1 = new TIntObjectHashMap<String>();
      TSynchronizedIntObjectMap<String> tSynchronizedIntObjectMap2 = new TSynchronizedIntObjectMap<String>((TIntObjectMap<String>) tIntObjectHashMap1);
      tSynchronizedIntObjectMap1.putAll((TIntObjectMap<?>) tSynchronizedIntObjectMap0);
      int int0 = 0;
      float float0 = 0.0F;
      TIntObjectHashMap<String> tIntObjectHashMap2 = new TIntObjectHashMap<String>(int0, float0);
      String string0 = ".yrW{K7@Pl_\\A:f%|dT";
      tSynchronizedIntObjectMap1.values();
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: .yrW{K7@Pl_\\A:f%|dT://[.yrW{K7@Pl_\\A:f%|dT].yrW%7BK7@Pl_%5CA:f%25%7CdT#.yrW%7BK7@Pl_%5CA:f%25%7CdT
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TIntObjectMap<Object> tIntObjectMap0 = null;
      int int0 = (-1797);
      float float0 = 587.91473F;
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>(int0, float0);
      TSynchronizedIntObjectMap<Integer> tSynchronizedIntObjectMap0 = new TSynchronizedIntObjectMap<Integer>((TIntObjectMap<Integer>) tIntObjectHashMap0);
      tSynchronizedIntObjectMap0.keySet();
      Locale locale0 = Locale.ENGLISH;
      String string0 = "";
      // Undeclared exception!
      try {
        locale0.getUnicodeLocaleType(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>(int0, float0);
      TSynchronizedIntObjectMap<Integer> tSynchronizedIntObjectMap0 = new TSynchronizedIntObjectMap<Integer>((TIntObjectMap<Integer>) tIntObjectHashMap0);
      float float1 = 1414.321F;
      TIntObjectHashMap<Object> tIntObjectHashMap1 = new TIntObjectHashMap<Object>(int0, float1);
      TSynchronizedIntObjectMap<Object> tSynchronizedIntObjectMap1 = new TSynchronizedIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap1);
      TSynchronizedIntObjectMap<Object> tSynchronizedIntObjectMap2 = new TSynchronizedIntObjectMap<Object>((TIntObjectMap<Object>) tSynchronizedIntObjectMap1);
      tSynchronizedIntObjectMap0.putAll((TIntObjectMap<? extends Integer>) tIntObjectHashMap0);
      assertEquals(0, tIntObjectHashMap0.getNoEntryKey());
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1019;
      float float0 = 0.0F;
      TIntObjectMap<String> tIntObjectMap0 = null;
      TSynchronizedIntObjectMap<String> tSynchronizedIntObjectMap0 = null;
      try {
        tSynchronizedIntObjectMap0 = new TSynchronizedIntObjectMap<String>(tIntObjectMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1759;
      float float0 = 1.0F;
      int int1 = 1;
      int int2 = 0;
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>(int1, int1, int2);
      TSynchronizedIntObjectMap<Object> tSynchronizedIntObjectMap0 = new TSynchronizedIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap0);
      String string0 = tSynchronizedIntObjectMap0.toString();
      TSynchronizedIntObjectMap<Object> tSynchronizedIntObjectMap1 = new TSynchronizedIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap0, (Object) string0);
      tSynchronizedIntObjectMap1.clear();
      TIntObjectHashMap<Object> tIntObjectHashMap1 = new TIntObjectHashMap<Object>(int0, float0);
      tIntObjectHashMap1.clear();
      TIntObjectHashMap<Object> tIntObjectHashMap2 = new TIntObjectHashMap<Object>((TIntObjectMap<?>) tIntObjectHashMap1);
      TIntObjectHashMap<String> tIntObjectHashMap3 = new TIntObjectHashMap<String>(int0);
      String string1 = File.pathSeparator;
      TSynchronizedIntObjectMap<String> tSynchronizedIntObjectMap2 = new TSynchronizedIntObjectMap<String>((TIntObjectMap<String>) tIntObjectHashMap3, (Object) string1);
      Object object0 = null;
      TSynchronizedIntObjectMap<String> tSynchronizedIntObjectMap3 = new TSynchronizedIntObjectMap<String>((TIntObjectMap<String>) tSynchronizedIntObjectMap2, object0);
      tIntObjectHashMap0.put(int1, object0);
      int int3 = (-149);
      // Undeclared exception!
      try {
        tSynchronizedIntObjectMap3.put(int3, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1;
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>(int0);
      TIntObjectHashMap<Integer> tIntObjectHashMap1 = new TIntObjectHashMap<Integer>((TIntObjectMap<? extends Integer>) tIntObjectHashMap0);
      TSynchronizedIntObjectMap<Integer> tSynchronizedIntObjectMap0 = new TSynchronizedIntObjectMap<Integer>((TIntObjectMap<Integer>) tIntObjectHashMap1);
      int int1 = (-758);
      TIntObjectHashMap<Object> tIntObjectHashMap2 = new TIntObjectHashMap<Object>(int1, int0);
      char[] charArray0 = new char[6];
      char char0 = '+';
      charArray0[0] = char0;
      char char1 = 'g';
      charArray0[1] = char1;
      char char2 = '?';
      charArray0[2] = char2;
      char char3 = 'H';
      charArray0[3] = char3;
      tIntObjectHashMap1.trimToSize();
      char char4 = 'c';
      charArray0[4] = char4;
      char char5 = 'V';
      charArray0[5] = char5;
      int int2 = 72;
      int int3 = (-350);
      Segment segment0 = new Segment(charArray0, int2, int3);
      // Undeclared exception!
      try {
        segment0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -350
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 1;
      float float0 = 0.0F;
      TIntObjectHashMap<String> tIntObjectHashMap0 = new TIntObjectHashMap<String>(int0, float0);
      String string0 = "";
      TSynchronizedIntObjectMap<String> tSynchronizedIntObjectMap0 = new TSynchronizedIntObjectMap<String>((TIntObjectMap<String>) tIntObjectHashMap0, (Object) string0);
      tSynchronizedIntObjectMap0.keys(tIntObjectHashMap0._set);
      Locale locale0 = new Locale(string0, string0, string0);
      String string1 = locale0.toLanguageTag();
      boolean boolean0 = tSynchronizedIntObjectMap0.containsValue((Object) string1);
      assertEquals(false, boolean0);
  }

//   @Test
//   public void test16()  throws Throwable  {
//       int int0 = 0;
//       TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>(int0);
//       TSynchronizedIntObjectMap<Integer> tSynchronizedIntObjectMap0 = new TSynchronizedIntObjectMap<Integer>((TIntObjectMap<Integer>) tIntObjectHashMap0);
//       TIntObjectHashMap<String> tIntObjectHashMap1 = new TIntObjectHashMap<String>();
//       Locale locale0 = Locale.SIMPLIFIED_CHINESE;
//       Integer[] integerArray0 = new Integer[9];
//       integerArray0[0] = (Integer) int0;
//       integerArray0[1] = (Integer) int0;
//       integerArray0[2] = (Integer) int0;
//       Integer integer0 = new Integer((int) integerArray0[0]);
//       integerArray0[3] = integer0;
//       integerArray0[4] = (Integer) int0;
//       integerArray0[5] = (Integer) int0;
//       integerArray0[6] = (Integer) int0;
//       integerArray0[7] = (Integer) int0;
//       integerArray0[8] = (Integer) int0;
//       tSynchronizedIntObjectMap0.values(integerArray0);
//       tSynchronizedIntObjectMap0.values();
//       String string0 = locale0.getDisplayVariant();
//       TSynchronizedIntObjectMap<String> tSynchronizedIntObjectMap1 = new TSynchronizedIntObjectMap<String>((TIntObjectMap<String>) tIntObjectHashMap1, (Object) string0);
//       integerArray0[1].longValue();
//       TSynchronizedIntObjectMap<Integer> tSynchronizedIntObjectMap2 = new TSynchronizedIntObjectMap<Integer>((TIntObjectMap<Integer>) tSynchronizedIntObjectMap0);
//       tSynchronizedIntObjectMap2.toString();
//       Integer[] integerArray1 = tSynchronizedIntObjectMap0.values();
//       assertFalse(integerArray1.equals(integerArray0));
//   }
}
