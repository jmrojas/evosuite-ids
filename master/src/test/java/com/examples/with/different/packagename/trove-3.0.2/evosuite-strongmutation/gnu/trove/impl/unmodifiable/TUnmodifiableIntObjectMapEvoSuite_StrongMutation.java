/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableIntSet;
import gnu.trove.map.TIntObjectMap;
import gnu.trove.map.hash.TIntObjectHashMap;
import gnu.trove.procedure.TIntObjectProcedure;
import gnu.trove.procedure.TIntProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import java.util.Collection;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableIntObjectMapEvoSuite_StrongMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 10 covered goals:
   * 1 Strong Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.size()I:58 - DeleteStatement: size()I
   * 2 Strong Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.<init>(Lgnu/trove/map/TIntObjectMap;)V:53 - ReplaceComparisonOperator != null -> = null
   * 3 Strong Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.size()I:58 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   * 4 Strong Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.size()I:58 - DeleteStatement: size()I
   * 5 Strong Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.getNoEntryKey()I:92 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   * 6 Strong Mutation 61: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.forEachEntry(Lgnu/trove/procedure/TIntObjectProcedure;)Z:101 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.size()I: root-Branch
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.getNoEntryKey()I: root-Branch
   * 9 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.forEachEntry(Lgnu/trove/procedure/TIntObjectProcedure;)Z: root-Branch
   * 10 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.<init>(Lgnu/trove/map/TIntObjectMap;)V: I17 Branch 1 IFNONNULL L53 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      TUnmodifiableIntObjectMap<Integer> tUnmodifiableIntObjectMap0 = new TUnmodifiableIntObjectMap<Integer>((TIntObjectMap<Integer>) tIntObjectHashMap0);
      tIntObjectHashMap0.putIfAbsent(0, (Integer) 0);
      TIntObjectHashMap<String> tIntObjectHashMap1 = new TIntObjectHashMap<String>((-2035));
      TUnmodifiableIntObjectMap<String> tUnmodifiableIntObjectMap1 = new TUnmodifiableIntObjectMap<String>((TIntObjectMap<String>) tIntObjectHashMap1);
      TIntObjectHashMap<Object> tIntObjectHashMap2 = new TIntObjectHashMap<Object>((TIntObjectMap<?>) tUnmodifiableIntObjectMap1);
      tUnmodifiableIntObjectMap0.getNoEntryKey();
      assertEquals(1, tUnmodifiableIntObjectMap0.size());
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * 1 Strong Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.isEmpty()Z:59 - DeleteStatement: isEmpty()Z
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.isEmpty()Z: root-Branch
   * 3 Strong Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.isEmpty()Z:59 - DeleteStatement: isEmpty()Z
   */

  @Test
  public void test1()  throws Throwable  {
      TIntObjectHashMap<String> tIntObjectHashMap0 = new TIntObjectHashMap<String>((-2035));
      TUnmodifiableIntObjectMap<String> tUnmodifiableIntObjectMap0 = new TUnmodifiableIntObjectMap<String>((TIntObjectMap<String>) tIntObjectHashMap0);
      boolean boolean0 = tUnmodifiableIntObjectMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 Strong Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.containsKey(I)Z:60 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.containsKey(I)Z: root-Branch
   * 3 Strong Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.containsKey(I)Z:60 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   */

  @Test
  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-1837);
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>(0);
      TUnmodifiableIntObjectMap<Integer> tUnmodifiableIntObjectMap0 = new TUnmodifiableIntObjectMap<Integer>((TIntObjectMap<Integer>) tIntObjectHashMap0);
      tUnmodifiableIntObjectMap0.containsKey(0);
      objectArray0[0] = (Object) "";
  }

  //Test case number: 3
  /*
   * 8 covered goals:
   * 1 Strong Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.containsKey(I)Z:60 - InsertUnaryOp Negation of key
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.keys()[I: root-Branch
   * 3 Strong Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.containsKey(I)Z:60 - InsertUnaryOp Negation of key
   * 4 Strong Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.containsKey(I)Z:60 - InsertUnaryOp IINC 1 key
   * 5 Strong Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.containsKey(I)Z:60 - DeleteStatement: containsKey(I)Z
   * 6 Strong Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.containsKey(I)Z:60 - InsertUnaryOp IINC -1 key
   * 7 Strong Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.keys()[I:78 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   * 8 Strong Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.keys()[I:78 - DeleteStatement: keys()[I
   */

  @Test
  public void test3()  throws Throwable  {
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>((-816));
      TUnmodifiableIntObjectMap<Object> tUnmodifiableIntObjectMap0 = new TUnmodifiableIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap0);
      TIntObjectHashMap<Integer> tIntObjectHashMap1 = new TIntObjectHashMap<Integer>((-476));
      TUnmodifiableIntObjectMap<Integer> tUnmodifiableIntObjectMap1 = new TUnmodifiableIntObjectMap<Integer>((TIntObjectMap<Integer>) tIntObjectHashMap1);
      TUnmodifiableIntObjectMap<Object> tUnmodifiableIntObjectMap2 = new TUnmodifiableIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap0);
      tUnmodifiableIntObjectMap1.containsKey((-48));
      tIntObjectHashMap0.putIfAbsent((-476), (Object) null);
      int[] intArray0 = tUnmodifiableIntObjectMap0.keys();
      assertNotNull(intArray0);
      assertTrue(tUnmodifiableIntObjectMap0.equals(tUnmodifiableIntObjectMap2));
  }

  //Test case number: 4
  /*
   * 3 covered goals:
   * 1 Strong Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.containsKey(I)Z:60 - InsertUnaryOp IINC -1 key
   * 2 Strong Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.containsKey(I)Z:60 - InsertUnaryOp IINC 1 key
   * 3 Strong Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.containsKey(I)Z:60 - DeleteStatement: containsKey(I)Z
   */

  @Test
  public void test4()  throws Throwable  {
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>((-816));
      TUnmodifiableIntObjectMap<Object> tUnmodifiableIntObjectMap0 = new TUnmodifiableIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap0);
      TUnmodifiableIntObjectMap<Object> tUnmodifiableIntObjectMap1 = new TUnmodifiableIntObjectMap<Object>((TIntObjectMap<Object>) tUnmodifiableIntObjectMap0);
      TIntObjectHashMap<Integer> tIntObjectHashMap1 = new TIntObjectHashMap<Integer>((-476));
      TUnmodifiableIntObjectMap<Integer> tUnmodifiableIntObjectMap2 = new TUnmodifiableIntObjectMap<Integer>((TIntObjectMap<Integer>) tIntObjectHashMap1);
      tUnmodifiableIntObjectMap2.containsKey((-48));
      tIntObjectHashMap0.putIfAbsent((-476), (Object) null);
      int[] intArray0 = tUnmodifiableIntObjectMap1.keys();
      assertTrue(tUnmodifiableIntObjectMap0.equals(tUnmodifiableIntObjectMap1));
      assertNotNull(intArray0);
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * 1 Strong Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.containsValue(Ljava/lang/Object;)Z:61 - DeleteStatement: containsValue(Ljava/lang/Object;)Z
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.containsValue(Ljava/lang/Object;)Z: root-Branch
   * 3 Strong Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.containsValue(Ljava/lang/Object;)Z:61 - DeleteStatement: containsValue(Ljava/lang/Object;)Z
   */

  @Test
  public void test5()  throws Throwable  {
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>((-476));
      TUnmodifiableIntObjectMap<Object> tUnmodifiableIntObjectMap0 = new TUnmodifiableIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap0);
      tIntObjectHashMap0.putIfAbsent((-476), (Object) tIntObjectHashMap0);
      boolean boolean0 = tUnmodifiableIntObjectMap0.containsValue((Object) tIntObjectHashMap0);
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 13 covered goals:
   * 1 Strong Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.get(I)Ljava/lang/Object;:62 - InsertUnaryOp IINC 1 key
   * 2 Strong Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.get(I)Ljava/lang/Object;:62 - InsertUnaryOp Negation of key
   * 3 Strong Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.get(I)Ljava/lang/Object;:62 - InsertUnaryOp IINC -1 key
   * 4 Strong Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.get(I)Ljava/lang/Object;:62 - InsertUnaryOp Negation of key
   * 5 Strong Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.get(I)Ljava/lang/Object;:62 - InsertUnaryOp IINC -1 key
   * 6 Strong Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.get(I)Ljava/lang/Object;:62 - InsertUnaryOp IINC 1 key
   * 7 Strong Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.keySet()Lgnu/trove/set/TIntSet;:75 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   * 8 Strong Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.keySet()Lgnu/trove/set/TIntSet;:74 - ReplaceComparisonOperator != null -> = null
   * 9 Strong Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.keySet()Lgnu/trove/set/TIntSet;:75 - DeleteStatement: unmodifiableSet(Lgnu/trove/set/TIntSet;)Lgnu/trove/set/TIntSet;
   * 10 Strong Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.keySet()Lgnu/trove/set/TIntSet;:75 - DeleteStatement: keySet()Lgnu/trove/set/TIntSet;
   * 11 Strong Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.keySet()Lgnu/trove/set/TIntSet;:76 - DeleteField: keySetLgnu/trove/set/TIntSet;
   * 12 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.get(I)Ljava/lang/Object;: root-Branch
   * 13 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.keySet()Lgnu/trove/set/TIntSet;: I4 Branch 2 IFNONNULL L74 - false
   */

  @Test
  public void test6()  throws Throwable  {
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>((-476));
      Object[] objectArray0 = new Object[6];
      TUnmodifiableIntObjectMap<Object> tUnmodifiableIntObjectMap0 = new TUnmodifiableIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap0);
      objectArray0[1] = (Object) (-476);
      TUnmodifiableIntObjectMap<Object> tUnmodifiableIntObjectMap1 = new TUnmodifiableIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap0);
      TIntObjectHashMap<Integer> tIntObjectHashMap1 = new TIntObjectHashMap<Integer>();
      TUnmodifiableIntObjectMap<Integer> tUnmodifiableIntObjectMap2 = new TUnmodifiableIntObjectMap<Integer>((TIntObjectMap<Integer>) tIntObjectHashMap1);
      tIntObjectHashMap0.putIfAbsent((-476), objectArray0[1]);
      tUnmodifiableIntObjectMap0.keySet();
      tUnmodifiableIntObjectMap2.get((-476));
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * 1 Strong Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.keys()[I:78 - DeleteStatement: keys()[I
   * 2 Strong Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.keys()[I:78 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   */

  @Test
  public void test7()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      TUnmodifiableIntObjectMap<Integer> tUnmodifiableIntObjectMap0 = new TUnmodifiableIntObjectMap<Integer>((TIntObjectMap<Integer>) tIntObjectHashMap0);
      TIntObjectHashMap<Object> tIntObjectHashMap1 = new TIntObjectHashMap<Object>((TIntObjectMap<?>) tUnmodifiableIntObjectMap0);
      TUnmodifiableIntObjectMap<Object> tUnmodifiableIntObjectMap1 = new TUnmodifiableIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap1);
      int[] intArray0 = tUnmodifiableIntObjectMap1.keys();
      assertNotNull(intArray0);
  }

  //Test case number: 8
  /*
   * 5 covered goals:
   * 1 Strong Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.keys([I)[I:79 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   * 2 Strong Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.keys([I)[I:79 - DeleteStatement: keys([I)[I
   * 3 Strong Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.keys([I)[I:79 - DeleteStatement: keys([I)[I
   * 4 Strong Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.keys([I)[I:79 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.keys([I)[I: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      TUnmodifiableIntObjectMap<Integer> tUnmodifiableIntObjectMap0 = new TUnmodifiableIntObjectMap<Integer>((TIntObjectMap<Integer>) tIntObjectHashMap0);
      int[] intArray0 = tUnmodifiableIntObjectMap0.keys(tIntObjectHashMap0._set);
      assertNotNull(intArray0);
  }

  //Test case number: 9
  /*
   * 5 covered goals:
   * 1 Strong Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.values()[Ljava/lang/Object;:86 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   * 2 Strong Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.values()[Ljava/lang/Object;:86 - DeleteStatement: values()[Ljava/lang/Object;
   * 3 Strong Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.values()[Ljava/lang/Object;:86 - DeleteStatement: values()[Ljava/lang/Object;
   * 4 Strong Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.values()[Ljava/lang/Object;:86 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.values()[Ljava/lang/Object;: root-Branch
   */

//   @Test
//   public void test9()  throws Throwable  {
//       TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>(0, 0);
//       TUnmodifiableIntObjectMap<Integer> tUnmodifiableIntObjectMap0 = new TUnmodifiableIntObjectMap<Integer>((TIntObjectMap<Integer>) tIntObjectHashMap0);
//       Integer[] integerArray0 = tUnmodifiableIntObjectMap0.values();
//       assertNotNull(integerArray0);
//   }

  //Test case number: 10
  /*
   * 5 covered goals:
   * 1 Strong Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteStatement: values([Ljava/lang/Object;)[Ljava/lang/Object;
   * 2 Strong Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   * 3 Strong Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   * 4 Strong Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteStatement: values([Ljava/lang/Object;)[Ljava/lang/Object;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      TUnmodifiableIntObjectMap<Integer> tUnmodifiableIntObjectMap0 = new TUnmodifiableIntObjectMap<Integer>((TIntObjectMap<Integer>) tIntObjectHashMap0);
      Integer[] integerArray0 = new Integer[9];
      Integer[] integerArray1 = tUnmodifiableIntObjectMap0.values(integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  //Test case number: 11
  /*
   * 7 covered goals:
   * 1 Strong Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 1 -> 0
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - true
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - false
   * 4 Strong Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 5 Strong Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 6 Strong Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 1 -> 0
   * 7 Strong Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   */

  @Test
  public void test11()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>(0, 0);
      TUnmodifiableIntObjectMap<Integer> tUnmodifiableIntObjectMap0 = new TUnmodifiableIntObjectMap<Integer>((TIntObjectMap<Integer>) tIntObjectHashMap0);
      TIntObjectHashMap<Object> tIntObjectHashMap1 = new TIntObjectHashMap<Object>(2, 0.0F, 2);
      TUnmodifiableIntObjectMap<Object> tUnmodifiableIntObjectMap1 = new TUnmodifiableIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap1);
      boolean boolean0 = tUnmodifiableIntObjectMap1.equals((Object) tUnmodifiableIntObjectMap0);
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 7 covered goals:
   * 1 Strong Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 2 Strong Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 3 Strong Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 0 -> 1
   * 4 Strong Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 5 Strong Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 0 -> 1
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - false
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>();
      TUnmodifiableIntObjectMap<Object> tUnmodifiableIntObjectMap0 = new TUnmodifiableIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap0);
      Object object0 = new Object();
      boolean boolean0 = tUnmodifiableIntObjectMap0.equals(object0);
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 3 covered goals:
   * 1 Strong Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.hashCode()I:90 - DeleteStatement: hashCode()I
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.hashCode()I: root-Branch
   * 3 Strong Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.hashCode()I:90 - DeleteStatement: hashCode()I
   */

  @Test
  public void test13()  throws Throwable  {
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>();
      TUnmodifiableIntObjectMap<Object> tUnmodifiableIntObjectMap0 = new TUnmodifiableIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap0);
      tIntObjectHashMap0.put(0, (Object) "{}");
      int int0 = tUnmodifiableIntObjectMap0.hashCode();
      assertEquals(3938, int0);
  }

  //Test case number: 14
  /*
   * 5 covered goals:
   * 1 Strong Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.toString()Ljava/lang/String;:91 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   * 2 Strong Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.toString()Ljava/lang/String;:91 - DeleteStatement: toString()Ljava/lang/String;
   * 3 Strong Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.toString()Ljava/lang/String;:91 - DeleteStatement: toString()Ljava/lang/String;
   * 4 Strong Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.toString()Ljava/lang/String;:91 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      TUnmodifiableIntObjectMap<Integer> tUnmodifiableIntObjectMap0 = new TUnmodifiableIntObjectMap<Integer>((TIntObjectMap<Integer>) tIntObjectHashMap0);
      String string0 = tUnmodifiableIntObjectMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 15
  /*
   * 2 covered goals:
   * 1 Strong Mutation 56: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.getNoEntryKey()I:92 - DeleteStatement: getNoEntryKey()I
   * 2 Strong Mutation 56: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.getNoEntryKey()I:92 - DeleteStatement: getNoEntryKey()I
   */

  @Test
  public void test15()  throws Throwable  {
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>();
      TUnmodifiableIntObjectMap<Object> tUnmodifiableIntObjectMap0 = new TUnmodifiableIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap0);
      TIntObjectHashMap<Object> tIntObjectHashMap1 = new TIntObjectHashMap<Object>((TIntObjectMap<?>) tUnmodifiableIntObjectMap0);
      TIntObjectHashMap<Integer> tIntObjectHashMap2 = new TIntObjectHashMap<Integer>((-548), (-548), (-1));
      TUnmodifiableIntObjectMap<Integer> tUnmodifiableIntObjectMap1 = new TUnmodifiableIntObjectMap<Integer>((TIntObjectMap<Integer>) tIntObjectHashMap2);
      assertEquals(-1, tUnmodifiableIntObjectMap1.getNoEntryKey());
  }

  //Test case number: 16
  /*
   * 3 covered goals:
   * 1 Strong Mutation 58: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.forEachKey(Lgnu/trove/procedure/TIntProcedure;)Z:95 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TIntProcedure;)Z
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.forEachKey(Lgnu/trove/procedure/TIntProcedure;)Z: root-Branch
   * 3 Strong Mutation 58: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.forEachKey(Lgnu/trove/procedure/TIntProcedure;)Z:95 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TIntProcedure;)Z
   */

  @Test
  public void test16()  throws Throwable  {
      TIntObjectHashMap<String> tIntObjectHashMap0 = new TIntObjectHashMap<String>(1714, 1714);
      TUnmodifiableIntObjectMap<String> tUnmodifiableIntObjectMap0 = new TUnmodifiableIntObjectMap<String>((TIntObjectMap<String>) tIntObjectHashMap0);
      boolean boolean0 = tUnmodifiableIntObjectMap0.forEachKey((TIntProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * 1 Strong Mutation 59: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   * 3 Strong Mutation 59: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   * 4 Strong Mutation 60: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z
   */

  @Test
  public void test17()  throws Throwable  {
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>((-1837));
      TUnmodifiableIntObjectMap<Object> tUnmodifiableIntObjectMap0 = new TUnmodifiableIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-1837);
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(objectArray0);
      tUnmodifiableIntObjectMap0.forEachValue((TObjectProcedure<? super Object>) toObjectArrayProceedure0);
      objectArray0[0] = (Object) "";
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 Strong Mutation 60: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z
   */

  @Test
  public void test18()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>((-1));
      TUnmodifiableIntObjectMap<Integer> tUnmodifiableIntObjectMap0 = new TUnmodifiableIntObjectMap<Integer>((TIntObjectMap<Integer>) tIntObjectHashMap0);
      Integer[] integerArray0 = new Integer[16];
      ToObjectArrayProceedure<Integer> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Integer>(integerArray0);
      boolean boolean0 = tUnmodifiableIntObjectMap0.forEachValue((TObjectProcedure<? super Integer>) toObjectArrayProceedure0);
      assertEquals(true, boolean0);
  }

  //Test case number: 19
  /*
   * 2 covered goals:
   * 1 Strong Mutation 62: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.forEachEntry(Lgnu/trove/procedure/TIntObjectProcedure;)Z:101 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TIntObjectProcedure;)Z
   * 2 Strong Mutation 62: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.forEachEntry(Lgnu/trove/procedure/TIntObjectProcedure;)Z:101 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TIntObjectProcedure;)Z
   */

  @Test
  public void test19()  throws Throwable  {
      TIntObjectHashMap<String> tIntObjectHashMap0 = new TIntObjectHashMap<String>(1001, 1001, (-961));
      TUnmodifiableIntObjectMap<String> tUnmodifiableIntObjectMap0 = new TUnmodifiableIntObjectMap<String>((TIntObjectMap<String>) tIntObjectHashMap0);
      boolean boolean0 = tUnmodifiableIntObjectMap0.forEachEntry((TIntObjectProcedure<? super String>) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 20
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.remove(I)Ljava/lang/Object;: root-Branch
   * 2 Strong Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.size()I:58 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   * 3 Strong Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.getNoEntryKey()I:92 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   * 4 Strong Mutation 61: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.forEachEntry(Lgnu/trove/procedure/TIntObjectProcedure;)Z:101 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   */

  @Test
  public void test20()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      TUnmodifiableIntObjectMap<Integer> tUnmodifiableIntObjectMap0 = new TUnmodifiableIntObjectMap<Integer>((TIntObjectMap<Integer>) tIntObjectHashMap0);
      TIntObjectHashMap<Object> tIntObjectHashMap1 = new TIntObjectHashMap<Object>((TIntObjectMap<?>) tUnmodifiableIntObjectMap0);
      TUnmodifiableIntObjectMap<Object> tUnmodifiableIntObjectMap1 = new TUnmodifiableIntObjectMap<Object>((TIntObjectMap<Object>) tIntObjectHashMap1);
      // Undeclared exception!
      try {
        tUnmodifiableIntObjectMap1.remove(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 21
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.keySet()Lgnu/trove/set/TIntSet;: I4 Branch 2 IFNONNULL L74 - true
   * 2 Strong Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.keySet()Lgnu/trove/set/TIntSet;:75 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   * 3 Strong Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.keySet()Lgnu/trove/set/TIntSet;:74 - ReplaceComparisonOperator != null -> = null
   * 4 Strong Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.keySet()Lgnu/trove/set/TIntSet;:75 - DeleteStatement: unmodifiableSet(Lgnu/trove/set/TIntSet;)Lgnu/trove/set/TIntSet;
   * 5 Strong Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.keySet()Lgnu/trove/set/TIntSet;:75 - DeleteStatement: keySet()Lgnu/trove/set/TIntSet;
   * 6 Strong Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.keySet()Lgnu/trove/set/TIntSet;:76 - DeleteField: keySetLgnu/trove/set/TIntSet;
   */

  @Test
  public void test21()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>((-1182));
      TUnmodifiableIntObjectMap<Integer> tUnmodifiableIntObjectMap0 = new TUnmodifiableIntObjectMap<Integer>((TIntObjectMap<Integer>) tIntObjectHashMap0);
      TUnmodifiableIntSet tUnmodifiableIntSet0 = (TUnmodifiableIntSet)tUnmodifiableIntObjectMap0.keySet();
      assertNotNull(tUnmodifiableIntSet0);
      
      TUnmodifiableIntSet tUnmodifiableIntSet1 = (TUnmodifiableIntSet)tUnmodifiableIntObjectMap0.keySet();
      assertSame(tUnmodifiableIntSet1, tUnmodifiableIntSet0);
  }

  //Test case number: 22
  /*
   * 13 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.valueCollection()Ljava/util/Collection;: I4 Branch 3 IFNONNULL L82 - true
   * 2 Strong Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.<init>(Lgnu/trove/map/TIntObjectMap;)V:53 - ReplaceComparisonOperator != null -> = null
   * 3 Strong Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: valueCollection()Ljava/util/Collection;
   * 4 Strong Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: unmodifiableCollection(Ljava/util/Collection;)Ljava/util/Collection;
   * 5 Strong Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.valueCollection()Ljava/util/Collection;:82 - ReplaceComparisonOperator != null -> = null
   * 6 Strong Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   * 7 Strong Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.valueCollection()Ljava/util/Collection;:84 - DeleteField: valuesLjava/util/Collection;
   * 8 Strong Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: valueCollection()Ljava/util/Collection;
   * 9 Strong Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: unmodifiableCollection(Ljava/util/Collection;)Ljava/util/Collection;
   * 10 Strong Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.valueCollection()Ljava/util/Collection;:82 - ReplaceComparisonOperator != null -> = null
   * 11 Strong Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteField: mLgnu/trove/map/TIntObjectMap;
   * 12 Strong Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.valueCollection()Ljava/util/Collection;:84 - DeleteField: valuesLjava/util/Collection;
   * 13 gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap.valueCollection()Ljava/util/Collection;: I4 Branch 3 IFNONNULL L82 - false
   */

  @Test
  public void test22()  throws Throwable  {
      TIntObjectHashMap<String> tIntObjectHashMap0 = new TIntObjectHashMap<String>(992, 992, 992);
      TUnmodifiableIntObjectMap<String> tUnmodifiableIntObjectMap0 = new TUnmodifiableIntObjectMap<String>((TIntObjectMap<String>) tIntObjectHashMap0);
      Collection<String> collection0 = tUnmodifiableIntObjectMap0.valueCollection();
      assertNotNull(collection0);
      
      Collection<String> collection1 = tUnmodifiableIntObjectMap0.valueCollection();
      assertSame(collection1, collection0);
  }
}
