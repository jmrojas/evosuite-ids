/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TObjectFunction;
import gnu.trove.map.TByteObjectMap;
import gnu.trove.map.hash.TByteObjectHashMap;
import gnu.trove.procedure.TByteObjectProcedure;
import gnu.trove.procedure.TByteProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteObjectHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap$KeyView.<init>(Lgnu/trove/map/hash/TByteObjectHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TByteObjectHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TByteObjectHashMap.keySet()Lgnu/trove/set/TByteSet;: root-Branch
   * 4 gnu.trove.map.hash.TByteObjectHashMap.setUp(I)I: root-Branch
   * 5 gnu.trove.map.hash.TByteObjectHashMap$1.<init>(Lgnu/trove/map/hash/TByteObjectHashMap;)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>();
      tByteObjectHashMap0.keySet();
      assertEquals(23, tByteObjectHashMap0.capacity());
  }

  //Test case number: 1
  /*
   * 17 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.containsKey(B)Z: root-Branch
   * 2 gnu.trove.map.hash.TByteObjectHashMap.put(BLjava/lang/Object;)Ljava/lang/Object;: root-Branch
   * 3 gnu.trove.map.hash.TByteObjectHashMap$TByteObjectHashIterator.key()B: root-Branch
   * 4 gnu.trove.map.hash.TByteObjectHashMap$TByteObjectHashIterator.advance()V: root-Branch
   * 5 gnu.trove.map.hash.TByteObjectHashMap$TByteObjectHashIterator.value()Ljava/lang/Object;: root-Branch
   * 6 gnu.trove.map.hash.TByteObjectHashMap.get(B)Ljava/lang/Object;: I9 Branch 46 IFGE L213 - true
   * 7 gnu.trove.map.hash.TByteObjectHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I11 Branch 48 IFGE L239 - true
   * 8 gnu.trove.map.hash.TByteObjectHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I40 Branch 49 IFEQ L247 - false
   * 9 gnu.trove.map.hash.TByteObjectHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 75 IFEQ L476 - false
   * 10 gnu.trove.map.hash.TByteObjectHashMap.equals(Ljava/lang/Object;)Z: I52 Branch 76 IFNONNULL L480 - false
   * 11 gnu.trove.map.hash.TByteObjectHashMap.equals(Ljava/lang/Object;)Z: I58 Branch 77 IFNONNULL L481 - false
   * 12 gnu.trove.map.hash.TByteObjectHashMap.equals(Ljava/lang/Object;)Z: I62 Branch 78 IFNE L481 - true
   * 13 gnu.trove.map.hash.TByteObjectHashMap.iterator()Lgnu/trove/iterator/TByteObjectIterator;: root-Branch
   * 14 gnu.trove.map.hash.TByteObjectHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 73 IFNE L467 - true
   * 15 gnu.trove.map.hash.TByteObjectHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 74 IF_ICMPEQ L471 - true
   * 16 gnu.trove.map.hash.TByteObjectHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 75 IFEQ L476 - true
   * 17 gnu.trove.map.hash.TByteObjectHashMap$TByteObjectHashIterator.<init>(Lgnu/trove/map/hash/TByteObjectHashMap;Lgnu/trove/map/hash/TByteObjectHashMap;)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>();
      tByteObjectHashMap0.put((byte) (-57), (String) null);
      boolean boolean0 = tByteObjectHashMap0.equals((Object) tByteObjectHashMap0);
      assertEquals(false, tByteObjectHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.clear()V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>();
      tByteObjectHashMap0.clear();
      assertEquals("{}", tByteObjectHashMap0.toString());
      assertEquals(23, tByteObjectHashMap0.capacity());
  }

  //Test case number: 3
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TByteObjectHashMap.rehash(I)V: I47 Branch 36 IFLE L161 - true
   * 3 gnu.trove.map.hash.TByteObjectHashMap.rehash(I)V: I47 Branch 36 IFLE L161 - false
   * 4 gnu.trove.map.hash.TByteObjectHashMap.rehash(I)V: I54 Branch 37 IF_ICMPNE L162 - true
   * 5 gnu.trove.map.hash.TByteObjectHashMap.putIfAbsent(BLjava/lang/Object;)Ljava/lang/Object;: I9 Branch 47 IFGE L229 - true
   * 6 gnu.trove.map.hash.TByteObjectHashMap.remove(B)Ljava/lang/Object;: I13 Branch 50 IFLT L259 - false
   * 7 gnu.trove.map.hash.TByteObjectHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>(0);
      tByteObjectHashMap0.putIfAbsent((byte)46, "+L`un.e=i u3C");
      assertEquals(false, tByteObjectHashMap0.isEmpty());
      
      tByteObjectHashMap0.remove((byte)46);
      assertEquals("{}", tByteObjectHashMap0.toString());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.valueCollection()Ljava/util/Collection;: root-Branch
   * 2 gnu.trove.map.hash.TByteObjectHashMap$ValueView.<init>(Lgnu/trove/map/hash/TByteObjectHashMap;)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>(2009);
      tByteObjectHashMap0.valueCollection();
      assertEquals(4177, tByteObjectHashMap0.capacity());
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.forEachKey(Lgnu/trove/procedure/TByteProcedure;)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>();
      boolean boolean0 = tByteObjectHashMap0.forEachKey((TByteProcedure) null);
      assertEquals(true, boolean0);
      assertEquals(23, tByteObjectHashMap0.capacity());
  }

  //Test case number: 6
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I30 Branch 40 IF_ICMPNE L194 - false
   * 2 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I35 Branch 41 IF_ACMPNE L194 - true
   * 3 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I23 Branch 39 IFLE L193 - true
   * 4 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I14 Branch 38 IF_ACMPNE L192 - false
   * 5 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I23 Branch 39 IFLE L193 - false
   * 6 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I30 Branch 40 IF_ICMPNE L194 - true
   */

  @Test
  public void test6()  throws Throwable  {
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>();
      tByteObjectHashMap0.put((byte)0, "a,_b;CU'Sy?Sl;>uIa}");
      boolean boolean0 = tByteObjectHashMap0.containsValue((Object) null);
      assertEquals(1, tByteObjectHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 7
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I35 Branch 41 IF_ACMPNE L194 - false
   * 2 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I14 Branch 38 IF_ACMPNE L192 - false
   * 3 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I23 Branch 39 IFLE L193 - false
   * 4 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I30 Branch 40 IF_ICMPNE L194 - true
   * 5 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I30 Branch 40 IF_ICMPNE L194 - false
   */

  @Test
  public void test7()  throws Throwable  {
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>();
      tByteObjectHashMap0.put((byte) (-57), (String) null);
      boolean boolean0 = tByteObjectHashMap0.containsValue((Object) null);
      assertEquals("{-57=null}", tByteObjectHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 8
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I57 Branch 43 IF_ICMPNE L200 - false
   * 2 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I62 Branch 44 IF_ACMPEQ L200 - true
   * 3 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I68 Branch 45 IFEQ L200 - false
   * 4 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I14 Branch 38 IF_ACMPNE L192 - true
   * 5 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I50 Branch 42 IFLE L199 - false
   * 6 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I57 Branch 43 IF_ICMPNE L200 - true
   */

  @Test
  public void test8()  throws Throwable  {
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>((-1));
      tByteObjectHashMap0.putIfAbsent((byte)25, "MIN_NORMAL");
      boolean boolean0 = tByteObjectHashMap0.containsValue((Object) "MIN_NORMAL");
      assertEquals(false, tByteObjectHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 9
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I62 Branch 44 IF_ACMPEQ L200 - false
   * 2 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I68 Branch 45 IFEQ L200 - true
   * 3 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I14 Branch 38 IF_ACMPNE L192 - true
   * 4 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I50 Branch 42 IFLE L199 - true
   * 5 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I50 Branch 42 IFLE L199 - false
   * 6 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I57 Branch 43 IF_ICMPNE L200 - true
   * 7 gnu.trove.map.hash.TByteObjectHashMap.containsValue(Ljava/lang/Object;)Z: I57 Branch 43 IF_ICMPNE L200 - false
   */

  @Test
  public void test9()  throws Throwable  {
      TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>();
      tByteObjectHashMap0.putIfAbsent((byte)12, (Integer) 0);
      boolean boolean0 = tByteObjectHashMap0.containsValue((Object) "{}");
      assertEquals(false, tByteObjectHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.get(B)Ljava/lang/Object;: I9 Branch 46 IFGE L213 - false
   */

  @Test
  public void test10()  throws Throwable  {
      TByteObjectHashMap<Object> tByteObjectHashMap0 = new TByteObjectHashMap<Object>();
      tByteObjectHashMap0.get((byte)0);
      assertEquals(23, tByteObjectHashMap0.capacity());
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.putIfAbsent(BLjava/lang/Object;)Ljava/lang/Object;: I9 Branch 47 IFGE L229 - false
   */

  @Test
  public void test11()  throws Throwable  {
      TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>(1);
      tByteObjectHashMap0.put((byte) (-3), (Integer) 1);
      tByteObjectHashMap0.putIfAbsent((byte) (-3), (Integer) null);
      assertEquals(false, tByteObjectHashMap0.isEmpty());
      assertEquals("{-3=1}", tByteObjectHashMap0.toString());
  }

  //Test case number: 12
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I11 Branch 48 IFGE L239 - false
   * 2 gnu.trove.map.hash.TByteObjectHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I40 Branch 49 IFEQ L247 - true
   * 3 gnu.trove.map.hash.TByteObjectHashMap.putAll(Lgnu/trove/map/TByteObjectMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TByteObjectHashMap.<init>(IFB)V: root-Branch
   * 5 gnu.trove.map.hash.TByteObjectHashMap.getNoEntryKey()B: root-Branch
   * 6 gnu.trove.map.hash.TByteObjectHashMap.<init>(Lgnu/trove/map/TByteObjectMap;)V: root-Branch
   * 7 gnu.trove.map.hash.TByteObjectHashMap.forEachEntry(Lgnu/trove/procedure/TByteObjectProcedure;)Z: I23 Branch 65 IFLE L416 - true
   * 8 gnu.trove.map.hash.TByteObjectHashMap.forEachEntry(Lgnu/trove/procedure/TByteObjectProcedure;)Z: I23 Branch 65 IFLE L416 - false
   * 9 gnu.trove.map.hash.TByteObjectHashMap.forEachEntry(Lgnu/trove/procedure/TByteObjectProcedure;)Z: I30 Branch 66 IF_ICMPNE L417 - true
   * 10 gnu.trove.map.hash.TByteObjectHashMap.forEachEntry(Lgnu/trove/procedure/TByteObjectProcedure;)Z: I30 Branch 66 IF_ICMPNE L417 - false
   * 11 gnu.trove.map.hash.TByteObjectHashMap.forEachEntry(Lgnu/trove/procedure/TByteObjectProcedure;)Z: I39 Branch 67 IFNE L417 - true
   * 12 gnu.trove.map.hash.TByteObjectHashMap$1.execute(BLjava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>(1);
      tByteObjectHashMap0.put((byte) (-3), (Integer) 1);
      TByteObjectHashMap<Object> tByteObjectHashMap1 = new TByteObjectHashMap<Object>((TByteObjectMap<?>) tByteObjectHashMap0);
      tByteObjectHashMap1.putAll((TByteObjectMap<?>) tByteObjectHashMap0);
      assertEquals(false, tByteObjectHashMap0.isEmpty());
      assertEquals("{-3=1}", tByteObjectHashMap1.toString());
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.remove(B)Ljava/lang/Object;: I13 Branch 50 IFLT L259 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>(0);
      tByteObjectHashMap0.remove((byte)46);
      assertEquals(0, tByteObjectHashMap0.size());
      assertEquals(true, tByteObjectHashMap0.isEmpty());
  }

  //Test case number: 14
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.putAll(Ljava/util/Map;)V: I13 Branch 51 IFEQ L279 - false
   * 2 gnu.trove.map.hash.TByteObjectHashMap.putAll(Ljava/util/Map;)V: I13 Branch 51 IFEQ L279 - true
   */

  @Test
  public void test14()  throws Throwable  {
      TByteObjectHashMap<Byte> tByteObjectHashMap0 = new TByteObjectHashMap<Byte>((-1381));
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      hashMap0.put((Byte) (byte)11, (Byte) (byte)11);
      tByteObjectHashMap0.putAll((Map<? extends Byte, ? extends Byte>) hashMap0);
      assertEquals(1, tByteObjectHashMap0.size());
      assertEquals("{11=11}", tByteObjectHashMap0.toString());
  }

  //Test case number: 15
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.keys()[B: I34 Branch 53 IF_ICMPNE L316 - false
   * 2 gnu.trove.map.hash.TByteObjectHashMap.rehash(I)V: I47 Branch 36 IFLE L161 - true
   * 3 gnu.trove.map.hash.TByteObjectHashMap.rehash(I)V: I47 Branch 36 IFLE L161 - false
   * 4 gnu.trove.map.hash.TByteObjectHashMap.rehash(I)V: I54 Branch 37 IF_ICMPNE L162 - true
   * 5 gnu.trove.map.hash.TByteObjectHashMap.rehash(I)V: I54 Branch 37 IF_ICMPNE L162 - false
   * 6 gnu.trove.map.hash.TByteObjectHashMap.<init>(IF)V: root-Branch
   * 7 gnu.trove.map.hash.TByteObjectHashMap.keys()[B: I27 Branch 52 IFLE L315 - true
   * 8 gnu.trove.map.hash.TByteObjectHashMap.keys()[B: I27 Branch 52 IFLE L315 - false
   * 9 gnu.trove.map.hash.TByteObjectHashMap.keys()[B: I34 Branch 53 IF_ICMPNE L316 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>((-7), (-7));
      tByteObjectHashMap0.putIfAbsent((byte)0, (Integer) (-7));
      tByteObjectHashMap0.keys();
      assertEquals(7, tByteObjectHashMap0.capacity());
      assertEquals("{0=-7}", tByteObjectHashMap0.toString());
  }

  //Test case number: 16
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.keys([B)[B: I6 Branch 54 IF_ICMPGE L327 - true
   * 2 gnu.trove.map.hash.TByteObjectHashMap.keys([B)[B: I34 Branch 55 IFLE L334 - true
   * 3 gnu.trove.map.hash.TByteObjectHashMap.keys([B)[B: I34 Branch 55 IFLE L334 - false
   * 4 gnu.trove.map.hash.TByteObjectHashMap.keys([B)[B: I41 Branch 56 IF_ICMPNE L335 - true
   */

//   @Test
//   public void test16()  throws Throwable  {
//       TByteObjectHashMap<Object> tByteObjectHashMap0 = new TByteObjectHashMap<Object>(155, (float) 155, (byte) (-16));
//       byte[] byteArray0 = tByteObjectHashMap0.keys(tByteObjectHashMap0._set);
//       assertNotNull(byteArray0);
//       assertEquals(-16, tByteObjectHashMap0.getNoEntryKey());
//   }

  //Test case number: 17
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.keys([B)[B: I6 Branch 54 IF_ICMPGE L327 - false
   * 2 gnu.trove.map.hash.TByteObjectHashMap.keys([B)[B: I41 Branch 56 IF_ICMPNE L335 - false
   * 3 gnu.trove.map.hash.TByteObjectHashMap.keys([B)[B: I34 Branch 55 IFLE L334 - true
   * 4 gnu.trove.map.hash.TByteObjectHashMap.keys([B)[B: I34 Branch 55 IFLE L334 - false
   * 5 gnu.trove.map.hash.TByteObjectHashMap.keys([B)[B: I41 Branch 56 IF_ICMPNE L335 - true
   * 6 gnu.trove.map.hash.TByteObjectHashMap.putIfAbsent(BLjava/lang/Object;)Ljava/lang/Object;: I9 Branch 47 IFGE L229 - true
   * 7 gnu.trove.map.hash.TByteObjectHashMap.keys()[B: I27 Branch 52 IFLE L315 - true
   * 8 gnu.trove.map.hash.TByteObjectHashMap.keys()[B: I27 Branch 52 IFLE L315 - false
   * 9 gnu.trove.map.hash.TByteObjectHashMap.keys()[B: I34 Branch 53 IF_ICMPNE L316 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>(0);
      byte[] byteArray0 = tByteObjectHashMap0.keys();
      tByteObjectHashMap0.putIfAbsent((byte)46, "+L`un.e=i u3C");
      tByteObjectHashMap0.keys(byteArray0);
      assertEquals(1, tByteObjectHashMap0.size());
      assertEquals("{46=+L`un.e=i u3C}", tByteObjectHashMap0.toString());
  }

  //Test case number: 18
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.values()[Ljava/lang/Object;: I35 Branch 58 IF_ICMPNE L357 - false
   * 2 gnu.trove.map.hash.TByteObjectHashMap.values()[Ljava/lang/Object;: I28 Branch 57 IFLE L356 - true
   * 3 gnu.trove.map.hash.TByteObjectHashMap.values()[Ljava/lang/Object;: I28 Branch 57 IFLE L356 - false
   * 4 gnu.trove.map.hash.TByteObjectHashMap.values()[Ljava/lang/Object;: I35 Branch 58 IF_ICMPNE L357 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>(556, (float) 556, (byte)60);
      tByteObjectHashMap0.put((byte)60, "jqni0_*$o ?");
      tByteObjectHashMap0.values();
      assertEquals("{60=jqni0_*$o ?}", tByteObjectHashMap0.toString());
      assertEquals(1, tByteObjectHashMap0.size());
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: I6 Branch 59 IF_ICMPGE L368 - true
   * 2 gnu.trove.map.hash.TByteObjectHashMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: I39 Branch 60 IFLE L376 - true
   * 3 gnu.trove.map.hash.TByteObjectHashMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: I39 Branch 60 IFLE L376 - false
   * 4 gnu.trove.map.hash.TByteObjectHashMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: I46 Branch 61 IF_ICMPNE L377 - true
   */

  @Test
  public void test19()  throws Throwable  {
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>();
      String[] stringArray0 = new String[5];
      String[] stringArray1 = tByteObjectHashMap0.values(stringArray0);
      assertEquals(23, tByteObjectHashMap0.capacity());
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
  }

  //Test case number: 20
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: I6 Branch 59 IF_ICMPGE L368 - false
   * 2 gnu.trove.map.hash.TByteObjectHashMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: I46 Branch 61 IF_ICMPNE L377 - false
   * 3 gnu.trove.map.hash.TByteObjectHashMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: I39 Branch 60 IFLE L376 - true
   * 4 gnu.trove.map.hash.TByteObjectHashMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: I39 Branch 60 IFLE L376 - false
   * 5 gnu.trove.map.hash.TByteObjectHashMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: I46 Branch 61 IF_ICMPNE L377 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>((int) (byte)13, (float) (byte)13, (byte)13);
      tByteObjectHashMap0.put((byte)13, "}");
      tByteObjectHashMap0.put((byte) (-91), "}");
      String[] stringArray0 = new String[1];
      tByteObjectHashMap0.values(stringArray0);
      assertEquals("{13=},-91=}}", tByteObjectHashMap0.toString());
      assertEquals(false, tByteObjectHashMap0.isEmpty());
  }

  //Test case number: 21
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I25 Branch 63 IF_ICMPNE L402 - false
   * 2 gnu.trove.map.hash.TByteObjectHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I31 Branch 64 IFNE L402 - true
   * 3 gnu.trove.map.hash.TByteObjectHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I18 Branch 62 IFLE L401 - true
   * 4 gnu.trove.map.hash.TByteObjectHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I18 Branch 62 IFLE L401 - false
   * 5 gnu.trove.map.hash.TByteObjectHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I25 Branch 63 IF_ICMPNE L402 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>();
      String[] stringArray0 = new String[5];
      tByteObjectHashMap0.put((byte)0, "a,_b;CU'Sy?Sl;>uIa}");
      ToObjectArrayProceedure<String> toObjectArrayProceedure0 = new ToObjectArrayProceedure<String>(stringArray0);
      boolean boolean0 = tByteObjectHashMap0.forEachValue((TObjectProcedure<? super String>) toObjectArrayProceedure0);
      assertEquals("{0=a,_b;CU'Sy?Sl;>uIa}}", tByteObjectHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.retainEntries(Lgnu/trove/procedure/TByteObjectProcedure;)Z: I31 Branch 68 IFLE L436 - true
   * 2 gnu.trove.map.hash.TByteObjectHashMap.retainEntries(Lgnu/trove/procedure/TByteObjectProcedure;)Z: I31 Branch 68 IFLE L436 - false
   * 3 gnu.trove.map.hash.TByteObjectHashMap.retainEntries(Lgnu/trove/procedure/TByteObjectProcedure;)Z: I38 Branch 69 IF_ICMPNE L437 - true
   * 4 gnu.trove.map.hash.TByteObjectHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>(1323, 1323);
      boolean boolean0 = tByteObjectHashMap0.retainEntries((TByteObjectProcedure<? super Integer>) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 23
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.retainEntries(Lgnu/trove/procedure/TByteObjectProcedure;)Z: I38 Branch 69 IF_ICMPNE L437 - false
   * 2 gnu.trove.map.hash.TByteObjectHashMap.retainEntries(Lgnu/trove/procedure/TByteObjectProcedure;)Z: I31 Branch 68 IFLE L436 - false
   */

  @Test
  public void test23()  throws Throwable  {
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>(1323, (float) 1323, (byte)17);
      tByteObjectHashMap0.put((byte)17, "5R3%/~#Y291v32=~g");
      // Undeclared exception!
      try {
        tByteObjectHashMap0.retainEntries((TByteObjectProcedure<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I18 Branch 71 IFLE L455 - true
   * 2 gnu.trove.map.hash.TByteObjectHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I18 Branch 71 IFLE L455 - false
   * 3 gnu.trove.map.hash.TByteObjectHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I25 Branch 72 IF_ICMPNE L456 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>();
      tByteObjectHashMap0.transformValues((TObjectFunction<Integer, Integer>) null);
      assertEquals(23, tByteObjectHashMap0.capacity());
  }

  //Test case number: 25
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I25 Branch 72 IF_ICMPNE L456 - false
   * 2 gnu.trove.map.hash.TByteObjectHashMap.putAll(Lgnu/trove/map/TByteObjectMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TByteObjectHashMap.getNoEntryKey()B: root-Branch
   * 4 gnu.trove.map.hash.TByteObjectHashMap.<init>(Lgnu/trove/map/TByteObjectMap;)V: root-Branch
   * 5 gnu.trove.map.hash.TByteObjectHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I18 Branch 71 IFLE L455 - false
   * 6 gnu.trove.map.hash.TByteObjectHashMap$1.execute(BLjava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>(1);
      tByteObjectHashMap0.put((byte) (-3), (Integer) 1);
      TByteObjectHashMap<Object> tByteObjectHashMap1 = new TByteObjectHashMap<Object>((TByteObjectMap<?>) tByteObjectHashMap0);
      // Undeclared exception!
      try {
        tByteObjectHashMap1.transformValues((TObjectFunction<Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 73 IFNE L467 - false
   * 2 gnu.trove.map.hash.TByteObjectHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>(2009);
      boolean boolean0 = tByteObjectHashMap0.equals((Object) 2009);
      assertEquals(4177, tByteObjectHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 74 IF_ICMPEQ L471 - false
   */

  @Test
  public void test27()  throws Throwable  {
      TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>();
      TByteObjectHashMap<String> tByteObjectHashMap1 = new TByteObjectHashMap<String>();
      tByteObjectHashMap1.put((byte)0, "a,_b;CU'Sy?Sl;>uIa}");
      boolean boolean0 = tByteObjectHashMap1.equals((Object) tByteObjectHashMap0);
      assertEquals(1, tByteObjectHashMap1.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 28
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.equals(Ljava/lang/Object;)Z: I52 Branch 76 IFNONNULL L480 - true
   * 2 gnu.trove.map.hash.TByteObjectHashMap.equals(Ljava/lang/Object;)Z: I75 Branch 79 IFNE L485 - true
   * 3 gnu.trove.map.hash.TByteObjectHashMap.iterator()Lgnu/trove/iterator/TByteObjectIterator;: root-Branch
   * 4 gnu.trove.map.hash.TByteObjectHashMap.get(B)Ljava/lang/Object;: I9 Branch 46 IFGE L213 - true
   * 5 gnu.trove.map.hash.TByteObjectHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 73 IFNE L467 - true
   * 6 gnu.trove.map.hash.TByteObjectHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 74 IF_ICMPEQ L471 - true
   * 7 gnu.trove.map.hash.TByteObjectHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 75 IFEQ L476 - true
   * 8 gnu.trove.map.hash.TByteObjectHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 75 IFEQ L476 - false
   * 9 gnu.trove.map.hash.TByteObjectHashMap$TByteObjectHashIterator.key()B: root-Branch
   * 10 gnu.trove.map.hash.TByteObjectHashMap$TByteObjectHashIterator.advance()V: root-Branch
   * 11 gnu.trove.map.hash.TByteObjectHashMap$TByteObjectHashIterator.<init>(Lgnu/trove/map/hash/TByteObjectHashMap;Lgnu/trove/map/hash/TByteObjectHashMap;)V: root-Branch
   * 12 gnu.trove.map.hash.TByteObjectHashMap$TByteObjectHashIterator.value()Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test28()  throws Throwable  {
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>();
      tByteObjectHashMap0.put((byte)0, "a,_b;CU'Sy?Sl;>uIa}");
      boolean boolean0 = tByteObjectHashMap0.equals((Object) tByteObjectHashMap0);
      assertEquals("{0=a,_b;CU'Sy?Sl;>uIa}}", tByteObjectHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 29
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.hashCode()I: I29 Branch 81 IF_ICMPNE L503 - false
   * 2 gnu.trove.map.hash.TByteObjectHashMap.hashCode()I: I41 Branch 82 IFNONNULL L504 - true
   * 3 gnu.trove.map.hash.TByteObjectHashMap.hashCode()I: I22 Branch 80 IFLE L502 - true
   * 4 gnu.trove.map.hash.TByteObjectHashMap.hashCode()I: I22 Branch 80 IFLE L502 - false
   * 5 gnu.trove.map.hash.TByteObjectHashMap.hashCode()I: I29 Branch 81 IF_ICMPNE L503 - true
   */

  @Test
  public void test29()  throws Throwable  {
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>();
      tByteObjectHashMap0.put((byte)0, "a,_b;CU'Sy?Sl;>uIa}");
      int int0 = tByteObjectHashMap0.hashCode();
      assertEquals("{0=a,_b;CU'Sy?Sl;>uIa}}", tByteObjectHashMap0.toString());
      assertEquals((-791344675), int0);
  }

  //Test case number: 30
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.hashCode()I: I41 Branch 82 IFNONNULL L504 - false
   * 2 gnu.trove.map.hash.TByteObjectHashMap.hashCode()I: I22 Branch 80 IFLE L502 - true
   * 3 gnu.trove.map.hash.TByteObjectHashMap.hashCode()I: I22 Branch 80 IFLE L502 - false
   * 4 gnu.trove.map.hash.TByteObjectHashMap.hashCode()I: I29 Branch 81 IF_ICMPNE L503 - true
   * 5 gnu.trove.map.hash.TByteObjectHashMap.hashCode()I: I29 Branch 81 IF_ICMPNE L503 - false
   */

  @Test
  public void test30()  throws Throwable  {
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>();
      tByteObjectHashMap0.put((byte) (-57), (String) null);
      int int0 = tByteObjectHashMap0.hashCode();
      assertEquals(1, tByteObjectHashMap0.size());
      assertEquals((-57), int0);
  }

  //Test case number: 31
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I39 Branch 84 IF_ICMPNE L974 - false
   * 2 gnu.trove.map.hash.TByteObjectHashMap.<init>(IFB)V: root-Branch
   * 3 gnu.trove.map.hash.TByteObjectHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 83 IFLE L973 - true
   * 4 gnu.trove.map.hash.TByteObjectHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 83 IFLE L973 - false
   * 5 gnu.trove.map.hash.TByteObjectHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I39 Branch 84 IF_ICMPNE L974 - true
   */

  @Test
  public void test31()  throws Throwable  {
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>(1323, (float) 1323, (byte)17);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((int) (byte)17);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tByteObjectHashMap0.put((byte)17, "5R3%/~#Y291v32=~g");
      tByteObjectHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(false, tByteObjectHashMap0.isEmpty());
      assertEquals(44, byteArrayOutputStream0.size());
  }

  //Test case number: 32
  /*
   * 15 covered goals:
   * 1 gnu.trove.map.hash.TByteObjectHashMap$2.execute(BLjava/lang/Object;)Z: I4 Branch 97 IFEQ L1013 - true
   * 2 gnu.trove.map.hash.TByteObjectHashMap$2.execute(BLjava/lang/Object;)Z: I4 Branch 97 IFEQ L1013 - false
   * 3 gnu.trove.map.hash.TByteObjectHashMap.<init>()V: root-Branch
   * 4 gnu.trove.map.hash.TByteObjectHashMap.put(BLjava/lang/Object;)Ljava/lang/Object;: root-Branch
   * 5 gnu.trove.map.hash.TByteObjectHashMap.toString()Ljava/lang/String;: root-Branch
   * 6 gnu.trove.map.hash.TByteObjectHashMap.setUp(I)I: root-Branch
   * 7 gnu.trove.map.hash.TByteObjectHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I11 Branch 48 IFGE L239 - true
   * 8 gnu.trove.map.hash.TByteObjectHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I40 Branch 49 IFEQ L247 - false
   * 9 gnu.trove.map.hash.TByteObjectHashMap.forEachEntry(Lgnu/trove/procedure/TByteObjectProcedure;)Z: I23 Branch 65 IFLE L416 - true
   * 10 gnu.trove.map.hash.TByteObjectHashMap.forEachEntry(Lgnu/trove/procedure/TByteObjectProcedure;)Z: I23 Branch 65 IFLE L416 - false
   * 11 gnu.trove.map.hash.TByteObjectHashMap.forEachEntry(Lgnu/trove/procedure/TByteObjectProcedure;)Z: I30 Branch 66 IF_ICMPNE L417 - true
   * 12 gnu.trove.map.hash.TByteObjectHashMap.forEachEntry(Lgnu/trove/procedure/TByteObjectProcedure;)Z: I30 Branch 66 IF_ICMPNE L417 - false
   * 13 gnu.trove.map.hash.TByteObjectHashMap.forEachEntry(Lgnu/trove/procedure/TByteObjectProcedure;)Z: I39 Branch 67 IFNE L417 - true
   * 14 gnu.trove.map.hash.TByteObjectHashMap$2.<init>(Lgnu/trove/map/hash/TByteObjectHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 15 gnu.trove.map.hash.TByteObjectHashMap$1.<init>(Lgnu/trove/map/hash/TByteObjectHashMap;)V: root-Branch
   */

  @Test
  public void test32()  throws Throwable  {
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>();
      tByteObjectHashMap0.put((byte)0, "a,_b;CU'Sy?Sl;>uIa}");
      tByteObjectHashMap0.put((byte) (-57), (String) null);
      String string0 = tByteObjectHashMap0.toString();
      assertEquals(2, tByteObjectHashMap0.size());
      assertEquals("{-57=null,0=a,_b;CU'Sy?Sl;>uIa}}", string0);
  }
}
