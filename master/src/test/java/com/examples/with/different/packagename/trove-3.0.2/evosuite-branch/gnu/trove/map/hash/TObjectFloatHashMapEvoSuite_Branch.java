/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TFloatCollection;
import gnu.trove.function.TFloatFunction;
import gnu.trove.impl.hash.TObjectHash;
import gnu.trove.list.array.TFloatArrayList;
import gnu.trove.map.TObjectFloatMap;
import gnu.trove.map.custom_hash.TObjectFloatCustomHashMap;
import gnu.trove.map.hash.TObjectFloatHashMap;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.procedure.TObjectFloatProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectFloatHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.<init>(I)V: root-Branch
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.setUp(I)I: root-Branch
   * 4 gnu.trove.map.hash.TObjectFloatHashMap$1.<init>(Lgnu/trove/map/hash/TObjectFloatHashMap;)V: root-Branch
   */

//   @Test
//   public void test0()  throws Throwable  {
//       TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>(0);
//       Float[] floatArray0 = new Float[9];
//       ToObjectArrayProceedure<Float> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Float>(floatArray0);
//       boolean boolean0 = tObjectFloatHashMap0.forEachKey((TObjectProcedure<? super Float>) toObjectArrayProceedure0);
//       assertEquals(0.0F, tObjectFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(true, boolean0);
//   }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.keySet()Ljava/util/Set;: root-Branch
   * 2 gnu.trove.map.hash.TObjectFloatHashMap$KeyView.<init>(Lgnu/trove/map/hash/TObjectFloatHashMap;)V: root-Branch
   */

//   @Test
//   public void test1()  throws Throwable  {
//       TObjectFloatHashMap<String> tObjectFloatHashMap0 = new TObjectFloatHashMap<String>(1523);
//       tObjectFloatHashMap0.keySet();
//       assertEquals(3049, tObjectFloatHashMap0.capacity());
//       assertEquals(0.0F, tObjectFloatHashMap0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 2
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.iterator()Lgnu/trove/iterator/TObjectFloatIterator;: root-Branch
   * 2 gnu.trove.map.hash.TObjectFloatHashMap$TObjectFloatHashIterator.<init>(Lgnu/trove/map/hash/TObjectFloatHashMap;Lgnu/trove/map/hash/TObjectFloatHashMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 58 IFNE L576 - true
   * 4 gnu.trove.map.hash.TObjectFloatHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 59 IF_ICMPEQ L580 - true
   * 5 gnu.trove.map.hash.TObjectFloatHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 60 IFEQ L585 - true
   */

//   @Test
//   public void test2()  throws Throwable  {
//       TObjectFloatHashMap<Integer> tObjectFloatHashMap0 = new TObjectFloatHashMap<Integer>(233);
//       boolean boolean0 = tObjectFloatHashMap0.equals((Object) tObjectFloatHashMap0);
//       assertEquals(true, boolean0);
//       assertEquals(557, tObjectFloatHashMap0.capacity());
//       assertEquals(0.0F, tObjectFloatHashMap0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 3
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.getNoEntryValue()F: root-Branch
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.putAll(Lgnu/trove/map/TObjectFloatMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.<init>(IFF)V: I25 Branch 8 IFEQ L124 - false
   * 4 gnu.trove.map.hash.TObjectFloatHashMap.<init>(Lgnu/trove/map/TObjectFloatMap;)V: I13 Branch 9 IFEQ L138 - false
   * 5 gnu.trove.map.hash.TObjectFloatHashMap.<init>(Lgnu/trove/map/TObjectFloatMap;)V: I37 Branch 10 IFEQ L143 - false
   * 6 gnu.trove.map.hash.TObjectFloatHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I18 Branch 47 IFLE L506 - true
   * 7 gnu.trove.map.hash.TObjectFloatHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I18 Branch 47 IFLE L506 - false
   * 8 gnu.trove.map.hash.TObjectFloatHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - true
   */

//   @Test
//   public void test3()  throws Throwable  {
//       TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>((-135), (-135), (-135));
//       TObjectFloatHashMap<Object> tObjectFloatHashMap1 = new TObjectFloatHashMap<Object>((TObjectFloatMap<?>) tObjectFloatHashMap0);
//       assertEquals((-135.0F), tObjectFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals(3, tObjectFloatHashMap1.capacity());
//   }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.clear()V: root-Branch
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.<init>()V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>();
      tObjectFloatHashMap0.clear();
      assertEquals(23, tObjectFloatHashMap0.capacity());
      assertEquals("{}", tObjectFloatHashMap0.toString());
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.containsKey(Ljava/lang/Object;)Z: root-Branch
   */

//   @Test
//   public void test5()  throws Throwable  {
//       TObjectFloatHashMap<Integer> tObjectFloatHashMap0 = new TObjectFloatHashMap<Integer>(219);
//       tObjectFloatHashMap0.containsKey((Object) "0x1.b6p7");
//       assertEquals(557, tObjectFloatHashMap0.capacity());
//       assertEquals(0.0F, tObjectFloatHashMap0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 6
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.increment(Ljava/lang/Object;)Z: root-Branch
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.adjustValue(Ljava/lang/Object;F)Z: I9 Branch 40 IFGE L427 - false
   */

  @Test
  public void test6()  throws Throwable  {
      TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>();
      boolean boolean0 = tObjectFloatHashMap0.increment((Float) 1036.0577F);
      assertEquals(false, boolean0);
      assertEquals(23, tObjectFloatHashMap0.capacity());
  }

  //Test case number: 7
  /*
   * 11 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap$TFloatValueCollection$TObjectFloatValueHashIterator.<init>(Lgnu/trove/map/hash/TObjectFloatHashMap$TFloatValueCollection;)V: root-Branch
   * 2 gnu.trove.map.hash.TObjectFloatHashMap$TFloatValueCollection.iterator()Lgnu/trove/iterator/TFloatIterator;: root-Branch
   * 3 gnu.trove.map.hash.TObjectFloatHashMap$TFloatValueCollection.size()I: root-Branch
   * 4 gnu.trove.map.hash.TObjectFloatHashMap$TFloatValueCollection$TObjectFloatValueHashIterator.hasNext()Z: I4 Branch 103 IFLT L973 - true
   * 5 gnu.trove.map.hash.TObjectFloatHashMap$TFloatValueCollection$TObjectFloatValueHashIterator.nextIndex()I: I7 Branch 106 IF_ICMPEQ L1024 - true
   * 6 gnu.trove.map.hash.TObjectFloatHashMap$TFloatValueCollection$TObjectFloatValueHashIterator.nextIndex()I: I30 Branch 107 IFLE L1030 - true
   * 7 gnu.trove.map.hash.TObjectFloatHashMap$TFloatValueCollection$TObjectFloatValueHashIterator.nextIndex()I: I30 Branch 107 IFLE L1030 - false
   * 8 gnu.trove.map.hash.TObjectFloatHashMap$TFloatValueCollection$TObjectFloatValueHashIterator.nextIndex()I: I35 Branch 108 IF_ACMPEQ L1030 - true
   * 9 gnu.trove.map.hash.TObjectFloatHashMap.valueCollection()Lgnu/trove/TFloatCollection;: root-Branch
   * 10 gnu.trove.map.hash.TObjectFloatHashMap$TFloatValueCollection.<init>(Lgnu/trove/map/hash/TObjectFloatHashMap;)V: root-Branch
   * 11 gnu.trove.map.hash.TObjectFloatHashMap.<init>(IF)V: root-Branch
   */

//   @Test
//   public void test7()  throws Throwable  {
//       TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>(1, 1);
//       TFloatCollection tFloatCollection0 = tObjectFloatHashMap0.valueCollection();
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(tFloatCollection0);
//       assertEquals(0.0F, tObjectFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(0.0F, tFloatCollection0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 8
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap$1.execute(Ljava/lang/Object;F)Z: root-Branch
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.<init>(IFF)V: I25 Branch 8 IFEQ L124 - true
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.<init>(Lgnu/trove/map/TObjectFloatMap;)V: I37 Branch 10 IFEQ L143 - true
   * 4 gnu.trove.map.hash.TObjectFloatHashMap.putIfAbsent(Ljava/lang/Object;F)F: I9 Branch 20 IFGE L246 - true
   * 5 gnu.trove.map.hash.TObjectFloatHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - false
   * 6 gnu.trove.map.hash.TObjectFloatHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I30 Branch 49 IF_ACMPEQ L507 - false
   * 7 gnu.trove.map.hash.TObjectFloatHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I39 Branch 50 IFNE L507 - true
   * 8 gnu.trove.map.hash.TObjectFloatHashMap.getNoEntryValue()F: root-Branch
   * 9 gnu.trove.map.hash.TObjectFloatHashMap.<init>(Lgnu/trove/map/TObjectFloatMap;)V: I13 Branch 9 IFEQ L138 - false
   * 10 gnu.trove.map.hash.TObjectFloatHashMap.put(Ljava/lang/Object;F)F: root-Branch
   * 11 gnu.trove.map.hash.TObjectFloatHashMap.doPut(FI)F: I12 Branch 21 IFGE L255 - true
   * 12 gnu.trove.map.hash.TObjectFloatHashMap.doPut(FI)F: I41 Branch 22 IFEQ L263 - false
   */

  @Test
  public void test8()  throws Throwable  {
      TObjectFloatHashMap<String> tObjectFloatHashMap0 = new TObjectFloatHashMap<String>();
      tObjectFloatHashMap0.putIfAbsent("", 0.0F);
      TObjectFloatHashMap<String> tObjectFloatHashMap1 = new TObjectFloatHashMap<String>((TObjectFloatMap<? extends String>) tObjectFloatHashMap0);
      assertEquals(1, tObjectFloatHashMap0.size());
      assertTrue(tObjectFloatHashMap0.equals(tObjectFloatHashMap1));
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.<init>(Lgnu/trove/map/TObjectFloatMap;)V: I13 Branch 9 IFEQ L138 - true
   */

//   @Test
//   public void test9()  throws Throwable  {
//       TObjectFloatCustomHashMap<Float> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Float>();
//       TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>((TObjectFloatMap<? extends Float>) tObjectFloatCustomHashMap0);
//       assertEquals(0.0F, tObjectFloatHashMap0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 10
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.rehash(I)V: I61 Branch 13 IF_ACMPEQ L186 - true
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.adjustOrPutValue(Ljava/lang/Object;FF)F: I9 Branch 41 IFGE L443 - true
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.adjustOrPutValue(Ljava/lang/Object;FF)F: I51 Branch 42 IFEQ L454 - false
   * 4 gnu.trove.map.hash.TObjectFloatHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - true
   * 5 gnu.trove.map.hash.TObjectFloatHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - false
   * 6 gnu.trove.map.hash.TObjectFloatHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - true
   * 7 gnu.trove.map.hash.TObjectFloatHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - false
   */

//   @Test
//   public void test10()  throws Throwable  {
//       TObjectFloatHashMap<Object> tObjectFloatHashMap0 = new TObjectFloatHashMap<Object>(179, 0.0F);
//       Object object0 = TObjectHash.REMOVED;
//       float float0 = tObjectFloatHashMap0.adjustOrPutValue(object0, 0.0F, 0.0F);
//       assertEquals(false, tObjectFloatHashMap0.isEmpty());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 11
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.containsValue(F)Z: I25 Branch 16 IF_ACMPEQ L219 - false
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.containsValue(F)Z: I30 Branch 17 IF_ACMPEQ L219 - false
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.containsValue(F)Z: I36 Branch 18 IFNE L219 - true
   * 4 gnu.trove.map.hash.TObjectFloatHashMap.containsValue(F)Z: I18 Branch 15 IFLE L218 - true
   * 5 gnu.trove.map.hash.TObjectFloatHashMap.containsValue(F)Z: I18 Branch 15 IFLE L218 - false
   * 6 gnu.trove.map.hash.TObjectFloatHashMap.containsValue(F)Z: I25 Branch 16 IF_ACMPEQ L219 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>();
      Float float0 = new Float(1036.0577F);
      tObjectFloatHashMap0.putIfAbsent(float0, 1.4387573F);
      boolean boolean0 = tObjectFloatHashMap0.containsValue((-1082.6931F));
      assertEquals(1, tObjectFloatHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 12
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.containsValue(F)Z: I30 Branch 17 IF_ACMPEQ L219 - true
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.containsValue(F)Z: I18 Branch 15 IFLE L218 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TObjectFloatHashMap<Object> tObjectFloatHashMap0 = new TObjectFloatHashMap<Object>();
      Object object0 = TObjectHash.REMOVED;
      tObjectFloatHashMap0.adjustOrPutValue(object0, 0.0F, (float) 382);
      boolean boolean0 = tObjectFloatHashMap0.containsValue((float) 382);
      assertEquals(false, tObjectFloatHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.containsValue(F)Z: I36 Branch 18 IFNE L219 - false
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.containsValue(F)Z: I18 Branch 15 IFLE L218 - false
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.containsValue(F)Z: I25 Branch 16 IF_ACMPEQ L219 - true
   * 4 gnu.trove.map.hash.TObjectFloatHashMap.containsValue(F)Z: I25 Branch 16 IF_ACMPEQ L219 - false
   * 5 gnu.trove.map.hash.TObjectFloatHashMap.containsValue(F)Z: I30 Branch 17 IF_ACMPEQ L219 - false
   */

  @Test
  public void test13()  throws Throwable  {
      TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>();
      Float float0 = new Float(1036.0577F);
      tObjectFloatHashMap0.put(float0, (-1082.6931F));
      boolean boolean0 = tObjectFloatHashMap0.containsValue((-1082.6931F));
      assertEquals(false, tObjectFloatHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.get(Ljava/lang/Object;)F: I9 Branch 19 IFGE L230 - false
   */

//   @Test
//   public void test14()  throws Throwable  {
//       TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>(1, 1);
//       float float0 = tObjectFloatHashMap0.get((Object) null);
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 15
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.putIfAbsent(Ljava/lang/Object;F)F: I9 Branch 20 IFGE L246 - false
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.rehash(I)V: I61 Branch 13 IF_ACMPEQ L186 - false
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.rehash(I)V: I77 Branch 14 IFGE L189 - true
   */

//   @Test
//   public void test15()  throws Throwable  {
//       TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>(179, 0.0F, 0.0F);
//       tObjectFloatHashMap0.put((Float) 0.0F, (float) 3);
//       float float0 = tObjectFloatHashMap0.putIfAbsent((Float) 0.0F, 1331.5706F);
//       assertEquals(false, tObjectFloatHashMap0.isEmpty());
//       assertEquals(3.0F, float0, 0.01F);
//   }

  //Test case number: 16
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.putAll(Ljava/util/Map;)V: I13 Branch 24 IFEQ L300 - false
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.putAll(Ljava/util/Map;)V: I13 Branch 24 IFEQ L300 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>(1, 1);
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      hashMap0.put((Float) 0.0F, (Float) 0.0F);
      tObjectFloatHashMap0.putAll((Map<? extends Float, ? extends Float>) hashMap0);
      assertEquals("{0.0=0.0}", tObjectFloatHashMap0.toString());
      assertEquals(false, tObjectFloatHashMap0.isEmpty());
  }

  //Test case number: 17
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.keys()[Ljava/lang/Object;: I30 Branch 26 IF_ACMPEQ L335 - false
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.keys()[Ljava/lang/Object;: I35 Branch 27 IF_ACMPEQ L335 - false
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.hashCode()I: I22 Branch 65 IFLE L613 - true
   * 4 gnu.trove.map.hash.TObjectFloatHashMap.hashCode()I: I22 Branch 65 IFLE L613 - false
   * 5 gnu.trove.map.hash.TObjectFloatHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - true
   * 6 gnu.trove.map.hash.TObjectFloatHashMap.keys()[Ljava/lang/Object;: I23 Branch 25 IFLE L334 - true
   * 7 gnu.trove.map.hash.TObjectFloatHashMap.keys()[Ljava/lang/Object;: I23 Branch 25 IFLE L334 - false
   * 8 gnu.trove.map.hash.TObjectFloatHashMap.keys()[Ljava/lang/Object;: I30 Branch 26 IF_ACMPEQ L335 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>();
      TObjectFloatHashMap<Object> tObjectFloatHashMap1 = new TObjectFloatHashMap<Object>();
      tObjectFloatHashMap1.adjustOrPutValue((Object) tObjectFloatHashMap0, 0.0F, (float) 382);
      tObjectFloatHashMap1.keys();
      assertEquals("{{}=382.0}", tObjectFloatHashMap1.toString());
      assertEquals(1, tObjectFloatHashMap1.size());
  }

  //Test case number: 18
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.keys()[Ljava/lang/Object;: I35 Branch 27 IF_ACMPEQ L335 - true
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.keys()[Ljava/lang/Object;: I23 Branch 25 IFLE L334 - true
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.keys()[Ljava/lang/Object;: I23 Branch 25 IFLE L334 - false
   * 4 gnu.trove.map.hash.TObjectFloatHashMap.keys()[Ljava/lang/Object;: I30 Branch 26 IF_ACMPEQ L335 - true
   * 5 gnu.trove.map.hash.TObjectFloatHashMap.keys()[Ljava/lang/Object;: I30 Branch 26 IF_ACMPEQ L335 - false
   */

  @Test
  public void test18()  throws Throwable  {
      TObjectFloatHashMap<Object> tObjectFloatHashMap0 = new TObjectFloatHashMap<Object>();
      Object object0 = TObjectHash.REMOVED;
      tObjectFloatHashMap0.adjustOrPutValue(object0, 0.0F, (float) 382);
      tObjectFloatHashMap0.keys();
      assertEquals(1, tObjectFloatHashMap0.size());
      assertEquals(false, tObjectFloatHashMap0.isEmpty());
  }

  //Test case number: 19
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I44 Branch 30 IF_ACMPEQ L356 - false
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I49 Branch 31 IF_ACMPEQ L356 - false
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I10 Branch 28 IF_ICMPGE L347 - true
   * 4 gnu.trove.map.hash.TObjectFloatHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L355 - true
   * 5 gnu.trove.map.hash.TObjectFloatHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L355 - false
   * 6 gnu.trove.map.hash.TObjectFloatHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I44 Branch 30 IF_ACMPEQ L356 - true
   * 7 gnu.trove.map.hash.TObjectFloatHashMap.adjustOrPutValue(Ljava/lang/Object;FF)F: I9 Branch 41 IFGE L443 - true
   * 8 gnu.trove.map.hash.TObjectFloatHashMap.adjustOrPutValue(Ljava/lang/Object;FF)F: I51 Branch 42 IFEQ L454 - false
   */

//   @Test
//   public void test19()  throws Throwable  {
//       TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>(1523, 10.0F);
//       Float[] floatArray0 = new Float[1];
//       tObjectFloatHashMap0.adjustOrPutValue((Float) 10.0F, 6.6360896E8F, 10.0F);
//       tObjectFloatHashMap0.keys(floatArray0);
//       assertEquals(1, tObjectFloatHashMap0.size());
//       assertEquals(0.0F, tObjectFloatHashMap0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 20
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.values()[F: I34 Branch 33 IF_ACMPEQ L378 - false
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.values()[F: I39 Branch 34 IF_ACMPEQ L378 - false
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.values()[F: I27 Branch 32 IFLE L377 - true
   * 4 gnu.trove.map.hash.TObjectFloatHashMap.values()[F: I27 Branch 32 IFLE L377 - false
   * 5 gnu.trove.map.hash.TObjectFloatHashMap.values()[F: I34 Branch 33 IF_ACMPEQ L378 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TObjectFloatHashMap<String> tObjectFloatHashMap0 = new TObjectFloatHashMap<String>(1, 1);
      tObjectFloatHashMap0.putIfAbsent("", (-655.6491F));
      tObjectFloatHashMap0.values();
      assertEquals(1, tObjectFloatHashMap0.size());
      assertEquals(false, tObjectFloatHashMap0.isEmpty());
  }

  //Test case number: 21
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.values([F)[F: I10 Branch 35 IF_ICMPGE L389 - true
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.values([F)[F: I37 Branch 36 IFLE L396 - true
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.values([F)[F: I37 Branch 36 IFLE L396 - false
   * 4 gnu.trove.map.hash.TObjectFloatHashMap.values([F)[F: I44 Branch 37 IF_ACMPEQ L397 - true
   * 5 gnu.trove.map.hash.TObjectFloatHashMap.values([F)[F: I65 Branch 39 IF_ICMPLE L401 - false
   */

  @Test
  public void test21()  throws Throwable  {
      TObjectFloatHashMap<String> tObjectFloatHashMap0 = new TObjectFloatHashMap<String>();
      float[] floatArray0 = new float[2];
      float[] floatArray1 = tObjectFloatHashMap0.values(floatArray0);
      assertEquals(23, tObjectFloatHashMap0.capacity());
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
  }

  //Test case number: 22
  /*
   * 14 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.values([F)[F: I10 Branch 35 IF_ICMPGE L389 - false
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.values([F)[F: I44 Branch 37 IF_ACMPEQ L397 - false
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.values([F)[F: I49 Branch 38 IF_ACMPEQ L397 - false
   * 4 gnu.trove.map.hash.TObjectFloatHashMap.values([F)[F: I65 Branch 39 IF_ICMPLE L401 - true
   * 5 gnu.trove.map.hash.TObjectFloatHashMap.values([F)[F: I37 Branch 36 IFLE L396 - true
   * 6 gnu.trove.map.hash.TObjectFloatHashMap.values([F)[F: I37 Branch 36 IFLE L396 - false
   * 7 gnu.trove.map.hash.TObjectFloatHashMap.values([F)[F: I44 Branch 37 IF_ACMPEQ L397 - true
   * 8 gnu.trove.map.hash.TObjectFloatHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - true
   * 9 gnu.trove.map.hash.TObjectFloatHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - false
   * 10 gnu.trove.map.hash.TObjectFloatHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - true
   * 11 gnu.trove.map.hash.TObjectFloatHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - false
   * 12 gnu.trove.map.hash.TObjectFloatHashMap.rehash(I)V: I61 Branch 13 IF_ACMPEQ L186 - false
   * 13 gnu.trove.map.hash.TObjectFloatHashMap.rehash(I)V: I77 Branch 14 IFGE L189 - true
   * 14 gnu.trove.map.hash.TObjectFloatHashMap.<init>(IFF)V: I25 Branch 8 IFEQ L124 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>(179, 0.0F, 0.0F);
      tObjectFloatHashMap0.put((Float) 1.0F, (float) 3);
      tObjectFloatHashMap0.put((Float) 0.0F, (float) 3);
      float[] floatArray0 = new float[1];
      tObjectFloatHashMap0.values(floatArray0);
      assertEquals(17, tObjectFloatHashMap0.capacity());
      assertEquals("{1.0=3.0,0.0=3.0}", tObjectFloatHashMap0.toString());
  }

  //Test case number: 23
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.adjustValue(Ljava/lang/Object;F)Z: I9 Branch 40 IFGE L427 - true
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.increment(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>();
      Float float0 = new Float(1036.0577F);
      tObjectFloatHashMap0.putIfAbsent(float0, 1.4387573F);
      boolean boolean0 = tObjectFloatHashMap0.increment((Float) 1036.0577F);
      assertEquals(1, tObjectFloatHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 24
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.adjustOrPutValue(Ljava/lang/Object;FF)F: I9 Branch 41 IFGE L443 - false
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.adjustOrPutValue(Ljava/lang/Object;FF)F: I51 Branch 42 IFEQ L454 - true
   */

//   @Test
//   public void test24()  throws Throwable  {
//       TObjectFloatHashMap<String> tObjectFloatHashMap0 = new TObjectFloatHashMap<String>(1, 1);
//       tObjectFloatHashMap0.putIfAbsent("", (-655.6491F));
//       float float0 = tObjectFloatHashMap0.adjustOrPutValue("", 0.0F, 0.0F);
//       assertEquals(false, tObjectFloatHashMap0.isEmpty());
//       assertEquals((-655.6491F), float0, 0.01F);
//   }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 43 IFLE L484 - true
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 43 IFLE L484 - false
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 44 IF_ACMPEQ L485 - true
   */

//   @Test
//   public void test25()  throws Throwable  {
//       TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>(55, 55, 55);
//       boolean boolean0 = tObjectFloatHashMap0.forEachValue((TFloatProcedure) null);
//       assertEquals(55.0F, tObjectFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(true, boolean0);
//   }

  //Test case number: 26
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 44 IF_ACMPEQ L485 - false
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I30 Branch 45 IF_ACMPEQ L485 - false
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 43 IFLE L484 - false
   * 4 gnu.trove.map.hash.TObjectFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 44 IF_ACMPEQ L485 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>(0);
      Float float0 = new Float(761.7175252035923);
      tObjectFloatHashMap0.putIfAbsent(float0, (float) float0);
      // Undeclared exception!
      try {
        tObjectFloatHashMap0.forEachValue((TFloatProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 27
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I30 Branch 49 IF_ACMPEQ L507 - true
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.put(Ljava/lang/Object;F)F: root-Branch
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.putAll(Lgnu/trove/map/TObjectFloatMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TObjectFloatHashMap.doPut(FI)F: I12 Branch 21 IFGE L255 - false
   * 5 gnu.trove.map.hash.TObjectFloatHashMap.doPut(FI)F: I41 Branch 22 IFEQ L263 - true
   * 6 gnu.trove.map.hash.TObjectFloatHashMap$1.execute(Ljava/lang/Object;F)Z: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      TObjectFloatHashMap<Integer> tObjectFloatHashMap0 = new TObjectFloatHashMap<Integer>(1, 1, 1);
      Object[] objectArray0 = new Object[4];
      Object object0 = TObjectHash.REMOVED;
      objectArray0[3] = object0;
      tObjectFloatHashMap0._set = objectArray0;
      TObjectFloatHashMap<Object> tObjectFloatHashMap1 = new TObjectFloatHashMap<Object>(1670, 803.33435F, 803.33435F);
      tObjectFloatHashMap1.putAll((TObjectFloatMap<?>) tObjectFloatHashMap0);
      assertEquals(false, tObjectFloatHashMap1.isEmpty());
      assertEquals(1, tObjectFloatHashMap1.size());
  }

  //Test case number: 28
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.retainEntries(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I27 Branch 51 IFLE L533 - true
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.retainEntries(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I27 Branch 51 IFLE L533 - false
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.retainEntries(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I34 Branch 52 IF_ACMPEQ L534 - true
   */

//   @Test
//   public void test28()  throws Throwable  {
//       TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>(219, 219);
//       boolean boolean0 = tObjectFloatHashMap0.retainEntries((TObjectFloatProcedure<? super Float>) null);
//       assertEquals(0.0F, tObjectFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(false, boolean0);
//   }

  //Test case number: 29
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.retainEntries(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I34 Branch 52 IF_ACMPEQ L534 - false
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.retainEntries(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I39 Branch 53 IF_ACMPEQ L534 - false
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.retainEntries(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I27 Branch 51 IFLE L533 - false
   * 4 gnu.trove.map.hash.TObjectFloatHashMap.retainEntries(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I34 Branch 52 IF_ACMPEQ L534 - true
   */

  @Test
  public void test29()  throws Throwable  {
      TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>();
      Float float0 = new Float(1036.0577F);
      tObjectFloatHashMap0.putIfAbsent(float0, 1.4387573F);
      // Undeclared exception!
      try {
        tObjectFloatHashMap0.retainEntries((TObjectFloatProcedure<? super Float>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I18 Branch 55 IFLE L558 - false
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I24 Branch 56 IFNULL L559 - false
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I29 Branch 57 IF_ACMPEQ L559 - false
   * 4 gnu.trove.map.hash.TObjectFloatHashMap.<init>(IFF)V: I25 Branch 8 IFEQ L124 - false
   */

  @Test
  public void test30()  throws Throwable  {
      TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>((-135), (-135), (-135));
      // Undeclared exception!
      try {
        tObjectFloatHashMap0.transformValues((TFloatFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 58 IFNE L576 - false
   */

//   @Test
//   public void test31()  throws Throwable  {
//       TObjectFloatHashMap<Integer> tObjectFloatHashMap0 = new TObjectFloatHashMap<Integer>(229);
//       boolean boolean0 = tObjectFloatHashMap0.equals((Object) null);
//       assertEquals(0.0F, tObjectFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(false, boolean0);
//       assertEquals(557, tObjectFloatHashMap0.capacity());
//   }

  //Test case number: 32
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - false
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.hashCode()I: I34 Branch 67 IF_ACMPEQ L614 - false
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.hashCode()I: I45 Branch 68 IFNONNULL L615 - false
   */

  @Test
  public void test32()  throws Throwable  {
      TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>(1252, 1252);
      tObjectFloatHashMap0.putIfAbsent((Float) null, 994.87573F);
      int int0 = tObjectFloatHashMap0.hashCode();
      assertEquals("{null=994.87573}", tObjectFloatHashMap0.toString());
      assertEquals(1394194301, int0);
  }

  //Test case number: 33
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.hashCode()I: I45 Branch 68 IFNONNULL L615 - true
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.<init>(I)V: root-Branch
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.hashCode()I: I22 Branch 65 IFLE L613 - true
   * 4 gnu.trove.map.hash.TObjectFloatHashMap.hashCode()I: I22 Branch 65 IFLE L613 - false
   * 5 gnu.trove.map.hash.TObjectFloatHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - true
   * 6 gnu.trove.map.hash.TObjectFloatHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - false
   * 7 gnu.trove.map.hash.TObjectFloatHashMap.hashCode()I: I34 Branch 67 IF_ACMPEQ L614 - false
   * 8 gnu.trove.map.hash.TObjectFloatHashMap.remove(Ljava/lang/Object;)F: I14 Branch 23 IFLT L274 - true
   */

//   @Test
//   public void test33()  throws Throwable  {
//       TObjectFloatHashMap<String> tObjectFloatHashMap0 = new TObjectFloatHashMap<String>();
//       tObjectFloatHashMap0.putIfAbsent("", 0.0F);
//       TObjectFloatHashMap<Integer> tObjectFloatHashMap1 = new TObjectFloatHashMap<Integer>(194);
//       float float0 = tObjectFloatHashMap1.remove((Object) tObjectFloatHashMap0);
//       assertEquals(false, tObjectFloatHashMap0.isEmpty());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 34
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I45 Branch 71 IF_ACMPEQ L1094 - false
   * 2 gnu.trove.map.hash.TObjectFloatHashMap.<init>(IF)V: root-Branch
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 69 IFLE L1093 - true
   * 4 gnu.trove.map.hash.TObjectFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 69 IFLE L1093 - false
   * 5 gnu.trove.map.hash.TObjectFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I39 Branch 70 IF_ACMPEQ L1094 - false
   * 6 gnu.trove.map.hash.TObjectFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I45 Branch 71 IF_ACMPEQ L1094 - true
   */

  @Test
  public void test34()  throws Throwable  {
      TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>(1252, 1252);
      tObjectFloatHashMap0.putIfAbsent((Float) null, 994.87573F);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1252);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tObjectFloatHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(1, tObjectFloatHashMap0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\u0013\u0000\u0000\u0000D\uFFFD\uFFFD\u0000D\uFFFD\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001p", byteArrayOutputStream0.toString());
  }

  //Test case number: 35
  /*
   * 16 covered goals:
   * 1 gnu.trove.map.hash.TObjectFloatHashMap$2.execute(Ljava/lang/Object;F)Z: I4 Branch 102 IFEQ L1134 - true
   * 2 gnu.trove.map.hash.TObjectFloatHashMap$2.execute(Ljava/lang/Object;F)Z: I4 Branch 102 IFEQ L1134 - false
   * 3 gnu.trove.map.hash.TObjectFloatHashMap.setUp(I)I: root-Branch
   * 4 gnu.trove.map.hash.TObjectFloatHashMap.toString()Ljava/lang/String;: root-Branch
   * 5 gnu.trove.map.hash.TObjectFloatHashMap.<init>()V: root-Branch
   * 6 gnu.trove.map.hash.TObjectFloatHashMap.putIfAbsent(Ljava/lang/Object;F)F: I9 Branch 20 IFGE L246 - true
   * 7 gnu.trove.map.hash.TObjectFloatHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I18 Branch 47 IFLE L506 - true
   * 8 gnu.trove.map.hash.TObjectFloatHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I18 Branch 47 IFLE L506 - false
   * 9 gnu.trove.map.hash.TObjectFloatHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - true
   * 10 gnu.trove.map.hash.TObjectFloatHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - false
   * 11 gnu.trove.map.hash.TObjectFloatHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I30 Branch 49 IF_ACMPEQ L507 - false
   * 12 gnu.trove.map.hash.TObjectFloatHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I39 Branch 50 IFNE L507 - true
   * 13 gnu.trove.map.hash.TObjectFloatHashMap.doPut(FI)F: I12 Branch 21 IFGE L255 - true
   * 14 gnu.trove.map.hash.TObjectFloatHashMap.doPut(FI)F: I41 Branch 22 IFEQ L263 - false
   * 15 gnu.trove.map.hash.TObjectFloatHashMap$2.<init>(Lgnu/trove/map/hash/TObjectFloatHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 16 gnu.trove.map.hash.TObjectFloatHashMap$1.<init>(Lgnu/trove/map/hash/TObjectFloatHashMap;)V: root-Branch
   */

  @Test
  public void test35()  throws Throwable  {
      TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>();
      Float float0 = new Float(1036.0577F);
      tObjectFloatHashMap0.putIfAbsent(float0, 1.4387573F);
      Float float1 = new Float(276.9725036590382);
      tObjectFloatHashMap0.putIfAbsent(float1, 1.4387573F);
      String string0 = tObjectFloatHashMap0.toString();
      assertEquals(false, tObjectFloatHashMap0.isEmpty());
      assertEquals("{1036.0577=1.4387573,276.9725=1.4387573}", string0);
  }
}
