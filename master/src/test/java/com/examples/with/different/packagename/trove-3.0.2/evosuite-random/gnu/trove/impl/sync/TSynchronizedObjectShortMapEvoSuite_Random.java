/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedObjectShortMap;
import gnu.trove.map.TObjectShortMap;
import gnu.trove.map.custom_hash.TObjectShortCustomHashMap;
import gnu.trove.map.hash.TObjectShortHashMap;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedObjectShortMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TObjectShortCustomHashMap<String> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<String>();
      TSynchronizedObjectShortMap<String> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<String>((TObjectShortMap<String>) tObjectShortCustomHashMap0);
      int int0 = 528;
      float float0 = Float.NEGATIVE_INFINITY;
      short short0 = (short)1657;
      TObjectShortHashMap<Integer> tObjectShortHashMap0 = new TObjectShortHashMap<Integer>(int0, float0, short0);
      TSynchronizedObjectShortMap<Integer> tSynchronizedObjectShortMap1 = new TSynchronizedObjectShortMap<Integer>((TObjectShortMap<Integer>) tObjectShortHashMap0);
      String string0 = "S}Ux";
      Locale locale0 = new Locale(string0, string0, string0);
      char char0 = 'N';
      String string1 = locale0.getExtension(char0);
      TSynchronizedObjectShortMap<Integer> tSynchronizedObjectShortMap2 = new TSynchronizedObjectShortMap<Integer>((TObjectShortMap<Integer>) tSynchronizedObjectShortMap1, (Object) string1);
      String string2 = "";
      short short1 = (short)0;
      // Undeclared exception!
      try {
        tSynchronizedObjectShortMap0.putIfAbsent(string2, short1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TObjectShortCustomHashMap<Integer> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<Integer>();
      tObjectShortCustomHashMap0.valueCollection();
      TSynchronizedObjectShortMap<Integer> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Integer>((TObjectShortMap<Integer>) tObjectShortCustomHashMap0);
      tSynchronizedObjectShortMap0.valueCollection();
      TObjectShortHashMap<Short> tObjectShortHashMap0 = new TObjectShortHashMap<Short>();
      TSynchronizedObjectShortMap<Short> tSynchronizedObjectShortMap1 = new TSynchronizedObjectShortMap<Short>((TObjectShortMap<Short>) tObjectShortHashMap0);
      Object object0 = new Object();
      tSynchronizedObjectShortMap1.containsKey(object0);
      short short0 = tSynchronizedObjectShortMap1.getNoEntryValue();
      assertEquals((short)0, short0);
  }

  @Test
  public void test2()  throws Throwable  {
      TObjectShortMap<Object> tObjectShortMap0 = null;
      TSynchronizedObjectShortMap<Object> tSynchronizedObjectShortMap0 = null;
      try {
        tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Object>(tObjectShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 257;
      short short0 = (short)1;
      TObjectShortHashMap<Integer> tObjectShortHashMap0 = new TObjectShortHashMap<Integer>(int0, (float) int0, short0);
      TSynchronizedObjectShortMap<Integer> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Integer>((TObjectShortMap<Integer>) tObjectShortHashMap0);
      assertEquals(true, tSynchronizedObjectShortMap0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      TObjectShortHashMap<Object> tObjectShortHashMap0 = new TObjectShortHashMap<Object>();
      TSynchronizedObjectShortMap<Object> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Object>((TObjectShortMap<Object>) tObjectShortHashMap0);
      TSynchronizedObjectShortMap<Object> tSynchronizedObjectShortMap1 = new TSynchronizedObjectShortMap<Object>((TObjectShortMap<Object>) tSynchronizedObjectShortMap0);
      short short0 = (short) (-1175);
      boolean boolean0 = tSynchronizedObjectShortMap1.containsValue(short0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 0;
      TObjectShortHashMap<Object> tObjectShortHashMap0 = new TObjectShortHashMap<Object>(int0, int0);
      TSynchronizedObjectShortMap<Object> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Object>((TObjectShortMap<Object>) tObjectShortHashMap0);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)102;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-58);
      byteArray0[3] = byte3;
      byte byte4 = (byte)120;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) byteArrayInputStream0);
      try {
        dataInputStream0.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      int int0 = (-999);
      TObjectShortCustomHashMap<Short> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<Short>((HashingStrategy<? super Short>) identityHashingStrategy0, int0);
      String string0 = "No free or removed slots available. Key set full?!!";
      String string1 = "R";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: No free or removed slots available. Key set full?!!://No free or removed slots available. Key set full?!!R#R
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      float float0 = 706.37396F;
      short short0 = (short) (-833);
      TObjectShortCustomHashMap<Short> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<Short>();
      TSynchronizedObjectShortMap<Short> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Short>((TObjectShortMap<Short>) tObjectShortCustomHashMap0);
      short short1 = (short) (-721);
      // Undeclared exception!
      try {
        tSynchronizedObjectShortMap0.putIfAbsent((Short) short0, short1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TObjectShortHashMap<String> tObjectShortHashMap0 = new TObjectShortHashMap<String>();
      InputStream inputStream0 = null;
      String string0 = "";
      short short0 = (short)25221;
      tObjectShortHashMap0.adjustValue(string0, short0);
      HashingStrategy<Object> hashingStrategy0 = null;
      TObjectShortHashMap<Integer> tObjectShortHashMap1 = new TObjectShortHashMap<Integer>((int) short0);
      Object object0 = null;
      TSynchronizedObjectShortMap<Integer> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Integer>((TObjectShortMap<Integer>) tObjectShortHashMap1, object0);
      int int0 = 168;
      TObjectShortCustomHashMap<Short> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<Short>((HashingStrategy<? super Short>) hashingStrategy0, int0, (float) int0);
      TSynchronizedObjectShortMap<Short> tSynchronizedObjectShortMap1 = new TSynchronizedObjectShortMap<Short>((TObjectShortMap<Short>) tObjectShortCustomHashMap0);
      tSynchronizedObjectShortMap1.valueCollection();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectShortCustomHashMap<String> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<String>((HashingStrategy<? super String>) identityHashingStrategy0);
      String string0 = "";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TObjectShortCustomHashMap<String> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<String>();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = locale0.getDisplayLanguage();
      TSynchronizedObjectShortMap<String> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<String>((TObjectShortMap<String>) tObjectShortCustomHashMap0, (Object) string0);
      short short0 = (short)3527;
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectShortCustomHashMap<Object> tObjectShortCustomHashMap1 = new TObjectShortCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0);
      String string1 = "{2mUldoV  *(";
      tSynchronizedObjectShortMap0.valueCollection();
      URI uRI0 = null;
      try {
        uRI0 = new URI(string1, string1, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: {2mUldoV  *(://{2mUldoV  *(%7B2mUldoV%20%20*(#%7B2mUldoV%20%20*(
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      short short0 = (short) (-1);
      TObjectShortHashMap<String> tObjectShortHashMap0 = new TObjectShortHashMap<String>(int0, (float) int0, short0);
      TObjectShortHashMap<Object> tObjectShortHashMap1 = null;
      try {
        tObjectShortHashMap1 = new TObjectShortHashMap<Object>((TObjectShortMap<?>) tObjectShortHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }
}
