/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TDecorators;
import gnu.trove.function.TShortFunction;
import gnu.trove.impl.hash.TObjectHash;
import gnu.trove.impl.sync.TSynchronizedLongSet;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortList;
import gnu.trove.list.TFloatList;
import gnu.trove.list.TShortList;
import gnu.trove.list.array.TShortArrayList;
import gnu.trove.map.TByteDoubleMap;
import gnu.trove.map.TByteIntMap;
import gnu.trove.map.TByteLongMap;
import gnu.trove.map.TByteObjectMap;
import gnu.trove.map.TCharByteMap;
import gnu.trove.map.TCharDoubleMap;
import gnu.trove.map.TCharFloatMap;
import gnu.trove.map.TDoubleIntMap;
import gnu.trove.map.TFloatFloatMap;
import gnu.trove.map.TFloatShortMap;
import gnu.trove.map.TIntByteMap;
import gnu.trove.map.TIntIntMap;
import gnu.trove.map.TLongCharMap;
import gnu.trove.map.TLongDoubleMap;
import gnu.trove.map.TLongLongMap;
import gnu.trove.map.TLongObjectMap;
import gnu.trove.map.TLongShortMap;
import gnu.trove.map.TObjectByteMap;
import gnu.trove.map.TShortCharMap;
import gnu.trove.map.TShortFloatMap;
import gnu.trove.map.hash.TByteDoubleHashMap;
import gnu.trove.map.hash.TByteIntHashMap;
import gnu.trove.map.hash.TByteLongHashMap;
import gnu.trove.map.hash.TByteObjectHashMap;
import gnu.trove.map.hash.TCharByteHashMap;
import gnu.trove.map.hash.TCharDoubleHashMap;
import gnu.trove.map.hash.TCharFloatHashMap;
import gnu.trove.map.hash.TCharIntHashMap;
import gnu.trove.map.hash.TDoubleIntHashMap;
import gnu.trove.map.hash.TFloatFloatHashMap;
import gnu.trove.map.hash.TFloatShortHashMap;
import gnu.trove.map.hash.TIntByteHashMap;
import gnu.trove.map.hash.TIntIntHashMap;
import gnu.trove.map.hash.TLongDoubleHashMap;
import gnu.trove.map.hash.TLongFloatHashMap;
import gnu.trove.map.hash.TLongIntHashMap;
import gnu.trove.map.hash.TLongLongHashMap;
import gnu.trove.map.hash.TLongObjectHashMap;
import gnu.trove.map.hash.TLongShortHashMap;
import gnu.trove.map.hash.TShortCharHashMap;
import gnu.trove.map.hash.TShortFloatHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.set.TCharSet;
import gnu.trove.set.TIntSet;
import gnu.trove.set.TLongSet;
import gnu.trove.set.hash.TLongHashSet;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDecoratorsEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap();
      TDoubleProcedure tDoubleProcedure0 = null;
      tDoubleIntHashMap0.forEach(tDoubleProcedure0);
      int[] intArray0 = new int[6];
      int int0 = 439;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = (-1);
      intArray0[2] = int2;
      int int3 = (-1);
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(intArray0, tDoubleIntHashMap0._states);
      TDecorators.wrap((TIntByteMap) tIntByteHashMap0);
      TDecorators.wrap((TDoubleIntMap) tDoubleIntHashMap0);
  }

  @Test
  public void test1()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = 1794L;
      longArray0[0] = long0;
      long long1 = 0L;
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      long long4 = (-346L);
      longArray0[4] = long4;
      long long5 = 0L;
      longArray0[5] = long5;
      long long6 = (-1131L);
      longArray0[6] = long6;
      long long7 = 2017L;
      longArray0[7] = long7;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) longArray0[2];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) long5;
      doubleArray0[3] = double0;
      doubleArray0[1] = (double) longArray0[1];
      doubleArray0[2] = (double) longArray0[4];
      doubleArray0[3] = (double) long1;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(longArray0, doubleArray0);
      TDecorators.wrap((TLongDoubleMap) tLongDoubleHashMap0);
  }

  @Test
  public void test2()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)37;
      shortArray0[0] = short1;
      shortArray0[1] = short0;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      shortArray0[1] = short1;
      short short4 = (short)383;
      shortArray0[2] = short4;
      short short5 = (short) (-20177);
      shortArray0[3] = short5;
      char[] charArray0 = new char[5];
      int int0 = (-1375);
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0, (float) shortArray0[2], (double) short0, (int) shortArray0[2]);
      TDecorators.wrap((TDoubleIntMap) tDoubleIntHashMap0);
      char char0 = 'h';
      charArray0[0] = char0;
      char char1 = 'k';
      charArray0[1] = char1;
      char char2 = '[';
      charArray0[2] = char2;
      char char3 = '+';
      charArray0[3] = char3;
      char char4 = 'v';
      charArray0[4] = char4;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      TDecorators.wrap((TShortCharMap) tShortCharHashMap0);
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap();
      TDecorators.wrap((TByteIntMap) tByteIntHashMap0);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 1326;
      TLongIntHashMap tLongIntHashMap0 = new TLongIntHashMap(int0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      tLongIntHashMap0.setAutoCompactionFactor((float) int0);
      float float0 = (-191.99818F);
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(int0, float0);
      tCharFloatHashMap0.getNoEntryKey();
      TDecorators.wrap((TCharFloatMap) tCharFloatHashMap0);
      long long0 = 1697L;
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[2] = (long) int0;
      tLongIntHashMap0.keys(longArray0);
      short short0 = (short)21189;
      char char0 = 'l';
      int int1 = 242;
      float float1 = 0.0F;
      TLongLongHashMap tLongLongHashMap0 = new TLongLongHashMap(int1, float1);
      TDecorators.wrap((TLongLongMap) tLongLongHashMap0);
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0, (float) longArray0[2], short0, char0);
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      TDecorators.wrap((TShortFloatMap) tShortFloatHashMap0);
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap((TShortCharMap) tShortCharHashMap0);
      TDecorators.wrap((TShortCharMap) tShortCharHashMap1);
      tLongIntHashMap0.keySet();
      TLongSet tLongSet0 = tLongIntHashMap0.keySet();
      TDecorators.wrap(tLongSet0);
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap();
      TCharSet tCharSet0 = tCharByteHashMap0.keySet();
      TDecorators.wrap(tCharSet0);
      TLongCharMap tLongCharMap0 = null;
      TByteObjectHashMap<Character> tByteObjectHashMap0 = new TByteObjectHashMap<Character>();
      TDecorators.wrap((TByteObjectMap<Character>) tByteObjectHashMap0);
      TDecorators.wrap(tLongCharMap0);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0);
      TLongSet tLongSet0 = tLongFloatHashMap0.keySet();
      Locale locale0 = Locale.CHINA;
      Locale locale1 = Locale.PRC;
      String string0 = locale0.getDisplayName(locale1);
      TSynchronizedLongSet tSynchronizedLongSet0 = new TSynchronizedLongSet(tLongSet0, (Object) string0);
      TDecorators.wrap((TLongSet) tSynchronizedLongSet0);
      TIntSet tIntSet0 = null;
      TDecorators.wrap(tIntSet0);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-250);
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, int0);
      TDecorators.wrap((TCharByteMap) tCharByteHashMap0);
      char[] charArray0 = new char[8];
      char char0 = '*';
      charArray0[0] = char0;
      char char1 = ']';
      charArray0[1] = char1;
      char char2 = 'k';
      charArray0[2] = char2;
      char char3 = '_';
      charArray0[3] = char3;
      char char4 = 'V';
      charArray0[4] = char4;
      char char5 = '\"';
      charArray0[5] = char5;
      char char6 = 'V';
      charArray0[6] = char6;
      char char7 = 'k';
      charArray0[7] = char7;
      tCharByteHashMap0.keys(charArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-900);
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int0);
      TDecorators.wrap((TFloatShortMap) tFloatShortHashMap0);
  }

  @Test
  public void test7()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortArrayList0);
      int int0 = 65;
      int int1 = (-1455);
      short short0 = (short)1194;
      // Undeclared exception!
      try {
        tShortArrayList0.fill(int0, int1, short0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(65) > toIndex(-1455)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-1602);
      TLongObjectHashMap<Long> tLongObjectHashMap0 = new TLongObjectHashMap<Long>(int0);
      TDecorators.wrap((TLongObjectMap<Long>) tLongObjectHashMap0);
  }

  @Test
  public void test9()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      TFloatList tFloatList0 = null;
      TDecorators.wrap(tFloatList0);
      int int0 = 1878;
      float float0 = 0.0F;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, float0);
      TIntIntHashMap tIntIntHashMap1 = null;
      try {
        tIntIntHashMap1 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-1866);
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int0);
      TObjectByteMap<Object> tObjectByteMap0 = null;
      int int1 = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      double double0 = (-1784.0352313832525);
      doubleArray0[5] = double0;
      tCharDoubleHashMap0.values(doubleArray0);
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int1);
      TDecorators.wrap((TFloatFloatMap) tFloatFloatHashMap0);
      TDecorators.wrap(tObjectByteMap0);
      TDecorators.wrap((TCharDoubleMap) tCharDoubleHashMap0);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int0, int0);
      TDecorators.wrap((TByteDoubleMap) tByteDoubleHashMap0);
  }

  @Test
  public void test12()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = (-16);
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream((OutputStream) byteArrayOutputStream0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      TShortFunction tShortFunction0 = null;
      tFloatShortHashMap0.transformValues(tShortFunction0);
      long[] longArray0 = new long[8];
      long long0 = (-198L);
      longArray0[0] = long0;
      long long1 = (-9223372036854775808L);
      longArray0[1] = long1;
      long long2 = (-9223372036854775808L);
      longArray0[2] = long2;
      long long3 = (-2016L);
      longArray0[3] = long3;
      long long4 = (-1579L);
      longArray0[4] = long4;
      long long5 = (-1994L);
      longArray0[5] = long5;
      long long6 = (-2043L);
      longArray0[6] = long6;
      long long7 = (-952L);
      longArray0[7] = long7;
      TLongHashSet tLongHashSet0 = new TLongHashSet(longArray0);
      Object object0 = TObjectHash.REMOVED;
      TSynchronizedLongSet tSynchronizedLongSet0 = new TSynchronizedLongSet((TLongSet) tLongHashSet0, object0);
      TDecorators.wrap((TLongSet) tSynchronizedLongSet0);
      TDecorators.wrap((TFloatShortMap) tFloatShortHashMap0);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1754;
      float float0 = 1533.0072F;
      short short0 = (short)0;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)68;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-13);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-59);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) byteArray0[4];
      longArray0[1] = (long) byte2;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(byteArray0, longArray0);
      TDecorators.wrap((TByteLongMap) tByteLongHashMap0);
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(int0, float0, (long) int0, short0);
      TDecorators.wrap((TLongShortMap) tLongShortHashMap0);
  }
}
