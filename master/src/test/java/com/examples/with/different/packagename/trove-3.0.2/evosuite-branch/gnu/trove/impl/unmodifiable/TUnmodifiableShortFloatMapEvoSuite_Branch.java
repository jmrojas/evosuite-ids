/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TFloatFunction;
import gnu.trove.impl.unmodifiable.TUnmodifiableFloatCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortSet;
import gnu.trove.map.TShortFloatMap;
import gnu.trove.map.hash.TShortFloatHashMap;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.procedure.TShortFloatProcedure;
import gnu.trove.procedure.TShortProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableShortFloatMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap$1.value()F: root-Branch
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap$1.advance()V: root-Branch
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap$1.key()S: root-Branch
   * 4 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap$1.hasNext()Z: root-Branch
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap$1.<init>(Lgnu/trove/impl/unmodifiable/TUnmodifiableShortFloatMap;)V: root-Branch
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.size()I: root-Branch
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.iterator()Lgnu/trove/iterator/TShortFloatIterator;: root-Branch
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.<init>(Lgnu/trove/map/TShortFloatMap;)V: I17 Branch 1 IFNONNULL L58 - true
   */

  @Test
  public void test0()  throws Throwable  {
      short[] shortArray0 = new short[2];
      float[] floatArray0 = new float[3];
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap((TShortFloatMap) tUnmodifiableShortFloatMap0);
      assertEquals(1, tUnmodifiableShortFloatMap0.size());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.putIfAbsent(SF)F: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortFloatMap0.putIfAbsent((short)10, (short)10);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.values()[F: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      float[] floatArray0 = tUnmodifiableShortFloatMap0.values();
      assertNotNull(floatArray0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.adjustOrPutValue(SFF)F: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      short[] shortArray0 = new short[2];
      float[] floatArray0 = new float[3];
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortFloatMap0.adjustOrPutValue((short) (-1848), (float) (short)0, 0.0F);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.get(S)F: root-Branch
   */

//   @Test
//   public void test4()  throws Throwable  {
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
//       TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
//       float float0 = tUnmodifiableShortFloatMap0.get((short) (-9));
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.keys([S)[S: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(2);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      short[] shortArray0 = tUnmodifiableShortFloatMap0.keys(tShortFloatHashMap0._set);
      assertNotNull(shortArray0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(0, (float) 0, (short) (-1510), (float) 0);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      // Undeclared exception!
      try {
        tUnmodifiableShortFloatMap0.putAll((Map<? extends Short, ? extends Float>) hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.put(SF)F: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((-557), (float) (-557), (short) (-1642), (float) (short) (-1642));
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortFloatMap0.put((short) (-1642), (short) (-1642));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.adjustValue(SF)Z: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      short[] shortArray0 = new short[6];
      float[] floatArray0 = new float[4];
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortFloatMap0.adjustValue((short)191, (float) 1171);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.putAll(Lgnu/trove/map/TShortFloatMap;)V: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((-19));
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortFloatMap0.putAll((TShortFloatMap) tShortFloatHashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((int) (short) (-1854), (float) (short) (-1854));
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortFloatMap0.transformValues((TFloatFunction) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      boolean boolean0 = tUnmodifiableShortFloatMap0.forEachValue((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.forEachEntry(Lgnu/trove/procedure/TShortFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((-1226));
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      boolean boolean0 = tUnmodifiableShortFloatMap0.forEachEntry((TShortFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(2);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      boolean boolean0 = tUnmodifiableShortFloatMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.retainEntries(Lgnu/trove/procedure/TShortFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(267732, 267732);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortFloatMap0.retainEntries((TShortFloatProcedure) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.remove(S)F: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((-1226));
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortFloatMap0.remove((short)0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.values([F)[F: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((-482), (float) (-482), (short)0, (float) (-482));
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      float[] floatArray0 = new float[10];
      float[] floatArray1 = tUnmodifiableShortFloatMap0.values(floatArray0);
      assertSame(floatArray0, floatArray1);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.hashCode()I: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((-482), (float) (-482), (short)0, (float) (-482));
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      int int0 = tUnmodifiableShortFloatMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.containsValue(F)Z: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(2);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      boolean boolean0 = tUnmodifiableShortFloatMap0.containsValue((float) 2);
      assertEquals(false, boolean0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.keys()[S: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      short[] shortArray0 = new short[6];
      float[] floatArray0 = new float[4];
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      short[] shortArray1 = tUnmodifiableShortFloatMap0.keys();
      assertNotSame(shortArray0, shortArray1);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.forEachKey(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      short[] shortArray0 = new short[6];
      float[] floatArray0 = new float[4];
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortFloatMap0.forEachKey((TShortProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.getNoEntryKey()S: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      short[] shortArray0 = new short[6];
      float[] floatArray0 = new float[4];
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      short short0 = tUnmodifiableShortFloatMap0.getNoEntryKey();
      assertEquals((short)0, short0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.increment(S)Z: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((-482), (float) (-482), (short)0, (float) (-482));
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortFloatMap0.increment((short)0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.containsKey(S)Z: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((-482), (float) (-482), (short)0, (float) (-482));
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      boolean boolean0 = tUnmodifiableShortFloatMap0.containsKey((short)0);
      assertEquals(false, boolean0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.clear()V: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortFloatMap0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      String string0 = tUnmodifiableShortFloatMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.getNoEntryValue()F: root-Branch
   */

//   @Test
//   public void test26()  throws Throwable  {
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((-482), (float) (-482), (short)0, (float) (-482));
//       TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
//       float float0 = tUnmodifiableShortFloatMap0.getNoEntryValue();
//       assertEquals((-482.0F), float0, 0.01F);
//   }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.<init>(Lgnu/trove/map/TShortFloatMap;)V: I17 Branch 1 IFNONNULL L58 - false
   */

  @Test
  public void test27()  throws Throwable  {
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = null;
      try {
        tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.keySet()Lgnu/trove/set/TShortSet;: I4 Branch 2 IFNONNULL L79 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.keySet()Lgnu/trove/set/TShortSet;: I4 Branch 2 IFNONNULL L79 - false
   */

  @Test
  public void test28()  throws Throwable  {
      short[] shortArray0 = new short[6];
      float[] floatArray0 = new float[4];
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = (TUnmodifiableShortSet)tUnmodifiableShortFloatMap0.keySet();
      assertNotNull(tUnmodifiableShortSet0);
      
      TUnmodifiableShortSet tUnmodifiableShortSet1 = (TUnmodifiableShortSet)tUnmodifiableShortFloatMap0.keySet();
      assertSame(tUnmodifiableShortSet1, tUnmodifiableShortSet0);
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.valueCollection()Lgnu/trove/TFloatCollection;: I4 Branch 3 IFNONNULL L87 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.valueCollection()Lgnu/trove/TFloatCollection;: I4 Branch 3 IFNONNULL L87 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((-19));
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      TUnmodifiableFloatCollection tUnmodifiableFloatCollection0 = (TUnmodifiableFloatCollection)tUnmodifiableShortFloatMap0.valueCollection();
      assertNotNull(tUnmodifiableFloatCollection0);
      
      TUnmodifiableFloatCollection tUnmodifiableFloatCollection1 = (TUnmodifiableFloatCollection)tUnmodifiableShortFloatMap0.valueCollection();
      assertSame(tUnmodifiableFloatCollection1, tUnmodifiableFloatCollection0);
  }

  //Test case number: 30
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L94 - false
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L94 - true
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap.<init>(Lgnu/trove/map/TShortFloatMap;)V: I17 Branch 1 IFNONNULL L58 - true
   */

  @Test
  public void test30()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      TUnmodifiableShortFloatMap tUnmodifiableShortFloatMap0 = new TUnmodifiableShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      boolean boolean0 = tUnmodifiableShortFloatMap0.equals((Object) "{}");
      assertEquals(false, boolean0);
  }
}
