/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TCharCollection;
import gnu.trove.function.TCharFunction;
import gnu.trove.map.TFloatCharMap;
import gnu.trove.map.hash.TFloatCharHashMap;
import gnu.trove.procedure.TCharProcedure;
import gnu.trove.procedure.TFloatCharProcedure;
import gnu.trove.procedure.TFloatProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatCharHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.valueCollection()Lgnu/trove/TCharCollection;: root-Branch
   * 2 gnu.trove.map.hash.TFloatCharHashMap$TValueView.<init>(Lgnu/trove/map/hash/TFloatCharHashMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TFloatCharHashMap.put(FC)C: root-Branch
   * 4 gnu.trove.map.hash.TFloatCharHashMap.setUp(I)I: root-Branch
   * 5 gnu.trove.map.hash.TFloatCharHashMap.doPut(FCI)C: I12 Branch 40 IFGE L214 - true
   * 6 gnu.trove.map.hash.TFloatCharHashMap.doPut(FCI)C: I12 Branch 40 IFGE L214 - false
   * 7 gnu.trove.map.hash.TFloatCharHashMap.doPut(FCI)C: I41 Branch 41 IFEQ L221 - true
   * 8 gnu.trove.map.hash.TFloatCharHashMap.doPut(FCI)C: I41 Branch 41 IFEQ L221 - false
   * 9 gnu.trove.map.hash.TFloatCharHashMap.<init>([F[C)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 10 gnu.trove.map.hash.TFloatCharHashMap.<init>([F[C)V: I24 Branch 33 IF_ICMPGE L119 - false
   */

  @Test
  public void test0()  throws Throwable  {
      char[] charArray0 = new char[7];
      float[] floatArray0 = new float[2];
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(floatArray0, charArray0);
      TCharCollection tCharCollection0 = tFloatCharHashMap0.valueCollection();
      assertEquals("{0.0=\u0000}", tFloatCharHashMap0.toString());
      assertEquals(17, tFloatCharHashMap0.capacity());
      assertEquals(1, tCharCollection0.size());
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.increment(F)Z: root-Branch
   * 2 gnu.trove.map.hash.TFloatCharHashMap.adjustValue(FC)Z: I9 Branch 71 IFGE L477 - false
   * 3 gnu.trove.map.hash.TFloatCharHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(1214, 1.0F);
      boolean boolean0 = tFloatCharHashMap0.increment(0.0F);
      assertEquals(1277, tFloatCharHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      float[] floatArray0 = new float[10];
      char[] charArray0 = new char[5];
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(floatArray0, charArray0);
      // Undeclared exception!
      try {
        tFloatCharHashMap0.forEachKey((TFloatProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.clear()V: root-Branch
   * 2 gnu.trove.map.hash.TFloatCharHashMap.<init>()V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      tFloatCharHashMap0.clear();
      assertEquals("{}", tFloatCharHashMap0.toString());
      assertEquals(23, tFloatCharHashMap0.capacity());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.keySet()Lgnu/trove/set/TFloatSet;: root-Branch
   * 2 gnu.trove.map.hash.TFloatCharHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TFloatCharHashMap;)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(100, 1.0F);
      tFloatCharHashMap0.keySet();
      assertEquals(137, tFloatCharHashMap0.capacity());
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.containsKey(F)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      float[] floatArray0 = new float[5];
      char[] charArray0 = new char[4];
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(floatArray0, charArray0);
      boolean boolean0 = tFloatCharHashMap0.containsKey(0.0F);
      assertEquals(true, boolean0);
      assertEquals("{0.0=\u0000}", tFloatCharHashMap0.toString());
      assertEquals(1, tFloatCharHashMap0.size());
      assertEquals(11, tFloatCharHashMap0.capacity());
  }

  //Test case number: 6
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.<init>(Lgnu/trove/map/TFloatCharMap;)V: I10 Branch 34 IFEQ L133 - false
   * 2 gnu.trove.map.hash.TFloatCharHashMap.<init>(Lgnu/trove/map/TFloatCharMap;)V: I40 Branch 35 IFEQ L139 - true
   * 3 gnu.trove.map.hash.TFloatCharHashMap.<init>(Lgnu/trove/map/TFloatCharMap;)V: I52 Branch 36 IFEQ L143 - true
   * 4 gnu.trove.map.hash.TFloatCharHashMap$TFloatCharHashIterator.<init>(Lgnu/trove/map/hash/TFloatCharHashMap;Lgnu/trove/map/hash/TFloatCharHashMap;)V: root-Branch
   * 5 gnu.trove.map.hash.TFloatCharHashMap.iterator()Lgnu/trove/iterator/TFloatCharIterator;: root-Branch
   * 6 gnu.trove.map.hash.TFloatCharHashMap.putAll(Lgnu/trove/map/TFloatCharMap;)V: I15 Branch 43 IFEQ L243 - true
   */

//   @Test
//   public void test6()  throws Throwable  {
//       TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(100, 1.0F);
//       TFloatCharHashMap tFloatCharHashMap1 = new TFloatCharHashMap((TFloatCharMap) tFloatCharHashMap0);
//       assertEquals(11, tFloatCharHashMap1.capacity());
//       assertEquals(0.0F, tFloatCharHashMap1.getNoEntryKey(), 0.01F);
//   }

  //Test case number: 7
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.<init>(Lgnu/trove/map/TFloatCharMap;)V: I40 Branch 35 IFEQ L139 - false
   * 2 gnu.trove.map.hash.TFloatCharHashMap.<init>(Lgnu/trove/map/TFloatCharMap;)V: I52 Branch 36 IFEQ L143 - false
   * 3 gnu.trove.map.hash.TFloatCharHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 4 gnu.trove.map.hash.TFloatCharHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 5 gnu.trove.map.hash.TFloatCharHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 6 gnu.trove.map.hash.TFloatCharHashMap.<init>(Lgnu/trove/map/TFloatCharMap;)V: I10 Branch 34 IFEQ L133 - false
   * 7 gnu.trove.map.hash.TFloatCharHashMap.<init>(IFFC)V: root-Branch
   */

//   @Test
//   public void test7()  throws Throwable  {
//       TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(1113, (-331.23874F), (float) 1113, 'Q');
//       TFloatCharHashMap tFloatCharHashMap1 = new TFloatCharHashMap((TFloatCharMap) tFloatCharHashMap0);
//       assertEquals(3, tFloatCharHashMap1.capacity());
//       assertEquals('Q', tFloatCharHashMap1.getNoEntryValue());
//       assertEquals(1113.0F, tFloatCharHashMap1.getNoEntryKey(), 0.01F);
//   }

  //Test case number: 8
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 2 gnu.trove.map.hash.TFloatCharHashMap.adjustOrPutValue(FCC)C: I9 Branch 72 IFGE L491 - true
   * 3 gnu.trove.map.hash.TFloatCharHashMap.adjustOrPutValue(FCC)C: I59 Branch 73 IFEQ L502 - false
   * 4 gnu.trove.map.hash.TFloatCharHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 5 gnu.trove.map.hash.TFloatCharHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 6 gnu.trove.map.hash.TFloatCharHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   */

  @Test
  public void test8()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(0, 0);
      char char0 = tFloatCharHashMap0.adjustOrPutValue((-232.35161F), 'e', 'e');
      assertEquals(false, tFloatCharHashMap0.isEmpty());
      assertEquals('e', char0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.putIfAbsent(FC)C: I9 Branch 39 IFGE L205 - false
   */

  @Test
  public void test9()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-66.14011F);
      char[] charArray0 = new char[6];
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(floatArray0, charArray0);
      char char0 = tFloatCharHashMap0.putIfAbsent((-66.14011F), 'S');
      assertEquals(17, tFloatCharHashMap0.capacity());
      assertEquals("{-66.14011=\u0000, 0.0=\u0000}", tFloatCharHashMap0.toString());
      assertEquals(2, tFloatCharHashMap0.size());
      assertEquals('\u0000', char0);
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   * 2 gnu.trove.map.hash.TFloatCharHashMap.<init>(IFFC)V: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap((int) 'C', 0.0F, (float) 'C', '1');
      HashMap<Float, Character> hashMap0 = new HashMap<Float, Character>();
      tFloatCharHashMap0.putAll((Map<? extends Float, ? extends Character>) hashMap0);
      assertEquals("{}", hashMap0.toString());
  }

  //Test case number: 11
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.get(F)C: I9 Branch 44 IFGE L253 - true
   * 2 gnu.trove.map.hash.TFloatCharHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 3 gnu.trove.map.hash.TFloatCharHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 4 gnu.trove.map.hash.TFloatCharHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 5 gnu.trove.map.hash.TFloatCharHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 6 gnu.trove.map.hash.TFloatCharHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 7 gnu.trove.map.hash.TFloatCharHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 8 gnu.trove.map.hash.TFloatCharHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - true
   */

  @Test
  public void test11()  throws Throwable  {
      float[] floatArray0 = new float[1];
      char[] charArray0 = new char[4];
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(floatArray0, charArray0);
      boolean boolean0 = tFloatCharHashMap0.equals((Object) tFloatCharHashMap0);
      assertEquals(11, tFloatCharHashMap0.capacity());
      assertEquals(true, boolean0);
      assertEquals(1, tFloatCharHashMap0.size());
      assertEquals("{0.0=\u0000}", tFloatCharHashMap0.toString());
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.get(F)C: I9 Branch 44 IFGE L253 - false
   */

  @Test
  public void test12()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(100, 1.0F);
      tFloatCharHashMap0.get((-1579.1592F));
      assertEquals(137, tFloatCharHashMap0.capacity());
  }

  //Test case number: 13
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   * 2 gnu.trove.map.hash.TFloatCharHashMap$TFloatCharHashIterator.key()F: root-Branch
   * 3 gnu.trove.map.hash.TFloatCharHashMap$TFloatCharHashIterator.advance()V: root-Branch
   * 4 gnu.trove.map.hash.TFloatCharHashMap$TFloatCharHashIterator.value()C: root-Branch
   * 5 gnu.trove.map.hash.TFloatCharHashMap.putAll(Lgnu/trove/map/TFloatCharMap;)V: I15 Branch 43 IFEQ L243 - false
   */

  @Test
  public void test13()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(100, 1.0F);
      char[] charArray0 = new char[3];
      TFloatCharHashMap tFloatCharHashMap1 = new TFloatCharHashMap(tFloatCharHashMap0._set, charArray0);
      tFloatCharHashMap0.putAll((TFloatCharMap) tFloatCharHashMap1);
      boolean boolean0 = tFloatCharHashMap0.isEmpty();
      assertEquals(1, tFloatCharHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test14()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap((int) '\u0000', (float) '\u0000');
      boolean boolean0 = tFloatCharHashMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 15
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.remove(F)C: I14 Branch 46 IFLT L276 - true
   * 2 gnu.trove.map.hash.TFloatCharHashMap.removeAt(I)V: root-Branch
   * 3 gnu.trove.map.hash.TFloatCharHashMap.remove(F)C: I14 Branch 46 IFLT L276 - false
   */

  @Test
  public void test15()  throws Throwable  {
      float[] floatArray0 = new float[4];
      char[] charArray0 = new char[4];
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(floatArray0, charArray0);
      assertEquals(false, tFloatCharHashMap0.isEmpty());
      
      tFloatCharHashMap0.remove(0.0F);
      char char0 = tFloatCharHashMap0.remove(0.0F);
      assertEquals(true, tFloatCharHashMap0.isEmpty());
      assertEquals('\u0000', char0);
  }

  //Test case number: 16
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.keys()[F: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TFloatCharHashMap.keys()[F: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TFloatCharHashMap.keys()[F: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TFloatCharHashMap.keys()[F: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(100, 1.0F);
      char[] charArray0 = new char[3];
      TFloatCharHashMap tFloatCharHashMap1 = new TFloatCharHashMap(tFloatCharHashMap0._set, charArray0);
      tFloatCharHashMap0.putAll((TFloatCharMap) tFloatCharHashMap1);
      tFloatCharHashMap0.keys();
      assertEquals("{0.0=\u0000}", tFloatCharHashMap0.toString());
      assertEquals(false, tFloatCharHashMap0.isEmpty());
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.keys([F)[F: I10 Branch 49 IF_ICMPGE L315 - true
   * 2 gnu.trove.map.hash.TFloatCharHashMap.keys([F)[F: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TFloatCharHashMap.keys([F)[F: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TFloatCharHashMap.keys([F)[F: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(1214, 1.0F);
      float[] floatArray0 = tFloatCharHashMap0.keys(tFloatCharHashMap0._set);
      assertNotNull(floatArray0);
      assertEquals(1277, tFloatCharHashMap0.capacity());
  }

  //Test case number: 18
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.keys([F)[F: I10 Branch 49 IF_ICMPGE L315 - false
   * 2 gnu.trove.map.hash.TFloatCharHashMap.keys([F)[F: I44 Branch 51 IF_ICMPNE L323 - false
   * 3 gnu.trove.map.hash.TFloatCharHashMap.keys([F)[F: I37 Branch 50 IFLE L322 - true
   * 4 gnu.trove.map.hash.TFloatCharHashMap.keys([F)[F: I37 Branch 50 IFLE L322 - false
   * 5 gnu.trove.map.hash.TFloatCharHashMap.keys([F)[F: I44 Branch 51 IF_ICMPNE L323 - true
   * 6 gnu.trove.map.hash.TFloatCharHashMap.putIfAbsent(FC)C: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(100, 1.0F);
      char[] charArray0 = new char[3];
      TFloatCharHashMap tFloatCharHashMap1 = new TFloatCharHashMap(tFloatCharHashMap0._set, charArray0);
      tFloatCharHashMap0.putAll((TFloatCharMap) tFloatCharHashMap1);
      tFloatCharHashMap0.putIfAbsent((float) 100, '1');
      tFloatCharHashMap0.adjustOrPutValue(1.0F, '\u0000', '|');
      tFloatCharHashMap0.put((float) '|', '|');
      TFloatCharHashMap tFloatCharHashMap2 = new TFloatCharHashMap(100, 100);
      tFloatCharHashMap0.keys(tFloatCharHashMap2._set);
      assertEquals("{100.0=1, 1.0=|, 124.0=|, 0.0=\u0000}", tFloatCharHashMap0.toString());
      assertFalse(tFloatCharHashMap2.equals(tFloatCharHashMap1));
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.values()[C: I34 Branch 53 IF_ICMPNE L344 - false
   * 2 gnu.trove.map.hash.TFloatCharHashMap.values()[C: I27 Branch 52 IFLE L343 - true
   * 3 gnu.trove.map.hash.TFloatCharHashMap.values()[C: I27 Branch 52 IFLE L343 - false
   * 4 gnu.trove.map.hash.TFloatCharHashMap.values()[C: I34 Branch 53 IF_ICMPNE L344 - true
   */

  @Test
  public void test19()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(1234, 1.0F);
      tFloatCharHashMap0.putIfAbsent(0.0F, 'r');
      tFloatCharHashMap0.values();
      assertEquals("{0.0=r}", tFloatCharHashMap0.toString());
      assertEquals(false, tFloatCharHashMap0.isEmpty());
  }

  //Test case number: 20
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.values([C)[C: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TFloatCharHashMap.values([C)[C: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TFloatCharHashMap.values([C)[C: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TFloatCharHashMap.values([C)[C: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      char[] charArray0 = new char[1];
      char[] charArray1 = tFloatCharHashMap0.values(charArray0);
      assertEquals(23, tFloatCharHashMap0.capacity());
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
  }

  //Test case number: 21
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.values([C)[C: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TFloatCharHashMap.values([C)[C: I44 Branch 56 IF_ICMPNE L363 - false
   * 3 gnu.trove.map.hash.TFloatCharHashMap.values([C)[C: I37 Branch 55 IFLE L362 - true
   * 4 gnu.trove.map.hash.TFloatCharHashMap.values([C)[C: I37 Branch 55 IFLE L362 - false
   * 5 gnu.trove.map.hash.TFloatCharHashMap.values([C)[C: I44 Branch 56 IF_ICMPNE L363 - true
   * 6 gnu.trove.map.hash.TFloatCharHashMap.adjustOrPutValue(FCC)C: I9 Branch 72 IFGE L491 - true
   * 7 gnu.trove.map.hash.TFloatCharHashMap.adjustOrPutValue(FCC)C: I59 Branch 73 IFEQ L502 - false
   */

  @Test
  public void test21()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      tFloatCharHashMap0.adjustOrPutValue((-1.0F), 'g', '2');
      tFloatCharHashMap0.putIfAbsent((float) 1333, 'e');
      char[] charArray0 = new char[1];
      tFloatCharHashMap0.values(charArray0);
      assertEquals(2, tFloatCharHashMap0.size());
      assertEquals("{-1.0=2, 1333.0=e}", tFloatCharHashMap0.toString());
  }

  //Test case number: 22
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.containsValue(C)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TFloatCharHashMap.containsValue(C)Z: I30 Branch 59 IF_ICMPNE L377 - false
   * 3 gnu.trove.map.hash.TFloatCharHashMap.containsValue(C)Z: I18 Branch 57 IFLE L376 - false
   * 4 gnu.trove.map.hash.TFloatCharHashMap.containsValue(C)Z: I25 Branch 58 IF_ICMPNE L377 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(100, 1.0F);
      char[] charArray0 = new char[3];
      TFloatCharHashMap tFloatCharHashMap1 = new TFloatCharHashMap(tFloatCharHashMap0._set, charArray0);
      tFloatCharHashMap0.putAll((TFloatCharMap) tFloatCharHashMap1);
      boolean boolean0 = tFloatCharHashMap0.containsValue('\u0000');
      assertEquals(false, tFloatCharHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 23
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.containsValue(C)Z: I30 Branch 59 IF_ICMPNE L377 - true
   * 2 gnu.trove.map.hash.TFloatCharHashMap.containsValue(C)Z: I18 Branch 57 IFLE L376 - true
   * 3 gnu.trove.map.hash.TFloatCharHashMap.containsValue(C)Z: I18 Branch 57 IFLE L376 - false
   * 4 gnu.trove.map.hash.TFloatCharHashMap.containsValue(C)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 5 gnu.trove.map.hash.TFloatCharHashMap.containsValue(C)Z: I25 Branch 58 IF_ICMPNE L377 - false
   */

  @Test
  public void test23()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(100, 1.0F);
      char[] charArray0 = new char[3];
      charArray0[2] = '1';
      TFloatCharHashMap tFloatCharHashMap1 = new TFloatCharHashMap(tFloatCharHashMap0._set, charArray0);
      tFloatCharHashMap0.putAll((TFloatCharMap) tFloatCharHashMap1);
      boolean boolean0 = tFloatCharHashMap0.containsValue('\u0000');
      assertEquals(1, tFloatCharHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 24
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TFloatCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TFloatCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   * 4 gnu.trove.map.hash.TFloatCharHashMap.<init>()V: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      boolean boolean0 = tFloatCharHashMap0.forEachValue((TCharProcedure) null);
      assertEquals(23, tFloatCharHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 25
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TFloatCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TFloatCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   * 4 gnu.trove.map.hash.TFloatCharHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(0);
      tFloatCharHashMap0.put((float) 0, '\u0000');
      // Undeclared exception!
      try {
        tFloatCharHashMap0.forEachValue((TCharProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TFloatCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TFloatCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(100, 1.0F);
      tFloatCharHashMap0.transformValues((TCharFunction) null);
      assertEquals(137, tFloatCharHashMap0.capacity());
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TFloatCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TFloatCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test27()  throws Throwable  {
      float[] floatArray0 = new float[3];
      char[] charArray0 = new char[6];
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(floatArray0, charArray0);
      // Undeclared exception!
      try {
        tFloatCharHashMap0.transformValues((TCharFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.retainEntries(Lgnu/trove/procedure/TFloatCharProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TFloatCharHashMap.retainEntries(Lgnu/trove/procedure/TFloatCharProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TFloatCharHashMap.retainEntries(Lgnu/trove/procedure/TFloatCharProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(1214, 1.0F);
      boolean boolean0 = tFloatCharHashMap0.retainEntries((TFloatCharProcedure) null);
      assertEquals(1277, tFloatCharHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 29
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.retainEntries(Lgnu/trove/procedure/TFloatCharProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TFloatCharHashMap.retainEntries(Lgnu/trove/procedure/TFloatCharProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TFloatCharHashMap.retainEntries(Lgnu/trove/procedure/TFloatCharProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test29()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(1234, 1.0F);
      tFloatCharHashMap0.putIfAbsent(0.0F, 'r');
      // Undeclared exception!
      try {
        tFloatCharHashMap0.retainEntries((TFloatCharProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.adjustValue(FC)Z: I9 Branch 71 IFGE L477 - true
   * 2 gnu.trove.map.hash.TFloatCharHashMap.increment(F)Z: root-Branch
   */

  @Test
  public void test30()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(1234, 1.0F);
      tFloatCharHashMap0.putIfAbsent(0.0F, 'r');
      boolean boolean0 = tFloatCharHashMap0.increment(0.0F);
      assertEquals(false, tFloatCharHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 31
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.adjustOrPutValue(FCC)C: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TFloatCharHashMap.adjustOrPutValue(FCC)C: I59 Branch 73 IFEQ L502 - true
   */

  @Test
  public void test31()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(0);
      tFloatCharHashMap0.put((float) 56591, 'O');
      char char0 = tFloatCharHashMap0.adjustOrPutValue((float) 56591, '\u0000', '\u0000');
      assertEquals("{56591.0=O}", tFloatCharHashMap0.toString());
      assertEquals('O', char0);
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   */

  @Test
  public void test32()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(100, 1.0F);
      boolean boolean0 = tFloatCharHashMap0.equals((Object) "{100.0=1, 1.0=|, 124.0=|, 0.0=1}");
      assertEquals(false, boolean0);
      assertEquals(137, tFloatCharHashMap0.capacity());
  }

  //Test case number: 33
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   * 2 gnu.trove.map.hash.TFloatCharHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   */

  @Test
  public void test33()  throws Throwable  {
      float[] floatArray0 = new float[1];
      char[] charArray0 = new char[4];
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(floatArray0, charArray0);
      TFloatCharHashMap tFloatCharHashMap1 = new TFloatCharHashMap(0, 0.0F);
      boolean boolean0 = tFloatCharHashMap0.equals((Object) tFloatCharHashMap1);
      assertEquals("{0.0=\u0000}", tFloatCharHashMap0.toString());
      assertFalse(tFloatCharHashMap1.equals(tFloatCharHashMap0));
      assertEquals(11, tFloatCharHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 34
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 2 gnu.trove.map.hash.TFloatCharHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 3 gnu.trove.map.hash.TFloatCharHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   * 4 gnu.trove.map.hash.TFloatCharHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   */

  @Test
  public void test34()  throws Throwable  {
      float[] floatArray0 = new float[10];
      char[] charArray0 = new char[5];
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(floatArray0, charArray0);
      int int0 = tFloatCharHashMap0.hashCode();
      assertEquals(1, tFloatCharHashMap0.size());
      assertEquals(0, int0);
      assertEquals(23, tFloatCharHashMap0.capacity());
  }

  //Test case number: 35
  /*
   * 18 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap$1.execute(FC)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TFloatCharHashMap$TFloatCharHashIterator.<init>(Lgnu/trove/map/hash/TFloatCharHashMap;Lgnu/trove/map/hash/TFloatCharHashMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TFloatCharHashMap$TFloatCharHashIterator.key()F: root-Branch
   * 4 gnu.trove.map.hash.TFloatCharHashMap$TFloatCharHashIterator.advance()V: root-Branch
   * 5 gnu.trove.map.hash.TFloatCharHashMap$TFloatCharHashIterator.value()C: root-Branch
   * 6 gnu.trove.map.hash.TFloatCharHashMap$1.<init>(Lgnu/trove/map/hash/TFloatCharHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 7 gnu.trove.map.hash.TFloatCharHashMap$1.execute(FC)Z: I4 Branch 115 IFEQ L1233 - false
   * 8 gnu.trove.map.hash.TFloatCharHashMap.toString()Ljava/lang/String;: root-Branch
   * 9 gnu.trove.map.hash.TFloatCharHashMap.<init>(IF)V: root-Branch
   * 10 gnu.trove.map.hash.TFloatCharHashMap.iterator()Lgnu/trove/iterator/TFloatCharIterator;: root-Branch
   * 11 gnu.trove.map.hash.TFloatCharHashMap.putAll(Lgnu/trove/map/TFloatCharMap;)V: I15 Branch 43 IFEQ L243 - true
   * 12 gnu.trove.map.hash.TFloatCharHashMap.putAll(Lgnu/trove/map/TFloatCharMap;)V: I15 Branch 43 IFEQ L243 - false
   * 13 gnu.trove.map.hash.TFloatCharHashMap.putIfAbsent(FC)C: I9 Branch 39 IFGE L205 - true
   * 14 gnu.trove.map.hash.TFloatCharHashMap.forEachEntry(Lgnu/trove/procedure/TFloatCharProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 15 gnu.trove.map.hash.TFloatCharHashMap.forEachEntry(Lgnu/trove/procedure/TFloatCharProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 16 gnu.trove.map.hash.TFloatCharHashMap.forEachEntry(Lgnu/trove/procedure/TFloatCharProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 17 gnu.trove.map.hash.TFloatCharHashMap.forEachEntry(Lgnu/trove/procedure/TFloatCharProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 18 gnu.trove.map.hash.TFloatCharHashMap.forEachEntry(Lgnu/trove/procedure/TFloatCharProcedure;)Z: I39 Branch 65 IFNE L422 - true
   */

  @Test
  public void test35()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(100, 1.0F);
      char[] charArray0 = new char[3];
      TFloatCharHashMap tFloatCharHashMap1 = new TFloatCharHashMap(tFloatCharHashMap0._set, charArray0);
      tFloatCharHashMap0.putAll((TFloatCharMap) tFloatCharHashMap1);
      tFloatCharHashMap0.putIfAbsent((float) 100, '1');
      String string0 = tFloatCharHashMap0.toString();
      assertEquals(false, tFloatCharHashMap0.isEmpty());
      assertEquals("{100.0=1, 0.0=\u0000}", string0);
  }

  //Test case number: 36
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 2 gnu.trove.map.hash.TFloatCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 3 gnu.trove.map.hash.TFloatCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 4 gnu.trove.map.hash.TFloatCharHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test36()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(1513);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((int) 'U');
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tFloatCharHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(3049, tFloatCharHashMap0.capacity());
  }

  //Test case number: 37
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TFloatCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 2 gnu.trove.map.hash.TFloatCharHashMap.put(FC)C: root-Branch
   * 3 gnu.trove.map.hash.TFloatCharHashMap.setUp(I)I: root-Branch
   * 4 gnu.trove.map.hash.TFloatCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 5 gnu.trove.map.hash.TFloatCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 6 gnu.trove.map.hash.TFloatCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 7 gnu.trove.map.hash.TFloatCharHashMap.doPut(FCI)C: I12 Branch 40 IFGE L214 - true
   * 8 gnu.trove.map.hash.TFloatCharHashMap.doPut(FCI)C: I12 Branch 40 IFGE L214 - false
   * 9 gnu.trove.map.hash.TFloatCharHashMap.doPut(FCI)C: I41 Branch 41 IFEQ L221 - true
   * 10 gnu.trove.map.hash.TFloatCharHashMap.doPut(FCI)C: I41 Branch 41 IFEQ L221 - false
   * 11 gnu.trove.map.hash.TFloatCharHashMap.<init>([F[C)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 12 gnu.trove.map.hash.TFloatCharHashMap.<init>([F[C)V: I24 Branch 33 IF_ICMPGE L119 - false
   */

  @Test
  public void test37()  throws Throwable  {
      float[] floatArray0 = new float[10];
      char[] charArray0 = new char[7];
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(floatArray0, charArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((int) 'U');
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tFloatCharHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals("{0.0=\u0000}", tFloatCharHashMap0.toString());
      assertEquals(1, tFloatCharHashMap0.size());
      assertEquals(23, tFloatCharHashMap0.capacity());
  }
}
