/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.hash.TObjectHash;
import gnu.trove.iterator.hash.TObjectHashIterator;
import gnu.trove.map.custom_hash.TObjectFloatCustomHashMap;
import gnu.trove.map.hash.TCustomHashMap;
import gnu.trove.set.hash.TCustomHashSet;
import gnu.trove.set.hash.TLinkedHashSet;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class THashIteratorEvoSuite_StrongMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 31 covered goals:
   * 1 Strong Mutation 22: gnu.trove.impl.hash.THashIterator.remove()V:114 - ReplaceComparisonOperator == -> >=
   * 2 gnu.trove.impl.hash.THashIterator.remove()V: I7 Branch 2 IF_ICMPEQ L114 - false
   * 3 Strong Mutation 0: gnu.trove.impl.hash.THashIterator.<init>(Lgnu/trove/impl/hash/TObjectHash;)V:74 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 4 Strong Mutation 2: gnu.trove.impl.hash.THashIterator.<init>(Lgnu/trove/impl/hash/TObjectHash;)V:75 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 5 Strong Mutation 4: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:91 - DeleteStatement: moveToNextIndex()V
   * 6 Strong Mutation 17: gnu.trove.impl.hash.THashIterator.remove()V:114 - InsertUnaryOp +1
   * 7 Strong Mutation 16: gnu.trove.impl.hash.THashIterator.remove()V:114 - InsertUnaryOp Negation
   * 8 Strong Mutation 19: gnu.trove.impl.hash.THashIterator.remove()V:114 - DeleteField: _expectedSizeI
   * 9 Strong Mutation 18: gnu.trove.impl.hash.THashIterator.remove()V:114 - InsertUnaryOp -1
   * 10 Strong Mutation 21: gnu.trove.impl.hash.THashIterator.remove()V:114 - DeleteStatement: size()I
   * 11 Strong Mutation 20: gnu.trove.impl.hash.THashIterator.remove()V:114 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 12 Strong Mutation 23: gnu.trove.impl.hash.THashIterator.remove()V:114 - ReplaceComparisonOperator == -> -2
   * 13 Strong Mutation 25: gnu.trove.impl.hash.THashIterator.remove()V:120 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 14 Strong Mutation 27: gnu.trove.impl.hash.THashIterator.remove()V:121 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 15 Strong Mutation 29: gnu.trove.impl.hash.THashIterator.remove()V:121 - InsertUnaryOp +1
   * 16 Strong Mutation 28: gnu.trove.impl.hash.THashIterator.remove()V:121 - InsertUnaryOp Negation
   * 17 Strong Mutation 63: gnu.trove.impl.hash.THashIterator.nextIndex()I:160 - InsertUnaryOp Negation
   * 18 Strong Mutation 69: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC -1 i
   * 19 Strong Mutation 66: gnu.trove.impl.hash.THashIterator.nextIndex()I:160 - DeleteField: _indexI
   * 20 Strong Mutation 85: gnu.trove.impl.hash.THashIterator.nextIndex()I:164 - InsertUnaryOp IINC -1 i
   * 21 Strong Mutation 80: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC -1 i
   * 22 Strong Mutation 82: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - ReplaceComparisonOperator != -> ==
   * 23 gnu.trove.impl.hash.THashIterator.<init>(Lgnu/trove/impl/hash/TObjectHash;)V: root-Branch
   * 24 gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;: root-Branch
   * 25 gnu.trove.impl.hash.THashIterator.moveToNextIndex()V: I7 Branch 3 IFGE L138 - true
   * 26 gnu.trove.impl.hash.THashIterator.nextIndex()I: I7 Branch 4 IF_ICMPEQ L155 - true
   * 27 gnu.trove.impl.hash.THashIterator.nextIndex()I: I29 Branch 5 IFLE L161 - false
   * 28 gnu.trove.impl.hash.THashIterator.nextIndex()I: I34 Branch 6 IF_ACMPEQ L161 - true
   * 29 gnu.trove.impl.hash.THashIterator.nextIndex()I: I34 Branch 6 IF_ACMPEQ L161 - false
   * 30 gnu.trove.impl.hash.THashIterator.nextIndex()I: I39 Branch 7 IF_ACMPNE L161 - true
   * 31 gnu.trove.impl.hash.THashIterator.remove()V: I7 Branch 2 IF_ICMPEQ L114 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TLinkedHashSet<Integer> tLinkedHashSet0 = new TLinkedHashSet<Integer>(6);
      tLinkedHashSet0.add((Integer) 6);
      TObjectHashIterator<Integer> tObjectHashIterator0 = new TObjectHashIterator<Integer>((TObjectHash<Integer>) tLinkedHashSet0);
      TObjectHashIterator<Integer> tObjectHashIterator1 = new TObjectHashIterator<Integer>((TObjectHash<Integer>) tLinkedHashSet0);
      tObjectHashIterator1.next();
      tObjectHashIterator0.next();
      tObjectHashIterator0.remove();
      // Undeclared exception!
      try {
        tObjectHashIterator1.remove();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 1
  /*
   * 12 covered goals:
   * 1 Strong Mutation 34: gnu.trove.impl.hash.THashIterator.remove()V:124 - ReplaceConstant - 0 -> 1
   * 2 Strong Mutation 26: gnu.trove.impl.hash.THashIterator.remove()V:120 - DeleteStatement: tempDisableAutoCompaction()V
   * 3 Strong Mutation 26: gnu.trove.impl.hash.THashIterator.remove()V:120 - DeleteStatement: tempDisableAutoCompaction()V
   * 4 Strong Mutation 34: gnu.trove.impl.hash.THashIterator.remove()V:124 - ReplaceConstant - 0 -> 1
   * 5 Strong Mutation 39: gnu.trove.impl.hash.THashIterator.remove()V:127 - InsertUnaryOp Negation
   * 6 Strong Mutation 42: gnu.trove.impl.hash.THashIterator.remove()V:127 - DeleteField: _expectedSizeI
   * 7 Strong Mutation 43: gnu.trove.impl.hash.THashIterator.remove()V:127 - ReplaceConstant - 1 -> 0
   * 8 Strong Mutation 40: gnu.trove.impl.hash.THashIterator.remove()V:127 - InsertUnaryOp +1
   * 9 Strong Mutation 41: gnu.trove.impl.hash.THashIterator.remove()V:127 - InsertUnaryOp -1
   * 10 Strong Mutation 46: gnu.trove.impl.hash.THashIterator.remove()V:127 - ReplaceArithmeticOperator - -> /
   * 11 Strong Mutation 47: gnu.trove.impl.hash.THashIterator.remove()V:127 - ReplaceArithmeticOperator - -> *
   * 12 Strong Mutation 44: gnu.trove.impl.hash.THashIterator.remove()V:127 - ReplaceArithmeticOperator - -> +
   */

  @Test
  public void test1()  throws Throwable  {
      TLinkedHashSet<Integer> tLinkedHashSet0 = new TLinkedHashSet<Integer>(2);
      tLinkedHashSet0.add((Integer) 2);
      TObjectHashIterator<Integer> tObjectHashIterator0 = new TObjectHashIterator<Integer>((TObjectHash<Integer>) tLinkedHashSet0);
      tObjectHashIterator0.next();
      tObjectHashIterator0.remove();
      tObjectHashIterator0.remove();
      assertEquals(false, tLinkedHashSet0.isEmpty());
      assertEquals(5, tLinkedHashSet0.capacity());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 Strong Mutation 37: gnu.trove.impl.hash.THashIterator.remove()V:124 - ReplaceConstant - 0 -> 1
   * 2 Strong Mutation 37: gnu.trove.impl.hash.THashIterator.remove()V:124 - ReplaceConstant - 0 -> 1
   */

  @Test
  public void test2()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashSet<Object> tCustomHashSet0 = new TCustomHashSet<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, (-167), (-1.0F));
      TObjectHashIterator<Object> tObjectHashIterator0 = tCustomHashSet0.iterator();
      assertNotNull(tObjectHashIterator0);
      
      // Undeclared exception!
      try {
        tObjectHashIterator0.remove();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 179
         //
      }
  }

  //Test case number: 3
  /*
   * 10 covered goals:
   * 1 Strong Mutation 45: gnu.trove.impl.hash.THashIterator.remove()V:127 - ReplaceArithmeticOperator - -> %
   * 2 Strong Mutation 39: gnu.trove.impl.hash.THashIterator.remove()V:127 - InsertUnaryOp Negation
   * 3 Strong Mutation 42: gnu.trove.impl.hash.THashIterator.remove()V:127 - DeleteField: _expectedSizeI
   * 4 Strong Mutation 43: gnu.trove.impl.hash.THashIterator.remove()V:127 - ReplaceConstant - 1 -> 0
   * 5 Strong Mutation 40: gnu.trove.impl.hash.THashIterator.remove()V:127 - InsertUnaryOp +1
   * 6 Strong Mutation 41: gnu.trove.impl.hash.THashIterator.remove()V:127 - InsertUnaryOp -1
   * 7 Strong Mutation 46: gnu.trove.impl.hash.THashIterator.remove()V:127 - ReplaceArithmeticOperator - -> /
   * 8 Strong Mutation 47: gnu.trove.impl.hash.THashIterator.remove()V:127 - ReplaceArithmeticOperator - -> *
   * 9 Strong Mutation 44: gnu.trove.impl.hash.THashIterator.remove()V:127 - ReplaceArithmeticOperator - -> +
   * 10 Strong Mutation 45: gnu.trove.impl.hash.THashIterator.remove()V:127 - ReplaceArithmeticOperator - -> %
   */

  @Test
  public void test3()  throws Throwable  {
      TLinkedHashSet<Integer> tLinkedHashSet0 = new TLinkedHashSet<Integer>(0);
      tLinkedHashSet0.add((Integer) 0);
      TObjectHashIterator<Integer> tObjectHashIterator0 = new TObjectHashIterator<Integer>((TObjectHash<Integer>) tLinkedHashSet0);
      tObjectHashIterator0.next();
      tObjectHashIterator0.remove();
      tObjectHashIterator0.remove();
      tObjectHashIterator0.remove();
      assertEquals(-2, tLinkedHashSet0.size());
      assertEquals(false, tObjectHashIterator0.hasNext());
  }

  //Test case number: 4
  /*
   * 18 covered goals:
   * 1 Strong Mutation 50: gnu.trove.impl.hash.THashIterator.moveToNextIndex()V:138 - ReplaceComparisonOperator >= -> >
   * 2 Strong Mutation 1: gnu.trove.impl.hash.THashIterator.<init>(Lgnu/trove/impl/hash/TObjectHash;)V:74 - DeleteStatement: size()I
   * 3 Strong Mutation 6: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:92 - InsertUnaryOp +1
   * 4 Strong Mutation 7: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:92 - InsertUnaryOp -1
   * 5 Strong Mutation 9: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:92 - DeleteStatement: objectAtIndex(I)Ljava/lang/Object;
   * 6 Strong Mutation 50: gnu.trove.impl.hash.THashIterator.moveToNextIndex()V:138 - ReplaceComparisonOperator >= -> >
   * 7 Strong Mutation 55: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - DeleteField: _expectedSizeI
   * 8 Strong Mutation 54: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - InsertUnaryOp -1
   * 9 Strong Mutation 52: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - InsertUnaryOp Negation
   * 10 Strong Mutation 59: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - ReplaceComparisonOperator == -> -2
   * 11 Strong Mutation 56: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 12 Strong Mutation 62: gnu.trove.impl.hash.THashIterator.nextIndex()I:159 - DeleteField: _set[Ljava/lang/Object;
   * 13 Strong Mutation 61: gnu.trove.impl.hash.THashIterator.nextIndex()I:159 - DeleteField: _object_hashLgnu/trove/impl/hash/TObjectHash;
   * 14 Strong Mutation 68: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC 1 i
   * 15 Strong Mutation 64: gnu.trove.impl.hash.THashIterator.nextIndex()I:160 - InsertUnaryOp +1
   * 16 Strong Mutation 73: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp Negation of i
   * 17 Strong Mutation 74: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC 1 i
   * 18 Strong Mutation 75: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC -1 i
   */

  @Test
  public void test4()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashSet<Object> tCustomHashSet0 = new TCustomHashSet<Object>();
      TObjectFloatCustomHashMap<String> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<String>((HashingStrategy<? super String>) identityHashingStrategy0, 31);
      tObjectFloatCustomHashMap0._set = tCustomHashSet0._set;
      tObjectFloatCustomHashMap0.put("Yplv.*~", 0.0F);
      TObjectHashIterator<String> tObjectHashIterator0 = new TObjectHashIterator<String>((TObjectHash<String>) tObjectFloatCustomHashMap0);
      String string0 = tObjectHashIterator0.next();
      assertEquals(false, tObjectHashIterator0.hasNext());
      assertNotNull(string0);
  }

  //Test case number: 5
  /*
   * 7 covered goals:
   * 1 Strong Mutation 65: gnu.trove.impl.hash.THashIterator.nextIndex()I:160 - InsertUnaryOp -1
   * 2 Strong Mutation 11: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - ReplaceComparisonOperator < -> !=
   * 3 Strong Mutation 10: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - DeleteStatement: nextIndex()I
   * 4 Strong Mutation 11: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - ReplaceComparisonOperator < -> !=
   * 5 Strong Mutation 14: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - ReplaceConstant - 1 -> 0
   * 6 Strong Mutation 65: gnu.trove.impl.hash.THashIterator.nextIndex()I:160 - InsertUnaryOp -1
   * 7 gnu.trove.impl.hash.THashIterator.hasNext()Z: I4 Branch 1 IFLT L103 - false
   */

  @Test
  public void test5()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashSet<Object> tCustomHashSet0 = new TCustomHashSet<Object>();
      TObjectHashIterator<Object> tObjectHashIterator0 = tCustomHashSet0.iterator();
      assertEquals(false, tObjectHashIterator0.hasNext());
      assertNotNull(tObjectHashIterator0);
      
      TObjectFloatCustomHashMap<String> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<String>((HashingStrategy<? super String>) identityHashingStrategy0, 31);
      tObjectFloatCustomHashMap0._set = tCustomHashSet0._set;
      tObjectFloatCustomHashMap0.put("Yplv.*~", 0.0F);
      boolean boolean0 = tObjectHashIterator0.hasNext();
      assertEquals(true, tObjectHashIterator0.hasNext());
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 15 covered goals:
   * 1 Strong Mutation 78: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp Negation of i
   * 2 Strong Mutation 1: gnu.trove.impl.hash.THashIterator.<init>(Lgnu/trove/impl/hash/TObjectHash;)V:74 - DeleteStatement: size()I
   * 3 Strong Mutation 5: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:92 - InsertUnaryOp Negation
   * 4 Strong Mutation 6: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:92 - InsertUnaryOp +1
   * 5 Strong Mutation 7: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:92 - InsertUnaryOp -1
   * 6 Strong Mutation 8: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:92 - DeleteField: _indexI
   * 7 Strong Mutation 9: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:92 - DeleteStatement: objectAtIndex(I)Ljava/lang/Object;
   * 8 Strong Mutation 49: gnu.trove.impl.hash.THashIterator.moveToNextIndex()V:138 - ReplaceComparisonOperator >= -> ==
   * 9 Strong Mutation 55: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - DeleteField: _expectedSizeI
   * 10 Strong Mutation 52: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - InsertUnaryOp Negation
   * 11 Strong Mutation 57: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - DeleteStatement: size()I
   * 12 Strong Mutation 5: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:92 - InsertUnaryOp Negation
   * 13 Strong Mutation 8: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:92 - DeleteField: _indexI
   * 14 Strong Mutation 49: gnu.trove.impl.hash.THashIterator.moveToNextIndex()V:138 - ReplaceComparisonOperator >= -> ==
   * 15 Strong Mutation 78: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp Negation of i
   */

  @Test
  public void test6()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectFloatCustomHashMap<String> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<String>((HashingStrategy<? super String>) identityHashingStrategy0, 31);
      tObjectFloatCustomHashMap0.put("Yplv.*~", 0.0F);
      TObjectHashIterator<String> tObjectHashIterator0 = new TObjectHashIterator<String>((TObjectHash<String>) tObjectFloatCustomHashMap0);
      String string0 = tObjectHashIterator0.next();
      assertNotNull(string0);
      assertEquals(false, tObjectHashIterator0.hasNext());
  }

  //Test case number: 7
  /*
   * 7 covered goals:
   * 1 Strong Mutation 81: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - DeleteField: REMOVEDLjava/lang/Object;
   * 2 gnu.trove.impl.hash.THashIterator.nextIndex()I: I39 Branch 7 IF_ACMPNE L161 - false
   * 3 Strong Mutation 13: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - ReplaceComparisonOperator < -> -2
   * 4 Strong Mutation 15: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - ReplaceConstant - 0 -> 1
   * 5 Strong Mutation 81: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - DeleteField: REMOVEDLjava/lang/Object;
   * 6 gnu.trove.impl.hash.THashIterator.nextIndex()I: I29 Branch 5 IFLE L161 - true
   * 7 gnu.trove.impl.hash.THashIterator.hasNext()Z: I4 Branch 1 IFLT L103 - true
   */

  @Test
  public void test7()  throws Throwable  {
      TLinkedHashSet<Integer> tLinkedHashSet0 = new TLinkedHashSet<Integer>(0);
      tLinkedHashSet0.add((Integer) 0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      tLinkedHashSet0.retainAll((Collection<?>) linkedList0);
      assertEquals(true, tLinkedHashSet0.isEmpty());
      
      TObjectHashIterator<Integer> tObjectHashIterator0 = new TObjectHashIterator<Integer>((TObjectHash<Integer>) tLinkedHashSet0);
      boolean boolean0 = tObjectHashIterator0.hasNext();
      assertEquals(false, boolean0);
  }

  //Test case number: 8
  /*
   * 16 covered goals:
   * 1 Strong Mutation 80: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC -1 i
   * 2 Strong Mutation 4: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:91 - DeleteStatement: moveToNextIndex()V
   * 3 Strong Mutation 17: gnu.trove.impl.hash.THashIterator.remove()V:114 - InsertUnaryOp +1
   * 4 Strong Mutation 16: gnu.trove.impl.hash.THashIterator.remove()V:114 - InsertUnaryOp Negation
   * 5 Strong Mutation 19: gnu.trove.impl.hash.THashIterator.remove()V:114 - DeleteField: _expectedSizeI
   * 6 Strong Mutation 18: gnu.trove.impl.hash.THashIterator.remove()V:114 - InsertUnaryOp -1
   * 7 Strong Mutation 21: gnu.trove.impl.hash.THashIterator.remove()V:114 - DeleteStatement: size()I
   * 8 Strong Mutation 20: gnu.trove.impl.hash.THashIterator.remove()V:114 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 9 Strong Mutation 23: gnu.trove.impl.hash.THashIterator.remove()V:114 - ReplaceComparisonOperator == -> -2
   * 10 Strong Mutation 25: gnu.trove.impl.hash.THashIterator.remove()V:120 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 11 Strong Mutation 27: gnu.trove.impl.hash.THashIterator.remove()V:121 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 12 Strong Mutation 29: gnu.trove.impl.hash.THashIterator.remove()V:121 - InsertUnaryOp +1
   * 13 Strong Mutation 28: gnu.trove.impl.hash.THashIterator.remove()V:121 - InsertUnaryOp Negation
   * 14 Strong Mutation 31: gnu.trove.impl.hash.THashIterator.remove()V:121 - DeleteField: _indexI
   * 15 Strong Mutation 30: gnu.trove.impl.hash.THashIterator.remove()V:121 - InsertUnaryOp -1
   * 16 Strong Mutation 79: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC 1 i
   */

  @Test
  public void test8()  throws Throwable  {
      TLinkedHashSet<Integer> tLinkedHashSet0 = new TLinkedHashSet<Integer>(2);
      tLinkedHashSet0.add((Integer) 2);
      TObjectHashIterator<Integer> tObjectHashIterator0 = new TObjectHashIterator<Integer>((TObjectHash<Integer>) tLinkedHashSet0);
      tObjectHashIterator0.next();
      tObjectHashIterator0.remove();
      assertEquals(0, tLinkedHashSet0.size());
      assertEquals("{}", tLinkedHashSet0.toString());
  }

  //Test case number: 9
  /*
   * 4 covered goals:
   * 1 Strong Mutation 82: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - ReplaceComparisonOperator != -> ==
   * 2 Strong Mutation 12: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - ReplaceComparisonOperator < -> <=
   * 3 Strong Mutation 14: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - ReplaceConstant - 1 -> 0
   * 4 Strong Mutation 12: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - ReplaceComparisonOperator < -> <=
   */

  @Test
  public void test9()  throws Throwable  {
      TLinkedHashSet<Integer> tLinkedHashSet0 = new TLinkedHashSet<Integer>(0);
      tLinkedHashSet0.add((Integer) 0);
      TObjectHashIterator<Integer> tObjectHashIterator0 = new TObjectHashIterator<Integer>((TObjectHash<Integer>) tLinkedHashSet0);
      boolean boolean0 = tObjectHashIterator0.hasNext();
      assertEquals(true, boolean0);
  }

  //Test case number: 10
  /*
   * 5 covered goals:
   * 1 Strong Mutation 85: gnu.trove.impl.hash.THashIterator.nextIndex()I:164 - InsertUnaryOp IINC -1 i
   * 2 Strong Mutation 3: gnu.trove.impl.hash.THashIterator.<init>(Lgnu/trove/impl/hash/TObjectHash;)V:75 - DeleteStatement: capacity()I
   * 3 Strong Mutation 63: gnu.trove.impl.hash.THashIterator.nextIndex()I:160 - InsertUnaryOp Negation
   * 4 Strong Mutation 69: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC -1 i
   * 5 Strong Mutation 66: gnu.trove.impl.hash.THashIterator.nextIndex()I:160 - DeleteField: _indexI
   */

  @Test
  public void test10()  throws Throwable  {
      TLinkedHashSet<Integer> tLinkedHashSet0 = new TLinkedHashSet<Integer>(0);
      tLinkedHashSet0.add((Integer) 0);
      TObjectHashIterator<Integer> tObjectHashIterator0 = new TObjectHashIterator<Integer>((TObjectHash<Integer>) tLinkedHashSet0);
      assertEquals(true, tObjectHashIterator0.hasNext());
      
      TCustomHashSet<Object> tCustomHashSet0 = new TCustomHashSet<Object>();
      TObjectHashIterator<Object> tObjectHashIterator1 = tCustomHashSet0.iterator();
      boolean boolean0 = tObjectHashIterator1.hasNext();
      assertEquals(false, boolean0);
  }

  //Test case number: 11
  /*
   * 22 covered goals:
   * 1 gnu.trove.impl.hash.THashIterator.moveToNextIndex()V: I7 Branch 3 IFGE L138 - false
   * 2 Strong Mutation 10: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - DeleteStatement: nextIndex()I
   * 3 Strong Mutation 13: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - ReplaceComparisonOperator < -> -2
   * 4 Strong Mutation 15: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - ReplaceConstant - 0 -> 1
   * 5 Strong Mutation 54: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - InsertUnaryOp -1
   * 6 Strong Mutation 59: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - ReplaceComparisonOperator == -> -2
   * 7 Strong Mutation 56: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 8 Strong Mutation 62: gnu.trove.impl.hash.THashIterator.nextIndex()I:159 - DeleteField: _set[Ljava/lang/Object;
   * 9 Strong Mutation 61: gnu.trove.impl.hash.THashIterator.nextIndex()I:159 - DeleteField: _object_hashLgnu/trove/impl/hash/TObjectHash;
   * 10 Strong Mutation 68: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC 1 i
   * 11 Strong Mutation 71: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - ReplaceComparisonOperator <= -> <
   * 12 Strong Mutation 64: gnu.trove.impl.hash.THashIterator.nextIndex()I:160 - InsertUnaryOp +1
   * 13 Strong Mutation 67: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp Negation of i
   * 14 Strong Mutation 76: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - DeleteField: FREELjava/lang/Object;
   * 15 Strong Mutation 77: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - ReplaceComparisonOperator == -> !=
   * 16 Strong Mutation 72: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - ReplaceComparisonOperator <= -> -1
   * 17 Strong Mutation 73: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp Negation of i
   * 18 Strong Mutation 74: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC 1 i
   * 19 Strong Mutation 75: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC -1 i
   * 20 Strong Mutation 84: gnu.trove.impl.hash.THashIterator.nextIndex()I:164 - InsertUnaryOp IINC 1 i
   * 21 Strong Mutation 83: gnu.trove.impl.hash.THashIterator.nextIndex()I:164 - InsertUnaryOp Negation of i
   * 22 Strong Mutation 71: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - ReplaceComparisonOperator <= -> <
   */

  @Test
  public void test11()  throws Throwable  {
      TCustomHashMap<Integer, Integer> tCustomHashMap0 = new TCustomHashMap<Integer, Integer>((HashingStrategy<? super Integer>) null, (-1836), (float) (-1836));
      TCustomHashMap<Object, Object> tCustomHashMap1 = new TCustomHashMap<Object, Object>((HashingStrategy<? super Object>) null, (Map<?, ?>) tCustomHashMap0);
      TObjectHashIterator<Object> tObjectHashIterator0 = new TObjectHashIterator<Object>((TObjectHash<Object>) tCustomHashMap1);
      // Undeclared exception!
      try {
        tObjectHashIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 12
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.THashIterator.nextIndex()I: I7 Branch 4 IF_ICMPEQ L155 - false
   * 2 Strong Mutation 0: gnu.trove.impl.hash.THashIterator.<init>(Lgnu/trove/impl/hash/TObjectHash;)V:74 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 3 Strong Mutation 2: gnu.trove.impl.hash.THashIterator.<init>(Lgnu/trove/impl/hash/TObjectHash;)V:75 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   */

  @Test
  public void test12()  throws Throwable  {
      TLinkedHashSet<Integer> tLinkedHashSet0 = new TLinkedHashSet<Integer>(31);
      TObjectHashIterator<Integer> tObjectHashIterator0 = new TObjectHashIterator<Integer>((TObjectHash<Integer>) tLinkedHashSet0);
      tLinkedHashSet0.add((Integer) 31);
      // Undeclared exception!
      try {
        tObjectHashIterator0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
