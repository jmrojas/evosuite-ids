/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TShortFunction;
import gnu.trove.impl.sync.TSynchronizedObjectShortMap;
import gnu.trove.impl.sync.TSynchronizedShortCollection;
import gnu.trove.iterator.TObjectShortIterator;
import gnu.trove.map.TObjectShortMap;
import gnu.trove.map.custom_hash.TObjectShortCustomHashMap;
import gnu.trove.map.hash.TObjectShortHashMap;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.TObjectShortProcedure;
import gnu.trove.procedure.TShortProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedObjectShortMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.putAll(Lgnu/trove/map/TObjectShortMap;)V: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedObjectShortMap.<init>(Lgnu/trove/map/TObjectShortMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TObjectShortHashMap<Short> tObjectShortHashMap0 = new TObjectShortHashMap<Short>();
      TSynchronizedObjectShortMap<Short> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Short>((TObjectShortMap<Short>) tObjectShortHashMap0);
      tSynchronizedObjectShortMap0.putAll((TObjectShortMap<? extends Short>) tObjectShortHashMap0);
      assertEquals(true, tSynchronizedObjectShortMap0.isEmpty());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.toString()Ljava/lang/String;: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedObjectShortMap.<init>(Lgnu/trove/map/TObjectShortMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TObjectShortCustomHashMap<Object> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<Object>();
      IdentityHashingStrategy<Short> identityHashingStrategy0 = new IdentityHashingStrategy<Short>();
      TObjectShortCustomHashMap<Short> tObjectShortCustomHashMap1 = new TObjectShortCustomHashMap<Short>((HashingStrategy<? super Short>) identityHashingStrategy0, 8, (float) 8, (short)16);
      TSynchronizedObjectShortMap<Short> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Short>((TObjectShortMap<Short>) tObjectShortCustomHashMap1, (Object) tObjectShortCustomHashMap0);
      String string0 = tSynchronizedObjectShortMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.iterator()Lgnu/trove/iterator/TObjectShortIterator;: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectShortCustomHashMap<Integer> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0);
      TSynchronizedObjectShortMap<Integer> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Integer>((TObjectShortMap<Integer>) tObjectShortCustomHashMap0, (Object) (-20));
      TObjectShortIterator<Integer> tObjectShortIterator0 = tSynchronizedObjectShortMap0.iterator();
      assertEquals(false, tObjectShortIterator0.hasNext());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.retainEntries(Lgnu/trove/procedure/TObjectShortProcedure;)Z: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TObjectShortHashMap<Object> tObjectShortHashMap0 = new TObjectShortHashMap<Object>();
      TSynchronizedObjectShortMap<Object> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Object>((TObjectShortMap<Object>) tObjectShortHashMap0);
      boolean boolean0 = tSynchronizedObjectShortMap0.retainEntries((TObjectShortProcedure<? super Object>) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.putIfAbsent(Ljava/lang/Object;S)S: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TObjectShortCustomHashMap<Object> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<Object>();
      IdentityHashingStrategy<Short> identityHashingStrategy0 = new IdentityHashingStrategy<Short>();
      TObjectShortCustomHashMap<Short> tObjectShortCustomHashMap1 = new TObjectShortCustomHashMap<Short>((HashingStrategy<? super Short>) identityHashingStrategy0, 8, (float) 8, (short)16);
      TSynchronizedObjectShortMap<Short> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Short>((TObjectShortMap<Short>) tObjectShortCustomHashMap1, (Object) tObjectShortCustomHashMap0);
      Short short0 = new Short((short)16);
      short short1 = tSynchronizedObjectShortMap0.putIfAbsent(short0, (short) short0);
      assertEquals(false, tObjectShortCustomHashMap1.isEmpty());
      assertEquals((short)16, short1);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.clear()V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TObjectShortHashMap<Short> tObjectShortHashMap0 = new TObjectShortHashMap<Short>(17);
      TSynchronizedObjectShortMap<Short> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Short>((TObjectShortMap<Short>) tObjectShortHashMap0);
      tSynchronizedObjectShortMap0.clear();
      assertEquals(0, tSynchronizedObjectShortMap0.size());
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.hashCode()I: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TObjectShortHashMap<Short> tObjectShortHashMap0 = new TObjectShortHashMap<Short>();
      TSynchronizedObjectShortMap<Short> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Short>((TObjectShortMap<Short>) tObjectShortHashMap0);
      int int0 = tSynchronizedObjectShortMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.values([S)[S: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TObjectShortHashMap<Short> tObjectShortHashMap0 = new TObjectShortHashMap<Short>((-1410), (float) (-1410), (short)1);
      TSynchronizedObjectShortMap<Short> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Short>((TObjectShortMap<Short>) tObjectShortHashMap0);
      short[] shortArray0 = new short[16];
      short[] shortArray1 = tSynchronizedObjectShortMap0.values(shortArray0);
      assertSame(shortArray1, shortArray0);
  }

  //Test case number: 8
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.containsValue(S)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedObjectShortMap.size()I: root-Branch
   * 3 gnu.trove.impl.sync.TSynchronizedObjectShortMap.getNoEntryValue()S: root-Branch
   * 4 gnu.trove.impl.sync.TSynchronizedObjectShortMap.forEachEntry(Lgnu/trove/procedure/TObjectShortProcedure;)Z: root-Branch
   */

//   @Test
//   public void test8()  throws Throwable  {
//       IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
//       TObjectShortCustomHashMap<Integer> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, 499, (float) 499, (short) (-861));
//       TSynchronizedObjectShortMap<Integer> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Integer>((TObjectShortMap<Integer>) tObjectShortCustomHashMap0, (Object) identityHashingStrategy0);
//       TObjectShortHashMap<Object> tObjectShortHashMap0 = new TObjectShortHashMap<Object>((TObjectShortMap<?>) tSynchronizedObjectShortMap0);
//       TSynchronizedObjectShortMap<Object> tSynchronizedObjectShortMap1 = new TSynchronizedObjectShortMap<Object>((TObjectShortMap<Object>) tObjectShortHashMap0);
//       tSynchronizedObjectShortMap1.containsValue((short) (-861));
//       assertEquals(-861, tSynchronizedObjectShortMap0.getNoEntryValue());
//       assertEquals(-861, tSynchronizedObjectShortMap1.getNoEntryValue());
//   }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TObjectShortCustomHashMap<Object> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<Object>();
      IdentityHashingStrategy<Short> identityHashingStrategy0 = new IdentityHashingStrategy<Short>();
      TObjectShortCustomHashMap<Short> tObjectShortCustomHashMap1 = new TObjectShortCustomHashMap<Short>((HashingStrategy<? super Short>) identityHashingStrategy0, 8, (float) 8, (short)16);
      TSynchronizedObjectShortMap<Short> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Short>((TObjectShortMap<Short>) tObjectShortCustomHashMap1, (Object) tObjectShortCustomHashMap0);
      Short[] shortArray0 = new Short[10];
      Short[] shortArray1 = tSynchronizedObjectShortMap0.keys(shortArray0);
      assertSame(shortArray1, shortArray0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TObjectShortHashMap<Short> tObjectShortHashMap0 = new TObjectShortHashMap<Short>(17);
      TSynchronizedObjectShortMap<Short> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Short>((TObjectShortMap<Short>) tObjectShortHashMap0);
      boolean boolean0 = tSynchronizedObjectShortMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.values()[S: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TObjectShortHashMap<Short> tObjectShortHashMap0 = new TObjectShortHashMap<Short>(17);
      TSynchronizedObjectShortMap<Short> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Short>((TObjectShortMap<Short>) tObjectShortHashMap0);
      short[] shortArray0 = tSynchronizedObjectShortMap0.values();
      assertNotNull(shortArray0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.put(Ljava/lang/Object;S)S: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TObjectShortHashMap<Short> tObjectShortHashMap0 = new TObjectShortHashMap<Short>((-1410), (float) (-1410), (short)1);
      TSynchronizedObjectShortMap<Short> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Short>((TObjectShortMap<Short>) tObjectShortHashMap0);
      TObjectShortHashMap<Object> tObjectShortHashMap1 = new TObjectShortHashMap<Object>((TObjectShortMap<?>) tSynchronizedObjectShortMap0);
      TSynchronizedObjectShortMap<Object> tSynchronizedObjectShortMap1 = new TSynchronizedObjectShortMap<Object>((TObjectShortMap<Object>) tObjectShortHashMap1, (Object) "");
      Object object0 = new Object();
      short short0 = tSynchronizedObjectShortMap1.put(object0, (short)1);
      assertEquals(1, tObjectShortHashMap1.size());
      assertEquals((short)1, short0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.containsKey(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TObjectShortCustomHashMap<Object> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<Object>();
      IdentityHashingStrategy<Short> identityHashingStrategy0 = new IdentityHashingStrategy<Short>();
      TObjectShortCustomHashMap<Short> tObjectShortCustomHashMap1 = new TObjectShortCustomHashMap<Short>((HashingStrategy<? super Short>) identityHashingStrategy0, 8, (float) 8, (short)16);
      TSynchronizedObjectShortMap<Short> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Short>((TObjectShortMap<Short>) tObjectShortCustomHashMap1, (Object) tObjectShortCustomHashMap0);
      boolean boolean0 = tSynchronizedObjectShortMap0.containsKey((Object) tObjectShortCustomHashMap0);
      assertEquals(false, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.remove(Ljava/lang/Object;)S: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
      TObjectShortCustomHashMap<Integer> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, 499, (float) 499, (short) (-861));
      TSynchronizedObjectShortMap<Integer> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Integer>((TObjectShortMap<Integer>) tObjectShortCustomHashMap0, (Object) identityHashingStrategy0);
      short short0 = tSynchronizedObjectShortMap0.remove((Object) tObjectShortCustomHashMap0);
      assertEquals((short) (-861), short0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.adjustValue(Ljava/lang/Object;S)Z: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      IdentityHashingStrategy<Short> identityHashingStrategy0 = new IdentityHashingStrategy<Short>();
      TObjectShortCustomHashMap<Short> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<Short>((HashingStrategy<? super Short>) identityHashingStrategy0, 1579, (float) 1579, (short)361);
      TSynchronizedObjectShortMap<Short> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Short>((TObjectShortMap<Short>) tObjectShortCustomHashMap0, (Object) "361");
      boolean boolean0 = tSynchronizedObjectShortMap0.adjustValue((Short) (short)361, (short)361);
      assertEquals(false, boolean0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
      TObjectShortCustomHashMap<Integer> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, 499, (float) 499, (short) (-861));
      TSynchronizedObjectShortMap<Integer> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Integer>((TObjectShortMap<Integer>) tObjectShortCustomHashMap0, (Object) identityHashingStrategy0);
      Integer[] integerArray0 = new Integer[13];
      ToObjectArrayProceedure<Integer> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Integer>(integerArray0);
      boolean boolean0 = tSynchronizedObjectShortMap0.forEachKey((TObjectProcedure<? super Integer>) toObjectArrayProceedure0);
      assertEquals(true, boolean0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TObjectShortCustomHashMap<Object> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<Object>();
      TSynchronizedObjectShortMap<Object> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Object>((TObjectShortMap<Object>) tObjectShortCustomHashMap0, (Object) tObjectShortCustomHashMap0);
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      tSynchronizedObjectShortMap0.putAll((Map<?, ? extends Short>) hashMap0);
      assertEquals(true, tSynchronizedObjectShortMap0.isEmpty());
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.transformValues(Lgnu/trove/function/TShortFunction;)V: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TObjectShortHashMap<Integer> tObjectShortHashMap0 = new TObjectShortHashMap<Integer>((int) (short)361, (float) (short)361);
      TSynchronizedObjectShortMap<Integer> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Integer>((TObjectShortMap<Integer>) tObjectShortHashMap0);
      // Undeclared exception!
      try {
        tSynchronizedObjectShortMap0.transformValues((TShortFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.forEachValue(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TObjectShortHashMap<Short> tObjectShortHashMap0 = new TObjectShortHashMap<Short>((-1410), (float) (-1410), (short)1);
      TSynchronizedObjectShortMap<Short> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Short>((TObjectShortMap<Short>) tObjectShortHashMap0);
      boolean boolean0 = tSynchronizedObjectShortMap0.forEachValue((TShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.increment(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TObjectShortHashMap<String> tObjectShortHashMap0 = new TObjectShortHashMap<String>();
      TSynchronizedObjectShortMap<String> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<String>((TObjectShortMap<String>) tObjectShortHashMap0);
      boolean boolean0 = tSynchronizedObjectShortMap0.increment("361");
      assertEquals(false, boolean0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.equals(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TObjectShortHashMap<Short> tObjectShortHashMap0 = new TObjectShortHashMap<Short>(17);
      TSynchronizedObjectShortMap<Short> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Short>((TObjectShortMap<Short>) tObjectShortHashMap0);
      boolean boolean0 = tSynchronizedObjectShortMap0.equals((Object) 17);
      assertEquals(false, boolean0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.adjustOrPutValue(Ljava/lang/Object;SS)S: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectShortCustomHashMap<Integer> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0);
      TSynchronizedObjectShortMap<Integer> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Integer>((TObjectShortMap<Integer>) tObjectShortCustomHashMap0, (Object) (-20));
      short short0 = tSynchronizedObjectShortMap0.adjustOrPutValue((Integer) (-20), (short)0, (short)0);
      assertEquals("{-20=0}", tObjectShortCustomHashMap0.toString());
      assertEquals((short)0, short0);
  }

  //Test case number: 23
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.get(Ljava/lang/Object;)S: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedObjectShortMap.size()I: root-Branch
   * 3 gnu.trove.impl.sync.TSynchronizedObjectShortMap.getNoEntryValue()S: root-Branch
   * 4 gnu.trove.impl.sync.TSynchronizedObjectShortMap.forEachEntry(Lgnu/trove/procedure/TObjectShortProcedure;)Z: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
      TObjectShortCustomHashMap<Integer> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, 499, (float) 499, (short) (-861));
      TSynchronizedObjectShortMap<Integer> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Integer>((TObjectShortMap<Integer>) tObjectShortCustomHashMap0, (Object) identityHashingStrategy0);
      TObjectShortHashMap<Object> tObjectShortHashMap0 = new TObjectShortHashMap<Object>((TObjectShortMap<?>) tSynchronizedObjectShortMap0);
      TSynchronizedObjectShortMap<Object> tSynchronizedObjectShortMap1 = new TSynchronizedObjectShortMap<Object>((TObjectShortMap<Object>) tObjectShortHashMap0);
      short short0 = tSynchronizedObjectShortMap1.get((Object) tObjectShortCustomHashMap0);
      assertEquals((short) (-861), short0);
  }

  //Test case number: 24
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.keys()[Ljava/lang/Object;: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedObjectShortMap.<init>(Lgnu/trove/map/TObjectShortMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
      TObjectShortCustomHashMap<Integer> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, 499, (float) 499, (short) (-861));
      TSynchronizedObjectShortMap<Integer> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Integer>((TObjectShortMap<Integer>) tObjectShortCustomHashMap0, (Object) identityHashingStrategy0);
      Object[] objectArray0 = tSynchronizedObjectShortMap0.keys();
      assertNotNull(objectArray0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.<init>(Lgnu/trove/map/TObjectShortMap;)V: I17 Branch 1 IFNONNULL L59 - false
   */

  @Test
  public void test25()  throws Throwable  {
      TSynchronizedObjectShortMap<Short> tSynchronizedObjectShortMap0 = null;
      try {
        tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Short>((TObjectShortMap<Short>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.keySet()Ljava/util/Set;: I11 Branch 2 IFNONNULL L107 - true
   * 2 gnu.trove.impl.sync.TSynchronizedObjectShortMap.keySet()Ljava/util/Set;: I11 Branch 2 IFNONNULL L107 - false
   */

  @Test
  public void test26()  throws Throwable  {
      TObjectShortHashMap<Short> tObjectShortHashMap0 = new TObjectShortHashMap<Short>((-20));
      TSynchronizedObjectShortMap<Short> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Short>((TObjectShortMap<Short>) tObjectShortHashMap0);
      Set<Short> set0 = tSynchronizedObjectShortMap0.keySet();
      assertNotNull(set0);
      
      Set<Short> set1 = tSynchronizedObjectShortMap0.keySet();
      assertSame(set1, set0);
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedObjectShortMap.valueCollection()Lgnu/trove/TShortCollection;: I11 Branch 3 IFNONNULL L122 - true
   * 2 gnu.trove.impl.sync.TSynchronizedObjectShortMap.valueCollection()Lgnu/trove/TShortCollection;: I11 Branch 3 IFNONNULL L122 - false
   * 3 gnu.trove.impl.sync.TSynchronizedObjectShortMap.<init>(Lgnu/trove/map/TObjectShortMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test27()  throws Throwable  {
      TObjectShortHashMap<Short> tObjectShortHashMap0 = new TObjectShortHashMap<Short>((-1410), (float) (-1410), (short)1);
      TSynchronizedObjectShortMap<Short> tSynchronizedObjectShortMap0 = new TSynchronizedObjectShortMap<Short>((TObjectShortMap<Short>) tObjectShortHashMap0);
      TSynchronizedShortCollection tSynchronizedShortCollection0 = (TSynchronizedShortCollection)tSynchronizedObjectShortMap0.valueCollection();
      assertNotNull(tSynchronizedShortCollection0);
      
      TSynchronizedShortCollection tSynchronizedShortCollection1 = (TSynchronizedShortCollection)tSynchronizedObjectShortMap0.valueCollection();
      assertSame(tSynchronizedShortCollection1, tSynchronizedShortCollection0);
  }
}
