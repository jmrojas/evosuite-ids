/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TShortFunction;
import gnu.trove.map.TFloatShortMap;
import gnu.trove.map.hash.TFloatShortHashMap;
import java.io.FileDescriptor;
import java.io.FileOutputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatShortHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 0;
      float float0 = 1959.8208F;
      short short0 = (short) (-1969);
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int0, (float) int0, float0, short0);
      tFloatShortHashMap0.contains((float) short0);
      tFloatShortHashMap0.put(float0, short0);
      float float1 = 1868.945F;
      short short1 = (short) (-8725);
      String string0 = "(9@JA";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0);
      // Undeclared exception!
      try {
        stringTokenizer0.nextToken(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 1;
      float float0 = (-505.99298F);
      float float1 = 1641.8363F;
      short short0 = (short)1800;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int0, float0, float1, short0);
      float float2 = (-1293.74F);
      short short1 = (short)128;
      short short2 = tFloatShortHashMap0.putIfAbsent(float2, short1);
      assertEquals("{-1293.74=128}", tFloatShortHashMap0.toString());
      assertEquals((short)1800, short2);
  }

  @Test
  public void test2()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      float float0 = 494.49857F;
      tFloatShortHashMap0.remove(float0);
      tFloatShortHashMap0.capacity();
      tFloatShortHashMap0.tempDisableAutoCompaction();
      float float1 = (-834.8875F);
      short short0 = (short) (-1037);
      tFloatShortHashMap0.trimToSize();
      tFloatShortHashMap0.put(float1, short0);
      float float2 = (-1213.9983F);
      tFloatShortHashMap0.containsKey(float2);
      FileDescriptor fileDescriptor0 = null;
      FileOutputStream fileOutputStream0 = null;
      try {
        fileOutputStream0 = new FileOutputStream(fileDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      short short0 = (short) (-1167);
      Short short1 = new Short(short0);
      String string0 = "gxB(^!A.0&uPNv\"7<";
      short short2 = (short)1;
      Short.compare(short0, short2);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 4: gxB(^!A.0&uPNv\"7<
         //
      }
  }

//   @Test
//   public void test4()  throws Throwable  {
//       float[] floatArray0 = new float[5];
//       float float0 = 0.0F;
//       floatArray0[0] = float0;
//       floatArray0[1] = float0;
//       floatArray0[2] = float0;
//       floatArray0[3] = float0;
//       floatArray0[4] = float0;
//       float float1 = 0.0F;
//       floatArray0[0] = float0;
//       floatArray0[1] = float0;
//       floatArray0[2] = float1;
//       floatArray0[3] = float1;
//       floatArray0[4] = float0;
//       floatArray0[0] = float1;
//       float float2 = Float.NEGATIVE_INFINITY;
//       floatArray0[1] = float2;
//       float float3 = 0.0F;
//       int int0 = 0;
//       float float4 = 1.0F;
//       short short0 = (short)1;
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int0, float4, float0, short0);
//       float float5 = 0.0F;
//       tFloatShortHashMap0.setAutoCompactionFactor(float5);
//       floatArray0[2] = float3;
//       float float6 = 1.0F;
//       floatArray0[3] = float6;
//       float float7 = (-343.3177F);
//       floatArray0[4] = float7;
//       short[] shortArray0 = new short[3];
//       short short1 = (short)95;
//       shortArray0[0] = short1;
//       short short2 = (short)0;
//       shortArray0[1] = short2;
//       short short3 = (short)0;
//       shortArray0[2] = short3;
//       TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap(floatArray0, shortArray0);
//       TFloatShortHashMap tFloatShortHashMap2 = new TFloatShortHashMap((TFloatShortMap) tFloatShortHashMap1);
//       String string0 = tFloatShortHashMap2.toString();
//       assertEquals(2, tFloatShortHashMap1.size());
//       assertEquals(23, tFloatShortHashMap2.capacity());
//       assertEquals("{-Infinity=0, 0.0=0}", string0);
//       assertNotNull(string0);
//       assertEquals(0.0F, tFloatShortHashMap2.getNoEntryKey(), 0.01F);
//   }

  @Test
  public void test5()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = (-1.0F);
      floatArray0[0] = float0;
      float float1 = (-372.627F);
      floatArray0[1] = float1;
      float float2 = 10.0F;
      floatArray0[2] = float2;
      float float3 = (-1811.8662F);
      floatArray0[3] = float3;
      float float4 = Float.POSITIVE_INFINITY;
      floatArray0[4] = float4;
      short[] shortArray0 = new short[5];
      short short0 = (short) (-1);
      shortArray0[0] = short0;
      short short1 = (short) (-246);
      shortArray0[1] = short1;
      short short2 = (short)1201;
      shortArray0[2] = short2;
      short short3 = (short) (-750);
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      float float5 = (-1951.1707F);
      tFloatShortHashMap0.containsKey(float5);
      assertEquals(5, tFloatShortHashMap0.size());
      assertEquals("{10.0=1201, -1811.8662=-750, Infinity=0, -372.627=-246, -1.0=-1}", tFloatShortHashMap0.toString());
      assertEquals(11, tFloatShortHashMap0.capacity());
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-396);
      short short0 = (short)1780;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap();
      tFloatShortHashMap1.increment((float) short0);
      tFloatShortHashMap1.size();
      tFloatShortHashMap1.values();
      float float0 = (-506.4742F);
      tFloatShortHashMap1.get(float0);
      float float1 = tFloatShortHashMap1.getAutoCompactionFactor();
      int int1 = 31;
      TFloatShortHashMap tFloatShortHashMap2 = new TFloatShortHashMap(int1);
      float float2 = tFloatShortHashMap1.getAutoCompactionFactor();
      short short1 = tFloatShortHashMap1.putIfAbsent(float1, short0);
      int int2 = 0;
      TFloatShortHashMap tFloatShortHashMap3 = new TFloatShortHashMap(int2);
      tFloatShortHashMap2.isEmpty();
      tFloatShortHashMap3.trimToSize();
      tFloatShortHashMap3.remove(float2);
      TFloatShortHashMap tFloatShortHashMap4 = new TFloatShortHashMap(int0, (float) int0, (float) int0, short0);
      tFloatShortHashMap2.isEmpty();
      float float3 = 1.0F;
      tFloatShortHashMap4.setAutoCompactionFactor(float3);
      Object object0 = null;
      AbstractMap.SimpleEntry<Float, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Float, Object>((Float) float0, object0);
      abstractMap_SimpleEntry0.getKey();
      float float4 = 10.0F;
      TFloatShortHashMap tFloatShortHashMap5 = new TFloatShortHashMap((int) short0, float4);
      abstractMap_SimpleEntry0.setValue(object0);
      float float5 = 1647.7604F;
      float float6 = 0.0F;
      TFloatShortHashMap tFloatShortHashMap6 = new TFloatShortHashMap(int1, float5, float6, short1);
      assertEquals(1, tFloatShortHashMap1.size());
      assertEquals(true, tFloatShortHashMap6.isEmpty());
  }

//   @Test
//   public void test7()  throws Throwable  {
//       float[] floatArray0 = new float[5];
//       float float0 = 0.0F;
//       floatArray0[0] = float0;
//       float float1 = 295.0157F;
//       floatArray0[1] = float1;
//       float float2 = 10.0F;
//       floatArray0[2] = float2;
//       float float3 = 619.20685F;
//       floatArray0[3] = float3;
//       float float4 = 0.0F;
//       floatArray0[4] = float4;
//       short[] shortArray0 = new short[7];
//       short short0 = (short)1360;
//       shortArray0[0] = short0;
//       short short1 = (short)1553;
//       shortArray0[1] = short1;
//       short short2 = (short) (-1735);
//       shortArray0[2] = short2;
//       short short3 = (short)0;
//       shortArray0[3] = short3;
//       short short4 = (short)457;
//       shortArray0[4] = short4;
//       short short5 = (short)0;
//       shortArray0[5] = short5;
//       short short6 = (short)0;
//       shortArray0[6] = short6;
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
//       tFloatShortHashMap0.compact();
//       assertEquals("{295.0157=1553, 10.0=-1735, 619.20685=0, 0.0=457}", tFloatShortHashMap0.toString());
//       
//       int int0 = (-519);
//       short short7 = (short)1540;
//       int int1 = 1778;
//       float float5 = (-261.5701F);
//       short short8 = (short)916;
//       TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap(int1, float5, (float) int1, short8);
//       tFloatShortHashMap1.iterator();
//       TFloatShortHashMap tFloatShortHashMap2 = new TFloatShortHashMap(int0, (float) short7);
//       TFloatShortHashMap tFloatShortHashMap3 = new TFloatShortHashMap();
//       tFloatShortHashMap2.putAll((TFloatShortMap) tFloatShortHashMap3);
//       int int2 = 0;
//       TFloatShortHashMap tFloatShortHashMap4 = new TFloatShortHashMap(int2, int2);
//       TFloatShortHashMap tFloatShortHashMap5 = new TFloatShortHashMap(int0, (float) int0, (float) int0, short7);
//       TFloatShortHashMap tFloatShortHashMap6 = new TFloatShortHashMap((TFloatShortMap) tFloatShortHashMap5);
//       TFloatShortHashMap tFloatShortHashMap7 = new TFloatShortHashMap((TFloatShortMap) tFloatShortHashMap6);
//       tFloatShortHashMap7.keys(tFloatShortHashMap5._set);
//       assertEquals((-519.0F), tFloatShortHashMap7.getNoEntryKey(), 0.01F);
//   }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 1;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int0, int0);
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap();
      tFloatShortHashMap0.putAll((TFloatShortMap) tFloatShortHashMap1);
      TFloatShortHashMap tFloatShortHashMap2 = new TFloatShortHashMap();
      short[] shortArray0 = new short[7];
      short short0 = (short)0;
      boolean boolean0 = false;
      tFloatShortHashMap2.reenableAutoCompaction(boolean0);
      shortArray0[0] = short0;
      short short1 = (short)27121;
      shortArray0[1] = short1;
      short short2 = (short) (-1);
      shortArray0[2] = short2;
      short short3 = (short)1910;
      shortArray0[3] = short3;
      short short4 = (short) (-1904);
      TFloatShortHashMap tFloatShortHashMap3 = new TFloatShortHashMap(tFloatShortHashMap2._set, shortArray0);
      shortArray0[4] = short4;
      short short5 = (short) (-1640);
      shortArray0[5] = short5;
      short short6 = (short) (-21621);
      shortArray0[6] = short6;
      TFloatShortHashMap tFloatShortHashMap4 = new TFloatShortHashMap(tFloatShortHashMap2._set, shortArray0);
      tFloatShortHashMap2.putAll((TFloatShortMap) tFloatShortHashMap4);
      assertEquals(1, tFloatShortHashMap2.size());
      assertTrue(tFloatShortHashMap4.equals(tFloatShortHashMap2));
  }

  @Test
  public void test9()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      String string0 = locale0.getDisplayCountry();
      String string1 = locale0.getCountry();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>((Object) string0, (Object) string1);
      abstractMap_SimpleImmutableEntry0.equals((Object) string0);
      int int0 = 1482707;
      float float0 = 0.0F;
      float float1 = 1.0F;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      assertEquals(23, tFloatShortHashMap0.capacity());
      
      short short0 = (short)1541;
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap(int0, float0, float1, short0);
      float float2 = (-1115.6152F);
      short short1 = tFloatShortHashMap1.get(float2);
      assertEquals((short)1541, short1);
  }

//   @Test
//   public void test10()  throws Throwable  {
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
//       short[] shortArray0 = new short[10];
//       short short0 = (short) (-1);
//       shortArray0[0] = short0;
//       short short1 = (short) (-428);
//       shortArray0[1] = short1;
//       short short2 = (short) (-478);
//       shortArray0[2] = short2;
//       short short3 = (short) (-1468);
//       shortArray0[3] = short3;
//       short short4 = (short)0;
//       shortArray0[4] = short4;
//       short short5 = (short)1685;
//       shortArray0[5] = short5;
//       short short6 = (short)305;
//       shortArray0[6] = short6;
//       short short7 = (short)399;
//       shortArray0[7] = short7;
//       short short8 = (short)0;
//       shortArray0[8] = short8;
//       short short9 = (short) (-845);
//       shortArray0[9] = short9;
//       tFloatShortHashMap0.values(shortArray0);
//       short short10 = (short) (-1985);
//       Short short11 = new Short(short10);
//       Short.toString(short10);
//       short11.longValue();
//       AbstractMap.SimpleEntry<Short, Short> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Short, Short>(short11, (Short) short10);
//       Short short12 = abstractMap_SimpleEntry0.getValue();
//       assertEquals((-1985.0F), short12.floatValue(), 0.01F);
//   }

  @Test
  public void test11()  throws Throwable  {
      TFloatShortMap tFloatShortMap0 = null;
      TFloatShortHashMap tFloatShortHashMap0 = null;
      try {
        tFloatShortHashMap0 = new TFloatShortHashMap(tFloatShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test12()  throws Throwable  {
//       int int0 = 673;
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
//       tFloatShortHashMap0.capacity();
//       TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap(int0);
//       TFloatShortHashMap tFloatShortHashMap2 = new TFloatShortHashMap((TFloatShortMap) tFloatShortHashMap1);
//       tFloatShortHashMap2.getAutoCompactionFactor();
//       tFloatShortHashMap2.tempDisableAutoCompaction();
//       assertEquals(23, tFloatShortHashMap2.capacity());
//       assertEquals(0.0F, tFloatShortHashMap2.getNoEntryKey(), 0.01F);
//   }

  @Test
  public void test13()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      float float2 = 0.0F;
      floatArray0[2] = float2;
      float float3 = (-2033.6475F);
      floatArray0[3] = float3;
      float float4 = (-1.0F);
      floatArray0[4] = float4;
      float float5 = 0.0F;
      floatArray0[5] = float5;
      float float6 = (-1697.8685F);
      floatArray0[6] = float6;
      float float7 = 430.71255F;
      floatArray0[7] = float7;
      float float8 = 0.0F;
      floatArray0[8] = float8;
      short[] shortArray0 = new short[9];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)886;
      shortArray0[4] = short4;
      short short5 = (short) (-1);
      shortArray0[5] = short5;
      short short6 = (short)115;
      shortArray0[6] = short6;
      short short7 = (short)0;
      shortArray0[7] = short7;
      short short8 = (short)0;
      shortArray0[8] = short8;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      tFloatShortHashMap0.keySet();
      assertEquals(5, tFloatShortHashMap0.size());
      assertEquals("{-1.0=886, 430.71255=0, -2033.6475=0, -1697.8685=115, 0.0=0}", tFloatShortHashMap0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 226379;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap((TFloatShortMap) tFloatShortHashMap0);
      float float0 = (-423.09088F);
      short short0 = (short)201;
      tFloatShortHashMap1.put(float0, short0);
      tFloatShortHashMap0.keys();
      assertFalse(tFloatShortHashMap0.equals(tFloatShortHashMap1));
      
      TFloatShortHashMap tFloatShortHashMap2 = new TFloatShortHashMap();
      float float1 = (-154.94449F);
      short short1 = (short)999;
      tFloatShortHashMap2.ensureCapacity((int) short1);
      int int1 = 1275;
      TFloatShortHashMap tFloatShortHashMap3 = new TFloatShortHashMap(int1);
      TFloatShortHashMap tFloatShortHashMap4 = new TFloatShortHashMap(int0, float1, (float) int0, short1);
      boolean boolean0 = tFloatShortHashMap4.adjustValue((float) short1, short1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap((TFloatShortMap) tFloatShortHashMap0);
      float float0 = 1.0F;
      short short0 = (short) (-2047);
      tFloatShortHashMap1.put(float0, short0);
      assertEquals(1, tFloatShortHashMap1.size());
      
      int int0 = (-2033);
      TFloatShortHashMap tFloatShortHashMap2 = new TFloatShortHashMap(int0);
      int int1 = 1437356741;
      TFloatShortHashMap tFloatShortHashMap3 = new TFloatShortHashMap(int1);
      float float1 = 10.0F;
      short short1 = (short)0;
      tFloatShortHashMap2.putIfAbsent(float1, short1);
      byte[] byteArray0 = tFloatShortHashMap3._states;
      tFloatShortHashMap2.tempDisableAutoCompaction();
      float float2 = 42.404755F;
      short short2 = (short)0;
      tFloatShortHashMap3.put(float2, short2);
      tFloatShortHashMap3.keySet();
      TFloatShortHashMap tFloatShortHashMap4 = new TFloatShortHashMap();
      tFloatShortHashMap3.size();
      TShortFunction tShortFunction0 = null;
      tFloatShortHashMap4.transformValues(tShortFunction0);
      boolean boolean0 = tFloatShortHashMap2.increment((float) int0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 1264;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int0);
      boolean boolean0 = false;
      tFloatShortHashMap0.reenableAutoCompaction(boolean0);
      assertEquals(2557, tFloatShortHashMap0.capacity());
      
      float float0 = 1.0F;
      short short0 = (short)12203;
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap(int0, (float) int0, float0, short0);
      tFloatShortHashMap1.keySet();
      tFloatShortHashMap1.getNoEntryKey();
      short[] shortArray0 = new short[10];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      short short1 = (short)1059;
      shortArray0[4] = short1;
      int int1 = tFloatShortHashMap1.hashCode();
      assertEquals(0, int1);
      
      tFloatShortHashMap1.getAutoCompactionFactor();
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      tFloatShortHashMap1.ensureCapacity((int) shortArray0[4]);
      assertEquals("{}", tFloatShortHashMap1.toString());
      
      short short2 = (short)0;
      shortArray0[7] = short2;
      shortArray0[8] = short0;
      shortArray0[9] = short0;
      short[] shortArray1 = tFloatShortHashMap1.values(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, tFloatShortHashMap1.capacity());
      assertSame(shortArray0, shortArray1);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 43853;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int0, int0);
      assertEquals(0, tFloatShortHashMap0.size());
  }
}
