/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TByteCollection;
import gnu.trove.map.TFloatByteMap;
import gnu.trove.map.hash.TFloatByteHashMap;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatByteHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap();
      int int0 = 127;
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap();
      String string0 = "Y(";
      File file0 = new File(string0, string0);
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Y(/Y( (No such file or directory)
         //
      }
  }

//   @Test
//   public void test1()  throws Throwable  {
//       int int0 = 0;
//       TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap();
//       TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap((TFloatByteMap) tFloatByteHashMap0);
//       tFloatByteHashMap0.getAutoCompactionFactor();
//       tFloatByteHashMap1.putAll((TFloatByteMap) tFloatByteHashMap0);
//       tFloatByteHashMap1.iterator();
//       assertEquals(0, tFloatByteHashMap1.getNoEntryValue());
//       assertEquals(23, tFloatByteHashMap1.capacity());
//       assertEquals(0.0F, tFloatByteHashMap1.getNoEntryKey(), 0.01F);
//       
//       float float0 = (-43.969612F);
//       TFloatByteHashMap tFloatByteHashMap2 = new TFloatByteHashMap(int0, float0);
//       TFloatByteHashMap tFloatByteHashMap3 = new TFloatByteHashMap((TFloatByteMap) tFloatByteHashMap2);
//       assertEquals(0, tFloatByteHashMap2.getNoEntryValue());
//       assertEquals(0.0F, tFloatByteHashMap2.getNoEntryKey(), 0.01F);
//       assertEquals(0, tFloatByteHashMap3.getNoEntryValue());
//   }

  @Test
  public void test2()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(int0);
      String string0 = "z>(";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // z>(
         //
      }
  }

//   @Test
//   public void test3()  throws Throwable  {
//       float[] floatArray0 = new float[5];
//       float float0 = 0.0F;
//       floatArray0[0] = float0;
//       float float1 = 1862.2122F;
//       floatArray0[1] = float1;
//       float float2 = 6.6360896E8F;
//       floatArray0[2] = float2;
//       float float3 = 0.0F;
//       floatArray0[3] = float3;
//       float float4 = (-1.0F);
//       floatArray0[4] = float4;
//       byte[] byteArray0 = new byte[10];
//       byte byte0 = (byte) (-112);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)0;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)0;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte) (-1);
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)0;
//       byteArray0[4] = byte4;
//       byte byte5 = (byte) (-123);
//       byteArray0[5] = byte5;
//       byte byte6 = (byte)0;
//       byteArray0[6] = byte6;
//       byte byte7 = (byte) (-124);
//       byteArray0[7] = byte7;
//       byte byte8 = (byte) (-1);
//       byteArray0[8] = byte8;
//       byte byte9 = (byte)0;
//       byteArray0[9] = byte9;
//       TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
//       TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap((TFloatByteMap) tFloatByteHashMap0);
//       tFloatByteHashMap1.getAutoCompactionFactor();
//       assertEquals(0.0F, tFloatByteHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals("{-1.0=0, 6.6360896E8=0, 1862.2122=0, 0.0=-1}", tFloatByteHashMap0.toString());
//       assertEquals("{-1.0=0, 1862.2122=0, 6.6360896E8=0, 0.0=-1}", tFloatByteHashMap1.toString());
//       assertEquals(4, tFloatByteHashMap0.size());
//   }

  @Test
  public void test4()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = 649.81274F;
      floatArray0[1] = float1;
      float float2 = 730.7512F;
      floatArray0[2] = float2;
      float float3 = 770.5992F;
      floatArray0[3] = float3;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-33);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)113;
      byteArray0[2] = byte2;
      byte byte3 = (byte)43;
      byteArray0[3] = byte3;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream((int) byte3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
      }
  }

//   @Test
//   public void test5()  throws Throwable  {
//       int int0 = 1249;
//       float float0 = 434.6848F;
//       float[] floatArray0 = new float[2];
//       floatArray0[0] = float0;
//       floatArray0[1] = (float) int0;
//       byte[] byteArray0 = new byte[8];
//       byte byte0 = (byte) (-9);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)48;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)70;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte) (-50);
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)47;
//       byteArray0[4] = byte4;
//       byte byte5 = (byte)88;
//       byteArray0[5] = byte5;
//       byte byte6 = (byte)27;
//       byteArray0[6] = byte6;
//       byte byte7 = (byte)108;
//       byteArray0[7] = byte7;
//       TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
//       tFloatByteHashMap0.getNoEntryValue();
//       float float1 = (-1.0F);
//       byte byte8 = (byte) (-8);
//       TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(int0, float0, float1, byte8);
//       assertEquals(3, tFloatByteHashMap1.capacity());
//       
//       byte[] byteArray1 = new byte[5];
//       byte byte9 = (byte)95;
//       byteArray1[0] = byte9;
//       float float2 = (-1.0F);
//       float float3 = (-1.0F);
//       TFloatByteHashMap tFloatByteHashMap2 = new TFloatByteHashMap((int) byteArray1[0], float2, float3, byteArray1[0]);
//       byteArray1[1] = byte8;
//       byteArray1[2] = byte8;
//       byteArray1[3] = byte8;
//       byteArray1[4] = byte8;
//       tFloatByteHashMap1._states = byteArray1;
//       assertEquals(-8, tFloatByteHashMap1.getNoEntryValue());
//   }

  @Test
  public void test6()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = Float.POSITIVE_INFINITY;
      floatArray0[1] = float1;
      float float2 = 0.0F;
      floatArray0[2] = float2;
      float float3 = (-1128.7009F);
      floatArray0[3] = float3;
      float float4 = 0.5F;
      floatArray0[4] = float4;
      float float5 = 1932.6537F;
      floatArray0[5] = float5;
      float float6 = 0.0F;
      floatArray0[6] = float6;
      float float7 = 6.6360896E8F;
      floatArray0[7] = float7;
      float float8 = 1205.8986F;
      floatArray0[8] = float8;
      float float9 = 593.85693F;
      floatArray0[9] = float9;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-12);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-41);
      byteArray0[2] = byte2;
      byte byte3 = (byte)34;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-22);
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-1);
      byteArray0[7] = byte7;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      float float10 = 1.0F;
      byte byte8 = tFloatByteHashMap0.get(float10);
      assertEquals("{1932.6537=0, -1128.7009=34, 0.5=0, 6.6360896E8=-1, Infinity=-12, 0.0=-22}", tFloatByteHashMap0.toString());
      assertEquals(6, tFloatByteHashMap0.size());
      assertEquals((byte)0, byte8);
  }

//   @Test
//   public void test7()  throws Throwable  {
//       int int0 = 0;
//       int int1 = 0;
//       float[] floatArray0 = new float[1];
//       floatArray0[0] = (float) int1;
//       byte[] byteArray0 = new byte[5];
//       byte byte0 = (byte) (-27);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)0;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)0;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte) (-1);
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)0;
//       byteArray0[4] = byte4;
//       TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
//       tFloatByteHashMap0.clear();
//       float float0 = Float.NEGATIVE_INFINITY;
//       TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap();
//       float float1 = (-1245.9094F);
//       byte byte5 = (byte)0;
//       tFloatByteHashMap1.put(float1, byte5);
//       assertEquals(1, tFloatByteHashMap1.size());
//       
//       byte byte6 = (byte)13;
//       TFloatByteHashMap tFloatByteHashMap2 = new TFloatByteHashMap(int1, (float) int1, float0, byte6);
//       tFloatByteHashMap2.clear();
//       TFloatByteHashMap tFloatByteHashMap3 = new TFloatByteHashMap(int0);
//       TFloatByteHashMap tFloatByteHashMap4 = new TFloatByteHashMap((TFloatByteMap) tFloatByteHashMap3);
//       int int2 = 1783;
//       TFloatByteHashMap tFloatByteHashMap5 = new TFloatByteHashMap(int2);
//       TFloatByteHashMap tFloatByteHashMap6 = new TFloatByteHashMap((TFloatByteMap) tFloatByteHashMap4);
//       TFloatByteHashMap tFloatByteHashMap7 = new TFloatByteHashMap();
//       byte byte7 = (byte)0;
//       tFloatByteHashMap7.containsValue(byte7);
//       TFloatByteHashMap tFloatByteHashMap8 = new TFloatByteHashMap();
//       tFloatByteHashMap8.increment((float) int0);
//       float float2 = (-1544.4557F);
//       byte byte8 = (byte) (-1);
//       TFloatByteHashMap tFloatByteHashMap9 = new TFloatByteHashMap(int0, float2, float2, byte8);
//       TFloatByteHashMap tFloatByteHashMap10 = new TFloatByteHashMap();
//       tFloatByteHashMap10.toString();
//       TFloatByteHashMap tFloatByteHashMap11 = new TFloatByteHashMap(int0);
//       tFloatByteHashMap11.ensureCapacity(int0);
//       tFloatByteHashMap9.size();
//       assertEquals(-1, tFloatByteHashMap9.getNoEntryValue());
//   }

  @Test
  public void test8()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap();
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap((TFloatByteMap) tFloatByteHashMap0);
      float float0 = (-421.9051F);
      PipedOutputStream pipedOutputStream0 = null;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      byte byte0 = (byte)0;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(int0, (float) int0, (float) int0, byte0);
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap();
      tFloatByteHashMap1.clear();
      tFloatByteHashMap1.trimToSize();
      tFloatByteHashMap1.isEmpty();
      int int1 = 0;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 1030;
      byte byte0 = (byte) (-1);
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(int0, (float) int0, (float) int0, byte0);
      int int1 = 50004791;
      float float0 = 6.6360896E8F;
      float float1 = (-422.76147F);
      tFloatByteHashMap0.putIfAbsent(float1, byte0);
      float float2 = 1307.462F;
      tFloatByteHashMap0.increment(float2);
      boolean boolean0 = tFloatByteHashMap0.adjustValue(float2, byte0);
      byte byte1 = (byte) (-1);
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(int1, float0, float1, byte1);
      tFloatByteHashMap1.reenableAutoCompaction(boolean0);
      assertEquals(false, tFloatByteHashMap0.isEmpty());
      assertEquals("{-422.76147=-1}", tFloatByteHashMap0.toString());
  }

//   @Test
//   public void test11()  throws Throwable  {
//       float[] floatArray0 = new float[1];
//       float float0 = (-1.0F);
//       floatArray0[0] = float0;
//       byte[] byteArray0 = new byte[4];
//       byte byte0 = (byte)30;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)0;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte) (-15);
//       byteArray0[2] = byte2;
//       byte byte3 = (byte)1;
//       byteArray0[3] = byte3;
//       TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
//       assertEquals(11, tFloatByteHashMap0.capacity());
//       assertEquals("{-1.0=30}", tFloatByteHashMap0.toString());
//       
//       int int0 = (-1660);
//       TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(int0, int0);
//       tFloatByteHashMap1.compact();
//       assertEquals(0, tFloatByteHashMap1.getNoEntryValue());
//       assertEquals(0.0F, tFloatByteHashMap1.getNoEntryKey(), 0.01F);
//       
//       TFloatByteHashMap tFloatByteHashMap2 = new TFloatByteHashMap(int0);
//       assertEquals(0, tFloatByteHashMap2.getNoEntryValue());
//       assertEquals(0.0F, tFloatByteHashMap2.getNoEntryKey(), 0.01F);
//   }

  @Test
  public void test12()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = 1.0F;
      floatArray0[0] = float0;
      float float1 = (-978.5388F);
      floatArray0[1] = float1;
      float float2 = (-1978.9414F);
      floatArray0[2] = float2;
      float float3 = 0.0F;
      floatArray0[3] = float3;
      float float4 = 0.0F;
      floatArray0[4] = float4;
      float float5 = (-84.89088F);
      floatArray0[5] = float5;
      float float6 = 0.0F;
      floatArray0[6] = float6;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-128);
      byteArray0[0] = byte0;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      TFloatByteMap tFloatByteMap0 = null;
      TFloatByteHashMap tFloatByteHashMap1 = null;
      try {
        tFloatByteHashMap1 = new TFloatByteHashMap(tFloatByteMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-1);
      float float0 = (-53.830162F);
      int int1 = 1869;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap();
      tFloatByteHashMap0.remove((float) int0);
      float float1 = (-1043.6963F);
      byte byte0 = (byte) (-5);
      File file0 = null;
      boolean boolean0 = false;
      FileOutputStream fileOutputStream0 = null;
      try {
        fileOutputStream0 = new FileOutputStream(file0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name can't be null
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap();
          float[] floatArray0 = new float[2];
          float float0 = 1566.3971F;
          floatArray0[0] = float0;
          float float1 = 1.0F;
          floatArray0[1] = float1;
          tFloatByteHashMap0.keys(floatArray0);
          int int0 = 0;
          float float2 = 0.0F;
          TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(int0, float2);
          boolean boolean0 = true;
          tFloatByteHashMap0.reenableAutoCompaction(boolean0);
          tFloatByteHashMap0.isEmpty();
          String string0 = "3MU<F2?x_G_[8b;)";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

//   @Test
//   public void test15()  throws Throwable  {
//       float[] floatArray0 = new float[4];
//       float float0 = 47.076927F;
//       floatArray0[0] = float0;
//       float float1 = (-1.0F);
//       floatArray0[1] = float1;
//       float float2 = 0.0F;
//       floatArray0[2] = float2;
//       float float3 = 10.0F;
//       floatArray0[3] = float3;
//       byte[] byteArray0 = new byte[4];
//       byte byte0 = (byte)1;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)0;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)0;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte) (-51);
//       byteArray0[3] = byte3;
//       TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
//       tFloatByteHashMap0.putIfAbsent((float) byte1, byteArray0[2]);
//       assertEquals(4, tFloatByteHashMap0.size());
//       assertEquals("{47.076927=1, 10.0=-51, -1.0=0, 0.0=0}", tFloatByteHashMap0.toString());
//       assertEquals(0, tFloatByteHashMap0.getNoEntryValue());
//       assertEquals(0.0F, tFloatByteHashMap0.getNoEntryKey(), 0.01F);
//   }

//   @Test
//   public void test16()  throws Throwable  {
//       int int0 = 218;
//       byte byte0 = (byte) (-102);
//       TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(int0, (float) int0, (float) int0, byte0);
//       TByteCollection tByteCollection0 = tFloatByteHashMap0.valueCollection();
//       assertEquals(-102, tFloatByteHashMap0.getNoEntryValue());
//       assertEquals(218.0F, tFloatByteHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals(-102, tByteCollection0.getNoEntryValue());
//   }

//   @Test
//   public void test17()  throws Throwable  {
//       float[] floatArray0 = new float[4];
//       float float0 = 0.0F;
//       floatArray0[0] = float0;
//       float float1 = 1365.4807F;
//       floatArray0[1] = float1;
//       float float2 = 0.0F;
//       floatArray0[2] = float2;
//       float float3 = (-1376.5883F);
//       floatArray0[3] = float3;
//       byte[] byteArray0 = new byte[8];
//       byte byte0 = (byte) (-1);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)0;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)113;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte)0;
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)0;
//       byteArray0[4] = byte4;
//       byte byte5 = (byte)85;
//       byteArray0[5] = byte5;
//       byte byte6 = (byte)57;
//       byteArray0[6] = byte6;
//       byte byte7 = (byte)0;
//       byteArray0[7] = byte7;
//       TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
//       String string0 = tFloatByteHashMap0.toString();
//       assertEquals(0.0F, tFloatByteHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals(3, tFloatByteHashMap0.size());
//       assertEquals("{-1376.5883=0, 1365.4807=0, 0.0=113}", string0);
//       assertNotNull(string0);
//       assertEquals(0, tFloatByteHashMap0.getNoEntryValue());
//       assertEquals(17, tFloatByteHashMap0.capacity());
//   }
}
