/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TDoubleFunction;
import gnu.trove.map.TFloatDoubleMap;
import gnu.trove.map.hash.TFloatDoubleHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.procedure.TFloatDoubleProcedure;
import gnu.trove.procedure.TFloatProcedure;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatDoubleHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.keySet()Lgnu/trove/set/TFloatSet;: root-Branch
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TFloatDoubleHashMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TFloatDoubleHashMap.setUp(I)I: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      tFloatDoubleHashMap0.keySet();
      assertEquals(23, tFloatDoubleHashMap0.capacity());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.containsKey(F)Z: root-Branch
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap((-17));
      boolean boolean0 = tFloatDoubleHashMap0.containsKey((float) (-17));
      assertEquals(false, boolean0);
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.increment(F)Z: root-Branch
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.adjustValue(FD)Z: I9 Branch 71 IFGE L477 - false
   */

  @Test
  public void test2()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(0);
      boolean boolean0 = tFloatDoubleHashMap0.increment((-1201.0312F));
      assertEquals(false, boolean0);
  }

  //Test case number: 3
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.put(FD)D: root-Branch
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap.<init>([F[D)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 4 gnu.trove.map.hash.TFloatDoubleHashMap.<init>([F[D)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 5 gnu.trove.map.hash.TFloatDoubleHashMap.doPut(FDI)D: I12 Branch 40 IFGE L214 - true
   * 6 gnu.trove.map.hash.TFloatDoubleHashMap.doPut(FDI)D: I12 Branch 40 IFGE L214 - false
   * 7 gnu.trove.map.hash.TFloatDoubleHashMap.doPut(FDI)D: I41 Branch 41 IFEQ L221 - true
   * 8 gnu.trove.map.hash.TFloatDoubleHashMap.doPut(FDI)D: I41 Branch 41 IFEQ L221 - false
   * 9 gnu.trove.map.hash.TFloatDoubleHashMap.remove(F)D: I14 Branch 46 IFLT L276 - false
   */

  @Test
  public void test3()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = 1.0F;
      double[] doubleArray0 = new double[9];
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      assertEquals(2, tFloatDoubleHashMap0.size());
      
      double double0 = tFloatDoubleHashMap0.remove(1.0F);
      assertEquals("{0.0=0.0}", tFloatDoubleHashMap0.toString());
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.clear()V: root-Branch
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(0, 0);
      tFloatDoubleHashMap0.clear();
      assertEquals("{}", tFloatDoubleHashMap0.toString());
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.valueCollection()Lgnu/trove/TDoubleCollection;: root-Branch
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap$TValueView.<init>(Lgnu/trove/map/hash/TFloatDoubleHashMap;)V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(31);
      tFloatDoubleHashMap0.valueCollection();
      assertEquals(67, tFloatDoubleHashMap0.capacity());
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap((-1428), (-1428));
      boolean boolean0 = tFloatDoubleHashMap0.forEachKey((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 7
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap$TFloatDoubleHashIterator.value()D: root-Branch
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap$TFloatDoubleHashIterator.advance()V: root-Branch
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap$TFloatDoubleHashIterator.key()F: root-Branch
   * 4 gnu.trove.map.hash.TFloatDoubleHashMap.putAll(Lgnu/trove/map/TFloatDoubleMap;)V: I15 Branch 43 IFEQ L243 - false
   * 5 gnu.trove.map.hash.TFloatDoubleHashMap.iterator()Lgnu/trove/iterator/TFloatDoubleIterator;: root-Branch
   * 6 gnu.trove.map.hash.TFloatDoubleHashMap.<init>(Lgnu/trove/map/TFloatDoubleMap;)V: I10 Branch 34 IFEQ L133 - false
   * 7 gnu.trove.map.hash.TFloatDoubleHashMap.<init>(Lgnu/trove/map/TFloatDoubleMap;)V: I40 Branch 35 IFEQ L139 - true
   * 8 gnu.trove.map.hash.TFloatDoubleHashMap.<init>(Lgnu/trove/map/TFloatDoubleMap;)V: I54 Branch 36 IFEQ L143 - true
   * 9 gnu.trove.map.hash.TFloatDoubleHashMap.putAll(Lgnu/trove/map/TFloatDoubleMap;)V: I15 Branch 43 IFEQ L243 - true
   * 10 gnu.trove.map.hash.TFloatDoubleHashMap$TFloatDoubleHashIterator.<init>(Lgnu/trove/map/hash/TFloatDoubleHashMap;Lgnu/trove/map/hash/TFloatDoubleHashMap;)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(1);
      tFloatDoubleHashMap0.put((float) (-385), 0.0);
      TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      assertEquals(false, tFloatDoubleHashMap0.isEmpty());
      assertEquals(23, tFloatDoubleHashMap1.capacity());
  }

  //Test case number: 8
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.<init>(Lgnu/trove/map/TFloatDoubleMap;)V: I40 Branch 35 IFEQ L139 - false
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.<init>(Lgnu/trove/map/TFloatDoubleMap;)V: I54 Branch 36 IFEQ L143 - false
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap.<init>(IFFD)V: root-Branch
   */

//   @Test
//   public void test8()  throws Throwable  {
//       TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap((-1240), 842.42084F, (float) (-1240), (double) (-1240));
//       TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap((TFloatDoubleMap) tFloatDoubleHashMap0);
//       assertEquals((-1240.0), tFloatDoubleHashMap1.getNoEntryValue(), 0.01D);
//       assertEquals((-1240.0F), tFloatDoubleHashMap1.getNoEntryKey(), 0.01F);
//       assertEquals(3, tFloatDoubleHashMap1.capacity());
//   }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.putIfAbsent(FD)D: I9 Branch 39 IFGE L205 - false
   */

  @Test
  public void test9()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = 1.0F;
      double[] doubleArray0 = new double[9];
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      double double0 = tFloatDoubleHashMap0.putIfAbsent((float) 1, (double) 10.0F);
      assertEquals("{1.0=0.0, 0.0=0.0}", tFloatDoubleHashMap0.toString());
      assertEquals(23, tFloatDoubleHashMap0.capacity());
      assertEquals(2, tFloatDoubleHashMap0.size());
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 10
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.get(F)D: I9 Branch 44 IFGE L253 - true
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 4 gnu.trove.map.hash.TFloatDoubleHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 5 gnu.trove.map.hash.TFloatDoubleHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 6 gnu.trove.map.hash.TFloatDoubleHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 7 gnu.trove.map.hash.TFloatDoubleHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 8 gnu.trove.map.hash.TFloatDoubleHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - true
   * 9 gnu.trove.map.hash.TFloatDoubleHashMap.putIfAbsent(FD)D: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test10()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(0);
      tFloatDoubleHashMap0.putIfAbsent((float) 0, (double) 0);
      boolean boolean0 = tFloatDoubleHashMap0.equals((Object) tFloatDoubleHashMap0);
      assertEquals("{0.0=0.0}", tFloatDoubleHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 11
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.get(F)D: I9 Branch 44 IFGE L253 - false
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - false
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap.equals(Ljava/lang/Object;)Z: I89 Branch 79 IFEQ L1200 - false
   * 4 gnu.trove.map.hash.TFloatDoubleHashMap.equals(Ljava/lang/Object;)Z: I93 Branch 80 IFEQ L1200 - true
   * 5 gnu.trove.map.hash.TFloatDoubleHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 6 gnu.trove.map.hash.TFloatDoubleHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 7 gnu.trove.map.hash.TFloatDoubleHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 8 gnu.trove.map.hash.TFloatDoubleHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 9 gnu.trove.map.hash.TFloatDoubleHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   */

  @Test
  public void test11()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap((-1));
      tFloatDoubleHashMap0.putIfAbsent(1628.2454F, (double) (-1));
      TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap((-1));
      tFloatDoubleHashMap0._set = tFloatDoubleHashMap1._set;
      boolean boolean0 = tFloatDoubleHashMap0.equals((Object) tFloatDoubleHashMap0);
      assertEquals(1, tFloatDoubleHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   */

  @Test
  public void test12()  throws Throwable  {
      float[] floatArray0 = new float[5];
      double[] doubleArray0 = new double[10];
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      boolean boolean0 = tFloatDoubleHashMap0.isEmpty();
      assertEquals(23, tFloatDoubleHashMap0.capacity());
      assertEquals(1, tFloatDoubleHashMap0.size());
      assertEquals("{0.0=0.0}", tFloatDoubleHashMap0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test13()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(31);
      boolean boolean0 = tFloatDoubleHashMap0.isEmpty();
      assertEquals(67, tFloatDoubleHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.remove(F)D: I14 Branch 46 IFLT L276 - true
   */

  @Test
  public void test14()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      double double0 = tFloatDoubleHashMap0.remove((-310.45773F));
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0, tFloatDoubleHashMap0.size());
      assertEquals(23, tFloatDoubleHashMap0.capacity());
  }

  //Test case number: 15
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.keys()[F: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.adjustOrPutValue(FDD)D: I9 Branch 72 IFGE L491 - true
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap.adjustOrPutValue(FDD)D: I58 Branch 73 IFEQ L502 - false
   * 4 gnu.trove.map.hash.TFloatDoubleHashMap.keys()[F: I27 Branch 47 IFLE L303 - true
   * 5 gnu.trove.map.hash.TFloatDoubleHashMap.keys()[F: I27 Branch 47 IFLE L303 - false
   * 6 gnu.trove.map.hash.TFloatDoubleHashMap.keys()[F: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      tFloatDoubleHashMap0.adjustOrPutValue((float) (-560), (double) (-560), (double) (-560));
      tFloatDoubleHashMap0.keys();
      assertEquals(false, tFloatDoubleHashMap0.isEmpty());
      assertEquals("{-560.0=-560.0}", tFloatDoubleHashMap0.toString());
  }

  //Test case number: 16
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.keys([F)[F: I10 Branch 49 IF_ICMPGE L315 - true
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.keys([F)[F: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap.keys([F)[F: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TFloatDoubleHashMap.keys([F)[F: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(1);
      float[] floatArray0 = tFloatDoubleHashMap0.keys(tFloatDoubleHashMap0._set);
      assertNotNull(floatArray0);
  }

  //Test case number: 17
  /*
   * 14 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.keys([F)[F: I10 Branch 49 IF_ICMPGE L315 - false
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.keys([F)[F: I44 Branch 51 IF_ICMPNE L323 - false
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap.iterator()Lgnu/trove/iterator/TFloatDoubleIterator;: root-Branch
   * 4 gnu.trove.map.hash.TFloatDoubleHashMap.<init>(Lgnu/trove/map/TFloatDoubleMap;)V: I10 Branch 34 IFEQ L133 - false
   * 5 gnu.trove.map.hash.TFloatDoubleHashMap.<init>(Lgnu/trove/map/TFloatDoubleMap;)V: I40 Branch 35 IFEQ L139 - true
   * 6 gnu.trove.map.hash.TFloatDoubleHashMap.<init>(Lgnu/trove/map/TFloatDoubleMap;)V: I54 Branch 36 IFEQ L143 - true
   * 7 gnu.trove.map.hash.TFloatDoubleHashMap.keys()[F: I27 Branch 47 IFLE L303 - true
   * 8 gnu.trove.map.hash.TFloatDoubleHashMap.keys()[F: I27 Branch 47 IFLE L303 - false
   * 9 gnu.trove.map.hash.TFloatDoubleHashMap.keys()[F: I34 Branch 48 IF_ICMPNE L304 - true
   * 10 gnu.trove.map.hash.TFloatDoubleHashMap.putAll(Lgnu/trove/map/TFloatDoubleMap;)V: I15 Branch 43 IFEQ L243 - true
   * 11 gnu.trove.map.hash.TFloatDoubleHashMap.keys([F)[F: I37 Branch 50 IFLE L322 - true
   * 12 gnu.trove.map.hash.TFloatDoubleHashMap.keys([F)[F: I37 Branch 50 IFLE L322 - false
   * 13 gnu.trove.map.hash.TFloatDoubleHashMap.keys([F)[F: I44 Branch 51 IF_ICMPNE L323 - true
   * 14 gnu.trove.map.hash.TFloatDoubleHashMap$TFloatDoubleHashIterator.<init>(Lgnu/trove/map/hash/TFloatDoubleHashMap;Lgnu/trove/map/hash/TFloatDoubleHashMap;)V: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      tFloatDoubleHashMap1.adjustOrPutValue((float) (-560), (double) (-560), (double) (-560));
      float[] floatArray0 = tFloatDoubleHashMap0.keys();
      tFloatDoubleHashMap1.keys(floatArray0);
      assertEquals(false, tFloatDoubleHashMap1.isEmpty());
      assertEquals(23, tFloatDoubleHashMap1.capacity());
  }

  //Test case number: 18
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.values()[D: I34 Branch 53 IF_ICMPNE L344 - false
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.values()[D: I27 Branch 52 IFLE L343 - true
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap.values()[D: I27 Branch 52 IFLE L343 - false
   * 4 gnu.trove.map.hash.TFloatDoubleHashMap.values()[D: I34 Branch 53 IF_ICMPNE L344 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      tFloatDoubleHashMap0.put(1990.6766F, 2037.0720789532265);
      tFloatDoubleHashMap0.values();
      assertEquals(1, tFloatDoubleHashMap0.size());
      assertEquals("{1990.6766=2037.0720789532265}", tFloatDoubleHashMap0.toString());
  }

  //Test case number: 19
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.values([D)[D: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.values([D)[D: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap.values([D)[D: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TFloatDoubleHashMap.values([D)[D: I44 Branch 56 IF_ICMPNE L363 - true
   * 5 gnu.trove.map.hash.TFloatDoubleHashMap.values([D)[D: I44 Branch 56 IF_ICMPNE L363 - false
   */

  @Test
  public void test19()  throws Throwable  {
      float[] floatArray0 = new float[5];
      double[] doubleArray0 = new double[10];
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      double[] doubleArray1 = tFloatDoubleHashMap0.values(doubleArray0);
      assertEquals(23, tFloatDoubleHashMap0.capacity());
      assertNotNull(doubleArray1);
      assertEquals(1, tFloatDoubleHashMap0.size());
      assertEquals("{0.0=0.0}", tFloatDoubleHashMap0.toString());
      assertSame(doubleArray0, doubleArray1);
  }

  //Test case number: 20
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.values([D)[D: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.values([D)[D: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap.values([D)[D: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TFloatDoubleHashMap.values([D)[D: I44 Branch 56 IF_ICMPNE L363 - true
   * 5 gnu.trove.map.hash.TFloatDoubleHashMap.values([D)[D: I44 Branch 56 IF_ICMPNE L363 - false
   */

  @Test
  public void test20()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      tFloatDoubleHashMap0.put(1990.6766F, 2037.0720789532265);
      tFloatDoubleHashMap0.adjustOrPutValue((-310.45773F), (double) (-310.45773F), 2037.0720789532265);
      double[] doubleArray0 = new double[1];
      tFloatDoubleHashMap0.values(doubleArray0);
      assertEquals(2, tFloatDoubleHashMap0.size());
      assertEquals("{-310.45773=2037.0720789532265, 1990.6766=2037.0720789532265}", tFloatDoubleHashMap0.toString());
  }

  //Test case number: 21
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.containsValue(D)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.containsValue(D)Z: I31 Branch 59 IFNE L377 - false
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap.containsValue(D)Z: I18 Branch 57 IFLE L376 - false
   * 4 gnu.trove.map.hash.TFloatDoubleHashMap.containsValue(D)Z: I25 Branch 58 IF_ICMPNE L377 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(0);
      tFloatDoubleHashMap0.putIfAbsent((float) 0, (double) 0);
      boolean boolean0 = tFloatDoubleHashMap0.containsValue((double) 0);
      assertEquals(1, tFloatDoubleHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.containsValue(D)Z: I31 Branch 59 IFNE L377 - true
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.containsValue(D)Z: I18 Branch 57 IFLE L376 - true
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap.containsValue(D)Z: I18 Branch 57 IFLE L376 - false
   * 4 gnu.trove.map.hash.TFloatDoubleHashMap.containsValue(D)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 5 gnu.trove.map.hash.TFloatDoubleHashMap.containsValue(D)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 6 gnu.trove.map.hash.TFloatDoubleHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 7 gnu.trove.map.hash.TFloatDoubleHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 8 gnu.trove.map.hash.TFloatDoubleHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 9 gnu.trove.map.hash.TFloatDoubleHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   */

  @Test
  public void test22()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(0, 0);
      tFloatDoubleHashMap0.putIfAbsent((float) 2, (double) 2);
      boolean boolean0 = tFloatDoubleHashMap0.containsValue((double) 0);
      assertEquals(1, tFloatDoubleHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test23()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      boolean boolean0 = tFloatDoubleHashMap0.forEachValue((TDoubleProcedure) null);
      assertEquals(23, tFloatDoubleHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(0, 0, 0, 0);
      tFloatDoubleHashMap0.putIfAbsent((float) 0, (-560.9651787812709));
      // Undeclared exception!
      try {
        tFloatDoubleHashMap0.forEachValue((TDoubleProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 25
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   * 4 gnu.trove.map.hash.TFloatDoubleHashMap.<init>(IFFD)V: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap((-4), 0.0F, 0.0F, (double) 0.0F);
      tFloatDoubleHashMap0.transformValues((TDoubleFunction) null);
      assertEquals(0, tFloatDoubleHashMap0.size());
  }

  //Test case number: 26
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   * 4 gnu.trove.map.hash.TFloatDoubleHashMap.putIfAbsent(FD)D: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap((-1428), (-1428));
      tFloatDoubleHashMap0.putIfAbsent((float) (-1428), (double) (-140.39659F));
      // Undeclared exception!
      try {
        tFloatDoubleHashMap0.transformValues((TDoubleFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.retainEntries(Lgnu/trove/procedure/TFloatDoubleProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.retainEntries(Lgnu/trove/procedure/TFloatDoubleProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap.retainEntries(Lgnu/trove/procedure/TFloatDoubleProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test27()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap((-1507), 0.0F);
      boolean boolean0 = tFloatDoubleHashMap0.retainEntries((TFloatDoubleProcedure) null);
      assertEquals(3, tFloatDoubleHashMap0.capacity());
      assertEquals(false, boolean0);
      assertEquals("{}", tFloatDoubleHashMap0.toString());
  }

  //Test case number: 28
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.retainEntries(Lgnu/trove/procedure/TFloatDoubleProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.retainEntries(Lgnu/trove/procedure/TFloatDoubleProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap.retainEntries(Lgnu/trove/procedure/TFloatDoubleProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   * 4 gnu.trove.map.hash.TFloatDoubleHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   * 5 gnu.trove.map.hash.TFloatDoubleHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - false
   */

  @Test
  public void test28()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      Float float0 = new Float(1330.5520843574243);
      hashMap0.put(float0, (Double) 1330.5520843574243);
      tFloatDoubleHashMap0.putAll((Map<? extends Float, ? extends Double>) hashMap0);
      // Undeclared exception!
      try {
        tFloatDoubleHashMap0.retainEntries((TFloatDoubleProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.adjustValue(FD)Z: I9 Branch 71 IFGE L477 - true
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.increment(F)Z: root-Branch
   */

  @Test
  public void test29()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(1);
      tFloatDoubleHashMap0.put((float) (-385), 0.0);
      boolean boolean0 = tFloatDoubleHashMap0.increment((float) (-385));
      assertEquals("{-385.0=1.0}", tFloatDoubleHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.adjustOrPutValue(FDD)D: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.adjustOrPutValue(FDD)D: I58 Branch 73 IFEQ L502 - true
   */

  @Test
  public void test30()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      tFloatDoubleHashMap0.adjustOrPutValue((-310.45773F), (double) (-310.45773F), 2037.0720789532265);
      double double0 = tFloatDoubleHashMap0.adjustOrPutValue((-310.45773F), (-310.45773F), (-310.45773F));
      assertEquals(false, tFloatDoubleHashMap0.isEmpty());
      assertEquals(1726.6143457989297, double0, 0.01D);
  }

  //Test case number: 31
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.<init>([F[D)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap.<init>([F[D)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 4 gnu.trove.map.hash.TFloatDoubleHashMap.doPut(FDI)D: I12 Branch 40 IFGE L214 - false
   * 5 gnu.trove.map.hash.TFloatDoubleHashMap.doPut(FDI)D: I41 Branch 41 IFEQ L221 - true
   */

  @Test
  public void test31()  throws Throwable  {
      float[] floatArray0 = new float[6];
      double[] doubleArray0 = new double[9];
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      boolean boolean0 = tFloatDoubleHashMap0.equals((Object) "/");
      assertEquals(23, tFloatDoubleHashMap0.capacity());
      assertEquals(false, boolean0);
      assertEquals("{0.0=0.0}", tFloatDoubleHashMap0.toString());
      assertEquals(1, tFloatDoubleHashMap0.size());
  }

  //Test case number: 32
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   */

  @Test
  public void test32()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(1);
      TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap();
      tFloatDoubleHashMap1.put((float) (-385), 0.0);
      boolean boolean0 = tFloatDoubleHashMap1.equals((Object) tFloatDoubleHashMap0);
      assertEquals("{-385.0=0.0}", tFloatDoubleHashMap1.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 33
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 4 gnu.trove.map.hash.TFloatDoubleHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   */

  @Test
  public void test33()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(0, 0);
      tFloatDoubleHashMap0.adjustOrPutValue((float) 0, (double) 1250, (double) 0);
      int int0 = tFloatDoubleHashMap0.hashCode();
      assertEquals("{0.0=0.0}", tFloatDoubleHashMap0.toString());
      assertEquals(0, int0);
  }

  //Test case number: 34
  /*
   * 13 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap$1.execute(FD)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.<init>(I)V: root-Branch
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap.toString()Ljava/lang/String;: root-Branch
   * 4 gnu.trove.map.hash.TFloatDoubleHashMap.put(FD)D: root-Branch
   * 5 gnu.trove.map.hash.TFloatDoubleHashMap.doPut(FDI)D: I12 Branch 40 IFGE L214 - true
   * 6 gnu.trove.map.hash.TFloatDoubleHashMap.doPut(FDI)D: I41 Branch 41 IFEQ L221 - false
   * 7 gnu.trove.map.hash.TFloatDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TFloatDoubleProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 8 gnu.trove.map.hash.TFloatDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TFloatDoubleProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 9 gnu.trove.map.hash.TFloatDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TFloatDoubleProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 10 gnu.trove.map.hash.TFloatDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TFloatDoubleProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 11 gnu.trove.map.hash.TFloatDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TFloatDoubleProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 12 gnu.trove.map.hash.TFloatDoubleHashMap$1.<init>(Lgnu/trove/map/hash/TFloatDoubleHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 13 gnu.trove.map.hash.TFloatDoubleHashMap$1.execute(FD)Z: I4 Branch 115 IFEQ L1233 - false
   */

  @Test
  public void test34()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(31);
      tFloatDoubleHashMap0.adjustOrPutValue((float) 31, (double) 31, (double) 31);
      tFloatDoubleHashMap0.put((-1952.4368F), (double) 31);
      String string0 = tFloatDoubleHashMap0.toString();
      assertEquals(2, tFloatDoubleHashMap0.size());
      assertEquals("{-1952.4368=31.0, 31.0=31.0}", string0);
  }

  //Test case number: 35
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TFloatDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 2 gnu.trove.map.hash.TFloatDoubleHashMap.setUp(I)I: root-Branch
   * 3 gnu.trove.map.hash.TFloatDoubleHashMap.<init>(IF)V: root-Branch
   * 4 gnu.trove.map.hash.TFloatDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 5 gnu.trove.map.hash.TFloatDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 6 gnu.trove.map.hash.TFloatDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 7 gnu.trove.map.hash.TFloatDoubleHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 8 gnu.trove.map.hash.TFloatDoubleHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 9 gnu.trove.map.hash.TFloatDoubleHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 10 gnu.trove.map.hash.TFloatDoubleHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 11 gnu.trove.map.hash.TFloatDoubleHashMap.adjustOrPutValue(FDD)D: I9 Branch 72 IFGE L491 - true
   * 12 gnu.trove.map.hash.TFloatDoubleHashMap.adjustOrPutValue(FDD)D: I58 Branch 73 IFEQ L502 - false
   */

  @Test
  public void test35()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(0, 0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) byteArrayOutputStream0, 1250);
      tFloatDoubleHashMap0.adjustOrPutValue((float) 0, (double) 1250, (double) 0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) bufferedOutputStream0);
      tFloatDoubleHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(false, tFloatDoubleHashMap0.isEmpty());
      assertEquals(7, tFloatDoubleHashMap0.capacity());
  }
}
