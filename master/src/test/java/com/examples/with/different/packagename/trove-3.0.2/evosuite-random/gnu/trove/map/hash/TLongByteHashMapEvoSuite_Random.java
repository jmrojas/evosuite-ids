/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TByteCollection;
import gnu.trove.map.TLongByteMap;
import gnu.trove.map.hash.TLongByteHashMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TLongByteHashMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-1663);
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(int0, int0);
      tLongByteHashMap0.iterator();
      long long0 = 0L;
      byte byte0 = tLongByteHashMap0.remove(long0);
      assertEquals(0, tLongByteHashMap0.size());
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test1()  throws Throwable  {
      long[] longArray0 = new long[10];
      long long0 = (-1681L);
      longArray0[0] = long0;
      long long1 = (-1L);
      longArray0[1] = long1;
      long long2 = 1086L;
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      long long4 = (-377L);
      longArray0[4] = long4;
      long long5 = 1L;
      longArray0[5] = long5;
      long long6 = (-1L);
      longArray0[6] = long6;
      long long7 = (-1040L);
      longArray0[7] = long7;
      long long8 = 0L;
      longArray0[8] = long8;
      long long9 = 1869L;
      longArray0[9] = long9;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)9;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)113;
      byteArray0[2] = byte2;
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(longArray0, byteArray0);
      TByteCollection tByteCollection0 = tLongByteHashMap0.valueCollection();
      assertEquals("{1086=113, -1681=9, -1=0}", tLongByteHashMap0.toString());
      assertEquals(3, tByteCollection0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 0;
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(int0, int0);
      boolean boolean0 = false;
      tLongByteHashMap0.reenableAutoCompaction(boolean0);
      tLongByteHashMap0.keySet();
      long long0 = 993L;
      tLongByteHashMap0.containsKey(long0);
      tLongByteHashMap0.compact();
      long long1 = 0L;
      tLongByteHashMap0.contains(long0);
      tLongByteHashMap0.getNoEntryKey();
      byte byte0 = (byte) (-92);
      tLongByteHashMap0.put(long1, byte0);
      byte[] byteArray0 = tLongByteHashMap0._states;
      Long long2 = new Long(long0);
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://#
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = (-1457L);
      longArray0[0] = long0;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)120;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)26;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-118);
      byteArray0[3] = byte3;
      byte byte4 = (byte)117;
      byteArray0[4] = byte4;
      byte byte5 = (byte)27;
      byteArray0[5] = byte5;
      byte byte6 = (byte)101;
      byteArray0[6] = byte6;
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(longArray0, byteArray0);
      tLongByteHashMap0.valueCollection();
      assertEquals(17, tLongByteHashMap0.capacity());
      assertEquals("{-1457=120}", tLongByteHashMap0.toString());
      assertEquals(1, tLongByteHashMap0.size());
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 83;
          byte byte0 = (byte) (-76);
          TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(int0, (float) int0, (long) int0, byte0);
          String string0 = ", ";
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \", \" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
      long[] longArray0 = new long[10];
      long long0 = (-257L);
      longArray0[0] = long0;
      long long1 = (-1819L);
      longArray0[1] = long1;
      long long2 = 9223372036854775807L;
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      long long4 = (-405L);
      longArray0[4] = long4;
      long long5 = 0L;
      longArray0[5] = long5;
      long long6 = (-1L);
      longArray0[6] = long6;
      long long7 = 0L;
      longArray0[7] = long7;
      long long8 = 0L;
      longArray0[8] = long8;
      long long9 = (-1189L);
      longArray0[9] = long9;
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-79);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte)72;
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-68);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-22);
      byteArray0[6] = byte6;
      byte byte7 = (byte)76;
      byteArray0[7] = byte7;
      byte byte8 = (byte)10;
      byteArray0[8] = byte8;
      byte byte9 = (byte) (-2);
      byteArray0[9] = byte9;
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(longArray0, byteArray0);
      boolean boolean0 = tLongByteHashMap0.containsValue(byte4);
      assertEquals("{0=10, -1=-22, -1189=-2, -405=1, -257=0, -1819=-79, 9223372036854775807=-1}", tLongByteHashMap0.toString());
      assertEquals(true, boolean0);
      assertEquals(7, tLongByteHashMap0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      long[] longArray0 = new long[7];
      long long0 = 677L;
      longArray0[0] = long0;
      long long1 = 1344L;
      longArray0[1] = long1;
      long long2 = (-9223372036854775808L);
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      long long4 = 961L;
      longArray0[4] = long4;
      long long5 = 0L;
      longArray0[5] = long5;
      long long6 = 1434L;
      longArray0[6] = long6;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)126;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-53);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-95);
      byteArray0[4] = byte4;
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(longArray0, byteArray0);
      TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap((TLongByteMap) tLongByteHashMap0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = (-1400);
          float float0 = 441.9669F;
          TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(int0, float0);
          String string0 = "~/";
          String string1 = "}E`?#8{g?#QFFq";
          File file0 = new File(string0, string1);
          boolean boolean0 = true;
          float float1 = 0.5F;
          long long0 = 0L;
          byte byte0 = (byte)13;
          TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap(int0, float1, long0, byte0);
          tLongByteHashMap0.putAll((TLongByteMap) tLongByteHashMap1);
          tLongByteHashMap0.reenableAutoCompaction(boolean0);
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"~/}E`?#8{g?#QFFq\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:165)
             // java.io.PrintStream.<init>(PrintStream.java:279)
             // sun.reflect.GeneratedConstructorAccessor13.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      long long0 = 171L;
      byte byte0 = (byte)0;
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(int0, (float) int0, long0, byte0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byte byte1 = (byte)0;
      byteArray0[3] = byte1;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      byteArray0[6] = byte0;
      byteArray0[7] = byte0;
      byteArray0[8] = byte0;
      byte[] byteArray1 = tLongByteHashMap0.values(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      
      TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap(int0);
      boolean boolean0 = tLongByteHashMap1.isEmpty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap();
          int int0 = tLongByteHashMap0.size();
          byte byte0 = (byte)0;
          tLongByteHashMap0.clear();
          tLongByteHashMap0.putIfAbsent((long) int0, byte0);
          String string0 = "oF";
          tLongByteHashMap0.hashCode();
          boolean boolean0 = false;
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0, boolean0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"oF\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:136)
             // sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-733);
      int int1 = 8963;
      float float0 = (-1.0F);
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(int1, float0);
      TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap((TLongByteMap) tLongByteHashMap0);
      tLongByteHashMap1.contains((long) int1);
      float float1 = 1.0F;
      int int2 = (-452);
      float float2 = 0.0F;
      byte byte0 = (byte)72;
      TLongByteHashMap tLongByteHashMap2 = new TLongByteHashMap(int2, float2, (long) int2, byte0);
      TLongByteHashMap tLongByteHashMap3 = new TLongByteHashMap(int0, float1);
      tLongByteHashMap3.isEmpty();
      int int3 = 0;
      TLongByteHashMap tLongByteHashMap4 = new TLongByteHashMap(int3, int3);
      tLongByteHashMap4.clear();
      Map.Entry<Byte, Long> map_Entry0 = null;
      AbstractMap.SimpleImmutableEntry<Object, Long> abstractMap_SimpleImmutableEntry0 = null;
      try {
        abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Long>(map_Entry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 1176;
      byte byte0 = (byte)40;
      int int1 = 0;
      long long0 = 1015L;
      byte byte1 = (byte)0;
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(int1, (float) byte0, long0, byte1);
      tLongByteHashMap0.keySet();
      int int2 = 11;
      float float0 = (-849.0647F);
      TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap(int2, float0);
      long long1 = (-1L);
      tLongByteHashMap1.put(long1, byte0);
      tLongByteHashMap1.compact();
      assertEquals(1, tLongByteHashMap1.size());
      
      TLongByteHashMap tLongByteHashMap2 = new TLongByteHashMap(int0, (float) int0, (long) int0, byte0);
      tLongByteHashMap2.tempDisableAutoCompaction();
      assertFalse(tLongByteHashMap2.equals(tLongByteHashMap1));
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 189788857;
      float float0 = (-168.2699F);
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(int0, float0);
      long long0 = (-622L);
      byte byte0 = (byte) (-1);
      tLongByteHashMap0.put(long0, byte0);
      long long1 = (-1937L);
      tLongByteHashMap0.get(long1);
      TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap();
      tLongByteHashMap0.keys(tLongByteHashMap1._set);
      byte byte1 = (byte)91;
      tLongByteHashMap1.put((long) int0, byte1);
      byte byte2 = tLongByteHashMap0.get((long) int0);
      long long2 = (-795L);
      tLongByteHashMap0.isEmpty();
      long[] longArray0 = tLongByteHashMap0._set;
      boolean boolean0 = true;
      byte byte3 = (byte)0;
      tLongByteHashMap0.put((long) byte2, byte3);
      tLongByteHashMap1.toString();
      tLongByteHashMap0.iterator();
      tLongByteHashMap1.reenableAutoCompaction(boolean0);
      tLongByteHashMap1.increment(long2);
      long long3 = 0L;
      tLongByteHashMap1.containsKey(long3);
      tLongByteHashMap1.keySet();
      tLongByteHashMap1.clear();
      tLongByteHashMap0.getAutoCompactionFactor();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = locale0.getScript();
      // Undeclared exception!
      try {
        locale0.getUnicodeLocaleType(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap();
          String string0 = "";
          File file0 = new File(string0, string0);
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:165)
             // java.io.PrintStream.<init>(PrintStream.java:279)
             // sun.reflect.GeneratedConstructorAccessor13.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[7];
      long long0 = (-390L);
      longArray0[0] = long0;
      long long1 = (-1866L);
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = 391L;
      longArray0[3] = long3;
      long long4 = (-942L);
      longArray0[4] = long4;
      long long5 = 153L;
      longArray0[5] = long5;
      long long6 = (-261L);
      longArray0[6] = long6;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(longArray0, byteArray0);
      long[] longArray1 = tLongByteHashMap0._set;
      assertEquals("{-390=0}", tLongByteHashMap0.toString());
      
      int int0 = 2;
      long long7 = 0L;
      byte byte1 = (byte)0;
      TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap(int0, (float) int0, long7, byte1);
      int int1 = 0;
      TLongByteHashMap tLongByteHashMap2 = new TLongByteHashMap(int1);
      int int2 = tLongByteHashMap2.hashCode();
      assertFalse(tLongByteHashMap2.equals(tLongByteHashMap0));
      assertEquals(0, int2);
  }

  @Test
  public void test15()  throws Throwable  {
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap();
      float float0 = (-1864.9464F);
      // Undeclared exception!
      try {
        tLongByteHashMap0.setAutoCompactionFactor(float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1864.9464
         //
      }
  }
}
