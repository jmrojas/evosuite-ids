/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TCharLongMap;
import gnu.trove.map.hash.TCharLongHashMap;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InterruptedIOException;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.MissingResourceException;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharLongHashEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-1);
      TCharLongMap tCharLongMap0 = null;
      TCharLongHashMap tCharLongHashMap0 = null;
      try {
        tCharLongHashMap0 = new TCharLongHashMap(tCharLongMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = 'a';
      charArray0[0] = char0;
      char char1 = '#';
      charArray0[1] = char1;
      char char2 = 'E';
      charArray0[2] = char2;
      char char3 = 'm';
      charArray0[3] = char3;
      char char4 = 'X';
      charArray0[4] = char4;
      char char5 = 'e';
      charArray0[5] = char5;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) charArray0[4];
      longArray0[1] = (long) char2;
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap(charArray0, longArray0);
      String string0 = "No free or removed slots available. Key set full?!!";
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // No free or removed slots available. Key set full?!! (No such file or directory)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 1527;
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap(int0, int0);
      char[] charArray0 = new char[7];
      char char0 = '-';
      charArray0[0] = char0;
      char char1 = '>';
      charArray0[1] = char1;
      char char2 = '+';
      charArray0[2] = char2;
      char char3 = 'y';
      charArray0[3] = char3;
      char char4 = 't';
      charArray0[4] = char4;
      char char5 = '%';
      charArray0[5] = char5;
      char char6 = ' ';
      charArray0[6] = char6;
      tCharLongHashMap0._set = charArray0;
      assertEquals('\u0000', tCharLongHashMap0.getNoEntryKey());
      assertEquals(0L, tCharLongHashMap0.getNoEntryValue());
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap(int0, float0);
      char[] charArray0 = new char[6];
      char char0 = '-';
      charArray0[0] = char0;
      char char1 = '1';
      charArray0[1] = char1;
      char char2 = 'X';
      charArray0[2] = char2;
      char char3 = ']';
      charArray0[3] = char3;
      char char4 = 'Y';
      charArray0[4] = char4;
      int int1 = (-239);
      float float1 = (-987.452F);
      char char5 = 't';
      long long0 = (-1753L);
      TCharLongHashMap tCharLongHashMap1 = new TCharLongHashMap(int1, float1, char5, long0);
      tCharLongHashMap0.putAll((TCharLongMap) tCharLongHashMap1);
      assertEquals('t', tCharLongHashMap1.getNoEntryKey());
      assertEquals((-1753L), tCharLongHashMap1.getNoEntryValue());
      
      char char6 = '\'';
      charArray0[5] = char6;
      char[] charArray1 = tCharLongHashMap0.keys(charArray0);
      assertEquals(0L, tCharLongHashMap0.getNoEntryValue());
      assertEquals('\u0000', tCharLongHashMap0.getNoEntryKey());
      assertNotNull(charArray1);
      
      TCharLongHashMap tCharLongHashMap2 = new TCharLongHashMap(int0);
      char char7 = 'H';
      boolean boolean0 = tCharLongHashMap2.containsKey(char7);
      assertEquals(false, boolean0);
      
      tCharLongHashMap2.trimToSize();
      assertEquals('\u0000', tCharLongHashMap2.getNoEntryKey());
      assertEquals(0L, tCharLongHashMap2.getNoEntryValue());
  }

  @Test
  public void test4()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = 'I';
      charArray0[0] = char0;
      char char1 = ':';
      charArray0[1] = char1;
      char char2 = ',';
      charArray0[2] = char2;
      char char3 = 'o';
      charArray0[3] = char3;
      char char4 = '}';
      charArray0[4] = char4;
      char char5 = 'Z';
      charArray0[5] = char5;
      char char6 = '`';
      charArray0[6] = char6;
      char char7 = 'X';
      charArray0[7] = char7;
      char char8 = '2';
      charArray0[8] = char8;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) charArray0[1];
      longArray0[1] = (long) charArray0[6];
      long long0 = 557L;
      longArray0[2] = long0;
      longArray0[3] = (long) charArray0[3];
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap(charArray0, longArray0);
      tCharLongHashMap0.getAutoCompactionFactor();
      assertEquals(0L, tCharLongHashMap0.getNoEntryValue());
      assertEquals("{,=557, o=111, :=96, I=58}", tCharLongHashMap0.toString());
      assertEquals(23, tCharLongHashMap0.capacity());
      assertEquals('\u0000', tCharLongHashMap0.getNoEntryKey());
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-1812);
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap(int0);
      long long0 = tCharLongHashMap0.getNoEntryValue();
      tCharLongHashMap0.getAutoCompactionFactor();
      TCharLongHashMap tCharLongHashMap1 = new TCharLongHashMap(int0);
      float float0 = 17.255016F;
      char char0 = 'h';
      long long1 = (-388L);
      TCharLongHashMap tCharLongHashMap2 = new TCharLongHashMap(int0, float0, char0, long1);
      long[] longArray0 = new long[10];
      longArray0[0] = long1;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) char0;
      longArray0[3] = long1;
      longArray0[4] = long0;
      longArray0[5] = long1;
      longArray0[6] = (long) char0;
      longArray0[7] = long0;
      assertEquals(0L, longArray0[7]);
      assertEquals('\u0000', tCharLongHashMap0.getNoEntryKey());
      
      long long2 = (-1334L);
      longArray0[8] = long2;
      longArray0[9] = (long) char0;
      long[] longArray1 = tCharLongHashMap2.values(longArray0);
      assertNotNull(longArray1);
      assertEquals((-388L), tCharLongHashMap2.getNoEntryValue());
      assertEquals('h', tCharLongHashMap2.getNoEntryKey());
  }

//   @Test
//   public void test6()  throws Throwable  {
//       TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap();
//       PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
//       tCharLongHashMap0.trimToSize();
//       int int0 = 1201;
//       PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, int0);
//       try {
//         pipedInputStream0.read();
//         fail("Expecting exception: InterruptedIOException");
//       
//       } catch(InterruptedIOException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-841);
      float float0 = (-465.81375F);
      char char0 = 'q';
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap((int) char0);
      tCharLongHashMap0.getNoEntryValue();
      TCharLongHashMap tCharLongHashMap1 = new TCharLongHashMap();
      char char1 = '}';
      tCharLongHashMap1.contains(char1);
      char char2 = '\'';
      tCharLongHashMap0.containsKey(char2);
      long long0 = (-765L);
      tCharLongHashMap1.adjustOrPutValue(char0, long0, (long) int0);
      TCharLongHashMap tCharLongHashMap2 = new TCharLongHashMap(int0, float0, char0, (long) char0);
      tCharLongHashMap2.getAutoCompactionFactor();
      boolean boolean0 = false;
      tCharLongHashMap1.reenableAutoCompaction(boolean0);
      assertEquals("{q=-841}", tCharLongHashMap1.toString());
      
      int int1 = 116;
      TCharLongHashMap tCharLongHashMap3 = new TCharLongHashMap(int1);
      tCharLongHashMap2.keys(tCharLongHashMap3._set);
      int int2 = (-1898);
      String string0 = "";
      Locale locale0 = Locale.forLanguageTag(string0);
      String string1 = locale0.getISO3Country();
      tCharLongHashMap0.equals((Object) string1);
      float float1 = 0.0F;
      char char3 = 't';
      char[] charArray0 = tCharLongHashMap0._set;
      TCharLongHashMap tCharLongHashMap4 = new TCharLongHashMap(int2, float1, char3, (long) char3);
      tCharLongHashMap4.values();
      tCharLongHashMap4.compact();
      assertEquals('t', tCharLongHashMap4.getNoEntryKey());
  }

//   @Test
//   public void test8()  throws Throwable  {
//       char[] charArray0 = new char[1];
//       char char0 = 'O';
//       charArray0[0] = char0;
//       long[] longArray0 = new long[6];
//       longArray0[0] = (long) char0;
//       longArray0[1] = (long) char0;
//       TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap();
//       longArray0[0] = (long) charArray0[0];
//       longArray0[0] = (long) char0;
//       longArray0[1] = (long) charArray0[0];
//       longArray0[2] = (long) char0;
//       longArray0[3] = (long) char0;
//       longArray0[4] = (long) charArray0[0];
//       longArray0[5] = (long) char0;
//       FileDescriptor fileDescriptor0 = FileDescriptor.err;
//       FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
//       ObjectInputStream objectInputStream0 = null;
//       try {
//         objectInputStream0 = new ObjectInputStream((InputStream) fileInputStream0);
//         fail("Expecting exception: IOException");
//       
//       } catch(IOException e) {
//          //
//          // Bad file descriptor
//          //
//       }
//   }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 1352;
      TCharLongMap tCharLongMap0 = null;
      TCharLongHashMap tCharLongHashMap0 = null;
      try {
        tCharLongHashMap0 = new TCharLongHashMap(tCharLongMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-1);
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap();
      TCharLongHashMap tCharLongHashMap1 = new TCharLongHashMap((TCharLongMap) tCharLongHashMap0);
      assertEquals(0L, tCharLongHashMap1.getNoEntryValue());
      assertEquals('\u0000', tCharLongHashMap1.getNoEntryKey());
      
      float float0 = 1.0F;
      TCharLongHashMap tCharLongHashMap2 = new TCharLongHashMap(int0, float0);
      int int1 = 0;
      TCharLongHashMap tCharLongHashMap3 = new TCharLongHashMap(int1);
      TCharLongHashMap tCharLongHashMap4 = new TCharLongHashMap((TCharLongMap) tCharLongHashMap3);
      char char0 = 'G';
      long long0 = (-152L);
      tCharLongHashMap4.adjustValue(char0, long0);
      TCharLongHashMap tCharLongHashMap5 = new TCharLongHashMap(int0);
      tCharLongHashMap3.hashCode();
      TCharLongHashMap tCharLongHashMap6 = new TCharLongHashMap((TCharLongMap) tCharLongHashMap4);
      tCharLongHashMap6.getAutoCompactionFactor();
      assertEquals(0L, tCharLongHashMap6.getNoEntryValue());
      assertEquals('\u0000', tCharLongHashMap6.getNoEntryKey());
      assertEquals(23, tCharLongHashMap6.capacity());
      
      char char1 = 'v';
      boolean boolean0 = tCharLongHashMap2.contains(char1);
      assertEquals(0L, tCharLongHashMap2.getNoEntryValue());
      assertEquals(false, boolean0);
      assertEquals('\u0000', tCharLongHashMap2.getNoEntryKey());
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-1694);
      float float0 = 1562.9131F;
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap(int0, float0);
      String string0 = "J+6@@XcV(h2Nj4";
      URI.create(string0);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 3: J+6@@XcV(h2Nj4:J+6@@XcV(h2Nj4#J+6@@XcV(h2Nj4
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = 'Z';
      charArray0[0] = char0;
      char char1 = 'e';
      charArray0[1] = char1;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) char1;
      long long0 = 0L;
      longArray0[1] = long0;
      longArray0[2] = (long) char0;
      longArray0[3] = (long) charArray0[0];
      long long1 = 1413L;
      longArray0[4] = long1;
      longArray0[5] = (long) charArray0[1];
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap(charArray0, longArray0);
      TCharLongHashMap tCharLongHashMap1 = new TCharLongHashMap((TCharLongMap) tCharLongHashMap0);
      TCharLongHashMap tCharLongHashMap2 = new TCharLongHashMap((TCharLongMap) tCharLongHashMap1);
      tCharLongHashMap2.get(charArray0[1]);
      assertEquals("{e=0, Z=101}", tCharLongHashMap0.toString());
      assertEquals(0L, tCharLongHashMap0.getNoEntryValue());
      assertEquals("{Z=101, e=0}", tCharLongHashMap2.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1547;
      int int1 = (-542);
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap(int1, int1);
      tCharLongHashMap0.tempDisableAutoCompaction();
      tCharLongHashMap0.compact();
      tCharLongHashMap0.keys();
      TCharLongHashMap tCharLongHashMap1 = new TCharLongHashMap((TCharLongMap) tCharLongHashMap0);
      boolean boolean0 = true;
      tCharLongHashMap0.reenableAutoCompaction(boolean0);
      TCharLongHashMap tCharLongHashMap2 = new TCharLongHashMap((TCharLongMap) tCharLongHashMap1);
      byte[] byteArray0 = tCharLongHashMap2._states;
      int int2 = (-1869);
      TCharLongHashMap tCharLongHashMap3 = new TCharLongHashMap(int2, int0);
      tCharLongHashMap3.isEmpty();
      tCharLongHashMap0.tempDisableAutoCompaction();
      TCharLongHashMap tCharLongHashMap4 = new TCharLongHashMap(int0);
      assertEquals(3203, tCharLongHashMap4.capacity());
      
      int int3 = (-791);
      tCharLongHashMap3.ensureCapacity(int3);
      tCharLongHashMap4.compact();
      tCharLongHashMap4.keySet();
      assertEquals(0L, tCharLongHashMap4.getNoEntryValue());
  }

  @Test
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = '5';
      charArray0[0] = char0;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) char0;
      longArray0[1] = (long) charArray0[0];
      longArray0[2] = (long) char0;
      long long0 = 0L;
      longArray0[3] = long0;
      longArray0[4] = (long) charArray0[0];
      longArray0[5] = (long) char0;
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap(charArray0, longArray0);
      TCharLongHashMap tCharLongHashMap1 = new TCharLongHashMap((TCharLongMap) tCharLongHashMap0);
      TCharLongHashMap tCharLongHashMap2 = new TCharLongHashMap((TCharLongMap) tCharLongHashMap1);
      byte[] byteArray0 = tCharLongHashMap2._states;
      assertEquals('\u0000', tCharLongHashMap2.getNoEntryKey());
      assertEquals(0L, tCharLongHashMap2.getNoEntryValue());
      assertEquals(17, tCharLongHashMap0.capacity());
      assertEquals("{5=53}", tCharLongHashMap0.toString());
      assertEquals(0L, tCharLongHashMap1.getNoEntryValue());
  }

  @Test
  public void test15()  throws Throwable  {
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap();
      tCharLongHashMap0.tempDisableAutoCompaction();
      assertEquals(0L, tCharLongHashMap0.getNoEntryValue());
      assertEquals('\u0000', tCharLongHashMap0.getNoEntryKey());
      
      char[] charArray0 = new char[4];
      char char0 = 'Y';
      charArray0[0] = char0;
      int int0 = 1;
      TCharLongHashMap tCharLongHashMap1 = new TCharLongHashMap(int0);
      boolean boolean0 = true;
      tCharLongHashMap1.reenableAutoCompaction(boolean0);
      char char1 = 't';
      long long0 = tCharLongHashMap1.getNoEntryValue();
      assertEquals(0L, long0);
      
      charArray0[1] = char1;
      char char2 = 't';
      charArray0[2] = char2;
      char char3 = '|';
      charArray0[3] = char3;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) char2;
      longArray0[1] = (long) char2;
      longArray0[2] = (long) charArray0[1];
      longArray0[3] = (long) char1;
      longArray0[4] = (long) char2;
      long long1 = (-1405L);
      longArray0[5] = long1;
      longArray0[6] = (long) charArray0[3];
      longArray0[7] = (long) charArray0[3];
      longArray0[8] = (long) char3;
      TCharLongHashMap tCharLongHashMap2 = new TCharLongHashMap(charArray0, longArray0);
      int int1 = tCharLongHashMap2.size();
      assertEquals(3, int1);
      assertEquals("{Y=116, |=116, t=116}", tCharLongHashMap2.toString());
      assertEquals('\u0000', tCharLongHashMap2.getNoEntryKey());
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 1772;
      char char0 = '@';
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap(int0, (float) int0, char0, (long) int0);
      assertEquals(1772L, tCharLongHashMap0.getNoEntryValue());
      assertEquals('@', tCharLongHashMap0.getNoEntryKey());
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 0;
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap(int0, int0);
      char[] charArray0 = new char[7];
      char char0 = 'Y';
      charArray0[0] = char0;
      char char1 = '@';
      charArray0[1] = char1;
      char char2 = 'f';
      charArray0[2] = char2;
      char char3 = 'g';
      charArray0[3] = char3;
      char char4 = '\"';
      charArray0[4] = char4;
      char char5 = ' ';
      charArray0[5] = char5;
      char char6 = '-';
      charArray0[6] = char6;
      char[] charArray1 = tCharLongHashMap0.keys(charArray0);
      assertNotNull(charArray1);
      
      tCharLongHashMap0.getAutoCompactionFactor();
      tCharLongHashMap0.tempDisableAutoCompaction();
      char char7 = 'b';
      long long0 = tCharLongHashMap0.remove(char7);
      assertEquals(0L, long0);
      assertEquals('\u0000', tCharLongHashMap0.getNoEntryKey());
      assertEquals(true, tCharLongHashMap0.isEmpty());
  }
}
