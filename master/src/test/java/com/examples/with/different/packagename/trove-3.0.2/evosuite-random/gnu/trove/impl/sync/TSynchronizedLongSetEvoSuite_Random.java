/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TLongCollection;
import gnu.trove.impl.sync.TSynchronizedLongSet;
import gnu.trove.impl.sync.TSynchronizedRandomAccessLongList;
import gnu.trove.impl.unmodifiable.TUnmodifiableLongCollection;
import gnu.trove.list.TLongList;
import gnu.trove.list.array.TLongArrayList;
import gnu.trove.list.linked.TLongLinkedList;
import gnu.trove.set.TLongSet;
import gnu.trove.set.hash.TLongHashSet;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedLongSetEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TLongSet tLongSet0 = null;
      TSynchronizedLongSet tSynchronizedLongSet0 = null;
      try {
        tSynchronizedLongSet0 = new TSynchronizedLongSet(tLongSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      long[] longArray0 = new long[5];
      long long0 = 0L;
      longArray0[0] = long0;
      long long1 = (-1964L);
      TLongHashSet tLongHashSet0 = new TLongHashSet(longArray0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = Locale.US;
      String string0 = locale0.getDisplayLanguage(locale1);
      TSynchronizedLongSet tSynchronizedLongSet0 = new TSynchronizedLongSet((TLongSet) tLongHashSet0, (Object) string0);
      tSynchronizedLongSet0.clear();
      longArray0[1] = long1;
      long long2 = (-1672L);
      longArray0[2] = long2;
      long long3 = (-1L);
      longArray0[3] = long3;
      long long4 = 1L;
      longArray0[4] = long4;
      TLongHashSet tLongHashSet1 = new TLongHashSet(longArray0);
      String string1 = File.separator;
      TSynchronizedLongSet tSynchronizedLongSet1 = new TSynchronizedLongSet((TLongSet) tLongHashSet1, (Object) string1);
      int int0 = tSynchronizedLongSet1.hashCode();
      assertEquals(3635, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      TLongHashSet tLongHashSet0 = new TLongHashSet();
      TSynchronizedLongSet tSynchronizedLongSet0 = new TSynchronizedLongSet((TLongSet) tLongHashSet0);
      String string0 = "b)Hq1p%#@";
      String string1 = "t.]!yl^lXP";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: b)Hq1p%#@://b)Hq1p%#@t.%5D!yl%5ElXP#t.]!yl%5ElXP
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-53);
      TLongHashSet tLongHashSet0 = new TLongHashSet(int0);
      TLongHashSet tLongHashSet1 = new TLongHashSet((TLongCollection) tLongHashSet0);
      Object object0 = null;
      TSynchronizedLongSet tSynchronizedLongSet0 = new TSynchronizedLongSet((TLongSet) tLongHashSet1, object0);
      TSynchronizedLongSet tSynchronizedLongSet1 = new TSynchronizedLongSet((TLongSet) tSynchronizedLongSet0, object0);
      // Undeclared exception!
      try {
        tSynchronizedLongSet1.add((long) int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 1291;
      TLongHashSet tLongHashSet0 = new TLongHashSet(int0, int0);
      TSynchronizedLongSet tSynchronizedLongSet0 = new TSynchronizedLongSet((TLongSet) tLongHashSet0);
      tSynchronizedLongSet0.iterator();
      String string0 = "";
      TSynchronizedLongSet tSynchronizedLongSet1 = new TSynchronizedLongSet((TLongSet) tLongHashSet0);
      tSynchronizedLongSet0.addAll(tLongHashSet0._set);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://?#
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TLongHashSet tLongHashSet0 = new TLongHashSet();
      TSynchronizedLongSet tSynchronizedLongSet0 = new TSynchronizedLongSet((TLongSet) tLongHashSet0);
      long long0 = 1L;
      TLongArrayList tLongArrayList0 = TLongArrayList.wrap(tLongHashSet0._set, long0);
      TSynchronizedRandomAccessLongList tSynchronizedRandomAccessLongList0 = new TSynchronizedRandomAccessLongList((TLongList) tLongArrayList0);
      TSynchronizedRandomAccessLongList tSynchronizedRandomAccessLongList1 = (TSynchronizedRandomAccessLongList)tSynchronizedRandomAccessLongList0.mutex;
      TSynchronizedLongSet tSynchronizedLongSet1 = new TSynchronizedLongSet((TLongSet) tSynchronizedLongSet0, (Object) tSynchronizedRandomAccessLongList1);
      tSynchronizedLongSet1.containsAll(tLongHashSet0._set);
      long long1 = 449L;
      TLongLinkedList tLongLinkedList0 = new TLongLinkedList(long1);
      int int0 = 2020;
      int int1 = 1;
      // Undeclared exception!
      try {
        tLongLinkedList0.subList(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // begin index 2020 greater than end index 1
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = 1L;
      longArray0[0] = long0;
      long long1 = 0L;
      longArray0[1] = long1;
      long long2 = (-9223372036854775808L);
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      int int0 = (-1611);
      TLongHashSet tLongHashSet0 = new TLongHashSet(int0, (float) long1);
      TUnmodifiableLongCollection tUnmodifiableLongCollection0 = new TUnmodifiableLongCollection((TLongCollection) tLongHashSet0);
      String string0 = tUnmodifiableLongCollection0.toString();
      TSynchronizedLongSet tSynchronizedLongSet0 = new TSynchronizedLongSet((TLongSet) tLongHashSet0, (Object) string0);
      tSynchronizedLongSet0.hashCode();
      long long4 = 1L;
      longArray0[4] = long4;
      tSynchronizedLongSet0.iterator();
      long long5 = (-1130L);
      longArray0[5] = long5;
      long long6 = 1L;
      longArray0[6] = long6;
      long long7 = 316L;
      longArray0[7] = long7;
      TLongHashSet tLongHashSet1 = new TLongHashSet(longArray0);
      TSynchronizedLongSet tSynchronizedLongSet1 = new TSynchronizedLongSet((TLongSet) tLongHashSet1);
      TSynchronizedLongSet tSynchronizedLongSet2 = new TSynchronizedLongSet((TLongSet) tSynchronizedLongSet1);
      long long8 = 1351L;
      boolean boolean0 = tSynchronizedLongSet2.add(long8);
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      TLongHashSet tLongHashSet0 = new TLongHashSet();
      int int0 = 0;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      long[] longArray0 = new long[7];
      long long0 = 1966L;
      longArray0[0] = long0;
      long long1 = (-1L);
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = (-255L);
      longArray0[3] = long3;
      long long4 = 0L;
      longArray0[4] = long4;
      long long5 = 1725L;
      longArray0[5] = long5;
      long long6 = 0L;
      longArray0[6] = long6;
      TLongHashSet tLongHashSet0 = new TLongHashSet(longArray0);
      TSynchronizedLongSet tSynchronizedLongSet0 = new TSynchronizedLongSet((TLongSet) tLongHashSet0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      tSynchronizedLongSet0.removeAll((Collection<?>) linkedList0);
      int int0 = 196;
      float float0 = 0.0F;
      int int1 = (-773);
      float float1 = (-1135.8932F);
      long long7 = (-1601L);
      TLongHashSet tLongHashSet1 = new TLongHashSet(int1, float1, long7);
      String string0 = "";
      TSynchronizedLongSet tSynchronizedLongSet1 = new TSynchronizedLongSet((TLongSet) tLongHashSet1, (Object) string0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      tLongHashSet1.removeAll((Collection<?>) linkedList1);
      boolean boolean0 = tSynchronizedLongSet1.retainAll((Collection<?>) linkedList1);
      TLongHashSet tLongHashSet2 = new TLongHashSet(int0, float0, (long) int0);
      tSynchronizedLongSet1.removeAll((TLongCollection) tLongHashSet1);
      TLongArrayList tLongArrayList0 = new TLongArrayList(int0);
      String string1 = tLongArrayList0.toString();
      TSynchronizedLongSet tSynchronizedLongSet2 = new TSynchronizedLongSet((TLongSet) tLongHashSet2, (Object) string1);
      tSynchronizedLongSet2.retainAll(tLongHashSet2._set);
      boolean boolean1 = tSynchronizedLongSet1.addAll((TLongCollection) tLongHashSet1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 851;
      float float0 = (-1.0F);
      TLongHashSet tLongHashSet0 = new TLongHashSet(int0, float0, (long) int0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getISO3Country();
      TSynchronizedLongSet tSynchronizedLongSet0 = new TSynchronizedLongSet((TLongSet) tLongHashSet0, (Object) string0);
      TSynchronizedLongSet tSynchronizedLongSet1 = new TSynchronizedLongSet((TLongSet) tSynchronizedLongSet0);
      long long0 = (-658L);
      tSynchronizedLongSet1.addAll((TLongCollection) tSynchronizedLongSet0);
      boolean boolean0 = tSynchronizedLongSet1.contains(long0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 1396;
      float float0 = 1.17549435E-38F;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      TLongHashSet tLongHashSet0 = new TLongHashSet(int0, float0, longArray0[1]);
      TLongHashSet tLongHashSet1 = null;
      try {
        tLongHashSet1 = new TLongHashSet((TLongCollection) tLongHashSet0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[3];
      TLongHashSet tLongHashSet0 = new TLongHashSet(longArray0);
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = Locale.FRANCE;
      String string0 = locale0.getDisplayCountry(locale1);
      TSynchronizedLongSet tSynchronizedLongSet0 = new TSynchronizedLongSet((TLongSet) tLongHashSet0, (Object) string0);
      tSynchronizedLongSet0.addAll(tLongHashSet0._set);
      String string1 = locale0.getDisplayLanguage();
      TSynchronizedLongSet tSynchronizedLongSet1 = new TSynchronizedLongSet((TLongSet) tLongHashSet0, (Object) string1);
      tSynchronizedLongSet1.toArray();
      tSynchronizedLongSet1.getNoEntryValue();
      long long0 = 9223372036854775807L;
      longArray0[0] = long0;
      TLongHashSet tLongHashSet1 = new TLongHashSet(longArray0);
      TSynchronizedLongSet tSynchronizedLongSet2 = new TSynchronizedLongSet((TLongSet) tLongHashSet1);
      long long1 = 0L;
      longArray0[1] = long1;
      long[] longArray1 = tSynchronizedLongSet2.toArray(longArray0);
      long long2 = 1230L;
      int int0 = 198;
      tSynchronizedLongSet2.containsAll((TLongCollection) tLongHashSet1);
      tSynchronizedLongSet2.addAll((TLongCollection) tLongHashSet1);
      tSynchronizedLongSet2.addAll(longArray1);
      tLongHashSet1.ensureCapacity(int0);
      tSynchronizedLongSet2.retainAll((TLongCollection) tLongHashSet1);
      longArray0[2] = long2;
      boolean boolean0 = false;
      tLongHashSet1.reenableAutoCompaction(boolean0);
      tSynchronizedLongSet2.iterator();
      TLongHashSet tLongHashSet2 = new TLongHashSet(longArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      char char0 = 'Z';
      String string2 = locale0.getExtension(char0);
      tSynchronizedLongSet2.equals((Object) string2);
      tSynchronizedLongSet2.removeAll((Collection<?>) linkedList0);
      TSynchronizedLongSet tSynchronizedLongSet3 = new TSynchronizedLongSet((TLongSet) tLongHashSet2);
      String string3 = File.separator;
      TSynchronizedLongSet tSynchronizedLongSet4 = new TSynchronizedLongSet((TLongSet) tLongHashSet2, (Object) string3);
      int int1 = tSynchronizedLongSet4.hashCode();
      assertEquals((-2147482418), int1);
      assertTrue(tSynchronizedLongSet4.equals(tSynchronizedLongSet3));
  }

  @Test
  public void test12()  throws Throwable  {
      TLongHashSet tLongHashSet0 = new TLongHashSet();
      TSynchronizedLongSet tSynchronizedLongSet0 = new TSynchronizedLongSet((TLongSet) tLongHashSet0);
      tSynchronizedLongSet0.retainAll(tLongHashSet0._set);
      boolean boolean0 = tSynchronizedLongSet0.containsAll((TLongCollection) tLongHashSet0);
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      boolean boolean1 = tSynchronizedLongSet0.containsAll((Collection<?>) set0);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = (-1325);
          TLongHashSet tLongHashSet0 = new TLongHashSet(int0);
          tLongHashSet0.compact();
          TSynchronizedLongSet tSynchronizedLongSet0 = new TSynchronizedLongSet((TLongSet) tLongHashSet0);
          tSynchronizedLongSet0.getNoEntryValue();
          tSynchronizedLongSet0.toArray();
          String string0 = "oLsVSz2\"K^^,(k_";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      float float0 = 1935.3097F;
      long long0 = 1040L;
      int int1 = 0;
      long long1 = 148L;
      TLongHashSet tLongHashSet0 = new TLongHashSet(int1, (float) int0, long1);
      String string0 = File.separator;
      TSynchronizedLongSet tSynchronizedLongSet0 = new TSynchronizedLongSet((TLongSet) tLongHashSet0, (Object) string0);
      TSynchronizedLongSet tSynchronizedLongSet1 = new TSynchronizedLongSet((TLongSet) tSynchronizedLongSet0);
      tSynchronizedLongSet0.retainAll((TLongCollection) tLongHashSet0);
      InputStream inputStream0 = null;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      int int1 = 1238;
      TLongHashSet tLongHashSet0 = new TLongHashSet(int1);
      String string0 = "~eS#U}wDDtqr}TC~h";
      String string1 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int0, string0, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ~eS#U}wDDtqr}TC~h://~eS%23U%7F%7DwDDtqr%7DTC~h@~eS#U}wDDtqr}TC~h:0~eS%23U%7F%7DwDDtqr%7DTC~h?#
         //
      }
  }
}
