/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TFloatDoubleMap;
import gnu.trove.map.hash.TFloatDoubleHashMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatDoubleHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


//   @Test
//   public void test0()  throws Throwable  {
//       int int0 = (-882);
//       float float0 = 1654.6293F;
//       TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0, float0);
//       int int1 = 0;
//       float float1 = 0.0F;
//       TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap(int1, float1);
//       boolean boolean0 = true;
//       tFloatDoubleHashMap1.reenableAutoCompaction(boolean0);
//       int int2 = (-1710);
//       tFloatDoubleHashMap0.remove((float) int2);
//       double double0 = tFloatDoubleHashMap1.getNoEntryValue();
//       assertEquals(0.0F, tFloatDoubleHashMap1.getNoEntryKey(), 0.01F);
//       assertEquals(0.0, double0, 0.01D);
//       
//       float float2 = (-1653.7798F);
//       TFloatDoubleHashMap tFloatDoubleHashMap2 = new TFloatDoubleHashMap(int2, (float) int2, float2, (double) int2);
//       assertEquals((-1710.0), tFloatDoubleHashMap2.getNoEntryValue(), 0.01D);
//       assertEquals((-1653.7798F), tFloatDoubleHashMap2.getNoEntryKey(), 0.01F);
//       assertTrue(tFloatDoubleHashMap2.equals(tFloatDoubleHashMap0));
//   }

//   @Test
//   public void test1()  throws Throwable  {
//       int int0 = 1747;
//       TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0, int0);
//       double[] doubleArray0 = new double[8];
//       doubleArray0[0] = (double) int0;
//       doubleArray0[1] = (double) int0;
//       doubleArray0[2] = (double) int0;
//       doubleArray0[3] = (double) int0;
//       doubleArray0[4] = (double) int0;
//       doubleArray0[5] = (double) int0;
//       double double0 = 1663.5702624464686;
//       doubleArray0[6] = double0;
//       doubleArray0[7] = (double) int0;
//       double[] doubleArray1 = tFloatDoubleHashMap0.values(doubleArray0);
//       assertNotNull(doubleArray1);
//       assertEquals(0.0, tFloatDoubleHashMap0.getNoEntryValue(), 0.01D);
//       assertEquals(0.0F, tFloatDoubleHashMap0.getNoEntryKey(), 0.01F);
//   }

//   @Test
//   public void test2()  throws Throwable  {
//       float[] floatArray0 = new float[8];
//       float float0 = 1092.3003F;
//       floatArray0[0] = float0;
//       float float1 = 0.0F;
//       floatArray0[1] = float1;
//       float float2 = (-662.7348F);
//       floatArray0[2] = float2;
//       float float3 = 1398.9752F;
//       floatArray0[3] = float3;
//       float float4 = 705.44257F;
//       floatArray0[4] = float4;
//       float float5 = 0.0F;
//       floatArray0[5] = float5;
//       float float6 = (-640.1477F);
//       floatArray0[6] = float6;
//       float float7 = 0.0F;
//       floatArray0[7] = float7;
//       double[] doubleArray0 = new double[5];
//       doubleArray0[0] = (double) floatArray0[2];
//       doubleArray0[1] = (double) float4;
//       doubleArray0[2] = (double) floatArray0[2];
//       doubleArray0[3] = (double) float3;
//       doubleArray0[4] = (double) floatArray0[4];
//       TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
//       float[] floatArray1 = tFloatDoubleHashMap0._set;
//       int int0 = 1965;
//       TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap(int0, int0);
//       int int1 = 143;
//       double double0 = Double.NEGATIVE_INFINITY;
//       TFloatDoubleHashMap tFloatDoubleHashMap2 = new TFloatDoubleHashMap(int1, (float) int1, (float) int1, double0);
//       boolean boolean0 = false;
//       TFloatDoubleHashMap tFloatDoubleHashMap3 = new TFloatDoubleHashMap((TFloatDoubleMap) tFloatDoubleHashMap1);
//       tFloatDoubleHashMap2.reenableAutoCompaction(boolean0);
//       int int2 = 185;
//       TFloatDoubleHashMap tFloatDoubleHashMap4 = new TFloatDoubleHashMap(int2);
//       double double1 = 0.0;
//       tFloatDoubleHashMap4.iterator();
//       tFloatDoubleHashMap4.tempDisableAutoCompaction();
//       assertEquals(379, tFloatDoubleHashMap4.capacity());
//       
//       tFloatDoubleHashMap4.trimToSize();
//       tFloatDoubleHashMap4.containsValue(double1);
//       assertEquals(0.0F, tFloatDoubleHashMap4.getNoEntryKey(), 0.01F);
//   }

//   @Test
//   public void test3()  throws Throwable  {
//       int int0 = 0;
//       float float0 = (-1849.1703F);
//       TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0, float0);
//       float[] floatArray0 = new float[5];
//       floatArray0[0] = (float) int0;
//       floatArray0[1] = float0;
//       floatArray0[2] = float0;
//       floatArray0[3] = float0;
//       floatArray0[4] = float0;
//       float[] floatArray1 = tFloatDoubleHashMap0.keys(floatArray0);
//       assertEquals(0.0, tFloatDoubleHashMap0.getNoEntryValue(), 0.01D);
//       assertNotNull(floatArray1);
//       assertEquals(0.0F, tFloatDoubleHashMap0.getNoEntryKey(), 0.01F);
//   }

//   @Test
//   public void test4()  throws Throwable  {
//       int int0 = 1259;
//       TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0);
//       boolean boolean0 = tFloatDoubleHashMap0.containsKey((float) int0);
//       assertEquals(false, boolean0);
//       
//       int int1 = 203;
//       float float0 = 0.0F;
//       TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap(int1, float0);
//       TFloatDoubleHashMap tFloatDoubleHashMap2 = new TFloatDoubleHashMap(int1, int1);
//       tFloatDoubleHashMap2._set = tFloatDoubleHashMap1._set;
//       TFloatDoubleHashMap tFloatDoubleHashMap3 = new TFloatDoubleHashMap(int1, int1);
//       double[] doubleArray0 = new double[4];
//       doubleArray0[0] = (double) int1;
//       doubleArray0[1] = (double) int0;
//       float float1 = 1728.1223F;
//       tFloatDoubleHashMap0.setAutoCompactionFactor(float1);
//       doubleArray0[2] = (double) float0;
//       doubleArray0[3] = (double) float0;
//       double[] doubleArray1 = tFloatDoubleHashMap1.values(doubleArray0);
//       assertNotNull(doubleArray1);
//       
//       String string0 = tFloatDoubleHashMap3.toString();
//       TFloatDoubleHashMap tFloatDoubleHashMap4 = new TFloatDoubleHashMap((TFloatDoubleMap) tFloatDoubleHashMap3);
//       tFloatDoubleHashMap0.size();
//       assertEquals(0.0, tFloatDoubleHashMap0.getNoEntryValue(), 0.01D);
//       assertEquals(0.0F, tFloatDoubleHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals(2557, tFloatDoubleHashMap0.capacity());
//       
//       File file0 = new File(string0);
//       PrintStream printStream0 = null;
//       try {
//         printStream0 = new PrintStream(file0, string0);
//         fail("Expecting exception: UnsupportedEncodingException");
//       
//       } catch(UnsupportedEncodingException e) {
//          //
//          // {}
//          //
//       }
//   }

  @Test
  public void test5()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = 1338.5056F;
      floatArray0[0] = float0;
      float float1 = (-23.247746F);
      floatArray0[1] = float1;
      float float2 = 1296.0819F;
      floatArray0[2] = float2;
      float float3 = 0.0F;
      floatArray0[3] = float3;
      float float4 = 1.0F;
      floatArray0[4] = float4;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) floatArray0[0];
      doubleArray0[1] = (double) float2;
      doubleArray0[2] = (double) float3;
      doubleArray0[3] = (double) float3;
      doubleArray0[4] = (double) floatArray0[0];
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray0[5] = double0;
      doubleArray0[6] = (double) float2;
      doubleArray0[7] = (double) float0;
      doubleArray0[8] = (double) float3;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      float float5 = 1141.8383F;
      double double1 = (-308.2298674234769);
      double double2 = tFloatDoubleHashMap0.putIfAbsent(float5, double1);
      assertEquals(6, tFloatDoubleHashMap0.size());
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
          String string0 = "RrT";
          boolean boolean0 = false;
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0, boolean0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"RrT\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:136)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0, int0, int0, int0);
      tFloatDoubleHashMap0.getAutoCompactionFactor();
      int int1 = 48817;
      PipedInputStream pipedInputStream0 = new PipedInputStream(int1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream((InputStream) pipedInputStream0, (InputStream) pipedInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) sequenceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

//   @Test
//   public void test8()  throws Throwable  {
//       int int0 = (-1289);
//       TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0);
//       tFloatDoubleHashMap0.size();
//       assertEquals(0.0, tFloatDoubleHashMap0.getNoEntryValue(), 0.01D);
//       assertEquals(0.0F, tFloatDoubleHashMap0.getNoEntryKey(), 0.01F);
//   }

//   @Test
//   public void test9()  throws Throwable  {
//       TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
//       tFloatDoubleHashMap0.trimToSize();
//       float[] floatArray0 = new float[1];
//       float float0 = 1654.3784F;
//       tFloatDoubleHashMap0.isEmpty();
//       float float1 = 0.0F;
//       double double0 = 0.0;
//       tFloatDoubleHashMap0.putIfAbsent(float1, double0);
//       floatArray0[0] = float0;
//       tFloatDoubleHashMap0._set = floatArray0;
//       assertEquals(false, tFloatDoubleHashMap0.isEmpty());
//       
//       int int0 = 1;
//       TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap();
//       float float2 = (-1726.6997F);
//       double double1 = 0.0;
//       TFloatDoubleHashMap tFloatDoubleHashMap2 = new TFloatDoubleHashMap(int0, float2, (float) int0, double1);
//       boolean boolean0 = true;
//       tFloatDoubleHashMap2.reenableAutoCompaction(boolean0);
//       tFloatDoubleHashMap2.keySet();
//       tFloatDoubleHashMap2.clear();
//       assertEquals(1.0F, tFloatDoubleHashMap2.getNoEntryKey(), 0.01F);
//   }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0);
      String string0 = "";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // 
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0, int0);
      TFloatDoubleHashMap tFloatDoubleHashMap1 = null;
      try {
        tFloatDoubleHashMap1 = new TFloatDoubleHashMap((TFloatDoubleMap) tFloatDoubleHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

//   @Test
//   public void test12()  throws Throwable  {
//       int int0 = 1;
//       float float0 = 0.0F;
//       int int1 = (-1);
//       float float1 = (-923.4877F);
//       float float2 = (-589.4936F);
//       int int2 = 0;
//       float float3 = (-1.0F);
//       double double0 = 1303.732992834605;
//       TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int2, (float) int2, float3, double0);
//       tFloatDoubleHashMap0.capacity();
//       TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap(int0, float2, float0, (double) float2);
//       tFloatDoubleHashMap1.clear();
//       tFloatDoubleHashMap0.compact();
//       float float4 = (-1.0F);
//       double double1 = 0.0;
//       TFloatDoubleHashMap tFloatDoubleHashMap2 = new TFloatDoubleHashMap(int1, float1, float4, double1);
//       tFloatDoubleHashMap1._states = tFloatDoubleHashMap2._states;
//       tFloatDoubleHashMap2.keySet();
//       assertEquals((-1.0F), tFloatDoubleHashMap2.getNoEntryKey(), 0.01F);
//       assertEquals(0.0, tFloatDoubleHashMap2.getNoEntryValue(), 0.01D);
//       
//       TFloatDoubleHashMap tFloatDoubleHashMap3 = new TFloatDoubleHashMap(int0, float0);
//       boolean boolean0 = true;
//       tFloatDoubleHashMap3.reenableAutoCompaction(boolean0);
//       assertEquals(0.0F, tFloatDoubleHashMap3.getNoEntryKey(), 0.01F);
//       assertEquals(0.0, tFloatDoubleHashMap3.getNoEntryValue(), 0.01D);
//   }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 270;
      float float0 = 0.0F;
      float float1 = (-1453.3109F);
      float[] floatArray0 = new float[3];
      float float2 = 0.0F;
      floatArray0[0] = float2;
      floatArray0[1] = (float) int0;
      floatArray0[2] = float1;
      int int1 = 1043;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) float2;
      doubleArray0[1] = (double) floatArray0[1];
      doubleArray0[2] = (double) int0;
      double double0 = (-1075.2708127417723);
      doubleArray0[3] = double0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) float2;
      doubleArray0[6] = (double) floatArray0[2];
      doubleArray0[7] = (double) floatArray0[0];
      TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      TFloatDoubleHashMap tFloatDoubleHashMap2 = new TFloatDoubleHashMap(int0, float0, float1, (double) float1);
      float float3 = tFloatDoubleHashMap2.getNoEntryKey();
      tFloatDoubleHashMap2.isEmpty();
      doubleArray0[0] = (double) float3;
      double double1 = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = double1;
      tFloatDoubleHashMap0.tempDisableAutoCompaction();
      doubleArray0[2] = (double) floatArray0[1];
      doubleArray0[3] = (double) floatArray0[1];
      doubleArray0[4] = (double) floatArray0[1];
      doubleArray0[5] = (double) float2;
      Object object0 = null;
      tFloatDoubleHashMap1.equals(object0);
      doubleArray0[6] = double0;
      tFloatDoubleHashMap2.hashCode();
      doubleArray0[7] = (double) int0;
      float float4 = 567.8609F;
      double double2 = tFloatDoubleHashMap0.put(float4, (double) int0);
      assertEquals(1, tFloatDoubleHashMap0.size());
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 0;
          TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0);
          String string0 = "no elemenet at ";
          File file0 = new File(string0, string0);
          tFloatDoubleHashMap0.getNoEntryKey();
          boolean boolean0 = false;
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(file0, boolean0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"no elemenet at /no elemenet at \" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // sun.reflect.GeneratedConstructorAccessor18.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 2026;
      float float0 = 6.6360896E8F;
      float float1 = 1816.7474F;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0, float0, float1, (double) float1);
      float float2 = 1.0F;
      tFloatDoubleHashMap0.increment(float2);
      int int1 = 1886;
      TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap(int1, int1);
      tFloatDoubleHashMap1.containsKey((float) int1);
      tFloatDoubleHashMap1.tempDisableAutoCompaction();
      int int2 = 1722;
      TFloatDoubleHashMap tFloatDoubleHashMap2 = new TFloatDoubleHashMap(int2);
      tFloatDoubleHashMap2.valueCollection();
      int int3 = (-470);
      float float3 = 1127.716F;
      double double0 = (-140.1941061030709);
      TFloatDoubleHashMap tFloatDoubleHashMap3 = new TFloatDoubleHashMap(int3, (float) int3, float3, double0);
      HashMap<Object, Object> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Object, Object>(int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -470
         //
      }
  }

//   @Test
//   public void test16()  throws Throwable  {
//       int int0 = 759;
//       TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0);
//       double[] doubleArray0 = tFloatDoubleHashMap0.values();
//       assertNotNull(doubleArray0);
//       
//       TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap();
//       float float0 = 85.9827F;
//       tFloatDoubleHashMap1.adjustValue(float0, float0);
//       assertEquals(23, tFloatDoubleHashMap1.capacity());
//       
//       tFloatDoubleHashMap0.clear();
//       tFloatDoubleHashMap1.trimToSize();
//       assertEquals(0.0F, tFloatDoubleHashMap1.getNoEntryKey(), 0.01F);
//   }

  @Test
  public void test17()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = (-1633.6522F);
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      float float2 = 0.0F;
      floatArray0[2] = float2;
      float float3 = 0.0F;
      floatArray0[3] = float3;
      float float4 = 0.0F;
      floatArray0[4] = float4;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) floatArray0[3];
      doubleArray0[1] = (double) floatArray0[4];
      doubleArray0[2] = (double) floatArray0[1];
      double double0 = 0.0;
      doubleArray0[3] = double0;
      doubleArray0[4] = (double) floatArray0[0];
      doubleArray0[5] = (double) float3;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      int int0 = 400038451;
      // Undeclared exception!
      try {
        tFloatDoubleHashMap0.ensureCapacity(int0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

//   @Test
//   public void test18()  throws Throwable  {
//       int int0 = 798;
//       float float0 = (-1694.167F);
//       int int1 = (-234);
//       TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int1, int1);
//       tFloatDoubleHashMap0.clear();
//       double double0 = tFloatDoubleHashMap0.remove((float) int1);
//       assertEquals(0.0F, tFloatDoubleHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals(0.0, double0, 0.01D);
//       
//       TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap();
//       String string0 = tFloatDoubleHashMap1.toString();
//       assertNotNull(string0);
//       
//       tFloatDoubleHashMap1.iterator();
//       // Undeclared exception!
//       try {
//         File.createTempFile(string0, string0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Prefix string too short
//          //
//       }
//   }
}
