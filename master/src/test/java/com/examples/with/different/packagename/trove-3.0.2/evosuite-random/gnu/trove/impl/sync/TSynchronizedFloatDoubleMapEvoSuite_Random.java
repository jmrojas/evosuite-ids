/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedFloatDoubleMap;
import gnu.trove.iterator.TFloatDoubleIterator;
import gnu.trove.map.TFloatDoubleMap;
import gnu.trove.map.hash.TFloatDoubleHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.RandomAccessFile;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedFloatDoubleMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float float0 = 0.5F;
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      float float2 = 1530.4502F;
      floatArray0[2] = float2;
      float float3 = 820.29694F;
      floatArray0[3] = float3;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) float0;
      doubleArray0[1] = (double) float0;
      doubleArray0[2] = (double) float2;
      doubleArray0[3] = (double) floatArray0[3];
      doubleArray0[4] = (double) float3;
      double double0 = (-1.0);
      int int0 = 1;
      float float4 = (-188.30565F);
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0, float4);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      tSynchronizedFloatDoubleMap0.iterator();
      doubleArray0[5] = double0;
      TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      float float5 = 157.50119F;
      String string0 = Float.toString(float5);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap1 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap1, (Object) string0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) floatArray0[1];
      doubleArray1[1] = (double) float1;
      doubleArray1[2] = (double) floatArray0[2];
      doubleArray1[3] = (double) floatArray0[0];
      doubleArray1[4] = (double) floatArray0[0];
      doubleArray1[5] = (double) floatArray0[2];
      doubleArray1[6] = (double) float3;
      doubleArray1[7] = (double) floatArray0[3];
      doubleArray1[8] = (double) float0;
      double[] doubleArray2 = tSynchronizedFloatDoubleMap1.values(doubleArray1);
      assertSame(doubleArray2, doubleArray1);
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0, int0);
      TFloatDoubleHashMap tFloatDoubleHashMap1 = null;
      try {
        tFloatDoubleHashMap1 = new TFloatDoubleHashMap((TFloatDoubleMap) tFloatDoubleHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      float[] floatArray0 = new float[6];
      float float0 = 1725.7687F;
      tSynchronizedFloatDoubleMap0.remove(float0);
      tSynchronizedFloatDoubleMap0.getNoEntryKey();
      float float1 = 1.0F;
      double double0 = 0.0;
      tSynchronizedFloatDoubleMap0.putIfAbsent(float1, double0);
      floatArray0[0] = float1;
      float float2 = 0.0F;
      floatArray0[0] = float2;
      floatArray0[1] = float2;
      floatArray0[2] = float1;
      float float3 = (-336.31305F);
      tSynchronizedFloatDoubleMap0.putIfAbsent(float3, float3);
      assertEquals(2, tFloatDoubleHashMap0.size());
      
      floatArray0[3] = float1;
      floatArray0[4] = float1;
      tSynchronizedFloatDoubleMap0.clear();
      floatArray0[5] = float2;
      floatArray0[1] = float2;
      float float4 = 0.0F;
      floatArray0[2] = float4;
      float float5 = (-929.5075F);
      tSynchronizedFloatDoubleMap0.toString();
      floatArray0[3] = float5;
      float float6 = 256.3188F;
      floatArray0[4] = float6;
      tSynchronizedFloatDoubleMap0.keys(tFloatDoubleHashMap0._set);
      float float7 = (-654.9148F);
      floatArray0[5] = float7;
      tSynchronizedFloatDoubleMap0.keys(floatArray0);
      TDoubleProcedure tDoubleProcedure0 = null;
      tSynchronizedFloatDoubleMap0.clear();
      boolean boolean0 = tSynchronizedFloatDoubleMap0.forEachValue(tDoubleProcedure0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 433;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0, int0);
      Locale locale0 = Locale.ITALIAN;
      Locale locale1 = Locale.ITALY;
      String string0 = locale0.getDisplayName(locale1);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0, (Object) string0);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap1 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tSynchronizedFloatDoubleMap0);
      String string1 = File.pathSeparator;
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap2 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tSynchronizedFloatDoubleMap1, (Object) string1);
      float float0 = 1.0F;
      boolean boolean0 = tSynchronizedFloatDoubleMap2.adjustValue(float0, float0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      Object object0 = null;
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0, object0);
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 544.37576121652;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      // Undeclared exception!
      try {
        tSynchronizedFloatDoubleMap0.values(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TFloatDoubleMap tFloatDoubleMap0 = null;
      String string0 = "";
      String string1 = "w2v";
      Locale locale0 = new Locale(string0, string0, string1);
      String string2 = locale0.toString();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap(tFloatDoubleMap0, (Object) string2);
      // Undeclared exception!
      try {
        tSynchronizedFloatDoubleMap0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0);
      String string0 = "Values of NaN are not supported.";
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"Values of NaN are not supported.\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-784);
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0, int0);
      Locale locale0 = Locale.CANADA;
      String string0 = locale0.getVariant();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0, (Object) string0);
      double double0 = 1365.7215396038516;
      double double1 = tSynchronizedFloatDoubleMap0.adjustOrPutValue((float) int0, (double) int0, double0);
      assertEquals(7, tFloatDoubleHashMap0.capacity());
      assertEquals(1365.7215396038516, double1, 0.01D);
  }

  @Test
  public void test8()  throws Throwable  {
      TFloatDoubleMap tFloatDoubleMap0 = null;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = null;
      try {
        tFloatDoubleHashMap0 = new TFloatDoubleHashMap(tFloatDoubleMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 1;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      tSynchronizedFloatDoubleMap0.increment((float) int0);
      Locale locale0 = Locale.ITALY;
      char char0 = 'x';
      int int1 = (-1);
      String string0 = File.separator;
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap1 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0, (Object) string0);
      tSynchronizedFloatDoubleMap1.iterator();
      String string1 = "";
      URI uRI0 = URI.create(string1);
      URI uRI1 = uRI0.parseServerAuthority();
      URI uRI2 = uRI0.relativize(uRI1);
      String string2 = uRI2.getHost();
      tSynchronizedFloatDoubleMap1.equals((Object) string2);
      TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap(int1);
      String string3 = locale0.getCountry();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap2 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap1, (Object) string3);
      tSynchronizedFloatDoubleMap2.isEmpty();
      String string4 = locale0.getExtension(char0);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap3 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0, (Object) string4);
      tSynchronizedFloatDoubleMap2.valueCollection();
      // Undeclared exception!
      try {
        tSynchronizedFloatDoubleMap3.keySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int1, int1);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      double double0 = 0.0;
      tFloatDoubleHashMap0.containsValue(double0);
      tSynchronizedFloatDoubleMap0.clear();
      float float0 = 28.919909F;
      double double1 = Double.NEGATIVE_INFINITY;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = byteArrayOutputStream0.toString();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap1 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0, (Object) string0);
      tSynchronizedFloatDoubleMap0.put((float) int1, double1);
      TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap();
      tSynchronizedFloatDoubleMap0.keys(tFloatDoubleHashMap1._set);
      tSynchronizedFloatDoubleMap0.putAll((TFloatDoubleMap) tFloatDoubleHashMap0);
      assertEquals("{-1.0=-Infinity}", tFloatDoubleHashMap0.toString());
      
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap2 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap1);
      TFloatDoubleHashMap tFloatDoubleHashMap2 = new TFloatDoubleHashMap(int0, float0);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap3 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap2);
      double[] doubleArray0 = new double[3];
      double double2 = 0.0;
      doubleArray0[0] = double2;
      tSynchronizedFloatDoubleMap2.isEmpty();
      doubleArray0[1] = (double) int0;
      Float float1 = new Float(float0);
      doubleArray0[0] = (double) float1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) float0;
      tFloatDoubleHashMap2.equals((Object) float1);
      doubleArray0[2] = (double) int0;
      tSynchronizedFloatDoubleMap3.values(doubleArray0);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap4 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap2);
      tSynchronizedFloatDoubleMap4.containsValue((double) int0);
      float float2 = 318.10803F;
      double double3 = 1858.194957351624;
      double double4 = 1108.7931333312843;
      tSynchronizedFloatDoubleMap4.adjustOrPutValue(float2, double3, double4);
      tSynchronizedFloatDoubleMap3.valueCollection();
      assertTrue(tSynchronizedFloatDoubleMap3.equals(tSynchronizedFloatDoubleMap0));
  }

  @Test
  public void test11()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = (-1.0F);
      floatArray0[0] = float0;
      float float1 = (-1443.1384F);
      floatArray0[1] = float1;
      float float2 = 159.9628F;
      floatArray0[2] = float2;
      float float3 = 69.58039F;
      floatArray0[3] = float3;
      float float4 = (-341.69235F);
      floatArray0[4] = float4;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) float4;
      doubleArray0[1] = (double) floatArray0[4];
      doubleArray0[2] = (double) float0;
      doubleArray0[3] = (double) floatArray0[4];
      doubleArray0[4] = (double) float3;
      doubleArray0[5] = (double) float0;
      doubleArray0[6] = (double) float0;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      float[] floatArray1 = tSynchronizedFloatDoubleMap0.keys(floatArray0);
      assertSame(floatArray1, floatArray0);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 2015;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0);
      TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      double[] doubleArray1 = tSynchronizedFloatDoubleMap0.values(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 583;
      float float0 = 0.0F;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0, (float) int0, float0, (double) float0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getCountry();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0, (Object) string0);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap1 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tSynchronizedFloatDoubleMap0);
      TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap(int0, float0);
      String string1 = "d>@l9fuxj?K^7";
      File file0 = new File(string1);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string1, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 1: d>@l9fuxj?K^7:d%3E@l9fuxj?K%5E7#d%3E@l9fuxj?K%5E7
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-447);
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      tSynchronizedFloatDoubleMap0.put((float) int0, (double) int0);
      assertEquals("{-447.0=-447.0}", tFloatDoubleHashMap0.toString());
      assertEquals(false, tFloatDoubleHashMap0.isEmpty());
  }

  @Test
  public void test15()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = 1660.0342F;
      floatArray0[0] = float0;
      float float1 = (-1313.7322F);
      floatArray0[1] = float1;
      float float2 = 0.0F;
      floatArray0[2] = float2;
      float float3 = 0.0F;
      floatArray0[3] = float3;
      float float4 = (-608.37585F);
      floatArray0[4] = float4;
      float float5 = (-1678.4857F);
      floatArray0[5] = float5;
      float float6 = 1.0F;
      floatArray0[6] = float6;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) float1;
      doubleArray0[1] = (double) floatArray0[3];
      doubleArray0[2] = (double) float0;
      doubleArray0[3] = (double) float4;
      doubleArray0[4] = (double) float4;
      doubleArray0[5] = (double) floatArray0[6];
      doubleArray0[6] = (double) float0;
      doubleArray0[7] = (double) float3;
      doubleArray0[8] = (double) floatArray0[0];
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      float[] floatArray1 = tSynchronizedFloatDoubleMap0.keys();
      assertNotSame(floatArray1, floatArray0);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 0;
      float float0 = 693.9555F;
      float float1 = 0.0F;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0, float1, float1, (double) int0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      String string0 = byteArrayOutputStream0.toString();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0, (Object) string0);
      TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap((TFloatDoubleMap) tSynchronizedFloatDoubleMap0);
      String string1 = File.separator;
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap1 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap1, (Object) string1);
      boolean boolean0 = tSynchronizedFloatDoubleMap1.isEmpty();
      assertEquals(true, boolean0);
      
      double double0 = 0.0;
      TFloatDoubleHashMap tFloatDoubleHashMap2 = new TFloatDoubleHashMap(int0, (float) int0, float0, double0);
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.US;
      String string2 = locale0.getDisplayScript(locale1);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap2 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap2, (Object) string2);
      tSynchronizedFloatDoubleMap2.clear();
      assertEquals(true, tSynchronizedFloatDoubleMap2.isEmpty());
  }

  @Test
  public void test17()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      floatArray0[7] = float0;
      floatArray0[8] = float0;
      float float1 = 463.03656F;
      floatArray0[0] = float1;
      float float2 = Float.POSITIVE_INFINITY;
      floatArray0[1] = float2;
      float float3 = 807.1452F;
      floatArray0[2] = float3;
      float float4 = 0.0F;
      floatArray0[3] = float4;
      float float5 = 0.0F;
      floatArray0[4] = float5;
      float float6 = 0.0F;
      floatArray0[5] = float6;
      float float7 = 1.0F;
      floatArray0[6] = float7;
      float float8 = 0.0F;
      floatArray0[7] = float8;
      float float9 = (-1993.3745F);
      floatArray0[8] = float9;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) float7;
      doubleArray0[1] = (double) float5;
      doubleArray0[2] = (double) floatArray0[0];
      doubleArray0[3] = (double) floatArray0[8];
      double double0 = (-1.0);
      doubleArray0[4] = double0;
      doubleArray0[5] = (double) floatArray0[5];
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      int int0 = tSynchronizedFloatDoubleMap0.size();
      assertEquals(4, int0);
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 1793;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      double double0 = 0.0;
      tSynchronizedFloatDoubleMap0.adjustValue((float) int0, double0);
      int int1 = tFloatDoubleHashMap0.capacity();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap1 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int1;
      tSynchronizedFloatDoubleMap1.values(doubleArray0);
      TFloatDoubleIterator tFloatDoubleIterator0 = tSynchronizedFloatDoubleMap1.iterator();
      assertEquals(false, tFloatDoubleIterator0.hasNext());
  }

  @Test
  public void test19()  throws Throwable  {
      TFloatDoubleMap tFloatDoubleMap0 = null;
      Locale locale0 = Locale.ITALIAN;
      String string0 = locale0.getDisplayLanguage();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap(tFloatDoubleMap0, (Object) string0);
      // Undeclared exception!
      try {
        tSynchronizedFloatDoubleMap0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
