/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TByteCollection;
import gnu.trove.impl.sync.TSynchronizedByteCollection;
import gnu.trove.impl.sync.TSynchronizedByteList;
import gnu.trove.impl.sync.TSynchronizedByteSet;
import gnu.trove.impl.sync.TSynchronizedRandomAccessByteList;
import gnu.trove.impl.unmodifiable.TUnmodifiableByteList;
import gnu.trove.impl.unmodifiable.TUnmodifiableByteSet;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessByteList;
import gnu.trove.iterator.TByteIterator;
import gnu.trove.list.TByteList;
import gnu.trove.list.array.TByteArrayList;
import gnu.trove.list.linked.TByteLinkedList;
import gnu.trove.procedure.TByteProcedure;
import gnu.trove.set.TByteSet;
import gnu.trove.set.hash.TByteHashSet;
import java.io.FileNotFoundException;
import java.io.RandomAccessFile;
import java.net.URI;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import java.util.MissingResourceException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedByteCollectionEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte byte0 = (byte)0;
      TByteLinkedList tByteLinkedList0 = new TByteLinkedList(byte0);
      String string0 = "";
      URI uRI0 = URI.create(string0);
      String string1 = uRI0.getRawAuthority();
      TSynchronizedRandomAccessByteList tSynchronizedRandomAccessByteList0 = new TSynchronizedRandomAccessByteList((TByteList) tByteLinkedList0, (Object) string1);
      TSynchronizedByteList tSynchronizedByteList0 = new TSynchronizedByteList((TByteList) tSynchronizedRandomAccessByteList0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      byteArray0[6] = byte0;
      // Undeclared exception!
      try {
        tSynchronizedByteList0.toArray(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TByteArrayList tByteArrayList0 = new TByteArrayList();
      Locale locale0 = Locale.CANADA;
      String string0 = locale0.getISO3Country();
      tByteArrayList0.equals((Object) string0);
      byte byte0 = (byte)0;
      tByteArrayList0.contains(byte0);
      TSynchronizedByteList tSynchronizedByteList0 = new TSynchronizedByteList((TByteList) tByteArrayList0);
      // Undeclared exception!
      try {
        tSynchronizedByteList0.min();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot find minimum of an empty list
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      TByteHashSet tByteHashSet0 = new TByteHashSet(int0, int0);
      TSynchronizedByteCollection tSynchronizedByteCollection0 = new TSynchronizedByteCollection((TByteCollection) tByteHashSet0);
      TByteProcedure tByteProcedure0 = null;
      boolean boolean0 = tSynchronizedByteCollection0.forEach(tByteProcedure0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      TByteList tByteList0 = null;
      TUnmodifiableByteList tUnmodifiableByteList0 = null;
      try {
        tUnmodifiableByteList0 = new TUnmodifiableByteList(tByteList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test4()  throws Throwable  {
//       byte[] byteArray0 = new byte[7];
//       byte byte0 = (byte) (-30);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte) (-37);
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)12;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte)0;
//       byteArray0[3] = byte3;
//       byte byte4 = (byte) (-36);
//       byteArray0[4] = byte4;
//       byte byte5 = (byte)119;
//       byteArray0[5] = byte5;
//       byte byte6 = (byte)0;
//       byteArray0[6] = byte6;
//       TByteArrayList tByteArrayList0 = new TByteArrayList(byteArray0);
//       TSynchronizedByteList tSynchronizedByteList0 = new TSynchronizedByteList((TByteList) tByteArrayList0);
//       LinkedList<Object> linkedList0 = new LinkedList<Object>();
//       boolean boolean0 = tSynchronizedByteList0.retainAll((Collection<?>) linkedList0);
//       assertEquals(0, tByteArrayList0.sum());
//       
//       int int0 = 687;
//       float float0 = 98.96344F;
//       byte byte7 = (byte) (-88);
//       TByteHashSet tByteHashSet0 = new TByteHashSet(int0, float0, byte7);
//       tByteHashSet0.getAutoCompactionFactor();
//       Locale locale0 = Locale.GERMAN;
//       String string0 = locale0.getScript();
//       TSynchronizedByteSet tSynchronizedByteSet0 = new TSynchronizedByteSet((TByteSet) tByteHashSet0, (Object) string0);
//       byte byte8 = (byte)0;
//       tSynchronizedByteSet0.contains(byte8);
//       boolean boolean1 = tSynchronizedByteSet0.containsAll(tByteHashSet0._states);
//       assertFalse(boolean1 == boolean0);
//   }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 436;
      int int1 = (-1782);
      TByteHashSet tByteHashSet0 = new TByteHashSet(int1);
      TUnmodifiableByteSet tUnmodifiableByteSet0 = new TUnmodifiableByteSet((TByteSet) tByteHashSet0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = linkedList0.toString();
      TSynchronizedByteSet tSynchronizedByteSet0 = new TSynchronizedByteSet((TByteSet) tUnmodifiableByteSet0, (Object) string0);
      tSynchronizedByteSet0.containsAll((TByteCollection) tUnmodifiableByteSet0);
      TByteHashSet tByteHashSet1 = new TByteHashSet(int0);
      TUnmodifiableByteSet tUnmodifiableByteSet1 = new TUnmodifiableByteSet((TByteSet) tByteHashSet1);
      Locale locale0 = Locale.getDefault();
      String string1 = locale0.getDisplayCountry();
      TSynchronizedByteSet tSynchronizedByteSet1 = new TSynchronizedByteSet((TByteSet) tUnmodifiableByteSet1, (Object) string1);
      TSynchronizedByteSet tSynchronizedByteSet2 = new TSynchronizedByteSet((TByteSet) tSynchronizedByteSet1);
      // Undeclared exception!
      try {
        tSynchronizedByteSet2.removeAll((TByteCollection) tByteHashSet1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)46;
      byteArray0[1] = byte1;
      byte byte2 = (byte)77;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-28);
      byteArray0[3] = byte3;
      byte byte4 = (byte)18;
      byteArray0[4] = byte4;
      byte byte5 = (byte)49;
      byteArray0[5] = byte5;
      byte byte6 = (byte)98;
      byteArray0[6] = byte6;
      byte byte7 = (byte)1;
      byteArray0[7] = byte7;
      TByteArrayList tByteArrayList0 = new TByteArrayList(byteArray0);
      int int0 = 1572;
      // Undeclared exception!
      try {
        tByteArrayList0.subList(int0, (int) byteArray0[4]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // end index 18 greater than begin index 1572
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 1435;
      float float0 = 0.0F;
      byte byte0 = (byte) (-1);
      TByteHashSet tByteHashSet0 = new TByteHashSet(int0, float0, byte0);
      TSynchronizedByteSet tSynchronizedByteSet0 = new TSynchronizedByteSet((TByteSet) tByteHashSet0);
      String string0 = "|xHq8B2";
      Locale locale0 = Locale.forLanguageTag(string0);
      String string1 = locale0.getDisplayVariant();
      TSynchronizedByteSet tSynchronizedByteSet1 = new TSynchronizedByteSet((TByteSet) tSynchronizedByteSet0, (Object) string1);
      byte byte1 = (byte) (-1);
      Byte byte2 = new Byte(byte1);
      String string2 = byte2.toString();
      tSynchronizedByteSet1.equals((Object) string2);
      int int1 = (-1540);
      TByteHashSet tByteHashSet1 = new TByteHashSet(int1);
      Locale locale1 = Locale.CANADA;
      String string3 = locale1.toLanguageTag();
      TSynchronizedByteCollection tSynchronizedByteCollection0 = new TSynchronizedByteCollection((TByteCollection) tByteHashSet1, (Object) string3);
      tSynchronizedByteCollection0.clear();
      tSynchronizedByteCollection0.toArray();
      tByteHashSet1.toArray();
      boolean boolean0 = tSynchronizedByteCollection0.retainAll((TByteCollection) tByteHashSet1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-128);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-85);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-27);
      byteArray0[2] = byte2;
      byte byte3 = (byte)41;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-98);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)120;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      TByteArrayList tByteArrayList0 = new TByteArrayList(byteArray0);
      TUnmodifiableRandomAccessByteList tUnmodifiableRandomAccessByteList0 = new TUnmodifiableRandomAccessByteList((TByteList) tByteArrayList0);
      int int0 = 4177;
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessByteList0.subList(int0, (int) byteArray0[7]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // end index 0 greater than begin index 4177
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-24);
      TByteArrayList tByteArrayList0 = null;
      try {
        tByteArrayList0 = new TByteArrayList(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-112);
      byteArray0[1] = byte1;
      TByteArrayList tByteArrayList0 = TByteArrayList.wrap(byteArray0);
      String string0 = "=!&L?i)*/.X&Yr";
      TSynchronizedByteCollection tSynchronizedByteCollection0 = new TSynchronizedByteCollection((TByteCollection) tByteArrayList0, (Object) string0);
      assertEquals(2, tSynchronizedByteCollection0.size());
  }

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      int int0 = 210719881;
      byte byte0 = (byte)0;
      TByteArrayList tByteArrayList0 = new TByteArrayList(int0, byte0);
      TSynchronizedByteList tSynchronizedByteList0 = new TSynchronizedByteList((TByteList) tByteArrayList0);
      byte byte1 = (byte) (-1);
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-70);
      byteArray0[1] = byte2;
      byte byte3 = (byte) (-26);
      byteArray0[2] = byte3;
      TByteHashSet tByteHashSet0 = new TByteHashSet(byteArray0);
      TSynchronizedByteSet tSynchronizedByteSet0 = new TSynchronizedByteSet((TByteSet) tByteHashSet0);
      tSynchronizedByteSet0.contains(byteArray0[1]);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = linkedList0.toString();
      TSynchronizedByteSet tSynchronizedByteSet1 = new TSynchronizedByteSet((TByteSet) tByteHashSet0, (Object) string0);
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"[]\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-295);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-26);
      byteArray0[0] = byte0;
      byte byte1 = (byte)105;
      byteArray0[1] = byte1;
      TByteHashSet tByteHashSet0 = new TByteHashSet(byteArray0);
      TSynchronizedByteSet tSynchronizedByteSet0 = new TSynchronizedByteSet((TByteSet) tByteHashSet0);
      tSynchronizedByteSet0.containsAll(tByteHashSet0._states);
      byte byte2 = (byte)43;
      byteArray0[2] = byte2;
      byte byte3 = (byte)61;
      byteArray0[3] = byte3;
      TByteArrayList tByteArrayList0 = new TByteArrayList(byteArray0);
      Locale locale0 = Locale.GERMANY;
      String string0 = "";
      // Undeclared exception!
      try {
        locale0.getUnicodeLocaleType(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TByteSet tByteSet0 = null;
      TSynchronizedByteSet tSynchronizedByteSet0 = null;
      try {
        tSynchronizedByteSet0 = new TSynchronizedByteSet(tByteSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-3);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-93);
      byteArray0[6] = byte6;
      TByteArrayList tByteArrayList0 = TByteArrayList.wrap(byteArray0);
      TSynchronizedRandomAccessByteList tSynchronizedRandomAccessByteList0 = new TSynchronizedRandomAccessByteList((TByteList) tByteArrayList0);
      tSynchronizedRandomAccessByteList0.size();
      TByteLinkedList tByteLinkedList0 = new TByteLinkedList();
      TByteProcedure tByteProcedure0 = null;
      TByteLinkedList tByteLinkedList1 = (TByteLinkedList)tByteLinkedList0.grep(tByteProcedure0);
      TSynchronizedRandomAccessByteList tSynchronizedRandomAccessByteList1 = new TSynchronizedRandomAccessByteList((TByteList) tByteLinkedList1);
      byte[] byteArray1 = new byte[2];
      byte byte7 = (byte)64;
      tSynchronizedRandomAccessByteList1.addAll((TByteCollection) tByteLinkedList1);
      byteArray1[0] = byte7;
      byteArray1[1] = byte7;
      TSynchronizedByteCollection tSynchronizedByteCollection0 = new TSynchronizedByteCollection((TByteCollection) tByteLinkedList0);
      byte byte8 = (byte) (-1);
      byteArray1[0] = byte8;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      tSynchronizedRandomAccessByteList1.retainAll((Collection<?>) linkedList0);
      byte byte9 = (byte)14;
      byteArray1[1] = byte9;
      tSynchronizedRandomAccessByteList1.hashCode();
      tSynchronizedByteCollection0.toArray(byteArray1);
      tSynchronizedByteCollection0.hashCode();
      tSynchronizedRandomAccessByteList1.containsAll(byteArray1);
      TByteIterator tByteIterator0 = tSynchronizedRandomAccessByteList1.iterator();
      assertEquals(false, tByteIterator0.hasNext());
  }

  @Test
  public void test15()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet();
      TSynchronizedByteSet tSynchronizedByteSet0 = new TSynchronizedByteSet((TByteSet) tByteHashSet0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)48;
      byteArray0[0] = byte0;
      byte byte1 = (byte)89;
      byteArray0[1] = byte1;
      boolean boolean0 = tSynchronizedByteSet0.addAll(byteArray0);
      assertEquals(false, tByteHashSet0.isEmpty());
      assertEquals(true, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-79);
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[0] = byte0;
      TByteCollection tByteCollection0 = null;
      byte byte1 = (byte) (-24);
      Byte byte2 = new Byte(byte1);
      String string0 = byte2.toString();
      byte2.shortValue();
      TSynchronizedByteCollection tSynchronizedByteCollection0 = new TSynchronizedByteCollection(tByteCollection0, (Object) string0);
      // Undeclared exception!
      try {
        tSynchronizedByteCollection0.removeAll(tByteCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 0;
      byte byte0 = (byte)2;
      TByteArrayList tByteArrayList0 = new TByteArrayList(int0, byte0);
      TSynchronizedRandomAccessByteList tSynchronizedRandomAccessByteList0 = new TSynchronizedRandomAccessByteList((TByteList) tByteArrayList0);
      int int1 = 0;
      int int2 = 0;
      int int3 = 0;
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byte byte1 = (byte)0;
      byteArray0[4] = byte1;
      byteArray0[5] = byte0;
      byteArray0[6] = byte0;
      byteArray0[7] = byte0;
      byteArray0[8] = byte0;
      byteArray0[9] = byte0;
      tSynchronizedRandomAccessByteList0.insert(int3, byteArray0);
      TSynchronizedRandomAccessByteList tSynchronizedRandomAccessByteList1 = (TSynchronizedRandomAccessByteList)tSynchronizedRandomAccessByteList0.subList(int1, int2);
      TSynchronizedRandomAccessByteList tSynchronizedRandomAccessByteList2 = new TSynchronizedRandomAccessByteList((TByteList) tSynchronizedRandomAccessByteList1);
      tSynchronizedRandomAccessByteList2.clear();
      assertEquals(0, tSynchronizedRandomAccessByteList2.size());
  }
}
