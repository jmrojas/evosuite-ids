/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TCharDoubleMap;
import gnu.trove.map.hash.TCharDoubleHashMap;
import gnu.trove.procedure.TCharProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharDoubleHashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TCharDoubleHash.getNoEntryKey()C: root-Branch
   * 2 gnu.trove.impl.hash.TCharDoubleHash.setUp(I)I: root-Branch
   * 3 gnu.trove.impl.hash.TCharDoubleHash.<init>(IF)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap((int) 'K', (float) 'K');
      char char0 = tCharDoubleHashMap0.getNoEntryKey();
      assertEquals(0.0, tCharDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals('\u0000', char0);
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TCharDoubleHash.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   * 2 gnu.trove.impl.hash.TCharDoubleHash.<init>(IFCD)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap((int) '\u0000', (-1641.0062F), 'L', (double) 'L');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tCharDoubleHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals('L', tCharDoubleHashMap0.getNoEntryKey());
      assertEquals(76.0, tCharDoubleHashMap0.getNoEntryValue(), 0.01D);
  }

  //Test case number: 2
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TCharDoubleHash.getNoEntryValue()D: root-Branch
   * 2 gnu.trove.impl.hash.TCharDoubleHash.insertKeyAt(IC)V: root-Branch
   * 3 gnu.trove.impl.hash.TCharDoubleHash.<init>(I)V: root-Branch
   * 4 gnu.trove.impl.hash.TCharDoubleHash.insertKey(C)I: I30 Branch 13 IFNE L279 - false
   */

  @Test
  public void test2()  throws Throwable  {
      char[] charArray0 = new char[1];
      double[] doubleArray0 = new double[7];
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      double double0 = tCharDoubleHashMap0.getNoEntryValue();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(false, tCharDoubleHashMap0.isEmpty());
      assertEquals("{\u0000=0.0}", tCharDoubleHashMap0.toString());
      assertEquals(17, tCharDoubleHashMap0.capacity());
      assertEquals('\u0000', tCharDoubleHashMap0.getNoEntryKey());
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TCharDoubleHash.contains(C)Z: I5 Branch 1 IFLT L178 - true
   * 2 gnu.trove.impl.hash.TCharDoubleHash.index(C)I: I37 Branch 5 IFNE L228 - false
   */

  @Test
  public void test3()  throws Throwable  {
      char[] charArray0 = new char[1];
      double[] doubleArray0 = new double[7];
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      boolean boolean0 = tCharDoubleHashMap0.contains('B');
      assertEquals(17, tCharDoubleHashMap0.capacity());
      assertEquals(0.0, tCharDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals('\u0000', tCharDoubleHashMap0.getNoEntryKey());
      assertEquals(false, boolean0);
      assertEquals("{\u0000=0.0}", tCharDoubleHashMap0.toString());
      assertEquals(1, tCharDoubleHashMap0.size());
  }

  //Test case number: 4
  /*
   * 7 covered goals:
   * 1 gnu.trove.impl.hash.TCharDoubleHash.contains(C)Z: I5 Branch 1 IFLT L178 - false
   * 2 gnu.trove.impl.hash.TCharDoubleHash.insertKey(C)I: I30 Branch 13 IFNE L279 - true
   * 3 gnu.trove.impl.hash.TCharDoubleHash.insertKey(C)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 4 gnu.trove.impl.hash.TCharDoubleHash.insertKey(C)I: I56 Branch 15 IF_ICMPNE L286 - false
   * 5 gnu.trove.impl.hash.TCharDoubleHash.index(C)I: I37 Branch 5 IFNE L228 - true
   * 6 gnu.trove.impl.hash.TCharDoubleHash.index(C)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 7 gnu.trove.impl.hash.TCharDoubleHash.index(C)I: I51 Branch 7 IF_ICMPNE L231 - false
   */

  @Test
  public void test4()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[3] = '_';
      double[] doubleArray0 = new double[8];
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      boolean boolean0 = tCharDoubleHashMap0.contains('_');
      assertEquals(17, tCharDoubleHashMap0.capacity());
      assertEquals(0.0, tCharDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals(2, tCharDoubleHashMap0.size());
      assertEquals(true, boolean0);
      assertEquals('\u0000', tCharDoubleHashMap0.getNoEntryKey());
  }

  //Test case number: 5
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TCharDoubleHash.forEach(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 2 IFLE L192 - true
   * 2 gnu.trove.impl.hash.TCharDoubleHash.forEach(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TCharDoubleHash.forEach(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   * 4 gnu.trove.impl.hash.TCharDoubleHash.removeAt(I)V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      char[] charArray0 = new char[1];
      double[] doubleArray0 = new double[7];
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      tCharDoubleHashMap0.remove('\u0000');
      tCharDoubleHashMap0.forEachKey((TCharProcedure) null);
      assertEquals(true, tCharDoubleHashMap0.isEmpty());
      assertEquals("{}", tCharDoubleHashMap0.toString());
  }

  //Test case number: 6
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TCharDoubleHash.forEach(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - false
   * 2 gnu.trove.impl.hash.TCharDoubleHash.<init>()V: root-Branch
   * 3 gnu.trove.impl.hash.TCharDoubleHash.forEach(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 4 gnu.trove.impl.hash.TCharDoubleHash.forEach(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

  @Test
  public void test6()  throws Throwable  {
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap();
      tCharDoubleHashMap0.put('f', (double) (-265));
      // Undeclared exception!
      try {
        tCharDoubleHashMap0.forEachKey((TCharProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 7
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TCharDoubleHash.index(C)I: I46 Branch 6 IF_ICMPNE L231 - true
   * 2 gnu.trove.impl.hash.TCharDoubleHash.indexRehashed(CIIB)I: I29 Branch 8 IFGE L245 - true
   * 3 gnu.trove.impl.hash.TCharDoubleHash.indexRehashed(CIIB)I: I46 Branch 9 IFNE L250 - false
   * 4 gnu.trove.impl.hash.TCharDoubleHash.<init>(IF)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap((-1683), (-1683));
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)64;
      tCharDoubleHashMap0._states = byteArray0;
      boolean boolean0 = tCharDoubleHashMap0.adjustValue('\\', (double) (-1683));
      assertEquals(false, boolean0);
      assertEquals('\u0000', tCharDoubleHashMap0.getNoEntryKey());
      assertEquals(0.0, tCharDoubleHashMap0.getNoEntryValue(), 0.01D);
  }

  //Test case number: 8
  /*
   * 5 covered goals:
   * 1 gnu.trove.impl.hash.TCharDoubleHash.indexRehashed(CIIB)I: I46 Branch 9 IFNE L250 - true
   * 2 gnu.trove.impl.hash.TCharDoubleHash.indexRehashed(CIIB)I: I58 Branch 10 IF_ICMPNE L254 - true
   * 3 gnu.trove.impl.hash.TCharDoubleHash.indexRehashed(CIIB)I: I70 Branch 12 IF_ICMPNE L256 - false
   * 4 gnu.trove.impl.hash.TCharDoubleHash.index(C)I: I51 Branch 7 IF_ICMPNE L231 - true
   * 5 gnu.trove.impl.hash.TCharDoubleHash.indexRehashed(CIIB)I: I29 Branch 8 IFGE L245 - false
   */

  @Test
  public void test8()  throws Throwable  {
      char[] charArray0 = new char[1];
      double[] doubleArray0 = new double[7];
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      tCharDoubleHashMap0._set = charArray0;
      boolean boolean0 = tCharDoubleHashMap0.adjustValue('D', 0.0);
      assertEquals(17, tCharDoubleHashMap0.capacity());
      assertEquals("{\u0000=0.0}", tCharDoubleHashMap0.toString());
      assertEquals('\u0000', tCharDoubleHashMap0.getNoEntryKey());
      assertEquals(0.0, tCharDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals(false, boolean0);
  }

  //Test case number: 9
  /*
   * 7 covered goals:
   * 1 gnu.trove.impl.hash.TCharDoubleHash.indexRehashed(CIIB)I: I58 Branch 10 IF_ICMPNE L254 - false
   * 2 gnu.trove.impl.hash.TCharDoubleHash.indexRehashed(CIIB)I: I61 Branch 11 IF_ICMPEQ L254 - false
   * 3 gnu.trove.impl.hash.TCharDoubleHash.insertKey(C)I: I56 Branch 15 IF_ICMPNE L286 - true
   * 4 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 5 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I45 Branch 18 IFGE L310 - true
   * 6 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I62 Branch 19 IFNE L316 - false
   * 7 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   */

  @Test
  public void test9()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = 'i';
      double[] doubleArray0 = new double[7];
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      boolean boolean0 = tCharDoubleHashMap0.increment('i');
      assertEquals("{6=0.0, i=1.0, \u0000=0.0}", tCharDoubleHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 10
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.hash.TCharDoubleHash.indexRehashed(CIIB)I: I70 Branch 12 IF_ICMPNE L256 - true
   * 2 gnu.trove.impl.hash.TCharDoubleHash.contains(C)Z: I5 Branch 1 IFLT L178 - true
   * 3 gnu.trove.impl.hash.TCharDoubleHash.index(C)I: I51 Branch 7 IF_ICMPNE L231 - true
   * 4 gnu.trove.impl.hash.TCharDoubleHash.indexRehashed(CIIB)I: I29 Branch 8 IFGE L245 - true
   * 5 gnu.trove.impl.hash.TCharDoubleHash.indexRehashed(CIIB)I: I29 Branch 8 IFGE L245 - false
   * 6 gnu.trove.impl.hash.TCharDoubleHash.indexRehashed(CIIB)I: I46 Branch 9 IFNE L250 - true
   * 7 gnu.trove.impl.hash.TCharDoubleHash.indexRehashed(CIIB)I: I46 Branch 9 IFNE L250 - false
   * 8 gnu.trove.impl.hash.TCharDoubleHash.indexRehashed(CIIB)I: I58 Branch 10 IF_ICMPNE L254 - true
   */

  @Test
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'N';
      charArray0[1] = 'H';
      double[] doubleArray0 = new double[8];
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      tCharDoubleHashMap0.contains('_');
      assertEquals(0.0, tCharDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals("{N=0.0, H=0.0, \u0000=0.0}", tCharDoubleHashMap0.toString());
      assertEquals(3, tCharDoubleHashMap0.size());
  }

  //Test case number: 11
  /*
   * 5 covered goals:
   * 1 gnu.trove.impl.hash.TCharDoubleHash.insertKey(C)I: I50 Branch 14 IF_ICMPNE L286 - true
   * 2 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 3 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 4 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I45 Branch 18 IFGE L310 - false
   * 5 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I67 Branch 20 IF_ICMPEQ L317 - false
   */

  @Test
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[1];
      double[] doubleArray0 = new double[7];
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      tCharDoubleHashMap0.remove('\u0000');
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap(tCharDoubleHashMap0._set, doubleArray0);
      assertEquals(0, tCharDoubleHashMap0.size());
      
      tCharDoubleHashMap0.putAll((TCharDoubleMap) tCharDoubleHashMap1);
      assertTrue(tCharDoubleHashMap1.equals(tCharDoubleHashMap0));
  }

  //Test case number: 12
  /*
   * 11 covered goals:
   * 1 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I62 Branch 19 IFNE L316 - true
   * 2 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 3 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I115 Branch 23 IF_ICMPNE L332 - false
   * 4 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I120 Branch 24 IF_ICMPEQ L336 - false
   * 5 gnu.trove.impl.hash.TCharDoubleHash.removeAt(I)V: root-Branch
   * 6 gnu.trove.impl.hash.TCharDoubleHash.insertKey(C)I: I50 Branch 14 IF_ICMPNE L286 - true
   * 7 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 8 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 9 gnu.trove.impl.hash.TCharDoubleHash.index(C)I: I37 Branch 5 IFNE L228 - true
   * 10 gnu.trove.impl.hash.TCharDoubleHash.index(C)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 11 gnu.trove.impl.hash.TCharDoubleHash.index(C)I: I51 Branch 7 IF_ICMPNE L231 - false
   */

  @Test
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[1];
      double[] doubleArray0 = new double[7];
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      tCharDoubleHashMap0.remove('\u0000');
      tCharDoubleHashMap0._set = charArray0;
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap(tCharDoubleHashMap0._set, doubleArray0);
      assertEquals(0, tCharDoubleHashMap0.size());
      
      tCharDoubleHashMap0.putAll((TCharDoubleMap) tCharDoubleHashMap1);
      assertEquals("{\u0000=0.0}", tCharDoubleHashMap0.toString());
  }

  //Test case number: 13
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 2 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I103 Branch 22 IF_ICMPNE L327 - true
   * 3 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I120 Branch 24 IF_ICMPEQ L336 - true
   * 4 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I115 Branch 23 IF_ICMPNE L332 - false
   */

  @Test
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[1];
      double[] doubleArray0 = new double[7];
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      tCharDoubleHashMap0._set = charArray0;
      // Undeclared exception!
      try {
        tCharDoubleHashMap0.put('D', 0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No free or removed slots available. Key set full?!!
         //
      }
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I103 Branch 22 IF_ICMPNE L327 - false
   */

  @Test
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = 'i';
      double[] doubleArray0 = new double[7];
      charArray0[3] = 'i';
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      assertEquals(0.0, tCharDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals(3, tCharDoubleHashMap0.size());
      assertEquals("{6=0.0, i=0.0, \u0000=0.0}", tCharDoubleHashMap0.toString());
  }

  //Test case number: 15
  /*
   * 17 covered goals:
   * 1 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I115 Branch 23 IF_ICMPNE L332 - true
   * 2 gnu.trove.impl.hash.TCharDoubleHash.setUp(I)I: root-Branch
   * 3 gnu.trove.impl.hash.TCharDoubleHash.insertKeyAt(IC)V: root-Branch
   * 4 gnu.trove.impl.hash.TCharDoubleHash.<init>(I)V: root-Branch
   * 5 gnu.trove.impl.hash.TCharDoubleHash.insertKey(C)I: I30 Branch 13 IFNE L279 - true
   * 6 gnu.trove.impl.hash.TCharDoubleHash.insertKey(C)I: I30 Branch 13 IFNE L279 - false
   * 7 gnu.trove.impl.hash.TCharDoubleHash.insertKey(C)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 8 gnu.trove.impl.hash.TCharDoubleHash.insertKey(C)I: I56 Branch 15 IF_ICMPNE L286 - true
   * 9 gnu.trove.impl.hash.TCharDoubleHash.insertKey(C)I: I56 Branch 15 IF_ICMPNE L286 - false
   * 10 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 11 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I45 Branch 18 IFGE L310 - true
   * 12 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I45 Branch 18 IFGE L310 - false
   * 13 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I62 Branch 19 IFNE L316 - true
   * 14 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I62 Branch 19 IFNE L316 - false
   * 15 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 16 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 17 gnu.trove.impl.hash.TCharDoubleHash.insertKeyRehash(CIIB)I: I103 Branch 22 IF_ICMPNE L327 - true
   */

  @Test
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'N';
      charArray0[1] = 'H';
      charArray0[3] = '_';
      double[] doubleArray0 = new double[8];
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      assertEquals(0.0, tCharDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals("{_=0.0, N=0.0, H=0.0, \u0000=0.0}", tCharDoubleHashMap0.toString());
      assertEquals(4, tCharDoubleHashMap0.size());
  }
}
