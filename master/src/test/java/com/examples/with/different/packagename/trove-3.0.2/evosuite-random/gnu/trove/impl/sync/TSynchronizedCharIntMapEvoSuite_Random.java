/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedCharIntMap;
import gnu.trove.iterator.TCharIntIterator;
import gnu.trove.map.TCharIntMap;
import gnu.trove.map.hash.TCharIntHashMap;
import gnu.trove.procedure.TCharProcedure;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedCharIntMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 681;
          TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0);
          Locale locale0 = Locale.SIMPLIFIED_CHINESE;
          String string0 = locale0.getDisplayName();
          TSynchronizedCharIntMap tSynchronizedCharIntMap0 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap0, (Object) string0);
          char char0 = 'I';
          tSynchronizedCharIntMap0.containsKey(char0);
          String string1 = "T!p~9d=RXE\\d)%";
          // Undeclared exception!
          try {
            File.createTempFile(string1, string1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-1239);
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0);
      String string0 = "";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = '=';
      charArray0[0] = char0;
      char char1 = 'K';
      charArray0[1] = char1;
      char char2 = 'e';
      charArray0[2] = char2;
      char char3 = '+';
      charArray0[3] = char3;
      char char4 = 'V';
      charArray0[4] = char4;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) charArray0[3];
      intArray0[1] = (int) char4;
      intArray0[2] = (int) char3;
      intArray0[3] = (int) charArray0[0];
      intArray0[4] = (int) char4;
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      Locale locale0 = Locale.KOREA;
      Locale locale1 = Locale.CANADA_FRENCH;
      String string0 = locale0.getDisplayVariant(locale1);
      TSynchronizedCharIntMap tSynchronizedCharIntMap0 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap0, (Object) string0);
      tSynchronizedCharIntMap0.clear();
      assertEquals(0, tCharIntHashMap0.size());
      assertEquals(true, tCharIntHashMap0.isEmpty());
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0);
      TSynchronizedCharIntMap tSynchronizedCharIntMap0 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap0);
      char char0 = '3';
      tSynchronizedCharIntMap0.putIfAbsent(char0, char0);
      assertEquals(false, tCharIntHashMap0.isEmpty());
      assertEquals("{3=51}", tCharIntHashMap0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      float float0 = (-1778.2808F);
      char char0 = '^';
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0, float0, char0, int0);
      TSynchronizedCharIntMap tSynchronizedCharIntMap0 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap0);
      TCharIntMap tCharIntMap0 = null;
      int int1 = 1917;
      tCharIntHashMap0.adjustOrPutValue(char0, int1, int0);
      String string0 = "TW";
      File file0 = new File(string0, string0);
      tSynchronizedCharIntMap0.putAll((TCharIntMap) tCharIntHashMap0);
      tSynchronizedCharIntMap0.toString();
      String string1 = file0.getAbsolutePath();
      TSynchronizedCharIntMap tSynchronizedCharIntMap1 = new TSynchronizedCharIntMap(tCharIntMap0, (Object) string1);
      char char1 = 't';
      int int2 = (-2023);
      String string2 = "\\b*ZPm_-+";
      char char2 = '_';
      tSynchronizedCharIntMap0.get(char2);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string1, (int) char0, string1, string2, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected hostname at index 8: TW://TW@/mnt/fastdata/ac1gf/Experiments_Major/apps/trove-3.0.2/TW/TW:94/mnt/fastdata/ac1gf/Experiments_Major/apps/trove-3.0.2/TW/TW?%5Cb*ZPm_-+#TW
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TCharIntMap tCharIntMap0 = null;
      TSynchronizedCharIntMap tSynchronizedCharIntMap0 = null;
      try {
        tSynchronizedCharIntMap0 = new TSynchronizedCharIntMap(tCharIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      char[] charArray0 = new char[10];
      char char0 = ' ';
      charArray0[0] = char0;
      char char1 = 'o';
      charArray0[1] = char1;
      int int0 = 1998;
      float float0 = 497.54697F;
      char char2 = '<';
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0, float0, char2, int0);
      int int1 = 0;
      Integer integer0 = new Integer(int1);
      TSynchronizedCharIntMap tSynchronizedCharIntMap0 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap0, (Object) integer0);
      tSynchronizedCharIntMap0.isEmpty();
      char char3 = '@';
      charArray0[2] = char3;
      char char4 = '=';
      charArray0[3] = char4;
      char char5 = 'b';
      charArray0[4] = char5;
      char char6 = 'R';
      charArray0[5] = char6;
      char char7 = 'o';
      charArray0[6] = char7;
      char char8 = ' ';
      float float1 = 113.51704F;
      char char9 = 'Y';
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap((int) charArray0[5], float1, char9, (int) charArray0[0]);
      TSynchronizedCharIntMap tSynchronizedCharIntMap1 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap1);
      TSynchronizedCharIntMap tSynchronizedCharIntMap2 = new TSynchronizedCharIntMap((TCharIntMap) tSynchronizedCharIntMap1);
      charArray0[7] = char8;
      char char10 = '7';
      charArray0[8] = char10;
      char char11 = 'l';
      charArray0[9] = char11;
      int[] intArray0 = new int[3];
      int int2 = 263;
      intArray0[0] = int2;
      int int3 = 1;
      intArray0[1] = int3;
      intArray0[2] = (int) char4;
      TCharIntHashMap tCharIntHashMap2 = new TCharIntHashMap(charArray0, intArray0);
      TSynchronizedCharIntMap tSynchronizedCharIntMap3 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap2);
      TSynchronizedCharIntMap tSynchronizedCharIntMap4 = new TSynchronizedCharIntMap((TCharIntMap) tSynchronizedCharIntMap3);
      tSynchronizedCharIntMap4.putIfAbsent(charArray0[9], charArray0[9]);
      assertEquals("{o=1, @=61, l=108,  =263}", tCharIntHashMap2.toString());
      assertEquals(4, tSynchronizedCharIntMap3.size());
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-1469);
      char char0 = ']';
      int int1 = (-911);
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0, (float) int0, char0, int1);
      TSynchronizedCharIntMap tSynchronizedCharIntMap0 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap0);
      assertEquals(']', tSynchronizedCharIntMap0.getNoEntryKey());
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 1436;
      char char0 = '|';
      int int1 = 0;
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int1);
      TSynchronizedCharIntMap tSynchronizedCharIntMap0 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap0);
      TCharIntIterator tCharIntIterator0 = tSynchronizedCharIntMap0.iterator();
      assertNotNull(tCharIntIterator0);
      
      int int2 = (-1315);
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap(int0, (float) int0, char0, int2);
      Locale locale0 = Locale.FRENCH;
      String string0 = locale0.getDisplayCountry();
      TSynchronizedCharIntMap tSynchronizedCharIntMap1 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap1, (Object) string0);
      char char1 = 'X';
      tSynchronizedCharIntMap1.put(char1, int0);
      assertEquals(false, tCharIntHashMap1.isEmpty());
      
      TCharIntHashMap tCharIntHashMap2 = new TCharIntHashMap();
      TSynchronizedCharIntMap tSynchronizedCharIntMap2 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap2);
      tSynchronizedCharIntMap2.valueCollection();
      assertFalse(tCharIntHashMap2.equals(tCharIntHashMap1));
  }

  @Test
  public void test9()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = 'e';
      charArray0[0] = char0;
      char char1 = 'M';
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap((int) char0, (float) char0, char1, (int) char0);
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap0);
      TSynchronizedCharIntMap tSynchronizedCharIntMap0 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap1);
      Locale locale0 = Locale.GERMAN;
      char char2 = 'O';
      String string0 = locale0.getExtension(char2);
      TSynchronizedCharIntMap tSynchronizedCharIntMap1 = new TSynchronizedCharIntMap((TCharIntMap) tSynchronizedCharIntMap0, (Object) string0);
      char char3 = '!';
      charArray0[1] = char3;
      char char4 = '@';
      charArray0[2] = char4;
      char char5 = '9';
      charArray0[3] = char5;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) char0;
      intArray0[1] = (int) charArray0[2];
      TCharIntHashMap tCharIntHashMap2 = new TCharIntHashMap(charArray0, intArray0);
      TSynchronizedCharIntMap tSynchronizedCharIntMap2 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap2);
      int int0 = tSynchronizedCharIntMap2.remove(charArray0[1]);
      assertEquals("{e=101}", tCharIntHashMap2.toString());
      assertEquals(64, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      TSynchronizedCharIntMap tSynchronizedCharIntMap0 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap0);
      tSynchronizedCharIntMap0.size();
      TSynchronizedCharIntMap tSynchronizedCharIntMap1 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap0);
      TSynchronizedCharIntMap tSynchronizedCharIntMap2 = new TSynchronizedCharIntMap((TCharIntMap) tSynchronizedCharIntMap1);
      int int0 = 0;
      tSynchronizedCharIntMap2.containsValue(int0);
      int int1 = (-787);
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap(int1);
      // Undeclared exception!
      try {
        tCharIntHashMap1.setAutoCompactionFactor((float) int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -787.0
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      int int1 = 766;
      char char0 = '/';
      int int2 = (-1);
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int1, (float) int1, char0, int2);
      TSynchronizedCharIntMap tSynchronizedCharIntMap0 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap0);
      int[] intArray0 = new int[10];
      intArray0[0] = int1;
      intArray0[1] = (int) char0;
      intArray0[2] = int2;
      intArray0[3] = int0;
      intArray0[4] = (int) char0;
      intArray0[5] = (int) char0;
      intArray0[6] = int1;
      intArray0[7] = (int) char0;
      intArray0[8] = int1;
      intArray0[9] = (int) char0;
      tSynchronizedCharIntMap0.values(intArray0);
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap(int0, float0);
      char char1 = 'R';
      tCharIntHashMap1.increment(char1);
      TSynchronizedCharIntMap tSynchronizedCharIntMap1 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap1);
      tSynchronizedCharIntMap1.hashCode();
      String string0 = "v0pfYUf?(bjp$5>";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: v0pfYUf?(bjp$5>://v0pfYUf%3F(bjp$5%3Ev0pfYUf%3F(bjp$5%3E?v0pfYUf?(bjp$5%3E#v0pfYUf?(bjp$5%3E
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 0;
      float float0 = (-1.0F);
      char char0 = '2';
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0, float0, char0, (int) char0);
      String string0 = ">";
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-111);
      byteArray0[0] = byte0;
      tCharIntHashMap0._states = byteArray0;
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 0: >
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      float float0 = (-1567.11F);
      char char0 = '&';
      int int1 = 74;
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      char char1 = 'N';
      tCharIntHashMap0.remove(char1);
      TSynchronizedCharIntMap tSynchronizedCharIntMap0 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap0);
      String string0 = "]!lVPwe$v_b";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 0: ]!lVPwe$v_b
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-692);
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0);
      String string0 = "?9N=";
      Integer integer0 = Integer.getInteger(string0, (Integer) int0);
      String string1 = integer0.toString();
      TSynchronizedCharIntMap tSynchronizedCharIntMap0 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap0, (Object) string1);
      char[] charArray0 = tSynchronizedCharIntMap0.keys();
      assertNotNull(charArray0);
      
      int int1 = 1662;
      char char0 = 'm';
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap(int1, (float) int1, char0, (int) char0);
      tCharIntHashMap1.trimToSize();
      Integer integer1 = new Integer(int1);
      TCharProcedure tCharProcedure0 = null;
      tCharIntHashMap1.forEach(tCharProcedure0);
      TSynchronizedCharIntMap tSynchronizedCharIntMap1 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap1, (Object) integer1);
      char char1 = 'Y';
      int int2 = 37;
      tSynchronizedCharIntMap1.put(char1, int2);
      tSynchronizedCharIntMap1.increment(char1);
      int int3 = tSynchronizedCharIntMap1.adjustOrPutValue(char0, (int) char0, int1);
      assertEquals("{Y=38, m=1662}", tCharIntHashMap1.toString());
      assertEquals(1662, int3);
  }

  @Test
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = 'q';
      charArray0[0] = char0;
      char char1 = 'p';
      char char2 = '<';
      int int0 = (-1860);
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap((int) char1, (float) charArray0[0], char2, int0);
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap0);
      TSynchronizedCharIntMap tSynchronizedCharIntMap0 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap1);
      int int1 = 0;
      String string0 = Character.getName(int1);
      TSynchronizedCharIntMap tSynchronizedCharIntMap1 = new TSynchronizedCharIntMap((TCharIntMap) tSynchronizedCharIntMap0, (Object) string0);
      char char3 = '8';
      tSynchronizedCharIntMap1.putIfAbsent(char3, char2);
      charArray0[0] = char1;
      charArray0[1] = char0;
      char char4 = 'F';
      charArray0[1] = char4;
      int int2 = 1357;
      float float0 = (-1471.8555F);
      TCharIntHashMap tCharIntHashMap2 = new TCharIntHashMap(int2, float0, char0, int2);
      TSynchronizedCharIntMap tSynchronizedCharIntMap2 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap2);
      tSynchronizedCharIntMap2.keySet();
      int[] intArray0 = new int[6];
      intArray0[0] = (int) charArray0[1];
      intArray0[1] = (int) char4;
      intArray0[2] = (int) charArray0[0];
      int int3 = 5779;
      tCharIntHashMap2.ensureCapacity(int3);
      intArray0[3] = (int) charArray0[0];
      intArray0[4] = (int) charArray0[0];
      intArray0[5] = (int) char4;
      TCharIntHashMap tCharIntHashMap3 = new TCharIntHashMap(charArray0, intArray0);
      TSynchronizedCharIntMap tSynchronizedCharIntMap3 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap3);
      assertEquals(false, tSynchronizedCharIntMap3.isEmpty());
  }

  @Test
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = '?';
      charArray0[0] = char0;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) char0;
      intArray0[1] = (int) char0;
      intArray0[2] = (int) char0;
      intArray0[3] = (int) char0;
      intArray0[4] = (int) char0;
      intArray0[5] = (int) char0;
      intArray0[6] = (int) charArray0[0];
      intArray0[7] = (int) charArray0[0];
      intArray0[8] = (int) char0;
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      TSynchronizedCharIntMap tSynchronizedCharIntMap0 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap0);
      String string0 = Integer.toOctalString(intArray0[1]);
      TSynchronizedCharIntMap tSynchronizedCharIntMap1 = new TSynchronizedCharIntMap((TCharIntMap) tSynchronizedCharIntMap0, (Object) string0);
      int int0 = tSynchronizedCharIntMap1.getNoEntryValue();
      assertEquals(0, int0);
  }

  @Test
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = 'm';
      charArray0[0] = char0;
      char char1 = 'r';
      int int0 = (-977);
      float float0 = (-1.0F);
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0, float0);
      TSynchronizedCharIntMap tSynchronizedCharIntMap0 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap0);
      String string0 = tSynchronizedCharIntMap0.toString();
      TSynchronizedCharIntMap tSynchronizedCharIntMap1 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap0, (Object) string0);
      tSynchronizedCharIntMap1.getNoEntryKey();
      charArray0[1] = char1;
      char char2 = 'x';
      charArray0[2] = char2;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) charArray0[2];
      intArray0[1] = (int) charArray0[1];
      intArray0[2] = (int) char0;
      intArray0[3] = (int) charArray0[0];
      intArray0[4] = (int) char1;
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap(charArray0, intArray0);
      TSynchronizedCharIntMap tSynchronizedCharIntMap2 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap1);
      int[] intArray1 = tSynchronizedCharIntMap2.values();
      assertNotSame(intArray0, intArray1);
  }

  @Test
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = 'F';
      charArray0[0] = char0;
      char char1 = '`';
      charArray0[1] = char1;
      char char2 = ' ';
      charArray0[2] = char2;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) charArray0[0];
      intArray0[1] = (int) charArray0[2];
      intArray0[2] = (int) char1;
      intArray0[3] = (int) charArray0[2];
      intArray0[4] = (int) char1;
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      TSynchronizedCharIntMap tSynchronizedCharIntMap0 = new TSynchronizedCharIntMap((TCharIntMap) tCharIntHashMap0);
      boolean boolean0 = tSynchronizedCharIntMap0.isEmpty();
      assertEquals(false, boolean0);
  }
}
