/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TByteFunction;
import gnu.trove.map.TDoubleByteMap;
import gnu.trove.map.hash.TDoubleByteHashMap;
import gnu.trove.procedure.TByteProcedure;
import gnu.trove.procedure.TDoubleByteProcedure;
import gnu.trove.procedure.TDoubleProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleByteHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TDoubleByteHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.keySet()Lgnu/trove/set/TDoubleSet;: root-Branch
   * 3 gnu.trove.map.hash.TDoubleByteHashMap.setUp(I)I: root-Branch
   * 4 gnu.trove.map.hash.TDoubleByteHashMap.<init>()V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      tDoubleByteHashMap0.keySet();
      assertEquals(23, tDoubleByteHashMap0.capacity());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap$TValueView.<init>(Lgnu/trove/map/hash/TDoubleByteHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.valueCollection()Lgnu/trove/TByteCollection;: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      tDoubleByteHashMap0.valueCollection();
      assertEquals(23, tDoubleByteHashMap0.capacity());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-751));
      boolean boolean0 = tDoubleByteHashMap0.forEachKey((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 3
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.put(DB)B: root-Branch
   * 3 gnu.trove.map.hash.TDoubleByteHashMap.<init>([D[B)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 4 gnu.trove.map.hash.TDoubleByteHashMap.<init>([D[B)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 5 gnu.trove.map.hash.TDoubleByteHashMap.doPut(DBI)B: I12 Branch 40 IFGE L214 - true
   * 6 gnu.trove.map.hash.TDoubleByteHashMap.doPut(DBI)B: I12 Branch 40 IFGE L214 - false
   * 7 gnu.trove.map.hash.TDoubleByteHashMap.doPut(DBI)B: I41 Branch 41 IFEQ L221 - true
   * 8 gnu.trove.map.hash.TDoubleByteHashMap.doPut(DBI)B: I41 Branch 41 IFEQ L221 - false
   * 9 gnu.trove.map.hash.TDoubleByteHashMap.remove(D)B: I14 Branch 46 IFLT L276 - false
   */

  @Test
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-2027);
      byte[] byteArray0 = new byte[10];
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      assertEquals(2, tDoubleByteHashMap0.size());
      
      byte byte0 = tDoubleByteHashMap0.remove((double) (-2027));
      assertEquals("{0.0=0}", tDoubleByteHashMap0.toString());
      assertEquals((byte)0, byte0);
  }

  //Test case number: 4
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.iterator()Lgnu/trove/iterator/TDoubleByteIterator;: root-Branch
   * 2 gnu.trove.map.hash.TDoubleByteHashMap$TDoubleByteHashIterator.<init>(Lgnu/trove/map/hash/TDoubleByteHashMap;Lgnu/trove/map/hash/TDoubleByteHashMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TDoubleByteHashMap.<init>(Lgnu/trove/map/TDoubleByteMap;)V: I10 Branch 34 IFEQ L133 - false
   * 4 gnu.trove.map.hash.TDoubleByteHashMap.<init>(Lgnu/trove/map/TDoubleByteMap;)V: I40 Branch 35 IFEQ L139 - false
   * 5 gnu.trove.map.hash.TDoubleByteHashMap.<init>(Lgnu/trove/map/TDoubleByteMap;)V: I52 Branch 36 IFEQ L143 - false
   * 6 gnu.trove.map.hash.TDoubleByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 7 gnu.trove.map.hash.TDoubleByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 8 gnu.trove.map.hash.TDoubleByteHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 9 gnu.trove.map.hash.TDoubleByteHashMap.putAll(Lgnu/trove/map/TDoubleByteMap;)V: I15 Branch 43 IFEQ L243 - true
   * 10 gnu.trove.map.hash.TDoubleByteHashMap.<init>(IFDB)V: root-Branch
   */

//   @Test
//   public void test4()  throws Throwable  {
//       TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(91, (float) (byte) (-114), (double) 91, (byte) (-114));
//       TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap((TDoubleByteMap) tDoubleByteHashMap0);
//       assertEquals(91.0, tDoubleByteHashMap1.getNoEntryKey(), 0.01D);
//       assertEquals(3, tDoubleByteHashMap1.capacity());
//       assertEquals(-114, tDoubleByteHashMap1.getNoEntryValue());
//   }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.clear()V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-751));
      tDoubleByteHashMap0.clear();
      assertEquals("{}", tDoubleByteHashMap0.toString());
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.increment(D)Z: root-Branch
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.adjustValue(DB)Z: I9 Branch 71 IFGE L477 - false
   */

  @Test
  public void test6()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      boolean boolean0 = tDoubleByteHashMap0.increment(1.0);
      assertEquals(false, boolean0);
      assertEquals(23, tDoubleByteHashMap0.capacity());
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.containsKey(D)Z: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      byte[] byteArray0 = new byte[10];
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      tDoubleByteHashMap0.containsKey(1.0);
      assertEquals("{0.0=0}", tDoubleByteHashMap0.toString());
      assertEquals(1, tDoubleByteHashMap0.size());
      assertEquals(23, tDoubleByteHashMap0.capacity());
  }

  //Test case number: 8
  /*
   * 14 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap$TDoubleByteHashIterator.key()D: root-Branch
   * 2 gnu.trove.map.hash.TDoubleByteHashMap$TDoubleByteHashIterator.advance()V: root-Branch
   * 3 gnu.trove.map.hash.TDoubleByteHashMap$TDoubleByteHashIterator.value()B: root-Branch
   * 4 gnu.trove.map.hash.TDoubleByteHashMap.<init>(Lgnu/trove/map/TDoubleByteMap;)V: I40 Branch 35 IFEQ L139 - true
   * 5 gnu.trove.map.hash.TDoubleByteHashMap.<init>(Lgnu/trove/map/TDoubleByteMap;)V: I52 Branch 36 IFEQ L143 - true
   * 6 gnu.trove.map.hash.TDoubleByteHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 7 gnu.trove.map.hash.TDoubleByteHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   * 8 gnu.trove.map.hash.TDoubleByteHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - false
   * 9 gnu.trove.map.hash.TDoubleByteHashMap.putAll(Lgnu/trove/map/TDoubleByteMap;)V: I15 Branch 43 IFEQ L243 - false
   * 10 gnu.trove.map.hash.TDoubleByteHashMap.iterator()Lgnu/trove/iterator/TDoubleByteIterator;: root-Branch
   * 11 gnu.trove.map.hash.TDoubleByteHashMap.<init>(Lgnu/trove/map/TDoubleByteMap;)V: I10 Branch 34 IFEQ L133 - false
   * 12 gnu.trove.map.hash.TDoubleByteHashMap.putAll(Lgnu/trove/map/TDoubleByteMap;)V: I15 Branch 43 IFEQ L243 - true
   * 13 gnu.trove.map.hash.TDoubleByteHashMap$TDoubleByteHashIterator.<init>(Lgnu/trove/map/hash/TDoubleByteHashMap;Lgnu/trove/map/hash/TDoubleByteHashMap;)V: root-Branch
   * 14 gnu.trove.map.hash.TDoubleByteHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-1013), (-1013));
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      Byte byte0 = Byte.valueOf((byte) (-1));
      hashMap0.put((Double) (-171.28661604989375), byte0);
      tDoubleByteHashMap0.putAll((Map<? extends Double, ? extends Byte>) hashMap0);
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap((TDoubleByteMap) tDoubleByteHashMap0);
      assertEquals("{-171.28661604989375=-1}", tDoubleByteHashMap0.toString());
      assertEquals(7, tDoubleByteHashMap1.capacity());
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.putIfAbsent(DB)B: I9 Branch 39 IFGE L205 - false
   */

  @Test
  public void test9()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      byte[] byteArray0 = new byte[8];
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      byte byte0 = tDoubleByteHashMap0.putIfAbsent((double) (byte)0, (byte) (-18));
      assertEquals(17, tDoubleByteHashMap0.capacity());
      assertEquals(1, tDoubleByteHashMap0.size());
      assertEquals((byte)0, byte0);
      assertEquals("{0.0=0}", tDoubleByteHashMap0.toString());
  }

  //Test case number: 10
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.get(D)B: I9 Branch 44 IFGE L253 - true
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.adjustOrPutValue(DBB)B: I9 Branch 72 IFGE L491 - true
   * 3 gnu.trove.map.hash.TDoubleByteHashMap.adjustOrPutValue(DBB)B: I59 Branch 73 IFEQ L502 - false
   * 4 gnu.trove.map.hash.TDoubleByteHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 5 gnu.trove.map.hash.TDoubleByteHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 6 gnu.trove.map.hash.TDoubleByteHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 7 gnu.trove.map.hash.TDoubleByteHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 8 gnu.trove.map.hash.TDoubleByteHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 9 gnu.trove.map.hash.TDoubleByteHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 10 gnu.trove.map.hash.TDoubleByteHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - true
   */

  @Test
  public void test10()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(0);
      tDoubleByteHashMap0.adjustOrPutValue(14.725401287685994, (byte)0, (byte)0);
      boolean boolean0 = tDoubleByteHashMap0.equals((Object) tDoubleByteHashMap0);
      assertEquals(false, tDoubleByteHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.get(D)B: I9 Branch 44 IFGE L253 - false
   */

  @Test
  public void test11()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(1254, (float) 1254, (double) 1254, (byte) (-9));
      byte byte0 = tDoubleByteHashMap0.get((double) (byte) (-9));
      assertEquals((byte) (-9), byte0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-1190));
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap(tDoubleByteHashMap0._set, tDoubleByteHashMap0._states);
      boolean boolean0 = tDoubleByteHashMap1.isEmpty();
      assertEquals(true, tDoubleByteHashMap0.isEmpty());
      assertEquals(7, tDoubleByteHashMap1.capacity());
      assertEquals(false, boolean0);
      assertEquals(1, tDoubleByteHashMap1.size());
      assertEquals("{0.0=0}", tDoubleByteHashMap1.toString());
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test13()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-1190));
      boolean boolean0 = tDoubleByteHashMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.remove(D)B: I14 Branch 46 IFLT L276 - true
   */

  @Test
  public void test14()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(0);
      byte byte0 = tDoubleByteHashMap0.remove((double) 0);
      assertEquals(true, tDoubleByteHashMap0.isEmpty());
      assertEquals((byte)0, byte0);
  }

  //Test case number: 15
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.keys()[D: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.keys()[D: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TDoubleByteHashMap.keys()[D: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TDoubleByteHashMap.keys()[D: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(91, (float) (byte) (-114), (double) 91, (byte) (-114));
      tDoubleByteHashMap0.put((double) (byte) (-114), (byte) (-114));
      tDoubleByteHashMap0.keys();
      assertEquals(false, tDoubleByteHashMap0.isEmpty());
      assertEquals("{-114.0=-114}", tDoubleByteHashMap0.toString());
  }

  //Test case number: 16
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.keys([D)[D: I10 Branch 49 IF_ICMPGE L315 - true
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.keys([D)[D: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TDoubleByteHashMap.keys([D)[D: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TDoubleByteHashMap.keys([D)[D: I44 Branch 51 IF_ICMPNE L323 - true
   * 5 gnu.trove.map.hash.TDoubleByteHashMap.<init>(IFDB)V: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(91, (float) (byte) (-114), (double) 91, (byte) (-114));
      double[] doubleArray0 = tDoubleByteHashMap0.keys(tDoubleByteHashMap0._set);
      assertNotNull(doubleArray0);
  }

  //Test case number: 17
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.keys([D)[D: I10 Branch 49 IF_ICMPGE L315 - false
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.keys([D)[D: I44 Branch 51 IF_ICMPNE L323 - false
   * 3 gnu.trove.map.hash.TDoubleByteHashMap.keys([D)[D: I10 Branch 49 IF_ICMPGE L315 - true
   * 4 gnu.trove.map.hash.TDoubleByteHashMap.keys([D)[D: I37 Branch 50 IFLE L322 - true
   * 5 gnu.trove.map.hash.TDoubleByteHashMap.keys([D)[D: I37 Branch 50 IFLE L322 - false
   * 6 gnu.trove.map.hash.TDoubleByteHashMap.keys([D)[D: I44 Branch 51 IF_ICMPNE L323 - true
   * 7 gnu.trove.map.hash.TDoubleByteHashMap.putIfAbsent(DB)B: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      byte[] byteArray0 = new byte[8];
      doubleArray0[0] = 695.820233610935;
      doubleArray0[2] = (double) (byte)28;
      doubleArray0[3] = (double) (byte) (-35);
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      double[] doubleArray1 = tDoubleByteHashMap0.keys(doubleArray0);
      tDoubleByteHashMap0.putIfAbsent((double) (-20), (byte)5);
      tDoubleByteHashMap0.putIfAbsent((double) (byte)5, (byte) (-1));
      tDoubleByteHashMap0.keys(doubleArray1);
      assertEquals("{5.0=-1, -20.0=5, 695.820233610935=0, 28.0=0, -35.0=0, 0.0=0}", tDoubleByteHashMap0.toString());
      assertSame(doubleArray0, doubleArray1);
  }

  //Test case number: 18
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.values([B)[B: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.values([B)[B: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TDoubleByteHashMap.values([B)[B: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TDoubleByteHashMap.values([B)[B: I44 Branch 56 IF_ICMPNE L363 - true
   * 5 gnu.trove.map.hash.TDoubleByteHashMap.values([B)[B: I44 Branch 56 IF_ICMPNE L363 - false
   */

  @Test
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      byte[] byteArray0 = new byte[5];
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      tDoubleByteHashMap0.values(tDoubleByteHashMap0._states);
      assertEquals("{}", tDoubleByteHashMap0.toString());
      assertEquals(1, tDoubleByteHashMap0.size());
  }

  //Test case number: 19
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.values([B)[B: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.values([B)[B: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TDoubleByteHashMap.values([B)[B: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TDoubleByteHashMap.values([B)[B: I44 Branch 56 IF_ICMPNE L363 - true
   * 5 gnu.trove.map.hash.TDoubleByteHashMap.values([B)[B: I44 Branch 56 IF_ICMPNE L363 - false
   * 6 gnu.trove.map.hash.TDoubleByteHashMap.values()[B: I27 Branch 52 IFLE L343 - true
   * 7 gnu.trove.map.hash.TDoubleByteHashMap.values()[B: I27 Branch 52 IFLE L343 - false
   * 8 gnu.trove.map.hash.TDoubleByteHashMap.values()[B: I34 Branch 53 IF_ICMPNE L344 - true
   * 9 gnu.trove.map.hash.TDoubleByteHashMap.values()[B: I34 Branch 53 IF_ICMPNE L344 - false
   */

  @Test
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      byte[] byteArray0 = new byte[5];
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      byte[] byteArray1 = tDoubleByteHashMap0.values();
      assertNotNull(byteArray1);
      
      doubleArray0[2] = 600.2360603844604;
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap(doubleArray0, tDoubleByteHashMap0._states);
      byte[] byteArray2 = tDoubleByteHashMap1.values(byteArray1);
      assertNotNull(byteArray2);
      assertEquals("{0.0=0}", tDoubleByteHashMap0.toString());
      assertEquals(2, tDoubleByteHashMap1.size());
      assertNotSame(byteArray1, byteArray2);
      assertEquals("{600.2360603844604=0, 0.0=0}", tDoubleByteHashMap1.toString());
  }

  //Test case number: 20
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.containsValue(B)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.containsValue(B)Z: I30 Branch 59 IF_ICMPNE L377 - true
   * 3 gnu.trove.map.hash.TDoubleByteHashMap.containsValue(B)Z: I18 Branch 57 IFLE L376 - true
   * 4 gnu.trove.map.hash.TDoubleByteHashMap.containsValue(B)Z: I18 Branch 57 IFLE L376 - false
   * 5 gnu.trove.map.hash.TDoubleByteHashMap.containsValue(B)Z: I25 Branch 58 IF_ICMPNE L377 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      tDoubleByteHashMap0.put((double) 0, (byte)1);
      boolean boolean0 = tDoubleByteHashMap0.containsValue((byte)0);
      assertEquals(false, tDoubleByteHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 21
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.containsValue(B)Z: I30 Branch 59 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.containsValue(B)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TDoubleByteHashMap.containsValue(B)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 4 gnu.trove.map.hash.TDoubleByteHashMap.containsValue(B)Z: I25 Branch 58 IF_ICMPNE L377 - false
   */

  @Test
  public void test21()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      tDoubleByteHashMap0.putIfAbsent((double) (byte)1, (byte)0);
      boolean boolean0 = tDoubleByteHashMap0.containsValue((byte)0);
      assertEquals(false, tDoubleByteHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TDoubleByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-1317), (float) (byte) (-6));
      boolean boolean0 = tDoubleByteHashMap0.forEachValue((TByteProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TDoubleByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test23()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      tDoubleByteHashMap0.putIfAbsent((double) 1.0F, (byte)17);
      // Undeclared exception!
      try {
        tDoubleByteHashMap0.forEachValue((TByteProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TDoubleByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      tDoubleByteHashMap0.transformValues((TByteFunction) null);
      assertEquals(23, tDoubleByteHashMap0.capacity());
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TDoubleByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      byte[] byteArray0 = new byte[10];
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      // Undeclared exception!
      try {
        tDoubleByteHashMap0.transformValues((TByteFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.retainEntries(Lgnu/trove/procedure/TDoubleByteProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.retainEntries(Lgnu/trove/procedure/TDoubleByteProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TDoubleByteHashMap.retainEntries(Lgnu/trove/procedure/TDoubleByteProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      boolean boolean0 = tDoubleByteHashMap0.retainEntries((TDoubleByteProcedure) null);
      assertEquals(23, tDoubleByteHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.retainEntries(Lgnu/trove/procedure/TDoubleByteProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.retainEntries(Lgnu/trove/procedure/TDoubleByteProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TDoubleByteHashMap.retainEntries(Lgnu/trove/procedure/TDoubleByteProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      byte[] byteArray0 = new byte[5];
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      // Undeclared exception!
      try {
        tDoubleByteHashMap0.retainEntries((TDoubleByteProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.adjustValue(DB)Z: I9 Branch 71 IFGE L477 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      tDoubleByteHashMap0.put((double) 0, (byte)1);
      boolean boolean0 = tDoubleByteHashMap0.adjustValue((double) (byte)0, (byte)0);
      assertEquals("{0.0=1}", tDoubleByteHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.adjustOrPutValue(DBB)B: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.adjustOrPutValue(DBB)B: I59 Branch 73 IFEQ L502 - true
   */

  @Test
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      byte[] byteArray0 = new byte[8];
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      byte byte0 = tDoubleByteHashMap0.adjustOrPutValue(0.0, (byte)11, (byte)0);
      assertEquals("{0.0=11}", tDoubleByteHashMap0.toString());
      assertEquals((byte)11, byte0);
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   */

  @Test
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      byte[] byteArray0 = new byte[10];
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      boolean boolean0 = tDoubleByteHashMap0.equals((Object) null);
      assertEquals(false, boolean0);
      assertEquals("{0.0=0}", tDoubleByteHashMap0.toString());
      assertEquals(23, tDoubleByteHashMap0.capacity());
      assertEquals(1, tDoubleByteHashMap0.size());
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   */

  @Test
  public void test31()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-1190));
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap(tDoubleByteHashMap0._set, tDoubleByteHashMap0._states);
      boolean boolean0 = tDoubleByteHashMap0.equals((Object) tDoubleByteHashMap1);
      assertFalse(tDoubleByteHashMap1.equals(tDoubleByteHashMap0));
      assertEquals(false, boolean0);
      assertEquals(7, tDoubleByteHashMap1.capacity());
      assertEquals(1, tDoubleByteHashMap1.size());
      assertEquals("{0.0=0}", tDoubleByteHashMap1.toString());
  }

  //Test case number: 32
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - false
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.equals(Ljava/lang/Object;)Z: I87 Branch 79 IF_ICMPEQ L1200 - true
   */

  @Test
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      byte[] byteArray0 = new byte[5];
      doubleArray0[3] = (double) (byte) (-9);
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap(tDoubleByteHashMap0._set, tDoubleByteHashMap0._states);
      boolean boolean0 = tDoubleByteHashMap0.equals((Object) tDoubleByteHashMap1);
      assertEquals(true, boolean0);
      assertEquals("{-9.0=1, 0.0=0}", tDoubleByteHashMap1.toString());
      assertTrue(tDoubleByteHashMap1.equals(tDoubleByteHashMap0));
      assertEquals("{-9.0=0, 0.0=0}", tDoubleByteHashMap0.toString());
  }

  //Test case number: 33
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.equals(Ljava/lang/Object;)Z: I87 Branch 79 IF_ICMPEQ L1200 - false
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.equals(Ljava/lang/Object;)Z: I90 Branch 80 IF_ICMPEQ L1200 - false
   */

  @Test
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-9);
      doubleArray0[3] = (double) (byte) (-9);
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap(tDoubleByteHashMap0._set, tDoubleByteHashMap0._states);
      boolean boolean0 = tDoubleByteHashMap0.equals((Object) tDoubleByteHashMap1);
      assertEquals(47, tDoubleByteHashMap1.capacity());
      assertEquals("{-9.0=1, 0.0=0}", tDoubleByteHashMap1.toString());
      assertFalse(tDoubleByteHashMap1.equals(tDoubleByteHashMap0));
      assertEquals(2, tDoubleByteHashMap1.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 34
  /*
   * 15 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.equals(Ljava/lang/Object;)Z: I90 Branch 80 IF_ICMPEQ L1200 - true
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.get(D)B: I9 Branch 44 IFGE L253 - true
   * 3 gnu.trove.map.hash.TDoubleByteHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 4 gnu.trove.map.hash.TDoubleByteHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 5 gnu.trove.map.hash.TDoubleByteHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 6 gnu.trove.map.hash.TDoubleByteHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 7 gnu.trove.map.hash.TDoubleByteHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 8 gnu.trove.map.hash.TDoubleByteHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 9 gnu.trove.map.hash.TDoubleByteHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - true
   * 10 gnu.trove.map.hash.TDoubleByteHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - false
   * 11 gnu.trove.map.hash.TDoubleByteHashMap.equals(Ljava/lang/Object;)Z: I87 Branch 79 IF_ICMPEQ L1200 - false
   * 12 gnu.trove.map.hash.TDoubleByteHashMap.<init>([D[B)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 13 gnu.trove.map.hash.TDoubleByteHashMap.<init>([D[B)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 14 gnu.trove.map.hash.TDoubleByteHashMap.doPut(DBI)B: I12 Branch 40 IFGE L214 - false
   * 15 gnu.trove.map.hash.TDoubleByteHashMap.doPut(DBI)B: I41 Branch 41 IFEQ L221 - true
   */

  @Test
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-9);
      doubleArray0[3] = (double) (byte) (-9);
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap(doubleArray0, tDoubleByteHashMap0._states);
      boolean boolean0 = tDoubleByteHashMap0.equals((Object) tDoubleByteHashMap1);
      assertEquals("{-9.0=-9, 0.0=0}", tDoubleByteHashMap0.toString());
      assertTrue(tDoubleByteHashMap1.equals(tDoubleByteHashMap0));
      assertEquals(true, boolean0);
      assertEquals("{-9.0=0, 0.0=0}", tDoubleByteHashMap1.toString());
      assertEquals(2, tDoubleByteHashMap0.size());
  }

  //Test case number: 35
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 3 gnu.trove.map.hash.TDoubleByteHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   * 4 gnu.trove.map.hash.TDoubleByteHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test35()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-1190));
      int int0 = tDoubleByteHashMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 36
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 3 gnu.trove.map.hash.TDoubleByteHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 4 gnu.trove.map.hash.TDoubleByteHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   */

  @Test
  public void test36()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      tDoubleByteHashMap0.put((double) 0, (byte)1);
      int int0 = tDoubleByteHashMap0.hashCode();
      assertEquals(false, tDoubleByteHashMap0.isEmpty());
      assertEquals(1, int0);
  }

  //Test case number: 37
  /*
   * 11 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap$1.execute(DB)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TDoubleByteHashMap$1.<init>(Lgnu/trove/map/hash/TDoubleByteHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 3 gnu.trove.map.hash.TDoubleByteHashMap$1.execute(DB)Z: I4 Branch 115 IFEQ L1233 - false
   * 4 gnu.trove.map.hash.TDoubleByteHashMap.toString()Ljava/lang/String;: root-Branch
   * 5 gnu.trove.map.hash.TDoubleByteHashMap.<init>()V: root-Branch
   * 6 gnu.trove.map.hash.TDoubleByteHashMap.putIfAbsent(DB)B: I9 Branch 39 IFGE L205 - true
   * 7 gnu.trove.map.hash.TDoubleByteHashMap.forEachEntry(Lgnu/trove/procedure/TDoubleByteProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 8 gnu.trove.map.hash.TDoubleByteHashMap.forEachEntry(Lgnu/trove/procedure/TDoubleByteProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 9 gnu.trove.map.hash.TDoubleByteHashMap.forEachEntry(Lgnu/trove/procedure/TDoubleByteProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 10 gnu.trove.map.hash.TDoubleByteHashMap.forEachEntry(Lgnu/trove/procedure/TDoubleByteProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 11 gnu.trove.map.hash.TDoubleByteHashMap.forEachEntry(Lgnu/trove/procedure/TDoubleByteProcedure;)Z: I39 Branch 65 IFNE L422 - true
   */

  @Test
  public void test37()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      tDoubleByteHashMap0.put((double) 0, (byte)1);
      tDoubleByteHashMap0.putIfAbsent((double) (byte)1, (byte)0);
      String string0 = tDoubleByteHashMap0.toString();
      assertEquals(2, tDoubleByteHashMap0.size());
      assertEquals("{1.0=0, 0.0=1}", string0);
  }

  //Test case number: 38
  /*
   * 15 covered goals:
   * 1 gnu.trove.map.hash.TDoubleByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 2 gnu.trove.map.hash.TDoubleByteHashMap.<init>(IF)V: root-Branch
   * 3 gnu.trove.map.hash.TDoubleByteHashMap.put(DB)B: root-Branch
   * 4 gnu.trove.map.hash.TDoubleByteHashMap.setUp(I)I: root-Branch
   * 5 gnu.trove.map.hash.TDoubleByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 6 gnu.trove.map.hash.TDoubleByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 7 gnu.trove.map.hash.TDoubleByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 8 gnu.trove.map.hash.TDoubleByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 9 gnu.trove.map.hash.TDoubleByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 10 gnu.trove.map.hash.TDoubleByteHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 11 gnu.trove.map.hash.TDoubleByteHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 12 gnu.trove.map.hash.TDoubleByteHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   * 13 gnu.trove.map.hash.TDoubleByteHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - false
   * 14 gnu.trove.map.hash.TDoubleByteHashMap.doPut(DBI)B: I12 Branch 40 IFGE L214 - true
   * 15 gnu.trove.map.hash.TDoubleByteHashMap.doPut(DBI)B: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test38()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-1013), (-1013));
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      Byte byte0 = Byte.valueOf((byte) (-1));
      hashMap0.put((Double) (-171.28661604989375), byte0);
      tDoubleByteHashMap0.putAll((Map<? extends Double, ? extends Byte>) hashMap0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((int) (byte)57);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tDoubleByteHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(false, tDoubleByteHashMap0.isEmpty());
      assertEquals("{-171.28661604989375=-1}", tDoubleByteHashMap0.toString());
  }
}
