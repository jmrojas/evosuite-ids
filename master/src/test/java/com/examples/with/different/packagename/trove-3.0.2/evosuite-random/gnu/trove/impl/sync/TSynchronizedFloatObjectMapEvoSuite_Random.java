/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedFloatObjectMap;
import gnu.trove.map.TFloatObjectMap;
import gnu.trove.map.hash.TFloatObjectHashMap;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.text.Segment;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedFloatObjectMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-355);
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>(int0);
      tFloatObjectHashMap0.getAutoCompactionFactor();
      String string0 = File.pathSeparator;
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap0, (Object) string0);
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // : (No such file or directory)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TFloatObjectMap<Float> tFloatObjectMap0 = null;
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = null;
      try {
        tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>(tFloatObjectMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 1;
          TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(int0, int0);
          String string0 = "[s/#-oz9enlF[bbe";
          File file0 = new File(string0);
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"[s/#-oz9enlF[bbe/[s/#-oz9enlF[bbe8914885461244178849[s/#-oz9enlF[bbe\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.File.createTempFile(File.java:1871)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:601)
             // org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:264)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 77;
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>();
      String string0 = "";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 3915341;
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(int0, int0, int0);
      TSynchronizedFloatObjectMap<Integer> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
      TFloatObjectMap<Object> tFloatObjectMap0 = null;
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap1 = null;
      try {
        tSynchronizedFloatObjectMap1 = new TSynchronizedFloatObjectMap<Object>(tFloatObjectMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 395;
      float float0 = 1016.6801F;
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(int0, float0, (float) int0);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-128);
      byteArray0[0] = byte0;
      byte byte1 = (byte)91;
      byteArray0[1] = byte1;
      byte byte2 = (byte)71;
      char[] charArray0 = new char[10];
      char char0 = 'X';
      charArray0[0] = char0;
      char char1 = 'g';
      charArray0[1] = char1;
      char char2 = 'n';
      charArray0[2] = char2;
      char char3 = 'M';
      charArray0[3] = char3;
      char char4 = 'a';
      charArray0[4] = char4;
      char char5 = 'R';
      charArray0[5] = char5;
      char char6 = '|';
      charArray0[6] = char6;
      char char7 = 'q';
      charArray0[7] = char7;
      char char8 = 'W';
      charArray0[8] = char8;
      char char9 = ' ';
      charArray0[9] = char9;
      Segment segment0 = new Segment(charArray0, (int) char3, (int) char6);
      // Undeclared exception!
      try {
        segment0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 201
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-222);
      float float0 = 0.0F;
      float float1 = (-1438.9886F);
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>(int0, float0, float1);
      String string0 = File.pathSeparator;
      TSynchronizedFloatObjectMap<Float> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Float>((TFloatObjectMap<Float>) tFloatObjectHashMap0, (Object) string0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string1 = locale0.getDisplayVariant();
      boolean boolean0 = tSynchronizedFloatObjectMap0.equals((Object) string1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 598;
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(int0, int0, int0);
      TFloatObjectMap<Object> tFloatObjectMap0 = null;
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap0 = null;
      try {
        tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Object>(tFloatObjectMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-135);
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(int0, int0);
      Object object0 = null;
      TSynchronizedFloatObjectMap<Integer> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0, object0);
      TSynchronizedFloatObjectMap<Integer> tSynchronizedFloatObjectMap1 = new TSynchronizedFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tSynchronizedFloatObjectMap0);
      String string0 = "5N\\a|?Yz.";
      String string1 = "? cw~<-1rPT&";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string1, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 5N\\a|?Yz.://5N\\a|?Yz.%3F%20cw~%3C-1rPT&#5N%5Ca%7C?Yz.
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>(int1, int0);
      String string0 = "F";
      URI uRI0 = new URI(string0, string0, string0);
      URI uRI1 = uRI0.normalize();
      String string1 = uRI1.toASCIIString();
      TSynchronizedFloatObjectMap<Float> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Float>((TFloatObjectMap<Float>) tFloatObjectHashMap0, (Object) string1);
      Object object0 = null;
      tSynchronizedFloatObjectMap0.containsValue(object0);
      TFloatObjectHashMap<Object> tFloatObjectHashMap1 = new TFloatObjectHashMap<Object>(int1);
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap1 = new TSynchronizedFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap1);
      float float0 = 1773.7455F;
      tSynchronizedFloatObjectMap1.get(float0);
      float float1 = (-1419.285F);
      TFloatObjectHashMap<Integer> tFloatObjectHashMap2 = new TFloatObjectHashMap<Integer>(int0, float1);
      TSynchronizedFloatObjectMap<Integer> tSynchronizedFloatObjectMap2 = new TSynchronizedFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap2);
      assertEquals("{}", tSynchronizedFloatObjectMap2.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>();
      TFloatObjectHashMap<Object> tFloatObjectHashMap1 = new TFloatObjectHashMap<Object>((TFloatObjectMap<?>) tFloatObjectHashMap0);
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap1);
      int int0 = (-1818);
      float float0 = (-1.0F);
      float float1 = (-1.0F);
      TFloatObjectHashMap<Float> tFloatObjectHashMap2 = new TFloatObjectHashMap<Float>(int0, float0, float1);
      String string0 = File.separator;
      TSynchronizedFloatObjectMap<Float> tSynchronizedFloatObjectMap1 = new TSynchronizedFloatObjectMap<Float>((TFloatObjectMap<Float>) tFloatObjectHashMap2, (Object) string0);
      float float2 = 820.08704F;
      tSynchronizedFloatObjectMap0.containsKey(float2);
      tFloatObjectHashMap2.isEmpty();
      TSynchronizedFloatObjectMap<Integer> tSynchronizedFloatObjectMap2 = new TSynchronizedFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
      tSynchronizedFloatObjectMap2.putIfAbsent(float2, (Integer) int0);
      int int1 = (-643);
      TFloatObjectHashMap<Object> tFloatObjectHashMap3 = new TFloatObjectHashMap<Object>(int1, int1);
      TSynchronizedFloatObjectMap<Integer> tSynchronizedFloatObjectMap3 = new TSynchronizedFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
      tSynchronizedFloatObjectMap3.size();
      String string1 = tSynchronizedFloatObjectMap3.toString();
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap4 = new TSynchronizedFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap3, (Object) string1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) int1;
      objectArray0[1] = (Object) tSynchronizedFloatObjectMap3;
      tSynchronizedFloatObjectMap0.remove((float) int1);
      objectArray0[2] = (Object) tFloatObjectHashMap3;
      objectArray0[3] = (Object) string1;
      objectArray0[4] = (Object) int1;
      objectArray0[5] = (Object) tSynchronizedFloatObjectMap3;
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(objectArray0);
      tFloatObjectHashMap3.keySet();
      tSynchronizedFloatObjectMap4.forEachValue((TObjectProcedure<? super Object>) toObjectArrayProceedure0);
      Object object0 = null;
      TSynchronizedFloatObjectMap<Integer> tSynchronizedFloatObjectMap5 = new TSynchronizedFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0, object0);
      // Undeclared exception!
      try {
        tSynchronizedFloatObjectMap5.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 1120;
      float float0 = 1657.6985F;
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>(int0, float0);
      int int1 = 0;
      TFloatObjectHashMap<Float> tFloatObjectHashMap1 = new TFloatObjectHashMap<Float>(int1);
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :#
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1;
      int int1 = 4831;
      float float0 = 248.97495F;
      float float1 = 1886.5894F;
      TFloatObjectMap<Object> tFloatObjectMap0 = null;
      Locale locale0 = Locale.ROOT;
      String string0 = locale0.getCountry();
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Object>(tFloatObjectMap0, (Object) string0);
      File file0 = new File(string0, string0);
      File file1 = new File(file0, string0);
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0, file1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1870;
      int int1 = (-159);
      float float0 = 0.0F;
      TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>(int1, float0);
      TFloatObjectHashMap<Integer> tFloatObjectHashMap1 = new TFloatObjectHashMap<Integer>(int0);
      TSynchronizedFloatObjectMap<Integer> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap1);
      String string0 = tSynchronizedFloatObjectMap0.toString();
      TSynchronizedFloatObjectMap<String> tSynchronizedFloatObjectMap1 = new TSynchronizedFloatObjectMap<String>((TFloatObjectMap<String>) tFloatObjectHashMap0, (Object) string0);
      Float float1 = new Float((double) int1);
      String string1 = float1.toString();
      tSynchronizedFloatObjectMap1.equals((Object) string1);
      float float2 = 879.8338F;
      TFloatObjectHashMap<Float> tFloatObjectHashMap2 = new TFloatObjectHashMap<Float>(int0, float2);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string1, string0, string1, string0, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: -159.0://%7B%7D-159.0?%7B%7D#-159.0
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 39691759;
      float float0 = (-573.07446F);
      float float1 = 1740.3217F;
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>();
      TFloatObjectHashMap<Object> tFloatObjectHashMap1 = new TFloatObjectHashMap<Object>((TFloatObjectMap<?>) tFloatObjectHashMap0);
      String string0 = "";
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap1, (Object) string0);
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap1 = new TSynchronizedFloatObjectMap<Object>((TFloatObjectMap<Object>) tSynchronizedFloatObjectMap0);
      float float2 = 0.0F;
      tSynchronizedFloatObjectMap1.remove(float2);
      float float3 = 10.0F;
      TFloatObjectHashMap<Object> tFloatObjectHashMap2 = new TFloatObjectHashMap<Object>(int0, (float) int0, float3);
      String string1 = "m;wzwXW";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string1, string1, string1, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: m;wzwXW://m;wzwXWm;wzwXW?m;wzwXW#m;wzwXW
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 1019;
      int int1 = 0;
      float float0 = 0.5F;
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(int1, float0, (float) int1);
      TFloatObjectMap<Float> tFloatObjectMap0 = null;
      String string0 = ",";
      URI uRI0 = new URI(string0);
      URI uRI1 = uRI0.resolve(string0);
      String string1 = uRI1.getSchemeSpecificPart();
      TSynchronizedFloatObjectMap<Float> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Float>(tFloatObjectMap0, (Object) string1);
      Float[] floatArray0 = new Float[1];
      double double0 = 1802.559536111555;
      Float float1 = new Float(double0);
      floatArray0[0] = float1;
      // Undeclared exception!
      try {
        tSynchronizedFloatObjectMap0.values(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>();
      TFloatObjectHashMap<Object> tFloatObjectHashMap1 = new TFloatObjectHashMap<Object>((TFloatObjectMap<?>) tFloatObjectHashMap0);
      String string0 = "}";
      try {
        Float.valueOf(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"}\"
         //
      }
  }
}
