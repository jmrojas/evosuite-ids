/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.set.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TByteCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableByteSet;
import gnu.trove.list.array.TByteArrayList;
import gnu.trove.list.linked.TByteLinkedList;
import gnu.trove.set.TByteSet;
import gnu.trove.set.hash.TByteHashSet;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import java.util.MissingResourceException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteHashSetEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TByteCollection tByteCollection0 = null;
      int int0 = (-1080);
      float float0 = 0.0F;
      int int1 = (-310);
      float float1 = 1034.2129F;
      byte byte0 = (byte)91;
      TByteHashSet tByteHashSet0 = new TByteHashSet(int1, float1, byte0);
      byte byte1 = (byte) (-49);
      TByteHashSet tByteHashSet1 = new TByteHashSet(int0, float0, byte1);
      tByteHashSet0.clear();
      tByteHashSet1.trimToSize();
      int int2 = 1076;
      tByteHashSet1.ensureCapacity(int2);
      TByteHashSet tByteHashSet2 = null;
      try {
        tByteHashSet2 = new TByteHashSet(tByteCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 874;
      TByteHashSet tByteHashSet0 = new TByteHashSet(int0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = tByteHashSet0.removeAll((Collection<?>) linkedList0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 27;
      float float0 = 1532.7793F;
      TByteHashSet tByteHashSet0 = new TByteHashSet(int0, float0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)109;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte[] byteArray1 = tByteHashSet0.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-235);
      TByteHashSet tByteHashSet0 = new TByteHashSet(int0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)3;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)10;
      byteArray0[2] = byte2;
      byte byte3 = (byte)19;
      byteArray0[3] = byte3;
      byte byte4 = (byte)27;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-111);
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-11);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-40);
      byteArray0[8] = byte8;
      tByteHashSet0._states = byteArray0;
      assertSame(tByteHashSet0._states, byteArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 344;
      TByteHashSet tByteHashSet0 = new TByteHashSet(int0, int0);
      tByteHashSet0.isEmpty();
      TByteHashSet tByteHashSet1 = new TByteHashSet();
      byte byte0 = (byte)0;
      tByteHashSet1.compact();
      tByteHashSet1.contains(byte0);
      tByteHashSet0.isEmpty();
      tByteHashSet1.clear();
      tByteHashSet1.addAll((TByteCollection) tByteHashSet0);
      Collection<Integer> collection0 = null;
      // Undeclared exception!
      try {
        tByteHashSet1.containsAll(collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet();
      TUnmodifiableByteSet tUnmodifiableByteSet0 = new TUnmodifiableByteSet((TByteSet) tByteHashSet0);
      Locale locale0 = Locale.CHINA;
      Locale locale1 = Locale.JAPAN;
      String string0 = locale0.getDisplayLanguage(locale1);
      tByteHashSet0.equals((Object) string0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      tByteHashSet0.removeAll((Collection<?>) linkedList0);
      int int0 = 240;
      TByteHashSet tByteHashSet1 = new TByteHashSet(int0);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)123;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-119);
      byteArray0[1] = byte1;
      byte byte2 = (byte)64;
      byteArray0[2] = byte2;
      tByteHashSet1.retainAll(byteArray0);
      Locale locale2 = Locale.ENGLISH;
      locale2.getISO3Country();
      byte[] byteArray1 = tByteHashSet1._states;
      String string1 = "i";
      // Undeclared exception!
      try {
        locale2.getUnicodeLocaleType(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: i
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-1320);
      TByteArrayList tByteArrayList0 = new TByteArrayList();
      // Undeclared exception!
      try {
        tByteArrayList0.subList(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // begin index can not be < 0
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-1);
      TByteHashSet tByteHashSet0 = new TByteHashSet(int0, int0);
      tByteHashSet0.getNoEntryValue();
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte) (-36);
      tByteHashSet0.capacity();
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)108;
      byteArray0[2] = byte2;
      byte byte3 = (byte)89;
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.getDefault(locale_Category0);
      String string0 = locale0.getISO3Country();
      boolean boolean0 = tByteHashSet0.equals((Object) string0);
      assertEquals(false, boolean0);
      
      tByteHashSet0.getNoEntryValue();
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      tByteHashSet0.capacity();
      byteArray0[4] = byte4;
      byte byte5 = (byte)31;
      byte byte6 = (byte)103;
      boolean boolean1 = tByteHashSet0.remove(byte6);
      byteArray0[5] = byte5;
      byte byte7 = (byte)74;
      byteArray0[6] = byte7;
      byte byte8 = (byte) (-51);
      byteArray0[7] = byte8;
      byte byte9 = (byte)68;
      byteArray0[8] = byte9;
      byte byte10 = (byte) (-113);
      byteArray0[9] = byte10;
      TByteHashSet tByteHashSet1 = new TByteHashSet();
      boolean boolean2 = tByteHashSet0.retainAll(byteArray0);
      assertTrue(boolean2 == boolean1);
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 10;
      float float0 = 10.0F;
      TByteHashSet tByteHashSet0 = new TByteHashSet(int0, float0);
      tByteHashSet0.trimToSize();
      int int1 = 1464;
      float float1 = 1083.8572F;
      tByteHashSet0.hashCode();
      byte byte0 = (byte)86;
      TByteHashSet tByteHashSet1 = new TByteHashSet(int1, float1, byte0);
      boolean boolean0 = false;
      tByteHashSet1.reenableAutoCompaction(boolean0);
      int int2 = tByteHashSet1.hashCode();
      assertEquals(0, int2);
      
      tByteHashSet1.isEmpty();
      LinkedList<TByteHashSet> linkedList0 = new LinkedList<TByteHashSet>();
      boolean boolean1 = tByteHashSet1.retainAll((Collection<?>) linkedList0);
      int int3 = (-1);
      boolean boolean2 = tByteHashSet1.retainAll((TByteCollection) tByteHashSet0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, tByteHashSet0.capacity());
      assertEquals("{}", tByteHashSet0.toString());
      
      TByteLinkedList tByteLinkedList0 = new TByteLinkedList();
      int int4 = (-1);
      // Undeclared exception!
      try {
        tByteLinkedList0.subList(int4, (int) byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // begin index can not be < 0
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-119);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)102;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)44;
      byteArray0[4] = byte4;
      TByteHashSet tByteHashSet0 = new TByteHashSet(byteArray0);
      int int0 = 0;
      TByteHashSet tByteHashSet1 = new TByteHashSet(int0, (float) byteArray0[2]);
      tByteHashSet0.equals((Object) tByteHashSet1);
      TByteHashSet tByteHashSet2 = new TByteHashSet();
      tByteHashSet2.toArray();
      tByteHashSet2.clear();
      byte[] byteArray1 = new byte[2];
      byte byte5 = (byte) (-28);
      byteArray1[0] = byte5;
      byteArray1[1] = byte5;
      byte byte6 = (byte)0;
      byteArray1[0] = byte6;
      byte byte7 = (byte) (-66);
      tByteHashSet2.tempDisableAutoCompaction();
      byteArray1[1] = byte7;
      tByteHashSet2.containsAll(byteArray1);
      byteArray1[0] = byte7;
      byteArray1[1] = byte7;
      assertFalse(byteArray1[1] == byte6);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 134;
      TByteHashSet tByteHashSet0 = new TByteHashSet();
      TByteCollection tByteCollection0 = null;
      tByteHashSet0.retainAll(tByteCollection0);
      // Undeclared exception!
      try {
        tByteHashSet0.removeAll(tByteCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 482;
      int int1 = 0;
      TByteHashSet tByteHashSet0 = new TByteHashSet(int1, int1);
      TByteHashSet tByteHashSet1 = new TByteHashSet(int0);
      tByteHashSet1.capacity();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte(byte0);
      int int2 = 0;
      tByteHashSet0.ensureCapacity(int2);
      String string0 = byte1.toString();
      tByteHashSet1.equals((Object) string0);
      TByteHashSet tByteHashSet2 = new TByteHashSet(int0);
      tByteHashSet1.retainAll((TByteCollection) tByteHashSet2);
      byte byte2 = (byte) (-26);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      tByteHashSet1.containsAll((Collection<?>) linkedList0);
      byteArray0[0] = byte2;
      byte byte3 = (byte)53;
      byteArray0[1] = byte3;
      byte byte4 = (byte)90;
      byteArray0[2] = byte4;
      tByteHashSet1.removeAll(byteArray0);
      int int3 = 0;
      TByteHashSet tByteHashSet3 = new TByteHashSet(int3, int3);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      tByteHashSet3.containsAll((Collection<?>) linkedList1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) fileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream Closed
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 159;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)47;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-106);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-31);
      byteArray0[6] = byte6;
      TByteHashSet tByteHashSet0 = new TByteHashSet(byteArray0);
      TByteHashSet tByteHashSet1 = new TByteHashSet(int0, int0);
      byte byte7 = (byte)112;
      tByteHashSet1.contains(byte7);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      tByteHashSet1.getNoEntryValue();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, int0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-856);
      float float0 = 0.0F;
      TByteHashSet tByteHashSet0 = new TByteHashSet();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)10;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)2;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-63);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-107);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte[] byteArray1 = tByteHashSet0.toArray(byteArray0);
      assertNotNull(byteArray1);
      
      byte byte6 = (byte) (-8);
      TByteHashSet tByteHashSet1 = new TByteHashSet(int0, float0, byte6);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = byte6;
      byteArray2[1] = byte6;
      byteArray2[2] = byte6;
      byteArray2[3] = byte6;
      byteArray2[4] = byte6;
      tByteHashSet1.addAll(byteArray2);
      assertEquals(7, tByteHashSet1.capacity());
      
      int int1 = 0;
      TByteHashSet tByteHashSet2 = new TByteHashSet(int1, int1);
      tByteHashSet2.compact();
      assertFalse(tByteHashSet2.equals(tByteHashSet1));
  }

  @Test
  public void test14()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet();
      byte[] byteArray0 = tByteHashSet0._states;
      byte byte0 = (byte)0;
      tByteHashSet0.contains(byte0);
      tByteHashSet0._set = byteArray0;
      int int0 = (-1941);
      byte[] byteArray1 = tByteHashSet0._set;
      TByteHashSet tByteHashSet1 = new TByteHashSet();
      tByteHashSet1.compact();
      TByteHashSet tByteHashSet2 = new TByteHashSet(int0);
      // Undeclared exception!
      try {
        tByteHashSet1.setAutoCompactionFactor((float) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1941.0
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet();
      tByteHashSet0.isEmpty();
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)37;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-65);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-7);
      byteArray0[5] = byte5;
      byte byte6 = (byte)60;
      byteArray0[6] = byte6;
      byte byte7 = (byte)118;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-105);
      byteArray0[8] = byte8;
      byte byte9 = (byte)0;
      byteArray0[9] = byte9;
      boolean boolean0 = tByteHashSet0.removeAll(byteArray0);
      assertEquals(false, boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean1 = tByteHashSet0.containsAll((Collection<?>) linkedList0);
      assertEquals(true, boolean1);
  }
}
