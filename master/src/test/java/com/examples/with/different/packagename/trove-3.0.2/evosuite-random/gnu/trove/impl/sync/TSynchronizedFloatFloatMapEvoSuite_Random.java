/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedFloatFloatMap;
import gnu.trove.impl.sync.TSynchronizedFloatSet;
import gnu.trove.iterator.TFloatFloatIterator;
import gnu.trove.map.TFloatFloatMap;
import gnu.trove.map.hash.TFloatFloatHashMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.text.Segment;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedFloatFloatMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = (-254.80074F);
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      float float2 = 534.20135F;
      floatArray0[2] = float2;
      float float3 = 1500.2858F;
      floatArray0[3] = float3;
      float float4 = (-467.25024F);
      floatArray0[4] = float4;
      float float5 = (-655.0506F);
      floatArray0[5] = float5;
      float float6 = (-227.83366F);
      floatArray0[6] = float6;
      float float7 = 435.68655F;
      floatArray0[7] = float7;
      float float8 = (-508.91788F);
      floatArray0[8] = float8;
      int int0 = 31;
      float float9 = (-770.2665F);
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0, float9);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      String string0 = "";
      Locale locale0 = new Locale(string0);
      String string1 = locale0.getDisplayLanguage();
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap1 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tSynchronizedFloatFloatMap0, (Object) string1);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap2 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tSynchronizedFloatFloatMap1);
      float float10 = 1082.011F;
      float float11 = (-1971.8124F);
      tSynchronizedFloatFloatMap2.adjustOrPutValue(float10, float0, float11);
      assertEquals(false, tFloatFloatHashMap0.isEmpty());
      
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(floatArray0, floatArray0);
      TFloatFloatHashMap tFloatFloatHashMap2 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap1);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap3 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap2);
      tSynchronizedFloatFloatMap3.keys(tFloatFloatHashMap1._set);
      assertFalse(tFloatFloatHashMap1.equals(tFloatFloatHashMap2));
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      String string0 = tFloatFloatHashMap0.toString();
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0, (Object) string0);
      float float1 = 1495.8121F;
      tSynchronizedFloatFloatMap0.get(float1);
      float float2 = 10.0F;
      float float3 = 0.0F;
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(int0, float0, float2, float3);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap1 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap1);
      float[] floatArray0 = new float[2];
      float float4 = 0.0F;
      floatArray0[0] = float4;
      float float5 = 0.0F;
      floatArray0[1] = float5;
      TFloatFloatHashMap tFloatFloatHashMap2 = new TFloatFloatHashMap(floatArray0, floatArray0);
      TFloatFloatHashMap tFloatFloatHashMap3 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap2);
      Object object0 = null;
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap2 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap3, object0);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap3 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap3, object0);
      // Undeclared exception!
      try {
        tSynchronizedFloatFloatMap3.adjustOrPutValue(floatArray0[1], float4, floatArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 0;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0);
      Float float0 = new Float((double) int0);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0, (Object) float0);
      tSynchronizedFloatFloatMap0.keys(tFloatFloatHashMap0._set);
      TFloatFloatMap tFloatFloatMap0 = null;
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap1 = null;
      try {
        tSynchronizedFloatFloatMap1 = new TSynchronizedFloatFloatMap(tFloatFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 440;
      float float0 = 1.0F;
      float float1 = (-1.0F);
      float float2 = 0.0F;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0, float0, float1, float2);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      Locale locale0 = Locale.JAPAN;
      String string0 = locale0.toString();
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap1 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tSynchronizedFloatFloatMap0, (Object) string0);
      File file0 = new File(string0);
      String string1 = file0.getName();
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap2 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tSynchronizedFloatFloatMap1, (Object) string1);
      float float3 = 2024.9258F;
      boolean boolean0 = tSynchronizedFloatFloatMap2.adjustValue(float3, float3);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 1;
          float float0 = (-1975.4181F);
          float float1 = Float.NEGATIVE_INFINITY;
          TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0, float0, float1, float0);
          String string0 = "\"yT,O4ZyMY\"";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      String string0 = "begin index ";
      String string1 = "";
      tFloatFloatHashMap0.iterator();
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 5: begin index ://begin index #
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      float float0 = 445.90454F;
      floatArray0[4] = float0;
      floatArray0[5] = (float) int0;
      floatArray0[6] = (float) int0;
      float float1 = (-1.0F);
      floatArray0[7] = float1;
      floatArray0[8] = (float) int0;
      floatArray0[9] = (float) int0;
      float[] floatArray1 = new float[10];
      float float2 = 736.67914F;
      floatArray1[0] = float2;
      floatArray1[1] = (float) int0;
      floatArray1[2] = (float) int0;
      float float3 = 0.0F;
      floatArray1[3] = float3;
      floatArray1[4] = (float) int0;
      floatArray1[5] = float0;
      floatArray1[6] = float1;
      floatArray1[7] = float1;
      floatArray1[8] = float0;
      floatArray1[9] = (float) int0;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray1);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = locale0.getDisplayScript();
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0, (Object) string0);
      tSynchronizedFloatFloatMap0.clear();
      assertEquals(0, tFloatFloatHashMap0.size());
      
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(int0);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap1 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap1);
      tSynchronizedFloatFloatMap1.values(tFloatFloatHashMap1._set);
      int int1 = 1795;
      TFloatFloatHashMap tFloatFloatHashMap2 = new TFloatFloatHashMap(int1);
      TFloatFloatHashMap tFloatFloatHashMap3 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap2);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap2 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap3);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap3 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tSynchronizedFloatFloatMap2);
      boolean boolean0 = tSynchronizedFloatFloatMap3.isEmpty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      float float1 = (-494.90198F);
      floatArray0[2] = float1;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      float float2 = 0.0F;
      floatArray0[0] = float2;
      float float3 = 732.758F;
      floatArray0[1] = float3;
      float float4 = (-1214.3441F);
      floatArray0[2] = float4;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap0);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap1);
      TFloatFloatIterator tFloatFloatIterator0 = tSynchronizedFloatFloatMap0.iterator();
      assertNotNull(tFloatFloatIterator0);
      
      float float5 = 0.0F;
      floatArray0[3] = float5;
      float float6 = 69.433266F;
      floatArray0[4] = float6;
      TFloatFloatHashMap tFloatFloatHashMap2 = new TFloatFloatHashMap(floatArray0, floatArray0);
      String string0 = ";&D=Sr)Wa";
      File file0 = new File(string0);
      File file1 = file0.getCanonicalFile();
      String string1 = file1.getName();
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap1 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap2, (Object) string1);
      float float7 = 6.6360896E8F;
      tSynchronizedFloatFloatMap1.putIfAbsent(float7, float2);
      assertEquals("{732.758=732.758, -1214.3441=-1214.3441, 69.433266=69.433266, 6.6360896E8=0.0, 0.0=0.0}", tFloatFloatHashMap2.toString());
      assertEquals(5, tFloatFloatHashMap2.size());
  }

  @Test
  public void test8()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      TSynchronizedFloatSet tSynchronizedFloatSet0 = (TSynchronizedFloatSet)tSynchronizedFloatFloatMap0.keySet();
      assertNotNull(tSynchronizedFloatSet0);
      
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap1 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap2 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tSynchronizedFloatFloatMap1);
      float float0 = 0.0F;
      tSynchronizedFloatFloatMap1.get(float0);
      tSynchronizedFloatFloatMap0.size();
      tSynchronizedFloatFloatMap1.keySet();
      Locale locale0 = Locale.CHINA;
      String string0 = locale0.getDisplayScript();
      boolean boolean0 = tSynchronizedFloatFloatMap2.isEmpty();
      boolean boolean1 = tSynchronizedFloatFloatMap2.equals((Object) string0);
      assertFalse(boolean1 == boolean0);
      assertTrue(tSynchronizedFloatFloatMap1.equals(tSynchronizedFloatFloatMap2));
  }

  @Test
  public void test9()  throws Throwable  {
      TFloatFloatMap tFloatFloatMap0 = null;
      Object object0 = null;
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap(tFloatFloatMap0, object0);
      // Undeclared exception!
      try {
        tSynchronizedFloatFloatMap0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = (-997.9629F);
      floatArray0[1] = float1;
      float float2 = Float.NEGATIVE_INFINITY;
      floatArray0[2] = float2;
      float float3 = 191.08162F;
      floatArray0[3] = float3;
      float float4 = 6.6360896E8F;
      floatArray0[4] = float4;
      float float5 = 668.7333F;
      floatArray0[5] = float5;
      float float6 = 2024.5889F;
      floatArray0[6] = float6;
      float float7 = 699.9875F;
      floatArray0[7] = float7;
      float float8 = 0.0F;
      floatArray0[8] = float8;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
      Object object0 = null;
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0, object0);
      float[] floatArray1 = new float[1];
      float float9 = Float.NEGATIVE_INFINITY;
      floatArray1[0] = float9;
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(floatArray1, floatArray1);
      tFloatFloatHashMap1.contains(floatArray1[0]);
      TFloatFloatHashMap tFloatFloatHashMap2 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap1);
      String string0 = tFloatFloatHashMap2.toString();
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap1 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap2, (Object) string0);
      String string1 = tSynchronizedFloatFloatMap1.toString();
      assertNotSame(string0, string1);
  }

  @Test
  public void test11()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      String string0 = "";
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 1651;
          float float0 = (-1476.4941F);
          float float1 = (-1649.0647F);
          TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0, (float) int0, float0, float1);
          String string0 = "EP2>\":+ ";
          String string1 = ", ";
          File file0 = new File(string1, string1);
          // Undeclared exception!
          try {
            File.createTempFile(string0, string1, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \", /, /EP2>\":+ 8739600041061607112, \" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.File.createTempFile(File.java:1871)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:601)
             // org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:264)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-154);
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0, int0);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      tSynchronizedFloatFloatMap0.get((float) int0);
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.CANADA_FRENCH;
      char[] charArray0 = new char[10];
      char char0 = 'X';
      charArray0[0] = char0;
      char char1 = '7';
      charArray0[1] = char1;
      char char2 = 'n';
      charArray0[2] = char2;
      char char3 = 'u';
      charArray0[3] = char3;
      char char4 = '\'';
      charArray0[4] = char4;
      char char5 = '+';
      charArray0[5] = char5;
      char char6 = '|';
      charArray0[6] = char6;
      char char7 = '{';
      charArray0[7] = char7;
      char char8 = 'N';
      charArray0[8] = char8;
      char char9 = 'Y';
      charArray0[9] = char9;
      Segment segment0 = new Segment(charArray0, (int) char7, (int) charArray0[6]);
      // Undeclared exception!
      try {
        segment0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 247
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 859;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0);
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap0);
      String string0 = "}Q";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: }Q:%7DQ#%7DQ
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = 978.74426F;
      floatArray0[1] = float1;
      float float2 = (-1423.915F);
      floatArray0[2] = float2;
      float float3 = (-1956.8037F);
      floatArray0[3] = float3;
      float float4 = 1.0F;
      floatArray0[4] = float4;
      float float5 = 0.0F;
      floatArray0[5] = float5;
      float float6 = 0.0F;
      floatArray0[6] = float6;
      float float7 = (-1190.7423F);
      floatArray0[7] = float7;
      float float8 = 0.0F;
      floatArray0[8] = float8;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.ROOT;
      String string0 = locale0.getDisplayLanguage(locale1);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0, (Object) string0);
      String string1 = tSynchronizedFloatFloatMap0.toString();
      assertEquals("{-1956.8037=-1956.8037, -1190.7423=-1190.7423, 1.0=1.0, 978.74426=978.74426, -1423.915=-1423.915, 0.0=0.0}", string1);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 0;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0);
      String string0 = File.separator;
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0, (Object) string0);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap1 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tSynchronizedFloatFloatMap0);
      float[] floatArray0 = tSynchronizedFloatFloatMap1.keys();
      assertNotNull(floatArray0);
  }

  @Test
  public void test17()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = (-1.0F);
      floatArray0[0] = float0;
      float float1 = (-1166.1758F);
      floatArray0[1] = float1;
      float float2 = (-304.781F);
      floatArray0[2] = float2;
      float float3 = 1053.72F;
      float[] floatArray1 = new float[2];
      floatArray1[0] = float3;
      floatArray1[1] = float0;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray1, floatArray1);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      tSynchronizedFloatFloatMap0.adjustValue(float2, float0);
      floatArray0[3] = float3;
      float float4 = 0.0F;
      floatArray0[4] = float4;
      float float5 = 1.0F;
      floatArray0[5] = float5;
      float float6 = 0.0F;
      floatArray0[6] = float6;
      float float7 = 0.0F;
      floatArray0[7] = float7;
      float float8 = 845.7555F;
      floatArray0[8] = float8;
      float float9 = (-1623.5383F);
      floatArray0[9] = float9;
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(floatArray0, floatArray0);
      tFloatFloatHashMap1.tempDisableAutoCompaction();
      Locale locale0 = Locale.FRANCE;
      String string0 = locale0.getDisplayVariant();
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap1 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap1, (Object) string0);
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = 1.0F;
      floatArray0[0] = float0;
      float float1 = Float.NEGATIVE_INFINITY;
      floatArray0[1] = float1;
      float float2 = 1928.0778F;
      floatArray0[2] = float2;
      float float3 = 0.0F;
      floatArray0[3] = float3;
      float float4 = (-1.0F);
      floatArray0[4] = float4;
      float float5 = 0.0F;
      floatArray0[5] = float5;
      float float6 = 0.0F;
      floatArray0[6] = float6;
      float float7 = Float.POSITIVE_INFINITY;
      floatArray0[7] = float7;
      float float8 = (-642.80194F);
      floatArray0[8] = float8;
      float[] floatArray1 = new float[7];
      floatArray1[0] = float6;
      floatArray1[1] = float1;
      float float9 = 0.0F;
      floatArray1[2] = float9;
      floatArray1[3] = float0;
      floatArray1[4] = float4;
      floatArray1[5] = float3;
      float float10 = Float.NEGATIVE_INFINITY;
      floatArray1[6] = float10;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray1, floatArray1);
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap0);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap1);
      float float11 = 0.0F;
      tSynchronizedFloatFloatMap0.get(float11);
      TFloatFloatHashMap tFloatFloatHashMap2 = new TFloatFloatHashMap(floatArray0, floatArray1);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap1 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap2);
      int int0 = tSynchronizedFloatFloatMap1.hashCode();
      assertEquals((-1590482114), int0);
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = (-318);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) int0;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
      String string0 = "a,U!ws~w%w&j";
      Locale locale0 = new Locale(string0, string0, string0);
      String string1 = locale0.getDisplayVariant();
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0, (Object) string1);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap1 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tSynchronizedFloatFloatMap0);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap2 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tSynchronizedFloatFloatMap1);
      float float0 = (-1.0F);
      tSynchronizedFloatFloatMap2.adjustOrPutValue(floatArray0[4], float0, floatArray0[0]);
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(int0);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap3 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap1);
      boolean boolean0 = tSynchronizedFloatFloatMap3.containsKey((float) int0);
      assertEquals(false, boolean0);
  }
}
