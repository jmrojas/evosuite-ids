/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TCharCollection;
import gnu.trove.impl.sync.TSynchronizedRandomAccessCharList;
import gnu.trove.list.TCharList;
import gnu.trove.list.array.TCharArrayList;
import gnu.trove.list.linked.TCharLinkedList;
import gnu.trove.map.hash.TCharObjectHashMap;
import gnu.trove.procedure.TCharProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import gnu.trove.set.hash.TCharHashSet;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharHashEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      char[] charArray0 = new char[8];
      char char0 = '8';
      charArray0[0] = char0;
      char char1 = 'L';
      charArray0[1] = char1;
      char char2 = '>';
      charArray0[2] = char2;
      char char3 = 'h';
      charArray0[3] = char3;
      char char4 = 'i';
      charArray0[4] = char4;
      char char5 = 'b';
      charArray0[5] = char5;
      char char6 = 'n';
      charArray0[6] = char6;
      char char7 = '3';
      charArray0[7] = char7;
      TCharArrayList tCharArrayList0 = TCharArrayList.wrap(charArray0, char4);
      TSynchronizedRandomAccessCharList tSynchronizedRandomAccessCharList0 = new TSynchronizedRandomAccessCharList((TCharList) tCharArrayList0);
      TCharProcedure tCharProcedure0 = null;
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessCharList0.grep(tCharProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 1302;
      TCharHashSet tCharHashSet0 = new TCharHashSet(int0);
      char char0 = '~';
      Object object0 = null;
      tCharHashSet0.equals(object0);
      boolean boolean0 = tCharHashSet0.add(char0);
      assertEquals(1, tCharHashSet0.size());
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 402;
      int int1 = (-1622);
      TCharHashSet tCharHashSet0 = new TCharHashSet(int1, int0);
      boolean boolean0 = false;
      tCharHashSet0.reenableAutoCompaction(boolean0);
      TCharObjectHashMap<Object> tCharObjectHashMap0 = new TCharObjectHashMap<Object>(int0);
      char char0 = 'x';
      tCharObjectHashMap0.get(char0);
      assertEquals(877, tCharObjectHashMap0.capacity());
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 1757;
      float float0 = 1.0F;
      char[] charArray0 = new char[9];
      char char0 = '4';
      charArray0[0] = char0;
      char char1 = '{';
      charArray0[1] = char1;
      char char2 = 'm';
      charArray0[2] = char2;
      char char3 = 'O';
      charArray0[3] = char3;
      char char4 = '(';
      charArray0[4] = char4;
      char char5 = 'M';
      charArray0[5] = char5;
      char char6 = '|';
      charArray0[6] = char6;
      char char7 = 'v';
      charArray0[7] = char7;
      char char8 = 'D';
      charArray0[8] = char8;
      TCharHashSet tCharHashSet0 = new TCharHashSet(charArray0);
      tCharHashSet0.compact();
      assertEquals("{D,(,M,m,O,|,{,4,v}", tCharHashSet0.toString());
      
      char char9 = '8';
      TCharObjectHashMap<Object> tCharObjectHashMap0 = new TCharObjectHashMap<Object>(int0, float0, char9);
      Object[] objectArray0 = tCharObjectHashMap0.values();
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(objectArray0);
      tCharObjectHashMap0.getNoEntryValue();
      tCharObjectHashMap0.forEachValue((TObjectProcedure<? super Object>) toObjectArrayProceedure0);
      assertEquals(1759, tCharObjectHashMap0.capacity());
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-1768);
      TCharHashSet tCharHashSet0 = new TCharHashSet(int0);
      String string0 = "No free or removed slots available. Key set full?!!";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // No free or removed slots available. Key set full?!!
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TCharHashSet tCharHashSet0 = new TCharHashSet();
      float float0 = 946.0159F;
      tCharHashSet0.setAutoCompactionFactor(float0);
      TCharObjectHashMap<Integer> tCharObjectHashMap0 = new TCharObjectHashMap<Integer>();
      char char0 = 'u';
      tCharObjectHashMap0.remove(char0);
      assertEquals(23, tCharObjectHashMap0.capacity());
      assertEquals(true, tCharObjectHashMap0.isEmpty());
  }

  @Test
  public void test6()  throws Throwable  {
      TCharHashSet tCharHashSet0 = new TCharHashSet();
      char char0 = 'T';
      TCharLinkedList tCharLinkedList0 = new TCharLinkedList(char0);
      tCharHashSet0.removeAll((TCharCollection) tCharLinkedList0);
      assertEquals(23, tCharHashSet0.capacity());
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      float float0 = 496.9497F;
      char char0 = '{';
      TCharHashSet tCharHashSet0 = new TCharHashSet(int0, float0, char0);
      File file0 = null;
      FileOutputStream fileOutputStream0 = null;
      try {
        fileOutputStream0 = new FileOutputStream(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name can't be null
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      TCharHashSet tCharHashSet0 = new TCharHashSet(int0, int0);
      String string0 = "/KUy?kpp?:lSfB;&~R*";
      File file0 = new File(string0);
      URI uRI0 = file0.toURI();
      String string1 = uRI0.toString();
      tCharHashSet0.equals((Object) string1);
      char char0 = '=';
      TCharHashSet tCharHashSet1 = new TCharHashSet(int0, (float) int0, char0);
      tCharHashSet1.size();
      tCharHashSet1.toString();
      assertEquals('=', tCharHashSet1.getNoEntryValue());
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      float float0 = (-1.0F);
      int int1 = (-1);
      TCharObjectHashMap<Integer> tCharObjectHashMap0 = new TCharObjectHashMap<Integer>(int1);
      char char0 = tCharObjectHashMap0.getNoEntryValue();
      TCharObjectHashMap<Integer> tCharObjectHashMap1 = new TCharObjectHashMap<Integer>(int0, float0);
      byte[] byteArray0 = tCharObjectHashMap1._states;
      int int2 = 884;
      int int3 = (-857);
      TCharObjectHashMap<String> tCharObjectHashMap2 = new TCharObjectHashMap<String>(int3, int2);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      TCharHashSet tCharHashSet0 = new TCharHashSet();
      TCharList tCharList0 = null;
      String string0 = "";
      URI uRI0 = URI.create(string0);
      String string1 = uRI0.getFragment();
      TSynchronizedRandomAccessCharList tSynchronizedRandomAccessCharList0 = new TSynchronizedRandomAccessCharList(tCharList0, (Object) string1);
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessCharList0.subList((int) char0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      char[] charArray0 = new char[7];
      char char0 = '{';
      charArray0[0] = char0;
      char char1 = 'e';
      charArray0[1] = char1;
      char char2 = 'o';
      charArray0[2] = char2;
      char char3 = '6';
      charArray0[3] = char3;
      char char4 = '9';
      charArray0[4] = char4;
      char char5 = '\\';
      charArray0[5] = char5;
      char char6 = 'O';
      charArray0[6] = char6;
      TCharArrayList tCharArrayList0 = TCharArrayList.wrap(charArray0);
      TCharHashSet tCharHashSet0 = new TCharHashSet((TCharCollection) tCharArrayList0);
      boolean boolean0 = true;
      tCharHashSet0.reenableAutoCompaction(boolean0);
      linkedList0.peek();
      // Undeclared exception!
      try {
        linkedList0.element();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      TCharHashSet tCharHashSet0 = new TCharHashSet(int0, int0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = tCharHashSet0.containsAll((Collection<?>) linkedList0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 0;
      float float0 = 3.4028235E38F;
      TCharHashSet tCharHashSet0 = new TCharHashSet(int0);
      char[] charArray0 = new char[6];
      char char0 = 'v';
      charArray0[0] = char0;
      char char1 = '?';
      charArray0[1] = char1;
      char char2 = '|';
      charArray0[2] = char2;
      char char3 = 'd';
      charArray0[3] = char3;
      char char4 = 'U';
      charArray0[4] = char4;
      char char5 = 'W';
      charArray0[5] = char5;
      tCharHashSet0.toArray(charArray0);
      char char6 = 'T';
      float float1 = 0.0F;
      TCharHashSet tCharHashSet1 = new TCharHashSet(int0, float1, char6);
      TCharObjectHashMap<Object> tCharObjectHashMap0 = new TCharObjectHashMap<Object>(int0, float0, char6);
      char char7 = '\\';
      String string0 = "{Do/Grr{RX[K1I\"";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 0: {Do/Grr{RX[K1I\"
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      TCharObjectHashMap<Integer> tCharObjectHashMap0 = new TCharObjectHashMap<Integer>(int0, int0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)42;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-102);
      byteArray0[2] = byte2;
      byte byte3 = (byte)84;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)23;
      byteArray0[5] = byte5;
      byte byte6 = (byte)92;
      byteArray0[6] = byte6;
      tCharObjectHashMap0._states = byteArray0;
      int int1 = 0;
      float float0 = (-588.25745F);
      TCharObjectHashMap<Integer> tCharObjectHashMap1 = new TCharObjectHashMap<Integer>(int1, float0);
      int int2 = 1336;
      float float1 = 923.18854F;
      char char0 = 'j';
      TCharHashSet tCharHashSet0 = new TCharHashSet(int2, float1, char0);
      tCharHashSet0.toArray();
      assertEquals('j', tCharHashSet0.getNoEntryValue());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tCharObjectHashMap1.writeExternal((ObjectOutput) objectOutputStream0);
      TCharHashSet tCharHashSet1 = new TCharHashSet();
      assertEquals(23, tCharHashSet1.capacity());
  }
}
