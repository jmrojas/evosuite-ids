/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TByteCollection;
import gnu.trove.function.TByteFunction;
import gnu.trove.impl.hash.TObjectHash;
import gnu.trove.map.TObjectByteMap;
import gnu.trove.map.custom_hash.TObjectByteCustomHashMap;
import gnu.trove.map.hash.TObjectByteHashMap;
import gnu.trove.procedure.TByteProcedure;
import gnu.trove.procedure.TObjectByteProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectByteHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.keySet()Ljava/util/Set;: root-Branch
   * 2 gnu.trove.map.hash.TObjectByteHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TObjectByteHashMap$KeyView.<init>(Lgnu/trove/map/hash/TObjectByteHashMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TObjectByteHashMap.setUp(I)I: root-Branch
   * 5 gnu.trove.map.hash.TObjectByteHashMap$1.<init>(Lgnu/trove/map/hash/TObjectByteHashMap;)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TObjectByteHashMap<Integer> tObjectByteHashMap0 = new TObjectByteHashMap<Integer>();
      tObjectByteHashMap0.keySet();
      assertEquals(23, tObjectByteHashMap0.capacity());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TObjectByteHashMap<Object> tObjectByteHashMap0 = new TObjectByteHashMap<Object>();
      TObjectByteHashMap<String> tObjectByteHashMap1 = new TObjectByteHashMap<String>();
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tObjectByteHashMap1._set);
      boolean boolean0 = tObjectByteHashMap0.forEachKey((TObjectProcedure<? super Object>) toObjectArrayProceedure0);
      assertEquals(true, boolean0);
      assertEquals(23, tObjectByteHashMap0.capacity());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.containsKey(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TObjectByteHashMap<Byte> tObjectByteHashMap0 = new TObjectByteHashMap<Byte>();
      tObjectByteHashMap0.containsKey((Object) "/");
      assertEquals(23, tObjectByteHashMap0.capacity());
  }

  //Test case number: 3
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.increment(Ljava/lang/Object;)Z: root-Branch
   * 2 gnu.trove.map.hash.TObjectByteHashMap.adjustValue(Ljava/lang/Object;B)Z: I9 Branch 40 IFGE L427 - false
   * 3 gnu.trove.map.hash.TObjectByteHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TObjectByteHashMap<String> tObjectByteHashMap0 = new TObjectByteHashMap<String>((int) (byte)42);
      boolean boolean0 = tObjectByteHashMap0.increment("");
      assertEquals(89, tObjectByteHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.clear()V: root-Branch
   * 2 gnu.trove.map.hash.TObjectByteHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TObjectByteHashMap<Object> tObjectByteHashMap0 = new TObjectByteHashMap<Object>((int) (byte) (-19), (-1.0F));
      tObjectByteHashMap0.clear();
      assertEquals("{}", tObjectByteHashMap0.toString());
      assertEquals(23, tObjectByteHashMap0.capacity());
  }

  //Test case number: 5
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.valueCollection()Lgnu/trove/TByteCollection;: root-Branch
   * 2 gnu.trove.map.hash.TObjectByteHashMap$TByteValueCollection.<init>(Lgnu/trove/map/hash/TObjectByteHashMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TObjectByteHashMap.getNoEntryValue()B: root-Branch
   * 4 gnu.trove.map.hash.TObjectByteHashMap.putAll(Lgnu/trove/map/TObjectByteMap;)V: root-Branch
   * 5 gnu.trove.map.hash.TObjectByteHashMap.forEachEntry(Lgnu/trove/procedure/TObjectByteProcedure;)Z: I18 Branch 47 IFLE L506 - true
   * 6 gnu.trove.map.hash.TObjectByteHashMap.forEachEntry(Lgnu/trove/procedure/TObjectByteProcedure;)Z: I18 Branch 47 IFLE L506 - false
   * 7 gnu.trove.map.hash.TObjectByteHashMap.forEachEntry(Lgnu/trove/procedure/TObjectByteProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - true
   * 8 gnu.trove.map.hash.TObjectByteHashMap.<init>(IFB)V: I23 Branch 8 IFEQ L124 - true
   * 9 gnu.trove.map.hash.TObjectByteHashMap.<init>(Lgnu/trove/map/TObjectByteMap;)V: I13 Branch 9 IFEQ L138 - false
   * 10 gnu.trove.map.hash.TObjectByteHashMap.<init>(Lgnu/trove/map/TObjectByteMap;)V: I35 Branch 10 IFEQ L143 - true
   */

  @Test
  public void test5()  throws Throwable  {
      TObjectByteHashMap<Byte> tObjectByteHashMap0 = new TObjectByteHashMap<Byte>(1722, 1722);
      TObjectByteHashMap<Object> tObjectByteHashMap1 = new TObjectByteHashMap<Object>((TObjectByteMap<?>) tObjectByteHashMap0);
      TByteCollection tByteCollection0 = tObjectByteHashMap1.valueCollection();
      assertEquals(3, tObjectByteHashMap1.capacity());
      assertEquals(0, tByteCollection0.size());
  }

  //Test case number: 6
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap$1.execute(Ljava/lang/Object;B)Z: root-Branch
   * 2 gnu.trove.map.hash.TObjectByteHashMap.putIfAbsent(Ljava/lang/Object;B)B: I9 Branch 20 IFGE L246 - true
   * 3 gnu.trove.map.hash.TObjectByteHashMap.forEachEntry(Lgnu/trove/procedure/TObjectByteProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - false
   * 4 gnu.trove.map.hash.TObjectByteHashMap.forEachEntry(Lgnu/trove/procedure/TObjectByteProcedure;)Z: I30 Branch 49 IF_ACMPEQ L507 - false
   * 5 gnu.trove.map.hash.TObjectByteHashMap.forEachEntry(Lgnu/trove/procedure/TObjectByteProcedure;)Z: I39 Branch 50 IFNE L507 - true
   * 6 gnu.trove.map.hash.TObjectByteHashMap.<init>(Lgnu/trove/map/TObjectByteMap;)V: I35 Branch 10 IFEQ L143 - true
   * 7 gnu.trove.map.hash.TObjectByteHashMap.put(Ljava/lang/Object;B)B: root-Branch
   * 8 gnu.trove.map.hash.TObjectByteHashMap.doPut(BI)B: I12 Branch 21 IFGE L255 - true
   * 9 gnu.trove.map.hash.TObjectByteHashMap.doPut(BI)B: I41 Branch 22 IFEQ L263 - false
   */

  @Test
  public void test6()  throws Throwable  {
      TObjectByteHashMap<Byte> tObjectByteHashMap0 = new TObjectByteHashMap<Byte>(1722, 1722);
      Byte byte0 = new Byte((byte) (-36));
      tObjectByteHashMap0.putIfAbsent(byte0, (byte) (-36));
      TObjectByteHashMap<Object> tObjectByteHashMap1 = new TObjectByteHashMap<Object>((TObjectByteMap<?>) tObjectByteHashMap0);
      assertEquals(1, tObjectByteHashMap0.size());
      assertEquals(3, tObjectByteHashMap1.capacity());
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.<init>(Lgnu/trove/map/TObjectByteMap;)V: I13 Branch 9 IFEQ L138 - true
   * 2 gnu.trove.map.hash.TObjectByteHashMap.<init>(IFB)V: I23 Branch 8 IFEQ L124 - false
   */

//   @Test
//   public void test7()  throws Throwable  {
//       IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
//       TObjectByteCustomHashMap<Integer> tObjectByteCustomHashMap0 = new TObjectByteCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, (-2035), 1.0F, (byte) (-19));
//       TObjectByteHashMap<Integer> tObjectByteHashMap0 = new TObjectByteHashMap<Integer>((TObjectByteMap<? extends Integer>) tObjectByteCustomHashMap0);
//       assertEquals(-19, tObjectByteHashMap0.getNoEntryValue());
//   }

  //Test case number: 8
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.<init>(Lgnu/trove/map/TObjectByteMap;)V: I35 Branch 10 IFEQ L143 - false
   * 2 gnu.trove.map.hash.TObjectByteHashMap.getNoEntryValue()B: root-Branch
   * 3 gnu.trove.map.hash.TObjectByteHashMap.putAll(Lgnu/trove/map/TObjectByteMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TObjectByteHashMap.<init>(Lgnu/trove/map/TObjectByteMap;)V: I13 Branch 9 IFEQ L138 - false
   */

//   @Test
//   public void test8()  throws Throwable  {
//       TObjectByteHashMap<Integer> tObjectByteHashMap0 = new TObjectByteHashMap<Integer>(365, (float) 365, (byte) (-112));
//       TObjectByteHashMap<Integer> tObjectByteHashMap1 = new TObjectByteHashMap<Integer>((TObjectByteMap<? extends Integer>) tObjectByteHashMap0);
//       assertEquals(3, tObjectByteHashMap1.capacity());
//       assertEquals(-112, tObjectByteHashMap1.getNoEntryValue());
//   }

  //Test case number: 9
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.rehash(I)V: I61 Branch 13 IF_ACMPEQ L186 - true
   * 2 gnu.trove.map.hash.TObjectByteHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - true
   * 3 gnu.trove.map.hash.TObjectByteHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - false
   * 4 gnu.trove.map.hash.TObjectByteHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - true
   * 5 gnu.trove.map.hash.TObjectByteHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - false
   */

  @Test
  public void test9()  throws Throwable  {
      TObjectByteHashMap<Object> tObjectByteHashMap0 = new TObjectByteHashMap<Object>((int) (byte) (-19), (-1.0F));
      Object object0 = TObjectHash.REMOVED;
      tObjectByteHashMap0.putIfAbsent(object0, (byte)0);
      assertEquals(1, tObjectByteHashMap0.size());
      assertEquals(false, tObjectByteHashMap0.isEmpty());
  }

  //Test case number: 10
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.containsValue(B)Z: I25 Branch 16 IF_ACMPEQ L219 - false
   * 2 gnu.trove.map.hash.TObjectByteHashMap.containsValue(B)Z: I30 Branch 17 IF_ACMPEQ L219 - false
   * 3 gnu.trove.map.hash.TObjectByteHashMap.containsValue(B)Z: I35 Branch 18 IF_ICMPNE L219 - true
   * 4 gnu.trove.map.hash.TObjectByteHashMap.containsValue(B)Z: I18 Branch 15 IFLE L218 - true
   * 5 gnu.trove.map.hash.TObjectByteHashMap.containsValue(B)Z: I18 Branch 15 IFLE L218 - false
   * 6 gnu.trove.map.hash.TObjectByteHashMap.containsValue(B)Z: I25 Branch 16 IF_ACMPEQ L219 - true
   */

  @Test
  public void test10()  throws Throwable  {
      TObjectByteHashMap<Byte> tObjectByteHashMap0 = new TObjectByteHashMap<Byte>(1722, 1722);
      Byte byte0 = new Byte((byte) (-36));
      tObjectByteHashMap0.putIfAbsent(byte0, (byte) (-36));
      boolean boolean0 = tObjectByteHashMap0.containsValue((byte)0);
      assertEquals(1, tObjectByteHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 11
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.containsValue(B)Z: I35 Branch 18 IF_ICMPNE L219 - false
   * 2 gnu.trove.map.hash.TObjectByteHashMap.adjustOrPutValue(Ljava/lang/Object;BB)B: I9 Branch 41 IFGE L443 - true
   * 3 gnu.trove.map.hash.TObjectByteHashMap.adjustOrPutValue(Ljava/lang/Object;BB)B: I52 Branch 42 IFEQ L454 - false
   * 4 gnu.trove.map.hash.TObjectByteHashMap.containsValue(B)Z: I18 Branch 15 IFLE L218 - false
   * 5 gnu.trove.map.hash.TObjectByteHashMap.containsValue(B)Z: I25 Branch 16 IF_ACMPEQ L219 - true
   * 6 gnu.trove.map.hash.TObjectByteHashMap.containsValue(B)Z: I25 Branch 16 IF_ACMPEQ L219 - false
   * 7 gnu.trove.map.hash.TObjectByteHashMap.containsValue(B)Z: I30 Branch 17 IF_ACMPEQ L219 - false
   */

  @Test
  public void test11()  throws Throwable  {
      TObjectByteHashMap<String> tObjectByteHashMap0 = new TObjectByteHashMap<String>(5);
      tObjectByteHashMap0.adjustOrPutValue("4dzhx3>zYW<.;+8m&5", (byte)1, (byte)1);
      boolean boolean0 = tObjectByteHashMap0.containsValue((byte)1);
      assertEquals(false, tObjectByteHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.get(Ljava/lang/Object;)B: I9 Branch 19 IFGE L230 - false
   */

  @Test
  public void test12()  throws Throwable  {
      TObjectByteHashMap<Byte> tObjectByteHashMap0 = new TObjectByteHashMap<Byte>(1722, 1722);
      byte byte0 = tObjectByteHashMap0.get((Object) "deu");
      assertEquals((byte)0, byte0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.putIfAbsent(Ljava/lang/Object;B)B: I9 Branch 20 IFGE L246 - false
   */

  @Test
  public void test13()  throws Throwable  {
      TObjectByteHashMap<String> tObjectByteHashMap0 = new TObjectByteHashMap<String>((int) (byte)30);
      tObjectByteHashMap0.put("Bc15W)fLfjEWbEu?", (byte)30);
      byte byte0 = tObjectByteHashMap0.putIfAbsent("Bc15W)fLfjEWbEu?", (byte) (-100));
      assertEquals(false, tObjectByteHashMap0.isEmpty());
      assertEquals((byte)30, byte0);
  }

  //Test case number: 14
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.doPut(BI)B: I12 Branch 21 IFGE L255 - false
   * 2 gnu.trove.map.hash.TObjectByteHashMap.doPut(BI)B: I41 Branch 22 IFEQ L263 - true
   */

  @Test
  public void test14()  throws Throwable  {
      TObjectByteHashMap<String> tObjectByteHashMap0 = new TObjectByteHashMap<String>((int) (byte)42);
      tObjectByteHashMap0.putIfAbsent("", (byte) (-103));
      byte byte0 = tObjectByteHashMap0.put("", (byte)42);
      assertEquals(false, tObjectByteHashMap0.isEmpty());
      assertEquals((byte) (-103), byte0);
  }

  //Test case number: 15
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.remove(Ljava/lang/Object;)B: I14 Branch 23 IFLT L274 - true
   * 2 gnu.trove.map.hash.TObjectByteHashMap.hashCode()I: I22 Branch 65 IFLE L613 - true
   * 3 gnu.trove.map.hash.TObjectByteHashMap.hashCode()I: I22 Branch 65 IFLE L613 - false
   * 4 gnu.trove.map.hash.TObjectByteHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TObjectByteHashMap<Object> tObjectByteHashMap0 = new TObjectByteHashMap<Object>((int) (byte) (-19), (-1.0F));
      byte byte0 = tObjectByteHashMap0.remove((Object) tObjectByteHashMap0);
      assertEquals(23, tObjectByteHashMap0.capacity());
      assertEquals((byte)0, byte0);
  }

  //Test case number: 16
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.keys()[Ljava/lang/Object;: I30 Branch 26 IF_ACMPEQ L335 - false
   * 2 gnu.trove.map.hash.TObjectByteHashMap.keys()[Ljava/lang/Object;: I35 Branch 27 IF_ACMPEQ L335 - false
   * 3 gnu.trove.map.hash.TObjectByteHashMap.keys()[Ljava/lang/Object;: I23 Branch 25 IFLE L334 - true
   * 4 gnu.trove.map.hash.TObjectByteHashMap.keys()[Ljava/lang/Object;: I23 Branch 25 IFLE L334 - false
   * 5 gnu.trove.map.hash.TObjectByteHashMap.keys()[Ljava/lang/Object;: I30 Branch 26 IF_ACMPEQ L335 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TObjectByteHashMap<Byte> tObjectByteHashMap0 = new TObjectByteHashMap<Byte>(493);
      Byte byte0 = new Byte((byte) (-48));
      tObjectByteHashMap0.put(byte0, (byte) (-48));
      tObjectByteHashMap0.keys();
      assertEquals(1, tObjectByteHashMap0.size());
      assertEquals("{-48=-48}", tObjectByteHashMap0.toString());
  }

  //Test case number: 17
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I44 Branch 30 IF_ACMPEQ L356 - false
   * 2 gnu.trove.map.hash.TObjectByteHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I49 Branch 31 IF_ACMPEQ L356 - false
   * 3 gnu.trove.map.hash.TObjectByteHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I10 Branch 28 IF_ICMPGE L347 - true
   * 4 gnu.trove.map.hash.TObjectByteHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L355 - true
   * 5 gnu.trove.map.hash.TObjectByteHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L355 - false
   * 6 gnu.trove.map.hash.TObjectByteHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I44 Branch 30 IF_ACMPEQ L356 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TObjectByteHashMap<String> tObjectByteHashMap0 = new TObjectByteHashMap<String>((int) (byte)42);
      tObjectByteHashMap0.putIfAbsent("", (byte) (-103));
      String[] stringArray0 = new String[8];
      tObjectByteHashMap0.keys(stringArray0);
      assertEquals(false, tObjectByteHashMap0.isEmpty());
      assertEquals("{=-103}", tObjectByteHashMap0.toString());
  }

  //Test case number: 18
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.values()[B: I34 Branch 33 IF_ACMPEQ L378 - false
   * 2 gnu.trove.map.hash.TObjectByteHashMap.values()[B: I39 Branch 34 IF_ACMPEQ L378 - false
   * 3 gnu.trove.map.hash.TObjectByteHashMap.values()[B: I27 Branch 32 IFLE L377 - true
   * 4 gnu.trove.map.hash.TObjectByteHashMap.values()[B: I27 Branch 32 IFLE L377 - false
   * 5 gnu.trove.map.hash.TObjectByteHashMap.values()[B: I34 Branch 33 IF_ACMPEQ L378 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TObjectByteHashMap<Byte> tObjectByteHashMap0 = new TObjectByteHashMap<Byte>(1722, 1722);
      Byte byte0 = new Byte((byte) (-36));
      tObjectByteHashMap0.putIfAbsent(byte0, (byte) (-36));
      tObjectByteHashMap0.values();
      assertEquals("{-36=-36}", tObjectByteHashMap0.toString());
      assertEquals(false, tObjectByteHashMap0.isEmpty());
  }

  //Test case number: 19
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.values([B)[B: I10 Branch 35 IF_ICMPGE L389 - true
   * 2 gnu.trove.map.hash.TObjectByteHashMap.values([B)[B: I37 Branch 36 IFLE L396 - true
   * 3 gnu.trove.map.hash.TObjectByteHashMap.values([B)[B: I37 Branch 36 IFLE L396 - false
   * 4 gnu.trove.map.hash.TObjectByteHashMap.values([B)[B: I44 Branch 37 IF_ACMPEQ L397 - true
   * 5 gnu.trove.map.hash.TObjectByteHashMap.values([B)[B: I65 Branch 39 IF_ICMPLE L401 - false
   */

  @Test
  public void test19()  throws Throwable  {
      TObjectByteHashMap<Byte> tObjectByteHashMap0 = new TObjectByteHashMap<Byte>((-1067));
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = tObjectByteHashMap0.values(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, tObjectByteHashMap0.capacity());
  }

  //Test case number: 20
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.values([B)[B: I10 Branch 35 IF_ICMPGE L389 - false
   * 2 gnu.trove.map.hash.TObjectByteHashMap.values([B)[B: I44 Branch 37 IF_ACMPEQ L397 - false
   * 3 gnu.trove.map.hash.TObjectByteHashMap.values([B)[B: I49 Branch 38 IF_ACMPEQ L397 - false
   * 4 gnu.trove.map.hash.TObjectByteHashMap.values([B)[B: I65 Branch 39 IF_ICMPLE L401 - true
   * 5 gnu.trove.map.hash.TObjectByteHashMap.values([B)[B: I37 Branch 36 IFLE L396 - true
   * 6 gnu.trove.map.hash.TObjectByteHashMap.values([B)[B: I37 Branch 36 IFLE L396 - false
   * 7 gnu.trove.map.hash.TObjectByteHashMap.values([B)[B: I44 Branch 37 IF_ACMPEQ L397 - true
   * 8 gnu.trove.map.hash.TObjectByteHashMap.values()[B: I27 Branch 32 IFLE L377 - true
   * 9 gnu.trove.map.hash.TObjectByteHashMap.values()[B: I27 Branch 32 IFLE L377 - false
   * 10 gnu.trove.map.hash.TObjectByteHashMap.values()[B: I34 Branch 33 IF_ACMPEQ L378 - true
   * 11 gnu.trove.map.hash.TObjectByteHashMap.rehash(I)V: I61 Branch 13 IF_ACMPEQ L186 - false
   * 12 gnu.trove.map.hash.TObjectByteHashMap.rehash(I)V: I77 Branch 14 IFGE L189 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TObjectByteHashMap<Object> tObjectByteHashMap0 = new TObjectByteHashMap<Object>((int) (byte) (-19), (-1.0F));
      byte[] byteArray0 = tObjectByteHashMap0.values();
      TObjectByteHashMap<Integer> tObjectByteHashMap1 = new TObjectByteHashMap<Integer>((-2035), (float) (byte) (-19), (byte) (-19));
      tObjectByteHashMap0.putIfAbsent((Object) tObjectByteHashMap1, (byte)0);
      tObjectByteHashMap0.values(byteArray0);
      assertEquals(47, tObjectByteHashMap0.capacity());
      assertEquals("{{}=0}", tObjectByteHashMap0.toString());
  }

  //Test case number: 21
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.adjustValue(Ljava/lang/Object;B)Z: I9 Branch 40 IFGE L427 - true
   * 2 gnu.trove.map.hash.TObjectByteHashMap.increment(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TObjectByteHashMap<String> tObjectByteHashMap0 = new TObjectByteHashMap<String>((int) (byte)42);
      tObjectByteHashMap0.putIfAbsent("", (byte) (-103));
      boolean boolean0 = tObjectByteHashMap0.increment("");
      assertEquals(1, tObjectByteHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.adjustOrPutValue(Ljava/lang/Object;BB)B: I9 Branch 41 IFGE L443 - false
   * 2 gnu.trove.map.hash.TObjectByteHashMap.adjustOrPutValue(Ljava/lang/Object;BB)B: I52 Branch 42 IFEQ L454 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TObjectByteHashMap<String> tObjectByteHashMap0 = new TObjectByteHashMap<String>((int) (byte)42);
      tObjectByteHashMap0.putIfAbsent("", (byte) (-103));
      byte byte0 = tObjectByteHashMap0.adjustOrPutValue("", (byte)48, (byte)0);
      assertEquals(1, tObjectByteHashMap0.size());
      assertEquals((byte) (-55), byte0);
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 43 IFLE L484 - true
   * 2 gnu.trove.map.hash.TObjectByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 43 IFLE L484 - false
   * 3 gnu.trove.map.hash.TObjectByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 44 IF_ACMPEQ L485 - true
   */

  @Test
  public void test23()  throws Throwable  {
      TObjectByteHashMap<Byte> tObjectByteHashMap0 = new TObjectByteHashMap<Byte>(931);
      boolean boolean0 = tObjectByteHashMap0.forEachValue((TByteProcedure) null);
      assertEquals(1907, tObjectByteHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 24
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 44 IF_ACMPEQ L485 - false
   * 2 gnu.trove.map.hash.TObjectByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I30 Branch 45 IF_ACMPEQ L485 - false
   * 3 gnu.trove.map.hash.TObjectByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 43 IFLE L484 - false
   * 4 gnu.trove.map.hash.TObjectByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 44 IF_ACMPEQ L485 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TObjectByteHashMap<Byte> tObjectByteHashMap0 = new TObjectByteHashMap<Byte>((-1067));
      tObjectByteHashMap0.put((Byte) (byte)16, (byte)16);
      // Undeclared exception!
      try {
        tObjectByteHashMap0.forEachValue((TByteProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 25
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.retainEntries(Lgnu/trove/procedure/TObjectByteProcedure;)Z: I27 Branch 51 IFLE L533 - true
   * 2 gnu.trove.map.hash.TObjectByteHashMap.retainEntries(Lgnu/trove/procedure/TObjectByteProcedure;)Z: I27 Branch 51 IFLE L533 - false
   * 3 gnu.trove.map.hash.TObjectByteHashMap.retainEntries(Lgnu/trove/procedure/TObjectByteProcedure;)Z: I34 Branch 52 IF_ACMPEQ L534 - true
   * 4 gnu.trove.map.hash.TObjectByteHashMap.<init>(IFB)V: I23 Branch 8 IFEQ L124 - true
   */

//   @Test
//   public void test25()  throws Throwable  {
//       TObjectByteHashMap<Integer> tObjectByteHashMap0 = new TObjectByteHashMap<Integer>(11, (float) 11, (byte)0);
//       boolean boolean0 = tObjectByteHashMap0.retainEntries((TObjectByteProcedure<? super Integer>) null);
//       assertEquals(0, tObjectByteHashMap0.getNoEntryValue());
//       assertEquals(false, boolean0);
//   }

  //Test case number: 26
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.retainEntries(Lgnu/trove/procedure/TObjectByteProcedure;)Z: I34 Branch 52 IF_ACMPEQ L534 - false
   * 2 gnu.trove.map.hash.TObjectByteHashMap.retainEntries(Lgnu/trove/procedure/TObjectByteProcedure;)Z: I39 Branch 53 IF_ACMPEQ L534 - false
   * 3 gnu.trove.map.hash.TObjectByteHashMap.putAll(Ljava/util/Map;)V: I13 Branch 24 IFEQ L300 - true
   * 4 gnu.trove.map.hash.TObjectByteHashMap.putAll(Ljava/util/Map;)V: I13 Branch 24 IFEQ L300 - false
   * 5 gnu.trove.map.hash.TObjectByteHashMap.retainEntries(Lgnu/trove/procedure/TObjectByteProcedure;)Z: I27 Branch 51 IFLE L533 - false
   * 6 gnu.trove.map.hash.TObjectByteHashMap.retainEntries(Lgnu/trove/procedure/TObjectByteProcedure;)Z: I34 Branch 52 IF_ACMPEQ L534 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TObjectByteHashMap<String> tObjectByteHashMap0 = new TObjectByteHashMap<String>();
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Byte byte0 = new Byte((byte)8);
      hashMap0.put("2P|GunH<", byte0);
      tObjectByteHashMap0.putAll((Map<? extends String, ? extends Byte>) hashMap0);
      // Undeclared exception!
      try {
        tObjectByteHashMap0.retainEntries((TObjectByteProcedure<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I18 Branch 55 IFLE L558 - false
   * 2 gnu.trove.map.hash.TObjectByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I24 Branch 56 IFNULL L559 - false
   * 3 gnu.trove.map.hash.TObjectByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I29 Branch 57 IF_ACMPEQ L559 - false
   */

  @Test
  public void test27()  throws Throwable  {
      TObjectByteHashMap<Object> tObjectByteHashMap0 = new TObjectByteHashMap<Object>(0);
      // Undeclared exception!
      try {
        tObjectByteHashMap0.transformValues((TByteFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 58 IFNE L576 - true
   * 2 gnu.trove.map.hash.TObjectByteHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 59 IF_ICMPEQ L580 - true
   * 3 gnu.trove.map.hash.TObjectByteHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 60 IFEQ L585 - true
   * 4 gnu.trove.map.hash.TObjectByteHashMap.iterator()Lgnu/trove/iterator/TObjectByteIterator;: root-Branch
   * 5 gnu.trove.map.hash.TObjectByteHashMap$TObjectByteHashIterator.<init>(Lgnu/trove/map/hash/TObjectByteHashMap;Lgnu/trove/map/hash/TObjectByteHashMap;)V: root-Branch
   */

//   @Test
//   public void test28()  throws Throwable  {
//       TObjectByteHashMap<String> tObjectByteHashMap0 = new TObjectByteHashMap<String>(0);
//       TObjectByteHashMap<Integer> tObjectByteHashMap1 = new TObjectByteHashMap<Integer>((int) (byte)1, 597.29F, (byte)89);
//       boolean boolean0 = tObjectByteHashMap1.equals((Object) tObjectByteHashMap0);
//       assertEquals(89, tObjectByteHashMap1.getNoEntryValue());
//       assertEquals(true, boolean0);
//   }

  //Test case number: 29
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 58 IFNE L576 - false
   * 2 gnu.trove.map.hash.TObjectByteHashMap.<init>(IFB)V: I23 Branch 8 IFEQ L124 - false
   */

//   @Test
//   public void test29()  throws Throwable  {
//       Locale locale0 = Locale.GERMANY;
//       Locale locale1 = (Locale)locale0.clone();
//       TObjectByteHashMap<String> tObjectByteHashMap0 = new TObjectByteHashMap<String>(240, (-1540.5675F), (byte) (-90));
//       boolean boolean0 = tObjectByteHashMap0.equals((Object) locale1);
//       assertEquals(false, boolean0);
//       assertEquals(-90, tObjectByteHashMap0.getNoEntryValue());
//   }

  //Test case number: 30
  /*
   * 13 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - false
   * 2 gnu.trove.map.hash.TObjectByteHashMap.hashCode()I: I34 Branch 67 IF_ACMPEQ L614 - false
   * 3 gnu.trove.map.hash.TObjectByteHashMap.hashCode()I: I45 Branch 68 IFNONNULL L615 - true
   * 4 gnu.trove.map.hash.TObjectByteHashMap.<init>(IF)V: root-Branch
   * 5 gnu.trove.map.hash.TObjectByteHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - true
   * 6 gnu.trove.map.hash.TObjectByteHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - false
   * 7 gnu.trove.map.hash.TObjectByteHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - true
   * 8 gnu.trove.map.hash.TObjectByteHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - false
   * 9 gnu.trove.map.hash.TObjectByteHashMap.rehash(I)V: I61 Branch 13 IF_ACMPEQ L186 - false
   * 10 gnu.trove.map.hash.TObjectByteHashMap.rehash(I)V: I77 Branch 14 IFGE L189 - true
   * 11 gnu.trove.map.hash.TObjectByteHashMap.hashCode()I: I22 Branch 65 IFLE L613 - true
   * 12 gnu.trove.map.hash.TObjectByteHashMap.hashCode()I: I22 Branch 65 IFLE L613 - false
   * 13 gnu.trove.map.hash.TObjectByteHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - true
   */

  @Test
  public void test30()  throws Throwable  {
      TObjectByteHashMap<Object> tObjectByteHashMap0 = new TObjectByteHashMap<Object>(0, 0);
      tObjectByteHashMap0.adjustOrPutValue((Object) "", (byte)1, (byte)1);
      int int0 = tObjectByteHashMap0.hashCode();
      assertEquals(7, tObjectByteHashMap0.capacity());
      assertEquals(1, int0);
  }

  //Test case number: 31
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I45 Branch 71 IF_ACMPEQ L1094 - false
   * 2 gnu.trove.map.hash.TObjectByteHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TObjectByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 69 IFLE L1093 - true
   * 4 gnu.trove.map.hash.TObjectByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 69 IFLE L1093 - false
   * 5 gnu.trove.map.hash.TObjectByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I39 Branch 70 IF_ACMPEQ L1094 - false
   * 6 gnu.trove.map.hash.TObjectByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I45 Branch 71 IF_ACMPEQ L1094 - true
   * 7 gnu.trove.map.hash.TObjectByteHashMap.adjustOrPutValue(Ljava/lang/Object;BB)B: I9 Branch 41 IFGE L443 - true
   * 8 gnu.trove.map.hash.TObjectByteHashMap.adjustOrPutValue(Ljava/lang/Object;BB)B: I52 Branch 42 IFEQ L454 - false
   */

  @Test
  public void test31()  throws Throwable  {
      TObjectByteHashMap<String> tObjectByteHashMap0 = new TObjectByteHashMap<String>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1014);
      tObjectByteHashMap0.adjustOrPutValue("DEFAULT_FLOAT_NO_ENTRY_VALUE: ", (byte) (-93), (byte) (-104));
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tObjectByteHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(false, tObjectByteHashMap0.isEmpty());
      assertEquals(55, byteArrayOutputStream0.size());
  }

  //Test case number: 32
  /*
   * 17 covered goals:
   * 1 gnu.trove.map.hash.TObjectByteHashMap$2.execute(Ljava/lang/Object;B)Z: I4 Branch 102 IFEQ L1134 - true
   * 2 gnu.trove.map.hash.TObjectByteHashMap$2.execute(Ljava/lang/Object;B)Z: I4 Branch 102 IFEQ L1134 - false
   * 3 gnu.trove.map.hash.TObjectByteHashMap.<init>(I)V: root-Branch
   * 4 gnu.trove.map.hash.TObjectByteHashMap.toString()Ljava/lang/String;: root-Branch
   * 5 gnu.trove.map.hash.TObjectByteHashMap.setUp(I)I: root-Branch
   * 6 gnu.trove.map.hash.TObjectByteHashMap.put(Ljava/lang/Object;B)B: root-Branch
   * 7 gnu.trove.map.hash.TObjectByteHashMap.forEachEntry(Lgnu/trove/procedure/TObjectByteProcedure;)Z: I18 Branch 47 IFLE L506 - true
   * 8 gnu.trove.map.hash.TObjectByteHashMap.forEachEntry(Lgnu/trove/procedure/TObjectByteProcedure;)Z: I18 Branch 47 IFLE L506 - false
   * 9 gnu.trove.map.hash.TObjectByteHashMap.forEachEntry(Lgnu/trove/procedure/TObjectByteProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - true
   * 10 gnu.trove.map.hash.TObjectByteHashMap.forEachEntry(Lgnu/trove/procedure/TObjectByteProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - false
   * 11 gnu.trove.map.hash.TObjectByteHashMap.forEachEntry(Lgnu/trove/procedure/TObjectByteProcedure;)Z: I30 Branch 49 IF_ACMPEQ L507 - false
   * 12 gnu.trove.map.hash.TObjectByteHashMap.forEachEntry(Lgnu/trove/procedure/TObjectByteProcedure;)Z: I39 Branch 50 IFNE L507 - true
   * 13 gnu.trove.map.hash.TObjectByteHashMap.putIfAbsent(Ljava/lang/Object;B)B: I9 Branch 20 IFGE L246 - true
   * 14 gnu.trove.map.hash.TObjectByteHashMap.doPut(BI)B: I12 Branch 21 IFGE L255 - true
   * 15 gnu.trove.map.hash.TObjectByteHashMap.doPut(BI)B: I41 Branch 22 IFEQ L263 - false
   * 16 gnu.trove.map.hash.TObjectByteHashMap$2.<init>(Lgnu/trove/map/hash/TObjectByteHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 17 gnu.trove.map.hash.TObjectByteHashMap$1.<init>(Lgnu/trove/map/hash/TObjectByteHashMap;)V: root-Branch
   */

  @Test
  public void test32()  throws Throwable  {
      TObjectByteHashMap<String> tObjectByteHashMap0 = new TObjectByteHashMap<String>((int) (byte)30);
      tObjectByteHashMap0.putIfAbsent("6v1HB-@4X}YMhL", (byte)26);
      tObjectByteHashMap0.put("Bc15W)fLfjEWbEu?", (byte)30);
      String string0 = tObjectByteHashMap0.toString();
      assertEquals(2, tObjectByteHashMap0.size());
      assertEquals("{6v1HB-@4X}YMhL=26,Bc15W)fLfjEWbEu?=30}", string0);
  }
}
