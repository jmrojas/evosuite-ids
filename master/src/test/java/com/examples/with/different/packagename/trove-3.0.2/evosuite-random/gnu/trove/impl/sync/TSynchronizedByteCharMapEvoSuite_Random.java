/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TCharFunction;
import gnu.trove.impl.sync.TSynchronizedByteCharMap;
import gnu.trove.map.TByteCharMap;
import gnu.trove.map.hash.TByteCharHashMap;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedByteCharMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 10;
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(int0);
      TSynchronizedByteCharMap tSynchronizedByteCharMap0 = new TSynchronizedByteCharMap((TByteCharMap) tByteCharHashMap0);
      byte byte0 = (byte) (-1);
      char char0 = 'V';
      tSynchronizedByteCharMap0.put(byte0, char0);
      assertEquals("{-1=V}", tByteCharHashMap0.toString());
      
      int int1 = (-1128);
      int int2 = 10;
      float float0 = (-175.00774F);
      TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap(int2, float0);
      TSynchronizedByteCharMap tSynchronizedByteCharMap1 = new TSynchronizedByteCharMap((TByteCharMap) tByteCharHashMap1);
      char[] charArray0 = new char[2];
      char char1 = '_';
      charArray0[0] = char1;
      char char2 = 's';
      tSynchronizedByteCharMap1.hashCode();
      charArray0[1] = char2;
      byte byte1 = (byte) (-114);
      tSynchronizedByteCharMap1.containsKey(byte1);
      tSynchronizedByteCharMap1.values(charArray0);
      TByteCharHashMap tByteCharHashMap2 = new TByteCharHashMap((TByteCharMap) tByteCharHashMap1);
      TSynchronizedByteCharMap tSynchronizedByteCharMap2 = new TSynchronizedByteCharMap((TByteCharMap) tByteCharHashMap2);
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.toString();
      TSynchronizedByteCharMap tSynchronizedByteCharMap3 = new TSynchronizedByteCharMap((TByteCharMap) tByteCharHashMap1, (Object) string0);
      byte byte2 = (byte) (-65);
      tSynchronizedByteCharMap3.containsKey(byte2);
      tSynchronizedByteCharMap1.keySet();
      TSynchronizedByteCharMap tSynchronizedByteCharMap4 = new TSynchronizedByteCharMap((TByteCharMap) tByteCharHashMap2);
      tSynchronizedByteCharMap4.values();
      TByteCharHashMap tByteCharHashMap3 = new TByteCharHashMap(int1, int1);
      TSynchronizedByteCharMap tSynchronizedByteCharMap5 = new TSynchronizedByteCharMap((TByteCharMap) tByteCharHashMap3);
      assertFalse(tByteCharHashMap3.equals(tByteCharHashMap0));
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-1);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-7);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-83);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-78);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      char[] charArray0 = new char[7];
      char char0 = '|';
      charArray0[0] = char0;
      char char1 = '+';
      charArray0[1] = char1;
      char char2 = 'R';
      charArray0[2] = char2;
      char char3 = 'f';
      charArray0[3] = char3;
      char char4 = '=';
      charArray0[4] = char4;
      char char5 = 'L';
      charArray0[5] = char5;
      char char6 = 'f';
      charArray0[6] = char6;
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
      TSynchronizedByteCharMap tSynchronizedByteCharMap0 = new TSynchronizedByteCharMap((TByteCharMap) tByteCharHashMap0);
      char char7 = '{';
      Character character0 = new Character(char7);
      TSynchronizedByteCharMap tSynchronizedByteCharMap1 = new TSynchronizedByteCharMap((TByteCharMap) tSynchronizedByteCharMap0, (Object) character0);
      TSynchronizedByteCharMap tSynchronizedByteCharMap2 = new TSynchronizedByteCharMap((TByteCharMap) tSynchronizedByteCharMap1);
      char char8 = '&';
      boolean boolean0 = tSynchronizedByteCharMap2.adjustValue(byteArray0[4], char8);
      assertEquals("{-78=f, -83=R, -1=|, -7=+, 0=c}", tByteCharHashMap0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap();
      TSynchronizedByteCharMap tSynchronizedByteCharMap0 = new TSynchronizedByteCharMap((TByteCharMap) tByteCharHashMap0);
      tSynchronizedByteCharMap0.valueCollection();
      char[] charArray0 = new char[7];
      char char0 = '0';
      charArray0[0] = char0;
      char char1 = '(';
      charArray0[1] = char1;
      char char2 = 'f';
      charArray0[2] = char2;
      char char3 = 'G';
      charArray0[3] = char3;
      char char4 = 'M';
      charArray0[4] = char4;
      char char5 = '}';
      charArray0[5] = char5;
      char char6 = '`';
      charArray0[6] = char6;
      char[] charArray1 = tSynchronizedByteCharMap0.values(charArray0);
      assertSame(charArray0, charArray1);
  }

  @Test
  public void test3()  throws Throwable  {
      TByteCharMap tByteCharMap0 = null;
      TSynchronizedByteCharMap tSynchronizedByteCharMap0 = null;
      try {
        tSynchronizedByteCharMap0 = new TSynchronizedByteCharMap(tByteCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TByteCharMap tByteCharMap0 = null;
      String string0 = "";
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 985;
      byte byte0 = (byte) (-22);
      char char0 = 'V';
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(int0, (float) int0, byte0, char0);
      TSynchronizedByteCharMap tSynchronizedByteCharMap0 = new TSynchronizedByteCharMap((TByteCharMap) tByteCharHashMap0);
      Object object0 = null;
      TSynchronizedByteCharMap tSynchronizedByteCharMap1 = new TSynchronizedByteCharMap((TByteCharMap) tSynchronizedByteCharMap0, object0);
      // Undeclared exception!
      try {
        tSynchronizedByteCharMap1.keys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap();
      TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap((TByteCharMap) tByteCharHashMap0);
      String string0 = "";
      String string1 = "r>l%T\"9";
      String string2 = ">";
      Locale locale0 = new Locale(string0, string1, string2);
      String string3 = locale0.getISO3Language();
      TSynchronizedByteCharMap tSynchronizedByteCharMap0 = new TSynchronizedByteCharMap((TByteCharMap) tByteCharHashMap0, (Object) string3);
      tSynchronizedByteCharMap0.putAll((TByteCharMap) tByteCharHashMap0);
      byte byte0 = (byte)56;
      char char0 = 'W';
      tSynchronizedByteCharMap0.putIfAbsent(byte0, char0);
      byte byte1 = (byte)41;
      char char1 = '%';
      tByteCharHashMap1.adjustValue(byte1, char1);
      tSynchronizedByteCharMap0.increment(byte1);
      TSynchronizedByteCharMap tSynchronizedByteCharMap1 = new TSynchronizedByteCharMap((TByteCharMap) tByteCharHashMap1);
      TSynchronizedByteCharMap tSynchronizedByteCharMap2 = new TSynchronizedByteCharMap((TByteCharMap) tSynchronizedByteCharMap1);
      byte byte2 = (byte) (-73);
      tSynchronizedByteCharMap2.get(byte2);
      tSynchronizedByteCharMap1.putAll((TByteCharMap) tSynchronizedByteCharMap0);
      assertEquals(1, tByteCharHashMap1.size());
      assertEquals("{56=W}", tSynchronizedByteCharMap0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap();
      String string0 = "dS";
      int int0 = 1;
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: dS://dS%7F@dS:1dS%7F?dS%7F#dS%7F
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-1);
      float float0 = 1.0F;
      int int1 = (-1483);
      float float1 = 1669.9077F;
      byte byte0 = (byte) (-1);
      char char0 = '\\';
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(int1, float1, byte0, char0);
      Locale locale0 = Locale.UK;
      String string0 = locale0.getScript();
      TSynchronizedByteCharMap tSynchronizedByteCharMap0 = new TSynchronizedByteCharMap((TByteCharMap) tByteCharHashMap0, (Object) string0);
      TCharFunction tCharFunction0 = null;
      tSynchronizedByteCharMap0.transformValues(tCharFunction0);
      TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap(int0, float0);
      TSynchronizedByteCharMap tSynchronizedByteCharMap1 = new TSynchronizedByteCharMap((TByteCharMap) tByteCharHashMap1);
      byte byte1 = (byte) (-3);
      char char1 = 'h';
      boolean boolean0 = tSynchronizedByteCharMap1.adjustValue(byte1, char1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(int0);
      String string0 = tByteCharHashMap0.toString();
      String string1 = "";
      // Undeclared exception!
      try {
        File.createTempFile(string1, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(int0, float0);
      TSynchronizedByteCharMap tSynchronizedByteCharMap0 = new TSynchronizedByteCharMap((TByteCharMap) tByteCharHashMap0);
      TSynchronizedByteCharMap tSynchronizedByteCharMap1 = new TSynchronizedByteCharMap((TByteCharMap) tSynchronizedByteCharMap0);
      char[] charArray0 = new char[10];
      char char0 = 'j';
      charArray0[0] = char0;
      char char1 = '0';
      charArray0[1] = char1;
      char char2 = 'C';
      charArray0[2] = char2;
      char char3 = 'g';
      charArray0[3] = char3;
      char char4 = 'T';
      charArray0[4] = char4;
      char char5 = ',';
      charArray0[5] = char5;
      char char6 = '#';
      charArray0[6] = char6;
      char char7 = '=';
      charArray0[7] = char7;
      char char8 = 'r';
      charArray0[8] = char8;
      char char9 = 'V';
      charArray0[9] = char9;
      tSynchronizedByteCharMap1.values(charArray0);
      TByteCharMap tByteCharMap0 = null;
      TSynchronizedByteCharMap tSynchronizedByteCharMap2 = null;
      try {
        tSynchronizedByteCharMap2 = new TSynchronizedByteCharMap(tByteCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap();
          TSynchronizedByteCharMap tSynchronizedByteCharMap0 = new TSynchronizedByteCharMap((TByteCharMap) tByteCharHashMap0);
          TByteCharMap tByteCharMap0 = null;
          String string0 = "no elemenet at ";
          byte byte0 = (byte)0;
          tSynchronizedByteCharMap0.containsKey(byte0);
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)32;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      char[] charArray0 = new char[6];
      char char0 = 'D';
      charArray0[0] = char0;
      char char1 = '\'';
      charArray0[1] = char1;
      char char2 = 'A';
      charArray0[2] = char2;
      char char3 = 'd';
      charArray0[3] = char3;
      char char4 = 'p';
      charArray0[4] = char4;
      char char5 = 'W';
      charArray0[5] = char5;
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
      TSynchronizedByteCharMap tSynchronizedByteCharMap0 = new TSynchronizedByteCharMap((TByteCharMap) tByteCharHashMap0);
      byte byte2 = (byte) (-1);
      tSynchronizedByteCharMap0.containsKey(byte2);
      TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap(int0, float0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      String string0 = "t}EU9}7NB>";
      try {
        byteArrayOutputStream0.toString(string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // t}EU9}7NB>
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 216;
      byte byte0 = (byte)0;
      char char0 = '\'';
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(int0, (float) int0, byte0, char0);
      TSynchronizedByteCharMap tSynchronizedByteCharMap0 = new TSynchronizedByteCharMap((TByteCharMap) tByteCharHashMap0);
      tSynchronizedByteCharMap0.putAll((TByteCharMap) tByteCharHashMap0);
      assertEquals('\'', tByteCharHashMap0.getNoEntryValue());
  }

  @Test
  public void test14()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap();
      byte byte0 = (byte)10;
      Byte byte1 = new Byte(byte0);
      TSynchronizedByteCharMap tSynchronizedByteCharMap0 = new TSynchronizedByteCharMap((TByteCharMap) tByteCharHashMap0, (Object) byte1);
      TSynchronizedByteCharMap tSynchronizedByteCharMap1 = new TSynchronizedByteCharMap((TByteCharMap) tSynchronizedByteCharMap0);
      byte byte2 = (byte)96;
      char char0 = '!';
      char char1 = '-';
      char char2 = tSynchronizedByteCharMap1.adjustOrPutValue(byte2, char0, char1);
      assertEquals("{96=-}", tByteCharHashMap0.toString());
      assertEquals('-', char2);
  }

  @Test
  public void test15()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap();
      int int0 = (-1166);
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1166
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 1874;
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(int0);
      TSynchronizedByteCharMap tSynchronizedByteCharMap0 = new TSynchronizedByteCharMap((TByteCharMap) tByteCharHashMap0);
      tSynchronizedByteCharMap0.size();
      int int1 = (-474);
      float float0 = 0.0F;
      byte byte0 = (byte)0;
      int int2 = 0;
      float float1 = 574.86926F;
      char char0 = 'D';
      TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap(int2, float1, byte0, char0);
      TSynchronizedByteCharMap tSynchronizedByteCharMap1 = new TSynchronizedByteCharMap((TByteCharMap) tByteCharHashMap1);
      char char1 = 'k';
      byte byte1 = (byte)83;
      tByteCharHashMap1.contains(byte1);
      TByteCharHashMap tByteCharHashMap2 = new TByteCharHashMap(int1, float0, byte0, char1);
      String string0 = Character.toString(char1);
      TSynchronizedByteCharMap tSynchronizedByteCharMap2 = new TSynchronizedByteCharMap((TByteCharMap) tByteCharHashMap2, (Object) string0);
      TSynchronizedByteCharMap tSynchronizedByteCharMap3 = new TSynchronizedByteCharMap((TByteCharMap) tSynchronizedByteCharMap2);
      tSynchronizedByteCharMap2.getNoEntryKey();
      char char2 = '=';
      tSynchronizedByteCharMap3.put(byte0, char2);
      float float2 = 10.0F;
      TByteCharHashMap tByteCharHashMap3 = new TByteCharHashMap();
      TSynchronizedByteCharMap tSynchronizedByteCharMap4 = new TSynchronizedByteCharMap((TByteCharMap) tByteCharHashMap3);
      tSynchronizedByteCharMap4.isEmpty();
      byte byte2 = (byte)91;
      char char3 = 'J';
      TByteCharHashMap tByteCharHashMap4 = new TByteCharHashMap(int0, float2, byte2, char3);
      TSynchronizedByteCharMap tSynchronizedByteCharMap5 = new TSynchronizedByteCharMap((TByteCharMap) tByteCharHashMap4);
      tSynchronizedByteCharMap5.keys(tByteCharHashMap2._states);
      assertEquals(7, tByteCharHashMap2.capacity());
      
      byte byte3 = (byte) (-36);
      char char4 = 'g';
      tByteCharHashMap4.isEmpty();
      char char5 = tSynchronizedByteCharMap5.putIfAbsent(byte3, char4);
      assertEquals('J', char5);
  }
}
