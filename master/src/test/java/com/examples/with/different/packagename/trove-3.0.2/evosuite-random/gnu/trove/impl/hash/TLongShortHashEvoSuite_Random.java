/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TLongShortMap;
import gnu.trove.map.hash.TLongShortHashMap;
import gnu.trove.procedure.TLongShortProcedure;
import java.io.ObjectInput;
import java.io.PipedInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TLongShortHashEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = (-334L);
      longArray0[0] = long0;
      short[] shortArray0 = new short[6];
      short short0 = (short) (-952);
      shortArray0[0] = short0;
      short short1 = (short) (-410);
      shortArray0[1] = short1;
      short short2 = (short)0;
      short[] shortArray1 = new short[1];
      short short3 = (short) (-41);
      shortArray1[0] = short3;
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(longArray0, shortArray1);
      assertEquals(false, tLongShortHashMap0.isEmpty());
      
      tLongShortHashMap0.clear();
      shortArray0[2] = short2;
      short short4 = (short)2016;
      shortArray0[3] = short4;
      short short5 = (short) (-1);
      shortArray0[4] = short5;
      short short6 = (short)1557;
      shortArray0[5] = short6;
      TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap(longArray0, shortArray0);
      int int0 = 0;
      TLongShortHashMap tLongShortHashMap2 = new TLongShortHashMap();
      TLongShortHashMap tLongShortHashMap3 = new TLongShortHashMap((TLongShortMap) tLongShortHashMap2);
      tLongShortHashMap3.trimToSize();
      TLongShortHashMap tLongShortHashMap4 = new TLongShortHashMap(int0, int0);
      assertEquals(0L, tLongShortHashMap4.getNoEntryKey());
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 195;
      float float0 = 10.0F;
      long long0 = 0L;
      short short0 = (short)1984;
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(int0, float0, long0, short0);
      tLongShortHashMap0.setAutoCompactionFactor((float) short0);
      TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap();
      long long1 = (-109L);
      tLongShortHashMap1.remove(long1);
      int int1 = 0;
      TLongShortHashMap tLongShortHashMap2 = new TLongShortHashMap(int1, int1);
      TLongShortMap tLongShortMap0 = null;
      TLongShortHashMap tLongShortHashMap3 = null;
      try {
        tLongShortHashMap3 = new TLongShortHashMap(tLongShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      int int0 = 1778;
      long long0 = 0L;
      short short0 = (short)0;
      tLongShortHashMap0.put(long0, short0);
      assertEquals(false, tLongShortHashMap0.isEmpty());
      
      TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap(int0);
      float float0 = (-1500.8518F);
      // Undeclared exception!
      try {
        tLongShortHashMap1.setAutoCompactionFactor(float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1500.8518
         //
      }
  }

//   @Test
//   public void test3()  throws Throwable  {
//       long[] longArray0 = new long[8];
//       long long0 = 1441L;
//       longArray0[0] = long0;
//       long long1 = (-9223372036854775808L);
//       longArray0[1] = long1;
//       long long2 = 445L;
//       longArray0[2] = long2;
//       long long3 = (-549L);
//       longArray0[3] = long3;
//       long long4 = (-1462L);
//       longArray0[4] = long4;
//       long long5 = 9223372036854775807L;
//       longArray0[5] = long5;
//       long long6 = 0L;
//       longArray0[6] = long6;
//       long long7 = 0L;
//       longArray0[7] = long7;
//       short[] shortArray0 = new short[6];
//       short short0 = (short) (-1);
//       shortArray0[0] = short0;
//       short short1 = (short) (-1425);
//       shortArray0[1] = short1;
//       short short2 = (short)0;
//       shortArray0[2] = short2;
//       short short3 = (short)0;
//       shortArray0[3] = short3;
//       short short4 = (short)0;
//       shortArray0[4] = short4;
//       short short5 = (short)1512;
//       shortArray0[5] = short5;
//       TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(longArray0, shortArray0);
//       long long8 = tLongShortHashMap0.getNoEntryKey();
//       assertEquals("{-1462=0, 9223372036854775807=1512, 1441=-1, -549=0, 445=0, -9223372036854775808=-1425}", tLongShortHashMap0.toString());
//       assertEquals(0L, long8);
//       
//       int int0 = 0;
//       float float0 = 10.0F;
//       TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap(int0, float0);
//       tLongShortHashMap1.tempDisableAutoCompaction();
//       assertEquals(0L, tLongShortHashMap1.getNoEntryKey());
//       assertEquals(0, tLongShortHashMap1.getNoEntryValue());
//   }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-1678);
      float float0 = (-1475.7441F);
      int int1 = (-1);
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(int1, int0);
      TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap((TLongShortMap) tLongShortHashMap0);
      tLongShortHashMap1.toString();
      TLongShortHashMap tLongShortHashMap2 = new TLongShortHashMap(int0, float0);
      tLongShortHashMap2.tempDisableAutoCompaction();
      long long0 = 447L;
      short short0 = tLongShortHashMap1.get(long0);
      assertEquals((short)0, short0);
      
      tLongShortHashMap2.size();
      assertEquals(0L, tLongShortHashMap2.getNoEntryKey());
  }

  @Test
  public void test5()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = (-9223372036854775808L);
      int int0 = (-1255);
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(int0);
      short short0 = (short) (-1783);
      tLongShortHashMap0.putIfAbsent((long) int0, short0);
      assertEquals(false, tLongShortHashMap0.isEmpty());
      
      long long1 = 0L;
      longArray0[0] = long1;
      longArray0[1] = long1;
      longArray0[0] = long0;
      long long2 = (-9223372036854775808L);
      longArray0[1] = long2;
      short[] shortArray0 = new short[7];
      short short1 = (short)1775;
      shortArray0[0] = short1;
      short short2 = (short) (-1);
      shortArray0[1] = short2;
      short short3 = (short)1;
      shortArray0[2] = short3;
      shortArray0[0] = short1;
      shortArray0[1] = short2;
      shortArray0[2] = short1;
      short short4 = (short)1952;
      shortArray0[3] = short4;
      short short5 = (short)1279;
      shortArray0[4] = short5;
      shortArray0[5] = short2;
      shortArray0[6] = short4;
      int int1 = 0;
      TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap(int1, (float) longArray0[0]);
      short short6 = (short) (-1308);
      TLongShortHashMap tLongShortHashMap2 = new TLongShortHashMap(longArray0, shortArray0);
      shortArray0[3] = short6;
      short short7 = (short)1612;
      shortArray0[4] = short7;
      short short8 = (short) (-257);
      shortArray0[5] = short8;
      short short9 = (short)0;
      shortArray0[6] = short9;
      tLongShortHashMap1.ensureCapacity((int) short3);
      TLongShortHashMap tLongShortHashMap3 = new TLongShortHashMap(longArray0, shortArray0);
      tLongShortHashMap3.getAutoCompactionFactor();
      assertTrue(tLongShortHashMap3.equals(tLongShortHashMap2));
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-1);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      short[] shortArray0 = new short[6];
      short short0 = (short)1258;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)41;
      shortArray0[2] = short2;
      short short3 = (short)33;
      shortArray0[3] = short3;
      short short4 = (short)226;
      shortArray0[4] = short4;
      short short5 = (short)163;
      shortArray0[5] = short5;
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(longArray0, shortArray0);
      TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap((TLongShortMap) tLongShortHashMap0);
      short[] shortArray1 = tLongShortHashMap1.values();
      assertEquals("{-1=33}", tLongShortHashMap0.toString());
      assertEquals(1, tLongShortHashMap0.size());
      assertNotNull(shortArray1);
      
      TLongShortHashMap tLongShortHashMap2 = new TLongShortHashMap(int0);
      tLongShortHashMap2.compact();
      int int1 = (-1899);
      tLongShortHashMap2.iterator();
      tLongShortHashMap2.getAutoCompactionFactor();
      tLongShortHashMap2.isEmpty();
      TLongShortHashMap tLongShortHashMap3 = new TLongShortHashMap(int1);
      tLongShortHashMap2.toString();
      short short6 = tLongShortHashMap3.remove((long) int1);
      assertEquals((short)0, short6);
      assertEquals(0L, tLongShortHashMap3.getNoEntryKey());
  }

//   @Test
//   public void test7()  throws Throwable  {
//       long[] longArray0 = new long[1];
//       long long0 = 1187L;
//       longArray0[0] = long0;
//       short[] shortArray0 = new short[4];
//       short short0 = (short) (-1923);
//       shortArray0[0] = short0;
//       short short1 = (short)1815;
//       shortArray0[1] = short1;
//       short short2 = (short)640;
//       int int0 = (-2011);
//       float float0 = (-681.8355F);
//       TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(int0, float0);
//       tLongShortHashMap0.clear();
//       shortArray0[2] = short2;
//       short short3 = (short)1;
//       shortArray0[3] = short3;
//       TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap(longArray0, shortArray0);
//       long long1 = 37L;
//       TLongShortProcedure tLongShortProcedure0 = null;
//       tLongShortHashMap0.retainEntries(tLongShortProcedure0);
//       assertEquals(0, tLongShortHashMap0.getNoEntryValue());
//       assertEquals(0L, tLongShortHashMap0.getNoEntryKey());
//       
//       boolean boolean0 = tLongShortHashMap1.adjustValue(long1, short3);
//       assertEquals("{1187=-1923}", tLongShortHashMap1.toString());
//       assertEquals(false, boolean0);
//       assertEquals(11, tLongShortHashMap1.capacity());
//       assertEquals(0L, tLongShortHashMap1.getNoEntryKey());
//       assertEquals(0, tLongShortHashMap1.getNoEntryValue());
//   }

  @Test
  public void test8()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = (-1L);
      longArray0[0] = long0;
      long long1 = 0L;
      longArray0[1] = long1;
      long long2 = (-140L);
      longArray0[2] = long2;
      short[] shortArray0 = new short[8];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short) (-707);
      shortArray0[3] = short3;
      short short4 = (short)977;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short) (-1817);
      shortArray0[6] = short6;
      short short7 = (short) (-1);
      shortArray0[7] = short7;
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(longArray0, shortArray0);
      assertEquals(0L, tLongShortHashMap0.getNoEntryKey());
      assertEquals("{0=0, -140=0, -1=0}", tLongShortHashMap0.toString());
  }

//   @Test
//   public void test9()  throws Throwable  {
//       int int0 = 588;
//       int int1 = (-1120);
//       float float0 = 19.503801F;
//       short short0 = (short)780;
//       TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(int1, float0, (long) int0, short0);
//       assertEquals(780, tLongShortHashMap0.getNoEntryValue());
//       assertEquals(588L, tLongShortHashMap0.getNoEntryKey());
//       
//       TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap(int0);
//       TLongShortHashMap tLongShortHashMap2 = new TLongShortHashMap((TLongShortMap) tLongShortHashMap1);
//       int int2 = Integer.MAX_VALUE;
//       TLongShortHashMap tLongShortHashMap3 = new TLongShortHashMap(int2);
//       short[] shortArray0 = new short[10];
//       shortArray0[0] = short0;
//       shortArray0[1] = short0;
//       shortArray0[2] = short0;
//       shortArray0[3] = short0;
//       short short1 = (short)867;
//       shortArray0[4] = short1;
//       shortArray0[5] = short0;
//       short short2 = (short)0;
//       shortArray0[6] = short2;
//       short short3 = (short)1;
//       shortArray0[7] = short3;
//       shortArray0[8] = short0;
//       short short4 = (short)0;
//       shortArray0[9] = short4;
//       short[] shortArray1 = tLongShortHashMap1.values(shortArray0);
//       assertEquals(0, tLongShortHashMap1.getNoEntryValue());
//       assertEquals(0L, tLongShortHashMap1.getNoEntryKey());
//       assertEquals(1201, tLongShortHashMap1.capacity());
//       assertNotNull(shortArray1);
//   }

//   @Test
//   public void test10()  throws Throwable  {
//       int int0 = Integer.MAX_VALUE;
//       TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(int0, int0);
//       short[] shortArray0 = tLongShortHashMap0.values();
//       assertNotNull(shortArray0);
//       
//       long long0 = 0L;
//       TLongShortProcedure tLongShortProcedure0 = null;
//       long[] longArray0 = new long[10];
//       long long1 = 1290L;
//       longArray0[0] = long1;
//       longArray0[1] = (long) int0;
//       longArray0[2] = long0;
//       longArray0[3] = long0;
//       longArray0[4] = long0;
//       longArray0[5] = long0;
//       longArray0[6] = long0;
//       longArray0[7] = (long) int0;
//       longArray0[8] = (long) int0;
//       longArray0[9] = long0;
//       tLongShortHashMap0.keys(longArray0);
//       tLongShortHashMap0.isEmpty();
//       tLongShortHashMap0.retainEntries(tLongShortProcedure0);
//       short short0 = tLongShortHashMap0.remove(long0);
//       assertEquals((short)0, short0);
//       assertEquals(0L, tLongShortHashMap0.getNoEntryKey());
//       
//       TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap(int0);
//       tLongShortHashMap1.toString();
//       assertEquals(0, tLongShortHashMap1.getNoEntryValue());
//       assertEquals(0L, tLongShortHashMap1.getNoEntryKey());
//       assertTrue(tLongShortHashMap1.equals(tLongShortHashMap0));
//   }

//   @Test
//   public void test11()  throws Throwable  {
//       int int0 = Integer.MAX_VALUE;
//       TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(int0, int0);
//       assertEquals(0, tLongShortHashMap0.getNoEntryValue());
//       assertEquals(0L, tLongShortHashMap0.getNoEntryKey());
//       
//       int int1 = 0;
//       short short0 = (short)67;
//       TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap(int1, (float) int1, (long) int1, short0);
//       assertEquals(0L, tLongShortHashMap1.getNoEntryKey());
//       assertEquals(67, tLongShortHashMap1.getNoEntryValue());
//   }

//   @Test
//   public void test12()  throws Throwable  {
//       int int0 = 83;
//       float float0 = 0.0F;
//       short short0 = (short) (-1);
//       TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(int0, float0, (long) int0, short0);
//       tLongShortHashMap0.clear();
//       assertEquals(-1, tLongShortHashMap0.getNoEntryValue());
//       assertEquals(83L, tLongShortHashMap0.getNoEntryKey());
//   }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-1264);
      int int1 = (-1822);
      int int2 = 450;
      float float0 = 639.0842F;
      short short0 = (short)0;
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(int2, float0, (long) int0, short0);
      tLongShortHashMap0.capacity();
      int int3 = 1336;
      TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap(int3);
      float float1 = 6.6360896E8F;
      long long0 = 0L;
      short[] shortArray0 = new short[4];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      tLongShortHashMap0.values(shortArray0);
      short short1 = (short) (-391);
      TLongShortHashMap tLongShortHashMap2 = new TLongShortHashMap(int1, float1, long0, short1);
      long long1 = 0L;
      tLongShortHashMap2.get(long1);
      TLongShortHashMap tLongShortHashMap3 = new TLongShortHashMap(int0);
      TLongShortHashMap tLongShortHashMap4 = new TLongShortHashMap((TLongShortMap) tLongShortHashMap3);
      tLongShortHashMap2._states = tLongShortHashMap0._states;
      boolean boolean0 = true;
      tLongShortHashMap0.reenableAutoCompaction(boolean0);
      byte[] byteArray0 = tLongShortHashMap4._states;
      int int4 = (-1815);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(int4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 138;
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(int0);
      tLongShortHashMap0.hashCode();
      short short0 = (short) (-153);
      tLongShortHashMap0.adjustValue((long) int0, short0);
      ObjectInput objectInput0 = null;
      boolean boolean0 = true;
      tLongShortHashMap0.reenableAutoCompaction(boolean0);
      short short1 = (short) (-1681);
      int int1 = 0;
      float float0 = 0.0F;
      TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap(int1, float0);
      tLongShortHashMap0.containsValue(short1);
      String string0 = "+2-ZLSi+d";
      byte[] byteArray0 = tLongShortHashMap0._states;
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: +2-ZLSi+d://+2-ZLSi+d+2-ZLSi+d#+2-ZLSi+d
         //
      }
  }

//   @Test
//   public void test15()  throws Throwable  {
//       int int0 = 0;
//       float float0 = 1760.5475F;
//       long long0 = (-1542L);
//       short short0 = (short)1;
//       int int1 = (-1023);
//       float float1 = (-394.62454F);
//       int int2 = 1781;
//       TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(int2, (float) int1, long0, short0);
//       TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap((TLongShortMap) tLongShortHashMap0);
//       TLongShortHashMap tLongShortHashMap2 = new TLongShortHashMap(int1, float1);
//       long[] longArray0 = tLongShortHashMap2._set;
//       assertEquals(0L, tLongShortHashMap2.getNoEntryKey());
//       assertEquals(0, tLongShortHashMap2.getNoEntryValue());
//       
//       TLongShortHashMap tLongShortHashMap3 = new TLongShortHashMap(int0, float0, long0, short0);
//       tLongShortHashMap3.ensureCapacity(int0);
//       assertEquals(1, tLongShortHashMap3.getNoEntryValue());
//       assertEquals((-1542L), tLongShortHashMap3.getNoEntryKey());
//   }

  @Test
  public void test16()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      int int0 = 0;
      TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap(int0);
      boolean boolean0 = false;
      tLongShortHashMap0.reenableAutoCompaction(boolean0);
      TLongShortHashMap tLongShortHashMap2 = new TLongShortHashMap();
      TLongShortHashMap tLongShortHashMap3 = new TLongShortHashMap((TLongShortMap) tLongShortHashMap2);
      tLongShortHashMap0.keys();
      long long0 = (-6L);
      tLongShortHashMap1.ensureCapacity(int0);
      short short0 = (short) (-12);
      tLongShortHashMap2.put(long0, short0);
      tLongShortHashMap2.tempDisableAutoCompaction();
      tLongShortHashMap3.tempDisableAutoCompaction();
      assertEquals(false, tLongShortHashMap2.isEmpty());
      assertEquals("{-6=-12}", tLongShortHashMap2.toString());
  }

//   @Test
//   public void test17()  throws Throwable  {
//       int int0 = 598;
//       long long0 = (-456L);
//       long[] longArray0 = new long[2];
//       longArray0[0] = (long) int0;
//       longArray0[1] = (long) int0;
//       short[] shortArray0 = new short[7];
//       short short0 = (short)0;
//       shortArray0[0] = short0;
//       short short1 = (short) (-377);
//       shortArray0[1] = short1;
//       short short2 = (short)802;
//       shortArray0[2] = short2;
//       short short3 = (short)0;
//       shortArray0[3] = short3;
//       short short4 = (short)1389;
//       shortArray0[4] = short4;
//       short short5 = (short)1;
//       shortArray0[5] = short5;
//       short short6 = (short)0;
//       shortArray0[6] = short6;
//       TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(longArray0, shortArray0);
//       byte[] byteArray0 = tLongShortHashMap0._states;
//       assertEquals(1, tLongShortHashMap0.size());
//       assertEquals(0L, tLongShortHashMap0.getNoEntryKey());
//       assertEquals(0, tLongShortHashMap0.getNoEntryValue());
//       assertEquals("{598=-377}", tLongShortHashMap0.toString());
//       
//       short short7 = (short)0;
//       TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap(int0, (float) int0, long0, short7);
//       assertEquals(0, tLongShortHashMap1.getNoEntryValue());
//       assertEquals((-456L), tLongShortHashMap1.getNoEntryKey());
//       
//       TLongShortHashMap tLongShortHashMap2 = new TLongShortHashMap();
//       short short8 = tLongShortHashMap2.getNoEntryValue();
//       assertEquals((short)0, short8);
//       
//       TLongShortHashMap tLongShortHashMap3 = new TLongShortHashMap();
//       String string0 = tLongShortHashMap3.toString();
//       assertNotNull(string0);
//       
//       long long1 = tLongShortHashMap3.getNoEntryKey();
//       assertEquals(0L, long1);
//       
//       tLongShortHashMap3.getAutoCompactionFactor();
//       tLongShortHashMap3.toString();
//       assertEquals(23, tLongShortHashMap3.capacity());
//       assertEquals(0, tLongShortHashMap3.getNoEntryValue());
//   }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 83;
      float float0 = 0.0F;
      long long0 = 0L;
      short short0 = (short) (-117);
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(int0, float0, long0, short0);
      long[] longArray0 = tLongShortHashMap0._set;
      int int1 = (-1);
      TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap(int1);
      short short1 = (short)5471;
      tLongShortHashMap1.containsValue(short1);
      int int2 = 1;
      int int3 = 1155;
      float float1 = (-799.881F);
      tLongShortHashMap1.getNoEntryKey();
      short short2 = (short) (-365);
      TLongShortHashMap tLongShortHashMap2 = new TLongShortHashMap(int3, float1, (long) int3, short2);
      boolean boolean0 = false;
      tLongShortHashMap2.reenableAutoCompaction(boolean0);
      tLongShortHashMap2.trimToSize();
      TLongShortHashMap tLongShortHashMap3 = new TLongShortHashMap(int2);
      TLongShortHashMap tLongShortHashMap4 = new TLongShortHashMap((TLongShortMap) tLongShortHashMap3);
      short short3 = (short) (-1);
      short short4 = (short) (-1);
      tLongShortHashMap4.keySet();
      tLongShortHashMap4.tempDisableAutoCompaction();
      tLongShortHashMap4.adjustOrPutValue((long) int2, short3, short4);
      assertEquals(false, tLongShortHashMap4.isEmpty());
      
      long long1 = (-1338L);
      boolean boolean1 = tLongShortHashMap2.contains(long1);
      assertEquals(false, boolean1);
  }
}
