/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TDoubleFunction;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortSet;
import gnu.trove.map.TShortDoubleMap;
import gnu.trove.map.hash.TShortDoubleHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.procedure.TShortDoubleProcedure;
import gnu.trove.procedure.TShortProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableShortDoubleMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap$1.value()D: root-Branch
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap$1.hasNext()Z: root-Branch
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap$1.key()S: root-Branch
   * 4 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap$1.advance()V: root-Branch
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap$1.<init>(Lgnu/trove/impl/unmodifiable/TUnmodifiableShortDoubleMap;)V: root-Branch
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.iterator()Lgnu/trove/iterator/TShortDoubleIterator;: root-Branch
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.size()I: root-Branch
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.<init>(Lgnu/trove/map/TShortDoubleMap;)V: I17 Branch 1 IFNONNULL L58 - true
   */

  @Test
  public void test0()  throws Throwable  {
      short[] shortArray0 = new short[6];
      double[] doubleArray0 = new double[14];
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap((TShortDoubleMap) tUnmodifiableShortDoubleMap0);
      assertEquals(1, tUnmodifiableShortDoubleMap0.size());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.remove(S)D: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      short[] shortArray0 = new short[15];
      double[] doubleArray0 = new double[3];
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortDoubleMap0.remove((short)0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.retainEntries(Lgnu/trove/procedure/TShortDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(1535, (float) 1535, (short)20, (double) (short)20);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortDoubleMap0.retainEntries((TShortDoubleProcedure) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(18);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      boolean boolean0 = tUnmodifiableShortDoubleMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.values()[D: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      short[] shortArray0 = new short[6];
      double[] doubleArray0 = new double[14];
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      double[] doubleArray1 = tUnmodifiableShortDoubleMap0.values();
      assertFalse(doubleArray0.equals(doubleArray1));
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.keys([S)[S: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(18);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      short[] shortArray0 = tUnmodifiableShortDoubleMap0.keys(tShortDoubleHashMap0._set);
      assertNotNull(shortArray0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.keys()[S: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      short[] shortArray0 = new short[6];
      double[] doubleArray0 = new double[14];
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      short[] shortArray1 = tUnmodifiableShortDoubleMap0.keys();
      assertFalse(shortArray0.equals(shortArray1));
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.adjustValue(SD)Z: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(18);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortDoubleMap0.adjustValue((short) (-435), (double) 18);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortDoubleMap0.transformValues((TDoubleFunction) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.put(SD)D: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(353, (float) 353, (short)1134, (double) 353);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortDoubleMap0.put((short)1134, (short)1134);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      short[] shortArray0 = new short[15];
      double[] doubleArray0 = new double[3];
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      String string0 = tUnmodifiableShortDoubleMap0.toString();
      assertEquals("{0=0.0}", string0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.clear()V: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortDoubleMap0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.forEachKey(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(18);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      boolean boolean0 = tUnmodifiableShortDoubleMap0.forEachKey((TShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.increment(S)Z: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((-5), (-5));
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortDoubleMap0.increment((short)27121);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.putAll(Lgnu/trove/map/TShortDoubleMap;)V: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(15);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortDoubleMap0.putAll((TShortDoubleMap) tShortDoubleHashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.hashCode()I: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(18);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      int int0 = tUnmodifiableShortDoubleMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.putIfAbsent(SD)D: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((int) (short) (-1), (float) (short) (-1));
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortDoubleMap0.putIfAbsent((short) (-1), (double) 3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.containsKey(S)Z: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(15);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      boolean boolean0 = tUnmodifiableShortDoubleMap0.containsKey((short)488);
      assertEquals(false, boolean0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(1, (float) 1, (short) (-1467), (double) (short) (-1467));
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      HashMap<Short, Double> hashMap0 = new HashMap<Short, Double>();
      // Undeclared exception!
      try {
        tUnmodifiableShortDoubleMap0.putAll((Map<? extends Short, ? extends Double>) hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.values([D)[D: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      short[] shortArray0 = new short[6];
      double[] doubleArray0 = new double[14];
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      double[] doubleArray1 = tUnmodifiableShortDoubleMap0.values(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((int) (short)3, (float) (short)3, (short)3, (double) (short)3);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      boolean boolean0 = tUnmodifiableShortDoubleMap0.forEachValue((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.get(S)D: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(15);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      double double0 = tUnmodifiableShortDoubleMap0.get((short)488);
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.adjustOrPutValue(SDD)D: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortDoubleMap0.adjustOrPutValue((short)202, (short)202, (short)202);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.getNoEntryValue()D: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(15);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      double double0 = tUnmodifiableShortDoubleMap0.getNoEntryValue();
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.containsValue(D)Z: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(15);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      boolean boolean0 = tUnmodifiableShortDoubleMap0.containsValue((double) 15);
      assertEquals(false, boolean0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.forEachEntry(Lgnu/trove/procedure/TShortDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(353, (float) 353, (short)1134, (double) 353);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      boolean boolean0 = tUnmodifiableShortDoubleMap0.forEachEntry((TShortDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.getNoEntryKey()S: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((int) (short) (-1), (float) (short) (-1));
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      short short0 = tUnmodifiableShortDoubleMap0.getNoEntryKey();
      assertEquals((short)0, short0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.<init>(Lgnu/trove/map/TShortDoubleMap;)V: I17 Branch 1 IFNONNULL L58 - false
   */

  @Test
  public void test27()  throws Throwable  {
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = null;
      try {
        tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.keySet()Lgnu/trove/set/TShortSet;: I4 Branch 2 IFNONNULL L79 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.keySet()Lgnu/trove/set/TShortSet;: I4 Branch 2 IFNONNULL L79 - false
   */

  @Test
  public void test28()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(15);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = (TUnmodifiableShortSet)tUnmodifiableShortDoubleMap0.keySet();
      assertNotNull(tUnmodifiableShortSet0);
      
      TUnmodifiableShortSet tUnmodifiableShortSet1 = (TUnmodifiableShortSet)tUnmodifiableShortDoubleMap0.keySet();
      assertSame(tUnmodifiableShortSet1, tUnmodifiableShortSet0);
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;: I4 Branch 3 IFNONNULL L87 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;: I4 Branch 3 IFNONNULL L87 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((-5), (-5));
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      TUnmodifiableDoubleCollection tUnmodifiableDoubleCollection0 = (TUnmodifiableDoubleCollection)tUnmodifiableShortDoubleMap0.valueCollection();
      assertNotNull(tUnmodifiableDoubleCollection0);
      
      TUnmodifiableDoubleCollection tUnmodifiableDoubleCollection1 = (TUnmodifiableDoubleCollection)tUnmodifiableShortDoubleMap0.valueCollection();
      assertSame(tUnmodifiableDoubleCollection1, tUnmodifiableDoubleCollection0);
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L94 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L94 - false
   */

  @Test
  public void test30()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((int) (short)3, (float) (short)3, (short)3, (double) (short)3);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      boolean boolean0 = tUnmodifiableShortDoubleMap0.equals((Object) tShortDoubleHashMap0);
      assertEquals(true, boolean0);
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L94 - false
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L94 - true
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap.<init>(Lgnu/trove/map/TShortDoubleMap;)V: I17 Branch 1 IFNONNULL L58 - true
   */

  @Test
  public void test31()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(18);
      TUnmodifiableShortDoubleMap tUnmodifiableShortDoubleMap0 = new TUnmodifiableShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      boolean boolean0 = tUnmodifiableShortDoubleMap0.equals((Object) "Deutschland");
      assertEquals(false, boolean0);
  }
}
