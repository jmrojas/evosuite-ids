/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.set.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TCharCollection;
import gnu.trove.impl.sync.TSynchronizedCharSet;
import gnu.trove.iterator.TCharIterator;
import gnu.trove.list.TCharList;
import gnu.trove.list.array.TCharArrayList;
import gnu.trove.list.linked.TCharLinkedList;
import gnu.trove.set.TCharSet;
import gnu.trove.set.hash.TCharHashSet;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Set;
import javax.swing.text.Segment;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharHashSetEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TCharHashSet tCharHashSet0 = new TCharHashSet();
      char[] charArray0 = new char[2];
      char char0 = '(';
      charArray0[0] = char0;
      char char1 = '\\';
      charArray0[1] = char1;
      TCharHashSet tCharHashSet1 = new TCharHashSet(charArray0);
      assertEquals("{(,\\}", tCharHashSet1.toString());
      
      TCharArrayList tCharArrayList0 = new TCharArrayList();
      boolean boolean0 = tCharHashSet0.retainAll((TCharCollection) tCharArrayList0);
      assertEquals(false, boolean0);
      
      int int0 = 0;
      TCharHashSet tCharHashSet2 = new TCharHashSet(int0, int0);
      assertFalse(tCharHashSet2.equals(tCharHashSet1));
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-910);
      TCharHashSet tCharHashSet0 = new TCharHashSet(int0, int0);
      Segment segment0 = new Segment();
      tCharHashSet0.capacity();
      char char0 = '+';
      tCharHashSet0.remove(char0);
      TCharHashSet tCharHashSet1 = new TCharHashSet();
      tCharHashSet0.tempDisableAutoCompaction();
      tCharHashSet1.compact();
      tCharHashSet0.getAutoCompactionFactor();
      int int1 = 0;
      tCharHashSet0.ensureCapacity(int1);
      char char1 = 'b';
      // Undeclared exception!
      try {
        tCharHashSet1.toArray(segment0.array);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 'l';
      charArray0[0] = char0;
      int int0 = 0;
      charArray0[0] = char0;
      TCharHashSet tCharHashSet0 = new TCharHashSet(int0, (float) charArray0[0]);
      TCharArrayList tCharArrayList0 = new TCharArrayList();
      tCharHashSet0.containsAll((TCharCollection) tCharArrayList0);
      char[] charArray1 = tCharHashSet0.toArray();
      assertNotNull(charArray1);
      
      tCharHashSet0.iterator();
      tCharHashSet0.isEmpty();
      tCharHashSet0.retainAll((TCharCollection) tCharArrayList0);
      charArray0[0] = char0;
      tCharHashSet0.getAutoCompactionFactor();
      tCharHashSet0.isEmpty();
      TCharHashSet tCharHashSet1 = new TCharHashSet(charArray0);
      tCharHashSet1.trimToSize();
      tCharHashSet1.retainAll(charArray0);
      int int1 = 0;
      tCharHashSet1.add(charArray0[0]);
      tCharHashSet0.compact();
      tCharHashSet1.ensureCapacity(int1);
      assertEquals(3, tCharHashSet1.capacity());
      assertEquals("{l}", tCharHashSet1.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[2];
      char char0 = 'S';
      charArray0[0] = char0;
      char char1 = 'K';
      charArray0[1] = char1;
      TCharHashSet tCharHashSet0 = new TCharHashSet(charArray0);
      TCharHashSet tCharHashSet1 = new TCharHashSet();
      tCharHashSet1.clear();
      tCharHashSet1.ensureCapacity(int0);
      char char2 = ',';
      tCharHashSet1.size();
      tCharHashSet1.contains(char2);
      tCharHashSet1.compact();
      tCharHashSet1.capacity();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.clone();
      tCharHashSet1.containsAll((Collection<?>) linkedList0);
      // Undeclared exception!
      try {
        linkedList0.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TCharList tCharList0 = null;
      TCharLinkedList tCharLinkedList0 = null;
      try {
        tCharLinkedList0 = new TCharLinkedList(tCharList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 1337;
      float float0 = 640.2948F;
      char char0 = '8';
      TCharHashSet tCharHashSet0 = new TCharHashSet(int0, float0, char0);
      char[] charArray0 = new char[4];
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = char0;
      charArray0[3] = char0;
      boolean boolean0 = tCharHashSet0.retainAll(charArray0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = '6';
      charArray0[0] = char0;
      char char1 = 'k';
      charArray0[1] = char1;
      char char2 = '';
      charArray0[2] = char2;
      char char3 = 'm';
      charArray0[3] = char3;
      TCharHashSet tCharHashSet0 = new TCharHashSet(charArray0);
      TCharIterator tCharIterator0 = tCharHashSet0.iterator();
      assertEquals("{m,k,,6}", tCharHashSet0.toString());
      assertEquals('m', tCharIterator0.next());
  }

  @Test
  public void test7()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      TCharHashSet tCharHashSet0 = new TCharHashSet((Collection<? extends Character>) linkedList0);
      tCharHashSet0.getAutoCompactionFactor();
      tCharHashSet0.getNoEntryValue();
      char char0 = '{';
      LinkedList<String> linkedList1 = new LinkedList<String>();
      String string0 = linkedList1.toString();
      tCharHashSet0.setAutoCompactionFactor((float) char0);
      tCharHashSet0.equals((Object) string0);
      TCharHashSet tCharHashSet1 = new TCharHashSet((Collection<? extends Character>) linkedList0);
      tCharHashSet0.remove(char0);
      char char1 = ';';
      tCharHashSet1.contains(char1);
      char char2 = 'Z';
      linkedList0.add((Character) char0);
      tCharHashSet0.toString();
      Character character0 = new Character(char2);
      linkedList0.add(character0);
      float float0 = 1203.3269F;
      tCharHashSet0.setAutoCompactionFactor(float0);
      TCharHashSet tCharHashSet2 = new TCharHashSet((TCharCollection) tCharHashSet0);
      linkedList1.containsAll((Collection<?>) linkedList0);
      tCharHashSet0.containsAll((TCharCollection) tCharHashSet2);
      TCharHashSet tCharHashSet3 = new TCharHashSet();
      tCharHashSet0.add(char0);
      char char3 = 'D';
      linkedList0.add((Character) char3);
      tCharHashSet0.capacity();
      boolean boolean0 = tCharHashSet0.add(char3);
      assertEquals(2, tCharHashSet0.size());
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      TCharHashSet tCharHashSet0 = new TCharHashSet(int0);
      char[] charArray0 = new char[9];
      char char0 = '<';
      charArray0[0] = char0;
      char char1 = 'u';
      charArray0[1] = char1;
      char char2 = '+';
      charArray0[2] = char2;
      char char3 = ',';
      charArray0[3] = char3;
      char char4 = '+';
      charArray0[4] = char4;
      char char5 = 'n';
      charArray0[5] = char5;
      char char6 = '<';
      charArray0[6] = char6;
      char char7 = 'o';
      charArray0[7] = char7;
      char char8 = 't';
      charArray0[8] = char8;
      tCharHashSet0.addAll(charArray0);
      char char9 = 'O';
      tCharHashSet0.contains(char9);
      assertEquals(false, tCharHashSet0.isEmpty());
      
      int int1 = (-1467);
      char char10 = 'r';
      TCharHashSet tCharHashSet1 = new TCharHashSet(int1, (float) int1, char10);
      byte[] byteArray0 = tCharHashSet1._states;
      float float0 = 1123.3691F;
      TCharHashSet tCharHashSet2 = new TCharHashSet(int1, float0);
      TCharHashSet tCharHashSet3 = new TCharHashSet((TCharCollection) tCharHashSet2);
      tCharHashSet2.removeAll(tCharHashSet3._set);
      TCharHashSet tCharHashSet4 = new TCharHashSet(tCharHashSet3._set);
      boolean boolean0 = tCharHashSet3.addAll((TCharCollection) tCharHashSet4);
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      TCharHashSet tCharHashSet0 = new TCharHashSet();
      tCharHashSet0.iterator();
      String string0 = tCharHashSet0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      int int0 = 33461;
      TCharHashSet tCharHashSet1 = new TCharHashSet(int0);
      tCharHashSet1.compact();
      tCharHashSet1.size();
      assertEquals(3, tCharHashSet1.capacity());
      
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: {}:%7B%7D#%7B%7D
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-1133);
      char[] charArray0 = new char[10];
      char char0 = 'j';
      charArray0[0] = char0;
      char char1 = '>';
      charArray0[1] = char1;
      char char2 = ';';
      charArray0[2] = char2;
      char char3 = 'E';
      charArray0[3] = char3;
      char char4 = 'n';
      charArray0[4] = char4;
      char char5 = 'h';
      charArray0[5] = char5;
      char char6 = ' ';
      charArray0[6] = char6;
      char char7 = ':';
      charArray0[7] = char7;
      char char8 = 'M';
      charArray0[8] = char8;
      char char9 = 'k';
      charArray0[9] = char9;
      TCharHashSet tCharHashSet0 = new TCharHashSet(charArray0);
      Locale locale0 = Locale.GERMAN;
      Set<Character> set0 = locale0.getExtensionKeys();
      boolean boolean0 = tCharHashSet0.containsAll((Collection<?>) set0);
      assertEquals(true, boolean0);
      assertEquals("{n,>,k,h,;,:,j, ,M,E}", tCharHashSet0.toString());
      
      float float0 = 0.0F;
      char char10 = 'P';
      TCharHashSet tCharHashSet1 = new TCharHashSet(int0, float0, char10);
      int int1 = tCharHashSet1.capacity();
      char char11 = '\"';
      TCharLinkedList tCharLinkedList0 = new TCharLinkedList(char11);
      // Undeclared exception!
      try {
        tCharLinkedList0.subList(int0, int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // begin index can not be < 0
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TCharHashSet tCharHashSet0 = new TCharHashSet();
      int int0 = 981;
      tCharHashSet0.ensureCapacity(int0);
      char[] charArray0 = new char[10];
      char char0 = '&';
      charArray0[0] = char0;
      char char1 = 'q';
      charArray0[1] = char1;
      char char2 = ' ';
      charArray0[2] = char2;
      char char3 = '9';
      charArray0[3] = char3;
      char char4 = 'c';
      charArray0[4] = char4;
      char char5 = 'P';
      charArray0[5] = char5;
      char char6 = '#';
      charArray0[6] = char6;
      char char7 = 'd';
      charArray0[7] = char7;
      char char8 = '4';
      charArray0[8] = char8;
      char char9 = 'J';
      charArray0[9] = char9;
      tCharHashSet0.containsAll(charArray0);
      float float0 = Float.NEGATIVE_INFINITY;
      char char10 = '6';
      int int1 = 168049163;
      float float1 = 0.0F;
      TCharHashSet tCharHashSet1 = new TCharHashSet(int1, float1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      TSynchronizedCharSet tSynchronizedCharSet0 = new TSynchronizedCharSet((TCharSet) tCharHashSet0);
      tCharHashSet0.containsAll((TCharCollection) tSynchronizedCharSet0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<Character> set0 = locale0.getExtensionKeys();
      tCharHashSet0.removeAll((Collection<?>) set0);
      tCharHashSet0.retainAll((Collection<?>) linkedList0);
      tCharHashSet0.remove(char10);
      tCharHashSet0.tempDisableAutoCompaction();
      char[] charArray1 = new char[3];
      charArray1[0] = char10;
      charArray1[1] = char10;
      charArray1[2] = char10;
      tCharHashSet0.toString();
      charArray1[0] = char10;
      charArray1[1] = char10;
      charArray1[0] = char10;
      charArray1[1] = char10;
      char char11 = '{';
      charArray1[2] = char11;
      charArray1[2] = char10;
      tCharHashSet0.containsAll(charArray1);
      int int2 = 1429;
      tCharHashSet0.ensureCapacity(int2);
      TCharHashSet tCharHashSet2 = new TCharHashSet(int0, float0);
      tCharHashSet2.isEmpty();
      TCharHashSet tCharHashSet3 = new TCharHashSet(charArray1);
      boolean boolean0 = tCharHashSet0.isEmpty();
      assertEquals(2879, tCharHashSet0.capacity());
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      TCharHashSet tCharHashSet0 = new TCharHashSet();
      char char0 = '2';
      boolean boolean0 = tCharHashSet0.add(char0);
      assertEquals(false, tCharHashSet0.isEmpty());
      assertEquals(true, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-470);
      TCharArrayList tCharArrayList0 = null;
      try {
        tCharArrayList0 = new TCharArrayList(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TCharHashSet tCharHashSet0 = new TCharHashSet();
      tCharHashSet0.size();
      char[] charArray0 = new char[4];
      char char0 = 'M';
      charArray0[0] = char0;
      char char1 = '{';
      charArray0[1] = char1;
      char char2 = 'g';
      tCharHashSet0.retainAll(charArray0);
      charArray0[2] = char2;
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = 's';
      charArray0[0] = char0;
      char char1 = 'v';
      charArray0[1] = char1;
      char char2 = 'c';
      charArray0[2] = char2;
      TCharHashSet tCharHashSet0 = new TCharHashSet(charArray0);
      tCharHashSet0.compact();
      assertEquals(7, tCharHashSet0.capacity());
      assertEquals("{v,s,c}", tCharHashSet0.toString());
  }
}
