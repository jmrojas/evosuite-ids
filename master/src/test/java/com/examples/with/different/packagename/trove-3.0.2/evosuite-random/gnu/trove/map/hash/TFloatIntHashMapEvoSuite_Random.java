/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TIntCollection;
import gnu.trove.map.TFloatIntMap;
import gnu.trove.map.hash.TFloatIntHashMap;
import gnu.trove.procedure.TFloatIntProcedure;
import gnu.trove.procedure.TFloatProcedure;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatIntHashMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = 664.62134F;
      floatArray0[1] = float1;
      float float2 = (-455.18936F);
      floatArray0[2] = float2;
      float float3 = 23.451736F;
      floatArray0[3] = float3;
      float float4 = 0.0F;
      floatArray0[4] = float4;
      float float5 = 0.0F;
      floatArray0[5] = float5;
      float float6 = 0.0F;
      floatArray0[6] = float6;
      int[] intArray0 = new int[7];
      int int0 = 410;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 967;
      intArray0[3] = int3;
      int int4 = (-1);
      intArray0[4] = int4;
      int int5 = 244;
      intArray0[5] = int5;
      int int6 = (-447);
      intArray0[6] = int6;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      assertEquals("{23.451736=967, -455.18936=0, 664.62134=0, 0.0=-447}", tFloatIntHashMap0.toString());
      assertEquals(4, tFloatIntHashMap0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 251;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(int0, int0);
      tFloatIntHashMap0.getNoEntryValue();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      boolean boolean0 = true;
      int int1 = (-1998);
      tFloatIntHashMap0.ensureCapacity(int1);
      PrintStream printStream0 = new PrintStream((OutputStream) byteArrayOutputStream0, boolean0);
      String string0 = "{";
      PrintStream printStream1 = null;
      try {
        printStream1 = new PrintStream((OutputStream) printStream0, boolean0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // {
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 0;
      int int1 = (-281);
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(int0, int0, int0, int1);
      TIntCollection tIntCollection0 = tFloatIntHashMap0.valueCollection();
      assertEquals(-281, tIntCollection0.getNoEntryValue());
  }

  @Test
  public void test3()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = 0.5F;
      floatArray0[0] = float0;
      float float1 = Float.POSITIVE_INFINITY;
      floatArray0[1] = float1;
      float float2 = 0.0F;
      floatArray0[2] = float2;
      float float3 = (-1.0F);
      floatArray0[3] = float3;
      float float4 = 0.0F;
      floatArray0[4] = float4;
      float float5 = 298.65674F;
      floatArray0[5] = float5;
      float float6 = 1.0F;
      floatArray0[6] = float6;
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 16729;
      intArray0[1] = int1;
      int int2 = 221;
      intArray0[2] = int2;
      int int3 = (-1415);
      intArray0[3] = int3;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap();
      tFloatIntHashMap0.putAll((TFloatIntMap) tFloatIntHashMap1);
      assertEquals("{0.0=221, -1.0=-1415, 0.5=0, Infinity=16729}", tFloatIntHashMap0.toString());
      
      int int4 = 0;
      TFloatIntHashMap tFloatIntHashMap2 = new TFloatIntHashMap(int4, int4, int4, int4);
      TFloatIntHashMap tFloatIntHashMap3 = null;
      try {
        tFloatIntHashMap3 = new TFloatIntHashMap((TFloatIntMap) tFloatIntHashMap2);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float float0 = 10.0F;
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      float float2 = (-1474.2484F);
      floatArray0[2] = float2;
      float float3 = 83.67062F;
      floatArray0[3] = float3;
      float float4 = 10.0F;
      int int0 = 0;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(int0);
      int[] intArray0 = new int[9];
      intArray0[0] = int0;
      intArray0[1] = int0;
      int int1 = (-815);
      intArray0[2] = int1;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = int0;
      intArray0[8] = int0;
      int[] intArray1 = tFloatIntHashMap0.values(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      
      floatArray0[4] = float4;
      float float5 = 1646.6522F;
      floatArray0[5] = float5;
      int[] intArray2 = new int[4];
      int int2 = 0;
      intArray2[0] = int2;
      int int3 = (-1);
      intArray2[1] = int3;
      int int4 = 12203;
      intArray2[2] = int4;
      int int5 = (-192);
      intArray2[3] = int5;
      TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap(floatArray0, intArray2);
      tFloatIntHashMap1.keySet();
      int int6 = 2015;
      float float6 = 0.0F;
      TFloatIntHashMap tFloatIntHashMap2 = new TFloatIntHashMap(int6, float6);
      TFloatIntProcedure tFloatIntProcedure0 = null;
      // Undeclared exception!
      try {
        tFloatIntHashMap1.forEachEntry(tFloatIntProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 61;
      float float0 = 1.0F;
      int int1 = (-887);
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap();
      TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap(int0, float0, (float) int0, int1);
      int int2 = tFloatIntHashMap1.hashCode();
      int[] intArray0 = new int[10];
      intArray0[0] = int0;
      intArray0[1] = int2;
      assertEquals(0, intArray0[1]);
      
      intArray0[2] = int1;
      intArray0[3] = int0;
      intArray0[4] = int1;
      intArray0[5] = int1;
      int int3 = 1090;
      intArray0[6] = int3;
      intArray0[7] = int0;
      intArray0[8] = int0;
      intArray0[9] = int1;
      int[] intArray1 = tFloatIntHashMap1.values(intArray0);
      assertEquals(67, tFloatIntHashMap1.capacity());
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-1472);
      float float0 = 589.6547F;
      int int1 = 0;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(int1, int1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tFloatIntHashMap0._states);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 1297;
      float float0 = 10.0F;
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = float0;
      floatArray0[3] = (float) int0;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      floatArray0[7] = (float) int0;
      floatArray0[8] = (float) int0;
      floatArray0[9] = float0;
      int int1 = (-1419);
      float float1 = 0.0F;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(int1, float1);
      TFloatIntHashMap tFloatIntHashMap1 = null;
      try {
        tFloatIntHashMap1 = new TFloatIntHashMap((TFloatIntMap) tFloatIntHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = (-1431.1937F);
      floatArray0[0] = float0;
      float float1 = 1370.9149F;
      floatArray0[1] = float1;
      float float2 = 1003.99023F;
      floatArray0[2] = float2;
      float float3 = (-1032.0703F);
      floatArray0[3] = float3;
      float float4 = 277.53937F;
      floatArray0[4] = float4;
      float float5 = 0.0F;
      floatArray0[5] = float5;
      float float6 = (-759.81165F);
      floatArray0[6] = float6;
      float float7 = 874.1786F;
      floatArray0[7] = float7;
      int[] intArray0 = new int[10];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = (-515);
      intArray0[1] = int1;
      int int2 = (-1034);
      intArray0[2] = int2;
      int int3 = 411527;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = 2141977;
      intArray0[5] = int5;
      int int6 = 0;
      intArray0[6] = int6;
      int int7 = 1455;
      intArray0[7] = int7;
      int int8 = 1577;
      intArray0[8] = int8;
      int int9 = 727;
      intArray0[9] = int9;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      tFloatIntHashMap0.tempDisableAutoCompaction();
      assertEquals("{277.53937=0, -1431.1937=0, 1370.9149=-515, -1032.0703=411527, 874.1786=1455, -759.81165=0, 1003.99023=-1034, 0.0=2141977}", tFloatIntHashMap0.toString());
      assertEquals(false, tFloatIntHashMap0.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = 1652.7367F;
      floatArray0[1] = float1;
      float float2 = 766.60803F;
      floatArray0[2] = float2;
      float float3 = 1.0F;
      floatArray0[3] = float3;
      float float4 = (-1828.7461F);
      floatArray0[4] = float4;
      int[] intArray0 = new int[4];
      int int0 = 685;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      float float5 = (-1.0F);
      int int4 = 1168;
      int int5 = 0;
      int int6 = tFloatIntHashMap0.adjustOrPutValue(float5, int4, int5);
      assertEquals("{1.0=0, -1.0=0, 1652.7367=0, 766.60803=0, 0.0=685}", tFloatIntHashMap0.toString());
      assertEquals(0, int6);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-1154);
      int int1 = 1035;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(int0, int0, int0, int1);
      tFloatIntHashMap0.toString();
      tFloatIntHashMap0.clear();
      String string0 = "";
      File file0 = new File(string0);
      File file1 = new File(file0, string0);
      String string1 = file1.getParent();
      URI uRI0 = null;
      try {
        uRI0 = new URI(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 188;
      float float0 = (-1282.1561F);
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(int0, float0);
      tFloatIntHashMap0.iterator();
      TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap(int0, int0, int0, int0);
      tFloatIntHashMap1.getNoEntryKey();
      int int1 = (-1318);
      float float1 = 0.0F;
      float float2 = 1.0F;
      TFloatIntHashMap tFloatIntHashMap2 = new TFloatIntHashMap(int1, float1, float2, int1);
      int[] intArray0 = tFloatIntHashMap2.values();
      assertNotNull(intArray0);
      
      float float3 = 0.0F;
      tFloatIntHashMap2.get(float3);
      TFloatIntHashMap tFloatIntHashMap3 = new TFloatIntHashMap(int1);
      float float4 = 0.0F;
      tFloatIntHashMap2.getAutoCompactionFactor();
      int int2 = tFloatIntHashMap3.putIfAbsent(float4, int1);
      assertEquals(1, tFloatIntHashMap3.size());
      assertEquals(0, int2);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-1620);
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(int0);
      float float0 = 2041.7523F;
      int int1 = tFloatIntHashMap0.remove(float0);
      assertEquals(0, int1);
      assertEquals(0, tFloatIntHashMap0.size());
  }

  @Test
  public void test13()  throws Throwable  {
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap();
      float float0 = 0.0F;
      int int0 = 1;
      int int1 = 548348231;
      int int2 = tFloatIntHashMap0.adjustOrPutValue(float0, int0, int1);
      assertEquals("{0.0=548348231}", tFloatIntHashMap0.toString());
      assertEquals(548348231, int2);
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 1891;
          int int1 = (-1712);
          TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(int0, int0, int0, int1);
          tFloatIntHashMap0.valueCollection();
          int int2 = 431;
          TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap(int2);
          int int3 = (-392);
          String string0 = "XO?s;y#o59(x";
          boolean boolean0 = false;
          float float0 = 0.0F;
          tFloatIntHashMap1.contains(float0);
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0, boolean0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"XO?s;y#o59(x\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:136)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      int[] intArray0 = new int[9];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = (-159);
      intArray0[1] = int1;
      int int2 = 1795;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = (-571);
      intArray0[4] = int4;
      int int5 = (-1);
      intArray0[5] = int5;
      int int6 = 0;
      intArray0[6] = int6;
      int int7 = 692;
      intArray0[7] = int7;
      int int8 = 0;
      intArray0[8] = int8;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      int int9 = tFloatIntHashMap0.get((float) int3);
      assertEquals(23, tFloatIntHashMap0.capacity());
      assertEquals("{0.0=0}", tFloatIntHashMap0.toString());
      assertEquals(1, tFloatIntHashMap0.size());
      assertEquals(0, int9);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 359;
      float float0 = 1.0F;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(int0, float0);
      TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap((TFloatIntMap) tFloatIntHashMap0);
      TFloatProcedure tFloatProcedure0 = null;
      tFloatIntHashMap1.forEach(tFloatProcedure0);
      int int1 = 236;
      TFloatIntHashMap tFloatIntHashMap2 = new TFloatIntHashMap(int1, int1);
      float float1 = 0.0F;
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      String string0 = "begin index can not be < 0";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 5: begin index can not be < 0
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap();
      Locale locale0 = Locale.getDefault();
      String string0 = locale0.getVariant();
      tFloatIntHashMap0.equals((Object) string0);
      int int0 = (-1);
      TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap(int0);
      tFloatIntHashMap1.keys();
      String string1 = "I|<@{^f$b[";
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(string1, string1);
      abstractMap_SimpleEntry0.setValue(string1);
      TFloatIntHashMap tFloatIntHashMap2 = new TFloatIntHashMap((TFloatIntMap) tFloatIntHashMap1);
      int int1 = tFloatIntHashMap1.size();
      tFloatIntHashMap1.compact();
      float float0 = (-1690.9875F);
      int int2 = (-913);
      tFloatIntHashMap1.adjustOrPutValue(float0, int1, int2);
      String string2 = tFloatIntHashMap2.toString();
      assertEquals(1, tFloatIntHashMap1.size());
      assertEquals("{}", string2);
  }
}
