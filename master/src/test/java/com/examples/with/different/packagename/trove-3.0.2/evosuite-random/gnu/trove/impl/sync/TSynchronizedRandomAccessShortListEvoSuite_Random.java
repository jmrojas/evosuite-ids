/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedRandomAccessShortList;
import gnu.trove.impl.sync.TSynchronizedShortList;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessShortList;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortList;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortSet;
import gnu.trove.list.TShortList;
import gnu.trove.list.array.TShortArrayList;
import gnu.trove.list.linked.TShortLinkedList;
import gnu.trove.procedure.TShortProcedure;
import gnu.trove.set.TShortSet;
import gnu.trove.set.hash.TShortHashSet;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedRandomAccessShortListEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short) (-212);
      shortArray0[0] = short0;
      short short1 = (short) (-1001);
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short) (-497);
      shortArray0[6] = short6;
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
      int int0 = 0;
      int int1 = 0;
      tSynchronizedRandomAccessShortList0.subList(int0, int1);
      String string0 = "";
      URI uRI0 = URI.create(string0);
      File file0 = null;
      try {
        file0 = new File(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)578;
      shortArray0[1] = short1;
      short short2 = (short) (-1331);
      TShortList tShortList0 = null;
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = null;
      try {
        tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList(tShortList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList1 = (TSynchronizedRandomAccessShortList)tSynchronizedRandomAccessShortList0.mutex;
      int int0 = (-1);
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessShortList0.get(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short) (-1);
      shortArray0[1] = short1;
      short short2 = (short) (-1);
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short) (-569);
      shortArray0[4] = short4;
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortArrayList0);
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tUnmodifiableRandomAccessShortList0);
      int int0 = (-860);
      // Undeclared exception!
      try {
        tUnmodifiableShortList0.subList((int) shortArray0[3], int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // end index -860 greater than begin index 0
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortArrayList0);
      String string0 = "q";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: q://qq#q
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      int int0 = 1267;
      short[] shortArray0 = new short[8];
      short short0 = (short) (-1702);
      shortArray0[0] = short0;
      short short1 = (short) (-1);
      shortArray0[1] = short1;
      short short2 = (short)170;
      shortArray0[0] = short1;
      shortArray0[1] = short0;
      shortArray0[2] = short1;
      shortArray0[3] = short1;
      shortArray0[4] = short2;
      shortArray0[5] = short0;
      shortArray0[6] = short1;
      shortArray0[7] = short1;
      shortArray0[2] = short2;
      short short3 = (short) (-1271);
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)1612;
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = Locale.ENGLISH;
      String string0 = locale0.getDisplayLanguage(locale1);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortLinkedList0, (Object) string0);
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessShortList0.set((int) short5, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // at offset 0
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      short short0 = (short) (-1);
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList(short0);
      Object object0 = null;
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortLinkedList0, object0);
      short[] shortArray0 = new short[8];
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      shortArray0[7] = short0;
      int int0 = (-499);
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessShortList0.toArray(shortArray0, (int) shortArray0[7], int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      short short0 = (short) (-1);
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList(short0);
      TShortHashSet tShortHashSet0 = new TShortHashSet();
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      String string0 = tUnmodifiableShortSet0.toString();
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortLinkedList0, (Object) string0);
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tSynchronizedShortList0);
      File file0 = new File(string0);
      String string1 = file0.getParent();
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tUnmodifiableRandomAccessShortList0, (Object) string1);
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessShortList0.set((int) short0, tShortHashSet0._set);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short) (-2032);
      shortArray0[1] = short1;
      short short2 = (short)1046;
      shortArray0[2] = short2;
      short short3 = (short)190;
      shortArray0[3] = short3;
      short short4 = (short)1;
      shortArray0[4] = short4;
      short short5 = (short)1306;
      shortArray0[5] = short5;
      short short6 = (short) (-116);
      shortArray0[6] = short6;
      short short7 = (short)0;
      shortArray0[7] = short7;
      short short8 = (short)932;
      shortArray0[8] = short8;
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
      boolean boolean0 = tSynchronizedRandomAccessShortList0.isEmpty();
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      TShortList tShortList0 = null;
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = null;
      try {
        tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList(tShortList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)1636;
      shortArray0[1] = short1;
      short short2 = (short)191;
      shortArray0[2] = short2;
      short short3 = (short)120;
      shortArray0[3] = short3;
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList((TShortList) tShortArrayList0);
      int int0 = 1437;
      // Undeclared exception!
      try {
        tShortLinkedList0.subList(int0, (int) short3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // begin index 1437 greater than end index 120
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortLinkedList0);
      int int0 = 0;
      int int1 = 0;
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList1 = (TUnmodifiableRandomAccessShortList)tUnmodifiableRandomAccessShortList0.subList(int0, int1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = byteArrayOutputStream0.toString();
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tUnmodifiableRandomAccessShortList1, (Object) string0);
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList2 = (TUnmodifiableRandomAccessShortList)tSynchronizedShortList0.list;
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tUnmodifiableRandomAccessShortList2);
      short[] shortArray0 = new short[10];
      short short0 = (short)1;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)6421;
      shortArray0[2] = short2;
      short short3 = (short) (-1);
      shortArray0[3] = short3;
      short short4 = (short)326;
      shortArray0[4] = short4;
      short short5 = (short)679;
      shortArray0[5] = short5;
      short short6 = (short) (-1536);
      shortArray0[6] = short6;
      short short7 = (short) (-1040);
      shortArray0[7] = short7;
      short short8 = (short)1;
      shortArray0[8] = short8;
      short short9 = (short)133;
      shortArray0[9] = short9;
      int int2 = (-1469);
      int int3 = 0;
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessShortList0.add(shortArray0, int2, int3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short) (-1077);
      shortArray0[0] = short0;
      short short1 = (short)1782;
      shortArray0[1] = short1;
      short short2 = (short)103;
      shortArray0[2] = short2;
      short short3 = (short)238;
      shortArray0[3] = short3;
      short short4 = (short) (-1);
      shortArray0[4] = short4;
      short short5 = (short)223;
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
      TShortProcedure tShortProcedure0 = null;
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessShortList0.grep(tShortProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      TShortList tShortList0 = null;
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = null;
      try {
        tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList(tShortList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short) (-1005);
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short) (-1);
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short) (-1010);
      shortArray0[4] = short4;
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
      tSynchronizedRandomAccessShortList0.sort();
      assertEquals(5, tSynchronizedRandomAccessShortList0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      short short0 = (short)30;
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList(short0);
      TShortLinkedList tShortLinkedList1 = new TShortLinkedList((TShortList) tShortLinkedList0);
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortLinkedList1);
      TShortProcedure tShortProcedure0 = null;
      TShortLinkedList tShortLinkedList2 = (TShortLinkedList)tUnmodifiableShortList0.inverseGrep(tShortProcedure0);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortLinkedList2);
      TShortLinkedList tShortLinkedList3 = (TShortLinkedList)tSynchronizedRandomAccessShortList0.list;
      Object object0 = null;
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList1 = new TSynchronizedRandomAccessShortList((TShortList) tShortLinkedList3, object0);
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessShortList1.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      TShortList tShortList0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = "(FuNVImv:3";
      try {
        byteArrayOutputStream0.toString(string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // (FuNVImv:3
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      TShortList tShortList0 = null;
      Object object0 = null;
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList(tShortList0, object0);
      short[] shortArray0 = new short[7];
      int int0 = 1246;
      int int1 = 0;
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessShortList0.toArray(int0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
