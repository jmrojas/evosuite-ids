/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TIntShortMap;
import gnu.trove.map.hash.TIntShortHashMap;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.StreamCorruptedException;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntShortHashMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      tIntShortHashMap0.getNoEntryKey();
      int int0 = 1028;
      TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap(int0);
      TIntShortHashMap tIntShortHashMap2 = new TIntShortHashMap(int0, int0);
      short short0 = (short)0;
      tIntShortHashMap1.ensureCapacity(int0);
      tIntShortHashMap1.putIfAbsent(int0, short0);
      assertEquals("{1028=0}", tIntShortHashMap1.toString());
      assertFalse(tIntShortHashMap1.equals(tIntShortHashMap0));
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-1706);
      float float0 = (-708.2072F);
      short short0 = (short)22;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0, (float) int0, int0, short0);
      tIntShortHashMap0.containsKey(int0);
      tIntShortHashMap0.contains((int) short0);
      TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap();
      short short1 = (short)116;
      tIntShortHashMap1.containsValue(short1);
      short[] shortArray0 = new short[6];
      shortArray0[0] = short1;
      short short2 = (short)0;
      shortArray0[1] = short2;
      shortArray0[2] = short1;
      shortArray0[3] = short1;
      shortArray0[4] = short1;
      shortArray0[5] = short1;
      short[] shortArray1 = tIntShortHashMap0.values(shortArray0);
      assertNotNull(shortArray1);
      
      tIntShortHashMap1.isEmpty();
      int int1 = 12;
      short short3 = (short)0;
      float float1 = 1625.243F;
      TIntShortHashMap tIntShortHashMap2 = new TIntShortHashMap((int) short3, float1);
      TIntShortHashMap tIntShortHashMap3 = new TIntShortHashMap(int0, float0, int1, short3);
      tIntShortHashMap3.size();
      int int2 = 1104;
      int int3 = 71741;
      tIntShortHashMap3.get(int3);
      float float2 = 992.3821F;
      TIntShortHashMap tIntShortHashMap4 = new TIntShortHashMap();
      short short4 = (short) (-1840);
      TIntShortHashMap tIntShortHashMap5 = new TIntShortHashMap(int2, float2, int2, short4);
      tIntShortHashMap3.capacity();
      boolean boolean0 = true;
      tIntShortHashMap4.reenableAutoCompaction(boolean0);
      tIntShortHashMap5.getNoEntryValue();
      int int4 = 649;
      short short5 = (short)0;
      tIntShortHashMap4.putIfAbsent(int4, short5);
      assertEquals("{649=0}", tIntShortHashMap4.toString());
      assertFalse(tIntShortHashMap4.equals(tIntShortHashMap3));
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-1004);
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0);
      tIntShortHashMap0.valueCollection();
      int int1 = (-1);
      float float0 = 1130.7347F;
      TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap(int1, float0);
      Object object0 = null;
      tIntShortHashMap1.equals(object0);
      int int2 = 0;
      TIntShortHashMap tIntShortHashMap2 = new TIntShortHashMap(int2);
      assertNotSame(tIntShortHashMap2, tIntShortHashMap0);
  }

  @Test
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 835;
      intArray0[0] = int0;
      int int1 = 1695;
      intArray0[1] = int1;
      int int2 = (-1909);
      intArray0[2] = int2;
      int int3 = 740;
      intArray0[3] = int3;
      int int4 = (-32768);
      intArray0[4] = int4;
      short[] shortArray0 = new short[10];
      short short0 = (short) (-1723);
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)1548;
      shortArray0[2] = short2;
      short short3 = (short) (-1);
      shortArray0[3] = short3;
      short short4 = (short)2729;
      shortArray0[4] = short4;
      short short5 = (short)986;
      shortArray0[5] = short5;
      short short6 = (short)1183;
      shortArray0[6] = short6;
      short short7 = (short)206;
      shortArray0[7] = short7;
      short short8 = (short) (-4219);
      shortArray0[8] = short8;
      short short9 = (short)0;
      shortArray0[9] = short9;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(intArray0, shortArray0);
      TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap((TIntShortMap) tIntShortHashMap0);
      int[] intArray1 = tIntShortHashMap1._set;
      assertEquals("{1695=0, -32768=2729, 835=-1723, -1909=1548, 740=-1}", tIntShortHashMap0.toString());
      assertEquals(0, tIntShortHashMap1.getNoEntryKey());
      assertEquals(false, tIntShortHashMap0.isEmpty());
      assertEquals("{1695=0, -32768=2729, 835=-1723, -1909=1548, 740=-1}", tIntShortHashMap1.toString());
      assertTrue(tIntShortHashMap1.equals(tIntShortHashMap0));
  }

  @Test
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = (-1);
      intArray0[0] = int0;
      int int1 = (-1175);
      intArray0[1] = int1;
      int int2 = 1978;
      intArray0[2] = int2;
      int int3 = 205;
      intArray0[3] = int3;
      int int4 = (-1674);
      intArray0[4] = int4;
      int int5 = (-71);
      intArray0[5] = int5;
      int int6 = 32;
      intArray0[6] = int6;
      int int7 = (-1953);
      intArray0[7] = int7;
      short[] shortArray0 = new short[5];
      short short0 = (short)1155;
      shortArray0[0] = short0;
      short short1 = (short)399;
      shortArray0[1] = short1;
      short short2 = (short) (-100);
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(intArray0, shortArray0);
      assertEquals("{-1=1155, -1175=399, 1978=-100, -1674=0, 205=0}", tIntShortHashMap0.toString());
      
      TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap();
      tIntShortHashMap1.valueCollection();
      int int8 = 1194;
      float float0 = (-1.0F);
      int int9 = 1040;
      TIntShortHashMap tIntShortHashMap2 = new TIntShortHashMap(int9);
      String string0 = "JM{461+-.|m";
      tIntShortHashMap2.get(int8);
      int[] intArray1 = tIntShortHashMap2.keys();
      assertNotNull(intArray1);
      
      AbstractMap.SimpleImmutableEntry<TIntShortHashMap, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<TIntShortHashMap, String>(tIntShortHashMap2, string0);
      int int10 = abstractMap_SimpleImmutableEntry0.hashCode();
      assertEquals((-2017578027), int10);
      
      short short5 = (short)0;
      TIntShortHashMap tIntShortHashMap3 = new TIntShortHashMap(int8, float0, int8, short5);
      int int11 = 1696;
      TIntShortHashMap tIntShortHashMap4 = new TIntShortHashMap(int11, int8);
      tIntShortHashMap3.setAutoCompactionFactor((float) int8);
      assertEquals(3, tIntShortHashMap3.capacity());
      assertFalse(tIntShortHashMap3.equals(tIntShortHashMap0));
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 0;
      float float0 = (-1.0F);
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      tIntShortHashMap0.isEmpty();
      float float1 = (-109.997154F);
      TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap(int0, float1);
      int int1 = 1111;
      tIntShortHashMap0.valueCollection();
      tIntShortHashMap1.valueCollection();
      tIntShortHashMap1.increment(int1);
      short short0 = (short) (-1255);
      TIntShortHashMap tIntShortHashMap2 = new TIntShortHashMap(int0, float0, int1, short0);
      int int2 = 1977;
      String string0 = "qDNrVdNS%\"ucTj>U`{";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // qDNrVdNS%\"ucTj>U`{
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      tIntShortHashMap0.isEmpty();
      short short0 = (short)485;
      tIntShortHashMap0.containsValue(short0);
      int int0 = (-1204);
      tIntShortHashMap0.contains(int0);
      assertEquals(23, tIntShortHashMap0.capacity());
      
      int int1 = 42012281;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-1);
      byteArray0[0] = byte0;
      byte byte1 = (byte)57;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-7);
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      byte byte4 = (byte)9;
      byteArray0[4] = byte4;
      byte byte5 = (byte)118;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      tIntShortHashMap0._states = byteArray0;
      // Undeclared exception!
      try {
        tIntShortHashMap0.remove(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 646;
      float float0 = 10.0F;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0, float0);
      short[] shortArray0 = tIntShortHashMap0.values();
      assertNotNull(shortArray0);
      assertEquals(67, tIntShortHashMap0.capacity());
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 41017;
          float float0 = 0.0F;
          float float1 = 353.22403F;
          short short0 = (short) (-1015);
          TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0, float1, int0, short0);
          tIntShortHashMap0.size();
          int int1 = 2042;
          String string0 = "\na.equals(b) =";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-1);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)16;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-109);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-55);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-29);
      byteArray0[5] = byte5;
      tIntShortHashMap0._states = byteArray0;
      int[] intArray0 = new int[1];
      int int1 = 1032;
      int int2 = 0;
      int int3 = 1;
      short short0 = (short)0;
      TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap(int2, (float) int2, int3, short0);
      tIntShortHashMap1.values();
      intArray0[0] = int1;
      tIntShortHashMap1.getAutoCompactionFactor();
      short[] shortArray0 = new short[1];
      short short1 = (short)220;
      shortArray0[0] = short1;
      TIntShortHashMap tIntShortHashMap2 = new TIntShortHashMap(intArray0, shortArray0);
      tIntShortHashMap1.size();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = (-695);
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 353;
      intArray0[2] = int2;
      int int3 = (-141);
      intArray0[3] = int3;
      int int4 = 1;
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      int int6 = 0;
      intArray0[6] = int6;
      short[] shortArray0 = new short[4];
      short short0 = (short) (-1211);
      shortArray0[0] = short0;
      short short1 = (short)680;
      shortArray0[1] = short1;
      short short2 = (short)16301;
      shortArray0[2] = short2;
      short short3 = (short)65;
      shortArray0[3] = short3;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(intArray0, shortArray0);
      assertEquals(false, tIntShortHashMap0.isEmpty());
      assertEquals("{353=16301, -695=-1211, -141=65, 0=680}", tIntShortHashMap0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      int int0 = 98;
      Integer integer0 = new Integer(int0);
      String string0 = integer0.toString();
      boolean boolean0 = tIntShortHashMap0.equals((Object) string0);
      assertEquals(false, boolean0);
      assertEquals(23, tIntShortHashMap0.capacity());
  }

  @Test
  public void test12()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap((TIntShortMap) tIntShortHashMap0);
      int int0 = 1002331963;
      short short0 = (short)141;
      int int1 = (-1);
      tIntShortHashMap0.putIfAbsent(int1, short0);
      short short1 = (short)3203;
      tIntShortHashMap1.adjustOrPutValue(int0, short0, short1);
      short[] shortArray0 = new short[6];
      shortArray0[0] = short0;
      short short2 = (short)169;
      shortArray0[1] = short2;
      short short3 = (short)0;
      shortArray0[2] = short3;
      shortArray0[3] = short0;
      short short4 = (short)0;
      shortArray0[4] = short4;
      shortArray0[5] = short0;
      tIntShortHashMap1.values(shortArray0);
      short short5 = (short)438;
      tIntShortHashMap0.containsValue(short5);
      tIntShortHashMap0.iterator();
      InputStream inputStream0 = null;
      tIntShortHashMap0.capacity();
      tIntShortHashMap1.getAutoCompactionFactor();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      int int0 = 0;
      tIntShortHashMap0.contains(int0);
      tIntShortHashMap0.contains(int0);
      TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap(int0);
      tIntShortHashMap0.putAll((TIntShortMap) tIntShortHashMap1);
      String string0 = "";
      URI uRI0 = new URI(string0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tIntShortHashMap0._states);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) byteArrayInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) bufferedInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 00000000
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1968;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0);
      short short0 = (short)0;
      short short1 = (short)1592;
      boolean boolean0 = tIntShortHashMap0.containsValue(short0);
      tIntShortHashMap0.reenableAutoCompaction(boolean0);
      tIntShortHashMap0.adjustOrPutValue(int0, short0, short1);
      TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap();
      int[] intArray0 = tIntShortHashMap1._set;
      int int1 = 0;
      tIntShortHashMap1.isEmpty();
      tIntShortHashMap1.toString();
      short short2 = (short)61;
      int int2 = (-528);
      tIntShortHashMap1.get(int1);
      short short3 = (short) (-1035);
      short short4 = tIntShortHashMap0.put(int2, short3);
      TIntShortHashMap tIntShortHashMap2 = new TIntShortHashMap(int0, (float) int0, int1, short2);
      TIntShortHashMap tIntShortHashMap3 = new TIntShortHashMap((TIntShortMap) tIntShortHashMap2);
      tIntShortHashMap2.size();
      float float0 = 951.48254F;
      tIntShortHashMap3.putAll((TIntShortMap) tIntShortHashMap2);
      tIntShortHashMap0.setAutoCompactionFactor(float0);
      tIntShortHashMap3.getNoEntryKey();
      int int3 = 84024581;
      short short5 = (short)1502;
      tIntShortHashMap3.adjustValue(int3, short5);
      short short6 = tIntShortHashMap3.put(int0, short2);
      tIntShortHashMap2.adjustValue((int) short2, short5);
      tIntShortHashMap0.isEmpty();
      short short7 = (short)0;
      tIntShortHashMap0.adjustOrPutValue((int) short4, short6, short7);
      assertEquals(false, tIntShortHashMap0.isEmpty());
      
      tIntShortHashMap2.putIfAbsent((int) short6, short2);
      ObjectInput objectInput0 = null;
      // Undeclared exception!
      try {
        tIntShortHashMap3.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      int int0 = 0;
      short short0 = (short) (-37);
      boolean boolean0 = tIntShortHashMap0.adjustValue(int0, short0);
      assertEquals(false, boolean0);
      assertEquals(23, tIntShortHashMap0.capacity());
  }

  @Test
  public void test16()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      int int0 = 1447;
      short short0 = (short)0;
      tIntShortHashMap0.put(int0, short0);
      TIntShortMap tIntShortMap0 = null;
      // Undeclared exception!
      try {
        tIntShortHashMap0.putAll(tIntShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 1320;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0);
      short short0 = (short)1719;
      short short1 = (short)664;
      short short2 = tIntShortHashMap0.adjustOrPutValue(int0, short0, short1);
      assertEquals(1, tIntShortHashMap0.size());
      assertEquals((short)664, short2);
  }
}
