/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TByteDoubleMap;
import gnu.trove.map.hash.TByteDoubleHashMap;
import gnu.trove.procedure.TByteProcedure;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteDoubleHashEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-94);
      byteArray0[1] = byte1;
      byte byte2 = (byte)74;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-64);
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      double[] doubleArray0 = new double[7];
      double double0 = (-743.6788847754619);
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) byte1;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) byteArray0[4];
      double double1 = 318.63721111823435;
      doubleArray0[6] = double1;
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(byteArray0, doubleArray0);
      tByteDoubleHashMap0.getAutoCompactionFactor();
      int int1 = (-1013);
      TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap(int1);
      byte byte7 = (byte) (-83);
      double double2 = 1019.2963107083589;
      tByteDoubleHashMap1.capacity();
      tByteDoubleHashMap1.put(byte7, double2);
      assertEquals("{-83=1019.2963107083589}", tByteDoubleHashMap1.toString());
      
      TByteDoubleHashMap tByteDoubleHashMap2 = new TByteDoubleHashMap(int0);
      byte byte8 = (byte)0;
      boolean boolean0 = tByteDoubleHashMap2.increment(byte8);
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 56;
      byte byte0 = (byte)123;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byte byte1 = (byte)76;
      int int1 = 0;
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int1, (float) byte1);
      int int2 = 1256;
      TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap(int2, int1);
      String string0 = tByteDoubleHashMap0.toString();
      assertNotNull(string0);
      
      tByteDoubleHashMap0.putAll((TByteDoubleMap) tByteDoubleHashMap1);
      byteArray0[4] = byte1;
      byteArray0[5] = byte0;
      byteArray0[6] = byte0;
      byteArray0[7] = byte0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) byteArray0[7];
      doubleArray0[1] = (double) byteArray0[3];
      doubleArray0[2] = (double) byteArray0[3];
      doubleArray0[3] = (double) byteArray0[4];
      doubleArray0[0] = (double) byteArray0[4];
      doubleArray0[1] = (double) byteArray0[3];
      doubleArray0[2] = (double) byteArray0[6];
      doubleArray0[3] = (double) byteArray0[7];
      TByteDoubleHashMap tByteDoubleHashMap2 = new TByteDoubleHashMap(byteArray0, doubleArray0);
      assertEquals(17, tByteDoubleHashMap2.capacity());
      
      tByteDoubleHashMap0.getNoEntryKey();
      tByteDoubleHashMap2.compact();
      double double0 = 0.0;
      TByteDoubleHashMap tByteDoubleHashMap3 = new TByteDoubleHashMap(int0, (float) int0, byte0, double0);
      tByteDoubleHashMap3.containsValue(double0);
      assertFalse(tByteDoubleHashMap3.equals(tByteDoubleHashMap2));
  }

//   @Test
//   public void test2()  throws Throwable  {
//       byte[] byteArray0 = new byte[3];
//       byte byte0 = (byte) (-1);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte) (-121);
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)0;
//       byteArray0[2] = byte2;
//       double[] doubleArray0 = new double[10];
//       double double0 = 0.0;
//       doubleArray0[0] = double0;
//       doubleArray0[1] = (double) byte0;
//       doubleArray0[2] = (double) byte1;
//       doubleArray0[3] = (double) byteArray0[0];
//       doubleArray0[4] = (double) byte2;
//       doubleArray0[5] = (double) byte1;
//       doubleArray0[6] = (double) byte1;
//       double double1 = (-1488.6511303842678);
//       doubleArray0[7] = double1;
//       doubleArray0[8] = (double) byteArray0[1];
//       doubleArray0[9] = (double) byteArray0[2];
//       TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(byteArray0, doubleArray0);
//       tByteDoubleHashMap0.getAutoCompactionFactor();
//       assertEquals(3, tByteDoubleHashMap0.size());
//       assertEquals("{0=-121.0, -1=0.0, -121=-1.0}", tByteDoubleHashMap0.toString());
//       assertEquals(0, tByteDoubleHashMap0.getNoEntryKey());
//       assertEquals(0.0, tByteDoubleHashMap0.getNoEntryValue(), 0.01D);
//   }

//   @Test
//   public void test3()  throws Throwable  {
//       byte[] byteArray0 = new byte[7];
//       byte byte0 = (byte)0;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte) (-115);
//       byteArray0[1] = byte1;
//       byte byte2 = (byte) (-3);
//       byteArray0[2] = byte2;
//       byte byte3 = (byte) (-55);
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)0;
//       byteArray0[4] = byte4;
//       byte byte5 = (byte)83;
//       byteArray0[5] = byte5;
//       byte byte6 = (byte) (-120);
//       byteArray0[6] = byte6;
//       double[] doubleArray0 = new double[8];
//       doubleArray0[0] = (double) byte6;
//       doubleArray0[1] = (double) byte3;
//       double double0 = (-1336.847710509552);
//       doubleArray0[2] = double0;
//       doubleArray0[3] = (double) byte2;
//       double double1 = 0.0;
//       doubleArray0[4] = double1;
//       doubleArray0[5] = (double) byteArray0[0];
//       doubleArray0[6] = (double) byteArray0[1];
//       doubleArray0[7] = (double) byte2;
//       TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(byteArray0, doubleArray0);
//       tByteDoubleHashMap0.getAutoCompactionFactor();
//       assertEquals(0.0, tByteDoubleHashMap0.getNoEntryValue(), 0.01D);
//       assertEquals(0, tByteDoubleHashMap0.getNoEntryKey());
//       assertEquals("{83=0.0, -115=-55.0, -120=-115.0, -3=-1336.847710509552, -55=-3.0, 0=0.0}", tByteDoubleHashMap0.toString());
//       assertEquals(6, tByteDoubleHashMap0.size());
//       
//       int int0 = (-1);
//       TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap(int0, int0);
//       tByteDoubleHashMap1.isEmpty();
//       assertEquals(0.0, tByteDoubleHashMap1.getNoEntryValue(), 0.01D);
//       assertEquals(0, tByteDoubleHashMap1.getNoEntryKey());
//   }

//   @Test
//   public void test4()  throws Throwable  {
//       int int0 = 639;
//       float float0 = 0.0F;
//       TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int0, float0);
//       assertEquals(0.0, tByteDoubleHashMap0.getNoEntryValue(), 0.01D);
//       assertEquals(0, tByteDoubleHashMap0.getNoEntryKey());
//       
//       TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap();
//       assertEquals(23, tByteDoubleHashMap1.capacity());
//       assertEquals(0.0, tByteDoubleHashMap1.getNoEntryValue(), 0.01D);
//       assertEquals(0, tByteDoubleHashMap1.getNoEntryKey());
//   }

//   @Test
//   public void test5()  throws Throwable  {
//       int int0 = 0;
//       byte byte0 = (byte)0;
//       double double0 = 0.0;
//       TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int0, (float) int0, byte0, double0);
//       tByteDoubleHashMap0.compact();
//       assertEquals(0, tByteDoubleHashMap0.getNoEntryKey());
//       assertEquals(0.0, tByteDoubleHashMap0.getNoEntryValue(), 0.01D);
//   }

//   @Test
//   public void test6()  throws Throwable  {
//       int int0 = Integer.MAX_VALUE;
//       byte byte0 = (byte)0;
//       double double0 = (-1550.1922555653327);
//       TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int0, (float) int0, byte0, double0);
//       tByteDoubleHashMap0.size();
//       assertEquals(0, tByteDoubleHashMap0.getNoEntryKey());
//       assertEquals((-1550.1922555653327), tByteDoubleHashMap0.getNoEntryValue(), 0.01D);
//       
//       TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap();
//       TByteDoubleHashMap tByteDoubleHashMap2 = new TByteDoubleHashMap();
//       tByteDoubleHashMap1.putAll((TByteDoubleMap) tByteDoubleHashMap2);
//       assertEquals(0, tByteDoubleHashMap2.getNoEntryKey());
//       assertEquals(0.0, tByteDoubleHashMap2.getNoEntryValue(), 0.01D);
//       assertEquals(23, tByteDoubleHashMap2.capacity());
//       assertEquals(0.0, tByteDoubleHashMap1.getNoEntryValue(), 0.01D);
//   }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-80);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-87);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) byte2;
      doubleArray0[2] = (double) byteArray0[0];
      doubleArray0[3] = (double) byteArray0[2];
      doubleArray0[4] = (double) byteArray0[0];
      doubleArray0[5] = (double) byte0;
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(byteArray0, doubleArray0);
      TByteProcedure tByteProcedure0 = null;
      // Undeclared exception!
      try {
        tByteDoubleHashMap0.forEach(tByteProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test8()  throws Throwable  {
//       int int0 = (-345);
//       float float0 = 0.0F;
//       int int1 = 1102;
//       TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int1);
//       tByteDoubleHashMap0.size();
//       assertEquals(0.0, tByteDoubleHashMap0.getNoEntryValue(), 0.01D);
//       assertEquals(0, tByteDoubleHashMap0.getNoEntryKey());
//       
//       TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap(int0, float0);
//       TByteDoubleHashMap tByteDoubleHashMap2 = null;
//       try {
//         tByteDoubleHashMap2 = new TByteDoubleHashMap((TByteDoubleMap) tByteDoubleHashMap1);
//         fail("Expecting exception: OutOfMemoryError");
//       
//       } catch(OutOfMemoryError e) {
//          //
//          // Java heap space
//          //
//       }
//   }

//   @Test
//   public void test9()  throws Throwable  {
//       int int0 = 0;
//       float float0 = (-1.0F);
//       int int1 = 0;
//       TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int1);
//       TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap((TByteDoubleMap) tByteDoubleHashMap0);
//       tByteDoubleHashMap1.getAutoCompactionFactor();
//       assertEquals(0.0, tByteDoubleHashMap0.getNoEntryValue(), 0.01D);
//       assertEquals(0, tByteDoubleHashMap0.getNoEntryKey());
//       
//       TByteDoubleHashMap tByteDoubleHashMap2 = new TByteDoubleHashMap();
//       tByteDoubleHashMap2.clear();
//       TByteDoubleHashMap tByteDoubleHashMap3 = new TByteDoubleHashMap(int0, float0);
//       byte byte0 = (byte)0;
//       double double0 = tByteDoubleHashMap2.remove(byte0);
//       assertEquals(0.0, double0, 0.01D);
//       
//       int int2 = (-20);
//       tByteDoubleHashMap3.compact();
//       ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tByteDoubleHashMap3._set, int0, int2);
//       String string0 = File.separator;
//       tByteDoubleHashMap2.equals((Object) string0);
//       assertEquals(23, tByteDoubleHashMap2.capacity());
//       assertEquals(0, tByteDoubleHashMap2.getNoEntryKey());
//       
//       ObjectInputStream objectInputStream0 = null;
//       try {
//         objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
//         fail("Expecting exception: EOFException");
//       
//       } catch(EOFException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)15;
      byteArray0[1] = byte1;
      byte byte2 = (byte)1;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-83);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-77);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-1);
      byteArray0[6] = byte6;
      byte byte7 = (byte)46;
      byteArray0[7] = byte7;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) byte4;
      doubleArray0[1] = (double) byte3;
      doubleArray0[2] = (double) byte7;
      doubleArray0[3] = (double) byte1;
      doubleArray0[4] = (double) byte0;
      doubleArray0[5] = (double) byte6;
      doubleArray0[6] = (double) byte7;
      doubleArray0[7] = (double) byteArray0[6];
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(byteArray0, doubleArray0);
      TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap((TByteDoubleMap) tByteDoubleHashMap0);
      tByteDoubleHashMap1.trimToSize();
      assertEquals(17, tByteDoubleHashMap1.capacity());
      assertTrue(tByteDoubleHashMap0.equals(tByteDoubleHashMap1));
  }

  @Test
  public void test11()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap();
      float float0 = 0.0F;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) float0;
      doubleArray0[1] = (double) float0;
      tByteDoubleHashMap0.values(doubleArray0);
      tByteDoubleHashMap0.keySet();
      tByteDoubleHashMap0.getAutoCompactionFactor();
      byte byte0 = (byte)19;
      tByteDoubleHashMap0.clear();
      tByteDoubleHashMap0.trimToSize();
      tByteDoubleHashMap0.get(byte0);
      tByteDoubleHashMap0.setAutoCompactionFactor(float0);
      TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap((TByteDoubleMap) tByteDoubleHashMap0);
      tByteDoubleHashMap0.putAll((TByteDoubleMap) tByteDoubleHashMap1);
      byte[] byteArray0 = new byte[1];
      byte byte1 = (byte)52;
      String string0 = "";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // 
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1;
      float float0 = 0.5F;
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int0, float0);
      byte byte0 = (byte)41;
      double double0 = (-1351.023867451058);
      double double1 = 630.5770274945926;
      double double2 = tByteDoubleHashMap0.adjustOrPutValue(byte0, double0, double1);
      assertEquals(false, tByteDoubleHashMap0.isEmpty());
      assertEquals(630.5770274945926, double2, 0.01D);
  }

//   @Test
//   public void test13()  throws Throwable  {
//       int int0 = 0;
//       TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int0);
//       float float0 = 689.7146F;
//       tByteDoubleHashMap0.setAutoCompactionFactor(float0);
//       int int1 = (-657);
//       float float1 = 1007.8332F;
//       int int2 = Integer.MAX_VALUE;
//       TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap(int2);
//       int int3 = 318;
//       TByteDoubleHashMap tByteDoubleHashMap2 = new TByteDoubleHashMap(int3);
//       tByteDoubleHashMap2.setAutoCompactionFactor((float) int3);
//       assertEquals(0.0, tByteDoubleHashMap2.getNoEntryValue(), 0.01D);
//       assertEquals(673, tByteDoubleHashMap2.capacity());
//       assertEquals(0, tByteDoubleHashMap2.getNoEntryKey());
//       
//       TByteDoubleHashMap tByteDoubleHashMap3 = new TByteDoubleHashMap(int3, int3);
//       tByteDoubleHashMap3.trimToSize();
//       assertEquals(0, tByteDoubleHashMap3.getNoEntryKey());
//       assertEquals(0.0, tByteDoubleHashMap3.getNoEntryValue(), 0.01D);
//       
//       byte byte0 = (byte) (-19);
//       double double0 = 2044.2096986140562;
//       TByteDoubleHashMap tByteDoubleHashMap4 = new TByteDoubleHashMap(int1, float1, byte0, double0);
//       double double1 = tByteDoubleHashMap4.remove(byte0);
//       assertEquals(2044.2096986140562, double1, 0.01D);
//       
//       int int4 = 91;
//       float float2 = 0.0F;
//       double double2 = (-1.0);
//       TByteDoubleHashMap tByteDoubleHashMap5 = new TByteDoubleHashMap(int4, float2, byte0, double2);
//       int int5 = 2030;
//       float float3 = 0.0F;
//       byte byte1 = (byte) (-65);
//       TByteDoubleHashMap tByteDoubleHashMap6 = new TByteDoubleHashMap(int5, float3, byte1, (double) int5);
//       double[] doubleArray0 = tByteDoubleHashMap6.values();
//       assertNotNull(doubleArray0);
//       assertEquals(-65, tByteDoubleHashMap6.getNoEntryKey());
//       assertTrue(tByteDoubleHashMap6.equals(tByteDoubleHashMap4));
//   }

//   @Test
//   public void test14()  throws Throwable  {
//       int int0 = 51;
//       byte[] byteArray0 = new byte[5];
//       byte byte0 = (byte) (-80);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte) (-116);
//       byteArray0[1] = byte1;
//       byte byte2 = (byte) (-1);
//       byteArray0[2] = byte2;
//       byte byte3 = (byte)0;
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)0;
//       byteArray0[4] = byte4;
//       double[] doubleArray0 = new double[10];
//       doubleArray0[0] = (double) byteArray0[1];
//       doubleArray0[1] = (double) byte0;
//       doubleArray0[2] = (double) byteArray0[2];
//       doubleArray0[3] = (double) byteArray0[3];
//       doubleArray0[4] = (double) byteArray0[2];
//       doubleArray0[5] = (double) byte2;
//       doubleArray0[6] = (double) int0;
//       doubleArray0[7] = (double) byte2;
//       doubleArray0[8] = (double) byte0;
//       doubleArray0[9] = (double) byteArray0[4];
//       TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(byteArray0, doubleArray0);
//       tByteDoubleHashMap0.getAutoCompactionFactor();
//       assertEquals(4, tByteDoubleHashMap0.size());
//       assertEquals("{-80=-116.0, -116=-80.0, -1=-1.0, 0=-1.0}", tByteDoubleHashMap0.toString());
//       
//       float float0 = (-1.0F);
//       int int1 = 1668;
//       TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap(int1);
//       TByteDoubleHashMap tByteDoubleHashMap2 = new TByteDoubleHashMap((TByteDoubleMap) tByteDoubleHashMap1);
//       double[] doubleArray1 = new double[3];
//       double double0 = 0.0;
//       doubleArray1[0] = double0;
//       doubleArray1[1] = (double) int0;
//       doubleArray1[2] = (double) int1;
//       double[] doubleArray2 = tByteDoubleHashMap2.values(doubleArray1);
//       assertNotNull(doubleArray2);
//       assertEquals(0, tByteDoubleHashMap1.getNoEntryKey());
//       
//       TByteDoubleHashMap tByteDoubleHashMap3 = new TByteDoubleHashMap(int0, float0);
//       assertEquals(3, tByteDoubleHashMap3.capacity());
//   }

  @Test
  public void test15()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap();
      assertEquals(23, tByteDoubleHashMap0.capacity());
      
      tByteDoubleHashMap0.compact();
      int int0 = 688;
      TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap(int0, int0);
      TByteDoubleHashMap tByteDoubleHashMap2 = new TByteDoubleHashMap();
      tByteDoubleHashMap2.capacity();
      tByteDoubleHashMap2.valueCollection();
      tByteDoubleHashMap1.capacity();
      TByteDoubleHashMap tByteDoubleHashMap3 = new TByteDoubleHashMap();
      tByteDoubleHashMap2.toString();
      tByteDoubleHashMap2.keySet();
      TByteDoubleHashMap tByteDoubleHashMap4 = new TByteDoubleHashMap();
      tByteDoubleHashMap4.iterator();
      tByteDoubleHashMap0.keys(tByteDoubleHashMap2._set);
      tByteDoubleHashMap2.toString();
      tByteDoubleHashMap4.trimToSize();
      boolean boolean0 = false;
      tByteDoubleHashMap2.reenableAutoCompaction(boolean0);
      tByteDoubleHashMap2.capacity();
      tByteDoubleHashMap4.isEmpty();
      byte byte0 = (byte)0;
      boolean boolean1 = tByteDoubleHashMap4.adjustValue(byte0, byte0);
      assertEquals(false, boolean1);
  }

//   @Test
//   public void test16()  throws Throwable  {
//       TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap();
//       int int0 = 544;
//       byte byte0 = (byte)101;
//       boolean boolean0 = false;
//       tByteDoubleHashMap0.reenableAutoCompaction(boolean0);
//       TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap(int0, (float) int0, byte0, (double) int0);
//       tByteDoubleHashMap0.putAll((TByteDoubleMap) tByteDoubleHashMap1);
//       assertEquals(23, tByteDoubleHashMap0.capacity());
//       assertEquals(0, tByteDoubleHashMap0.getNoEntryKey());
//       assertEquals(0.0, tByteDoubleHashMap0.getNoEntryValue(), 0.01D);
//       
//       tByteDoubleHashMap1.setAutoCompactionFactor((float) int0);
//       assertEquals(101, tByteDoubleHashMap1.getNoEntryKey());
//       assertEquals(544.0, tByteDoubleHashMap1.getNoEntryValue(), 0.01D);
//   }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 32;
      float float0 = 0.0F;
      int int1 = 43;
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int1);
      tByteDoubleHashMap0.getAutoCompactionFactor();
      TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap(int0, float0);
      TByteDoubleHashMap tByteDoubleHashMap2 = new TByteDoubleHashMap();
      OutputStream outputStream0 = null;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(outputStream0);
      PrintStream printStream0 = new PrintStream((OutputStream) filterOutputStream0);
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
