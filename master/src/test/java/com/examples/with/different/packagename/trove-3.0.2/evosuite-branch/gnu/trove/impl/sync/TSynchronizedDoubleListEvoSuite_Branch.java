/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TDoubleCollection;
import gnu.trove.function.TDoubleFunction;
import gnu.trove.impl.sync.TSynchronizedDoubleList;
import gnu.trove.impl.sync.TSynchronizedRandomAccessDoubleList;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessDoubleList;
import gnu.trove.list.TDoubleList;
import gnu.trove.list.array.TDoubleArrayList;
import gnu.trove.list.linked.TDoubleLinkedList;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.set.hash.TDoubleHashSet;
import java.util.Random;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedDoubleListEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.min()D: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleList.<init>(Lgnu/trove/list/TDoubleList;)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(33);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessDoubleList0.min();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot find minimum of an empty list
         //
      }
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[D)V: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleList.<init>(Lgnu/trove/list/TDoubleList;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0);
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tUnmodifiableRandomAccessDoubleList0, (Object) tUnmodifiableRandomAccessDoubleList0);
      // Undeclared exception!
      try {
        tSynchronizedDoubleList0.insert(0, doubleArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(D)I: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleArrayList0);
      int int0 = tSynchronizedDoubleList0.binarySearch((-1454.0957406929797));
      assertEquals((-1), int0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.sort()V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      tSynchronizedRandomAccessDoubleList0.sort();
      assertEquals(0.0, tSynchronizedRandomAccessDoubleList0.sum(), 0.01D);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(D)I: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet((-1), (-1));
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList((TDoubleCollection) tDoubleHashSet0);
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleArrayList0, (Object) "");
      int int0 = tSynchronizedDoubleList0.lastIndexOf((double) (-1));
      assertEquals((-1), int0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      tSynchronizedRandomAccessDoubleList0.remove((-13), 0);
      assertEquals(0.0, tSynchronizedRandomAccessDoubleList0.min(), 0.01D);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(ID)I: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) ":");
      int int0 = tSynchronizedRandomAccessDoubleList0.lastIndexOf(0, 0);
      assertEquals((-1), int0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(doubleArray0);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessDoubleList0.insert(30, doubleArray0, 30, 30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.fill(D)V: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleLinkedList0);
      tSynchronizedDoubleList0.fill(Double.POSITIVE_INFINITY);
      assertEquals(0.0, tSynchronizedDoubleList0.getNoEntryValue(), 0.01D);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) ":");
      int int0 = tSynchronizedRandomAccessDoubleList0.binarySearch((double) 0, 0, 0);
      assertEquals((-1), int0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.grep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(0, 0);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      TDoubleArrayList tDoubleArrayList1 = (TDoubleArrayList)tSynchronizedRandomAccessDoubleList0.grep((TDoubleProcedure) null);
      assertTrue(tDoubleArrayList0.equals(tDoubleArrayList1));
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleLinkedList0, (Object) "/mnt/fastdata/ac1gf/Experiments_Major/apps/trove-3.0.2/ANr~)@0o2*P0!$N");
      // Undeclared exception!
      try {
        tSynchronizedDoubleList0.toArray((-7), (-7));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.sum()D: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleArrayList0);
      double double0 = tSynchronizedDoubleList0.sum();
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleLinkedList0);
      // Undeclared exception!
      try {
        tSynchronizedDoubleList0.toArray(doubleArray0, 0, 213, 213);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
      }
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.set(ID)D: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleArrayList0);
      // Undeclared exception!
      try {
        tSynchronizedDoubleList0.set((-1), (-1454.0957406929797));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.removeAt(I)D: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(doubleArray0);
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleArrayList0, (Object) "/");
      // Undeclared exception!
      try {
        tSynchronizedDoubleList0.removeAt(1948);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1948
         //
      }
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.insert(ID)V: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(630, 630);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0, (Object) "de_DE");
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessDoubleList0.insert(630, 630);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.replace(ID)D: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessDoubleList0.replace((-13), (-13));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -13
         //
      }
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(0, 0);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = tSynchronizedRandomAccessDoubleList0.toArray(doubleArray0, 0, 0);
      assertSame(doubleArray1, doubleArray0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.add([D)V: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleArrayList0);
      double[] doubleArray0 = new double[5];
      tSynchronizedDoubleList0.add(doubleArray0);
      assertEquals(false, tDoubleArrayList0.isEmpty());
      assertEquals("{0.0, 0.0, 0.0, 0.0, 0.0}", tSynchronizedDoubleList0.toString());
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.equals(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleLinkedList0);
      boolean boolean0 = tSynchronizedDoubleList0.equals((Object) "{}");
      assertEquals(false, boolean0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.forEachDescending(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet((-1), (-1));
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList((TDoubleCollection) tDoubleHashSet0);
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleArrayList0, (Object) "");
      boolean boolean0 = tSynchronizedDoubleList0.forEachDescending((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.max()D: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      double double0 = tSynchronizedRandomAccessDoubleList0.max();
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleLinkedList0);
      tSynchronizedDoubleList0.sort(0, 0);
      assertEquals(0.0, tSynchronizedDoubleList0.sum(), 0.01D);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0);
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleArrayList0, (Object) "English");
      // Undeclared exception!
      try {
        tSynchronizedDoubleList0.add(doubleArray0, (-788), (-788));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.inverseGrep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) null, (Object) "/");
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessDoubleList0.inverseGrep((TDoubleProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.reverse()V: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) ":");
      tSynchronizedRandomAccessDoubleList0.reverse();
      assertEquals(0, tSynchronizedRandomAccessDoubleList0.size());
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(D)I: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      int int0 = tSynchronizedRandomAccessDoubleList0.indexOf((double) (-13));
      assertEquals((-1), int0);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.shuffle(Ljava/util/Random;)V: root-Branch
   */

  @Test
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      Random random0 = new Random((long) 0);
      tSynchronizedRandomAccessDoubleList0.shuffle(random0);
      assertEquals(0.0, tSynchronizedRandomAccessDoubleList0.max(), 0.01D);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.get(I)D: root-Branch
   */

  @Test
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0);
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tUnmodifiableRandomAccessDoubleList0, (Object) tUnmodifiableRandomAccessDoubleList0);
      double double0 = tSynchronizedDoubleList0.get(0);
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;: root-Branch
   */

  @Test
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0, 0.0);
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleArrayList0);
      // Undeclared exception!
      try {
        tSynchronizedDoubleList0.subList(950, 950);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // end index < 14
         //
      }
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(ID)I: root-Branch
   */

  @Test
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0, 0.0);
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleArrayList0);
      int int0 = tSynchronizedDoubleList0.indexOf(950, 0.0);
      assertEquals((-1), int0);
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.transformValues(Lgnu/trove/function/TDoubleFunction;)V: root-Branch
   */

  @Test
  public void test32()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      tSynchronizedRandomAccessDoubleList0.transformValues((TDoubleFunction) null);
      assertEquals(0, tSynchronizedRandomAccessDoubleList0.size());
  }

  //Test case number: 33
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V: root-Branch
   */

  @Test
  public void test33()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(33);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      tSynchronizedRandomAccessDoubleList0.fill(33, 33, 33);
      assertEquals(false, tDoubleArrayList0.isEmpty());
      assertEquals("{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}", tSynchronizedRandomAccessDoubleList0.toString());
  }

  //Test case number: 34
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleList.<init>(Lgnu/trove/list/TDoubleList;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test34()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) ":");
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessDoubleList0.reverse(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.hashCode()I: root-Branch
   */

  @Test
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      int int0 = tSynchronizedRandomAccessDoubleList0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 36
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V: root-Branch
   */

  @Test
  public void test36()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList((double) 80);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0);
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessDoubleList0.set(80, doubleArray0, 80, 80);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 80
         //
      }
  }

  //Test case number: 37
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[D)V: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleList.<init>(Lgnu/trove/list/TDoubleList;)V: root-Branch
   */

  @Test
  public void test37()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleLinkedList0);
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try {
        tSynchronizedDoubleList0.set(1205, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 1205 exceeds size 0
         //
      }
  }
}
