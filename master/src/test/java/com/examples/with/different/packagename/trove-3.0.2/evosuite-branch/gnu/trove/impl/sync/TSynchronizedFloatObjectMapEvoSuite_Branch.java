/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TObjectFunction;
import gnu.trove.impl.sync.TSynchronizedFloatObjectMap;
import gnu.trove.impl.sync.TSynchronizedFloatSet;
import gnu.trove.iterator.TFloatObjectIterator;
import gnu.trove.map.TFloatObjectMap;
import gnu.trove.map.hash.TFloatObjectHashMap;
import gnu.trove.procedure.TFloatObjectProcedure;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedFloatObjectMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.get(F)Ljava/lang/Object;: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.<init>(Lgnu/trove/map/TFloatObjectMap;)V: I17 Branch 1 IFNONNULL L61 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>((-113));
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap0);
      Object object0 = tSynchronizedFloatObjectMap0.get((float) (-113));
      assertNull(object0);
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.containsKey(F)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.<init>(Lgnu/trove/map/TFloatObjectMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>(0, 0);
      TSynchronizedFloatObjectMap<Float> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Float>((TFloatObjectMap<Float>) tFloatObjectHashMap0, (Object) "zh");
      boolean boolean0 = tSynchronizedFloatObjectMap0.containsKey((float) 0);
      assertEquals(false, boolean0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>((-311), (-311));
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap0);
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = tSynchronizedFloatObjectMap0.values(objectArray0);
      assertSame(objectArray1, objectArray0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>(1562611);
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap0);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      tSynchronizedFloatObjectMap0.putAll((Map<? extends Float, ?>) hashMap0);
      assertEquals("{}", hashMap0.toString());
  }

  //Test case number: 4
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.size()I: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.getNoEntryKey()F: root-Branch
   * 3 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.forEachEntry(Lgnu/trove/procedure/TFloatObjectProcedure;)Z: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(1562611);
      TSynchronizedFloatObjectMap<Integer> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
      TFloatObjectHashMap<Object> tFloatObjectHashMap1 = new TFloatObjectHashMap<Object>((TFloatObjectMap<?>) tSynchronizedFloatObjectMap0);
      assertEquals("{}", tFloatObjectHashMap1.toString());
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.equals(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>((-113));
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap0);
      boolean boolean0 = tSynchronizedFloatObjectMap0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.retainEntries(Lgnu/trove/procedure/TFloatObjectProcedure;)Z: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>((-1395), (-1395), (-1395));
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap0);
      boolean boolean0 = tSynchronizedFloatObjectMap0.retainEntries((TFloatObjectProcedure<? super Object>) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.values()[Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>((-311), (-311));
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap0);
      Object[] objectArray0 = tSynchronizedFloatObjectMap0.values();
      assertNotNull(objectArray0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>((-311), (-311));
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap0);
      String string0 = tSynchronizedFloatObjectMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>((-113));
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap0);
      boolean boolean0 = tSynchronizedFloatObjectMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>();
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap0, (Object) "zh");
      tSynchronizedFloatObjectMap0.transformValues((TObjectFunction<Object, Object>) null);
      assertEquals(true, tSynchronizedFloatObjectMap0.isEmpty());
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.putAll(Lgnu/trove/map/TFloatObjectMap;)V: root-Branch
   */

//   @Test
//   public void test11()  throws Throwable  {
//       TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>();
//       TSynchronizedFloatObjectMap<Integer> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
//       tSynchronizedFloatObjectMap0.putAll((TFloatObjectMap<? extends Integer>) tFloatObjectHashMap0);
//       assertEquals(0.0F, tFloatObjectHashMap0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.putIfAbsent(FLjava/lang/Object;)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>(1562611);
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap0);
      tSynchronizedFloatObjectMap0.putIfAbsent((float) 1562611, (Object) tSynchronizedFloatObjectMap0);
      assertEquals(false, tFloatObjectHashMap0.isEmpty());
      assertEquals(false, tSynchronizedFloatObjectMap0.isEmpty());
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.iterator()Lgnu/trove/iterator/TFloatObjectIterator;: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>((-311), (-311));
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap0);
      TFloatObjectIterator<Object> tFloatObjectIterator0 = tSynchronizedFloatObjectMap0.iterator();
      assertEquals(false, tFloatObjectIterator0.hasNext());
  }

  //Test case number: 14
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.<init>(Lgnu/trove/map/TFloatObjectMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>(0, 0);
      TSynchronizedFloatObjectMap<Float> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Float>((TFloatObjectMap<Float>) tFloatObjectHashMap0, (Object) "zh");
      Object[] objectArray0 = new Object[1];
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(objectArray0);
      boolean boolean0 = tSynchronizedFloatObjectMap0.forEachValue((TObjectProcedure<? super Float>) toObjectArrayProceedure0);
      assertEquals(true, boolean0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.containsValue(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>((-1650), (-1650));
      TSynchronizedFloatObjectMap<Float> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Float>((TFloatObjectMap<Float>) tFloatObjectHashMap0);
      boolean boolean0 = tSynchronizedFloatObjectMap0.containsValue((Object) (-1650));
      assertEquals(false, boolean0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.put(FLjava/lang/Object;)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>();
      TSynchronizedFloatObjectMap<Integer> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
      tSynchronizedFloatObjectMap0.put(0.0F, (Integer) (-1650));
      assertEquals("{0.0=-1650}", tFloatObjectHashMap0.toString());
      assertEquals(false, tFloatObjectHashMap0.isEmpty());
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.clear()V: root-Branch
   */

//   @Test
//   public void test17()  throws Throwable  {
//       TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>();
//       TSynchronizedFloatObjectMap<Integer> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
//       tSynchronizedFloatObjectMap0.clear();
//       assertEquals(0.0F, tSynchronizedFloatObjectMap0.getNoEntryKey(), 0.01F);
//   }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.hashCode()I: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>((-1395), (-1395), (-1395));
      TSynchronizedFloatObjectMap<Integer> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
      int int0 = tSynchronizedFloatObjectMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.keys([F)[F: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>((-311), (-311));
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap0);
      float[] floatArray0 = tSynchronizedFloatObjectMap0.keys(tFloatObjectHashMap0._set);
      assertNotNull(floatArray0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.remove(F)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>((-1395), (-1395), (-1395));
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap0);
      Object object0 = tSynchronizedFloatObjectMap0.remove((float) (-1395));
      assertNull(object0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>((-113));
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap0);
      boolean boolean0 = tSynchronizedFloatObjectMap0.forEachKey((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.keys()[F: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>((-1395), (-1395), (-1395));
      TSynchronizedFloatObjectMap<Integer> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
      float[] floatArray0 = tSynchronizedFloatObjectMap0.keys();
      assertNotNull(floatArray0);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.<init>(Lgnu/trove/map/TFloatObjectMap;)V: I17 Branch 1 IFNONNULL L61 - false
   */

  @Test
  public void test23()  throws Throwable  {
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap0 = null;
      try {
        tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Object>((TFloatObjectMap<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 24
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.keySet()Lgnu/trove/set/TFloatSet;: I11 Branch 2 IFNONNULL L109 - true
   * 2 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.keySet()Lgnu/trove/set/TFloatSet;: I11 Branch 2 IFNONNULL L109 - false
   */

  @Test
  public void test24()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>();
      TSynchronizedFloatObjectMap<Integer> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
      TSynchronizedFloatSet tSynchronizedFloatSet0 = (TSynchronizedFloatSet)tSynchronizedFloatObjectMap0.keySet();
      assertNotNull(tSynchronizedFloatSet0);
      
      TSynchronizedFloatSet tSynchronizedFloatSet1 = (TSynchronizedFloatSet)tSynchronizedFloatObjectMap0.keySet();
      assertSame(tSynchronizedFloatSet1, tSynchronizedFloatSet0);
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.valueCollection()Ljava/util/Collection;: I11 Branch 3 IFNONNULL L123 - true
   * 2 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.valueCollection()Ljava/util/Collection;: I11 Branch 3 IFNONNULL L123 - false
   * 3 gnu.trove.impl.sync.TSynchronizedFloatObjectMap.<init>(Lgnu/trove/map/TFloatObjectMap;)V: I17 Branch 1 IFNONNULL L61 - true
   */

  @Test
  public void test25()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>((-311), (-311));
      TSynchronizedFloatObjectMap<Object> tSynchronizedFloatObjectMap0 = new TSynchronizedFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap0);
      Collection<Object> collection0 = tSynchronizedFloatObjectMap0.valueCollection();
      assertNotNull(collection0);
      
      Collection<Object> collection1 = tSynchronizedFloatObjectMap0.valueCollection();
      assertSame(collection1, collection0);
  }
}
