/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TDoubleFunction;
import gnu.trove.impl.sync.TSynchronizedDoubleList;
import gnu.trove.impl.sync.TSynchronizedRandomAccessDoubleList;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessDoubleList;
import gnu.trove.list.TDoubleList;
import gnu.trove.list.array.TDoubleArrayList;
import gnu.trove.list.linked.TDoubleLinkedList;
import gnu.trove.procedure.TDoubleProcedure;
import java.util.Random;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableDoubleListEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.hashCode()I: root-Branch
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.<init>(Lgnu/trove/list/TDoubleList;)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0);
      int int0 = tUnmodifiableRandomAccessDoubleList0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DII)[D: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(0);
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = tUnmodifiableDoubleList0.toArray(doubleArray0, 0, 0);
      assertSame(doubleArray0, doubleArray1);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.binarySearch(D)I: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(0, 0);
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      int int0 = tUnmodifiableDoubleList0.binarySearch((double) 0);
      assertEquals((-1), int0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.remove(II)V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(181, 1382.0795261179449);
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleList0.remove(0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray([DIII)[D: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(0);
      double[] doubleArray0 = new double[6];
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      double[] doubleArray1 = tUnmodifiableRandomAccessDoubleList0.toArray(doubleArray0, 0, 0, 0);
      assertSame(doubleArray0, doubleArray1);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.subList(II)Lgnu/trove/list/TDoubleList;: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(11, 11);
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      TUnmodifiableDoubleList tUnmodifiableDoubleList1 = (TUnmodifiableDoubleList)tUnmodifiableDoubleList0.subList(11, 11);
      assertNotNull(tUnmodifiableDoubleList1);
      assertEquals("{}", tUnmodifiableDoubleList1.toString());
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.forEachDescending(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) "");
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tSynchronizedRandomAccessDoubleList0);
      boolean boolean0 = tUnmodifiableDoubleList0.forEachDescending((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.sort(II)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(1759, 1759);
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessDoubleList0.sort(1759, 1759);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.set(ID)D: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessDoubleList0.set(189, 551.5576576547473);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.binarySearch(DII)I: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(0);
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      int int0 = tUnmodifiableRandomAccessDoubleList0.binarySearch(0.0, 0, 0);
      assertEquals((-1), int0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.set(I[DII)V: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList((-1841.4635633756425));
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleLinkedList0);
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tSynchronizedDoubleList0);
      double[] doubleArray0 = new double[15];
      // Undeclared exception!
      try {
        tUnmodifiableDoubleList0.set(7, doubleArray0, 7, 7);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.insert(I[D)V: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) "");
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tSynchronizedRandomAccessDoubleList0);
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
      try {
        tUnmodifiableDoubleList0.insert((-20), doubleArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.inverseGrep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList((double) 11);
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0);
      TDoubleLinkedList tDoubleLinkedList1 = (TDoubleLinkedList)tUnmodifiableRandomAccessDoubleList0.inverseGrep((TDoubleProcedure) null);
      assertEquals(0, tDoubleLinkedList1.size());
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.min()D: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleList0.min();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot find minimum of an empty list
         //
      }
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.removeAt(I)D: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList((double) 11);
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0);
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessDoubleList0.removeAt(11);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.lastIndexOf(ID)I: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) "");
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tSynchronizedRandomAccessDoubleList0);
      int int0 = tUnmodifiableDoubleList0.lastIndexOf(13, 13);
      assertEquals((-1), int0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.indexOf(D)I: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      int int0 = tUnmodifiableDoubleList0.indexOf(11.540656317452152);
      assertEquals((-1), int0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.sum()D: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) "");
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tSynchronizedRandomAccessDoubleList0);
      double double0 = tUnmodifiableDoubleList0.sum();
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.max()D: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0);
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      double double0 = tUnmodifiableDoubleList0.max();
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.add([DII)V: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(0, 0.0);
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessDoubleList0.add(doubleArray0, 0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.fill(IID)V: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0, 0.0);
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessDoubleList0.fill(210, 210, 210);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.set(I[D)V: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try {
        tUnmodifiableDoubleList0.set(163, doubleArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.insert(ID)V: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0);
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList((TDoubleList) tDoubleArrayList0);
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0);
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessDoubleList0.insert((-213), (-1599.4047978945591));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.toArray(II)[D: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      double[] doubleArray0 = tUnmodifiableDoubleList0.toArray(163, 0);
      assertNotNull(doubleArray0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.add([D)V: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(0);
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try {
        tUnmodifiableDoubleList0.add(doubleArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.shuffle(Ljava/util/Random;)V: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(0, 0);
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      Random random0 = new Random((long) (-1));
      // Undeclared exception!
      try {
        tUnmodifiableDoubleList0.shuffle(random0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.reverse(II)V: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList(1772.036636374571);
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleLinkedList0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleList0.reverse(1926, 1926);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.replace(ID)D: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0);
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessDoubleList0.replace((-925), (-925));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.lastIndexOf(D)I: root-Branch
   */

  @Test
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0, 0.0);
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      int int0 = tUnmodifiableDoubleList0.lastIndexOf(0.0);
      assertEquals(4, int0);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.get(I)D: root-Branch
   */

  @Test
  public void test29()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) "");
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tSynchronizedRandomAccessDoubleList0);
      double double0 = tUnmodifiableDoubleList0.get((-20));
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.sort()V: root-Branch
   */

  @Test
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0, (-1436.7645921606543));
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleList0.sort();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.fill(D)V: root-Branch
   */

  @Test
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0);
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleList0.fill(49.363090744893974);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.transformValues(Lgnu/trove/function/TDoubleFunction;)V: root-Branch
   */

  @Test
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0, 0.0);
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleList0.transformValues((TDoubleFunction) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 33
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.reverse()V: root-Branch
   */

  @Test
  public void test33()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0);
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessDoubleList0.reverse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 34
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.indexOf(ID)I: root-Branch
   */

  @Test
  public void test34()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      int int0 = tUnmodifiableDoubleList0.indexOf(163, 163);
      assertEquals((-1), int0);
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.grep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;: root-Branch
   */

  @Test
  public void test35()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0);
      TDoubleLinkedList tDoubleLinkedList1 = (TDoubleLinkedList)tUnmodifiableRandomAccessDoubleList0.grep((TDoubleProcedure) null);
      assertEquals(true, tDoubleLinkedList1.isEmpty());
  }

  //Test case number: 36
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.insert(I[DII)V: root-Branch
   */

  @Test
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0, 0.0);
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleList0.insert(4, doubleArray0, 4, 4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 37
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.equals(Ljava/lang/Object;)Z: I4 Branch 1 IF_ACMPEQ L62 - false
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.equals(Ljava/lang/Object;)Z: I9 Branch 2 IFEQ L62 - false
   */

  @Test
  public void test37()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(0, 0);
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      boolean boolean0 = tUnmodifiableDoubleList0.equals((Object) tDoubleArrayList0);
      assertEquals(true, boolean0);
  }

  //Test case number: 38
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.equals(Ljava/lang/Object;)Z: I9 Branch 2 IFEQ L62 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.<init>(Lgnu/trove/list/TDoubleList;)V: root-Branch
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList.equals(Ljava/lang/Object;)Z: I4 Branch 1 IF_ACMPEQ L62 - false
   */

  @Test
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0);
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      boolean boolean0 = tUnmodifiableDoubleList0.equals((Object) "{}");
      assertEquals(false, boolean0);
  }
}
