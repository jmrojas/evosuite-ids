/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TShortFloatMapDecorator;
import gnu.trove.map.TShortFloatMap;
import gnu.trove.map.hash.TShortFloatHashMap;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.StringTokenizer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortFloatMapDecoratorEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 2037;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, int0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      tShortFloatHashMap0.values(floatArray0);
      TShortFloatMapDecorator tShortFloatMapDecorator0 = new TShortFloatMapDecorator();
      // Undeclared exception!
      try {
        tShortFloatMapDecorator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TShortFloatMap tShortFloatMap0 = null;
      TShortFloatMapDecorator tShortFloatMapDecorator0 = new TShortFloatMapDecorator(tShortFloatMap0);
      Locale locale0 = Locale.ROOT;
      String string0 = locale0.getLanguage();
      boolean boolean0 = tShortFloatMapDecorator0.containsValue((Object) string0);
      assertEquals(false, boolean0);
  }

//   @Test
//   public void test2()  throws Throwable  {
//       short[] shortArray0 = new short[7];
//       short short0 = (short)0;
//       shortArray0[0] = short0;
//       short short1 = (short) (-2018);
//       shortArray0[1] = short1;
//       short short2 = (short)0;
//       shortArray0[2] = short2;
//       short short3 = (short)612;
//       shortArray0[3] = short3;
//       short short4 = (short)1262;
//       shortArray0[4] = short4;
//       short short5 = (short)0;
//       shortArray0[5] = short5;
//       short short6 = (short) (-1428);
//       shortArray0[6] = short6;
//       float[] floatArray0 = new float[7];
//       floatArray0[0] = (float) short5;
//       float float0 = (-1641.5931F);
//       floatArray0[1] = float0;
//       floatArray0[2] = (float) short1;
//       floatArray0[3] = (float) short2;
//       floatArray0[4] = (float) short5;
//       float float1 = (-1.0F);
//       floatArray0[5] = float1;
//       floatArray0[6] = (float) short6;
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
//       TShortFloatMapDecorator tShortFloatMapDecorator0 = new TShortFloatMapDecorator((TShortFloatMap) tShortFloatHashMap0);
//       TShortFloatMapDecorator tShortFloatMapDecorator1 = new TShortFloatMapDecorator();
//       FileDescriptor fileDescriptor0 = FileDescriptor.err;
//       FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
//       ObjectInputStream objectInputStream0 = null;
//       try {
//         objectInputStream0 = new ObjectInputStream((InputStream) fileInputStream0);
//         fail("Expecting exception: IOException");
//       
//       } catch(IOException e) {
//          //
//          // Bad file descriptor
//          //
//       }
//   }

  @Test
  public void test3()  throws Throwable  {
      TShortFloatMapDecorator tShortFloatMapDecorator0 = new TShortFloatMapDecorator();
      String string0 = "0KYP?D24`2>GH\"@j |R";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 0KYP?D24`2>GH\"@j |R://0KYP?D24`2>GH\"@j |R0KYP%3FD24%602%3EGH%22@j%20%7CR#0KYP?D24%602%3EGH%22@j%20%7CR
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = (-1154);
          TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0);
          TShortFloatMapDecorator tShortFloatMapDecorator0 = new TShortFloatMapDecorator((TShortFloatMap) tShortFloatHashMap0);
          String string0 = "";
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
      short short0 = (short) (-1);
      Short short1 = new Short(short0);
      AbstractMap.SimpleImmutableEntry<Short, Short> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Short, Short>(short1, short1);
      Integer integer0 = null;
      TShortFloatMapDecorator tShortFloatMapDecorator0 = new TShortFloatMapDecorator();
      // Undeclared exception!
      try {
        tShortFloatMapDecorator0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 1013;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0);
      TShortFloatMapDecorator tShortFloatMapDecorator0 = new TShortFloatMapDecorator((TShortFloatMap) tShortFloatHashMap0);
      OutputStream outputStream0 = null;
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 292;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0);
      tShortFloatHashMap0.toString();
      TShortFloatMapDecorator tShortFloatMapDecorator0 = new TShortFloatMapDecorator((TShortFloatMap) tShortFloatHashMap0);
      String string0 = " g\\pga<`bOt>:h";
      String string1 = "YGNl";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string1, string1, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI:  g\\pga<`bOt>:h://YGNlYGNl#%20g%5Cpga%3C%60bOt%3E:h
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TShortFloatMapDecorator tShortFloatMapDecorator0 = new TShortFloatMapDecorator();
      // Undeclared exception!
      try {
        tShortFloatMapDecorator0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      short short0 = (short) (-1343);
      Short.valueOf(short0);
      String string0 = " exceeds size ";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI:  exceeds size :// exceeds size %20exceeds%20size%20#%20exceeds%20size%20
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TShortFloatMapDecorator tShortFloatMapDecorator0 = new TShortFloatMapDecorator();
      String string0 = "";
      int int0 = 290;
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://@:290?#
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 148;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, int0);
      TShortFloatMapDecorator tShortFloatMapDecorator0 = new TShortFloatMapDecorator((TShortFloatMap) tShortFloatHashMap0);
      Short short0 = null;
      Float float0 = new Float((float) int0);
      tShortFloatMapDecorator0.put(short0, float0);
      TShortFloatMapDecorator tShortFloatMapDecorator1 = new TShortFloatMapDecorator();
      // Undeclared exception!
      try {
        tShortFloatMapDecorator1.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      TShortFloatMapDecorator tShortFloatMapDecorator0 = new TShortFloatMapDecorator();
      tShortFloatMapDecorator0.getMap();
      TShortFloatMapDecorator tShortFloatMapDecorator1 = new TShortFloatMapDecorator((TShortFloatMap) tShortFloatHashMap0);
      Locale locale0 = Locale.ROOT;
      short short0 = (short)0;
      Short short1 = new Short(short0);
      String string0 = "Yuv\\Tl|s{6";
      boolean boolean0 = true;
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0, boolean0);
      String string1 = stringTokenizer0.nextToken(string0);
      tShortFloatMapDecorator0.equals((Object) string1);
      Float float0 = new Float((double) short1);
      // Undeclared exception!
      try {
        tShortFloatMapDecorator0.put(short1, float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1;
      short short0 = (short) (-1503);
      TShortFloatMapDecorator tShortFloatMapDecorator0 = new TShortFloatMapDecorator();
      tShortFloatMapDecorator0.values();
      Float float0 = new Float((double) int0);
      // Undeclared exception!
      try {
        tShortFloatMapDecorator0.put((Short) short0, float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TShortFloatMapDecorator tShortFloatMapDecorator0 = new TShortFloatMapDecorator();
      String string0 = "8':7c\"x;LT";
      try {
        Short.decode(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8':7c\"x;LT\"
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 205759;
      float float0 = (-216.34622F);
      short short0 = (short)6;
      float float1 = (-67.51864F);
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, float0, short0, float1);
      TShortFloatMapDecorator tShortFloatMapDecorator0 = new TShortFloatMapDecorator((TShortFloatMap) tShortFloatHashMap0);
      TShortFloatHashMap tShortFloatHashMap1 = (TShortFloatHashMap)tShortFloatMapDecorator0.getMap();
      TShortFloatMapDecorator tShortFloatMapDecorator1 = new TShortFloatMapDecorator((TShortFloatMap) tShortFloatHashMap1);
      assertNotSame(tShortFloatMapDecorator0, tShortFloatMapDecorator1);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = (-576);
      short short0 = (short)1978;
      float float0 = (-336.8423F);
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, (float) int0, short0, float0);
      TShortFloatMapDecorator tShortFloatMapDecorator0 = new TShortFloatMapDecorator((TShortFloatMap) tShortFloatHashMap0);
      TShortFloatHashMap tShortFloatHashMap1 = (TShortFloatHashMap)tShortFloatMapDecorator0.getMap();
      TShortFloatMapDecorator tShortFloatMapDecorator1 = new TShortFloatMapDecorator((TShortFloatMap) tShortFloatHashMap1);
      TShortFloatHashMap tShortFloatHashMap2 = new TShortFloatHashMap();
      TShortFloatMapDecorator tShortFloatMapDecorator2 = new TShortFloatMapDecorator((TShortFloatMap) tShortFloatHashMap2);
      short short1 = (short) (-1475);
      String string0 = Short.toString(short1);
      Locale locale0 = new Locale(string0);
      String string1 = locale0.getLanguage();
      AbstractMap.SimpleImmutableEntry<Object, TShortFloatHashMap> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, TShortFloatHashMap>((Object) string1, tShortFloatHashMap2);
      // Undeclared exception!
      try {
        abstractMap_SimpleImmutableEntry0.setValue(tShortFloatHashMap2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short) (-368);
      shortArray0[0] = short0;
      short short1 = (short)56;
      shortArray0[1] = short1;
      short short2 = (short)1;
      shortArray0[2] = short2;
      short short3 = (short)1865;
      shortArray0[3] = short3;
      short short4 = (short) (-3581);
      shortArray0[4] = short4;
      short short5 = (short)823;
      shortArray0[5] = short5;
      short short6 = (short) (-1184);
      shortArray0[6] = short6;
      short short7 = (short) (-1);
      shortArray0[7] = short7;
      short short8 = (short) (-1681);
      shortArray0[8] = short8;
      short short9 = (short)0;
      shortArray0[9] = short9;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) short6;
      floatArray0[1] = (float) shortArray0[3];
      floatArray0[2] = (float) shortArray0[4];
      floatArray0[3] = (float) short5;
      floatArray0[4] = (float) shortArray0[3];
      float float0 = (-1970.4916F);
      floatArray0[5] = float0;
      floatArray0[6] = (float) short1;
      floatArray0[7] = (float) short9;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      TShortFloatMapDecorator tShortFloatMapDecorator0 = new TShortFloatMapDecorator((TShortFloatMap) tShortFloatHashMap0);
      assertEquals("{823=-1970.4916, -3581=1865.0, 56=1865.0, -1184=56.0, -368=-1184.0, -1=null, 1865=823.0, 1=-3581.0}", tShortFloatMapDecorator0.toString());
  }

  @Test
  public void test18()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      TShortFloatMapDecorator tShortFloatMapDecorator0 = new TShortFloatMapDecorator((TShortFloatMap) tShortFloatHashMap0);
      String string0 = "/5YXCB";
      String string1 = "";
      URI uRI0 = new URI(string0, string0, string1);
      URI uRI1 = URI.create(string0);
      int int0 = 0;
      float float0 = (-430.6187F);
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(int0, float0);
      tShortFloatMapDecorator0.equals((Object) tShortFloatHashMap1);
      URI uRI2 = uRI0.relativize(uRI1);
      URI uRI3 = uRI2.resolve(uRI0);
      tShortFloatMapDecorator0.hashCode();
      String string2 = uRI3.getScheme();
      tShortFloatMapDecorator0.equals((Object) string2);
      boolean boolean0 = tShortFloatMapDecorator0.isEmpty();
      assertEquals(true, boolean0);
  }
}
