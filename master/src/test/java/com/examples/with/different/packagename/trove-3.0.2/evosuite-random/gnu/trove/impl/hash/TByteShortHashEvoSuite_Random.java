/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TByteShortMap;
import gnu.trove.map.hash.TByteShortHashMap;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteShortHashEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


//   @Test
//   public void test0()  throws Throwable  {
//       byte[] byteArray0 = new byte[7];
//       byte byte0 = (byte)1;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte) (-16);
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)11;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte)61;
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)0;
//       byteArray0[4] = byte4;
//       byte byte5 = (byte)0;
//       byteArray0[5] = byte5;
//       byte byte6 = (byte)0;
//       byteArray0[6] = byte6;
//       short[] shortArray0 = new short[2];
//       shortArray0[0] = (short) byteArray0[4];
//       TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
//       tByteShortHashMap0.getAutoCompactionFactor();
//       assertEquals(0, tByteShortHashMap0.getNoEntryKey());
//       assertEquals(0, tByteShortHashMap0.getNoEntryValue());
//       
//       shortArray0[1] = (short) byte2;
//       TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap(byteArray0, shortArray0);
//       byte[] byteArray1 = tByteShortHashMap1._states;
//       assertEquals("{-16=11, 1=0}", tByteShortHashMap1.toString());
//       
//       int int0 = (-1);
//       float float0 = 0.0F;
//       int int1 = 1712;
//       TByteShortHashMap tByteShortHashMap2 = new TByteShortHashMap(int1);
//       assertEquals(0, tByteShortHashMap2.getNoEntryValue());
//       assertEquals(0, tByteShortHashMap2.getNoEntryKey());
//       
//       TByteShortHashMap tByteShortHashMap3 = new TByteShortHashMap(int0, float0);
//       short[] shortArray1 = tByteShortHashMap3.values();
//       assertEquals(0, tByteShortHashMap3.getNoEntryValue());
//       assertEquals(0, tByteShortHashMap3.getNoEntryKey());
//       assertNotNull(shortArray1);
//   }

//   @Test
//   public void test1()  throws Throwable  {
//       int int0 = (-957);
//       byte byte0 = (byte)1;
//       byte[] byteArray0 = new byte[5];
//       byteArray0[0] = byte0;
//       byteArray0[1] = byte0;
//       byte byte1 = (byte)106;
//       byteArray0[2] = byte1;
//       byteArray0[3] = byte0;
//       byteArray0[4] = byte0;
//       short[] shortArray0 = new short[1];
//       shortArray0[0] = (short) byteArray0[2];
//       TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
//       assertEquals(11, tByteShortHashMap0.capacity());
//       
//       tByteShortHashMap0._states = byteArray0;
//       short short0 = (short) (-999);
//       TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap();
//       tByteShortHashMap1._set = tByteShortHashMap0._states;
//       tByteShortHashMap1.getNoEntryValue();
//       tByteShortHashMap1.tempDisableAutoCompaction();
//       tByteShortHashMap1.capacity();
//       boolean boolean0 = true;
//       tByteShortHashMap1.reenableAutoCompaction(boolean0);
//       TByteShortHashMap tByteShortHashMap2 = new TByteShortHashMap(int0, (float) int0, byte0, short0);
//       int int1 = 1932;
//       float float0 = 586.67725F;
//       TByteShortHashMap tByteShortHashMap3 = new TByteShortHashMap(int1, float0);
//       tByteShortHashMap2.trimToSize();
//       assertEquals(1, tByteShortHashMap2.getNoEntryKey());
//   }

//   @Test
//   public void test2()  throws Throwable  {
//       int int0 = 158;
//       byte[] byteArray0 = new byte[6];
//       byte byte0 = (byte)55;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)1;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)0;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte)0;
//       byteArray0[3] = byte3;
//       byte byte4 = (byte) (-98);
//       byteArray0[4] = byte4;
//       byte byte5 = (byte)37;
//       byteArray0[5] = byte5;
//       short[] shortArray0 = new short[3];
//       shortArray0[0] = (short) byteArray0[2];
//       shortArray0[1] = (short) byte4;
//       shortArray0[2] = (short) byteArray0[3];
//       TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
//       tByteShortHashMap0.valueCollection();
//       TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap(int0);
//       assertEquals(331, tByteShortHashMap1.capacity());
//       
//       tByteShortHashMap1.trimToSize();
//       assertEquals(0, tByteShortHashMap1.getNoEntryKey());
//   }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 463646329;
      TByteShortMap tByteShortMap0 = null;
      TByteShortHashMap tByteShortHashMap0 = null;
      try {
        tByteShortHashMap0 = new TByteShortHashMap(tByteShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test4()  throws Throwable  {
//       byte[] byteArray0 = new byte[5];
//       byte byte0 = (byte) (-31);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)81;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)0;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte)69;
//       byteArray0[3] = byte3;
//       byte byte4 = (byte) (-88);
//       byteArray0[4] = byte4;
//       short[] shortArray0 = new short[1];
//       short short0 = (short)24829;
//       shortArray0[0] = short0;
//       TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
//       boolean boolean0 = false;
//       tByteShortHashMap0.reenableAutoCompaction(boolean0);
//       assertEquals(0, tByteShortHashMap0.getNoEntryKey());
//       assertEquals("{-31=24829}", tByteShortHashMap0.toString());
//       assertEquals(11, tByteShortHashMap0.capacity());
//       assertEquals(0, tByteShortHashMap0.getNoEntryValue());
//       
//       int int0 = 0;
//       float float0 = 1.0F;
//       byte byte5 = (byte)13;
//       TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap(int0, float0, byte5, (short) byte5);
//       byte byte6 = tByteShortHashMap1.getNoEntryKey();
//       assertEquals((byte)13, byte6);
//       assertEquals(13, tByteShortHashMap1.getNoEntryValue());
//   }

//   @Test
//   public void test5()  throws Throwable  {
//       int int0 = (-1039);
//       TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0, int0);
//       tByteShortHashMap0.isEmpty();
//       byte byte0 = (byte) (-17);
//       tByteShortHashMap0.contains(byte0);
//       assertEquals(0, tByteShortHashMap0.getNoEntryValue());
//       assertEquals(0, tByteShortHashMap0.getNoEntryKey());
//       
//       byte byte1 = (byte) (-1);
//       short short0 = (short)174;
//       TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap(int0, (float) int0, byte1, short0);
//       boolean boolean0 = tByteShortHashMap1.contains(byte1);
//       assertEquals(false, boolean0);
//       assertEquals(-1, tByteShortHashMap1.getNoEntryKey());
//       assertEquals(174, tByteShortHashMap1.getNoEntryValue());
//   }

  @Test
  public void test6()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      tByteShortHashMap0.getAutoCompactionFactor();
      byte byte0 = (byte)0;
      short short0 = (short) (-1593);
      tByteShortHashMap0.adjustValue(byte0, short0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      byteArray0[6] = byte0;
      byteArray0[7] = byte0;
      byte[] byteArray1 = tByteShortHashMap0.keys(byteArray0);
      assertEquals(23, tByteShortHashMap0.capacity());
      assertNotNull(byteArray1);
      
      boolean boolean0 = false;
      tByteShortHashMap0.trimToSize();
      tByteShortHashMap0.ensureCapacity((int) short0);
      tByteShortHashMap0.reenableAutoCompaction(boolean0);
      tByteShortHashMap0.toString();
      tByteShortHashMap0.iterator();
      byte byte2 = (byte)0;
      tByteShortHashMap0.contains(byte2);
      byte[] byteArray2 = tByteShortHashMap0._states;
      short short1 = tByteShortHashMap0.get(byte0);
      assertEquals((short)0, short1);
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)13;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-2);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) byteArray0[4];
      shortArray0[1] = (short) byteArray0[1];
      shortArray0[2] = (short) byte4;
      shortArray0[3] = (short) byteArray0[1];
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      assertEquals("{-2=-1, 13=-1, 0=0}", tByteShortHashMap0.toString());
      assertEquals(3, tByteShortHashMap0.size());
  }

//   @Test
//   public void test8()  throws Throwable  {
//       int int0 = Integer.MAX_VALUE;
//       TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0);
//       tByteShortHashMap0.hashCode();
//       assertEquals(0, tByteShortHashMap0.getNoEntryKey());
//       assertEquals(0, tByteShortHashMap0.getNoEntryValue());
//       
//       int int1 = (-707);
//       TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap();
//       assertEquals(23, tByteShortHashMap1.capacity());
//       assertEquals(0, tByteShortHashMap1.getNoEntryValue());
//       assertEquals(0, tByteShortHashMap1.getNoEntryKey());
//       
//       TByteShortHashMap tByteShortHashMap2 = new TByteShortHashMap(int1, int1);
//       byte byte0 = tByteShortHashMap2.getNoEntryKey();
//       assertEquals((byte)0, byte0);
//       assertEquals(0, tByteShortHashMap2.getNoEntryValue());
//   }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)3;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-82);
      byteArray0[3] = byte3;
      byte byte4 = (byte)121;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-71);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-53);
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-16);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-29);
      byteArray0[8] = byte8;
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) byteArray0[7];
      shortArray0[1] = (short) byte0;
      short short0 = (short) (-3399);
      shortArray0[2] = short0;
      shortArray0[3] = (short) byte2;
      shortArray0[4] = (short) byte6;
      shortArray0[5] = (short) byteArray0[5];
      shortArray0[6] = (short) byteArray0[3];
      shortArray0[7] = (short) byteArray0[7];
      short short1 = (short)1386;
      shortArray0[8] = short1;
      short short2 = (short)5569;
      shortArray0[9] = short2;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      assertEquals("{-53=-82, -82=0, -16=-16, -29=1386, 121=-53, -1=3, -71=-71, 3=-16, 0=-3399}", tByteShortHashMap0.toString());
  }

//   @Test
//   public void test10()  throws Throwable  {
//       int int0 = 275;
//       TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0, int0);
//       byte byte0 = (byte)79;
//       tByteShortHashMap0.containsKey(byte0);
//       boolean boolean0 = tByteShortHashMap0.contains(byte0);
//       assertEquals(false, boolean0);
//       
//       int int1 = 233;
//       float float0 = (-991.98474F);
//       TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap(int1, float0);
//       tByteShortHashMap0.compact();
//       TByteShortHashMap tByteShortHashMap2 = new TByteShortHashMap();
//       boolean boolean1 = false;
//       tByteShortHashMap0.size();
//       assertEquals(0, tByteShortHashMap0.getNoEntryValue());
//       assertEquals(0, tByteShortHashMap0.getNoEntryKey());
//       
//       tByteShortHashMap2.reenableAutoCompaction(boolean1);
//       tByteShortHashMap2.iterator();
//       assertEquals(0, tByteShortHashMap2.getNoEntryValue());
//       assertEquals(0, tByteShortHashMap2.getNoEntryKey());
//       assertEquals(23, tByteShortHashMap2.capacity());
//   }

  @Test
  public void test11()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      tByteShortHashMap0.getNoEntryValue();
      String string0 = "";
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         //  (No such file or directory)
         //
      }
  }

//   @Test
//   public void test12()  throws Throwable  {
//       int int0 = (-1395);
//       byte[] byteArray0 = new byte[7];
//       byte byte0 = (byte) (-73);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)0;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte) (-1);
//       byteArray0[2] = byte2;
//       byte byte3 = (byte)24;
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)0;
//       byteArray0[4] = byte4;
//       byte byte5 = (byte)88;
//       byteArray0[5] = byte5;
//       byte byte6 = (byte)16;
//       byteArray0[6] = byte6;
//       short[] shortArray0 = new short[5];
//       shortArray0[0] = (short) byte1;
//       shortArray0[1] = (short) byte2;
//       shortArray0[2] = (short) byte0;
//       shortArray0[3] = (short) byte4;
//       shortArray0[4] = (short) byte5;
//       TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
//       assertEquals("{-1=-73, 24=0, -73=0, 0=88}", tByteShortHashMap0.toString());
//       assertEquals(0, tByteShortHashMap0.getNoEntryKey());
//       assertEquals(4, tByteShortHashMap0.size());
//       assertEquals(0, tByteShortHashMap0.getNoEntryValue());
//       
//       float float0 = 0.0F;
//       TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap(int0, float0);
//       assertEquals(0, tByteShortHashMap1.getNoEntryValue());
//       assertEquals(0, tByteShortHashMap1.getNoEntryKey());
//   }

//   @Test
//   public void test13()  throws Throwable  {
//       int int0 = (-1265);
//       byte byte0 = (byte)123;
//       byte[] byteArray0 = new byte[6];
//       byteArray0[0] = byte0;
//       byteArray0[1] = byte0;
//       byteArray0[2] = byte0;
//       byteArray0[3] = byte0;
//       byteArray0[4] = byte0;
//       byteArray0[5] = byte0;
//       short[] shortArray0 = new short[7];
//       shortArray0[0] = (short) byteArray0[1];
//       shortArray0[1] = (short) byteArray0[2];
//       shortArray0[2] = (short) byteArray0[2];
//       short short0 = (short) (-32075);
//       shortArray0[3] = short0;
//       shortArray0[4] = (short) byteArray0[5];
//       shortArray0[5] = (short) byteArray0[2];
//       shortArray0[6] = (short) byteArray0[2];
//       TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
//       int int1 = tByteShortHashMap0.size();
//       assertEquals(17, tByteShortHashMap0.capacity());
//       assertEquals(1, int1);
//       assertEquals("{123=123}", tByteShortHashMap0.toString());
//       
//       short short1 = (short)0;
//       TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap(int0, (float) int0, byte0, short1);
//       tByteShortHashMap1.size();
//       assertEquals(123, tByteShortHashMap1.getNoEntryKey());
//       
//       TByteShortHashMap tByteShortHashMap2 = new TByteShortHashMap(int0);
//       byte byte1 = (byte)0;
//       tByteShortHashMap2.get(byte1);
//       assertEquals(0, tByteShortHashMap2.getNoEntryKey());
//       
//       int int2 = (-1);
//       TByteShortHashMap tByteShortHashMap3 = new TByteShortHashMap(int2, int2);
//       assertEquals(0, tByteShortHashMap3.getNoEntryKey());
//   }

//   @Test
//   public void test14()  throws Throwable  {
//       int int0 = 1;
//       int int1 = 1;
//       TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int1);
//       byte byte0 = (byte)125;
//       short short0 = tByteShortHashMap0.get(byte0);
//       assertEquals((short)0, short0);
//       
//       byte byte1 = tByteShortHashMap0.getNoEntryKey();
//       assertEquals((byte)0, byte1);
//       
//       float float0 = (-747.3618F);
//       tByteShortHashMap0.contains(byte0);
//       byte byte2 = (byte)52;
//       TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap(int0, float0, byte2, (short) byte2);
//       short short1 = tByteShortHashMap1.getNoEntryValue();
//       assertEquals((short)52, short1);
//       
//       byte byte3 = (byte)5;
//       tByteShortHashMap1.adjustValue(byte2, short1);
//       tByteShortHashMap1.adjustValue(byte3, short1);
//       boolean boolean0 = true;
//       tByteShortHashMap0.getAutoCompactionFactor();
//       tByteShortHashMap1.reenableAutoCompaction(boolean0);
//       int int2 = 171;
//       byte byte4 = (byte)23;
//       boolean boolean1 = tByteShortHashMap1.containsKey(byte4);
//       assertEquals(false, boolean1);
//       
//       tByteShortHashMap1.ensureCapacity(int2);
//       assertEquals(52, tByteShortHashMap1.getNoEntryKey());
//       
//       TByteShortHashMap tByteShortHashMap2 = new TByteShortHashMap();
//       assertEquals(0, tByteShortHashMap2.getNoEntryValue());
//       assertEquals(23, tByteShortHashMap2.capacity());
//       assertEquals(0, tByteShortHashMap2.getNoEntryKey());
//   }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      float float0 = 617.3906F;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0, float0);
      float float1 = tByteShortHashMap0.getAutoCompactionFactor();
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap();
      tByteShortHashMap0.setAutoCompactionFactor(float1);
      tByteShortHashMap1.valueCollection();
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 244703;
      float float0 = (-367.4448F);
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0, float0);
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap((TByteShortMap) tByteShortHashMap0);
      byte byte0 = (byte)5;
      tByteShortHashMap1.put(byte0, byte0);
      assertEquals(false, tByteShortHashMap1.isEmpty());
      
      int int1 = (-559);
      float float1 = (-317.40808F);
      TByteShortHashMap tByteShortHashMap2 = new TByteShortHashMap();
      TByteShortHashMap tByteShortHashMap3 = new TByteShortHashMap((TByteShortMap) tByteShortHashMap2);
      TByteShortHashMap tByteShortHashMap4 = new TByteShortHashMap(int1, float1);
      byte[] byteArray0 = tByteShortHashMap4._set;
      TByteShortHashMap tByteShortHashMap5 = new TByteShortHashMap();
      tByteShortHashMap4.trimToSize();
      // Undeclared exception!
      try {
        tByteShortHashMap5.setAutoCompactionFactor((float) int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -559.0
         //
      }
  }

//   @Test
//   public void test17()  throws Throwable  {
//       int int0 = Integer.MAX_VALUE;
//       float float0 = 0.0F;
//       byte byte0 = (byte)20;
//       short short0 = (short)450;
//       TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0, float0, byte0, short0);
//       assertEquals(450, tByteShortHashMap0.getNoEntryValue());
//       assertEquals(20, tByteShortHashMap0.getNoEntryKey());
//   }
}
