/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TCharFunction;
import gnu.trove.map.TObjectCharMap;
import gnu.trove.map.hash.TObjectCharHashMap;
import gnu.trove.procedure.TCharProcedure;
import gnu.trove.procedure.TObjectCharProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectCharHashMapEvoSuite_WeakMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 78 covered goals:
   * 1 Weak Mutation 111: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:141 - DeleteField: no_entry_valueC
   * 2 Weak Mutation 113: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:143 - ReplaceComparisonOperator == -> >=
   * 3 Weak Mutation 112: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:143 - DeleteField: no_entry_valueC
   * 4 Weak Mutation 118: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:144 - DeleteStatement: fill([CC)V
   * 5 Weak Mutation 117: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:144 - DeleteField: no_entry_valueC
   * 6 Weak Mutation 116: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:144 - DeleteField: _values[C
   * 7 Weak Mutation 224: gnu.trove.map.hash.TObjectCharHashMap.getNoEntryValue()C:203 - DeleteField: no_entry_valueC
   * 8 gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V: I35 Branch 10 IFEQ L143 - false
   * 9 Weak Mutation 103: gnu.trove.map.hash.TObjectCharHashMap.<init>(IFC)V:125 - DeleteField: _values[C
   * 10 Weak Mutation 100: gnu.trove.map.hash.TObjectCharHashMap.<init>(IFC)V:124 - ReplaceComparisonOperator == -> >=
   * 11 Weak Mutation 98: gnu.trove.map.hash.TObjectCharHashMap.<init>(IFC)V:122 - InsertUnaryOp IINC -1 noEntryValue
   * 12 Weak Mutation 99: gnu.trove.map.hash.TObjectCharHashMap.<init>(IFC)V:124 - DeleteField: no_entry_valueC
   * 13 Weak Mutation 96: gnu.trove.map.hash.TObjectCharHashMap.<init>(IFC)V:122 - InsertUnaryOp Negation of noEntryValue
   * 14 Weak Mutation 97: gnu.trove.map.hash.TObjectCharHashMap.<init>(IFC)V:122 - InsertUnaryOp IINC 1 noEntryValue
   * 15 Weak Mutation 110: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:141 - ReplaceVariable hashmap -> this
   * 16 Weak Mutation 111: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:141 - DeleteField: no_entry_valueC
   * 17 Weak Mutation 108: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:140 - InsertUnaryOp Negation
   * 18 Weak Mutation 109: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:140 - DeleteField: _loadFactorF
   * 19 Weak Mutation 106: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:138 - ReplaceComparisonOperator == -> !=
   * 20 Weak Mutation 107: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:140 - ReplaceVariable hashmap -> this
   * 21 Weak Mutation 104: gnu.trove.map.hash.TObjectCharHashMap.<init>(IFC)V:125 - DeleteField: no_entry_valueC
   * 22 Weak Mutation 105: gnu.trove.map.hash.TObjectCharHashMap.<init>(IFC)V:125 - DeleteStatement: fill([CC)V
   * 23 Weak Mutation 119: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - ReplaceConstant - 10.0 -> 0.0
   * 24 Weak Mutation 118: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:144 - DeleteStatement: fill([CC)V
   * 25 Weak Mutation 117: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:144 - DeleteField: no_entry_valueC
   * 26 Weak Mutation 116: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:144 - DeleteField: _values[C
   * 27 Weak Mutation 113: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:143 - ReplaceComparisonOperator == -> >=
   * 28 Weak Mutation 112: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:143 - DeleteField: no_entry_valueC
   * 29 Weak Mutation 127: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - ReplaceArithmeticOperator / -> +
   * 30 Weak Mutation 126: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - ReplaceArithmeticOperator / -> -
   * 31 Weak Mutation 125: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - DeleteField: _loadFactorF
   * 32 Weak Mutation 124: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - InsertUnaryOp Negation
   * 33 Weak Mutation 123: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - ReplaceConstant - 10.0 -> 11.0
   * 34 Weak Mutation 122: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - ReplaceConstant - 10.0 -> 9.0
   * 35 Weak Mutation 121: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - ReplaceConstant - 10.0 -> -1.0
   * 36 Weak Mutation 120: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - ReplaceConstant - 10.0 -> 1.0
   * 37 Weak Mutation 137: gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I:163 - InsertUnaryOp Negation of capacity
   * 38 Weak Mutation 136: gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I:163 - ReplaceVariable capacity -> initialCapacity
   * 39 Weak Mutation 139: gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I:163 - InsertUnaryOp IINC -1 capacity
   * 40 Weak Mutation 138: gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I:163 - InsertUnaryOp IINC 1 capacity
   * 41 Weak Mutation 141: gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I:164 - InsertUnaryOp Negation of capacity
   * 42 Weak Mutation 140: gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I:164 - ReplaceVariable capacity -> initialCapacity
   * 43 Weak Mutation 143: gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I:164 - InsertUnaryOp IINC -1 capacity
   * 44 Weak Mutation 142: gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I:164 - InsertUnaryOp IINC 1 capacity
   * 45 Weak Mutation 129: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - ReplaceArithmeticOperator / -> *
   * 46 Weak Mutation 128: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - ReplaceArithmeticOperator / -> %
   * 47 Weak Mutation 131: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - DeleteStatement: setUp(I)I
   * 48 Weak Mutation 130: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - DeleteStatement: ceil(D)D
   * 49 Weak Mutation 133: gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I:162 - InsertUnaryOp Negation of initialCapacity
   * 50 Weak Mutation 132: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:148 - DeleteStatement: putAll(Lgnu/trove/map/TObjectCharMap;)V
   * 51 Weak Mutation 135: gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I:162 - InsertUnaryOp IINC -1 initialCapacity
   * 52 Weak Mutation 134: gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I:162 - InsertUnaryOp IINC 1 initialCapacity
   * 53 Weak Mutation 224: gnu.trove.map.hash.TObjectCharHashMap.getNoEntryValue()C:203 - DeleteField: no_entry_valueC
   * 54 Weak Mutation 379: gnu.trove.map.hash.TObjectCharHashMap.putAll(Lgnu/trove/map/TObjectCharMap;)V:308 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z
   * 55 Weak Mutation 378: gnu.trove.map.hash.TObjectCharHashMap.putAll(Lgnu/trove/map/TObjectCharMap;)V:308 - DeleteField: PUT_ALL_PROCLgnu/trove/procedure/TObjectCharProcedure;
   * 56 Weak Mutation 750: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:513 - ReplaceConstant - 1 -> 0
   * 57 Weak Mutation 717: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:504 - DeleteField: _set[Ljava/lang/Object;
   * 58 Weak Mutation 718: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:505 - DeleteField: _values[C
   * 59 Weak Mutation 728: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 60 Weak Mutation 729: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 61 Weak Mutation 730: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - ReplaceVariable FREE -> REMOVED
   * 62 Weak Mutation 731: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - DeleteField: FREELjava/lang/Object;
   * 63 Weak Mutation 732: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - ReplaceComparisonOperator == -> !=
   * 64 Weak Mutation 720: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:506 - InsertUnaryOp Negation of i
   * 65 Weak Mutation 721: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:506 - InsertUnaryOp IINC 1 i
   * 66 Weak Mutation 722: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:506 - InsertUnaryOp IINC -1 i
   * 67 Weak Mutation 724: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:506 - ReplaceComparisonOperator <= -> <
   * 68 Weak Mutation 725: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:506 - ReplaceComparisonOperator <= -> -1
   * 69 Weak Mutation 727: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 70 gnu.trove.map.hash.TObjectCharHashMap.putAll(Lgnu/trove/map/TObjectCharMap;)V: root-Branch
   * 71 gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I: root-Branch
   * 72 gnu.trove.map.hash.TObjectCharHashMap.getNoEntryValue()C: root-Branch
   * 73 gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I18 Branch 47 IFLE L506 - true
   * 74 gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I18 Branch 47 IFLE L506 - false
   * 75 gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - true
   * 76 gnu.trove.map.hash.TObjectCharHashMap.<init>(IFC)V: I23 Branch 8 IFEQ L124 - false
   * 77 gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V: I13 Branch 9 IFEQ L138 - false
   * 78 gnu.trove.map.hash.TObjectCharHashMap$1.<init>(Lgnu/trove/map/hash/TObjectCharHashMap;)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>((-1644), (float) (-1644), '-');
      TObjectCharHashMap<Object> tObjectCharHashMap1 = new TObjectCharHashMap<Object>((TObjectCharMap<?>) tObjectCharHashMap0);
      assertEquals('-', tObjectCharHashMap1.getNoEntryValue());
      assertEquals(3, tObjectCharHashMap1.capacity());
  }

  //Test case number: 1
  /*
   * 147 covered goals:
   * 1 Weak Mutation 147: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:180 - ReplaceVariable newCapacity -> oldCapacity
   * 2 Weak Mutation 155: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:182 - ReplaceVariable newCapacity -> oldCapacity
   * 3 Weak Mutation 162: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - ReplaceVariable oldCapacity -> newCapacity
   * 4 Weak Mutation 186: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceVariable i -> newCapacity
   * 5 Weak Mutation 187: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceVariable i -> oldCapacity
   * 6 Weak Mutation 185: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceVariable oldKeys -> _set
   * 7 Weak Mutation 190: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - InsertUnaryOp IINC -1 i
   * 8 Weak Mutation 191: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceVariable REMOVED -> FREE
   * 9 Weak Mutation 188: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - InsertUnaryOp Negation of i
   * 10 Weak Mutation 189: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - InsertUnaryOp IINC 1 i
   * 11 Weak Mutation 193: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceComparisonOperator == -> !=
   * 12 Weak Mutation 192: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - DeleteField: REMOVEDLjava/lang/Object;
   * 13 Weak Mutation 197: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:187 - InsertUnaryOp Negation of i
   * 14 Weak Mutation 196: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:187 - ReplaceVariable i -> oldCapacity
   * 15 Weak Mutation 199: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:187 - InsertUnaryOp IINC -1 i
   * 16 Weak Mutation 198: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:187 - InsertUnaryOp IINC 1 i
   * 17 Weak Mutation 195: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:187 - ReplaceVariable i -> newCapacity
   * 18 Weak Mutation 194: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:187 - ReplaceVariable oldKeys -> _set
   * 19 Weak Mutation 201: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:188 - ReplaceVariable o -> REMOVED
   * 20 Weak Mutation 200: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:188 - ReplaceVariable o -> FREE
   * 21 Weak Mutation 202: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:188 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 22 Weak Mutation 205: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:189 - ReplaceVariable index -> i
   * 23 Weak Mutation 204: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:189 - ReplaceVariable index -> oldCapacity
   * 24 Weak Mutation 207: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:189 - InsertUnaryOp IINC 1 index
   * 25 Weak Mutation 206: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:189 - InsertUnaryOp Negation of index
   * 26 Weak Mutation 203: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:189 - ReplaceVariable index -> newCapacity
   * 27 Weak Mutation 208: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:189 - InsertUnaryOp IINC -1 index
   * 28 Weak Mutation 209: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:189 - ReplaceComparisonOperator >= -> ==
   * 29 Weak Mutation 641: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:440 - ReplaceVariable key -> REMOVED
   * 30 Weak Mutation 640: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:440 - ReplaceVariable key -> FREE
   * 31 Weak Mutation 642: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:440 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 32 Weak Mutation 645: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:443 - InsertUnaryOp IINC -1 index
   * 33 Weak Mutation 644: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:443 - InsertUnaryOp IINC 1 index
   * 34 Weak Mutation 646: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:443 - ReplaceComparisonOperator >= -> ==
   * 35 Weak Mutation 643: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:443 - InsertUnaryOp Negation of index
   * 36 Weak Mutation 677: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:448 - InsertUnaryOp IINC -1 put_amount
   * 37 Weak Mutation 676: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:448 - InsertUnaryOp IINC 1 put_amount
   * 38 Weak Mutation 675: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:448 - InsertUnaryOp Negation of put_amount
   * 39 Weak Mutation 674: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:448 - ReplaceVariable put_amount -> adjust_amount
   * 40 Weak Mutation 673: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:448 - InsertUnaryOp IINC -1 index
   * 41 Weak Mutation 672: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:448 - InsertUnaryOp IINC 1 index
   * 42 Weak Mutation 670: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:448 - DeleteField: _values[C
   * 43 Weak Mutation 671: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:448 - InsertUnaryOp Negation of index
   * 44 Weak Mutation 678: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:449 - ReplaceConstant - 1 -> 0
   * 45 Weak Mutation 680: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:454 - ReplaceComparisonOperator == -> !=
   * 46 Weak Mutation 679: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:454 - InsertUnaryOp Negation of isNewMapping
   * 47 Weak Mutation 683: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:455 - DeleteStatement: postInsertHook(Z)V
   * 48 Weak Mutation 682: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:455 - DeleteField: consumeFreeSlotZ
   * 49 Weak Mutation 681: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:455 - InsertUnaryOp Negation
   * 50 Weak Mutation 686: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:458 - InsertUnaryOp Negation of newValue
   * 51 Weak Mutation 684: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:458 - ReplaceVariable newValue -> adjust_amount
   * 52 gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - false
   * 53 gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V: I61 Branch 13 IF_ACMPEQ L186 - false
   * 54 gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V: I77 Branch 14 IFGE L189 - true
   * 55 gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C: I9 Branch 41 IFGE L443 - true
   * 56 gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C: I52 Branch 42 IFEQ L454 - false
   * 57 Weak Mutation 152: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:181 - ReplaceVariable FREE -> REMOVED
   * 58 Weak Mutation 153: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:181 - DeleteField: FREELjava/lang/Object;
   * 59 Weak Mutation 154: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:181 - DeleteStatement: fill([Ljava/lang/Object;Ljava/lang/Object;)V
   * 60 Weak Mutation 155: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:182 - ReplaceVariable newCapacity -> oldCapacity
   * 61 Weak Mutation 156: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:182 - InsertUnaryOp Negation of newCapacity
   * 62 Weak Mutation 157: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:182 - InsertUnaryOp IINC 1 newCapacity
   * 63 Weak Mutation 158: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:182 - InsertUnaryOp IINC -1 newCapacity
   * 64 Weak Mutation 159: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:183 - DeleteField: _values[C
   * 65 Weak Mutation 144: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:174 - DeleteField: _set[Ljava/lang/Object;
   * 66 Weak Mutation 145: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:177 - DeleteField: _set[Ljava/lang/Object;
   * 67 Weak Mutation 146: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:178 - DeleteField: _values[C
   * 68 Weak Mutation 147: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:180 - ReplaceVariable newCapacity -> oldCapacity
   * 69 Weak Mutation 148: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:180 - InsertUnaryOp Negation of newCapacity
   * 70 Weak Mutation 149: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:180 - InsertUnaryOp IINC 1 newCapacity
   * 71 Weak Mutation 150: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:180 - InsertUnaryOp IINC -1 newCapacity
   * 72 Weak Mutation 151: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:181 - DeleteField: _set[Ljava/lang/Object;
   * 73 Weak Mutation 171: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - ReplaceVariable i -> newCapacity
   * 74 Weak Mutation 170: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - InsertUnaryOp IINC -1 i
   * 75 Weak Mutation 169: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - InsertUnaryOp IINC 1 i
   * 76 Weak Mutation 168: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - InsertUnaryOp Negation of i
   * 77 Weak Mutation 175: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - ReplaceComparisonOperator <= -> -1
   * 78 Weak Mutation 174: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - ReplaceComparisonOperator <= -> <
   * 79 Weak Mutation 172: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - ReplaceVariable i -> oldCapacity
   * 80 Weak Mutation 163: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - InsertUnaryOp Negation of oldCapacity
   * 81 Weak Mutation 162: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - ReplaceVariable oldCapacity -> newCapacity
   * 82 Weak Mutation 161: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:183 - DeleteStatement: fill([CC)V
   * 83 Weak Mutation 160: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:183 - DeleteField: no_entry_valueC
   * 84 Weak Mutation 167: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - ReplaceVariable i -> oldCapacity
   * 85 Weak Mutation 166: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - ReplaceVariable i -> newCapacity
   * 86 Weak Mutation 165: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - InsertUnaryOp IINC -1 oldCapacity
   * 87 Weak Mutation 164: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - InsertUnaryOp IINC 1 oldCapacity
   * 88 Weak Mutation 186: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceVariable i -> newCapacity
   * 89 Weak Mutation 187: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceVariable i -> oldCapacity
   * 90 Weak Mutation 184: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceComparisonOperator == -> !=
   * 91 Weak Mutation 185: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceVariable oldKeys -> _set
   * 92 Weak Mutation 190: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - InsertUnaryOp IINC -1 i
   * 93 Weak Mutation 191: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceVariable REMOVED -> FREE
   * 94 Weak Mutation 188: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - InsertUnaryOp Negation of i
   * 95 Weak Mutation 189: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - InsertUnaryOp IINC 1 i
   * 96 Weak Mutation 178: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceVariable i -> oldCapacity
   * 97 Weak Mutation 179: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - InsertUnaryOp Negation of i
   * 98 Weak Mutation 176: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceVariable oldKeys -> _set
   * 99 Weak Mutation 177: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceVariable i -> newCapacity
   * 100 Weak Mutation 182: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceVariable FREE -> REMOVED
   * 101 Weak Mutation 183: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - DeleteField: FREELjava/lang/Object;
   * 102 Weak Mutation 180: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - InsertUnaryOp IINC 1 i
   * 103 Weak Mutation 181: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - InsertUnaryOp IINC -1 i
   * 104 Weak Mutation 205: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:189 - ReplaceVariable index -> i
   * 105 Weak Mutation 204: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:189 - ReplaceVariable index -> oldCapacity
   * 106 Weak Mutation 207: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:189 - InsertUnaryOp IINC 1 index
   * 107 Weak Mutation 206: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:189 - InsertUnaryOp Negation of index
   * 108 Weak Mutation 201: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:188 - ReplaceVariable o -> REMOVED
   * 109 Weak Mutation 200: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:188 - ReplaceVariable o -> FREE
   * 110 Weak Mutation 203: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:189 - ReplaceVariable index -> newCapacity
   * 111 Weak Mutation 202: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:188 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 112 Weak Mutation 197: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:187 - InsertUnaryOp Negation of i
   * 113 Weak Mutation 196: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:187 - ReplaceVariable i -> oldCapacity
   * 114 Weak Mutation 199: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:187 - InsertUnaryOp IINC -1 i
   * 115 Weak Mutation 198: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:187 - InsertUnaryOp IINC 1 i
   * 116 Weak Mutation 193: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceComparisonOperator == -> !=
   * 117 Weak Mutation 192: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - DeleteField: REMOVEDLjava/lang/Object;
   * 118 Weak Mutation 195: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:187 - ReplaceVariable i -> newCapacity
   * 119 Weak Mutation 194: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:187 - ReplaceVariable oldKeys -> _set
   * 120 Weak Mutation 208: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:189 - InsertUnaryOp IINC -1 index
   * 121 Weak Mutation 209: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:189 - ReplaceComparisonOperator >= -> ==
   * 122 Weak Mutation 686: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:458 - InsertUnaryOp Negation of newValue
   * 123 Weak Mutation 684: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:458 - ReplaceVariable newValue -> adjust_amount
   * 124 Weak Mutation 683: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:455 - DeleteStatement: postInsertHook(Z)V
   * 125 Weak Mutation 682: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:455 - DeleteField: consumeFreeSlotZ
   * 126 Weak Mutation 681: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:455 - InsertUnaryOp Negation
   * 127 Weak Mutation 680: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:454 - ReplaceComparisonOperator == -> !=
   * 128 Weak Mutation 679: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:454 - InsertUnaryOp Negation of isNewMapping
   * 129 Weak Mutation 678: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:449 - ReplaceConstant - 1 -> 0
   * 130 Weak Mutation 677: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:448 - InsertUnaryOp IINC -1 put_amount
   * 131 Weak Mutation 676: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:448 - InsertUnaryOp IINC 1 put_amount
   * 132 Weak Mutation 675: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:448 - InsertUnaryOp Negation of put_amount
   * 133 Weak Mutation 674: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:448 - ReplaceVariable put_amount -> adjust_amount
   * 134 Weak Mutation 673: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:448 - InsertUnaryOp IINC -1 index
   * 135 Weak Mutation 672: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:448 - InsertUnaryOp IINC 1 index
   * 136 Weak Mutation 645: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:443 - InsertUnaryOp IINC -1 index
   * 137 Weak Mutation 644: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:443 - InsertUnaryOp IINC 1 index
   * 138 Weak Mutation 646: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:443 - ReplaceComparisonOperator >= -> ==
   * 139 Weak Mutation 641: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:440 - ReplaceVariable key -> REMOVED
   * 140 Weak Mutation 640: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:440 - ReplaceVariable key -> FREE
   * 141 Weak Mutation 643: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:443 - InsertUnaryOp Negation of index
   * 142 Weak Mutation 642: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:440 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 143 Weak Mutation 670: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:448 - DeleteField: _values[C
   * 144 Weak Mutation 671: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:448 - InsertUnaryOp Negation of index
   * 145 gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - true
   * 146 gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - false
   * 147 gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - true
   */

  @Test
  public void test1()  throws Throwable  {
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>((-301), (-1394.9487F), 'p');
      char char0 = tObjectCharHashMap0.adjustOrPutValue((Integer) (-301), '~', 'G');
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      assertEquals('G', char0);
  }

  //Test case number: 2
  /*
   * 161 covered goals:
   * 1 Weak Mutation 210: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:189 - ReplaceComparisonOperator >= -> >
   * 2 Weak Mutation 286: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:245 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 3 Weak Mutation 285: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:245 - ReplaceVariable key -> REMOVED
   * 4 Weak Mutation 284: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:245 - ReplaceVariable key -> FREE
   * 5 Weak Mutation 287: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:246 - InsertUnaryOp Negation of index
   * 6 Weak Mutation 288: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:246 - InsertUnaryOp IINC 1 index
   * 7 Weak Mutation 289: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:246 - InsertUnaryOp IINC -1 index
   * 8 Weak Mutation 290: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:246 - ReplaceComparisonOperator >= -> ==
   * 9 Weak Mutation 291: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:246 - ReplaceComparisonOperator >= -> >
   * 10 Weak Mutation 305: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:248 - InsertUnaryOp Negation of index
   * 11 Weak Mutation 304: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:248 - InsertUnaryOp IINC -1 value
   * 12 Weak Mutation 307: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:248 - InsertUnaryOp IINC -1 index
   * 13 Weak Mutation 306: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:248 - InsertUnaryOp IINC 1 index
   * 14 Weak Mutation 302: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:248 - InsertUnaryOp Negation of value
   * 15 Weak Mutation 303: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:248 - InsertUnaryOp IINC 1 value
   * 16 Weak Mutation 308: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:253 - DeleteField: no_entry_valueC
   * 17 Weak Mutation 312: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:255 - ReplaceComparisonOperator >= -> >
   * 18 gnu.trove.map.hash.TObjectCharHashMap.<init>(IF)V: root-Branch
   * 19 gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C: I9 Branch 20 IFGE L246 - true
   * 20 Weak Mutation 0: gnu.trove.map.hash.TObjectCharHashMap$1.execute(Ljava/lang/Object;C)Z:63 - DeleteField: this$0Lgnu/trove/map/hash/TObjectCharHashMap;
   * 21 Weak Mutation 1: gnu.trove.map.hash.TObjectCharHashMap$1.execute(Ljava/lang/Object;C)Z:63 - InsertUnaryOp Negation of value
   * 22 Weak Mutation 2: gnu.trove.map.hash.TObjectCharHashMap$1.execute(Ljava/lang/Object;C)Z:63 - InsertUnaryOp IINC 1 value
   * 23 Weak Mutation 3: gnu.trove.map.hash.TObjectCharHashMap$1.execute(Ljava/lang/Object;C)Z:63 - InsertUnaryOp IINC -1 value
   * 24 Weak Mutation 4: gnu.trove.map.hash.TObjectCharHashMap$1.execute(Ljava/lang/Object;C)Z:63 - DeleteStatement: put(Ljava/lang/Object;C)C
   * 25 Weak Mutation 5: gnu.trove.map.hash.TObjectCharHashMap$1.execute(Ljava/lang/Object;C)Z:64 - ReplaceConstant - 1 -> 0
   * 26 Weak Mutation 152: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:181 - ReplaceVariable FREE -> REMOVED
   * 27 Weak Mutation 153: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:181 - DeleteField: FREELjava/lang/Object;
   * 28 Weak Mutation 154: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:181 - DeleteStatement: fill([Ljava/lang/Object;Ljava/lang/Object;)V
   * 29 Weak Mutation 155: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:182 - ReplaceVariable newCapacity -> oldCapacity
   * 30 Weak Mutation 156: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:182 - InsertUnaryOp Negation of newCapacity
   * 31 Weak Mutation 157: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:182 - InsertUnaryOp IINC 1 newCapacity
   * 32 Weak Mutation 158: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:182 - InsertUnaryOp IINC -1 newCapacity
   * 33 Weak Mutation 159: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:183 - DeleteField: _values[C
   * 34 Weak Mutation 144: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:174 - DeleteField: _set[Ljava/lang/Object;
   * 35 Weak Mutation 145: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:177 - DeleteField: _set[Ljava/lang/Object;
   * 36 Weak Mutation 146: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:178 - DeleteField: _values[C
   * 37 Weak Mutation 147: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:180 - ReplaceVariable newCapacity -> oldCapacity
   * 38 Weak Mutation 148: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:180 - InsertUnaryOp Negation of newCapacity
   * 39 Weak Mutation 149: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:180 - InsertUnaryOp IINC 1 newCapacity
   * 40 Weak Mutation 150: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:180 - InsertUnaryOp IINC -1 newCapacity
   * 41 Weak Mutation 151: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:181 - DeleteField: _set[Ljava/lang/Object;
   * 42 Weak Mutation 171: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - ReplaceVariable i -> newCapacity
   * 43 Weak Mutation 170: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - InsertUnaryOp IINC -1 i
   * 44 Weak Mutation 169: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - InsertUnaryOp IINC 1 i
   * 45 Weak Mutation 168: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - InsertUnaryOp Negation of i
   * 46 Weak Mutation 175: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - ReplaceComparisonOperator <= -> -1
   * 47 Weak Mutation 174: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - ReplaceComparisonOperator <= -> <
   * 48 Weak Mutation 172: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - ReplaceVariable i -> oldCapacity
   * 49 Weak Mutation 163: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - InsertUnaryOp Negation of oldCapacity
   * 50 Weak Mutation 162: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - ReplaceVariable oldCapacity -> newCapacity
   * 51 Weak Mutation 161: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:183 - DeleteStatement: fill([CC)V
   * 52 Weak Mutation 160: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:183 - DeleteField: no_entry_valueC
   * 53 Weak Mutation 167: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - ReplaceVariable i -> oldCapacity
   * 54 Weak Mutation 166: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - ReplaceVariable i -> newCapacity
   * 55 Weak Mutation 165: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - InsertUnaryOp IINC -1 oldCapacity
   * 56 Weak Mutation 164: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:185 - InsertUnaryOp IINC 1 oldCapacity
   * 57 Weak Mutation 186: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceVariable i -> newCapacity
   * 58 Weak Mutation 187: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceVariable i -> oldCapacity
   * 59 Weak Mutation 184: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceComparisonOperator == -> !=
   * 60 Weak Mutation 185: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceVariable oldKeys -> _set
   * 61 Weak Mutation 190: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - InsertUnaryOp IINC -1 i
   * 62 Weak Mutation 191: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceVariable REMOVED -> FREE
   * 63 Weak Mutation 188: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - InsertUnaryOp Negation of i
   * 64 Weak Mutation 189: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - InsertUnaryOp IINC 1 i
   * 65 Weak Mutation 178: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceVariable i -> oldCapacity
   * 66 Weak Mutation 179: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - InsertUnaryOp Negation of i
   * 67 Weak Mutation 176: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceVariable oldKeys -> _set
   * 68 Weak Mutation 177: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceVariable i -> newCapacity
   * 69 Weak Mutation 182: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceVariable FREE -> REMOVED
   * 70 Weak Mutation 183: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - DeleteField: FREELjava/lang/Object;
   * 71 Weak Mutation 180: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - InsertUnaryOp IINC 1 i
   * 72 Weak Mutation 181: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - InsertUnaryOp IINC -1 i
   * 73 Weak Mutation 205: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:189 - ReplaceVariable index -> i
   * 74 Weak Mutation 204: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:189 - ReplaceVariable index -> oldCapacity
   * 75 Weak Mutation 207: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:189 - InsertUnaryOp IINC 1 index
   * 76 Weak Mutation 206: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:189 - InsertUnaryOp Negation of index
   * 77 Weak Mutation 201: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:188 - ReplaceVariable o -> REMOVED
   * 78 Weak Mutation 200: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:188 - ReplaceVariable o -> FREE
   * 79 Weak Mutation 203: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:189 - ReplaceVariable index -> newCapacity
   * 80 Weak Mutation 202: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:188 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 81 Weak Mutation 197: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:187 - InsertUnaryOp Negation of i
   * 82 Weak Mutation 196: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:187 - ReplaceVariable i -> oldCapacity
   * 83 Weak Mutation 199: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:187 - InsertUnaryOp IINC -1 i
   * 84 Weak Mutation 198: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:187 - InsertUnaryOp IINC 1 i
   * 85 Weak Mutation 193: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - ReplaceComparisonOperator == -> !=
   * 86 Weak Mutation 192: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:186 - DeleteField: REMOVEDLjava/lang/Object;
   * 87 Weak Mutation 195: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:187 - ReplaceVariable i -> newCapacity
   * 88 Weak Mutation 194: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:187 - ReplaceVariable oldKeys -> _set
   * 89 Weak Mutation 208: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:189 - InsertUnaryOp IINC -1 index
   * 90 Weak Mutation 209: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:189 - ReplaceComparisonOperator >= -> ==
   * 91 Weak Mutation 0: gnu.trove.map.hash.TObjectCharHashMap$1.execute(Ljava/lang/Object;C)Z:63 - DeleteField: this$0Lgnu/trove/map/hash/TObjectCharHashMap;
   * 92 Weak Mutation 1: gnu.trove.map.hash.TObjectCharHashMap$1.execute(Ljava/lang/Object;C)Z:63 - InsertUnaryOp Negation of value
   * 93 Weak Mutation 2: gnu.trove.map.hash.TObjectCharHashMap$1.execute(Ljava/lang/Object;C)Z:63 - InsertUnaryOp IINC 1 value
   * 94 Weak Mutation 3: gnu.trove.map.hash.TObjectCharHashMap$1.execute(Ljava/lang/Object;C)Z:63 - InsertUnaryOp IINC -1 value
   * 95 Weak Mutation 4: gnu.trove.map.hash.TObjectCharHashMap$1.execute(Ljava/lang/Object;C)Z:63 - DeleteStatement: put(Ljava/lang/Object;C)C
   * 96 Weak Mutation 5: gnu.trove.map.hash.TObjectCharHashMap$1.execute(Ljava/lang/Object;C)Z:64 - ReplaceConstant - 1 -> 0
   * 97 Weak Mutation 210: gnu.trove.map.hash.TObjectCharHashMap.rehash(I)V:189 - ReplaceComparisonOperator >= -> >
   * 98 Weak Mutation 275: gnu.trove.map.hash.TObjectCharHashMap.put(Ljava/lang/Object;C)C:238 - ReplaceVariable key -> FREE
   * 99 Weak Mutation 279: gnu.trove.map.hash.TObjectCharHashMap.put(Ljava/lang/Object;C)C:239 - InsertUnaryOp IINC 1 value
   * 100 Weak Mutation 278: gnu.trove.map.hash.TObjectCharHashMap.put(Ljava/lang/Object;C)C:239 - InsertUnaryOp Negation of value
   * 101 Weak Mutation 277: gnu.trove.map.hash.TObjectCharHashMap.put(Ljava/lang/Object;C)C:238 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 102 Weak Mutation 276: gnu.trove.map.hash.TObjectCharHashMap.put(Ljava/lang/Object;C)C:238 - ReplaceVariable key -> REMOVED
   * 103 Weak Mutation 283: gnu.trove.map.hash.TObjectCharHashMap.put(Ljava/lang/Object;C)C:239 - InsertUnaryOp IINC -1 index
   * 104 Weak Mutation 282: gnu.trove.map.hash.TObjectCharHashMap.put(Ljava/lang/Object;C)C:239 - InsertUnaryOp IINC 1 index
   * 105 Weak Mutation 281: gnu.trove.map.hash.TObjectCharHashMap.put(Ljava/lang/Object;C)C:239 - InsertUnaryOp Negation of index
   * 106 Weak Mutation 280: gnu.trove.map.hash.TObjectCharHashMap.put(Ljava/lang/Object;C)C:239 - InsertUnaryOp IINC -1 value
   * 107 Weak Mutation 287: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:246 - InsertUnaryOp Negation of index
   * 108 Weak Mutation 286: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:245 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 109 Weak Mutation 285: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:245 - ReplaceVariable key -> REMOVED
   * 110 Weak Mutation 284: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:245 - ReplaceVariable key -> FREE
   * 111 Weak Mutation 305: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:248 - InsertUnaryOp Negation of index
   * 112 Weak Mutation 304: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:248 - InsertUnaryOp IINC -1 value
   * 113 Weak Mutation 307: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:248 - InsertUnaryOp IINC -1 index
   * 114 Weak Mutation 306: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:248 - InsertUnaryOp IINC 1 index
   * 115 Weak Mutation 309: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:254 - ReplaceConstant - 1 -> 0
   * 116 Weak Mutation 308: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:253 - DeleteField: no_entry_valueC
   * 117 Weak Mutation 311: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:255 - ReplaceComparisonOperator >= -> ==
   * 118 Weak Mutation 310: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:255 - InsertUnaryOp Negation of index
   * 119 Weak Mutation 312: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:255 - ReplaceComparisonOperator >= -> >
   * 120 Weak Mutation 288: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:246 - InsertUnaryOp IINC 1 index
   * 121 Weak Mutation 289: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:246 - InsertUnaryOp IINC -1 index
   * 122 Weak Mutation 290: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:246 - ReplaceComparisonOperator >= -> ==
   * 123 Weak Mutation 291: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:246 - ReplaceComparisonOperator >= -> >
   * 124 Weak Mutation 302: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:248 - InsertUnaryOp Negation of value
   * 125 Weak Mutation 303: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:248 - InsertUnaryOp IINC 1 value
   * 126 Weak Mutation 339: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:266 - InsertUnaryOp Negation of previous
   * 127 Weak Mutation 338: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:266 - ReplaceVariable previous -> value
   * 128 Weak Mutation 337: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:264 - DeleteStatement: postInsertHook(Z)V
   * 129 Weak Mutation 336: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:264 - DeleteField: consumeFreeSlotZ
   * 130 Weak Mutation 326: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:261 - InsertUnaryOp Negation of index
   * 131 Weak Mutation 327: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:261 - InsertUnaryOp IINC 1 index
   * 132 Weak Mutation 325: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:261 - DeleteField: _values[C
   * 133 Weak Mutation 334: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:263 - ReplaceComparisonOperator == -> !=
   * 134 Weak Mutation 335: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:264 - InsertUnaryOp Negation
   * 135 Weak Mutation 332: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:261 - InsertUnaryOp IINC -1 value
   * 136 Weak Mutation 333: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:263 - InsertUnaryOp Negation of isNewMapping
   * 137 Weak Mutation 330: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:261 - InsertUnaryOp Negation of value
   * 138 Weak Mutation 331: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:261 - InsertUnaryOp IINC 1 value
   * 139 Weak Mutation 328: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:261 - InsertUnaryOp IINC -1 index
   * 140 Weak Mutation 329: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:261 - ReplaceVariable value -> previous
   * 141 Weak Mutation 747: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - DeleteStatement: execute(Ljava/lang/Object;C)Z
   * 142 Weak Mutation 746: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 143 Weak Mutation 745: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 144 Weak Mutation 744: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 145 Weak Mutation 748: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - ReplaceComparisonOperator != -> ==
   * 146 Weak Mutation 739: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - ReplaceComparisonOperator == -> !=
   * 147 Weak Mutation 738: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - DeleteField: REMOVEDLjava/lang/Object;
   * 148 Weak Mutation 737: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - ReplaceVariable REMOVED -> FREE
   * 149 Weak Mutation 736: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 150 Weak Mutation 743: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 151 Weak Mutation 742: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 152 Weak Mutation 741: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 153 Weak Mutation 734: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 154 Weak Mutation 735: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 155 gnu.trove.map.hash.TObjectCharHashMap.put(Ljava/lang/Object;C)C: root-Branch
   * 156 gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - false
   * 157 gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I30 Branch 49 IF_ACMPEQ L507 - false
   * 158 gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I39 Branch 50 IFNE L507 - true
   * 159 gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C: I12 Branch 21 IFGE L255 - true
   * 160 gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C: I41 Branch 22 IFEQ L263 - false
   * 161 gnu.trove.map.hash.TObjectCharHashMap$1.execute(Ljava/lang/Object;C)Z: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(847, 847);
      tObjectCharHashMap0.putIfAbsent("", 'r');
      TObjectCharHashMap<Object> tObjectCharHashMap1 = new TObjectCharHashMap<Object>(847, 367.94397F, 'L');
      tObjectCharHashMap1.put((Object) null, '\"');
      tObjectCharHashMap0.putIfAbsent(",", '\u0000');
      tObjectCharHashMap1.putAll((TObjectCharMap<?>) tObjectCharHashMap0);
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      assertEquals("{,=\u0000,null=\",=r}", tObjectCharHashMap1.toString());
  }

  //Test case number: 3
  /*
   * 8 covered goals:
   * 1 Weak Mutation 227: gnu.trove.map.hash.TObjectCharHashMap.containsKey(Ljava/lang/Object;)Z:209 - DeleteStatement: contains(Ljava/lang/Object;)Z
   * 2 Weak Mutation 226: gnu.trove.map.hash.TObjectCharHashMap.containsKey(Ljava/lang/Object;)Z:209 - ReplaceVariable key -> REMOVED
   * 3 Weak Mutation 225: gnu.trove.map.hash.TObjectCharHashMap.containsKey(Ljava/lang/Object;)Z:209 - ReplaceVariable key -> FREE
   * 4 gnu.trove.map.hash.TObjectCharHashMap.containsKey(Ljava/lang/Object;)Z: root-Branch
   * 5 gnu.trove.map.hash.TObjectCharHashMap.<init>()V: root-Branch
   * 6 Weak Mutation 227: gnu.trove.map.hash.TObjectCharHashMap.containsKey(Ljava/lang/Object;)Z:209 - DeleteStatement: contains(Ljava/lang/Object;)Z
   * 7 Weak Mutation 226: gnu.trove.map.hash.TObjectCharHashMap.containsKey(Ljava/lang/Object;)Z:209 - ReplaceVariable key -> REMOVED
   * 8 Weak Mutation 225: gnu.trove.map.hash.TObjectCharHashMap.containsKey(Ljava/lang/Object;)Z:209 - ReplaceVariable key -> FREE
   */

  @Test
  public void test3()  throws Throwable  {
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>();
      tObjectCharHashMap0.containsKey((Object) null);
      assertEquals(23, tObjectCharHashMap0.capacity());
  }

  //Test case number: 4
  /*
   * 46 covered goals:
   * 1 Weak Mutation 254: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp IINC 1 i
   * 2 Weak Mutation 255: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp IINC -1 i
   * 3 Weak Mutation 252: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp IINC -1 val
   * 4 Weak Mutation 253: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp Negation of i
   * 5 Weak Mutation 250: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp Negation of val
   * 6 Weak Mutation 251: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp IINC 1 val
   * 7 Weak Mutation 248: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - DeleteField: REMOVEDLjava/lang/Object;
   * 8 Weak Mutation 249: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - ReplaceComparisonOperator == -> !=
   * 9 Weak Mutation 246: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp IINC -1 i
   * 10 Weak Mutation 247: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - ReplaceVariable REMOVED -> FREE
   * 11 Weak Mutation 244: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp Negation of i
   * 12 Weak Mutation 245: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp IINC 1 i
   * 13 Weak Mutation 256: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - ReplaceComparisonOperator != -> >
   * 14 gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z: I25 Branch 16 IF_ACMPEQ L219 - false
   * 15 gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z: I30 Branch 17 IF_ACMPEQ L219 - false
   * 16 gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z: I35 Branch 18 IF_ICMPNE L219 - true
   * 17 Weak Mutation 239: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp IINC -1 i
   * 18 Weak Mutation 238: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp IINC 1 i
   * 19 Weak Mutation 237: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp Negation of i
   * 20 Weak Mutation 235: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:218 - ReplaceComparisonOperator <= -> -1
   * 21 Weak Mutation 234: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:218 - ReplaceComparisonOperator <= -> <
   * 22 Weak Mutation 232: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:218 - InsertUnaryOp IINC -1 i
   * 23 Weak Mutation 231: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:218 - InsertUnaryOp IINC 1 i
   * 24 Weak Mutation 230: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:218 - InsertUnaryOp Negation of i
   * 25 Weak Mutation 229: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:216 - DeleteField: _values[C
   * 26 Weak Mutation 228: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:215 - DeleteField: _set[Ljava/lang/Object;
   * 27 Weak Mutation 254: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp IINC 1 i
   * 28 Weak Mutation 255: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp IINC -1 i
   * 29 Weak Mutation 252: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp IINC -1 val
   * 30 Weak Mutation 253: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp Negation of i
   * 31 Weak Mutation 250: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp Negation of val
   * 32 Weak Mutation 251: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp IINC 1 val
   * 33 Weak Mutation 248: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - DeleteField: REMOVEDLjava/lang/Object;
   * 34 Weak Mutation 249: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - ReplaceComparisonOperator == -> !=
   * 35 Weak Mutation 246: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp IINC -1 i
   * 36 Weak Mutation 247: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - ReplaceVariable REMOVED -> FREE
   * 37 Weak Mutation 244: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp Negation of i
   * 38 Weak Mutation 245: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp IINC 1 i
   * 39 Weak Mutation 242: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - ReplaceComparisonOperator == -> !=
   * 40 Weak Mutation 240: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - ReplaceVariable FREE -> REMOVED
   * 41 Weak Mutation 241: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - DeleteField: FREELjava/lang/Object;
   * 42 Weak Mutation 256: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - ReplaceComparisonOperator != -> >
   * 43 Weak Mutation 260: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:223 - ReplaceConstant - 0 -> 1
   * 44 gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z: I18 Branch 15 IFLE L218 - true
   * 45 gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z: I18 Branch 15 IFLE L218 - false
   * 46 gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z: I25 Branch 16 IF_ACMPEQ L219 - true
   */

  @Test
  public void test4()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(847, 847);
      tObjectCharHashMap0.putIfAbsent("", 'r');
      boolean boolean0 = tObjectCharHashMap0.containsValue('\"');
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 28 covered goals:
   * 1 Weak Mutation 257: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - ReplaceComparisonOperator != -> <
   * 2 Weak Mutation 239: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp IINC -1 i
   * 3 Weak Mutation 238: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp IINC 1 i
   * 4 Weak Mutation 237: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp Negation of i
   * 5 Weak Mutation 235: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:218 - ReplaceComparisonOperator <= -> -1
   * 6 Weak Mutation 234: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:218 - ReplaceComparisonOperator <= -> <
   * 7 Weak Mutation 232: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:218 - InsertUnaryOp IINC -1 i
   * 8 Weak Mutation 231: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:218 - InsertUnaryOp IINC 1 i
   * 9 Weak Mutation 230: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:218 - InsertUnaryOp Negation of i
   * 10 Weak Mutation 229: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:216 - DeleteField: _values[C
   * 11 Weak Mutation 228: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:215 - DeleteField: _set[Ljava/lang/Object;
   * 12 Weak Mutation 254: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp IINC 1 i
   * 13 Weak Mutation 255: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp IINC -1 i
   * 14 Weak Mutation 252: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp IINC -1 val
   * 15 Weak Mutation 253: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp Negation of i
   * 16 Weak Mutation 250: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp Negation of val
   * 17 Weak Mutation 251: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp IINC 1 val
   * 18 Weak Mutation 248: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - DeleteField: REMOVEDLjava/lang/Object;
   * 19 Weak Mutation 249: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - ReplaceComparisonOperator == -> !=
   * 20 Weak Mutation 246: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp IINC -1 i
   * 21 Weak Mutation 247: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - ReplaceVariable REMOVED -> FREE
   * 22 Weak Mutation 244: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp Negation of i
   * 23 Weak Mutation 245: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - InsertUnaryOp IINC 1 i
   * 24 Weak Mutation 242: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - ReplaceComparisonOperator == -> !=
   * 25 Weak Mutation 240: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - ReplaceVariable FREE -> REMOVED
   * 26 Weak Mutation 241: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - DeleteField: FREELjava/lang/Object;
   * 27 Weak Mutation 260: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:223 - ReplaceConstant - 0 -> 1
   * 28 Weak Mutation 257: gnu.trove.map.hash.TObjectCharHashMap.containsValue(C)Z:219 - ReplaceComparisonOperator != -> <
   */

  @Test
  public void test5()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(847, 847);
      tObjectCharHashMap0.putIfAbsent(",", '\u0000');
      boolean boolean0 = tObjectCharHashMap0.containsValue('\"');
      assertEquals("{,=\u0000}", tObjectCharHashMap0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 17 covered goals:
   * 1 Weak Mutation 262: gnu.trove.map.hash.TObjectCharHashMap.get(Ljava/lang/Object;)C:229 - ReplaceVariable key -> REMOVED
   * 2 Weak Mutation 263: gnu.trove.map.hash.TObjectCharHashMap.get(Ljava/lang/Object;)C:229 - DeleteStatement: index(Ljava/lang/Object;)I
   * 3 Weak Mutation 261: gnu.trove.map.hash.TObjectCharHashMap.get(Ljava/lang/Object;)C:229 - ReplaceVariable key -> FREE
   * 4 Weak Mutation 266: gnu.trove.map.hash.TObjectCharHashMap.get(Ljava/lang/Object;)C:230 - InsertUnaryOp IINC -1 index
   * 5 Weak Mutation 264: gnu.trove.map.hash.TObjectCharHashMap.get(Ljava/lang/Object;)C:230 - InsertUnaryOp Negation of index
   * 6 Weak Mutation 265: gnu.trove.map.hash.TObjectCharHashMap.get(Ljava/lang/Object;)C:230 - InsertUnaryOp IINC 1 index
   * 7 Weak Mutation 270: gnu.trove.map.hash.TObjectCharHashMap.get(Ljava/lang/Object;)C:230 - DeleteField: no_entry_valueC
   * 8 Weak Mutation 269: gnu.trove.map.hash.TObjectCharHashMap.get(Ljava/lang/Object;)C:230 - ReplaceComparisonOperator >= -> -1
   * 9 gnu.trove.map.hash.TObjectCharHashMap.get(Ljava/lang/Object;)C: I9 Branch 19 IFGE L230 - false
   * 10 Weak Mutation 262: gnu.trove.map.hash.TObjectCharHashMap.get(Ljava/lang/Object;)C:229 - ReplaceVariable key -> REMOVED
   * 11 Weak Mutation 263: gnu.trove.map.hash.TObjectCharHashMap.get(Ljava/lang/Object;)C:229 - DeleteStatement: index(Ljava/lang/Object;)I
   * 12 Weak Mutation 261: gnu.trove.map.hash.TObjectCharHashMap.get(Ljava/lang/Object;)C:229 - ReplaceVariable key -> FREE
   * 13 Weak Mutation 266: gnu.trove.map.hash.TObjectCharHashMap.get(Ljava/lang/Object;)C:230 - InsertUnaryOp IINC -1 index
   * 14 Weak Mutation 264: gnu.trove.map.hash.TObjectCharHashMap.get(Ljava/lang/Object;)C:230 - InsertUnaryOp Negation of index
   * 15 Weak Mutation 265: gnu.trove.map.hash.TObjectCharHashMap.get(Ljava/lang/Object;)C:230 - InsertUnaryOp IINC 1 index
   * 16 Weak Mutation 270: gnu.trove.map.hash.TObjectCharHashMap.get(Ljava/lang/Object;)C:230 - DeleteField: no_entry_valueC
   * 17 Weak Mutation 269: gnu.trove.map.hash.TObjectCharHashMap.get(Ljava/lang/Object;)C:230 - ReplaceComparisonOperator >= -> -1
   */

  @Test
  public void test6()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(1, (float) 1, 'b');
      char char0 = tObjectCharHashMap0.get((Object) null);
      assertEquals('b', char0);
  }

  //Test case number: 7
  /*
   * 21 covered goals:
   * 1 Weak Mutation 299: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:247 - ReplaceArithmeticOperator - -> %
   * 2 Weak Mutation 292: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:246 - ReplaceComparisonOperator >= -> -1
   * 3 Weak Mutation 293: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:247 - DeleteField: _values[C
   * 4 Weak Mutation 294: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:247 - InsertUnaryOp Negation of index
   * 5 Weak Mutation 295: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:247 - InsertUnaryOp IINC 1 index
   * 6 Weak Mutation 296: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:247 - InsertUnaryOp IINC -1 index
   * 7 Weak Mutation 297: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:247 - ReplaceConstant - 1 -> 0
   * 8 Weak Mutation 298: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:247 - ReplaceArithmeticOperator - -> +
   * 9 Weak Mutation 300: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:247 - ReplaceArithmeticOperator - -> /
   * 10 Weak Mutation 301: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:247 - ReplaceArithmeticOperator - -> *
   * 11 Weak Mutation 292: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:246 - ReplaceComparisonOperator >= -> -1
   * 12 Weak Mutation 293: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:247 - DeleteField: _values[C
   * 13 Weak Mutation 294: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:247 - InsertUnaryOp Negation of index
   * 14 Weak Mutation 295: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:247 - InsertUnaryOp IINC 1 index
   * 15 Weak Mutation 296: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:247 - InsertUnaryOp IINC -1 index
   * 16 Weak Mutation 297: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:247 - ReplaceConstant - 1 -> 0
   * 17 Weak Mutation 298: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:247 - ReplaceArithmeticOperator - -> +
   * 18 Weak Mutation 299: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:247 - ReplaceArithmeticOperator - -> %
   * 19 Weak Mutation 300: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:247 - ReplaceArithmeticOperator - -> /
   * 20 Weak Mutation 301: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:247 - ReplaceArithmeticOperator - -> *
   * 21 gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C: I9 Branch 20 IFGE L246 - false
   */

  @Test
  public void test7()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(847, 847);
      tObjectCharHashMap0.putIfAbsent("7jri*`Iv", 'r');
      char char0 = tObjectCharHashMap0.putIfAbsent("7jri*`Iv", 'w');
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      assertEquals('r', char0);
  }

  //Test case number: 8
  /*
   * 26 covered goals:
   * 1 Weak Mutation 317: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:256 - ReplaceArithmeticOperator - -> %
   * 2 Weak Mutation 313: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:255 - ReplaceComparisonOperator >= -> -1
   * 3 Weak Mutation 315: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:256 - ReplaceConstant - 1 -> 0
   * 4 Weak Mutation 314: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:256 - InsertUnaryOp Negation of index
   * 5 Weak Mutation 316: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:256 - ReplaceArithmeticOperator - -> +
   * 6 Weak Mutation 319: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:256 - ReplaceArithmeticOperator - -> *
   * 7 Weak Mutation 318: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:256 - ReplaceArithmeticOperator - -> /
   * 8 Weak Mutation 324: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:258 - ReplaceConstant - 0 -> 1
   * 9 Weak Mutation 322: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:257 - InsertUnaryOp IINC 1 index
   * 10 Weak Mutation 323: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:257 - InsertUnaryOp IINC -1 index
   * 11 Weak Mutation 320: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:257 - DeleteField: _values[C
   * 12 Weak Mutation 321: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:257 - InsertUnaryOp Negation of index
   * 13 Weak Mutation 313: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:255 - ReplaceComparisonOperator >= -> -1
   * 14 Weak Mutation 315: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:256 - ReplaceConstant - 1 -> 0
   * 15 Weak Mutation 314: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:256 - InsertUnaryOp Negation of index
   * 16 Weak Mutation 317: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:256 - ReplaceArithmeticOperator - -> %
   * 17 Weak Mutation 316: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:256 - ReplaceArithmeticOperator - -> +
   * 18 Weak Mutation 319: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:256 - ReplaceArithmeticOperator - -> *
   * 19 Weak Mutation 318: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:256 - ReplaceArithmeticOperator - -> /
   * 20 Weak Mutation 324: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:258 - ReplaceConstant - 0 -> 1
   * 21 Weak Mutation 322: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:257 - InsertUnaryOp IINC 1 index
   * 22 Weak Mutation 323: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:257 - InsertUnaryOp IINC -1 index
   * 23 Weak Mutation 320: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:257 - DeleteField: _values[C
   * 24 Weak Mutation 321: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:257 - InsertUnaryOp Negation of index
   * 25 gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C: I12 Branch 21 IFGE L255 - false
   * 26 gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C: I41 Branch 22 IFEQ L263 - true
   */

  @Test
  public void test8()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(847, 847);
      tObjectCharHashMap0.putIfAbsent("7jri*`Iv", 'r');
      char char0 = tObjectCharHashMap0.put("7jri*`Iv", 't');
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      assertEquals('r', char0);
  }

  //Test case number: 9
  /*
   * 48 covered goals:
   * 1 Weak Mutation 365: gnu.trove.map.hash.TObjectCharHashMap.removeAt(I)V:290 - DeleteField: no_entry_valueC
   * 2 Weak Mutation 308: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:253 - DeleteField: no_entry_valueC
   * 3 Weak Mutation 340: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:272 - DeleteField: no_entry_valueC
   * 4 Weak Mutation 351: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:275 - InsertUnaryOp Negation of index
   * 5 Weak Mutation 350: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:275 - DeleteField: _values[C
   * 6 Weak Mutation 347: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:274 - ReplaceComparisonOperator < -> !=
   * 7 Weak Mutation 368: gnu.trove.map.hash.TObjectCharHashMap.removeAt(I)V:291 - InsertUnaryOp IINC -1 index
   * 8 Weak Mutation 356: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:276 - InsertUnaryOp IINC -1 index
   * 9 Weak Mutation 357: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:276 - DeleteStatement: removeAt(I)V
   * 10 Weak Mutation 352: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:275 - InsertUnaryOp IINC 1 index
   * 11 Weak Mutation 353: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:275 - InsertUnaryOp IINC -1 index
   * 12 Weak Mutation 354: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:276 - InsertUnaryOp Negation of index
   * 13 Weak Mutation 355: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:276 - InsertUnaryOp IINC 1 index
   * 14 Weak Mutation 364: gnu.trove.map.hash.TObjectCharHashMap.removeAt(I)V:290 - InsertUnaryOp IINC -1 index
   * 15 Weak Mutation 366: gnu.trove.map.hash.TObjectCharHashMap.removeAt(I)V:291 - InsertUnaryOp Negation of index
   * 16 Weak Mutation 367: gnu.trove.map.hash.TObjectCharHashMap.removeAt(I)V:291 - InsertUnaryOp IINC 1 index
   * 17 Weak Mutation 361: gnu.trove.map.hash.TObjectCharHashMap.removeAt(I)V:290 - DeleteField: _values[C
   * 18 Weak Mutation 362: gnu.trove.map.hash.TObjectCharHashMap.removeAt(I)V:290 - InsertUnaryOp Negation of index
   * 19 Weak Mutation 363: gnu.trove.map.hash.TObjectCharHashMap.removeAt(I)V:290 - InsertUnaryOp IINC 1 index
   * 20 Weak Mutation 343: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:273 - DeleteStatement: index(Ljava/lang/Object;)I
   * 21 Weak Mutation 342: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:273 - ReplaceVariable key -> REMOVED
   * 22 Weak Mutation 341: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:273 - ReplaceVariable key -> FREE
   * 23 Weak Mutation 340: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:272 - DeleteField: no_entry_valueC
   * 24 Weak Mutation 351: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:275 - InsertUnaryOp Negation of index
   * 25 Weak Mutation 350: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:275 - DeleteField: _values[C
   * 26 Weak Mutation 347: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:274 - ReplaceComparisonOperator < -> !=
   * 27 Weak Mutation 346: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:274 - InsertUnaryOp IINC -1 index
   * 28 Weak Mutation 345: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:274 - InsertUnaryOp IINC 1 index
   * 29 Weak Mutation 344: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:274 - InsertUnaryOp Negation of index
   * 30 Weak Mutation 368: gnu.trove.map.hash.TObjectCharHashMap.removeAt(I)V:291 - InsertUnaryOp IINC -1 index
   * 31 Weak Mutation 356: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:276 - InsertUnaryOp IINC -1 index
   * 32 Weak Mutation 357: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:276 - DeleteStatement: removeAt(I)V
   * 33 Weak Mutation 358: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:278 - InsertUnaryOp Negation of prev
   * 34 Weak Mutation 359: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:278 - InsertUnaryOp IINC 1 prev
   * 35 Weak Mutation 352: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:275 - InsertUnaryOp IINC 1 index
   * 36 Weak Mutation 353: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:275 - InsertUnaryOp IINC -1 index
   * 37 Weak Mutation 354: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:276 - InsertUnaryOp Negation of index
   * 38 Weak Mutation 355: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:276 - InsertUnaryOp IINC 1 index
   * 39 Weak Mutation 364: gnu.trove.map.hash.TObjectCharHashMap.removeAt(I)V:290 - InsertUnaryOp IINC -1 index
   * 40 Weak Mutation 365: gnu.trove.map.hash.TObjectCharHashMap.removeAt(I)V:290 - DeleteField: no_entry_valueC
   * 41 Weak Mutation 366: gnu.trove.map.hash.TObjectCharHashMap.removeAt(I)V:291 - InsertUnaryOp Negation of index
   * 42 Weak Mutation 367: gnu.trove.map.hash.TObjectCharHashMap.removeAt(I)V:291 - InsertUnaryOp IINC 1 index
   * 43 Weak Mutation 360: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:278 - InsertUnaryOp IINC -1 prev
   * 44 Weak Mutation 361: gnu.trove.map.hash.TObjectCharHashMap.removeAt(I)V:290 - DeleteField: _values[C
   * 45 Weak Mutation 362: gnu.trove.map.hash.TObjectCharHashMap.removeAt(I)V:290 - InsertUnaryOp Negation of index
   * 46 Weak Mutation 363: gnu.trove.map.hash.TObjectCharHashMap.removeAt(I)V:290 - InsertUnaryOp IINC 1 index
   * 47 gnu.trove.map.hash.TObjectCharHashMap.removeAt(I)V: root-Branch
   * 48 gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C: I14 Branch 23 IFLT L274 - false
   */

  @Test
  public void test9()  throws Throwable  {
      TObjectCharHashMap<Object> tObjectCharHashMap0 = new TObjectCharHashMap<Object>(1, 1893.4332F, 'I');
      tObjectCharHashMap0.put((Object) "{}", 'B');
      assertEquals("{{}=B}", tObjectCharHashMap0.toString());
      
      char char0 = tObjectCharHashMap0.remove((Object) "{}");
      assertEquals('B', char0);
  }

  //Test case number: 10
  /*
   * 3 covered goals:
   * 1 Weak Mutation 369: gnu.trove.map.hash.TObjectCharHashMap.putAll(Ljava/util/Map;)V:299 - DeleteStatement: entrySet()Ljava/util/Set;
   * 2 Weak Mutation 369: gnu.trove.map.hash.TObjectCharHashMap.putAll(Ljava/util/Map;)V:299 - DeleteStatement: entrySet()Ljava/util/Set;
   * 3 gnu.trove.map.hash.TObjectCharHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>(847);
      // Undeclared exception!
      try {
        tObjectCharHashMap0.putAll((Map<? extends Integer, ? extends Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 11
  /*
   * 23 covered goals:
   * 1 Weak Mutation 389: gnu.trove.map.hash.TObjectCharHashMap.clear()V:316 - DeleteField: no_entry_valueC
   * 2 Weak Mutation 381: gnu.trove.map.hash.TObjectCharHashMap.clear()V:315 - ReplaceConstant - 0 -> 1
   * 3 Weak Mutation 380: gnu.trove.map.hash.TObjectCharHashMap.clear()V:315 - DeleteField: _set[Ljava/lang/Object;
   * 4 Weak Mutation 383: gnu.trove.map.hash.TObjectCharHashMap.clear()V:315 - ReplaceVariable FREE -> REMOVED
   * 5 Weak Mutation 382: gnu.trove.map.hash.TObjectCharHashMap.clear()V:315 - DeleteField: _set[Ljava/lang/Object;
   * 6 Weak Mutation 387: gnu.trove.map.hash.TObjectCharHashMap.clear()V:316 - ReplaceConstant - 0 -> 1
   * 7 Weak Mutation 386: gnu.trove.map.hash.TObjectCharHashMap.clear()V:316 - DeleteField: _values[C
   * 8 Weak Mutation 385: gnu.trove.map.hash.TObjectCharHashMap.clear()V:315 - DeleteStatement: fill([Ljava/lang/Object;IILjava/lang/Object;)V
   * 9 Weak Mutation 384: gnu.trove.map.hash.TObjectCharHashMap.clear()V:315 - DeleteField: FREELjava/lang/Object;
   * 10 Weak Mutation 390: gnu.trove.map.hash.TObjectCharHashMap.clear()V:316 - DeleteStatement: fill([CIIC)V
   * 11 Weak Mutation 388: gnu.trove.map.hash.TObjectCharHashMap.clear()V:316 - DeleteField: _values[C
   * 12 Weak Mutation 381: gnu.trove.map.hash.TObjectCharHashMap.clear()V:315 - ReplaceConstant - 0 -> 1
   * 13 Weak Mutation 380: gnu.trove.map.hash.TObjectCharHashMap.clear()V:315 - DeleteField: _set[Ljava/lang/Object;
   * 14 Weak Mutation 383: gnu.trove.map.hash.TObjectCharHashMap.clear()V:315 - ReplaceVariable FREE -> REMOVED
   * 15 Weak Mutation 382: gnu.trove.map.hash.TObjectCharHashMap.clear()V:315 - DeleteField: _set[Ljava/lang/Object;
   * 16 Weak Mutation 387: gnu.trove.map.hash.TObjectCharHashMap.clear()V:316 - ReplaceConstant - 0 -> 1
   * 17 Weak Mutation 386: gnu.trove.map.hash.TObjectCharHashMap.clear()V:316 - DeleteField: _values[C
   * 18 Weak Mutation 385: gnu.trove.map.hash.TObjectCharHashMap.clear()V:315 - DeleteStatement: fill([Ljava/lang/Object;IILjava/lang/Object;)V
   * 19 Weak Mutation 384: gnu.trove.map.hash.TObjectCharHashMap.clear()V:315 - DeleteField: FREELjava/lang/Object;
   * 20 Weak Mutation 390: gnu.trove.map.hash.TObjectCharHashMap.clear()V:316 - DeleteStatement: fill([CIIC)V
   * 21 Weak Mutation 389: gnu.trove.map.hash.TObjectCharHashMap.clear()V:316 - DeleteField: no_entry_valueC
   * 22 Weak Mutation 388: gnu.trove.map.hash.TObjectCharHashMap.clear()V:316 - DeleteField: _values[C
   * 23 gnu.trove.map.hash.TObjectCharHashMap.clear()V: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>((-301), (-1394.9487F), 'p');
      tObjectCharHashMap0.clear();
      assertEquals('p', tObjectCharHashMap0.getNoEntryValue());
      assertEquals("{}", tObjectCharHashMap0.toString());
  }

  //Test case number: 12
  /*
   * 87 covered goals:
   * 1 Weak Mutation 415: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable i -> j
   * 2 Weak Mutation 413: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable k -> keys
   * 3 Weak Mutation 417: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC 1 i
   * 4 Weak Mutation 416: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp Negation of i
   * 5 Weak Mutation 419: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable REMOVED -> FREE
   * 6 Weak Mutation 418: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC -1 i
   * 7 Weak Mutation 421: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - ReplaceComparisonOperator == -> !=
   * 8 Weak Mutation 420: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - DeleteField: REMOVEDLjava/lang/Object;
   * 9 Weak Mutation 432: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp Negation of i
   * 10 Weak Mutation 433: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC 1 i
   * 11 Weak Mutation 434: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC -1 i
   * 12 Weak Mutation 425: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp Negation of j
   * 13 Weak Mutation 424: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable j -> i
   * 14 Weak Mutation 427: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC -1 j
   * 15 Weak Mutation 426: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC 1 j
   * 16 Weak Mutation 429: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable k -> keys
   * 17 Weak Mutation 428: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable j -> i
   * 18 Weak Mutation 431: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable i -> j
   * 19 Weak Mutation 423: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable keys -> k
   * 20 Weak Mutation 422: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable keys -> _set
   * 21 gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;: I30 Branch 26 IF_ACMPEQ L335 - false
   * 22 gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;: I35 Branch 27 IF_ACMPEQ L335 - false
   * 23 Weak Mutation 410: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable FREE -> REMOVED
   * 24 Weak Mutation 411: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - DeleteField: FREELjava/lang/Object;
   * 25 Weak Mutation 408: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC 1 i
   * 26 Weak Mutation 409: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC -1 i
   * 27 Weak Mutation 412: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - ReplaceComparisonOperator == -> !=
   * 28 Weak Mutation 402: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:334 - ReplaceComparisonOperator <= -> <
   * 29 Weak Mutation 403: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:334 - ReplaceComparisonOperator <= -> -1
   * 30 Weak Mutation 400: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:334 - ReplaceVariable i -> j
   * 31 Weak Mutation 406: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable i -> j
   * 32 Weak Mutation 407: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp Negation of i
   * 33 Weak Mutation 404: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable k -> keys
   * 34 Weak Mutation 395: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:334 - ReplaceConstant - 0 -> 1
   * 35 Weak Mutation 393: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:334 - ReplaceVariable k -> keys
   * 36 Weak Mutation 392: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:332 - DeleteField: _set[Ljava/lang/Object;
   * 37 Weak Mutation 399: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:334 - InsertUnaryOp IINC -1 i
   * 38 Weak Mutation 398: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:334 - InsertUnaryOp IINC 1 i
   * 39 Weak Mutation 397: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:334 - InsertUnaryOp Negation of i
   * 40 Weak Mutation 396: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:334 - ReplaceVariable i -> j
   * 41 Weak Mutation 391: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:331 - DeleteStatement: size()I
   * 42 Weak Mutation 435: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:340 - ReplaceVariable keys -> _set
   * 43 Weak Mutation 436: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:340 - ReplaceVariable keys -> k
   * 44 Weak Mutation 410: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable FREE -> REMOVED
   * 45 Weak Mutation 411: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - DeleteField: FREELjava/lang/Object;
   * 46 Weak Mutation 408: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC 1 i
   * 47 Weak Mutation 409: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC -1 i
   * 48 Weak Mutation 415: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable i -> j
   * 49 Weak Mutation 412: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - ReplaceComparisonOperator == -> !=
   * 50 Weak Mutation 413: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable k -> keys
   * 51 Weak Mutation 402: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:334 - ReplaceComparisonOperator <= -> <
   * 52 Weak Mutation 403: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:334 - ReplaceComparisonOperator <= -> -1
   * 53 Weak Mutation 400: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:334 - ReplaceVariable i -> j
   * 54 Weak Mutation 406: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable i -> j
   * 55 Weak Mutation 407: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp Negation of i
   * 56 Weak Mutation 404: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable k -> keys
   * 57 Weak Mutation 395: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:334 - ReplaceConstant - 0 -> 1
   * 58 Weak Mutation 393: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:334 - ReplaceVariable k -> keys
   * 59 Weak Mutation 392: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:332 - DeleteField: _set[Ljava/lang/Object;
   * 60 Weak Mutation 399: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:334 - InsertUnaryOp IINC -1 i
   * 61 Weak Mutation 398: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:334 - InsertUnaryOp IINC 1 i
   * 62 Weak Mutation 397: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:334 - InsertUnaryOp Negation of i
   * 63 Weak Mutation 396: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:334 - ReplaceVariable i -> j
   * 64 Weak Mutation 391: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:331 - DeleteStatement: size()I
   * 65 Weak Mutation 432: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp Negation of i
   * 66 Weak Mutation 433: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC 1 i
   * 67 Weak Mutation 434: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC -1 i
   * 68 Weak Mutation 435: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:340 - ReplaceVariable keys -> _set
   * 69 Weak Mutation 436: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:340 - ReplaceVariable keys -> k
   * 70 Weak Mutation 425: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp Negation of j
   * 71 Weak Mutation 424: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable j -> i
   * 72 Weak Mutation 427: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC -1 j
   * 73 Weak Mutation 426: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC 1 j
   * 74 Weak Mutation 429: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable k -> keys
   * 75 Weak Mutation 428: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable j -> i
   * 76 Weak Mutation 431: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable i -> j
   * 77 Weak Mutation 417: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC 1 i
   * 78 Weak Mutation 416: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp Negation of i
   * 79 Weak Mutation 419: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable REMOVED -> FREE
   * 80 Weak Mutation 418: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC -1 i
   * 81 Weak Mutation 421: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - ReplaceComparisonOperator == -> !=
   * 82 Weak Mutation 420: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:335 - DeleteField: REMOVEDLjava/lang/Object;
   * 83 Weak Mutation 423: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable keys -> k
   * 84 Weak Mutation 422: gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable keys -> _set
   * 85 gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;: I23 Branch 25 IFLE L334 - true
   * 86 gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;: I23 Branch 25 IFLE L334 - false
   * 87 gnu.trove.map.hash.TObjectCharHashMap.keys()[Ljava/lang/Object;: I30 Branch 26 IF_ACMPEQ L335 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>();
      tObjectCharHashMap0.adjustOrPutValue((Integer) (-532), '{', '{');
      tObjectCharHashMap0.keys();
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      assertEquals("{-532={}", tObjectCharHashMap0.toString());
  }

  //Test case number: 13
  /*
   * 77 covered goals:
   * 1 Weak Mutation 478: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> j
   * 2 Weak Mutation 476: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable k -> a
   * 3 Weak Mutation 485: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceComparisonOperator == -> !=
   * 4 Weak Mutation 484: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - DeleteField: REMOVEDLjava/lang/Object;
   * 5 Weak Mutation 481: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC 1 i
   * 6 Weak Mutation 480: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp Negation of i
   * 7 Weak Mutation 483: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable REMOVED -> FREE
   * 8 Weak Mutation 482: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC -1 i
   * 9 Weak Mutation 500: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC 1 i
   * 10 Weak Mutation 501: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC -1 i
   * 11 Weak Mutation 499: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp Negation of i
   * 12 Weak Mutation 493: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> i
   * 13 Weak Mutation 492: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC -1 j
   * 14 Weak Mutation 495: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable k -> a
   * 15 Weak Mutation 494: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> size
   * 16 Weak Mutation 489: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> size
   * 17 Weak Mutation 488: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> i
   * 18 Weak Mutation 491: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC 1 j
   * 19 Weak Mutation 490: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp Negation of j
   * 20 Weak Mutation 487: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable a -> k
   * 21 Weak Mutation 486: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable a -> _set
   * 22 gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I44 Branch 30 IF_ACMPEQ L356 - false
   * 23 gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I49 Branch 31 IF_ACMPEQ L356 - false
   * 24 Weak Mutation 440: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - InsertUnaryOp IINC 1 size
   * 25 Weak Mutation 441: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - InsertUnaryOp IINC -1 size
   * 26 Weak Mutation 442: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - ReplaceComparisonOperator >= -> ==
   * 27 Weak Mutation 437: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:346 - DeleteStatement: size()I
   * 28 Weak Mutation 438: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - ReplaceVariable a -> _set
   * 29 Weak Mutation 439: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - InsertUnaryOp Negation of size
   * 30 Weak Mutation 478: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> j
   * 31 Weak Mutation 476: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable k -> a
   * 32 Weak Mutation 474: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - DeleteField: FREELjava/lang/Object;
   * 33 Weak Mutation 475: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceComparisonOperator == -> !=
   * 34 Weak Mutation 472: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC -1 i
   * 35 Weak Mutation 473: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable FREE -> REMOVED
   * 36 Weak Mutation 470: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp Negation of i
   * 37 Weak Mutation 471: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC 1 i
   * 38 Weak Mutation 468: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> j
   * 39 Weak Mutation 469: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> size
   * 40 Weak Mutation 466: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable k -> a
   * 41 Weak Mutation 464: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceComparisonOperator <= -> <
   * 42 Weak Mutation 465: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceComparisonOperator <= -> -1
   * 43 Weak Mutation 462: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> size
   * 44 Weak Mutation 461: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> j
   * 45 Weak Mutation 460: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - InsertUnaryOp IINC -1 i
   * 46 Weak Mutation 459: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - InsertUnaryOp IINC 1 i
   * 47 Weak Mutation 458: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - InsertUnaryOp Negation of i
   * 48 Weak Mutation 457: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> size
   * 49 Weak Mutation 456: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> j
   * 50 Weak Mutation 455: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceConstant - 0 -> 1
   * 51 Weak Mutation 453: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable k -> a
   * 52 Weak Mutation 452: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:353 - DeleteField: _set[Ljava/lang/Object;
   * 53 Weak Mutation 500: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC 1 i
   * 54 Weak Mutation 501: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC -1 i
   * 55 Weak Mutation 502: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:361 - ReplaceVariable a -> _set
   * 56 Weak Mutation 503: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:361 - ReplaceVariable a -> k
   * 57 Weak Mutation 499: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp Negation of i
   * 58 Weak Mutation 493: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> i
   * 59 Weak Mutation 492: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC -1 j
   * 60 Weak Mutation 495: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable k -> a
   * 61 Weak Mutation 494: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> size
   * 62 Weak Mutation 489: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> size
   * 63 Weak Mutation 488: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> i
   * 64 Weak Mutation 491: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC 1 j
   * 65 Weak Mutation 490: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp Negation of j
   * 66 Weak Mutation 485: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceComparisonOperator == -> !=
   * 67 Weak Mutation 484: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - DeleteField: REMOVEDLjava/lang/Object;
   * 68 Weak Mutation 487: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable a -> k
   * 69 Weak Mutation 486: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable a -> _set
   * 70 Weak Mutation 481: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC 1 i
   * 71 Weak Mutation 480: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp Negation of i
   * 72 Weak Mutation 483: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable REMOVED -> FREE
   * 73 Weak Mutation 482: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC -1 i
   * 74 gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I10 Branch 28 IF_ICMPGE L347 - true
   * 75 gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L355 - true
   * 76 gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L355 - false
   * 77 gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I44 Branch 30 IF_ACMPEQ L356 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(847, 847);
      tObjectCharHashMap0.putIfAbsent("7jri*`Iv", 'r');
      String[] stringArray0 = new String[10];
      tObjectCharHashMap0.keys(stringArray0);
      assertEquals(1, tObjectCharHashMap0.size());
      assertEquals("{7jri*`Iv=r}", tObjectCharHashMap0.toString());
  }

  //Test case number: 14
  /*
   * 54 covered goals:
   * 1 Weak Mutation 479: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> size
   * 2 Weak Mutation 497: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable i -> j
   * 3 Weak Mutation 498: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable i -> size
   * 4 Weak Mutation 440: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - InsertUnaryOp IINC 1 size
   * 5 Weak Mutation 441: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - InsertUnaryOp IINC -1 size
   * 6 Weak Mutation 442: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - ReplaceComparisonOperator >= -> ==
   * 7 Weak Mutation 437: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:346 - DeleteStatement: size()I
   * 8 Weak Mutation 438: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - ReplaceVariable a -> _set
   * 9 Weak Mutation 439: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - InsertUnaryOp Negation of size
   * 10 Weak Mutation 476: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable k -> a
   * 11 Weak Mutation 474: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - DeleteField: FREELjava/lang/Object;
   * 12 Weak Mutation 475: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceComparisonOperator == -> !=
   * 13 Weak Mutation 472: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC -1 i
   * 14 Weak Mutation 473: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable FREE -> REMOVED
   * 15 Weak Mutation 470: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp Negation of i
   * 16 Weak Mutation 471: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC 1 i
   * 17 Weak Mutation 468: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> j
   * 18 Weak Mutation 469: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> size
   * 19 Weak Mutation 466: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable k -> a
   * 20 Weak Mutation 464: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceComparisonOperator <= -> <
   * 21 Weak Mutation 465: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceComparisonOperator <= -> -1
   * 22 Weak Mutation 462: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> size
   * 23 Weak Mutation 461: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> j
   * 24 Weak Mutation 460: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - InsertUnaryOp IINC -1 i
   * 25 Weak Mutation 459: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - InsertUnaryOp IINC 1 i
   * 26 Weak Mutation 458: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - InsertUnaryOp Negation of i
   * 27 Weak Mutation 457: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> size
   * 28 Weak Mutation 456: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> j
   * 29 Weak Mutation 455: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceConstant - 0 -> 1
   * 30 Weak Mutation 453: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable k -> a
   * 31 Weak Mutation 452: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:353 - DeleteField: _set[Ljava/lang/Object;
   * 32 Weak Mutation 500: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC 1 i
   * 33 Weak Mutation 501: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC -1 i
   * 34 Weak Mutation 502: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:361 - ReplaceVariable a -> _set
   * 35 Weak Mutation 503: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:361 - ReplaceVariable a -> k
   * 36 Weak Mutation 499: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp Negation of i
   * 37 Weak Mutation 493: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> i
   * 38 Weak Mutation 492: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC -1 j
   * 39 Weak Mutation 495: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable k -> a
   * 40 Weak Mutation 494: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> size
   * 41 Weak Mutation 489: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> size
   * 42 Weak Mutation 491: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC 1 j
   * 43 Weak Mutation 490: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp Negation of j
   * 44 Weak Mutation 485: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceComparisonOperator == -> !=
   * 45 Weak Mutation 484: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - DeleteField: REMOVEDLjava/lang/Object;
   * 46 Weak Mutation 487: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable a -> k
   * 47 Weak Mutation 486: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable a -> _set
   * 48 Weak Mutation 481: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC 1 i
   * 49 Weak Mutation 480: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp Negation of i
   * 50 Weak Mutation 483: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable REMOVED -> FREE
   * 51 Weak Mutation 482: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC -1 i
   * 52 Weak Mutation 479: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> size
   * 53 Weak Mutation 497: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable i -> j
   * 54 Weak Mutation 498: gnu.trove.map.hash.TObjectCharHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable i -> size
   */

  @Test
  public void test14()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(847, 847);
      tObjectCharHashMap0.putIfAbsent("", 'r');
      String[] stringArray0 = new String[10];
      tObjectCharHashMap0.keys(stringArray0);
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      assertEquals("{=r}", tObjectCharHashMap0.toString());
  }

  //Test case number: 15
  /*
   * 60 covered goals:
   * 1 Weak Mutation 526: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - ReplaceVariable i -> j
   * 2 Weak Mutation 527: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - InsertUnaryOp Negation of i
   * 3 Weak Mutation 532: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - ReplaceComparisonOperator == -> !=
   * 4 Weak Mutation 529: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - InsertUnaryOp IINC -1 i
   * 5 Weak Mutation 528: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - InsertUnaryOp IINC 1 i
   * 6 Weak Mutation 531: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - DeleteField: REMOVEDLjava/lang/Object;
   * 7 Weak Mutation 530: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - ReplaceVariable REMOVED -> FREE
   * 8 Weak Mutation 533: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - ReplaceVariable vals -> v
   * 9 Weak Mutation 535: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - InsertUnaryOp Negation of j
   * 10 Weak Mutation 534: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - ReplaceVariable j -> i
   * 11 Weak Mutation 541: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - InsertUnaryOp Negation of i
   * 12 Weak Mutation 543: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - InsertUnaryOp IINC -1 i
   * 13 Weak Mutation 542: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - InsertUnaryOp IINC 1 i
   * 14 Weak Mutation 537: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - InsertUnaryOp IINC -1 j
   * 15 Weak Mutation 536: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - InsertUnaryOp IINC 1 j
   * 16 Weak Mutation 539: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - ReplaceVariable v -> vals
   * 17 Weak Mutation 538: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - ReplaceVariable j -> i
   * 18 gnu.trove.map.hash.TObjectCharHashMap.values()[C: I34 Branch 33 IF_ACMPEQ L378 - false
   * 19 gnu.trove.map.hash.TObjectCharHashMap.values()[C: I39 Branch 34 IF_ACMPEQ L378 - false
   * 20 Weak Mutation 290: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:246 - ReplaceComparisonOperator >= -> ==
   * 21 Weak Mutation 508: gnu.trove.map.hash.TObjectCharHashMap.values()[C:377 - ReplaceConstant - 0 -> 1
   * 22 Weak Mutation 509: gnu.trove.map.hash.TObjectCharHashMap.values()[C:377 - ReplaceVariable i -> j
   * 23 Weak Mutation 510: gnu.trove.map.hash.TObjectCharHashMap.values()[C:377 - InsertUnaryOp Negation of i
   * 24 Weak Mutation 511: gnu.trove.map.hash.TObjectCharHashMap.values()[C:377 - InsertUnaryOp IINC 1 i
   * 25 Weak Mutation 504: gnu.trove.map.hash.TObjectCharHashMap.values()[C:373 - DeleteStatement: size()I
   * 26 Weak Mutation 505: gnu.trove.map.hash.TObjectCharHashMap.values()[C:374 - DeleteField: _values[C
   * 27 Weak Mutation 506: gnu.trove.map.hash.TObjectCharHashMap.values()[C:375 - DeleteField: _set[Ljava/lang/Object;
   * 28 Weak Mutation 507: gnu.trove.map.hash.TObjectCharHashMap.values()[C:377 - ReplaceVariable v -> vals
   * 29 Weak Mutation 544: gnu.trove.map.hash.TObjectCharHashMap.values()[C:382 - ReplaceVariable vals -> v
   * 30 Weak Mutation 516: gnu.trove.map.hash.TObjectCharHashMap.values()[C:377 - ReplaceComparisonOperator <= -> -1
   * 31 Weak Mutation 518: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - ReplaceVariable i -> j
   * 32 Weak Mutation 519: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - InsertUnaryOp Negation of i
   * 33 Weak Mutation 512: gnu.trove.map.hash.TObjectCharHashMap.values()[C:377 - InsertUnaryOp IINC -1 i
   * 34 Weak Mutation 513: gnu.trove.map.hash.TObjectCharHashMap.values()[C:377 - ReplaceVariable i -> j
   * 35 Weak Mutation 515: gnu.trove.map.hash.TObjectCharHashMap.values()[C:377 - ReplaceComparisonOperator <= -> <
   * 36 Weak Mutation 524: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - ReplaceComparisonOperator == -> !=
   * 37 Weak Mutation 526: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - ReplaceVariable i -> j
   * 38 Weak Mutation 527: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - InsertUnaryOp Negation of i
   * 39 Weak Mutation 520: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - InsertUnaryOp IINC 1 i
   * 40 Weak Mutation 521: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - InsertUnaryOp IINC -1 i
   * 41 Weak Mutation 522: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - ReplaceVariable FREE -> REMOVED
   * 42 Weak Mutation 523: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - DeleteField: FREELjava/lang/Object;
   * 43 Weak Mutation 533: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - ReplaceVariable vals -> v
   * 44 Weak Mutation 532: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - ReplaceComparisonOperator == -> !=
   * 45 Weak Mutation 535: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - InsertUnaryOp Negation of j
   * 46 Weak Mutation 534: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - ReplaceVariable j -> i
   * 47 Weak Mutation 529: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - InsertUnaryOp IINC -1 i
   * 48 Weak Mutation 528: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - InsertUnaryOp IINC 1 i
   * 49 Weak Mutation 531: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - DeleteField: REMOVEDLjava/lang/Object;
   * 50 Weak Mutation 530: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - ReplaceVariable REMOVED -> FREE
   * 51 Weak Mutation 541: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - InsertUnaryOp Negation of i
   * 52 Weak Mutation 543: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - InsertUnaryOp IINC -1 i
   * 53 Weak Mutation 542: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - InsertUnaryOp IINC 1 i
   * 54 Weak Mutation 537: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - InsertUnaryOp IINC -1 j
   * 55 Weak Mutation 536: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - InsertUnaryOp IINC 1 j
   * 56 Weak Mutation 539: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - ReplaceVariable v -> vals
   * 57 Weak Mutation 538: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - ReplaceVariable j -> i
   * 58 gnu.trove.map.hash.TObjectCharHashMap.values()[C: I27 Branch 32 IFLE L377 - true
   * 59 gnu.trove.map.hash.TObjectCharHashMap.values()[C: I27 Branch 32 IFLE L377 - false
   * 60 gnu.trove.map.hash.TObjectCharHashMap.values()[C: I34 Branch 33 IF_ACMPEQ L378 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(847, 847);
      tObjectCharHashMap0.putIfAbsent("7jri*`Iv", 'r');
      tObjectCharHashMap0.values();
      assertEquals(1, tObjectCharHashMap0.size());
      assertEquals("{7jri*`Iv=r}", tObjectCharHashMap0.toString());
  }

  //Test case number: 16
  /*
   * 17 covered goals:
   * 1 Weak Mutation 540: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - ReplaceVariable i -> j
   * 2 Weak Mutation 527: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - InsertUnaryOp Negation of i
   * 3 Weak Mutation 533: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - ReplaceVariable vals -> v
   * 4 Weak Mutation 532: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - ReplaceComparisonOperator == -> !=
   * 5 Weak Mutation 535: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - InsertUnaryOp Negation of j
   * 6 Weak Mutation 529: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - InsertUnaryOp IINC -1 i
   * 7 Weak Mutation 528: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - InsertUnaryOp IINC 1 i
   * 8 Weak Mutation 531: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - DeleteField: REMOVEDLjava/lang/Object;
   * 9 Weak Mutation 530: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - ReplaceVariable REMOVED -> FREE
   * 10 Weak Mutation 541: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - InsertUnaryOp Negation of i
   * 11 Weak Mutation 543: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - InsertUnaryOp IINC -1 i
   * 12 Weak Mutation 542: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - InsertUnaryOp IINC 1 i
   * 13 Weak Mutation 537: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - InsertUnaryOp IINC -1 j
   * 14 Weak Mutation 536: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - InsertUnaryOp IINC 1 j
   * 15 Weak Mutation 539: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - ReplaceVariable v -> vals
   * 16 Weak Mutation 538: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - ReplaceVariable j -> i
   * 17 Weak Mutation 540: gnu.trove.map.hash.TObjectCharHashMap.values()[C:379 - ReplaceVariable i -> j
   */

  @Test
  public void test16()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(847, 847);
      tObjectCharHashMap0.putIfAbsent("", 'r');
      tObjectCharHashMap0.values();
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      assertEquals("{=r}", tObjectCharHashMap0.toString());
  }

  //Test case number: 17
  /*
   * 79 covered goals:
   * 1 Weak Mutation 545: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:388 - DeleteStatement: size()I
   * 2 Weak Mutation 548: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:389 - InsertUnaryOp IINC -1 size
   * 3 Weak Mutation 549: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:389 - ReplaceComparisonOperator >= -> ==
   * 4 Weak Mutation 546: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:389 - InsertUnaryOp Negation of size
   * 5 Weak Mutation 547: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:389 - InsertUnaryOp IINC 1 size
   * 6 Weak Mutation 555: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:393 - DeleteField: _values[C
   * 7 Weak Mutation 556: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:394 - DeleteField: _set[Ljava/lang/Object;
   * 8 Weak Mutation 558: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceConstant - 0 -> 1
   * 9 Weak Mutation 559: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceVariable i -> j
   * 10 Weak Mutation 557: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceVariable v -> array
   * 11 Weak Mutation 567: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceComparisonOperator <= -> <
   * 12 Weak Mutation 565: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceVariable i -> size
   * 13 Weak Mutation 564: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceVariable i -> j
   * 14 Weak Mutation 563: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - InsertUnaryOp IINC -1 i
   * 15 Weak Mutation 562: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - InsertUnaryOp IINC 1 i
   * 16 Weak Mutation 561: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - InsertUnaryOp Negation of i
   * 17 Weak Mutation 560: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceVariable i -> size
   * 18 Weak Mutation 568: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceComparisonOperator <= -> -1
   * 19 Weak Mutation 575: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - ReplaceVariable FREE -> REMOVED
   * 20 Weak Mutation 574: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - InsertUnaryOp IINC -1 i
   * 21 Weak Mutation 573: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - InsertUnaryOp IINC 1 i
   * 22 Weak Mutation 572: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - InsertUnaryOp Negation of i
   * 23 Weak Mutation 571: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - ReplaceVariable i -> size
   * 24 Weak Mutation 570: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - ReplaceVariable i -> j
   * 25 Weak Mutation 576: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - DeleteField: FREELjava/lang/Object;
   * 26 Weak Mutation 577: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - ReplaceComparisonOperator == -> !=
   * 27 Weak Mutation 601: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:401 - ReplaceVariable array -> v
   * 28 Weak Mutation 603: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:401 - InsertUnaryOp IINC 1 size
   * 29 Weak Mutation 602: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:401 - InsertUnaryOp Negation of size
   * 30 Weak Mutation 604: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:401 - InsertUnaryOp IINC -1 size
   * 31 Weak Mutation 607: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:401 - ReplaceComparisonOperator <= -> -1
   * 32 Weak Mutation 610: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:402 - InsertUnaryOp IINC 1 size
   * 33 Weak Mutation 611: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:402 - InsertUnaryOp IINC -1 size
   * 34 Weak Mutation 608: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:402 - ReplaceVariable array -> v
   * 35 Weak Mutation 609: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:402 - InsertUnaryOp Negation of size
   * 36 Weak Mutation 612: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:402 - DeleteField: no_entry_valueC
   * 37 Weak Mutation 613: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:404 - ReplaceVariable array -> v
   * 38 gnu.trove.map.hash.TObjectCharHashMap.values([C)[C: I10 Branch 35 IF_ICMPGE L389 - true
   * 39 gnu.trove.map.hash.TObjectCharHashMap.values([C)[C: I37 Branch 36 IFLE L396 - true
   * 40 gnu.trove.map.hash.TObjectCharHashMap.values([C)[C: I37 Branch 36 IFLE L396 - false
   * 41 gnu.trove.map.hash.TObjectCharHashMap.values([C)[C: I44 Branch 37 IF_ACMPEQ L397 - true
   * 42 gnu.trove.map.hash.TObjectCharHashMap.values([C)[C: I65 Branch 39 IF_ICMPLE L401 - false
   * 43 Weak Mutation 548: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:389 - InsertUnaryOp IINC -1 size
   * 44 Weak Mutation 549: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:389 - ReplaceComparisonOperator >= -> ==
   * 45 Weak Mutation 546: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:389 - InsertUnaryOp Negation of size
   * 46 Weak Mutation 547: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:389 - InsertUnaryOp IINC 1 size
   * 47 Weak Mutation 545: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:388 - DeleteStatement: size()I
   * 48 Weak Mutation 558: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceConstant - 0 -> 1
   * 49 Weak Mutation 559: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceVariable i -> j
   * 50 Weak Mutation 556: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:394 - DeleteField: _set[Ljava/lang/Object;
   * 51 Weak Mutation 557: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceVariable v -> array
   * 52 Weak Mutation 555: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:393 - DeleteField: _values[C
   * 53 Weak Mutation 567: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceComparisonOperator <= -> <
   * 54 Weak Mutation 565: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceVariable i -> size
   * 55 Weak Mutation 564: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceVariable i -> j
   * 56 Weak Mutation 563: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - InsertUnaryOp IINC -1 i
   * 57 Weak Mutation 562: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - InsertUnaryOp IINC 1 i
   * 58 Weak Mutation 561: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - InsertUnaryOp Negation of i
   * 59 Weak Mutation 560: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceVariable i -> size
   * 60 Weak Mutation 575: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - ReplaceVariable FREE -> REMOVED
   * 61 Weak Mutation 574: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - InsertUnaryOp IINC -1 i
   * 62 Weak Mutation 573: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - InsertUnaryOp IINC 1 i
   * 63 Weak Mutation 572: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - InsertUnaryOp Negation of i
   * 64 Weak Mutation 571: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - ReplaceVariable i -> size
   * 65 Weak Mutation 570: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - ReplaceVariable i -> j
   * 66 Weak Mutation 568: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceComparisonOperator <= -> -1
   * 67 Weak Mutation 610: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:402 - InsertUnaryOp IINC 1 size
   * 68 Weak Mutation 611: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:402 - InsertUnaryOp IINC -1 size
   * 69 Weak Mutation 608: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:402 - ReplaceVariable array -> v
   * 70 Weak Mutation 609: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:402 - InsertUnaryOp Negation of size
   * 71 Weak Mutation 612: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:402 - DeleteField: no_entry_valueC
   * 72 Weak Mutation 613: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:404 - ReplaceVariable array -> v
   * 73 Weak Mutation 576: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - DeleteField: FREELjava/lang/Object;
   * 74 Weak Mutation 577: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - ReplaceComparisonOperator == -> !=
   * 75 Weak Mutation 601: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:401 - ReplaceVariable array -> v
   * 76 Weak Mutation 603: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:401 - InsertUnaryOp IINC 1 size
   * 77 Weak Mutation 602: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:401 - InsertUnaryOp Negation of size
   * 78 Weak Mutation 604: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:401 - InsertUnaryOp IINC -1 size
   * 79 Weak Mutation 607: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:401 - ReplaceComparisonOperator <= -> -1
   */

  @Test
  public void test17()  throws Throwable  {
      TObjectCharHashMap<Object> tObjectCharHashMap0 = new TObjectCharHashMap<Object>(847, 367.94397F, 'L');
      char[] charArray0 = new char[6];
      char[] charArray1 = tObjectCharHashMap0.values(charArray0);
      assertEquals('L', tObjectCharHashMap0.getNoEntryValue());
      assertNotNull(charArray1);
      assertEquals(3, tObjectCharHashMap0.capacity());
      assertSame(charArray0, charArray1);
  }

  //Test case number: 18
  /*
   * 5 covered goals:
   * 1 Weak Mutation 550: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:389 - ReplaceComparisonOperator >= -> >
   * 2 Weak Mutation 606: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:401 - ReplaceComparisonOperator <= -> <
   * 3 gnu.trove.map.hash.TObjectCharHashMap.values([C)[C: I65 Branch 39 IF_ICMPLE L401 - true
   * 4 Weak Mutation 550: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:389 - ReplaceComparisonOperator >= -> >
   * 5 Weak Mutation 606: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:401 - ReplaceComparisonOperator <= -> <
   */

  @Test
  public void test18()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>();
      char[] charArray0 = tObjectCharHashMap0.values();
      assertNotNull(charArray0);
      
      char[] charArray1 = tObjectCharHashMap0.values(charArray0);
      assertSame(charArray0, charArray1);
      assertEquals(23, tObjectCharHashMap0.capacity());
      assertNotNull(charArray1);
  }

  //Test case number: 19
  /*
   * 106 covered goals:
   * 1 Weak Mutation 551: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:389 - ReplaceComparisonOperator >= -> -1
   * 2 Weak Mutation 554: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:390 - InsertUnaryOp IINC -1 size
   * 3 Weak Mutation 552: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:390 - InsertUnaryOp Negation of size
   * 4 Weak Mutation 553: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:390 - InsertUnaryOp IINC 1 size
   * 5 Weak Mutation 579: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - ReplaceVariable i -> j
   * 6 Weak Mutation 580: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - ReplaceVariable i -> size
   * 7 Weak Mutation 581: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - InsertUnaryOp Negation of i
   * 8 Weak Mutation 582: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - InsertUnaryOp IINC 1 i
   * 9 Weak Mutation 583: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - InsertUnaryOp IINC -1 i
   * 10 Weak Mutation 584: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - ReplaceVariable REMOVED -> FREE
   * 11 Weak Mutation 585: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - DeleteField: REMOVEDLjava/lang/Object;
   * 12 Weak Mutation 586: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - ReplaceComparisonOperator == -> !=
   * 13 Weak Mutation 587: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - ReplaceVariable array -> v
   * 14 Weak Mutation 588: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - ReplaceVariable j -> i
   * 15 Weak Mutation 589: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - ReplaceVariable j -> size
   * 16 Weak Mutation 590: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - InsertUnaryOp Negation of j
   * 17 Weak Mutation 591: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - InsertUnaryOp IINC 1 j
   * 18 Weak Mutation 593: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - ReplaceVariable j -> i
   * 19 Weak Mutation 592: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - InsertUnaryOp IINC -1 j
   * 20 Weak Mutation 595: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - ReplaceVariable v -> array
   * 21 Weak Mutation 594: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - ReplaceVariable j -> size
   * 22 Weak Mutation 597: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - ReplaceVariable i -> size
   * 23 Weak Mutation 596: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - ReplaceVariable i -> j
   * 24 Weak Mutation 599: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - InsertUnaryOp IINC 1 i
   * 25 Weak Mutation 598: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - InsertUnaryOp Negation of i
   * 26 Weak Mutation 600: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - InsertUnaryOp IINC -1 i
   * 27 gnu.trove.map.hash.TObjectCharHashMap.values([C)[C: I10 Branch 35 IF_ICMPGE L389 - false
   * 28 gnu.trove.map.hash.TObjectCharHashMap.values([C)[C: I44 Branch 37 IF_ACMPEQ L397 - false
   * 29 gnu.trove.map.hash.TObjectCharHashMap.values([C)[C: I49 Branch 38 IF_ACMPEQ L397 - false
   * 30 Weak Mutation 508: gnu.trove.map.hash.TObjectCharHashMap.values()[C:377 - ReplaceConstant - 0 -> 1
   * 31 Weak Mutation 509: gnu.trove.map.hash.TObjectCharHashMap.values()[C:377 - ReplaceVariable i -> j
   * 32 Weak Mutation 510: gnu.trove.map.hash.TObjectCharHashMap.values()[C:377 - InsertUnaryOp Negation of i
   * 33 Weak Mutation 511: gnu.trove.map.hash.TObjectCharHashMap.values()[C:377 - InsertUnaryOp IINC 1 i
   * 34 Weak Mutation 504: gnu.trove.map.hash.TObjectCharHashMap.values()[C:373 - DeleteStatement: size()I
   * 35 Weak Mutation 505: gnu.trove.map.hash.TObjectCharHashMap.values()[C:374 - DeleteField: _values[C
   * 36 Weak Mutation 506: gnu.trove.map.hash.TObjectCharHashMap.values()[C:375 - DeleteField: _set[Ljava/lang/Object;
   * 37 Weak Mutation 507: gnu.trove.map.hash.TObjectCharHashMap.values()[C:377 - ReplaceVariable v -> vals
   * 38 Weak Mutation 548: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:389 - InsertUnaryOp IINC -1 size
   * 39 Weak Mutation 546: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:389 - InsertUnaryOp Negation of size
   * 40 Weak Mutation 547: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:389 - InsertUnaryOp IINC 1 size
   * 41 Weak Mutation 544: gnu.trove.map.hash.TObjectCharHashMap.values()[C:382 - ReplaceVariable vals -> v
   * 42 Weak Mutation 545: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:388 - DeleteStatement: size()I
   * 43 Weak Mutation 558: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceConstant - 0 -> 1
   * 44 Weak Mutation 559: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceVariable i -> j
   * 45 Weak Mutation 556: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:394 - DeleteField: _set[Ljava/lang/Object;
   * 46 Weak Mutation 557: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceVariable v -> array
   * 47 Weak Mutation 555: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:393 - DeleteField: _values[C
   * 48 Weak Mutation 567: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceComparisonOperator <= -> <
   * 49 Weak Mutation 565: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceVariable i -> size
   * 50 Weak Mutation 564: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceVariable i -> j
   * 51 Weak Mutation 563: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - InsertUnaryOp IINC -1 i
   * 52 Weak Mutation 562: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - InsertUnaryOp IINC 1 i
   * 53 Weak Mutation 561: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - InsertUnaryOp Negation of i
   * 54 Weak Mutation 560: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceVariable i -> size
   * 55 Weak Mutation 575: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - ReplaceVariable FREE -> REMOVED
   * 56 Weak Mutation 574: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - InsertUnaryOp IINC -1 i
   * 57 Weak Mutation 573: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - InsertUnaryOp IINC 1 i
   * 58 Weak Mutation 572: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - InsertUnaryOp Negation of i
   * 59 Weak Mutation 571: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - ReplaceVariable i -> size
   * 60 Weak Mutation 570: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - ReplaceVariable i -> j
   * 61 Weak Mutation 568: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:396 - ReplaceComparisonOperator <= -> -1
   * 62 Weak Mutation 516: gnu.trove.map.hash.TObjectCharHashMap.values()[C:377 - ReplaceComparisonOperator <= -> -1
   * 63 Weak Mutation 518: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - ReplaceVariable i -> j
   * 64 Weak Mutation 519: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - InsertUnaryOp Negation of i
   * 65 Weak Mutation 512: gnu.trove.map.hash.TObjectCharHashMap.values()[C:377 - InsertUnaryOp IINC -1 i
   * 66 Weak Mutation 513: gnu.trove.map.hash.TObjectCharHashMap.values()[C:377 - ReplaceVariable i -> j
   * 67 Weak Mutation 515: gnu.trove.map.hash.TObjectCharHashMap.values()[C:377 - ReplaceComparisonOperator <= -> <
   * 68 Weak Mutation 524: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - ReplaceComparisonOperator == -> !=
   * 69 Weak Mutation 520: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - InsertUnaryOp IINC 1 i
   * 70 Weak Mutation 521: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - InsertUnaryOp IINC -1 i
   * 71 Weak Mutation 522: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - ReplaceVariable FREE -> REMOVED
   * 72 Weak Mutation 523: gnu.trove.map.hash.TObjectCharHashMap.values()[C:378 - DeleteField: FREELjava/lang/Object;
   * 73 Weak Mutation 613: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:404 - ReplaceVariable array -> v
   * 74 Weak Mutation 576: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - DeleteField: FREELjava/lang/Object;
   * 75 Weak Mutation 577: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - ReplaceComparisonOperator == -> !=
   * 76 Weak Mutation 601: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:401 - ReplaceVariable array -> v
   * 77 Weak Mutation 603: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:401 - InsertUnaryOp IINC 1 size
   * 78 Weak Mutation 602: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:401 - InsertUnaryOp Negation of size
   * 79 Weak Mutation 604: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:401 - InsertUnaryOp IINC -1 size
   * 80 Weak Mutation 606: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:401 - ReplaceComparisonOperator <= -> <
   * 81 Weak Mutation 551: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:389 - ReplaceComparisonOperator >= -> -1
   * 82 Weak Mutation 554: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:390 - InsertUnaryOp IINC -1 size
   * 83 Weak Mutation 552: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:390 - InsertUnaryOp Negation of size
   * 84 Weak Mutation 553: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:390 - InsertUnaryOp IINC 1 size
   * 85 Weak Mutation 579: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - ReplaceVariable i -> j
   * 86 Weak Mutation 580: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - ReplaceVariable i -> size
   * 87 Weak Mutation 581: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - InsertUnaryOp Negation of i
   * 88 Weak Mutation 582: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - InsertUnaryOp IINC 1 i
   * 89 Weak Mutation 583: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - InsertUnaryOp IINC -1 i
   * 90 Weak Mutation 584: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - ReplaceVariable REMOVED -> FREE
   * 91 Weak Mutation 585: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - DeleteField: REMOVEDLjava/lang/Object;
   * 92 Weak Mutation 586: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:397 - ReplaceComparisonOperator == -> !=
   * 93 Weak Mutation 587: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - ReplaceVariable array -> v
   * 94 Weak Mutation 588: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - ReplaceVariable j -> i
   * 95 Weak Mutation 589: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - ReplaceVariable j -> size
   * 96 Weak Mutation 590: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - InsertUnaryOp Negation of j
   * 97 Weak Mutation 591: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - InsertUnaryOp IINC 1 j
   * 98 Weak Mutation 593: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - ReplaceVariable j -> i
   * 99 Weak Mutation 592: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - InsertUnaryOp IINC -1 j
   * 100 Weak Mutation 595: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - ReplaceVariable v -> array
   * 101 Weak Mutation 594: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - ReplaceVariable j -> size
   * 102 Weak Mutation 597: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - ReplaceVariable i -> size
   * 103 Weak Mutation 596: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - ReplaceVariable i -> j
   * 104 Weak Mutation 599: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - InsertUnaryOp IINC 1 i
   * 105 Weak Mutation 598: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - InsertUnaryOp Negation of i
   * 106 Weak Mutation 600: gnu.trove.map.hash.TObjectCharHashMap.values([C)[C:398 - InsertUnaryOp IINC -1 i
   */

  @Test
  public void test19()  throws Throwable  {
      TObjectCharHashMap<Object> tObjectCharHashMap0 = new TObjectCharHashMap<Object>();
      char[] charArray0 = tObjectCharHashMap0.values();
      tObjectCharHashMap0.put((Object) "{}", 'B');
      tObjectCharHashMap0.values(charArray0);
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      assertEquals("{{}=B}", tObjectCharHashMap0.toString());
  }

  //Test case number: 20
  /*
   * 26 covered goals:
   * 1 Weak Mutation 614: gnu.trove.map.hash.TObjectCharHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceVariable key -> FREE
   * 2 Weak Mutation 615: gnu.trove.map.hash.TObjectCharHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceVariable key -> REMOVED
   * 3 Weak Mutation 616: gnu.trove.map.hash.TObjectCharHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceConstant - 1 -> 0
   * 4 Weak Mutation 617: gnu.trove.map.hash.TObjectCharHashMap.increment(Ljava/lang/Object;)Z:420 - DeleteStatement: adjustValue(Ljava/lang/Object;C)Z
   * 5 Weak Mutation 618: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:426 - ReplaceVariable key -> FREE
   * 6 Weak Mutation 619: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:426 - ReplaceVariable key -> REMOVED
   * 7 Weak Mutation 620: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:426 - DeleteStatement: index(Ljava/lang/Object;)I
   * 8 Weak Mutation 622: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:427 - InsertUnaryOp IINC 1 index
   * 9 Weak Mutation 623: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:427 - InsertUnaryOp IINC -1 index
   * 10 Weak Mutation 621: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:427 - InsertUnaryOp Negation of index
   * 11 Weak Mutation 626: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:427 - ReplaceComparisonOperator >= -> -1
   * 12 Weak Mutation 627: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:428 - ReplaceConstant - 0 -> 1
   * 13 gnu.trove.map.hash.TObjectCharHashMap.increment(Ljava/lang/Object;)Z: root-Branch
   * 14 gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z: I9 Branch 40 IFGE L427 - false
   * 15 Weak Mutation 614: gnu.trove.map.hash.TObjectCharHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceVariable key -> FREE
   * 16 Weak Mutation 615: gnu.trove.map.hash.TObjectCharHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceVariable key -> REMOVED
   * 17 Weak Mutation 618: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:426 - ReplaceVariable key -> FREE
   * 18 Weak Mutation 619: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:426 - ReplaceVariable key -> REMOVED
   * 19 Weak Mutation 616: gnu.trove.map.hash.TObjectCharHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceConstant - 1 -> 0
   * 20 Weak Mutation 617: gnu.trove.map.hash.TObjectCharHashMap.increment(Ljava/lang/Object;)Z:420 - DeleteStatement: adjustValue(Ljava/lang/Object;C)Z
   * 21 Weak Mutation 622: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:427 - InsertUnaryOp IINC 1 index
   * 22 Weak Mutation 623: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:427 - InsertUnaryOp IINC -1 index
   * 23 Weak Mutation 620: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:426 - DeleteStatement: index(Ljava/lang/Object;)I
   * 24 Weak Mutation 621: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:427 - InsertUnaryOp Negation of index
   * 25 Weak Mutation 627: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:428 - ReplaceConstant - 0 -> 1
   * 26 Weak Mutation 626: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:427 - ReplaceComparisonOperator >= -> -1
   */

  @Test
  public void test20()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(1, (float) 1, 'b');
      boolean boolean0 = tObjectCharHashMap0.increment("T^?(-*;+|e=P:hT+2");
      assertEquals(false, boolean0);
      assertEquals('b', tObjectCharHashMap0.getNoEntryValue());
  }

  //Test case number: 21
  /*
   * 33 covered goals:
   * 1 Weak Mutation 624: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:427 - ReplaceComparisonOperator >= -> ==
   * 2 Weak Mutation 631: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:430 - InsertUnaryOp IINC -1 index
   * 3 Weak Mutation 630: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:430 - InsertUnaryOp IINC 1 index
   * 4 Weak Mutation 629: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:430 - InsertUnaryOp Negation of index
   * 5 Weak Mutation 628: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:430 - DeleteField: _values[C
   * 6 Weak Mutation 635: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:430 - ReplaceArithmeticOperator + -> -
   * 7 Weak Mutation 634: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:430 - InsertUnaryOp IINC -1 amount
   * 8 Weak Mutation 633: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:430 - InsertUnaryOp IINC 1 amount
   * 9 Weak Mutation 632: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:430 - InsertUnaryOp Negation of amount
   * 10 Weak Mutation 638: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:430 - ReplaceArithmeticOperator + -> *
   * 11 Weak Mutation 637: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:430 - ReplaceArithmeticOperator + -> /
   * 12 Weak Mutation 636: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:430 - ReplaceArithmeticOperator + -> %
   * 13 Weak Mutation 639: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:431 - ReplaceConstant - 1 -> 0
   * 14 gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z: I9 Branch 40 IFGE L427 - true
   * 15 Weak Mutation 618: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:426 - ReplaceVariable key -> FREE
   * 16 Weak Mutation 619: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:426 - ReplaceVariable key -> REMOVED
   * 17 Weak Mutation 622: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:427 - InsertUnaryOp IINC 1 index
   * 18 Weak Mutation 623: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:427 - InsertUnaryOp IINC -1 index
   * 19 Weak Mutation 620: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:426 - DeleteStatement: index(Ljava/lang/Object;)I
   * 20 Weak Mutation 621: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:427 - InsertUnaryOp Negation of index
   * 21 Weak Mutation 624: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:427 - ReplaceComparisonOperator >= -> ==
   * 22 Weak Mutation 631: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:430 - InsertUnaryOp IINC -1 index
   * 23 Weak Mutation 630: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:430 - InsertUnaryOp IINC 1 index
   * 24 Weak Mutation 629: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:430 - InsertUnaryOp Negation of index
   * 25 Weak Mutation 628: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:430 - DeleteField: _values[C
   * 26 Weak Mutation 635: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:430 - ReplaceArithmeticOperator + -> -
   * 27 Weak Mutation 634: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:430 - InsertUnaryOp IINC -1 amount
   * 28 Weak Mutation 633: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:430 - InsertUnaryOp IINC 1 amount
   * 29 Weak Mutation 632: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:430 - InsertUnaryOp Negation of amount
   * 30 Weak Mutation 639: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:431 - ReplaceConstant - 1 -> 0
   * 31 Weak Mutation 638: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:430 - ReplaceArithmeticOperator + -> *
   * 32 Weak Mutation 637: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:430 - ReplaceArithmeticOperator + -> /
   * 33 Weak Mutation 636: gnu.trove.map.hash.TObjectCharHashMap.adjustValue(Ljava/lang/Object;C)Z:430 - ReplaceArithmeticOperator + -> %
   */

  @Test
  public void test21()  throws Throwable  {
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>(510);
      tObjectCharHashMap0.put((Integer) 510, '?');
      boolean boolean0 = tObjectCharHashMap0.adjustValue((Integer) 510, 'U');
      assertEquals(1, tObjectCharHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 60 covered goals:
   * 1 Weak Mutation 648: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:443 - ReplaceComparisonOperator >= -> -1
   * 2 Weak Mutation 653: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:444 - ReplaceArithmeticOperator - -> +
   * 3 Weak Mutation 652: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:444 - ReplaceConstant - 1 -> 0
   * 4 Weak Mutation 655: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:444 - ReplaceArithmeticOperator - -> /
   * 5 Weak Mutation 649: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:444 - InsertUnaryOp Negation of index
   * 6 Weak Mutation 651: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:444 - InsertUnaryOp IINC -1 index
   * 7 Weak Mutation 650: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:444 - InsertUnaryOp IINC 1 index
   * 8 Weak Mutation 656: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:444 - ReplaceArithmeticOperator - -> *
   * 9 Weak Mutation 668: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - ReplaceArithmeticOperator + -> *
   * 10 Weak Mutation 664: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - InsertUnaryOp IINC -1 adjust_amount
   * 11 Weak Mutation 665: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - ReplaceArithmeticOperator + -> -
   * 12 Weak Mutation 666: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - ReplaceArithmeticOperator + -> %
   * 13 Weak Mutation 667: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - ReplaceArithmeticOperator + -> /
   * 14 Weak Mutation 660: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - InsertUnaryOp IINC -1 index
   * 15 Weak Mutation 661: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - ReplaceVariable adjust_amount -> put_amount
   * 16 Weak Mutation 662: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - InsertUnaryOp Negation of adjust_amount
   * 17 Weak Mutation 663: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - InsertUnaryOp IINC 1 adjust_amount
   * 18 Weak Mutation 657: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - DeleteField: _values[C
   * 19 Weak Mutation 658: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - InsertUnaryOp Negation of index
   * 20 Weak Mutation 659: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - InsertUnaryOp IINC 1 index
   * 21 Weak Mutation 669: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:446 - ReplaceConstant - 0 -> 1
   * 22 Weak Mutation 685: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:458 - ReplaceVariable newValue -> put_amount
   * 23 gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C: I9 Branch 41 IFGE L443 - false
   * 24 gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C: I52 Branch 42 IFEQ L454 - true
   * 25 Weak Mutation 287: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:246 - InsertUnaryOp Negation of index
   * 26 Weak Mutation 286: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:245 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 27 Weak Mutation 285: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:245 - ReplaceVariable key -> REMOVED
   * 28 Weak Mutation 284: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:245 - ReplaceVariable key -> FREE
   * 29 Weak Mutation 305: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:248 - InsertUnaryOp Negation of index
   * 30 Weak Mutation 304: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:248 - InsertUnaryOp IINC -1 value
   * 31 Weak Mutation 307: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:248 - InsertUnaryOp IINC -1 index
   * 32 Weak Mutation 306: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:248 - InsertUnaryOp IINC 1 index
   * 33 Weak Mutation 288: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:246 - InsertUnaryOp IINC 1 index
   * 34 Weak Mutation 289: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:246 - InsertUnaryOp IINC -1 index
   * 35 Weak Mutation 291: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:246 - ReplaceComparisonOperator >= -> >
   * 36 Weak Mutation 302: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:248 - InsertUnaryOp Negation of value
   * 37 Weak Mutation 303: gnu.trove.map.hash.TObjectCharHashMap.putIfAbsent(Ljava/lang/Object;C)C:248 - InsertUnaryOp IINC 1 value
   * 38 Weak Mutation 684: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:458 - ReplaceVariable newValue -> adjust_amount
   * 39 Weak Mutation 685: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:458 - ReplaceVariable newValue -> put_amount
   * 40 Weak Mutation 653: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:444 - ReplaceArithmeticOperator - -> +
   * 41 Weak Mutation 652: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:444 - ReplaceConstant - 1 -> 0
   * 42 Weak Mutation 655: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:444 - ReplaceArithmeticOperator - -> /
   * 43 Weak Mutation 649: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:444 - InsertUnaryOp Negation of index
   * 44 Weak Mutation 648: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:443 - ReplaceComparisonOperator >= -> -1
   * 45 Weak Mutation 651: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:444 - InsertUnaryOp IINC -1 index
   * 46 Weak Mutation 650: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:444 - InsertUnaryOp IINC 1 index
   * 47 Weak Mutation 668: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - ReplaceArithmeticOperator + -> *
   * 48 Weak Mutation 669: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:446 - ReplaceConstant - 0 -> 1
   * 49 Weak Mutation 664: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - InsertUnaryOp IINC -1 adjust_amount
   * 50 Weak Mutation 665: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - ReplaceArithmeticOperator + -> -
   * 51 Weak Mutation 666: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - ReplaceArithmeticOperator + -> %
   * 52 Weak Mutation 667: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - ReplaceArithmeticOperator + -> /
   * 53 Weak Mutation 660: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - InsertUnaryOp IINC -1 index
   * 54 Weak Mutation 661: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - ReplaceVariable adjust_amount -> put_amount
   * 55 Weak Mutation 662: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - InsertUnaryOp Negation of adjust_amount
   * 56 Weak Mutation 663: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - InsertUnaryOp IINC 1 adjust_amount
   * 57 Weak Mutation 656: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:444 - ReplaceArithmeticOperator - -> *
   * 58 Weak Mutation 657: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - DeleteField: _values[C
   * 59 Weak Mutation 658: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - InsertUnaryOp Negation of index
   * 60 Weak Mutation 659: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:445 - InsertUnaryOp IINC 1 index
   */

  @Test
  public void test22()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(847, 847);
      tObjectCharHashMap0.putIfAbsent("", 'r');
      char char0 = tObjectCharHashMap0.adjustOrPutValue("", 'R', '0');
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      assertEquals('\u00C4', char0);
  }

  //Test case number: 23
  /*
   * 2 covered goals:
   * 1 Weak Mutation 647: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:443 - ReplaceComparisonOperator >= -> >
   * 2 Weak Mutation 647: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:443 - ReplaceComparisonOperator >= -> >
   */

  @Test
  public void test23()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(0, (float) 1, '/');
      char char0 = tObjectCharHashMap0.adjustOrPutValue("", '/', '/');
      assertEquals(1, tObjectCharHashMap0.size());
      assertEquals('/', char0);
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 Weak Mutation 687: gnu.trove.map.hash.TObjectCharHashMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z:470 - DeleteStatement: forEach(Lgnu/trove/procedure/TObjectProcedure;)Z
   * 2 gnu.trove.map.hash.TObjectCharHashMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   * 3 Weak Mutation 687: gnu.trove.map.hash.TObjectCharHashMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z:470 - DeleteStatement: forEach(Lgnu/trove/procedure/TObjectProcedure;)Z
   */

  @Test
  public void test24()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>();
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tObjectCharHashMap0._set);
      boolean boolean0 = tObjectCharHashMap0.forEachKey((TObjectProcedure<? super String>) toObjectArrayProceedure0);
      assertEquals(23, tObjectCharHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 25
  /*
   * 31 covered goals:
   * 1 Weak Mutation 688: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:482 - DeleteField: _set[Ljava/lang/Object;
   * 2 Weak Mutation 689: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:483 - DeleteField: _values[C
   * 3 Weak Mutation 694: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:484 - ReplaceComparisonOperator <= -> <
   * 4 Weak Mutation 695: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:484 - ReplaceComparisonOperator <= -> -1
   * 5 Weak Mutation 692: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:484 - InsertUnaryOp IINC -1 i
   * 6 Weak Mutation 690: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:484 - InsertUnaryOp Negation of i
   * 7 Weak Mutation 691: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:484 - InsertUnaryOp IINC 1 i
   * 8 Weak Mutation 702: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:485 - ReplaceComparisonOperator == -> !=
   * 9 Weak Mutation 700: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:485 - ReplaceVariable FREE -> REMOVED
   * 10 Weak Mutation 701: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:485 - DeleteField: FREELjava/lang/Object;
   * 11 Weak Mutation 698: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:485 - InsertUnaryOp IINC 1 i
   * 12 Weak Mutation 699: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:485 - InsertUnaryOp IINC -1 i
   * 13 Weak Mutation 697: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:485 - InsertUnaryOp Negation of i
   * 14 Weak Mutation 716: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:490 - ReplaceConstant - 1 -> 0
   * 15 gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 43 IFLE L484 - true
   * 16 gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 43 IFLE L484 - false
   * 17 gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 44 IF_ACMPEQ L485 - true
   * 18 Weak Mutation 702: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:485 - ReplaceComparisonOperator == -> !=
   * 19 Weak Mutation 700: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:485 - ReplaceVariable FREE -> REMOVED
   * 20 Weak Mutation 701: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:485 - DeleteField: FREELjava/lang/Object;
   * 21 Weak Mutation 698: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:485 - InsertUnaryOp IINC 1 i
   * 22 Weak Mutation 699: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:485 - InsertUnaryOp IINC -1 i
   * 23 Weak Mutation 697: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:485 - InsertUnaryOp Negation of i
   * 24 Weak Mutation 694: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:484 - ReplaceComparisonOperator <= -> <
   * 25 Weak Mutation 695: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:484 - ReplaceComparisonOperator <= -> -1
   * 26 Weak Mutation 692: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:484 - InsertUnaryOp IINC -1 i
   * 27 Weak Mutation 690: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:484 - InsertUnaryOp Negation of i
   * 28 Weak Mutation 691: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:484 - InsertUnaryOp IINC 1 i
   * 29 Weak Mutation 688: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:482 - DeleteField: _set[Ljava/lang/Object;
   * 30 Weak Mutation 689: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:483 - DeleteField: _values[C
   * 31 Weak Mutation 716: gnu.trove.map.hash.TObjectCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z:490 - ReplaceConstant - 1 -> 0
   */

  @Test
  public void test25()  throws Throwable  {
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>(847);
      boolean boolean0 = tObjectCharHashMap0.forEachValue((TCharProcedure) null);
      assertEquals(true, boolean0);
      assertEquals(1759, tObjectCharHashMap0.capacity());
  }

  //Test case number: 26
  /*
   * 43 covered goals:
   * 1 Weak Mutation 751: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:525 - ReplaceConstant - 0 -> 1
   * 2 Weak Mutation 752: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:527 - DeleteField: _set[Ljava/lang/Object;
   * 3 Weak Mutation 753: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:528 - DeleteField: _values[C
   * 4 Weak Mutation 754: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:531 - DeleteStatement: tempDisableAutoCompaction()V
   * 5 Weak Mutation 760: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:533 - ReplaceComparisonOperator <= -> <
   * 6 Weak Mutation 761: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:533 - ReplaceComparisonOperator <= -> -1
   * 7 Weak Mutation 758: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:533 - InsertUnaryOp IINC -1 i
   * 8 Weak Mutation 756: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:533 - InsertUnaryOp Negation of i
   * 9 Weak Mutation 757: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:533 - InsertUnaryOp IINC 1 i
   * 10 Weak Mutation 763: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:534 - InsertUnaryOp Negation of i
   * 11 Weak Mutation 766: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:534 - ReplaceVariable FREE -> REMOVED
   * 12 Weak Mutation 767: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:534 - DeleteField: FREELjava/lang/Object;
   * 13 Weak Mutation 764: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:534 - InsertUnaryOp IINC 1 i
   * 14 Weak Mutation 765: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:534 - InsertUnaryOp IINC -1 i
   * 15 Weak Mutation 768: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:534 - ReplaceComparisonOperator == -> !=
   * 16 Weak Mutation 791: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:543 - DeleteStatement: reenableAutoCompaction(Z)V
   * 17 Weak Mutation 790: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:543 - ReplaceConstant - 1 -> 0
   * 18 Weak Mutation 796: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:546 - InsertUnaryOp IINC -1 modified
   * 19 Weak Mutation 795: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:546 - InsertUnaryOp IINC 1 modified
   * 20 Weak Mutation 794: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:546 - InsertUnaryOp Negation of modified
   * 21 gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I27 Branch 51 IFLE L533 - true
   * 22 gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I27 Branch 51 IFLE L533 - false
   * 23 gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z: I34 Branch 52 IF_ACMPEQ L534 - true
   * 24 Weak Mutation 751: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:525 - ReplaceConstant - 0 -> 1
   * 25 Weak Mutation 763: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:534 - InsertUnaryOp Negation of i
   * 26 Weak Mutation 760: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:533 - ReplaceComparisonOperator <= -> <
   * 27 Weak Mutation 761: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:533 - ReplaceComparisonOperator <= -> -1
   * 28 Weak Mutation 766: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:534 - ReplaceVariable FREE -> REMOVED
   * 29 Weak Mutation 767: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:534 - DeleteField: FREELjava/lang/Object;
   * 30 Weak Mutation 764: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:534 - InsertUnaryOp IINC 1 i
   * 31 Weak Mutation 765: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:534 - InsertUnaryOp IINC -1 i
   * 32 Weak Mutation 754: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:531 - DeleteStatement: tempDisableAutoCompaction()V
   * 33 Weak Mutation 752: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:527 - DeleteField: _set[Ljava/lang/Object;
   * 34 Weak Mutation 753: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:528 - DeleteField: _values[C
   * 35 Weak Mutation 758: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:533 - InsertUnaryOp IINC -1 i
   * 36 Weak Mutation 756: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:533 - InsertUnaryOp Negation of i
   * 37 Weak Mutation 757: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:533 - InsertUnaryOp IINC 1 i
   * 38 Weak Mutation 791: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:543 - DeleteStatement: reenableAutoCompaction(Z)V
   * 39 Weak Mutation 790: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:543 - ReplaceConstant - 1 -> 0
   * 40 Weak Mutation 796: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:546 - InsertUnaryOp IINC -1 modified
   * 41 Weak Mutation 795: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:546 - InsertUnaryOp IINC 1 modified
   * 42 Weak Mutation 794: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:546 - InsertUnaryOp Negation of modified
   * 43 Weak Mutation 768: gnu.trove.map.hash.TObjectCharHashMap.retainEntries(Lgnu/trove/procedure/TObjectCharProcedure;)Z:534 - ReplaceComparisonOperator == -> !=
   */

  @Test
  public void test26()  throws Throwable  {
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>(0, (float) 0, '{');
      boolean boolean0 = tObjectCharHashMap0.retainEntries((TObjectCharProcedure<? super Integer>) null);
      assertEquals('{', tObjectCharHashMap0.getNoEntryValue());
      assertEquals(false, boolean0);
  }

  //Test case number: 27
  /*
   * 49 covered goals:
   * 1 Weak Mutation 797: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:556 - DeleteField: _set[Ljava/lang/Object;
   * 2 Weak Mutation 798: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:557 - DeleteField: _values[C
   * 3 Weak Mutation 804: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:558 - ReplaceComparisonOperator <= -> -1
   * 4 Weak Mutation 800: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:558 - InsertUnaryOp IINC 1 i
   * 5 Weak Mutation 801: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:558 - InsertUnaryOp IINC -1 i
   * 6 Weak Mutation 799: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:558 - InsertUnaryOp Negation of i
   * 7 Weak Mutation 816: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:559 - ReplaceComparisonOperator == -> !=
   * 8 Weak Mutation 806: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:559 - InsertUnaryOp Negation of i
   * 9 Weak Mutation 807: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:559 - InsertUnaryOp IINC 1 i
   * 10 Weak Mutation 812: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:559 - InsertUnaryOp IINC 1 i
   * 11 Weak Mutation 813: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:559 - InsertUnaryOp IINC -1 i
   * 12 Weak Mutation 814: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:559 - ReplaceVariable REMOVED -> FREE
   * 13 Weak Mutation 815: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:559 - DeleteField: REMOVEDLjava/lang/Object;
   * 14 Weak Mutation 808: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:559 - InsertUnaryOp IINC -1 i
   * 15 Weak Mutation 809: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:559 - ReplaceComparisonOperator = null -> != null
   * 16 Weak Mutation 811: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:559 - InsertUnaryOp Negation of i
   * 17 Weak Mutation 821: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:560 - InsertUnaryOp IINC 1 i
   * 18 Weak Mutation 820: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:560 - InsertUnaryOp Negation of i
   * 19 Weak Mutation 823: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:560 - DeleteStatement: execute(C)C
   * 20 Weak Mutation 822: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:560 - InsertUnaryOp IINC -1 i
   * 21 Weak Mutation 817: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:560 - InsertUnaryOp Negation of i
   * 22 Weak Mutation 819: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:560 - InsertUnaryOp IINC -1 i
   * 23 Weak Mutation 818: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:560 - InsertUnaryOp IINC 1 i
   * 24 gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I18 Branch 55 IFLE L558 - false
   * 25 gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I24 Branch 56 IFNULL L559 - false
   * 26 gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I29 Branch 57 IF_ACMPEQ L559 - false
   * 27 Weak Mutation 821: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:560 - InsertUnaryOp IINC 1 i
   * 28 Weak Mutation 820: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:560 - InsertUnaryOp Negation of i
   * 29 Weak Mutation 823: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:560 - DeleteStatement: execute(C)C
   * 30 Weak Mutation 822: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:560 - InsertUnaryOp IINC -1 i
   * 31 Weak Mutation 817: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:560 - InsertUnaryOp Negation of i
   * 32 Weak Mutation 816: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:559 - ReplaceComparisonOperator == -> !=
   * 33 Weak Mutation 819: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:560 - InsertUnaryOp IINC -1 i
   * 34 Weak Mutation 818: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:560 - InsertUnaryOp IINC 1 i
   * 35 Weak Mutation 804: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:558 - ReplaceComparisonOperator <= -> -1
   * 36 Weak Mutation 806: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:559 - InsertUnaryOp Negation of i
   * 37 Weak Mutation 807: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:559 - InsertUnaryOp IINC 1 i
   * 38 Weak Mutation 800: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:558 - InsertUnaryOp IINC 1 i
   * 39 Weak Mutation 801: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:558 - InsertUnaryOp IINC -1 i
   * 40 Weak Mutation 812: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:559 - InsertUnaryOp IINC 1 i
   * 41 Weak Mutation 813: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:559 - InsertUnaryOp IINC -1 i
   * 42 Weak Mutation 814: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:559 - ReplaceVariable REMOVED -> FREE
   * 43 Weak Mutation 815: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:559 - DeleteField: REMOVEDLjava/lang/Object;
   * 44 Weak Mutation 808: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:559 - InsertUnaryOp IINC -1 i
   * 45 Weak Mutation 809: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:559 - ReplaceComparisonOperator = null -> != null
   * 46 Weak Mutation 811: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:559 - InsertUnaryOp Negation of i
   * 47 Weak Mutation 799: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:558 - InsertUnaryOp Negation of i
   * 48 Weak Mutation 798: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:557 - DeleteField: _values[C
   * 49 Weak Mutation 797: gnu.trove.map.hash.TObjectCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V:556 - DeleteField: _set[Ljava/lang/Object;
   */

  @Test
  public void test27()  throws Throwable  {
      TObjectCharHashMap<Object> tObjectCharHashMap0 = new TObjectCharHashMap<Object>();
      // Undeclared exception!
      try {
        tObjectCharHashMap0.transformValues((TCharFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 27 covered goals:
   * 1 Weak Mutation 825: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceVariable other -> REMOVED
   * 2 Weak Mutation 824: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceVariable other -> FREE
   * 3 Weak Mutation 826: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceComparisonOperator != -> ==
   * 4 Weak Mutation 829: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:579 - ReplaceVariable other -> REMOVED
   * 5 Weak Mutation 828: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:579 - ReplaceVariable other -> FREE
   * 6 Weak Mutation 831: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:580 - DeleteStatement: size()I
   * 7 Weak Mutation 830: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:580 - DeleteStatement: size()I
   * 8 Weak Mutation 833: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:580 - ReplaceComparisonOperator == -> -2
   * 9 Weak Mutation 836: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:584 - DeleteStatement: iterator()Lgnu/trove/iterator/TObjectCharIterator;
   * 10 Weak Mutation 838: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:585 - ReplaceComparisonOperator == -> !=
   * 11 Weak Mutation 837: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:585 - DeleteStatement: hasNext()Z
   * 12 gnu.trove.map.hash.TObjectCharHashMap$TObjectCharHashIterator.<init>(Lgnu/trove/map/hash/TObjectCharHashMap;Lgnu/trove/map/hash/TObjectCharHashMap;)V: root-Branch
   * 13 gnu.trove.map.hash.TObjectCharHashMap.iterator()Lgnu/trove/iterator/TObjectCharIterator;: root-Branch
   * 14 gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 58 IFNE L576 - true
   * 15 gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 59 IF_ICMPEQ L580 - true
   * 16 gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 60 IFEQ L585 - true
   * 17 Weak Mutation 829: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:579 - ReplaceVariable other -> REMOVED
   * 18 Weak Mutation 828: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:579 - ReplaceVariable other -> FREE
   * 19 Weak Mutation 831: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:580 - DeleteStatement: size()I
   * 20 Weak Mutation 830: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:580 - DeleteStatement: size()I
   * 21 Weak Mutation 825: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceVariable other -> REMOVED
   * 22 Weak Mutation 824: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceVariable other -> FREE
   * 23 Weak Mutation 826: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceComparisonOperator != -> ==
   * 24 Weak Mutation 833: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:580 - ReplaceComparisonOperator == -> -2
   * 25 Weak Mutation 838: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:585 - ReplaceComparisonOperator == -> !=
   * 26 Weak Mutation 836: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:584 - DeleteStatement: iterator()Lgnu/trove/iterator/TObjectCharIterator;
   * 27 Weak Mutation 837: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:585 - DeleteStatement: hasNext()Z
   */

  @Test
  public void test28()  throws Throwable  {
      TObjectCharHashMap<Character> tObjectCharHashMap0 = new TObjectCharHashMap<Character>(1439);
      TObjectCharHashMap<Integer> tObjectCharHashMap1 = new TObjectCharHashMap<Integer>(2411, (float) 1439, '@');
      boolean boolean0 = tObjectCharHashMap0.equals((Object) tObjectCharHashMap1);
      assertEquals('@', tObjectCharHashMap1.getNoEntryValue());
      assertEquals(true, boolean0);
      assertEquals(2879, tObjectCharHashMap0.capacity());
  }

  //Test case number: 29
  /*
   * 6 covered goals:
   * 1 Weak Mutation 827: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:577 - ReplaceConstant - 0 -> 1
   * 2 gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 58 IFNE L576 - false
   * 3 Weak Mutation 825: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceVariable other -> REMOVED
   * 4 Weak Mutation 824: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceVariable other -> FREE
   * 5 Weak Mutation 826: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceComparisonOperator != -> ==
   * 6 Weak Mutation 827: gnu.trove.map.hash.TObjectCharHashMap.equals(Ljava/lang/Object;)Z:577 - ReplaceConstant - 0 -> 1
   */

  @Test
  public void test29()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(1, (float) 1, 'b');
      boolean boolean0 = tObjectCharHashMap0.equals((Object) null);
      assertEquals('b', tObjectCharHashMap0.getNoEntryValue());
      assertEquals(false, boolean0);
  }

  //Test case number: 30
  /*
   * 123 covered goals:
   * 1 Weak Mutation 895: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - InsertUnaryOp Negation of i
   * 2 Weak Mutation 894: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - ReplaceVariable i -> hashcode
   * 3 Weak Mutation 900: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - ReplaceComparisonOperator == -> !=
   * 4 Weak Mutation 899: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - DeleteField: REMOVEDLjava/lang/Object;
   * 5 Weak Mutation 898: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - ReplaceVariable REMOVED -> FREE
   * 6 Weak Mutation 897: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - InsertUnaryOp IINC -1 i
   * 7 Weak Mutation 896: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - InsertUnaryOp IINC 1 i
   * 8 Weak Mutation 928: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> *
   * 9 Weak Mutation 926: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> %
   * 10 Weak Mutation 927: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> /
   * 11 Weak Mutation 924: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - ReplaceBitwiseOperator ^ -> |
   * 12 Weak Mutation 925: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> -
   * 13 Weak Mutation 922: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - DeleteStatement: hashCode()I
   * 14 Weak Mutation 923: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - ReplaceBitwiseOperator ^ -> &
   * 15 Weak Mutation 920: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 i
   * 16 Weak Mutation 921: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 i
   * 17 Weak Mutation 918: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - ReplaceVariable i -> hashcode
   * 18 Weak Mutation 919: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp Negation of i
   * 19 Weak Mutation 914: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 i
   * 20 Weak Mutation 915: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - ReplaceComparisonOperator != null -> = null
   * 21 Weak Mutation 912: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp Negation of i
   * 22 Weak Mutation 913: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 i
   * 23 Weak Mutation 911: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - ReplaceVariable i -> hashcode
   * 24 Weak Mutation 909: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - DeleteStatement: hash(I)I
   * 25 Weak Mutation 908: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 i
   * 26 Weak Mutation 907: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 i
   * 27 Weak Mutation 906: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp Negation of i
   * 28 Weak Mutation 905: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - ReplaceVariable i -> hashcode
   * 29 Weak Mutation 904: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 hashcode
   * 30 Weak Mutation 903: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 hashcode
   * 31 Weak Mutation 902: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp Negation of hashcode
   * 32 Weak Mutation 901: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - ReplaceVariable hashcode -> i
   * 33 gnu.trove.map.hash.TObjectCharHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - false
   * 34 gnu.trove.map.hash.TObjectCharHashMap.hashCode()I: I34 Branch 67 IF_ACMPEQ L614 - false
   * 35 gnu.trove.map.hash.TObjectCharHashMap.hashCode()I: I45 Branch 68 IFNONNULL L615 - true
   * 36 Weak Mutation 311: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:255 - ReplaceComparisonOperator >= -> ==
   * 37 Weak Mutation 343: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:273 - DeleteStatement: index(Ljava/lang/Object;)I
   * 38 Weak Mutation 342: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:273 - ReplaceVariable key -> REMOVED
   * 39 Weak Mutation 341: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:273 - ReplaceVariable key -> FREE
   * 40 Weak Mutation 349: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:274 - ReplaceComparisonOperator < -> -2
   * 41 Weak Mutation 346: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:274 - InsertUnaryOp IINC -1 index
   * 42 Weak Mutation 345: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:274 - InsertUnaryOp IINC 1 index
   * 43 Weak Mutation 344: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:274 - InsertUnaryOp Negation of index
   * 44 Weak Mutation 358: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:278 - InsertUnaryOp Negation of prev
   * 45 Weak Mutation 359: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:278 - InsertUnaryOp IINC 1 prev
   * 46 Weak Mutation 360: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:278 - InsertUnaryOp IINC -1 prev
   * 47 Weak Mutation 881: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:613 - ReplaceVariable i -> hashcode
   * 48 Weak Mutation 880: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:613 - InsertUnaryOp IINC -1 i
   * 49 Weak Mutation 883: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:613 - ReplaceComparisonOperator <= -> <
   * 50 Weak Mutation 884: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:613 - ReplaceComparisonOperator <= -> -1
   * 51 Weak Mutation 887: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - InsertUnaryOp Negation of i
   * 52 Weak Mutation 886: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - ReplaceVariable i -> hashcode
   * 53 Weak Mutation 889: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - InsertUnaryOp IINC -1 i
   * 54 Weak Mutation 888: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - InsertUnaryOp IINC 1 i
   * 55 Weak Mutation 891: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - DeleteField: FREELjava/lang/Object;
   * 56 Weak Mutation 890: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - ReplaceVariable FREE -> REMOVED
   * 57 Weak Mutation 892: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - ReplaceComparisonOperator == -> !=
   * 58 Weak Mutation 874: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:610 - ReplaceConstant - 0 -> 1
   * 59 Weak Mutation 875: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:611 - DeleteField: _set[Ljava/lang/Object;
   * 60 Weak Mutation 876: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:612 - DeleteField: _values[C
   * 61 Weak Mutation 877: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:613 - ReplaceVariable i -> hashcode
   * 62 Weak Mutation 878: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:613 - InsertUnaryOp Negation of i
   * 63 Weak Mutation 879: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:613 - InsertUnaryOp IINC 1 i
   * 64 Weak Mutation 929: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:619 - InsertUnaryOp Negation of hashcode
   * 65 Weak Mutation 931: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:619 - InsertUnaryOp IINC -1 hashcode
   * 66 Weak Mutation 930: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:619 - InsertUnaryOp IINC 1 hashcode
   * 67 Weak Mutation 349: gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C:274 - ReplaceComparisonOperator < -> -2
   * 68 Weak Mutation 881: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:613 - ReplaceVariable i -> hashcode
   * 69 Weak Mutation 880: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:613 - InsertUnaryOp IINC -1 i
   * 70 Weak Mutation 883: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:613 - ReplaceComparisonOperator <= -> <
   * 71 Weak Mutation 884: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:613 - ReplaceComparisonOperator <= -> -1
   * 72 Weak Mutation 887: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - InsertUnaryOp Negation of i
   * 73 Weak Mutation 886: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - ReplaceVariable i -> hashcode
   * 74 Weak Mutation 889: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - InsertUnaryOp IINC -1 i
   * 75 Weak Mutation 888: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - InsertUnaryOp IINC 1 i
   * 76 Weak Mutation 891: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - DeleteField: FREELjava/lang/Object;
   * 77 Weak Mutation 890: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - ReplaceVariable FREE -> REMOVED
   * 78 Weak Mutation 892: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - ReplaceComparisonOperator == -> !=
   * 79 Weak Mutation 895: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - InsertUnaryOp Negation of i
   * 80 Weak Mutation 894: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - ReplaceVariable i -> hashcode
   * 81 Weak Mutation 874: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:610 - ReplaceConstant - 0 -> 1
   * 82 Weak Mutation 875: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:611 - DeleteField: _set[Ljava/lang/Object;
   * 83 Weak Mutation 876: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:612 - DeleteField: _values[C
   * 84 Weak Mutation 877: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:613 - ReplaceVariable i -> hashcode
   * 85 Weak Mutation 878: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:613 - InsertUnaryOp Negation of i
   * 86 Weak Mutation 879: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:613 - InsertUnaryOp IINC 1 i
   * 87 Weak Mutation 929: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:619 - InsertUnaryOp Negation of hashcode
   * 88 Weak Mutation 928: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> *
   * 89 Weak Mutation 931: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:619 - InsertUnaryOp IINC -1 hashcode
   * 90 Weak Mutation 930: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:619 - InsertUnaryOp IINC 1 hashcode
   * 91 Weak Mutation 926: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> %
   * 92 Weak Mutation 927: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> /
   * 93 Weak Mutation 924: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - ReplaceBitwiseOperator ^ -> |
   * 94 Weak Mutation 925: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> -
   * 95 Weak Mutation 922: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - DeleteStatement: hashCode()I
   * 96 Weak Mutation 923: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - ReplaceBitwiseOperator ^ -> &
   * 97 Weak Mutation 920: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 i
   * 98 Weak Mutation 921: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 i
   * 99 Weak Mutation 918: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - ReplaceVariable i -> hashcode
   * 100 Weak Mutation 919: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp Negation of i
   * 101 Weak Mutation 914: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 i
   * 102 Weak Mutation 915: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - ReplaceComparisonOperator != null -> = null
   * 103 Weak Mutation 912: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp Negation of i
   * 104 Weak Mutation 913: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 i
   * 105 Weak Mutation 911: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - ReplaceVariable i -> hashcode
   * 106 Weak Mutation 909: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - DeleteStatement: hash(I)I
   * 107 Weak Mutation 908: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 i
   * 108 Weak Mutation 907: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 i
   * 109 Weak Mutation 906: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp Negation of i
   * 110 Weak Mutation 905: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - ReplaceVariable i -> hashcode
   * 111 Weak Mutation 904: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 hashcode
   * 112 Weak Mutation 903: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 hashcode
   * 113 Weak Mutation 902: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - InsertUnaryOp Negation of hashcode
   * 114 Weak Mutation 901: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:615 - ReplaceVariable hashcode -> i
   * 115 Weak Mutation 900: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - ReplaceComparisonOperator == -> !=
   * 116 Weak Mutation 899: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - DeleteField: REMOVEDLjava/lang/Object;
   * 117 Weak Mutation 898: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - ReplaceVariable REMOVED -> FREE
   * 118 Weak Mutation 897: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - InsertUnaryOp IINC -1 i
   * 119 Weak Mutation 896: gnu.trove.map.hash.TObjectCharHashMap.hashCode()I:614 - InsertUnaryOp IINC 1 i
   * 120 gnu.trove.map.hash.TObjectCharHashMap.hashCode()I: I22 Branch 65 IFLE L613 - true
   * 121 gnu.trove.map.hash.TObjectCharHashMap.hashCode()I: I22 Branch 65 IFLE L613 - false
   * 122 gnu.trove.map.hash.TObjectCharHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - true
   * 123 gnu.trove.map.hash.TObjectCharHashMap.remove(Ljava/lang/Object;)C: I14 Branch 23 IFLT L274 - true
   */

  @Test
  public void test30()  throws Throwable  {
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>(510);
      tObjectCharHashMap0.put((Integer) 510, '?');
      TObjectCharHashMap<Object> tObjectCharHashMap1 = new TObjectCharHashMap<Object>();
      char char0 = tObjectCharHashMap1.remove((Object) tObjectCharHashMap0);
      assertEquals(1, tObjectCharHashMap0.size());
      assertEquals('\u0000', char0);
  }

  //Test case number: 31
  /*
   * 60 covered goals:
   * 1 Weak Mutation 933: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1081 - DeleteStatement: writeByte(I)V
   * 2 Weak Mutation 932: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1081 - ReplaceConstant - 0 -> 1
   * 3 Weak Mutation 935: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1087 - DeleteStatement: writeChar(I)V
   * 4 Weak Mutation 934: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1087 - DeleteField: no_entry_valueC
   * 5 Weak Mutation 940: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - DeleteStatement: writeInt(I)V
   * 6 Weak Mutation 937: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp +1
   * 7 Weak Mutation 936: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp Negation
   * 8 Weak Mutation 938: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp -1
   * 9 Weak Mutation 944: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp IINC -1 i
   * 10 Weak Mutation 946: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - ReplaceComparisonOperator <= -> <
   * 11 Weak Mutation 947: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - ReplaceComparisonOperator <= -> -1
   * 12 Weak Mutation 941: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - DeleteField: _set[Ljava/lang/Object;
   * 13 Weak Mutation 943: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp IINC 1 i
   * 14 Weak Mutation 942: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp Negation of i
   * 15 Weak Mutation 956: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp Negation of i
   * 16 Weak Mutation 957: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC 1 i
   * 17 Weak Mutation 958: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC -1 i
   * 18 Weak Mutation 959: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceVariable FREE -> REMOVED
   * 19 Weak Mutation 952: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceVariable REMOVED -> FREE
   * 20 Weak Mutation 953: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: REMOVEDLjava/lang/Object;
   * 21 Weak Mutation 954: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceComparisonOperator == -> !=
   * 22 Weak Mutation 955: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: _set[Ljava/lang/Object;
   * 23 Weak Mutation 948: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: _set[Ljava/lang/Object;
   * 24 Weak Mutation 949: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp Negation of i
   * 25 Weak Mutation 950: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC 1 i
   * 26 Weak Mutation 951: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC -1 i
   * 27 Weak Mutation 961: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceComparisonOperator == -> !=
   * 28 Weak Mutation 960: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: FREELjava/lang/Object;
   * 29 gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 69 IFLE L1093 - true
   * 30 gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 69 IFLE L1093 - false
   * 31 gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I39 Branch 70 IF_ACMPEQ L1094 - false
   * 32 gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I45 Branch 71 IF_ACMPEQ L1094 - true
   * 33 Weak Mutation 956: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp Negation of i
   * 34 Weak Mutation 957: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC 1 i
   * 35 Weak Mutation 958: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC -1 i
   * 36 Weak Mutation 959: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceVariable FREE -> REMOVED
   * 37 Weak Mutation 952: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceVariable REMOVED -> FREE
   * 38 Weak Mutation 953: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: REMOVEDLjava/lang/Object;
   * 39 Weak Mutation 954: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceComparisonOperator == -> !=
   * 40 Weak Mutation 955: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: _set[Ljava/lang/Object;
   * 41 Weak Mutation 948: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: _set[Ljava/lang/Object;
   * 42 Weak Mutation 949: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp Negation of i
   * 43 Weak Mutation 950: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC 1 i
   * 44 Weak Mutation 951: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC -1 i
   * 45 Weak Mutation 944: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp IINC -1 i
   * 46 Weak Mutation 946: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - ReplaceComparisonOperator <= -> <
   * 47 Weak Mutation 947: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - ReplaceComparisonOperator <= -> -1
   * 48 Weak Mutation 941: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - DeleteField: _set[Ljava/lang/Object;
   * 49 Weak Mutation 940: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - DeleteStatement: writeInt(I)V
   * 50 Weak Mutation 943: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp IINC 1 i
   * 51 Weak Mutation 942: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp Negation of i
   * 52 Weak Mutation 937: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp +1
   * 53 Weak Mutation 936: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp Negation
   * 54 Weak Mutation 938: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp -1
   * 55 Weak Mutation 933: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1081 - DeleteStatement: writeByte(I)V
   * 56 Weak Mutation 932: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1081 - ReplaceConstant - 0 -> 1
   * 57 Weak Mutation 935: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1087 - DeleteStatement: writeChar(I)V
   * 58 Weak Mutation 934: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1087 - DeleteField: no_entry_valueC
   * 59 Weak Mutation 961: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceComparisonOperator == -> !=
   * 60 Weak Mutation 960: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: FREELjava/lang/Object;
   */

  @Test
  public void test31()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(1, (float) 1, 'b');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
      tObjectCharHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
  }

  //Test case number: 32
  /*
   * 77 covered goals:
   * 1 Weak Mutation 939: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - DeleteField: _sizeI
   * 2 Weak Mutation 963: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1095 - InsertUnaryOp Negation of i
   * 3 Weak Mutation 962: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1095 - DeleteField: _set[Ljava/lang/Object;
   * 4 Weak Mutation 966: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1095 - DeleteStatement: writeObject(Ljava/lang/Object;)V
   * 5 Weak Mutation 965: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1095 - InsertUnaryOp IINC -1 i
   * 6 Weak Mutation 964: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1095 - InsertUnaryOp IINC 1 i
   * 7 Weak Mutation 971: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1096 - DeleteStatement: writeChar(I)V
   * 8 Weak Mutation 970: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1096 - InsertUnaryOp IINC -1 i
   * 9 Weak Mutation 969: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1096 - InsertUnaryOp IINC 1 i
   * 10 Weak Mutation 968: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1096 - InsertUnaryOp Negation of i
   * 11 Weak Mutation 967: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1096 - DeleteField: _values[C
   * 12 gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I45 Branch 71 IF_ACMPEQ L1094 - false
   * 13 Weak Mutation 102: gnu.trove.map.hash.TObjectCharHashMap.<init>(IFC)V:124 - ReplaceComparisonOperator == -> -2
   * 14 Weak Mutation 110: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:141 - ReplaceVariable hashmap -> this
   * 15 Weak Mutation 108: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:140 - InsertUnaryOp Negation
   * 16 Weak Mutation 109: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:140 - DeleteField: _loadFactorF
   * 17 Weak Mutation 106: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:138 - ReplaceComparisonOperator == -> !=
   * 18 Weak Mutation 107: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:140 - ReplaceVariable hashmap -> this
   * 19 Weak Mutation 119: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - ReplaceConstant - 10.0 -> 0.0
   * 20 Weak Mutation 115: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:143 - ReplaceComparisonOperator == -> -2
   * 21 Weak Mutation 127: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - ReplaceArithmeticOperator / -> +
   * 22 Weak Mutation 126: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - ReplaceArithmeticOperator / -> -
   * 23 Weak Mutation 125: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - DeleteField: _loadFactorF
   * 24 Weak Mutation 124: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - InsertUnaryOp Negation
   * 25 Weak Mutation 123: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - ReplaceConstant - 10.0 -> 11.0
   * 26 Weak Mutation 122: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - ReplaceConstant - 10.0 -> 9.0
   * 27 Weak Mutation 121: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - ReplaceConstant - 10.0 -> -1.0
   * 28 Weak Mutation 120: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - ReplaceConstant - 10.0 -> 1.0
   * 29 Weak Mutation 129: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - ReplaceArithmeticOperator / -> *
   * 30 Weak Mutation 128: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - ReplaceArithmeticOperator / -> %
   * 31 Weak Mutation 131: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - DeleteStatement: setUp(I)I
   * 32 Weak Mutation 130: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:146 - DeleteStatement: ceil(D)D
   * 33 Weak Mutation 132: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:148 - DeleteStatement: putAll(Lgnu/trove/map/TObjectCharMap;)V
   * 34 Weak Mutation 379: gnu.trove.map.hash.TObjectCharHashMap.putAll(Lgnu/trove/map/TObjectCharMap;)V:308 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z
   * 35 Weak Mutation 378: gnu.trove.map.hash.TObjectCharHashMap.putAll(Lgnu/trove/map/TObjectCharMap;)V:308 - DeleteField: PUT_ALL_PROCLgnu/trove/procedure/TObjectCharProcedure;
   * 36 Weak Mutation 956: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp Negation of i
   * 37 Weak Mutation 957: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC 1 i
   * 38 Weak Mutation 958: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC -1 i
   * 39 Weak Mutation 959: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceVariable FREE -> REMOVED
   * 40 Weak Mutation 952: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceVariable REMOVED -> FREE
   * 41 Weak Mutation 953: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: REMOVEDLjava/lang/Object;
   * 42 Weak Mutation 954: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceComparisonOperator == -> !=
   * 43 Weak Mutation 955: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: _set[Ljava/lang/Object;
   * 44 Weak Mutation 948: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: _set[Ljava/lang/Object;
   * 45 Weak Mutation 949: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp Negation of i
   * 46 Weak Mutation 950: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC 1 i
   * 47 Weak Mutation 951: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC -1 i
   * 48 Weak Mutation 944: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp IINC -1 i
   * 49 Weak Mutation 946: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - ReplaceComparisonOperator <= -> <
   * 50 Weak Mutation 947: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - ReplaceComparisonOperator <= -> -1
   * 51 Weak Mutation 941: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - DeleteField: _set[Ljava/lang/Object;
   * 52 Weak Mutation 940: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - DeleteStatement: writeInt(I)V
   * 53 Weak Mutation 943: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp IINC 1 i
   * 54 Weak Mutation 942: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp Negation of i
   * 55 Weak Mutation 937: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp +1
   * 56 Weak Mutation 936: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp Negation
   * 57 Weak Mutation 938: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp -1
   * 58 Weak Mutation 933: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1081 - DeleteStatement: writeByte(I)V
   * 59 Weak Mutation 932: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1081 - ReplaceConstant - 0 -> 1
   * 60 Weak Mutation 935: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1087 - DeleteStatement: writeChar(I)V
   * 61 Weak Mutation 961: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceComparisonOperator == -> !=
   * 62 Weak Mutation 960: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: FREELjava/lang/Object;
   * 63 Weak Mutation 102: gnu.trove.map.hash.TObjectCharHashMap.<init>(IFC)V:124 - ReplaceComparisonOperator == -> -2
   * 64 Weak Mutation 115: gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V:143 - ReplaceComparisonOperator == -> -2
   * 65 Weak Mutation 939: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - DeleteField: _sizeI
   * 66 Weak Mutation 971: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1096 - DeleteStatement: writeChar(I)V
   * 67 Weak Mutation 970: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1096 - InsertUnaryOp IINC -1 i
   * 68 Weak Mutation 969: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1096 - InsertUnaryOp IINC 1 i
   * 69 Weak Mutation 968: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1096 - InsertUnaryOp Negation of i
   * 70 Weak Mutation 963: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1095 - InsertUnaryOp Negation of i
   * 71 Weak Mutation 962: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1095 - DeleteField: _set[Ljava/lang/Object;
   * 72 Weak Mutation 967: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1096 - DeleteField: _values[C
   * 73 Weak Mutation 966: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1095 - DeleteStatement: writeObject(Ljava/lang/Object;)V
   * 74 Weak Mutation 965: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1095 - InsertUnaryOp IINC -1 i
   * 75 Weak Mutation 964: gnu.trove.map.hash.TObjectCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1095 - InsertUnaryOp IINC 1 i
   * 76 gnu.trove.map.hash.TObjectCharHashMap.<init>(IFC)V: I23 Branch 8 IFEQ L124 - true
   * 77 gnu.trove.map.hash.TObjectCharHashMap.<init>(Lgnu/trove/map/TObjectCharMap;)V: I35 Branch 10 IFEQ L143 - true
   */

  @Test
  public void test32()  throws Throwable  {
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>(847);
      TObjectCharHashMap<Object> tObjectCharHashMap1 = new TObjectCharHashMap<Object>((TObjectCharMap<?>) tObjectCharHashMap0);
      tObjectCharHashMap1.put((Object) null, '\"');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) printStream0, 847);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) bufferedOutputStream0);
      tObjectCharHashMap1.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(1, tObjectCharHashMap1.size());
      assertEquals("{null=\"}", tObjectCharHashMap1.toString());
  }

  //Test case number: 33
  /*
   * 2 covered goals:
   * 1 Weak Mutation 972: gnu.trove.map.hash.TObjectCharHashMap.readExternal(Ljava/io/ObjectInput;)V:1106 - DeleteStatement: readByte()B
   * 2 Weak Mutation 972: gnu.trove.map.hash.TObjectCharHashMap.readExternal(Ljava/io/ObjectInput;)V:1106 - DeleteStatement: readByte()B
   */

  @Test
  public void test33()  throws Throwable  {
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>((-1173), 0.5F);
      // Undeclared exception!
      try {
        tObjectCharHashMap0.readExternal((ObjectInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 34
  /*
   * 20 covered goals:
   * 1 Weak Mutation 993: gnu.trove.map.hash.TObjectCharHashMap.toString()Ljava/lang/String;:1130 - ReplaceConstant - { -> 
   * 2 Weak Mutation 994: gnu.trove.map.hash.TObjectCharHashMap.toString()Ljava/lang/String;:1131 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z
   * 3 Weak Mutation 995: gnu.trove.map.hash.TObjectCharHashMap.toString()Ljava/lang/String;:1141 - ReplaceConstant - } -> 
   * 4 Weak Mutation 996: gnu.trove.map.hash.TObjectCharHashMap.toString()Ljava/lang/String;:1141 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 5 Weak Mutation 997: gnu.trove.map.hash.TObjectCharHashMap.toString()Ljava/lang/String;:1142 - DeleteStatement: toString()Ljava/lang/String;
   * 6 gnu.trove.map.hash.TObjectCharHashMap.toString()Ljava/lang/String;: root-Branch
   * 7 gnu.trove.map.hash.TObjectCharHashMap$2.<init>(Lgnu/trove/map/hash/TObjectCharHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 8 Weak Mutation 103: gnu.trove.map.hash.TObjectCharHashMap.<init>(IFC)V:125 - DeleteField: _values[C
   * 9 Weak Mutation 100: gnu.trove.map.hash.TObjectCharHashMap.<init>(IFC)V:124 - ReplaceComparisonOperator == -> >=
   * 10 Weak Mutation 98: gnu.trove.map.hash.TObjectCharHashMap.<init>(IFC)V:122 - InsertUnaryOp IINC -1 noEntryValue
   * 11 Weak Mutation 99: gnu.trove.map.hash.TObjectCharHashMap.<init>(IFC)V:124 - DeleteField: no_entry_valueC
   * 12 Weak Mutation 96: gnu.trove.map.hash.TObjectCharHashMap.<init>(IFC)V:122 - InsertUnaryOp Negation of noEntryValue
   * 13 Weak Mutation 97: gnu.trove.map.hash.TObjectCharHashMap.<init>(IFC)V:122 - InsertUnaryOp IINC 1 noEntryValue
   * 14 Weak Mutation 104: gnu.trove.map.hash.TObjectCharHashMap.<init>(IFC)V:125 - DeleteField: no_entry_valueC
   * 15 Weak Mutation 105: gnu.trove.map.hash.TObjectCharHashMap.<init>(IFC)V:125 - DeleteStatement: fill([CC)V
   * 16 Weak Mutation 993: gnu.trove.map.hash.TObjectCharHashMap.toString()Ljava/lang/String;:1130 - ReplaceConstant - { -> 
   * 17 Weak Mutation 995: gnu.trove.map.hash.TObjectCharHashMap.toString()Ljava/lang/String;:1141 - ReplaceConstant - } -> 
   * 18 Weak Mutation 994: gnu.trove.map.hash.TObjectCharHashMap.toString()Ljava/lang/String;:1131 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z
   * 19 Weak Mutation 997: gnu.trove.map.hash.TObjectCharHashMap.toString()Ljava/lang/String;:1142 - DeleteStatement: toString()Ljava/lang/String;
   * 20 Weak Mutation 996: gnu.trove.map.hash.TObjectCharHashMap.toString()Ljava/lang/String;:1141 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   */

  @Test
  public void test34()  throws Throwable  {
      TObjectCharHashMap<Object> tObjectCharHashMap0 = new TObjectCharHashMap<Object>((-301), (-1394.9487F), 'q');
      String string0 = tObjectCharHashMap0.toString();
      assertEquals('q', tObjectCharHashMap0.getNoEntryValue());
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  //Test case number: 35
  /*
   * 115 covered goals:
   * 1 Weak Mutation 1268: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1135 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 2 Weak Mutation 1266: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1135 - DeleteField: val$bufLjava/lang/StringBuilder;
   * 3 Weak Mutation 1267: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1135 - ReplaceConstant - , -> 
   * 4 gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z: I4 Branch 102 IFEQ L1134 - true
   * 5 Weak Mutation 275: gnu.trove.map.hash.TObjectCharHashMap.put(Ljava/lang/Object;C)C:238 - ReplaceVariable key -> FREE
   * 6 Weak Mutation 279: gnu.trove.map.hash.TObjectCharHashMap.put(Ljava/lang/Object;C)C:239 - InsertUnaryOp IINC 1 value
   * 7 Weak Mutation 278: gnu.trove.map.hash.TObjectCharHashMap.put(Ljava/lang/Object;C)C:239 - InsertUnaryOp Negation of value
   * 8 Weak Mutation 277: gnu.trove.map.hash.TObjectCharHashMap.put(Ljava/lang/Object;C)C:238 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 9 Weak Mutation 276: gnu.trove.map.hash.TObjectCharHashMap.put(Ljava/lang/Object;C)C:238 - ReplaceVariable key -> REMOVED
   * 10 Weak Mutation 283: gnu.trove.map.hash.TObjectCharHashMap.put(Ljava/lang/Object;C)C:239 - InsertUnaryOp IINC -1 index
   * 11 Weak Mutation 282: gnu.trove.map.hash.TObjectCharHashMap.put(Ljava/lang/Object;C)C:239 - InsertUnaryOp IINC 1 index
   * 12 Weak Mutation 281: gnu.trove.map.hash.TObjectCharHashMap.put(Ljava/lang/Object;C)C:239 - InsertUnaryOp Negation of index
   * 13 Weak Mutation 280: gnu.trove.map.hash.TObjectCharHashMap.put(Ljava/lang/Object;C)C:239 - InsertUnaryOp IINC -1 value
   * 14 Weak Mutation 309: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:254 - ReplaceConstant - 1 -> 0
   * 15 Weak Mutation 310: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:255 - InsertUnaryOp Negation of index
   * 16 Weak Mutation 312: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:255 - ReplaceComparisonOperator >= -> >
   * 17 Weak Mutation 339: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:266 - InsertUnaryOp Negation of previous
   * 18 Weak Mutation 338: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:266 - ReplaceVariable previous -> value
   * 19 Weak Mutation 337: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:264 - DeleteStatement: postInsertHook(Z)V
   * 20 Weak Mutation 336: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:264 - DeleteField: consumeFreeSlotZ
   * 21 Weak Mutation 326: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:261 - InsertUnaryOp Negation of index
   * 22 Weak Mutation 327: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:261 - InsertUnaryOp IINC 1 index
   * 23 Weak Mutation 325: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:261 - DeleteField: _values[C
   * 24 Weak Mutation 334: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:263 - ReplaceComparisonOperator == -> !=
   * 25 Weak Mutation 335: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:264 - InsertUnaryOp Negation
   * 26 Weak Mutation 332: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:261 - InsertUnaryOp IINC -1 value
   * 27 Weak Mutation 333: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:263 - InsertUnaryOp Negation of isNewMapping
   * 28 Weak Mutation 330: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:261 - InsertUnaryOp Negation of value
   * 29 Weak Mutation 331: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:261 - InsertUnaryOp IINC 1 value
   * 30 Weak Mutation 328: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:261 - InsertUnaryOp IINC -1 index
   * 31 Weak Mutation 329: gnu.trove.map.hash.TObjectCharHashMap.doPut(CI)C:261 - ReplaceVariable value -> previous
   * 32 Weak Mutation 686: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:458 - InsertUnaryOp Negation of newValue
   * 33 Weak Mutation 683: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:455 - DeleteStatement: postInsertHook(Z)V
   * 34 Weak Mutation 682: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:455 - DeleteField: consumeFreeSlotZ
   * 35 Weak Mutation 681: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:455 - InsertUnaryOp Negation
   * 36 Weak Mutation 680: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:454 - ReplaceComparisonOperator == -> !=
   * 37 Weak Mutation 679: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:454 - InsertUnaryOp Negation of isNewMapping
   * 38 Weak Mutation 678: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:449 - ReplaceConstant - 1 -> 0
   * 39 Weak Mutation 677: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:448 - InsertUnaryOp IINC -1 put_amount
   * 40 Weak Mutation 676: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:448 - InsertUnaryOp IINC 1 put_amount
   * 41 Weak Mutation 675: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:448 - InsertUnaryOp Negation of put_amount
   * 42 Weak Mutation 673: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:448 - InsertUnaryOp IINC -1 index
   * 43 Weak Mutation 672: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:448 - InsertUnaryOp IINC 1 index
   * 44 Weak Mutation 645: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:443 - InsertUnaryOp IINC -1 index
   * 45 Weak Mutation 644: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:443 - InsertUnaryOp IINC 1 index
   * 46 Weak Mutation 646: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:443 - ReplaceComparisonOperator >= -> ==
   * 47 Weak Mutation 641: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:440 - ReplaceVariable key -> REMOVED
   * 48 Weak Mutation 640: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:440 - ReplaceVariable key -> FREE
   * 49 Weak Mutation 643: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:443 - InsertUnaryOp Negation of index
   * 50 Weak Mutation 642: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:440 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 51 Weak Mutation 670: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:448 - DeleteField: _values[C
   * 52 Weak Mutation 671: gnu.trove.map.hash.TObjectCharHashMap.adjustOrPutValue(Ljava/lang/Object;CC)C:448 - InsertUnaryOp Negation of index
   * 53 Weak Mutation 747: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - DeleteStatement: execute(Ljava/lang/Object;C)Z
   * 54 Weak Mutation 746: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 55 Weak Mutation 745: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 56 Weak Mutation 744: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 57 Weak Mutation 750: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:513 - ReplaceConstant - 1 -> 0
   * 58 Weak Mutation 748: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - ReplaceComparisonOperator != -> ==
   * 59 Weak Mutation 739: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - ReplaceComparisonOperator == -> !=
   * 60 Weak Mutation 738: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - DeleteField: REMOVEDLjava/lang/Object;
   * 61 Weak Mutation 737: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - ReplaceVariable REMOVED -> FREE
   * 62 Weak Mutation 736: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 63 Weak Mutation 743: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 64 Weak Mutation 742: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 65 Weak Mutation 741: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 66 Weak Mutation 717: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:504 - DeleteField: _set[Ljava/lang/Object;
   * 67 Weak Mutation 718: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:505 - DeleteField: _values[C
   * 68 Weak Mutation 728: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 69 Weak Mutation 729: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 70 Weak Mutation 730: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - ReplaceVariable FREE -> REMOVED
   * 71 Weak Mutation 731: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - DeleteField: FREELjava/lang/Object;
   * 72 Weak Mutation 732: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - ReplaceComparisonOperator == -> !=
   * 73 Weak Mutation 734: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 74 Weak Mutation 735: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 75 Weak Mutation 720: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:506 - InsertUnaryOp Negation of i
   * 76 Weak Mutation 721: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:506 - InsertUnaryOp IINC 1 i
   * 77 Weak Mutation 722: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:506 - InsertUnaryOp IINC -1 i
   * 78 Weak Mutation 724: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:506 - ReplaceComparisonOperator <= -> <
   * 79 Weak Mutation 725: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:506 - ReplaceComparisonOperator <= -> -1
   * 80 Weak Mutation 727: gnu.trove.map.hash.TObjectCharHashMap.forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 81 Weak Mutation 993: gnu.trove.map.hash.TObjectCharHashMap.toString()Ljava/lang/String;:1130 - ReplaceConstant - { -> 
   * 82 Weak Mutation 995: gnu.trove.map.hash.TObjectCharHashMap.toString()Ljava/lang/String;:1141 - ReplaceConstant - } -> 
   * 83 Weak Mutation 994: gnu.trove.map.hash.TObjectCharHashMap.toString()Ljava/lang/String;:1131 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectCharProcedure;)Z
   * 84 Weak Mutation 997: gnu.trove.map.hash.TObjectCharHashMap.toString()Ljava/lang/String;:1142 - DeleteStatement: toString()Ljava/lang/String;
   * 85 Weak Mutation 996: gnu.trove.map.hash.TObjectCharHashMap.toString()Ljava/lang/String;:1141 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 86 Weak Mutation 1263: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1134 - DeleteField: firstZ
   * 87 Weak Mutation 1262: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1134 - InsertUnaryOp Negation
   * 88 Weak Mutation 1270: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1137 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
   * 89 Weak Mutation 1271: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1137 - ReplaceConstant - = -> 
   * 90 Weak Mutation 1269: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1137 - DeleteField: val$bufLjava/lang/StringBuilder;
   * 91 Weak Mutation 1264: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1134 - ReplaceComparisonOperator == -> !=
   * 92 Weak Mutation 1265: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1134 - ReplaceConstant - 0 -> 1
   * 93 Weak Mutation 1276: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1137 - DeleteStatement: append(C)Ljava/lang/StringBuilder;
   * 94 Weak Mutation 1277: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1138 - ReplaceConstant - 1 -> 0
   * 95 Weak Mutation 1274: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1137 - InsertUnaryOp IINC 1 value
   * 96 Weak Mutation 1275: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1137 - InsertUnaryOp IINC -1 value
   * 97 Weak Mutation 1272: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1137 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 98 Weak Mutation 1273: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1137 - InsertUnaryOp Negation of value
   * 99 Weak Mutation 1263: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1134 - DeleteField: firstZ
   * 100 Weak Mutation 1262: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1134 - InsertUnaryOp Negation
   * 101 Weak Mutation 1270: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1137 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
   * 102 Weak Mutation 1271: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1137 - ReplaceConstant - = -> 
   * 103 Weak Mutation 1268: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1135 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 104 Weak Mutation 1269: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1137 - DeleteField: val$bufLjava/lang/StringBuilder;
   * 105 Weak Mutation 1266: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1135 - DeleteField: val$bufLjava/lang/StringBuilder;
   * 106 Weak Mutation 1267: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1135 - ReplaceConstant - , -> 
   * 107 Weak Mutation 1264: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1134 - ReplaceComparisonOperator == -> !=
   * 108 Weak Mutation 1265: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1134 - ReplaceConstant - 0 -> 1
   * 109 Weak Mutation 1276: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1137 - DeleteStatement: append(C)Ljava/lang/StringBuilder;
   * 110 Weak Mutation 1277: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1138 - ReplaceConstant - 1 -> 0
   * 111 Weak Mutation 1274: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1137 - InsertUnaryOp IINC 1 value
   * 112 Weak Mutation 1275: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1137 - InsertUnaryOp IINC -1 value
   * 113 Weak Mutation 1272: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1137 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 114 Weak Mutation 1273: gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z:1137 - InsertUnaryOp Negation of value
   * 115 gnu.trove.map.hash.TObjectCharHashMap$2.execute(Ljava/lang/Object;C)Z: I4 Branch 102 IFEQ L1134 - false
   */

  @Test
  public void test35()  throws Throwable  {
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>();
      tObjectCharHashMap0.adjustOrPutValue((Integer) (-532), '{', '{');
      tObjectCharHashMap0.put((Integer) 23, 'r');
      String string0 = tObjectCharHashMap0.toString();
      assertEquals(2, tObjectCharHashMap0.size());
      assertEquals("{-532={,23=r}", string0);
  }

  //Test case number: 36
  /*
   * 13 covered goals:
   * 1 gnu.trove.map.hash.TObjectCharHashMap.keySet()Ljava/util/Set;: root-Branch
   * 2 gnu.trove.map.hash.TObjectCharHashMap$KeyView.<init>(Lgnu/trove/map/hash/TObjectCharHashMap;)V: root-Branch
   * 3 Weak Mutation 137: gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I:163 - InsertUnaryOp Negation of capacity
   * 4 Weak Mutation 136: gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I:163 - ReplaceVariable capacity -> initialCapacity
   * 5 Weak Mutation 139: gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I:163 - InsertUnaryOp IINC -1 capacity
   * 6 Weak Mutation 138: gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I:163 - InsertUnaryOp IINC 1 capacity
   * 7 Weak Mutation 141: gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I:164 - InsertUnaryOp Negation of capacity
   * 8 Weak Mutation 140: gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I:164 - ReplaceVariable capacity -> initialCapacity
   * 9 Weak Mutation 143: gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I:164 - InsertUnaryOp IINC -1 capacity
   * 10 Weak Mutation 142: gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I:164 - InsertUnaryOp IINC 1 capacity
   * 11 Weak Mutation 133: gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I:162 - InsertUnaryOp Negation of initialCapacity
   * 12 Weak Mutation 135: gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I:162 - InsertUnaryOp IINC -1 initialCapacity
   * 13 Weak Mutation 134: gnu.trove.map.hash.TObjectCharHashMap.setUp(I)I:162 - InsertUnaryOp IINC 1 initialCapacity
   */

  @Test
  public void test36()  throws Throwable  {
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>();
      tObjectCharHashMap0.keySet();
      assertEquals(23, tObjectCharHashMap0.capacity());
  }
}
