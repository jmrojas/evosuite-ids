/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedCharCollection;
import gnu.trove.impl.sync.TSynchronizedShortCharMap;
import gnu.trove.map.TShortCharMap;
import gnu.trove.map.hash.TShortCharHashMap;
import gnu.trove.procedure.TShortCharProcedure;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedShortCharMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = (-1568);
          float float0 = 166.55101F;
          float float1 = (-1640.9253F);
          short short0 = (short) (-1);
          char char0 = 'D';
          TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0, float1, short0, char0);
          String string0 = "%rMm\\XJ";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      String string0 = File.pathSeparator;
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0, (Object) string0);
      tSynchronizedShortCharMap0.valueCollection();
      TShortCharMap tShortCharMap0 = null;
      Object object0 = null;
      TSynchronizedShortCharMap tSynchronizedShortCharMap1 = new TSynchronizedShortCharMap(tShortCharMap0, object0);
      // Undeclared exception!
      try {
        tSynchronizedShortCharMap1.putAll(tShortCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-1411);
      float float0 = 1762.9077F;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0, float0);
      Locale locale0 = Locale.CHINESE;
      String string0 = tShortCharHashMap0.toString();
      String string1 = locale0.getCountry();
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0, (Object) string1);
      short short0 = (short) (-1815);
      tSynchronizedShortCharMap0.increment(short0);
      String string2 = tSynchronizedShortCharMap0.toString();
      assertTrue(string2.equals(string0));
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      float float0 = 1633.2372F;
      short short0 = (short)0;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-48);
      byteArray0[0] = byte0;
      byte byte1 = (byte)95;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      tShortCharHashMap0._states = byteArray0;
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
      // Undeclared exception!
      try {
        tSynchronizedShortCharMap0.keys(tShortCharHashMap0._set);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short) (-1043);
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short) (-1522);
      shortArray0[2] = short2;
      short short3 = (short) (-79);
      shortArray0[3] = short3;
      short short4 = (short)220;
      shortArray0[4] = short4;
      short short5 = (short)629;
      shortArray0[5] = short5;
      char[] charArray0 = new char[7];
      char char0 = 'F';
      charArray0[0] = char0;
      char char1 = 'B';
      charArray0[1] = char1;
      char char2 = 'i';
      charArray0[2] = char2;
      char char3 = 'T';
      charArray0[3] = char3;
      char char4 = 'B';
      charArray0[4] = char4;
      char char5 = 'S';
      charArray0[5] = char5;
      char char6 = 'P';
      charArray0[6] = char6;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
      charArray0[0] = char6;
      charArray0[1] = char1;
      charArray0[2] = char4;
      char char7 = 'Q';
      charArray0[3] = char7;
      charArray0[4] = char6;
      charArray0[5] = char7;
      charArray0[6] = char7;
      assertTrue(charArray0[6] == char7);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-468);
      float float0 = (-938.1184F);
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0, float0);
      String string0 = "";
      URI uRI0 = new URI(string0);
      String string1 = uRI0.getSchemeSpecificPart();
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0, (Object) string1);
      short[] shortArray0 = new short[9];
      short short0 = (short) (-627);
      shortArray0[0] = short0;
      short short1 = (short)1;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)463;
      shortArray0[3] = short3;
      short short4 = (short)964;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short) (-1);
      shortArray0[7] = short7;
      short short8 = (short)399;
      shortArray0[8] = short8;
      tShortCharHashMap0.keys(shortArray0);
      String string2 = uRI0.getAuthority();
      TSynchronizedShortCharMap tSynchronizedShortCharMap1 = new TSynchronizedShortCharMap((TShortCharMap) tSynchronizedShortCharMap0, (Object) string2);
      char char0 = '`';
      // Undeclared exception!
      try {
        tSynchronizedShortCharMap1.containsValue(char0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short)2008;
      shortArray0[0] = short0;
      short short1 = (short)124;
      shortArray0[1] = short1;
      short short2 = (short) (-1629);
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)1;
      shortArray0[6] = short6;
      short short7 = (short)1;
      shortArray0[7] = short7;
      short short8 = (short) (-16207);
      shortArray0[8] = short8;
      short short9 = (short)1;
      shortArray0[9] = short9;
      char[] charArray0 = new char[2];
      char char0 = '?';
      charArray0[0] = char0;
      char char1 = 'L';
      charArray0[1] = char1;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
      TSynchronizedCharCollection tSynchronizedCharCollection0 = (TSynchronizedCharCollection)tSynchronizedShortCharMap0.valueCollection();
      assertNotNull(tSynchronizedCharCollection0);
      
      short[] shortArray1 = new short[2];
      short short10 = (short)0;
      shortArray1[0] = short10;
      short short11 = (short)0;
      shortArray1[1] = short11;
      int int0 = 0;
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap(int0);
      TShortCharHashMap tShortCharHashMap2 = new TShortCharHashMap((TShortCharMap) tShortCharHashMap1);
      TSynchronizedShortCharMap tSynchronizedShortCharMap1 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap2);
      short short12 = (short) (-208);
      String string0 = Short.toString(short12);
      boolean boolean0 = tSynchronizedShortCharMap1.equals((Object) string0);
      char[] charArray1 = new char[3];
      char char2 = 'c';
      boolean boolean1 = tSynchronizedShortCharMap1.isEmpty();
      assertFalse(boolean1 == boolean0);
      
      charArray1[0] = char2;
      char char3 = 'k';
      char char4 = ' ';
      tShortCharHashMap1.adjustOrPutValue(short12, charArray1[0], char4);
      charArray1[1] = char3;
      char char5 = 'v';
      charArray1[2] = char5;
      TShortCharHashMap tShortCharHashMap3 = new TShortCharHashMap(shortArray1, charArray1);
      TSynchronizedShortCharMap tSynchronizedShortCharMap2 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap3);
      assertFalse(tSynchronizedShortCharMap2.equals(tSynchronizedShortCharMap0));
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 30;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0, int0);
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
      String string0 = File.pathSeparator;
      TSynchronizedShortCharMap tSynchronizedShortCharMap1 = new TSynchronizedShortCharMap((TShortCharMap) tSynchronizedShortCharMap0, (Object) string0);
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap((TShortCharMap) tSynchronizedShortCharMap1);
      TSynchronizedShortCharMap tSynchronizedShortCharMap2 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap1);
      TShortCharMap tShortCharMap0 = null;
      String string1 = "w";
      URI uRI0 = URI.create(string1);
      URI uRI1 = uRI0.parseServerAuthority();
      String string2 = "ETo|mdc.ghNv+k_4~";
      // Undeclared exception!
      try {
        uRI1.resolve(string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 3: ETo|mdc.ghNv+k_4~
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      Locale locale0 = Locale.ROOT;
      String string0 = locale0.getISO3Language();
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0, (Object) string0);
      short short0 = (short)0;
      String string1 = Short.toString(short0);
      TSynchronizedShortCharMap tSynchronizedShortCharMap1 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0, (Object) string1);
      TSynchronizedShortCharMap tSynchronizedShortCharMap2 = new TSynchronizedShortCharMap((TShortCharMap) tSynchronizedShortCharMap1);
      String string2 = File.separator;
      TSynchronizedShortCharMap tSynchronizedShortCharMap3 = new TSynchronizedShortCharMap((TShortCharMap) tSynchronizedShortCharMap2, (Object) string2);
      TShortCharProcedure tShortCharProcedure0 = null;
      short short1 = (short) (-591);
      char char0 = 'A';
      tShortCharHashMap0.put(short1, char0);
      // Undeclared exception!
      try {
        tSynchronizedShortCharMap3.forEachEntry(tShortCharProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
      tShortCharHashMap0.putAll((TShortCharMap) tSynchronizedShortCharMap0);
      Locale locale0 = Locale.ENGLISH;
      String string0 = locale0.getDisplayLanguage();
      boolean boolean0 = tSynchronizedShortCharMap0.equals((Object) string0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 1505;
      float float0 = 0.0F;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0, float0);
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://?#
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short)94;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short) (-1336);
      shortArray0[2] = short2;
      short short3 = (short)274;
      shortArray0[3] = short3;
      short short4 = (short) (-545);
      shortArray0[4] = short4;
      short short5 = (short) (-1468);
      shortArray0[5] = short5;
      char[] charArray0 = new char[10];
      char char0 = ';';
      charArray0[0] = char0;
      char char1 = '3';
      charArray0[1] = char1;
      char char2 = '\'';
      charArray0[2] = char2;
      char char3 = 'F';
      charArray0[3] = char3;
      char char4 = 'R';
      charArray0[4] = char4;
      char char5 = 'h';
      charArray0[5] = char5;
      char char6 = '0';
      charArray0[6] = char6;
      char char7 = '{';
      charArray0[7] = char7;
      char char8 = '$';
      charArray0[8] = char8;
      char char9 = 'L';
      charArray0[9] = char9;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
      char char10 = 'Y';
      boolean boolean0 = tSynchronizedShortCharMap0.containsValue(char10);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-1827);
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0, int0);
      String string0 = "";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0);
      // Undeclared exception!
      try {
        stringTokenizer0.nextToken(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 2557;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0);
      short short0 = (short)146;
      tShortCharHashMap0.getNoEntryValue();
      String string0 = "+mC0VC|7chn TpOg3\\";
      File file0 = new File(string0, string0);
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // +mC0VC|7chn TpOg3\\/+mC0VC|7chn TpOg3\\ (No such file or directory)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short) (-217);
      shortArray0[0] = short0;
      short short1 = (short)1369;
      shortArray0[1] = short1;
      short short2 = (short)1;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)147;
      shortArray0[6] = short6;
      short short7 = (short)554;
      shortArray0[7] = short7;
      short short8 = (short)0;
      shortArray0[8] = short8;
      short short9 = (short)1047;
      shortArray0[9] = short9;
      char[] charArray0 = new char[9];
      char char0 = 'M';
      charArray0[0] = char0;
      char char1 = 'n';
      charArray0[1] = char1;
      char char2 = '3';
      charArray0[2] = char2;
      char char3 = 'L';
      charArray0[3] = char3;
      char char4 = '(';
      charArray0[4] = char4;
      char char5 = 'f';
      charArray0[5] = char5;
      char char6 = 'X';
      charArray0[6] = char6;
      char char7 = 'V';
      charArray0[7] = char7;
      char char8 = 'O';
      charArray0[8] = char8;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
      TSynchronizedShortCharMap tSynchronizedShortCharMap1 = new TSynchronizedShortCharMap((TShortCharMap) tSynchronizedShortCharMap0);
      char char9 = tSynchronizedShortCharMap1.getNoEntryValue();
      assertFalse(char9 == char1);
  }

  @Test
  public void test15()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      short short0 = (short)211;
      char char0 = 'H';
      tShortCharHashMap0.adjustOrPutValue(short0, char0, char0);
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
      short[] shortArray0 = tSynchronizedShortCharMap0.keys();
      assertNotNull(shortArray0);
      
      TSynchronizedShortCharMap tSynchronizedShortCharMap1 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
      int int0 = tSynchronizedShortCharMap1.hashCode();
      assertEquals(155, int0);
  }

  @Test
  public void test16()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      String string0 = "";
      int int0 = 1;
      String string1 = "(8!";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int0, string0, string0, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://@:1?#(8!
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      TShortCharMap tShortCharMap0 = null;
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = null;
      try {
        tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap(tShortCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 0;
      float float0 = 1.0F;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0, float0);
      Object object0 = null;
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0, object0);
      tSynchronizedShortCharMap0.iterator();
      int int1 = (-164);
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap(int1);
      TShortCharHashMap tShortCharHashMap2 = new TShortCharHashMap((TShortCharMap) tShortCharHashMap1);
      boolean boolean0 = true;
      tShortCharHashMap2.reenableAutoCompaction(boolean0);
      tShortCharHashMap2.getNoEntryKey();
      TSynchronizedShortCharMap tSynchronizedShortCharMap1 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap2);
      tSynchronizedShortCharMap1.clear();
      assertEquals(0, tSynchronizedShortCharMap1.size());
  }
}
