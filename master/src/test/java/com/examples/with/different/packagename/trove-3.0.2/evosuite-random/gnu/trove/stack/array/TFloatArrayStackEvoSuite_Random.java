/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.stack.array;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.stack.TFloatStack;
import gnu.trove.stack.array.TFloatArrayStack;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatArrayStackEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-1);
      TFloatArrayStack tFloatArrayStack0 = null;
      try {
        tFloatArrayStack0 = new TFloatArrayStack(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TFloatStack tFloatStack0 = null;
      TFloatArrayStack tFloatArrayStack0 = null;
      try {
        tFloatArrayStack0 = new TFloatArrayStack(tFloatStack0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Only support TFloatArrayStack
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-738);
      TFloatArrayStack tFloatArrayStack0 = null;
      try {
        tFloatArrayStack0 = new TFloatArrayStack(int0, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      TFloatArrayStack tFloatArrayStack0 = new TFloatArrayStack();
      String string0 = "end index < ";
      File file0 = new File(string0);
      String string1 = file0.toString();
      tFloatArrayStack0.equals((Object) string1);
      // Undeclared exception!
      try {
        tFloatArrayStack0.peek();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TFloatArrayStack tFloatArrayStack0 = new TFloatArrayStack();
      tFloatArrayStack0.hashCode();
      // Undeclared exception!
      try {
        tFloatArrayStack0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

//   @Test
//   public void test5()  throws Throwable  {
//       int int0 = 1442;
//       float float0 = (-461.12213F);
//       TFloatArrayStack tFloatArrayStack0 = new TFloatArrayStack(int0, float0);
//       float[] floatArray0 = tFloatArrayStack0.toArray();
//       assertEquals((-461.12213F), tFloatArrayStack0.getNoEntryValue(), 0.01F);
//       assertNotNull(floatArray0);
//   }

  @Test
  public void test6()  throws Throwable  {
      TFloatArrayStack tFloatArrayStack0 = new TFloatArrayStack();
      TFloatArrayStack tFloatArrayStack1 = new TFloatArrayStack((TFloatStack) tFloatArrayStack0);
      // Undeclared exception!
      try {
        tFloatArrayStack1.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 10;
      TFloatArrayStack tFloatArrayStack0 = new TFloatArrayStack(int0);
      Locale locale0 = Locale.UK;
      char char0 = '';
      // Undeclared exception!
      try {
        locale0.getExtension(char0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed extension key: 
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      TFloatArrayStack tFloatArrayStack0 = new TFloatArrayStack(int0);
      OutputStream outputStream0 = null;
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TFloatArrayStack tFloatArrayStack0 = new TFloatArrayStack();
      tFloatArrayStack0.hashCode();
      tFloatArrayStack0.toArray();
      TFloatArrayStack tFloatArrayStack1 = new TFloatArrayStack();
      int int0 = 1;
      TFloatArrayStack tFloatArrayStack2 = new TFloatArrayStack(int0);
      // Undeclared exception!
      try {
        tFloatArrayStack1.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 10;
      TFloatArrayStack tFloatArrayStack0 = new TFloatArrayStack(int0);
      String string0 = tFloatArrayStack0.toString();
      assertNotNull(string0);
      
      tFloatArrayStack0.getNoEntryValue();
      float[] floatArray0 = new float[2];
      float float0 = 0.0F;
      tFloatArrayStack0.push(float0);
      assertEquals(1, tFloatArrayStack0.size());
      
      tFloatArrayStack0.pop();
      tFloatArrayStack0.toString();
      TFloatArrayStack tFloatArrayStack1 = new TFloatArrayStack();
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      tFloatArrayStack0.hashCode();
      ObjectInput objectInput0 = null;
      // Undeclared exception!
      try {
        tFloatArrayStack0.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      float float0 = 0.0F;
      TFloatArrayStack tFloatArrayStack0 = null;
      try {
        tFloatArrayStack0 = new TFloatArrayStack(int0, float0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TFloatArrayStack tFloatArrayStack0 = new TFloatArrayStack();
      TFloatArrayStack tFloatArrayStack1 = new TFloatArrayStack((TFloatStack) tFloatArrayStack0);
      TFloatArrayStack tFloatArrayStack2 = new TFloatArrayStack((TFloatStack) tFloatArrayStack1);
      tFloatArrayStack2.size();
      tFloatArrayStack0.size();
      int int0 = 267;
      int int1 = 10;
      TFloatArrayStack tFloatArrayStack3 = new TFloatArrayStack(int1);
      tFloatArrayStack3.toArray();
      // Undeclared exception!
      try {
        tFloatArrayStack3.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1;
      int int1 = 396;
      TFloatArrayStack tFloatArrayStack0 = new TFloatArrayStack(int1);
      TFloatArrayStack tFloatArrayStack1 = new TFloatArrayStack((TFloatStack) tFloatArrayStack0);
      // Undeclared exception!
      try {
        tFloatArrayStack1.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-1380);
      TFloatArrayStack tFloatArrayStack0 = null;
      try {
        tFloatArrayStack0 = new TFloatArrayStack(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 1977;
      float float0 = 0.0F;
      int int1 = 2;
      TFloatArrayStack tFloatArrayStack0 = new TFloatArrayStack(int1);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int1;
      float float1 = (-1805.757F);
      floatArray0[3] = float1;
      tFloatArrayStack0.toArray(floatArray0);
      TFloatArrayStack tFloatArrayStack1 = new TFloatArrayStack(int0, float0);
      tFloatArrayStack1.size();
      String string0 = tFloatArrayStack1.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      float[] floatArray1 = new float[5];
      floatArray1[0] = (float) int0;
      floatArray1[1] = float0;
      floatArray1[2] = (float) int0;
      float float2 = 784.9879F;
      String string1 = "^[+n\\h?S";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string1, string1, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: {}://%5E[+n%5Ch%3FS%5E%5B+n%5Ch%3FS?%5E[+n%5Ch?S#%5E[+n%5Ch?S
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      TFloatArrayStack tFloatArrayStack0 = new TFloatArrayStack();
      tFloatArrayStack0.toArray();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      tFloatArrayStack0.clear();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      TFloatArrayStack tFloatArrayStack0 = new TFloatArrayStack();
      // Undeclared exception!
      try {
        tFloatArrayStack0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      TFloatArrayStack tFloatArrayStack0 = new TFloatArrayStack();
      OutputStream outputStream0 = null;
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      TFloatArrayStack tFloatArrayStack0 = new TFloatArrayStack();
      ObjectOutput objectOutput0 = null;
      tFloatArrayStack0.clear();
      // Undeclared exception!
      try {
        tFloatArrayStack0.writeExternal(objectOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
