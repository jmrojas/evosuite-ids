/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortSet;
import gnu.trove.map.TShortObjectMap;
import gnu.trove.map.hash.TShortObjectHashMap;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.TShortObjectProcedure;
import gnu.trove.procedure.TShortProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import java.util.Collection;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableShortObjectMapEvoSuite_StrongMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 5 covered goals:
   * 1 Strong Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.size()I:58 - DeleteStatement: size()I
   * 2 Strong Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.<init>(Lgnu/trove/map/TShortObjectMap;)V:53 - ReplaceComparisonOperator != null -> = null
   * 3 Strong Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.size()I:58 - DeleteStatement: size()I
   * 4 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.size()I: root-Branch
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.<init>(Lgnu/trove/map/TShortObjectMap;)V: I17 Branch 1 IFNONNULL L53 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TShortObjectHashMap<Object> tShortObjectHashMap0 = new TShortObjectHashMap<Object>((-659));
      TUnmodifiableShortObjectMap<Object> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap0);
      tUnmodifiableShortObjectMap0.size();
      TShortObjectHashMap<Integer> tShortObjectHashMap1 = new TShortObjectHashMap<Integer>(1685759167, 0.0F);
      tShortObjectHashMap1.putIfAbsent((short) (-1972), (Integer) 1685759167);
      TUnmodifiableShortObjectMap<Integer> tUnmodifiableShortObjectMap1 = new TUnmodifiableShortObjectMap<Integer>((TShortObjectMap<Integer>) tShortObjectHashMap1);
      assertEquals(1, tUnmodifiableShortObjectMap1.size());
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * 1 Strong Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.isEmpty()Z:59 - DeleteStatement: isEmpty()Z
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.isEmpty()Z: root-Branch
   * 3 Strong Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.isEmpty()Z:59 - DeleteStatement: isEmpty()Z
   */

  @Test
  public void test1()  throws Throwable  {
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>((-1));
      TShortObjectHashMap<Object> tShortObjectHashMap1 = new TShortObjectHashMap<Object>((TShortObjectMap<?>) tShortObjectHashMap0);
      TUnmodifiableShortObjectMap<Object> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap1);
      boolean boolean0 = tUnmodifiableShortObjectMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 Strong Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsKey(S)Z:60 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsKey(S)Z: root-Branch
   * 3 Strong Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsKey(S)Z:60 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   */

  @Test
  public void test2()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)1756;
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>(127, 0.0F);
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      tUnmodifiableShortObjectMap0.containsKey((short)0);
      shortArray0[1] = (short)1904;
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 Strong Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsKey(S)Z:60 - InsertUnaryOp IINC 1 key
   * 2 Strong Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsKey(S)Z:60 - InsertUnaryOp IINC 1 key
   */

  @Test
  public void test3()  throws Throwable  {
      TShortObjectHashMap<Object> tShortObjectHashMap0 = new TShortObjectHashMap<Object>(49, 49);
      TUnmodifiableShortObjectMap<Object> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap0);
      tShortObjectHashMap0.put((short)0, (Object) "");
      boolean boolean0 = tUnmodifiableShortObjectMap0.containsKey((short) (-1));
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 Strong Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsKey(S)Z:60 - InsertUnaryOp IINC -1 key
   * 2 Strong Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsKey(S)Z:60 - InsertUnaryOp IINC -1 key
   */

  @Test
  public void test4()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>((-582));
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      Short short0 = new Short((short)0);
      tShortObjectHashMap0.put((short)0, short0);
      boolean boolean0 = tUnmodifiableShortObjectMap0.containsKey((short)1);
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * 1 Strong Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.get(S)Ljava/lang/Object;:62 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 2 Strong Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.get(S)Ljava/lang/Object;:62 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.get(S)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>((-896), (-896));
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short)0);
      shortArray0[3] = short0;
      tUnmodifiableShortObjectMap0.get((short)0);
      Short short1 = new Short((short)1);
      shortArray0[3] = short1;
  }

  //Test case number: 6
  /*
   * 8 covered goals:
   * 1 Strong Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.get(S)Ljava/lang/Object;:62 - DeleteStatement: get(S)Ljava/lang/Object;
   * 2 Strong Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.get(S)Ljava/lang/Object;:62 - InsertUnaryOp Negation of key
   * 3 Strong Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.get(S)Ljava/lang/Object;:62 - InsertUnaryOp IINC -1 key
   * 4 Strong Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.get(S)Ljava/lang/Object;:62 - InsertUnaryOp IINC 1 key
   * 5 Strong Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.get(S)Ljava/lang/Object;:62 - InsertUnaryOp Negation of key
   * 6 Strong Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.get(S)Ljava/lang/Object;:62 - InsertUnaryOp IINC -1 key
   * 7 Strong Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.get(S)Ljava/lang/Object;:62 - InsertUnaryOp IINC 1 key
   * 8 Strong Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.get(S)Ljava/lang/Object;:62 - DeleteStatement: get(S)Ljava/lang/Object;
   */

  @Test
  public void test6()  throws Throwable  {
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>(1685759167, 1685759167);
      TUnmodifiableShortObjectMap<Integer> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Integer>((TShortObjectMap<Integer>) tShortObjectHashMap0);
      tUnmodifiableShortObjectMap0.get((short)209);
      tShortObjectHashMap0.putIfAbsent((short) (-1972), (Integer) 1685759167);
      TUnmodifiableShortObjectMap<Integer> tUnmodifiableShortObjectMap1 = new TUnmodifiableShortObjectMap<Integer>((TShortObjectMap<Integer>) tShortObjectHashMap0);
      assertTrue(tUnmodifiableShortObjectMap1.equals(tUnmodifiableShortObjectMap0));
  }

  //Test case number: 7
  /*
   * 5 covered goals:
   * 1 Strong Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keys()[S:78 - DeleteStatement: keys()[S
   * 2 Strong Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keys()[S:78 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 3 Strong Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keys()[S:78 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 4 Strong Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keys()[S:78 - DeleteStatement: keys()[S
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keys()[S: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>();
      TUnmodifiableShortObjectMap<Integer> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Integer>((TShortObjectMap<Integer>) tShortObjectHashMap0);
      short[] shortArray0 = tUnmodifiableShortObjectMap0.keys();
      assertNotNull(shortArray0);
  }

  //Test case number: 8
  /*
   * 5 covered goals:
   * 1 Strong Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keys([S)[S:79 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 2 Strong Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keys([S)[S:79 - DeleteStatement: keys([S)[S
   * 3 Strong Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keys([S)[S:79 - DeleteStatement: keys([S)[S
   * 4 Strong Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keys([S)[S:79 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keys([S)[S: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>(1329);
      TUnmodifiableShortObjectMap<Integer> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Integer>((TShortObjectMap<Integer>) tShortObjectHashMap0);
      short[] shortArray0 = tUnmodifiableShortObjectMap0.keys(tShortObjectHashMap0._set);
      assertNotNull(shortArray0);
  }

  //Test case number: 9
  /*
   * 5 covered goals:
   * 1 Strong Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.values()[Ljava/lang/Object;:86 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 2 Strong Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.values()[Ljava/lang/Object;:86 - DeleteStatement: values()[Ljava/lang/Object;
   * 3 Strong Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.values()[Ljava/lang/Object;:86 - DeleteStatement: values()[Ljava/lang/Object;
   * 4 Strong Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.values()[Ljava/lang/Object;:86 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.values()[Ljava/lang/Object;: root-Branch
   */

//   @Test
//   public void test9()  throws Throwable  {
//       TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>((-1));
//       TUnmodifiableShortObjectMap<Integer> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Integer>((TShortObjectMap<Integer>) tShortObjectHashMap0);
//       Integer[] integerArray0 = tUnmodifiableShortObjectMap0.values();
//       assertNotNull(integerArray0);
//   }

  //Test case number: 10
  /*
   * 5 covered goals:
   * 1 Strong Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteStatement: values([Ljava/lang/Object;)[Ljava/lang/Object;
   * 2 Strong Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 3 Strong Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 4 Strong Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteStatement: values([Ljava/lang/Object;)[Ljava/lang/Object;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>(1329);
      TUnmodifiableShortObjectMap<Integer> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Integer>((TShortObjectMap<Integer>) tShortObjectHashMap0);
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = tUnmodifiableShortObjectMap0.values(integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  //Test case number: 11
  /*
   * 7 covered goals:
   * 1 Strong Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 1 -> 0
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - true
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - false
   * 4 Strong Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 5 Strong Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 6 Strong Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 1 -> 0
   * 7 Strong Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   */

  @Test
  public void test11()  throws Throwable  {
      TShortObjectHashMap<Object> tShortObjectHashMap0 = new TShortObjectHashMap<Object>();
      TUnmodifiableShortObjectMap<Object> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap0);
      TShortObjectHashMap<String> tShortObjectHashMap1 = new TShortObjectHashMap<String>((-8), 533.0811F);
      TUnmodifiableShortObjectMap<String> tUnmodifiableShortObjectMap1 = new TUnmodifiableShortObjectMap<String>((TShortObjectMap<String>) tShortObjectHashMap1);
      boolean boolean0 = tUnmodifiableShortObjectMap1.equals((Object) tUnmodifiableShortObjectMap0);
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 7 covered goals:
   * 1 Strong Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 2 Strong Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 3 Strong Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 0 -> 1
   * 4 Strong Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 5 Strong Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 0 -> 1
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - false
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>((-795));
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      boolean boolean0 = tUnmodifiableShortObjectMap0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 3 covered goals:
   * 1 Strong Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.hashCode()I:90 - DeleteStatement: hashCode()I
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.hashCode()I: root-Branch
   * 3 Strong Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.hashCode()I:90 - DeleteStatement: hashCode()I
   */

  @Test
  public void test13()  throws Throwable  {
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>(1685759167, (-3.3162875F));
      tShortObjectHashMap0.putIfAbsent((short) (-1972), (Integer) 1685759167);
      TUnmodifiableShortObjectMap<Integer> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Integer>((TShortObjectMap<Integer>) tShortObjectHashMap0);
      int int0 = tUnmodifiableShortObjectMap0.hashCode();
      assertEquals((-1685758733), int0);
  }

  //Test case number: 14
  /*
   * 5 covered goals:
   * 1 Strong Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.toString()Ljava/lang/String;:91 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 2 Strong Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.toString()Ljava/lang/String;:91 - DeleteStatement: toString()Ljava/lang/String;
   * 3 Strong Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.toString()Ljava/lang/String;:91 - DeleteStatement: toString()Ljava/lang/String;
   * 4 Strong Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.toString()Ljava/lang/String;:91 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TShortObjectHashMap<Object> tShortObjectHashMap0 = new TShortObjectHashMap<Object>();
      TUnmodifiableShortObjectMap<Object> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap0);
      String string0 = tUnmodifiableShortObjectMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 15
  /*
   * 3 covered goals:
   * 1 Strong Mutation 56: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.getNoEntryKey()S:92 - DeleteStatement: getNoEntryKey()S
   * 2 Strong Mutation 56: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.getNoEntryKey()S:92 - DeleteStatement: getNoEntryKey()S
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.getNoEntryKey()S: root-Branch
   */

//   @Test
//   public void test15()  throws Throwable  {
//       TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>((-1), (-1.0F), (short)0);
//       TUnmodifiableShortObjectMap<Integer> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Integer>((TShortObjectMap<Integer>) tShortObjectHashMap0);
//       tUnmodifiableShortObjectMap0.getNoEntryKey();
//       TShortObjectHashMap<Short> tShortObjectHashMap1 = new TShortObjectHashMap<Short>(10, (float) 10, (short) (-1987));
//       TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap1 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap1);
//       assertEquals(-1987, tUnmodifiableShortObjectMap1.getNoEntryKey());
//   }

  //Test case number: 16
  /*
   * 3 covered goals:
   * 1 Strong Mutation 58: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachKey(Lgnu/trove/procedure/TShortProcedure;)Z:95 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TShortProcedure;)Z
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachKey(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   * 3 Strong Mutation 58: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachKey(Lgnu/trove/procedure/TShortProcedure;)Z:95 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TShortProcedure;)Z
   */

  @Test
  public void test16()  throws Throwable  {
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>((-1));
      TShortObjectHashMap<Object> tShortObjectHashMap1 = new TShortObjectHashMap<Object>((TShortObjectMap<?>) tShortObjectHashMap0);
      TUnmodifiableShortObjectMap<Object> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap1);
      boolean boolean0 = tUnmodifiableShortObjectMap0.forEachKey((TShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 17
  /*
   * 3 covered goals:
   * 1 Strong Mutation 60: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   * 3 Strong Mutation 60: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z
   */

  @Test
  public void test17()  throws Throwable  {
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>((-1));
      TUnmodifiableShortObjectMap<Integer> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Integer>((TShortObjectMap<Integer>) tShortObjectHashMap0);
      Object[] objectArray0 = new Object[1];
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(objectArray0);
      boolean boolean0 = tUnmodifiableShortObjectMap0.forEachValue((TObjectProcedure<? super Integer>) toObjectArrayProceedure0);
      assertEquals(true, boolean0);
  }

  //Test case number: 18
  /*
   * 3 covered goals:
   * 1 Strong Mutation 62: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachEntry(Lgnu/trove/procedure/TShortObjectProcedure;)Z:101 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TShortObjectProcedure;)Z
   * 2 Strong Mutation 62: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachEntry(Lgnu/trove/procedure/TShortObjectProcedure;)Z:101 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TShortObjectProcedure;)Z
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachEntry(Lgnu/trove/procedure/TShortObjectProcedure;)Z: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>((-925));
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      boolean boolean0 = tUnmodifiableShortObjectMap0.forEachEntry((TShortObjectProcedure<? super Short>) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 19
  /*
   * 6 covered goals:
   * 1 Strong Mutation 61: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachEntry(Lgnu/trove/procedure/TShortObjectProcedure;)Z:101 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 2 Strong Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.size()I:58 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 3 Strong Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.getNoEntryKey()S:92 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 4 Strong Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.size()I:58 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 5 Strong Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.getNoEntryKey()S:92 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 6 Strong Mutation 61: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachEntry(Lgnu/trove/procedure/TShortObjectProcedure;)Z:101 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   */

  @Test
  public void test19()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>((-8));
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      TShortObjectHashMap<Short> tShortObjectHashMap1 = new TShortObjectHashMap<Short>((TShortObjectMap<? extends Short>) tUnmodifiableShortObjectMap0);
      assertEquals(0, tShortObjectHashMap1.size());
  }

  //Test case number: 20
  /*
   * 12 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;: I4 Branch 2 IFNONNULL L74 - true
   * 2 Strong Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;:75 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 3 Strong Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;:74 - ReplaceComparisonOperator != null -> = null
   * 4 Strong Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;:75 - DeleteStatement: unmodifiableSet(Lgnu/trove/set/TShortSet;)Lgnu/trove/set/TShortSet;
   * 5 Strong Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;:75 - DeleteStatement: keySet()Lgnu/trove/set/TShortSet;
   * 6 Strong Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;:76 - DeleteField: keySetLgnu/trove/set/TShortSet;
   * 7 Strong Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;:75 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 8 Strong Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;:74 - ReplaceComparisonOperator != null -> = null
   * 9 Strong Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;:75 - DeleteStatement: unmodifiableSet(Lgnu/trove/set/TShortSet;)Lgnu/trove/set/TShortSet;
   * 10 Strong Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;:75 - DeleteStatement: keySet()Lgnu/trove/set/TShortSet;
   * 11 Strong Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;:76 - DeleteField: keySetLgnu/trove/set/TShortSet;
   * 12 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;: I4 Branch 2 IFNONNULL L74 - false
   */

  @Test
  public void test20()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>((-582));
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = (TUnmodifiableShortSet)tUnmodifiableShortObjectMap0.keySet();
      assertNotNull(tUnmodifiableShortSet0);
      
      TUnmodifiableShortSet tUnmodifiableShortSet1 = (TUnmodifiableShortSet)tUnmodifiableShortObjectMap0.keySet();
      assertSame(tUnmodifiableShortSet1, tUnmodifiableShortSet0);
  }

  //Test case number: 21
  /*
   * 13 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;: I4 Branch 3 IFNONNULL L82 - true
   * 2 Strong Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.<init>(Lgnu/trove/map/TShortObjectMap;)V:53 - ReplaceComparisonOperator != null -> = null
   * 3 Strong Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: valueCollection()Ljava/util/Collection;
   * 4 Strong Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: unmodifiableCollection(Ljava/util/Collection;)Ljava/util/Collection;
   * 5 Strong Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;:82 - ReplaceComparisonOperator != null -> = null
   * 6 Strong Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 7 Strong Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;:84 - DeleteField: valuesLjava/util/Collection;
   * 8 Strong Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: valueCollection()Ljava/util/Collection;
   * 9 Strong Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: unmodifiableCollection(Ljava/util/Collection;)Ljava/util/Collection;
   * 10 Strong Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;:82 - ReplaceComparisonOperator != null -> = null
   * 11 Strong Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 12 Strong Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;:84 - DeleteField: valuesLjava/util/Collection;
   * 13 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;: I4 Branch 3 IFNONNULL L82 - false
   */

  @Test
  public void test21()  throws Throwable  {
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>(0, 0);
      TUnmodifiableShortObjectMap<Integer> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Integer>((TShortObjectMap<Integer>) tShortObjectHashMap0);
      Collection<Integer> collection0 = tUnmodifiableShortObjectMap0.valueCollection();
      assertNotNull(collection0);
      
      Collection<Integer> collection1 = tUnmodifiableShortObjectMap0.valueCollection();
      assertSame(collection1, collection0);
  }
}
