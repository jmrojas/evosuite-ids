/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TShortCollection;
import gnu.trove.impl.sync.TSynchronizedRandomAccessShortList;
import gnu.trove.impl.sync.TSynchronizedShortSet;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessShortList;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortSet;
import gnu.trove.list.TShortList;
import gnu.trove.set.TShortSet;
import gnu.trove.set.hash.TShortHashSet;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.PipedInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import java.util.MissingResourceException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedShortSetEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TShortSet tShortSet0 = null;
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getDisplayCountry();
      TSynchronizedShortSet tSynchronizedShortSet0 = new TSynchronizedShortSet(tShortSet0, (Object) string0);
      short[] shortArray0 = new short[8];
      short short0 = (short)1465;
      shortArray0[0] = short0;
      short short1 = (short)1529;
      shortArray0[1] = short1;
      short short2 = (short)622;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)450;
      shortArray0[4] = short4;
      short short5 = (short)1;
      shortArray0[5] = short5;
      short short6 = (short)1;
      shortArray0[6] = short6;
      short short7 = (short)0;
      shortArray0[7] = short7;
      // Undeclared exception!
      try {
        tSynchronizedShortSet0.addAll(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-278);
      float float0 = 0.0F;
      short short0 = (short)128;
      float float1 = 0.0F;
      TShortHashSet tShortHashSet0 = new TShortHashSet((int) short0, float1, short0);
      TShortHashSet tShortHashSet1 = null;
      try {
        tShortHashSet1 = new TShortHashSet((TShortCollection) tShortHashSet0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TShortSet tShortSet0 = null;
      TSynchronizedShortSet tSynchronizedShortSet0 = null;
      try {
        tSynchronizedShortSet0 = new TSynchronizedShortSet(tShortSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 251;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0, int0);
      TSynchronizedShortSet tSynchronizedShortSet0 = new TSynchronizedShortSet((TShortSet) tShortHashSet0);
      short[] shortArray0 = tSynchronizedShortSet0.toArray();
      assertNotNull(shortArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      float float0 = Float.NEGATIVE_INFINITY;
      short short0 = (short) (-1565);
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0, (float) int0, short0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.getDefault();
      String string0 = locale0.getDisplayCountry(locale1);
      TSynchronizedShortSet tSynchronizedShortSet0 = new TSynchronizedShortSet((TShortSet) tShortHashSet0, (Object) string0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = tSynchronizedShortSet0.containsAll((Collection<?>) linkedList0);
      int int1 = (-963);
      TShortHashSet tShortHashSet1 = new TShortHashSet(int1);
      TSynchronizedShortSet tSynchronizedShortSet1 = new TSynchronizedShortSet((TShortSet) tShortHashSet1);
      tShortHashSet1.tempDisableAutoCompaction();
      tSynchronizedShortSet1.size();
      TShortHashSet tShortHashSet2 = new TShortHashSet(int0, float0);
      TShortHashSet tShortHashSet3 = new TShortHashSet();
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet3);
      String string1 = tUnmodifiableShortSet0.toString();
      TSynchronizedShortSet tSynchronizedShortSet2 = new TSynchronizedShortSet((TShortSet) tShortHashSet2, (Object) string1);
      Locale locale2 = Locale.CANADA_FRENCH;
      String string2 = locale2.getDisplayName();
      TSynchronizedShortSet tSynchronizedShortSet3 = new TSynchronizedShortSet((TShortSet) tShortHashSet2, (Object) string2);
      tSynchronizedShortSet3.toArray(tShortHashSet2._set);
      tSynchronizedShortSet3.retainAll(tShortHashSet2._set);
      boolean boolean1 = tSynchronizedShortSet2.removeAll((TShortCollection) tUnmodifiableShortSet0);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 0;
      short short0 = (short) (-1443);
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0, (float) int0, short0);
      int int1 = 0;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short) (-52);
      int int0 = 886;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0);
      TShortHashSet tShortHashSet1 = new TShortHashSet((TShortCollection) tShortHashSet0);
      TSynchronizedShortSet tSynchronizedShortSet0 = new TSynchronizedShortSet((TShortSet) tShortHashSet1);
      TShortList tShortList0 = null;
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = null;
      try {
        tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList(tShortList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TShortCollection tShortCollection0 = null;
      TShortHashSet tShortHashSet0 = null;
      try {
        tShortHashSet0 = new TShortHashSet(tShortCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TShortSet tShortSet0 = null;
      TUnmodifiableShortSet tUnmodifiableShortSet0 = null;
      try {
        tUnmodifiableShortSet0 = new TUnmodifiableShortSet(tShortSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0, int0);
      TSynchronizedShortSet tSynchronizedShortSet0 = new TSynchronizedShortSet((TShortSet) tShortHashSet0);
      tSynchronizedShortSet0.containsAll((TShortCollection) tShortHashSet0);
      TShortHashSet tShortHashSet1 = new TShortHashSet();
      TSynchronizedShortSet tSynchronizedShortSet1 = new TSynchronizedShortSet((TShortSet) tShortHashSet1);
      File file0 = null;
      tSynchronizedShortSet1.toArray(tShortHashSet1._set);
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name can't be null
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TShortSet tShortSet0 = null;
      String string0 = "b|";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 1: b|
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 635;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0, int0);
      short[] shortArray0 = new short[6];
      short short0 = (short) (-603);
      shortArray0[0] = short0;
      short short1 = (short)0;
      TShortList tShortList0 = null;
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = null;
      try {
        tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList(tShortList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short)21641;
      shortArray0[0] = short0;
      short short1 = (short)61;
      shortArray0[1] = short1;
      short short2 = (short)1039;
      shortArray0[2] = short2;
      short short3 = (short)464;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)1415;
      shortArray0[5] = short5;
      TShortHashSet tShortHashSet0 = new TShortHashSet(shortArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = linkedList0.toString();
      TSynchronizedShortSet tSynchronizedShortSet0 = new TSynchronizedShortSet((TShortSet) tShortHashSet0, (Object) string0);
      tSynchronizedShortSet0.toString();
      int int0 = 1523;
      TShortHashSet tShortHashSet1 = new TShortHashSet(int0);
      Locale locale0 = Locale.ENGLISH;
      String string1 = locale0.getISO3Country();
      tShortHashSet1.getNoEntryValue();
      URI uRI0 = new URI(string1);
      TSynchronizedShortSet tSynchronizedShortSet1 = new TSynchronizedShortSet((TShortSet) tShortHashSet1);
      short short6 = (short) (-1);
      tSynchronizedShortSet1.add(short6);
      String string2 = uRI0.getAuthority();
      TSynchronizedShortSet tSynchronizedShortSet2 = new TSynchronizedShortSet((TShortSet) tShortHashSet1, (Object) string2);
      // Undeclared exception!
      try {
        tSynchronizedShortSet2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      short short0 = (short)1366;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0, (float) int0, short0);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      String string0 = "";
      String string1 = "";
      String string2 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int0, string1, string2, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://@:0?#
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 101;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0, int0);
      TSynchronizedShortSet tSynchronizedShortSet0 = new TSynchronizedShortSet((TShortSet) tShortHashSet0);
      tSynchronizedShortSet0.retainAll((TShortCollection) tShortHashSet0);
      String string0 = "";
      TSynchronizedShortSet tSynchronizedShortSet1 = new TSynchronizedShortSet((TShortSet) tShortHashSet0, (Object) string0);
      tSynchronizedShortSet0.toString();
      short short0 = (short)1;
      tShortHashSet0.contains(short0);
      short short1 = (short)1627;
      tSynchronizedShortSet1.contains(short1);
      TShortHashSet tShortHashSet1 = new TShortHashSet();
      tSynchronizedShortSet1.toArray();
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet1);
      tSynchronizedShortSet1.iterator();
      String string1 = "1>(4QbfS";
      short short2 = (short)951;
      tSynchronizedShortSet0.remove(short2);
      tSynchronizedShortSet0.addAll((TShortCollection) tShortHashSet0);
      // Undeclared exception!
      try {
        tUnmodifiableShortSet0.removeAll((TShortCollection) tShortHashSet1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
