/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.set.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TLongCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessLongList;
import gnu.trove.list.TLongList;
import gnu.trove.list.array.TLongArrayList;
import gnu.trove.procedure.TLongProcedure;
import gnu.trove.set.hash.TLongHashSet;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TLongHashSetEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


//   @Test
//   public void test0()  throws Throwable  {
//       int int0 = 31;
//       TLongHashSet tLongHashSet0 = new TLongHashSet(int0, int0);
//       tLongHashSet0.tempDisableAutoCompaction();
//       assertEquals(0.5F, tLongHashSet0.getAutoCompactionFactor(), 0.01F);
//   }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      TLongHashSet tLongHashSet0 = new TLongHashSet(int0);
      boolean boolean0 = true;
      tLongHashSet0.reenableAutoCompaction(boolean0);
      TLongHashSet tLongHashSet1 = new TLongHashSet(int0);
      tLongHashSet1.getNoEntryValue();
      int int1 = (-1753);
      float float0 = 1415.6776F;
      long long0 = 952L;
      TLongHashSet tLongHashSet2 = new TLongHashSet(int1, float0, long0);
      int int2 = tLongHashSet2.hashCode();
      assertEquals(0, int2);
      
      TLongHashSet tLongHashSet3 = new TLongHashSet((TLongCollection) tLongHashSet2);
      tLongHashSet2.compact();
      String string0 = "";
      tLongHashSet2.trimToSize();
      tLongHashSet3.clear();
      tLongHashSet3.equals((Object) string0);
      assertEquals("{}", tLongHashSet3.toString());
      assertEquals(3, tLongHashSet2.capacity());
      assertEquals(3, tLongHashSet3.capacity());
      assertEquals(952L, tLongHashSet3.getNoEntryValue());
      assertTrue(tLongHashSet2.equals(tLongHashSet1));
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 56591;
      TLongHashSet tLongHashSet0 = new TLongHashSet(int0, int0);
      tLongHashSet0.ensureCapacity(int0);
      int int1 = 390;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tLongHashSet0._states, int0, int1);
      int int2 = 0;
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream((InputStream) byteArrayInputStream0, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TLongHashSet tLongHashSet0 = new TLongHashSet();
      TLongHashSet tLongHashSet1 = new TLongHashSet();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      tLongHashSet1.removeAll((Collection<?>) linkedList0);
      tLongHashSet0.containsAll((Collection<?>) linkedList0);
      long long0 = (-1505L);
      tLongHashSet1.contains(long0);
      tLongHashSet1.containsAll((Collection<?>) linkedList0);
      tLongHashSet1.trimToSize();
      tLongHashSet1.clear();
      tLongHashSet1.retainAll((TLongCollection) tLongHashSet0);
      int int0 = 0;
      tLongHashSet1.ensureCapacity(int0);
      boolean boolean0 = tLongHashSet0.removeAll((TLongCollection) tLongHashSet1);
      assertEquals(3, tLongHashSet1.capacity());
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      TLongHashSet tLongHashSet0 = new TLongHashSet(int0, int0);
      boolean boolean0 = tLongHashSet0.isEmpty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 10;
      TLongHashSet tLongHashSet0 = new TLongHashSet(int0);
      PipedOutputStream pipedOutputStream0 = null;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TLongHashSet tLongHashSet0 = new TLongHashSet();
      long[] longArray0 = new long[7];
      boolean boolean0 = tLongHashSet0.containsAll(longArray0);
      long long0 = 947L;
      longArray0[0] = long0;
      long long1 = 0L;
      longArray0[1] = long1;
      long long2 = (-823L);
      longArray0[2] = long2;
      long long3 = 0L;
      long long4 = 0L;
      tLongHashSet0.contains(long4);
      tLongHashSet0.getNoEntryValue();
      long[] longArray1 = tLongHashSet0._set;
      longArray0[3] = long3;
      long long5 = (-1508L);
      boolean boolean1 = tLongHashSet0.retainAll(longArray0);
      assertEquals(false, boolean1);
      
      longArray0[4] = long5;
      LinkedList<TLongHashSet> linkedList0 = new LinkedList<TLongHashSet>();
      boolean boolean2 = tLongHashSet0.removeAll((Collection<?>) linkedList0);
      assertTrue(boolean2 == boolean0);
      
      long long6 = 0L;
      longArray0[5] = long6;
      long long7 = (-1L);
      longArray0[6] = long7;
      TLongArrayList tLongArrayList0 = new TLongArrayList(longArray0);
      TUnmodifiableRandomAccessLongList tUnmodifiableRandomAccessLongList0 = new TUnmodifiableRandomAccessLongList((TLongList) tLongArrayList0);
      TLongProcedure tLongProcedure0 = null;
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessLongList0.inverseGrep(tLongProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      int int1 = 1258;
      TLongHashSet tLongHashSet0 = new TLongHashSet(int1, int0);
      TLongHashSet tLongHashSet1 = new TLongHashSet(int0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) pipedInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-1605);
      float float0 = 1097.9431F;
      TLongHashSet tLongHashSet0 = new TLongHashSet(int0, float0);
      int int1 = 370661;
      float float1 = 0.0F;
      TLongHashSet tLongHashSet1 = new TLongHashSet(int1, float1);
      tLongHashSet0.removeAll((TLongCollection) tLongHashSet1);
      tLongHashSet0.isEmpty();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      int int2 = 0;
      // Undeclared exception!
      try {
        linkedList0.get(int2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 89;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) int0;
      long long0 = (-1L);
      longArray0[1] = long0;
      TLongHashSet tLongHashSet0 = new TLongHashSet(longArray0);
      tLongHashSet0.isEmpty();
      assertEquals("{89,-1}", tLongHashSet0.toString());
      
      TLongHashSet tLongHashSet1 = new TLongHashSet(int0, int0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = tLongHashSet1.containsAll((Collection<?>) linkedList0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      TLongHashSet tLongHashSet0 = new TLongHashSet((Collection<? extends Long>) linkedList0);
      tLongHashSet0.addAll((Collection<? extends Long>) linkedList0);
      int int0 = 10;
      float float0 = 1189.3562F;
      TLongHashSet tLongHashSet1 = new TLongHashSet(int0, float0, (long) int0);
      assertEquals("{}", tLongHashSet1.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 102877;
      float float0 = (-1.0F);
      long long0 = 720L;
      TLongHashSet tLongHashSet0 = new TLongHashSet(int0, float0, long0);
      tLongHashSet0.iterator();
      long[] longArray0 = new long[9];
      long long1 = 1323L;
      longArray0[0] = long1;
      longArray0[1] = (long) int0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = long0;
      longArray0[5] = (long) int0;
      longArray0[6] = (long) int0;
      longArray0[7] = (long) int0;
      longArray0[8] = long0;
      tLongHashSet0.toArray(longArray0);
      long long2 = 0L;
      tLongHashSet0.add(long2);
      long[] longArray1 = new long[8];
      TLongArrayList tLongArrayList0 = new TLongArrayList((TLongCollection) tLongHashSet0);
      tLongHashSet0.addAll((TLongCollection) tLongArrayList0);
      longArray1[0] = long0;
      longArray1[1] = long0;
      int int1 = 272;
      // Undeclared exception!
      try {
        tLongArrayList0.getQuick(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 272
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      TLongHashSet tLongHashSet0 = new TLongHashSet();
      long[] longArray0 = new long[3];
      long long0 = (-121L);
      longArray0[0] = long0;
      long long1 = (-1594L);
      longArray0[1] = long1;
      long long2 = (-1238L);
      tLongHashSet0.hashCode();
      longArray0[2] = long2;
      tLongHashSet0.addAll(longArray0);
      assertEquals(false, tLongHashSet0.isEmpty());
      
      long long3 = (-1413L);
      Long long4 = new Long(long3);
      Long.toHexString(long2);
      linkedList0.add(long4);
      Locale locale0 = Locale.FRANCE;
      String string0 = locale0.getScript();
      linkedList0.remove((Object) string0);
      TLongHashSet tLongHashSet1 = new TLongHashSet((Collection<? extends Long>) linkedList0);
      tLongHashSet1.trimToSize();
      assertEquals("{-1413}", tLongHashSet1.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) int0;
      float float0 = (-1318.5072F);
      TLongHashSet tLongHashSet0 = new TLongHashSet(int0, float0);
      boolean boolean0 = tLongHashSet0.retainAll(longArray0);
      long long0 = 0L;
      longArray0[1] = long0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      long long1 = 1L;
      tLongHashSet0.contains(long1);
      longArray0[3] = (long) int0;
      longArray0[3] = (long) int0;
      TLongHashSet tLongHashSet1 = new TLongHashSet(longArray0);
      float float1 = (-1.0F);
      TLongHashSet tLongHashSet2 = new TLongHashSet(int0, float1);
      tLongHashSet2.getNoEntryValue();
      int int1 = 1039;
      float float2 = 146.67213F;
      TLongHashSet tLongHashSet3 = new TLongHashSet(int1, float2, (long) int1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean1 = tLongHashSet3.removeAll((Collection<?>) linkedList0);
      long[] longArray1 = new long[4];
      boolean boolean2 = tLongHashSet1.addAll((TLongCollection) tLongHashSet3);
      assertEquals(1, tLongHashSet1.size());
      assertEquals("{0}", tLongHashSet1.toString());
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = tLongHashSet2.containsAll(longArray0);
      assertTrue(boolean3 == boolean1);
      
      longArray1[0] = (long) int1;
      long long2 = 0L;
      longArray1[1] = long2;
      longArray1[2] = (long) int1;
      longArray1[3] = (long) int1;
      tLongHashSet3._set = longArray1;
      assertFalse(tLongHashSet3.equals(tLongHashSet1));
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      float float0 = 1310.7161F;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      longArray0[6] = (long) int0;
      TLongHashSet tLongHashSet0 = new TLongHashSet(longArray0);
      longArray0[7] = (long) int0;
      longArray0[8] = (long) int0;
      TLongHashSet tLongHashSet1 = new TLongHashSet(longArray0);
      long[] longArray1 = new long[7];
      long long0 = 978L;
      longArray1[0] = long0;
      longArray1[1] = (long) int0;
      longArray1[2] = (long) int0;
      long long1 = 725L;
      longArray1[3] = long1;
      longArray1[4] = (long) int0;
      longArray1[5] = (long) int0;
      longArray1[6] = (long) int0;
      boolean boolean0 = tLongHashSet1.retainAll(longArray1);
      assertEquals(1, tLongHashSet1.size());
      assertEquals(false, boolean0);
      
      TLongHashSet tLongHashSet2 = new TLongHashSet(int0, float0, (long) int0);
      int int1 = tLongHashSet2.hashCode();
      assertEquals(0, int1);
  }

  @Test
  public void test15()  throws Throwable  {
      TLongHashSet tLongHashSet0 = new TLongHashSet();
      tLongHashSet0.trimToSize();
      int int0 = tLongHashSet0.size();
      TLongHashSet tLongHashSet1 = new TLongHashSet(int0);
      tLongHashSet0.addAll((TLongCollection) tLongHashSet1);
      TLongHashSet tLongHashSet2 = new TLongHashSet();
      TLongHashSet tLongHashSet3 = new TLongHashSet();
      tLongHashSet3.tempDisableAutoCompaction();
      File file0 = null;
      FileOutputStream fileOutputStream0 = null;
      try {
        fileOutputStream0 = new FileOutputStream(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name can't be null
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 0;
      TLongHashSet tLongHashSet0 = new TLongHashSet(int0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      long long0 = 178L;
      longArray0[2] = long0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      boolean boolean0 = tLongHashSet0.addAll(longArray0);
      assertEquals(false, tLongHashSet0.isEmpty());
      assertEquals(true, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      TLongHashSet tLongHashSet0 = new TLongHashSet();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 313;
      // Undeclared exception!
      try {
        linkedList0.subList(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 313
         //
      }
  }
}
