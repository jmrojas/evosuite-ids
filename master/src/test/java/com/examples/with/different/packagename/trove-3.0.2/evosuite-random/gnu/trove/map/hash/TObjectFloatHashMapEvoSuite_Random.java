/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.hash.TObjectFloatHashMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectFloatHashMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = (-1604);
          TObjectFloatHashMap<Integer> tObjectFloatHashMap0 = new TObjectFloatHashMap<Integer>(int0);
          TObjectFloatHashMap<Float> tObjectFloatHashMap1 = new TObjectFloatHashMap<Float>();
          boolean boolean0 = tObjectFloatHashMap0.containsKey((Object) tObjectFloatHashMap1);
          TObjectFloatHashMap<String> tObjectFloatHashMap2 = new TObjectFloatHashMap<String>();
          String string0 = "IT4";
          float float0 = 3.4028235E38F;
          tObjectFloatHashMap2.adjustOrPutValue(string0, (float) int0, float0);
          assertEquals(1, tObjectFloatHashMap2.size());
          
          Locale locale0 = Locale.FRANCE;
          String string1 = "EbM1J!";
          File file0 = new File(string1);
          File file1 = file0.getCanonicalFile();
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(file1, boolean0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/mnt/fastdata/ac1gf/Experiments_Major/apps/trove-3.0.2/EbM1J!\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // sun.reflect.GeneratedConstructorAccessor8.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      TObjectFloatHashMap<AbstractMap.SimpleImmutableEntry<String, Float>> tObjectFloatHashMap0 = new TObjectFloatHashMap<AbstractMap.SimpleImmutableEntry<String, Float>>();
      float float0 = tObjectFloatHashMap0.getNoEntryValue();
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) tObjectFloatHashMap0;
      int int0 = 59;
      float float1 = 738.3242F;
      TObjectFloatHashMap<Float> tObjectFloatHashMap1 = new TObjectFloatHashMap<Float>(int0, float1);
      objectArray0[0] = (Object) int0;
      objectArray0[1] = (Object) tObjectFloatHashMap1;
      objectArray0[2] = (Object) float1;
      objectArray0[3] = (Object) tObjectFloatHashMap1;
      objectArray0[4] = (Object) int0;
      objectArray0[5] = (Object) float1;
      objectArray0[6] = (Object) float0;
      objectArray0[7] = (Object) tObjectFloatHashMap0;
      objectArray0[8] = (Object) tObjectFloatHashMap0;
      objectArray0[9] = (Object) tObjectFloatHashMap0;
      objectArray0[0] = (Object) tObjectFloatHashMap1;
      objectArray0[1] = (Object) int0;
      objectArray0[2] = (Object) float1;
      objectArray0[3] = (Object) float0;
      objectArray0[4] = (Object) float0;
      objectArray0[5] = (Object) float1;
      objectArray0[6] = (Object) float0;
      objectArray0[7] = (Object) float0;
      objectArray0[8] = (Object) float1;
      objectArray0[9] = (Object) int0;
      tObjectFloatHashMap1.trimToSize();
      PipedInputStream pipedInputStream0 = new PipedInputStream(int0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

//  @Test
//  public void test2()  throws Throwable  {
//      TObjectFloatHashMap<Object> tObjectFloatHashMap0 = new TObjectFloatHashMap<Object>();
//      int int0 = 0;
//      TObjectFloatHashMap<Float> tObjectFloatHashMap1 = new TObjectFloatHashMap<Float>(int0);
//      TObjectFloatHashMap<AbstractMap.SimpleImmutableEntry<String, Float>> tObjectFloatHashMap2 = new TObjectFloatHashMap<AbstractMap.SimpleImmutableEntry<String, Float>>();
//      AbstractMap.SimpleImmutableEntry<String, Float>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<String, Float>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 8);
//      AbstractMap.SimpleImmutableEntry<String, Float> abstractMap_SimpleImmutableEntry0 = null;
//      try {
//        abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Float>((Map.Entry<? extends String, ? extends Float>) abstractMap_SimpleImmutableEntryArray0);
//        fail("Expecting exception: IllegalArgumentException");
//      
//      } catch(IllegalArgumentException e) {
//         //
//         // java.lang.ClassCastException@65906fc6
//         //
//      }
//  }

  @Test
  public void test3()  throws Throwable  {
      TObjectFloatHashMap<String> tObjectFloatHashMap0 = new TObjectFloatHashMap<String>();
      String[] stringArray0 = new String[5];
      boolean boolean0 = false;
      tObjectFloatHashMap0.reenableAutoCompaction(boolean0);
      TObjectFloatHashMap<Object> tObjectFloatHashMap1 = new TObjectFloatHashMap<Object>();
      int int0 = 34;
      TObjectFloatHashMap<Integer> tObjectFloatHashMap2 = new TObjectFloatHashMap<Integer>(int0);
      ObjectInput objectInput0 = null;
      // Undeclared exception!
      try {
        tObjectFloatHashMap2.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      float float0 = 677.7873F;
      TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>(int0, (float) int0, float0);
      float float1 = tObjectFloatHashMap0.put((Float) float0, (float) int0);
      assertEquals(1, tObjectFloatHashMap0.size());
      
      TObjectFloatHashMap<TObjectFloatHashMap<Float>> tObjectFloatHashMap1 = new TObjectFloatHashMap<TObjectFloatHashMap<Float>>(int0, (float) int0, float0);
      tObjectFloatHashMap1.valueCollection();
      assertTrue(float0 == float1);
  }
}
