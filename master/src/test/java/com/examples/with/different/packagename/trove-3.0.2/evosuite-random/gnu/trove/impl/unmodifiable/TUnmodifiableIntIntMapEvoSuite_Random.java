/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableIntCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableIntIntMap;
import gnu.trove.map.TIntIntMap;
import gnu.trove.map.hash.TIntIntHashMap;
import gnu.trove.procedure.TIntProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableIntIntMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 1289;
      float float0 = 299.97235F;
      int int1 = 1;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, float0, int0, int1);
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap0 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap0);
      tUnmodifiableIntIntMap0.getNoEntryKey();
      int int2 = (-1864);
      float float1 = 0.0F;
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(int2, float1);
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap1 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap1);
      TIntProcedure tIntProcedure0 = null;
      tUnmodifiableIntIntMap1.values(tIntIntHashMap1._set);
      int[] intArray0 = new int[9];
      intArray0[0] = int2;
      intArray0[1] = int2;
      intArray0[2] = int2;
      intArray0[3] = int2;
      intArray0[4] = int2;
      intArray0[5] = int2;
      intArray0[6] = int2;
      int int3 = 1898;
      tIntIntHashMap1.values();
      intArray0[7] = int3;
      intArray0[8] = int2;
      tIntIntHashMap1._set = intArray0;
      // Undeclared exception!
      try {
        tUnmodifiableIntIntMap1.forEachKey(tIntProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 1;
      intArray0[0] = int0;
      int int1 = 1588;
      intArray0[1] = int1;
      int int2 = 1122;
      intArray0[2] = int2;
      int int3 = (-1255);
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = (-709);
      intArray0[5] = int5;
      int int6 = 1078;
      intArray0[6] = int6;
      int int7 = 0;
      intArray0[7] = int7;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap0 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap0);
      TUnmodifiableIntCollection tUnmodifiableIntCollection0 = (TUnmodifiableIntCollection)tUnmodifiableIntIntMap0.valueCollection();
      assertEquals(7, tUnmodifiableIntCollection0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-142);
      int int1 = 67;
      TIntIntMap tIntIntMap0 = null;
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap0 = null;
      try {
        tUnmodifiableIntIntMap0 = new TUnmodifiableIntIntMap(tIntIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-1428);
      int[] intArray0 = new int[4];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      int[] intArray1 = new int[6];
      intArray1[0] = int0;
      intArray1[1] = int0;
      intArray1[2] = int0;
      int int1 = 0;
      intArray1[3] = int1;
      intArray1[4] = int0;
      intArray1[5] = int0;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray1);
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap0);
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap0 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap1);
      int int2 = (-748);
      int int3 = 0;
      int int4 = (-1955);
      // Undeclared exception!
      try {
        tUnmodifiableIntIntMap0.adjustOrPutValue(int2, int3, int4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      float float0 = 1.0F;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, float0);
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap0 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      // Undeclared exception!
      try {
        tUnmodifiableIntIntMap0.putAll((Map<? extends Integer, ? extends Integer>) hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap0 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap0);
      int int0 = 1;
      tUnmodifiableIntIntMap0.keySet();
      int int1 = (-415);
      // Undeclared exception!
      try {
        tUnmodifiableIntIntMap0.putAll((TIntIntMap) tIntIntHashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = 1507;
      intArray0[0] = int0;
      int int1 = (-436);
      intArray0[1] = int1;
      int int2 = 67;
      intArray0[2] = int2;
      int int3 = (-371);
      intArray0[3] = int3;
      int int4 = 540;
      intArray0[4] = int4;
      int int5 = 183;
      intArray0[5] = int5;
      int int6 = 161;
      intArray0[6] = int6;
      int int7 = 31;
      intArray0[7] = int7;
      int int8 = 1631;
      intArray0[8] = int8;
      int int9 = 0;
      intArray0[9] = int9;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap0 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap0);
      int[] intArray1 = tUnmodifiableIntIntMap0.values();
      assertNotSame(intArray1, intArray0);
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-2020);
      int int1 = 0;
      float float0 = 0.0F;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int1, float0);
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap0 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap0);
      tUnmodifiableIntIntMap0.values();
      tIntIntHashMap0.ensureCapacity(int0);
      // Undeclared exception!
      try {
        tUnmodifiableIntIntMap0.adjustValue(int0, int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = (-616);
      intArray0[0] = int0;
      int int1 = (-1736);
      intArray0[1] = int1;
      int int2 = 1941;
      intArray0[2] = int2;
      int int3 = 1;
      intArray0[3] = int3;
      int int4 = (-413);
      intArray0[4] = int4;
      int int5 = 1164;
      intArray0[5] = int5;
      int int6 = 1300;
      intArray0[6] = int6;
      int int7 = (-137);
      intArray0[7] = int7;
      int int8 = 1070;
      intArray0[8] = int8;
      int int9 = 0;
      intArray0[9] = int9;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap0 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap0);
      int int10 = 0;
      // Undeclared exception!
      try {
        tUnmodifiableIntIntMap0.adjustOrPutValue(int4, int10, intArray0[7]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap0 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap0);
      int int0 = 1357;
      int int1 = (-1569);
      // Undeclared exception!
      try {
        tUnmodifiableIntIntMap0.adjustOrPutValue(int0, int1, int1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-1293);
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, int0);
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap0 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap0);
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap1 = new TUnmodifiableIntIntMap((TIntIntMap) tUnmodifiableIntIntMap0);
      tUnmodifiableIntIntMap1.values(tIntIntHashMap0._set);
      int int1 = 3527;
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(int1);
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap2 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap1);
      tUnmodifiableIntIntMap2.keys();
      TIntIntHashMap tIntIntHashMap2 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap1);
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap3 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap2);
      int int2 = 1655;
      // Undeclared exception!
      try {
        tUnmodifiableIntIntMap3.adjustOrPutValue(int1, int1, int2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, float0);
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap0 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap0);
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap1 = new TUnmodifiableIntIntMap((TIntIntMap) tUnmodifiableIntIntMap0);
      int int1 = 0;
      // Undeclared exception!
      try {
        tUnmodifiableIntIntMap1.putIfAbsent(int0, int1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 67;
      intArray0[0] = int0;
      int int1 = 2047;
      intArray0[1] = int1;
      int int2 = 1673;
      int int3 = 0;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int3);
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap0 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap0);
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap1 = new TUnmodifiableIntIntMap((TIntIntMap) tUnmodifiableIntIntMap0);
      int int4 = 0;
      int int5 = 2;
      // Undeclared exception!
      try {
        tUnmodifiableIntIntMap1.adjustValue(int4, int5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 185323;
      intArray0[1] = int1;
      int int2 = (-999);
      intArray0[2] = int2;
      int int3 = 309;
      intArray0[3] = int3;
      int int4 = 15661423;
      intArray0[4] = int4;
      int[] intArray1 = new int[9];
      intArray1[0] = int0;
      intArray1[1] = int1;
      intArray1[2] = int1;
      int int5 = 0;
      intArray1[3] = int5;
      intArray1[4] = int2;
      intArray1[5] = int3;
      intArray1[6] = int4;
      intArray1[7] = int3;
      intArray1[8] = int1;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray1);
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap0 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap0);
      TIntIntMap tIntIntMap0 = null;
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap1 = null;
      try {
        tUnmodifiableIntIntMap1 = new TUnmodifiableIntIntMap(tIntIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap0 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap0);
      int int0 = 0;
      int int1 = 0;
      tUnmodifiableIntIntMap0.containsValue(int1);
      tIntIntHashMap0.increment(int0);
      int int2 = 0;
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(int2);
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap1 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap1);
      tUnmodifiableIntIntMap1.keySet();
      TIntIntHashMap tIntIntHashMap2 = new TIntIntHashMap(int0, int0);
      int int3 = (-1);
      // Undeclared exception!
      try {
        tUnmodifiableIntIntMap1.remove(int3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 158767069;
      int int1 = 0;
      float float0 = (-1.0F);
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, float0, int1, int1);
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap0 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap0);
      int int2 = 71741;
      // Undeclared exception!
      try {
        tUnmodifiableIntIntMap0.putIfAbsent(int1, int2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = (-1043);
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0);
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap0 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap0);
      tUnmodifiableIntIntMap0.keys(tIntIntHashMap0._set);
      int int1 = 0;
      // Undeclared exception!
      try {
        tUnmodifiableIntIntMap0.increment(int1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 94;
      intArray0[0] = int0;
      int int1 = 89;
      intArray0[1] = int1;
      int int2 = 877;
      intArray0[2] = int2;
      int int3 = (-1121);
      intArray0[3] = int3;
      int int4 = (-776);
      intArray0[4] = int4;
      int int5 = 1671;
      intArray0[5] = int5;
      int int6 = 1685759167;
      intArray0[6] = int6;
      int int7 = 36;
      intArray0[7] = int7;
      int int8 = 0;
      intArray0[8] = int8;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap0);
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap0 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap1);
      int int9 = 0;
      TIntIntHashMap tIntIntHashMap2 = new TIntIntHashMap(int9, int9, int9, int9);
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap1 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap2);
      int[] intArray1 = tUnmodifiableIntIntMap1.keys();
      assertNotSame(intArray1, intArray0);
  }

  @Test
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 158;
      intArray0[0] = int0;
      int int1 = 138;
      int int2 = 0;
      intArray0[0] = int2;
      intArray0[1] = int0;
      intArray0[1] = int1;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      tIntIntHashMap0.keySet();
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap0 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableIntIntMap0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap0 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap0);
      tUnmodifiableIntIntMap0.keySet();
      int int0 = (-1);
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(int0, int0);
      TUnmodifiableIntIntMap tUnmodifiableIntIntMap1 = new TUnmodifiableIntIntMap((TIntIntMap) tIntIntHashMap1);
      int[] intArray0 = new int[2];
      intArray0[0] = int0;
      intArray0[1] = int0;
      int[] intArray1 = new int[9];
      int int1 = (-877);
      intArray1[0] = int1;
      intArray1[1] = int0;
      intArray1[2] = int0;
      intArray1[3] = int0;
      intArray1[4] = int0;
      intArray1[5] = int0;
      int int2 = 673;
      intArray1[6] = int2;
      intArray1[7] = int0;
      intArray1[8] = int0;
      int[] intArray2 = tUnmodifiableIntIntMap1.keys(intArray1);
      int[] intArray3 = tUnmodifiableIntIntMap1.values(intArray0);
      assertNotSame(intArray3, intArray2);
  }
}
