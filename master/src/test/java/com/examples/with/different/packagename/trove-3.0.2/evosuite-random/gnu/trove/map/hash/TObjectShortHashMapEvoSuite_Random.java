/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TShortFunction;
import gnu.trove.map.TObjectShortMap;
import gnu.trove.map.hash.TObjectShortHashMap;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PushbackInputStream;
import java.lang.reflect.Array;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.LinkedList;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectShortHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


//  @Test
//  public void test0()  throws Throwable  {
//      TObjectShortHashMap<TObjectShortHashMap<Short>> tObjectShortHashMap0 = new TObjectShortHashMap<TObjectShortHashMap<Short>>();
//      TObjectShortHashMap<Short>[] tObjectShortHashMapArray0 = (TObjectShortHashMap<Short>[]) Array.newInstance(TObjectShortHashMap.class, 4);
//      TObjectShortHashMap<Short> tObjectShortHashMap1 = new TObjectShortHashMap<Short>();
//      tObjectShortHashMapArray0[0] = tObjectShortHashMap1;
//      TObjectShortHashMap<Short> tObjectShortHashMap2 = null;
//      try {
//        tObjectShortHashMap2 = new TObjectShortHashMap<Short>((TObjectShortMap<? extends Short>) tObjectShortHashMapArray0);
//        fail("Expecting exception: IllegalArgumentException");
//      
//      } catch(IllegalArgumentException e) {
//         //
//         // java.lang.ClassCastException@504ceb56
//         //
//      }
//  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      TObjectShortHashMap<Object> tObjectShortHashMap0 = new TObjectShortHashMap<Object>(int0);
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.KOREAN;
      locale0.getDisplayScript(locale1);
      InputStream inputStream0 = null;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TObjectShortHashMap<Object> tObjectShortHashMap0 = new TObjectShortHashMap<Object>();
      Locale locale0 = Locale.KOREA;
      String string0 = locale0.getVariant();
      short short0 = (short)0;
      tObjectShortHashMap0.putIfAbsent((Object) string0, short0);
      assertEquals("{=0}", tObjectShortHashMap0.toString());
      
      TObjectShortHashMap<Short> tObjectShortHashMap1 = new TObjectShortHashMap<Short>();
      TShortFunction tShortFunction0 = null;
      // Undeclared exception!
      try {
        tObjectShortHashMap1.transformValues(tShortFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//  @Test
//  public void test3()  throws Throwable  {
//      int int0 = 0;
//      short short0 = (short)0;
//      TObjectShortHashMap<String> tObjectShortHashMap0 = new TObjectShortHashMap<String>();
//      tObjectShortHashMap0.clear();
//      int int1 = 0;
//      float float0 = 519.38544F;
//      short short1 = (short)523;
//      TObjectShortHashMap<Integer> tObjectShortHashMap1 = new TObjectShortHashMap<Integer>(int1, float0, short1);
//      TObjectShortHashMap<TObjectShortHashMap<Short>> tObjectShortHashMap2 = new TObjectShortHashMap<TObjectShortHashMap<Short>>(int0, (float) int0, short0);
//      TObjectShortHashMap<Short>[] tObjectShortHashMapArray0 = (TObjectShortHashMap<Short>[]) Array.newInstance(TObjectShortHashMap.class, 7);
//      TObjectShortHashMap<Short> tObjectShortHashMap3 = null;
//      try {
//        tObjectShortHashMap3 = new TObjectShortHashMap<Short>((TObjectShortMap<? extends Short>) tObjectShortHashMapArray0);
//        fail("Expecting exception: IllegalArgumentException");
//      
//      } catch(IllegalArgumentException e) {
//         //
//         // java.lang.ClassCastException@be55c36
//         //
//      }
//  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-175);
      TObjectShortHashMap<Integer> tObjectShortHashMap0 = new TObjectShortHashMap<Integer>(int0);
      short short0 = tObjectShortHashMap0.getNoEntryValue();
      TObjectShortHashMap<Short> tObjectShortHashMap1 = new TObjectShortHashMap<Short>();
      tObjectShortHashMap0.adjustOrPutValue((Integer) int0, short0, short0);
      String string0 = "\nb.equals(a) =";
      String string1 = "AW@o";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: 
         // b.equals(a) =:AW@o#AW@o
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 17;
      TObjectShortHashMap<Integer> tObjectShortHashMap0 = new TObjectShortHashMap<Integer>(int0, int0);
      String string0 = "";
      AbstractMap.SimpleEntry<TObjectShortHashMap<Integer>, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<TObjectShortHashMap<Integer>, String>(tObjectShortHashMap0, string0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string1 = linkedList0.toString();
      boolean boolean0 = abstractMap_SimpleEntry0.equals((Object) string1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      short short0 = (short) (-1);
      int int1 = (-148);
      TObjectShortHashMap<TObjectShortHashMap<Short>> tObjectShortHashMap0 = new TObjectShortHashMap<TObjectShortHashMap<Short>>(int1);
      tObjectShortHashMap0.compact();
      TObjectShortHashMap<AbstractMap.SimpleImmutableEntry<Short, Object>> tObjectShortHashMap1 = new TObjectShortHashMap<AbstractMap.SimpleImmutableEntry<Short, Object>>(int0, (float) int0, short0);
      tObjectShortHashMap1.valueCollection();
      TObjectShortHashMap<String> tObjectShortHashMap2 = new TObjectShortHashMap<String>(int0);
      TObjectShortHashMap<Integer> tObjectShortHashMap3 = new TObjectShortHashMap<Integer>();
      String string0 = "";
      float float0 = 3.4028235E38F;
      short short1 = (short) (-60);
      TObjectShortHashMap<Integer> tObjectShortHashMap4 = new TObjectShortHashMap<Integer>(int0, float0, short1);
      TObjectShortHashMap<Object> tObjectShortHashMap5 = new TObjectShortHashMap<Object>((TObjectShortMap<?>) tObjectShortHashMap4);
      tObjectShortHashMap5.clear();
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://#
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 767;
      float float0 = 449.30405F;
      short short0 = (short)0;
      TObjectShortHashMap<TObjectShortHashMap<Integer>> tObjectShortHashMap0 = new TObjectShortHashMap<TObjectShortHashMap<Integer>>(int0, float0, short0);
      String string0 = "";
      File file0 = new File(string0);
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         //  (No such file or directory)
         //
      }
  }
}
