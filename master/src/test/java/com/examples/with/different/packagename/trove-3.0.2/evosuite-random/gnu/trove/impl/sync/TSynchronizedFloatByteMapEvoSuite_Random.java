/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TByteFunction;
import gnu.trove.impl.sync.TSynchronizedFloatByteMap;
import gnu.trove.map.TFloatByteMap;
import gnu.trove.map.hash.TFloatByteHashMap;
import gnu.trove.procedure.TByteProcedure;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedFloatByteMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(int0, int0);
      float[] floatArray0 = new float[10];
      float float0 = (-1571.447F);
      floatArray0[0] = float0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      float float1 = 0.0F;
      floatArray0[4] = float1;
      floatArray0[5] = (float) int0;
      floatArray0[6] = (float) int0;
      floatArray0[7] = (float) int0;
      floatArray0[8] = (float) int0;
      floatArray0[9] = (float) int0;
      tFloatByteHashMap0._set = floatArray0;
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap((TFloatByteMap) tFloatByteHashMap0);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap0 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap1);
      float float2 = 1162.0126F;
      byte byte0 = (byte)31;
      tSynchronizedFloatByteMap0.putIfAbsent(float2, byte0);
      tSynchronizedFloatByteMap0.keys(tFloatByteHashMap1._set);
      assertEquals(1, tFloatByteHashMap1.size());
      assertEquals("{1162.0126=31}", tFloatByteHashMap1.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-1);
      float float0 = (-321.68692F);
      int int1 = (-1758);
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(int1, int1);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap0 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap0);
      String string0 = "I(F+R>;";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: I(F+R>;://I(F+R>;I(F+R%3E;#I(F+R%3E;
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-1192);
      float float0 = 725.68427F;
      float float1 = (-1606.4941F);
      byte byte0 = (byte) (-80);
      float float2 = 183.37132F;
      byte byte1 = (byte) (-33);
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(int0, float2, (float) byte0, byte1);
      String string0 = "";
      Locale locale0 = new Locale(string0, string0, string0);
      // Undeclared exception!
      try {
        locale0.getUnicodeLocaleType(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 390647;
      float float0 = 0.0F;
      byte byte0 = (byte)0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) byte0;
      floatArray0[3] = float0;
      int int1 = 535481;
      float float1 = 1.0F;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(int1, float1);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap0 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap0);
      String string0 = tSynchronizedFloatByteMap0.toString();
      assertNotNull(string0);
      
      float float2 = 317.1865F;
      floatArray0[4] = float2;
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap();
      String string1 = Float.toString((float) int0);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap1 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap1, (Object) string1);
      tSynchronizedFloatByteMap1.getNoEntryValue();
      tSynchronizedFloatByteMap1.clear();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      TFloatByteHashMap tFloatByteHashMap2 = new TFloatByteHashMap(floatArray0, byteArray0);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap2 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap2);
      boolean boolean0 = tSynchronizedFloatByteMap2.containsValue(byteArray0[2]);
      assertEquals(true, boolean0);
      
      TFloatByteHashMap tFloatByteHashMap3 = new TFloatByteHashMap(int0, (float) int0, float0, byte0);
      TFloatByteHashMap tFloatByteHashMap4 = new TFloatByteHashMap((TFloatByteMap) tFloatByteHashMap3);
      byte byte1 = (byte)0;
      Byte byte2 = new Byte(byte1);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap3 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap4, (Object) byte2);
      tSynchronizedFloatByteMap3.clear();
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap4 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap4);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap5 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap4);
      tSynchronizedFloatByteMap4.putAll((TFloatByteMap) tSynchronizedFloatByteMap5);
      assertFalse(tSynchronizedFloatByteMap5.equals(tSynchronizedFloatByteMap2));
      assertFalse(tSynchronizedFloatByteMap4.equals(tSynchronizedFloatByteMap2));
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 79383533;
      float float0 = (-631.5321F);
      int int1 = 1;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(int1, int1);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap0 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap0);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap1 = new TSynchronizedFloatByteMap((TFloatByteMap) tSynchronizedFloatByteMap0);
      tSynchronizedFloatByteMap1.iterator();
      byte byte0 = (byte) (-87);
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(int0, (float) int0, float0, byte0);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap2 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap1);
      boolean boolean0 = tSynchronizedFloatByteMap2.adjustValue((float) byte0, byte0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap();
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap0 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap0);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap1 = new TSynchronizedFloatByteMap((TFloatByteMap) tSynchronizedFloatByteMap0);
      float float0 = 767.5501F;
      tSynchronizedFloatByteMap1.increment(float0);
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap();
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap2 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap1);
      TFloatByteHashMap tFloatByteHashMap2 = new TFloatByteHashMap((TFloatByteMap) tFloatByteHashMap1);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap3 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap2);
      tSynchronizedFloatByteMap2.hashCode();
      float float1 = (-2010.3726F);
      byte byte0 = (byte)0;
      tSynchronizedFloatByteMap2.isEmpty();
      tSynchronizedFloatByteMap3.adjustValue(float1, byte0);
      float float2 = Float.POSITIVE_INFINITY;
      byte byte1 = (byte)0;
      byte byte2 = tSynchronizedFloatByteMap3.put(float2, byte1);
      float float3 = 0.0F;
      tSynchronizedFloatByteMap3.increment(float3);
      String string0 = ";";
      float float4 = (-1246.3647F);
      tSynchronizedFloatByteMap3.containsKey(float4);
      File file0 = new File(string0, string0);
      tSynchronizedFloatByteMap3.iterator();
      tSynchronizedFloatByteMap2.get((float) byte2);
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 59;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) int0;
      float float0 = 1.0F;
      floatArray0[1] = float0;
      floatArray0[2] = (float) int0;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-68);
      byteArray0[3] = byte3;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap0 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap0);
      tSynchronizedFloatByteMap0.putAll((TFloatByteMap) tFloatByteHashMap0);
      float float1 = 643.54736F;
      byte byte4 = (byte)0;
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(int0, (float) int0, float1, byte4);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap1 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap1);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap2 = new TSynchronizedFloatByteMap((TFloatByteMap) tSynchronizedFloatByteMap1);
      assertEquals("{}", tSynchronizedFloatByteMap2.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 1070981;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      float float0 = (-841.37573F);
      floatArray0[4] = float0;
      floatArray0[5] = (float) int0;
      floatArray0[6] = (float) int0;
      floatArray0[7] = (float) int0;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-117);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-95);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-69);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-109);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-41);
      byteArray0[7] = byte7;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap0 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap0);
      tSynchronizedFloatByteMap0.hashCode();
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(int0);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap1 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap1);
      float float1 = (-471.56677F);
      byte byte8 = tSynchronizedFloatByteMap1.remove(float1);
      assertFalse(byte8 == byte3);
  }

  @Test
  public void test8()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap();
      String string0 = "a~1oO6I,Z;^94ca@7";
      String string1 = "";
      Locale locale0 = new Locale(string0, string0, string1);
      String string2 = locale0.toString();
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap0 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap0, (Object) string2);
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap((TFloatByteMap) tSynchronizedFloatByteMap0);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap1 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap1);
      float float0 = 0.0F;
      boolean boolean0 = tSynchronizedFloatByteMap1.containsKey(float0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 579;
      float float0 = 10.0F;
      float float1 = (-109.07582F);
      byte byte0 = (byte)62;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(int0, float0, float1, byte0);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap0 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap0);
      int int1 = tSynchronizedFloatByteMap0.hashCode();
      assertFalse(int0 == int1);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-972);
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(int0);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap0 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap0);
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap((TFloatByteMap) tSynchronizedFloatByteMap0);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap1 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap1);
      TByteProcedure tByteProcedure0 = null;
      tSynchronizedFloatByteMap1.forEachValue(tByteProcedure0);
      TFloatByteHashMap tFloatByteHashMap2 = new TFloatByteHashMap(int0);
      String string0 = "XT*\\2t;XLCTY].";
      float float0 = 0.0F;
      byte byte0 = (byte)0;
      tFloatByteHashMap2.put(float0, byte0);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 3: XT*\\2t;XLCTY].
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap();
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap0 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap0);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      String string0 = hashMap0.toString();
      boolean boolean0 = tSynchronizedFloatByteMap0.equals((Object) string0);
      assertEquals(false, boolean0);
      
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap1 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap0);
      float float0 = 0.0F;
      float float1 = (-423.2505F);
      tSynchronizedFloatByteMap1.get(float1);
      TByteFunction tByteFunction0 = null;
      tSynchronizedFloatByteMap0.transformValues(tByteFunction0);
      byte byte0 = (byte)0;
      tFloatByteHashMap0.put(float0, byte0);
      tSynchronizedFloatByteMap1.putAll((TFloatByteMap) tFloatByteHashMap0);
      assertTrue(tSynchronizedFloatByteMap1.equals(tSynchronizedFloatByteMap0));
  }

  @Test
  public void test12()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      tFloatByteHashMap0.valueCollection();
      Locale locale0 = Locale.getDefault(locale_Category0);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap0 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap0);
      tSynchronizedFloatByteMap0.valueCollection();
      String string0 = locale0.getDisplayScript();
      byte[] byteArray0 = tSynchronizedFloatByteMap0.values(tFloatByteHashMap0._states);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap1 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap0, (Object) string0);
      byte[] byteArray1 = tSynchronizedFloatByteMap1.values(tFloatByteHashMap0._states);
      assertSame(byteArray1, byteArray0);
  }

  @Test
  public void test13()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap();
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap0 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap0);
      tSynchronizedFloatByteMap0.valueCollection();
      String string0 = "DXlm7/ Q6l$";
      File file0 = new File(string0, string0);
      float float0 = 0.0F;
      byte byte0 = (byte)84;
      tSynchronizedFloatByteMap0.adjustValue(float0, byte0);
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(file0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // DXlm7/ Q6l$
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap();
      Object object0 = null;
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap0 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap0, object0);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap1 = new TSynchronizedFloatByteMap((TFloatByteMap) tSynchronizedFloatByteMap0, object0);
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(int0, int0);
      String string0 = "";
      URI uRI0 = URI.create(string0);
      uRI0.getRawQuery();
      // Undeclared exception!
      try {
        tSynchronizedFloatByteMap0.keys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      TFloatByteMap tFloatByteMap0 = null;
      String string0 = "";
      URI uRI0 = URI.create(string0);
      uRI0.parseServerAuthority();
      URI uRI1 = null;
      try {
        uRI1 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :#
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 934;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap();
      String string0 = File.pathSeparator;
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap0 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap0, (Object) string0);
      TFloatByteMap tFloatByteMap0 = null;
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap1 = null;
      try {
        tSynchronizedFloatByteMap1 = new TSynchronizedFloatByteMap(tFloatByteMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-44);
      float float0 = (-1372.5829F);
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(int0, float0);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap0 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap0);
      tSynchronizedFloatByteMap0.values(tFloatByteHashMap0._states);
      byte byte0 = (byte)0;
      TFloatByteMap tFloatByteMap0 = null;
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap1 = null;
      try {
        tSynchronizedFloatByteMap1 = new TSynchronizedFloatByteMap(tFloatByteMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 0;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(int0);
      String string0 = File.separator;
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap0 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap0, (Object) string0);
      float float0 = 21.445477F;
      byte byte0 = (byte)0;
      tSynchronizedFloatByteMap0.put(float0, byte0);
      assertEquals(false, tFloatByteHashMap0.isEmpty());
      assertEquals("{21.445477=0}", tFloatByteHashMap0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = (-1872);
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(int0);
      Locale locale0 = Locale.ROOT;
      String string0 = "";
      Locale locale1 = new Locale(string0, string0, string0);
      String string1 = locale0.getDisplayVariant(locale1);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap0 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap0, (Object) string1);
      tSynchronizedFloatByteMap0.clear();
      float float0 = 0.0F;
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(int0, float0);
      String string2 = locale0.getVariant();
      tFloatByteHashMap1.equals((Object) string2);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap1 = new TSynchronizedFloatByteMap((TFloatByteMap) tFloatByteHashMap1);
      boolean boolean0 = tSynchronizedFloatByteMap1.increment((float) int0);
      assertEquals(false, boolean0);
  }
}
