/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TObjectFunction;
import gnu.trove.map.hash.TCustomHashMap;
import gnu.trove.procedure.TObjectObjectProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCustomHashMapEvoSuite_WeakMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 47 covered goals:
   * 1 Weak Mutation 220: gnu.trove.map.hash.TCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;Ljava/util/Map;)V:104 - DeleteStatement: putAll(Ljava/util/Map;)V
   * 2 Weak Mutation 223: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:131 - InsertUnaryOp Negation of initialCapacity
   * 3 Weak Mutation 225: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:131 - InsertUnaryOp IINC -1 initialCapacity
   * 4 Weak Mutation 224: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:131 - InsertUnaryOp IINC 1 initialCapacity
   * 5 Weak Mutation 229: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:133 - InsertUnaryOp IINC -1 capacity
   * 6 Weak Mutation 228: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:133 - InsertUnaryOp IINC 1 capacity
   * 7 Weak Mutation 227: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:133 - InsertUnaryOp Negation of capacity
   * 8 Weak Mutation 226: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:133 - ReplaceVariable capacity -> initialCapacity
   * 9 Weak Mutation 233: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:134 - InsertUnaryOp IINC -1 capacity
   * 10 Weak Mutation 232: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:134 - InsertUnaryOp IINC 1 capacity
   * 11 Weak Mutation 231: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:134 - InsertUnaryOp Negation of capacity
   * 12 Weak Mutation 230: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:134 - ReplaceVariable capacity -> initialCapacity
   * 13 Weak Mutation 739: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:548 - DeleteStatement: size()I
   * 14 Weak Mutation 740: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:548 - DeleteStatement: ensureCapacity(I)V
   * 15 Weak Mutation 744: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:550 - ReplaceComparisonOperator == -> !=
   * 16 Weak Mutation 743: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:550 - DeleteStatement: hasNext()Z
   * 17 Weak Mutation 742: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:550 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 18 Weak Mutation 741: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:550 - DeleteStatement: entrySet()Ljava/util/Set;
   * 19 Weak Mutation 823: gnu.trove.map.hash.TCustomHashMap$EntryView.iterator()Ljava/util/Iterator;:611 - DeleteField: this$0Lgnu/trove/map/hash/TCustomHashMap;
   * 20 gnu.trove.map.hash.TCustomHashMap.entrySet()Ljava/util/Set;: root-Branch
   * 21 gnu.trove.map.hash.TCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;I)V: root-Branch
   * 22 gnu.trove.map.hash.TCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;)V: root-Branch
   * 23 gnu.trove.map.hash.TCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;Ljava/util/Map;)V: root-Branch
   * 24 gnu.trove.map.hash.TCustomHashMap.setUp(I)I: root-Branch
   * 25 gnu.trove.map.hash.TCustomHashMap$EntryView.<init>(Lgnu/trove/map/hash/TCustomHashMap;)V: root-Branch
   * 26 gnu.trove.map.hash.TCustomHashMap$EntryView.iterator()Ljava/util/Iterator;: root-Branch
   * 27 gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.<init>(Lgnu/trove/map/hash/TCustomHashMap$EntryView;Lgnu/trove/map/hash/TCustomHashMap;)V: root-Branch
   * 28 gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V: I15 Branch 61 IFEQ L550 - true
   * 29 Weak Mutation 220: gnu.trove.map.hash.TCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;Ljava/util/Map;)V:104 - DeleteStatement: putAll(Ljava/util/Map;)V
   * 30 Weak Mutation 223: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:131 - InsertUnaryOp Negation of initialCapacity
   * 31 Weak Mutation 233: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:134 - InsertUnaryOp IINC -1 capacity
   * 32 Weak Mutation 232: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:134 - InsertUnaryOp IINC 1 capacity
   * 33 Weak Mutation 231: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:134 - InsertUnaryOp Negation of capacity
   * 34 Weak Mutation 230: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:134 - ReplaceVariable capacity -> initialCapacity
   * 35 Weak Mutation 229: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:133 - InsertUnaryOp IINC -1 capacity
   * 36 Weak Mutation 228: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:133 - InsertUnaryOp IINC 1 capacity
   * 37 Weak Mutation 227: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:133 - InsertUnaryOp Negation of capacity
   * 38 Weak Mutation 226: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:133 - ReplaceVariable capacity -> initialCapacity
   * 39 Weak Mutation 225: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:131 - InsertUnaryOp IINC -1 initialCapacity
   * 40 Weak Mutation 224: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:131 - InsertUnaryOp IINC 1 initialCapacity
   * 41 Weak Mutation 744: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:550 - ReplaceComparisonOperator == -> !=
   * 42 Weak Mutation 739: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:548 - DeleteStatement: size()I
   * 43 Weak Mutation 743: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:550 - DeleteStatement: hasNext()Z
   * 44 Weak Mutation 742: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:550 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 45 Weak Mutation 741: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:550 - DeleteStatement: entrySet()Ljava/util/Set;
   * 46 Weak Mutation 740: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:548 - DeleteStatement: ensureCapacity(I)V
   * 47 Weak Mutation 823: gnu.trove.map.hash.TCustomHashMap$EntryView.iterator()Ljava/util/Iterator;:611 - DeleteField: this$0Lgnu/trove/map/hash/TCustomHashMap;
   */

  @Test
  public void test0()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashMap<Integer, Object> tCustomHashMap0 = new TCustomHashMap<Integer, Object>((HashingStrategy<? super Integer>) identityHashingStrategy0);
      TCustomHashMap<Object, Object> tCustomHashMap1 = new TCustomHashMap<Object, Object>((HashingStrategy<? super Object>) identityHashingStrategy0, (Map<?, ?>) tCustomHashMap0);
      assertEquals(23, tCustomHashMap0.capacity());
  }

  //Test case number: 1
  /*
   * 50 covered goals:
   * 1 Weak Mutation 246: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - ReplaceVariable key -> REMOVED
   * 2 Weak Mutation 247: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 3 Weak Mutation 244: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - ReplaceVariable key -> FREE
   * 4 Weak Mutation 245: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - ReplaceVariable key -> value
   * 5 Weak Mutation 252: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:163 - ReplaceComparisonOperator >= -> >
   * 6 Weak Mutation 250: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:163 - InsertUnaryOp IINC -1 index
   * 7 Weak Mutation 248: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:163 - InsertUnaryOp Negation of index
   * 8 Weak Mutation 249: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:163 - InsertUnaryOp IINC 1 index
   * 9 Weak Mutation 266: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:166 - ReplaceVariable value -> key
   * 10 Weak Mutation 267: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:166 - InsertUnaryOp Negation of index
   * 11 Weak Mutation 264: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:166 - ReplaceVariable value -> FREE
   * 12 Weak Mutation 265: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:166 - ReplaceVariable value -> REMOVED
   * 13 Weak Mutation 268: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:166 - InsertUnaryOp IINC 1 index
   * 14 Weak Mutation 269: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:166 - InsertUnaryOp IINC -1 index
   * 15 gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: I9 Branch 23 IFGE L163 - true
   * 16 Weak Mutation 252: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:163 - ReplaceComparisonOperator >= -> >
   * 17 Weak Mutation 250: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:163 - InsertUnaryOp IINC -1 index
   * 18 Weak Mutation 248: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:163 - InsertUnaryOp Negation of index
   * 19 Weak Mutation 249: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:163 - InsertUnaryOp IINC 1 index
   * 20 Weak Mutation 246: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - ReplaceVariable key -> REMOVED
   * 21 Weak Mutation 247: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 22 Weak Mutation 244: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - ReplaceVariable key -> FREE
   * 23 Weak Mutation 245: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - ReplaceVariable key -> value
   * 24 Weak Mutation 273: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:173 - ReplaceComparisonOperator >= -> >
   * 25 Weak Mutation 287: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:179 - ReplaceVariable _values -> _set
   * 26 Weak Mutation 266: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:166 - ReplaceVariable value -> key
   * 27 Weak Mutation 267: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:166 - InsertUnaryOp Negation of index
   * 28 Weak Mutation 264: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:166 - ReplaceVariable value -> FREE
   * 29 Weak Mutation 265: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:166 - ReplaceVariable value -> REMOVED
   * 30 Weak Mutation 270: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:172 - ReplaceConstant - 1 -> 0
   * 31 Weak Mutation 271: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:173 - InsertUnaryOp Negation of index
   * 32 Weak Mutation 268: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:166 - InsertUnaryOp IINC 1 index
   * 33 Weak Mutation 269: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:166 - InsertUnaryOp IINC -1 index
   * 34 Weak Mutation 288: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:179 - DeleteField: _values[Ljava/lang/Object;
   * 35 Weak Mutation 289: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:179 - InsertUnaryOp Negation of index
   * 36 Weak Mutation 290: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:179 - InsertUnaryOp IINC 1 index
   * 37 Weak Mutation 291: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:179 - InsertUnaryOp IINC -1 index
   * 38 Weak Mutation 292: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:179 - ReplaceVariable value -> FREE
   * 39 Weak Mutation 293: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:179 - ReplaceVariable value -> previous
   * 40 Weak Mutation 294: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:179 - ReplaceVariable value -> REMOVED
   * 41 Weak Mutation 295: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:181 - InsertUnaryOp Negation of isNewMapping
   * 42 Weak Mutation 296: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:181 - ReplaceComparisonOperator == -> !=
   * 43 Weak Mutation 297: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:182 - InsertUnaryOp Negation
   * 44 Weak Mutation 298: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:182 - DeleteField: consumeFreeSlotZ
   * 45 Weak Mutation 299: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:182 - DeleteStatement: postInsertHook(Z)V
   * 46 Weak Mutation 300: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:185 - ReplaceVariable previous -> FREE
   * 47 Weak Mutation 301: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:185 - ReplaceVariable previous -> value
   * 48 Weak Mutation 302: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:185 - ReplaceVariable previous -> REMOVED
   * 49 gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I11 Branch 24 IFGE L173 - true
   * 50 gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I40 Branch 25 IFEQ L181 - false
   */

  @Test
  public void test1()  throws Throwable  {
      IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
      IdentityHashingStrategy<Object> identityHashingStrategy1 = new IdentityHashingStrategy<Object>();
      TCustomHashMap<Integer, Object> tCustomHashMap0 = new TCustomHashMap<Integer, Object>((HashingStrategy<? super Integer>) identityHashingStrategy1);
      tCustomHashMap0.putIfAbsent((Integer) null, (Object) identityHashingStrategy0);
      assertEquals(false, tCustomHashMap0.isEmpty());
      assertEquals(1, tCustomHashMap0.size());
  }

  //Test case number: 2
  /*
   * 36 covered goals:
   * 1 Weak Mutation 253: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:163 - ReplaceComparisonOperator >= -> -1
   * 2 Weak Mutation 254: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - ReplaceVariable _values -> _set
   * 3 Weak Mutation 255: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - DeleteField: _values[Ljava/lang/Object;
   * 4 Weak Mutation 258: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - InsertUnaryOp IINC -1 index
   * 5 Weak Mutation 259: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - ReplaceConstant - 1 -> 0
   * 6 Weak Mutation 256: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - InsertUnaryOp Negation of index
   * 7 Weak Mutation 257: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - InsertUnaryOp IINC 1 index
   * 8 Weak Mutation 262: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - ReplaceArithmeticOperator - -> /
   * 9 Weak Mutation 263: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - ReplaceArithmeticOperator - -> *
   * 10 Weak Mutation 260: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - ReplaceArithmeticOperator - -> +
   * 11 Weak Mutation 261: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - ReplaceArithmeticOperator - -> %
   * 12 Weak Mutation 272: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:173 - ReplaceComparisonOperator >= -> ==
   * 13 gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: I9 Branch 23 IFGE L163 - false
   * 14 Weak Mutation 239: gnu.trove.map.hash.TCustomHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:148 - ReplaceVariable value -> REMOVED
   * 15 Weak Mutation 238: gnu.trove.map.hash.TCustomHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:148 - ReplaceVariable value -> FREE
   * 16 Weak Mutation 237: gnu.trove.map.hash.TCustomHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:147 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 17 Weak Mutation 236: gnu.trove.map.hash.TCustomHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:147 - ReplaceVariable key -> REMOVED
   * 18 Weak Mutation 235: gnu.trove.map.hash.TCustomHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:147 - ReplaceVariable key -> value
   * 19 Weak Mutation 234: gnu.trove.map.hash.TCustomHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:147 - ReplaceVariable key -> FREE
   * 20 Weak Mutation 254: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - ReplaceVariable _values -> _set
   * 21 Weak Mutation 255: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - DeleteField: _values[Ljava/lang/Object;
   * 22 Weak Mutation 253: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:163 - ReplaceComparisonOperator >= -> -1
   * 23 Weak Mutation 242: gnu.trove.map.hash.TCustomHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:148 - InsertUnaryOp IINC 1 index
   * 24 Weak Mutation 243: gnu.trove.map.hash.TCustomHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:148 - InsertUnaryOp IINC -1 index
   * 25 Weak Mutation 240: gnu.trove.map.hash.TCustomHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:148 - ReplaceVariable value -> key
   * 26 Weak Mutation 241: gnu.trove.map.hash.TCustomHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:148 - InsertUnaryOp Negation of index
   * 27 Weak Mutation 272: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:173 - ReplaceComparisonOperator >= -> ==
   * 28 Weak Mutation 258: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - InsertUnaryOp IINC -1 index
   * 29 Weak Mutation 259: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - ReplaceConstant - 1 -> 0
   * 30 Weak Mutation 256: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - InsertUnaryOp Negation of index
   * 31 Weak Mutation 257: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - InsertUnaryOp IINC 1 index
   * 32 Weak Mutation 262: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - ReplaceArithmeticOperator - -> /
   * 33 Weak Mutation 263: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - ReplaceArithmeticOperator - -> *
   * 34 Weak Mutation 260: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - ReplaceArithmeticOperator - -> +
   * 35 Weak Mutation 261: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - ReplaceArithmeticOperator - -> %
   * 36 gnu.trove.map.hash.TCustomHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: root-Branch
   */

//   @Test
//   public void test2()  throws Throwable  {
//       IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
//       TCustomHashMap<Integer, String> tCustomHashMap0 = new TCustomHashMap<Integer, String>((HashingStrategy<? super Integer>) identityHashingStrategy0, 246);
//       tCustomHashMap0.put((Integer) 246, "");
//       String string0 = tCustomHashMap0.putIfAbsent((Integer) 246, "");
//       assertEquals("{246=}", tCustomHashMap0.toString());
//       assertEquals("", string0);
//   }

  //Test case number: 3
  /*
   * 28 covered goals:
   * 1 Weak Mutation 274: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:173 - ReplaceComparisonOperator >= -> -1
   * 2 Weak Mutation 275: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:174 - InsertUnaryOp Negation of index
   * 3 Weak Mutation 279: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:174 - ReplaceArithmeticOperator - -> /
   * 4 Weak Mutation 278: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:174 - ReplaceArithmeticOperator - -> %
   * 5 Weak Mutation 277: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:174 - ReplaceArithmeticOperator - -> +
   * 6 Weak Mutation 276: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:174 - ReplaceConstant - 1 -> 0
   * 7 Weak Mutation 280: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:174 - ReplaceArithmeticOperator - -> *
   * 8 Weak Mutation 283: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:175 - InsertUnaryOp Negation of index
   * 9 Weak Mutation 282: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:175 - DeleteField: _values[Ljava/lang/Object;
   * 10 Weak Mutation 281: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:175 - ReplaceVariable _values -> _set
   * 11 Weak Mutation 285: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:175 - InsertUnaryOp IINC -1 index
   * 12 Weak Mutation 284: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:175 - InsertUnaryOp IINC 1 index
   * 13 Weak Mutation 286: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:176 - ReplaceConstant - 0 -> 1
   * 14 gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I11 Branch 24 IFGE L173 - false
   * 15 gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I40 Branch 25 IFEQ L181 - true
   * 16 Weak Mutation 275: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:174 - InsertUnaryOp Negation of index
   * 17 Weak Mutation 274: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:173 - ReplaceComparisonOperator >= -> -1
   * 18 Weak Mutation 279: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:174 - ReplaceArithmeticOperator - -> /
   * 19 Weak Mutation 278: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:174 - ReplaceArithmeticOperator - -> %
   * 20 Weak Mutation 277: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:174 - ReplaceArithmeticOperator - -> +
   * 21 Weak Mutation 276: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:174 - ReplaceConstant - 1 -> 0
   * 22 Weak Mutation 283: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:175 - InsertUnaryOp Negation of index
   * 23 Weak Mutation 282: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:175 - DeleteField: _values[Ljava/lang/Object;
   * 24 Weak Mutation 281: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:175 - ReplaceVariable _values -> _set
   * 25 Weak Mutation 280: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:174 - ReplaceArithmeticOperator - -> *
   * 26 Weak Mutation 286: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:176 - ReplaceConstant - 0 -> 1
   * 27 Weak Mutation 285: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:175 - InsertUnaryOp IINC -1 index
   * 28 Weak Mutation 284: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:175 - InsertUnaryOp IINC 1 index
   */

  @Test
  public void test3()  throws Throwable  {
      IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
      TCustomHashMap<Integer, String> tCustomHashMap0 = new TCustomHashMap<Integer, String>((HashingStrategy<? super Integer>) identityHashingStrategy0);
      tCustomHashMap0.put((Integer) 0, "(this Collection)");
      String string0 = tCustomHashMap0.put((Integer) 0, (String) null);
      assertEquals(false, tCustomHashMap0.isEmpty());
      assertEquals("(this Collection)", string0);
  }

  //Test case number: 4
  /*
   * 10 covered goals:
   * 1 Weak Mutation 305: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:198 - ReplaceComparisonOperator != -> ==
   * 2 Weak Mutation 304: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:198 - ReplaceVariable other -> REMOVED
   * 3 Weak Mutation 303: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:198 - ReplaceVariable other -> FREE
   * 4 Weak Mutation 306: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:199 - ReplaceConstant - 0 -> 1
   * 5 gnu.trove.map.hash.TCustomHashMap.<init>()V: root-Branch
   * 6 gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 26 IFNE L198 - false
   * 7 Weak Mutation 305: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:198 - ReplaceComparisonOperator != -> ==
   * 8 Weak Mutation 304: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:198 - ReplaceVariable other -> REMOVED
   * 9 Weak Mutation 306: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:199 - ReplaceConstant - 0 -> 1
   * 10 Weak Mutation 303: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:198 - ReplaceVariable other -> FREE
   */

  @Test
  public void test4()  throws Throwable  {
      TCustomHashMap<String, Integer> tCustomHashMap0 = new TCustomHashMap<String, Integer>();
      boolean boolean0 = tCustomHashMap0.equals((Object) "");
      assertEquals(23, tCustomHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 10 covered goals:
   * 1 Weak Mutation 313: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:202 - ReplaceComparisonOperator == -> <=
   * 2 Weak Mutation 314: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:203 - ReplaceConstant - 0 -> 1
   * 3 gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 27 IF_ICMPEQ L202 - false
   * 4 Weak Mutation 307: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:201 - ReplaceVariable other -> FREE
   * 5 Weak Mutation 309: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:202 - DeleteStatement: size()I
   * 6 Weak Mutation 308: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:201 - ReplaceVariable other -> REMOVED
   * 7 Weak Mutation 310: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:202 - DeleteStatement: size()I
   * 8 Weak Mutation 313: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:202 - ReplaceComparisonOperator == -> <=
   * 9 Weak Mutation 314: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:203 - ReplaceConstant - 0 -> 1
   * 10 gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 26 IFNE L198 - true
   */

  @Test
  public void test5()  throws Throwable  {
      IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
      TCustomHashMap<String, Integer> tCustomHashMap0 = new TCustomHashMap<String, Integer>();
      TCustomHashMap<Integer, String> tCustomHashMap1 = new TCustomHashMap<Integer, String>((HashingStrategy<? super Integer>) identityHashingStrategy0, (-1218));
      tCustomHashMap1.put((Integer) (-1218), "");
      boolean boolean0 = tCustomHashMap1.equals((Object) tCustomHashMap0);
      assertEquals(false, tCustomHashMap1.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 225 covered goals:
   * 1 Weak Mutation 55: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:226 - DeleteField: val$bufLjava/lang/StringBuilder;
   * 2 Weak Mutation 57: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:226 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 3 Weak Mutation 56: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:226 - ReplaceConstant - ,  -> 
   * 4 Weak Mutation 492: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:388 - DeleteField: _set[Ljava/lang/Object;
   * 5 Weak Mutation 493: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:389 - DeleteStatement: size()I
   * 6 Weak Mutation 494: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:390 - DeleteField: _set[Ljava/lang/Object;
   * 7 Weak Mutation 496: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:391 - DeleteField: _values[Ljava/lang/Object;
   * 8 Weak Mutation 495: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:391 - ReplaceVariable _values -> _set
   * 9 Weak Mutation 500: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:393 - InsertUnaryOp IINC 1 newCapacity
   * 10 Weak Mutation 501: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:393 - InsertUnaryOp IINC -1 newCapacity
   * 11 Weak Mutation 497: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:393 - ReplaceVariable newCapacity -> oldCapacity
   * 12 Weak Mutation 498: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:393 - ReplaceVariable newCapacity -> oldSize
   * 13 Weak Mutation 499: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:393 - InsertUnaryOp Negation of newCapacity
   * 14 Weak Mutation 504: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:394 - DeleteField: FREELjava/lang/Object;
   * 15 Weak Mutation 505: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:394 - DeleteStatement: fill([Ljava/lang/Object;Ljava/lang/Object;)V
   * 16 Weak Mutation 502: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:394 - DeleteField: _set[Ljava/lang/Object;
   * 17 Weak Mutation 503: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:394 - ReplaceVariable FREE -> REMOVED
   * 18 Weak Mutation 508: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:395 - InsertUnaryOp Negation of newCapacity
   * 19 Weak Mutation 509: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:395 - InsertUnaryOp IINC 1 newCapacity
   * 20 Weak Mutation 510: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:395 - InsertUnaryOp IINC -1 newCapacity
   * 21 Weak Mutation 506: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:395 - ReplaceVariable newCapacity -> oldCapacity
   * 22 Weak Mutation 507: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:395 - ReplaceVariable newCapacity -> oldSize
   * 23 Weak Mutation 511: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable oldCapacity -> newCapacity
   * 24 Weak Mutation 516: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable i -> newCapacity
   * 25 Weak Mutation 517: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable i -> oldCapacity
   * 26 Weak Mutation 518: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable i -> oldSize
   * 27 Weak Mutation 519: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - InsertUnaryOp Negation of i
   * 28 Weak Mutation 512: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable oldCapacity -> oldSize
   * 29 Weak Mutation 513: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - InsertUnaryOp Negation of oldCapacity
   * 30 Weak Mutation 514: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - InsertUnaryOp IINC 1 oldCapacity
   * 31 Weak Mutation 515: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - InsertUnaryOp IINC -1 oldCapacity
   * 32 Weak Mutation 524: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable i -> oldSize
   * 33 Weak Mutation 526: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceComparisonOperator <= -> <
   * 34 Weak Mutation 527: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceComparisonOperator <= -> -1
   * 35 Weak Mutation 520: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - InsertUnaryOp IINC 1 i
   * 36 Weak Mutation 521: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - InsertUnaryOp IINC -1 i
   * 37 Weak Mutation 522: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable i -> newCapacity
   * 38 Weak Mutation 523: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable i -> oldCapacity
   * 39 Weak Mutation 533: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - InsertUnaryOp Negation of i
   * 40 Weak Mutation 532: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - ReplaceVariable i -> oldSize
   * 41 Weak Mutation 535: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - InsertUnaryOp IINC -1 i
   * 42 Weak Mutation 534: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - InsertUnaryOp IINC 1 i
   * 43 Weak Mutation 529: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - ReplaceVariable oldKeys -> _set
   * 44 Weak Mutation 528: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - ReplaceVariable oldKeys -> oldVals
   * 45 Weak Mutation 531: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - ReplaceVariable i -> oldCapacity
   * 46 Weak Mutation 530: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - ReplaceVariable i -> newCapacity
   * 47 Weak Mutation 544: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - DeleteField: REMOVEDLjava/lang/Object;
   * 48 Weak Mutation 545: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceComparisonOperator != -> ==
   * 49 Weak Mutation 541: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceVariable o -> FREE
   * 50 Weak Mutation 540: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceComparisonOperator == -> !=
   * 51 Weak Mutation 543: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceVariable REMOVED -> FREE
   * 52 Weak Mutation 542: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceVariable o -> REMOVED
   * 53 Weak Mutation 537: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceVariable o -> REMOVED
   * 54 Weak Mutation 536: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceVariable o -> FREE
   * 55 Weak Mutation 539: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - DeleteField: FREELjava/lang/Object;
   * 56 Weak Mutation 538: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceVariable FREE -> REMOVED
   * 57 Weak Mutation 548: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:403 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 58 Weak Mutation 546: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:403 - ReplaceVariable o -> FREE
   * 59 Weak Mutation 547: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:403 - ReplaceVariable o -> REMOVED
   * 60 Weak Mutation 550: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - ReplaceVariable index -> oldCapacity
   * 61 Weak Mutation 551: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - ReplaceVariable index -> oldSize
   * 62 Weak Mutation 549: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - ReplaceVariable index -> newCapacity
   * 63 Weak Mutation 556: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - ReplaceComparisonOperator >= -> ==
   * 64 Weak Mutation 557: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - ReplaceComparisonOperator >= -> >
   * 65 Weak Mutation 554: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - InsertUnaryOp IINC 1 index
   * 66 Weak Mutation 555: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - InsertUnaryOp IINC -1 index
   * 67 Weak Mutation 552: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - ReplaceVariable index -> i
   * 68 Weak Mutation 553: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - InsertUnaryOp Negation of index
   * 69 gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z: I4 Branch 7 IFEQ L223 - true
   * 70 gnu.trove.map.hash.TCustomHashMap.rehash(I)V: I47 Branch 43 IFLE L399 - true
   * 71 gnu.trove.map.hash.TCustomHashMap.rehash(I)V: I47 Branch 43 IFLE L399 - false
   * 72 gnu.trove.map.hash.TCustomHashMap.rehash(I)V: I58 Branch 44 IF_ACMPEQ L401 - true
   * 73 gnu.trove.map.hash.TCustomHashMap.rehash(I)V: I58 Branch 44 IF_ACMPEQ L401 - false
   * 74 gnu.trove.map.hash.TCustomHashMap.rehash(I)V: I61 Branch 45 IF_ACMPNE L401 - true
   * 75 gnu.trove.map.hash.TCustomHashMap.rehash(I)V: I72 Branch 46 IFGE L404 - true
   * 76 Weak Mutation 51: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:223 - InsertUnaryOp Negation
   * 77 Weak Mutation 54: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:224 - ReplaceConstant - 0 -> 1
   * 78 Weak Mutation 53: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:223 - ReplaceComparisonOperator == -> !=
   * 79 Weak Mutation 52: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:223 - DeleteField: firstZ
   * 80 Weak Mutation 59: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:229 - ReplaceVariable key -> value
   * 81 Weak Mutation 58: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:229 - DeleteField: val$bufLjava/lang/StringBuilder;
   * 82 Weak Mutation 63: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:230 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 83 Weak Mutation 62: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:230 - ReplaceConstant - = -> 
   * 84 Weak Mutation 61: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:230 - DeleteField: val$bufLjava/lang/StringBuilder;
   * 85 Weak Mutation 60: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:229 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
   * 86 Weak Mutation 64: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:231 - DeleteField: val$bufLjava/lang/StringBuilder;
   * 87 Weak Mutation 65: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:231 - ReplaceVariable value -> key
   * 88 Weak Mutation 66: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:231 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
   * 89 Weak Mutation 67: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:232 - ReplaceConstant - 1 -> 0
   * 90 Weak Mutation 319: gnu.trove.map.hash.TCustomHashMap.toString()Ljava/lang/String;:218 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z
   * 91 Weak Mutation 318: gnu.trove.map.hash.TCustomHashMap.toString()Ljava/lang/String;:217 - ReplaceConstant - { -> 
   * 92 Weak Mutation 322: gnu.trove.map.hash.TCustomHashMap.toString()Ljava/lang/String;:236 - DeleteStatement: toString()Ljava/lang/String;
   * 93 Weak Mutation 320: gnu.trove.map.hash.TCustomHashMap.toString()Ljava/lang/String;:235 - ReplaceConstant - } -> 
   * 94 Weak Mutation 321: gnu.trove.map.hash.TCustomHashMap.toString()Ljava/lang/String;:235 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 95 Weak Mutation 51: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:223 - InsertUnaryOp Negation
   * 96 Weak Mutation 55: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:226 - DeleteField: val$bufLjava/lang/StringBuilder;
   * 97 Weak Mutation 54: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:224 - ReplaceConstant - 0 -> 1
   * 98 Weak Mutation 53: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:223 - ReplaceComparisonOperator == -> !=
   * 99 Weak Mutation 52: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:223 - DeleteField: firstZ
   * 100 Weak Mutation 59: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:229 - ReplaceVariable key -> value
   * 101 Weak Mutation 58: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:229 - DeleteField: val$bufLjava/lang/StringBuilder;
   * 102 Weak Mutation 57: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:226 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 103 Weak Mutation 56: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:226 - ReplaceConstant - ,  -> 
   * 104 Weak Mutation 63: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:230 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 105 Weak Mutation 62: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:230 - ReplaceConstant - = -> 
   * 106 Weak Mutation 61: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:230 - DeleteField: val$bufLjava/lang/StringBuilder;
   * 107 Weak Mutation 60: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:229 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
   * 108 Weak Mutation 64: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:231 - DeleteField: val$bufLjava/lang/StringBuilder;
   * 109 Weak Mutation 65: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:231 - ReplaceVariable value -> key
   * 110 Weak Mutation 66: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:231 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
   * 111 Weak Mutation 67: gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:232 - ReplaceConstant - 1 -> 0
   * 112 Weak Mutation 319: gnu.trove.map.hash.TCustomHashMap.toString()Ljava/lang/String;:218 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z
   * 113 Weak Mutation 318: gnu.trove.map.hash.TCustomHashMap.toString()Ljava/lang/String;:217 - ReplaceConstant - { -> 
   * 114 Weak Mutation 322: gnu.trove.map.hash.TCustomHashMap.toString()Ljava/lang/String;:236 - DeleteStatement: toString()Ljava/lang/String;
   * 115 Weak Mutation 320: gnu.trove.map.hash.TCustomHashMap.toString()Ljava/lang/String;:235 - ReplaceConstant - } -> 
   * 116 Weak Mutation 321: gnu.trove.map.hash.TCustomHashMap.toString()Ljava/lang/String;:235 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 117 Weak Mutation 373: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp Negation of i
   * 118 Weak Mutation 375: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp IINC -1 i
   * 119 Weak Mutation 374: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp IINC 1 i
   * 120 Weak Mutation 369: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:321 - ReplaceComparisonOperator <= -> <
   * 121 Weak Mutation 371: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - ReplaceVariable keys -> values
   * 122 Weak Mutation 370: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:321 - ReplaceComparisonOperator <= -> -1
   * 123 Weak Mutation 381: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp Negation of i
   * 124 Weak Mutation 383: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp IINC -1 i
   * 125 Weak Mutation 382: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp IINC 1 i
   * 126 Weak Mutation 377: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - DeleteField: FREELjava/lang/Object;
   * 127 Weak Mutation 376: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - ReplaceVariable FREE -> REMOVED
   * 128 Weak Mutation 379: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - ReplaceVariable keys -> values
   * 129 Weak Mutation 378: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - ReplaceComparisonOperator == -> !=
   * 130 Weak Mutation 365: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:321 - InsertUnaryOp Negation of i
   * 131 Weak Mutation 366: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:321 - InsertUnaryOp IINC 1 i
   * 132 Weak Mutation 367: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:321 - InsertUnaryOp IINC -1 i
   * 133 Weak Mutation 360: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - DeleteField: _set[Ljava/lang/Object;
   * 134 Weak Mutation 361: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:320 - ReplaceVariable _values -> _set
   * 135 Weak Mutation 362: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:320 - DeleteField: _values[Ljava/lang/Object;
   * 136 Weak Mutation 363: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:321 - ReplaceVariable keys -> values
   * 137 Weak Mutation 400: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:328 - ReplaceConstant - 1 -> 0
   * 138 Weak Mutation 395: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp IINC 1 i
   * 139 Weak Mutation 394: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp Negation of i
   * 140 Weak Mutation 393: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - ReplaceVariable values -> _set
   * 141 Weak Mutation 392: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - ReplaceVariable values -> keys
   * 142 Weak Mutation 398: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - ReplaceComparisonOperator != -> ==
   * 143 Weak Mutation 397: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - DeleteStatement: execute(Ljava/lang/Object;Ljava/lang/Object;)Z
   * 144 Weak Mutation 396: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp IINC -1 i
   * 145 Weak Mutation 387: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - ReplaceVariable keys -> values
   * 146 Weak Mutation 386: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - ReplaceComparisonOperator == -> !=
   * 147 Weak Mutation 385: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - DeleteField: REMOVEDLjava/lang/Object;
   * 148 Weak Mutation 384: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - ReplaceVariable REMOVED -> FREE
   * 149 Weak Mutation 391: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp IINC -1 i
   * 150 Weak Mutation 390: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp IINC 1 i
   * 151 Weak Mutation 389: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp Negation of i
   * 152 Weak Mutation 508: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:395 - InsertUnaryOp Negation of newCapacity
   * 153 Weak Mutation 509: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:395 - InsertUnaryOp IINC 1 newCapacity
   * 154 Weak Mutation 510: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:395 - InsertUnaryOp IINC -1 newCapacity
   * 155 Weak Mutation 511: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable oldCapacity -> newCapacity
   * 156 Weak Mutation 504: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:394 - DeleteField: FREELjava/lang/Object;
   * 157 Weak Mutation 505: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:394 - DeleteStatement: fill([Ljava/lang/Object;Ljava/lang/Object;)V
   * 158 Weak Mutation 506: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:395 - ReplaceVariable newCapacity -> oldCapacity
   * 159 Weak Mutation 507: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:395 - ReplaceVariable newCapacity -> oldSize
   * 160 Weak Mutation 500: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:393 - InsertUnaryOp IINC 1 newCapacity
   * 161 Weak Mutation 501: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:393 - InsertUnaryOp IINC -1 newCapacity
   * 162 Weak Mutation 502: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:394 - DeleteField: _set[Ljava/lang/Object;
   * 163 Weak Mutation 503: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:394 - ReplaceVariable FREE -> REMOVED
   * 164 Weak Mutation 496: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:391 - DeleteField: _values[Ljava/lang/Object;
   * 165 Weak Mutation 497: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:393 - ReplaceVariable newCapacity -> oldCapacity
   * 166 Weak Mutation 498: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:393 - ReplaceVariable newCapacity -> oldSize
   * 167 Weak Mutation 499: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:393 - InsertUnaryOp Negation of newCapacity
   * 168 Weak Mutation 493: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:389 - DeleteStatement: size()I
   * 169 Weak Mutation 492: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:388 - DeleteField: _set[Ljava/lang/Object;
   * 170 Weak Mutation 495: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:391 - ReplaceVariable _values -> _set
   * 171 Weak Mutation 494: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:390 - DeleteField: _set[Ljava/lang/Object;
   * 172 Weak Mutation 550: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - ReplaceVariable index -> oldCapacity
   * 173 Weak Mutation 551: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - ReplaceVariable index -> oldSize
   * 174 Weak Mutation 548: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:403 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 175 Weak Mutation 549: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - ReplaceVariable index -> newCapacity
   * 176 Weak Mutation 546: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:403 - ReplaceVariable o -> FREE
   * 177 Weak Mutation 547: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:403 - ReplaceVariable o -> REMOVED
   * 178 Weak Mutation 544: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - DeleteField: REMOVEDLjava/lang/Object;
   * 179 Weak Mutation 545: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceComparisonOperator != -> ==
   * 180 Weak Mutation 556: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - ReplaceComparisonOperator >= -> ==
   * 181 Weak Mutation 557: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - ReplaceComparisonOperator >= -> >
   * 182 Weak Mutation 554: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - InsertUnaryOp IINC 1 index
   * 183 Weak Mutation 555: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - InsertUnaryOp IINC -1 index
   * 184 Weak Mutation 552: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - ReplaceVariable index -> i
   * 185 Weak Mutation 553: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - InsertUnaryOp Negation of index
   * 186 Weak Mutation 516: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable i -> newCapacity
   * 187 Weak Mutation 517: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable i -> oldCapacity
   * 188 Weak Mutation 518: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable i -> oldSize
   * 189 Weak Mutation 519: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - InsertUnaryOp Negation of i
   * 190 Weak Mutation 512: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable oldCapacity -> oldSize
   * 191 Weak Mutation 513: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - InsertUnaryOp Negation of oldCapacity
   * 192 Weak Mutation 514: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - InsertUnaryOp IINC 1 oldCapacity
   * 193 Weak Mutation 515: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - InsertUnaryOp IINC -1 oldCapacity
   * 194 Weak Mutation 524: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable i -> oldSize
   * 195 Weak Mutation 526: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceComparisonOperator <= -> <
   * 196 Weak Mutation 527: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceComparisonOperator <= -> -1
   * 197 Weak Mutation 520: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - InsertUnaryOp IINC 1 i
   * 198 Weak Mutation 521: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - InsertUnaryOp IINC -1 i
   * 199 Weak Mutation 522: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable i -> newCapacity
   * 200 Weak Mutation 523: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable i -> oldCapacity
   * 201 Weak Mutation 533: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - InsertUnaryOp Negation of i
   * 202 Weak Mutation 532: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - ReplaceVariable i -> oldSize
   * 203 Weak Mutation 535: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - InsertUnaryOp IINC -1 i
   * 204 Weak Mutation 534: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - InsertUnaryOp IINC 1 i
   * 205 Weak Mutation 529: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - ReplaceVariable oldKeys -> _set
   * 206 Weak Mutation 528: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - ReplaceVariable oldKeys -> oldVals
   * 207 Weak Mutation 531: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - ReplaceVariable i -> oldCapacity
   * 208 Weak Mutation 530: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - ReplaceVariable i -> newCapacity
   * 209 Weak Mutation 541: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceVariable o -> FREE
   * 210 Weak Mutation 540: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceComparisonOperator == -> !=
   * 211 Weak Mutation 543: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceVariable REMOVED -> FREE
   * 212 Weak Mutation 542: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceVariable o -> REMOVED
   * 213 Weak Mutation 537: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceVariable o -> REMOVED
   * 214 Weak Mutation 536: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceVariable o -> FREE
   * 215 Weak Mutation 539: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - DeleteField: FREELjava/lang/Object;
   * 216 Weak Mutation 538: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceVariable FREE -> REMOVED
   * 217 gnu.trove.map.hash.TCustomHashMap.toString()Ljava/lang/String;: root-Branch
   * 218 gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I18 Branch 32 IFLE L321 - true
   * 219 gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I18 Branch 32 IFLE L321 - false
   * 220 gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I25 Branch 33 IF_ACMPEQ L322 - true
   * 221 gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I25 Branch 33 IF_ACMPEQ L322 - false
   * 222 gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I30 Branch 34 IF_ACMPEQ L322 - false
   * 223 gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I39 Branch 35 IFNE L322 - true
   * 224 gnu.trove.map.hash.TCustomHashMap$1.<init>(Lgnu/trove/map/hash/TCustomHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 225 gnu.trove.map.hash.TCustomHashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z: I4 Branch 7 IFEQ L223 - false
   */

  @Test
  public void test6()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashMap<Object, Integer> tCustomHashMap0 = new TCustomHashMap<Object, Integer>((HashingStrategy<? super Object>) identityHashingStrategy0, (-653));
      tCustomHashMap0.put((Object) identityHashingStrategy0, (Integer) (-653));
      tCustomHashMap0.put((Object) " vs b=", (Integer) null);
      tCustomHashMap0.toString();
      assertEquals(false, tCustomHashMap0.isEmpty());
      assertEquals(7, tCustomHashMap0.capacity());
  }

  //Test case number: 7
  /*
   * 114 covered goals:
   * 1 Weak Mutation 36: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - DeleteField: hI
   * 2 Weak Mutation 41: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - ReplaceConstant - 0 -> 1
   * 3 gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z: I8 Branch 6 IFNONNULL L248 - false
   * 4 Weak Mutation 34: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - InsertUnaryOp +1
   * 5 Weak Mutation 35: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - InsertUnaryOp -1
   * 6 Weak Mutation 32: gnu.trove.map.hash.TCustomHashMap$HashProcedure.getHashCode()I:244 - DeleteField: hI
   * 7 Weak Mutation 33: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - InsertUnaryOp Negation
   * 8 Weak Mutation 38: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - DeleteStatement: hash(Ljava/lang/Object;)I
   * 9 Weak Mutation 39: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - ReplaceVariable value -> key
   * 10 Weak Mutation 37: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - ReplaceVariable key -> value
   * 11 Weak Mutation 42: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - ReplaceVariable value -> key
   * 12 Weak Mutation 43: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - DeleteStatement: hashCode()I
   * 13 Weak Mutation 40: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - ReplaceComparisonOperator != null -> = null
   * 14 Weak Mutation 46: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - ReplaceArithmeticOperator + -> -
   * 15 Weak Mutation 47: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - ReplaceArithmeticOperator + -> %
   * 16 Weak Mutation 44: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - ReplaceBitwiseOperator ^ -> &
   * 17 Weak Mutation 45: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - ReplaceBitwiseOperator ^ -> |
   * 18 Weak Mutation 50: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:249 - ReplaceConstant - 1 -> 0
   * 19 Weak Mutation 49: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - ReplaceArithmeticOperator + -> *
   * 20 Weak Mutation 48: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - ReplaceArithmeticOperator + -> /
   * 21 Weak Mutation 398: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - ReplaceComparisonOperator != -> ==
   * 22 Weak Mutation 508: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:395 - InsertUnaryOp Negation of newCapacity
   * 23 Weak Mutation 509: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:395 - InsertUnaryOp IINC 1 newCapacity
   * 24 Weak Mutation 510: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:395 - InsertUnaryOp IINC -1 newCapacity
   * 25 Weak Mutation 511: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable oldCapacity -> newCapacity
   * 26 Weak Mutation 504: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:394 - DeleteField: FREELjava/lang/Object;
   * 27 Weak Mutation 505: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:394 - DeleteStatement: fill([Ljava/lang/Object;Ljava/lang/Object;)V
   * 28 Weak Mutation 506: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:395 - ReplaceVariable newCapacity -> oldCapacity
   * 29 Weak Mutation 507: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:395 - ReplaceVariable newCapacity -> oldSize
   * 30 Weak Mutation 500: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:393 - InsertUnaryOp IINC 1 newCapacity
   * 31 Weak Mutation 501: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:393 - InsertUnaryOp IINC -1 newCapacity
   * 32 Weak Mutation 502: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:394 - DeleteField: _set[Ljava/lang/Object;
   * 33 Weak Mutation 503: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:394 - ReplaceVariable FREE -> REMOVED
   * 34 Weak Mutation 496: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:391 - DeleteField: _values[Ljava/lang/Object;
   * 35 Weak Mutation 497: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:393 - ReplaceVariable newCapacity -> oldCapacity
   * 36 Weak Mutation 498: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:393 - ReplaceVariable newCapacity -> oldSize
   * 37 Weak Mutation 499: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:393 - InsertUnaryOp Negation of newCapacity
   * 38 Weak Mutation 493: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:389 - DeleteStatement: size()I
   * 39 Weak Mutation 492: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:388 - DeleteField: _set[Ljava/lang/Object;
   * 40 Weak Mutation 495: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:391 - ReplaceVariable _values -> _set
   * 41 Weak Mutation 494: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:390 - DeleteField: _set[Ljava/lang/Object;
   * 42 Weak Mutation 550: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - ReplaceVariable index -> oldCapacity
   * 43 Weak Mutation 551: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - ReplaceVariable index -> oldSize
   * 44 Weak Mutation 548: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:403 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 45 Weak Mutation 549: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - ReplaceVariable index -> newCapacity
   * 46 Weak Mutation 546: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:403 - ReplaceVariable o -> FREE
   * 47 Weak Mutation 547: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:403 - ReplaceVariable o -> REMOVED
   * 48 Weak Mutation 544: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - DeleteField: REMOVEDLjava/lang/Object;
   * 49 Weak Mutation 545: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceComparisonOperator != -> ==
   * 50 Weak Mutation 556: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - ReplaceComparisonOperator >= -> ==
   * 51 Weak Mutation 557: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - ReplaceComparisonOperator >= -> >
   * 52 Weak Mutation 554: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - InsertUnaryOp IINC 1 index
   * 53 Weak Mutation 555: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - InsertUnaryOp IINC -1 index
   * 54 Weak Mutation 552: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - ReplaceVariable index -> i
   * 55 Weak Mutation 553: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:404 - InsertUnaryOp Negation of index
   * 56 Weak Mutation 516: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable i -> newCapacity
   * 57 Weak Mutation 517: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable i -> oldCapacity
   * 58 Weak Mutation 518: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable i -> oldSize
   * 59 Weak Mutation 519: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - InsertUnaryOp Negation of i
   * 60 Weak Mutation 512: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable oldCapacity -> oldSize
   * 61 Weak Mutation 513: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - InsertUnaryOp Negation of oldCapacity
   * 62 Weak Mutation 514: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - InsertUnaryOp IINC 1 oldCapacity
   * 63 Weak Mutation 515: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - InsertUnaryOp IINC -1 oldCapacity
   * 64 Weak Mutation 524: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable i -> oldSize
   * 65 Weak Mutation 526: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceComparisonOperator <= -> <
   * 66 Weak Mutation 527: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceComparisonOperator <= -> -1
   * 67 Weak Mutation 520: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - InsertUnaryOp IINC 1 i
   * 68 Weak Mutation 521: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - InsertUnaryOp IINC -1 i
   * 69 Weak Mutation 522: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable i -> newCapacity
   * 70 Weak Mutation 523: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:399 - ReplaceVariable i -> oldCapacity
   * 71 Weak Mutation 533: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - InsertUnaryOp Negation of i
   * 72 Weak Mutation 532: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - ReplaceVariable i -> oldSize
   * 73 Weak Mutation 535: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - InsertUnaryOp IINC -1 i
   * 74 Weak Mutation 534: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - InsertUnaryOp IINC 1 i
   * 75 Weak Mutation 529: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - ReplaceVariable oldKeys -> _set
   * 76 Weak Mutation 528: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - ReplaceVariable oldKeys -> oldVals
   * 77 Weak Mutation 531: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - ReplaceVariable i -> oldCapacity
   * 78 Weak Mutation 530: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:400 - ReplaceVariable i -> newCapacity
   * 79 Weak Mutation 541: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceVariable o -> FREE
   * 80 Weak Mutation 540: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceComparisonOperator == -> !=
   * 81 Weak Mutation 543: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceVariable REMOVED -> FREE
   * 82 Weak Mutation 542: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceVariable o -> REMOVED
   * 83 Weak Mutation 537: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceVariable o -> REMOVED
   * 84 Weak Mutation 536: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceVariable o -> FREE
   * 85 Weak Mutation 539: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - DeleteField: FREELjava/lang/Object;
   * 86 Weak Mutation 538: gnu.trove.map.hash.TCustomHashMap.rehash(I)V:401 - ReplaceVariable FREE -> REMOVED
   * 87 Weak Mutation 29: gnu.trove.map.hash.TCustomHashMap$HashProcedure.getHashCode()I:244 - InsertUnaryOp Negation
   * 88 Weak Mutation 28: gnu.trove.map.hash.TCustomHashMap$HashProcedure.<init>(Lgnu/trove/map/hash/TCustomHashMap;)V:241 - ReplaceConstant - 0 -> 1
   * 89 Weak Mutation 31: gnu.trove.map.hash.TCustomHashMap$HashProcedure.getHashCode()I:244 - InsertUnaryOp -1
   * 90 Weak Mutation 30: gnu.trove.map.hash.TCustomHashMap$HashProcedure.getHashCode()I:244 - InsertUnaryOp +1
   * 91 Weak Mutation 34: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - InsertUnaryOp +1
   * 92 Weak Mutation 35: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - InsertUnaryOp -1
   * 93 Weak Mutation 32: gnu.trove.map.hash.TCustomHashMap$HashProcedure.getHashCode()I:244 - DeleteField: hI
   * 94 Weak Mutation 33: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - InsertUnaryOp Negation
   * 95 Weak Mutation 38: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - DeleteStatement: hash(Ljava/lang/Object;)I
   * 96 Weak Mutation 39: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - ReplaceVariable value -> key
   * 97 Weak Mutation 36: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - DeleteField: hI
   * 98 Weak Mutation 37: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - ReplaceVariable key -> value
   * 99 Weak Mutation 42: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - ReplaceVariable value -> key
   * 100 Weak Mutation 43: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - DeleteStatement: hashCode()I
   * 101 Weak Mutation 40: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - ReplaceComparisonOperator != null -> = null
   * 102 Weak Mutation 41: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - ReplaceConstant - 0 -> 1
   * 103 Weak Mutation 46: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - ReplaceArithmeticOperator + -> -
   * 104 Weak Mutation 47: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - ReplaceArithmeticOperator + -> %
   * 105 Weak Mutation 44: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - ReplaceBitwiseOperator ^ -> &
   * 106 Weak Mutation 45: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - ReplaceBitwiseOperator ^ -> |
   * 107 Weak Mutation 50: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:249 - ReplaceConstant - 1 -> 0
   * 108 Weak Mutation 49: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - ReplaceArithmeticOperator + -> *
   * 109 Weak Mutation 48: gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:248 - ReplaceArithmeticOperator + -> /
   * 110 Weak Mutation 317: gnu.trove.map.hash.TCustomHashMap.hashCode()I:212 - DeleteStatement: getHashCode()I
   * 111 Weak Mutation 316: gnu.trove.map.hash.TCustomHashMap.hashCode()I:211 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z
   * 112 gnu.trove.map.hash.TCustomHashMap.hashCode()I: root-Branch
   * 113 gnu.trove.map.hash.TCustomHashMap$HashProcedure.getHashCode()I: root-Branch
   * 114 gnu.trove.map.hash.TCustomHashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z: I8 Branch 6 IFNONNULL L248 - true
   */

//   @Test
//   public void test7()  throws Throwable  {
//       IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
//       TCustomHashMap<Object, Integer> tCustomHashMap0 = new TCustomHashMap<Object, Integer>((HashingStrategy<? super Object>) identityHashingStrategy0, (-653));
//       tCustomHashMap0.put((Object) identityHashingStrategy0, (Integer) (-653));
//       tCustomHashMap0.put((Object) " vs b=", (Integer) null);
//       int int0 = tCustomHashMap0.hashCode();
//       assertEquals(2, tCustomHashMap0.size());
//       assertEquals((-848649427), int0);
//   }

  //Test case number: 8
  /*
   * 21 covered goals:
   * 1 Weak Mutation 0: gnu.trove.map.hash.TCustomHashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:266 - ReplaceVariable value -> key
   * 2 Weak Mutation 1: gnu.trove.map.hash.TCustomHashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:266 - ReplaceComparisonOperator != null -> = null
   * 3 Weak Mutation 9: gnu.trove.map.hash.TCustomHashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:270 - DeleteField: _otherMapLjava/util/Map;
   * 4 Weak Mutation 10: gnu.trove.map.hash.TCustomHashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:270 - ReplaceVariable key -> value
   * 5 Weak Mutation 11: gnu.trove.map.hash.TCustomHashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:270 - DeleteStatement: get(Ljava/lang/Object;)Ljava/lang/Object;
   * 6 Weak Mutation 584: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:420 - ReplaceVariable key -> FREE
   * 7 Weak Mutation 585: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:420 - ReplaceVariable key -> REMOVED
   * 8 Weak Mutation 586: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:420 - DeleteStatement: index(Ljava/lang/Object;)I
   * 9 gnu.trove.map.hash.TCustomHashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z: I3 Branch 1 IFNONNULL L266 - true
   * 10 Weak Mutation 0: gnu.trove.map.hash.TCustomHashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:266 - ReplaceVariable value -> key
   * 11 Weak Mutation 1: gnu.trove.map.hash.TCustomHashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:266 - ReplaceComparisonOperator != null -> = null
   * 12 Weak Mutation 9: gnu.trove.map.hash.TCustomHashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:270 - DeleteField: _otherMapLjava/util/Map;
   * 13 Weak Mutation 10: gnu.trove.map.hash.TCustomHashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:270 - ReplaceVariable key -> value
   * 14 Weak Mutation 11: gnu.trove.map.hash.TCustomHashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:270 - DeleteStatement: get(Ljava/lang/Object;)Ljava/lang/Object;
   * 15 Weak Mutation 312: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:202 - ReplaceComparisonOperator == -> -2
   * 16 Weak Mutation 315: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:205 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z
   * 17 Weak Mutation 584: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:420 - ReplaceVariable key -> FREE
   * 18 Weak Mutation 585: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:420 - ReplaceVariable key -> REMOVED
   * 19 Weak Mutation 586: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:420 - DeleteStatement: index(Ljava/lang/Object;)I
   * 20 gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 27 IF_ICMPEQ L202 - true
   * 21 gnu.trove.map.hash.TCustomHashMap$EqProcedure.<init>(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
      TCustomHashMap<String, Integer> tCustomHashMap0 = new TCustomHashMap<String, Integer>();
      TCustomHashMap<Integer, String> tCustomHashMap1 = new TCustomHashMap<Integer, String>((HashingStrategy<? super Integer>) identityHashingStrategy0);
      tCustomHashMap1.put((Integer) 0, "(this Collection)");
      tCustomHashMap0.put((String) null, (Integer) 0);
      // Undeclared exception!
      try {
        tCustomHashMap1.equals((Object) tCustomHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 33 covered goals:
   * 1 Weak Mutation 2: gnu.trove.map.hash.TCustomHashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:266 - DeleteField: _otherMapLjava/util/Map;
   * 2 Weak Mutation 3: gnu.trove.map.hash.TCustomHashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:266 - ReplaceVariable key -> value
   * 3 Weak Mutation 4: gnu.trove.map.hash.TCustomHashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:266 - DeleteStatement: mapContainsKey(Ljava/util/Map;Ljava/lang/Object;)I
   * 4 Weak Mutation 815: gnu.trove.map.hash.TCustomHashMap$KeyView.iterator()Ljava/util/Iterator;:783 - DeleteField: this$0Lgnu/trove/map/hash/TCustomHashMap;
   * 5 gnu.trove.map.hash.TCustomHashMap.keySet()Ljava/util/Set;: root-Branch
   * 6 gnu.trove.map.hash.TCustomHashMap$KeyView.iterator()Ljava/util/Iterator;: root-Branch
   * 7 gnu.trove.map.hash.TCustomHashMap$KeyView.<init>(Lgnu/trove/map/hash/TCustomHashMap;)V: root-Branch
   * 8 gnu.trove.map.hash.TCustomHashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z: I3 Branch 1 IFNONNULL L266 - false
   * 9 Weak Mutation 0: gnu.trove.map.hash.TCustomHashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:266 - ReplaceVariable value -> key
   * 10 Weak Mutation 1: gnu.trove.map.hash.TCustomHashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:266 - ReplaceComparisonOperator != null -> = null
   * 11 Weak Mutation 305: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:198 - ReplaceComparisonOperator != -> ==
   * 12 Weak Mutation 304: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:198 - ReplaceVariable other -> REMOVED
   * 13 Weak Mutation 307: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:201 - ReplaceVariable other -> FREE
   * 14 Weak Mutation 309: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:202 - DeleteStatement: size()I
   * 15 Weak Mutation 308: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:201 - ReplaceVariable other -> REMOVED
   * 16 Weak Mutation 310: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:202 - DeleteStatement: size()I
   * 17 Weak Mutation 312: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:202 - ReplaceComparisonOperator == -> -2
   * 18 Weak Mutation 315: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:205 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z
   * 19 Weak Mutation 303: gnu.trove.map.hash.TCustomHashMap.equals(Ljava/lang/Object;)Z:198 - ReplaceVariable other -> FREE
   * 20 Weak Mutation 395: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp IINC 1 i
   * 21 Weak Mutation 394: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp Negation of i
   * 22 Weak Mutation 393: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - ReplaceVariable values -> _set
   * 23 Weak Mutation 392: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - ReplaceVariable values -> keys
   * 24 Weak Mutation 397: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - DeleteStatement: execute(Ljava/lang/Object;Ljava/lang/Object;)Z
   * 25 Weak Mutation 396: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp IINC -1 i
   * 26 Weak Mutation 387: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - ReplaceVariable keys -> values
   * 27 Weak Mutation 391: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp IINC -1 i
   * 28 Weak Mutation 390: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp IINC 1 i
   * 29 Weak Mutation 389: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp Negation of i
   * 30 Weak Mutation 2: gnu.trove.map.hash.TCustomHashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:266 - DeleteField: _otherMapLjava/util/Map;
   * 31 Weak Mutation 3: gnu.trove.map.hash.TCustomHashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:266 - ReplaceVariable key -> value
   * 32 Weak Mutation 4: gnu.trove.map.hash.TCustomHashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:266 - DeleteStatement: mapContainsKey(Ljava/util/Map;Ljava/lang/Object;)I
   * 33 Weak Mutation 815: gnu.trove.map.hash.TCustomHashMap$KeyView.iterator()Ljava/util/Iterator;:783 - DeleteField: this$0Lgnu/trove/map/hash/TCustomHashMap;
   */

  @Test
  public void test9()  throws Throwable  {
      IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
      TCustomHashMap<String, Integer> tCustomHashMap0 = new TCustomHashMap<String, Integer>();
      TCustomHashMap<Integer, String> tCustomHashMap1 = new TCustomHashMap<Integer, String>((HashingStrategy<? super Integer>) identityHashingStrategy0);
      tCustomHashMap1.put((Integer) 0, (String) null);
      tCustomHashMap0.put((String) null, (Integer) 0);
      // Undeclared exception!
      try {
        tCustomHashMap1.equals((Object) tCustomHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 10
  /*
   * 3 covered goals:
   * 1 Weak Mutation 323: gnu.trove.map.hash.TCustomHashMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z:284 - DeleteStatement: forEach(Lgnu/trove/procedure/TObjectProcedure;)Z
   * 2 gnu.trove.map.hash.TCustomHashMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   * 3 Weak Mutation 323: gnu.trove.map.hash.TCustomHashMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z:284 - DeleteStatement: forEach(Lgnu/trove/procedure/TObjectProcedure;)Z
   */

  @Test
  public void test10()  throws Throwable  {
      TCustomHashMap<String, Integer> tCustomHashMap0 = new TCustomHashMap<String, Integer>();
      boolean boolean0 = tCustomHashMap0.forEachKey((TObjectProcedure<? super String>) null);
      assertEquals(23, tCustomHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 11
  /*
   * 52 covered goals:
   * 1 Weak Mutation 343: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - ReplaceVariable set -> values
   * 2 Weak Mutation 351: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - ReplaceVariable values -> set
   * 3 Weak Mutation 350: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - ReplaceComparisonOperator == -> !=
   * 4 Weak Mutation 349: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - DeleteField: REMOVEDLjava/lang/Object;
   * 5 Weak Mutation 348: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - ReplaceVariable REMOVED -> FREE
   * 6 Weak Mutation 347: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - InsertUnaryOp IINC -1 i
   * 7 Weak Mutation 346: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - InsertUnaryOp IINC 1 i
   * 8 Weak Mutation 345: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - InsertUnaryOp Negation of i
   * 9 Weak Mutation 356: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - DeleteStatement: execute(Ljava/lang/Object;)Z
   * 10 Weak Mutation 357: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - ReplaceComparisonOperator != -> ==
   * 11 Weak Mutation 352: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - ReplaceVariable values -> _set
   * 12 Weak Mutation 353: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - InsertUnaryOp Negation of i
   * 13 Weak Mutation 354: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - InsertUnaryOp IINC 1 i
   * 14 Weak Mutation 355: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - InsertUnaryOp IINC -1 i
   * 15 gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I25 Branch 29 IF_ACMPEQ L299 - false
   * 16 gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I30 Branch 30 IF_ACMPEQ L299 - false
   * 17 gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I36 Branch 31 IFNE L299 - true
   * 18 Weak Mutation 343: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - ReplaceVariable set -> values
   * 19 Weak Mutation 342: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - ReplaceComparisonOperator == -> !=
   * 20 Weak Mutation 341: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - DeleteField: FREELjava/lang/Object;
   * 21 Weak Mutation 340: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - ReplaceVariable FREE -> REMOVED
   * 22 Weak Mutation 339: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - InsertUnaryOp IINC -1 i
   * 23 Weak Mutation 338: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - InsertUnaryOp IINC 1 i
   * 24 Weak Mutation 337: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - InsertUnaryOp Negation of i
   * 25 Weak Mutation 351: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - ReplaceVariable values -> set
   * 26 Weak Mutation 350: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - ReplaceComparisonOperator == -> !=
   * 27 Weak Mutation 349: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - DeleteField: REMOVEDLjava/lang/Object;
   * 28 Weak Mutation 348: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - ReplaceVariable REMOVED -> FREE
   * 29 Weak Mutation 347: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - InsertUnaryOp IINC -1 i
   * 30 Weak Mutation 346: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - InsertUnaryOp IINC 1 i
   * 31 Weak Mutation 345: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - InsertUnaryOp Negation of i
   * 32 Weak Mutation 326: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:297 - DeleteField: _set[Ljava/lang/Object;
   * 33 Weak Mutation 327: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:298 - ReplaceVariable values -> set
   * 34 Weak Mutation 324: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - ReplaceVariable _values -> _set
   * 35 Weak Mutation 325: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - DeleteField: _values[Ljava/lang/Object;
   * 36 Weak Mutation 334: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:298 - ReplaceComparisonOperator <= -> -1
   * 37 Weak Mutation 335: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - ReplaceVariable set -> values
   * 38 Weak Mutation 333: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:298 - ReplaceComparisonOperator <= -> <
   * 39 Weak Mutation 330: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:298 - InsertUnaryOp IINC 1 i
   * 40 Weak Mutation 331: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:298 - InsertUnaryOp IINC -1 i
   * 41 Weak Mutation 328: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:298 - ReplaceVariable values -> _set
   * 42 Weak Mutation 329: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:298 - InsertUnaryOp Negation of i
   * 43 Weak Mutation 356: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - DeleteStatement: execute(Ljava/lang/Object;)Z
   * 44 Weak Mutation 357: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - ReplaceComparisonOperator != -> ==
   * 45 Weak Mutation 359: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:305 - ReplaceConstant - 1 -> 0
   * 46 Weak Mutation 352: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - ReplaceVariable values -> _set
   * 47 Weak Mutation 353: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - InsertUnaryOp Negation of i
   * 48 Weak Mutation 354: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - InsertUnaryOp IINC 1 i
   * 49 Weak Mutation 355: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - InsertUnaryOp IINC -1 i
   * 50 gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I18 Branch 28 IFLE L298 - true
   * 51 gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I18 Branch 28 IFLE L298 - false
   * 52 gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I25 Branch 29 IF_ACMPEQ L299 - true
   */

  @Test
  public void test11()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashMap<Integer, String> tCustomHashMap0 = new TCustomHashMap<Integer, String>((HashingStrategy<? super Integer>) identityHashingStrategy0, 246);
      String[] stringArray0 = new String[7];
      tCustomHashMap0.put((Integer) 246, "");
      ToObjectArrayProceedure<String> toObjectArrayProceedure0 = new ToObjectArrayProceedure<String>(stringArray0);
      boolean boolean0 = tCustomHashMap0.forEachValue((TObjectProcedure<? super String>) toObjectArrayProceedure0);
      assertEquals(false, tCustomHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 50 covered goals:
   * 1 Weak Mutation 401: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:341 - ReplaceConstant - 0 -> 1
   * 2 Weak Mutation 402: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:342 - DeleteField: _set[Ljava/lang/Object;
   * 3 Weak Mutation 403: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:343 - ReplaceVariable _values -> _set
   * 4 Weak Mutation 404: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:343 - DeleteField: _values[Ljava/lang/Object;
   * 5 Weak Mutation 405: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - DeleteStatement: tempDisableAutoCompaction()V
   * 6 Weak Mutation 410: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:348 - InsertUnaryOp IINC -1 i
   * 7 Weak Mutation 408: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:348 - InsertUnaryOp Negation of i
   * 8 Weak Mutation 409: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:348 - InsertUnaryOp IINC 1 i
   * 9 Weak Mutation 412: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:348 - ReplaceComparisonOperator <= -> <
   * 10 Weak Mutation 413: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:348 - ReplaceComparisonOperator <= -> -1
   * 11 Weak Mutation 406: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:348 - ReplaceVariable keys -> values
   * 12 Weak Mutation 414: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:349 - ReplaceVariable keys -> values
   * 13 Weak Mutation 417: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:349 - InsertUnaryOp IINC 1 i
   * 14 Weak Mutation 416: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:349 - InsertUnaryOp Negation of i
   * 15 Weak Mutation 419: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:349 - ReplaceVariable FREE -> REMOVED
   * 16 Weak Mutation 418: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:349 - InsertUnaryOp IINC -1 i
   * 17 Weak Mutation 421: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:349 - ReplaceComparisonOperator == -> !=
   * 18 Weak Mutation 420: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:349 - DeleteField: FREELjava/lang/Object;
   * 19 Weak Mutation 447: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:358 - ReplaceConstant - 1 -> 0
   * 20 Weak Mutation 448: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:358 - DeleteStatement: reenableAutoCompaction(Z)V
   * 21 Weak Mutation 453: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:361 - InsertUnaryOp IINC -1 modified
   * 22 Weak Mutation 452: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:361 - InsertUnaryOp IINC 1 modified
   * 23 Weak Mutation 451: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:361 - InsertUnaryOp Negation of modified
   * 24 gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I26 Branch 36 IFLE L348 - true
   * 25 gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I26 Branch 36 IFLE L348 - false
   * 26 gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I33 Branch 37 IF_ACMPEQ L349 - true
   * 27 Weak Mutation 410: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:348 - InsertUnaryOp IINC -1 i
   * 28 Weak Mutation 408: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:348 - InsertUnaryOp Negation of i
   * 29 Weak Mutation 409: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:348 - InsertUnaryOp IINC 1 i
   * 30 Weak Mutation 414: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:349 - ReplaceVariable keys -> values
   * 31 Weak Mutation 412: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:348 - ReplaceComparisonOperator <= -> <
   * 32 Weak Mutation 413: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:348 - ReplaceComparisonOperator <= -> -1
   * 33 Weak Mutation 402: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:342 - DeleteField: _set[Ljava/lang/Object;
   * 34 Weak Mutation 403: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:343 - ReplaceVariable _values -> _set
   * 35 Weak Mutation 401: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:341 - ReplaceConstant - 0 -> 1
   * 36 Weak Mutation 406: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:348 - ReplaceVariable keys -> values
   * 37 Weak Mutation 404: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:343 - DeleteField: _values[Ljava/lang/Object;
   * 38 Weak Mutation 405: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - DeleteStatement: tempDisableAutoCompaction()V
   * 39 Weak Mutation 447: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:358 - ReplaceConstant - 1 -> 0
   * 40 Weak Mutation 417: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:349 - InsertUnaryOp IINC 1 i
   * 41 Weak Mutation 416: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:349 - InsertUnaryOp Negation of i
   * 42 Weak Mutation 419: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:349 - ReplaceVariable FREE -> REMOVED
   * 43 Weak Mutation 418: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:349 - InsertUnaryOp IINC -1 i
   * 44 Weak Mutation 421: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:349 - ReplaceComparisonOperator == -> !=
   * 45 Weak Mutation 420: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:349 - DeleteField: FREELjava/lang/Object;
   * 46 Weak Mutation 453: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:361 - InsertUnaryOp IINC -1 modified
   * 47 Weak Mutation 452: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:361 - InsertUnaryOp IINC 1 modified
   * 48 Weak Mutation 451: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:361 - InsertUnaryOp Negation of modified
   * 49 Weak Mutation 448: gnu.trove.map.hash.TCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:358 - DeleteStatement: reenableAutoCompaction(Z)V
   * 50 gnu.trove.map.hash.TCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;IF)V: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashMap<Integer, Integer> tCustomHashMap0 = new TCustomHashMap<Integer, Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, 1763, (float) 118);
      boolean boolean0 = tCustomHashMap0.retainEntries((TObjectObjectProcedure<? super Integer, ? super Integer>) null);
      assertEquals(false, boolean0);
      assertEquals(17, tCustomHashMap0.capacity());
  }

  //Test case number: 13
  /*
   * 37 covered goals:
   * 1 Weak Mutation 455: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - DeleteField: _values[Ljava/lang/Object;
   * 2 Weak Mutation 454: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - ReplaceVariable _values -> _set
   * 3 Weak Mutation 456: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:372 - DeleteField: _set[Ljava/lang/Object;
   * 4 Weak Mutation 464: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:373 - ReplaceComparisonOperator <= -> -1
   * 5 Weak Mutation 463: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:373 - ReplaceComparisonOperator <= -> <
   * 6 Weak Mutation 461: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:373 - InsertUnaryOp IINC -1 i
   * 7 Weak Mutation 460: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:373 - InsertUnaryOp IINC 1 i
   * 8 Weak Mutation 459: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:373 - InsertUnaryOp Negation of i
   * 9 Weak Mutation 458: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:373 - ReplaceVariable values -> _set
   * 10 Weak Mutation 457: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:373 - ReplaceVariable values -> set
   * 11 Weak Mutation 472: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - ReplaceComparisonOperator == -> !=
   * 12 Weak Mutation 470: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - ReplaceVariable FREE -> REMOVED
   * 13 Weak Mutation 471: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - DeleteField: FREELjava/lang/Object;
   * 14 Weak Mutation 468: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - InsertUnaryOp IINC 1 i
   * 15 Weak Mutation 469: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - InsertUnaryOp IINC -1 i
   * 16 Weak Mutation 467: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - InsertUnaryOp Negation of i
   * 17 Weak Mutation 465: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - ReplaceVariable set -> values
   * 18 gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I18 Branch 40 IFLE L373 - true
   * 19 gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I18 Branch 40 IFLE L373 - false
   * 20 gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I25 Branch 41 IF_ACMPEQ L374 - true
   * 21 Weak Mutation 472: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - ReplaceComparisonOperator == -> !=
   * 22 Weak Mutation 470: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - ReplaceVariable FREE -> REMOVED
   * 23 Weak Mutation 471: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - DeleteField: FREELjava/lang/Object;
   * 24 Weak Mutation 468: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - InsertUnaryOp IINC 1 i
   * 25 Weak Mutation 469: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - InsertUnaryOp IINC -1 i
   * 26 Weak Mutation 467: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - InsertUnaryOp Negation of i
   * 27 Weak Mutation 464: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:373 - ReplaceComparisonOperator <= -> -1
   * 28 Weak Mutation 465: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - ReplaceVariable set -> values
   * 29 Weak Mutation 463: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:373 - ReplaceComparisonOperator <= -> <
   * 30 Weak Mutation 461: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:373 - InsertUnaryOp IINC -1 i
   * 31 Weak Mutation 460: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:373 - InsertUnaryOp IINC 1 i
   * 32 Weak Mutation 459: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:373 - InsertUnaryOp Negation of i
   * 33 Weak Mutation 458: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:373 - ReplaceVariable values -> _set
   * 34 Weak Mutation 457: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:373 - ReplaceVariable values -> set
   * 35 Weak Mutation 456: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:372 - DeleteField: _set[Ljava/lang/Object;
   * 36 Weak Mutation 455: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - DeleteField: _values[Ljava/lang/Object;
   * 37 Weak Mutation 454: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - ReplaceVariable _values -> _set
   */

  @Test
  public void test13()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashMap<Integer, String> tCustomHashMap0 = new TCustomHashMap<Integer, String>((HashingStrategy<? super Integer>) identityHashingStrategy0);
      tCustomHashMap0.transformValues((TObjectFunction<String, String>) null);
      assertEquals(23, tCustomHashMap0.capacity());
  }

  //Test case number: 14
  /*
   * 54 covered goals:
   * 1 Weak Mutation 478: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - ReplaceVariable REMOVED -> FREE
   * 2 Weak Mutation 479: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - DeleteField: REMOVEDLjava/lang/Object;
   * 3 Weak Mutation 476: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - InsertUnaryOp IINC 1 i
   * 4 Weak Mutation 477: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - InsertUnaryOp IINC -1 i
   * 5 Weak Mutation 475: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - InsertUnaryOp Negation of i
   * 6 Weak Mutation 473: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - ReplaceVariable set -> values
   * 7 Weak Mutation 480: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - ReplaceComparisonOperator == -> !=
   * 8 Weak Mutation 489: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:375 - InsertUnaryOp IINC 1 i
   * 9 Weak Mutation 488: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:375 - InsertUnaryOp Negation of i
   * 10 Weak Mutation 491: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:375 - DeleteStatement: execute(Ljava/lang/Object;)Ljava/lang/Object;
   * 11 Weak Mutation 490: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:375 - InsertUnaryOp IINC -1 i
   * 12 Weak Mutation 485: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:375 - InsertUnaryOp IINC -1 i
   * 13 Weak Mutation 484: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:375 - InsertUnaryOp IINC 1 i
   * 14 Weak Mutation 487: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:375 - ReplaceVariable values -> _set
   * 15 Weak Mutation 486: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:375 - ReplaceVariable values -> set
   * 16 Weak Mutation 481: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:375 - ReplaceVariable values -> set
   * 17 Weak Mutation 483: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:375 - InsertUnaryOp Negation of i
   * 18 Weak Mutation 482: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:375 - ReplaceVariable values -> _set
   * 19 gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I25 Branch 41 IF_ACMPEQ L374 - false
   * 20 gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I30 Branch 42 IF_ACMPEQ L374 - false
   * 21 Weak Mutation 472: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - ReplaceComparisonOperator == -> !=
   * 22 Weak Mutation 470: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - ReplaceVariable FREE -> REMOVED
   * 23 Weak Mutation 471: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - DeleteField: FREELjava/lang/Object;
   * 24 Weak Mutation 468: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - InsertUnaryOp IINC 1 i
   * 25 Weak Mutation 469: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - InsertUnaryOp IINC -1 i
   * 26 Weak Mutation 467: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - InsertUnaryOp Negation of i
   * 27 Weak Mutation 464: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:373 - ReplaceComparisonOperator <= -> -1
   * 28 Weak Mutation 465: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - ReplaceVariable set -> values
   * 29 Weak Mutation 461: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:373 - InsertUnaryOp IINC -1 i
   * 30 Weak Mutation 460: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:373 - InsertUnaryOp IINC 1 i
   * 31 Weak Mutation 459: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:373 - InsertUnaryOp Negation of i
   * 32 Weak Mutation 458: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:373 - ReplaceVariable values -> _set
   * 33 Weak Mutation 457: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:373 - ReplaceVariable values -> set
   * 34 Weak Mutation 456: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:372 - DeleteField: _set[Ljava/lang/Object;
   * 35 Weak Mutation 455: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - DeleteField: _values[Ljava/lang/Object;
   * 36 Weak Mutation 454: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - ReplaceVariable _values -> _set
   * 37 Weak Mutation 478: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - ReplaceVariable REMOVED -> FREE
   * 38 Weak Mutation 479: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - DeleteField: REMOVEDLjava/lang/Object;
   * 39 Weak Mutation 476: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - InsertUnaryOp IINC 1 i
   * 40 Weak Mutation 477: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - InsertUnaryOp IINC -1 i
   * 41 Weak Mutation 475: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - InsertUnaryOp Negation of i
   * 42 Weak Mutation 473: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - ReplaceVariable set -> values
   * 43 Weak Mutation 489: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:375 - InsertUnaryOp IINC 1 i
   * 44 Weak Mutation 488: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:375 - InsertUnaryOp Negation of i
   * 45 Weak Mutation 491: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:375 - DeleteStatement: execute(Ljava/lang/Object;)Ljava/lang/Object;
   * 46 Weak Mutation 490: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:375 - InsertUnaryOp IINC -1 i
   * 47 Weak Mutation 485: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:375 - InsertUnaryOp IINC -1 i
   * 48 Weak Mutation 484: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:375 - InsertUnaryOp IINC 1 i
   * 49 Weak Mutation 487: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:375 - ReplaceVariable values -> _set
   * 50 Weak Mutation 486: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:375 - ReplaceVariable values -> set
   * 51 Weak Mutation 481: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:375 - ReplaceVariable values -> set
   * 52 Weak Mutation 480: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:374 - ReplaceComparisonOperator == -> !=
   * 53 Weak Mutation 483: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:375 - InsertUnaryOp Negation of i
   * 54 Weak Mutation 482: gnu.trove.map.hash.TCustomHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:375 - ReplaceVariable values -> _set
   */

  @Test
  public void test14()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashMap<Object, Integer> tCustomHashMap0 = new TCustomHashMap<Object, Integer>((HashingStrategy<? super Object>) identityHashingStrategy0, (-653));
      tCustomHashMap0.put((Object) identityHashingStrategy0, (Integer) (-653));
      // Undeclared exception!
      try {
        tCustomHashMap0.transformValues((TObjectFunction<Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 15
  /*
   * 9 covered goals:
   * 1 Weak Mutation 587: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - InsertUnaryOp Negation of index
   * 2 Weak Mutation 588: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - InsertUnaryOp IINC 1 index
   * 3 Weak Mutation 589: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - InsertUnaryOp IINC -1 index
   * 4 Weak Mutation 592: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - ReplaceComparisonOperator < -> -2
   * 5 gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;: I9 Branch 47 IFLT L421 - true
   * 6 Weak Mutation 587: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - InsertUnaryOp Negation of index
   * 7 Weak Mutation 588: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - InsertUnaryOp IINC 1 index
   * 8 Weak Mutation 589: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - InsertUnaryOp IINC -1 index
   * 9 Weak Mutation 592: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - ReplaceComparisonOperator < -> -2
   */

  @Test
  public void test15()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashMap<Integer, Integer> tCustomHashMap0 = new TCustomHashMap<Integer, Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, (-1218));
      tCustomHashMap0.get((Object) (-1218));
      assertEquals(3, tCustomHashMap0.capacity());
  }

  //Test case number: 16
  /*
   * 32 covered goals:
   * 1 Weak Mutation 590: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - ReplaceComparisonOperator < -> !=
   * 2 Weak Mutation 593: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - DeleteField: strategyLgnu/trove/strategy/HashingStrategy;
   * 3 Weak Mutation 595: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - InsertUnaryOp Negation of index
   * 4 Weak Mutation 594: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - DeleteField: _set[Ljava/lang/Object;
   * 5 Weak Mutation 597: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - InsertUnaryOp IINC -1 index
   * 6 Weak Mutation 596: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - InsertUnaryOp IINC 1 index
   * 7 Weak Mutation 599: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - ReplaceVariable key -> REMOVED
   * 8 Weak Mutation 598: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - ReplaceVariable key -> FREE
   * 9 Weak Mutation 601: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - ReplaceComparisonOperator != -> ==
   * 10 Weak Mutation 600: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - DeleteStatement: equals(Ljava/lang/Object;Ljava/lang/Object;)Z
   * 11 Weak Mutation 603: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - DeleteField: _values[Ljava/lang/Object;
   * 12 Weak Mutation 602: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - ReplaceVariable _values -> _set
   * 13 Weak Mutation 605: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp IINC 1 index
   * 14 Weak Mutation 604: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp Negation of index
   * 15 Weak Mutation 606: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp IINC -1 index
   * 16 gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;: I9 Branch 47 IFLT L421 - false
   * 17 gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;: I18 Branch 48 IFNE L421 - true
   * 18 Weak Mutation 590: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - ReplaceComparisonOperator < -> !=
   * 19 Weak Mutation 593: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - DeleteField: strategyLgnu/trove/strategy/HashingStrategy;
   * 20 Weak Mutation 595: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - InsertUnaryOp Negation of index
   * 21 Weak Mutation 594: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - DeleteField: _set[Ljava/lang/Object;
   * 22 Weak Mutation 597: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - InsertUnaryOp IINC -1 index
   * 23 Weak Mutation 596: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - InsertUnaryOp IINC 1 index
   * 24 Weak Mutation 599: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - ReplaceVariable key -> REMOVED
   * 25 Weak Mutation 598: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - ReplaceVariable key -> FREE
   * 26 Weak Mutation 601: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - ReplaceComparisonOperator != -> ==
   * 27 Weak Mutation 600: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - DeleteStatement: equals(Ljava/lang/Object;Ljava/lang/Object;)Z
   * 28 Weak Mutation 603: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - DeleteField: _values[Ljava/lang/Object;
   * 29 Weak Mutation 602: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - ReplaceVariable _values -> _set
   * 30 Weak Mutation 605: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp IINC 1 index
   * 31 Weak Mutation 604: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp Negation of index
   * 32 Weak Mutation 606: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp IINC -1 index
   */

  @Test
  public void test16()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashMap<Integer, Integer> tCustomHashMap0 = new TCustomHashMap<Integer, Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, 123);
      tCustomHashMap0.put((Integer) 123, (Integer) 123);
      tCustomHashMap0.get((Object) 123);
      assertEquals("{123=123}", tCustomHashMap0.toString());
      assertEquals(false, tCustomHashMap0.isEmpty());
  }

  //Test case number: 17
  /*
   * 22 covered goals:
   * 1 Weak Mutation 591: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - ReplaceComparisonOperator < -> <=
   * 2 Weak Mutation 584: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:420 - ReplaceVariable key -> FREE
   * 3 Weak Mutation 585: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:420 - ReplaceVariable key -> REMOVED
   * 4 Weak Mutation 586: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:420 - DeleteStatement: index(Ljava/lang/Object;)I
   * 5 Weak Mutation 587: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - InsertUnaryOp Negation of index
   * 6 Weak Mutation 588: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - InsertUnaryOp IINC 1 index
   * 7 Weak Mutation 589: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - InsertUnaryOp IINC -1 index
   * 8 Weak Mutation 593: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - DeleteField: strategyLgnu/trove/strategy/HashingStrategy;
   * 9 Weak Mutation 595: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - InsertUnaryOp Negation of index
   * 10 Weak Mutation 594: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - DeleteField: _set[Ljava/lang/Object;
   * 11 Weak Mutation 597: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - InsertUnaryOp IINC -1 index
   * 12 Weak Mutation 596: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - InsertUnaryOp IINC 1 index
   * 13 Weak Mutation 599: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - ReplaceVariable key -> REMOVED
   * 14 Weak Mutation 598: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - ReplaceVariable key -> FREE
   * 15 Weak Mutation 601: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - ReplaceComparisonOperator != -> ==
   * 16 Weak Mutation 600: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - DeleteStatement: equals(Ljava/lang/Object;Ljava/lang/Object;)Z
   * 17 Weak Mutation 603: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - DeleteField: _values[Ljava/lang/Object;
   * 18 Weak Mutation 602: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - ReplaceVariable _values -> _set
   * 19 Weak Mutation 605: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp IINC 1 index
   * 20 Weak Mutation 604: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp Negation of index
   * 21 Weak Mutation 606: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp IINC -1 index
   * 22 Weak Mutation 591: gnu.trove.map.hash.TCustomHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:421 - ReplaceComparisonOperator < -> <=
   */

  @Test
  public void test17()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashMap<Integer, Integer> tCustomHashMap0 = new TCustomHashMap<Integer, Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, (-1218));
      tCustomHashMap0.put((Integer) (-1218), (Integer) (-1218));
      tCustomHashMap0.get((Object) (-1218));
      assertEquals(false, tCustomHashMap0.isEmpty());
      assertEquals("{-1218=-1218}", tCustomHashMap0.toString());
  }

  //Test case number: 18
  /*
   * 5 covered goals:
   * 1 Weak Mutation 610: gnu.trove.map.hash.TCustomHashMap.clear()V:430 - ReplaceComparisonOperator != -> -1
   * 2 Weak Mutation 607: gnu.trove.map.hash.TCustomHashMap.clear()V:430 - DeleteStatement: size()I
   * 3 gnu.trove.map.hash.TCustomHashMap.clear()V: I4 Branch 49 IFNE L430 - false
   * 4 Weak Mutation 610: gnu.trove.map.hash.TCustomHashMap.clear()V:430 - ReplaceComparisonOperator != -> -1
   * 5 Weak Mutation 607: gnu.trove.map.hash.TCustomHashMap.clear()V:430 - DeleteStatement: size()I
   */

  @Test
  public void test18()  throws Throwable  {
      TCustomHashMap<String, Integer> tCustomHashMap0 = new TCustomHashMap<String, Integer>();
      tCustomHashMap0.clear();
      assertEquals(23, tCustomHashMap0.capacity());
  }

  //Test case number: 19
  /*
   * 27 covered goals:
   * 1 Weak Mutation 608: gnu.trove.map.hash.TCustomHashMap.clear()V:430 - ReplaceComparisonOperator != -> <
   * 2 Weak Mutation 611: gnu.trove.map.hash.TCustomHashMap.clear()V:436 - DeleteField: _set[Ljava/lang/Object;
   * 3 Weak Mutation 614: gnu.trove.map.hash.TCustomHashMap.clear()V:436 - ReplaceVariable FREE -> REMOVED
   * 4 Weak Mutation 615: gnu.trove.map.hash.TCustomHashMap.clear()V:436 - DeleteField: FREELjava/lang/Object;
   * 5 Weak Mutation 612: gnu.trove.map.hash.TCustomHashMap.clear()V:436 - ReplaceConstant - 0 -> 1
   * 6 Weak Mutation 613: gnu.trove.map.hash.TCustomHashMap.clear()V:436 - DeleteField: _set[Ljava/lang/Object;
   * 7 Weak Mutation 616: gnu.trove.map.hash.TCustomHashMap.clear()V:436 - DeleteStatement: fill([Ljava/lang/Object;IILjava/lang/Object;)V
   * 8 Weak Mutation 618: gnu.trove.map.hash.TCustomHashMap.clear()V:437 - DeleteField: _values[Ljava/lang/Object;
   * 9 Weak Mutation 619: gnu.trove.map.hash.TCustomHashMap.clear()V:437 - ReplaceConstant - 0 -> 1
   * 10 Weak Mutation 617: gnu.trove.map.hash.TCustomHashMap.clear()V:437 - ReplaceVariable _values -> _set
   * 11 Weak Mutation 622: gnu.trove.map.hash.TCustomHashMap.clear()V:437 - DeleteStatement: fill([Ljava/lang/Object;IILjava/lang/Object;)V
   * 12 Weak Mutation 620: gnu.trove.map.hash.TCustomHashMap.clear()V:437 - ReplaceVariable _values -> _set
   * 13 Weak Mutation 621: gnu.trove.map.hash.TCustomHashMap.clear()V:437 - DeleteField: _values[Ljava/lang/Object;
   * 14 gnu.trove.map.hash.TCustomHashMap.clear()V: I4 Branch 49 IFNE L430 - true
   * 15 Weak Mutation 611: gnu.trove.map.hash.TCustomHashMap.clear()V:436 - DeleteField: _set[Ljava/lang/Object;
   * 16 Weak Mutation 608: gnu.trove.map.hash.TCustomHashMap.clear()V:430 - ReplaceComparisonOperator != -> <
   * 17 Weak Mutation 614: gnu.trove.map.hash.TCustomHashMap.clear()V:436 - ReplaceVariable FREE -> REMOVED
   * 18 Weak Mutation 615: gnu.trove.map.hash.TCustomHashMap.clear()V:436 - DeleteField: FREELjava/lang/Object;
   * 19 Weak Mutation 612: gnu.trove.map.hash.TCustomHashMap.clear()V:436 - ReplaceConstant - 0 -> 1
   * 20 Weak Mutation 613: gnu.trove.map.hash.TCustomHashMap.clear()V:436 - DeleteField: _set[Ljava/lang/Object;
   * 21 Weak Mutation 618: gnu.trove.map.hash.TCustomHashMap.clear()V:437 - DeleteField: _values[Ljava/lang/Object;
   * 22 Weak Mutation 619: gnu.trove.map.hash.TCustomHashMap.clear()V:437 - ReplaceConstant - 0 -> 1
   * 23 Weak Mutation 616: gnu.trove.map.hash.TCustomHashMap.clear()V:436 - DeleteStatement: fill([Ljava/lang/Object;IILjava/lang/Object;)V
   * 24 Weak Mutation 617: gnu.trove.map.hash.TCustomHashMap.clear()V:437 - ReplaceVariable _values -> _set
   * 25 Weak Mutation 622: gnu.trove.map.hash.TCustomHashMap.clear()V:437 - DeleteStatement: fill([Ljava/lang/Object;IILjava/lang/Object;)V
   * 26 Weak Mutation 620: gnu.trove.map.hash.TCustomHashMap.clear()V:437 - ReplaceVariable _values -> _set
   * 27 Weak Mutation 621: gnu.trove.map.hash.TCustomHashMap.clear()V:437 - DeleteField: _values[Ljava/lang/Object;
   */

  @Test
  public void test19()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashMap<Integer, Integer> tCustomHashMap0 = new TCustomHashMap<Integer, Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, (-1218));
      tCustomHashMap0.put((Integer) (-1218), (Integer) (-1218));
      assertEquals(1, tCustomHashMap0.size());
      
      tCustomHashMap0.clear();
      assertEquals("{}", tCustomHashMap0.toString());
  }

  //Test case number: 20
  /*
   * 32 covered goals:
   * 1 Weak Mutation 609: gnu.trove.map.hash.TCustomHashMap.clear()V:430 - ReplaceComparisonOperator != -> >
   * 2 Weak Mutation 649: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:465 - InsertUnaryOp IINC -1 index
   * 3 Weak Mutation 648: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:465 - InsertUnaryOp IINC 1 index
   * 4 Weak Mutation 645: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:465 - ReplaceVariable _values -> _set
   * 5 Weak Mutation 647: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:465 - InsertUnaryOp Negation of index
   * 6 Weak Mutation 646: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:465 - DeleteField: _values[Ljava/lang/Object;
   * 7 Weak Mutation 652: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:466 - InsertUnaryOp IINC -1 index
   * 8 Weak Mutation 651: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:466 - InsertUnaryOp IINC 1 index
   * 9 Weak Mutation 650: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:466 - InsertUnaryOp Negation of index
   * 10 gnu.trove.map.hash.TCustomHashMap.removeAt(I)V: root-Branch
   * 11 Weak Mutation 611: gnu.trove.map.hash.TCustomHashMap.clear()V:436 - DeleteField: _set[Ljava/lang/Object;
   * 12 Weak Mutation 614: gnu.trove.map.hash.TCustomHashMap.clear()V:436 - ReplaceVariable FREE -> REMOVED
   * 13 Weak Mutation 615: gnu.trove.map.hash.TCustomHashMap.clear()V:436 - DeleteField: FREELjava/lang/Object;
   * 14 Weak Mutation 612: gnu.trove.map.hash.TCustomHashMap.clear()V:436 - ReplaceConstant - 0 -> 1
   * 15 Weak Mutation 613: gnu.trove.map.hash.TCustomHashMap.clear()V:436 - DeleteField: _set[Ljava/lang/Object;
   * 16 Weak Mutation 618: gnu.trove.map.hash.TCustomHashMap.clear()V:437 - DeleteField: _values[Ljava/lang/Object;
   * 17 Weak Mutation 619: gnu.trove.map.hash.TCustomHashMap.clear()V:437 - ReplaceConstant - 0 -> 1
   * 18 Weak Mutation 616: gnu.trove.map.hash.TCustomHashMap.clear()V:436 - DeleteStatement: fill([Ljava/lang/Object;IILjava/lang/Object;)V
   * 19 Weak Mutation 617: gnu.trove.map.hash.TCustomHashMap.clear()V:437 - ReplaceVariable _values -> _set
   * 20 Weak Mutation 622: gnu.trove.map.hash.TCustomHashMap.clear()V:437 - DeleteStatement: fill([Ljava/lang/Object;IILjava/lang/Object;)V
   * 21 Weak Mutation 620: gnu.trove.map.hash.TCustomHashMap.clear()V:437 - ReplaceVariable _values -> _set
   * 22 Weak Mutation 621: gnu.trove.map.hash.TCustomHashMap.clear()V:437 - DeleteField: _values[Ljava/lang/Object;
   * 23 Weak Mutation 607: gnu.trove.map.hash.TCustomHashMap.clear()V:430 - DeleteStatement: size()I
   * 24 Weak Mutation 609: gnu.trove.map.hash.TCustomHashMap.clear()V:430 - ReplaceComparisonOperator != -> >
   * 25 Weak Mutation 652: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:466 - InsertUnaryOp IINC -1 index
   * 26 Weak Mutation 649: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:465 - InsertUnaryOp IINC -1 index
   * 27 Weak Mutation 648: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:465 - InsertUnaryOp IINC 1 index
   * 28 Weak Mutation 651: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:466 - InsertUnaryOp IINC 1 index
   * 29 Weak Mutation 650: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:466 - InsertUnaryOp Negation of index
   * 30 Weak Mutation 645: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:465 - ReplaceVariable _values -> _set
   * 31 Weak Mutation 647: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:465 - InsertUnaryOp Negation of index
   * 32 Weak Mutation 646: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:465 - DeleteField: _values[Ljava/lang/Object;
   */

  @Test
  public void test20()  throws Throwable  {
      TCustomHashMap<String, Integer> tCustomHashMap0 = new TCustomHashMap<String, Integer>();
      tCustomHashMap0.removeAt(0);
      assertEquals(false, tCustomHashMap0.isEmpty());
      
      tCustomHashMap0.clear();
      assertEquals("{}", tCustomHashMap0.toString());
  }

  //Test case number: 21
  /*
   * 23 covered goals:
   * 1 Weak Mutation 625: gnu.trove.map.hash.TCustomHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:450 - ReplaceVariable key -> prev
   * 2 Weak Mutation 644: gnu.trove.map.hash.TCustomHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:455 - ReplaceVariable prev -> key
   * 3 Weak Mutation 623: gnu.trove.map.hash.TCustomHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:450 - ReplaceVariable key -> FREE
   * 4 Weak Mutation 627: gnu.trove.map.hash.TCustomHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:451 - InsertUnaryOp Negation of index
   * 5 Weak Mutation 626: gnu.trove.map.hash.TCustomHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:450 - DeleteStatement: index(Ljava/lang/Object;)I
   * 6 Weak Mutation 624: gnu.trove.map.hash.TCustomHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:450 - ReplaceVariable key -> REMOVED
   * 7 Weak Mutation 629: gnu.trove.map.hash.TCustomHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:451 - InsertUnaryOp IINC -1 index
   * 8 Weak Mutation 628: gnu.trove.map.hash.TCustomHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:451 - InsertUnaryOp IINC 1 index
   * 9 Weak Mutation 632: gnu.trove.map.hash.TCustomHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:451 - ReplaceComparisonOperator < -> -2
   * 10 Weak Mutation 643: gnu.trove.map.hash.TCustomHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:455 - ReplaceVariable prev -> REMOVED
   * 11 Weak Mutation 642: gnu.trove.map.hash.TCustomHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:455 - ReplaceVariable prev -> FREE
   * 12 Weak Mutation 623: gnu.trove.map.hash.TCustomHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:450 - ReplaceVariable key -> FREE
   * 13 Weak Mutation 627: gnu.trove.map.hash.TCustomHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:451 - InsertUnaryOp Negation of index
   * 14 Weak Mutation 626: gnu.trove.map.hash.TCustomHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:450 - DeleteStatement: index(Ljava/lang/Object;)I
   * 15 Weak Mutation 625: gnu.trove.map.hash.TCustomHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:450 - ReplaceVariable key -> prev
   * 16 Weak Mutation 624: gnu.trove.map.hash.TCustomHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:450 - ReplaceVariable key -> REMOVED
   * 17 Weak Mutation 629: gnu.trove.map.hash.TCustomHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:451 - InsertUnaryOp IINC -1 index
   * 18 Weak Mutation 628: gnu.trove.map.hash.TCustomHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:451 - InsertUnaryOp IINC 1 index
   * 19 Weak Mutation 632: gnu.trove.map.hash.TCustomHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:451 - ReplaceComparisonOperator < -> -2
   * 20 Weak Mutation 644: gnu.trove.map.hash.TCustomHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:455 - ReplaceVariable prev -> key
   * 21 Weak Mutation 643: gnu.trove.map.hash.TCustomHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:455 - ReplaceVariable prev -> REMOVED
   * 22 Weak Mutation 642: gnu.trove.map.hash.TCustomHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:455 - ReplaceVariable prev -> FREE
   * 23 gnu.trove.map.hash.TCustomHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;: I13 Branch 50 IFLT L451 - true
   */

  @Test
  public void test21()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashMap<Object, Object> tCustomHashMap0 = new TCustomHashMap<Object, Object>((HashingStrategy<? super Object>) identityHashingStrategy0, 118, (-395.3564F));
      Object object0 = tCustomHashMap0.remove((Object) "");
      assertEquals(true, tCustomHashMap0.isEmpty());
      assertNull(object0);
      assertEquals(0, tCustomHashMap0.size());
  }

  //Test case number: 22
  /*
   * 147 covered goals:
   * 1 Weak Mutation 687: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp Negation of i
   * 2 Weak Mutation 686: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable vals -> _set
   * 3 Weak Mutation 685: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable vals -> set
   * 4 Weak Mutation 684: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable val -> REMOVED
   * 5 Weak Mutation 683: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable val -> FREE
   * 6 Weak Mutation 682: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceComparisonOperator == -> !=
   * 7 Weak Mutation 681: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - DeleteField: REMOVEDLjava/lang/Object;
   * 8 Weak Mutation 680: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable REMOVED -> FREE
   * 9 Weak Mutation 679: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp IINC -1 i
   * 10 Weak Mutation 678: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp IINC 1 i
   * 11 Weak Mutation 677: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp Negation of i
   * 12 Weak Mutation 676: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable set -> vals
   * 13 Weak Mutation 690: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceComparisonOperator != -> ==
   * 14 Weak Mutation 688: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp IINC 1 i
   * 15 Weak Mutation 689: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp IINC -1 i
   * 16 Weak Mutation 745: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:550 - DeleteStatement: next()Ljava/lang/Object;
   * 17 Weak Mutation 747: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:551 - DeleteStatement: getValue()Ljava/lang/Object;
   * 18 Weak Mutation 746: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:551 - DeleteStatement: getKey()Ljava/lang/Object;
   * 19 Weak Mutation 748: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:551 - DeleteStatement: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   * 20 Weak Mutation 956: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - DeleteField: this$0Lgnu/trove/map/hash/TCustomHashMap;
   * 21 Weak Mutation 957: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - DeleteField: _set[Ljava/lang/Object;
   * 22 Weak Mutation 958: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - InsertUnaryOp Negation of index
   * 23 Weak Mutation 959: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - InsertUnaryOp IINC 1 index
   * 24 Weak Mutation 953: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - DeleteField: this$1Lgnu/trove/map/hash/TCustomHashMap$EntryView;
   * 25 Weak Mutation 954: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - DeleteField: this$0Lgnu/trove/map/hash/TCustomHashMap;
   * 26 Weak Mutation 955: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - DeleteField: this$1Lgnu/trove/map/hash/TCustomHashMap$EntryView;
   * 27 Weak Mutation 969: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - InsertUnaryOp IINC -1 index
   * 28 Weak Mutation 968: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - InsertUnaryOp IINC 1 index
   * 29 Weak Mutation 963: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - DeleteField: _values[Ljava/lang/Object;
   * 30 Weak Mutation 962: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - DeleteField: this$0Lgnu/trove/map/hash/TCustomHashMap;
   * 31 Weak Mutation 961: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - DeleteField: this$1Lgnu/trove/map/hash/TCustomHashMap$EntryView;
   * 32 Weak Mutation 960: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - InsertUnaryOp IINC -1 index
   * 33 Weak Mutation 967: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - InsertUnaryOp Negation of index
   * 34 Weak Mutation 966: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - InsertUnaryOp IINC -1 index
   * 35 Weak Mutation 965: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - InsertUnaryOp IINC 1 index
   * 36 Weak Mutation 964: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - InsertUnaryOp Negation of index
   * 37 Weak Mutation 879: gnu.trove.map.hash.TCustomHashMap$Entry.<init>(Lgnu/trove/map/hash/TCustomHashMap;Ljava/lang/Object;Ljava/lang/Object;I)V:805 - ReplaceVariable key -> value
   * 38 Weak Mutation 880: gnu.trove.map.hash.TCustomHashMap$Entry.<init>(Lgnu/trove/map/hash/TCustomHashMap;Ljava/lang/Object;Ljava/lang/Object;I)V:806 - ReplaceVariable value -> key
   * 39 Weak Mutation 881: gnu.trove.map.hash.TCustomHashMap$Entry.<init>(Lgnu/trove/map/hash/TCustomHashMap;Ljava/lang/Object;Ljava/lang/Object;I)V:807 - InsertUnaryOp Negation of index
   * 40 Weak Mutation 883: gnu.trove.map.hash.TCustomHashMap$Entry.<init>(Lgnu/trove/map/hash/TCustomHashMap;Ljava/lang/Object;Ljava/lang/Object;I)V:807 - InsertUnaryOp IINC -1 index
   * 41 Weak Mutation 882: gnu.trove.map.hash.TCustomHashMap$Entry.<init>(Lgnu/trove/map/hash/TCustomHashMap;Ljava/lang/Object;Ljava/lang/Object;I)V:807 - InsertUnaryOp IINC 1 index
   * 42 Weak Mutation 884: gnu.trove.map.hash.TCustomHashMap$Entry.getKey()Ljava/lang/Object;:812 - DeleteField: keyLjava/lang/Object;
   * 43 Weak Mutation 885: gnu.trove.map.hash.TCustomHashMap$Entry.getValue()Ljava/lang/Object;:817 - DeleteField: valLjava/lang/Object;
   * 44 gnu.trove.map.hash.TCustomHashMap$Entry.getValue()Ljava/lang/Object;: root-Branch
   * 45 gnu.trove.map.hash.TCustomHashMap$Entry.getKey()Ljava/lang/Object;: root-Branch
   * 46 gnu.trove.map.hash.TCustomHashMap$Entry.<init>(Lgnu/trove/map/hash/TCustomHashMap;Ljava/lang/Object;Ljava/lang/Object;I)V: root-Branch
   * 47 gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;: root-Branch
   * 48 gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z: I30 Branch 53 IF_ACMPEQ L514 - false
   * 49 gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z: I35 Branch 54 IF_ACMPEQ L514 - false
   * 50 gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z: I40 Branch 55 IF_ACMPNE L514 - true
   * 51 gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V: I15 Branch 61 IFEQ L550 - false
   * 52 Weak Mutation 221: gnu.trove.map.hash.TCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;Lgnu/trove/map/hash/TCustomHashMap;)V:118 - ReplaceVariable map -> this
   * 53 Weak Mutation 222: gnu.trove.map.hash.TCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;Lgnu/trove/map/hash/TCustomHashMap;)V:118 - DeleteStatement: putAll(Ljava/util/Map;)V
   * 54 Weak Mutation 250: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:163 - InsertUnaryOp IINC -1 index
   * 55 Weak Mutation 251: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:163 - ReplaceComparisonOperator >= -> ==
   * 56 Weak Mutation 248: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:163 - InsertUnaryOp Negation of index
   * 57 Weak Mutation 249: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:163 - InsertUnaryOp IINC 1 index
   * 58 Weak Mutation 246: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - ReplaceVariable key -> REMOVED
   * 59 Weak Mutation 247: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 60 Weak Mutation 244: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - ReplaceVariable key -> FREE
   * 61 Weak Mutation 245: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - ReplaceVariable key -> value
   * 62 Weak Mutation 266: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:166 - ReplaceVariable value -> key
   * 63 Weak Mutation 267: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:166 - InsertUnaryOp Negation of index
   * 64 Weak Mutation 264: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:166 - ReplaceVariable value -> FREE
   * 65 Weak Mutation 265: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:166 - ReplaceVariable value -> REMOVED
   * 66 Weak Mutation 268: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:166 - InsertUnaryOp IINC 1 index
   * 67 Weak Mutation 269: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:166 - InsertUnaryOp IINC -1 index
   * 68 Weak Mutation 665: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:513 - ReplaceComparisonOperator <= -> <
   * 69 Weak Mutation 744: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:550 - ReplaceComparisonOperator == -> !=
   * 70 Weak Mutation 739: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:548 - DeleteStatement: size()I
   * 71 Weak Mutation 743: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:550 - DeleteStatement: hasNext()Z
   * 72 Weak Mutation 742: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:550 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 73 Weak Mutation 741: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:550 - DeleteStatement: entrySet()Ljava/util/Set;
   * 74 Weak Mutation 740: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:548 - DeleteStatement: ensureCapacity(I)V
   * 75 Weak Mutation 823: gnu.trove.map.hash.TCustomHashMap$EntryView.iterator()Ljava/util/Iterator;:611 - DeleteField: this$0Lgnu/trove/map/hash/TCustomHashMap;
   * 76 Weak Mutation 221: gnu.trove.map.hash.TCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;Lgnu/trove/map/hash/TCustomHashMap;)V:118 - ReplaceVariable map -> this
   * 77 Weak Mutation 222: gnu.trove.map.hash.TCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;Lgnu/trove/map/hash/TCustomHashMap;)V:118 - DeleteStatement: putAll(Ljava/util/Map;)V
   * 78 Weak Mutation 251: gnu.trove.map.hash.TCustomHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:163 - ReplaceComparisonOperator >= -> ==
   * 79 Weak Mutation 687: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp Negation of i
   * 80 Weak Mutation 686: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable vals -> _set
   * 81 Weak Mutation 685: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable vals -> set
   * 82 Weak Mutation 684: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable val -> REMOVED
   * 83 Weak Mutation 683: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable val -> FREE
   * 84 Weak Mutation 682: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceComparisonOperator == -> !=
   * 85 Weak Mutation 681: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - DeleteField: REMOVEDLjava/lang/Object;
   * 86 Weak Mutation 680: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable REMOVED -> FREE
   * 87 Weak Mutation 679: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp IINC -1 i
   * 88 Weak Mutation 678: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp IINC 1 i
   * 89 Weak Mutation 677: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp Negation of i
   * 90 Weak Mutation 676: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable set -> vals
   * 91 Weak Mutation 674: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceComparisonOperator == -> !=
   * 92 Weak Mutation 673: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - DeleteField: FREELjava/lang/Object;
   * 93 Weak Mutation 672: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable FREE -> REMOVED
   * 94 Weak Mutation 690: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceComparisonOperator != -> ==
   * 95 Weak Mutation 688: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp IINC 1 i
   * 96 Weak Mutation 689: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp IINC -1 i
   * 97 Weak Mutation 653: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:507 - DeleteField: _set[Ljava/lang/Object;
   * 98 Weak Mutation 655: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:508 - DeleteField: _values[Ljava/lang/Object;
   * 99 Weak Mutation 654: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:508 - ReplaceVariable _values -> _set
   * 100 Weak Mutation 668: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable set -> vals
   * 101 Weak Mutation 669: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp Negation of i
   * 102 Weak Mutation 670: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp IINC 1 i
   * 103 Weak Mutation 671: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp IINC -1 i
   * 104 Weak Mutation 665: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:513 - ReplaceComparisonOperator <= -> <
   * 105 Weak Mutation 666: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:513 - ReplaceComparisonOperator <= -> -1
   * 106 Weak Mutation 660: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:513 - ReplaceVariable vals -> _set
   * 107 Weak Mutation 661: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:513 - InsertUnaryOp Negation of i
   * 108 Weak Mutation 662: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:513 - InsertUnaryOp IINC 1 i
   * 109 Weak Mutation 663: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:513 - InsertUnaryOp IINC -1 i
   * 110 Weak Mutation 656: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:512 - ReplaceVariable val -> FREE
   * 111 Weak Mutation 657: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:512 - ReplaceVariable val -> REMOVED
   * 112 Weak Mutation 658: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:512 - ReplaceComparisonOperator != -> ==
   * 113 Weak Mutation 659: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:513 - ReplaceVariable vals -> set
   * 114 Weak Mutation 747: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:551 - DeleteStatement: getValue()Ljava/lang/Object;
   * 115 Weak Mutation 746: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:551 - DeleteStatement: getKey()Ljava/lang/Object;
   * 116 Weak Mutation 745: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:550 - DeleteStatement: next()Ljava/lang/Object;
   * 117 Weak Mutation 748: gnu.trove.map.hash.TCustomHashMap.putAll(Ljava/util/Map;)V:551 - DeleteStatement: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   * 118 Weak Mutation 735: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:527 - ReplaceConstant - 0 -> 1
   * 119 Weak Mutation 881: gnu.trove.map.hash.TCustomHashMap$Entry.<init>(Lgnu/trove/map/hash/TCustomHashMap;Ljava/lang/Object;Ljava/lang/Object;I)V:807 - InsertUnaryOp Negation of index
   * 120 Weak Mutation 880: gnu.trove.map.hash.TCustomHashMap$Entry.<init>(Lgnu/trove/map/hash/TCustomHashMap;Ljava/lang/Object;Ljava/lang/Object;I)V:806 - ReplaceVariable value -> key
   * 121 Weak Mutation 883: gnu.trove.map.hash.TCustomHashMap$Entry.<init>(Lgnu/trove/map/hash/TCustomHashMap;Ljava/lang/Object;Ljava/lang/Object;I)V:807 - InsertUnaryOp IINC -1 index
   * 122 Weak Mutation 882: gnu.trove.map.hash.TCustomHashMap$Entry.<init>(Lgnu/trove/map/hash/TCustomHashMap;Ljava/lang/Object;Ljava/lang/Object;I)V:807 - InsertUnaryOp IINC 1 index
   * 123 Weak Mutation 885: gnu.trove.map.hash.TCustomHashMap$Entry.getValue()Ljava/lang/Object;:817 - DeleteField: valLjava/lang/Object;
   * 124 Weak Mutation 884: gnu.trove.map.hash.TCustomHashMap$Entry.getKey()Ljava/lang/Object;:812 - DeleteField: keyLjava/lang/Object;
   * 125 Weak Mutation 879: gnu.trove.map.hash.TCustomHashMap$Entry.<init>(Lgnu/trove/map/hash/TCustomHashMap;Ljava/lang/Object;Ljava/lang/Object;I)V:805 - ReplaceVariable key -> value
   * 126 Weak Mutation 956: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - DeleteField: this$0Lgnu/trove/map/hash/TCustomHashMap;
   * 127 Weak Mutation 957: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - DeleteField: _set[Ljava/lang/Object;
   * 128 Weak Mutation 958: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - InsertUnaryOp Negation of index
   * 129 Weak Mutation 959: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - InsertUnaryOp IINC 1 index
   * 130 Weak Mutation 953: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - DeleteField: this$1Lgnu/trove/map/hash/TCustomHashMap$EntryView;
   * 131 Weak Mutation 954: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - DeleteField: this$0Lgnu/trove/map/hash/TCustomHashMap;
   * 132 Weak Mutation 955: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - DeleteField: this$1Lgnu/trove/map/hash/TCustomHashMap$EntryView;
   * 133 Weak Mutation 969: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - InsertUnaryOp IINC -1 index
   * 134 Weak Mutation 968: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - InsertUnaryOp IINC 1 index
   * 135 Weak Mutation 963: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - DeleteField: _values[Ljava/lang/Object;
   * 136 Weak Mutation 962: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - DeleteField: this$0Lgnu/trove/map/hash/TCustomHashMap;
   * 137 Weak Mutation 961: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - DeleteField: this$1Lgnu/trove/map/hash/TCustomHashMap$EntryView;
   * 138 Weak Mutation 960: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - InsertUnaryOp IINC -1 index
   * 139 Weak Mutation 967: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - InsertUnaryOp Negation of index
   * 140 Weak Mutation 966: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - InsertUnaryOp IINC -1 index
   * 141 Weak Mutation 965: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - InsertUnaryOp IINC 1 index
   * 142 Weak Mutation 964: gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/TCustomHashMap$Entry;:604 - InsertUnaryOp Negation of index
   * 143 gnu.trove.map.hash.TCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;Lgnu/trove/map/hash/TCustomHashMap;)V: root-Branch
   * 144 gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z: I14 Branch 51 IF_ACMPNE L512 - false
   * 145 gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z: I23 Branch 52 IFLE L513 - true
   * 146 gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z: I23 Branch 52 IFLE L513 - false
   * 147 gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z: I30 Branch 53 IF_ACMPEQ L514 - true
   */

  @Test
  public void test22()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashMap<Integer, Integer> tCustomHashMap0 = new TCustomHashMap<Integer, Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, 1763, (float) 118);
      tCustomHashMap0.putIfAbsent((Integer) 1763, (Integer) 118);
      TCustomHashMap<Object, Integer> tCustomHashMap1 = new TCustomHashMap<Object, Integer>((HashingStrategy<? super Object>) identityHashingStrategy0, (TCustomHashMap<?, ? extends Integer>) tCustomHashMap0);
      boolean boolean0 = tCustomHashMap1.containsValue((Object) null);
      assertEquals(false, tCustomHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 23
  /*
   * 31 covered goals:
   * 1 Weak Mutation 691: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceConstant - 1 -> 0
   * 2 gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z: I40 Branch 55 IF_ACMPNE L514 - false
   * 3 Weak Mutation 687: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp Negation of i
   * 4 Weak Mutation 686: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable vals -> _set
   * 5 Weak Mutation 685: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable vals -> set
   * 6 Weak Mutation 684: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable val -> REMOVED
   * 7 Weak Mutation 683: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable val -> FREE
   * 8 Weak Mutation 682: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceComparisonOperator == -> !=
   * 9 Weak Mutation 681: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - DeleteField: REMOVEDLjava/lang/Object;
   * 10 Weak Mutation 680: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable REMOVED -> FREE
   * 11 Weak Mutation 679: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp IINC -1 i
   * 12 Weak Mutation 678: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp IINC 1 i
   * 13 Weak Mutation 677: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp Negation of i
   * 14 Weak Mutation 676: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable set -> vals
   * 15 Weak Mutation 674: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceComparisonOperator == -> !=
   * 16 Weak Mutation 673: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - DeleteField: FREELjava/lang/Object;
   * 17 Weak Mutation 672: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable FREE -> REMOVED
   * 18 Weak Mutation 690: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceComparisonOperator != -> ==
   * 19 Weak Mutation 688: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp IINC 1 i
   * 20 Weak Mutation 689: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp IINC -1 i
   * 21 Weak Mutation 668: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable set -> vals
   * 22 Weak Mutation 669: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp Negation of i
   * 23 Weak Mutation 670: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp IINC 1 i
   * 24 Weak Mutation 671: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:514 - InsertUnaryOp IINC -1 i
   * 25 Weak Mutation 666: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:513 - ReplaceComparisonOperator <= -> -1
   * 26 Weak Mutation 660: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:513 - ReplaceVariable vals -> _set
   * 27 Weak Mutation 661: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:513 - InsertUnaryOp Negation of i
   * 28 Weak Mutation 662: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:513 - InsertUnaryOp IINC 1 i
   * 29 Weak Mutation 663: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:513 - InsertUnaryOp IINC -1 i
   * 30 Weak Mutation 659: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:513 - ReplaceVariable vals -> set
   * 31 Weak Mutation 691: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceConstant - 1 -> 0
   */

  @Test
  public void test23()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashMap<Object, Integer> tCustomHashMap0 = new TCustomHashMap<Object, Integer>((HashingStrategy<? super Object>) identityHashingStrategy0, (-653));
      tCustomHashMap0.put((Object) " vs b=", (Integer) null);
      boolean boolean0 = tCustomHashMap0.containsValue((Object) null);
      assertEquals(false, tCustomHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 24
  /*
   * 73 covered goals:
   * 1 Weak Mutation 713: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable REMOVED -> FREE
   * 2 Weak Mutation 712: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp IINC -1 i
   * 3 Weak Mutation 715: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceComparisonOperator == -> !=
   * 4 Weak Mutation 714: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - DeleteField: REMOVEDLjava/lang/Object;
   * 5 Weak Mutation 717: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable val -> REMOVED
   * 6 Weak Mutation 716: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable val -> FREE
   * 7 Weak Mutation 719: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable vals -> _set
   * 8 Weak Mutation 718: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable vals -> set
   * 9 Weak Mutation 709: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable set -> vals
   * 10 Weak Mutation 711: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp IINC 1 i
   * 11 Weak Mutation 710: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp Negation of i
   * 12 Weak Mutation 728: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable vals -> _set
   * 13 Weak Mutation 729: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp Negation of i
   * 14 Weak Mutation 730: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp IINC 1 i
   * 15 Weak Mutation 731: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp IINC -1 i
   * 16 Weak Mutation 732: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - DeleteStatement: equals(Ljava/lang/Object;Ljava/lang/Object;)Z
   * 17 Weak Mutation 733: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceComparisonOperator == -> !=
   * 18 Weak Mutation 720: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp Negation of i
   * 19 Weak Mutation 721: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp IINC 1 i
   * 20 Weak Mutation 722: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp IINC -1 i
   * 21 Weak Mutation 723: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceComparisonOperator == -> !=
   * 22 Weak Mutation 724: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - DeleteField: strategyLgnu/trove/strategy/HashingStrategy;
   * 23 Weak Mutation 725: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable val -> FREE
   * 24 Weak Mutation 726: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable val -> REMOVED
   * 25 Weak Mutation 727: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable vals -> set
   * 26 gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z: I62 Branch 57 IF_ACMPEQ L521 - false
   * 27 gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z: I67 Branch 58 IF_ACMPEQ L521 - false
   * 28 gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z: I72 Branch 59 IF_ACMPEQ L521 - false
   * 29 gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z: I80 Branch 60 IFEQ L521 - true
   * 30 Weak Mutation 273: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:173 - ReplaceComparisonOperator >= -> >
   * 31 Weak Mutation 702: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp Negation of i
   * 32 Weak Mutation 703: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp IINC 1 i
   * 33 Weak Mutation 701: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable set -> vals
   * 34 Weak Mutation 698: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:520 - ReplaceComparisonOperator <= -> <
   * 35 Weak Mutation 699: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:520 - ReplaceComparisonOperator <= -> -1
   * 36 Weak Mutation 696: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:520 - InsertUnaryOp IINC -1 i
   * 37 Weak Mutation 694: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:520 - InsertUnaryOp Negation of i
   * 38 Weak Mutation 695: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:520 - InsertUnaryOp IINC 1 i
   * 39 Weak Mutation 692: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:520 - ReplaceVariable vals -> set
   * 40 Weak Mutation 693: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:520 - ReplaceVariable vals -> _set
   * 41 Weak Mutation 713: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable REMOVED -> FREE
   * 42 Weak Mutation 712: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp IINC -1 i
   * 43 Weak Mutation 715: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceComparisonOperator == -> !=
   * 44 Weak Mutation 714: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - DeleteField: REMOVEDLjava/lang/Object;
   * 45 Weak Mutation 717: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable val -> REMOVED
   * 46 Weak Mutation 716: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable val -> FREE
   * 47 Weak Mutation 719: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable vals -> _set
   * 48 Weak Mutation 718: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable vals -> set
   * 49 Weak Mutation 705: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable FREE -> REMOVED
   * 50 Weak Mutation 704: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp IINC -1 i
   * 51 Weak Mutation 707: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceComparisonOperator == -> !=
   * 52 Weak Mutation 706: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - DeleteField: FREELjava/lang/Object;
   * 53 Weak Mutation 709: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable set -> vals
   * 54 Weak Mutation 711: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp IINC 1 i
   * 55 Weak Mutation 710: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp Negation of i
   * 56 Weak Mutation 728: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable vals -> _set
   * 57 Weak Mutation 729: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp Negation of i
   * 58 Weak Mutation 730: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp IINC 1 i
   * 59 Weak Mutation 731: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp IINC -1 i
   * 60 Weak Mutation 732: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - DeleteStatement: equals(Ljava/lang/Object;Ljava/lang/Object;)Z
   * 61 Weak Mutation 733: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceComparisonOperator == -> !=
   * 62 Weak Mutation 720: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp Negation of i
   * 63 Weak Mutation 721: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp IINC 1 i
   * 64 Weak Mutation 722: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp IINC -1 i
   * 65 Weak Mutation 723: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceComparisonOperator == -> !=
   * 66 Weak Mutation 724: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - DeleteField: strategyLgnu/trove/strategy/HashingStrategy;
   * 67 Weak Mutation 725: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable val -> FREE
   * 68 Weak Mutation 726: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable val -> REMOVED
   * 69 Weak Mutation 727: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable vals -> set
   * 70 gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z: I14 Branch 51 IF_ACMPNE L512 - true
   * 71 gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z: I55 Branch 56 IFLE L520 - true
   * 72 gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z: I55 Branch 56 IFLE L520 - false
   * 73 gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z: I62 Branch 57 IF_ACMPEQ L521 - true
   */

  @Test
  public void test24()  throws Throwable  {
      IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
      TCustomHashMap<String, Integer> tCustomHashMap0 = new TCustomHashMap<String, Integer>();
      TCustomHashMap<Integer, String> tCustomHashMap1 = new TCustomHashMap<Integer, String>((HashingStrategy<? super Integer>) identityHashingStrategy0, (-1218));
      tCustomHashMap1.put((Integer) (-1218), "");
      boolean boolean0 = tCustomHashMap1.containsValue((Object) tCustomHashMap0);
      assertEquals(false, tCustomHashMap1.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 25
  /*
   * 7 covered goals:
   * 1 Weak Mutation 738: gnu.trove.map.hash.TCustomHashMap.containsKey(Ljava/lang/Object;)Z:538 - DeleteStatement: contains(Ljava/lang/Object;)Z
   * 2 Weak Mutation 737: gnu.trove.map.hash.TCustomHashMap.containsKey(Ljava/lang/Object;)Z:538 - ReplaceVariable key -> REMOVED
   * 3 Weak Mutation 736: gnu.trove.map.hash.TCustomHashMap.containsKey(Ljava/lang/Object;)Z:538 - ReplaceVariable key -> FREE
   * 4 gnu.trove.map.hash.TCustomHashMap.containsKey(Ljava/lang/Object;)Z: root-Branch
   * 5 Weak Mutation 738: gnu.trove.map.hash.TCustomHashMap.containsKey(Ljava/lang/Object;)Z:538 - DeleteStatement: contains(Ljava/lang/Object;)Z
   * 6 Weak Mutation 737: gnu.trove.map.hash.TCustomHashMap.containsKey(Ljava/lang/Object;)Z:538 - ReplaceVariable key -> REMOVED
   * 7 Weak Mutation 736: gnu.trove.map.hash.TCustomHashMap.containsKey(Ljava/lang/Object;)Z:538 - ReplaceVariable key -> FREE
   */

  @Test
  public void test25()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashMap<Integer, Object> tCustomHashMap0 = new TCustomHashMap<Integer, Object>((HashingStrategy<? super Integer>) identityHashingStrategy0);
      tCustomHashMap0.containsKey((Object) "");
      assertEquals(23, tCustomHashMap0.capacity());
  }

  //Test case number: 26
  /*
   * 84 covered goals:
   * 1 Weak Mutation 754: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:867 - DeleteField: _sizeI
   * 2 Weak Mutation 780: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:872 - InsertUnaryOp IINC -1 i
   * 3 Weak Mutation 781: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:872 - DeleteStatement: writeObject(Ljava/lang/Object;)V
   * 4 Weak Mutation 778: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:872 - InsertUnaryOp Negation of i
   * 5 Weak Mutation 779: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:872 - InsertUnaryOp IINC 1 i
   * 6 Weak Mutation 777: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:872 - DeleteField: _set[Ljava/lang/Object;
   * 7 Weak Mutation 787: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:873 - DeleteStatement: writeObject(Ljava/lang/Object;)V
   * 8 Weak Mutation 786: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:873 - InsertUnaryOp IINC -1 i
   * 9 Weak Mutation 785: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:873 - InsertUnaryOp IINC 1 i
   * 10 Weak Mutation 784: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:873 - InsertUnaryOp Negation of i
   * 11 Weak Mutation 782: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:873 - ReplaceVariable _values -> _set
   * 12 Weak Mutation 783: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:873 - DeleteField: _values[Ljava/lang/Object;
   * 13 gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I39 Branch 64 IF_ACMPEQ L871 - false
   * 14 Weak Mutation 239: gnu.trove.map.hash.TCustomHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:148 - ReplaceVariable value -> REMOVED
   * 15 Weak Mutation 238: gnu.trove.map.hash.TCustomHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:148 - ReplaceVariable value -> FREE
   * 16 Weak Mutation 237: gnu.trove.map.hash.TCustomHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:147 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 17 Weak Mutation 236: gnu.trove.map.hash.TCustomHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:147 - ReplaceVariable key -> REMOVED
   * 18 Weak Mutation 235: gnu.trove.map.hash.TCustomHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:147 - ReplaceVariable key -> value
   * 19 Weak Mutation 234: gnu.trove.map.hash.TCustomHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:147 - ReplaceVariable key -> FREE
   * 20 Weak Mutation 242: gnu.trove.map.hash.TCustomHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:148 - InsertUnaryOp IINC 1 index
   * 21 Weak Mutation 243: gnu.trove.map.hash.TCustomHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:148 - InsertUnaryOp IINC -1 index
   * 22 Weak Mutation 240: gnu.trove.map.hash.TCustomHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:148 - ReplaceVariable value -> key
   * 23 Weak Mutation 241: gnu.trove.map.hash.TCustomHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:148 - InsertUnaryOp Negation of index
   * 24 Weak Mutation 272: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:173 - ReplaceComparisonOperator >= -> ==
   * 25 Weak Mutation 287: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:179 - ReplaceVariable _values -> _set
   * 26 Weak Mutation 270: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:172 - ReplaceConstant - 1 -> 0
   * 27 Weak Mutation 271: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:173 - InsertUnaryOp Negation of index
   * 28 Weak Mutation 288: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:179 - DeleteField: _values[Ljava/lang/Object;
   * 29 Weak Mutation 289: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:179 - InsertUnaryOp Negation of index
   * 30 Weak Mutation 290: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:179 - InsertUnaryOp IINC 1 index
   * 31 Weak Mutation 291: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:179 - InsertUnaryOp IINC -1 index
   * 32 Weak Mutation 292: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:179 - ReplaceVariable value -> FREE
   * 33 Weak Mutation 293: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:179 - ReplaceVariable value -> previous
   * 34 Weak Mutation 294: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:179 - ReplaceVariable value -> REMOVED
   * 35 Weak Mutation 295: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:181 - InsertUnaryOp Negation of isNewMapping
   * 36 Weak Mutation 296: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:181 - ReplaceComparisonOperator == -> !=
   * 37 Weak Mutation 297: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:182 - InsertUnaryOp Negation
   * 38 Weak Mutation 298: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:182 - DeleteField: consumeFreeSlotZ
   * 39 Weak Mutation 299: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:182 - DeleteStatement: postInsertHook(Z)V
   * 40 Weak Mutation 300: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:185 - ReplaceVariable previous -> FREE
   * 41 Weak Mutation 301: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:185 - ReplaceVariable previous -> value
   * 42 Weak Mutation 302: gnu.trove.map.hash.TCustomHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:185 - ReplaceVariable previous -> REMOVED
   * 43 Weak Mutation 751: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:867 - InsertUnaryOp Negation
   * 44 Weak Mutation 750: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:861 - DeleteStatement: writeByte(I)V
   * 45 Weak Mutation 749: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:861 - ReplaceConstant - 1 -> 0
   * 46 Weak Mutation 762: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:870 - ReplaceComparisonOperator <= -> -1
   * 47 Weak Mutation 763: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - DeleteField: _set[Ljava/lang/Object;
   * 48 Weak Mutation 761: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:870 - ReplaceComparisonOperator <= -> <
   * 49 Weak Mutation 766: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - InsertUnaryOp IINC -1 i
   * 50 Weak Mutation 767: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - ReplaceVariable REMOVED -> FREE
   * 51 Weak Mutation 764: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - InsertUnaryOp Negation of i
   * 52 Weak Mutation 765: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - InsertUnaryOp IINC 1 i
   * 53 Weak Mutation 754: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:867 - DeleteField: _sizeI
   * 54 Weak Mutation 755: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:867 - DeleteStatement: writeInt(I)V
   * 55 Weak Mutation 752: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:867 - InsertUnaryOp +1
   * 56 Weak Mutation 753: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:867 - InsertUnaryOp -1
   * 57 Weak Mutation 758: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:870 - InsertUnaryOp IINC 1 i
   * 58 Weak Mutation 759: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:870 - InsertUnaryOp IINC -1 i
   * 59 Weak Mutation 756: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:870 - DeleteField: _set[Ljava/lang/Object;
   * 60 Weak Mutation 757: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:870 - InsertUnaryOp Negation of i
   * 61 Weak Mutation 787: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:873 - DeleteStatement: writeObject(Ljava/lang/Object;)V
   * 62 Weak Mutation 786: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:873 - InsertUnaryOp IINC -1 i
   * 63 Weak Mutation 785: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:873 - InsertUnaryOp IINC 1 i
   * 64 Weak Mutation 784: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:873 - InsertUnaryOp Negation of i
   * 65 Weak Mutation 774: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - ReplaceVariable FREE -> REMOVED
   * 66 Weak Mutation 775: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - DeleteField: FREELjava/lang/Object;
   * 67 Weak Mutation 772: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - InsertUnaryOp IINC 1 i
   * 68 Weak Mutation 773: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - InsertUnaryOp IINC -1 i
   * 69 Weak Mutation 770: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - DeleteField: _set[Ljava/lang/Object;
   * 70 Weak Mutation 771: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - InsertUnaryOp Negation of i
   * 71 Weak Mutation 768: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - DeleteField: REMOVEDLjava/lang/Object;
   * 72 Weak Mutation 769: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - ReplaceComparisonOperator == -> !=
   * 73 Weak Mutation 782: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:873 - ReplaceVariable _values -> _set
   * 74 Weak Mutation 783: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:873 - DeleteField: _values[Ljava/lang/Object;
   * 75 Weak Mutation 780: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:872 - InsertUnaryOp IINC -1 i
   * 76 Weak Mutation 781: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:872 - DeleteStatement: writeObject(Ljava/lang/Object;)V
   * 77 Weak Mutation 778: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:872 - InsertUnaryOp Negation of i
   * 78 Weak Mutation 779: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:872 - InsertUnaryOp IINC 1 i
   * 79 Weak Mutation 776: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - ReplaceComparisonOperator == -> !=
   * 80 Weak Mutation 777: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:872 - DeleteField: _set[Ljava/lang/Object;
   * 81 gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 62 IFLE L870 - true
   * 82 gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 62 IFLE L870 - false
   * 83 gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 63 IF_ACMPEQ L871 - false
   * 84 gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I39 Branch 64 IF_ACMPEQ L871 - true
   */

  @Test
  public void test26()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashMap<Integer, String> tCustomHashMap0 = new TCustomHashMap<Integer, String>((HashingStrategy<? super Integer>) identityHashingStrategy0, 246);
      tCustomHashMap0.put((Integer) 246, "");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(246);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tCustomHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals("{246=}", tCustomHashMap0.toString());
      assertEquals(163, byteArrayOutputStream0.size());
  }

  //Test case number: 27
  /*
   * 2 covered goals:
   * 1 Weak Mutation 788: gnu.trove.map.hash.TCustomHashMap.readExternal(Ljava/io/ObjectInput;)V:883 - DeleteStatement: readByte()B
   * 2 Weak Mutation 788: gnu.trove.map.hash.TCustomHashMap.readExternal(Ljava/io/ObjectInput;)V:883 - DeleteStatement: readByte()B
   */

  @Test
  public void test27()  throws Throwable  {
      TCustomHashMap<String, Object> tCustomHashMap0 = new TCustomHashMap<String, Object>();
      // Undeclared exception!
      try {
        tCustomHashMap0.readExternal((ObjectInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 26 covered goals:
   * 1 gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I30 Branch 30 IF_ACMPEQ L299 - true
   * 2 Weak Mutation 343: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - ReplaceVariable set -> values
   * 3 Weak Mutation 342: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - ReplaceComparisonOperator == -> !=
   * 4 Weak Mutation 341: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - DeleteField: FREELjava/lang/Object;
   * 5 Weak Mutation 340: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - ReplaceVariable FREE -> REMOVED
   * 6 Weak Mutation 339: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - InsertUnaryOp IINC -1 i
   * 7 Weak Mutation 338: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - InsertUnaryOp IINC 1 i
   * 8 Weak Mutation 337: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - InsertUnaryOp Negation of i
   * 9 Weak Mutation 350: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - ReplaceComparisonOperator == -> !=
   * 10 Weak Mutation 349: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - DeleteField: REMOVEDLjava/lang/Object;
   * 11 Weak Mutation 348: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - ReplaceVariable REMOVED -> FREE
   * 12 Weak Mutation 347: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - InsertUnaryOp IINC -1 i
   * 13 Weak Mutation 346: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - InsertUnaryOp IINC 1 i
   * 14 Weak Mutation 345: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - InsertUnaryOp Negation of i
   * 15 Weak Mutation 326: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:297 - DeleteField: _set[Ljava/lang/Object;
   * 16 Weak Mutation 327: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:298 - ReplaceVariable values -> set
   * 17 Weak Mutation 324: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - ReplaceVariable _values -> _set
   * 18 Weak Mutation 325: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - DeleteField: _values[Ljava/lang/Object;
   * 19 Weak Mutation 334: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:298 - ReplaceComparisonOperator <= -> -1
   * 20 Weak Mutation 335: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:299 - ReplaceVariable set -> values
   * 21 Weak Mutation 333: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:298 - ReplaceComparisonOperator <= -> <
   * 22 Weak Mutation 330: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:298 - InsertUnaryOp IINC 1 i
   * 23 Weak Mutation 331: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:298 - InsertUnaryOp IINC -1 i
   * 24 Weak Mutation 328: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:298 - ReplaceVariable values -> _set
   * 25 Weak Mutation 329: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:298 - InsertUnaryOp Negation of i
   * 26 Weak Mutation 359: gnu.trove.map.hash.TCustomHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:305 - ReplaceConstant - 1 -> 0
   */

  @Test
  public void test28()  throws Throwable  {
      TCustomHashMap<String, Integer> tCustomHashMap0 = new TCustomHashMap<String, Integer>();
      tCustomHashMap0.removeAt(0);
      assertEquals(-1, tCustomHashMap0.size());
      
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tCustomHashMap0._set);
      boolean boolean0 = tCustomHashMap0.forEachValue((TObjectProcedure<? super Integer>) toObjectArrayProceedure0);
      assertEquals(true, boolean0);
  }

  //Test case number: 29
  /*
   * 31 covered goals:
   * 1 gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I30 Branch 34 IF_ACMPEQ L322 - true
   * 2 Weak Mutation 29: gnu.trove.map.hash.TCustomHashMap$HashProcedure.getHashCode()I:244 - InsertUnaryOp Negation
   * 3 Weak Mutation 28: gnu.trove.map.hash.TCustomHashMap$HashProcedure.<init>(Lgnu/trove/map/hash/TCustomHashMap;)V:241 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 31: gnu.trove.map.hash.TCustomHashMap$HashProcedure.getHashCode()I:244 - InsertUnaryOp -1
   * 5 Weak Mutation 30: gnu.trove.map.hash.TCustomHashMap$HashProcedure.getHashCode()I:244 - InsertUnaryOp +1
   * 6 Weak Mutation 317: gnu.trove.map.hash.TCustomHashMap.hashCode()I:212 - DeleteStatement: getHashCode()I
   * 7 Weak Mutation 316: gnu.trove.map.hash.TCustomHashMap.hashCode()I:211 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z
   * 8 Weak Mutation 373: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp Negation of i
   * 9 Weak Mutation 375: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp IINC -1 i
   * 10 Weak Mutation 374: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp IINC 1 i
   * 11 Weak Mutation 369: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:321 - ReplaceComparisonOperator <= -> <
   * 12 Weak Mutation 371: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - ReplaceVariable keys -> values
   * 13 Weak Mutation 370: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:321 - ReplaceComparisonOperator <= -> -1
   * 14 Weak Mutation 381: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp Negation of i
   * 15 Weak Mutation 383: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp IINC -1 i
   * 16 Weak Mutation 382: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - InsertUnaryOp IINC 1 i
   * 17 Weak Mutation 377: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - DeleteField: FREELjava/lang/Object;
   * 18 Weak Mutation 376: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - ReplaceVariable FREE -> REMOVED
   * 19 Weak Mutation 379: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - ReplaceVariable keys -> values
   * 20 Weak Mutation 378: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - ReplaceComparisonOperator == -> !=
   * 21 Weak Mutation 365: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:321 - InsertUnaryOp Negation of i
   * 22 Weak Mutation 366: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:321 - InsertUnaryOp IINC 1 i
   * 23 Weak Mutation 367: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:321 - InsertUnaryOp IINC -1 i
   * 24 Weak Mutation 360: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - DeleteField: _set[Ljava/lang/Object;
   * 25 Weak Mutation 361: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:320 - ReplaceVariable _values -> _set
   * 26 Weak Mutation 362: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:320 - DeleteField: _values[Ljava/lang/Object;
   * 27 Weak Mutation 363: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:321 - ReplaceVariable keys -> values
   * 28 Weak Mutation 400: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:328 - ReplaceConstant - 1 -> 0
   * 29 Weak Mutation 386: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - ReplaceComparisonOperator == -> !=
   * 30 Weak Mutation 385: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - DeleteField: REMOVEDLjava/lang/Object;
   * 31 Weak Mutation 384: gnu.trove.map.hash.TCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - ReplaceVariable REMOVED -> FREE
   */

  @Test
  public void test29()  throws Throwable  {
      TCustomHashMap<String, Integer> tCustomHashMap0 = new TCustomHashMap<String, Integer>();
      tCustomHashMap0.removeAt(0);
      assertEquals(-1, tCustomHashMap0.size());
      
      int int0 = tCustomHashMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 30
  /*
   * 29 covered goals:
   * 1 gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z: I67 Branch 58 IF_ACMPEQ L521 - true
   * 2 Weak Mutation 702: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp Negation of i
   * 3 Weak Mutation 703: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp IINC 1 i
   * 4 Weak Mutation 701: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable set -> vals
   * 5 Weak Mutation 698: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:520 - ReplaceComparisonOperator <= -> <
   * 6 Weak Mutation 699: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:520 - ReplaceComparisonOperator <= -> -1
   * 7 Weak Mutation 696: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:520 - InsertUnaryOp IINC -1 i
   * 8 Weak Mutation 694: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:520 - InsertUnaryOp Negation of i
   * 9 Weak Mutation 695: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:520 - InsertUnaryOp IINC 1 i
   * 10 Weak Mutation 692: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:520 - ReplaceVariable vals -> set
   * 11 Weak Mutation 693: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:520 - ReplaceVariable vals -> _set
   * 12 Weak Mutation 653: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:507 - DeleteField: _set[Ljava/lang/Object;
   * 13 Weak Mutation 655: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:508 - DeleteField: _values[Ljava/lang/Object;
   * 14 Weak Mutation 654: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:508 - ReplaceVariable _values -> _set
   * 15 Weak Mutation 656: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:512 - ReplaceVariable val -> FREE
   * 16 Weak Mutation 657: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:512 - ReplaceVariable val -> REMOVED
   * 17 Weak Mutation 658: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:512 - ReplaceComparisonOperator != -> ==
   * 18 Weak Mutation 713: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable REMOVED -> FREE
   * 19 Weak Mutation 712: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp IINC -1 i
   * 20 Weak Mutation 715: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceComparisonOperator == -> !=
   * 21 Weak Mutation 714: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - DeleteField: REMOVEDLjava/lang/Object;
   * 22 Weak Mutation 705: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable FREE -> REMOVED
   * 23 Weak Mutation 704: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp IINC -1 i
   * 24 Weak Mutation 707: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceComparisonOperator == -> !=
   * 25 Weak Mutation 706: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - DeleteField: FREELjava/lang/Object;
   * 26 Weak Mutation 709: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - ReplaceVariable set -> vals
   * 27 Weak Mutation 711: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp IINC 1 i
   * 28 Weak Mutation 710: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:521 - InsertUnaryOp Negation of i
   * 29 Weak Mutation 735: gnu.trove.map.hash.TCustomHashMap.containsValue(Ljava/lang/Object;)Z:527 - ReplaceConstant - 0 -> 1
   */

  @Test
  public void test30()  throws Throwable  {
      TCustomHashMap<String, Integer> tCustomHashMap0 = new TCustomHashMap<String, Integer>();
      tCustomHashMap0.removeAt(0);
      assertEquals(false, tCustomHashMap0.isEmpty());
      
      boolean boolean0 = tCustomHashMap0.containsValue((Object) "");
      assertEquals(false, boolean0);
  }

  //Test case number: 31
  /*
   * 47 covered goals:
   * 1 gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 63 IF_ACMPEQ L871 - true
   * 2 Weak Mutation 223: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:131 - InsertUnaryOp Negation of initialCapacity
   * 3 Weak Mutation 233: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:134 - InsertUnaryOp IINC -1 capacity
   * 4 Weak Mutation 232: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:134 - InsertUnaryOp IINC 1 capacity
   * 5 Weak Mutation 231: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:134 - InsertUnaryOp Negation of capacity
   * 6 Weak Mutation 230: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:134 - ReplaceVariable capacity -> initialCapacity
   * 7 Weak Mutation 229: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:133 - InsertUnaryOp IINC -1 capacity
   * 8 Weak Mutation 228: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:133 - InsertUnaryOp IINC 1 capacity
   * 9 Weak Mutation 227: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:133 - InsertUnaryOp Negation of capacity
   * 10 Weak Mutation 226: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:133 - ReplaceVariable capacity -> initialCapacity
   * 11 Weak Mutation 225: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:131 - InsertUnaryOp IINC -1 initialCapacity
   * 12 Weak Mutation 224: gnu.trove.map.hash.TCustomHashMap.setUp(I)I:131 - InsertUnaryOp IINC 1 initialCapacity
   * 13 Weak Mutation 652: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:466 - InsertUnaryOp IINC -1 index
   * 14 Weak Mutation 649: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:465 - InsertUnaryOp IINC -1 index
   * 15 Weak Mutation 648: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:465 - InsertUnaryOp IINC 1 index
   * 16 Weak Mutation 651: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:466 - InsertUnaryOp IINC 1 index
   * 17 Weak Mutation 650: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:466 - InsertUnaryOp Negation of index
   * 18 Weak Mutation 645: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:465 - ReplaceVariable _values -> _set
   * 19 Weak Mutation 647: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:465 - InsertUnaryOp Negation of index
   * 20 Weak Mutation 646: gnu.trove.map.hash.TCustomHashMap.removeAt(I)V:465 - DeleteField: _values[Ljava/lang/Object;
   * 21 Weak Mutation 751: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:867 - InsertUnaryOp Negation
   * 22 Weak Mutation 750: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:861 - DeleteStatement: writeByte(I)V
   * 23 Weak Mutation 749: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:861 - ReplaceConstant - 1 -> 0
   * 24 Weak Mutation 762: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:870 - ReplaceComparisonOperator <= -> -1
   * 25 Weak Mutation 763: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - DeleteField: _set[Ljava/lang/Object;
   * 26 Weak Mutation 761: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:870 - ReplaceComparisonOperator <= -> <
   * 27 Weak Mutation 766: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - InsertUnaryOp IINC -1 i
   * 28 Weak Mutation 767: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - ReplaceVariable REMOVED -> FREE
   * 29 Weak Mutation 764: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - InsertUnaryOp Negation of i
   * 30 Weak Mutation 765: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - InsertUnaryOp IINC 1 i
   * 31 Weak Mutation 754: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:867 - DeleteField: _sizeI
   * 32 Weak Mutation 755: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:867 - DeleteStatement: writeInt(I)V
   * 33 Weak Mutation 752: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:867 - InsertUnaryOp +1
   * 34 Weak Mutation 753: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:867 - InsertUnaryOp -1
   * 35 Weak Mutation 758: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:870 - InsertUnaryOp IINC 1 i
   * 36 Weak Mutation 759: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:870 - InsertUnaryOp IINC -1 i
   * 37 Weak Mutation 756: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:870 - DeleteField: _set[Ljava/lang/Object;
   * 38 Weak Mutation 757: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:870 - InsertUnaryOp Negation of i
   * 39 Weak Mutation 774: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - ReplaceVariable FREE -> REMOVED
   * 40 Weak Mutation 775: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - DeleteField: FREELjava/lang/Object;
   * 41 Weak Mutation 772: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - InsertUnaryOp IINC 1 i
   * 42 Weak Mutation 773: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - InsertUnaryOp IINC -1 i
   * 43 Weak Mutation 770: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - DeleteField: _set[Ljava/lang/Object;
   * 44 Weak Mutation 771: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - InsertUnaryOp Negation of i
   * 45 Weak Mutation 768: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - DeleteField: REMOVEDLjava/lang/Object;
   * 46 Weak Mutation 769: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - ReplaceComparisonOperator == -> !=
   * 47 Weak Mutation 776: gnu.trove.map.hash.TCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V:871 - ReplaceComparisonOperator == -> !=
   */

  @Test
  public void test31()  throws Throwable  {
      TCustomHashMap<String, Integer> tCustomHashMap0 = new TCustomHashMap<String, Integer>();
      tCustomHashMap0.removeAt(0);
      assertEquals(-1, tCustomHashMap0.size());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tCustomHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\f\u0001\u0000\u0000\u0000?\u0000\u0000\u0000?\u0000\u0000\u0000p", byteArrayOutputStream0.toString());
  }
}
