/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TDoubleCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleSet;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessDoubleList;
import gnu.trove.list.TDoubleList;
import gnu.trove.list.array.TDoubleArrayList;
import gnu.trove.list.linked.TDoubleLinkedList;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.set.TDoubleSet;
import gnu.trove.set.hash.TDoubleHashSet;
import java.util.Collection;
import java.util.LinkedList;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableDoubleCollectionEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection$1.hasNext()Z: root-Branch
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection$1.<init>(Lgnu/trove/impl/unmodifiable/TUnmodifiableDoubleCollection;)V: root-Branch
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection$1.next()D: root-Branch
   * 4 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.containsAll(Lgnu/trove/TDoubleCollection;)Z: root-Branch
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.iterator()Lgnu/trove/iterator/TDoubleIterator;: root-Branch
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.<init>(Lgnu/trove/TDoubleCollection;)V: I7 Branch 1 IFNONNULL L58 - true
   */

  @Test
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0, 1824.0880833066415);
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList((TDoubleList) tDoubleArrayList0);
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleLinkedList0);
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet(doubleArray0);
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet0);
      boolean boolean0 = tUnmodifiableDoubleList0.containsAll((TDoubleCollection) tUnmodifiableDoubleSet0);
      assertEquals(true, boolean0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.forEach(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet((-167), (-167));
      TUnmodifiableDoubleCollection tUnmodifiableDoubleCollection0 = new TUnmodifiableDoubleCollection((TDoubleCollection) tDoubleHashSet0);
      boolean boolean0 = tUnmodifiableDoubleCollection0.forEach((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.retainAll([D)Z: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet(1087, 1087);
      TUnmodifiableDoubleCollection tUnmodifiableDoubleCollection0 = new TUnmodifiableDoubleCollection((TDoubleCollection) tDoubleHashSet0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleCollection0.retainAll(tDoubleHashSet0._set);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.addAll([D)Z: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet(doubleArray0);
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleSet0.addAll(tDoubleHashSet0._set);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.removeAll(Lgnu/trove/TDoubleCollection;)Z: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet();
      TUnmodifiableDoubleCollection tUnmodifiableDoubleCollection0 = new TUnmodifiableDoubleCollection((TDoubleCollection) tDoubleHashSet0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleCollection0.removeAll((TDoubleCollection) tDoubleHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.retainAll(Lgnu/trove/TDoubleCollection;)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0);
      TUnmodifiableDoubleCollection tUnmodifiableDoubleCollection0 = new TUnmodifiableDoubleCollection((TDoubleCollection) tDoubleArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleCollection0.retainAll((TDoubleCollection) tDoubleArrayList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.removeAll([D)Z: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TUnmodifiableDoubleCollection tUnmodifiableDoubleCollection0 = new TUnmodifiableDoubleCollection((TDoubleCollection) tDoubleLinkedList0);
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try {
        tUnmodifiableDoubleCollection0.removeAll(doubleArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.isEmpty()Z: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet();
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet0);
      boolean boolean0 = tUnmodifiableDoubleSet0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.toArray([D)[D: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0, (-38.96296917817291));
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      double[] doubleArray1 = tUnmodifiableRandomAccessDoubleList0.toArray(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.retainAll(Ljava/util/Collection;)Z: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet();
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try {
        tUnmodifiableDoubleSet0.retainAll((Collection<?>) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.getNoEntryValue()D: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0, 1824.0880833066415);
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList((TDoubleList) tDoubleArrayList0);
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleLinkedList0);
      double double0 = tUnmodifiableDoubleList0.getNoEntryValue();
      assertEquals(1824.0880833066415, double0, 0.01D);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.add(D)Z: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet((-167), (-167));
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleSet0.add((double) (-167));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.remove(D)Z: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(768);
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tDoubleArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleList0.remove((double) 768);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.addAll(Ljava/util/Collection;)Z: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0, (-38.96296917817291));
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessDoubleList0.addAll((Collection<? extends Double>) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet();
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet0);
      String string0 = tUnmodifiableDoubleSet0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.clear()V: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet((-35), (-35), (-35));
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleSet0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.size()I: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TUnmodifiableDoubleCollection tUnmodifiableDoubleCollection0 = new TUnmodifiableDoubleCollection((TDoubleCollection) tDoubleLinkedList0);
      int int0 = tUnmodifiableDoubleCollection0.size();
      assertEquals(0, int0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.addAll(Lgnu/trove/TDoubleCollection;)Z: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessDoubleList0.addAll((TDoubleCollection) tDoubleArrayList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.containsAll([D)Z: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TUnmodifiableDoubleCollection tUnmodifiableDoubleCollection0 = new TUnmodifiableDoubleCollection((TDoubleCollection) tDoubleLinkedList0);
      double[] doubleArray0 = new double[2];
      boolean boolean0 = tUnmodifiableDoubleCollection0.containsAll(doubleArray0);
      assertEquals(false, boolean0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.containsAll(Ljava/util/Collection;)Z: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet();
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = tUnmodifiableDoubleSet0.containsAll((Collection<?>) linkedList0);
      assertEquals(true, boolean0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.contains(D)Z: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      boolean boolean0 = tUnmodifiableRandomAccessDoubleList0.contains(18.73967365587463);
      assertEquals(false, boolean0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.toArray()[D: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet();
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet0);
      double[] doubleArray0 = tUnmodifiableDoubleSet0.toArray();
      assertNotNull(doubleArray0);
  }

  //Test case number: 22
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.removeAll(Ljava/util/Collection;)Z: root-Branch
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.<init>(Lgnu/trove/TDoubleCollection;)V: I7 Branch 1 IFNONNULL L58 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(1332);
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessDoubleList0.removeAll((Collection<?>) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection.<init>(Lgnu/trove/TDoubleCollection;)V: I7 Branch 1 IFNONNULL L58 - false
   */

  @Test
  public void test23()  throws Throwable  {
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = null;
      try {
        tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
