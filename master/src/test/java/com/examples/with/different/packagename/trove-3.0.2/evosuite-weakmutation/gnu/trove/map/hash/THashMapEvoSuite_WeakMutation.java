/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TObjectFunction;
import gnu.trove.map.hash.THashMap;
import gnu.trove.procedure.TObjectObjectProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.Map;
import java.util.Set;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class THashMapEvoSuite_WeakMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 75 covered goals:
   * 1 Weak Mutation 254: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:161 - ReplaceComparisonOperator >= -> -1
   * 2 Weak Mutation 255: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - ReplaceVariable _values -> _set
   * 3 Weak Mutation 258: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - InsertUnaryOp IINC 1 index
   * 4 Weak Mutation 259: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - InsertUnaryOp IINC -1 index
   * 5 Weak Mutation 256: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - DeleteField: _values[Ljava/lang/Object;
   * 6 Weak Mutation 257: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - InsertUnaryOp Negation of index
   * 7 Weak Mutation 262: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - ReplaceArithmeticOperator - -> %
   * 8 Weak Mutation 263: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - ReplaceArithmeticOperator - -> /
   * 9 Weak Mutation 260: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - ReplaceConstant - 1 -> 0
   * 10 Weak Mutation 261: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - ReplaceArithmeticOperator - -> +
   * 11 Weak Mutation 264: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - ReplaceArithmeticOperator - -> *
   * 12 gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: I9 Branch 23 IFGE L161 - false
   * 13 Weak Mutation 239: gnu.trove.map.hash.THashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:145 - ReplaceVariable value -> FREE
   * 14 Weak Mutation 238: gnu.trove.map.hash.THashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:144 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 15 Weak Mutation 237: gnu.trove.map.hash.THashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:144 - ReplaceVariable key -> REMOVED
   * 16 Weak Mutation 236: gnu.trove.map.hash.THashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:144 - ReplaceVariable key -> value
   * 17 Weak Mutation 235: gnu.trove.map.hash.THashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:144 - ReplaceVariable key -> FREE
   * 18 Weak Mutation 234: gnu.trove.map.hash.THashMap.setUp(I)I:130 - InsertUnaryOp IINC -1 capacity
   * 19 Weak Mutation 233: gnu.trove.map.hash.THashMap.setUp(I)I:130 - InsertUnaryOp IINC 1 capacity
   * 20 Weak Mutation 232: gnu.trove.map.hash.THashMap.setUp(I)I:130 - InsertUnaryOp Negation of capacity
   * 21 Weak Mutation 231: gnu.trove.map.hash.THashMap.setUp(I)I:130 - ReplaceVariable capacity -> initialCapacity
   * 22 Weak Mutation 230: gnu.trove.map.hash.THashMap.setUp(I)I:129 - InsertUnaryOp IINC -1 capacity
   * 23 Weak Mutation 229: gnu.trove.map.hash.THashMap.setUp(I)I:129 - InsertUnaryOp IINC 1 capacity
   * 24 Weak Mutation 228: gnu.trove.map.hash.THashMap.setUp(I)I:129 - InsertUnaryOp Negation of capacity
   * 25 Weak Mutation 227: gnu.trove.map.hash.THashMap.setUp(I)I:129 - ReplaceVariable capacity -> initialCapacity
   * 26 Weak Mutation 226: gnu.trove.map.hash.THashMap.setUp(I)I:127 - InsertUnaryOp IINC -1 initialCapacity
   * 27 Weak Mutation 225: gnu.trove.map.hash.THashMap.setUp(I)I:127 - InsertUnaryOp IINC 1 initialCapacity
   * 28 Weak Mutation 224: gnu.trove.map.hash.THashMap.setUp(I)I:127 - InsertUnaryOp Negation of initialCapacity
   * 29 Weak Mutation 254: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:161 - ReplaceComparisonOperator >= -> -1
   * 30 Weak Mutation 255: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - ReplaceVariable _values -> _set
   * 31 Weak Mutation 250: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:161 - InsertUnaryOp IINC 1 index
   * 32 Weak Mutation 251: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:161 - InsertUnaryOp IINC -1 index
   * 33 Weak Mutation 248: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:160 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 34 Weak Mutation 249: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:161 - InsertUnaryOp Negation of index
   * 35 Weak Mutation 246: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:160 - ReplaceVariable key -> value
   * 36 Weak Mutation 247: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:160 - ReplaceVariable key -> REMOVED
   * 37 Weak Mutation 244: gnu.trove.map.hash.THashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:145 - InsertUnaryOp IINC -1 index
   * 38 Weak Mutation 245: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:160 - ReplaceVariable key -> FREE
   * 39 Weak Mutation 242: gnu.trove.map.hash.THashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:145 - InsertUnaryOp Negation of index
   * 40 Weak Mutation 243: gnu.trove.map.hash.THashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:145 - InsertUnaryOp IINC 1 index
   * 41 Weak Mutation 240: gnu.trove.map.hash.THashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:145 - ReplaceVariable value -> REMOVED
   * 42 Weak Mutation 241: gnu.trove.map.hash.THashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:145 - ReplaceVariable value -> key
   * 43 Weak Mutation 273: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:171 - ReplaceComparisonOperator >= -> ==
   * 44 Weak Mutation 272: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:171 - InsertUnaryOp Negation of index
   * 45 Weak Mutation 258: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - InsertUnaryOp IINC 1 index
   * 46 Weak Mutation 259: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - InsertUnaryOp IINC -1 index
   * 47 Weak Mutation 256: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - DeleteField: _values[Ljava/lang/Object;
   * 48 Weak Mutation 257: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - InsertUnaryOp Negation of index
   * 49 Weak Mutation 262: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - ReplaceArithmeticOperator - -> %
   * 50 Weak Mutation 263: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - ReplaceArithmeticOperator - -> /
   * 51 Weak Mutation 260: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - ReplaceConstant - 1 -> 0
   * 52 Weak Mutation 261: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - ReplaceArithmeticOperator - -> +
   * 53 Weak Mutation 264: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:162 - ReplaceArithmeticOperator - -> *
   * 54 Weak Mutation 271: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:170 - ReplaceConstant - 1 -> 0
   * 55 Weak Mutation 288: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:176 - ReplaceVariable _values -> _set
   * 56 Weak Mutation 289: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:176 - DeleteField: _values[Ljava/lang/Object;
   * 57 Weak Mutation 290: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:176 - InsertUnaryOp Negation of index
   * 58 Weak Mutation 291: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:176 - InsertUnaryOp IINC 1 index
   * 59 Weak Mutation 292: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:176 - InsertUnaryOp IINC -1 index
   * 60 Weak Mutation 293: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:176 - ReplaceVariable value -> FREE
   * 61 Weak Mutation 294: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:176 - ReplaceVariable value -> previous
   * 62 Weak Mutation 295: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:176 - ReplaceVariable value -> REMOVED
   * 63 Weak Mutation 296: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:177 - InsertUnaryOp Negation of isNewMapping
   * 64 Weak Mutation 297: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:177 - ReplaceComparisonOperator == -> !=
   * 65 Weak Mutation 298: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:178 - InsertUnaryOp Negation
   * 66 Weak Mutation 299: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:178 - DeleteField: consumeFreeSlotZ
   * 67 Weak Mutation 300: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:178 - DeleteStatement: postInsertHook(Z)V
   * 68 Weak Mutation 301: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:181 - ReplaceVariable previous -> FREE
   * 69 Weak Mutation 302: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:181 - ReplaceVariable previous -> value
   * 70 Weak Mutation 303: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:181 - ReplaceVariable previous -> REMOVED
   * 71 gnu.trove.map.hash.THashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: root-Branch
   * 72 gnu.trove.map.hash.THashMap.setUp(I)I: root-Branch
   * 73 gnu.trove.map.hash.THashMap.<init>(IF)V: root-Branch
   * 74 gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I11 Branch 24 IFGE L171 - true
   * 75 gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I40 Branch 25 IFEQ L177 - false
   */

  @Test
  public void test0()  throws Throwable  {
      THashMap<Integer, String> tHashMap0 = new THashMap<Integer, String>(310081, 310081);
      tHashMap0.put((Integer) 310081, "}");
      String string0 = tHashMap0.putIfAbsent((Integer) 310081, "#2");
      assertEquals(false, tHashMap0.isEmpty());
      assertEquals("}", string0);
  }

  //Test case number: 1
  /*
   * 28 covered goals:
   * 1 Weak Mutation 253: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:161 - ReplaceComparisonOperator >= -> >
   * 2 Weak Mutation 222: gnu.trove.map.hash.THashMap.<init>(Lgnu/trove/map/hash/THashMap;)V:114 - ReplaceVariable map -> this
   * 3 Weak Mutation 223: gnu.trove.map.hash.THashMap.<init>(Lgnu/trove/map/hash/THashMap;)V:114 - DeleteStatement: putAll(Ljava/util/Map;)V
   * 4 Weak Mutation 222: gnu.trove.map.hash.THashMap.<init>(Lgnu/trove/map/hash/THashMap;)V:114 - ReplaceVariable map -> this
   * 5 Weak Mutation 223: gnu.trove.map.hash.THashMap.<init>(Lgnu/trove/map/hash/THashMap;)V:114 - DeleteStatement: putAll(Ljava/util/Map;)V
   * 6 Weak Mutation 253: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:161 - ReplaceComparisonOperator >= -> >
   * 7 Weak Mutation 274: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:171 - ReplaceComparisonOperator >= -> >
   * 8 Weak Mutation 266: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - ReplaceVariable value -> REMOVED
   * 9 Weak Mutation 265: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - ReplaceVariable value -> FREE
   * 10 Weak Mutation 270: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - InsertUnaryOp IINC -1 index
   * 11 Weak Mutation 268: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - InsertUnaryOp Negation of index
   * 12 Weak Mutation 269: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - InsertUnaryOp IINC 1 index
   * 13 Weak Mutation 728: gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V:551 - DeleteStatement: ensureCapacity(I)V
   * 14 Weak Mutation 729: gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V:553 - DeleteStatement: entrySet()Ljava/util/Set;
   * 15 Weak Mutation 730: gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V:553 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 16 Weak Mutation 731: gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V:553 - DeleteStatement: hasNext()Z
   * 17 Weak Mutation 732: gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V:553 - ReplaceComparisonOperator == -> !=
   * 18 Weak Mutation 727: gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V:551 - DeleteStatement: size()I
   * 19 Weak Mutation 811: gnu.trove.map.hash.THashMap$EntryView.iterator()Ljava/util/Iterator;:618 - DeleteField: this$0Lgnu/trove/map/hash/THashMap;
   * 20 gnu.trove.map.hash.THashMap$EntryView$EntryIterator.<init>(Lgnu/trove/map/hash/THashMap$EntryView;Lgnu/trove/map/hash/THashMap;)V: root-Branch
   * 21 gnu.trove.map.hash.THashMap.<init>()V: root-Branch
   * 22 gnu.trove.map.hash.THashMap.<init>(Lgnu/trove/map/hash/THashMap;)V: root-Branch
   * 23 gnu.trove.map.hash.THashMap.entrySet()Ljava/util/Set;: root-Branch
   * 24 gnu.trove.map.hash.THashMap.<init>(I)V: root-Branch
   * 25 gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: I9 Branch 23 IFGE L161 - true
   * 26 gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V: I15 Branch 60 IFEQ L553 - true
   * 27 gnu.trove.map.hash.THashMap$EntryView.iterator()Ljava/util/Iterator;: root-Branch
   * 28 gnu.trove.map.hash.THashMap$EntryView.<init>(Lgnu/trove/map/hash/THashMap;)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      THashMap<String, String> tHashMap0 = new THashMap<String, String>();
      THashMap<String, String> tHashMap1 = new THashMap<String, String>(tHashMap0);
      tHashMap1.putIfAbsent(" vs b=", " vs b=");
      assertEquals(false, tHashMap1.isEmpty());
      assertFalse(tHashMap0.equals(tHashMap1));
  }

  //Test case number: 2
  /*
   * 28 covered goals:
   * 1 Weak Mutation 275: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:171 - ReplaceComparisonOperator >= -> -1
   * 2 Weak Mutation 279: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:172 - ReplaceArithmeticOperator - -> %
   * 3 Weak Mutation 278: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:172 - ReplaceArithmeticOperator - -> +
   * 4 Weak Mutation 277: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:172 - ReplaceConstant - 1 -> 0
   * 5 Weak Mutation 276: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:172 - InsertUnaryOp Negation of index
   * 6 Weak Mutation 281: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:172 - ReplaceArithmeticOperator - -> *
   * 7 Weak Mutation 280: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:172 - ReplaceArithmeticOperator - -> /
   * 8 Weak Mutation 283: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:173 - DeleteField: _values[Ljava/lang/Object;
   * 9 Weak Mutation 282: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:173 - ReplaceVariable _values -> _set
   * 10 Weak Mutation 286: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:173 - InsertUnaryOp IINC -1 index
   * 11 Weak Mutation 285: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:173 - InsertUnaryOp IINC 1 index
   * 12 Weak Mutation 284: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:173 - InsertUnaryOp Negation of index
   * 13 Weak Mutation 287: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:174 - ReplaceConstant - 0 -> 1
   * 14 gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I11 Branch 24 IFGE L171 - false
   * 15 gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I40 Branch 25 IFEQ L177 - true
   * 16 Weak Mutation 275: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:171 - ReplaceComparisonOperator >= -> -1
   * 17 Weak Mutation 279: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:172 - ReplaceArithmeticOperator - -> %
   * 18 Weak Mutation 278: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:172 - ReplaceArithmeticOperator - -> +
   * 19 Weak Mutation 277: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:172 - ReplaceConstant - 1 -> 0
   * 20 Weak Mutation 276: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:172 - InsertUnaryOp Negation of index
   * 21 Weak Mutation 283: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:173 - DeleteField: _values[Ljava/lang/Object;
   * 22 Weak Mutation 282: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:173 - ReplaceVariable _values -> _set
   * 23 Weak Mutation 281: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:172 - ReplaceArithmeticOperator - -> *
   * 24 Weak Mutation 280: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:172 - ReplaceArithmeticOperator - -> /
   * 25 Weak Mutation 287: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:174 - ReplaceConstant - 0 -> 1
   * 26 Weak Mutation 286: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:173 - InsertUnaryOp IINC -1 index
   * 27 Weak Mutation 285: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:173 - InsertUnaryOp IINC 1 index
   * 28 Weak Mutation 284: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:173 - InsertUnaryOp Negation of index
   */

  @Test
  public void test2()  throws Throwable  {
      THashMap<String, Integer> tHashMap0 = new THashMap<String, Integer>(1222);
      tHashMap0.put("{}", (Integer) 1222);
      Integer integer0 = tHashMap0.put("{}", (Integer) null);
      assertEquals(false, tHashMap0.isEmpty());
      assertEquals(1222, (int)integer0);
  }

  //Test case number: 3
  /*
   * 6 covered goals:
   * 1 Weak Mutation 307: gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z:195 - ReplaceConstant - 0 -> 1
   * 2 gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z: I4 Branch 26 IFNE L194 - false
   * 3 Weak Mutation 305: gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z:194 - ReplaceVariable other -> REMOVED
   * 4 Weak Mutation 304: gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z:194 - ReplaceVariable other -> FREE
   * 5 Weak Mutation 307: gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z:195 - ReplaceConstant - 0 -> 1
   * 6 Weak Mutation 306: gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z:194 - ReplaceComparisonOperator != -> ==
   */

  @Test
  public void test3()  throws Throwable  {
      THashMap<String, Integer> tHashMap0 = new THashMap<String, Integer>(1222);
      Object[] objectArray0 = new Object[4];
      boolean boolean0 = tHashMap0.equals(objectArray0[1]);
      assertEquals(false, boolean0);
      assertEquals(2557, tHashMap0.capacity());
  }

  //Test case number: 4
  /*
   * 97 covered goals:
   * 1 Weak Mutation 58: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:222 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 2 Weak Mutation 57: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:222 - ReplaceConstant - ,  -> 
   * 3 Weak Mutation 56: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:222 - DeleteField: val$bufLjava/lang/StringBuilder;
   * 4 gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z: I4 Branch 7 IFEQ L219 - true
   * 5 Weak Mutation 55: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:220 - ReplaceConstant - 0 -> 1
   * 6 Weak Mutation 54: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:219 - ReplaceComparisonOperator == -> !=
   * 7 Weak Mutation 53: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:219 - DeleteField: firstZ
   * 8 Weak Mutation 52: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:219 - InsertUnaryOp Negation
   * 9 Weak Mutation 59: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:225 - DeleteField: val$bufLjava/lang/StringBuilder;
   * 10 Weak Mutation 63: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:226 - ReplaceConstant - = -> 
   * 11 Weak Mutation 62: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:226 - DeleteField: val$bufLjava/lang/StringBuilder;
   * 12 Weak Mutation 61: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:225 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
   * 13 Weak Mutation 60: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:225 - ReplaceVariable key -> value
   * 14 Weak Mutation 68: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:228 - ReplaceConstant - 1 -> 0
   * 15 Weak Mutation 64: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:226 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 16 Weak Mutation 65: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:227 - DeleteField: val$bufLjava/lang/StringBuilder;
   * 17 Weak Mutation 66: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:227 - ReplaceVariable value -> key
   * 18 Weak Mutation 67: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:227 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
   * 19 Weak Mutation 319: gnu.trove.map.hash.THashMap.toString()Ljava/lang/String;:213 - ReplaceConstant - { -> 
   * 20 Weak Mutation 322: gnu.trove.map.hash.THashMap.toString()Ljava/lang/String;:231 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 21 Weak Mutation 323: gnu.trove.map.hash.THashMap.toString()Ljava/lang/String;:232 - DeleteStatement: toString()Ljava/lang/String;
   * 22 Weak Mutation 320: gnu.trove.map.hash.THashMap.toString()Ljava/lang/String;:214 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z
   * 23 Weak Mutation 321: gnu.trove.map.hash.THashMap.toString()Ljava/lang/String;:231 - ReplaceConstant - } -> 
   * 24 Weak Mutation 29: gnu.trove.map.hash.THashMap$HashProcedure.<init>(Lgnu/trove/map/hash/THashMap;)V:237 - ReplaceConstant - 0 -> 1
   * 25 Weak Mutation 31: gnu.trove.map.hash.THashMap$HashProcedure.getHashCode()I:240 - InsertUnaryOp +1
   * 26 Weak Mutation 30: gnu.trove.map.hash.THashMap$HashProcedure.getHashCode()I:240 - InsertUnaryOp Negation
   * 27 Weak Mutation 32: gnu.trove.map.hash.THashMap$HashProcedure.getHashCode()I:240 - InsertUnaryOp -1
   * 28 Weak Mutation 55: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:220 - ReplaceConstant - 0 -> 1
   * 29 Weak Mutation 54: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:219 - ReplaceComparisonOperator == -> !=
   * 30 Weak Mutation 53: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:219 - DeleteField: firstZ
   * 31 Weak Mutation 52: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:219 - InsertUnaryOp Negation
   * 32 Weak Mutation 59: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:225 - DeleteField: val$bufLjava/lang/StringBuilder;
   * 33 Weak Mutation 58: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:222 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 34 Weak Mutation 57: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:222 - ReplaceConstant - ,  -> 
   * 35 Weak Mutation 56: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:222 - DeleteField: val$bufLjava/lang/StringBuilder;
   * 36 Weak Mutation 63: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:226 - ReplaceConstant - = -> 
   * 37 Weak Mutation 62: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:226 - DeleteField: val$bufLjava/lang/StringBuilder;
   * 38 Weak Mutation 61: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:225 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
   * 39 Weak Mutation 60: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:225 - ReplaceVariable key -> value
   * 40 Weak Mutation 68: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:228 - ReplaceConstant - 1 -> 0
   * 41 Weak Mutation 64: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:226 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 42 Weak Mutation 65: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:227 - DeleteField: val$bufLjava/lang/StringBuilder;
   * 43 Weak Mutation 66: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:227 - ReplaceVariable value -> key
   * 44 Weak Mutation 67: gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:227 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
   * 45 Weak Mutation 317: gnu.trove.map.hash.THashMap.hashCode()I:207 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z
   * 46 Weak Mutation 319: gnu.trove.map.hash.THashMap.toString()Ljava/lang/String;:213 - ReplaceConstant - { -> 
   * 47 Weak Mutation 318: gnu.trove.map.hash.THashMap.hashCode()I:208 - DeleteStatement: getHashCode()I
   * 48 Weak Mutation 322: gnu.trove.map.hash.THashMap.toString()Ljava/lang/String;:231 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 49 Weak Mutation 323: gnu.trove.map.hash.THashMap.toString()Ljava/lang/String;:232 - DeleteStatement: toString()Ljava/lang/String;
   * 50 Weak Mutation 320: gnu.trove.map.hash.THashMap.toString()Ljava/lang/String;:214 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z
   * 51 Weak Mutation 321: gnu.trove.map.hash.THashMap.toString()Ljava/lang/String;:231 - ReplaceConstant - } -> 
   * 52 Weak Mutation 372: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - ReplaceVariable keys -> values
   * 53 Weak Mutation 375: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp IINC 1 i
   * 54 Weak Mutation 374: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp Negation of i
   * 55 Weak Mutation 368: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:318 - InsertUnaryOp IINC -1 i
   * 56 Weak Mutation 371: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:318 - ReplaceComparisonOperator <= -> -1
   * 57 Weak Mutation 370: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:318 - ReplaceComparisonOperator <= -> <
   * 58 Weak Mutation 380: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - ReplaceVariable keys -> values
   * 59 Weak Mutation 383: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp IINC 1 i
   * 60 Weak Mutation 382: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp Negation of i
   * 61 Weak Mutation 377: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - ReplaceVariable FREE -> REMOVED
   * 62 Weak Mutation 376: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp IINC -1 i
   * 63 Weak Mutation 379: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - ReplaceComparisonOperator == -> !=
   * 64 Weak Mutation 378: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - DeleteField: FREELjava/lang/Object;
   * 65 Weak Mutation 364: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:318 - ReplaceVariable keys -> values
   * 66 Weak Mutation 366: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:318 - InsertUnaryOp Negation of i
   * 67 Weak Mutation 367: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:318 - InsertUnaryOp IINC 1 i
   * 68 Weak Mutation 361: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:316 - DeleteField: _set[Ljava/lang/Object;
   * 69 Weak Mutation 362: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:317 - ReplaceVariable _values -> _set
   * 70 Weak Mutation 363: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:317 - DeleteField: _values[Ljava/lang/Object;
   * 71 Weak Mutation 401: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:325 - ReplaceConstant - 1 -> 0
   * 72 Weak Mutation 395: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp Negation of i
   * 73 Weak Mutation 394: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - ReplaceVariable values -> _set
   * 74 Weak Mutation 393: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - ReplaceVariable values -> keys
   * 75 Weak Mutation 392: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp IINC -1 i
   * 76 Weak Mutation 399: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - ReplaceComparisonOperator != -> ==
   * 77 Weak Mutation 398: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - DeleteStatement: execute(Ljava/lang/Object;Ljava/lang/Object;)Z
   * 78 Weak Mutation 397: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp IINC -1 i
   * 79 Weak Mutation 396: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp IINC 1 i
   * 80 Weak Mutation 387: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - ReplaceComparisonOperator == -> !=
   * 81 Weak Mutation 386: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - DeleteField: REMOVEDLjava/lang/Object;
   * 82 Weak Mutation 385: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - ReplaceVariable REMOVED -> FREE
   * 83 Weak Mutation 384: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp IINC -1 i
   * 84 Weak Mutation 391: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp IINC 1 i
   * 85 Weak Mutation 390: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp Negation of i
   * 86 Weak Mutation 388: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - ReplaceVariable keys -> values
   * 87 gnu.trove.map.hash.THashMap$1.<init>(Lgnu/trove/map/hash/THashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 88 gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z: I4 Branch 7 IFEQ L219 - false
   * 89 gnu.trove.map.hash.THashMap.toString()Ljava/lang/String;: root-Branch
   * 90 gnu.trove.map.hash.THashMap.hashCode()I: root-Branch
   * 91 gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I18 Branch 32 IFLE L318 - true
   * 92 gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I18 Branch 32 IFLE L318 - false
   * 93 gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I25 Branch 33 IF_ACMPEQ L319 - true
   * 94 gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I25 Branch 33 IF_ACMPEQ L319 - false
   * 95 gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I30 Branch 34 IF_ACMPEQ L319 - false
   * 96 gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I39 Branch 35 IFNE L319 - true
   * 97 gnu.trove.map.hash.THashMap$HashProcedure.getHashCode()I: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>();
      THashMap<Object, Integer> tHashMap1 = new THashMap<Object, Integer>();
      tHashMap1.put((Object) tHashMap0, (Integer) 10);
      tHashMap1.put((Object) "/", (Integer) 10);
      String string0 = tHashMap1.toString();
      assertEquals(false, tHashMap1.isEmpty());
      assertEquals("{/=10, {}=10}", string0);
  }

  //Test case number: 5
  /*
   * 23 covered goals:
   * 1 Weak Mutation 37: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - DeleteField: hI
   * 2 Weak Mutation 46: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - ReplaceBitwiseOperator ^ -> |
   * 3 Weak Mutation 43: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - ReplaceVariable value -> key
   * 4 Weak Mutation 44: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - DeleteStatement: hashCode()I
   * 5 Weak Mutation 34: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - InsertUnaryOp Negation
   * 6 Weak Mutation 35: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - InsertUnaryOp +1
   * 7 Weak Mutation 33: gnu.trove.map.hash.THashMap$HashProcedure.getHashCode()I:240 - DeleteField: hI
   * 8 Weak Mutation 38: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - ReplaceVariable key -> value
   * 9 Weak Mutation 39: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - DeleteStatement: hash(Ljava/lang/Object;)I
   * 10 Weak Mutation 36: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - InsertUnaryOp -1
   * 11 Weak Mutation 37: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - DeleteField: hI
   * 12 Weak Mutation 43: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - ReplaceVariable value -> key
   * 13 Weak Mutation 40: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - ReplaceVariable value -> key
   * 14 Weak Mutation 41: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - ReplaceComparisonOperator != null -> = null
   * 15 Weak Mutation 46: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - ReplaceBitwiseOperator ^ -> |
   * 16 Weak Mutation 47: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - ReplaceArithmeticOperator + -> -
   * 17 Weak Mutation 44: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - DeleteStatement: hashCode()I
   * 18 Weak Mutation 45: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - ReplaceBitwiseOperator ^ -> &
   * 19 Weak Mutation 51: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:245 - ReplaceConstant - 1 -> 0
   * 20 Weak Mutation 50: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - ReplaceArithmeticOperator + -> *
   * 21 Weak Mutation 49: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - ReplaceArithmeticOperator + -> /
   * 22 Weak Mutation 48: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - ReplaceArithmeticOperator + -> %
   * 23 gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z: I8 Branch 6 IFNONNULL L244 - true
   */

  @Test
  public void test5()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>();
      THashMap<Object, Integer> tHashMap1 = new THashMap<Object, Integer>();
      tHashMap1.put((Object) tHashMap0, (Integer) 10);
      tHashMap1.put((Object) "/", (Integer) 10);
      int int0 = tHashMap1.hashCode();
      assertEquals(2, tHashMap1.size());
      assertEquals(47, int0);
  }

  //Test case number: 6
  /*
   * 21 covered goals:
   * 1 Weak Mutation 42: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - ReplaceConstant - 0 -> 1
   * 2 gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z: I8 Branch 6 IFNONNULL L244 - false
   * 3 Weak Mutation 34: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - InsertUnaryOp Negation
   * 4 Weak Mutation 35: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - InsertUnaryOp +1
   * 5 Weak Mutation 33: gnu.trove.map.hash.THashMap$HashProcedure.getHashCode()I:240 - DeleteField: hI
   * 6 Weak Mutation 38: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - ReplaceVariable key -> value
   * 7 Weak Mutation 39: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - DeleteStatement: hash(Ljava/lang/Object;)I
   * 8 Weak Mutation 36: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - InsertUnaryOp -1
   * 9 Weak Mutation 40: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - ReplaceVariable value -> key
   * 10 Weak Mutation 41: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - ReplaceComparisonOperator != null -> = null
   * 11 Weak Mutation 47: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - ReplaceArithmeticOperator + -> -
   * 12 Weak Mutation 45: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - ReplaceBitwiseOperator ^ -> &
   * 13 Weak Mutation 51: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:245 - ReplaceConstant - 1 -> 0
   * 14 Weak Mutation 50: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - ReplaceArithmeticOperator + -> *
   * 15 Weak Mutation 49: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - ReplaceArithmeticOperator + -> /
   * 16 Weak Mutation 48: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - ReplaceArithmeticOperator + -> %
   * 17 Weak Mutation 246: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:160 - ReplaceVariable key -> value
   * 18 Weak Mutation 267: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - ReplaceVariable value -> key
   * 19 Weak Mutation 42: gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:244 - ReplaceConstant - 0 -> 1
   * 20 Weak Mutation 252: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:161 - ReplaceComparisonOperator >= -> ==
   * 21 Weak Mutation 267: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - ReplaceVariable value -> key
   */

  @Test
  public void test6()  throws Throwable  {
      THashMap<String, Integer> tHashMap0 = new THashMap<String, Integer>();
      tHashMap0.putIfAbsent("{/=10, {}=10}", (Integer) null);
      int int0 = tHashMap0.hashCode();
      assertEquals(1, tHashMap0.size());
      assertEquals(1548792127, int0);
  }

  //Test case number: 7
  /*
   * 196 covered goals:
   * 1 Weak Mutation 0: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:262 - ReplaceVariable value -> key
   * 2 Weak Mutation 1: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:262 - ReplaceComparisonOperator != null -> = null
   * 3 Weak Mutation 9: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:266 - DeleteField: _otherMapLjava/util/Map;
   * 4 Weak Mutation 10: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:266 - ReplaceVariable key -> value
   * 5 Weak Mutation 11: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:266 - DeleteStatement: get(Ljava/lang/Object;)Ljava/lang/Object;
   * 6 Weak Mutation 13: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:267 - ReplaceVariable oValue -> key
   * 7 Weak Mutation 15: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:267 - ReplaceVariable value -> key
   * 8 Weak Mutation 16: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:267 - ReplaceComparisonOperator == -> !=
   * 9 Weak Mutation 27: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:267 - ReplaceConstant - 1 -> 0
   * 10 Weak Mutation 493: gnu.trove.map.hash.THashMap.rehash(I)V:384 - DeleteField: _set[Ljava/lang/Object;
   * 11 Weak Mutation 494: gnu.trove.map.hash.THashMap.rehash(I)V:385 - DeleteStatement: size()I
   * 12 Weak Mutation 495: gnu.trove.map.hash.THashMap.rehash(I)V:386 - DeleteField: _set[Ljava/lang/Object;
   * 13 Weak Mutation 496: gnu.trove.map.hash.THashMap.rehash(I)V:387 - ReplaceVariable _values -> _set
   * 14 Weak Mutation 497: gnu.trove.map.hash.THashMap.rehash(I)V:387 - DeleteField: _values[Ljava/lang/Object;
   * 15 Weak Mutation 500: gnu.trove.map.hash.THashMap.rehash(I)V:389 - InsertUnaryOp Negation of newCapacity
   * 16 Weak Mutation 501: gnu.trove.map.hash.THashMap.rehash(I)V:389 - InsertUnaryOp IINC 1 newCapacity
   * 17 Weak Mutation 502: gnu.trove.map.hash.THashMap.rehash(I)V:389 - InsertUnaryOp IINC -1 newCapacity
   * 18 Weak Mutation 498: gnu.trove.map.hash.THashMap.rehash(I)V:389 - ReplaceVariable newCapacity -> oldCapacity
   * 19 Weak Mutation 499: gnu.trove.map.hash.THashMap.rehash(I)V:389 - ReplaceVariable newCapacity -> oldSize
   * 20 Weak Mutation 504: gnu.trove.map.hash.THashMap.rehash(I)V:390 - ReplaceVariable FREE -> REMOVED
   * 21 Weak Mutation 505: gnu.trove.map.hash.THashMap.rehash(I)V:390 - DeleteField: FREELjava/lang/Object;
   * 22 Weak Mutation 506: gnu.trove.map.hash.THashMap.rehash(I)V:390 - DeleteStatement: fill([Ljava/lang/Object;Ljava/lang/Object;)V
   * 23 Weak Mutation 503: gnu.trove.map.hash.THashMap.rehash(I)V:390 - DeleteField: _set[Ljava/lang/Object;
   * 24 Weak Mutation 508: gnu.trove.map.hash.THashMap.rehash(I)V:391 - ReplaceVariable newCapacity -> oldSize
   * 25 Weak Mutation 509: gnu.trove.map.hash.THashMap.rehash(I)V:391 - InsertUnaryOp Negation of newCapacity
   * 26 Weak Mutation 510: gnu.trove.map.hash.THashMap.rehash(I)V:391 - InsertUnaryOp IINC 1 newCapacity
   * 27 Weak Mutation 511: gnu.trove.map.hash.THashMap.rehash(I)V:391 - InsertUnaryOp IINC -1 newCapacity
   * 28 Weak Mutation 507: gnu.trove.map.hash.THashMap.rehash(I)V:391 - ReplaceVariable newCapacity -> oldCapacity
   * 29 Weak Mutation 512: gnu.trove.map.hash.THashMap.rehash(I)V:395 - ReplaceConstant - 0 -> 1
   * 30 Weak Mutation 516: gnu.trove.map.hash.THashMap.rehash(I)V:396 - InsertUnaryOp Negation of oldCapacity
   * 31 Weak Mutation 517: gnu.trove.map.hash.THashMap.rehash(I)V:396 - InsertUnaryOp IINC 1 oldCapacity
   * 32 Weak Mutation 518: gnu.trove.map.hash.THashMap.rehash(I)V:396 - InsertUnaryOp IINC -1 oldCapacity
   * 33 Weak Mutation 519: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> newCapacity
   * 34 Weak Mutation 513: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable oldCapacity -> newCapacity
   * 35 Weak Mutation 514: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable oldCapacity -> count
   * 36 Weak Mutation 515: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable oldCapacity -> oldSize
   * 37 Weak Mutation 524: gnu.trove.map.hash.THashMap.rehash(I)V:396 - InsertUnaryOp IINC 1 i
   * 38 Weak Mutation 525: gnu.trove.map.hash.THashMap.rehash(I)V:396 - InsertUnaryOp IINC -1 i
   * 39 Weak Mutation 526: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> newCapacity
   * 40 Weak Mutation 527: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> oldCapacity
   * 41 Weak Mutation 520: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> oldCapacity
   * 42 Weak Mutation 521: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> count
   * 43 Weak Mutation 522: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> oldSize
   * 44 Weak Mutation 523: gnu.trove.map.hash.THashMap.rehash(I)V:396 - InsertUnaryOp Negation of i
   * 45 Weak Mutation 532: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceComparisonOperator <= -> -1
   * 46 Weak Mutation 529: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> oldSize
   * 47 Weak Mutation 528: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> count
   * 48 Weak Mutation 531: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceComparisonOperator <= -> <
   * 49 Weak Mutation 533: gnu.trove.map.hash.THashMap.rehash(I)V:397 - ReplaceVariable oldKeys -> oldVals
   * 50 Weak Mutation 535: gnu.trove.map.hash.THashMap.rehash(I)V:397 - ReplaceVariable i -> newCapacity
   * 51 Weak Mutation 534: gnu.trove.map.hash.THashMap.rehash(I)V:397 - ReplaceVariable oldKeys -> _set
   * 52 Weak Mutation 541: gnu.trove.map.hash.THashMap.rehash(I)V:397 - InsertUnaryOp IINC -1 i
   * 53 Weak Mutation 540: gnu.trove.map.hash.THashMap.rehash(I)V:397 - InsertUnaryOp IINC 1 i
   * 54 Weak Mutation 537: gnu.trove.map.hash.THashMap.rehash(I)V:397 - ReplaceVariable i -> count
   * 55 Weak Mutation 536: gnu.trove.map.hash.THashMap.rehash(I)V:397 - ReplaceVariable i -> oldCapacity
   * 56 Weak Mutation 539: gnu.trove.map.hash.THashMap.rehash(I)V:397 - InsertUnaryOp Negation of i
   * 57 Weak Mutation 538: gnu.trove.map.hash.THashMap.rehash(I)V:397 - ReplaceVariable i -> oldSize
   * 58 Weak Mutation 550: gnu.trove.map.hash.THashMap.rehash(I)V:399 - DeleteField: REMOVEDLjava/lang/Object;
   * 59 Weak Mutation 551: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceComparisonOperator != -> ==
   * 60 Weak Mutation 548: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceVariable o -> REMOVED
   * 61 Weak Mutation 549: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceVariable REMOVED -> FREE
   * 62 Weak Mutation 546: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceComparisonOperator == -> !=
   * 63 Weak Mutation 547: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceVariable o -> FREE
   * 64 Weak Mutation 544: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceVariable FREE -> REMOVED
   * 65 Weak Mutation 545: gnu.trove.map.hash.THashMap.rehash(I)V:399 - DeleteField: FREELjava/lang/Object;
   * 66 Weak Mutation 543: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceVariable o -> REMOVED
   * 67 Weak Mutation 542: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceVariable o -> FREE
   * 68 Weak Mutation 554: gnu.trove.map.hash.THashMap.rehash(I)V:401 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 69 Weak Mutation 552: gnu.trove.map.hash.THashMap.rehash(I)V:401 - ReplaceVariable o -> FREE
   * 70 Weak Mutation 553: gnu.trove.map.hash.THashMap.rehash(I)V:401 - ReplaceVariable o -> REMOVED
   * 71 Weak Mutation 558: gnu.trove.map.hash.THashMap.rehash(I)V:402 - ReplaceVariable index -> oldSize
   * 72 Weak Mutation 556: gnu.trove.map.hash.THashMap.rehash(I)V:402 - ReplaceVariable index -> oldCapacity
   * 73 Weak Mutation 555: gnu.trove.map.hash.THashMap.rehash(I)V:402 - ReplaceVariable index -> newCapacity
   * 74 Weak Mutation 564: gnu.trove.map.hash.THashMap.rehash(I)V:402 - ReplaceComparisonOperator >= -> >
   * 75 Weak Mutation 562: gnu.trove.map.hash.THashMap.rehash(I)V:402 - InsertUnaryOp IINC -1 index
   * 76 Weak Mutation 561: gnu.trove.map.hash.THashMap.rehash(I)V:402 - InsertUnaryOp IINC 1 index
   * 77 Weak Mutation 560: gnu.trove.map.hash.THashMap.rehash(I)V:402 - InsertUnaryOp Negation of index
   * 78 Weak Mutation 582: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:423 - ReplaceVariable key -> FREE
   * 79 Weak Mutation 583: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:423 - ReplaceVariable key -> REMOVED
   * 80 Weak Mutation 584: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:423 - DeleteStatement: index(Ljava/lang/Object;)I
   * 81 Weak Mutation 585: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp Negation of index
   * 82 Weak Mutation 586: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp IINC 1 index
   * 83 Weak Mutation 587: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp IINC -1 index
   * 84 Weak Mutation 589: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - ReplaceComparisonOperator >= -> >
   * 85 Weak Mutation 591: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - ReplaceVariable _values -> _set
   * 86 Weak Mutation 593: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp Negation of index
   * 87 Weak Mutation 592: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - DeleteField: _values[Ljava/lang/Object;
   * 88 Weak Mutation 595: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp IINC -1 index
   * 89 Weak Mutation 594: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp IINC 1 index
   * 90 gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z: I3 Branch 1 IFNONNULL L262 - true
   * 91 gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z: I24 Branch 3 IF_ACMPEQ L267 - true
   * 92 gnu.trove.map.hash.THashMap.rehash(I)V: I51 Branch 43 IFLE L396 - true
   * 93 gnu.trove.map.hash.THashMap.rehash(I)V: I51 Branch 43 IFLE L396 - false
   * 94 gnu.trove.map.hash.THashMap.rehash(I)V: I62 Branch 44 IF_ACMPEQ L399 - true
   * 95 gnu.trove.map.hash.THashMap.rehash(I)V: I62 Branch 44 IF_ACMPEQ L399 - false
   * 96 gnu.trove.map.hash.THashMap.rehash(I)V: I65 Branch 45 IF_ACMPNE L399 - true
   * 97 gnu.trove.map.hash.THashMap.rehash(I)V: I76 Branch 46 IFGE L402 - true
   * 98 gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;: I9 Branch 47 IFGE L424 - true
   * 99 Weak Mutation 0: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:262 - ReplaceVariable value -> key
   * 100 Weak Mutation 1: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:262 - ReplaceComparisonOperator != null -> = null
   * 101 Weak Mutation 9: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:266 - DeleteField: _otherMapLjava/util/Map;
   * 102 Weak Mutation 10: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:266 - ReplaceVariable key -> value
   * 103 Weak Mutation 11: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:266 - DeleteStatement: get(Ljava/lang/Object;)Ljava/lang/Object;
   * 104 Weak Mutation 13: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:267 - ReplaceVariable oValue -> key
   * 105 Weak Mutation 15: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:267 - ReplaceVariable value -> key
   * 106 Weak Mutation 16: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:267 - ReplaceComparisonOperator == -> !=
   * 107 Weak Mutation 27: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:267 - ReplaceConstant - 1 -> 0
   * 108 Weak Mutation 309: gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z:197 - ReplaceVariable other -> REMOVED
   * 109 Weak Mutation 308: gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z:197 - ReplaceVariable other -> FREE
   * 110 Weak Mutation 311: gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z:198 - DeleteStatement: size()I
   * 111 Weak Mutation 310: gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z:198 - DeleteStatement: size()I
   * 112 Weak Mutation 313: gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z:198 - ReplaceComparisonOperator == -> -2
   * 113 Weak Mutation 316: gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z:201 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z
   * 114 Weak Mutation 508: gnu.trove.map.hash.THashMap.rehash(I)V:391 - ReplaceVariable newCapacity -> oldSize
   * 115 Weak Mutation 509: gnu.trove.map.hash.THashMap.rehash(I)V:391 - InsertUnaryOp Negation of newCapacity
   * 116 Weak Mutation 510: gnu.trove.map.hash.THashMap.rehash(I)V:391 - InsertUnaryOp IINC 1 newCapacity
   * 117 Weak Mutation 511: gnu.trove.map.hash.THashMap.rehash(I)V:391 - InsertUnaryOp IINC -1 newCapacity
   * 118 Weak Mutation 504: gnu.trove.map.hash.THashMap.rehash(I)V:390 - ReplaceVariable FREE -> REMOVED
   * 119 Weak Mutation 505: gnu.trove.map.hash.THashMap.rehash(I)V:390 - DeleteField: FREELjava/lang/Object;
   * 120 Weak Mutation 506: gnu.trove.map.hash.THashMap.rehash(I)V:390 - DeleteStatement: fill([Ljava/lang/Object;Ljava/lang/Object;)V
   * 121 Weak Mutation 507: gnu.trove.map.hash.THashMap.rehash(I)V:391 - ReplaceVariable newCapacity -> oldCapacity
   * 122 Weak Mutation 500: gnu.trove.map.hash.THashMap.rehash(I)V:389 - InsertUnaryOp Negation of newCapacity
   * 123 Weak Mutation 501: gnu.trove.map.hash.THashMap.rehash(I)V:389 - InsertUnaryOp IINC 1 newCapacity
   * 124 Weak Mutation 502: gnu.trove.map.hash.THashMap.rehash(I)V:389 - InsertUnaryOp IINC -1 newCapacity
   * 125 Weak Mutation 503: gnu.trove.map.hash.THashMap.rehash(I)V:390 - DeleteField: _set[Ljava/lang/Object;
   * 126 Weak Mutation 496: gnu.trove.map.hash.THashMap.rehash(I)V:387 - ReplaceVariable _values -> _set
   * 127 Weak Mutation 497: gnu.trove.map.hash.THashMap.rehash(I)V:387 - DeleteField: _values[Ljava/lang/Object;
   * 128 Weak Mutation 498: gnu.trove.map.hash.THashMap.rehash(I)V:389 - ReplaceVariable newCapacity -> oldCapacity
   * 129 Weak Mutation 499: gnu.trove.map.hash.THashMap.rehash(I)V:389 - ReplaceVariable newCapacity -> oldSize
   * 130 Weak Mutation 493: gnu.trove.map.hash.THashMap.rehash(I)V:384 - DeleteField: _set[Ljava/lang/Object;
   * 131 Weak Mutation 495: gnu.trove.map.hash.THashMap.rehash(I)V:386 - DeleteField: _set[Ljava/lang/Object;
   * 132 Weak Mutation 494: gnu.trove.map.hash.THashMap.rehash(I)V:385 - DeleteStatement: size()I
   * 133 Weak Mutation 550: gnu.trove.map.hash.THashMap.rehash(I)V:399 - DeleteField: REMOVEDLjava/lang/Object;
   * 134 Weak Mutation 551: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceComparisonOperator != -> ==
   * 135 Weak Mutation 548: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceVariable o -> REMOVED
   * 136 Weak Mutation 549: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceVariable REMOVED -> FREE
   * 137 Weak Mutation 546: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceComparisonOperator == -> !=
   * 138 Weak Mutation 547: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceVariable o -> FREE
   * 139 Weak Mutation 544: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceVariable FREE -> REMOVED
   * 140 Weak Mutation 545: gnu.trove.map.hash.THashMap.rehash(I)V:399 - DeleteField: FREELjava/lang/Object;
   * 141 Weak Mutation 558: gnu.trove.map.hash.THashMap.rehash(I)V:402 - ReplaceVariable index -> oldSize
   * 142 Weak Mutation 556: gnu.trove.map.hash.THashMap.rehash(I)V:402 - ReplaceVariable index -> oldCapacity
   * 143 Weak Mutation 554: gnu.trove.map.hash.THashMap.rehash(I)V:401 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 144 Weak Mutation 555: gnu.trove.map.hash.THashMap.rehash(I)V:402 - ReplaceVariable index -> newCapacity
   * 145 Weak Mutation 552: gnu.trove.map.hash.THashMap.rehash(I)V:401 - ReplaceVariable o -> FREE
   * 146 Weak Mutation 553: gnu.trove.map.hash.THashMap.rehash(I)V:401 - ReplaceVariable o -> REMOVED
   * 147 Weak Mutation 564: gnu.trove.map.hash.THashMap.rehash(I)V:402 - ReplaceComparisonOperator >= -> >
   * 148 Weak Mutation 562: gnu.trove.map.hash.THashMap.rehash(I)V:402 - InsertUnaryOp IINC -1 index
   * 149 Weak Mutation 561: gnu.trove.map.hash.THashMap.rehash(I)V:402 - InsertUnaryOp IINC 1 index
   * 150 Weak Mutation 560: gnu.trove.map.hash.THashMap.rehash(I)V:402 - InsertUnaryOp Negation of index
   * 151 Weak Mutation 516: gnu.trove.map.hash.THashMap.rehash(I)V:396 - InsertUnaryOp Negation of oldCapacity
   * 152 Weak Mutation 517: gnu.trove.map.hash.THashMap.rehash(I)V:396 - InsertUnaryOp IINC 1 oldCapacity
   * 153 Weak Mutation 518: gnu.trove.map.hash.THashMap.rehash(I)V:396 - InsertUnaryOp IINC -1 oldCapacity
   * 154 Weak Mutation 519: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> newCapacity
   * 155 Weak Mutation 512: gnu.trove.map.hash.THashMap.rehash(I)V:395 - ReplaceConstant - 0 -> 1
   * 156 Weak Mutation 513: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable oldCapacity -> newCapacity
   * 157 Weak Mutation 514: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable oldCapacity -> count
   * 158 Weak Mutation 515: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable oldCapacity -> oldSize
   * 159 Weak Mutation 524: gnu.trove.map.hash.THashMap.rehash(I)V:396 - InsertUnaryOp IINC 1 i
   * 160 Weak Mutation 525: gnu.trove.map.hash.THashMap.rehash(I)V:396 - InsertUnaryOp IINC -1 i
   * 161 Weak Mutation 526: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> newCapacity
   * 162 Weak Mutation 527: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> oldCapacity
   * 163 Weak Mutation 520: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> oldCapacity
   * 164 Weak Mutation 521: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> count
   * 165 Weak Mutation 522: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> oldSize
   * 166 Weak Mutation 523: gnu.trove.map.hash.THashMap.rehash(I)V:396 - InsertUnaryOp Negation of i
   * 167 Weak Mutation 533: gnu.trove.map.hash.THashMap.rehash(I)V:397 - ReplaceVariable oldKeys -> oldVals
   * 168 Weak Mutation 532: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceComparisonOperator <= -> -1
   * 169 Weak Mutation 535: gnu.trove.map.hash.THashMap.rehash(I)V:397 - ReplaceVariable i -> newCapacity
   * 170 Weak Mutation 534: gnu.trove.map.hash.THashMap.rehash(I)V:397 - ReplaceVariable oldKeys -> _set
   * 171 Weak Mutation 529: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> oldSize
   * 172 Weak Mutation 528: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> count
   * 173 Weak Mutation 531: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceComparisonOperator <= -> <
   * 174 Weak Mutation 541: gnu.trove.map.hash.THashMap.rehash(I)V:397 - InsertUnaryOp IINC -1 i
   * 175 Weak Mutation 540: gnu.trove.map.hash.THashMap.rehash(I)V:397 - InsertUnaryOp IINC 1 i
   * 176 Weak Mutation 543: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceVariable o -> REMOVED
   * 177 Weak Mutation 542: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceVariable o -> FREE
   * 178 Weak Mutation 537: gnu.trove.map.hash.THashMap.rehash(I)V:397 - ReplaceVariable i -> count
   * 179 Weak Mutation 536: gnu.trove.map.hash.THashMap.rehash(I)V:397 - ReplaceVariable i -> oldCapacity
   * 180 Weak Mutation 539: gnu.trove.map.hash.THashMap.rehash(I)V:397 - InsertUnaryOp Negation of i
   * 181 Weak Mutation 538: gnu.trove.map.hash.THashMap.rehash(I)V:397 - ReplaceVariable i -> oldSize
   * 182 Weak Mutation 582: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:423 - ReplaceVariable key -> FREE
   * 183 Weak Mutation 583: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:423 - ReplaceVariable key -> REMOVED
   * 184 Weak Mutation 584: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:423 - DeleteStatement: index(Ljava/lang/Object;)I
   * 185 Weak Mutation 585: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp Negation of index
   * 186 Weak Mutation 586: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp IINC 1 index
   * 187 Weak Mutation 587: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp IINC -1 index
   * 188 Weak Mutation 589: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - ReplaceComparisonOperator >= -> >
   * 189 Weak Mutation 591: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - ReplaceVariable _values -> _set
   * 190 Weak Mutation 593: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp Negation of index
   * 191 Weak Mutation 592: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - DeleteField: _values[Ljava/lang/Object;
   * 192 Weak Mutation 595: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp IINC -1 index
   * 193 Weak Mutation 594: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp IINC 1 index
   * 194 gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z: I4 Branch 26 IFNE L194 - true
   * 195 gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z: I20 Branch 27 IF_ICMPEQ L198 - true
   * 196 gnu.trove.map.hash.THashMap$EqProcedure.<init>(Lgnu/trove/map/hash/THashMap;Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>((-108), (-1044.6168F));
      tHashMap0.put((Integer) null, (Integer) (-108));
      boolean boolean0 = tHashMap0.equals((Object) tHashMap0);
      assertEquals(false, tHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 8
  /*
   * 26 covered goals:
   * 1 Weak Mutation 2: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:262 - DeleteField: _otherMapLjava/util/Map;
   * 2 Weak Mutation 3: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:262 - ReplaceVariable key -> value
   * 3 Weak Mutation 4: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:262 - DeleteStatement: mapContainsKey(Ljava/util/Map;Ljava/lang/Object;)I
   * 4 Weak Mutation 5: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:262 - ReplaceComparisonOperator > -> !=
   * 5 Weak Mutation 8: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:263 - ReplaceConstant - 0 -> 1
   * 6 Weak Mutation 400: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - ReplaceConstant - 0 -> 1
   * 7 Weak Mutation 125: gnu.trove.map.hash.THashMap$MapBackedView.size()I:718 - DeleteStatement: size()I
   * 8 Weak Mutation 124: gnu.trove.map.hash.THashMap$MapBackedView.size()I:718 - DeleteField: this$0Lgnu/trove/map/hash/THashMap;
   * 9 Weak Mutation 803: gnu.trove.map.hash.THashMap$KeyView.iterator()Ljava/util/Iterator;:798 - DeleteField: this$0Lgnu/trove/map/hash/THashMap;
   * 10 gnu.trove.map.hash.THashMap$KeyView.<init>(Lgnu/trove/map/hash/THashMap;)V: root-Branch
   * 11 gnu.trove.map.hash.THashMap$KeyView.iterator()Ljava/util/Iterator;: root-Branch
   * 12 gnu.trove.map.hash.THashMap.keySet()Ljava/util/Set;: root-Branch
   * 13 gnu.trove.map.hash.THashMap$MapBackedView.size()I: root-Branch
   * 14 gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z: I3 Branch 1 IFNONNULL L262 - false
   * 15 gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z: I8 Branch 2 IFGT L262 - false
   * 16 gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I39 Branch 35 IFNE L319 - false
   * 17 Weak Mutation 0: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:262 - ReplaceVariable value -> key
   * 18 Weak Mutation 2: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:262 - DeleteField: _otherMapLjava/util/Map;
   * 19 Weak Mutation 3: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:262 - ReplaceVariable key -> value
   * 20 Weak Mutation 4: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:262 - DeleteStatement: mapContainsKey(Ljava/util/Map;Ljava/lang/Object;)I
   * 21 Weak Mutation 5: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:262 - ReplaceComparisonOperator > -> !=
   * 22 Weak Mutation 8: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:263 - ReplaceConstant - 0 -> 1
   * 23 Weak Mutation 125: gnu.trove.map.hash.THashMap$MapBackedView.size()I:718 - DeleteStatement: size()I
   * 24 Weak Mutation 124: gnu.trove.map.hash.THashMap$MapBackedView.size()I:718 - DeleteField: this$0Lgnu/trove/map/hash/THashMap;
   * 25 Weak Mutation 400: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - ReplaceConstant - 0 -> 1
   * 26 Weak Mutation 803: gnu.trove.map.hash.THashMap$KeyView.iterator()Ljava/util/Iterator;:798 - DeleteField: this$0Lgnu/trove/map/hash/THashMap;
   */

  @Test
  public void test8()  throws Throwable  {
      THashMap<String, Integer> tHashMap0 = new THashMap<String, Integer>(1222);
      THashMap<Integer, Integer> tHashMap1 = new THashMap<Integer, Integer>(1222);
      tHashMap1.putIfAbsent((Integer) 1222, (Integer) 1222);
      tHashMap0.put("{}", (Integer) null);
      boolean boolean0 = tHashMap0.equals((Object) tHashMap1);
      assertEquals(1, tHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 9
  /*
   * 25 covered goals:
   * 1 Weak Mutation 12: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:267 - ReplaceVariable oValue -> value
   * 2 Weak Mutation 14: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:267 - ReplaceVariable value -> oValue
   * 3 Weak Mutation 17: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:267 - ReplaceVariable oValue -> value
   * 4 Weak Mutation 19: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:267 - ReplaceComparisonOperator = null -> != null
   * 5 Weak Mutation 18: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:267 - ReplaceVariable oValue -> key
   * 6 Weak Mutation 28: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:267 - ReplaceConstant - 0 -> 1
   * 7 Weak Mutation 559: gnu.trove.map.hash.THashMap.rehash(I)V:402 - ReplaceVariable index -> i
   * 8 Weak Mutation 557: gnu.trove.map.hash.THashMap.rehash(I)V:402 - ReplaceVariable index -> count
   * 9 Weak Mutation 563: gnu.trove.map.hash.THashMap.rehash(I)V:402 - ReplaceComparisonOperator >= -> ==
   * 10 Weak Mutation 590: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - ReplaceComparisonOperator >= -> -1
   * 11 gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z: I24 Branch 3 IF_ACMPEQ L267 - false
   * 12 gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z: I26 Branch 4 IFNULL L267 - true
   * 13 gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;: I9 Branch 47 IFGE L424 - false
   * 14 Weak Mutation 13: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:267 - ReplaceVariable oValue -> key
   * 15 Weak Mutation 400: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:322 - ReplaceConstant - 0 -> 1
   * 16 Weak Mutation 12: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:267 - ReplaceVariable oValue -> value
   * 17 Weak Mutation 14: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:267 - ReplaceVariable value -> oValue
   * 18 Weak Mutation 17: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:267 - ReplaceVariable oValue -> value
   * 19 Weak Mutation 19: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:267 - ReplaceComparisonOperator = null -> != null
   * 20 Weak Mutation 18: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:267 - ReplaceVariable oValue -> key
   * 21 Weak Mutation 28: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:267 - ReplaceConstant - 0 -> 1
   * 22 Weak Mutation 559: gnu.trove.map.hash.THashMap.rehash(I)V:402 - ReplaceVariable index -> i
   * 23 Weak Mutation 557: gnu.trove.map.hash.THashMap.rehash(I)V:402 - ReplaceVariable index -> count
   * 24 Weak Mutation 563: gnu.trove.map.hash.THashMap.rehash(I)V:402 - ReplaceComparisonOperator >= -> ==
   * 25 Weak Mutation 590: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - ReplaceComparisonOperator >= -> -1
   */

  @Test
  public void test9()  throws Throwable  {
      THashMap<String, Integer> tHashMap0 = new THashMap<String, Integer>();
      THashMap<Integer, Integer> tHashMap1 = new THashMap<Integer, Integer>((-1897), (-1058.4119F));
      tHashMap0.put("Could not find insertion index for null key. Key set full!?!!", (Integer) (-1897));
      tHashMap1.put((Integer) (-1897), (Integer) (-1897));
      boolean boolean0 = tHashMap1.equals((Object) tHashMap0);
      assertEquals(false, tHashMap1.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 10
  /*
   * 3 covered goals:
   * 1 Weak Mutation 324: gnu.trove.map.hash.THashMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z:281 - DeleteStatement: forEach(Lgnu/trove/procedure/TObjectProcedure;)Z
   * 2 gnu.trove.map.hash.THashMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   * 3 Weak Mutation 324: gnu.trove.map.hash.THashMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z:281 - DeleteStatement: forEach(Lgnu/trove/procedure/TObjectProcedure;)Z
   */

  @Test
  public void test10()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>(572);
      Integer[] integerArray0 = new Integer[9];
      ToObjectArrayProceedure<Integer> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Integer>(integerArray0);
      boolean boolean0 = tHashMap0.forEachKey((TObjectProcedure<? super Integer>) toObjectArrayProceedure0);
      assertEquals(true, boolean0);
      assertEquals(1201, tHashMap0.capacity());
  }

  //Test case number: 11
  /*
   * 70 covered goals:
   * 1 Weak Mutation 351: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - ReplaceComparisonOperator == -> !=
   * 2 Weak Mutation 350: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - DeleteField: REMOVEDLjava/lang/Object;
   * 3 Weak Mutation 349: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - ReplaceVariable REMOVED -> FREE
   * 4 Weak Mutation 348: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - InsertUnaryOp IINC -1 i
   * 5 Weak Mutation 347: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - InsertUnaryOp IINC 1 i
   * 6 Weak Mutation 346: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - InsertUnaryOp Negation of i
   * 7 Weak Mutation 344: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - ReplaceVariable set -> values
   * 8 Weak Mutation 356: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - InsertUnaryOp IINC -1 i
   * 9 Weak Mutation 357: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - DeleteStatement: execute(Ljava/lang/Object;)Z
   * 10 Weak Mutation 358: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - ReplaceComparisonOperator != -> ==
   * 11 Weak Mutation 352: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - ReplaceVariable values -> set
   * 12 Weak Mutation 353: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - ReplaceVariable values -> _set
   * 13 Weak Mutation 354: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - InsertUnaryOp Negation of i
   * 14 Weak Mutation 355: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - InsertUnaryOp IINC 1 i
   * 15 gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I25 Branch 29 IF_ACMPEQ L296 - false
   * 16 gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I30 Branch 30 IF_ACMPEQ L296 - false
   * 17 gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I36 Branch 31 IFNE L296 - true
   * 18 Weak Mutation 343: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - ReplaceComparisonOperator == -> !=
   * 19 Weak Mutation 342: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - DeleteField: FREELjava/lang/Object;
   * 20 Weak Mutation 341: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - ReplaceVariable FREE -> REMOVED
   * 21 Weak Mutation 340: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - InsertUnaryOp IINC -1 i
   * 22 Weak Mutation 339: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - InsertUnaryOp IINC 1 i
   * 23 Weak Mutation 338: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - InsertUnaryOp Negation of i
   * 24 Weak Mutation 336: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - ReplaceVariable set -> values
   * 25 Weak Mutation 326: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:293 - DeleteField: _values[Ljava/lang/Object;
   * 26 Weak Mutation 327: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:294 - DeleteField: _set[Ljava/lang/Object;
   * 27 Weak Mutation 325: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:293 - ReplaceVariable _values -> _set
   * 28 Weak Mutation 334: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:295 - ReplaceComparisonOperator <= -> <
   * 29 Weak Mutation 335: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:295 - ReplaceComparisonOperator <= -> -1
   * 30 Weak Mutation 332: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:295 - InsertUnaryOp IINC -1 i
   * 31 Weak Mutation 330: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:295 - InsertUnaryOp Negation of i
   * 32 Weak Mutation 331: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:295 - InsertUnaryOp IINC 1 i
   * 33 Weak Mutation 328: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:295 - ReplaceVariable values -> set
   * 34 Weak Mutation 329: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:295 - ReplaceVariable values -> _set
   * 35 Weak Mutation 360: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:302 - ReplaceConstant - 1 -> 0
   * 36 Weak Mutation 343: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - ReplaceComparisonOperator == -> !=
   * 37 Weak Mutation 342: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - DeleteField: FREELjava/lang/Object;
   * 38 Weak Mutation 341: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - ReplaceVariable FREE -> REMOVED
   * 39 Weak Mutation 340: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - InsertUnaryOp IINC -1 i
   * 40 Weak Mutation 339: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - InsertUnaryOp IINC 1 i
   * 41 Weak Mutation 338: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - InsertUnaryOp Negation of i
   * 42 Weak Mutation 336: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - ReplaceVariable set -> values
   * 43 Weak Mutation 351: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - ReplaceComparisonOperator == -> !=
   * 44 Weak Mutation 350: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - DeleteField: REMOVEDLjava/lang/Object;
   * 45 Weak Mutation 349: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - ReplaceVariable REMOVED -> FREE
   * 46 Weak Mutation 348: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - InsertUnaryOp IINC -1 i
   * 47 Weak Mutation 347: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - InsertUnaryOp IINC 1 i
   * 48 Weak Mutation 346: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - InsertUnaryOp Negation of i
   * 49 Weak Mutation 344: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - ReplaceVariable set -> values
   * 50 Weak Mutation 326: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:293 - DeleteField: _values[Ljava/lang/Object;
   * 51 Weak Mutation 327: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:294 - DeleteField: _set[Ljava/lang/Object;
   * 52 Weak Mutation 325: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:293 - ReplaceVariable _values -> _set
   * 53 Weak Mutation 334: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:295 - ReplaceComparisonOperator <= -> <
   * 54 Weak Mutation 335: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:295 - ReplaceComparisonOperator <= -> -1
   * 55 Weak Mutation 332: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:295 - InsertUnaryOp IINC -1 i
   * 56 Weak Mutation 330: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:295 - InsertUnaryOp Negation of i
   * 57 Weak Mutation 331: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:295 - InsertUnaryOp IINC 1 i
   * 58 Weak Mutation 328: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:295 - ReplaceVariable values -> set
   * 59 Weak Mutation 329: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:295 - ReplaceVariable values -> _set
   * 60 Weak Mutation 356: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - InsertUnaryOp IINC -1 i
   * 61 Weak Mutation 357: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - DeleteStatement: execute(Ljava/lang/Object;)Z
   * 62 Weak Mutation 358: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - ReplaceComparisonOperator != -> ==
   * 63 Weak Mutation 352: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - ReplaceVariable values -> set
   * 64 Weak Mutation 353: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - ReplaceVariable values -> _set
   * 65 Weak Mutation 354: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - InsertUnaryOp Negation of i
   * 66 Weak Mutation 355: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:296 - InsertUnaryOp IINC 1 i
   * 67 Weak Mutation 360: gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:302 - ReplaceConstant - 1 -> 0
   * 68 gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I18 Branch 28 IFLE L295 - true
   * 69 gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I18 Branch 28 IFLE L295 - false
   * 70 gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I25 Branch 29 IF_ACMPEQ L296 - true
   */

  @Test
  public void test11()  throws Throwable  {
      THashMap<Integer, String> tHashMap0 = new THashMap<Integer, String>(1338);
      THashMap<String, String> tHashMap1 = new THashMap<String, String>(1338, 967.41486F);
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tHashMap1._set);
      tHashMap0.put((Integer) 1338, "nkq|CWMsVlgK~ZDVph");
      boolean boolean0 = tHashMap0.forEachValue((TObjectProcedure<? super String>) toObjectArrayProceedure0);
      assertEquals(false, tHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 49 covered goals:
   * 1 Weak Mutation 402: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:338 - ReplaceConstant - 0 -> 1
   * 2 Weak Mutation 403: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:339 - DeleteField: _set[Ljava/lang/Object;
   * 3 Weak Mutation 404: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:340 - ReplaceVariable _values -> _set
   * 4 Weak Mutation 405: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:340 - DeleteField: _values[Ljava/lang/Object;
   * 5 Weak Mutation 406: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:343 - DeleteStatement: tempDisableAutoCompaction()V
   * 6 Weak Mutation 410: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:345 - InsertUnaryOp IINC 1 i
   * 7 Weak Mutation 411: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:345 - InsertUnaryOp IINC -1 i
   * 8 Weak Mutation 409: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:345 - InsertUnaryOp Negation of i
   * 9 Weak Mutation 414: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:345 - ReplaceComparisonOperator <= -> -1
   * 10 Weak Mutation 413: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:345 - ReplaceComparisonOperator <= -> <
   * 11 Weak Mutation 407: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:345 - ReplaceVariable keys -> values
   * 12 Weak Mutation 415: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - ReplaceVariable keys -> values
   * 13 Weak Mutation 417: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp Negation of i
   * 14 Weak Mutation 419: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp IINC -1 i
   * 15 Weak Mutation 418: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp IINC 1 i
   * 16 Weak Mutation 421: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - DeleteField: FREELjava/lang/Object;
   * 17 Weak Mutation 420: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - ReplaceVariable FREE -> REMOVED
   * 18 Weak Mutation 422: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - ReplaceComparisonOperator == -> !=
   * 19 Weak Mutation 449: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:354 - DeleteStatement: reenableAutoCompaction(Z)V
   * 20 Weak Mutation 448: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:354 - ReplaceConstant - 1 -> 0
   * 21 Weak Mutation 454: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:357 - InsertUnaryOp IINC -1 modified
   * 22 Weak Mutation 453: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:357 - InsertUnaryOp IINC 1 modified
   * 23 Weak Mutation 452: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:357 - InsertUnaryOp Negation of modified
   * 24 gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I26 Branch 36 IFLE L345 - true
   * 25 gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I26 Branch 36 IFLE L345 - false
   * 26 gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I33 Branch 37 IF_ACMPEQ L346 - true
   * 27 Weak Mutation 410: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:345 - InsertUnaryOp IINC 1 i
   * 28 Weak Mutation 411: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:345 - InsertUnaryOp IINC -1 i
   * 29 Weak Mutation 409: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:345 - InsertUnaryOp Negation of i
   * 30 Weak Mutation 414: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:345 - ReplaceComparisonOperator <= -> -1
   * 31 Weak Mutation 415: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - ReplaceVariable keys -> values
   * 32 Weak Mutation 413: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:345 - ReplaceComparisonOperator <= -> <
   * 33 Weak Mutation 402: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:338 - ReplaceConstant - 0 -> 1
   * 34 Weak Mutation 403: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:339 - DeleteField: _set[Ljava/lang/Object;
   * 35 Weak Mutation 406: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:343 - DeleteStatement: tempDisableAutoCompaction()V
   * 36 Weak Mutation 407: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:345 - ReplaceVariable keys -> values
   * 37 Weak Mutation 404: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:340 - ReplaceVariable _values -> _set
   * 38 Weak Mutation 405: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:340 - DeleteField: _values[Ljava/lang/Object;
   * 39 Weak Mutation 417: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp Negation of i
   * 40 Weak Mutation 419: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp IINC -1 i
   * 41 Weak Mutation 418: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp IINC 1 i
   * 42 Weak Mutation 421: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - DeleteField: FREELjava/lang/Object;
   * 43 Weak Mutation 420: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - ReplaceVariable FREE -> REMOVED
   * 44 Weak Mutation 422: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - ReplaceComparisonOperator == -> !=
   * 45 Weak Mutation 454: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:357 - InsertUnaryOp IINC -1 modified
   * 46 Weak Mutation 453: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:357 - InsertUnaryOp IINC 1 modified
   * 47 Weak Mutation 452: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:357 - InsertUnaryOp Negation of modified
   * 48 Weak Mutation 449: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:354 - DeleteStatement: reenableAutoCompaction(Z)V
   * 49 Weak Mutation 448: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:354 - ReplaceConstant - 1 -> 0
   */

  @Test
  public void test12()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>();
      boolean boolean0 = tHashMap0.retainEntries((TObjectObjectProcedure<? super Integer, ? super Integer>) null);
      assertEquals(false, boolean0);
      assertEquals(23, tHashMap0.capacity());
  }

  //Test case number: 13
  /*
   * 57 covered goals:
   * 1 Weak Mutation 440: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp IINC -1 i
   * 2 Weak Mutation 441: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - DeleteStatement: execute(Ljava/lang/Object;Ljava/lang/Object;)Z
   * 3 Weak Mutation 433: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp Negation of i
   * 4 Weak Mutation 434: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp IINC 1 i
   * 5 Weak Mutation 435: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp IINC -1 i
   * 6 Weak Mutation 436: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - ReplaceVariable values -> keys
   * 7 Weak Mutation 437: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - ReplaceVariable values -> _set
   * 8 Weak Mutation 438: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp Negation of i
   * 9 Weak Mutation 439: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp IINC 1 i
   * 10 Weak Mutation 425: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp Negation of i
   * 11 Weak Mutation 427: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp IINC -1 i
   * 12 Weak Mutation 426: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp IINC 1 i
   * 13 Weak Mutation 429: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - DeleteField: REMOVEDLjava/lang/Object;
   * 14 Weak Mutation 428: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - ReplaceVariable REMOVED -> FREE
   * 15 Weak Mutation 431: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - ReplaceVariable keys -> values
   * 16 Weak Mutation 430: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - ReplaceComparisonOperator == -> !=
   * 17 Weak Mutation 423: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - ReplaceVariable keys -> values
   * 18 Weak Mutation 451: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:354 - DeleteStatement: reenableAutoCompaction(Z)V
   * 19 Weak Mutation 450: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:354 - ReplaceConstant - 1 -> 0
   * 20 gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I33 Branch 37 IF_ACMPEQ L346 - false
   * 21 gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I38 Branch 38 IF_ACMPEQ L346 - false
   * 22 Weak Mutation 410: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:345 - InsertUnaryOp IINC 1 i
   * 23 Weak Mutation 411: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:345 - InsertUnaryOp IINC -1 i
   * 24 Weak Mutation 409: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:345 - InsertUnaryOp Negation of i
   * 25 Weak Mutation 414: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:345 - ReplaceComparisonOperator <= -> -1
   * 26 Weak Mutation 415: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - ReplaceVariable keys -> values
   * 27 Weak Mutation 402: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:338 - ReplaceConstant - 0 -> 1
   * 28 Weak Mutation 403: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:339 - DeleteField: _set[Ljava/lang/Object;
   * 29 Weak Mutation 406: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:343 - DeleteStatement: tempDisableAutoCompaction()V
   * 30 Weak Mutation 407: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:345 - ReplaceVariable keys -> values
   * 31 Weak Mutation 404: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:340 - ReplaceVariable _values -> _set
   * 32 Weak Mutation 405: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:340 - DeleteField: _values[Ljava/lang/Object;
   * 33 Weak Mutation 417: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp Negation of i
   * 34 Weak Mutation 419: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp IINC -1 i
   * 35 Weak Mutation 418: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp IINC 1 i
   * 36 Weak Mutation 421: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - DeleteField: FREELjava/lang/Object;
   * 37 Weak Mutation 420: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - ReplaceVariable FREE -> REMOVED
   * 38 Weak Mutation 422: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - ReplaceComparisonOperator == -> !=
   * 39 Weak Mutation 440: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp IINC -1 i
   * 40 Weak Mutation 441: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - DeleteStatement: execute(Ljava/lang/Object;Ljava/lang/Object;)Z
   * 41 Weak Mutation 433: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp Negation of i
   * 42 Weak Mutation 434: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp IINC 1 i
   * 43 Weak Mutation 435: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp IINC -1 i
   * 44 Weak Mutation 436: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - ReplaceVariable values -> keys
   * 45 Weak Mutation 437: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - ReplaceVariable values -> _set
   * 46 Weak Mutation 438: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp Negation of i
   * 47 Weak Mutation 439: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp IINC 1 i
   * 48 Weak Mutation 425: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp Negation of i
   * 49 Weak Mutation 427: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp IINC -1 i
   * 50 Weak Mutation 426: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - InsertUnaryOp IINC 1 i
   * 51 Weak Mutation 429: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - DeleteField: REMOVEDLjava/lang/Object;
   * 52 Weak Mutation 428: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - ReplaceVariable REMOVED -> FREE
   * 53 Weak Mutation 431: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - ReplaceVariable keys -> values
   * 54 Weak Mutation 430: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - ReplaceComparisonOperator == -> !=
   * 55 Weak Mutation 423: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:346 - ReplaceVariable keys -> values
   * 56 Weak Mutation 451: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:354 - DeleteStatement: reenableAutoCompaction(Z)V
   * 57 Weak Mutation 450: gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:354 - ReplaceConstant - 1 -> 0
   */

  @Test
  public void test13()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>();
      tHashMap0.put((Integer) 1483, (Integer) 1483);
      // Undeclared exception!
      try {
        tHashMap0.retainEntries((TObjectObjectProcedure<? super Integer, ? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 14
  /*
   * 54 covered goals:
   * 1 Weak Mutation 478: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - InsertUnaryOp IINC -1 i
   * 2 Weak Mutation 479: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - ReplaceVariable REMOVED -> FREE
   * 3 Weak Mutation 476: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - InsertUnaryOp Negation of i
   * 4 Weak Mutation 477: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - InsertUnaryOp IINC 1 i
   * 5 Weak Mutation 474: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - ReplaceVariable set -> values
   * 6 Weak Mutation 481: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - ReplaceComparisonOperator == -> !=
   * 7 Weak Mutation 480: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - DeleteField: REMOVEDLjava/lang/Object;
   * 8 Weak Mutation 635: gnu.trove.map.hash.THashMap.removeAt(I)V:467 - DeleteField: _values[Ljava/lang/Object;
   * 9 Weak Mutation 634: gnu.trove.map.hash.THashMap.removeAt(I)V:467 - ReplaceVariable _values -> _set
   * 10 Weak Mutation 638: gnu.trove.map.hash.THashMap.removeAt(I)V:467 - InsertUnaryOp IINC -1 index
   * 11 Weak Mutation 637: gnu.trove.map.hash.THashMap.removeAt(I)V:467 - InsertUnaryOp IINC 1 index
   * 12 Weak Mutation 636: gnu.trove.map.hash.THashMap.removeAt(I)V:467 - InsertUnaryOp Negation of index
   * 13 Weak Mutation 639: gnu.trove.map.hash.THashMap.removeAt(I)V:468 - InsertUnaryOp Negation of index
   * 14 Weak Mutation 641: gnu.trove.map.hash.THashMap.removeAt(I)V:468 - InsertUnaryOp IINC -1 index
   * 15 Weak Mutation 640: gnu.trove.map.hash.THashMap.removeAt(I)V:468 - InsertUnaryOp IINC 1 index
   * 16 gnu.trove.map.hash.THashMap.removeAt(I)V: root-Branch
   * 17 gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I25 Branch 41 IF_ACMPEQ L370 - false
   * 18 gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I30 Branch 42 IF_ACMPEQ L370 - true
   * 19 Weak Mutation 464: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:369 - ReplaceComparisonOperator <= -> <
   * 20 Weak Mutation 478: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - InsertUnaryOp IINC -1 i
   * 21 Weak Mutation 479: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - ReplaceVariable REMOVED -> FREE
   * 22 Weak Mutation 476: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - InsertUnaryOp Negation of i
   * 23 Weak Mutation 477: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - InsertUnaryOp IINC 1 i
   * 24 Weak Mutation 474: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - ReplaceVariable set -> values
   * 25 Weak Mutation 472: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - DeleteField: FREELjava/lang/Object;
   * 26 Weak Mutation 473: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - ReplaceComparisonOperator == -> !=
   * 27 Weak Mutation 470: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - InsertUnaryOp IINC -1 i
   * 28 Weak Mutation 471: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - ReplaceVariable FREE -> REMOVED
   * 29 Weak Mutation 468: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - InsertUnaryOp Negation of i
   * 30 Weak Mutation 469: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - InsertUnaryOp IINC 1 i
   * 31 Weak Mutation 466: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - ReplaceVariable set -> values
   * 32 Weak Mutation 464: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:369 - ReplaceComparisonOperator <= -> <
   * 33 Weak Mutation 465: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:369 - ReplaceComparisonOperator <= -> -1
   * 34 Weak Mutation 462: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:369 - InsertUnaryOp IINC -1 i
   * 35 Weak Mutation 461: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:369 - InsertUnaryOp IINC 1 i
   * 36 Weak Mutation 460: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:369 - InsertUnaryOp Negation of i
   * 37 Weak Mutation 459: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:369 - ReplaceVariable values -> _set
   * 38 Weak Mutation 458: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:369 - ReplaceVariable values -> set
   * 39 Weak Mutation 457: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:368 - DeleteField: _set[Ljava/lang/Object;
   * 40 Weak Mutation 456: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:367 - DeleteField: _values[Ljava/lang/Object;
   * 41 Weak Mutation 455: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:367 - ReplaceVariable _values -> _set
   * 42 Weak Mutation 481: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - ReplaceComparisonOperator == -> !=
   * 43 Weak Mutation 480: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - DeleteField: REMOVEDLjava/lang/Object;
   * 44 Weak Mutation 635: gnu.trove.map.hash.THashMap.removeAt(I)V:467 - DeleteField: _values[Ljava/lang/Object;
   * 45 Weak Mutation 634: gnu.trove.map.hash.THashMap.removeAt(I)V:467 - ReplaceVariable _values -> _set
   * 46 Weak Mutation 639: gnu.trove.map.hash.THashMap.removeAt(I)V:468 - InsertUnaryOp Negation of index
   * 47 Weak Mutation 638: gnu.trove.map.hash.THashMap.removeAt(I)V:467 - InsertUnaryOp IINC -1 index
   * 48 Weak Mutation 637: gnu.trove.map.hash.THashMap.removeAt(I)V:467 - InsertUnaryOp IINC 1 index
   * 49 Weak Mutation 636: gnu.trove.map.hash.THashMap.removeAt(I)V:467 - InsertUnaryOp Negation of index
   * 50 Weak Mutation 641: gnu.trove.map.hash.THashMap.removeAt(I)V:468 - InsertUnaryOp IINC -1 index
   * 51 Weak Mutation 640: gnu.trove.map.hash.THashMap.removeAt(I)V:468 - InsertUnaryOp IINC 1 index
   * 52 gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I18 Branch 40 IFLE L369 - true
   * 53 gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I18 Branch 40 IFLE L369 - false
   * 54 gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I25 Branch 41 IF_ACMPEQ L370 - true
   */

  @Test
  public void test14()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>(572);
      tHashMap0.removeAt(577);
      tHashMap0.transformValues((TObjectFunction<Integer, Integer>) null);
      assertEquals("{}", tHashMap0.toString());
  }

  //Test case number: 15
  /*
   * 46 covered goals:
   * 1 Weak Mutation 492: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - DeleteStatement: execute(Ljava/lang/Object;)Ljava/lang/Object;
   * 2 Weak Mutation 489: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - InsertUnaryOp Negation of i
   * 3 Weak Mutation 488: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - ReplaceVariable values -> _set
   * 4 Weak Mutation 491: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - InsertUnaryOp IINC -1 i
   * 5 Weak Mutation 490: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - InsertUnaryOp IINC 1 i
   * 6 Weak Mutation 485: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - InsertUnaryOp IINC 1 i
   * 7 Weak Mutation 484: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - InsertUnaryOp Negation of i
   * 8 Weak Mutation 487: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - ReplaceVariable values -> set
   * 9 Weak Mutation 486: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - InsertUnaryOp IINC -1 i
   * 10 Weak Mutation 483: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - ReplaceVariable values -> _set
   * 11 Weak Mutation 482: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - ReplaceVariable values -> set
   * 12 gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I30 Branch 42 IF_ACMPEQ L370 - false
   * 13 Weak Mutation 478: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - InsertUnaryOp IINC -1 i
   * 14 Weak Mutation 479: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - ReplaceVariable REMOVED -> FREE
   * 15 Weak Mutation 476: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - InsertUnaryOp Negation of i
   * 16 Weak Mutation 477: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - InsertUnaryOp IINC 1 i
   * 17 Weak Mutation 474: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - ReplaceVariable set -> values
   * 18 Weak Mutation 472: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - DeleteField: FREELjava/lang/Object;
   * 19 Weak Mutation 473: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - ReplaceComparisonOperator == -> !=
   * 20 Weak Mutation 470: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - InsertUnaryOp IINC -1 i
   * 21 Weak Mutation 471: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - ReplaceVariable FREE -> REMOVED
   * 22 Weak Mutation 468: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - InsertUnaryOp Negation of i
   * 23 Weak Mutation 469: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - InsertUnaryOp IINC 1 i
   * 24 Weak Mutation 466: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - ReplaceVariable set -> values
   * 25 Weak Mutation 465: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:369 - ReplaceComparisonOperator <= -> -1
   * 26 Weak Mutation 462: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:369 - InsertUnaryOp IINC -1 i
   * 27 Weak Mutation 461: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:369 - InsertUnaryOp IINC 1 i
   * 28 Weak Mutation 460: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:369 - InsertUnaryOp Negation of i
   * 29 Weak Mutation 459: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:369 - ReplaceVariable values -> _set
   * 30 Weak Mutation 458: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:369 - ReplaceVariable values -> set
   * 31 Weak Mutation 457: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:368 - DeleteField: _set[Ljava/lang/Object;
   * 32 Weak Mutation 456: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:367 - DeleteField: _values[Ljava/lang/Object;
   * 33 Weak Mutation 455: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:367 - ReplaceVariable _values -> _set
   * 34 Weak Mutation 481: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - ReplaceComparisonOperator == -> !=
   * 35 Weak Mutation 480: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:370 - DeleteField: REMOVEDLjava/lang/Object;
   * 36 Weak Mutation 492: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - DeleteStatement: execute(Ljava/lang/Object;)Ljava/lang/Object;
   * 37 Weak Mutation 489: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - InsertUnaryOp Negation of i
   * 38 Weak Mutation 488: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - ReplaceVariable values -> _set
   * 39 Weak Mutation 491: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - InsertUnaryOp IINC -1 i
   * 40 Weak Mutation 490: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - InsertUnaryOp IINC 1 i
   * 41 Weak Mutation 485: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - InsertUnaryOp IINC 1 i
   * 42 Weak Mutation 484: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - InsertUnaryOp Negation of i
   * 43 Weak Mutation 487: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - ReplaceVariable values -> set
   * 44 Weak Mutation 486: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - InsertUnaryOp IINC -1 i
   * 45 Weak Mutation 483: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - ReplaceVariable values -> _set
   * 46 Weak Mutation 482: gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V:371 - ReplaceVariable values -> set
   */

  @Test
  public void test15()  throws Throwable  {
      THashMap<Object, Integer> tHashMap0 = new THashMap<Object, Integer>(0, 0);
      tHashMap0.put((Object) tHashMap0, (Integer) 0);
      // Undeclared exception!
      try {
        tHashMap0.transformValues((TObjectFunction<Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 16
  /*
   * 19 covered goals:
   * 1 Weak Mutation 577: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceArithmeticOperator - -> %
   * 2 Weak Mutation 567: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceVariable index -> newCapacity
   * 3 Weak Mutation 566: gnu.trove.map.hash.THashMap.rehash(I)V:403 - DeleteField: _set[Ljava/lang/Object;
   * 4 Weak Mutation 565: gnu.trove.map.hash.THashMap.rehash(I)V:402 - ReplaceComparisonOperator >= -> -1
   * 5 Weak Mutation 575: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceConstant - 1 -> 0
   * 6 Weak Mutation 574: gnu.trove.map.hash.THashMap.rehash(I)V:403 - InsertUnaryOp IINC -1 index
   * 7 Weak Mutation 573: gnu.trove.map.hash.THashMap.rehash(I)V:403 - InsertUnaryOp IINC 1 index
   * 8 Weak Mutation 572: gnu.trove.map.hash.THashMap.rehash(I)V:403 - InsertUnaryOp Negation of index
   * 9 Weak Mutation 571: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceVariable index -> i
   * 10 Weak Mutation 570: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceVariable index -> oldSize
   * 11 Weak Mutation 569: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceVariable index -> count
   * 12 Weak Mutation 568: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceVariable index -> oldCapacity
   * 13 Weak Mutation 576: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceArithmeticOperator - -> +
   * 14 Weak Mutation 577: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceArithmeticOperator - -> %
   * 15 Weak Mutation 578: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceArithmeticOperator - -> /
   * 16 Weak Mutation 579: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceArithmeticOperator - -> *
   * 17 Weak Mutation 580: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceVariable o -> FREE
   * 18 Weak Mutation 581: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceVariable o -> REMOVED
   * 19 gnu.trove.map.hash.THashMap.rehash(I)V: I76 Branch 46 IFGE L402 - false
   */

  @Test
  public void test16()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>(1222);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) 1222;
      objectArray0[2] = (Object) 1222;
      tHashMap0._set = objectArray0;
      // Undeclared exception!
      try {
        tHashMap0.trimToSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Equal objects must have equal hashcodes. During rehashing, Trove discovered that the following two objects claim to be equal (as in java.lang.Object.equals()) but their hashCodes (or those calculated by your TObjectHashingStrategy) are not equal.This violates the general contract of java.lang.Object.hashCode().  See bullet point two in that method's documentation. object #1 =class java.lang.Integer id= 699083058 hashCode= 1222 toString= 1222; object #2 =class java.lang.Integer id= 699083058 hashCode= 1222 toString= 1222
         // 
         // More than one type used for keys. Watch out for asymmetric equals(). Read about the 'Liskov substitution principle' and the implications for equals() in java.
         // Key types: [null, class java.lang.Integer]a == b
         // hashCode() and/or equals() have inconsistent implementation
         // Key set lost entries, now got 2 instead of 0. This can manifest itself as an apparent duplicate key.Inserting same object twice, rehashing bug. Object= 1222
         //
      }
  }

  //Test case number: 17
  /*
   * 38 covered goals:
   * 1 Weak Mutation 588: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - ReplaceComparisonOperator >= -> ==
   * 2 Weak Mutation 1: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:262 - ReplaceComparisonOperator != null -> = null
   * 3 Weak Mutation 9: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:266 - DeleteField: _otherMapLjava/util/Map;
   * 4 Weak Mutation 11: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:266 - DeleteStatement: get(Ljava/lang/Object;)Ljava/lang/Object;
   * 5 Weak Mutation 16: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:267 - ReplaceComparisonOperator == -> !=
   * 6 Weak Mutation 27: gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z:267 - ReplaceConstant - 1 -> 0
   * 7 Weak Mutation 305: gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z:194 - ReplaceVariable other -> REMOVED
   * 8 Weak Mutation 304: gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z:194 - ReplaceVariable other -> FREE
   * 9 Weak Mutation 306: gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z:194 - ReplaceComparisonOperator != -> ==
   * 10 Weak Mutation 309: gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z:197 - ReplaceVariable other -> REMOVED
   * 11 Weak Mutation 308: gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z:197 - ReplaceVariable other -> FREE
   * 12 Weak Mutation 311: gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z:198 - DeleteStatement: size()I
   * 13 Weak Mutation 310: gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z:198 - DeleteStatement: size()I
   * 14 Weak Mutation 313: gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z:198 - ReplaceComparisonOperator == -> -2
   * 15 Weak Mutation 316: gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z:201 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z
   * 16 Weak Mutation 395: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp Negation of i
   * 17 Weak Mutation 394: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - ReplaceVariable values -> _set
   * 18 Weak Mutation 393: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - ReplaceVariable values -> keys
   * 19 Weak Mutation 392: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp IINC -1 i
   * 20 Weak Mutation 399: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - ReplaceComparisonOperator != -> ==
   * 21 Weak Mutation 398: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - DeleteStatement: execute(Ljava/lang/Object;Ljava/lang/Object;)Z
   * 22 Weak Mutation 397: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp IINC -1 i
   * 23 Weak Mutation 396: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp IINC 1 i
   * 24 Weak Mutation 391: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp IINC 1 i
   * 25 Weak Mutation 390: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp Negation of i
   * 26 Weak Mutation 388: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - ReplaceVariable keys -> values
   * 27 Weak Mutation 582: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:423 - ReplaceVariable key -> FREE
   * 28 Weak Mutation 583: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:423 - ReplaceVariable key -> REMOVED
   * 29 Weak Mutation 584: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:423 - DeleteStatement: index(Ljava/lang/Object;)I
   * 30 Weak Mutation 585: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp Negation of index
   * 31 Weak Mutation 586: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp IINC 1 index
   * 32 Weak Mutation 587: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp IINC -1 index
   * 33 Weak Mutation 591: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - ReplaceVariable _values -> _set
   * 34 Weak Mutation 593: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp Negation of index
   * 35 Weak Mutation 592: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - DeleteField: _values[Ljava/lang/Object;
   * 36 Weak Mutation 595: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp IINC -1 index
   * 37 Weak Mutation 594: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - InsertUnaryOp IINC 1 index
   * 38 Weak Mutation 588: gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;:424 - ReplaceComparisonOperator >= -> ==
   */

  @Test
  public void test17()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>((-108), (-1044.6168F));
      tHashMap0.put((Integer) (-108), (Integer) (-108));
      boolean boolean0 = tHashMap0.equals((Object) tHashMap0);
      assertEquals(7, tHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 18
  /*
   * 41 covered goals:
   * 1 Weak Mutation 597: gnu.trove.map.hash.THashMap.clear()V:432 - ReplaceComparisonOperator != -> <
   * 2 Weak Mutation 596: gnu.trove.map.hash.THashMap.clear()V:432 - DeleteStatement: size()I
   * 3 Weak Mutation 601: gnu.trove.map.hash.THashMap.clear()V:438 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 600: gnu.trove.map.hash.THashMap.clear()V:438 - DeleteField: _set[Ljava/lang/Object;
   * 5 Weak Mutation 603: gnu.trove.map.hash.THashMap.clear()V:438 - ReplaceVariable FREE -> REMOVED
   * 6 Weak Mutation 602: gnu.trove.map.hash.THashMap.clear()V:438 - DeleteField: _set[Ljava/lang/Object;
   * 7 Weak Mutation 605: gnu.trove.map.hash.THashMap.clear()V:438 - DeleteStatement: fill([Ljava/lang/Object;IILjava/lang/Object;)V
   * 8 Weak Mutation 604: gnu.trove.map.hash.THashMap.clear()V:438 - DeleteField: FREELjava/lang/Object;
   * 9 Weak Mutation 610: gnu.trove.map.hash.THashMap.clear()V:439 - DeleteField: _values[Ljava/lang/Object;
   * 10 Weak Mutation 611: gnu.trove.map.hash.THashMap.clear()V:439 - DeleteStatement: fill([Ljava/lang/Object;IILjava/lang/Object;)V
   * 11 Weak Mutation 608: gnu.trove.map.hash.THashMap.clear()V:439 - ReplaceConstant - 0 -> 1
   * 12 Weak Mutation 609: gnu.trove.map.hash.THashMap.clear()V:439 - ReplaceVariable _values -> _set
   * 13 Weak Mutation 607: gnu.trove.map.hash.THashMap.clear()V:439 - DeleteField: _values[Ljava/lang/Object;
   * 14 Weak Mutation 606: gnu.trove.map.hash.THashMap.clear()V:439 - ReplaceVariable _values -> _set
   * 15 gnu.trove.map.hash.THashMap.clear()V: I4 Branch 48 IFNE L432 - true
   * 16 Weak Mutation 252: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:161 - ReplaceComparisonOperator >= -> ==
   * 17 Weak Mutation 250: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:161 - InsertUnaryOp IINC 1 index
   * 18 Weak Mutation 251: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:161 - InsertUnaryOp IINC -1 index
   * 19 Weak Mutation 248: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:160 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 20 Weak Mutation 249: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:161 - InsertUnaryOp Negation of index
   * 21 Weak Mutation 247: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:160 - ReplaceVariable key -> REMOVED
   * 22 Weak Mutation 245: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:160 - ReplaceVariable key -> FREE
   * 23 Weak Mutation 266: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - ReplaceVariable value -> REMOVED
   * 24 Weak Mutation 265: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - ReplaceVariable value -> FREE
   * 25 Weak Mutation 270: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - InsertUnaryOp IINC -1 index
   * 26 Weak Mutation 268: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - InsertUnaryOp Negation of index
   * 27 Weak Mutation 269: gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:164 - InsertUnaryOp IINC 1 index
   * 28 Weak Mutation 610: gnu.trove.map.hash.THashMap.clear()V:439 - DeleteField: _values[Ljava/lang/Object;
   * 29 Weak Mutation 611: gnu.trove.map.hash.THashMap.clear()V:439 - DeleteStatement: fill([Ljava/lang/Object;IILjava/lang/Object;)V
   * 30 Weak Mutation 608: gnu.trove.map.hash.THashMap.clear()V:439 - ReplaceConstant - 0 -> 1
   * 31 Weak Mutation 609: gnu.trove.map.hash.THashMap.clear()V:439 - ReplaceVariable _values -> _set
   * 32 Weak Mutation 597: gnu.trove.map.hash.THashMap.clear()V:432 - ReplaceComparisonOperator != -> <
   * 33 Weak Mutation 596: gnu.trove.map.hash.THashMap.clear()V:432 - DeleteStatement: size()I
   * 34 Weak Mutation 601: gnu.trove.map.hash.THashMap.clear()V:438 - ReplaceConstant - 0 -> 1
   * 35 Weak Mutation 600: gnu.trove.map.hash.THashMap.clear()V:438 - DeleteField: _set[Ljava/lang/Object;
   * 36 Weak Mutation 603: gnu.trove.map.hash.THashMap.clear()V:438 - ReplaceVariable FREE -> REMOVED
   * 37 Weak Mutation 602: gnu.trove.map.hash.THashMap.clear()V:438 - DeleteField: _set[Ljava/lang/Object;
   * 38 Weak Mutation 605: gnu.trove.map.hash.THashMap.clear()V:438 - DeleteStatement: fill([Ljava/lang/Object;IILjava/lang/Object;)V
   * 39 Weak Mutation 604: gnu.trove.map.hash.THashMap.clear()V:438 - DeleteField: FREELjava/lang/Object;
   * 40 Weak Mutation 607: gnu.trove.map.hash.THashMap.clear()V:439 - DeleteField: _values[Ljava/lang/Object;
   * 41 Weak Mutation 606: gnu.trove.map.hash.THashMap.clear()V:439 - ReplaceVariable _values -> _set
   */

  @Test
  public void test18()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>(1222);
      tHashMap0.putIfAbsent((Integer) 1222, (Integer) 1222);
      assertEquals(false, tHashMap0.isEmpty());
      
      tHashMap0.clear();
      assertEquals(2557, tHashMap0.capacity());
  }

  //Test case number: 19
  /*
   * 3 covered goals:
   * 1 Weak Mutation 599: gnu.trove.map.hash.THashMap.clear()V:432 - ReplaceComparisonOperator != -> -1
   * 2 gnu.trove.map.hash.THashMap.clear()V: I4 Branch 48 IFNE L432 - false
   * 3 Weak Mutation 599: gnu.trove.map.hash.THashMap.clear()V:432 - ReplaceComparisonOperator != -> -1
   */

//   @Test
//   public void test19()  throws Throwable  {
//       THashMap<String, String> tHashMap0 = new THashMap<String, String>(1338, 967.41486F);
//       tHashMap0.clear();
//       assertEquals(967.41486F, tHashMap0.getAutoCompactionFactor(), 0.01F);
//   }

  //Test case number: 20
  /*
   * 15 covered goals:
   * 1 Weak Mutation 598: gnu.trove.map.hash.THashMap.clear()V:432 - ReplaceComparisonOperator != -> >
   * 2 Weak Mutation 610: gnu.trove.map.hash.THashMap.clear()V:439 - DeleteField: _values[Ljava/lang/Object;
   * 3 Weak Mutation 611: gnu.trove.map.hash.THashMap.clear()V:439 - DeleteStatement: fill([Ljava/lang/Object;IILjava/lang/Object;)V
   * 4 Weak Mutation 608: gnu.trove.map.hash.THashMap.clear()V:439 - ReplaceConstant - 0 -> 1
   * 5 Weak Mutation 609: gnu.trove.map.hash.THashMap.clear()V:439 - ReplaceVariable _values -> _set
   * 6 Weak Mutation 596: gnu.trove.map.hash.THashMap.clear()V:432 - DeleteStatement: size()I
   * 7 Weak Mutation 601: gnu.trove.map.hash.THashMap.clear()V:438 - ReplaceConstant - 0 -> 1
   * 8 Weak Mutation 600: gnu.trove.map.hash.THashMap.clear()V:438 - DeleteField: _set[Ljava/lang/Object;
   * 9 Weak Mutation 603: gnu.trove.map.hash.THashMap.clear()V:438 - ReplaceVariable FREE -> REMOVED
   * 10 Weak Mutation 602: gnu.trove.map.hash.THashMap.clear()V:438 - DeleteField: _set[Ljava/lang/Object;
   * 11 Weak Mutation 605: gnu.trove.map.hash.THashMap.clear()V:438 - DeleteStatement: fill([Ljava/lang/Object;IILjava/lang/Object;)V
   * 12 Weak Mutation 604: gnu.trove.map.hash.THashMap.clear()V:438 - DeleteField: FREELjava/lang/Object;
   * 13 Weak Mutation 607: gnu.trove.map.hash.THashMap.clear()V:439 - DeleteField: _values[Ljava/lang/Object;
   * 14 Weak Mutation 606: gnu.trove.map.hash.THashMap.clear()V:439 - ReplaceVariable _values -> _set
   * 15 Weak Mutation 598: gnu.trove.map.hash.THashMap.clear()V:432 - ReplaceComparisonOperator != -> >
   */

  @Test
  public void test20()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>();
      tHashMap0.removeAt(10);
      assertEquals(-1, tHashMap0.size());
      
      tHashMap0.clear();
      assertEquals(0, tHashMap0.size());
  }

  //Test case number: 21
  /*
   * 31 covered goals:
   * 1 Weak Mutation 619: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:453 - ReplaceComparisonOperator < -> !=
   * 2 Weak Mutation 622: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:454 - ReplaceVariable _values -> _set
   * 3 Weak Mutation 623: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:454 - DeleteField: _values[Ljava/lang/Object;
   * 4 Weak Mutation 626: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:454 - InsertUnaryOp IINC -1 index
   * 5 Weak Mutation 625: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:454 - InsertUnaryOp IINC 1 index
   * 6 Weak Mutation 624: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:454 - InsertUnaryOp Negation of index
   * 7 Weak Mutation 627: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:455 - InsertUnaryOp Negation of index
   * 8 Weak Mutation 630: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:455 - DeleteStatement: removeAt(I)V
   * 9 Weak Mutation 629: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:455 - InsertUnaryOp IINC -1 index
   * 10 Weak Mutation 628: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:455 - InsertUnaryOp IINC 1 index
   * 11 gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;: I13 Branch 49 IFLT L453 - false
   * 12 Weak Mutation 614: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:452 - ReplaceVariable key -> prev
   * 13 Weak Mutation 615: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:452 - DeleteStatement: index(Ljava/lang/Object;)I
   * 14 Weak Mutation 612: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:452 - ReplaceVariable key -> FREE
   * 15 Weak Mutation 613: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:452 - ReplaceVariable key -> REMOVED
   * 16 Weak Mutation 618: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:453 - InsertUnaryOp IINC -1 index
   * 17 Weak Mutation 619: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:453 - ReplaceComparisonOperator < -> !=
   * 18 Weak Mutation 616: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:453 - InsertUnaryOp Negation of index
   * 19 Weak Mutation 617: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:453 - InsertUnaryOp IINC 1 index
   * 20 Weak Mutation 622: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:454 - ReplaceVariable _values -> _set
   * 21 Weak Mutation 623: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:454 - DeleteField: _values[Ljava/lang/Object;
   * 22 Weak Mutation 627: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:455 - InsertUnaryOp Negation of index
   * 23 Weak Mutation 626: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:454 - InsertUnaryOp IINC -1 index
   * 24 Weak Mutation 625: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:454 - InsertUnaryOp IINC 1 index
   * 25 Weak Mutation 624: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:454 - InsertUnaryOp Negation of index
   * 26 Weak Mutation 631: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:457 - ReplaceVariable prev -> FREE
   * 27 Weak Mutation 630: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:455 - DeleteStatement: removeAt(I)V
   * 28 Weak Mutation 629: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:455 - InsertUnaryOp IINC -1 index
   * 29 Weak Mutation 628: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:455 - InsertUnaryOp IINC 1 index
   * 30 Weak Mutation 633: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:457 - ReplaceVariable prev -> key
   * 31 Weak Mutation 632: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:457 - ReplaceVariable prev -> REMOVED
   */

  @Test
  public void test21()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>(1222);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) 1222;
      tHashMap0._set = objectArray0;
      tHashMap0.remove(objectArray0[1]);
      assertEquals(4, tHashMap0.capacity());
      assertEquals(-1, tHashMap0.size());
  }

  //Test case number: 22
  /*
   * 11 covered goals:
   * 1 Weak Mutation 620: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:453 - ReplaceComparisonOperator < -> <=
   * 2 Weak Mutation 622: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:454 - ReplaceVariable _values -> _set
   * 3 Weak Mutation 623: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:454 - DeleteField: _values[Ljava/lang/Object;
   * 4 Weak Mutation 627: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:455 - InsertUnaryOp Negation of index
   * 5 Weak Mutation 626: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:454 - InsertUnaryOp IINC -1 index
   * 6 Weak Mutation 625: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:454 - InsertUnaryOp IINC 1 index
   * 7 Weak Mutation 624: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:454 - InsertUnaryOp Negation of index
   * 8 Weak Mutation 630: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:455 - DeleteStatement: removeAt(I)V
   * 9 Weak Mutation 629: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:455 - InsertUnaryOp IINC -1 index
   * 10 Weak Mutation 628: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:455 - InsertUnaryOp IINC 1 index
   * 11 Weak Mutation 620: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:453 - ReplaceComparisonOperator < -> <=
   */

  @Test
  public void test22()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>();
      THashMap<Object, Integer> tHashMap1 = new THashMap<Object, Integer>();
      tHashMap1.put((Object) tHashMap0, (Integer) 10);
      assertEquals(1, tHashMap1.size());
      
      tHashMap1.remove((Object) tHashMap0);
      assertEquals(true, tHashMap1.isEmpty());
  }

  //Test case number: 23
  /*
   * 72 covered goals:
   * 1 Weak Mutation 679: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceComparisonOperator != -> ==
   * 2 Weak Mutation 678: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - InsertUnaryOp IINC -1 i
   * 3 Weak Mutation 677: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - InsertUnaryOp IINC 1 i
   * 4 Weak Mutation 676: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - InsertUnaryOp Negation of i
   * 5 Weak Mutation 675: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceVariable vals -> _set
   * 6 Weak Mutation 674: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceVariable vals -> set
   * 7 Weak Mutation 673: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceVariable val -> REMOVED
   * 8 Weak Mutation 672: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceVariable val -> FREE
   * 9 Weak Mutation 668: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - InsertUnaryOp IINC -1 i
   * 10 Weak Mutation 669: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceVariable REMOVED -> FREE
   * 11 Weak Mutation 670: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - DeleteField: REMOVEDLjava/lang/Object;
   * 12 Weak Mutation 671: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceComparisonOperator == -> !=
   * 13 Weak Mutation 665: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceVariable set -> vals
   * 14 Weak Mutation 666: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - InsertUnaryOp Negation of i
   * 15 Weak Mutation 667: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - InsertUnaryOp IINC 1 i
   * 16 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I30 Branch 52 IF_ACMPEQ L516 - false
   * 17 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I35 Branch 53 IF_ACMPEQ L516 - false
   * 18 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I40 Branch 54 IF_ACMPNE L516 - true
   * 19 Weak Mutation 652: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:515 - InsertUnaryOp IINC -1 i
   * 20 Weak Mutation 655: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:515 - ReplaceComparisonOperator <= -> -1
   * 21 Weak Mutation 654: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:515 - ReplaceComparisonOperator <= -> <
   * 22 Weak Mutation 649: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:515 - ReplaceVariable vals -> _set
   * 23 Weak Mutation 648: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:515 - ReplaceVariable vals -> set
   * 24 Weak Mutation 651: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:515 - InsertUnaryOp IINC 1 i
   * 25 Weak Mutation 650: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:515 - InsertUnaryOp Negation of i
   * 26 Weak Mutation 660: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - InsertUnaryOp IINC -1 i
   * 27 Weak Mutation 661: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceVariable FREE -> REMOVED
   * 28 Weak Mutation 662: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - DeleteField: FREELjava/lang/Object;
   * 29 Weak Mutation 663: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceComparisonOperator == -> !=
   * 30 Weak Mutation 657: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceVariable set -> vals
   * 31 Weak Mutation 658: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - InsertUnaryOp Negation of i
   * 32 Weak Mutation 659: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - InsertUnaryOp IINC 1 i
   * 33 Weak Mutation 679: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceComparisonOperator != -> ==
   * 34 Weak Mutation 678: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - InsertUnaryOp IINC -1 i
   * 35 Weak Mutation 677: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - InsertUnaryOp IINC 1 i
   * 36 Weak Mutation 676: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - InsertUnaryOp Negation of i
   * 37 Weak Mutation 675: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceVariable vals -> _set
   * 38 Weak Mutation 674: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceVariable vals -> set
   * 39 Weak Mutation 673: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceVariable val -> REMOVED
   * 40 Weak Mutation 672: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceVariable val -> FREE
   * 41 Weak Mutation 652: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:515 - InsertUnaryOp IINC -1 i
   * 42 Weak Mutation 655: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:515 - ReplaceComparisonOperator <= -> -1
   * 43 Weak Mutation 654: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:515 - ReplaceComparisonOperator <= -> <
   * 44 Weak Mutation 649: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:515 - ReplaceVariable vals -> _set
   * 45 Weak Mutation 648: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:515 - ReplaceVariable vals -> set
   * 46 Weak Mutation 651: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:515 - InsertUnaryOp IINC 1 i
   * 47 Weak Mutation 650: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:515 - InsertUnaryOp Negation of i
   * 48 Weak Mutation 645: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable val -> FREE
   * 49 Weak Mutation 644: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:510 - DeleteField: _values[Ljava/lang/Object;
   * 50 Weak Mutation 647: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceComparisonOperator != -> ==
   * 51 Weak Mutation 646: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable val -> REMOVED
   * 52 Weak Mutation 643: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:510 - ReplaceVariable _values -> _set
   * 53 Weak Mutation 642: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:509 - DeleteField: _set[Ljava/lang/Object;
   * 54 Weak Mutation 668: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - InsertUnaryOp IINC -1 i
   * 55 Weak Mutation 669: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceVariable REMOVED -> FREE
   * 56 Weak Mutation 670: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - DeleteField: REMOVEDLjava/lang/Object;
   * 57 Weak Mutation 671: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceComparisonOperator == -> !=
   * 58 Weak Mutation 665: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceVariable set -> vals
   * 59 Weak Mutation 666: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - InsertUnaryOp Negation of i
   * 60 Weak Mutation 667: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - InsertUnaryOp IINC 1 i
   * 61 Weak Mutation 660: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - InsertUnaryOp IINC -1 i
   * 62 Weak Mutation 661: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceVariable FREE -> REMOVED
   * 63 Weak Mutation 662: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - DeleteField: FREELjava/lang/Object;
   * 64 Weak Mutation 663: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceComparisonOperator == -> !=
   * 65 Weak Mutation 657: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - ReplaceVariable set -> vals
   * 66 Weak Mutation 658: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - InsertUnaryOp Negation of i
   * 67 Weak Mutation 659: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:516 - InsertUnaryOp IINC 1 i
   * 68 Weak Mutation 723: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:529 - ReplaceConstant - 0 -> 1
   * 69 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I14 Branch 50 IF_ACMPNE L514 - false
   * 70 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I23 Branch 51 IFLE L515 - true
   * 71 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I23 Branch 51 IFLE L515 - false
   * 72 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I30 Branch 52 IF_ACMPEQ L516 - true
   */

  @Test
  public void test23()  throws Throwable  {
      THashMap<Integer, String> tHashMap0 = new THashMap<Integer, String>(1002, 1002);
      tHashMap0.put((Integer) null, "(this Collection)");
      boolean boolean0 = tHashMap0.containsValue((Object) null);
      assertEquals(false, tHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 24
  /*
   * 91 covered goals:
   * 1 Weak Mutation 702: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable REMOVED -> FREE
   * 2 Weak Mutation 703: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - DeleteField: REMOVEDLjava/lang/Object;
   * 3 Weak Mutation 700: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp IINC 1 i
   * 4 Weak Mutation 701: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp IINC -1 i
   * 5 Weak Mutation 698: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable set -> vals
   * 6 Weak Mutation 699: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp Negation of i
   * 7 Weak Mutation 713: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable val -> FREE
   * 8 Weak Mutation 712: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceComparisonOperator == -> !=
   * 9 Weak Mutation 715: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable vals -> set
   * 10 Weak Mutation 714: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable val -> REMOVED
   * 11 Weak Mutation 717: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp Negation of i
   * 12 Weak Mutation 716: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable vals -> _set
   * 13 Weak Mutation 719: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp IINC -1 i
   * 14 Weak Mutation 718: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp IINC 1 i
   * 15 Weak Mutation 705: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable val -> FREE
   * 16 Weak Mutation 704: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceComparisonOperator == -> !=
   * 17 Weak Mutation 707: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable vals -> set
   * 18 Weak Mutation 706: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable val -> REMOVED
   * 19 Weak Mutation 709: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp Negation of i
   * 20 Weak Mutation 708: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable vals -> _set
   * 21 Weak Mutation 711: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp IINC -1 i
   * 22 Weak Mutation 710: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp IINC 1 i
   * 23 Weak Mutation 720: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - DeleteStatement: equals(Ljava/lang/Object;Ljava/lang/Object;)Z
   * 24 Weak Mutation 721: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceComparisonOperator == -> !=
   * 25 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I62 Branch 56 IF_ACMPEQ L523 - false
   * 26 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I67 Branch 57 IF_ACMPEQ L523 - false
   * 27 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I72 Branch 58 IF_ACMPEQ L523 - false
   * 28 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I79 Branch 59 IFEQ L523 - true
   * 29 Weak Mutation 687: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:522 - ReplaceComparisonOperator <= -> <
   * 30 Weak Mutation 685: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:522 - InsertUnaryOp IINC -1 i
   * 31 Weak Mutation 684: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:522 - InsertUnaryOp IINC 1 i
   * 32 Weak Mutation 683: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:522 - InsertUnaryOp Negation of i
   * 33 Weak Mutation 682: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:522 - ReplaceVariable vals -> _set
   * 34 Weak Mutation 681: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:522 - ReplaceVariable vals -> set
   * 35 Weak Mutation 696: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceComparisonOperator == -> !=
   * 36 Weak Mutation 694: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable FREE -> REMOVED
   * 37 Weak Mutation 695: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - DeleteField: FREELjava/lang/Object;
   * 38 Weak Mutation 692: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp IINC 1 i
   * 39 Weak Mutation 693: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp IINC -1 i
   * 40 Weak Mutation 690: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable set -> vals
   * 41 Weak Mutation 691: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp Negation of i
   * 42 Weak Mutation 688: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:522 - ReplaceComparisonOperator <= -> -1
   * 43 Weak Mutation 645: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable val -> FREE
   * 44 Weak Mutation 644: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:510 - DeleteField: _values[Ljava/lang/Object;
   * 45 Weak Mutation 647: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceComparisonOperator != -> ==
   * 46 Weak Mutation 646: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:514 - ReplaceVariable val -> REMOVED
   * 47 Weak Mutation 643: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:510 - ReplaceVariable _values -> _set
   * 48 Weak Mutation 642: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:509 - DeleteField: _set[Ljava/lang/Object;
   * 49 Weak Mutation 723: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:529 - ReplaceConstant - 0 -> 1
   * 50 Weak Mutation 687: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:522 - ReplaceComparisonOperator <= -> <
   * 51 Weak Mutation 685: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:522 - InsertUnaryOp IINC -1 i
   * 52 Weak Mutation 684: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:522 - InsertUnaryOp IINC 1 i
   * 53 Weak Mutation 683: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:522 - InsertUnaryOp Negation of i
   * 54 Weak Mutation 682: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:522 - ReplaceVariable vals -> _set
   * 55 Weak Mutation 681: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:522 - ReplaceVariable vals -> set
   * 56 Weak Mutation 702: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable REMOVED -> FREE
   * 57 Weak Mutation 703: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - DeleteField: REMOVEDLjava/lang/Object;
   * 58 Weak Mutation 700: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp IINC 1 i
   * 59 Weak Mutation 701: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp IINC -1 i
   * 60 Weak Mutation 698: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable set -> vals
   * 61 Weak Mutation 699: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp Negation of i
   * 62 Weak Mutation 696: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceComparisonOperator == -> !=
   * 63 Weak Mutation 694: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable FREE -> REMOVED
   * 64 Weak Mutation 695: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - DeleteField: FREELjava/lang/Object;
   * 65 Weak Mutation 692: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp IINC 1 i
   * 66 Weak Mutation 693: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp IINC -1 i
   * 67 Weak Mutation 690: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable set -> vals
   * 68 Weak Mutation 691: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp Negation of i
   * 69 Weak Mutation 688: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:522 - ReplaceComparisonOperator <= -> -1
   * 70 Weak Mutation 713: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable val -> FREE
   * 71 Weak Mutation 712: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceComparisonOperator == -> !=
   * 72 Weak Mutation 715: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable vals -> set
   * 73 Weak Mutation 714: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable val -> REMOVED
   * 74 Weak Mutation 717: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp Negation of i
   * 75 Weak Mutation 716: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable vals -> _set
   * 76 Weak Mutation 719: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp IINC -1 i
   * 77 Weak Mutation 718: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp IINC 1 i
   * 78 Weak Mutation 705: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable val -> FREE
   * 79 Weak Mutation 704: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceComparisonOperator == -> !=
   * 80 Weak Mutation 707: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable vals -> set
   * 81 Weak Mutation 706: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable val -> REMOVED
   * 82 Weak Mutation 709: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp Negation of i
   * 83 Weak Mutation 708: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceVariable vals -> _set
   * 84 Weak Mutation 711: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp IINC -1 i
   * 85 Weak Mutation 710: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - InsertUnaryOp IINC 1 i
   * 86 Weak Mutation 720: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - DeleteStatement: equals(Ljava/lang/Object;Ljava/lang/Object;)Z
   * 87 Weak Mutation 721: gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z:523 - ReplaceComparisonOperator == -> !=
   * 88 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I14 Branch 50 IF_ACMPNE L514 - true
   * 89 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I55 Branch 55 IFLE L522 - true
   * 90 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I55 Branch 55 IFLE L522 - false
   * 91 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I62 Branch 56 IF_ACMPEQ L523 - true
   */

  @Test
  public void test24()  throws Throwable  {
      THashMap<Integer, String> tHashMap0 = new THashMap<Integer, String>(310081, 310081);
      tHashMap0.put((Integer) 310081, "}");
      boolean boolean0 = tHashMap0.containsValue((Object) ":");
      assertEquals(false, tHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 25
  /*
   * 7 covered goals:
   * 1 Weak Mutation 724: gnu.trove.map.hash.THashMap.containsKey(Ljava/lang/Object;)Z:541 - ReplaceVariable key -> FREE
   * 2 Weak Mutation 725: gnu.trove.map.hash.THashMap.containsKey(Ljava/lang/Object;)Z:541 - ReplaceVariable key -> REMOVED
   * 3 Weak Mutation 726: gnu.trove.map.hash.THashMap.containsKey(Ljava/lang/Object;)Z:541 - DeleteStatement: contains(Ljava/lang/Object;)Z
   * 4 gnu.trove.map.hash.THashMap.containsKey(Ljava/lang/Object;)Z: root-Branch
   * 5 Weak Mutation 724: gnu.trove.map.hash.THashMap.containsKey(Ljava/lang/Object;)Z:541 - ReplaceVariable key -> FREE
   * 6 Weak Mutation 725: gnu.trove.map.hash.THashMap.containsKey(Ljava/lang/Object;)Z:541 - ReplaceVariable key -> REMOVED
   * 7 Weak Mutation 726: gnu.trove.map.hash.THashMap.containsKey(Ljava/lang/Object;)Z:541 - DeleteStatement: contains(Ljava/lang/Object;)Z
   */

  @Test
  public void test25()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>(572);
      tHashMap0.containsKey((Object) "");
      assertEquals(1201, tHashMap0.capacity());
  }

  //Test case number: 26
  /*
   * 37 covered goals:
   * 1 Weak Mutation 867: gnu.trove.map.hash.THashMap$Entry.<init>(Lgnu/trove/map/hash/THashMap;Ljava/lang/Object;Ljava/lang/Object;I)V:820 - ReplaceVariable key -> value
   * 2 Weak Mutation 868: gnu.trove.map.hash.THashMap$Entry.<init>(Lgnu/trove/map/hash/THashMap;Ljava/lang/Object;Ljava/lang/Object;I)V:821 - ReplaceVariable value -> key
   * 3 Weak Mutation 531: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceComparisonOperator <= -> <
   * 4 Weak Mutation 221: gnu.trove.map.hash.THashMap.<init>(Ljava/util/Map;)V:102 - DeleteStatement: putAll(Ljava/util/Map;)V
   * 5 Weak Mutation 736: gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V:554 - DeleteStatement: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   * 6 Weak Mutation 733: gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V:553 - DeleteStatement: next()Ljava/lang/Object;
   * 7 Weak Mutation 734: gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V:554 - DeleteStatement: getKey()Ljava/lang/Object;
   * 8 Weak Mutation 735: gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V:554 - DeleteStatement: getValue()Ljava/lang/Object;
   * 9 Weak Mutation 867: gnu.trove.map.hash.THashMap$Entry.<init>(Lgnu/trove/map/hash/THashMap;Ljava/lang/Object;Ljava/lang/Object;I)V:820 - ReplaceVariable key -> value
   * 10 Weak Mutation 868: gnu.trove.map.hash.THashMap$Entry.<init>(Lgnu/trove/map/hash/THashMap;Ljava/lang/Object;Ljava/lang/Object;I)V:821 - ReplaceVariable value -> key
   * 11 Weak Mutation 869: gnu.trove.map.hash.THashMap$Entry.<init>(Lgnu/trove/map/hash/THashMap;Ljava/lang/Object;Ljava/lang/Object;I)V:822 - InsertUnaryOp Negation of index
   * 12 Weak Mutation 870: gnu.trove.map.hash.THashMap$Entry.<init>(Lgnu/trove/map/hash/THashMap;Ljava/lang/Object;Ljava/lang/Object;I)V:822 - InsertUnaryOp IINC 1 index
   * 13 Weak Mutation 871: gnu.trove.map.hash.THashMap$Entry.<init>(Lgnu/trove/map/hash/THashMap;Ljava/lang/Object;Ljava/lang/Object;I)V:822 - InsertUnaryOp IINC -1 index
   * 14 Weak Mutation 873: gnu.trove.map.hash.THashMap$Entry.getValue()Ljava/lang/Object;:832 - DeleteField: valLjava/lang/Object;
   * 15 Weak Mutation 944: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - InsertUnaryOp IINC 1 index
   * 16 Weak Mutation 945: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - InsertUnaryOp IINC -1 index
   * 17 Weak Mutation 941: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - InsertUnaryOp IINC 1 index
   * 18 Weak Mutation 940: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - InsertUnaryOp Negation of index
   * 19 Weak Mutation 943: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - InsertUnaryOp Negation of index
   * 20 Weak Mutation 942: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - InsertUnaryOp IINC -1 index
   * 21 Weak Mutation 937: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - DeleteField: this$1Lgnu/trove/map/hash/THashMap$EntryView;
   * 22 Weak Mutation 936: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - InsertUnaryOp IINC -1 index
   * 23 Weak Mutation 939: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - DeleteField: _values[Ljava/lang/Object;
   * 24 Weak Mutation 938: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - DeleteField: this$0Lgnu/trove/map/hash/THashMap;
   * 25 Weak Mutation 933: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - DeleteField: _set[Ljava/lang/Object;
   * 26 Weak Mutation 932: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - DeleteField: this$0Lgnu/trove/map/hash/THashMap;
   * 27 Weak Mutation 935: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - InsertUnaryOp IINC 1 index
   * 28 Weak Mutation 934: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - InsertUnaryOp Negation of index
   * 29 Weak Mutation 929: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - DeleteField: this$1Lgnu/trove/map/hash/THashMap$EntryView;
   * 30 Weak Mutation 931: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - DeleteField: this$1Lgnu/trove/map/hash/THashMap$EntryView;
   * 31 Weak Mutation 930: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - DeleteField: this$0Lgnu/trove/map/hash/THashMap;
   * 32 gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;: root-Branch
   * 33 gnu.trove.map.hash.THashMap.<init>(Ljava/util/Map;)V: root-Branch
   * 34 gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V: I15 Branch 60 IFEQ L553 - false
   * 35 gnu.trove.map.hash.THashMap$Entry.getKey()Ljava/lang/Object;: root-Branch
   * 36 gnu.trove.map.hash.THashMap$Entry.getValue()Ljava/lang/Object;: root-Branch
   * 37 gnu.trove.map.hash.THashMap$Entry.<init>(Lgnu/trove/map/hash/THashMap;Ljava/lang/Object;Ljava/lang/Object;I)V: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>((-108), (-1044.6168F));
      tHashMap0.put((Integer) null, (Integer) (-108));
      THashMap<Object, Integer> tHashMap1 = new THashMap<Object, Integer>((Map<?, ? extends Integer>) tHashMap0);
      assertEquals(1, tHashMap0.size());
      assertEquals(1, tHashMap1.size());
  }

  //Test case number: 27
  /*
   * 32 covered goals:
   * 1 Weak Mutation 920: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - ReplaceBitwiseOperator ^ -> &
   * 2 Weak Mutation 916: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - ReplaceComparisonOperator != null -> = null
   * 3 Weak Mutation 917: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 914: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - DeleteStatement: hashCode()I
   * 5 Weak Mutation 915: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - DeleteStatement: getValue()Ljava/lang/Object;
   * 6 Weak Mutation 913: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - DeleteStatement: getKey()Ljava/lang/Object;
   * 7 Weak Mutation 911: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - ReplaceComparisonOperator != null -> = null
   * 8 Weak Mutation 910: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - DeleteStatement: getKey()Ljava/lang/Object;
   * 9 gnu.trove.map.hash.THashMap$Entry.hashCode()I: I4 Branch 79 IFNONNULL L861 - true
   * 10 gnu.trove.map.hash.THashMap$Entry.hashCode()I: I14 Branch 80 IFNONNULL L861 - false
   * 11 Weak Mutation 614: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:452 - ReplaceVariable key -> prev
   * 12 Weak Mutation 615: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:452 - DeleteStatement: index(Ljava/lang/Object;)I
   * 13 Weak Mutation 612: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:452 - ReplaceVariable key -> FREE
   * 14 Weak Mutation 613: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:452 - ReplaceVariable key -> REMOVED
   * 15 Weak Mutation 618: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:453 - InsertUnaryOp IINC -1 index
   * 16 Weak Mutation 616: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:453 - InsertUnaryOp Negation of index
   * 17 Weak Mutation 617: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:453 - InsertUnaryOp IINC 1 index
   * 18 Weak Mutation 621: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:453 - ReplaceComparisonOperator < -> -2
   * 19 Weak Mutation 631: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:457 - ReplaceVariable prev -> FREE
   * 20 Weak Mutation 633: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:457 - ReplaceVariable prev -> key
   * 21 Weak Mutation 632: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:457 - ReplaceVariable prev -> REMOVED
   * 22 Weak Mutation 621: gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;:453 - ReplaceComparisonOperator < -> -2
   * 23 Weak Mutation 872: gnu.trove.map.hash.THashMap$Entry.getKey()Ljava/lang/Object;:827 - DeleteField: keyLjava/lang/Object;
   * 24 Weak Mutation 920: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - ReplaceBitwiseOperator ^ -> &
   * 25 Weak Mutation 916: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - ReplaceComparisonOperator != null -> = null
   * 26 Weak Mutation 917: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - ReplaceConstant - 0 -> 1
   * 27 Weak Mutation 914: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - DeleteStatement: hashCode()I
   * 28 Weak Mutation 915: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - DeleteStatement: getValue()Ljava/lang/Object;
   * 29 Weak Mutation 913: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - DeleteStatement: getKey()Ljava/lang/Object;
   * 30 Weak Mutation 911: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - ReplaceComparisonOperator != null -> = null
   * 31 Weak Mutation 910: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - DeleteStatement: getKey()Ljava/lang/Object;
   * 32 gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;: I13 Branch 49 IFLT L453 - true
   */

  @Test
  public void test27()  throws Throwable  {
      THashMap<String, Integer> tHashMap0 = new THashMap<String, Integer>(1222);
      Object[] objectArray0 = new Object[4];
      THashMap<String, String> tHashMap1 = new THashMap<String, String>(1222, 1222);
      tHashMap0.put("{}", (Integer) null);
      THashMap<String, Object> tHashMap2 = new THashMap<String, Object>((Map<? extends String, ?>) tHashMap0);
      Set<Map.Entry<String, Object>> set0 = tHashMap2.entrySet();
      objectArray0[3] = (Object) set0;
      assertEquals(false, tHashMap0.isEmpty());
      
      THashMap<Object, Object> tHashMap3 = new THashMap<Object, Object>((Map<?, ?>) tHashMap1);
      tHashMap3.remove(objectArray0[3]);
      assertEquals(true, tHashMap3.isEmpty());
  }

  //Test case number: 28
  /*
   * 136 covered goals:
   * 1 Weak Mutation 921: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - ReplaceBitwiseOperator ^ -> |
   * 2 Weak Mutation 918: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - DeleteStatement: getValue()Ljava/lang/Object;
   * 3 Weak Mutation 919: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - DeleteStatement: hashCode()I
   * 4 gnu.trove.map.hash.THashMap$Entry.hashCode()I: I14 Branch 80 IFNONNULL L861 - true
   * 5 Weak Mutation 221: gnu.trove.map.hash.THashMap.<init>(Ljava/util/Map;)V:102 - DeleteStatement: putAll(Ljava/util/Map;)V
   * 6 Weak Mutation 508: gnu.trove.map.hash.THashMap.rehash(I)V:391 - ReplaceVariable newCapacity -> oldSize
   * 7 Weak Mutation 509: gnu.trove.map.hash.THashMap.rehash(I)V:391 - InsertUnaryOp Negation of newCapacity
   * 8 Weak Mutation 510: gnu.trove.map.hash.THashMap.rehash(I)V:391 - InsertUnaryOp IINC 1 newCapacity
   * 9 Weak Mutation 511: gnu.trove.map.hash.THashMap.rehash(I)V:391 - InsertUnaryOp IINC -1 newCapacity
   * 10 Weak Mutation 504: gnu.trove.map.hash.THashMap.rehash(I)V:390 - ReplaceVariable FREE -> REMOVED
   * 11 Weak Mutation 505: gnu.trove.map.hash.THashMap.rehash(I)V:390 - DeleteField: FREELjava/lang/Object;
   * 12 Weak Mutation 506: gnu.trove.map.hash.THashMap.rehash(I)V:390 - DeleteStatement: fill([Ljava/lang/Object;Ljava/lang/Object;)V
   * 13 Weak Mutation 507: gnu.trove.map.hash.THashMap.rehash(I)V:391 - ReplaceVariable newCapacity -> oldCapacity
   * 14 Weak Mutation 500: gnu.trove.map.hash.THashMap.rehash(I)V:389 - InsertUnaryOp Negation of newCapacity
   * 15 Weak Mutation 501: gnu.trove.map.hash.THashMap.rehash(I)V:389 - InsertUnaryOp IINC 1 newCapacity
   * 16 Weak Mutation 502: gnu.trove.map.hash.THashMap.rehash(I)V:389 - InsertUnaryOp IINC -1 newCapacity
   * 17 Weak Mutation 503: gnu.trove.map.hash.THashMap.rehash(I)V:390 - DeleteField: _set[Ljava/lang/Object;
   * 18 Weak Mutation 496: gnu.trove.map.hash.THashMap.rehash(I)V:387 - ReplaceVariable _values -> _set
   * 19 Weak Mutation 497: gnu.trove.map.hash.THashMap.rehash(I)V:387 - DeleteField: _values[Ljava/lang/Object;
   * 20 Weak Mutation 498: gnu.trove.map.hash.THashMap.rehash(I)V:389 - ReplaceVariable newCapacity -> oldCapacity
   * 21 Weak Mutation 499: gnu.trove.map.hash.THashMap.rehash(I)V:389 - ReplaceVariable newCapacity -> oldSize
   * 22 Weak Mutation 493: gnu.trove.map.hash.THashMap.rehash(I)V:384 - DeleteField: _set[Ljava/lang/Object;
   * 23 Weak Mutation 495: gnu.trove.map.hash.THashMap.rehash(I)V:386 - DeleteField: _set[Ljava/lang/Object;
   * 24 Weak Mutation 494: gnu.trove.map.hash.THashMap.rehash(I)V:385 - DeleteStatement: size()I
   * 25 Weak Mutation 550: gnu.trove.map.hash.THashMap.rehash(I)V:399 - DeleteField: REMOVEDLjava/lang/Object;
   * 26 Weak Mutation 551: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceComparisonOperator != -> ==
   * 27 Weak Mutation 548: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceVariable o -> REMOVED
   * 28 Weak Mutation 549: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceVariable REMOVED -> FREE
   * 29 Weak Mutation 546: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceComparisonOperator == -> !=
   * 30 Weak Mutation 547: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceVariable o -> FREE
   * 31 Weak Mutation 544: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceVariable FREE -> REMOVED
   * 32 Weak Mutation 545: gnu.trove.map.hash.THashMap.rehash(I)V:399 - DeleteField: FREELjava/lang/Object;
   * 33 Weak Mutation 558: gnu.trove.map.hash.THashMap.rehash(I)V:402 - ReplaceVariable index -> oldSize
   * 34 Weak Mutation 559: gnu.trove.map.hash.THashMap.rehash(I)V:402 - ReplaceVariable index -> i
   * 35 Weak Mutation 556: gnu.trove.map.hash.THashMap.rehash(I)V:402 - ReplaceVariable index -> oldCapacity
   * 36 Weak Mutation 557: gnu.trove.map.hash.THashMap.rehash(I)V:402 - ReplaceVariable index -> count
   * 37 Weak Mutation 554: gnu.trove.map.hash.THashMap.rehash(I)V:401 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 38 Weak Mutation 555: gnu.trove.map.hash.THashMap.rehash(I)V:402 - ReplaceVariable index -> newCapacity
   * 39 Weak Mutation 552: gnu.trove.map.hash.THashMap.rehash(I)V:401 - ReplaceVariable o -> FREE
   * 40 Weak Mutation 553: gnu.trove.map.hash.THashMap.rehash(I)V:401 - ReplaceVariable o -> REMOVED
   * 41 Weak Mutation 567: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceVariable index -> newCapacity
   * 42 Weak Mutation 566: gnu.trove.map.hash.THashMap.rehash(I)V:403 - DeleteField: _set[Ljava/lang/Object;
   * 43 Weak Mutation 565: gnu.trove.map.hash.THashMap.rehash(I)V:402 - ReplaceComparisonOperator >= -> -1
   * 44 Weak Mutation 564: gnu.trove.map.hash.THashMap.rehash(I)V:402 - ReplaceComparisonOperator >= -> >
   * 45 Weak Mutation 563: gnu.trove.map.hash.THashMap.rehash(I)V:402 - ReplaceComparisonOperator >= -> ==
   * 46 Weak Mutation 562: gnu.trove.map.hash.THashMap.rehash(I)V:402 - InsertUnaryOp IINC -1 index
   * 47 Weak Mutation 561: gnu.trove.map.hash.THashMap.rehash(I)V:402 - InsertUnaryOp IINC 1 index
   * 48 Weak Mutation 560: gnu.trove.map.hash.THashMap.rehash(I)V:402 - InsertUnaryOp Negation of index
   * 49 Weak Mutation 575: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceConstant - 1 -> 0
   * 50 Weak Mutation 574: gnu.trove.map.hash.THashMap.rehash(I)V:403 - InsertUnaryOp IINC -1 index
   * 51 Weak Mutation 573: gnu.trove.map.hash.THashMap.rehash(I)V:403 - InsertUnaryOp IINC 1 index
   * 52 Weak Mutation 572: gnu.trove.map.hash.THashMap.rehash(I)V:403 - InsertUnaryOp Negation of index
   * 53 Weak Mutation 571: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceVariable index -> i
   * 54 Weak Mutation 570: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceVariable index -> oldSize
   * 55 Weak Mutation 569: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceVariable index -> count
   * 56 Weak Mutation 568: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceVariable index -> oldCapacity
   * 57 Weak Mutation 516: gnu.trove.map.hash.THashMap.rehash(I)V:396 - InsertUnaryOp Negation of oldCapacity
   * 58 Weak Mutation 517: gnu.trove.map.hash.THashMap.rehash(I)V:396 - InsertUnaryOp IINC 1 oldCapacity
   * 59 Weak Mutation 518: gnu.trove.map.hash.THashMap.rehash(I)V:396 - InsertUnaryOp IINC -1 oldCapacity
   * 60 Weak Mutation 519: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> newCapacity
   * 61 Weak Mutation 512: gnu.trove.map.hash.THashMap.rehash(I)V:395 - ReplaceConstant - 0 -> 1
   * 62 Weak Mutation 513: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable oldCapacity -> newCapacity
   * 63 Weak Mutation 514: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable oldCapacity -> count
   * 64 Weak Mutation 515: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable oldCapacity -> oldSize
   * 65 Weak Mutation 524: gnu.trove.map.hash.THashMap.rehash(I)V:396 - InsertUnaryOp IINC 1 i
   * 66 Weak Mutation 525: gnu.trove.map.hash.THashMap.rehash(I)V:396 - InsertUnaryOp IINC -1 i
   * 67 Weak Mutation 526: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> newCapacity
   * 68 Weak Mutation 527: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> oldCapacity
   * 69 Weak Mutation 520: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> oldCapacity
   * 70 Weak Mutation 521: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> count
   * 71 Weak Mutation 522: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> oldSize
   * 72 Weak Mutation 523: gnu.trove.map.hash.THashMap.rehash(I)V:396 - InsertUnaryOp Negation of i
   * 73 Weak Mutation 533: gnu.trove.map.hash.THashMap.rehash(I)V:397 - ReplaceVariable oldKeys -> oldVals
   * 74 Weak Mutation 532: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceComparisonOperator <= -> -1
   * 75 Weak Mutation 535: gnu.trove.map.hash.THashMap.rehash(I)V:397 - ReplaceVariable i -> newCapacity
   * 76 Weak Mutation 534: gnu.trove.map.hash.THashMap.rehash(I)V:397 - ReplaceVariable oldKeys -> _set
   * 77 Weak Mutation 529: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> oldSize
   * 78 Weak Mutation 528: gnu.trove.map.hash.THashMap.rehash(I)V:396 - ReplaceVariable i -> count
   * 79 Weak Mutation 541: gnu.trove.map.hash.THashMap.rehash(I)V:397 - InsertUnaryOp IINC -1 i
   * 80 Weak Mutation 540: gnu.trove.map.hash.THashMap.rehash(I)V:397 - InsertUnaryOp IINC 1 i
   * 81 Weak Mutation 543: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceVariable o -> REMOVED
   * 82 Weak Mutation 542: gnu.trove.map.hash.THashMap.rehash(I)V:399 - ReplaceVariable o -> FREE
   * 83 Weak Mutation 537: gnu.trove.map.hash.THashMap.rehash(I)V:397 - ReplaceVariable i -> count
   * 84 Weak Mutation 536: gnu.trove.map.hash.THashMap.rehash(I)V:397 - ReplaceVariable i -> oldCapacity
   * 85 Weak Mutation 539: gnu.trove.map.hash.THashMap.rehash(I)V:397 - InsertUnaryOp Negation of i
   * 86 Weak Mutation 538: gnu.trove.map.hash.THashMap.rehash(I)V:397 - ReplaceVariable i -> oldSize
   * 87 Weak Mutation 576: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceArithmeticOperator - -> +
   * 88 Weak Mutation 578: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceArithmeticOperator - -> /
   * 89 Weak Mutation 579: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceArithmeticOperator - -> *
   * 90 Weak Mutation 580: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceVariable o -> FREE
   * 91 Weak Mutation 581: gnu.trove.map.hash.THashMap.rehash(I)V:403 - ReplaceVariable o -> REMOVED
   * 92 Weak Mutation 736: gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V:554 - DeleteStatement: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   * 93 Weak Mutation 728: gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V:551 - DeleteStatement: ensureCapacity(I)V
   * 94 Weak Mutation 729: gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V:553 - DeleteStatement: entrySet()Ljava/util/Set;
   * 95 Weak Mutation 730: gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V:553 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 96 Weak Mutation 731: gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V:553 - DeleteStatement: hasNext()Z
   * 97 Weak Mutation 732: gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V:553 - ReplaceComparisonOperator == -> !=
   * 98 Weak Mutation 733: gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V:553 - DeleteStatement: next()Ljava/lang/Object;
   * 99 Weak Mutation 734: gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V:554 - DeleteStatement: getKey()Ljava/lang/Object;
   * 100 Weak Mutation 735: gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V:554 - DeleteStatement: getValue()Ljava/lang/Object;
   * 101 Weak Mutation 727: gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V:551 - DeleteStatement: size()I
   * 102 Weak Mutation 811: gnu.trove.map.hash.THashMap$EntryView.iterator()Ljava/util/Iterator;:618 - DeleteField: this$0Lgnu/trove/map/hash/THashMap;
   * 103 Weak Mutation 867: gnu.trove.map.hash.THashMap$Entry.<init>(Lgnu/trove/map/hash/THashMap;Ljava/lang/Object;Ljava/lang/Object;I)V:820 - ReplaceVariable key -> value
   * 104 Weak Mutation 868: gnu.trove.map.hash.THashMap$Entry.<init>(Lgnu/trove/map/hash/THashMap;Ljava/lang/Object;Ljava/lang/Object;I)V:821 - ReplaceVariable value -> key
   * 105 Weak Mutation 869: gnu.trove.map.hash.THashMap$Entry.<init>(Lgnu/trove/map/hash/THashMap;Ljava/lang/Object;Ljava/lang/Object;I)V:822 - InsertUnaryOp Negation of index
   * 106 Weak Mutation 870: gnu.trove.map.hash.THashMap$Entry.<init>(Lgnu/trove/map/hash/THashMap;Ljava/lang/Object;Ljava/lang/Object;I)V:822 - InsertUnaryOp IINC 1 index
   * 107 Weak Mutation 871: gnu.trove.map.hash.THashMap$Entry.<init>(Lgnu/trove/map/hash/THashMap;Ljava/lang/Object;Ljava/lang/Object;I)V:822 - InsertUnaryOp IINC -1 index
   * 108 Weak Mutation 872: gnu.trove.map.hash.THashMap$Entry.getKey()Ljava/lang/Object;:827 - DeleteField: keyLjava/lang/Object;
   * 109 Weak Mutation 873: gnu.trove.map.hash.THashMap$Entry.getValue()Ljava/lang/Object;:832 - DeleteField: valLjava/lang/Object;
   * 110 Weak Mutation 944: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - InsertUnaryOp IINC 1 index
   * 111 Weak Mutation 945: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - InsertUnaryOp IINC -1 index
   * 112 Weak Mutation 941: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - InsertUnaryOp IINC 1 index
   * 113 Weak Mutation 940: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - InsertUnaryOp Negation of index
   * 114 Weak Mutation 943: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - InsertUnaryOp Negation of index
   * 115 Weak Mutation 942: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - InsertUnaryOp IINC -1 index
   * 116 Weak Mutation 937: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - DeleteField: this$1Lgnu/trove/map/hash/THashMap$EntryView;
   * 117 Weak Mutation 936: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - InsertUnaryOp IINC -1 index
   * 118 Weak Mutation 939: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - DeleteField: _values[Ljava/lang/Object;
   * 119 Weak Mutation 938: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - DeleteField: this$0Lgnu/trove/map/hash/THashMap;
   * 120 Weak Mutation 933: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - DeleteField: _set[Ljava/lang/Object;
   * 121 Weak Mutation 932: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - DeleteField: this$0Lgnu/trove/map/hash/THashMap;
   * 122 Weak Mutation 935: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - InsertUnaryOp IINC 1 index
   * 123 Weak Mutation 934: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - InsertUnaryOp Negation of index
   * 124 Weak Mutation 929: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - DeleteField: this$1Lgnu/trove/map/hash/THashMap$EntryView;
   * 125 Weak Mutation 931: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - DeleteField: this$1Lgnu/trove/map/hash/THashMap$EntryView;
   * 126 Weak Mutation 930: gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;:611 - DeleteField: this$0Lgnu/trove/map/hash/THashMap;
   * 127 Weak Mutation 920: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - ReplaceBitwiseOperator ^ -> &
   * 128 Weak Mutation 916: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - ReplaceComparisonOperator != null -> = null
   * 129 Weak Mutation 914: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - DeleteStatement: hashCode()I
   * 130 Weak Mutation 915: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - DeleteStatement: getValue()Ljava/lang/Object;
   * 131 Weak Mutation 913: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - DeleteStatement: getKey()Ljava/lang/Object;
   * 132 Weak Mutation 911: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - ReplaceComparisonOperator != null -> = null
   * 133 Weak Mutation 910: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - DeleteStatement: getKey()Ljava/lang/Object;
   * 134 Weak Mutation 921: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - ReplaceBitwiseOperator ^ -> |
   * 135 Weak Mutation 918: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - DeleteStatement: getValue()Ljava/lang/Object;
   * 136 Weak Mutation 919: gnu.trove.map.hash.THashMap$Entry.hashCode()I:861 - DeleteStatement: hashCode()I
   */

  @Test
  public void test28()  throws Throwable  {
      THashMap<String, Integer> tHashMap0 = new THashMap<String, Integer>(1222);
      tHashMap0.put("(this Collection)", (Integer) 1222);
      THashMap<Integer, Integer> tHashMap1 = new THashMap<Integer, Integer>(1222);
      Object[] objectArray0 = new Object[4];
      tHashMap1._set = objectArray0;
      THashMap<String, Object> tHashMap2 = new THashMap<String, Object>((Map<? extends String, ?>) tHashMap0);
      Set<Map.Entry<String, Object>> set0 = tHashMap2.entrySet();
      objectArray0[3] = (Object) set0;
      assertEquals(false, tHashMap0.isEmpty());
      
      // Undeclared exception!
      try {
        tHashMap1.trimToSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Equal objects must have equal hashcodes. During rehashing, Trove discovered that the following two objects claim to be equal (as in java.lang.Object.equals()) but their hashCodes (or those calculated by your TObjectHashingStrategy) are not equal.This violates the general contract of java.lang.Object.hashCode().  See bullet point two in that method's documentation. object #1 =class null id= 0 hashCode= 0 toString= null; object #2 =class null id= 0 hashCode= 0 toString= null
         // 
         // More than one type used for keys. Watch out for asymmetric equals(). Read about the 'Liskov substitution principle' and the implications for equals() in java.
         // Key types: [class gnu.trove.map.hash.THashMap$EntryView, null]a == b
         // hashCode() and/or equals() have inconsistent implementation
         // Key set lost entries, now got 2 instead of 0. This can manifest itself as an apparent duplicate key.Inserting same object twice, rehashing bug. Object= null
         //
      }
  }

  //Test case number: 29
  /*
   * 82 covered goals:
   * 1 Weak Mutation 742: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:880 - DeleteField: _sizeI
   * 2 Weak Mutation 766: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:885 - InsertUnaryOp Negation of i
   * 3 Weak Mutation 767: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:885 - InsertUnaryOp IINC 1 i
   * 4 Weak Mutation 765: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:885 - DeleteField: _set[Ljava/lang/Object;
   * 5 Weak Mutation 768: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:885 - InsertUnaryOp IINC -1 i
   * 6 Weak Mutation 769: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:885 - DeleteStatement: writeObject(Ljava/lang/Object;)V
   * 7 Weak Mutation 774: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:886 - InsertUnaryOp IINC -1 i
   * 8 Weak Mutation 775: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:886 - DeleteStatement: writeObject(Ljava/lang/Object;)V
   * 9 Weak Mutation 772: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:886 - InsertUnaryOp Negation of i
   * 10 Weak Mutation 773: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:886 - InsertUnaryOp IINC 1 i
   * 11 Weak Mutation 770: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:886 - ReplaceVariable _values -> _set
   * 12 Weak Mutation 771: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:886 - DeleteField: _values[Ljava/lang/Object;
   * 13 gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V: I39 Branch 63 IF_ACMPEQ L884 - false
   * 14 Weak Mutation 273: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:171 - ReplaceComparisonOperator >= -> ==
   * 15 Weak Mutation 747: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:883 - InsertUnaryOp IINC -1 i
   * 16 Weak Mutation 746: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:883 - InsertUnaryOp IINC 1 i
   * 17 Weak Mutation 745: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:883 - InsertUnaryOp Negation of i
   * 18 Weak Mutation 744: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:883 - DeleteField: _set[Ljava/lang/Object;
   * 19 Weak Mutation 751: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - DeleteField: _set[Ljava/lang/Object;
   * 20 Weak Mutation 750: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:883 - ReplaceComparisonOperator <= -> -1
   * 21 Weak Mutation 749: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:883 - ReplaceComparisonOperator <= -> <
   * 22 Weak Mutation 739: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:880 - InsertUnaryOp Negation
   * 23 Weak Mutation 738: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:874 - DeleteStatement: writeByte(I)V
   * 24 Weak Mutation 737: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:874 - ReplaceConstant - 1 -> 0
   * 25 Weak Mutation 743: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:880 - DeleteStatement: writeInt(I)V
   * 26 Weak Mutation 741: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:880 - InsertUnaryOp -1
   * 27 Weak Mutation 740: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:880 - InsertUnaryOp +1
   * 28 Weak Mutation 762: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - ReplaceVariable FREE -> REMOVED
   * 29 Weak Mutation 763: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - DeleteField: FREELjava/lang/Object;
   * 30 Weak Mutation 760: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - InsertUnaryOp IINC 1 i
   * 31 Weak Mutation 761: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - InsertUnaryOp IINC -1 i
   * 32 Weak Mutation 764: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - ReplaceComparisonOperator == -> !=
   * 33 Weak Mutation 754: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - InsertUnaryOp IINC -1 i
   * 34 Weak Mutation 755: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - ReplaceVariable REMOVED -> FREE
   * 35 Weak Mutation 752: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - InsertUnaryOp Negation of i
   * 36 Weak Mutation 753: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - InsertUnaryOp IINC 1 i
   * 37 Weak Mutation 758: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - DeleteField: _set[Ljava/lang/Object;
   * 38 Weak Mutation 759: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - InsertUnaryOp Negation of i
   * 39 Weak Mutation 756: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - DeleteField: REMOVEDLjava/lang/Object;
   * 40 Weak Mutation 757: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - ReplaceComparisonOperator == -> !=
   * 41 Weak Mutation 747: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:883 - InsertUnaryOp IINC -1 i
   * 42 Weak Mutation 746: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:883 - InsertUnaryOp IINC 1 i
   * 43 Weak Mutation 745: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:883 - InsertUnaryOp Negation of i
   * 44 Weak Mutation 744: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:883 - DeleteField: _set[Ljava/lang/Object;
   * 45 Weak Mutation 751: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - DeleteField: _set[Ljava/lang/Object;
   * 46 Weak Mutation 750: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:883 - ReplaceComparisonOperator <= -> -1
   * 47 Weak Mutation 749: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:883 - ReplaceComparisonOperator <= -> <
   * 48 Weak Mutation 739: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:880 - InsertUnaryOp Negation
   * 49 Weak Mutation 738: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:874 - DeleteStatement: writeByte(I)V
   * 50 Weak Mutation 737: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:874 - ReplaceConstant - 1 -> 0
   * 51 Weak Mutation 743: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:880 - DeleteStatement: writeInt(I)V
   * 52 Weak Mutation 742: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:880 - DeleteField: _sizeI
   * 53 Weak Mutation 741: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:880 - InsertUnaryOp -1
   * 54 Weak Mutation 740: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:880 - InsertUnaryOp +1
   * 55 Weak Mutation 762: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - ReplaceVariable FREE -> REMOVED
   * 56 Weak Mutation 763: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - DeleteField: FREELjava/lang/Object;
   * 57 Weak Mutation 760: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - InsertUnaryOp IINC 1 i
   * 58 Weak Mutation 761: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - InsertUnaryOp IINC -1 i
   * 59 Weak Mutation 766: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:885 - InsertUnaryOp Negation of i
   * 60 Weak Mutation 767: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:885 - InsertUnaryOp IINC 1 i
   * 61 Weak Mutation 764: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - ReplaceComparisonOperator == -> !=
   * 62 Weak Mutation 765: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:885 - DeleteField: _set[Ljava/lang/Object;
   * 63 Weak Mutation 754: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - InsertUnaryOp IINC -1 i
   * 64 Weak Mutation 755: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - ReplaceVariable REMOVED -> FREE
   * 65 Weak Mutation 752: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - InsertUnaryOp Negation of i
   * 66 Weak Mutation 753: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - InsertUnaryOp IINC 1 i
   * 67 Weak Mutation 758: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - DeleteField: _set[Ljava/lang/Object;
   * 68 Weak Mutation 759: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - InsertUnaryOp Negation of i
   * 69 Weak Mutation 756: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - DeleteField: REMOVEDLjava/lang/Object;
   * 70 Weak Mutation 757: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:884 - ReplaceComparisonOperator == -> !=
   * 71 Weak Mutation 774: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:886 - InsertUnaryOp IINC -1 i
   * 72 Weak Mutation 775: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:886 - DeleteStatement: writeObject(Ljava/lang/Object;)V
   * 73 Weak Mutation 772: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:886 - InsertUnaryOp Negation of i
   * 74 Weak Mutation 773: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:886 - InsertUnaryOp IINC 1 i
   * 75 Weak Mutation 770: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:886 - ReplaceVariable _values -> _set
   * 76 Weak Mutation 771: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:886 - DeleteField: _values[Ljava/lang/Object;
   * 77 Weak Mutation 768: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:885 - InsertUnaryOp IINC -1 i
   * 78 Weak Mutation 769: gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V:885 - DeleteStatement: writeObject(Ljava/lang/Object;)V
   * 79 gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 61 IFLE L883 - true
   * 80 gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 61 IFLE L883 - false
   * 81 gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 62 IF_ACMPEQ L884 - false
   * 82 gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V: I39 Branch 63 IF_ACMPEQ L884 - true
   */

  @Test
  public void test29()  throws Throwable  {
      THashMap<String, Object> tHashMap0 = new THashMap<String, Object>(0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      tHashMap0.put("=", (Object) "");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
      tHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 Weak Mutation 776: gnu.trove.map.hash.THashMap.readExternal(Ljava/io/ObjectInput;)V:896 - DeleteStatement: readByte()B
   * 2 Weak Mutation 776: gnu.trove.map.hash.THashMap.readExternal(Ljava/io/ObjectInput;)V:896 - DeleteStatement: readByte()B
   */

  @Test
  public void test30()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>(253);
      // Undeclared exception!
      try {
        tHashMap0.readExternal((ObjectInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 31
  /*
   * 79 covered goals:
   * 1 gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I30 Branch 34 IF_ACMPEQ L319 - true
   * 2 Weak Mutation 29: gnu.trove.map.hash.THashMap$HashProcedure.<init>(Lgnu/trove/map/hash/THashMap;)V:237 - ReplaceConstant - 0 -> 1
   * 3 Weak Mutation 31: gnu.trove.map.hash.THashMap$HashProcedure.getHashCode()I:240 - InsertUnaryOp +1
   * 4 Weak Mutation 30: gnu.trove.map.hash.THashMap$HashProcedure.getHashCode()I:240 - InsertUnaryOp Negation
   * 5 Weak Mutation 32: gnu.trove.map.hash.THashMap$HashProcedure.getHashCode()I:240 - InsertUnaryOp -1
   * 6 Weak Mutation 239: gnu.trove.map.hash.THashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:145 - ReplaceVariable value -> FREE
   * 7 Weak Mutation 238: gnu.trove.map.hash.THashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:144 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 8 Weak Mutation 237: gnu.trove.map.hash.THashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:144 - ReplaceVariable key -> REMOVED
   * 9 Weak Mutation 236: gnu.trove.map.hash.THashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:144 - ReplaceVariable key -> value
   * 10 Weak Mutation 235: gnu.trove.map.hash.THashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:144 - ReplaceVariable key -> FREE
   * 11 Weak Mutation 234: gnu.trove.map.hash.THashMap.setUp(I)I:130 - InsertUnaryOp IINC -1 capacity
   * 12 Weak Mutation 233: gnu.trove.map.hash.THashMap.setUp(I)I:130 - InsertUnaryOp IINC 1 capacity
   * 13 Weak Mutation 232: gnu.trove.map.hash.THashMap.setUp(I)I:130 - InsertUnaryOp Negation of capacity
   * 14 Weak Mutation 231: gnu.trove.map.hash.THashMap.setUp(I)I:130 - ReplaceVariable capacity -> initialCapacity
   * 15 Weak Mutation 230: gnu.trove.map.hash.THashMap.setUp(I)I:129 - InsertUnaryOp IINC -1 capacity
   * 16 Weak Mutation 229: gnu.trove.map.hash.THashMap.setUp(I)I:129 - InsertUnaryOp IINC 1 capacity
   * 17 Weak Mutation 228: gnu.trove.map.hash.THashMap.setUp(I)I:129 - InsertUnaryOp Negation of capacity
   * 18 Weak Mutation 227: gnu.trove.map.hash.THashMap.setUp(I)I:129 - ReplaceVariable capacity -> initialCapacity
   * 19 Weak Mutation 226: gnu.trove.map.hash.THashMap.setUp(I)I:127 - InsertUnaryOp IINC -1 initialCapacity
   * 20 Weak Mutation 225: gnu.trove.map.hash.THashMap.setUp(I)I:127 - InsertUnaryOp IINC 1 initialCapacity
   * 21 Weak Mutation 224: gnu.trove.map.hash.THashMap.setUp(I)I:127 - InsertUnaryOp Negation of initialCapacity
   * 22 Weak Mutation 244: gnu.trove.map.hash.THashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:145 - InsertUnaryOp IINC -1 index
   * 23 Weak Mutation 242: gnu.trove.map.hash.THashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:145 - InsertUnaryOp Negation of index
   * 24 Weak Mutation 243: gnu.trove.map.hash.THashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:145 - InsertUnaryOp IINC 1 index
   * 25 Weak Mutation 240: gnu.trove.map.hash.THashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:145 - ReplaceVariable value -> REMOVED
   * 26 Weak Mutation 241: gnu.trove.map.hash.THashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:145 - ReplaceVariable value -> key
   * 27 Weak Mutation 274: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:171 - ReplaceComparisonOperator >= -> >
   * 28 Weak Mutation 272: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:171 - InsertUnaryOp Negation of index
   * 29 Weak Mutation 271: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:170 - ReplaceConstant - 1 -> 0
   * 30 Weak Mutation 317: gnu.trove.map.hash.THashMap.hashCode()I:207 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z
   * 31 Weak Mutation 318: gnu.trove.map.hash.THashMap.hashCode()I:208 - DeleteStatement: getHashCode()I
   * 32 Weak Mutation 288: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:176 - ReplaceVariable _values -> _set
   * 33 Weak Mutation 289: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:176 - DeleteField: _values[Ljava/lang/Object;
   * 34 Weak Mutation 290: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:176 - InsertUnaryOp Negation of index
   * 35 Weak Mutation 291: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:176 - InsertUnaryOp IINC 1 index
   * 36 Weak Mutation 292: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:176 - InsertUnaryOp IINC -1 index
   * 37 Weak Mutation 293: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:176 - ReplaceVariable value -> FREE
   * 38 Weak Mutation 294: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:176 - ReplaceVariable value -> previous
   * 39 Weak Mutation 295: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:176 - ReplaceVariable value -> REMOVED
   * 40 Weak Mutation 296: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:177 - InsertUnaryOp Negation of isNewMapping
   * 41 Weak Mutation 297: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:177 - ReplaceComparisonOperator == -> !=
   * 42 Weak Mutation 298: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:178 - InsertUnaryOp Negation
   * 43 Weak Mutation 299: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:178 - DeleteField: consumeFreeSlotZ
   * 44 Weak Mutation 300: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:178 - DeleteStatement: postInsertHook(Z)V
   * 45 Weak Mutation 301: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:181 - ReplaceVariable previous -> FREE
   * 46 Weak Mutation 302: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:181 - ReplaceVariable previous -> value
   * 47 Weak Mutation 303: gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;:181 - ReplaceVariable previous -> REMOVED
   * 48 Weak Mutation 372: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - ReplaceVariable keys -> values
   * 49 Weak Mutation 375: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp IINC 1 i
   * 50 Weak Mutation 374: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp Negation of i
   * 51 Weak Mutation 368: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:318 - InsertUnaryOp IINC -1 i
   * 52 Weak Mutation 371: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:318 - ReplaceComparisonOperator <= -> -1
   * 53 Weak Mutation 370: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:318 - ReplaceComparisonOperator <= -> <
   * 54 Weak Mutation 380: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - ReplaceVariable keys -> values
   * 55 Weak Mutation 383: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp IINC 1 i
   * 56 Weak Mutation 382: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp Negation of i
   * 57 Weak Mutation 377: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - ReplaceVariable FREE -> REMOVED
   * 58 Weak Mutation 376: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp IINC -1 i
   * 59 Weak Mutation 379: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - ReplaceComparisonOperator == -> !=
   * 60 Weak Mutation 378: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - DeleteField: FREELjava/lang/Object;
   * 61 Weak Mutation 364: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:318 - ReplaceVariable keys -> values
   * 62 Weak Mutation 366: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:318 - InsertUnaryOp Negation of i
   * 63 Weak Mutation 367: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:318 - InsertUnaryOp IINC 1 i
   * 64 Weak Mutation 361: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:316 - DeleteField: _set[Ljava/lang/Object;
   * 65 Weak Mutation 362: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:317 - ReplaceVariable _values -> _set
   * 66 Weak Mutation 363: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:317 - DeleteField: _values[Ljava/lang/Object;
   * 67 Weak Mutation 401: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:325 - ReplaceConstant - 1 -> 0
   * 68 Weak Mutation 387: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - ReplaceComparisonOperator == -> !=
   * 69 Weak Mutation 386: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - DeleteField: REMOVEDLjava/lang/Object;
   * 70 Weak Mutation 385: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - ReplaceVariable REMOVED -> FREE
   * 71 Weak Mutation 384: gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z:319 - InsertUnaryOp IINC -1 i
   * 72 Weak Mutation 635: gnu.trove.map.hash.THashMap.removeAt(I)V:467 - DeleteField: _values[Ljava/lang/Object;
   * 73 Weak Mutation 634: gnu.trove.map.hash.THashMap.removeAt(I)V:467 - ReplaceVariable _values -> _set
   * 74 Weak Mutation 639: gnu.trove.map.hash.THashMap.removeAt(I)V:468 - InsertUnaryOp Negation of index
   * 75 Weak Mutation 638: gnu.trove.map.hash.THashMap.removeAt(I)V:467 - InsertUnaryOp IINC -1 index
   * 76 Weak Mutation 637: gnu.trove.map.hash.THashMap.removeAt(I)V:467 - InsertUnaryOp IINC 1 index
   * 77 Weak Mutation 636: gnu.trove.map.hash.THashMap.removeAt(I)V:467 - InsertUnaryOp Negation of index
   * 78 Weak Mutation 641: gnu.trove.map.hash.THashMap.removeAt(I)V:468 - InsertUnaryOp IINC -1 index
   * 79 Weak Mutation 640: gnu.trove.map.hash.THashMap.removeAt(I)V:468 - InsertUnaryOp IINC 1 index
   */

  @Test
  public void test31()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>();
      tHashMap0.removeAt(10);
      assertEquals(false, tHashMap0.isEmpty());
      
      THashMap<Object, Integer> tHashMap1 = new THashMap<Object, Integer>();
      tHashMap1.put((Object) tHashMap0, (Integer) 10);
      assertEquals("{{}=10}", tHashMap1.toString());
  }
}
