/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedShortIntMap;
import gnu.trove.map.TShortIntMap;
import gnu.trove.map.hash.TShortIntHashMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedShortIntMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short)1068;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)1113;
      shortArray0[3] = short3;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) short1;
      intArray0[1] = (int) short1;
      intArray0[2] = (int) shortArray0[0];
      intArray0[3] = (int) short2;
      intArray0[4] = (int) shortArray0[3];
      intArray0[5] = (int) shortArray0[2];
      intArray0[6] = (int) short0;
      intArray0[7] = (int) shortArray0[1];
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      String string0 = "";
      Locale locale0 = new Locale(string0, string0);
      String string1 = locale0.getDisplayVariant();
      TSynchronizedShortIntMap tSynchronizedShortIntMap0 = new TSynchronizedShortIntMap((TShortIntMap) tShortIntHashMap0, (Object) string1);
      boolean boolean0 = tSynchronizedShortIntMap0.isEmpty();
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)313;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short) (-1258);
      shortArray0[3] = short3;
      short short4 = (short)95;
      int int0 = 0;
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(int0);
      TSynchronizedShortIntMap tSynchronizedShortIntMap0 = new TSynchronizedShortIntMap((TShortIntMap) tShortIntHashMap0);
      tSynchronizedShortIntMap0.remove(short1);
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)1579;
      shortArray0[6] = short6;
      short short7 = (short)2021;
      shortArray0[7] = short7;
      int[] intArray0 = new int[8];
      int int1 = 1159;
      intArray0[0] = int1;
      intArray0[1] = (int) shortArray0[4];
      intArray0[2] = (int) shortArray0[1];
      int int2 = 238;
      intArray0[3] = int2;
      intArray0[4] = (int) short7;
      intArray0[5] = (int) shortArray0[4];
      intArray0[6] = (int) shortArray0[2];
      intArray0[7] = (int) short3;
      TShortIntHashMap tShortIntHashMap1 = new TShortIntHashMap(shortArray0, intArray0);
      TSynchronizedShortIntMap tSynchronizedShortIntMap1 = new TSynchronizedShortIntMap((TShortIntMap) tShortIntHashMap1);
      tSynchronizedShortIntMap1.isEmpty();
      TShortIntMap tShortIntMap0 = null;
      TSynchronizedShortIntMap tSynchronizedShortIntMap2 = null;
      try {
        tSynchronizedShortIntMap2 = new TSynchronizedShortIntMap(tShortIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 1804;
      float float0 = (-1850.285F);
      short short0 = (short) (-6);
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(int0, float0, short0, int0);
      Object object0 = null;
      TSynchronizedShortIntMap tSynchronizedShortIntMap0 = new TSynchronizedShortIntMap((TShortIntMap) tShortIntHashMap0, object0);
      int int1 = tSynchronizedShortIntMap0.getNoEntryValue();
      assertEquals(1804, int1);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 1;
      short short0 = (short)1369;
      int int1 = 44;
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap();
      TSynchronizedShortIntMap tSynchronizedShortIntMap0 = new TSynchronizedShortIntMap((TShortIntMap) tShortIntHashMap0);
      TSynchronizedShortIntMap tSynchronizedShortIntMap1 = (TSynchronizedShortIntMap)tSynchronizedShortIntMap0.mutex;
      TSynchronizedShortIntMap tSynchronizedShortIntMap2 = new TSynchronizedShortIntMap((TShortIntMap) tShortIntHashMap0, (Object) tSynchronizedShortIntMap1);
      tSynchronizedShortIntMap2.iterator();
      TSynchronizedShortIntMap tSynchronizedShortIntMap3 = new TSynchronizedShortIntMap((TShortIntMap) tShortIntHashMap0);
      tSynchronizedShortIntMap3.putAll((TShortIntMap) tShortIntHashMap0);
      TShortIntHashMap tShortIntHashMap1 = new TShortIntHashMap(int0, (float) int0, short0, int1);
      TSynchronizedShortIntMap tSynchronizedShortIntMap4 = new TSynchronizedShortIntMap((TShortIntMap) tShortIntHashMap1);
      assertTrue(tSynchronizedShortIntMap4.equals(tSynchronizedShortIntMap1));
  }

  @Test
  public void test4()  throws Throwable  {
      TShortIntMap tShortIntMap0 = null;
      Locale locale0 = Locale.FRENCH;
      String string0 = locale0.getDisplayLanguage();
      TSynchronizedShortIntMap tSynchronizedShortIntMap0 = new TSynchronizedShortIntMap(tShortIntMap0, (Object) string0);
      // Undeclared exception!
      try {
        tSynchronizedShortIntMap0.values();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 6;
      int int1 = (-1);
      float float0 = 1951.7273F;
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(int1, float0);
      String string0 = "{#Q73u[k}v~gK\\F#k:";
      int int2 = (-406);
      String string1 = ").Sj}Yil-^";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int2, string0, string0, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: {#Q73u[k}v~gK\\F#k:://%7B%23Q73u%5Bk%7Dv~gK%5CF%23k:@[{#Q73u[k}v~gK\\F#k:]:-406%7B%23Q73u%5Bk%7Dv~gK%5CF%23k:?%7B%23Q73u[k%7Dv~gK%5CF%23k:#).Sj%7DYil-%5E
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 1;
      float float0 = 169.29054F;
      short short0 = (short) (-1733);
      int int1 = (-606);
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(int0, float0, short0, int1);
      Locale locale0 = Locale.US;
      char char0 = '#';
      // Undeclared exception!
      try {
        locale0.getExtension(char0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed extension key: #
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-1);
      float float0 = 0.0F;
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap();
      TShortIntHashMap tShortIntHashMap1 = new TShortIntHashMap((TShortIntMap) tShortIntHashMap0);
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://@?#
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 277;
      int int1 = 1226;
      short short0 = (short)1666;
      int int2 = 0;
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(int1, (float) int0, short0, int2);
      String string0 = "";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short) (-1999);
      shortArray0[0] = short0;
      short short1 = (short)1915;
      shortArray0[1] = short1;
      short short2 = (short)134;
      shortArray0[2] = short2;
      short short3 = (short)1876;
      shortArray0[3] = short3;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) short0;
      intArray0[1] = (int) short1;
      intArray0[2] = (int) shortArray0[2];
      intArray0[3] = (int) shortArray0[0];
      intArray0[4] = (int) shortArray0[2];
      intArray0[5] = (int) short3;
      intArray0[6] = (int) shortArray0[2];
      intArray0[7] = (int) shortArray0[0];
      intArray0[8] = (int) shortArray0[3];
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      File file0 = null;
      String string0 = "<4Z$+*N#A";
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(file0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"<4Z$+*N#A\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short)1;
      shortArray0[0] = short0;
      short short1 = (short)1545;
      shortArray0[1] = short1;
      short short2 = (short) (-1397);
      shortArray0[2] = short2;
      short short3 = (short) (-1);
      shortArray0[3] = short3;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) shortArray0[0];
      intArray0[1] = (int) short0;
      intArray0[2] = (int) short3;
      intArray0[3] = (int) shortArray0[3];
      intArray0[4] = (int) shortArray0[2];
      intArray0[5] = (int) shortArray0[0];
      intArray0[6] = (int) shortArray0[3];
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      String string0 = "";
      URI uRI0 = URI.create(string0);
      String string1 = uRI0.getRawFragment();
      TSynchronizedShortIntMap tSynchronizedShortIntMap0 = new TSynchronizedShortIntMap((TShortIntMap) tShortIntHashMap0, (Object) string1);
      // Undeclared exception!
      try {
        tSynchronizedShortIntMap0.valueCollection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TShortIntMap tShortIntMap0 = null;
      TSynchronizedShortIntMap tSynchronizedShortIntMap0 = null;
      try {
        tSynchronizedShortIntMap0 = new TSynchronizedShortIntMap(tShortIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap();
      TSynchronizedShortIntMap tSynchronizedShortIntMap0 = new TSynchronizedShortIntMap((TShortIntMap) tShortIntHashMap0);
      assertEquals(true, tSynchronizedShortIntMap0.isEmpty());
      
      short short0 = (short)0;
      int int0 = (-1871);
      tSynchronizedShortIntMap0.put(short0, int0);
      int int1 = 0;
      tSynchronizedShortIntMap0.containsValue(int1);
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.CHINA;
      String string0 = locale0.getDisplayCountry(locale1);
      TSynchronizedShortIntMap tSynchronizedShortIntMap1 = new TSynchronizedShortIntMap((TShortIntMap) tShortIntHashMap0, (Object) string0);
      short short1 = (short)191;
      tSynchronizedShortIntMap1.containsKey(short1);
      short short2 = (short)391;
      short short3 = (short)0;
      tSynchronizedShortIntMap1.adjustOrPutValue(short3, short3, short3);
      tSynchronizedShortIntMap1.get(short2);
      int int2 = (-610);
      tSynchronizedShortIntMap1.containsValue(int2);
      locale0.getUnicodeLocaleKeys();
      URI uRI0 = new URI(string0);
      File file0 = null;
      try {
        file0 = new File(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      TShortIntMap tShortIntMap0 = null;
      Locale locale0 = Locale.TAIWAN;
      String string0 = locale0.getCountry();
      TSynchronizedShortIntMap tSynchronizedShortIntMap0 = new TSynchronizedShortIntMap(tShortIntMap0, (Object) string0);
      locale0.getUnicodeLocaleKeys();
      int int1 = (-1511);
      HashMap<Integer, Object> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Integer, Object>(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1511
         //
      }
  }
}
