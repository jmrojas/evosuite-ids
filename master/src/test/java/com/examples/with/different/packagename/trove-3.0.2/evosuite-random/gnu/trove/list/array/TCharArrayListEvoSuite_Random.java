/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.list.array;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TCharCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableCharCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessCharList;
import gnu.trove.list.TCharList;
import gnu.trove.list.array.TCharArrayList;
import gnu.trove.list.linked.TCharLinkedList;
import gnu.trove.set.hash.TCharHashSet;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharArrayListEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-1);
      TCharArrayList tCharArrayList0 = null;
      try {
        tCharArrayList0 = new TCharArrayList(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = '(';
      charArray0[0] = char0;
      char char1 = '@';
      charArray0[1] = char1;
      char char2 = 'w';
      charArray0[2] = char2;
      char char3 = 'Y';
      charArray0[3] = char3;
      TCharArrayList tCharArrayList0 = TCharArrayList.wrap(charArray0);
      assertNotNull(tCharArrayList0);
      
      char char4 = 'j';
      int int0 = (-1575);
      tCharArrayList0.lastIndexOf(int0, charArray0[1]);
      int int1 = tCharArrayList0.lastIndexOf(char4);
      assertEquals((-1), int1);
      
      char char5 = '>';
      charArray0[4] = char5;
      char char6 = 'W';
      charArray0[5] = char6;
      char char7 = 'j';
      charArray0[6] = char7;
      char char8 = ')';
      TCharArrayList tCharArrayList1 = TCharArrayList.wrap(charArray0, char8);
      int int2 = tCharArrayList1.binarySearch(char7);
      assertEquals(6, int2);
      assertEquals(')', tCharArrayList1.getNoEntryValue());
  }

  @Test
  public void test2()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '<';
      charArray0[0] = char0;
      char char1 = '!';
      charArray0[1] = char1;
      TCharArrayList tCharArrayList0 = new TCharArrayList(charArray0);
      TUnmodifiableCharCollection tUnmodifiableCharCollection0 = new TUnmodifiableCharCollection((TCharCollection) tCharArrayList0);
      tCharArrayList0.removeAll((TCharCollection) tUnmodifiableCharCollection0);
      String string0 = "NmM6P>BB)6X?9g";
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      tCharArrayList0.removeAll((Collection<?>) linkedList0);
      int int0 = (-206);
      TCharArrayList tCharArrayList1 = null;
      try {
        tCharArrayList1 = new TCharArrayList(int0, char0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      char char0 = '\'';
      TCharArrayList tCharArrayList0 = new TCharArrayList(int0, char0);
      char[] charArray0 = new char[10];
      charArray0[0] = char0;
      int int1 = 0;
      int int2 = 0;
      // Undeclared exception!
      try {
        tCharArrayList0.insert(int1, charArray0, int2, (int) char0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TCharArrayList tCharArrayList0 = new TCharArrayList();
      int int0 = 1489;
      char char0 = 'k';
      char[] charArray0 = new char[4];
      charArray0[0] = char0;
      charArray0[1] = char0;
      char char1 = '#';
      charArray0[2] = char1;
      charArray0[3] = char0;
      // Undeclared exception!
      try {
        tCharArrayList0.set((int) char0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 107
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 65535;
      TCharArrayList tCharArrayList0 = new TCharArrayList(int0);
      TCharCollection tCharCollection0 = null;
      char char0 = '2';
      int int1 = 1;
      // Undeclared exception!
      try {
        tCharArrayList0.binarySearch(char0, int1, (int) char0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 50
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = 'M';
      charArray0[0] = char0;
      char char1 = '^';
      TCharArrayList tCharArrayList0 = new TCharArrayList((int) charArray0[0], char1);
      int int0 = 1233;
      // Undeclared exception!
      try {
        tCharArrayList0.set(int0, char0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1233
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TCharArrayList tCharArrayList0 = new TCharArrayList();
      String string0 = "$\"zxAom>e?<_V7qz`q";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: $\"zxAom>e?<_V7qz`q://$%22zxAom%3Ee%7F%3F%3C_V7qz%60q$%22zxAom%3Ee%7F%3F%3C_V7qz%60q?$%22zxAom%3Ee%7F?%3C_V7qz%60q#$%22zxAom%3Ee%7F?%3C_V7qz%60q
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      char char0 = '@';
      char[] charArray0 = new char[1];
      charArray0[0] = char0;
      TCharArrayList tCharArrayList0 = TCharArrayList.wrap(charArray0);
      assertNotNull(tCharArrayList0);
      
      String string0 = "'TUN)teA%_";
      Locale locale0 = new Locale(string0, string0);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      tCharArrayList0.retainAll((Collection<?>) set0);
      assertEquals('\u0000', tCharArrayList0.sum());
      
      TCharArrayList tCharArrayList1 = new TCharArrayList(int0, char0);
      int int1 = 377;
      tCharArrayList1.fill(char0);
      char char1 = 'C';
      // Undeclared exception!
      try {
        tCharArrayList1.lastIndexOf(int1, char1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 376
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = 'm';
      charArray0[0] = char0;
      char char1 = '_';
      charArray0[1] = char1;
      char char2 = '3';
      charArray0[2] = char2;
      char char3 = ';';
      charArray0[3] = char3;
      char char4 = 'h';
      charArray0[4] = char4;
      char char5 = '+';
      charArray0[5] = char5;
      char char6 = 'v';
      charArray0[6] = char6;
      char char7 = '0';
      charArray0[7] = char7;
      char char8 = '*';
      charArray0[8] = char8;
      char char9 = 'J';
      TCharArrayList tCharArrayList0 = TCharArrayList.wrap(charArray0, char9);
      assertNotNull(tCharArrayList0);
      
      tCharArrayList0.sort();
      assertEquals("{*, +, 0, 3, ;, _, h, m, v}", tCharArrayList0.toString());
      
      TCharArrayList tCharArrayList1 = new TCharArrayList();
      int int0 = 1;
      char[] charArray1 = new char[2];
      char char10 = 'o';
      charArray1[0] = char10;
      char char11 = 'R';
      charArray1[1] = char11;
      int int1 = 1916;
      charArray1[0] = char10;
      charArray1[1] = char10;
      // Undeclared exception!
      try {
        tCharArrayList1.set(int0, charArray1, (int) char11, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TCharArrayList tCharArrayList0 = new TCharArrayList();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.getDefault(locale_Category0);
      int int0 = (-1535);
      char[] charArray0 = new char[10];
      char char0 = 'X';
      charArray0[0] = char0;
      char char1 = 'f';
      charArray0[1] = char1;
      char char2 = 'T';
      charArray0[2] = char2;
      char char3 = '>';
      charArray0[3] = char3;
      char char4 = 'w';
      charArray0[4] = char4;
      char char5 = ',';
      charArray0[5] = char5;
      char char6 = 'A';
      charArray0[6] = char6;
      char char7 = 't';
      charArray0[7] = char7;
      char char8 = '8';
      charArray0[8] = char8;
      char char9 = '^';
      charArray0[9] = char9;
      // Undeclared exception!
      try {
        tCharArrayList0.set(int0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -1535
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-1592);
      char[] charArray0 = new char[9];
      char char0 = ')';
      charArray0[0] = char0;
      char char1 = '2';
      charArray0[1] = char1;
      char char2 = 'k';
      charArray0[2] = char2;
      char char3 = 'M';
      charArray0[3] = char3;
      char char4 = 'x';
      charArray0[4] = char4;
      char char5 = 'b';
      charArray0[5] = char5;
      char char6 = 'B';
      charArray0[6] = char6;
      char char7 = '0';
      charArray0[7] = char7;
      TCharArrayList tCharArrayList0 = TCharArrayList.wrap(charArray0, charArray0[2]);
      assertNotNull(tCharArrayList0);
      
      char char8 = '\\';
      int int1 = 10;
      // Undeclared exception!
      try {
        tCharArrayList0.subList((int) charArray0[5], int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // end index 10 greater than begin index 98
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "";
      Locale locale0 = new Locale(string0, string0, string0);
      int int0 = 0;
      TCharHashSet tCharHashSet0 = new TCharHashSet(int0);
      TCharArrayList tCharArrayList0 = new TCharArrayList((TCharCollection) tCharHashSet0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = tCharArrayList0.removeAll((Collection<?>) linkedList0);
      assertEquals(false, boolean0);
      
      Locale locale1 = Locale.GERMANY;
      locale1.getDisplayScript(locale0);
      Locale.setDefault(locale1);
      locale0.getUnicodeLocaleAttributes();
      int int1 = 10;
      // Undeclared exception!
      try {
        tCharArrayList0.remove(int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[10];
      char char0 = 'W';
      charArray0[0] = char0;
      char char1 = '&';
      charArray0[1] = char1;
      char char2 = 'c';
      charArray0[0] = char2;
      charArray0[1] = char2;
      charArray0[2] = char0;
      charArray0[3] = char1;
      char char3 = '@';
      charArray0[4] = char3;
      charArray0[5] = char3;
      charArray0[6] = char1;
      charArray0[7] = char2;
      charArray0[8] = char1;
      charArray0[9] = char3;
      charArray0[2] = char2;
      char char4 = 'N';
      charArray0[3] = char4;
      char char5 = 'I';
      charArray0[4] = char5;
      char char6 = 'D';
      charArray0[5] = char6;
      char char7 = '/';
      charArray0[6] = char7;
      char char8 = '7';
      charArray0[7] = char8;
      char char9 = 'F';
      charArray0[8] = char9;
      char char10 = 'b';
      charArray0[9] = char10;
      TCharArrayList tCharArrayList0 = TCharArrayList.wrap(charArray0);
      assertNotNull(tCharArrayList0);
      
      // Undeclared exception!
      try {
        tCharArrayList0.addAll(charArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not grow ArrayList wrapped external array
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = '5';
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = char0;
      charArray0[3] = char0;
      char char1 = '\'';
      charArray0[4] = char1;
      charArray0[5] = char0;
      char char2 = '%';
      char char3 = '{';
      TCharArrayList tCharArrayList0 = TCharArrayList.wrap(charArray0, char3);
      assertNotNull(tCharArrayList0);
      
      char char4 = '&';
      TCharArrayList.wrap(charArray0, char4);
      // Undeclared exception!
      try {
        tCharArrayList0.add(charArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not grow ArrayList wrapped external array
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = 'w';
      charArray0[0] = char0;
      char char1 = '1';
      charArray0[1] = char1;
      char char2 = 'O';
      charArray0[2] = char2;
      TCharArrayList tCharArrayList0 = new TCharArrayList(charArray0);
      assertEquals("{w, 1, O}", tCharArrayList0.toString());
      
      tCharArrayList0.reset();
      assertEquals('\u0000', tCharArrayList0.getNoEntryValue());
  }

  @Test
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = 'm';
      charArray0[0] = char0;
      char char1 = '!';
      charArray0[1] = char1;
      char char2 = 'l';
      charArray0[2] = char2;
      char char3 = 'P';
      charArray0[3] = char3;
      TCharArrayList tCharArrayList0 = new TCharArrayList(charArray0);
      assertEquals(4, tCharArrayList0.size());
      
      char[] charArray1 = new char[8];
      char char4 = 't';
      charArray1[0] = char4;
      char char5 = 'h';
      charArray1[1] = char5;
      char char6 = 'N';
      charArray1[2] = char6;
      TCharArrayList tCharArrayList1 = new TCharArrayList();
      char[] charArray2 = tCharArrayList1.toArray();
      assertNotNull(charArray2);
      
      int int0 = (-1304);
      TUnmodifiableRandomAccessCharList tUnmodifiableRandomAccessCharList0 = new TUnmodifiableRandomAccessCharList((TCharList) tCharArrayList1);
      boolean boolean0 = tCharArrayList1.addAll((TCharCollection) tUnmodifiableRandomAccessCharList0);
      int int1 = 0;
      tCharArrayList1.remove(int0, int1);
      char char7 = ',';
      charArray1[3] = char7;
      char char8 = 'D';
      charArray1[4] = char8;
      char char9 = '\"';
      charArray1[5] = char9;
      char char10 = '@';
      charArray1[6] = char10;
      char char11 = 'B';
      charArray1[7] = char11;
      Locale locale0 = Locale.JAPANESE;
      Set<Character> set0 = locale0.getExtensionKeys();
      boolean boolean1 = tCharArrayList1.retainAll((Collection<?>) set0);
      assertTrue(boolean1 == boolean0);
      
      TCharArrayList tCharArrayList2 = new TCharArrayList(charArray1);
      assertEquals('\u0000', tCharArrayList2.getNoEntryValue());
      assertEquals('\"', tCharArrayList2.min());
  }

  @Test
  public void test17()  throws Throwable  {
      char char0 = '#';
      TCharLinkedList tCharLinkedList0 = new TCharLinkedList(char0);
      int int0 = tCharLinkedList0.size();
      TCharArrayList tCharArrayList0 = new TCharArrayList((TCharCollection) tCharLinkedList0);
      TUnmodifiableRandomAccessCharList tUnmodifiableRandomAccessCharList0 = new TUnmodifiableRandomAccessCharList((TCharList) tCharArrayList0);
      TCharArrayList tCharArrayList1 = new TCharArrayList((TCharCollection) tUnmodifiableRandomAccessCharList0);
      char[] charArray0 = new char[6];
      charArray0[0] = char0;
      charArray0[1] = char0;
      // Undeclared exception!
      try {
        tCharArrayList1.removeAt(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[3];
      TCharArrayList tCharArrayList0 = TCharArrayList.wrap(charArray0);
      assertNotNull(tCharArrayList0);
      
      int int1 = (-499);
      int int2 = (-1407);
      // Undeclared exception!
      try {
        tCharArrayList0.remove(int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -499
         //
      }
  }
}
