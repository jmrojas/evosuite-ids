/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TIntObjectMap;
import gnu.trove.map.hash.TIntObjectHashMap;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.StreamCorruptedException;
import java.util.AbstractMap;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntObjectHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>();
      TIntObjectHashMap<Integer> tIntObjectHashMap1 = new TIntObjectHashMap<Integer>((TIntObjectMap<? extends Integer>) tIntObjectHashMap0);
      int int0 = 0;
      TIntObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>> tIntObjectHashMap2 = new TIntObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>>(int0);
      boolean boolean0 = true;
      tIntObjectHashMap2.reenableAutoCompaction(boolean0);
      assertEquals(0, tIntObjectHashMap2.getNoEntryKey());
      
      int[] intArray0 = tIntObjectHashMap1.keys();
      assertEquals(23, tIntObjectHashMap0.capacity());
      assertNotNull(intArray0);
      assertEquals(0, tIntObjectHashMap1.getNoEntryKey());
      assertEquals(0, tIntObjectHashMap1.size());
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>();
      int int1 = tIntObjectHashMap0.hashCode();
      assertEquals(0, int1);
      
      Object[] objectArray0 = tIntObjectHashMap0.values();
      assertNotNull(objectArray0);
      
      TIntObjectHashMap<Integer> tIntObjectHashMap1 = new TIntObjectHashMap<Integer>(int0, int0);
      Integer[] integerArray0 = new Integer[3];
      TIntObjectHashMap<String> tIntObjectHashMap2 = new TIntObjectHashMap<String>(int0, int1);
      String[] stringArray0 = new String[7];
      String string0 = ">";
      stringArray0[0] = string0;
      String string1 = "BCy*6?sVZ";
      stringArray0[1] = string1;
      String string2 = ">~N$XP9";
      stringArray0[2] = string2;
      String string3 = "";
      stringArray0[3] = string3;
      String string4 = "{i=FU2rQ3X?SF";
      stringArray0[4] = string4;
      String string5 = "qTu :5CJk@kK<|[n";
      stringArray0[5] = string5;
      String string6 = "0Uhoia~n";
      stringArray0[6] = string6;
      String[] stringArray1 = tIntObjectHashMap2.values(stringArray0);
      assertEquals(23, tIntObjectHashMap0.capacity());
      assertNotNull(stringArray1);
      
      integerArray0[0] = (Integer) int0;
      integerArray0[1] = (Integer) int0;
      tIntObjectHashMap1.capacity();
      integerArray0[2] = (Integer) int0;
      Integer[] integerArray1 = tIntObjectHashMap1.values(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, tIntObjectHashMap1.getNoEntryKey());
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 276;
      float float0 = 0.5F;
      TIntObjectHashMap<String> tIntObjectHashMap0 = new TIntObjectHashMap<String>(int0, float0, int0);
      int[] intArray0 = tIntObjectHashMap0.keys();
      assertEquals(557, tIntObjectHashMap0.capacity());
      assertEquals(276, tIntObjectHashMap0.getNoEntryKey());
      assertNotNull(intArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 195311;
      float float0 = 1.0F;
      TIntObjectHashMap<String> tIntObjectHashMap0 = new TIntObjectHashMap<String>(int0);
      TIntObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>> tIntObjectHashMap1 = new TIntObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>>(int0, float0, int0);
      tIntObjectHashMap1.get(int0);
      InputStream inputStream0 = null;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      TIntObjectHashMap<TIntObjectHashMap<Object>> tIntObjectHashMap0 = new TIntObjectHashMap<TIntObjectHashMap<Object>>(int0, int0);
      tIntObjectHashMap0.iterator();
      assertEquals(0, tIntObjectHashMap0.getNoEntryKey());
      
      int int1 = 4481;
      TIntObjectHashMap<AbstractMap.SimpleImmutableEntry<Object, String>> tIntObjectHashMap1 = new TIntObjectHashMap<AbstractMap.SimpleImmutableEntry<Object, String>>(int1);
      int[] intArray0 = new int[6];
      intArray0[0] = int1;
      intArray0[1] = int1;
      intArray0[2] = int1;
      intArray0[3] = int1;
      intArray0[4] = int1;
      intArray0[5] = int1;
      int[] intArray1 = tIntObjectHashMap1.keys(intArray0);
      assertSame(intArray1, intArray0);
      assertEquals(8963, tIntObjectHashMap1.capacity());
      assertEquals(0, tIntObjectHashMap1.getNoEntryKey());
      assertNotNull(intArray1);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 7643;
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>(int0);
      tIntObjectHashMap0.getNoEntryValue();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tIntObjectHashMap0._states);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 00000000
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 200;
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>(int0);
      ObjectOutput objectOutput0 = null;
      // Undeclared exception!
      try {
        tIntObjectHashMap0.writeExternal(objectOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-1441);
      TIntObjectHashMap<String> tIntObjectHashMap0 = new TIntObjectHashMap<String>(int0);
      tIntObjectHashMap0.trimToSize();
      assertEquals("{}", tIntObjectHashMap0.toString());
      
      int[] intArray0 = new int[10];
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 39691759;
      intArray0[3] = int3;
      intArray0[4] = int0;
      int int4 = 2013;
      intArray0[5] = int4;
      intArray0[6] = int0;
      intArray0[7] = int0;
      intArray0[8] = int0;
      intArray0[9] = int0;
      int[] intArray1 = tIntObjectHashMap0.keys(intArray0);
      assertSame(intArray0, intArray1);
      assertEquals(3, tIntObjectHashMap0.capacity());
      assertNotNull(intArray1);
      assertEquals(0, tIntObjectHashMap0.getNoEntryKey());
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 1945;
      int int1 = 980;
      int int2 = 1277;
      int int3 = 0;
      float float0 = 0.0F;
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>(int0, float0);
      int int4 = 0;
      tIntObjectHashMap0.get(int4);
      TIntObjectHashMap<String> tIntObjectHashMap1 = new TIntObjectHashMap<String>(int2, int1, int3);
      int int5 = (-1028);
      String string0 = "Kx";
      tIntObjectHashMap1.putIfAbsent(int5, string0);
      assertEquals(false, tIntObjectHashMap1.isEmpty());
      
      TIntObjectHashMap<Integer> tIntObjectHashMap2 = new TIntObjectHashMap<Integer>(int1, int0);
      tIntObjectHashMap2.keySet();
      float float1 = 0.0F;
      int int6 = 32767;
      float float2 = 0.0F;
      TIntObjectHashMap<AbstractMap.SimpleEntry<Integer, Integer>> tIntObjectHashMap3 = new TIntObjectHashMap<AbstractMap.SimpleEntry<Integer, Integer>>(int6, float2);
      tIntObjectHashMap3.clear();
      boolean boolean0 = true;
      tIntObjectHashMap2.reenableAutoCompaction(boolean0);
      int int7 = (-1452);
      TIntObjectHashMap<Object> tIntObjectHashMap4 = new TIntObjectHashMap<Object>(int0, float1, int7);
      tIntObjectHashMap4.getNoEntryValue();
      tIntObjectHashMap4.clear();
      tIntObjectHashMap4.toString();
      int int8 = 0;
      tIntObjectHashMap2.containsKey(int8);
      assertEquals("{}", tIntObjectHashMap2.toString());
  }

//   @Test
//   public void test9()  throws Throwable  {
//       int int0 = 199;
//       float float0 = (-1154.4833F);
//       int int1 = (-860);
//       float float1 = (-579.637F);
//       TIntObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Integer>> tIntObjectHashMap0 = new TIntObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Integer>>(int1, float1);
//       boolean boolean0 = false;
//       tIntObjectHashMap0.reenableAutoCompaction(boolean0);
//       TIntObjectHashMap<TIntObjectHashMap<String>> tIntObjectHashMap1 = new TIntObjectHashMap<TIntObjectHashMap<String>>(int0, float0);
//       TIntObjectHashMap<String>[] tIntObjectHashMapArray0 = tIntObjectHashMap1.values();
//       assertEquals(0, tIntObjectHashMap1.getNoEntryKey());
//       assertNotNull(tIntObjectHashMapArray0);
//   }
}
