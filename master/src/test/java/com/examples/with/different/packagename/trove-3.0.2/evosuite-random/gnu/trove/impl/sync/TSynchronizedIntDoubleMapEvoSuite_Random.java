/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedIntDoubleMap;
import gnu.trove.map.TIntDoubleMap;
import gnu.trove.map.hash.TIntDoubleHashMap;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.MissingResourceException;
import javax.swing.text.Segment;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedIntDoubleMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TIntDoubleMap tIntDoubleMap0 = null;
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = null;
      try {
        tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap(tIntDoubleMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 2;
      TIntDoubleMap tIntDoubleMap0 = null;
      int int1 = 1;
      String string0 = Integer.toHexString(int1);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap(tIntDoubleMap0, (Object) string0);
      InputStream inputStream0 = null;
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      // Undeclared exception!
      try {
        dataInputStream0.readUTF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 0;
      intArray0[0] = int0;
      float float0 = (-1571.9272F);
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0[0], float0);
      String string0 = "";
      URI.create(string0);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://#
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-1990);
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0);
      TIntDoubleMap tIntDoubleMap0 = null;
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = null;
      try {
        tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap(tIntDoubleMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 7057;
      int int1 = (-600);
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int1);
      Locale locale0 = Locale.ITALIAN;
      String string0 = locale0.getScript();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0, (Object) string0);
      String string1 = locale0.toLanguageTag();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap1 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tSynchronizedIntDoubleMap0, (Object) string1);
      tSynchronizedIntDoubleMap1.keySet();
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int0, int0);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap2 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap1);
      double[] doubleArray0 = tSynchronizedIntDoubleMap2.values();
      assertNotNull(doubleArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      TIntDoubleMap tIntDoubleMap0 = null;
      String string0 = "";
      File file0 = new File(string0, string0);
      file0.listFiles();
      String string1 = file0.getPath();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap(tIntDoubleMap0, (Object) string1);
      double[] doubleArray0 = new double[8];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = (-1509.5773504926226);
      doubleArray0[1] = double1;
      double double2 = (-477.8680272063639);
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = 0.0;
      doubleArray0[5] = double5;
      double double6 = 1530.197212664193;
      doubleArray0[6] = double6;
      double double7 = (-1.0);
      doubleArray0[7] = double7;
      // Undeclared exception!
      try {
        tSynchronizedIntDoubleMap0.values(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      int int1 = 1371;
      double double0 = (-968.3370077202563);
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0, float0, int1, double0);
      int int2 = 0;
      Locale locale0 = Locale.ITALY;
      String string0 = locale0.getISO3Language();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0, (Object) string0);
      double[] doubleArray0 = tSynchronizedIntDoubleMap0.values();
      String string1 = Integer.toOctalString(int2);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap1 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0, (Object) string1);
      double[] doubleArray1 = tSynchronizedIntDoubleMap1.values();
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test7()  throws Throwable  {
      TIntDoubleMap tIntDoubleMap0 = null;
      Object object0 = null;
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap(tIntDoubleMap0, object0);
      double[] doubleArray0 = new double[10];
      double double0 = 1281.8520932355893;
      doubleArray0[0] = double0;
      double double1 = 1.0;
      doubleArray0[1] = double1;
      double double2 = 192.37423119078272;
      doubleArray0[2] = double2;
      double double3 = (-1518.4984402156044);
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = 0.0;
      doubleArray0[5] = double5;
      double double6 = 0.0;
      doubleArray0[6] = double6;
      double double7 = (-250.60327118195397);
      doubleArray0[7] = double7;
      double double8 = 0.0;
      doubleArray0[8] = double8;
      double double9 = 1616.5299136654269;
      doubleArray0[9] = double9;
      // Undeclared exception!
      try {
        tSynchronizedIntDoubleMap0.values(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0, int0);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      double double0 = 921.6704459723229;
      boolean boolean0 = tSynchronizedIntDoubleMap0.adjustValue(int0, double0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = (-1276);
      intArray0[2] = int2;
      int int3 = (-1639);
      intArray0[3] = int3;
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) int3;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) int3;
      doubleArray0[3] = (double) intArray0[0];
      doubleArray0[4] = (double) intArray0[2];
      doubleArray0[5] = (double) intArray0[1];
      doubleArray0[6] = (double) int1;
      doubleArray0[7] = (double) int3;
      doubleArray0[8] = (double) intArray0[1];
      double double0 = 0.0;
      doubleArray0[9] = double0;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      tSynchronizedIntDoubleMap0.clear();
      assertEquals(true, tIntDoubleHashMap0.isEmpty());
      assertEquals(true, tSynchronizedIntDoubleMap0.isEmpty());
  }

  @Test
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = 797;
      intArray0[0] = int0;
      int int1 = (-1);
      intArray0[1] = int1;
      int int2 = (-897);
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = (-1205);
      intArray0[5] = int5;
      int int6 = 0;
      intArray0[6] = int6;
      int int7 = (-1158);
      intArray0[7] = int7;
      int int8 = 0;
      intArray0[8] = int8;
      int int9 = 110;
      intArray0[9] = int9;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int2;
      doubleArray0[1] = (double) int7;
      doubleArray0[2] = (double) intArray0[5];
      doubleArray0[3] = (double) intArray0[9];
      doubleArray0[4] = (double) int1;
      doubleArray0[5] = (double) intArray0[8];
      doubleArray0[6] = (double) intArray0[2];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap((TIntDoubleMap) tIntDoubleHashMap0);
      String string0 = File.separator;
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap1, (Object) string0);
      tSynchronizedIntDoubleMap0.values(doubleArray0);
      TIntDoubleHashMap tIntDoubleHashMap2 = new TIntDoubleHashMap();
      String string1 = "begin index can not be < 0";
      File file0 = new File(string1);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap1 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap2);
      tSynchronizedIntDoubleMap1.keySet();
      File file1 = file0.getCanonicalFile();
      File file2 = file1.getParentFile();
      String string2 = file2.getCanonicalPath();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap2 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap2, (Object) string2);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap3 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tSynchronizedIntDoubleMap2);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap4 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tSynchronizedIntDoubleMap3);
      int int10 = (-1902);
      int int11 = 0;
      tSynchronizedIntDoubleMap4.increment(int11);
      TIntDoubleHashMap tIntDoubleHashMap3 = new TIntDoubleHashMap(int10);
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = null;
      // Undeclared exception!
      try {
        locale0.getDisplayName(locale1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = (-1572);
      intArray0[0] = int0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) intArray0[0];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap((TIntDoubleMap) tIntDoubleHashMap0);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap1);
      Integer integer0 = new Integer(int0);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap1 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tSynchronizedIntDoubleMap0, (Object) integer0);
      char[] charArray0 = new char[8];
      char char0 = 'B';
      charArray0[0] = char0;
      char char1 = '7';
      charArray0[1] = char1;
      char char2 = '`';
      charArray0[2] = char2;
      char char3 = '';
      charArray0[3] = char3;
      char char4 = 'm';
      charArray0[4] = char4;
      char char5 = ']';
      charArray0[5] = char5;
      char char6 = 'v';
      charArray0[6] = char6;
      char char7 = 'w';
      charArray0[7] = char7;
      int int1 = 1884;
      int int2 = 1;
      Segment segment0 = new Segment(charArray0, int1, int2);
      // Undeclared exception!
      try {
        segment0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1885
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-446);
      int[] intArray0 = new int[4];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) intArray0[0];
      doubleArray0[1] = (double) intArray0[2];
      doubleArray0[2] = (double) intArray0[3];
      doubleArray0[3] = (double) intArray0[3];
      doubleArray0[4] = (double) intArray0[0];
      doubleArray0[5] = (double) intArray0[1];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      String string0 = "8q?RK";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 8q?RK://8q?RK8q%3FRK%7F#8q?RK%7F
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-1322);
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      tSynchronizedIntDoubleMap0.toString();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap1 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tSynchronizedIntDoubleMap0);
      boolean boolean0 = tSynchronizedIntDoubleMap1.increment(int0);
      tSynchronizedIntDoubleMap0.containsValue((double) int0);
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int0);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap2 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tSynchronizedIntDoubleMap0);
      tSynchronizedIntDoubleMap0.clear();
      tSynchronizedIntDoubleMap0.size();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap3 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap1);
      tSynchronizedIntDoubleMap1.keys();
      double double0 = tSynchronizedIntDoubleMap3.get(int0);
      int int1 = 32;
      float float0 = 0.0F;
      tSynchronizedIntDoubleMap1.increment(int0);
      TIntDoubleHashMap tIntDoubleHashMap2 = new TIntDoubleHashMap(int1, float0);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap4 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap2);
      tSynchronizedIntDoubleMap4.keys();
      boolean boolean1 = tSynchronizedIntDoubleMap3.containsValue(double0);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap();
      TIntDoubleHashMap tIntDoubleHashMap2 = new TIntDoubleHashMap();
      Object object0 = null;
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap1 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap2, object0);
      int int0 = 0;
      // Undeclared exception!
      try {
        tSynchronizedIntDoubleMap1.increment(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      int int1 = 229;
      int int2 = 0;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int2);
      Locale locale0 = Locale.ROOT;
      String string0 = locale0.getDisplayLanguage();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0, (Object) string0);
      tSynchronizedIntDoubleMap0.increment(int2);
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int0, int0, int1, int1);
      String string1 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string1, string1, string1, int0, string1, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://@:0?#
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      tIntDoubleHashMap0.keySet();
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap((TIntDoubleMap) tIntDoubleHashMap0);
      Locale locale0 = Locale.KOREA;
      char char0 = '@';
      // Undeclared exception!
      try {
        locale0.getExtension(char0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed extension key: @
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 720;
      intArray0[0] = int0;
      int int1 = (-1900);
      intArray0[1] = int1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int1;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      int int2 = 1251;
      String string0 = Integer.toOctalString(int2);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0, (Object) string0);
      String string1 = tIntDoubleHashMap0.toString();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap1 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tSynchronizedIntDoubleMap0, (Object) string1);
      double double0 = 0.0;
      tSynchronizedIntDoubleMap1.adjustValue(intArray0[0], double0);
      int int3 = (-1);
      double double1 = 0.0;
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int3);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap2 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap1);
      tSynchronizedIntDoubleMap2.valueCollection();
      TIntDoubleHashMap tIntDoubleHashMap2 = new TIntDoubleHashMap(int3, (float) int3, int3, double1);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap3 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap2);
      assertNotSame(tSynchronizedIntDoubleMap3, tSynchronizedIntDoubleMap2);
  }
}
