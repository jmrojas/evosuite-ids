/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedDoubleIntMap;
import gnu.trove.impl.sync.TSynchronizedIntCollection;
import gnu.trove.iterator.TDoubleIntIterator;
import gnu.trove.map.TDoubleIntMap;
import gnu.trove.map.hash.TDoubleIntHashMap;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedDoubleIntMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 812;
      int int1 = 0;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0, int0, int0, int1);
      String string0 = "";
      File file0 = new File(string0, string0);
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TDoubleIntMap tDoubleIntMap0 = null;
      TDoubleIntHashMap tDoubleIntHashMap0 = null;
      try {
        tDoubleIntHashMap0 = new TDoubleIntHashMap(tDoubleIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 1018;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0, int0);
      String string0 = "{7'[,g";
      int int1 = (-1);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int1, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: {7'[,g://%7B7'%5B%7F,g@{7'[,g%7B7'%5B%7F,g?%7B7'[%7F,g#%7B7'[%7F,g
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 1;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0);
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap((TDoubleIntMap) tDoubleIntHashMap0);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap0 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap1);
      TDoubleIntIterator tDoubleIntIterator0 = tSynchronizedDoubleIntMap0.iterator();
      assertEquals(false, tDoubleIntIterator0.hasNext());
  }

  @Test
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      double double1 = (-836.5906761603679);
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = double3;
      double double4 = (-1929.9360587558092);
      doubleArray0[4] = double4;
      double double5 = 1865.3114881375266;
      doubleArray0[5] = double5;
      int[] intArray0 = new int[4];
      int int0 = 51;
      intArray0[0] = int0;
      int int1 = 1;
      intArray0[1] = int1;
      int int2 = (-1315);
      intArray0[2] = int2;
      int int3 = 1;
      intArray0[3] = int3;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(doubleArray0, intArray0);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap0 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap0);
      int[] intArray1 = tSynchronizedDoubleIntMap0.values();
      assertFalse(intArray1.equals(intArray0));
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-1307);
      double double0 = 0.0;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0, (float) int0, double0, int0);
      String string0 = "";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      int[] intArray0 = new int[4];
      int int0 = 1;
      intArray0[0] = int0;
      int int1 = 0;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int1);
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap((TDoubleIntMap) tDoubleIntHashMap0);
      Object object0 = null;
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap0 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap1, object0);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap1 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tSynchronizedDoubleIntMap0, object0);
      // Undeclared exception!
      try {
        tSynchronizedDoubleIntMap1.keys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-1382);
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0);
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap((TDoubleIntMap) tDoubleIntHashMap0);
      ObjectOutput objectOutput0 = null;
      // Undeclared exception!
      try {
        tDoubleIntHashMap1.writeExternal(objectOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-1872);
      float float0 = 0.0F;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap();
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap0 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap0);
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap((TDoubleIntMap) tSynchronizedDoubleIntMap0);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap1 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap1);
      tSynchronizedDoubleIntMap1.clear();
      double double0 = 0.0;
      TDoubleIntHashMap tDoubleIntHashMap2 = new TDoubleIntHashMap(int0, float0, double0, int0);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap2 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap2);
      double double1 = 18.146202748179718;
      boolean boolean0 = tSynchronizedDoubleIntMap1.containsKey(double1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      int[] intArray0 = new int[2];
      intArray0[0] = int0;
      intArray0[1] = int0;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(doubleArray0, intArray0);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap0 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap0);
      int int1 = (-734);
      int int2 = 0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tDoubleIntHashMap0._states, int1, int2);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 129;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0, int0);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap0 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap0);
      String string0 = tSynchronizedDoubleIntMap0.toString();
      assertNotNull(string0);
      
      int int1 = (-1);
      float float0 = (-905.3771F);
      Locale locale0 = new Locale(string0, string0);
      String string1 = locale0.getDisplayVariant();
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap1 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tSynchronizedDoubleIntMap0, (Object) string1);
      double double0 = 1691.4310531349881;
      int int2 = 229;
      tSynchronizedDoubleIntMap0.get((double) int2);
      float float1 = 2008.9312F;
      float float2 = 1005.15643F;
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap(int2, float2);
      Object object0 = new Object();
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap2 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap1, object0);
      int int3 = tSynchronizedDoubleIntMap2.hashCode();
      TDoubleIntHashMap tDoubleIntHashMap2 = new TDoubleIntHashMap(int2, float1);
      Locale locale1 = Locale.ITALY;
      Locale locale2 = Locale.JAPAN;
      String string2 = locale1.getDisplayLanguage(locale2);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap3 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap2, (Object) string2);
      double double1 = (-1.0);
      tSynchronizedDoubleIntMap3.containsKey(double1);
      TSynchronizedIntCollection tSynchronizedIntCollection0 = (TSynchronizedIntCollection)tSynchronizedDoubleIntMap2.valueCollection();
      assertNotNull(tSynchronizedIntCollection0);
      
      TDoubleIntHashMap tDoubleIntHashMap3 = new TDoubleIntHashMap(int1, float0, double0, int1);
      tDoubleIntHashMap3.getAutoCompactionFactor();
      tSynchronizedDoubleIntMap2.clear();
      Locale locale3 = Locale.ITALIAN;
      String string3 = locale3.getDisplayVariant();
      tSynchronizedDoubleIntMap3.containsValue(int3);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap4 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tSynchronizedDoubleIntMap1, object0);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap5 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap3, (Object) string3);
      double double2 = 0.0;
      int int4 = 1500;
      int int5 = tSynchronizedDoubleIntMap5.putIfAbsent(double2, int4);
      assertEquals(7, tDoubleIntHashMap3.capacity());
      assertEquals((-1), int5);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 898;
      float float0 = 0.0F;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0, float0);
      Locale locale0 = Locale.GERMAN;
      char char0 = 'Q';
      String string0 = locale0.getExtension(char0);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap0 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap0, (Object) string0);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap1 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tSynchronizedDoubleIntMap0);
      // Undeclared exception!
      try {
        tSynchronizedDoubleIntMap1.keys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap();
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap0 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap0);
      double double0 = 1623.995665006441;
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[8] = double0;
      double double1 = 0.0;
      doubleArray0[9] = double1;
      int[] intArray0 = new int[9];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 1536;
      intArray0[2] = int2;
      int int3 = 475;
      intArray0[3] = int3;
      int int4 = (-550);
      intArray0[4] = int4;
      int int5 = (-567);
      intArray0[5] = int5;
      int int6 = 0;
      intArray0[6] = int6;
      int int7 = 0;
      intArray0[7] = int7;
      int int8 = (-1592);
      intArray0[8] = int8;
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap(doubleArray0, intArray0);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap1 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap1);
      tSynchronizedDoubleIntMap0.remove(double0);
      int int9 = tSynchronizedDoubleIntMap0.hashCode();
      double double2 = 2041.7512987828047;
      double[] doubleArray1 = tSynchronizedDoubleIntMap0.keys(tDoubleIntHashMap0._set);
      int int10 = (-1014);
      int int11 = tDoubleIntHashMap0.putIfAbsent(double2, int10);
      tDoubleIntHashMap0.size();
      tSynchronizedDoubleIntMap0.adjustOrPutValue((double) int9, int11, int11);
      tSynchronizedDoubleIntMap0.keys(doubleArray1);
      int int12 = 421439783;
      int int13 = (-1);
      String string0 = Integer.toString(int12, int13);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap2 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap0, (Object) string0);
      String string1 = (String)tSynchronizedDoubleIntMap2.mutex;
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap3 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap0, (Object) string1);
      tSynchronizedDoubleIntMap2.containsKey((double) int13);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap4 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tSynchronizedDoubleIntMap3);
      tSynchronizedDoubleIntMap4.putAll((TDoubleIntMap) tSynchronizedDoubleIntMap2);
      tSynchronizedDoubleIntMap4.values();
      assertEquals(2, tDoubleIntHashMap0.size());
      assertFalse(tSynchronizedDoubleIntMap2.equals(tSynchronizedDoubleIntMap1));
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-1345.470459454269);
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 171.64593777630148;
      doubleArray0[3] = double3;
      double double4 = 638.977697159518;
      doubleArray0[4] = double4;
      double double5 = 1998.018222007161;
      doubleArray0[5] = double5;
      double double6 = 1.0;
      doubleArray0[6] = double6;
      double double7 = (-275.72344603416343);
      doubleArray0[7] = double7;
      double double8 = 0.0;
      doubleArray0[8] = double8;
      int[] intArray0 = new int[2];
      int int0 = 179669557;
      intArray0[0] = int0;
      int int1 = (-1124);
      intArray0[1] = int1;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(doubleArray0, intArray0);
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap((TDoubleIntMap) tDoubleIntHashMap0);
      int int2 = 1;
      String string0 = Integer.toString(int0, int2);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap0 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap1, (Object) string0);
      int int3 = (-51);
      String string1 = Integer.toString(int3);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap1 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tSynchronizedDoubleIntMap0, (Object) string1);
      TSynchronizedIntCollection tSynchronizedIntCollection0 = (TSynchronizedIntCollection)tSynchronizedDoubleIntMap1.valueCollection();
      assertEquals(0, tSynchronizedIntCollection0.getNoEntryValue());
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      TDoubleIntMap tDoubleIntMap0 = null;
      Locale locale0 = Locale.ROOT;
      String string0 = locale0.getDisplayVariant();
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap0 = new TSynchronizedDoubleIntMap(tDoubleIntMap0, (Object) string0);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap1 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tSynchronizedDoubleIntMap0);
      double double0 = (-1333.3719660507184);
      double double1 = 42.29076347857985;
      int int1 = (-1);
      int int2 = 189;
      // Undeclared exception!
      try {
        tSynchronizedDoubleIntMap1.adjustOrPutValue(double1, int1, int2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      float float0 = 1464.4163F;
      int int1 = 0;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0, float0, (double) int0, int1);
      String string0 = "";
      File file0 = null;
      File file1 = new File(file0, string0);
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0, file1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 118;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0, int0);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap0 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap0);
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap((TDoubleIntMap) tSynchronizedDoubleIntMap0);
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.ITALY;
      String string0 = locale1.getLanguage();
      tSynchronizedDoubleIntMap0.equals((Object) string0);
      String string1 = locale0.getDisplayScript(locale1);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap1 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap1, (Object) string1);
      tSynchronizedDoubleIntMap1.getNoEntryKey();
      assertTrue(tSynchronizedDoubleIntMap1.equals(tSynchronizedDoubleIntMap0));
      
      double[] doubleArray0 = tSynchronizedDoubleIntMap0.keys(tDoubleIntHashMap0._set);
      assertNotNull(doubleArray0);
      assertTrue(tSynchronizedDoubleIntMap0.equals(tSynchronizedDoubleIntMap1));
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-480);
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0);
      tDoubleIntHashMap0.capacity();
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap0 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap0);
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap((TDoubleIntMap) tSynchronizedDoubleIntMap0);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap1 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap1);
      // Undeclared exception!
      try {
        tDoubleIntHashMap0.setAutoCompactionFactor((float) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -480.0
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 2023;
      float float0 = 1699.4702F;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap();
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap0 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap0);
      double double0 = 1387.8859612460485;
      tSynchronizedDoubleIntMap0.adjustValue(double0, int0);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap1 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap0);
      int int1 = 1;
      tSynchronizedDoubleIntMap1.containsValue(int1);
      tSynchronizedDoubleIntMap1.clear();
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap(int0, float0);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap2 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap1);
      TDoubleIntIterator tDoubleIntIterator0 = tSynchronizedDoubleIntMap2.iterator();
      assertNotNull(tDoubleIntIterator0);
      
      TDoubleIntHashMap tDoubleIntHashMap2 = new TDoubleIntHashMap();
      double[] doubleArray0 = tSynchronizedDoubleIntMap1.keys();
      assertNotNull(doubleArray0);
      
      boolean boolean0 = tSynchronizedDoubleIntMap2.isEmpty();
      assertEquals(true, boolean0);
      
      double double1 = 869.6010787420112;
      double[] doubleArray1 = tSynchronizedDoubleIntMap1.keys(tDoubleIntHashMap2._set);
      assertNotNull(doubleArray1);
      
      tDoubleIntHashMap0.tempDisableAutoCompaction();
      int int2 = 1;
      tSynchronizedDoubleIntMap2.adjustValue(double1, int2);
      double double2 = (-1.0);
      int[] intArray0 = tSynchronizedDoubleIntMap2.values();
      assertNotNull(intArray0);
      
      Double double3 = new Double(double2);
      String string0 = double3.toString();
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap3 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap2, (Object) string0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string1 = locale0.getDisplayLanguage();
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap4 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tSynchronizedDoubleIntMap3, (Object) string1);
      int int3 = 234;
      TDoubleIntHashMap tDoubleIntHashMap3 = new TDoubleIntHashMap(int3, int3, int3, int3);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap5 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap3);
      double double4 = 0.0;
      boolean boolean1 = tSynchronizedDoubleIntMap5.containsKey(double4);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = (-1323);
      int int1 = 0;
      float float0 = 0.0F;
      int int2 = 1;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int1, float0, (double) int0, int2);
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = locale0.getLanguage();
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap0 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap0, (Object) string0);
      tSynchronizedDoubleIntMap0.values();
      char char0 = 'd';
      tDoubleIntHashMap0.ensureCapacity(int1);
      double double0 = 1791.1964608429046;
      tDoubleIntHashMap0.containsKey(double0);
      String string1 = locale0.getExtension(char0);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap1 = new TSynchronizedDoubleIntMap((TDoubleIntMap) tDoubleIntHashMap0, (Object) string1);
      // Undeclared exception!
      try {
        tSynchronizedDoubleIntMap1.keys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
