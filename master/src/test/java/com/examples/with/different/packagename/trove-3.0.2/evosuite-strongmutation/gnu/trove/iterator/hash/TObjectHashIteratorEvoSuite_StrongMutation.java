/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.iterator.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.hash.TObjectHash;
import gnu.trove.iterator.hash.TObjectHashIterator;
import gnu.trove.set.hash.TCustomHashSet;
import gnu.trove.set.hash.TLinkedHashSet;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectHashIteratorEvoSuite_StrongMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 5 covered goals:
   * 1 Strong Mutation 5: gnu.trove.iterator.hash.TObjectHashIterator.objectAtIndex(I)Ljava/lang/Object;:51 - DeleteField: FREELjava/lang/Object;
   * 2 gnu.trove.iterator.hash.TObjectHashIterator.objectAtIndex(I)Ljava/lang/Object;: I12 Branch 1 IF_ACMPEQ L51 - true
   * 3 Strong Mutation 5: gnu.trove.iterator.hash.TObjectHashIterator.objectAtIndex(I)Ljava/lang/Object;:51 - DeleteField: FREELjava/lang/Object;
   * 4 Strong Mutation 6: gnu.trove.iterator.hash.TObjectHashIterator.objectAtIndex(I)Ljava/lang/Object;:51 - ReplaceComparisonOperator == -> !=
   * 5 gnu.trove.iterator.hash.TObjectHashIterator.<init>(Lgnu/trove/impl/hash/TObjectHash;)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TLinkedHashSet<Object> tLinkedHashSet0 = new TLinkedHashSet<Object>();
      Object object0 = TObjectHash.FREE;
      tLinkedHashSet0.add(object0);
      TObjectHashIterator<Object> tObjectHashIterator0 = tLinkedHashSet0.iterator();
      Object object1 = tObjectHashIterator0.next();
      assertNull(object1);
  }

  //Test case number: 1
  /*
   * 5 covered goals:
   * 1 Strong Mutation 7: gnu.trove.iterator.hash.TObjectHashIterator.objectAtIndex(I)Ljava/lang/Object;:51 - DeleteField: REMOVEDLjava/lang/Object;
   * 2 gnu.trove.iterator.hash.TObjectHashIterator.objectAtIndex(I)Ljava/lang/Object;: I15 Branch 2 IF_ACMPNE L51 - false
   * 3 Strong Mutation 7: gnu.trove.iterator.hash.TObjectHashIterator.objectAtIndex(I)Ljava/lang/Object;:51 - DeleteField: REMOVEDLjava/lang/Object;
   * 4 Strong Mutation 8: gnu.trove.iterator.hash.TObjectHashIterator.objectAtIndex(I)Ljava/lang/Object;:51 - ReplaceComparisonOperator != -> ==
   * 5 gnu.trove.iterator.hash.TObjectHashIterator.objectAtIndex(I)Ljava/lang/Object;: I12 Branch 1 IF_ACMPEQ L51 - false
   */

  @Test
  public void test1()  throws Throwable  {
      TLinkedHashSet<Object> tLinkedHashSet0 = new TLinkedHashSet<Object>();
      Object object0 = TObjectHash.REMOVED;
      tLinkedHashSet0.add(object0);
      TObjectHashIterator<Object> tObjectHashIterator0 = tLinkedHashSet0.iterator();
      Object object1 = tObjectHashIterator0.next();
      assertNull(object1);
  }

  //Test case number: 2
  /*
   * 13 covered goals:
   * 1 Strong Mutation 8: gnu.trove.iterator.hash.TObjectHashIterator.objectAtIndex(I)Ljava/lang/Object;:51 - ReplaceComparisonOperator != -> ==
   * 2 Strong Mutation 0: gnu.trove.iterator.hash.TObjectHashIterator.objectAtIndex(I)Ljava/lang/Object;:50 - DeleteField: _objectHashLgnu/trove/impl/hash/TObjectHash;
   * 3 Strong Mutation 1: gnu.trove.iterator.hash.TObjectHashIterator.objectAtIndex(I)Ljava/lang/Object;:50 - DeleteField: _set[Ljava/lang/Object;
   * 4 Strong Mutation 2: gnu.trove.iterator.hash.TObjectHashIterator.objectAtIndex(I)Ljava/lang/Object;:50 - InsertUnaryOp Negation of index
   * 5 Strong Mutation 3: gnu.trove.iterator.hash.TObjectHashIterator.objectAtIndex(I)Ljava/lang/Object;:50 - InsertUnaryOp IINC 1 index
   * 6 Strong Mutation 4: gnu.trove.iterator.hash.TObjectHashIterator.objectAtIndex(I)Ljava/lang/Object;:50 - InsertUnaryOp IINC -1 index
   * 7 Strong Mutation 6: gnu.trove.iterator.hash.TObjectHashIterator.objectAtIndex(I)Ljava/lang/Object;:51 - ReplaceComparisonOperator == -> !=
   * 8 Strong Mutation 0: gnu.trove.iterator.hash.TObjectHashIterator.objectAtIndex(I)Ljava/lang/Object;:50 - DeleteField: _objectHashLgnu/trove/impl/hash/TObjectHash;
   * 9 Strong Mutation 1: gnu.trove.iterator.hash.TObjectHashIterator.objectAtIndex(I)Ljava/lang/Object;:50 - DeleteField: _set[Ljava/lang/Object;
   * 10 Strong Mutation 2: gnu.trove.iterator.hash.TObjectHashIterator.objectAtIndex(I)Ljava/lang/Object;:50 - InsertUnaryOp Negation of index
   * 11 Strong Mutation 3: gnu.trove.iterator.hash.TObjectHashIterator.objectAtIndex(I)Ljava/lang/Object;:50 - InsertUnaryOp IINC 1 index
   * 12 Strong Mutation 4: gnu.trove.iterator.hash.TObjectHashIterator.objectAtIndex(I)Ljava/lang/Object;:50 - InsertUnaryOp IINC -1 index
   * 13 gnu.trove.iterator.hash.TObjectHashIterator.objectAtIndex(I)Ljava/lang/Object;: I15 Branch 2 IF_ACMPNE L51 - true
   */

  @Test
  public void test2()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashSet<Object> tCustomHashSet0 = new TCustomHashSet<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, (-1478));
      tCustomHashSet0.add((Object) "en-US");
      TObjectHashIterator<Object> tObjectHashIterator0 = tCustomHashSet0.iterator();
      String string0 = (String)tObjectHashIterator0.next();
      assertEquals("en-US", string0);
  }
}
