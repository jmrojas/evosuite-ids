/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TDoubleFloatMapDecorator;
import gnu.trove.map.TDoubleFloatMap;
import gnu.trove.map.hash.TDoubleFloatHashMap;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.StreamCorruptedException;
import java.io.UnsupportedEncodingException;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleFloatMapDecoratorEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      float float0 = 706.4575F;
      Float float1 = new Float(float0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) float1;
      double double0 = 392.7459137485891;
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) float0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = (float) float1;
      floatArray0[3] = (float) float1;
      floatArray0[4] = float0;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      AbstractMap.SimpleEntry<Float, TDoubleFloatHashMap> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Float, TDoubleFloatHashMap>(float1, tDoubleFloatHashMap0);
      abstractMap_SimpleEntry0.getKey();
      TDoubleFloatMapDecorator tDoubleFloatMapDecorator0 = new TDoubleFloatMapDecorator();
      tDoubleFloatMapDecorator0.values();
      TDoubleFloatMapDecorator tDoubleFloatMapDecorator1 = new TDoubleFloatMapDecorator();
      // Undeclared exception!
      try {
        tDoubleFloatMapDecorator1.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TDoubleFloatMapDecorator tDoubleFloatMapDecorator0 = new TDoubleFloatMapDecorator();
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TDoubleFloatMapDecorator tDoubleFloatMapDecorator0 = new TDoubleFloatMapDecorator();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      String string0 = hashMap0.toString();
      tDoubleFloatMapDecorator0.equals((Object) string0);
      // Undeclared exception!
      try {
        tDoubleFloatMapDecorator0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TDoubleFloatMapDecorator tDoubleFloatMapDecorator0 = new TDoubleFloatMapDecorator();
      double double0 = (-1691.094893709055);
      Double double1 = new Double(double0);
      double double2 = (-411.9035270810179);
      Float float0 = new Float(double2);
      // Undeclared exception!
      try {
        tDoubleFloatMapDecorator0.put(double1, float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TDoubleFloatMap tDoubleFloatMap0 = null;
      TDoubleFloatMapDecorator tDoubleFloatMapDecorator0 = new TDoubleFloatMapDecorator(tDoubleFloatMap0);
      tDoubleFloatMapDecorator0.getMap();
      TDoubleFloatMapDecorator tDoubleFloatMapDecorator1 = new TDoubleFloatMapDecorator();
      tDoubleFloatMapDecorator1.keySet();
      int int0 = 1307;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0);
      Double double0 = new Double((double) int0);
      String string0 = "";
      try {
        Float.valueOf(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // empty String
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-474);
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0);
      TDoubleFloatMapDecorator tDoubleFloatMapDecorator0 = new TDoubleFloatMapDecorator((TDoubleFloatMap) tDoubleFloatHashMap0);
      tDoubleFloatMapDecorator0.hashCode();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      tDoubleFloatMapDecorator0.values();
      String string0 = hashMap0.toString();
      tDoubleFloatMapDecorator0.getMap();
      tDoubleFloatMapDecorator0.containsValue((Object) string0);
      Float float0 = null;
      String string1 = tDoubleFloatMapDecorator0.toString();
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(string1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // {} (No such file or directory)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0, (float) int0, (double) int0, float0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int1 = 0;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 0;
          float float0 = (-1.0F);
          TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0, float0, (double) int0, (float) int0);
          TDoubleFloatMapDecorator tDoubleFloatMapDecorator0 = new TDoubleFloatMapDecorator((TDoubleFloatMap) tDoubleFloatHashMap0);
          String string0 = "";
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
      TDoubleFloatMapDecorator tDoubleFloatMapDecorator0 = new TDoubleFloatMapDecorator();
      TDoubleFloatMap tDoubleFloatMap0 = tDoubleFloatMapDecorator0.getMap();
      TDoubleFloatMapDecorator tDoubleFloatMapDecorator1 = new TDoubleFloatMapDecorator(tDoubleFloatMap0);
      // Undeclared exception!
      try {
        tDoubleFloatMapDecorator1.putAll((Map<? extends Double, ? extends Float>) tDoubleFloatMapDecorator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TDoubleFloatMapDecorator tDoubleFloatMapDecorator0 = new TDoubleFloatMapDecorator();
      // Undeclared exception!
      try {
        tDoubleFloatMapDecorator0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      float float0 = 0.0F;
      TDoubleFloatMapDecorator tDoubleFloatMapDecorator0 = new TDoubleFloatMapDecorator();
      Locale locale0 = Locale.CHINESE;
      String string0 = locale0.getScript();
      tDoubleFloatMapDecorator0.containsValue((Object) string0);
      Float float1 = new Float(float0);
      String string1 = "";
      try {
        Float.valueOf(string1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // empty String
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TDoubleFloatMapDecorator tDoubleFloatMapDecorator0 = new TDoubleFloatMapDecorator();
      // Undeclared exception!
      try {
        tDoubleFloatMapDecorator0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-520.6559409803498);
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 594.911789161278;
      doubleArray0[3] = double3;
      double double4 = 303.8019200205409;
      doubleArray0[4] = double4;
      double double5 = (-2014.1570943686606);
      doubleArray0[5] = double5;
      double double6 = 1687.2042107254997;
      doubleArray0[6] = double6;
      double double7 = 1525.1904150818598;
      doubleArray0[7] = double7;
      double double8 = (-246.7698631326975);
      doubleArray0[8] = double8;
      double double9 = 1.0;
      doubleArray0[9] = double9;
      float[] floatArray0 = new float[6];
      float float0 = (-307.1041F);
      floatArray0[0] = float0;
      float float1 = (-693.1791F);
      floatArray0[1] = float1;
      float float2 = 1.0F;
      floatArray0[2] = float2;
      float float3 = (-1.0F);
      floatArray0[3] = float3;
      float float4 = (-353.36594F);
      floatArray0[4] = float4;
      float float5 = (-1912.7002F);
      floatArray0[5] = float5;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      TDoubleFloatMapDecorator tDoubleFloatMapDecorator0 = new TDoubleFloatMapDecorator((TDoubleFloatMap) tDoubleFloatHashMap0);
      String string0 = "7dsw";
      String string1 = "";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string1);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // 
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TDoubleFloatMap tDoubleFloatMap0 = null;
      TDoubleFloatMapDecorator tDoubleFloatMapDecorator0 = new TDoubleFloatMapDecorator(tDoubleFloatMap0);
      double double0 = 2030.5835176647415;
      Double double1 = new Double(double0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)121;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-46);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-2);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-35);
      byteArray0[3] = byte3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 79D2FEDD
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TDoubleFloatMapDecorator tDoubleFloatMapDecorator0 = new TDoubleFloatMapDecorator();
      // Undeclared exception!
      try {
        tDoubleFloatMapDecorator0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      double double1 = (-777.1456049670477);
      doubleArray0[1] = double1;
      double double2 = 1637.500349246965;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      float[] floatArray0 = new float[4];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = 580.74927F;
      floatArray0[1] = float1;
      float float2 = 1.0F;
      floatArray0[2] = float2;
      float float3 = 0.0F;
      floatArray0[3] = float3;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      TDoubleFloatMapDecorator tDoubleFloatMapDecorator0 = new TDoubleFloatMapDecorator((TDoubleFloatMap) tDoubleFloatHashMap0);
      TDoubleFloatHashMap tDoubleFloatHashMap1 = (TDoubleFloatHashMap)tDoubleFloatMapDecorator0.getMap();
      assertNotNull(tDoubleFloatHashMap1);
      
      TDoubleFloatMapDecorator tDoubleFloatMapDecorator1 = new TDoubleFloatMapDecorator((TDoubleFloatMap) tDoubleFloatHashMap1);
      String string0 = "B~X\"w2bQ2'3E";
      File file0 = new File(string0);
      String string1 = file0.toString();
      boolean boolean0 = tDoubleFloatMapDecorator1.containsKey((Object) string1);
      assertEquals(false, boolean0);
      assertTrue(tDoubleFloatMapDecorator0.equals(tDoubleFloatMapDecorator1));
  }

  @Test
  public void test16()  throws Throwable  {
      TDoubleFloatMapDecorator tDoubleFloatMapDecorator0 = new TDoubleFloatMapDecorator();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)121;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-11);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-107);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-37);
      byteArray0[3] = byte3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) byteArrayInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pushbackInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 79F595DB
         //
      }
  }
}
