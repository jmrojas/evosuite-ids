/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TDoubleCharMap;
import gnu.trove.map.TDoubleDoubleMap;
import gnu.trove.map.TDoubleLongMap;
import gnu.trove.map.TDoubleShortMap;
import gnu.trove.map.TIntDoubleMap;
import gnu.trove.map.TLongByteMap;
import gnu.trove.map.TShortCharMap;
import gnu.trove.map.TShortFloatMap;
import gnu.trove.map.hash.TByteLongHashMap;
import gnu.trove.map.hash.TCharByteHashMap;
import gnu.trove.map.hash.TCharCharHashMap;
import gnu.trove.map.hash.TCharFloatHashMap;
import gnu.trove.map.hash.TCharIntHashMap;
import gnu.trove.map.hash.TCharLongHashMap;
import gnu.trove.map.hash.TCharObjectHashMap;
import gnu.trove.map.hash.TDoubleCharHashMap;
import gnu.trove.map.hash.TDoubleDoubleHashMap;
import gnu.trove.map.hash.TDoubleFloatHashMap;
import gnu.trove.map.hash.TDoubleIntHashMap;
import gnu.trove.map.hash.TDoubleLongHashMap;
import gnu.trove.map.hash.TDoubleShortHashMap;
import gnu.trove.map.hash.TFloatCharHashMap;
import gnu.trove.map.hash.TFloatDoubleHashMap;
import gnu.trove.map.hash.TFloatFloatHashMap;
import gnu.trove.map.hash.TFloatLongHashMap;
import gnu.trove.map.hash.TFloatObjectHashMap;
import gnu.trove.map.hash.TIntByteHashMap;
import gnu.trove.map.hash.TIntCharHashMap;
import gnu.trove.map.hash.TIntDoubleHashMap;
import gnu.trove.map.hash.TIntFloatHashMap;
import gnu.trove.map.hash.TIntIntHashMap;
import gnu.trove.map.hash.TLongByteHashMap;
import gnu.trove.map.hash.TLongDoubleHashMap;
import gnu.trove.map.hash.TLongFloatHashMap;
import gnu.trove.map.hash.TLongIntHashMap;
import gnu.trove.map.hash.TLongLongHashMap;
import gnu.trove.map.hash.TLongShortHashMap;
import gnu.trove.map.hash.TShortByteHashMap;
import gnu.trove.map.hash.TShortCharHashMap;
import gnu.trove.map.hash.TShortDoubleHashMap;
import gnu.trove.map.hash.TShortFloatHashMap;
import gnu.trove.map.hash.TShortIntHashMap;
import gnu.trove.map.hash.TShortObjectHashMap;
import gnu.trove.procedure.TShortProcedure;
import gnu.trove.set.hash.TByteHashSet;
import gnu.trove.set.hash.TFloatHashSet;
import java.io.File;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TPrimitiveHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap((TShortCharMap) tShortCharHashMap0);
      short[] shortArray0 = tShortCharHashMap1._set;
      int int0 = 1;
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(int0);
      TDoubleDoubleHashMap tDoubleDoubleHashMap1 = new TDoubleDoubleHashMap((TDoubleDoubleMap) tDoubleDoubleHashMap0);
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap();
      byte byte0 = (byte) (-67);
      tByteLongHashMap0.containsKey(byte0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.clone();
      int int1 = 1219;
      // Undeclared exception!
      try {
        linkedList0.subList(int1, int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1219
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      float float0 = 1.0F;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0, float0);
      float float1 = 0.0F;
      double double0 = Double.POSITIVE_INFINITY;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0, float1, (float) int0, double0);
      tFloatDoubleHashMap0.containsValue((double) float1);
      float float2 = (-987.25806F);
      short short0 = (short)1;
      float float3 = (-1996.3615F);
      TLongLongHashMap tLongLongHashMap0 = new TLongLongHashMap(int0, float3);
      tLongLongHashMap0.contains((long) int0);
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0, float2, (double) float2, short0);
      TShortProcedure tShortProcedure0 = null;
      tDoubleShortHashMap0.forEachValue(tShortProcedure0);
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(int0, int0);
      OutputStream outputStream0 = null;
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 94;
      float float0 = 0.0F;
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0, float0);
      char char0 = '9';
      tCharIntHashMap0.adjustValue(char0, char0);
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0);
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap((TDoubleCharMap) tDoubleCharHashMap0);
      assertEquals(197, tDoubleCharHashMap0.capacity());
      assertEquals(23, tDoubleCharHashMap1.capacity());
      
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(int0, (float) char0);
      char[] charArray0 = tCharCharHashMap0.values(tCharIntHashMap0._set);
      assertNotNull(charArray0);
      assertEquals(3, tCharCharHashMap0.capacity());
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 460;
      float float0 = 1.0F;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, float0);
      tIntIntHashMap0.hashCode();
      assertEquals(557, tIntIntHashMap0.capacity());
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0);
      tShortCharHashMap0.clear();
      assertEquals(3, tShortCharHashMap0.capacity());
  }

  @Test
  public void test5()  throws Throwable  {
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap();
      tShortIntHashMap0.trimToSize();
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      float[] floatArray0 = new float[7];
      float float0 = 299.6914F;
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      float float2 = 2.6156156F;
      floatArray0[2] = float2;
      float float3 = 0.0F;
      floatArray0[3] = float3;
      float float4 = (-1620.6864F);
      floatArray0[4] = float4;
      float float5 = 0.0F;
      floatArray0[5] = float5;
      float float6 = 1914.4238F;
      floatArray0[6] = float6;
      long[] longArray0 = new long[2];
      long long0 = (-1L);
      longArray0[0] = long0;
      long long1 = (-595L);
      longArray0[1] = long1;
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
      int int0 = 0;
      tFloatLongHashMap0.ensureCapacity(int0);
      tFloatLongHashMap0.clear();
      tShortDoubleHashMap0.trimToSize();
      int int1 = tShortDoubleHashMap0.capacity();
      assertFalse(int1 == int0);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 295;
      int int1 = 1;
      float float0 = 0.5F;
      short short0 = (short)0;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      float float1 = (-1750.2607F);
      tShortFloatHashMap0.putIfAbsent(short0, float1);
      double double0 = 1.7976931348623157E308;
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap();
      byte[] byteArray0 = tCharLongHashMap0._states;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int1, float0, short0, double0);
      tShortDoubleHashMap0.valueCollection();
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(int0, int0);
      TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap((TLongByteMap) tLongByteHashMap0);
      int int2 = 2;
      double double1 = (-2024.5300536344853);
      int int3 = 2;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int2, float0, double1, int3);
      tDoubleIntHashMap0.getNoEntryValue();
      assertEquals(5, tDoubleIntHashMap0.capacity());
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 77509;
      float float0 = 0.0F;
      short short0 = (short)1968;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap((TIntDoubleMap) tIntDoubleHashMap0);
      assertEquals(23, tIntDoubleHashMap1.capacity());
      
      tIntDoubleHashMap1.trimToSize();
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(int0, float0, (long) int0, short0);
      short[] shortArray0 = tLongShortHashMap0.values();
      int int1 = 1971;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) int0;
      floatArray0[1] = float0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap((TShortFloatMap) tShortFloatHashMap0);
      tShortFloatHashMap1.keys();
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int1, int0);
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap((TDoubleShortMap) tDoubleShortHashMap0);
      tDoubleShortHashMap1.put((double) short0, short0);
      tLongShortHashMap0.getNoEntryKey();
      int int2 = 0;
      int[] intArray0 = new int[2];
      intArray0[0] = int2;
      intArray0[1] = int2;
      TIntDoubleHashMap tIntDoubleHashMap2 = new TIntDoubleHashMap(intArray0, tDoubleShortHashMap1._set);
      float float1 = (-1913.8623F);
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(int2, float1);
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(int2);
      tFloatObjectHashMap0.values();
      assertEquals(3, tFloatObjectHashMap0.capacity());
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-1);
      float float0 = (-966.7245F);
      short short0 = (short)0;
      char char0 = '%';
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0, float0, short0, char0);
      char[] charArray0 = tShortCharHashMap0.values();
      assertNotNull(charArray0);
      
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      int int1 = (-1881);
      float float1 = 1183.6567F;
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(int1, float1, (double) int1, (double) int0);
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      tShortByteHashMap0.keys();
      TDoubleDoubleHashMap tDoubleDoubleHashMap1 = new TDoubleDoubleHashMap((TDoubleDoubleMap) tDoubleDoubleHashMap0);
      float float2 = tDoubleFloatHashMap0.getAutoCompactionFactor();
      assertEquals(23, tDoubleFloatHashMap0.capacity());
      
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap();
      TDoubleLongHashMap tDoubleLongHashMap1 = new TDoubleLongHashMap((TDoubleLongMap) tDoubleLongHashMap0);
      long long0 = 2020L;
      int int2 = 1740;
      tDoubleFloatHashMap0.ensureCapacity(int2);
      tDoubleLongHashMap1.putIfAbsent((double) float2, long0);
      int int3 = (-1);
      float float3 = 669.84796F;
      short short1 = (short)0;
      byte byte0 = (byte)1;
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap(int3, float3, short1, byte0);
      short short2 = (short)1731;
      tShortByteHashMap1.contains(short2);
      assertEquals(3, tShortByteHashMap1.capacity());
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-1759);
      double double0 = 1232.1579908398435;
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) int0;
      floatArray0[6] = (float) int0;
      floatArray0[7] = (float) int0;
      floatArray0[8] = (float) int0;
      float[] floatArray1 = new float[9];
      floatArray1[0] = (float) int0;
      floatArray1[1] = (float) int0;
      floatArray1[2] = (float) int0;
      floatArray1[3] = (float) int0;
      floatArray1[4] = (float) int0;
      floatArray1[5] = (float) int0;
      floatArray1[6] = (float) int0;
      floatArray1[7] = (float) int0;
      floatArray1[8] = (float) int0;
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(floatArray1);
      float[] floatArray2 = tFloatHashSet0._set;
      floatArray0[9] = (float) int0;
      TFloatHashSet tFloatHashSet1 = new TFloatHashSet(floatArray0);
      float float0 = 0.0F;
      tFloatHashSet1.contains(float0);
      assertEquals(23, tFloatHashSet1.capacity());
      
      short short0 = (short)226;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0, (float) int0, double0, short0);
      byte[] byteArray0 = tDoubleShortHashMap0._states;
      assertEquals(3, tDoubleShortHashMap0.capacity());
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0);
      tFloatFloatHashMap0.valueCollection();
      assertEquals(3, tFloatFloatHashMap0.capacity());
      
      int int1 = 2;
      int int2 = 1012;
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(int2);
      char char0 = 'k';
      char char1 = '<';
      tFloatCharHashMap0.adjustOrPutValue((float) int1, char0, char1);
      assertEquals(2081, tFloatCharHashMap0.capacity());
      
      char char2 = '6';
      TCharObjectHashMap<Integer> tCharObjectHashMap0 = new TCharObjectHashMap<Integer>(int1, (float) int1, char2);
      assertEquals(3, tCharObjectHashMap0.capacity());
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 2;
          int int1 = 1675;
          byte byte0 = (byte)53;
          TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(int1, (float) int0, int0, byte0);
          int int2 = 0;
          TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>(int2);
          String string0 = "Zq/";
          File file0 = new File(string0, string0);
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"Zq/Zq/Zq/8160266136696215829Zq\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.File.createTempFile(File.java:1871)
             // sun.reflect.GeneratedMethodAccessor173.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:601)
             // org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:264)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = (-1L);
      longArray0[0] = long0;
      int[] intArray0 = new int[9];
      int int0 = (-1255);
      intArray0[0] = int0;
      int int1 = 1716;
      intArray0[1] = int1;
      int int2 = (-1650);
      intArray0[2] = int2;
      int int3 = (-909);
      intArray0[3] = int3;
      int int4 = (-71);
      intArray0[4] = int4;
      int int5 = 1;
      intArray0[5] = int5;
      int int6 = 1163;
      intArray0[6] = int6;
      int int7 = (-906);
      intArray0[7] = int7;
      int int8 = (-1710);
      intArray0[8] = int8;
      TLongIntHashMap tLongIntHashMap0 = new TLongIntHashMap(longArray0, intArray0);
      assertEquals(23, tLongIntHashMap0.capacity());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-1660);
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int0);
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      float float0 = Float.NEGATIVE_INFINITY;
      floatArray0[2] = float0;
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) int0;
      float float1 = 728.49725F;
      floatArray0[6] = float1;
      floatArray0[7] = (float) int0;
      floatArray0[8] = (float) int0;
      floatArray0[9] = (float) int0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) floatArray0[9];
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      tFloatDoubleHashMap0.adjustOrPutValue(floatArray0[3], floatArray0[1], float0);
      assertEquals(23, tFloatDoubleHashMap0.capacity());
      
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(int0);
      tCharFloatHashMap0.keySet();
      assertEquals(3, tCharFloatHashMap0.capacity());
      
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>();
      assertEquals(23, tShortObjectHashMap0.capacity());
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-1238);
      int int1 = 0;
      long long0 = (-1500L);
      float float0 = (-1124.0586F);
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int1, (float) int0, long0, float0);
      tLongFloatHashMap0.adjustOrPutValue((long) int0, (float) int1, (float) int0);
      assertEquals(1, tLongFloatHashMap0.size());
      
      float float1 = 1.0F;
      int int2 = 758;
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(int2);
      short short0 = (short)0;
      byte byte0 = (byte)25;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(int2, (float) int0, short0, byte0);
      byte[] byteArray0 = tShortByteHashMap0._states;
      tIntByteHashMap0.getNoEntryKey();
      char char0 = 'E';
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      tShortDoubleHashMap0.putIfAbsent((short) byte0, (double) int0);
      tShortDoubleHashMap0.keys();
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0, float1, int0, char0);
      assertEquals(3, tIntCharHashMap0.capacity());
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-262);
      float float0 = 464.0912F;
      char char0 = 'I';
      byte byte0 = (byte)2;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, float0, char0, byte0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) char0;
      longArray0[1] = (long) char0;
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) char0;
      longArray0[4] = (long) char0;
      longArray0[5] = (long) char0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) longArray0[2];
      doubleArray0[1] = (double) longArray0[0];
      doubleArray0[2] = (double) longArray0[1];
      doubleArray0[3] = (double) longArray0[3];
      doubleArray0[4] = (double) float0;
      doubleArray0[5] = (double) char0;
      doubleArray0[6] = (double) longArray0[0];
      doubleArray0[7] = (double) longArray0[2];
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(longArray0, doubleArray0);
      assertEquals(17, tLongDoubleHashMap0.capacity());
      
      tLongDoubleHashMap0.trimToSize();
      tCharByteHashMap0.increment(char0);
      assertEquals(3, tCharByteHashMap0.capacity());
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 2;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0);
      tIntFloatHashMap0.setAutoCompactionFactor((float) int0);
      assertEquals(5, tIntFloatHashMap0.capacity());
      
      int int1 = 219;
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(int1, int1);
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(int1, int1);
      assertEquals(3, tCharFloatHashMap0.capacity());
  }

  @Test
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-117);
      byteArray0[0] = byte0;
      int int0 = 85;
      int int1 = 1;
      float float0 = 3.4028235E38F;
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(int1, float0);
      float float1 = (-1021.669F);
      tFloatCharHashMap0.remove(float1);
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(int0, (float) byte0);
      byte byte1 = (byte)50;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-64);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-51);
      byteArray0[4] = byte4;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) byteArray0[3];
      intArray0[1] = (int) byte3;
      intArray0[2] = (int) byteArray0[2];
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) intArray0[2];
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      assertEquals(7, tIntFloatHashMap0.capacity());
      
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-30);
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap((int) byteArray0[2]);
      tShortByteHashMap0.getNoEntryKey();
      tShortByteHashMap0.tempDisableAutoCompaction();
      byteArray0[6] = byte6;
      TByteHashSet tByteHashSet0 = new TByteHashSet(byteArray0);
      assertEquals("{-30,-117,-64,50,-51,0}", tByteHashSet0.toString());
  }
}
