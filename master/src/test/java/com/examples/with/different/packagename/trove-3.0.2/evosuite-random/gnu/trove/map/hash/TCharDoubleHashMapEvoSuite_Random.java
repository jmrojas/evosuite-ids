/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TCharDoubleMap;
import gnu.trove.map.hash.TCharDoubleHashMap;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PrintStream;
import java.io.StreamCorruptedException;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharDoubleHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 0;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-12);
      byteArray0[0] = byte0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) byteArray0[0];
      doubleArray0[1] = (double) byteArray0[0];
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) byte0;
      double double0 = 0.0;
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      doubleArray0[4] = double0;
      tCharDoubleHashMap0.values(doubleArray0);
      byte byte1 = (byte)1;
      tCharDoubleHashMap0.size();
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap();
      byteArray0[1] = byte1;
      tCharDoubleHashMap0.clear();
      tCharDoubleHashMap0._states = byteArray0;
      int int1 = 0;
      float float0 = 0.0F;
      TCharDoubleHashMap tCharDoubleHashMap2 = new TCharDoubleHashMap(int1, float0);
      assertTrue(tCharDoubleHashMap2.equals(tCharDoubleHashMap0));
  }

  @Test
  public void test1()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = '4';
      charArray0[0] = char0;
      char char1 = '4';
      charArray0[1] = char1;
      char char2 = 'j';
      charArray0[2] = char2;
      char char3 = 'b';
      charArray0[3] = char3;
      char char4 = 'i';
      charArray0[4] = char4;
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) charArray0[1];
      doubleArray0[1] = (double) char2;
      doubleArray0[2] = (double) char3;
      doubleArray0[3] = (double) char4;
      doubleArray0[4] = (double) charArray0[3];
      float float0 = (-185.3057F);
      double double0 = 1.0;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap((int) charArray0[0], float0, char4, double0);
      char[] charArray1 = new char[10];
      charArray1[0] = char2;
      charArray1[1] = char2;
      charArray1[2] = char1;
      charArray1[3] = char3;
      charArray1[4] = char1;
      charArray1[5] = char3;
      charArray1[6] = char0;
      charArray1[7] = char1;
      charArray1[8] = char2;
      charArray1[9] = char3;
      tCharDoubleHashMap0._set = charArray1;
      doubleArray0[5] = (double) char0;
      doubleArray0[6] = (double) char2;
      doubleArray0[7] = (double) char3;
      double double1 = (-490.2336764149011);
      doubleArray0[8] = double1;
      double double2 = (-750.932631792788);
      doubleArray0[9] = double2;
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap(charArray0, doubleArray0);
      TCharDoubleHashMap tCharDoubleHashMap2 = new TCharDoubleHashMap((TCharDoubleMap) tCharDoubleHashMap1);
      TCharDoubleHashMap tCharDoubleHashMap3 = new TCharDoubleHashMap((TCharDoubleMap) tCharDoubleHashMap2);
      tCharDoubleHashMap3.iterator();
      assertEquals(23, tCharDoubleHashMap2.capacity());
      assertTrue(tCharDoubleHashMap2.equals(tCharDoubleHashMap1));
      assertEquals(4, tCharDoubleHashMap2.size());
      assertEquals("{b=105.0, j=98.0, i=98.0, 4=106.0}", tCharDoubleHashMap3.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 1;
      int int1 = 1439;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int1);
      float float0 = tCharDoubleHashMap0.getAutoCompactionFactor();
      float float1 = 1.0F;
      boolean boolean0 = false;
      tCharDoubleHashMap0.reenableAutoCompaction(boolean0);
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap(int0, float1);
      tCharDoubleHashMap1.setAutoCompactionFactor(float0);
      assertEquals(2879, tCharDoubleHashMap0.capacity());
      
      tCharDoubleHashMap0._states = tCharDoubleHashMap1._states;
      tCharDoubleHashMap1.isEmpty();
      tCharDoubleHashMap1.keySet();
      String string0 = tCharDoubleHashMap1.toString();
      assertEquals("{}", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      char char0 = 'z';
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap();
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap((TCharDoubleMap) tCharDoubleHashMap0);
      boolean boolean0 = true;
      tCharDoubleHashMap1.reenableAutoCompaction(boolean0);
      TCharDoubleHashMap tCharDoubleHashMap2 = new TCharDoubleHashMap(int0, (float) int0, char0, (double) char0);
      int int1 = (-1820);
      TCharDoubleHashMap tCharDoubleHashMap3 = new TCharDoubleHashMap();
      char char1 = '~';
      TCharDoubleHashMap tCharDoubleHashMap4 = new TCharDoubleHashMap(int1, (float) int1, char1, (double) char1);
      tCharDoubleHashMap3.putAll((TCharDoubleMap) tCharDoubleHashMap4);
      char char2 = '\\';
      String string0 = "{";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // {
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = '\\';
      charArray0[0] = char0;
      char char1 = '6';
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap((int) char1);
      char char2 = 'T';
      tCharDoubleHashMap0.putIfAbsent(char2, char1);
      assertEquals(false, tCharDoubleHashMap0.isEmpty());
      
      charArray0[1] = char1;
      char char3 = '}';
      charArray0[2] = char3;
      char char4 = '\"';
      charArray0[3] = char4;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) charArray0[3];
      doubleArray0[1] = (double) charArray0[1];
      doubleArray0[2] = (double) char0;
      double double0 = 2023.6732456466084;
      doubleArray0[3] = double0;
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap((int) charArray0[0]);
      double double1 = (-480.94344043853783);
      tCharDoubleHashMap1.adjustOrPutValue(charArray0[2], (double) char3, double1);
      tCharDoubleHashMap1.keySet();
      doubleArray0[4] = (double) char4;
      double double2 = Double.POSITIVE_INFINITY;
      doubleArray0[5] = double2;
      TCharDoubleHashMap tCharDoubleHashMap2 = new TCharDoubleHashMap(charArray0, doubleArray0);
      int int0 = tCharDoubleHashMap2.size();
      int int1 = (-78);
      TCharDoubleHashMap tCharDoubleHashMap3 = new TCharDoubleHashMap(int1);
      float float0 = (-1.0F);
      TCharDoubleHashMap tCharDoubleHashMap4 = new TCharDoubleHashMap(int1, float0);
      int int2 = tCharDoubleHashMap4.size();
      assertFalse(int2 == int0);
  }

  @Test
  public void test5()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = 'I';
      charArray0[0] = char0;
      char char1 = 'T';
      charArray0[1] = char1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) charArray0[0];
      doubleArray0[1] = (double) charArray0[1];
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      double double0 = tCharDoubleHashMap0.getNoEntryValue();
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) char0;
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap(charArray0, doubleArray1);
      doubleArray1[0] = (double) charArray0[1];
      double double1 = (-1.0);
      tCharDoubleHashMap1.put(charArray0[1], double1);
      doubleArray0[0] = (double) char0;
      doubleArray0[1] = (double) charArray0[1];
      assertFalse(doubleArray0[1] == double0);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-1);
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int0, int0);
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap((TCharDoubleMap) tCharDoubleHashMap0);
      tCharDoubleHashMap1.size();
      int int1 = 0;
      float float0 = (-269.54825F);
      TCharDoubleHashMap tCharDoubleHashMap2 = new TCharDoubleHashMap(int1, float0);
      char[] charArray0 = tCharDoubleHashMap2.keys();
      assertNotNull(charArray0);
  }

  @Test
  public void test7()  throws Throwable  {
      char[] charArray0 = new char[8];
      char char0 = '\"';
      charArray0[0] = char0;
      char char1 = 'w';
      charArray0[1] = char1;
      char char2 = '*';
      charArray0[2] = char2;
      char char3 = ')';
      charArray0[3] = char3;
      char char4 = '1';
      charArray0[4] = char4;
      char char5 = 'd';
      charArray0[5] = char5;
      char char6 = '?';
      charArray0[6] = char6;
      char char7 = 'B';
      charArray0[7] = char7;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) char6;
      doubleArray0[1] = (double) charArray0[6];
      doubleArray0[2] = (double) charArray0[2];
      doubleArray0[3] = (double) charArray0[2];
      doubleArray0[4] = (double) charArray0[1];
      doubleArray0[5] = (double) char3;
      doubleArray0[6] = (double) char7;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap((TCharDoubleMap) tCharDoubleHashMap0);
      assertEquals("{*=42.0, )=42.0, ?=66.0, \"=63.0, d=41.0, w=63.0, 1=119.0}", tCharDoubleHashMap1.toString());
      assertEquals(0.0, tCharDoubleHashMap1.getNoEntryValue(), 0.01D);
      assertEquals("{1=119.0, ?=66.0, *=42.0, )=42.0, d=41.0, w=63.0, \"=63.0}", tCharDoubleHashMap0.toString());
      assertEquals(7, tCharDoubleHashMap0.size());
  }

  @Test
  public void test8()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = '[';
      charArray0[0] = char0;
      char char1 = 'm';
      charArray0[1] = char1;
      char char2 = 'q';
      charArray0[2] = char2;
      char char3 = ',';
      charArray0[3] = char3;
      char char4 = '9';
      charArray0[4] = char4;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) char4;
      doubleArray0[1] = (double) charArray0[1];
      doubleArray0[2] = (double) char3;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap((TCharDoubleMap) tCharDoubleHashMap0);
      assertEquals("{[=57.0, q=44.0, m=109.0}", tCharDoubleHashMap1.toString());
      assertEquals(0.0, tCharDoubleHashMap1.getNoEntryValue(), 0.01D);
      assertEquals(3, tCharDoubleHashMap0.size());
      assertEquals("{m=109.0, q=44.0, [=57.0}", tCharDoubleHashMap0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = 'i';
      charArray0[0] = char0;
      char char1 = 'x';
      charArray0[1] = char1;
      char char2 = 'A';
      charArray0[2] = char2;
      char char3 = 'F';
      charArray0[3] = char3;
      char char4 = 'd';
      charArray0[4] = char4;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) char3;
      doubleArray0[1] = (double) charArray0[1];
      doubleArray0[2] = (double) charArray0[3];
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      assertEquals("{x=120.0, A=70.0, i=70.0}", tCharDoubleHashMap0.toString());
      assertEquals(3, tCharDoubleHashMap0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-813);
      char char0 = '2';
      double double0 = (-1.0);
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int0, (float) int0, char0, double0);
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap((TCharDoubleMap) tCharDoubleHashMap0);
      int int1 = tCharDoubleHashMap1.capacity();
      assertEquals('2', tCharDoubleHashMap1.getNoEntryKey());
      assertEquals((-1.0), tCharDoubleHashMap1.getNoEntryValue(), 0.01D);
      assertEquals(3, int1);
  }

  @Test
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = 'f';
      charArray0[0] = char0;
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = char0;
      char char1 = '9';
      charArray0[3] = char1;
      charArray0[4] = char0;
      charArray0[5] = char1;
      charArray0[6] = char1;
      charArray0[7] = char0;
      charArray0[8] = char1;
      char char2 = 'R';
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap();
      char[] charArray1 = tCharDoubleHashMap0._set;
      charArray0[1] = char2;
      char char3 = 'D';
      charArray0[2] = char3;
      char char4 = '!';
      charArray0[3] = char4;
      char char5 = 'l';
      charArray0[4] = char5;
      char char6 = ':';
      charArray0[5] = char6;
      char char7 = 'u';
      charArray0[6] = char7;
      char char8 = '$';
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap();
      charArray0[7] = char8;
      char char9 = 'S';
      charArray0[8] = char9;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) char8;
      TCharDoubleHashMap tCharDoubleHashMap2 = new TCharDoubleHashMap(charArray0, doubleArray0);
      TCharDoubleHashMap tCharDoubleHashMap3 = new TCharDoubleHashMap((TCharDoubleMap) tCharDoubleHashMap2);
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 551;
      float float0 = 0.0F;
      char char0 = 'i';
      double double0 = (-767.1352156059758);
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int0, float0, char0, double0);
      String string0 = File.separator;
      tCharDoubleHashMap0.equals((Object) string0);
      int int1 = 0;
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap(int1);
      int int2 = tCharDoubleHashMap1.capacity();
      assertFalse(int2 == int1);
  }

  @Test
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = 'j';
      charArray0[0] = char0;
      char char1 = '=';
      charArray0[1] = char1;
      char char2 = 'f';
      charArray0[2] = char2;
      char char3 = 'N';
      charArray0[3] = char3;
      char char4 = 'I';
      charArray0[4] = char4;
      char char5 = '!';
      charArray0[5] = char5;
      char char6 = '>';
      charArray0[6] = char6;
      char char7 = 'I';
      charArray0[7] = char7;
      char char8 = 'k';
      charArray0[8] = char8;
      double[] doubleArray0 = new double[2];
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) charArray0[6];
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      tCharDoubleHashMap0.capacity();
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap();
      tCharDoubleHashMap1.tempDisableAutoCompaction();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tCharDoubleHashMap1._states);
      char char9 = '>';
      tCharDoubleHashMap1.adjustValue(char9, char9);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 00000000
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = 'T';
      charArray0[0] = char0;
      char char1 = '^';
      charArray0[1] = char1;
      char char2 = '_';
      charArray0[2] = char2;
      char char3 = 'X';
      charArray0[3] = char3;
      char char4 = '(';
      charArray0[4] = char4;
      char char5 = '9';
      charArray0[5] = char5;
      char char6 = ')';
      charArray0[6] = char6;
      char char7 = 'b';
      charArray0[7] = char7;
      char char8 = 'k';
      charArray0[8] = char8;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) char7;
      doubleArray0[1] = (double) char3;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      char[] charArray1 = tCharDoubleHashMap0.keys(charArray0);
      assertEquals(false, tCharDoubleHashMap0.isEmpty());
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertEquals(23, tCharDoubleHashMap0.capacity());
      assertEquals("{T=98.0, ^=88.0}", tCharDoubleHashMap0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap();
      String string0 = tCharDoubleHashMap0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      double double0 = (-1437.6063320157878);
      Double double1 = new Double(double0);
      AbstractMap.SimpleImmutableEntry<Double, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, String>(double1, string0);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: {}:%7B%7D#%7B%7D
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 0;
      char char0 = 'h';
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int0, (float) int0, char0, (double) char0);
      tCharDoubleHashMap0.size();
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap();
      TCharDoubleMap tCharDoubleMap0 = null;
      TCharDoubleHashMap tCharDoubleHashMap2 = null;
      try {
        tCharDoubleHashMap2 = new TCharDoubleHashMap(tCharDoubleMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = '';
      charArray0[0] = char0;
      char char1 = 'y';
      charArray0[1] = char1;
      char char2 = 'Z';
      charArray0[2] = char2;
      char char3 = '\'';
      charArray0[3] = char3;
      char char4 = 't';
      charArray0[4] = char4;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) charArray0[2];
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      assertEquals("{=90.0}", tCharDoubleHashMap0.toString());
      
      tCharDoubleHashMap0._set = charArray0;
      assertEquals(11, tCharDoubleHashMap0.capacity());
      assertEquals(1, tCharDoubleHashMap0.size());
  }
}
