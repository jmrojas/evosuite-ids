/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TCharCollection;
import gnu.trove.function.TCharFunction;
import gnu.trove.map.TDoubleCharMap;
import gnu.trove.map.hash.TDoubleCharHashMap;
import gnu.trove.procedure.TDoubleCharProcedure;
import java.io.File;
import java.io.IOException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleCharHashMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-1798.1813705526404);
      doubleArray0[0] = double0;
      double double1 = Double.POSITIVE_INFINITY;
      doubleArray0[1] = double1;
      double double2 = 1.0;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = double5;
      double double6 = (-896.6707099524923);
      doubleArray0[6] = double6;
      double double7 = (-1883.0895139386967);
      doubleArray0[7] = double7;
      double double8 = (-242.7761588361814);
      doubleArray0[8] = double8;
      char[] charArray0 = new char[8];
      char char0 = 'm';
      charArray0[0] = char0;
      char char1 = '2';
      charArray0[1] = char1;
      char char2 = 'U';
      charArray0[2] = char2;
      char char3 = 'G';
      charArray0[3] = char3;
      char char4 = ']';
      charArray0[4] = char4;
      char char5 = 'h';
      charArray0[5] = char5;
      char char6 = 'j';
      charArray0[6] = char6;
      char char7 = 'A';
      charArray0[7] = char7;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap((TDoubleCharMap) tDoubleCharHashMap0);
      double[] doubleArray1 = tDoubleCharHashMap1.keys();
      assertEquals("{1.0=U, -1798.1813705526404=m, -1883.0895139386967=A, Infinity=2, -896.6707099524923=j, -Infinity=h, 0.0=]}", tDoubleCharHashMap1.toString());
      assertTrue(tDoubleCharHashMap0.equals(tDoubleCharHashMap1));
      assertNotNull(doubleArray1);
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 140;
      float float0 = 10.0F;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) float0;
      doubleArray0[1] = (double) float0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) float0;
      doubleArray0[5] = (double) int0;
      char[] charArray0 = new char[10];
      char char0 = 'P';
      charArray0[0] = char0;
      char char1 = '1';
      charArray0[1] = char1;
      char char2 = 'X';
      charArray0[2] = char2;
      char char3 = 'i';
      charArray0[3] = char3;
      char char4 = '1';
      charArray0[4] = char4;
      char char5 = 'E';
      charArray0[5] = char5;
      char char6 = 'u';
      charArray0[6] = char6;
      char char7 = 'a';
      charArray0[7] = char7;
      char char8 = '~';
      charArray0[8] = char8;
      char char9 = 'V';
      charArray0[9] = char9;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      assertEquals("{140.0=E, 10.0=1}", tDoubleCharHashMap0.toString());
      assertEquals(2, tDoubleCharHashMap0.size());
      
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap(int0, float0);
      double[] doubleArray1 = tDoubleCharHashMap1.keys();
      assertNotNull(doubleArray1);
      assertFalse(tDoubleCharHashMap1.equals(tDoubleCharHashMap0));
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-908);
      float float0 = 1.0F;
      double double0 = (-1.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) float0;
      doubleArray0[1] = (double) float0;
      doubleArray0[2] = double0;
      char[] charArray0 = new char[2];
      char char0 = 'U';
      charArray0[0] = char0;
      char char1 = 'j';
      charArray0[1] = char1;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      float float1 = (-253.02994F);
      // Undeclared exception!
      try {
        tDoubleCharHashMap0.setAutoCompactionFactor(float1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -253.02994
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 0;
          double[] doubleArray0 = new double[2];
          doubleArray0[0] = (double) int0;
          doubleArray0[1] = (double) int0;
          char[] charArray0 = new char[7];
          char char0 = 'A';
          charArray0[0] = char0;
          char char1 = '-';
          charArray0[1] = char1;
          char char2 = '@';
          charArray0[2] = char2;
          char char3 = '~';
          charArray0[3] = char3;
          char char4 = ';';
          charArray0[4] = char4;
          char char5 = 'k';
          charArray0[5] = char5;
          char char6 = '\'';
          charArray0[6] = char6;
          TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
          String string0 = "X(h)Qz4";
          File file0 = null;
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-317);
      float float0 = (-1.0F);
      double double0 = (-705.5644418261364);
      char char0 = 'T';
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0, float0, double0, char0);
      double double1 = 0.0;
      tDoubleCharHashMap0.containsKey(double1);
      double double2 = (-1853.464417017694);
      char char1 = tDoubleCharHashMap0.get(double2);
      assertEquals('T', char1);
  }

  @Test
  public void test5()  throws Throwable  {
      char char0 = 'Z';
      Character character0 = new Character(char0);
      int int0 = (-1078);
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0, (float) character0, (double) character0, char0);
      double double0 = (-814.2154212997493);
      tDoubleCharHashMap0.increment(double0);
      String string0 = "";
      tDoubleCharHashMap0.getAutoCompactionFactor();
      AbstractMap.SimpleEntry<Character, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Character, String>(character0, string0);
      abstractMap_SimpleEntry0.getValue();
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap();
      boolean boolean0 = true;
      tDoubleCharHashMap1.reenableAutoCompaction(boolean0);
      int int1 = 0;
      int int2 = 0;
      TDoubleCharHashMap tDoubleCharHashMap2 = new TDoubleCharHashMap(int2, int2);
      TDoubleCharHashMap tDoubleCharHashMap3 = null;
      try {
        tDoubleCharHashMap3 = new TDoubleCharHashMap((TDoubleCharMap) tDoubleCharHashMap2);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-1745);
      float float0 = 6.6360896E8F;
      char char0 = 'X';
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0, float0, (double) float0, char0);
      tDoubleCharHashMap0.capacity();
      double double0 = 1.0;
      char char1 = 'e';
      boolean boolean0 = tDoubleCharHashMap0.adjustValue(double0, char1);
      assertEquals(false, boolean0);
      
      tDoubleCharHashMap0.ensureCapacity((int) char0);
      assertEquals(3, tDoubleCharHashMap0.capacity());
      assertEquals("{}", tDoubleCharHashMap0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-844.3448752482843);
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      char[] charArray0 = new char[10];
      char char0 = '_';
      charArray0[0] = char0;
      char char1 = 'c';
      int int0 = (-1816);
      float float0 = 1559.4664F;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0, float0);
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap((TDoubleCharMap) tDoubleCharHashMap0);
      int int1 = tDoubleCharHashMap1.hashCode();
      assertEquals(0, int1);
      assertEquals(3, tDoubleCharHashMap1.capacity());
      
      charArray0[1] = char1;
      char char2 = 'Q';
      charArray0[2] = char2;
      char char3 = '~';
      charArray0[3] = char3;
      char char4 = '\"';
      charArray0[4] = char4;
      char char5 = 'a';
      TDoubleCharHashMap tDoubleCharHashMap2 = new TDoubleCharHashMap();
      charArray0[5] = char5;
      char char6 = 'A';
      charArray0[6] = char6;
      char char7 = '&';
      charArray0[7] = char7;
      char char8 = 'c';
      tDoubleCharHashMap2.containsKey((double) char7);
      charArray0[8] = char8;
      char char9 = 'j';
      charArray0[9] = char9;
      TDoubleCharHashMap tDoubleCharHashMap3 = new TDoubleCharHashMap(doubleArray0, charArray0);
      TCharCollection tCharCollection0 = tDoubleCharHashMap3.valueCollection();
      assertEquals("{-844.3448752482843=_, 0.0=c}", tDoubleCharHashMap3.toString());
      assertEquals(23, tDoubleCharHashMap3.capacity());
      assertEquals(false, tCharCollection0.isEmpty());
  }

  @Test
  public void test8()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = (-909.8359938001611);
      doubleArray0[2] = double2;
      double double3 = (-1105.4598581307573);
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = 0.0;
      doubleArray0[5] = double5;
      double double6 = 0.0;
      doubleArray0[6] = double6;
      double double7 = 1256.8262421907223;
      doubleArray0[7] = double7;
      double double8 = 0.0;
      doubleArray0[8] = double8;
      double double9 = (-1027.5556575401447);
      doubleArray0[9] = double9;
      char[] charArray0 = new char[6];
      char char0 = ',';
      charArray0[0] = char0;
      char char1 = 'V';
      charArray0[1] = char1;
      char char2 = 'T';
      charArray0[2] = char2;
      char char3 = 'v';
      charArray0[3] = char3;
      char char4 = '[';
      charArray0[4] = char4;
      char char5 = 'B';
      charArray0[5] = char5;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      assertEquals("{0.0=B, -909.8359938001611=T, -1105.4598581307573=v, Infinity=,}", tDoubleCharHashMap0.toString());
      assertEquals(4, tDoubleCharHashMap0.size());
  }

  @Test
  public void test9()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = double0;
      char[] charArray0 = new char[1];
      char char0 = 'N';
      charArray0[0] = char0;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      tDoubleCharHashMap0.trimToSize();
      assertEquals(3, tDoubleCharHashMap0.capacity());
      assertEquals(false, tDoubleCharHashMap0.isEmpty());
      assertEquals("{-Infinity=N}", tDoubleCharHashMap0.toString());
      assertEquals(1, tDoubleCharHashMap0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = (-406.1820702589806);
      doubleArray0[1] = double1;
      double double2 = (-645.3492994433154);
      doubleArray0[2] = double2;
      double double3 = 691.2293528195914;
      doubleArray0[3] = double3;
      double double4 = Double.POSITIVE_INFINITY;
      doubleArray0[4] = double4;
      char[] charArray0 = new char[6];
      char char0 = '`';
      charArray0[0] = char0;
      char char1 = 'u';
      charArray0[1] = char1;
      char char2 = 'u';
      charArray0[2] = char2;
      char char3 = '#';
      charArray0[3] = char3;
      char char4 = 'j';
      charArray0[4] = char4;
      char char5 = 'D';
      charArray0[5] = char5;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      tDoubleCharHashMap0.tempDisableAutoCompaction();
      assertEquals("{Infinity=j, -645.3492994433154=u, -406.1820702589806=u, 691.2293528195914=#, 0.0=`}", tDoubleCharHashMap0.toString());
      
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap();
      assertEquals(23, tDoubleCharHashMap1.capacity());
      assertFalse(tDoubleCharHashMap1.equals(tDoubleCharHashMap0));
  }

  @Test
  public void test11()  throws Throwable  {
      Map.Entry<Integer, Character> map_Entry0 = null;
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = (-822.6101173526699);
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      char[] charArray0 = new char[7];
      char char0 = '?';
      charArray0[0] = char0;
      char char1 = 'L';
      charArray0[1] = char1;
      char char2 = '[';
      charArray0[2] = char2;
      char char3 = '';
      charArray0[3] = char3;
      char char4 = '*';
      charArray0[4] = char4;
      char char5 = '^';
      charArray0[5] = char5;
      char char6 = 'W';
      charArray0[6] = char6;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap((TDoubleCharMap) tDoubleCharHashMap0);
      boolean boolean0 = false;
      tDoubleCharHashMap1.reenableAutoCompaction(boolean0);
      AbstractMap.SimpleImmutableEntry<Integer, Character> abstractMap_SimpleImmutableEntry0 = null;
      try {
        abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Character>(map_Entry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 181;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0);
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap((TDoubleCharMap) tDoubleCharHashMap0);
      tDoubleCharHashMap1.valueCollection();
      int int1 = (-1732);
      TDoubleCharHashMap tDoubleCharHashMap2 = new TDoubleCharHashMap(int1, int1);
      char char0 = '>';
      tDoubleCharHashMap2.putIfAbsent((double) int1, char0);
      int int2 = 226;
      tDoubleCharHashMap2.putIfAbsent((double) char0, char0);
      TDoubleCharHashMap tDoubleCharHashMap3 = new TDoubleCharHashMap(int2);
      char char1 = 'u';
      tDoubleCharHashMap3.put((double) int2, char1);
      int int3 = 978821;
      tDoubleCharHashMap2.toString();
      float float0 = 1217.4122F;
      char char2 = '\'';
      TCharFunction tCharFunction0 = null;
      // Undeclared exception!
      try {
        tDoubleCharHashMap2.transformValues(tCharFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-1423);
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0);
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap((TDoubleCharMap) tDoubleCharHashMap0);
      TDoubleCharHashMap tDoubleCharHashMap2 = new TDoubleCharHashMap((TDoubleCharMap) tDoubleCharHashMap1);
      tDoubleCharHashMap2.getNoEntryKey();
      TDoubleCharHashMap tDoubleCharHashMap3 = new TDoubleCharHashMap();
      Locale locale0 = Locale.TAIWAN;
      double double0 = 0.0;
      char char0 = '\\';
      tDoubleCharHashMap3.values();
      tDoubleCharHashMap3.iterator();
      tDoubleCharHashMap3.adjustValue(double0, char0);
      int int1 = 0;
      float float0 = (-85.58125F);
      char char1 = 'W';
      TDoubleCharHashMap tDoubleCharHashMap4 = new TDoubleCharHashMap(int1, float0, (double) int0, char1);
      char char2 = ';';
      Locale locale1 = null;
      // Undeclared exception!
      try {
        locale0.getDisplayLanguage(locale1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0);
      String string0 = tDoubleCharHashMap0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      TDoubleCharProcedure tDoubleCharProcedure0 = null;
      boolean boolean0 = tDoubleCharHashMap0.retainEntries(tDoubleCharProcedure0);
      assertEquals(false, boolean0);
  }
}
