/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TFloatCollection;
import gnu.trove.list.TFloatList;
import gnu.trove.list.array.TFloatArrayList;
import gnu.trove.list.linked.TFloatLinkedList;
import gnu.trove.map.TFloatObjectMap;
import gnu.trove.map.hash.TFloatObjectHashMap;
import gnu.trove.set.hash.TFloatHashSet;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.StreamCorruptedException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


//   @Test
//   public void test0()  throws Throwable  {
//       int int0 = (-272);
//       int int1 = 2032;
//       TFloatHashSet tFloatHashSet0 = new TFloatHashSet(int1);
//       float float0 = tFloatHashSet0.getAutoCompactionFactor();
//       float float1 = (-1539.4409F);
//       int int2 = 0;
//       int int3 = (-1935);
//       float[] floatArray0 = new float[4];
//       floatArray0[0] = (float) int2;
//       floatArray0[1] = (float) int2;
//       floatArray0[2] = (float) int3;
//       floatArray0[3] = float0;
//       tFloatHashSet0.containsAll(floatArray0);
//       TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>(int3, int0);
//       tFloatHashSet0.ensureCapacity(int2);
//       assertEquals(4177, tFloatHashSet0.capacity());
//       assertEquals(0.0F, tFloatHashSet0.getNoEntryValue(), 0.01F);
//       
//       TFloatObjectHashMap<Integer> tFloatObjectHashMap1 = new TFloatObjectHashMap<Integer>(int0, float1, (float) int0);
//       Integer[] integerArray0 = tFloatObjectHashMap1.values();
//       assertNotNull(integerArray0);
//       
//       float float2 = 0.0F;
//       boolean boolean0 = tFloatObjectHashMap1.contains(float2);
//       assertEquals(0.0F, tFloatObjectHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals(false, boolean0);
//   }

//   @Test
//   public void test1()  throws Throwable  {
//       TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>();
//       int int0 = 0;
//       float float0 = (-1.0F);
//       TFloatHashSet tFloatHashSet0 = new TFloatHashSet(int0, float0);
//       Locale locale0 = Locale.CANADA_FRENCH;
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       tFloatHashSet0.containsAll((Collection<?>) set0);
//       boolean boolean0 = false;
//       tFloatObjectHashMap0.reenableAutoCompaction(boolean0);
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(tFloatObjectHashMap0._set);
//       TFloatHashSet tFloatHashSet1 = new TFloatHashSet((TFloatCollection) tFloatArrayList0);
//       boolean boolean1 = false;
//       tFloatHashSet1.reenableAutoCompaction(boolean1);
//       assertEquals("{0.0}", tFloatHashSet1.toString());
//       assertEquals(23, tFloatArrayList0.size());
//       
//       TFloatObjectHashMap<Object> tFloatObjectHashMap1 = new TFloatObjectHashMap<Object>((TFloatObjectMap<?>) tFloatObjectHashMap0);
//       float float1 = tFloatObjectHashMap1.getNoEntryKey();
//       tFloatObjectHashMap1.trimToSize();
//       int int1 = 0;
//       TFloatHashSet tFloatHashSet2 = new TFloatHashSet(int1, (float) int1, float1);
//       float float2 = tFloatHashSet2.getNoEntryValue();
//       assertEquals(0.0F, tFloatObjectHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals(0.0F, float2, 0.01F);
//       assertEquals(0.0F, tFloatObjectHashMap0.getNoEntryValue(), 0.01F);
//   }

//   @Test
//   public void test2()  throws Throwable  {
//       int int0 = 0;
//       TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>(int0);
//       int int1 = 116;
//       TFloatObjectHashMap<Object> tFloatObjectHashMap1 = new TFloatObjectHashMap<Object>(int1);
//       byte[] byteArray0 = tFloatObjectHashMap1._states;
//       TFloatHashSet tFloatHashSet0 = new TFloatHashSet();
//       LinkedList<String> linkedList0 = new LinkedList<String>();
//       tFloatHashSet0.retainAll((Collection<?>) linkedList0);
//       float float0 = 0.0F;
//       float[] floatArray0 = new float[7];
//       floatArray0[0] = float0;
//       floatArray0[1] = float0;
//       floatArray0[2] = (float) int1;
//       floatArray0[3] = float0;
//       floatArray0[4] = float0;
//       floatArray0[5] = float0;
//       floatArray0[6] = float0;
//       tFloatHashSet0.retainAll(floatArray0);
//       int int2 = (-16);
//       TFloatObjectHashMap<String> tFloatObjectHashMap2 = new TFloatObjectHashMap<String>(int2);
//       TFloatObjectHashMap<Integer> tFloatObjectHashMap3 = new TFloatObjectHashMap<Integer>(int2);
//       tFloatObjectHashMap3.clear();
//       tFloatObjectHashMap2.getAutoCompactionFactor();
//       boolean boolean0 = tFloatHashSet0.remove(float0);
//       assertEquals(false, boolean0);
//       
//       TFloatHashSet tFloatHashSet1 = new TFloatHashSet();
//       int int3 = (-1);
//       floatArray0[0] = (float) int3;
//       floatArray0[1] = float0;
//       floatArray0[2] = (float) int2;
//       floatArray0[3] = (float) int1;
//       floatArray0[4] = (float) int1;
//       floatArray0[5] = float0;
//       tFloatObjectHashMap3.isEmpty();
//       assertEquals(0.0F, tFloatObjectHashMap3.getNoEntryValue(), 0.01F);
//       
//       floatArray0[6] = (float) int2;
//       tFloatHashSet1.toArray();
//       assertEquals(0.0F, tFloatHashSet1.getNoEntryValue(), 0.01F);
//       assertEquals(23, tFloatHashSet1.capacity());
//       
//       TFloatObjectHashMap<Object> tFloatObjectHashMap4 = new TFloatObjectHashMap<Object>(int3, int3, int3);
//       ObjectInput objectInput0 = null;
//       // Undeclared exception!
//       try {
//         tFloatObjectHashMap4.readExternal(objectInput0);
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 485;
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>(int0);
      int int1 = 95;
      float float0 = 786.8896F;
      TFloatArrayList.wrap(tFloatObjectHashMap0._set, float0);
      String string0 = "3&gemLHxC('y0Eg";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 3&gemLHxC('y0Eg://3&gemLHxC('y0Eg3&gemLHxC('y0Eg?3&gemLHxC('y0Eg#3&gemLHxC('y0Eg
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      float[] floatArray0 = new float[2];
      int int0 = 1293;
      float float0 = 1146.8049F;
      float float1 = 244.74698F;
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(int0, float0, float1);
      tFloatHashSet0.capacity();
      float float2 = (-1449.8011F);
      floatArray0[0] = float2;
      floatArray0[0] = float2;
      floatArray0[1] = float2;
      float float3 = 0.0F;
      floatArray0[1] = float3;
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>();
      TFloatObjectHashMap<Object> tFloatObjectHashMap1 = new TFloatObjectHashMap<Object>((TFloatObjectMap<?>) tFloatObjectHashMap0);
      TFloatHashSet tFloatHashSet1 = new TFloatHashSet(floatArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet();
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-94);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-126);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-1);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-113);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-127);
      byteArray0[6] = byte6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: A20082FF
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 2625761;
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(int0, int0, int0);
      TFloatObjectHashMap<Object> tFloatObjectHashMap1 = new TFloatObjectHashMap<Object>((TFloatObjectMap<?>) tFloatObjectHashMap0);
      tFloatObjectHashMap1.keys(tFloatObjectHashMap0._set);
      int int1 = 5779;
      float float0 = (-484.12964F);
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(int1, float0);
      tFloatHashSet0.toString();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      tFloatHashSet0.removeAll((Collection<?>) linkedList0);
      float[] floatArray0 = new float[2];
      float float1 = (-1900.2405F);
      floatArray0[0] = float1;
      float float2 = 0.0F;
      floatArray0[1] = float2;
      TFloatHashSet tFloatHashSet1 = new TFloatHashSet(floatArray0);
      float float3 = 1979.8467F;
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList(float3);
      int int2 = 242;
      int int3 = 240;
      // Undeclared exception!
      try {
        tFloatLinkedList0.subList(int2, int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // begin index 242 greater than end index 240
         //
      }
  }

//   @Test
//   public void test7()  throws Throwable  {
//       int int0 = 1395;
//       int int1 = 1;
//       TFloatHashSet tFloatHashSet0 = new TFloatHashSet(int1, int0, int1);
//       tFloatHashSet0.isEmpty();
//       Locale locale0 = Locale.KOREA;
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       tFloatHashSet0.retainAll((Collection<?>) set0);
//       float float0 = (-1812.6288F);
//       float[] floatArray0 = new float[6];
//       floatArray0[0] = (float) int0;
//       float float1 = 1.4E-45F;
//       TFloatHashSet tFloatHashSet1 = new TFloatHashSet(int0, float1, floatArray0[0]);
//       tFloatHashSet1.setAutoCompactionFactor(float1);
//       int int2 = (-1817);
//       float float2 = 0.0F;
//       float float3 = 648.9947F;
//       TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>(int2, float2, float3);
//       tFloatObjectHashMap0.compact();
//       floatArray0[1] = (float) int0;
//       int int3 = 0;
//       TFloatHashSet tFloatHashSet2 = new TFloatHashSet(int3, float0);
//       floatArray0[2] = float0;
//       floatArray0[3] = float0;
//       float float4 = 0.0F;
//       LinkedList<Object> linkedList0 = new LinkedList<Object>();
//       tFloatHashSet1.retainAll((Collection<?>) linkedList0);
//       assertEquals(1395.0F, tFloatHashSet1.getNoEntryValue(), 0.01F);
//       
//       floatArray0[4] = float4;
//       floatArray0[5] = float0;
//       TFloatHashSet tFloatHashSet3 = new TFloatHashSet(floatArray0);
//       tFloatHashSet3.iterator();
//       float float5 = (-940.6491F);
//       tFloatHashSet2.tempDisableAutoCompaction();
//       TFloatObjectHashMap<Integer> tFloatObjectHashMap1 = new TFloatObjectHashMap<Integer>(int0, float0, float5);
//       boolean boolean0 = false;
//       tFloatHashSet3.reenableAutoCompaction(boolean0);
//       assertEquals(0.0F, tFloatHashSet3.getNoEntryValue(), 0.01F);
//       assertEquals("{1395.0,-1812.6288,0.0}", tFloatHashSet3.toString());
//       
//       float float6 = tFloatHashSet2.getNoEntryValue();
//       assertEquals(0.0F, float6, 0.01F);
//       
//       tFloatObjectHashMap1.getAutoCompactionFactor();
//       assertEquals(0.0F, tFloatObjectHashMap1.getNoEntryValue(), 0.01F);
//   }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-1156);
      TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>(int0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tFloatObjectHashMap0._states);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TFloatList tFloatList0 = null;
          String string0 = "+T0(N^~$";
          File file0 = null;
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-1655);
      float float0 = 89.41543F;
      float float1 = 0.0F;
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(int0, float0, float1);
      float[] floatArray0 = tFloatObjectHashMap0._set;
      int int1 = Integer.MAX_VALUE;
      String string0 = "`[v48)]";
      // Undeclared exception!
      try {
        URI.create(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 0: `[v48)]
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 1813;
      TFloatList tFloatList0 = null;
      TFloatLinkedList tFloatLinkedList0 = null;
      try {
        tFloatLinkedList0 = new TFloatLinkedList(tFloatList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test12()  throws Throwable  {
//       TFloatHashSet tFloatHashSet0 = new TFloatHashSet();
//       byte[] byteArray0 = tFloatHashSet0._states;
//       TFloatHashSet tFloatHashSet1 = new TFloatHashSet();
//       assertEquals(23, tFloatHashSet1.capacity());
//       assertEquals(0.0F, tFloatHashSet1.getNoEntryValue(), 0.01F);
//   }
}
