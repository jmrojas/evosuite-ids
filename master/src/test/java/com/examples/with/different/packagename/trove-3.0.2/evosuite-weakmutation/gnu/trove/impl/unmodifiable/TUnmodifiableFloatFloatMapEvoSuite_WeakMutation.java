/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableFloatCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableFloatSet;
import gnu.trove.map.TFloatFloatMap;
import gnu.trove.map.hash.TFloatFloatHashMap;
import gnu.trove.procedure.TFloatFloatProcedure;
import gnu.trove.procedure.TFloatProcedure;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableFloatFloatMapEvoSuite_WeakMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 7 covered goals:
   * 1 Weak Mutation 11: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.isEmpty()Z:64 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 2 Weak Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.isEmpty()Z:64 - DeleteStatement: isEmpty()Z
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.isEmpty()Z: root-Branch
   * 4 Weak Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.<init>(Lgnu/trove/map/TFloatFloatMap;)V:58 - ReplaceComparisonOperator != null -> = null
   * 5 Weak Mutation 11: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.isEmpty()Z:64 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 6 Weak Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.isEmpty()Z:64 - DeleteStatement: isEmpty()Z
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.<init>(Lgnu/trove/map/TFloatFloatMap;)V: I17 Branch 1 IFNONNULL L58 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      boolean boolean0 = tUnmodifiableFloatFloatMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 1
  /*
   * 7 covered goals:
   * 1 Weak Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.containsKey(F)Z:65 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 2 Weak Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.containsKey(F)Z:65 - InsertUnaryOp Negation of key
   * 3 Weak Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.containsKey(F)Z:65 - DeleteStatement: containsKey(F)Z
   * 4 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.containsKey(F)Z: root-Branch
   * 5 Weak Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.containsKey(F)Z:65 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 6 Weak Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.containsKey(F)Z:65 - InsertUnaryOp Negation of key
   * 7 Weak Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.containsKey(F)Z:65 - DeleteStatement: containsKey(F)Z
   */

  @Test
  public void test1()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      boolean boolean0 = tUnmodifiableFloatFloatMap0.containsKey((float) (-16));
      assertEquals(false, boolean0);
  }

  //Test case number: 2
  /*
   * 7 covered goals:
   * 1 Weak Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.containsValue(F)Z:66 - InsertUnaryOp Negation of val
   * 2 Weak Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.containsValue(F)Z:66 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 3 Weak Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.containsValue(F)Z:66 - DeleteStatement: containsValue(F)Z
   * 4 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.containsValue(F)Z: root-Branch
   * 5 Weak Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.containsValue(F)Z:66 - InsertUnaryOp Negation of val
   * 6 Weak Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.containsValue(F)Z:66 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 7 Weak Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.containsValue(F)Z:66 - DeleteStatement: containsValue(F)Z
   */

  @Test
  public void test2()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      boolean boolean0 = tUnmodifiableFloatFloatMap0.containsValue(1.0F);
      assertEquals(false, boolean0);
  }

  //Test case number: 3
  /*
   * 7 covered goals:
   * 1 Weak Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.get(F)F:67 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 2 Weak Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.get(F)F:67 - DeleteStatement: get(F)F
   * 3 Weak Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.get(F)F:67 - InsertUnaryOp Negation of key
   * 4 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.get(F)F: root-Branch
   * 5 Weak Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.get(F)F:67 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 6 Weak Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.get(F)F:67 - DeleteStatement: get(F)F
   * 7 Weak Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.get(F)F:67 - InsertUnaryOp Negation of key
   */

//   @Test
//   public void test3()  throws Throwable  {
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(0);
//       TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
//       float float0 = tUnmodifiableFloatFloatMap0.get((float) 0);
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 4
  /*
   * 14 covered goals:
   * 1 Weak Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keySet()Lgnu/trove/set/TFloatSet;:79 - DeleteField: keySetLgnu/trove/set/TFloatSet;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keySet()Lgnu/trove/set/TFloatSet;: I4 Branch 2 IFNONNULL L79 - true
   * 3 Weak Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keySet()Lgnu/trove/set/TFloatSet;:79 - ReplaceComparisonOperator != null -> = null
   * 4 Weak Mutation 25: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keySet()Lgnu/trove/set/TFloatSet;:80 - DeleteStatement: keySet()Lgnu/trove/set/TFloatSet;
   * 5 Weak Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keySet()Lgnu/trove/set/TFloatSet;:80 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 6 Weak Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keySet()Lgnu/trove/set/TFloatSet;:81 - DeleteField: keySetLgnu/trove/set/TFloatSet;
   * 7 Weak Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keySet()Lgnu/trove/set/TFloatSet;:80 - DeleteStatement: unmodifiableSet(Lgnu/trove/set/TFloatSet;)Lgnu/trove/set/TFloatSet;
   * 8 Weak Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keySet()Lgnu/trove/set/TFloatSet;:79 - ReplaceComparisonOperator != null -> = null
   * 9 Weak Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keySet()Lgnu/trove/set/TFloatSet;:79 - DeleteField: keySetLgnu/trove/set/TFloatSet;
   * 10 Weak Mutation 25: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keySet()Lgnu/trove/set/TFloatSet;:80 - DeleteStatement: keySet()Lgnu/trove/set/TFloatSet;
   * 11 Weak Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keySet()Lgnu/trove/set/TFloatSet;:80 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 12 Weak Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keySet()Lgnu/trove/set/TFloatSet;:81 - DeleteField: keySetLgnu/trove/set/TFloatSet;
   * 13 Weak Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keySet()Lgnu/trove/set/TFloatSet;:80 - DeleteStatement: unmodifiableSet(Lgnu/trove/set/TFloatSet;)Lgnu/trove/set/TFloatSet;
   * 14 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keySet()Lgnu/trove/set/TFloatSet;: I4 Branch 2 IFNONNULL L79 - false
   */

  @Test
  public void test4()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      TUnmodifiableFloatSet tUnmodifiableFloatSet0 = (TUnmodifiableFloatSet)tUnmodifiableFloatFloatMap0.keySet();
      assertNotNull(tUnmodifiableFloatSet0);
      
      TUnmodifiableFloatSet tUnmodifiableFloatSet1 = (TUnmodifiableFloatSet)tUnmodifiableFloatFloatMap0.keySet();
      assertSame(tUnmodifiableFloatSet1, tUnmodifiableFloatSet0);
  }

  //Test case number: 5
  /*
   * 5 covered goals:
   * 1 Weak Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keys()[F:83 - DeleteStatement: keys()[F
   * 2 Weak Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keys()[F:83 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keys()[F: root-Branch
   * 4 Weak Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keys()[F:83 - DeleteStatement: keys()[F
   * 5 Weak Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keys()[F:83 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   */

  @Test
  public void test5()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      float[] floatArray0 = tUnmodifiableFloatFloatMap0.keys();
      assertNotNull(floatArray0);
  }

  //Test case number: 6
  /*
   * 5 covered goals:
   * 1 Weak Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keys([F)[F:84 - DeleteStatement: keys([F)[F
   * 2 Weak Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keys([F)[F:84 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keys([F)[F: root-Branch
   * 4 Weak Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keys([F)[F:84 - DeleteStatement: keys([F)[F
   * 5 Weak Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.keys([F)[F:84 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   */

  @Test
  public void test6()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(8);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      float[] floatArray0 = tUnmodifiableFloatFloatMap0.keys(tFloatFloatHashMap0._set);
      assertNotNull(floatArray0);
  }

  //Test case number: 7
  /*
   * 14 covered goals:
   * 1 Weak Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:87 - DeleteField: valuesLgnu/trove/TFloatCollection;
   * 2 Weak Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:87 - ReplaceComparisonOperator != null -> = null
   * 3 Weak Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:88 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 4 Weak Mutation 35: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:88 - DeleteStatement: valueCollection()Lgnu/trove/TFloatCollection;
   * 5 Weak Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:88 - DeleteStatement: unmodifiableCollection(Lgnu/trove/TFloatCollection;)Lgnu/trove/TFloatCollection;
   * 6 Weak Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:89 - DeleteField: valuesLgnu/trove/TFloatCollection;
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.valueCollection()Lgnu/trove/TFloatCollection;: I4 Branch 3 IFNONNULL L87 - true
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.valueCollection()Lgnu/trove/TFloatCollection;: I4 Branch 3 IFNONNULL L87 - false
   * 9 Weak Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:88 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 10 Weak Mutation 35: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:88 - DeleteStatement: valueCollection()Lgnu/trove/TFloatCollection;
   * 11 Weak Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:87 - DeleteField: valuesLgnu/trove/TFloatCollection;
   * 12 Weak Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:87 - ReplaceComparisonOperator != null -> = null
   * 13 Weak Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:88 - DeleteStatement: unmodifiableCollection(Lgnu/trove/TFloatCollection;)Lgnu/trove/TFloatCollection;
   * 14 Weak Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:89 - DeleteField: valuesLgnu/trove/TFloatCollection;
   */

  @Test
  public void test7()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(0);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      TUnmodifiableFloatCollection tUnmodifiableFloatCollection0 = (TUnmodifiableFloatCollection)tUnmodifiableFloatFloatMap0.valueCollection();
      assertNotNull(tUnmodifiableFloatCollection0);
      
      TUnmodifiableFloatCollection tUnmodifiableFloatCollection1 = (TUnmodifiableFloatCollection)tUnmodifiableFloatFloatMap0.valueCollection();
      assertSame(tUnmodifiableFloatCollection1, tUnmodifiableFloatCollection0);
  }

  //Test case number: 8
  /*
   * 5 covered goals:
   * 1 Weak Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.values()[F:91 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 2 Weak Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.values()[F:91 - DeleteStatement: values()[F
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.values()[F: root-Branch
   * 4 Weak Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.values()[F:91 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 5 Weak Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.values()[F:91 - DeleteStatement: values()[F
   */

  @Test
  public void test8()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(0);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      float[] floatArray0 = tUnmodifiableFloatFloatMap0.values();
      assertNotNull(floatArray0);
  }

  //Test case number: 9
  /*
   * 5 covered goals:
   * 1 Weak Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.values([F)[F:92 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 2 Weak Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.values([F)[F:92 - DeleteStatement: values([F)[F
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.values([F)[F: root-Branch
   * 4 Weak Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.values([F)[F:92 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 5 Weak Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.values([F)[F:92 - DeleteStatement: values([F)[F
   */

  @Test
  public void test9()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      float[] floatArray0 = tUnmodifiableFloatFloatMap0.values(tFloatFloatHashMap0._set);
      assertNotNull(floatArray0);
  }

  //Test case number: 10
  /*
   * 12 covered goals:
   * 1 Weak Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.equals(Ljava/lang/Object;)Z:94 - ReplaceComparisonOperator == -> !=
   * 2 Weak Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.equals(Ljava/lang/Object;)Z:94 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 3 Weak Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.equals(Ljava/lang/Object;)Z:94 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.equals(Ljava/lang/Object;)Z:94 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 5 Weak Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.equals(Ljava/lang/Object;)Z:94 - ReplaceComparisonOperator == -> !=
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L94 - false
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L94 - true
   * 8 Weak Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.equals(Ljava/lang/Object;)Z:94 - ReplaceComparisonOperator == -> !=
   * 9 Weak Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.equals(Ljava/lang/Object;)Z:94 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 10 Weak Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.equals(Ljava/lang/Object;)Z:94 - ReplaceConstant - 0 -> 1
   * 11 Weak Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.equals(Ljava/lang/Object;)Z:94 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 12 Weak Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.equals(Ljava/lang/Object;)Z:94 - ReplaceComparisonOperator == -> !=
   */

  @Test
  public void test10()  throws Throwable  {
      float[] floatArray0 = new float[7];
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      boolean boolean0 = tUnmodifiableFloatFloatMap0.equals((Object) "{0.0=0.0}");
      assertEquals(false, boolean0);
  }

  //Test case number: 11
  /*
   * 5 covered goals:
   * 1 Weak Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.hashCode()I:95 - DeleteStatement: hashCode()I
   * 2 Weak Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.hashCode()I:95 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.hashCode()I: root-Branch
   * 4 Weak Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.hashCode()I:95 - DeleteStatement: hashCode()I
   * 5 Weak Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.hashCode()I:95 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   */

  @Test
  public void test11()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      int int0 = tUnmodifiableFloatFloatMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 12
  /*
   * 5 covered goals:
   * 1 Weak Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.toString()Ljava/lang/String;:96 - DeleteStatement: toString()Ljava/lang/String;
   * 2 Weak Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.toString()Ljava/lang/String;:96 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.toString()Ljava/lang/String;: root-Branch
   * 4 Weak Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.toString()Ljava/lang/String;:96 - DeleteStatement: toString()Ljava/lang/String;
   * 5 Weak Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.toString()Ljava/lang/String;:96 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   */

  @Test
  public void test12()  throws Throwable  {
      float[] floatArray0 = new float[7];
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      String string0 = tUnmodifiableFloatFloatMap0.toString();
      assertEquals("{0.0=0.0}", string0);
  }

  //Test case number: 13
  /*
   * 5 covered goals:
   * 1 Weak Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.getNoEntryKey()F:97 - DeleteStatement: getNoEntryKey()F
   * 2 Weak Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.getNoEntryKey()F:97 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.getNoEntryKey()F: root-Branch
   * 4 Weak Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.getNoEntryKey()F:97 - DeleteStatement: getNoEntryKey()F
   * 5 Weak Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.getNoEntryKey()F:97 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   */

//   @Test
//   public void test13()  throws Throwable  {
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(0);
//       TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
//       float float0 = tUnmodifiableFloatFloatMap0.getNoEntryKey();
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 14
  /*
   * 5 covered goals:
   * 1 Weak Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.getNoEntryValue()F:98 - DeleteStatement: getNoEntryValue()F
   * 2 Weak Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.getNoEntryValue()F:98 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.getNoEntryValue()F: root-Branch
   * 4 Weak Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.getNoEntryValue()F:98 - DeleteStatement: getNoEntryValue()F
   * 5 Weak Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.getNoEntryValue()F:98 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   */

//   @Test
//   public void test14()  throws Throwable  {
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap((-14));
//       TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
//       float float0 = tUnmodifiableFloatFloatMap0.getNoEntryValue();
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 15
  /*
   * 5 covered goals:
   * 1 Weak Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z:101 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z
   * 2 Weak Mutation 56: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z:101 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   * 4 Weak Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z:101 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z
   * 5 Weak Mutation 56: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z:101 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   */

  @Test
  public void test15()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      boolean boolean0 = tUnmodifiableFloatFloatMap0.forEachKey((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 16
  /*
   * 5 covered goals:
   * 1 Weak Mutation 59: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z:104 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z
   * 2 Weak Mutation 58: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z:104 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   * 4 Weak Mutation 59: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z:104 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z
   * 5 Weak Mutation 58: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z:104 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   */

  @Test
  public void test16()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      boolean boolean0 = tUnmodifiableFloatFloatMap0.forEachValue((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 17
  /*
   * 5 covered goals:
   * 1 Weak Mutation 61: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.forEachEntry(Lgnu/trove/procedure/TFloatFloatProcedure;)Z:107 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TFloatFloatProcedure;)Z
   * 2 Weak Mutation 60: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.forEachEntry(Lgnu/trove/procedure/TFloatFloatProcedure;)Z:107 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.forEachEntry(Lgnu/trove/procedure/TFloatFloatProcedure;)Z: root-Branch
   * 4 Weak Mutation 61: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.forEachEntry(Lgnu/trove/procedure/TFloatFloatProcedure;)Z:107 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TFloatFloatProcedure;)Z
   * 5 Weak Mutation 60: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.forEachEntry(Lgnu/trove/procedure/TFloatFloatProcedure;)Z:107 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   */

  @Test
  public void test17()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(8);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      boolean boolean0 = tUnmodifiableFloatFloatMap0.forEachEntry((TFloatFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 18
  /*
   * 27 covered goals:
   * 1 Weak Mutation 0: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap$1.key()F:114 - DeleteField: iterLgnu/trove/iterator/TFloatFloatIterator;
   * 2 Weak Mutation 1: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap$1.key()F:114 - DeleteStatement: key()F
   * 3 Weak Mutation 2: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap$1.value()F:115 - DeleteField: iterLgnu/trove/iterator/TFloatFloatIterator;
   * 4 Weak Mutation 3: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap$1.value()F:115 - DeleteStatement: value()F
   * 5 Weak Mutation 4: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap$1.advance()V:116 - DeleteField: iterLgnu/trove/iterator/TFloatFloatIterator;
   * 6 Weak Mutation 5: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap$1.advance()V:116 - DeleteStatement: advance()V
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap$1.key()F: root-Branch
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap$1.value()F: root-Branch
   * 9 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap$1.advance()V: root-Branch
   * 10 Weak Mutation 6: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap$1.hasNext()Z:117 - DeleteField: iterLgnu/trove/iterator/TFloatFloatIterator;
   * 11 Weak Mutation 7: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap$1.hasNext()Z:117 - DeleteStatement: hasNext()Z
   * 12 Weak Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.size()I:63 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 13 Weak Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.size()I:63 - DeleteStatement: size()I
   * 14 Weak Mutation 0: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap$1.key()F:114 - DeleteField: iterLgnu/trove/iterator/TFloatFloatIterator;
   * 15 Weak Mutation 1: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap$1.key()F:114 - DeleteStatement: key()F
   * 16 Weak Mutation 2: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap$1.value()F:115 - DeleteField: iterLgnu/trove/iterator/TFloatFloatIterator;
   * 17 Weak Mutation 3: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap$1.value()F:115 - DeleteStatement: value()F
   * 18 Weak Mutation 4: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap$1.advance()V:116 - DeleteField: iterLgnu/trove/iterator/TFloatFloatIterator;
   * 19 Weak Mutation 5: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap$1.advance()V:116 - DeleteStatement: advance()V
   * 20 Weak Mutation 6: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap$1.hasNext()Z:117 - DeleteField: iterLgnu/trove/iterator/TFloatFloatIterator;
   * 21 Weak Mutation 7: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap$1.hasNext()Z:117 - DeleteStatement: hasNext()Z
   * 22 Weak Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.size()I:63 - DeleteField: mLgnu/trove/map/TFloatFloatMap;
   * 23 Weak Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.size()I:63 - DeleteStatement: size()I
   * 24 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap$1.hasNext()Z: root-Branch
   * 25 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap$1.<init>(Lgnu/trove/impl/unmodifiable/TUnmodifiableFloatFloatMap;)V: root-Branch
   * 26 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.iterator()Lgnu/trove/iterator/TFloatFloatIterator;: root-Branch
   * 27 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.size()I: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(8);
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(tFloatFloatHashMap0._set, tFloatFloatHashMap0._set);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap1);
      TFloatFloatHashMap tFloatFloatHashMap2 = new TFloatFloatHashMap((TFloatFloatMap) tUnmodifiableFloatFloatMap0);
      assertEquals(1, tUnmodifiableFloatFloatMap0.size());
      assertEquals(1, tFloatFloatHashMap2.size());
  }

  //Test case number: 19
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.<init>(Lgnu/trove/map/TFloatFloatMap;)V: I17 Branch 1 IFNONNULL L58 - false
   * 2 Weak Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap.<init>(Lgnu/trove/map/TFloatFloatMap;)V:58 - ReplaceComparisonOperator != null -> = null
   */

  @Test
  public void test19()  throws Throwable  {
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = null;
      try {
        tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
