/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TObjectIntMapDecorator;
import gnu.trove.impl.hash.TObjectHash;
import gnu.trove.map.TObjectIntMap;
import gnu.trove.map.custom_hash.TObjectIntCustomHashMap;
import gnu.trove.map.hash.TObjectIntHashMap;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.StringTokenizer;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectIntMapDecoratorEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      int int0 = 0;
      IdentityHashingStrategy<Integer> identityHashingStrategy1 = new IdentityHashingStrategy<Integer>();
      float float0 = 1845.2258F;
      TObjectIntMapDecorator<Integer> tObjectIntMapDecorator0 = new TObjectIntMapDecorator<Integer>();
      tObjectIntMapDecorator0.keySet();
      TObjectIntCustomHashMap<TObjectIntCustomHashMap<Object>> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<TObjectIntCustomHashMap<Object>>();
      identityHashingStrategy1.equals((Integer) int0, (Integer) int0);
      TObjectIntMapDecorator<TObjectIntCustomHashMap<Object>> tObjectIntMapDecorator1 = new TObjectIntMapDecorator<TObjectIntCustomHashMap<Object>>((TObjectIntMap<TObjectIntCustomHashMap<Object>>) tObjectIntCustomHashMap0);
      Object object0 = TObjectHash.REMOVED;
      // Undeclared exception!
      try {
        tObjectIntMapDecorator1.remove(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TObjectIntMapDecorator<String> tObjectIntMapDecorator0 = new TObjectIntMapDecorator<String>();
      String string0 = "Class of objects differ a=";
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      int int0 = 0;
      float float0 = 0.0F;
      TObjectIntCustomHashMap<String> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<String>((HashingStrategy<? super String>) identityHashingStrategy0, int0, float0, int0);
      AbstractMap.SimpleEntry<String, TObjectIntCustomHashMap<String>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, TObjectIntCustomHashMap<String>>(string0, tObjectIntCustomHashMap0);
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>();
      String string1 = hashMap0.toString();
      abstractMap_SimpleEntry0.equals((Object) string1);
      Set<String> set0 = tObjectIntMapDecorator0.keySet();
      assertNotNull(set0);
  }

  @Test
  public void test2()  throws Throwable  {
      TObjectIntCustomHashMap<Integer> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<Integer>();
      tObjectIntCustomHashMap0.clear();
      TObjectIntMapDecorator<Integer> tObjectIntMapDecorator0 = new TObjectIntMapDecorator<Integer>((TObjectIntMap<Integer>) tObjectIntCustomHashMap0);
      int int0 = (-2022);
      Integer integer0 = new Integer(int0);
      // Undeclared exception!
      try {
        tObjectIntMapDecorator0.put(integer0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      TObjectIntMapDecorator<Integer> tObjectIntMapDecorator0 = new TObjectIntMapDecorator<Integer>();
      int int1 = 913;
      // Undeclared exception!
      try {
        tObjectIntMapDecorator0.put((Integer) int1, (Integer) int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TObjectIntMapDecorator<Object> tObjectIntMapDecorator0 = new TObjectIntMapDecorator<Object>();
      String string0 = "";
      File file0 = null;
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 1458;
      TObjectIntHashMap<AbstractMap.SimpleImmutableEntry<Object, Object>> tObjectIntHashMap0 = new TObjectIntHashMap<AbstractMap.SimpleImmutableEntry<Object, Object>>(int0);
      TObjectIntMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Object>> tObjectIntMapDecorator0 = new TObjectIntMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Object>>((TObjectIntMap<AbstractMap.SimpleImmutableEntry<Object, Object>>) tObjectIntHashMap0);
      String string0 = "/In h#Tpmu3o";
      // Undeclared exception!
      try {
        URI.create(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 3: /In h#Tpmu3o
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TObjectIntMapDecorator<Integer> tObjectIntMapDecorator0 = new TObjectIntMapDecorator<Integer>();
      Object object0 = null;
      TObjectIntMapDecorator<String> tObjectIntMapDecorator1 = new TObjectIntMapDecorator<String>();
      // Undeclared exception!
      try {
        tObjectIntMapDecorator1.get(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-492);
      Integer integer0 = new Integer(int0);
      String string0 = "";
      File file0 = new File(string0, string0);
      File file1 = file0.getCanonicalFile();
      file1.toURI();
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://?#
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Object object0 = null;
      String string0 = "(W|<`^=A1Ui|&G;";
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(object0, string0);
      // Undeclared exception!
      try {
        abstractMap_SimpleImmutableEntry0.setValue(string0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      IdentityHashingStrategy<AbstractMap.SimpleImmutableEntry<Object, Object>> identityHashingStrategy0 = new IdentityHashingStrategy<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      TObjectIntCustomHashMap<String> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<String>();
      TObjectIntMapDecorator<String> tObjectIntMapDecorator0 = new TObjectIntMapDecorator<String>((TObjectIntMap<String>) tObjectIntCustomHashMap0);
      String string0 = "@G:_e^A\"3*";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0);
      // Undeclared exception!
      try {
        stringTokenizer0.nextToken(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TObjectIntMapDecorator<String> tObjectIntMapDecorator0 = new TObjectIntMapDecorator<String>();
      tObjectIntMapDecorator0.entrySet();
      TObjectIntMapDecorator<Integer> tObjectIntMapDecorator1 = new TObjectIntMapDecorator<Integer>();
      TObjectIntHashMap<Object> tObjectIntHashMap0 = new TObjectIntHashMap<Object>();
      TObjectIntMapDecorator<Object> tObjectIntMapDecorator2 = new TObjectIntMapDecorator<Object>((TObjectIntMap<Object>) tObjectIntHashMap0);
      Integer integer0 = null;
      String string0 = "iQ.:|Eg6";
      int int0 = (-444);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in opaque part at index 4: iQ.:|Eg6:iQ.:%7CEg6#iQ.:%7CEg6
         //
      }
  }
}
