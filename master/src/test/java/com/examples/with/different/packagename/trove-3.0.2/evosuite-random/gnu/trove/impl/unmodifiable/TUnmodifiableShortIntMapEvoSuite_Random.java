/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortIntMap;
import gnu.trove.map.TShortIntMap;
import gnu.trove.map.hash.TShortIntHashMap;
import gnu.trove.procedure.TShortIntProcedure;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableShortIntMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)1;
      shortArray0[2] = short2;
      short short3 = (short) (-176);
      shortArray0[3] = short3;
      short short4 = (short)921;
      shortArray0[4] = short4;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) short4;
      intArray0[1] = (int) shortArray0[3];
      intArray0[2] = (int) shortArray0[4];
      intArray0[3] = (int) short4;
      intArray0[4] = (int) short1;
      intArray0[5] = (int) short1;
      intArray0[6] = (int) shortArray0[1];
      intArray0[7] = (int) short2;
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap0 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap0);
      assertEquals("{921=0, -176=921, 1=921, 0=-176}", tUnmodifiableShortIntMap0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-2039);
      float float0 = (-816.75714F);
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(int0, float0);
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap0 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap0);
      Locale locale0 = Locale.CANADA;
      char char0 = 'r';
      String string0 = locale0.getExtension(char0);
      tUnmodifiableShortIntMap0.equals((Object) string0);
      short short0 = (short)1017;
      int int1 = (-1581);
      float float1 = 0.0F;
      short short1 = (short) (-1980);
      TShortIntHashMap tShortIntHashMap1 = new TShortIntHashMap(int1, float1, short1, int0);
      TShortIntHashMap tShortIntHashMap2 = null;
      try {
        tShortIntHashMap2 = new TShortIntHashMap((TShortIntMap) tShortIntHashMap1);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 1784;
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(int0);
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap0 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortIntMap0.putAll((TShortIntMap) tShortIntHashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap();
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap0 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap0);
      tUnmodifiableShortIntMap0.getNoEntryValue();
      tShortIntHashMap0.getAutoCompactionFactor();
      short short0 = (short) (-744);
      int int0 = 122347;
      tShortIntHashMap0.ensureCapacity(int0);
      tUnmodifiableShortIntMap0.size();
      int int1 = (-793);
      short[] shortArray0 = new short[1];
      shortArray0[0] = short0;
      tUnmodifiableShortIntMap0.keys(shortArray0);
      shortArray0[0] = short0;
      // Undeclared exception!
      try {
        tUnmodifiableShortIntMap0.adjustValue(short0, int1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test4()  throws Throwable  {
//       int int0 = (-1);
//       int int1 = 0;
//       TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(int1);
//       TUnmodifiableShortIntMap tUnmodifiableShortIntMap0 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap0);
//       tUnmodifiableShortIntMap0.containsValue(int1);
//       float float0 = 222.92212F;
//       int[] intArray0 = new int[8];
//       intArray0[0] = int1;
//       intArray0[1] = int0;
//       intArray0[2] = int0;
//       intArray0[3] = int1;
//       intArray0[4] = int1;
//       intArray0[5] = int1;
//       intArray0[6] = int0;
//       intArray0[7] = int0;
//       tUnmodifiableShortIntMap0.values(intArray0);
//       TShortIntHashMap tShortIntHashMap1 = new TShortIntHashMap(int0, float0);
//       TUnmodifiableShortIntMap tUnmodifiableShortIntMap1 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap1);
//       assertEquals(0, tUnmodifiableShortIntMap1.getNoEntryKey());
//   }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 0;
      int int1 = 196;
      int int2 = 48;
      short short0 = (short)410;
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(int2, (float) int2, short0, int2);
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap0 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap0);
      short short1 = (short) (-1484);
      tUnmodifiableShortIntMap0.containsKey(short1);
      TShortIntHashMap tShortIntHashMap1 = new TShortIntHashMap(int1, int1);
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap1 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap1);
      short short2 = (short)0;
      int int3 = 0;
      short short3 = (short)1562;
      int int4 = 1668;
      tShortIntHashMap1.put(short3, int4);
      tUnmodifiableShortIntMap1.getNoEntryKey();
      // Undeclared exception!
      try {
        tUnmodifiableShortIntMap1.adjustValue(short2, int3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap();
      tShortIntHashMap0.trimToSize();
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap0 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap0);
      tUnmodifiableShortIntMap0.keys(tShortIntHashMap0._set);
      int int0 = 186;
      TShortIntHashMap tShortIntHashMap1 = new TShortIntHashMap(int0);
      tUnmodifiableShortIntMap0.getNoEntryValue();
      tUnmodifiableShortIntMap0.keySet();
      // Undeclared exception!
      try {
        tUnmodifiableShortIntMap0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-467);
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(int0, int0);
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap0 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap0);
      tUnmodifiableShortIntMap0.keySet();
      float float0 = (-1622.9272F);
      TShortIntHashMap tShortIntHashMap1 = new TShortIntHashMap();
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap1 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap1);
      tUnmodifiableShortIntMap1.toString();
      short short0 = (short) (-1127);
      // Undeclared exception!
      try {
        tUnmodifiableShortIntMap0.adjustValue(short0, short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap();
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap0 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortIntMap0.putAll((TShortIntMap) tShortIntHashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short)201;
      shortArray0[0] = short0;
      int[] intArray0 = new int[10];
      intArray0[0] = (int) shortArray0[0];
      intArray0[1] = (int) shortArray0[0];
      intArray0[2] = (int) shortArray0[0];
      intArray0[3] = (int) short0;
      intArray0[4] = (int) short0;
      intArray0[5] = (int) shortArray0[0];
      intArray0[6] = (int) short0;
      intArray0[7] = (int) shortArray0[0];
      intArray0[8] = (int) short0;
      intArray0[9] = (int) short0;
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap0 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap0);
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap1 = new TUnmodifiableShortIntMap((TShortIntMap) tUnmodifiableShortIntMap0);
      tUnmodifiableShortIntMap1.keys(tShortIntHashMap0._set);
      int int0 = 15;
      TShortIntHashMap tShortIntHashMap1 = new TShortIntHashMap(int0);
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap2 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap1);
      tUnmodifiableShortIntMap2.iterator();
      int int1 = (-1369);
      short short1 = (short)83;
      int int2 = 0;
      // Undeclared exception!
      try {
        tUnmodifiableShortIntMap2.putIfAbsent(short1, int2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      short short0 = (short) (-666);
      short[] shortArray0 = new short[8];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      shortArray0[7] = short0;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) shortArray0[1];
      intArray0[1] = (int) short0;
      intArray0[2] = (int) shortArray0[6];
      intArray0[3] = int0;
      intArray0[4] = (int) short0;
      intArray0[5] = (int) short0;
      intArray0[6] = (int) short0;
      intArray0[7] = (int) shortArray0[1];
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap0 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap0);
      short short1 = (short)777;
      // Undeclared exception!
      try {
        tUnmodifiableShortIntMap0.increment(short1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short) (-885);
      shortArray0[0] = short0;
      short short1 = (short)307;
      shortArray0[1] = short1;
      short short2 = (short) (-1608);
      shortArray0[2] = short2;
      short short3 = (short)1988;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) shortArray0[1];
      intArray0[1] = (int) shortArray0[4];
      intArray0[2] = (int) shortArray0[0];
      intArray0[0] = (int) short1;
      intArray0[1] = (int) shortArray0[3];
      intArray0[2] = (int) shortArray0[2];
      intArray0[3] = (int) shortArray0[4];
      intArray0[4] = (int) short1;
      intArray0[3] = (int) short3;
      intArray0[4] = (int) shortArray0[0];
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap0 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap0);
      TShortIntHashMap tShortIntHashMap1 = new TShortIntHashMap((TShortIntMap) tUnmodifiableShortIntMap0);
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap1 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap1);
      String string0 = tUnmodifiableShortIntMap1.toString();
      assertEquals("{307=1988, -885=307, -1608=-1608, 1988=1988, 0=-885}", string0);
      assertNotNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short)1555;
      shortArray0[0] = short0;
      short short1 = (short)1;
      shortArray0[1] = short1;
      short short2 = (short) (-1494);
      shortArray0[2] = short2;
      short short3 = (short)0;
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap((int) short1, (float) shortArray0[2], short3, (int) short0);
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap0 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap0);
      tUnmodifiableShortIntMap0.valueCollection();
      short short4 = (short)262;
      shortArray0[3] = short4;
      short short5 = (short)1;
      int int0 = 0;
      int int1 = 237;
      tShortIntHashMap0.adjustOrPutValue(shortArray0[1], int0, int1);
      shortArray0[0] = short1;
      shortArray0[1] = short4;
      shortArray0[2] = short4;
      shortArray0[3] = short3;
      shortArray0[4] = short5;
      shortArray0[5] = short3;
      shortArray0[4] = short5;
      short short6 = (short)1;
      shortArray0[5] = short6;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) short4;
      TShortIntHashMap tShortIntHashMap1 = new TShortIntHashMap(shortArray0, intArray0);
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap1 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap1);
      int int2 = 1;
      TShortIntHashMap tShortIntHashMap2 = new TShortIntHashMap(int2);
      short short7 = (short) (-3581);
      intArray0[0] = (int) short4;
      // Undeclared exception!
      try {
        tUnmodifiableShortIntMap1.remove(short7);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1317;
      int int1 = 0;
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap();
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap0 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap0);
      tUnmodifiableShortIntMap0.getNoEntryValue();
      TShortIntHashMap tShortIntHashMap1 = new TShortIntHashMap(int1, int1);
      short short0 = (short)561;
      tShortIntHashMap1.contains(short0);
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap1 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap1);
      tUnmodifiableShortIntMap1.keys();
      tUnmodifiableShortIntMap1.values();
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap2 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap1);
      TShortIntHashMap tShortIntHashMap2 = new TShortIntHashMap(int0, int0);
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap3 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap2);
      tUnmodifiableShortIntMap3.toString();
      tUnmodifiableShortIntMap3.keys(tShortIntHashMap2._set);
      short short1 = (short) (-270);
      // Undeclared exception!
      try {
        tUnmodifiableShortIntMap1.increment(short1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short) (-17287);
      shortArray0[0] = short0;
      short short1 = (short) (-1632);
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short) (-1915);
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)1;
      shortArray0[5] = short5;
      short short6 = (short)1026;
      shortArray0[6] = short6;
      short short7 = (short) (-501);
      shortArray0[7] = short7;
      short short8 = (short)0;
      shortArray0[8] = short8;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) short5;
      intArray0[1] = (int) shortArray0[1];
      intArray0[2] = (int) shortArray0[2];
      intArray0[3] = (int) shortArray0[3];
      intArray0[4] = (int) short0;
      intArray0[5] = (int) short0;
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap0 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap0);
      TShortIntProcedure tShortIntProcedure0 = null;
      // Undeclared exception!
      try {
        tUnmodifiableShortIntMap0.retainEntries(tShortIntProcedure0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(int0, int0);
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap0 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap0);
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap1 = new TUnmodifiableShortIntMap((TShortIntMap) tUnmodifiableShortIntMap0);
      tUnmodifiableShortIntMap1.keySet();
      TShortIntMap tShortIntMap0 = null;
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap2 = null;
      try {
        tUnmodifiableShortIntMap2 = new TUnmodifiableShortIntMap(tShortIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = (short) (-1277);
      shortArray0[0] = short0;
      short short1 = (short)25221;
      shortArray0[1] = short1;
      short short2 = (short)1861;
      shortArray0[2] = short2;
      int[] intArray0 = new int[10];
      intArray0[0] = (int) shortArray0[1];
      intArray0[1] = (int) shortArray0[2];
      intArray0[2] = (int) shortArray0[2];
      intArray0[3] = (int) short2;
      intArray0[4] = (int) short0;
      intArray0[5] = (int) short2;
      intArray0[6] = (int) shortArray0[2];
      int int0 = 693;
      intArray0[7] = int0;
      intArray0[8] = (int) short0;
      intArray0[9] = (int) shortArray0[2];
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap0 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap0);
      int int1 = 0;
      int int2 = (-1173);
      TShortIntHashMap tShortIntHashMap1 = new TShortIntHashMap(int2);
      TUnmodifiableShortIntMap tUnmodifiableShortIntMap1 = new TUnmodifiableShortIntMap((TShortIntMap) tShortIntHashMap1);
      short short3 = (short) (-476);
      int int3 = 790;
      TShortIntHashMap tShortIntHashMap2 = new TShortIntHashMap(int1, (float) int1, short3, int3);
      short short4 = (short) (-1);
      int int4 = 0;
      // Undeclared exception!
      try {
        tUnmodifiableShortIntMap1.adjustValue(short4, int4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
