/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TDoubleCollection;
import gnu.trove.function.TDoubleFunction;
import gnu.trove.impl.hash.TObjectHash;
import gnu.trove.list.array.TDoubleArrayList;
import gnu.trove.map.TObjectDoubleMap;
import gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap;
import gnu.trove.map.hash.TObjectDoubleHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.procedure.TObjectDoubleProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import gnu.trove.set.hash.TDoubleHashSet;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectDoubleHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.increment(Ljava/lang/Object;)Z: root-Branch
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I: root-Branch
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.putAll(Lgnu/trove/map/TObjectDoubleMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.getNoEntryValue()D: root-Branch
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap$1.<init>(Lgnu/trove/map/hash/TObjectDoubleHashMap;)V: root-Branch
   * 6 gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V: I25 Branch 8 IFEQ L124 - false
   * 7 gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V: I13 Branch 9 IFEQ L138 - false
   * 8 gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V: I37 Branch 10 IFEQ L143 - false
   * 9 gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z: I9 Branch 40 IFGE L427 - false
   * 10 gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I18 Branch 47 IFLE L506 - true
   * 11 gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I18 Branch 47 IFLE L506 - false
   * 12 gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(182, (float) 182, (-1.0));
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap1 = new TObjectDoubleHashMap<Object>((TObjectDoubleMap<?>) tObjectDoubleHashMap0);
      boolean boolean0 = tObjectDoubleHashMap1.increment((Object) (-1.0));
      assertEquals(false, boolean0);
      assertEquals(3, tObjectDoubleHashMap1.capacity());
      assertEquals((-1.0), tObjectDoubleHashMap1.getNoEntryValue(), 0.01D);
  }

  //Test case number: 1
  /*
   * 14 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.containsKey(Ljava/lang/Object;)Z: root-Branch
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IF)V: root-Branch
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.iterator()Lgnu/trove/iterator/TObjectDoubleIterator;: root-Branch
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap$TObjectDoubleHashIterator.<init>(Lgnu/trove/map/hash/TObjectDoubleHashMap;Lgnu/trove/map/hash/TObjectDoubleHashMap;)V: root-Branch
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap$TObjectDoubleHashIterator.advance()V: root-Branch
   * 6 gnu.trove.map.hash.TObjectDoubleHashMap$TObjectDoubleHashIterator.value()D: root-Branch
   * 7 gnu.trove.map.hash.TObjectDoubleHashMap$TObjectDoubleHashIterator.key()Ljava/lang/Object;: root-Branch
   * 8 gnu.trove.map.hash.TObjectDoubleHashMap.get(Ljava/lang/Object;)D: I9 Branch 19 IFGE L230 - false
   * 9 gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 58 IFNE L576 - true
   * 10 gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 59 IF_ICMPEQ L580 - true
   * 11 gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 60 IFEQ L585 - false
   * 12 gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z: I55 Branch 61 IFNE L589 - false
   * 13 gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z: I64 Branch 62 IFNE L590 - false
   * 14 gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z: I68 Branch 63 IFNE L590 - false
   */

  @Test
  public void test1()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(182, 182, 182);
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tObjectDoubleHashMap0._set);
      toObjectArrayProceedure0.execute((Object) "{}");
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap1 = new TObjectDoubleHashMap<Object>(182, 182);
      boolean boolean0 = tObjectDoubleHashMap0.equals((Object) tObjectDoubleHashMap1);
      assertEquals("{{}=182.0}", tObjectDoubleHashMap0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 2
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D: root-Branch
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D: I12 Branch 21 IFGE L255 - true
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D: I41 Branch 22 IFEQ L263 - false
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.putAll(Ljava/util/Map;)V: I13 Branch 24 IFEQ L300 - true
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap.putAll(Ljava/util/Map;)V: I13 Branch 24 IFEQ L300 - false
   * 6 gnu.trove.map.hash.TObjectDoubleHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>((-310));
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double((double) (-310));
      hashMap0.put(double0, double0);
      tObjectDoubleHashMap0.putAll((Map<? extends Double, ? extends Double>) hashMap0);
      assertEquals(1, tObjectDoubleHashMap0.size());
      assertEquals("{-310.0=-310.0}", tObjectDoubleHashMap0.toString());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.clear()V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(94, 94);
      tObjectDoubleHashMap0.clear();
      assertEquals(0.0, tObjectDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals("{}", tObjectDoubleHashMap0.toString());
  }

  //Test case number: 4
  /*
   * 17 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection$TObjectDoubleValueHashIterator.next()D: root-Branch
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection$TObjectDoubleValueHashIterator.<init>(Lgnu/trove/map/hash/TObjectDoubleHashMap$TDoubleValueCollection;)V: root-Branch
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.size()I: root-Branch
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.iterator()Lgnu/trove/iterator/TDoubleIterator;: root-Branch
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D: I9 Branch 41 IFGE L443 - true
   * 6 gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D: I51 Branch 42 IFEQ L454 - false
   * 7 gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection$TObjectDoubleValueHashIterator.hasNext()Z: I4 Branch 103 IFLT L973 - true
   * 8 gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection$TObjectDoubleValueHashIterator.hasNext()Z: I4 Branch 103 IFLT L973 - false
   * 9 gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection$TObjectDoubleValueHashIterator.moveToNextIndex()V: I7 Branch 105 IFGE L1008 - true
   * 10 gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection$TObjectDoubleValueHashIterator.nextIndex()I: I7 Branch 106 IF_ICMPEQ L1024 - true
   * 11 gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection$TObjectDoubleValueHashIterator.nextIndex()I: I30 Branch 107 IFLE L1030 - true
   * 12 gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection$TObjectDoubleValueHashIterator.nextIndex()I: I30 Branch 107 IFLE L1030 - false
   * 13 gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection$TObjectDoubleValueHashIterator.nextIndex()I: I35 Branch 108 IF_ACMPEQ L1030 - true
   * 14 gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection$TObjectDoubleValueHashIterator.nextIndex()I: I35 Branch 108 IF_ACMPEQ L1030 - false
   * 15 gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection$TObjectDoubleValueHashIterator.nextIndex()I: I40 Branch 109 IF_ACMPNE L1030 - true
   * 16 gnu.trove.map.hash.TObjectDoubleHashMap.valueCollection()Lgnu/trove/TDoubleCollection;: root-Branch
   * 17 gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.<init>(Lgnu/trove/map/hash/TObjectDoubleHashMap;)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>((-977));
      TDoubleCollection tDoubleCollection0 = tObjectDoubleHashMap0.valueCollection();
      tObjectDoubleHashMap0.adjustOrPutValue((Double) 0.0, 0.0, 0.0);
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(tDoubleCollection0);
      assertEquals("{0.0=0.0}", tObjectDoubleHashMap0.toString());
      assertEquals(1, tObjectDoubleHashMap0.size());
  }

  //Test case number: 5
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap$KeyView.iterator()Ljava/util/Iterator;: root-Branch
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap$MapBackedView.size()I: root-Branch
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.keySet()Ljava/util/Set;: root-Branch
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap$KeyView.<init>(Lgnu/trove/map/hash/TObjectDoubleHashMap;)V: root-Branch
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap.<init>()V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>();
      Set<Double> set0 = tObjectDoubleHashMap0.keySet();
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet((Collection<? extends Double>) set0);
      assertEquals(23, tObjectDoubleHashMap0.capacity());
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V: I25 Branch 8 IFEQ L124 - true
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V: I13 Branch 9 IFEQ L138 - true
   */

  @Test
  public void test6()  throws Throwable  {
      TObjectDoubleCustomHashMap<String> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<String>();
      TObjectDoubleHashMap<String> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<String>((TObjectDoubleMap<? extends String>) tObjectDoubleCustomHashMap0);
      assertEquals(0.0, tObjectDoubleHashMap0.getNoEntryValue(), 0.01D);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V: I37 Branch 10 IFEQ L143 - true
   */

  @Test
  public void test7()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>((-1727));
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap1 = new TObjectDoubleHashMap<Object>((TObjectDoubleMap<?>) tObjectDoubleHashMap0);
      assertEquals(23, tObjectDoubleHashMap1.capacity());
      assertEquals(0.0, tObjectDoubleHashMap1.getNoEntryValue(), 0.01D);
      assertEquals(0, tObjectDoubleHashMap1.size());
  }

  //Test case number: 8
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V: I61 Branch 13 IF_ACMPEQ L186 - true
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - true
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - false
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - true
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - false
   */

  @Test
  public void test8()  throws Throwable  {
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Object>((-977), (-977), (-977));
      Object object0 = TObjectHash.REMOVED;
      double double0 = tObjectDoubleHashMap0.adjustOrPutValue(object0, 0.0, 0.0);
      assertEquals(false, tObjectDoubleHashMap0.isEmpty());
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 9
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z: I25 Branch 16 IF_ACMPEQ L219 - false
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z: I30 Branch 17 IF_ACMPEQ L219 - false
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z: I36 Branch 18 IFNE L219 - true
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z: I18 Branch 15 IFLE L218 - true
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z: I18 Branch 15 IFLE L218 - false
   * 6 gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z: I25 Branch 16 IF_ACMPEQ L219 - true
   */

  @Test
  public void test9()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(182, (float) 182, (-1.0));
      tObjectDoubleHashMap0.put((Integer) 182, 1469.49110953825);
      boolean boolean0 = tObjectDoubleHashMap0.containsValue((-386.4406750151873));
      assertEquals(1, tObjectDoubleHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 10
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z: I30 Branch 17 IF_ACMPEQ L219 - true
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z: I18 Branch 15 IFLE L218 - true
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.removeAt(I)V: root-Branch
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D: I14 Branch 23 IFLT L274 - false
   */

  @Test
  public void test10()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(182, (float) 182, (-1.0));
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tObjectDoubleHashMap0._set);
      toObjectArrayProceedure0.execute((Object) (-1.0));
      tObjectDoubleHashMap0.remove((Object) (-1.0));
      boolean boolean0 = tObjectDoubleHashMap0.containsValue((-386.4406750151873));
      assertEquals(false, tObjectDoubleHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 11
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z: I36 Branch 18 IFNE L219 - false
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z: I18 Branch 15 IFLE L218 - false
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z: I25 Branch 16 IF_ACMPEQ L219 - true
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z: I25 Branch 16 IF_ACMPEQ L219 - false
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z: I30 Branch 17 IF_ACMPEQ L219 - false
   */

  @Test
  public void test11()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(182, 182, 182);
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tObjectDoubleHashMap0._set);
      toObjectArrayProceedure0.execute((Object) "{}");
      boolean boolean0 = tObjectDoubleHashMap0.containsValue((double) 182);
      assertEquals("{{}=182.0}", tObjectDoubleHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D: I9 Branch 20 IFGE L246 - false
   */

  @Test
  public void test12()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>((-1727));
      tObjectDoubleHashMap0.adjustOrPutValue((Integer) (-1727), 0.0, 0.0);
      double double0 = tObjectDoubleHashMap0.putIfAbsent((Integer) (-1727), 0.0);
      assertEquals(false, tObjectDoubleHashMap0.isEmpty());
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 13
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D: I12 Branch 21 IFGE L255 - false
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D: I41 Branch 22 IFEQ L263 - true
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap$1.execute(Ljava/lang/Object;D)Z: root-Branch
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - false
   * 6 gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I30 Branch 49 IF_ACMPEQ L507 - false
   * 7 gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I39 Branch 50 IFNE L507 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(182, (float) 182, (-1.0));
      tObjectDoubleHashMap0.put((Integer) 182, 1469.49110953825);
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tObjectDoubleHashMap0._set);
      tObjectDoubleHashMap0.forEachKey((TObjectProcedure<? super Integer>) toObjectArrayProceedure0);
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap1 = new TObjectDoubleHashMap<Object>((TObjectDoubleMap<?>) tObjectDoubleHashMap0);
      assertEquals(false, tObjectDoubleHashMap0.isEmpty());
      assertEquals(false, tObjectDoubleHashMap1.isEmpty());
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D: I14 Branch 23 IFLT L274 - true
   */

  @Test
  public void test14()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(182, (float) 182, (-1.0));
      double double0 = tObjectDoubleHashMap0.remove((Object) false);
      assertEquals((-1.0), double0, 0.01D);
      assertEquals(true, tObjectDoubleHashMap0.isEmpty());
  }

  //Test case number: 15
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;: I30 Branch 26 IF_ACMPEQ L335 - false
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;: I35 Branch 27 IF_ACMPEQ L335 - false
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;: I23 Branch 25 IFLE L334 - true
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;: I30 Branch 26 IF_ACMPEQ L335 - true
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;: I23 Branch 25 IFLE L334 - false
   */

  @Test
  public void test15()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(182, (float) 182, (-1.0));
      tObjectDoubleHashMap0.put((Integer) 182, 1469.49110953825);
      tObjectDoubleHashMap0.keys();
      assertEquals(false, tObjectDoubleHashMap0.isEmpty());
      assertEquals("{182=1469.49110953825}", tObjectDoubleHashMap0.toString());
  }

  //Test case number: 16
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;: I35 Branch 27 IF_ACMPEQ L335 - true
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;: I23 Branch 25 IFLE L334 - false
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;: I30 Branch 26 IF_ACMPEQ L335 - false
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;: I35 Branch 27 IF_ACMPEQ L335 - false
   */

  @Test
  public void test16()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(182, (float) 182, (-1.0));
      tObjectDoubleHashMap0.put((Integer) 182, 1469.49110953825);
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tObjectDoubleHashMap0._set);
      tObjectDoubleHashMap0.forEachKey((TObjectProcedure<? super Integer>) toObjectArrayProceedure0);
      toObjectArrayProceedure0.execute((Object) (-1.0));
      tObjectDoubleHashMap0.remove((Object) (-1.0));
      // Undeclared exception!
      try {
        tObjectDoubleHashMap0.keys();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
      }
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I10 Branch 28 IF_ICMPGE L347 - true
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L355 - true
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L355 - false
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I44 Branch 30 IF_ACMPEQ L356 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(182, (-7.604772F));
      Double[] doubleArray0 = new Double[5];
      Double[] doubleArray1 = tObjectDoubleHashMap0.keys(doubleArray0);
      assertEquals(0.0, tObjectDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertEquals(3, tObjectDoubleHashMap0.capacity());
  }

  //Test case number: 18
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I10 Branch 28 IF_ICMPGE L347 - false
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I44 Branch 30 IF_ACMPEQ L356 - false
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I49 Branch 31 IF_ACMPEQ L356 - false
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L355 - true
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L355 - false
   * 6 gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I44 Branch 30 IF_ACMPEQ L356 - true
   * 7 gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D: I9 Branch 20 IFGE L246 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>();
      Double double0 = new Double((double) 0);
      tObjectDoubleHashMap0.adjustOrPutValue(double0, (double) 0, 0.0);
      Double[] doubleArray0 = new Double[1];
      Double double1 = new Double((-719.9113319702058));
      tObjectDoubleHashMap0.putIfAbsent(double1, (double) double1);
      tObjectDoubleHashMap0.keys(doubleArray0);
      assertEquals(2, tObjectDoubleHashMap0.size());
      assertEquals("{-719.9113319702058=-719.9113319702058,0.0=0.0}", tObjectDoubleHashMap0.toString());
  }

  //Test case number: 19
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.values()[D: I34 Branch 33 IF_ACMPEQ L378 - false
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.values()[D: I39 Branch 34 IF_ACMPEQ L378 - false
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.values()[D: I27 Branch 32 IFLE L377 - true
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.values()[D: I27 Branch 32 IFLE L377 - false
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap.values()[D: I34 Branch 33 IF_ACMPEQ L378 - true
   */

  @Test
  public void test19()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(94, 94);
      tObjectDoubleHashMap0.adjustOrPutValue((Double) null, (double) 94, (double) 94);
      tObjectDoubleHashMap0.values();
      assertEquals("{null=94.0}", tObjectDoubleHashMap0.toString());
      assertEquals(1, tObjectDoubleHashMap0.size());
  }

  //Test case number: 20
  /*
   * 13 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D: I10 Branch 35 IF_ICMPGE L389 - false
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D: I44 Branch 37 IF_ACMPEQ L397 - false
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D: I49 Branch 38 IF_ACMPEQ L397 - false
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D: I65 Branch 39 IF_ICMPLE L401 - true
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap.values()[D: I27 Branch 32 IFLE L377 - true
   * 6 gnu.trove.map.hash.TObjectDoubleHashMap.values()[D: I27 Branch 32 IFLE L377 - false
   * 7 gnu.trove.map.hash.TObjectDoubleHashMap.values()[D: I34 Branch 33 IF_ACMPEQ L378 - true
   * 8 gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I: I22 Branch 65 IFLE L613 - true
   * 9 gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I: I22 Branch 65 IFLE L613 - false
   * 10 gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - true
   * 11 gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D: I37 Branch 36 IFLE L396 - true
   * 12 gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D: I37 Branch 36 IFLE L396 - false
   * 13 gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D: I44 Branch 37 IF_ACMPEQ L397 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Object>();
      double[] doubleArray0 = tObjectDoubleHashMap0.values();
      tObjectDoubleHashMap0.putIfAbsent((Object) tObjectDoubleHashMap0, (double) 9);
      tObjectDoubleHashMap0.values(doubleArray0);
      assertEquals(1, tObjectDoubleHashMap0.size());
      assertEquals(false, tObjectDoubleHashMap0.isEmpty());
  }

  //Test case number: 21
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D: I49 Branch 38 IF_ACMPEQ L397 - true
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D: I10 Branch 35 IF_ICMPGE L389 - true
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D: I37 Branch 36 IFLE L396 - true
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D: I37 Branch 36 IFLE L396 - false
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D: I44 Branch 37 IF_ACMPEQ L397 - true
   * 6 gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D: I44 Branch 37 IF_ACMPEQ L397 - false
   * 7 gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D: I65 Branch 39 IF_ICMPLE L401 - false
   */

  @Test
  public void test21()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(182, (float) 182, (-1.0));
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tObjectDoubleHashMap0._set);
      toObjectArrayProceedure0.execute((Object) (-1.0));
      tObjectDoubleHashMap0.remove((Object) (-1.0));
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try {
        tObjectDoubleHashMap0.values(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z: I9 Branch 40 IFGE L427 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>((-1727));
      tObjectDoubleHashMap0.adjustOrPutValue((Integer) (-1727), 0.0, 0.0);
      boolean boolean0 = tObjectDoubleHashMap0.adjustValue((Integer) (-1727), 0.0);
      assertEquals("{-1727=0.0}", tObjectDoubleHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 23
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D: I9 Branch 41 IFGE L443 - false
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D: I51 Branch 42 IFEQ L454 - true
   */

  @Test
  public void test23()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>((-1727));
      tObjectDoubleHashMap0.adjustOrPutValue((Integer) (-1727), 0.0, 0.0);
      double double0 = tObjectDoubleHashMap0.adjustOrPutValue((Integer) (-1727), 0.0, (double) (-1727));
      assertEquals("{-1727=0.0}", tObjectDoubleHashMap0.toString());
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 24
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I25 Branch 44 IF_ACMPEQ L485 - false
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I30 Branch 45 IF_ACMPEQ L485 - false
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I18 Branch 43 IFLE L484 - false
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I25 Branch 44 IF_ACMPEQ L485 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(182, 182, 182);
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tObjectDoubleHashMap0._set);
      toObjectArrayProceedure0.execute((Object) null);
      // Undeclared exception!
      try {
        tObjectDoubleHashMap0.forEachValue((TDoubleProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 25
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I30 Branch 45 IF_ACMPEQ L485 - true
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I18 Branch 43 IFLE L484 - true
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I18 Branch 43 IFLE L484 - false
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I25 Branch 44 IF_ACMPEQ L485 - true
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I25 Branch 44 IF_ACMPEQ L485 - false
   */

  @Test
  public void test25()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(182, 182, 182);
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tObjectDoubleHashMap0._set);
      Object object0 = TObjectHash.REMOVED;
      toObjectArrayProceedure0.execute(object0);
      boolean boolean0 = tObjectDoubleHashMap0.forEachValue((TDoubleProcedure) null);
      assertEquals(true, boolean0);
      assertEquals(182.0, tObjectDoubleHashMap0.getNoEntryValue(), 0.01D);
  }

  //Test case number: 26
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I30 Branch 49 IF_ACMPEQ L507 - true
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.putAll(Lgnu/trove/map/TObjectDoubleMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V: I13 Branch 9 IFEQ L138 - false
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V: I37 Branch 10 IFEQ L143 - false
   */

  @Test
  public void test26()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(182, (float) 182, (-1.0));
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tObjectDoubleHashMap0._set);
      toObjectArrayProceedure0.execute((Object) (-1.0));
      tObjectDoubleHashMap0.remove((Object) (-1.0));
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap1 = new TObjectDoubleHashMap<Object>((TObjectDoubleMap<?>) tObjectDoubleHashMap0);
      assertEquals(false, tObjectDoubleHashMap0.isEmpty());
      assertEquals(3, tObjectDoubleHashMap1.capacity());
  }

  //Test case number: 27
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I27 Branch 51 IFLE L533 - true
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I27 Branch 51 IFLE L533 - false
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I34 Branch 52 IF_ACMPEQ L534 - true
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V: I25 Branch 8 IFEQ L124 - true
   */

  @Test
  public void test27()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>((-1727), (float) (-1727), 0.0);
      boolean boolean0 = tObjectDoubleHashMap0.retainEntries((TObjectDoubleProcedure<? super Double>) null);
      assertEquals(0.0, tObjectDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals(false, boolean0);
      assertEquals(3, tObjectDoubleHashMap0.capacity());
      assertEquals("{}", tObjectDoubleHashMap0.toString());
  }

  //Test case number: 28
  /*
   * 11 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I34 Branch 52 IF_ACMPEQ L534 - false
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I39 Branch 53 IF_ACMPEQ L534 - false
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.<init>(I)V: root-Branch
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I27 Branch 51 IFLE L533 - false
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I34 Branch 52 IF_ACMPEQ L534 - true
   * 6 gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - true
   * 7 gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - false
   * 8 gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - true
   * 9 gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - false
   * 10 gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V: I61 Branch 13 IF_ACMPEQ L186 - false
   * 11 gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V: I77 Branch 14 IFGE L189 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>((-1727));
      tObjectDoubleHashMap0.adjustOrPutValue((Integer) (-1727), 0.0, 0.0);
      // Undeclared exception!
      try {
        tObjectDoubleHashMap0.retainEntries((TObjectDoubleProcedure<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 29
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: I18 Branch 55 IFLE L558 - false
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: I24 Branch 56 IFNULL L559 - false
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: I29 Branch 57 IF_ACMPEQ L559 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(0, (float) (-1596), (-2021.650110092749));
      // Undeclared exception!
      try {
        tObjectDoubleHashMap0.transformValues((TDoubleFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 58 IFNE L576 - false
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.<init>()V: root-Branch
   */

  @Test
  public void test30()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>();
      boolean boolean0 = tObjectDoubleHashMap0.equals((Object) "{}");
      assertEquals(23, tObjectDoubleHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 31
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 59 IF_ICMPEQ L580 - false
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D: I9 Branch 20 IFGE L246 - true
   */

  @Test
  public void test31()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(182, (float) 182, (-1.0));
      tObjectDoubleHashMap0.putIfAbsent((Integer) 182, Double.POSITIVE_INFINITY);
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap1 = new TObjectDoubleHashMap<Object>(182, 182);
      boolean boolean0 = tObjectDoubleHashMap0.equals((Object) tObjectDoubleHashMap1);
      assertEquals(false, tObjectDoubleHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 32
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z: I55 Branch 61 IFNE L589 - true
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z: I81 Branch 64 IFEQ L596 - true
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 60 IFEQ L585 - true
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.get(Ljava/lang/Object;)D: I9 Branch 19 IFGE L230 - true
   */

  @Test
  public void test32()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(182, (float) 182, (-1.0));
      tObjectDoubleHashMap0.put((Integer) 182, 1469.49110953825);
      boolean boolean0 = tObjectDoubleHashMap0.equals((Object) tObjectDoubleHashMap0);
      assertEquals("{182=1469.49110953825}", tObjectDoubleHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 33
  /*
   * 14 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z: I64 Branch 62 IFNE L590 - true
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.getNoEntryValue()D: root-Branch
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.iterator()Lgnu/trove/iterator/TObjectDoubleIterator;: root-Branch
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 58 IFNE L576 - true
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 59 IF_ICMPEQ L580 - true
   * 6 gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 60 IFEQ L585 - false
   * 7 gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z: I55 Branch 61 IFNE L589 - true
   * 8 gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z: I55 Branch 61 IFNE L589 - false
   * 9 gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z: I81 Branch 64 IFEQ L596 - true
   * 10 gnu.trove.map.hash.TObjectDoubleHashMap.get(Ljava/lang/Object;)D: I9 Branch 19 IFGE L230 - true
   * 11 gnu.trove.map.hash.TObjectDoubleHashMap$TObjectDoubleHashIterator.<init>(Lgnu/trove/map/hash/TObjectDoubleHashMap;Lgnu/trove/map/hash/TObjectDoubleHashMap;)V: root-Branch
   * 12 gnu.trove.map.hash.TObjectDoubleHashMap$TObjectDoubleHashIterator.advance()V: root-Branch
   * 13 gnu.trove.map.hash.TObjectDoubleHashMap$TObjectDoubleHashIterator.value()D: root-Branch
   * 14 gnu.trove.map.hash.TObjectDoubleHashMap$TObjectDoubleHashIterator.key()Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test33()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(182, (float) 182, (-1.0));
      tObjectDoubleHashMap0.put((Integer) 182, 1469.49110953825);
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tObjectDoubleHashMap0._set);
      tObjectDoubleHashMap0.forEachKey((TObjectProcedure<? super Integer>) toObjectArrayProceedure0);
      boolean boolean0 = tObjectDoubleHashMap0.equals((Object) tObjectDoubleHashMap0);
      assertEquals(false, tObjectDoubleHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 34
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - false
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I: I34 Branch 67 IF_ACMPEQ L614 - false
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I: I45 Branch 68 IFNONNULL L615 - false
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IF)V: root-Branch
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D: I9 Branch 41 IFGE L443 - true
   * 6 gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D: I51 Branch 42 IFEQ L454 - false
   */

  @Test
  public void test34()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(94, 94);
      tObjectDoubleHashMap0.adjustOrPutValue((Double) null, (double) 94, (double) 94);
      int int0 = tObjectDoubleHashMap0.hashCode();
      assertEquals("{null=94.0}", tObjectDoubleHashMap0.toString());
      assertEquals(1079476224, int0);
  }

  //Test case number: 35
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I: I34 Branch 67 IF_ACMPEQ L614 - true
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.removeAt(I)V: root-Branch
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D: I14 Branch 23 IFLT L274 - false
   */

  @Test
  public void test35()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(182, (float) 182, (-1.0));
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tObjectDoubleHashMap0._set);
      toObjectArrayProceedure0.execute((Object) (-1.0));
      tObjectDoubleHashMap0.remove((Object) (-1.0));
      int int0 = tObjectDoubleHashMap0.hashCode();
      assertEquals(-1, tObjectDoubleHashMap0.size());
      assertEquals(0, int0);
  }

  //Test case number: 36
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I: I45 Branch 68 IFNONNULL L615 - true
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D: root-Branch
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D: I12 Branch 21 IFGE L255 - true
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D: I41 Branch 22 IFEQ L263 - false
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I: I22 Branch 65 IFLE L613 - true
   * 6 gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I: I22 Branch 65 IFLE L613 - false
   * 7 gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - true
   * 8 gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - false
   * 9 gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I: I34 Branch 67 IF_ACMPEQ L614 - false
   */

  @Test
  public void test36()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(182, (float) 182, (-1.0));
      tObjectDoubleHashMap0.put((Integer) 182, 1469.49110953825);
      int int0 = tObjectDoubleHashMap0.hashCode();
      assertEquals(1, tObjectDoubleHashMap0.size());
      assertEquals((-1510096026), int0);
  }

  //Test case number: 37
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I39 Branch 70 IF_ACMPEQ L1094 - true
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 69 IFLE L1093 - true
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 69 IFLE L1093 - false
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I39 Branch 70 IF_ACMPEQ L1094 - false
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I45 Branch 71 IF_ACMPEQ L1094 - true
   */

  @Test
  public void test37()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(182, 182, 182);
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tObjectDoubleHashMap0._set);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      Object object0 = TObjectHash.REMOVED;
      toObjectArrayProceedure0.execute(object0);
      tObjectDoubleHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
  }

  //Test case number: 38
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I45 Branch 71 IF_ACMPEQ L1094 - false
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 69 IFLE L1093 - true
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 69 IFLE L1093 - false
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I39 Branch 70 IF_ACMPEQ L1094 - false
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I45 Branch 71 IF_ACMPEQ L1094 - true
   */

  @Test
  public void test38()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(182, 182, 182);
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tObjectDoubleHashMap0._set);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      toObjectArrayProceedure0.execute((Object) null);
      tObjectDoubleHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(30, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\u0017\u0000\u0000\u0000C6\u0000\u0000C6\u0000\u0000@f\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000p", byteArrayOutputStream0.toString());
  }

  //Test case number: 39
  /*
   * 14 covered goals:
   * 1 gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z: I4 Branch 102 IFEQ L1134 - true
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z: I4 Branch 102 IFEQ L1134 - false
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I: root-Branch
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap.toString()Ljava/lang/String;: root-Branch
   * 6 gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I18 Branch 47 IFLE L506 - true
   * 7 gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I18 Branch 47 IFLE L506 - false
   * 8 gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - true
   * 9 gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - false
   * 10 gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I30 Branch 49 IF_ACMPEQ L507 - false
   * 11 gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I39 Branch 50 IFNE L507 - true
   * 12 gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V: I25 Branch 8 IFEQ L124 - false
   * 13 gnu.trove.map.hash.TObjectDoubleHashMap$2.<init>(Lgnu/trove/map/hash/TObjectDoubleHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 14 gnu.trove.map.hash.TObjectDoubleHashMap$1.<init>(Lgnu/trove/map/hash/TObjectDoubleHashMap;)V: root-Branch
   */

  @Test
  public void test39()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(182, 182, 182);
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tObjectDoubleHashMap0._set);
      toObjectArrayProceedure0.execute((Object) "{}");
      tObjectDoubleHashMap0.forEachKey((TObjectProcedure<? super Integer>) toObjectArrayProceedure0);
      String string0 = tObjectDoubleHashMap0.toString();
      assertNotNull(string0);
      assertEquals("{{}=182.0,{}=182.0}", tObjectDoubleHashMap0.toString());
      assertEquals("{{}=182.0,{}=182.0}", string0);
  }
}
