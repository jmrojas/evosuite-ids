/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TShortFunction;
import gnu.trove.impl.unmodifiable.TUnmodifiableCharShortMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection;
import gnu.trove.map.TCharShortMap;
import gnu.trove.map.hash.TCharShortHashMap;
import gnu.trove.procedure.TCharShortProcedure;
import java.io.FileNotFoundException;
import java.io.RandomAccessFile;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableCharShortMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap();
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap((TCharShortMap) tCharShortHashMap0);
      char char0 = 'k';
      tCharShortHashMap0.contains(char0);
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap0 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap1);
      tUnmodifiableCharShortMap0.getNoEntryValue();
      tCharShortHashMap1.toString();
      tUnmodifiableCharShortMap0.keys();
      char char1 = 'c';
      short short0 = (short)924;
      // Undeclared exception!
      try {
        tUnmodifiableCharShortMap0.adjustValue(char1, short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = 'm';
      charArray0[0] = char0;
      char char1 = 'M';
      charArray0[1] = char1;
      char char2 = 'A';
      charArray0[2] = char2;
      char char3 = '(';
      charArray0[3] = char3;
      short[] shortArray0 = new short[6];
      short short0 = (short)1302;
      shortArray0[0] = short0;
      short short1 = (short) (-896);
      shortArray0[1] = short1;
      short short2 = (short) (-512);
      shortArray0[2] = short2;
      short short3 = (short)1512;
      shortArray0[3] = short3;
      short short4 = (short)72;
      shortArray0[4] = short4;
      short short5 = (short)1330;
      shortArray0[5] = short5;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(charArray0, shortArray0);
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap0 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap0);
      short short6 = (short) (-1);
      boolean boolean0 = tUnmodifiableCharShortMap0.containsValue(short6);
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = '\\';
      charArray0[0] = char0;
      char char1 = 'N';
      charArray0[1] = char1;
      char char2 = 'u';
      charArray0[2] = char2;
      char char3 = 'v';
      charArray0[3] = char3;
      char char4 = 'g';
      charArray0[4] = char4;
      short[] shortArray0 = new short[4];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short) (-578);
      shortArray0[1] = short1;
      short short2 = (short) (-1038);
      shortArray0[2] = short2;
      short short3 = (short) (-438);
      shortArray0[3] = short3;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(charArray0, shortArray0);
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap0 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap0);
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap((TCharShortMap) tUnmodifiableCharShortMap0);
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap1 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap1);
      assertEquals("{v=-438, u=-1038, \\=0, N=-578}", tUnmodifiableCharShortMap1.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      TCharShortMap tCharShortMap0 = null;
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap0 = null;
      try {
        tUnmodifiableCharShortMap0 = new TUnmodifiableCharShortMap(tCharShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-721);
      float float0 = 0.0F;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(int0, float0);
      tCharShortHashMap0.iterator();
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap0 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap0);
      float float1 = 830.9098F;
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap(int0, float1);
      tCharShortHashMap1.toString();
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap1 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap1);
      // Undeclared exception!
      try {
        tUnmodifiableCharShortMap1.putAll((TCharShortMap) tCharShortHashMap1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      char[] charArray0 = new char[10];
      char char0 = '^';
      charArray0[0] = char0;
      char char1 = '6';
      charArray0[1] = char1;
      char char2 = 'q';
      charArray0[2] = char2;
      char char3 = 'C';
      charArray0[3] = char3;
      char char4 = 'C';
      charArray0[4] = char4;
      char char5 = '1';
      charArray0[5] = char5;
      char char6 = ':';
      charArray0[6] = char6;
      char char7 = ':';
      charArray0[7] = char7;
      char char8 = 'Z';
      charArray0[8] = char8;
      char char9 = '=';
      charArray0[9] = char9;
      short[] shortArray0 = new short[5];
      short short0 = (short)507;
      shortArray0[0] = short0;
      short short1 = (short) (-479);
      shortArray0[1] = short1;
      short short2 = (short)163;
      shortArray0[2] = short2;
      short short3 = (short) (-296);
      shortArray0[3] = short3;
      short short4 = (short)954;
      shortArray0[4] = short4;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(charArray0, shortArray0);
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap0 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap0);
      String string0 = tUnmodifiableCharShortMap0.toString();
      assertNotNull(string0);
      
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap();
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap1 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap1);
      TCharShortProcedure tCharShortProcedure0 = null;
      boolean boolean0 = tUnmodifiableCharShortMap1.forEachEntry(tCharShortProcedure0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap();
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap0 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap0);
      String string0 = "adGy<& (S(wm}#";
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"adGy<& (S(wm}#\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      char char0 = '4';
      short short0 = (short) (-126);
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap((int) short0, (float) int0);
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap0 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap0);
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap1 = new TUnmodifiableCharShortMap((TCharShortMap) tUnmodifiableCharShortMap0);
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap(int0, float0, char0, short0);
      tCharShortHashMap1.valueCollection();
      short[] shortArray0 = new short[5];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      // Undeclared exception!
      try {
        tUnmodifiableCharShortMap0.putAll((TCharShortMap) tCharShortHashMap1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-836);
      char char0 = 'g';
      short short0 = (short)1311;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(int0, (float) int0, char0, short0);
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap0 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap0);
      tUnmodifiableCharShortMap0.valueCollection();
      TCharShortMap tCharShortMap0 = null;
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap1 = null;
      try {
        tUnmodifiableCharShortMap1 = new TUnmodifiableCharShortMap(tCharShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = 'y';
      charArray0[0] = char0;
      char char1 = 'H';
      charArray0[1] = char1;
      char char2 = 'F';
      charArray0[0] = char0;
      charArray0[1] = char2;
      charArray0[2] = char2;
      charArray0[2] = char2;
      short[] shortArray0 = new short[7];
      short short0 = (short)727;
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(charArray0, shortArray0);
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap0 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap0);
      char[] charArray1 = tUnmodifiableCharShortMap0.keys(tCharShortHashMap0._set);
      assertNotNull(charArray1);
      
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      short short1 = (short) (-28851);
      shortArray0[0] = short1;
      short short2 = (short)546;
      shortArray0[1] = short2;
      short short3 = (short)777;
      shortArray0[2] = short3;
      short short4 = (short)37;
      shortArray0[3] = short4;
      short short5 = (short)977;
      shortArray0[4] = short5;
      short short6 = (short) (-793);
      shortArray0[5] = short6;
      short short7 = (short)1078;
      shortArray0[6] = short7;
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap(charArray0, shortArray0);
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap1 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap1);
      int int0 = tUnmodifiableCharShortMap1.hashCode();
      assertEquals((-28029), int0);
  }

  @Test
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[10];
      char char0 = 'E';
      charArray0[0] = char0;
      char char1 = 'b';
      charArray0[1] = char1;
      char char2 = 'U';
      charArray0[2] = char2;
      char char3 = 'j';
      charArray0[3] = char3;
      char char4 = 'E';
      charArray0[4] = char4;
      char char5 = '';
      charArray0[5] = char5;
      char char6 = 'q';
      charArray0[6] = char6;
      char char7 = '`';
      charArray0[7] = char7;
      char char8 = '^';
      charArray0[8] = char8;
      char char9 = 'O';
      charArray0[9] = char9;
      short[] shortArray0 = new short[10];
      short short0 = (short)1;
      shortArray0[0] = short0;
      short short1 = (short) (-1655);
      shortArray0[1] = short1;
      short short2 = (short) (-82);
      shortArray0[2] = short2;
      short short3 = (short)534;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short) (-1106);
      shortArray0[5] = short5;
      short short6 = (short)675;
      shortArray0[6] = short6;
      short short7 = (short)127;
      shortArray0[7] = short7;
      short short8 = (short) (-965);
      shortArray0[8] = short8;
      short short9 = (short) (-1627);
      shortArray0[9] = short9;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(charArray0, shortArray0);
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap0 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap0);
      tUnmodifiableCharShortMap0.values(shortArray0);
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap();
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap1 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap1);
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap2 = new TUnmodifiableCharShortMap((TCharShortMap) tUnmodifiableCharShortMap1);
      TUnmodifiableShortCollection tUnmodifiableShortCollection0 = (TUnmodifiableShortCollection)tUnmodifiableCharShortMap2.valueCollection();
      assertEquals(0, tUnmodifiableShortCollection0.size());
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(int0);
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap((TCharShortMap) tCharShortHashMap0);
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap0 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap1);
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap1 = new TUnmodifiableCharShortMap((TCharShortMap) tUnmodifiableCharShortMap0);
      TShortFunction tShortFunction0 = null;
      // Undeclared exception!
      try {
        tUnmodifiableCharShortMap1.transformValues(tShortFunction0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-1796);
      int int1 = (-1086);
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(int1);
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap0 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap0);
      tUnmodifiableCharShortMap0.iterator();
      float float0 = 0.0F;
      char char0 = 'C';
      short short0 = (short) (-572);
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap(int0, (float) int0, char0, short0);
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap1 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap1);
      tUnmodifiableCharShortMap1.isEmpty();
      TCharShortHashMap tCharShortHashMap2 = new TCharShortHashMap(int0, float0);
      char char1 = ':';
      short short1 = (short)631;
      short short2 = (short)0;
      tCharShortHashMap2.adjustOrPutValue(char1, short1, short2);
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap2 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap2);
      // Undeclared exception!
      try {
        tUnmodifiableCharShortMap2.increment(char1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      float float0 = 1.0F;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap();
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap0 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap0);
      short[] shortArray0 = new short[6];
      short short0 = (short)1585;
      shortArray0[0] = short0;
      short short1 = (short)368;
      shortArray0[1] = short1;
      short short2 = (short) (-131);
      shortArray0[2] = short2;
      short short3 = (short)525;
      shortArray0[3] = short3;
      short short4 = (short)1;
      shortArray0[4] = short4;
      short short5 = (short)234;
      shortArray0[5] = short5;
      tUnmodifiableCharShortMap0.values(shortArray0);
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap(int0, float0);
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap1 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap1);
      char char0 = 'C';
      short short6 = (short)106;
      // Undeclared exception!
      try {
        tUnmodifiableCharShortMap1.put(char0, short6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TCharShortMap tCharShortMap0 = null;
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap0 = null;
      try {
        tUnmodifiableCharShortMap0 = new TUnmodifiableCharShortMap(tCharShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[8];
      char char0 = 'L';
      charArray0[0] = char0;
      char char1 = ')';
      charArray0[1] = char1;
      char char2 = '.';
      charArray0[2] = char2;
      char char3 = 'E';
      charArray0[3] = char3;
      char char4 = '\"';
      charArray0[4] = char4;
      char char5 = 'J';
      charArray0[5] = char5;
      char char6 = 'D';
      charArray0[6] = char6;
      char char7 = 'Y';
      charArray0[7] = char7;
      short[] shortArray0 = new short[8];
      short short0 = (short)718;
      shortArray0[0] = short0;
      short short1 = (short)18;
      shortArray0[1] = short1;
      short short2 = (short)1256;
      shortArray0[2] = short2;
      short short3 = (short)399;
      shortArray0[3] = short3;
      short short4 = (short) (-5503);
      shortArray0[4] = short4;
      short short5 = (short)1;
      shortArray0[5] = short5;
      short short6 = (short)860;
      shortArray0[6] = short6;
      short short7 = (short) (-529);
      shortArray0[7] = short7;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(charArray0, shortArray0);
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap((TCharShortMap) tCharShortHashMap0);
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap0 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap1);
      // Undeclared exception!
      try {
        tUnmodifiableCharShortMap0.putAll((TCharShortMap) tCharShortHashMap1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 1;
      float float0 = 0.0F;
      char char0 = '<';
      int int1 = 0;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(int1, int1);
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap0 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap0);
      tUnmodifiableCharShortMap0.getNoEntryValue();
      short short0 = (short)0;
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap(int0, float0, char0, short0);
      TUnmodifiableCharShortMap tUnmodifiableCharShortMap1 = new TUnmodifiableCharShortMap((TCharShortMap) tCharShortHashMap1);
      assertTrue(tUnmodifiableCharShortMap1.equals(tUnmodifiableCharShortMap0));
  }
}
