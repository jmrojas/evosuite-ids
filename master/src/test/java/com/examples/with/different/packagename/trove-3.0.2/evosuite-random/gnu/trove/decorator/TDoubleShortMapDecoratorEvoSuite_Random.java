/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TDoubleShortMapDecorator;
import gnu.trove.map.TDoubleShortMap;
import gnu.trove.map.hash.TDoubleShortHashMap;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.Set;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleShortMapDecoratorEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TDoubleShortMapDecorator tDoubleShortMapDecorator0 = new TDoubleShortMapDecorator();
      tDoubleShortMapDecorator0.values();
      int int0 = 0;
      TDoubleShortMapDecorator tDoubleShortMapDecorator1 = new TDoubleShortMapDecorator();
      // Undeclared exception!
      try {
        tDoubleShortMapDecorator1.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TDoubleShortMapDecorator tDoubleShortMapDecorator0 = new TDoubleShortMapDecorator();
      // Undeclared exception!
      try {
        tDoubleShortMapDecorator0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 1129.471888643247;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 1490.000148423364;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = (-1881.6924492581118);
      doubleArray0[5] = double5;
      double double6 = 35.93127123839197;
      doubleArray0[6] = double6;
      double double7 = 2032.0091523094027;
      doubleArray0[7] = double7;
      double double8 = Double.POSITIVE_INFINITY;
      doubleArray0[8] = double8;
      double double9 = 476.7182653404642;
      doubleArray0[9] = double9;
      short[] shortArray0 = new short[3];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)418;
      shortArray0[1] = short1;
      short short2 = (short)1;
      shortArray0[2] = short2;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      TDoubleShortMapDecorator tDoubleShortMapDecorator0 = new TDoubleShortMapDecorator((TDoubleShortMap) tDoubleShortHashMap0);
      // Undeclared exception!
      try {
        tDoubleShortMapDecorator0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TDoubleShortMapDecorator tDoubleShortMapDecorator0 = new TDoubleShortMapDecorator();
      // Undeclared exception!
      try {
        tDoubleShortMapDecorator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TDoubleShortMapDecorator tDoubleShortMapDecorator0 = new TDoubleShortMapDecorator();
      double double0 = (-1291.9366796882384);
      Double double1 = new Double(double0);
      TDoubleShortMap tDoubleShortMap0 = tDoubleShortMapDecorator0.getMap();
      TDoubleShortHashMap tDoubleShortHashMap0 = null;
      try {
        tDoubleShortHashMap0 = new TDoubleShortHashMap(tDoubleShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TDoubleShortMapDecorator tDoubleShortMapDecorator0 = new TDoubleShortMapDecorator();
      double double0 = (-644.0781607062411);
      Double double1 = new Double(double0);
      tDoubleShortMapDecorator0.getMap();
      short short0 = (short)0;
      Short short1 = new Short(short0);
      // Undeclared exception!
      try {
        tDoubleShortMapDecorator0.put(double1, short1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TDoubleShortMapDecorator tDoubleShortMapDecorator0 = new TDoubleShortMapDecorator();
      tDoubleShortMapDecorator0.keySet();
      TDoubleShortMapDecorator tDoubleShortMapDecorator1 = new TDoubleShortMapDecorator();
      int int0 = 0;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0, int0);
      Double double0 = new Double((double) int0);
      Object object0 = null;
      tDoubleShortHashMap0.keys();
      // Undeclared exception!
      try {
        tDoubleShortMapDecorator0.get(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TDoubleShortMapDecorator tDoubleShortMapDecorator0 = new TDoubleShortMapDecorator();
      double double0 = 0.0;
      Double double1 = new Double(double0);
      double double2 = (-1.0);
      Double.valueOf(double2);
      short short0 = (short)671;
      Short short1 = new Short(short0);
      // Undeclared exception!
      try {
        tDoubleShortMapDecorator0.put(double1, short1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TDoubleShortMapDecorator tDoubleShortMapDecorator0 = new TDoubleShortMapDecorator();
      tDoubleShortMapDecorator0.entrySet();
      TDoubleShortMapDecorator tDoubleShortMapDecorator1 = new TDoubleShortMapDecorator();
      String string0 = ")";
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // ) (No such file or directory)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 1;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int0;
      double double0 = 0.0;
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      tDoubleShortHashMap0._set = doubleArray0;
      TDoubleShortMapDecorator tDoubleShortMapDecorator0 = new TDoubleShortMapDecorator((TDoubleShortMap) tDoubleShortHashMap0);
      TDoubleShortMapDecorator tDoubleShortMapDecorator1 = new TDoubleShortMapDecorator();
      Locale locale0 = Locale.CANADA;
      double double1 = 288.333841500553;
      Double double2 = new Double(double1);
      short short0 = (short)804;
      Short short1 = new Short(short0);
      // Undeclared exception!
      try {
        tDoubleShortMapDecorator1.put(double2, short1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TDoubleShortMapDecorator tDoubleShortMapDecorator0 = new TDoubleShortMapDecorator();
      TDoubleShortMapDecorator tDoubleShortMapDecorator1 = new TDoubleShortMapDecorator();
      double double0 = 0.0;
      Double double1 = new Double(double0);
      short short0 = (short)0;
      Short short1 = new Short(short0);
      // Undeclared exception!
      try {
        tDoubleShortMapDecorator1.put(double1, short1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      TDoubleShortMapDecorator tDoubleShortMapDecorator0 = new TDoubleShortMapDecorator((TDoubleShortMap) tDoubleShortHashMap0);
      tDoubleShortMapDecorator0.clear();
      String string0 = "^SFU/ki.BPa`\"";
      Locale locale0 = Locale.CANADA;
      String string1 = locale0.getISO3Country();
      tDoubleShortMapDecorator0.containsValue((Object) string1);
      String string2 = "1Awx5a:d_p;\"4,&np<";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string2, string0, string2);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ^SFU/ki.BPa`\"://%5ESFU%2Fki.BPa%60%221Awx5a:d%7F_p;%224,&np%3C?%5ESFU/ki.BPa%60%22#1Awx5a:d%7F_p;%224,&np%3C
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      TDoubleShortMapDecorator tDoubleShortMapDecorator0 = new TDoubleShortMapDecorator((TDoubleShortMap) tDoubleShortHashMap0);
      Set<Double> set0 = tDoubleShortMapDecorator0.keySet();
      assertEquals(0, set0.size());
  }

  @Test
  public void test13()  throws Throwable  {
      TDoubleShortMapDecorator tDoubleShortMapDecorator0 = new TDoubleShortMapDecorator();
      tDoubleShortMapDecorator0.getMap();
      Integer integer0 = null;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      short short0 = (short)0;
      Short short1 = new Short(short0);
      AbstractMap.SimpleEntry<Short, Short> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Short, Short>(short1, (Short) short0);
      String string0 = "";
      try {
        Short.valueOf(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      TDoubleShortMapDecorator tDoubleShortMapDecorator0 = new TDoubleShortMapDecorator((TDoubleShortMap) tDoubleShortHashMap0);
      TDoubleShortHashMap tDoubleShortHashMap1 = (TDoubleShortHashMap)tDoubleShortMapDecorator0.getMap();
      TDoubleShortMapDecorator tDoubleShortMapDecorator1 = new TDoubleShortMapDecorator((TDoubleShortMap) tDoubleShortHashMap1);
      String string0 = "";
      int int0 = (-707);
      String string1 = "C=i+.~$.$;yk_I!\\";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int0, string0, string1, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://@:-707?C=i+.~$.$;yk_I!%5C#
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-1647);
      float float0 = 6.6360896E8F;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0, float0);
      TDoubleShortMapDecorator tDoubleShortMapDecorator0 = new TDoubleShortMapDecorator((TDoubleShortMap) tDoubleShortHashMap0);
      short short0 = (short)0;
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap(int0, (float) int0, (double) int0, short0);
      TDoubleShortMapDecorator tDoubleShortMapDecorator1 = new TDoubleShortMapDecorator((TDoubleShortMap) tDoubleShortHashMap1);
      tDoubleShortMapDecorator1.hashCode();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 0;
      double double0 = 0.0;
      short short0 = (short) (-780);
      int int1 = 536;
      float float0 = 0.0F;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int1, float0);
      TDoubleShortMapDecorator tDoubleShortMapDecorator0 = new TDoubleShortMapDecorator((TDoubleShortMap) tDoubleShortHashMap0);
      tDoubleShortMapDecorator0.clear();
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap(int0, (float) int0, double0, short0);
      TDoubleShortMapDecorator tDoubleShortMapDecorator1 = new TDoubleShortMapDecorator((TDoubleShortMap) tDoubleShortHashMap1);
      tDoubleShortMapDecorator1.put((Double) double0, (Short) short0);
      assertEquals("{0.0=-780}", tDoubleShortHashMap1.toString());
      assertFalse(tDoubleShortMapDecorator1.equals(tDoubleShortMapDecorator0));
  }
}
