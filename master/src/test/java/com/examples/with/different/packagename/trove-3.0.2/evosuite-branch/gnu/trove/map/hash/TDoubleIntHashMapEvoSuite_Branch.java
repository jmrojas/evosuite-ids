/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TIntCollection;
import gnu.trove.function.TIntFunction;
import gnu.trove.map.TDoubleIntMap;
import gnu.trove.map.hash.TDoubleIntHashMap;
import gnu.trove.procedure.TDoubleIntProcedure;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.procedure.TIntProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleIntHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.setUp(I)I: root-Branch
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.<init>()V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap();
      boolean boolean0 = tDoubleIntHashMap0.forEachKey((TDoubleProcedure) null);
      assertEquals(true, boolean0);
      assertEquals(23, tDoubleIntHashMap0.capacity());
  }

  //Test case number: 1
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.clear()V: root-Branch
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.put(DI)I: root-Branch
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.<init>([D[I)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 4 gnu.trove.map.hash.TDoubleIntHashMap.<init>([D[I)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 5 gnu.trove.map.hash.TDoubleIntHashMap.doPut(DII)I: I12 Branch 40 IFGE L214 - true
   * 6 gnu.trove.map.hash.TDoubleIntHashMap.doPut(DII)I: I12 Branch 40 IFGE L214 - false
   * 7 gnu.trove.map.hash.TDoubleIntHashMap.doPut(DII)I: I41 Branch 41 IFEQ L221 - true
   * 8 gnu.trove.map.hash.TDoubleIntHashMap.doPut(DII)I: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[8];
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(doubleArray0, intArray0);
      assertEquals(false, tDoubleIntHashMap0.isEmpty());
      
      tDoubleIntHashMap0.clear();
      assertEquals("{}", tDoubleIntHashMap0.toString());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.containsKey(D)Z: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap();
      tDoubleIntHashMap0.containsKey(19.34314426702412);
      assertEquals(23, tDoubleIntHashMap0.capacity());
  }

  //Test case number: 3
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.remove(D)I: I14 Branch 46 IFLT L276 - false
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.adjustOrPutValue(DII)I: I9 Branch 72 IFGE L491 - true
   * 4 gnu.trove.map.hash.TDoubleIntHashMap.adjustOrPutValue(DII)I: I58 Branch 73 IFEQ L502 - false
   */

  @Test
  public void test3()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap();
      tDoubleIntHashMap0.adjustOrPutValue(1731.7952528095593, 954, 954);
      assertEquals("{1731.7952528095593=954}", tDoubleIntHashMap0.toString());
      
      int int0 = tDoubleIntHashMap0.remove(1731.7952528095593);
      assertEquals(954, int0);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.keySet()Lgnu/trove/set/TDoubleSet;: root-Branch
   * 2 gnu.trove.map.hash.TDoubleIntHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TDoubleIntHashMap;)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap();
      tDoubleIntHashMap0.keySet();
      assertEquals(23, tDoubleIntHashMap0.capacity());
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.increment(D)Z: root-Branch
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.adjustValue(DI)Z: I9 Branch 71 IFGE L477 - false
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.<init>(IFDI)V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap((-493), 514.3238F, (double) (-493), (-493));
      boolean boolean0 = tDoubleIntHashMap0.increment((double) 514.3238F);
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.valueCollection()Lgnu/trove/TIntCollection;: root-Branch
   * 2 gnu.trove.map.hash.TDoubleIntHashMap$TValueView.<init>(Lgnu/trove/map/hash/TDoubleIntHashMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(0, (-492));
      TIntCollection tIntCollection0 = tDoubleIntHashMap0.valueCollection();
      assertEquals(true, tIntCollection0.isEmpty());
  }

  //Test case number: 7
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.iterator()Lgnu/trove/iterator/TDoubleIntIterator;: root-Branch
   * 2 gnu.trove.map.hash.TDoubleIntHashMap$TDoubleIntHashIterator.<init>(Lgnu/trove/map/hash/TDoubleIntHashMap;Lgnu/trove/map/hash/TDoubleIntHashMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.<init>(Lgnu/trove/map/TDoubleIntMap;)V: I10 Branch 34 IFEQ L133 - false
   * 4 gnu.trove.map.hash.TDoubleIntHashMap.<init>(Lgnu/trove/map/TDoubleIntMap;)V: I40 Branch 35 IFEQ L139 - true
   * 5 gnu.trove.map.hash.TDoubleIntHashMap.<init>(Lgnu/trove/map/TDoubleIntMap;)V: I52 Branch 36 IFEQ L143 - true
   * 6 gnu.trove.map.hash.TDoubleIntHashMap.putAll(Lgnu/trove/map/TDoubleIntMap;)V: I15 Branch 43 IFEQ L243 - true
   * 7 gnu.trove.map.hash.TDoubleIntHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap((-1168));
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap((TDoubleIntMap) tDoubleIntHashMap0);
      assertEquals(0, tDoubleIntHashMap1.getNoEntryValue());
      assertEquals(0.0, tDoubleIntHashMap1.getNoEntryKey(), 0.01D);
      assertEquals(23, tDoubleIntHashMap1.capacity());
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.putIfAbsent(DI)I: I9 Branch 39 IFGE L205 - false
   */

  @Test
  public void test8()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (-1.0);
      int[] intArray0 = new int[17];
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(doubleArray0, intArray0);
      int int0 = tDoubleIntHashMap0.putIfAbsent((-1.0), (-1929));
      assertEquals(2, tDoubleIntHashMap0.size());
      assertEquals("{-1.0=0, 0.0=0}", tDoubleIntHashMap0.toString());
      assertEquals(37, tDoubleIntHashMap0.capacity());
      assertEquals(0, int0);
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - false
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   */

  @Test
  public void test9()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(1275, 1275, 1275, 512);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      hashMap0.put((Double) 0.0, (Integer) 1275);
      tDoubleIntHashMap0.putAll((Map<? extends Double, ? extends Integer>) hashMap0);
      assertEquals(1, tDoubleIntHashMap0.size());
      assertEquals("{0.0=1275}", tDoubleIntHashMap0.toString());
  }

  //Test case number: 10
  /*
   * 13 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.get(D)I: I9 Branch 44 IFGE L253 - true
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 4 gnu.trove.map.hash.TDoubleIntHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 5 gnu.trove.map.hash.TDoubleIntHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 6 gnu.trove.map.hash.TDoubleIntHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 7 gnu.trove.map.hash.TDoubleIntHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 8 gnu.trove.map.hash.TDoubleIntHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - true
   * 9 gnu.trove.map.hash.TDoubleIntHashMap.<init>(IF)V: root-Branch
   * 10 gnu.trove.map.hash.TDoubleIntHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 11 gnu.trove.map.hash.TDoubleIntHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 12 gnu.trove.map.hash.TDoubleIntHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 13 gnu.trove.map.hash.TDoubleIntHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   */

  @Test
  public void test10()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(0, (-492));
      tDoubleIntHashMap0.adjustOrPutValue((double) (-492), 1328, 1328);
      boolean boolean0 = tDoubleIntHashMap0.equals((Object) tDoubleIntHashMap0);
      assertEquals(false, tDoubleIntHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.get(D)I: I9 Branch 44 IFGE L253 - false
   */

  @Test
  public void test11()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap((-1168));
      int int0 = tDoubleIntHashMap0.get((double) (-1168));
      assertEquals(0, int0);
  }

  //Test case number: 12
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.putIfAbsent(DI)I: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap();
      tDoubleIntHashMap0.putIfAbsent(1840.8059260932464, 1533);
      boolean boolean0 = tDoubleIntHashMap0.isEmpty();
      assertEquals(1, tDoubleIntHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test13()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap();
      boolean boolean0 = tDoubleIntHashMap0.isEmpty();
      assertEquals(23, tDoubleIntHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.remove(D)I: I14 Branch 46 IFLT L276 - true
   */

  @Test
  public void test14()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap();
      int int0 = tDoubleIntHashMap0.remove((double) 0);
      assertEquals(0, int0);
      assertEquals(23, tDoubleIntHashMap0.capacity());
      assertEquals(0, tDoubleIntHashMap0.size());
  }

  //Test case number: 15
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.keys()[D: I27 Branch 47 IFLE L303 - true
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.keys()[D: I27 Branch 47 IFLE L303 - false
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.keys()[D: I34 Branch 48 IF_ICMPNE L304 - true
   * 4 gnu.trove.map.hash.TDoubleIntHashMap.keys()[D: I34 Branch 48 IF_ICMPNE L304 - false
   */

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[8];
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(doubleArray0, intArray0);
      double[] doubleArray1 = tDoubleIntHashMap0.keys();
      assertNotNull(doubleArray1);
      assertEquals("{0.0=0}", tDoubleIntHashMap0.toString());
      assertEquals(1, tDoubleIntHashMap0.size());
  }

  //Test case number: 16
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.keys([D)[D: I10 Branch 49 IF_ICMPGE L315 - false
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.keys([D)[D: I44 Branch 51 IF_ICMPNE L323 - false
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.keys([D)[D: I37 Branch 50 IFLE L322 - true
   * 4 gnu.trove.map.hash.TDoubleIntHashMap.keys([D)[D: I37 Branch 50 IFLE L322 - false
   * 5 gnu.trove.map.hash.TDoubleIntHashMap.keys([D)[D: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 926.3683450622195;
      int[] intArray0 = new int[8];
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(doubleArray0, intArray0);
      tDoubleIntHashMap0.putIfAbsent(230.18197903404786, (-1457));
      tDoubleIntHashMap0.keys(doubleArray0);
      assertEquals(3, tDoubleIntHashMap0.size());
      assertEquals("{926.3683450622195=0, 230.18197903404786=-1457, 0.0=0}", tDoubleIntHashMap0.toString());
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.values([I)[I: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.values([I)[I: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.values([I)[I: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TDoubleIntHashMap.values([I)[I: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap((-1719));
      int[] intArray0 = new int[14];
      int[] intArray1 = tDoubleIntHashMap0.values(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
  }

  //Test case number: 18
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.values([I)[I: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.values([I)[I: I44 Branch 56 IF_ICMPNE L363 - false
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.values([I)[I: I37 Branch 55 IFLE L362 - true
   * 4 gnu.trove.map.hash.TDoubleIntHashMap.values([I)[I: I37 Branch 55 IFLE L362 - false
   * 5 gnu.trove.map.hash.TDoubleIntHashMap.values([I)[I: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap((-493), 514.3238F, (double) (-493), (-493));
      tDoubleIntHashMap0.adjustOrPutValue((-422.054481140174), 1454, 0);
      tDoubleIntHashMap0.adjustOrPutValue((double) (-493), 1348, 1348);
      int[] intArray0 = new int[1];
      tDoubleIntHashMap0.values(intArray0);
      assertEquals(2, tDoubleIntHashMap0.size());
      assertEquals("{-422.054481140174=0, -493.0=1348}", tDoubleIntHashMap0.toString());
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.containsValue(I)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.containsValue(I)Z: I30 Branch 59 IF_ICMPNE L377 - false
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.containsValue(I)Z: I18 Branch 57 IFLE L376 - false
   * 4 gnu.trove.map.hash.TDoubleIntHashMap.containsValue(I)Z: I25 Branch 58 IF_ICMPNE L377 - true
   */

  @Test
  public void test19()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap();
      tDoubleIntHashMap0.putIfAbsent(1671.591523543791, (-1));
      boolean boolean0 = tDoubleIntHashMap0.containsValue((-1));
      assertEquals(1, tDoubleIntHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 20
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.containsValue(I)Z: I30 Branch 59 IF_ICMPNE L377 - true
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.putIfAbsent(DI)I: I9 Branch 39 IFGE L205 - true
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.containsValue(I)Z: I18 Branch 57 IFLE L376 - true
   * 4 gnu.trove.map.hash.TDoubleIntHashMap.containsValue(I)Z: I18 Branch 57 IFLE L376 - false
   * 5 gnu.trove.map.hash.TDoubleIntHashMap.containsValue(I)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 6 gnu.trove.map.hash.TDoubleIntHashMap.containsValue(I)Z: I25 Branch 58 IF_ICMPNE L377 - false
   */

  @Test
  public void test20()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap();
      tDoubleIntHashMap0.putIfAbsent(1840.8059260932464, 1533);
      boolean boolean0 = tDoubleIntHashMap0.containsValue(0);
      assertEquals(false, tDoubleIntHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 21
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap((-1168));
      boolean boolean0 = tDoubleIntHashMap0.forEachValue((TIntProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[8];
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(doubleArray0, intArray0);
      // Undeclared exception!
      try {
        tDoubleIntHashMap0.forEachValue((TIntProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test23()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap();
      tDoubleIntHashMap0.transformValues((TIntFunction) null);
      assertEquals(23, tDoubleIntHashMap0.capacity());
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap();
      tDoubleIntHashMap0.adjustOrPutValue(0.0, 215, 0);
      // Undeclared exception!
      try {
        tDoubleIntHashMap0.transformValues((TIntFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 25
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.retainEntries(Lgnu/trove/procedure/TDoubleIntProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.retainEntries(Lgnu/trove/procedure/TDoubleIntProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.retainEntries(Lgnu/trove/procedure/TDoubleIntProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   * 4 gnu.trove.map.hash.TDoubleIntHashMap.<init>()V: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap();
      boolean boolean0 = tDoubleIntHashMap0.retainEntries((TDoubleIntProcedure) null);
      assertEquals(false, boolean0);
      assertEquals(23, tDoubleIntHashMap0.capacity());
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.retainEntries(Lgnu/trove/procedure/TDoubleIntProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.retainEntries(Lgnu/trove/procedure/TDoubleIntProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.retainEntries(Lgnu/trove/procedure/TDoubleIntProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(7, (float) 7, (double) 6.6360896E8F, 1667);
      tDoubleIntHashMap0.put((double) 0, (-574));
      // Undeclared exception!
      try {
        tDoubleIntHashMap0.retainEntries((TDoubleIntProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.adjustValue(DI)Z: I9 Branch 71 IFGE L477 - true
   */

  @Test
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[8];
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(doubleArray0, intArray0);
      tDoubleIntHashMap0.adjustOrPutValue((double) (-1), (-1), (-1));
      boolean boolean0 = tDoubleIntHashMap0.adjustValue((double) (-1), (-749));
      assertEquals(2, tDoubleIntHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   */

  @Test
  public void test28()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap((-1265), 732.5604F, (double) (-1265), (-1265));
      Integer integer0 = new Integer((-1265));
      boolean boolean0 = tDoubleIntHashMap0.equals((Object) integer0);
      assertEquals(false, boolean0);
  }

  //Test case number: 29
  /*
   * 17 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.<init>(IFDI)V: root-Branch
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.iterator()Lgnu/trove/iterator/TDoubleIntIterator;: root-Branch
   * 4 gnu.trove.map.hash.TDoubleIntHashMap.keys([D)[D: I10 Branch 49 IF_ICMPGE L315 - true
   * 5 gnu.trove.map.hash.TDoubleIntHashMap.keys([D)[D: I37 Branch 50 IFLE L322 - true
   * 6 gnu.trove.map.hash.TDoubleIntHashMap.keys([D)[D: I37 Branch 50 IFLE L322 - false
   * 7 gnu.trove.map.hash.TDoubleIntHashMap.keys([D)[D: I44 Branch 51 IF_ICMPNE L323 - true
   * 8 gnu.trove.map.hash.TDoubleIntHashMap.keys([D)[D: I44 Branch 51 IF_ICMPNE L323 - false
   * 9 gnu.trove.map.hash.TDoubleIntHashMap.putAll(Lgnu/trove/map/TDoubleIntMap;)V: I15 Branch 43 IFEQ L243 - true
   * 10 gnu.trove.map.hash.TDoubleIntHashMap.putAll(Lgnu/trove/map/TDoubleIntMap;)V: I15 Branch 43 IFEQ L243 - false
   * 11 gnu.trove.map.hash.TDoubleIntHashMap.<init>(Lgnu/trove/map/TDoubleIntMap;)V: I10 Branch 34 IFEQ L133 - false
   * 12 gnu.trove.map.hash.TDoubleIntHashMap.<init>(Lgnu/trove/map/TDoubleIntMap;)V: I40 Branch 35 IFEQ L139 - false
   * 13 gnu.trove.map.hash.TDoubleIntHashMap.<init>(Lgnu/trove/map/TDoubleIntMap;)V: I52 Branch 36 IFEQ L143 - false
   * 14 gnu.trove.map.hash.TDoubleIntHashMap$TDoubleIntHashIterator.<init>(Lgnu/trove/map/hash/TDoubleIntHashMap;Lgnu/trove/map/hash/TDoubleIntHashMap;)V: root-Branch
   * 15 gnu.trove.map.hash.TDoubleIntHashMap$TDoubleIntHashIterator.key()D: root-Branch
   * 16 gnu.trove.map.hash.TDoubleIntHashMap$TDoubleIntHashIterator.value()I: root-Branch
   * 17 gnu.trove.map.hash.TDoubleIntHashMap$TDoubleIntHashIterator.advance()V: root-Branch
   */

  @Test
  public void test29()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap((-493), 514.3238F, (double) (-493), (-493));
      tDoubleIntHashMap0.adjustOrPutValue((-422.054481140174), 1454, 0);
      tDoubleIntHashMap0.adjustOrPutValue(0.0, 0, 0);
      tDoubleIntHashMap0.keys(tDoubleIntHashMap0._set);
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap((TDoubleIntMap) tDoubleIntHashMap0);
      boolean boolean0 = tDoubleIntHashMap0.equals((Object) tDoubleIntHashMap1);
      assertEquals(2, tDoubleIntHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 30
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - false
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.equals(Ljava/lang/Object;)Z: I87 Branch 79 IF_ICMPEQ L1200 - false
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.equals(Ljava/lang/Object;)Z: I90 Branch 80 IF_ICMPEQ L1200 - true
   * 4 gnu.trove.map.hash.TDoubleIntHashMap.values()[I: I27 Branch 52 IFLE L343 - true
   * 5 gnu.trove.map.hash.TDoubleIntHashMap.values()[I: I27 Branch 52 IFLE L343 - false
   * 6 gnu.trove.map.hash.TDoubleIntHashMap.values()[I: I34 Branch 53 IF_ICMPNE L344 - true
   * 7 gnu.trove.map.hash.TDoubleIntHashMap.values()[I: I34 Branch 53 IF_ICMPNE L344 - false
   * 8 gnu.trove.map.hash.TDoubleIntHashMap.adjustOrPutValue(DII)I: I9 Branch 72 IFGE L491 - false
   * 9 gnu.trove.map.hash.TDoubleIntHashMap.adjustOrPutValue(DII)I: I58 Branch 73 IFEQ L502 - true
   */

  @Test
  public void test30()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(1);
      tDoubleIntHashMap0.adjustOrPutValue((double) 1, 1, 0);
      int[] intArray0 = tDoubleIntHashMap0.values();
      tDoubleIntHashMap0.adjustOrPutValue(1.0, 1, (-1));
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap(tDoubleIntHashMap0._set, intArray0);
      boolean boolean0 = tDoubleIntHashMap0.equals((Object) tDoubleIntHashMap1);
      assertEquals(1, tDoubleIntHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 31
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.equals(Ljava/lang/Object;)Z: I87 Branch 79 IF_ICMPEQ L1200 - true
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   */

  @Test
  public void test31()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(1);
      tDoubleIntHashMap0.adjustOrPutValue((double) 1, 1, 0);
      int[] intArray0 = tDoubleIntHashMap0.values();
      intArray0[0] = 1072693248;
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap(tDoubleIntHashMap0._set, intArray0);
      boolean boolean0 = tDoubleIntHashMap0.equals((Object) tDoubleIntHashMap1);
      assertEquals("{1.0=0}", tDoubleIntHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 32
  /*
   * 15 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.equals(Ljava/lang/Object;)Z: I90 Branch 80 IF_ICMPEQ L1200 - false
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.values()[I: I27 Branch 52 IFLE L343 - true
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.values()[I: I27 Branch 52 IFLE L343 - false
   * 4 gnu.trove.map.hash.TDoubleIntHashMap.values()[I: I34 Branch 53 IF_ICMPNE L344 - true
   * 5 gnu.trove.map.hash.TDoubleIntHashMap.values()[I: I34 Branch 53 IF_ICMPNE L344 - false
   * 6 gnu.trove.map.hash.TDoubleIntHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 7 gnu.trove.map.hash.TDoubleIntHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 8 gnu.trove.map.hash.TDoubleIntHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 9 gnu.trove.map.hash.TDoubleIntHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 10 gnu.trove.map.hash.TDoubleIntHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 11 gnu.trove.map.hash.TDoubleIntHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - false
   * 12 gnu.trove.map.hash.TDoubleIntHashMap.equals(Ljava/lang/Object;)Z: I87 Branch 79 IF_ICMPEQ L1200 - false
   * 13 gnu.trove.map.hash.TDoubleIntHashMap.adjustOrPutValue(DII)I: I9 Branch 72 IFGE L491 - false
   * 14 gnu.trove.map.hash.TDoubleIntHashMap.adjustOrPutValue(DII)I: I58 Branch 73 IFEQ L502 - true
   * 15 gnu.trove.map.hash.TDoubleIntHashMap.get(D)I: I9 Branch 44 IFGE L253 - true
   */

  @Test
  public void test32()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(1);
      tDoubleIntHashMap0.adjustOrPutValue((double) 1, 1, 0);
      int[] intArray0 = tDoubleIntHashMap0.values();
      intArray0[0] = 1072693248;
      tDoubleIntHashMap0.adjustOrPutValue(1.0, 1, (-1));
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap(tDoubleIntHashMap0._set, intArray0);
      boolean boolean0 = tDoubleIntHashMap0.equals((Object) tDoubleIntHashMap1);
      assertEquals(1, tDoubleIntHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 33
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.<init>(I)V: root-Branch
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.adjustOrPutValue(DII)I: I9 Branch 72 IFGE L491 - true
   * 4 gnu.trove.map.hash.TDoubleIntHashMap.adjustOrPutValue(DII)I: I58 Branch 73 IFEQ L502 - false
   * 5 gnu.trove.map.hash.TDoubleIntHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 6 gnu.trove.map.hash.TDoubleIntHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 7 gnu.trove.map.hash.TDoubleIntHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   */

  @Test
  public void test33()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(1);
      tDoubleIntHashMap0.adjustOrPutValue((double) 1, 1, 0);
      int int0 = tDoubleIntHashMap0.hashCode();
      assertEquals(1, tDoubleIntHashMap0.size());
      assertEquals(1072693248, int0);
  }

  //Test case number: 34
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap$1.execute(DI)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.toString()Ljava/lang/String;: root-Branch
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.forEachEntry(Lgnu/trove/procedure/TDoubleIntProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 4 gnu.trove.map.hash.TDoubleIntHashMap.forEachEntry(Lgnu/trove/procedure/TDoubleIntProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 5 gnu.trove.map.hash.TDoubleIntHashMap.forEachEntry(Lgnu/trove/procedure/TDoubleIntProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 6 gnu.trove.map.hash.TDoubleIntHashMap.forEachEntry(Lgnu/trove/procedure/TDoubleIntProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 7 gnu.trove.map.hash.TDoubleIntHashMap.forEachEntry(Lgnu/trove/procedure/TDoubleIntProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 8 gnu.trove.map.hash.TDoubleIntHashMap$1.<init>(Lgnu/trove/map/hash/TDoubleIntHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 9 gnu.trove.map.hash.TDoubleIntHashMap$1.execute(DI)Z: I4 Branch 115 IFEQ L1233 - false
   */

  @Test
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (-1.0);
      int[] intArray0 = new int[17];
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(doubleArray0, intArray0);
      String string0 = tDoubleIntHashMap0.toString();
      assertEquals(2, tDoubleIntHashMap0.size());
      assertNotNull(string0);
      assertEquals("{-1.0=0, 0.0=0}", string0);
  }

  //Test case number: 35
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TDoubleIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 2 gnu.trove.map.hash.TDoubleIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 3 gnu.trove.map.hash.TDoubleIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 4 gnu.trove.map.hash.TDoubleIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 5 gnu.trove.map.hash.TDoubleIntHashMap.setUp(I)I: root-Branch
   * 6 gnu.trove.map.hash.TDoubleIntHashMap.put(DI)I: root-Branch
   * 7 gnu.trove.map.hash.TDoubleIntHashMap.<init>([D[I)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 8 gnu.trove.map.hash.TDoubleIntHashMap.<init>([D[I)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 9 gnu.trove.map.hash.TDoubleIntHashMap.doPut(DII)I: I12 Branch 40 IFGE L214 - true
   * 10 gnu.trove.map.hash.TDoubleIntHashMap.doPut(DII)I: I12 Branch 40 IFGE L214 - false
   * 11 gnu.trove.map.hash.TDoubleIntHashMap.doPut(DII)I: I41 Branch 41 IFEQ L221 - true
   * 12 gnu.trove.map.hash.TDoubleIntHashMap.doPut(DII)I: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[8];
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(doubleArray0, intArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tDoubleIntHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(17, tDoubleIntHashMap0.capacity());
      assertEquals("{0.0=0}", tDoubleIntHashMap0.toString());
      assertEquals(1, tDoubleIntHashMap0.size());
  }
}
