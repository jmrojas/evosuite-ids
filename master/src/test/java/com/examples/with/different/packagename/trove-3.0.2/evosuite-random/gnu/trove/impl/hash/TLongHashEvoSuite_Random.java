/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedRandomAccessLongList;
import gnu.trove.list.TLongList;
import gnu.trove.list.array.TLongArrayList;
import gnu.trove.list.linked.TLongLinkedList;
import gnu.trove.map.TLongObjectMap;
import gnu.trove.map.hash.TLongObjectHashMap;
import gnu.trove.procedure.TLongProcedure;
import gnu.trove.set.hash.TLongHashSet;
import java.io.File;
import java.io.IOException;
import java.io.ObjectOutput;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TLongHashEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      long long0 = 0L;
      TLongLinkedList tLongLinkedList0 = new TLongLinkedList(long0);
      String string0 = "No free or removed slots available. Key set full?!!";
      // Undeclared exception!
      try {
        URI.create(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 2: No free or removed slots available. Key set full?!!
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 784;
      float float0 = 1622.6234F;
      long long0 = 0L;
      TLongHashSet tLongHashSet0 = new TLongHashSet(int0, float0, long0);
      tLongHashSet0.ensureCapacity(int0);
      int int1 = 0;
      tLongHashSet0.toArray();
      float float1 = 3.4028235E38F;
      TLongObjectHashMap<String> tLongObjectHashMap0 = new TLongObjectHashMap<String>(int1, float1);
      int int2 = 1939;
      tLongObjectHashMap0.ensureCapacity(int2);
      int int3 = 0;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) int1;
      longArray0[1] = (long) int1;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = (long) int3;
      longArray0[5] = (long) int2;
      longArray0[6] = (long) int1;
      longArray0[7] = (long) int1;
      longArray0[8] = long0;
      tLongHashSet0.toArray(longArray0);
      long long1 = 0L;
      tLongObjectHashMap0.contains(long1);
      tLongHashSet0.isEmpty();
      TLongObjectHashMap<Object> tLongObjectHashMap1 = new TLongObjectHashMap<Object>(int3);
      ObjectOutput objectOutput0 = null;
      // Undeclared exception!
      try {
        tLongObjectHashMap1.writeExternal(objectOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-579);
      TLongObjectHashMap<Integer> tLongObjectHashMap0 = new TLongObjectHashMap<Integer>();
      tLongObjectHashMap0.size();
      TLongObjectHashMap<String> tLongObjectHashMap1 = new TLongObjectHashMap<String>();
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://#
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      TLongHashSet tLongHashSet0 = new TLongHashSet();
      long[] longArray0 = new long[10];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      long long0 = (-1474L);
      longArray0[2] = long0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      longArray0[6] = (long) int0;
      longArray0[7] = (long) int0;
      longArray0[8] = (long) int0;
      longArray0[9] = (long) int0;
      tLongHashSet0.retainAll(longArray0);
      assertEquals(23, tLongHashSet0.capacity());
      
      TLongObjectHashMap<Object> tLongObjectHashMap0 = new TLongObjectHashMap<Object>(int0);
      tLongObjectHashMap0.tempDisableAutoCompaction();
      long long1 = tLongObjectHashMap0.getNoEntryValue();
      assertEquals(0L, long1);
  }

  @Test
  public void test4()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = (-1465L);
      longArray0[0] = long0;
      long long1 = (-1504L);
      longArray0[1] = long1;
      long long2 = (-1874L);
      longArray0[2] = long2;
      long long3 = (-1476L);
      longArray0[3] = long3;
      long long4 = (-1557L);
      longArray0[4] = long4;
      long long5 = 0L;
      longArray0[5] = long5;
      long long6 = 1505L;
      longArray0[6] = long6;
      long long7 = (-568L);
      longArray0[7] = long7;
      long long8 = 0L;
      longArray0[8] = long8;
      TLongHashSet tLongHashSet0 = new TLongHashSet(longArray0);
      tLongHashSet0.hashCode();
      int int0 = 173;
      TLongHashSet tLongHashSet1 = new TLongHashSet(int0);
      int int1 = tLongHashSet1.size();
      TLongObjectHashMap<Object> tLongObjectHashMap0 = new TLongObjectHashMap<Object>(int1, int1);
      TLongHashSet tLongHashSet2 = new TLongHashSet(int0, int0, int0);
      assertTrue(tLongHashSet2.equals(tLongHashSet1));
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-2039);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      long long0 = (-386L);
      longArray0[6] = long0;
      TLongHashSet tLongHashSet0 = new TLongHashSet(longArray0);
      TLongObjectHashMap<String> tLongObjectHashMap0 = new TLongObjectHashMap<String>(int0);
      TLongObjectHashMap<Object> tLongObjectHashMap1 = new TLongObjectHashMap<Object>(int0, int0, int0);
      tLongObjectHashMap1._states = tLongObjectHashMap0._states;
      int int1 = (-1);
      float float0 = 3.4028235E38F;
      TLongHashSet tLongHashSet1 = new TLongHashSet(int1, float0);
      tLongHashSet1.clear();
      Locale locale0 = Locale.JAPAN;
      char char0 = '~';
      // Undeclared exception!
      try {
        locale0.getExtension(char0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed extension key: ~
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 66923;
      float float0 = (-793.43646F);
      int int1 = 513;
      TLongObjectHashMap<String> tLongObjectHashMap0 = new TLongObjectHashMap<String>(int1, int0, int0);
      tLongObjectHashMap0.hashCode();
      TLongProcedure tLongProcedure0 = null;
      boolean boolean0 = tLongObjectHashMap0.forEachKey(tLongProcedure0);
      assertEquals(true, boolean0);
      
      long long0 = (-650L);
      tLongObjectHashMap0.getAutoCompactionFactor();
      TLongObjectHashMap<String> tLongObjectHashMap1 = new TLongObjectHashMap<String>(int0, float0, long0);
      assertEquals(3, tLongObjectHashMap1.capacity());
      
      TLongArrayList tLongArrayList0 = TLongArrayList.wrap(tLongObjectHashMap0._set);
      TSynchronizedRandomAccessLongList tSynchronizedRandomAccessLongList0 = new TSynchronizedRandomAccessLongList((TLongList) tLongArrayList0);
      TLongProcedure tLongProcedure1 = null;
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessLongList0.grep(tLongProcedure1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      TLongHashSet tLongHashSet0 = new TLongHashSet(int0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      long long0 = 0L;
      longArray0[0] = long0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      tLongHashSet0.addAll(longArray0);
      long long1 = tLongHashSet0.getNoEntryValue();
      assertEquals(7, tLongHashSet0.capacity());
      assertEquals(0L, long1);
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      TLongObjectHashMap<Integer> tLongObjectHashMap0 = new TLongObjectHashMap<Integer>(int0);
      tLongObjectHashMap0.clear();
      float float0 = 0.0F;
      TLongHashSet tLongHashSet0 = new TLongHashSet(int0, float0, (long) int0);
      String string0 = "";
      tLongObjectHashMap0.trimToSize();
      URI uRI0 = URI.create(string0);
      tLongHashSet0.size();
      File file0 = null;
      try {
        file0 = new File(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TLongObjectHashMap<Object> tLongObjectHashMap0 = new TLongObjectHashMap<Object>();
      TLongObjectHashMap<Object> tLongObjectHashMap1 = new TLongObjectHashMap<Object>((TLongObjectMap<?>) tLongObjectHashMap0);
      boolean boolean0 = true;
      int int0 = 0;
      float float0 = 1.4E-45F;
      TLongHashSet tLongHashSet0 = new TLongHashSet(int0, float0);
      String string0 = "h^C;![";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 1: h^C;![
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TLongObjectHashMap<String> tLongObjectHashMap0 = new TLongObjectHashMap<String>();
      tLongObjectHashMap0.size();
      assertEquals(23, tLongObjectHashMap0.capacity());
  }

  @Test
  public void test11()  throws Throwable  {
      TLongHashSet tLongHashSet0 = new TLongHashSet();
      String string0 = "=[9y<7=xt$w3~T";
      // Undeclared exception!
      try {
        URI.create(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 1: =[9y<7=xt$w3~T
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-957);
      TLongObjectHashMap<Object> tLongObjectHashMap0 = new TLongObjectHashMap<Object>();
      tLongObjectHashMap0.capacity();
      tLongObjectHashMap0.isEmpty();
      tLongObjectHashMap0.compact();
      TLongObjectHashMap<Object> tLongObjectHashMap1 = new TLongObjectHashMap<Object>();
      tLongObjectHashMap1.getNoEntryKey();
      TLongObjectHashMap<Integer> tLongObjectHashMap2 = new TLongObjectHashMap<Integer>(int0, int0);
      assertEquals(0L, tLongObjectHashMap2.getNoEntryKey());
  }
}
