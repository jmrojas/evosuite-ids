/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TByteByteMap;
import gnu.trove.map.hash.TByteByteHashMap;
import gnu.trove.procedure.TByteProcedure;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.StreamCorruptedException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteByteHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


//   @Test
//   public void test0()  throws Throwable  {
//       int int0 = (-1);
//       TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(int0);
//       TByteByteHashMap tByteByteHashMap1 = new TByteByteHashMap((TByteByteMap) tByteByteHashMap0);
//       byte byte0 = (byte) (-86);
//       tByteByteHashMap1.get(byte0);
//       TByteByteHashMap tByteByteHashMap2 = new TByteByteHashMap();
//       boolean boolean0 = tByteByteHashMap2.contains(byte0);
//       assertEquals(false, boolean0);
//       
//       tByteByteHashMap2.hashCode();
//       TByteByteHashMap tByteByteHashMap3 = new TByteByteHashMap(int0);
//       byte byte1 = (byte)96;
//       tByteByteHashMap3.toString();
//       byte byte2 = (byte) (-12);
//       byte byte3 = tByteByteHashMap3.remove(byte2);
//       assertEquals((byte)0, byte3);
//       
//       tByteByteHashMap3.adjustValue(byte1, byte2);
//       tByteByteHashMap2.putAll((TByteByteMap) tByteByteHashMap3);
//       assertEquals(0, tByteByteHashMap3.getNoEntryKey());
//       assertEquals(0, tByteByteHashMap2.getNoEntryKey());
//       assertEquals(23, tByteByteHashMap2.capacity());
//       assertEquals(0, tByteByteHashMap2.getNoEntryValue());
//   }

//   @Test
//   public void test1()  throws Throwable  {
//       int int0 = (-517);
//       byte byte0 = (byte)0;
//       byte byte1 = (byte)47;
//       TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap((int) byte1);
//       byte[] byteArray0 = new byte[4];
//       byteArray0[0] = byte1;
//       byte byte2 = (byte)0;
//       byteArray0[1] = byte2;
//       byteArray0[2] = byte1;
//       byteArray0[3] = byte0;
//       tByteByteHashMap0._set = byteArray0;
//       byte byte3 = (byte)105;
//       tByteByteHashMap0.putIfAbsent(byte0, byte3);
//       assertEquals(false, tByteByteHashMap0.isEmpty());
//       
//       byte byte4 = (byte)48;
//       float float0 = 1813.3357F;
//       TByteByteHashMap tByteByteHashMap1 = new TByteByteHashMap();
//       tByteByteHashMap1.getNoEntryValue();
//       byte byte5 = (byte) (-127);
//       TByteByteHashMap tByteByteHashMap2 = new TByteByteHashMap((int) byte1, float0, byte0, byte5);
//       tByteByteHashMap1.getAutoCompactionFactor();
//       tByteByteHashMap2.ensureCapacity((int) byte1);
//       TByteByteHashMap tByteByteHashMap3 = new TByteByteHashMap(int0, (float) byte1, byte4, byte1);
//       TByteByteHashMap tByteByteHashMap4 = new TByteByteHashMap(int0, (float) int0, byte0, byte1);
//       TByteProcedure tByteProcedure0 = null;
//       tByteByteHashMap4.forEach(tByteProcedure0);
//       int int1 = (-1980);
//       float float1 = 437.0481F;
//       byte byte6 = (byte) (-99);
//       tByteByteHashMap4.compact();
//       byte byte7 = (byte)89;
//       TByteByteHashMap tByteByteHashMap5 = new TByteByteHashMap(int1, float1, byte6, byte7);
//       byte byte8 = (byte) (-33);
//       tByteByteHashMap5.adjustValue(byte8, byte6);
//       assertEquals(89, tByteByteHashMap5.getNoEntryValue());
//   }

//   @Test
//   public void test2()  throws Throwable  {
//       byte[] byteArray0 = new byte[9];
//       byte byte0 = (byte) (-103);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte) (-107);
//       byteArray0[1] = byte1;
//       byte byte2 = (byte) (-127);
//       byteArray0[2] = byte2;
//       byte byte3 = (byte)52;
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)0;
//       byteArray0[4] = byte4;
//       byte byte5 = (byte)0;
//       byteArray0[5] = byte5;
//       byte byte6 = (byte) (-29);
//       byteArray0[6] = byte6;
//       byte byte7 = (byte) (-76);
//       byteArray0[7] = byte7;
//       byte byte8 = (byte)23;
//       byteArray0[8] = byte8;
//       TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(byteArray0, byteArray0);
//       assertEquals(8, tByteByteHashMap0.size());
//       assertEquals(0, tByteByteHashMap0.getNoEntryKey());
//       assertEquals("{-76=-76, 23=23, -103=-103, -127=-127, -107=-107, -29=-29, 52=52, 0=0}", tByteByteHashMap0.toString());
//       
//       int int0 = 1696;
//       float float0 = (-498.63156F);
//       TByteByteHashMap tByteByteHashMap1 = new TByteByteHashMap(int0, float0);
//       tByteByteHashMap1.getAutoCompactionFactor();
//       assertEquals(0, tByteByteHashMap1.getNoEntryValue());
//   }

//   @Test
//   public void test3()  throws Throwable  {
//       int int0 = 657;
//       int int1 = (-544);
//       float float0 = 0.0F;
//       byte byte0 = (byte) (-68);
//       byte byte1 = (byte)109;
//       TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(int1, float0, byte0, byte1);
//       TByteByteHashMap tByteByteHashMap1 = new TByteByteHashMap(int0);
//       byte byte2 = (byte) (-3);
//       byte byte3 = (byte)0;
//       tByteByteHashMap0.putIfAbsent(byte2, byte3);
//       tByteByteHashMap0.valueCollection();
//       byte[] byteArray0 = new byte[3];
//       tByteByteHashMap1.values();
//       tByteByteHashMap1.trimToSize();
//       tByteByteHashMap0.trimToSize();
//       byte byte4 = (byte) (-121);
//       byteArray0[0] = byte4;
//       byte byte5 = (byte)5;
//       byteArray0[1] = byte5;
//       byte byte6 = (byte)0;
//       int int2 = tByteByteHashMap1.size();
//       byteArray0[2] = byte6;
//       tByteByteHashMap1._states = byteArray0;
//       tByteByteHashMap1.getNoEntryValue();
//       TByteByteHashMap tByteByteHashMap2 = new TByteByteHashMap(int2);
//       tByteByteHashMap2.keySet();
//       tByteByteHashMap1.ensureCapacity((int) byte1);
//       byteArray0[0] = byte4;
//       byteArray0[1] = byte6;
//       byteArray0[2] = byte4;
//       tByteByteHashMap0.size();
//       assertEquals("{-3=0}", tByteByteHashMap0.toString());
//       
//       tByteByteHashMap1.keys();
//       assertEquals(0, tByteByteHashMap1.getNoEntryKey());
//   }

//   @Test
//   public void test4()  throws Throwable  {
//       byte[] byteArray0 = new byte[4];
//       byte byte0 = (byte)0;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)1;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)1;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte) (-38);
//       byteArray0[3] = byte3;
//       TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(byteArray0, byteArray0);
//       assertEquals("{-38=-38, 1=1, 0=0}", tByteByteHashMap0.toString());
//       assertEquals(0, tByteByteHashMap0.getNoEntryKey());
//       assertEquals(0, tByteByteHashMap0.getNoEntryValue());
//       assertEquals(3, tByteByteHashMap0.size());
//       assertEquals(11, tByteByteHashMap0.capacity());
//   }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap();
          float float0 = 1403.3265F;
          tByteByteHashMap0.setAutoCompactionFactor(float0);
          byte byte0 = (byte)0;
          byte byte1 = (byte)1;
          tByteByteHashMap0.adjustOrPutValue(byte0, byte0, byte1);
          int int0 = Integer.MAX_VALUE;
          tByteByteHashMap0.getAutoCompactionFactor();
          TByteByteHashMap tByteByteHashMap1 = new TByteByteHashMap();
          String string0 = "fgRE'2ThFCPEoh1@";
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"fgRE'2ThFCPEoh1@\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

//   @Test
//   public void test6()  throws Throwable  {
//       int int0 = (-1398);
//       TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(int0, int0);
//       TByteByteHashMap tByteByteHashMap1 = new TByteByteHashMap((TByteByteMap) tByteByteHashMap0);
//       byte byte0 = (byte)0;
//       boolean boolean0 = tByteByteHashMap1.containsKey(byte0);
//       assertEquals(false, boolean0);
//       
//       int int1 = (-488);
//       float float0 = 0.0F;
//       tByteByteHashMap1.containsValue(byte0);
//       byte byte1 = (byte)50;
//       byte byte2 = (byte) (-113);
//       int int2 = 1668;
//       tByteByteHashMap0.tempDisableAutoCompaction();
//       tByteByteHashMap1.size();
//       tByteByteHashMap0.ensureCapacity(int2);
//       assertEquals(0, tByteByteHashMap0.getNoEntryValue());
//       assertEquals(0, tByteByteHashMap0.getNoEntryKey());
//       
//       TByteByteHashMap tByteByteHashMap2 = new TByteByteHashMap(int1, float0, byte1, byte2);
//       assertEquals(50, tByteByteHashMap2.getNoEntryKey());
//       assertEquals(-113, tByteByteHashMap2.getNoEntryValue());
//   }

//   @Test
//   public void test7()  throws Throwable  {
//       int int0 = 1;
//       TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(int0);
//       TByteByteHashMap tByteByteHashMap1 = new TByteByteHashMap((TByteByteMap) tByteByteHashMap0);
//       assertEquals(0, tByteByteHashMap0.getNoEntryValue());
//       assertEquals(0, tByteByteHashMap0.getNoEntryKey());
//       assertEquals(23, tByteByteHashMap1.capacity());
//       
//       float float0 = (-1.0F);
//       byte byte0 = (byte) (-68);
//       byte byte1 = (byte)0;
//       TByteByteHashMap tByteByteHashMap2 = new TByteByteHashMap(int0, float0, byte0, byte1);
//       assertEquals(0, tByteByteHashMap2.getNoEntryValue());
//       assertEquals(-68, tByteByteHashMap2.getNoEntryKey());
//   }

//   @Test
//   public void test8()  throws Throwable  {
//       int int0 = 0;
//       byte byte0 = (byte)0;
//       byte byte1 = (byte)0;
//       TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(int0, (float) int0, byte0, byte1);
//       tByteByteHashMap0.increment(byte1);
//       byte[] byteArray0 = new byte[3];
//       byte byte2 = (byte)0;
//       byteArray0[0] = byte2;
//       byte byte3 = (byte) (-124);
//       byteArray0[1] = byte3;
//       TByteByteHashMap tByteByteHashMap1 = new TByteByteHashMap((int) byteArray0[1]);
//       TByteByteHashMap tByteByteHashMap2 = new TByteByteHashMap((TByteByteMap) tByteByteHashMap1);
//       assertEquals(23, tByteByteHashMap2.capacity());
//       
//       tByteByteHashMap2.compact();
//       TByteByteHashMap tByteByteHashMap3 = new TByteByteHashMap(byteArray0, byteArray0);
//       TByteByteHashMap tByteByteHashMap4 = new TByteByteHashMap((TByteByteMap) tByteByteHashMap3);
//       TByteByteHashMap tByteByteHashMap5 = new TByteByteHashMap((TByteByteMap) tByteByteHashMap4);
//       tByteByteHashMap3.iterator();
//       tByteByteHashMap5.compact();
//       byte byte4 = (byte) (-127);
//       byteArray0[2] = byte4;
//       TByteByteHashMap tByteByteHashMap6 = new TByteByteHashMap(byteArray0, byteArray0);
//       tByteByteHashMap6.tempDisableAutoCompaction();
//       assertEquals(0, tByteByteHashMap6.getNoEntryValue());
//   }

//   @Test
//   public void test9()  throws Throwable  {
//       int int0 = 1489;
//       float float0 = (-1728.0444F);
//       TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(int0, float0);
//       float float1 = 0.0F;
//       byte[] byteArray0 = new byte[7];
//       byte byte0 = (byte) (-111);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)38;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte) (-73);
//       byteArray0[2] = byte2;
//       byte byte3 = (byte) (-3);
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)95;
//       byteArray0[4] = byte4;
//       byte byte5 = (byte)101;
//       byteArray0[5] = byte5;
//       byte byte6 = (byte)0;
//       byteArray0[6] = byte6;
//       byte[] byteArray1 = tByteByteHashMap0.keys(byteArray0);
//       assertNotNull(byteArray1);
//       
//       TByteByteHashMap tByteByteHashMap1 = new TByteByteHashMap(int0, float1);
//       tByteByteHashMap0.toString();
//       byte byte7 = (byte)74;
//       tByteByteHashMap0.toString();
//       byte byte8 = tByteByteHashMap0.get(byte7);
//       assertEquals((byte)0, byte8);
//       assertEquals(0, tByteByteHashMap0.getNoEntryKey());
//   }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 464;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-58);
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)22;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(byteArray0, byteArray0);
      tByteByteHashMap0.increment(byte2);
      assertEquals("{22=22, -58=-58, 1=1, 0=1}", tByteByteHashMap0.toString());
      
      float float0 = 0.0F;
      TByteByteHashMap tByteByteHashMap1 = new TByteByteHashMap(int0, float0);
      byte byte6 = (byte)44;
      byte byte7 = (byte) (-41);
      tByteByteHashMap1.adjustValue(byte6, byte7);
      int int1 = (-1);
      float float1 = 0.0F;
      TByteByteHashMap tByteByteHashMap2 = new TByteByteHashMap();
      tByteByteHashMap2.compact();
      TByteByteHashMap tByteByteHashMap3 = new TByteByteHashMap(int1, float1);
      byte byte8 = (byte)0;
      tByteByteHashMap3.put(byte8, byte8);
      int int2 = 66923;
      byte byte9 = (byte)0;
      float float2 = (-1376.1375F);
      // Undeclared exception!
      try {
        tByteByteHashMap3.setAutoCompactionFactor(float2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1376.1375
         //
      }
  }

//   @Test
//   public void test11()  throws Throwable  {
//       int int0 = 0;
//       float float0 = (-1.0F);
//       TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(int0, float0);
//       tByteByteHashMap0.compact();
//       assertEquals(0, tByteByteHashMap0.getNoEntryKey());
//       assertEquals(0, tByteByteHashMap0.getNoEntryValue());
//   }

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-104);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-67);
      byteArray0[1] = byte1;
      byte byte2 = (byte)126;
      byteArray0[2] = byte2;
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(byteArray0, byteArray0);
      assertEquals("{-67=-67, -104=-104, 126=126}", tByteByteHashMap0.toString());
      
      tByteByteHashMap0._set = byteArray0;
      assertEquals("{-104=126}", tByteByteHashMap0.toString());
  }

//   @Test
//   public void test13()  throws Throwable  {
//       int int0 = 307;
//       TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(int0);
//       tByteByteHashMap0.ensureCapacity(int0);
//       int int1 = 0;
//       TByteByteHashMap tByteByteHashMap1 = new TByteByteHashMap();
//       tByteByteHashMap1.tempDisableAutoCompaction();
//       TByteByteHashMap tByteByteHashMap2 = new TByteByteHashMap(int1, int1);
//       byte byte0 = (byte)31;
//       tByteByteHashMap0.get(byte0);
//       byte byte1 = (byte)77;
//       tByteByteHashMap2.setAutoCompactionFactor((float) byte1);
//       tByteByteHashMap0.keySet();
//       byte byte2 = (byte) (-120);
//       byte byte3 = (byte)0;
//       tByteByteHashMap2.increment(byte3);
//       byte byte4 = (byte)108;
//       tByteByteHashMap2.increment(byte4);
//       tByteByteHashMap2.adjustOrPutValue(byte1, byte2, byte3);
//       tByteByteHashMap2.keySet();
//       assertEquals(7, tByteByteHashMap2.capacity());
//       
//       int int2 = 1205;
//       TByteByteHashMap tByteByteHashMap3 = new TByteByteHashMap(int2, int2);
//       TByteByteHashMap tByteByteHashMap4 = new TByteByteHashMap(int2);
//       assertEquals(0, tByteByteHashMap4.getNoEntryValue());
//   }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(int0, int0);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-1);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-80);
      byteArray0[1] = byte1;
      byte byte2 = (byte)117;
      byteArray0[2] = byte2;
      tByteByteHashMap0._set = byteArray0;
      int int1 = 1711;
      float float0 = 6.6360896E8F;
      byte byte3 = (byte)1;
      byte byte4 = (byte) (-1);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = byte4;
      byteArray1[1] = byte4;
      byteArray1[2] = byte4;
      byteArray1[3] = byte3;
      byteArray1[4] = byte4;
      byte byte5 = (byte)1;
      byteArray1[5] = byte5;
      TByteByteHashMap tByteByteHashMap1 = new TByteByteHashMap(byteArray1, byteArray1);
      TByteByteHashMap tByteByteHashMap2 = new TByteByteHashMap(int1, float0, byte3, byte4);
      TByteByteHashMap tByteByteHashMap3 = new TByteByteHashMap((TByteByteMap) tByteByteHashMap2);
      tByteByteHashMap2.trimToSize();
      tByteByteHashMap2.tempDisableAutoCompaction();
      int int2 = 788;
      tByteByteHashMap1.ensureCapacity(int2);
      TByteByteHashMap tByteByteHashMap4 = new TByteByteHashMap((TByteByteMap) tByteByteHashMap3);
      tByteByteHashMap4.size();
      TByteByteHashMap tByteByteHashMap5 = new TByteByteHashMap();
      TByteByteHashMap tByteByteHashMap6 = new TByteByteHashMap((TByteByteMap) tByteByteHashMap5);
      tByteByteHashMap4.putAll((TByteByteMap) tByteByteHashMap2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: FFFFFF01
         //
      }
  }

//   @Test
//   public void test15()  throws Throwable  {
//       byte[] byteArray0 = new byte[8];
//       byte byte0 = (byte)35;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)111;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)68;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte) (-21);
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)83;
//       byteArray0[4] = byte4;
//       byte byte5 = (byte)76;
//       byteArray0[5] = byte5;
//       byte byte6 = (byte)0;
//       byteArray0[6] = byte6;
//       byte byte7 = (byte)80;
//       byteArray0[7] = byte7;
//       TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(byteArray0, byteArray0);
//       byte[] byteArray1 = tByteByteHashMap0.values(byteArray0);
//       assertEquals(0, tByteByteHashMap0.getNoEntryKey());
//       assertNotNull(byteArray1);
//       assertEquals("{0=0, 83=83, 80=80, 111=111, 76=76, -21=-21, 35=35, 68=68}", tByteByteHashMap0.toString());
//   }

  @Test
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 0;
          int int1 = 637;
          TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(int1);
          tByteByteHashMap0.isEmpty();
          float float0 = 0.5F;
          TByteByteHashMap tByteByteHashMap1 = new TByteByteHashMap(int0);
          byte byte0 = (byte) (-10);
          tByteByteHashMap1.increment(byte0);
          TByteByteHashMap tByteByteHashMap2 = new TByteByteHashMap(int0, float0);
          byte byte1 = (byte) (-90);
          int int2 = 0;
          String string0 = "No free or removed slots available. Key set full?!!";
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"No free or removed slots available. Key set full?!!\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)12;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-40);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-6);
      int int0 = (-174);
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(int0);
      TByteByteHashMap tByteByteHashMap1 = new TByteByteHashMap((TByteByteMap) tByteByteHashMap0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) pipedInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }
}
