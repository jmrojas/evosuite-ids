/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TDoubleLongMap;
import gnu.trove.map.hash.TDoubleLongHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.AbstractMap;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleLongHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 113;
      long long0 = 9223372036854775807L;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(int0, (float) int0, (double) int0, long0);
      double double0 = 0.0;
      long long1 = (-1280L);
      tDoubleLongHashMap0.adjustValue(double0, long1);
      double double1 = 1.0;
      long long2 = 0L;
      long long3 = tDoubleLongHashMap0.putIfAbsent(double1, long2);
      assertEquals(1, tDoubleLongHashMap0.size());
      assertEquals(9223372036854775807L, long3);
  }

  @Test
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 106.00935703885732;
      doubleArray0[0] = double0;
      double double1 = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = double1;
      double double2 = 884.7284597596469;
      doubleArray0[2] = double2;
      double double3 = 1220.8018632910714;
      doubleArray0[3] = double3;
      double double4 = 1996.0513614795118;
      doubleArray0[4] = double4;
      long[] longArray0 = new long[6];
      long long0 = (-1879L);
      longArray0[0] = long0;
      long long1 = 631L;
      longArray0[1] = long1;
      long long2 = (-2031L);
      longArray0[2] = long2;
      long long3 = (-529L);
      longArray0[3] = long3;
      long long4 = 94L;
      longArray0[4] = long4;
      long long5 = 1L;
      longArray0[5] = long5;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(doubleArray0, longArray0);
      assertEquals(5, tDoubleLongHashMap0.size());
      assertEquals("{106.00935703885732=-1879, -Infinity=631, 1996.0513614795118=94, 884.7284597596469=-2031, 1220.8018632910714=-529}", tDoubleLongHashMap0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      float float0 = 10.0F;
      double double0 = 0.0;
      long long0 = (-1L);
      double[] doubleArray0 = new double[7];
      double double1 = (-1.0);
      doubleArray0[0] = double1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) long0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = double0;
      double double2 = 1995.679963846252;
      doubleArray0[5] = double2;
      doubleArray0[6] = (double) int0;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) int0;
      longArray0[1] = long0;
      longArray0[0] = (long) int0;
      long long1 = (-1840L);
      longArray0[1] = long1;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(doubleArray0, longArray0);
      double double3 = 0.0;
      tDoubleLongHashMap0.get(double3);
      TDoubleLongHashMap tDoubleLongHashMap1 = new TDoubleLongHashMap(int0, float0, double0, long0);
      TDoubleProcedure tDoubleProcedure0 = null;
      tDoubleLongHashMap1.forEach(tDoubleProcedure0);
      TDoubleLongHashMap tDoubleLongHashMap2 = new TDoubleLongHashMap();
      tDoubleLongHashMap2.valueCollection();
      double double4 = tDoubleLongHashMap2.getNoEntryKey();
      double double5 = 0.0;
      long long2 = tDoubleLongHashMap2.remove(double5);
      AbstractMap.SimpleEntry<Long, Double> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, Double>((Long) long2, (Double) double4);
      abstractMap_SimpleEntry0.getKey();
      abstractMap_SimpleEntry0.hashCode();
      tDoubleLongHashMap2.adjustOrPutValue((double) long2, long2, long2);
      long long3 = 106L;
      boolean boolean0 = tDoubleLongHashMap2.adjustValue(double4, long3);
      assertEquals(false, tDoubleLongHashMap2.isEmpty());
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap();
      double double0 = 0.0;
      tDoubleLongHashMap0.contains(double0);
      String string0 = "_mmX!gy]f_m*";
      long long0 = 420L;
      tDoubleLongHashMap0.put(double0, long0);
      Locale locale0 = Locale.forLanguageTag(string0);
      String string1 = locale0.toLanguageTag();
      AbstractMap.SimpleImmutableEntry<Double, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Object>((Double) double0, (Object) string1);
      tDoubleLongHashMap0.capacity();
      long long1 = (-9223372036854775808L);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale1 = null;
      // Undeclared exception!
      try {
        Locale.setDefault(locale_Category0, locale1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can't set default locale to NULL
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 1;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap();
      TDoubleLongHashMap tDoubleLongHashMap1 = new TDoubleLongHashMap(int0);
      boolean boolean0 = true;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      double double0 = 1.0;
      doubleArray0[2] = double0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      long[] longArray0 = new long[9];
      long long0 = 0L;
      longArray0[0] = long0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      longArray0[6] = (long) int0;
      longArray0[7] = (long) int0;
      longArray0[8] = (long) int0;
      TDoubleLongHashMap tDoubleLongHashMap2 = new TDoubleLongHashMap(doubleArray0, longArray0);
      TDoubleLongHashMap tDoubleLongHashMap3 = new TDoubleLongHashMap((TDoubleLongMap) tDoubleLongHashMap2);
      tDoubleLongHashMap1.reenableAutoCompaction(boolean0);
      TDoubleLongHashMap tDoubleLongHashMap4 = new TDoubleLongHashMap();
      assertEquals(23, tDoubleLongHashMap4.capacity());
      
      tDoubleLongHashMap4.compact();
      assertEquals(3, tDoubleLongHashMap4.capacity());
      assertFalse(tDoubleLongHashMap4.equals(tDoubleLongHashMap3));
  }

  @Test
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 1478.790403771923;
      doubleArray0[0] = double0;
      double double1 = (-1060.506358183414);
      doubleArray0[1] = double1;
      double double2 = 1612.0770800129196;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = 0.0;
      doubleArray0[5] = double5;
      long[] longArray0 = new long[3];
      long long0 = 1311L;
      longArray0[0] = long0;
      long long1 = 1658L;
      longArray0[1] = long1;
      long long2 = 217L;
      longArray0[2] = long2;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(doubleArray0, longArray0);
      boolean boolean0 = tDoubleLongHashMap0.isEmpty();
      assertEquals("{1612.0770800129196=217, -1060.506358183414=1658, 1478.790403771923=1311}", tDoubleLongHashMap0.toString());
      assertEquals(false, boolean0);
      
      TDoubleLongHashMap tDoubleLongHashMap1 = new TDoubleLongHashMap();
      tDoubleLongHashMap1.getAutoCompactionFactor();
      int int0 = 0;
      float float0 = (-334.741F);
      TDoubleLongHashMap tDoubleLongHashMap2 = new TDoubleLongHashMap(int0, float0);
      tDoubleLongHashMap2.trimToSize();
      assertEquals("{}", tDoubleLongHashMap2.toString());
      
      tDoubleLongHashMap2.getNoEntryKey();
      assertEquals(3, tDoubleLongHashMap2.capacity());
      assertEquals(true, tDoubleLongHashMap2.isEmpty());
      assertFalse(tDoubleLongHashMap2.equals(tDoubleLongHashMap0));
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 1346;
      float float0 = (-64.003365F);
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(int0, float0);
      TDoubleLongHashMap tDoubleLongHashMap1 = new TDoubleLongHashMap((TDoubleLongMap) tDoubleLongHashMap0);
      tDoubleLongHashMap1.containsKey((double) float0);
      assertEquals(0.0, tDoubleLongHashMap1.getNoEntryKey(), 0.01D);
      assertEquals(3, tDoubleLongHashMap0.capacity());
      assertEquals(3, tDoubleLongHashMap1.capacity());
      assertEquals(0L, tDoubleLongHashMap1.getNoEntryValue());
  }

  @Test
  public void test8()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 2.0;
      doubleArray0[0] = double0;
      double double1 = 1.0;
      doubleArray0[1] = double1;
      double double2 = 1349.3057032448428;
      doubleArray0[2] = double2;
      double double3 = 2.0;
      doubleArray0[3] = double3;
      long[] longArray0 = new long[1];
      long long0 = (-1421L);
      longArray0[0] = long0;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(doubleArray0, longArray0);
      assertEquals("{2.0=-1421}", tDoubleLongHashMap0.toString());
      assertEquals(11, tDoubleLongHashMap0.capacity());
      
      int int0 = 7643;
      TDoubleLongHashMap tDoubleLongHashMap1 = new TDoubleLongHashMap(int0, int0);
      assertFalse(tDoubleLongHashMap1.equals(tDoubleLongHashMap0));
  }

  @Test
  public void test9()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 1298.313998203735;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = (-1.0);
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = 935.9354740668631;
      doubleArray0[5] = double5;
      double double6 = 1432.6557819264829;
      doubleArray0[6] = double6;
      double double7 = 34.99904231084759;
      doubleArray0[7] = double7;
      long[] longArray0 = new long[8];
      long long0 = 0L;
      longArray0[0] = long0;
      long long1 = 2021L;
      longArray0[1] = long1;
      long long2 = 1259L;
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      long long4 = (-9223372036854775808L);
      longArray0[4] = long4;
      long long5 = 1058L;
      longArray0[5] = long5;
      long long6 = (-1858L);
      longArray0[6] = long6;
      long long7 = 0L;
      longArray0[7] = long7;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(doubleArray0, longArray0);
      assertEquals(false, tDoubleLongHashMap0.isEmpty());
      
      tDoubleLongHashMap0.clear();
      assertEquals("{}", tDoubleLongHashMap0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap();
      double double0 = Double.NEGATIVE_INFINITY;
      long long0 = 0L;
      tDoubleLongHashMap0.putIfAbsent(double0, long0);
      assertEquals("{-Infinity=0}", tDoubleLongHashMap0.toString());
      
      tDoubleLongHashMap0.clear();
      boolean boolean0 = true;
      tDoubleLongHashMap0.reenableAutoCompaction(boolean0);
      TDoubleLongHashMap tDoubleLongHashMap1 = new TDoubleLongHashMap((TDoubleLongMap) tDoubleLongHashMap0);
      assertEquals(23, tDoubleLongHashMap1.capacity());
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-1610.320210052693);
      doubleArray0[0] = double0;
      double double1 = (-1.0);
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      long[] longArray0 = new long[10];
      long long0 = (-1L);
      longArray0[0] = long0;
      long long1 = (-984L);
      longArray0[1] = long1;
      long long2 = 178L;
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      long long4 = 0L;
      longArray0[4] = long4;
      long long5 = (-1769L);
      longArray0[5] = long5;
      long long6 = 1L;
      longArray0[6] = long6;
      long long7 = (-679L);
      longArray0[7] = long7;
      long long8 = 647L;
      longArray0[8] = long8;
      long long9 = 595L;
      longArray0[9] = long9;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(doubleArray0, longArray0);
      assertEquals(23, tDoubleLongHashMap0.capacity());
      assertEquals(false, tDoubleLongHashMap0.isEmpty());
      assertEquals("{-1610.320210052693=-1, -1.0=-984, 0.0=178}", tDoubleLongHashMap0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = (-1061.9631330049854);
      doubleArray0[1] = double1;
      double double2 = (-518.8123254303259);
      doubleArray0[2] = double2;
      double double3 = 2.0;
      doubleArray0[3] = double3;
      long[] longArray0 = new long[5];
      long long0 = (-1L);
      longArray0[0] = long0;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap();
      long[] longArray1 = tDoubleLongHashMap0.values(longArray0);
      assertNotNull(longArray1);
      
      long long1 = 0L;
      longArray0[1] = long1;
      long long2 = (-916L);
      longArray0[2] = long2;
      long long3 = 0L;
      int int0 = (-832);
      float float0 = 1.0F;
      double double4 = 1182.24508790899;
      long long4 = 0L;
      TDoubleLongHashMap tDoubleLongHashMap1 = new TDoubleLongHashMap(int0, float0, double4, long4);
      longArray0[3] = long3;
      long long5 = (-1587L);
      longArray0[4] = long5;
      TDoubleLongHashMap tDoubleLongHashMap2 = new TDoubleLongHashMap(doubleArray0, longArray0);
      TDoubleLongHashMap tDoubleLongHashMap3 = new TDoubleLongHashMap((TDoubleLongMap) tDoubleLongHashMap2);
      int int1 = tDoubleLongHashMap2.hashCode();
      assertEquals((-1542266389), int1);
      
      tDoubleLongHashMap0.capacity();
      float float1 = 6.6360896E8F;
      tDoubleLongHashMap3.setAutoCompactionFactor(float1);
      assertEquals("{-518.8123254303259=-916, -1061.9631330049854=0, 2.0=0, 0.0=-1}", tDoubleLongHashMap3.toString());
      assertEquals(23, tDoubleLongHashMap3.capacity());
      
      long[] longArray2 = tDoubleLongHashMap2.values();
      assertNotNull(longArray2);
      assertFalse(tDoubleLongHashMap2.equals(tDoubleLongHashMap0));
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 341.3535594727086;
      doubleArray0[0] = double0;
      long[] longArray0 = new long[6];
      long long0 = (-1900L);
      longArray0[0] = long0;
      long long1 = 0L;
      longArray0[1] = long1;
      long long2 = (-1L);
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      long long4 = 0L;
      longArray0[4] = long4;
      long long5 = 0L;
      longArray0[5] = long5;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(doubleArray0, longArray0);
      double double1 = (-1850.9378596411868);
      boolean boolean0 = tDoubleLongHashMap0.adjustValue(double1, longArray0[3]);
      assertEquals("{341.3535594727086=-1900}", tDoubleLongHashMap0.toString());
      assertEquals(1, tDoubleLongHashMap0.size());
      assertEquals(17, tDoubleLongHashMap0.capacity());
      assertEquals(false, boolean0);
  }
}
