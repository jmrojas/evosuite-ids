/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TFloatObjectMap;
import gnu.trove.map.hash.TFloatObjectHashMap;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InterruptedIOException;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.AbstractMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatObjectHashMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


//   @Test
//   public void test0()  throws Throwable  {
//       String string0 = ".osWP";
//       Float float0 = null;
//       AbstractMap.SimpleEntry<String, Float> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Float>(string0, float0);
//       Object object0 = null;
//       abstractMap_SimpleEntry0.equals(object0);
//       int int0 = (-1);
//       TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>(int0);
//       tFloatObjectHashMap0.isEmpty();
//       float float1 = (-1399.855F);
//       tFloatObjectHashMap0.contains(float1);
//       assertEquals(0.0F, tFloatObjectHashMap0.getNoEntryKey(), 0.01F);
//   }

//   @Test
//   public void test1()  throws Throwable  {
//       int int0 = 0;
//       float float0 = (-936.5358F);
//       TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>(int0, float0);
//       String[] stringArray0 = new String[6];
//       String string0 = "Can not grow ArrayList wrapped external array";
//       stringArray0[0] = string0;
//       String string1 = "";
//       stringArray0[1] = string1;
//       String string2 = "FsVep}vBbTAB9N1?KfM";
//       stringArray0[2] = string2;
//       String string3 = "x\"4] d";
//       stringArray0[3] = string3;
//       String string4 = "";
//       stringArray0[4] = string4;
//       String string5 = " ";
//       stringArray0[5] = string5;
//       String[] stringArray1 = tFloatObjectHashMap0.values(stringArray0);
//       assertSame(stringArray1, stringArray0);
//       assertEquals(0.0F, tFloatObjectHashMap0.getNoEntryKey(), 0.01F);
//       assertNotNull(stringArray1);
//   }

  @Test
  public void test2()  throws Throwable  {
      TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>();
      int int0 = (-712);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

//   @Test
//   public void test3()  throws Throwable  {
//       int int0 = (-1851);
//       TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(int0, int0);
//       assertEquals(0.0F, tFloatObjectHashMap0.getNoEntryKey(), 0.01F);
//   }

//   @Test
//   public void test4()  throws Throwable  {
//       int int0 = (-1327);
//       float float0 = (-998.9615F);
//       float float1 = (-1589.9509F);
//       TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(int0, float0, float1);
//       tFloatObjectHashMap0.containsKey((float) int0);
//       assertEquals((-1589.9509F), tFloatObjectHashMap0.getNoEntryKey(), 0.01F);
//   }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 0;
      float float0 = (-1984.36F);
      TFloatObjectMap<String> tFloatObjectMap0 = null;
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = null;
      try {
        tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>(tFloatObjectMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 976;
      float float0 = 0.0F;
      float float1 = (-468.99008F);
      TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>(int0, float0, float1);
      float[] floatArray0 = new float[10];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      float float2 = 1.4E-45F;
      floatArray0[2] = float2;
      float float3 = (-1327.3245F);
      floatArray0[3] = float3;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) int0;
      floatArray0[6] = float1;
      floatArray0[7] = float1;
      floatArray0[8] = float1;
      float float4 = 0.0F;
      floatArray0[9] = float4;
      tFloatObjectHashMap0._set = floatArray0;
      TFloatObjectHashMap<Object> tFloatObjectHashMap1 = new TFloatObjectHashMap<Object>(int0, float0);
      OutputStream outputStream0 = null;
      float float5 = 10.0F;
      tFloatObjectHashMap1.iterator();
      TFloatObjectHashMap<Integer> tFloatObjectHashMap2 = new TFloatObjectHashMap<Integer>(int0, (float) int0, float5);
      tFloatObjectHashMap2.trimToSize();
      TFloatObjectHashMap<Object> tFloatObjectHashMap3 = new TFloatObjectHashMap<Object>((TFloatObjectMap<?>) tFloatObjectHashMap1);
      tFloatObjectHashMap1.putAll((TFloatObjectMap<?>) tFloatObjectHashMap3);
      tFloatObjectHashMap3.getNoEntryKey();
      tFloatObjectHashMap1.hashCode();
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 2027;
      float float0 = 342.2543F;
      TFloatObjectHashMap<AbstractMap.SimpleImmutableEntry<Float, Float>> tFloatObjectHashMap0 = new TFloatObjectHashMap<AbstractMap.SimpleImmutableEntry<Float, Float>>(int0, float0);
      ObjectInput objectInput0 = null;
      // Undeclared exception!
      try {
        tFloatObjectHashMap0.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 376;
      float float0 = 1987.4539F;
      TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>(int0, float0);
      String[] stringArray0 = new String[8];
      String string0 = "n46Zm3=O";
      stringArray0[0] = string0;
      String string1 = "TUopnf:a01";
      stringArray0[1] = string1;
      String string2 = "aNEW1OL{z(}]'`k";
      stringArray0[2] = string2;
      String string3 = "M_ !ioO#w";
      stringArray0[3] = string3;
      String string4 = "~%&5`xu";
      stringArray0[4] = string4;
      String string5 = "#R<+BlvQ+";
      stringArray0[5] = string5;
      String string6 = "+|ye\\1ja~";
      stringArray0[6] = string6;
      String string7 = "u0";
      stringArray0[7] = string7;
      tFloatObjectHashMap0.values(stringArray0);
      String string8 = "";
      tFloatObjectHashMap0.putIfAbsent((float) int0, string8);
      assertEquals(1, tFloatObjectHashMap0.size());
      
      int int1 = (-1632);
      float float1 = 1629.5377F;
      TFloatObjectHashMap<Integer> tFloatObjectHashMap1 = new TFloatObjectHashMap<Integer>(int1, (float) int0, float1);
      tFloatObjectHashMap1.trimToSize();
      assertEquals(3, tFloatObjectHashMap1.capacity());
  }

  @Test
  public void test9()  throws Throwable  {
      TFloatObjectHashMap<AbstractMap.SimpleImmutableEntry<Object, Float>> tFloatObjectHashMap0 = new TFloatObjectHashMap<AbstractMap.SimpleImmutableEntry<Object, Float>>();
      PipedOutputStream pipedOutputStream0 = null;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-620);
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>(int0, int0, int0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tFloatObjectHashMap0._states);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream((InputStream) pushbackInputStream0, (InputStream) pushbackInputStream0);
      tFloatObjectHashMap0.get((float) int0);
      int int1 = 953;
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream((InputStream) sequenceInputStream0, int1);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pushbackInputStream1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
      }
  }

//   @Test
//   public void test11()  throws Throwable  {
//       int int0 = 1024;
//       TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(int0);
//       tFloatObjectHashMap0.ensureCapacity(int0);
//       PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
//       PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
//       ObjectInputStream objectInputStream0 = null;
//       try {
//         objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
//         fail("Expecting exception: InterruptedIOException");
//       
//       } catch(InterruptedIOException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 1500;
          TFloatObjectHashMap<TFloatObjectHashMap<Integer>> tFloatObjectHashMap0 = new TFloatObjectHashMap<TFloatObjectHashMap<Integer>>(int0);
          TFloatObjectHashMap<Float> tFloatObjectHashMap1 = new TFloatObjectHashMap<Float>();
          int int1 = 0;
          TFloatObjectHashMap<AbstractMap.SimpleEntry<Object, String>> tFloatObjectHashMap2 = new TFloatObjectHashMap<AbstractMap.SimpleEntry<Object, String>>();
          tFloatObjectHashMap2.iterator();
          tFloatObjectHashMap1.keySet();
          String string0 = "";
          tFloatObjectHashMap1.trimToSize();
          File file0 = new File(string0, string0);
          boolean boolean0 = true;
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(file0, boolean0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // sun.reflect.GeneratedConstructorAccessor21.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

//   @Test
//   public void test13()  throws Throwable  {
//       TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>();
//       int int0 = (-720);
//       float float0 = 10.0F;
//       TFloatObjectHashMap<TFloatObjectHashMap<Float>> tFloatObjectHashMap1 = new TFloatObjectHashMap<TFloatObjectHashMap<Float>>();
//       PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
//       PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
//       ObjectInputStream objectInputStream0 = null;
//       try {
//         objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
//         fail("Expecting exception: InterruptedIOException");
//       
//       } catch(InterruptedIOException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }
}
