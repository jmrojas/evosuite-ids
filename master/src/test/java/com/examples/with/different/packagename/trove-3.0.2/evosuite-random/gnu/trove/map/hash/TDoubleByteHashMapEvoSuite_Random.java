/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TDoubleByteMap;
import gnu.trove.map.hash.TDoubleByteHashMap;
import gnu.trove.procedure.TByteProcedure;
import gnu.trove.set.TDoubleSet;
import java.net.URI;
import java.net.URISyntaxException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleByteHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-1082);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-128);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-14);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      boolean boolean0 = false;
      tDoubleByteHashMap0.reenableAutoCompaction(boolean0);
      assertEquals(17, tDoubleByteHashMap0.capacity());
      assertEquals("{-1082.0=0}", tDoubleByteHashMap0.toString());
      assertEquals(1, tDoubleByteHashMap0.size());
      
      byte byte4 = (byte)0;
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap(int0, (float) int0, (double) int0, byte4);
      tDoubleByteHashMap1.compact();
      assertEquals("{}", tDoubleByteHashMap1.toString());
      
      int int1 = tDoubleByteHashMap1.capacity();
      assertEquals(3, int1);
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 1821;
      double[] doubleArray0 = new double[10];
      double double0 = (-824.4065334074392);
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      doubleArray0[8] = (double) int0;
      doubleArray0[9] = (double) int0;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-97);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-54);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-124);
      byteArray0[3] = byte3;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      int int1 = 0;
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap(int1);
      tDoubleByteHashMap1.tempDisableAutoCompaction();
      tDoubleByteHashMap1.toString();
      TByteProcedure tByteProcedure0 = null;
      tDoubleByteHashMap1.forEachValue(tByteProcedure0);
      TDoubleByteHashMap tDoubleByteHashMap2 = new TDoubleByteHashMap(int0);
      byte byte4 = (byte) (-107);
      byte byte5 = tDoubleByteHashMap1.putIfAbsent((double) int0, byte4);
      tDoubleByteHashMap2.toString();
      tDoubleByteHashMap1.getNoEntryValue();
      tDoubleByteHashMap1.ensureCapacity((int) byte5);
      double double1 = 0.0;
      tDoubleByteHashMap1.get(double1);
      boolean boolean0 = tDoubleByteHashMap1.containsKey(double1);
      tDoubleByteHashMap2.hashCode();
      tDoubleByteHashMap2.iterator();
      tDoubleByteHashMap1.reenableAutoCompaction(boolean0);
      tDoubleByteHashMap1.values();
      assertEquals(false, tDoubleByteHashMap1.isEmpty());
      
      boolean boolean1 = tDoubleByteHashMap1.increment((double) int0);
      assertEquals(true, boolean1);
  }

  @Test
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-60);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-124);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-57);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)104;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-100);
      byteArray0[6] = byte6;
      int int0 = 1701;
      float float0 = 883.4048F;
      byte byte7 = (byte) (-105);
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(int0, float0, (double) byte6, byte7);
      double double1 = (-1973.9238705798043);
      tDoubleByteHashMap0.containsKey(double1);
      assertEquals(true, tDoubleByteHashMap0.isEmpty());
      
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      boolean boolean0 = tDoubleByteHashMap1.isEmpty();
      assertEquals("{0.0=-60}", tDoubleByteHashMap1.toString());
      assertEquals(false, boolean0);
      assertEquals(17, tDoubleByteHashMap1.capacity());
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 1;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(int0);
      double double0 = 0.0;
      tDoubleByteHashMap0.contains(double0);
      int int1 = 0;
      double double1 = 0.0;
      byte byte0 = (byte)0;
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap(int1, (float) int1, double1, byte0);
      double double2 = (-511.51039647151555);
      float float0 = 1.0F;
      tDoubleByteHashMap1.size();
      TDoubleByteHashMap tDoubleByteHashMap2 = new TDoubleByteHashMap(int1, float0);
      boolean boolean0 = tDoubleByteHashMap1.adjustValue(double2, byte0);
      assertEquals(false, boolean0);
      
      int int2 = 1396;
      int int3 = tDoubleByteHashMap1.hashCode();
      assertEquals(0, int3);
      
      TDoubleByteHashMap tDoubleByteHashMap3 = new TDoubleByteHashMap(int2);
      TDoubleByteHashMap tDoubleByteHashMap4 = new TDoubleByteHashMap(int2);
      boolean boolean1 = true;
      tDoubleByteHashMap4.reenableAutoCompaction(boolean1);
      byte[] byteArray0 = tDoubleByteHashMap3._states;
      tDoubleByteHashMap4.clear();
      assertEquals(2879, tDoubleByteHashMap4.capacity());
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(int0);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)37;
      byteArray0[1] = byte1;
      byte byte2 = (byte)67;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-28);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      tDoubleByteHashMap0._states = byteArray0;
      assertSame(tDoubleByteHashMap0._states, byteArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-1);
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(int0);
      byte[] byteArray0 = new byte[3];
      int int1 = (-432);
      tDoubleByteHashMap0.ensureCapacity(int1);
      byte byte0 = (byte)0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) byte0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int1;
      doubleArray0[6] = (double) int1;
      doubleArray0[7] = (double) int1;
      tDoubleByteHashMap0._set = doubleArray0;
      byteArray0[0] = byte0;
      tDoubleByteHashMap0.tempDisableAutoCompaction();
      byteArray0[1] = byte0;
      byte byte1 = (byte) (-66);
      int int2 = (-468);
      float float0 = 1.0F;
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap(int2, float0, (double) byte1, byteArray0[0]);
      byteArray0[2] = byte1;
      byte byte2 = (byte)94;
      byteArray0[0] = byte2;
      byte byte3 = (byte) (-55);
      byteArray0[1] = byte3;
      byte byte4 = (byte)1;
      byteArray0[2] = byte4;
      float float1 = 0.0F;
      TDoubleByteHashMap tDoubleByteHashMap2 = new TDoubleByteHashMap((int) byteArray0[0], float1);
      tDoubleByteHashMap0.values(byteArray0);
      double double0 = 0.0;
      tDoubleByteHashMap2.increment(double0);
      TDoubleByteHashMap tDoubleByteHashMap3 = new TDoubleByteHashMap();
      tDoubleByteHashMap1.iterator();
      TDoubleSet tDoubleSet0 = tDoubleByteHashMap0.keySet();
      assertEquals(0.0, tDoubleSet0.getNoEntryValue(), 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      assertEquals(23, tDoubleByteHashMap0.capacity());
      
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)95;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-74);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte)81;
      byteArray0[3] = byte3;
      byte byte4 = (byte)12;
      byteArray0[4] = byte4;
      byte byte5 = (byte)90;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-14);
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-55);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-1);
      byteArray0[8] = byte8;
      byte byte9 = (byte)89;
      byteArray0[9] = byte9;
      tDoubleByteHashMap0._states = byteArray0;
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap((TDoubleByteMap) tDoubleByteHashMap0);
      double double0 = 0.0;
      byte byte10 = (byte)0;
      tDoubleByteHashMap1.adjustValue(double0, byte10);
      tDoubleByteHashMap0.isEmpty();
      // Undeclared exception!
      try {
        tDoubleByteHashMap0.hashCode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1176.101514202868);
      doubleArray0[0] = double0;
      int int0 = 1405;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)82;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      assertEquals("{0.0=82, -1176.101514202868=1}", tDoubleByteHashMap0.toString());
      
      float float0 = 0.0F;
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) float0;
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) float0;
      byte byte3 = (byte)0;
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap(int0, float0, (double) int0, byte3);
      TDoubleByteHashMap tDoubleByteHashMap2 = null;
      try {
        tDoubleByteHashMap2 = new TDoubleByteHashMap((TDoubleByteMap) tDoubleByteHashMap1);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(int0, int0);
      double double0 = (-1520.950258221614);
      byte byte0 = tDoubleByteHashMap0.remove(double0);
      assertEquals((byte)0, byte0);
      assertEquals(0, tDoubleByteHashMap0.size());
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      float float0 = (-514.85986F);
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      tDoubleByteHashMap0.tempDisableAutoCompaction();
      byte byte0 = (byte)1;
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap(int0, float0, (double) float0, byte0);
      TDoubleByteHashMap tDoubleByteHashMap2 = new TDoubleByteHashMap((TDoubleByteMap) tDoubleByteHashMap1);
      tDoubleByteHashMap2.keys();
      TDoubleByteHashMap tDoubleByteHashMap3 = new TDoubleByteHashMap(int0);
      byte[] byteArray0 = tDoubleByteHashMap3._states;
      assertNotNull(byteArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-450);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int0;
      double double0 = (-1130.5372172190125);
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      double double1 = 1.0;
      doubleArray0[5] = double1;
      double double2 = (-1.0);
      doubleArray0[6] = double2;
      doubleArray0[7] = (double) int0;
      double double3 = (-1549.727360909539);
      doubleArray0[8] = double3;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)114;
      byteArray0[1] = byte1;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      assertEquals(23, tDoubleByteHashMap0.capacity());
      assertEquals("{-450.0=0, -1130.5372172190125=114}", tDoubleByteHashMap0.toString());
      
      int int1 = 1017;
      byte byte2 = (byte)113;
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap(int1, (float) int1, (double) int1, byte2);
      tDoubleByteHashMap1.clear();
      assertEquals("{}", tDoubleByteHashMap1.toString());
      
      TDoubleByteHashMap tDoubleByteHashMap2 = new TDoubleByteHashMap(int0);
      assertFalse(tDoubleByteHashMap2.equals(tDoubleByteHashMap0));
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 174;
      float float0 = 1.0F;
      int int1 = 0;
      float float1 = 1609.5604F;
      double double0 = (-279.90021255015097);
      byte byte0 = (byte)115;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) float1;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) byte0;
      doubleArray0[5] = (double) byte0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byte byte1 = (byte)0;
      byteArray0[3] = byte1;
      byteArray0[4] = byte0;
      byte byte2 = (byte)0;
      byteArray0[5] = byte2;
      byteArray0[6] = byte0;
      byteArray0[7] = byte0;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap((TDoubleByteMap) tDoubleByteHashMap0);
      TDoubleByteHashMap tDoubleByteHashMap2 = new TDoubleByteHashMap((TDoubleByteMap) tDoubleByteHashMap1);
      byte byte3 = tDoubleByteHashMap2.getNoEntryValue();
      assertEquals(0.0, tDoubleByteHashMap1.getNoEntryKey(), 0.01D);
      assertEquals(false, tDoubleByteHashMap1.isEmpty());
      assertEquals((byte)0, byte3);
      assertEquals("{174.0=0, -279.90021255015097=115, 115.0=0, 1609.5604248046875=115}", tDoubleByteHashMap2.toString());
      
      TDoubleByteHashMap tDoubleByteHashMap3 = new TDoubleByteHashMap(int1, float1, double0, byte0);
      tDoubleByteHashMap3.getNoEntryValue();
      byte byte4 = (byte)0;
      TDoubleByteHashMap tDoubleByteHashMap4 = new TDoubleByteHashMap(int0, float0, (double) float0, byte4);
      String string0 = tDoubleByteHashMap4.toString();
      assertNotNull(string0);
      
      TDoubleByteHashMap tDoubleByteHashMap5 = new TDoubleByteHashMap(int0, int0);
      assertFalse(tDoubleByteHashMap5.equals(tDoubleByteHashMap1));
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 346;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(int0, int0);
      tDoubleByteHashMap0.tempDisableAutoCompaction();
      tDoubleByteHashMap0.size();
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap(int0, int0);
      tDoubleByteHashMap0.containsKey((double) int0);
      tDoubleByteHashMap1.valueCollection();
      tDoubleByteHashMap0.isEmpty();
      boolean boolean0 = tDoubleByteHashMap1.isEmpty();
      assertEquals(true, boolean0);
      
      byte[] byteArray0 = tDoubleByteHashMap0.values(tDoubleByteHashMap1._states);
      assertNotNull(byteArray0);
      
      tDoubleByteHashMap1.capacity();
      tDoubleByteHashMap1.keySet();
      assertEquals(true, tDoubleByteHashMap1.isEmpty());
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = (-1837.4688901140478);
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 685.3528962211439;
      doubleArray0[3] = double3;
      double double4 = 1711.7645366523288;
      doubleArray0[4] = double4;
      double double5 = Double.POSITIVE_INFINITY;
      doubleArray0[5] = double5;
      double double6 = (-1417.0238127390505);
      doubleArray0[6] = double6;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)41;
      byteArray0[0] = byte0;
      byte byte1 = (byte)19;
      byteArray0[1] = byte1;
      byte byte2 = (byte)1;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-55);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      byte byte5 = tDoubleByteHashMap0.remove(doubleArray0[3]);
      assertEquals(3, tDoubleByteHashMap0.size());
      assertEquals((byte) (-55), byte5);
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-1591.2022181129187);
      doubleArray0[0] = double0;
      double double1 = 1757.5552763706637;
      doubleArray0[1] = double1;
      double double2 = (-1810.075218330238);
      doubleArray0[2] = double2;
      double double3 = 609.7162757487454;
      doubleArray0[3] = double3;
      double double4 = 1.0;
      doubleArray0[4] = double4;
      double double5 = 850.4096143055012;
      doubleArray0[5] = double5;
      double double6 = (-472.7439307128471);
      doubleArray0[6] = double6;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      byte byte1 = (byte) (-113);
      byte byte2 = tDoubleByteHashMap0.put(doubleArray0[1], byte1);
      assertEquals(2, tDoubleByteHashMap0.size());
      assertEquals((byte)0, byte2);
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 262.9182188833645;
      doubleArray0[1] = double1;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-33);
      byteArray0[0] = byte0;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      String string0 = "^^J@13IX#MCSb";
      String string1 = "88[RFy=[APn6}gv3.";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ^^J@13IX#MCSb://^^J@13IX#MCSb88%5BRFy=%5BAPn6%7Dgv3.#88[RFy=[APn6%7Dgv3.
         //
      }
  }
}
