/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TShortFunction;
import gnu.trove.impl.sync.TSynchronizedRandomAccessShortList;
import gnu.trove.impl.sync.TSynchronizedShortList;
import gnu.trove.list.TShortList;
import gnu.trove.list.array.TShortArrayList;
import gnu.trove.list.linked.TShortLinkedList;
import gnu.trove.procedure.TShortProcedure;
import java.util.Random;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedShortListEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.binarySearch(S)I: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedShortList.<init>(Lgnu/trove/list/TShortList;)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList((short)0);
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortLinkedList0);
      int int0 = tSynchronizedShortList0.binarySearch((short)0);
      assertEquals((-1), int0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.set(I[SII)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortLinkedList0);
      short[] shortArray0 = new short[7];
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessShortList0.set(1814, shortArray0, (int) (short)0, (int) (short)8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 1814 exceeds size 0
         //
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.remove(II)V: root-Branch
   */

//   @Test
//   public void test2()  throws Throwable  {
//       TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
//       TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortLinkedList0);
//       tSynchronizedShortList0.remove((-10), (-10));
//       assertEquals(0, tSynchronizedShortList0.getNoEntryValue());
//   }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.reverse()V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortLinkedList0);
      tSynchronizedShortList0.reverse();
      assertEquals(0, tSynchronizedShortList0.size());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.lastIndexOf(S)I: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList((short)60);
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortLinkedList0);
      int int0 = tSynchronizedShortList0.lastIndexOf((short)60);
      assertEquals((-1), int0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.reverse(II)V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList((short)0);
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortLinkedList0);
      // Undeclared exception!
      try {
        tSynchronizedShortList0.reverse((int) (short)0, (int) (short)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.set(IS)S: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortArrayList0);
      // Undeclared exception!
      try {
        tSynchronizedShortList0.set((-1), (short)732);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.transformValues(Lgnu/trove/function/TShortFunction;)V: root-Branch
   */

//   @Test
//   public void test7()  throws Throwable  {
//       TShortLinkedList tShortLinkedList0 = new TShortLinkedList((short) (-2030));
//       TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortLinkedList0);
//       tSynchronizedShortList0.transformValues((TShortFunction) null);
//       assertEquals(-2030, tSynchronizedShortList0.getNoEntryValue());
//   }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.equals(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortArrayList0);
      boolean boolean0 = tSynchronizedShortList0.equals((Object) "");
      assertEquals(false, boolean0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.max()S: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessShortList0.max();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot find maximum of an empty list
         //
      }
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.removeAt(I)S: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortLinkedList0);
      // Undeclared exception!
      try {
        tSynchronizedShortList0.removeAt((-10));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no elemenet at -10
         //
      }
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.insert(IS)V: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
      tSynchronizedRandomAccessShortList0.insert((int) (short)0, (short)0);
      assertEquals(false, tSynchronizedRandomAccessShortList0.isEmpty());
      assertEquals("{0}", tShortArrayList0.toString());
  }

  //Test case number: 12
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.toArray(II)[S: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedShortList.<init>(Lgnu/trove/list/TShortList;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) null, (Object) "[]");
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessShortList0.toArray((-1007), (-1007));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.shuffle(Ljava/util/Random;)V: root-Branch
   */

//   @Test
//   public void test13()  throws Throwable  {
//       TShortLinkedList tShortLinkedList0 = new TShortLinkedList((short)0);
//       TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortLinkedList0);
//       Random random0 = new Random((long) (short)0);
//       tSynchronizedShortList0.shuffle(random0);
//       assertEquals(0.02308184F, random0.nextFloat(), 0.01F);
//   }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.indexOf(S)I: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList((short) (-278));
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortLinkedList0, (Object) "[]");
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessShortList0.indexOf((short) (-278));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.insert(I[SII)V: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortArrayList0);
      short[] shortArray0 = new short[7];
      tSynchronizedShortList0.insert((int) (short)0, shortArray0, (int) (short)0, (int) (short)0);
      assertEquals("{}", tSynchronizedShortList0.toString());
      assertEquals(true, tShortArrayList0.isEmpty());
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.inverseGrep(Lgnu/trove/procedure/TShortProcedure;)Lgnu/trove/list/TShortList;: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList((short) (-278));
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortLinkedList0, (Object) "[]");
      TShortLinkedList tShortLinkedList1 = (TShortLinkedList)tSynchronizedRandomAccessShortList0.inverseGrep((TShortProcedure) null);
      assertEquals("{}", tShortLinkedList1.toString());
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.toArray([SII)[S: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList((short)0);
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortLinkedList0);
      short[] shortArray0 = new short[9];
      short[] shortArray1 = tSynchronizedShortList0.toArray(shortArray0, 0, (int) (short)0);
      assertSame(shortArray0, shortArray1);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.subList(II)Lgnu/trove/list/TShortList;: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList((short)0);
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortLinkedList0);
      TSynchronizedShortList tSynchronizedShortList1 = (TSynchronizedShortList)tSynchronizedShortList0.subList(0, 0);
      assertEquals(0, tSynchronizedShortList1.size());
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.sort()V: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
      tSynchronizedRandomAccessShortList0.sort();
      assertEquals(0, tSynchronizedRandomAccessShortList0.size());
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.lastIndexOf(IS)I: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
      int int0 = tSynchronizedRandomAccessShortList0.lastIndexOf((int) (short) (-21), (short) (-21));
      assertEquals((-1), int0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.grep(Lgnu/trove/procedure/TShortProcedure;)Lgnu/trove/list/TShortList;: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList((short) (-278));
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortLinkedList0, (Object) "[]");
      TShortLinkedList tShortLinkedList1 = (TShortLinkedList)tSynchronizedRandomAccessShortList0.grep((TShortProcedure) null);
      assertEquals("{}", tShortLinkedList1.toString());
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.fill(IIS)V: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList((short)0);
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortLinkedList0);
      tSynchronizedShortList0.fill(0, (int) (short)0, (short)0);
      assertEquals("{}", tSynchronizedShortList0.toString());
      assertEquals(true, tShortLinkedList0.isEmpty());
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.get(I)S: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0, (Object) "ita");
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessShortList0.get((int) (short) (-6));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -6
         //
      }
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.insert(I[S)V: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(154);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
      short[] shortArray0 = new short[1];
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessShortList0.insert(154, shortArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.toArray([SIII)[S: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0, (Object) "ita");
      short[] shortArray0 = new short[15];
      short[] shortArray1 = tSynchronizedRandomAccessShortList0.toArray(shortArray0, (int) (short)0, (int) (short)0, (int) (short)0);
      assertSame(shortArray0, shortArray1);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.add([S)V: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList((short) (-278));
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortLinkedList0, (Object) "[]");
      short[] shortArray0 = new short[1];
      tSynchronizedRandomAccessShortList0.add(shortArray0);
      assertEquals(false, tShortLinkedList0.isEmpty());
      assertEquals("{0}", tSynchronizedRandomAccessShortList0.toString());
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.set(I[S)V: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList((short) (-13532));
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortLinkedList0);
      short[] shortArray0 = new short[3];
      // Undeclared exception!
      try {
        tSynchronizedShortList0.set((int) (short) (-13532), shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // at offset -13532
         //
      }
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.forEachDescending(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   */

  @Test
  public void test28()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortLinkedList0);
      boolean boolean0 = tSynchronizedShortList0.forEachDescending((TShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.min()S: root-Branch
   */

  @Test
  public void test29()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessShortList0.min();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot find minimum of an empty list
         //
      }
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.sum()S: root-Branch
   */

  @Test
  public void test30()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList((short)0);
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortLinkedList0);
      short short0 = tSynchronizedShortList0.sum();
      assertEquals((short)0, short0);
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.binarySearch(SII)I: root-Branch
   */

  @Test
  public void test31()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList((short)60);
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortLinkedList0);
      // Undeclared exception!
      try {
        tSynchronizedShortList0.binarySearch((short)60, (-12), (int) (short)60);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // begin index can not be < 0
         //
      }
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.sort(II)V: root-Branch
   */

//   @Test
//   public void test32()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList();
//       TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
//       tSynchronizedRandomAccessShortList0.sort((int) (short)0, (int) (short)0);
//       assertEquals(0, tSynchronizedRandomAccessShortList0.sum());
//   }

  //Test case number: 33
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.hashCode()I: root-Branch
   */

  @Test
  public void test33()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortArrayList0);
      int int0 = tSynchronizedShortList0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 34
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.add([SII)V: root-Branch
   */

  @Test
  public void test34()  throws Throwable  {
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) null, (Object) "[]");
      short[] shortArray0 = new short[7];
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessShortList0.add(shortArray0, (int) (short)0, (int) (short)1618);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.fill(S)V: root-Branch
   */

  @Test
  public void test35()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList((short) (-278));
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortLinkedList0, (Object) "[]");
      tSynchronizedRandomAccessShortList0.fill((short) (-278));
      assertEquals(0, tSynchronizedRandomAccessShortList0.size());
  }

  //Test case number: 36
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.replace(IS)S: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedShortList.<init>(Lgnu/trove/list/TShortList;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test36()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList((short) (-278));
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortLinkedList0, (Object) "[]");
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessShortList0.replace((int) (short) (-278), (short) (-278));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // at offset -278
         //
      }
  }

  //Test case number: 37
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortList.indexOf(IS)I: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedShortList.<init>(Lgnu/trove/list/TShortList;)V: root-Branch
   */

  @Test
  public void test37()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortArrayList0);
      int int0 = tSynchronizedShortList0.indexOf((int) (short)732, (short)732);
      assertEquals((-1), int0);
  }
}
