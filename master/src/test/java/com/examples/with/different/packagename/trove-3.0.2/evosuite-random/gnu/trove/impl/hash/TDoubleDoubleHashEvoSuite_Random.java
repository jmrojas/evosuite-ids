/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TDoubleDoubleMap;
import gnu.trove.map.hash.TDoubleDoubleHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleDoubleHashEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap();
      double double0 = tDoubleDoubleHashMap0.getNoEntryKey();
      assertEquals(0.0, tDoubleDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      
      int int0 = 1;
      int int1 = 654;
      double double1 = (-1790.4553873956336);
      double double2 = (-1.0);
      TDoubleDoubleHashMap tDoubleDoubleHashMap1 = new TDoubleDoubleHashMap(int1, (float) int0, double1, double2);
      double[] doubleArray0 = tDoubleDoubleHashMap1.values();
      assertNotNull(doubleArray0);
      assertEquals(673, tDoubleDoubleHashMap1.capacity());
      assertEquals((-1.0), tDoubleDoubleHashMap1.getNoEntryValue(), 0.01D);
      assertEquals((-1790.4553873956336), tDoubleDoubleHashMap1.getNoEntryKey(), 0.01D);
      
      float float0 = (-1980.86F);
      TDoubleDoubleHashMap tDoubleDoubleHashMap2 = new TDoubleDoubleHashMap(int0);
      boolean boolean0 = false;
      tDoubleDoubleHashMap2.reenableAutoCompaction(boolean0);
      TDoubleDoubleHashMap tDoubleDoubleHashMap3 = new TDoubleDoubleHashMap(int0, float0, (double) float0, (double) float0);
      tDoubleDoubleHashMap3.values();
      tDoubleDoubleHashMap3.getNoEntryKey();
      int int2 = 1;
      TDoubleDoubleHashMap tDoubleDoubleHashMap4 = new TDoubleDoubleHashMap(int2);
      tDoubleDoubleHashMap4.increment((double) float0);
      boolean boolean1 = tDoubleDoubleHashMap4.containsKey((double) int2);
      assertEquals(false, boolean1);
      
      byte[] byteArray0 = tDoubleDoubleHashMap4._states;
      assertEquals(0.0, tDoubleDoubleHashMap4.getNoEntryValue(), 0.01D);
      assertEquals(0.0, tDoubleDoubleHashMap4.getNoEntryKey(), 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 1607;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      int int1 = 1924;
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(int1);
      TDoubleDoubleHashMap tDoubleDoubleHashMap1 = new TDoubleDoubleHashMap(doubleArray0, doubleArray0);
      double[] doubleArray1 = tDoubleDoubleHashMap1.keys();
      assertNotNull(doubleArray1);
      
      float float0 = (-1859.3019F);
      TDoubleDoubleHashMap tDoubleDoubleHashMap2 = new TDoubleDoubleHashMap(int0, float0, (double) float0, (double) float0);
      tDoubleDoubleHashMap2.increment((double) int0);
      int int2 = 503;
      tDoubleDoubleHashMap2.ensureCapacity(int2);
      TDoubleDoubleHashMap tDoubleDoubleHashMap3 = new TDoubleDoubleHashMap(int2);
      tDoubleDoubleHashMap3.values();
      assertEquals(1039, tDoubleDoubleHashMap3.capacity());
      
      tDoubleDoubleHashMap3.compact();
      tDoubleDoubleHashMap3.values();
      doubleArray0[0] = (double) float0;
      tDoubleDoubleHashMap1.containsValue((double) int0);
      double double0 = 0.0;
      boolean boolean0 = tDoubleDoubleHashMap3.contains(double0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap();
      TDoubleDoubleHashMap tDoubleDoubleHashMap1 = new TDoubleDoubleHashMap((TDoubleDoubleMap) tDoubleDoubleHashMap0);
      TDoubleDoubleHashMap tDoubleDoubleHashMap2 = new TDoubleDoubleHashMap((TDoubleDoubleMap) tDoubleDoubleHashMap1);
      double[] doubleArray0 = new double[7];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      tDoubleDoubleHashMap2.getAutoCompactionFactor();
      doubleArray0[1] = double1;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = double0;
      doubleArray1[1] = double1;
      double[] doubleArray2 = tDoubleDoubleHashMap0.keys(doubleArray1);
      assertNotNull(doubleArray2);
      
      tDoubleDoubleHashMap2.isEmpty();
      double double2 = (-947.8434787297165);
      doubleArray0[2] = double2;
      double double3 = 355.74746701266645;
      doubleArray0[3] = double3;
      double double4 = 1.0;
      doubleArray0[4] = double4;
      double double5 = 0.0;
      tDoubleDoubleHashMap0.toString();
      doubleArray0[5] = double5;
      tDoubleDoubleHashMap1.isEmpty();
      double double6 = 0.0;
      doubleArray0[6] = double6;
      double double7 = tDoubleDoubleHashMap0.getNoEntryKey();
      assertEquals(0.0, double7, 0.01D);
      
      double[] doubleArray3 = tDoubleDoubleHashMap0.values(doubleArray0);
      assertEquals(0.0, tDoubleDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals(23, tDoubleDoubleHashMap0.capacity());
      assertNotNull(doubleArray3);
      assertEquals(0.0, tDoubleDoubleHashMap0.getNoEntryKey(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 1141.4273730380305;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 1.0;
      doubleArray0[3] = double3;
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(doubleArray0, doubleArray0);
      double double4 = tDoubleDoubleHashMap0.getNoEntryValue();
      assertEquals(0.0, tDoubleDoubleHashMap0.getNoEntryKey(), 0.01D);
      assertEquals(0.0, double4, 0.01D);
      assertEquals(3, tDoubleDoubleHashMap0.size());
      assertEquals("{1.0=1.0, 1141.4273730380305=1141.4273730380305, 0.0=0.0}", tDoubleDoubleHashMap0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(doubleArray0, doubleArray0);
      double double1 = (-106.31506724254119);
      boolean boolean0 = tDoubleDoubleHashMap0.contains(double1);
      assertEquals(1, tDoubleDoubleHashMap0.size());
      assertEquals(0.0, tDoubleDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals("{0.0=0.0}", tDoubleDoubleHashMap0.toString());
      assertEquals(0.0, tDoubleDoubleHashMap0.getNoEntryKey(), 0.01D);
      assertEquals(false, boolean0);
      assertEquals(11, tDoubleDoubleHashMap0.capacity());
      
      double double2 = 1.0;
      TDoubleDoubleHashMap tDoubleDoubleHashMap1 = new TDoubleDoubleHashMap(int0, (float) int0, (double) int0, double2);
      ObjectInput objectInput0 = null;
      // Undeclared exception!
      try {
        tDoubleDoubleHashMap1.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap();
      tDoubleDoubleHashMap0.getNoEntryKey();
      double double0 = (-806.8878547618186);
      tDoubleDoubleHashMap0.containsValue(double0);
      double double1 = 0.0;
      tDoubleDoubleHashMap0.tempDisableAutoCompaction();
      double double2 = 0.0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 1967;
      float float0 = (-1166.4799F);
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(int0, float0);
      tDoubleDoubleHashMap0.clear();
      double[] doubleArray0 = new double[1];
      double double0 = 366.9813665920999;
      tDoubleDoubleHashMap0.iterator();
      int int1 = (-992);
      float float1 = (-15.387942F);
      TDoubleDoubleHashMap tDoubleDoubleHashMap1 = new TDoubleDoubleHashMap(int1, float1, (double) int1, double0);
      TDoubleProcedure tDoubleProcedure0 = null;
      tDoubleDoubleHashMap1.forEachValue(tDoubleProcedure0);
      doubleArray0[0] = double0;
      double double1 = 0.0;
      TDoubleDoubleHashMap tDoubleDoubleHashMap2 = new TDoubleDoubleHashMap();
      String string0 = "=";
      File file0 = new File(string0);
      File file1 = new File(file0, string0);
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(file1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // =/= (No such file or directory)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 1503.3174311366083;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) fileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream Closed
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 1;
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(int0, int0, int0, int0);
      assertEquals(1.0, tDoubleDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals(1.0, tDoubleDoubleHashMap0.getNoEntryKey(), 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 1975;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(doubleArray0, doubleArray0);
      float float0 = (-487.11346F);
      // Undeclared exception!
      try {
        tDoubleDoubleHashMap0.setAutoCompactionFactor(float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -487.11346
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = (-1574);
      int int1 = 2005;
      float float0 = 0.0F;
      double double0 = 484.2519205771112;
      double double1 = 0.0;
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(int1, float0, double0, double1);
      double double2 = tDoubleDoubleHashMap0.getNoEntryValue();
      assertEquals(0.0, double2, 0.01D);
      assertEquals(484.2519205771112, tDoubleDoubleHashMap0.getNoEntryKey(), 0.01D);
      
      TDoubleDoubleHashMap tDoubleDoubleHashMap1 = new TDoubleDoubleHashMap(int0);
      tDoubleDoubleHashMap1.valueCollection();
      double double3 = Double.POSITIVE_INFINITY;
      doubleArray0[0] = double3;
      double double4 = 1648.0897944365458;
      doubleArray0[1] = double4;
      double double5 = 407.03481013473623;
      doubleArray0[2] = double5;
      double double6 = 1.0;
      TDoubleDoubleHashMap tDoubleDoubleHashMap2 = new TDoubleDoubleHashMap(doubleArray0, doubleArray0);
      tDoubleDoubleHashMap2.trimToSize();
      double double7 = 0.0;
      tDoubleDoubleHashMap2.containsValue(double7);
      assertEquals("{407.03481013473623=407.03481013473623, 1648.0897944365458=1648.0897944365458, Infinity=Infinity, 0.0=0.0}", tDoubleDoubleHashMap2.toString());
      
      doubleArray0[3] = double6;
      double double8 = (-616.4988437803908);
      doubleArray0[4] = double8;
      TDoubleDoubleHashMap tDoubleDoubleHashMap3 = new TDoubleDoubleHashMap(doubleArray0, doubleArray0);
      tDoubleDoubleHashMap3.valueCollection();
      assertFalse(tDoubleDoubleHashMap3.equals(tDoubleDoubleHashMap2));
      
      int int2 = (-970);
      TDoubleDoubleHashMap tDoubleDoubleHashMap4 = new TDoubleDoubleHashMap(int2);
      tDoubleDoubleHashMap4.iterator();
      assertEquals(0.0, tDoubleDoubleHashMap4.getNoEntryKey(), 0.01D);
      assertEquals(0.0, tDoubleDoubleHashMap4.getNoEntryValue(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 541;
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      doubleArray0[8] = (double) int0;
      double double0 = (-1536.9268455019903);
      doubleArray0[9] = double0;
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) int0;
      doubleArray1[1] = double0;
      doubleArray1[2] = double0;
      double[] doubleArray2 = tDoubleDoubleHashMap0.keys(doubleArray1);
      assertNotNull(doubleArray2);
      
      TDoubleDoubleHashMap tDoubleDoubleHashMap1 = new TDoubleDoubleHashMap(int0);
      assertEquals(1117, tDoubleDoubleHashMap1.capacity());
      
      tDoubleDoubleHashMap1.compact();
      tDoubleDoubleHashMap1.tempDisableAutoCompaction();
      assertEquals(0.0, tDoubleDoubleHashMap1.getNoEntryValue(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(doubleArray0, doubleArray0);
      tDoubleDoubleHashMap0.hashCode();
      double double0 = 0.0;
      TDoubleDoubleHashMap tDoubleDoubleHashMap1 = new TDoubleDoubleHashMap(doubleArray0, doubleArray0);
      int int0 = tDoubleDoubleHashMap1.size();
      assertEquals(1, int0);
      
      int int1 = 165;
      tDoubleDoubleHashMap1.trimToSize();
      TDoubleDoubleHashMap tDoubleDoubleHashMap2 = new TDoubleDoubleHashMap(int1);
      TDoubleDoubleHashMap tDoubleDoubleHashMap3 = new TDoubleDoubleHashMap((TDoubleDoubleMap) tDoubleDoubleHashMap2);
      tDoubleDoubleHashMap1.get((double) int0);
      tDoubleDoubleHashMap1.putAll((TDoubleDoubleMap) tDoubleDoubleHashMap3);
      int int2 = (-259);
      float float0 = (-75.86702F);
      boolean boolean0 = tDoubleDoubleHashMap1.contains((double) int0);
      assertEquals(false, boolean0);
      
      TDoubleDoubleHashMap tDoubleDoubleHashMap4 = new TDoubleDoubleHashMap(int2, float0);
      tDoubleDoubleHashMap4.ensureCapacity(int2);
      float float1 = 0.0F;
      tDoubleDoubleHashMap2.keySet();
      tDoubleDoubleHashMap2.setAutoCompactionFactor(float1);
      doubleArray0[0] = double0;
      tDoubleDoubleHashMap3.values(tDoubleDoubleHashMap4._set);
      double double1 = 1819.154677881008;
      doubleArray0[0] = double1;
      TDoubleDoubleHashMap tDoubleDoubleHashMap5 = new TDoubleDoubleHashMap(doubleArray0, doubleArray0);
      TDoubleDoubleHashMap tDoubleDoubleHashMap6 = new TDoubleDoubleHashMap((TDoubleDoubleMap) tDoubleDoubleHashMap5);
      tDoubleDoubleHashMap5.size();
      TDoubleDoubleHashMap tDoubleDoubleHashMap7 = new TDoubleDoubleHashMap((TDoubleDoubleMap) tDoubleDoubleHashMap6);
      double double2 = 1080.1599828000471;
      tDoubleDoubleHashMap3.remove(double2);
      String string0 = tDoubleDoubleHashMap7.toString();
      assertEquals("{1819.154677881008=1819.154677881008}", string0);
      
      tDoubleDoubleHashMap4.tempDisableAutoCompaction();
      assertEquals(0.0, tDoubleDoubleHashMap4.getNoEntryValue(), 0.01D);
      assertTrue(tDoubleDoubleHashMap4.equals(tDoubleDoubleHashMap3));
      
      tDoubleDoubleHashMap5.capacity();
      ObjectInput objectInput0 = null;
      // Undeclared exception!
      try {
        tDoubleDoubleHashMap6.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap();
      float float0 = (-71.57252F);
      FileDescriptor fileDescriptor0 = null;
      FileOutputStream fileOutputStream0 = null;
      try {
        fileOutputStream0 = new FileOutputStream(fileDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-1037);
      float float0 = 1374.6063F;
      double double0 = 0.0;
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(int0, float0, double0, double0);
      assertEquals(0.0, tDoubleDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals(0.0, tDoubleDoubleHashMap0.getNoEntryKey(), 0.01D);
  }
}
