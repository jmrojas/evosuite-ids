/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.hash.TObjectHash;
import gnu.trove.iterator.hash.TObjectHashIterator;
import gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap;
import gnu.trove.set.hash.TCustomHashSet;
import gnu.trove.set.hash.THashSet;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.util.ConcurrentModificationException;
import java.util.NoSuchElementException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class THashIteratorEvoSuite_WeakMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 67 covered goals:
   * 1 Weak Mutation 4: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:91 - DeleteStatement: moveToNextIndex()V
   * 2 Weak Mutation 51: gnu.trove.impl.hash.THashIterator.moveToNextIndex()V:138 - ReplaceComparisonOperator >= -> -1
   * 3 Weak Mutation 48: gnu.trove.impl.hash.THashIterator.moveToNextIndex()V:138 - DeleteStatement: nextIndex()I
   * 4 Weak Mutation 54: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - InsertUnaryOp -1
   * 5 Weak Mutation 53: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - InsertUnaryOp +1
   * 6 Weak Mutation 52: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - InsertUnaryOp Negation
   * 7 Weak Mutation 59: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - ReplaceComparisonOperator == -> -2
   * 8 Weak Mutation 57: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - DeleteStatement: size()I
   * 9 Weak Mutation 56: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 10 Weak Mutation 62: gnu.trove.impl.hash.THashIterator.nextIndex()I:159 - DeleteField: _set[Ljava/lang/Object;
   * 11 Weak Mutation 61: gnu.trove.impl.hash.THashIterator.nextIndex()I:159 - DeleteField: _object_hashLgnu/trove/impl/hash/TObjectHash;
   * 12 Weak Mutation 63: gnu.trove.impl.hash.THashIterator.nextIndex()I:160 - InsertUnaryOp Negation
   * 13 Weak Mutation 64: gnu.trove.impl.hash.THashIterator.nextIndex()I:160 - InsertUnaryOp +1
   * 14 Weak Mutation 65: gnu.trove.impl.hash.THashIterator.nextIndex()I:160 - InsertUnaryOp -1
   * 15 Weak Mutation 66: gnu.trove.impl.hash.THashIterator.nextIndex()I:160 - DeleteField: _indexI
   * 16 Weak Mutation 68: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC 1 i
   * 17 Weak Mutation 69: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC -1 i
   * 18 Weak Mutation 71: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - ReplaceComparisonOperator <= -> <
   * 19 Weak Mutation 67: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp Negation of i
   * 20 Weak Mutation 76: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - DeleteField: FREELjava/lang/Object;
   * 21 Weak Mutation 77: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - ReplaceComparisonOperator == -> !=
   * 22 Weak Mutation 72: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - ReplaceComparisonOperator <= -> -1
   * 23 Weak Mutation 73: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp Negation of i
   * 24 Weak Mutation 74: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC 1 i
   * 25 Weak Mutation 75: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC -1 i
   * 26 Weak Mutation 85: gnu.trove.impl.hash.THashIterator.nextIndex()I:164 - InsertUnaryOp IINC -1 i
   * 27 Weak Mutation 84: gnu.trove.impl.hash.THashIterator.nextIndex()I:164 - InsertUnaryOp IINC 1 i
   * 28 Weak Mutation 83: gnu.trove.impl.hash.THashIterator.nextIndex()I:164 - InsertUnaryOp Negation of i
   * 29 gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;: root-Branch
   * 30 gnu.trove.impl.hash.THashIterator.moveToNextIndex()V: I7 Branch 3 IFGE L138 - false
   * 31 gnu.trove.impl.hash.THashIterator.nextIndex()I: I7 Branch 4 IF_ICMPEQ L155 - true
   * 32 gnu.trove.impl.hash.THashIterator.nextIndex()I: I29 Branch 5 IFLE L161 - true
   * 33 gnu.trove.impl.hash.THashIterator.nextIndex()I: I29 Branch 5 IFLE L161 - false
   * 34 gnu.trove.impl.hash.THashIterator.nextIndex()I: I34 Branch 6 IF_ACMPEQ L161 - true
   * 35 Weak Mutation 0: gnu.trove.impl.hash.THashIterator.<init>(Lgnu/trove/impl/hash/TObjectHash;)V:74 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 36 Weak Mutation 1: gnu.trove.impl.hash.THashIterator.<init>(Lgnu/trove/impl/hash/TObjectHash;)V:74 - DeleteStatement: size()I
   * 37 Weak Mutation 2: gnu.trove.impl.hash.THashIterator.<init>(Lgnu/trove/impl/hash/TObjectHash;)V:75 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 38 Weak Mutation 3: gnu.trove.impl.hash.THashIterator.<init>(Lgnu/trove/impl/hash/TObjectHash;)V:75 - DeleteStatement: capacity()I
   * 39 Weak Mutation 4: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:91 - DeleteStatement: moveToNextIndex()V
   * 40 Weak Mutation 51: gnu.trove.impl.hash.THashIterator.moveToNextIndex()V:138 - ReplaceComparisonOperator >= -> -1
   * 41 Weak Mutation 48: gnu.trove.impl.hash.THashIterator.moveToNextIndex()V:138 - DeleteStatement: nextIndex()I
   * 42 Weak Mutation 54: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - InsertUnaryOp -1
   * 43 Weak Mutation 53: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - InsertUnaryOp +1
   * 44 Weak Mutation 52: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - InsertUnaryOp Negation
   * 45 Weak Mutation 59: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - ReplaceComparisonOperator == -> -2
   * 46 Weak Mutation 57: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - DeleteStatement: size()I
   * 47 Weak Mutation 56: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 48 Weak Mutation 63: gnu.trove.impl.hash.THashIterator.nextIndex()I:160 - InsertUnaryOp Negation
   * 49 Weak Mutation 62: gnu.trove.impl.hash.THashIterator.nextIndex()I:159 - DeleteField: _set[Ljava/lang/Object;
   * 50 Weak Mutation 61: gnu.trove.impl.hash.THashIterator.nextIndex()I:159 - DeleteField: _object_hashLgnu/trove/impl/hash/TObjectHash;
   * 51 Weak Mutation 68: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC 1 i
   * 52 Weak Mutation 69: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC -1 i
   * 53 Weak Mutation 71: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - ReplaceComparisonOperator <= -> <
   * 54 Weak Mutation 64: gnu.trove.impl.hash.THashIterator.nextIndex()I:160 - InsertUnaryOp +1
   * 55 Weak Mutation 65: gnu.trove.impl.hash.THashIterator.nextIndex()I:160 - InsertUnaryOp -1
   * 56 Weak Mutation 66: gnu.trove.impl.hash.THashIterator.nextIndex()I:160 - DeleteField: _indexI
   * 57 Weak Mutation 67: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp Negation of i
   * 58 Weak Mutation 76: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - DeleteField: FREELjava/lang/Object;
   * 59 Weak Mutation 77: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - ReplaceComparisonOperator == -> !=
   * 60 Weak Mutation 72: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - ReplaceComparisonOperator <= -> -1
   * 61 Weak Mutation 73: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp Negation of i
   * 62 Weak Mutation 74: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC 1 i
   * 63 Weak Mutation 75: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC -1 i
   * 64 Weak Mutation 85: gnu.trove.impl.hash.THashIterator.nextIndex()I:164 - InsertUnaryOp IINC -1 i
   * 65 Weak Mutation 84: gnu.trove.impl.hash.THashIterator.nextIndex()I:164 - InsertUnaryOp IINC 1 i
   * 66 Weak Mutation 83: gnu.trove.impl.hash.THashIterator.nextIndex()I:164 - InsertUnaryOp Negation of i
   * 67 gnu.trove.impl.hash.THashIterator.<init>(Lgnu/trove/impl/hash/TObjectHash;)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      THashSet<Object> tHashSet0 = new THashSet<Object>(3, 3);
      TObjectHashIterator<Object> tObjectHashIterator0 = new TObjectHashIterator<Object>((TObjectHash<Object>) tHashSet0);
      // Undeclared exception!
      try {
        tObjectHashIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 1
  /*
   * 14 covered goals:
   * 1 Weak Mutation 11: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - ReplaceComparisonOperator < -> !=
   * 2 Weak Mutation 14: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - ReplaceConstant - 1 -> 0
   * 3 gnu.trove.impl.hash.THashIterator.hasNext()Z: I4 Branch 1 IFLT L103 - false
   * 4 Weak Mutation 10: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - DeleteStatement: nextIndex()I
   * 5 Weak Mutation 11: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - ReplaceComparisonOperator < -> !=
   * 6 Weak Mutation 14: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - ReplaceConstant - 1 -> 0
   * 7 Weak Mutation 55: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - DeleteField: _expectedSizeI
   * 8 Weak Mutation 78: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp Negation of i
   * 9 Weak Mutation 79: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC 1 i
   * 10 Weak Mutation 81: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - DeleteField: REMOVEDLjava/lang/Object;
   * 11 Weak Mutation 80: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC -1 i
   * 12 Weak Mutation 82: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - ReplaceComparisonOperator != -> ==
   * 13 gnu.trove.impl.hash.THashIterator.nextIndex()I: I34 Branch 6 IF_ACMPEQ L161 - false
   * 14 gnu.trove.impl.hash.THashIterator.nextIndex()I: I39 Branch 7 IF_ACMPNE L161 - true
   */

  @Test
  public void test1()  throws Throwable  {
      THashSet<Object> tHashSet0 = new THashSet<Object>(3, 3);
      tHashSet0.add((Object) "{}");
      TObjectHashIterator<Object> tObjectHashIterator0 = new TObjectHashIterator<Object>((TObjectHash<Object>) tHashSet0);
      boolean boolean0 = tObjectHashIterator0.hasNext();
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 Weak Mutation 12: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - ReplaceComparisonOperator < -> <=
   * 2 Weak Mutation 14: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - ReplaceConstant - 1 -> 0
   * 3 Weak Mutation 12: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - ReplaceComparisonOperator < -> <=
   */

  @Test
  public void test2()  throws Throwable  {
      TObjectDoubleCustomHashMap<Object> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Object>();
      tObjectDoubleCustomHashMap0.putIfAbsent((Object) null, (-1.0));
      TObjectHashIterator<Object> tObjectHashIterator0 = new TObjectHashIterator<Object>((TObjectHash<Object>) tObjectDoubleCustomHashMap0);
      boolean boolean0 = tObjectHashIterator0.hasNext();
      assertEquals(true, boolean0);
  }

  //Test case number: 3
  /*
   * 23 covered goals:
   * 1 Weak Mutation 19: gnu.trove.impl.hash.THashIterator.remove()V:114 - DeleteField: _expectedSizeI
   * 2 Weak Mutation 38: gnu.trove.impl.hash.THashIterator.remove()V:124 - DeleteStatement: reenableAutoCompaction(Z)V
   * 3 Weak Mutation 36: gnu.trove.impl.hash.THashIterator.remove()V:124 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 4 Weak Mutation 37: gnu.trove.impl.hash.THashIterator.remove()V:124 - ReplaceConstant - 0 -> 1
   * 5 Weak Mutation 17: gnu.trove.impl.hash.THashIterator.remove()V:114 - InsertUnaryOp +1
   * 6 Weak Mutation 16: gnu.trove.impl.hash.THashIterator.remove()V:114 - InsertUnaryOp Negation
   * 7 Weak Mutation 19: gnu.trove.impl.hash.THashIterator.remove()V:114 - DeleteField: _expectedSizeI
   * 8 Weak Mutation 18: gnu.trove.impl.hash.THashIterator.remove()V:114 - InsertUnaryOp -1
   * 9 Weak Mutation 21: gnu.trove.impl.hash.THashIterator.remove()V:114 - DeleteStatement: size()I
   * 10 Weak Mutation 20: gnu.trove.impl.hash.THashIterator.remove()V:114 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 11 Weak Mutation 23: gnu.trove.impl.hash.THashIterator.remove()V:114 - ReplaceComparisonOperator == -> -2
   * 12 Weak Mutation 25: gnu.trove.impl.hash.THashIterator.remove()V:120 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 13 Weak Mutation 27: gnu.trove.impl.hash.THashIterator.remove()V:121 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 14 Weak Mutation 26: gnu.trove.impl.hash.THashIterator.remove()V:120 - DeleteStatement: tempDisableAutoCompaction()V
   * 15 Weak Mutation 29: gnu.trove.impl.hash.THashIterator.remove()V:121 - InsertUnaryOp +1
   * 16 Weak Mutation 28: gnu.trove.impl.hash.THashIterator.remove()V:121 - InsertUnaryOp Negation
   * 17 Weak Mutation 31: gnu.trove.impl.hash.THashIterator.remove()V:121 - DeleteField: _indexI
   * 18 Weak Mutation 30: gnu.trove.impl.hash.THashIterator.remove()V:121 - InsertUnaryOp -1
   * 19 Weak Mutation 32: gnu.trove.impl.hash.THashIterator.remove()V:121 - DeleteStatement: removeAt(I)V
   * 20 Weak Mutation 38: gnu.trove.impl.hash.THashIterator.remove()V:124 - DeleteStatement: reenableAutoCompaction(Z)V
   * 21 Weak Mutation 36: gnu.trove.impl.hash.THashIterator.remove()V:124 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 22 Weak Mutation 37: gnu.trove.impl.hash.THashIterator.remove()V:124 - ReplaceConstant - 0 -> 1
   * 23 gnu.trove.impl.hash.THashIterator.remove()V: I7 Branch 2 IF_ICMPEQ L114 - true
   */

  @Test
  public void test3()  throws Throwable  {
      THashSet<Object> tHashSet0 = new THashSet<Object>(3, 3);
      tHashSet0.add((Object) "{}");
      TObjectHashIterator<Object> tObjectHashIterator0 = new TObjectHashIterator<Object>((TObjectHash<Object>) tHashSet0);
      // Undeclared exception!
      try {
        tObjectHashIterator0.remove();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
      }
  }

  //Test case number: 4
  /*
   * 3 covered goals:
   * 1 Weak Mutation 24: gnu.trove.impl.hash.THashIterator.remove()V:114 - ReplaceComparisonOperator == -> <=
   * 2 gnu.trove.impl.hash.THashIterator.remove()V: I7 Branch 2 IF_ICMPEQ L114 - false
   * 3 Weak Mutation 24: gnu.trove.impl.hash.THashIterator.remove()V:114 - ReplaceComparisonOperator == -> <=
   */

  @Test
  public void test4()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashSet<Object> tCustomHashSet0 = new TCustomHashSet<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, 0);
      TObjectHashIterator<Object> tObjectHashIterator0 = tCustomHashSet0.iterator();
      tCustomHashSet0.add((Object) "{}");
      // Undeclared exception!
      try {
        tObjectHashIterator0.remove();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 5
  /*
   * 20 covered goals:
   * 1 Weak Mutation 45: gnu.trove.impl.hash.THashIterator.remove()V:127 - ReplaceArithmeticOperator - -> %
   * 2 Weak Mutation 5: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:92 - InsertUnaryOp Negation
   * 3 Weak Mutation 6: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:92 - InsertUnaryOp +1
   * 4 Weak Mutation 7: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:92 - InsertUnaryOp -1
   * 5 Weak Mutation 8: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:92 - DeleteField: _indexI
   * 6 Weak Mutation 9: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:92 - DeleteStatement: objectAtIndex(I)Ljava/lang/Object;
   * 7 Weak Mutation 34: gnu.trove.impl.hash.THashIterator.remove()V:124 - ReplaceConstant - 0 -> 1
   * 8 Weak Mutation 35: gnu.trove.impl.hash.THashIterator.remove()V:124 - DeleteStatement: reenableAutoCompaction(Z)V
   * 9 Weak Mutation 33: gnu.trove.impl.hash.THashIterator.remove()V:124 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 10 Weak Mutation 39: gnu.trove.impl.hash.THashIterator.remove()V:127 - InsertUnaryOp Negation
   * 11 Weak Mutation 42: gnu.trove.impl.hash.THashIterator.remove()V:127 - DeleteField: _expectedSizeI
   * 12 Weak Mutation 43: gnu.trove.impl.hash.THashIterator.remove()V:127 - ReplaceConstant - 1 -> 0
   * 13 Weak Mutation 40: gnu.trove.impl.hash.THashIterator.remove()V:127 - InsertUnaryOp +1
   * 14 Weak Mutation 41: gnu.trove.impl.hash.THashIterator.remove()V:127 - InsertUnaryOp -1
   * 15 Weak Mutation 46: gnu.trove.impl.hash.THashIterator.remove()V:127 - ReplaceArithmeticOperator - -> /
   * 16 Weak Mutation 47: gnu.trove.impl.hash.THashIterator.remove()V:127 - ReplaceArithmeticOperator - -> *
   * 17 Weak Mutation 44: gnu.trove.impl.hash.THashIterator.remove()V:127 - ReplaceArithmeticOperator - -> +
   * 18 Weak Mutation 45: gnu.trove.impl.hash.THashIterator.remove()V:127 - ReplaceArithmeticOperator - -> %
   * 19 Weak Mutation 49: gnu.trove.impl.hash.THashIterator.moveToNextIndex()V:138 - ReplaceComparisonOperator >= -> ==
   * 20 gnu.trove.impl.hash.THashIterator.moveToNextIndex()V: I7 Branch 3 IFGE L138 - true
   */

  @Test
  public void test5()  throws Throwable  {
      THashSet<Object> tHashSet0 = new THashSet<Object>(3, 3);
      tHashSet0.add((Object) "{}");
      TObjectHashIterator<Object> tObjectHashIterator0 = new TObjectHashIterator<Object>((TObjectHash<Object>) tHashSet0);
      tObjectHashIterator0.next();
      tObjectHashIterator0.remove();
      tObjectHashIterator0.remove();
      assertEquals("{}", tHashSet0.toString());
      assertEquals(false, tObjectHashIterator0.hasNext());
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * 1 Weak Mutation 50: gnu.trove.impl.hash.THashIterator.moveToNextIndex()V:138 - ReplaceComparisonOperator >= -> >
   * 2 Weak Mutation 50: gnu.trove.impl.hash.THashIterator.moveToNextIndex()V:138 - ReplaceComparisonOperator >= -> >
   */

  @Test
  public void test6()  throws Throwable  {
      TObjectDoubleCustomHashMap<Object> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Object>();
      tObjectDoubleCustomHashMap0.putIfAbsent((Object) null, (-1.0));
      TObjectHashIterator<Object> tObjectHashIterator0 = new TObjectHashIterator<Object>((TObjectHash<Object>) tObjectDoubleCustomHashMap0);
      assertEquals(true, tObjectHashIterator0.hasNext());
      
      tObjectHashIterator0.next();
      assertEquals(false, tObjectHashIterator0.hasNext());
  }

  //Test case number: 7
  /*
   * 37 covered goals:
   * 1 Weak Mutation 60: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - ReplaceComparisonOperator == -> <=
   * 2 gnu.trove.impl.hash.THashIterator.nextIndex()I: I7 Branch 4 IF_ICMPEQ L155 - false
   * 3 Weak Mutation 4: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:91 - DeleteStatement: moveToNextIndex()V
   * 4 Weak Mutation 5: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:92 - InsertUnaryOp Negation
   * 5 Weak Mutation 6: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:92 - InsertUnaryOp +1
   * 6 Weak Mutation 7: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:92 - InsertUnaryOp -1
   * 7 Weak Mutation 8: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:92 - DeleteField: _indexI
   * 8 Weak Mutation 9: gnu.trove.impl.hash.THashIterator.next()Ljava/lang/Object;:92 - DeleteStatement: objectAtIndex(I)Ljava/lang/Object;
   * 9 Weak Mutation 17: gnu.trove.impl.hash.THashIterator.remove()V:114 - InsertUnaryOp +1
   * 10 Weak Mutation 16: gnu.trove.impl.hash.THashIterator.remove()V:114 - InsertUnaryOp Negation
   * 11 Weak Mutation 19: gnu.trove.impl.hash.THashIterator.remove()V:114 - DeleteField: _expectedSizeI
   * 12 Weak Mutation 18: gnu.trove.impl.hash.THashIterator.remove()V:114 - InsertUnaryOp -1
   * 13 Weak Mutation 21: gnu.trove.impl.hash.THashIterator.remove()V:114 - DeleteStatement: size()I
   * 14 Weak Mutation 20: gnu.trove.impl.hash.THashIterator.remove()V:114 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 15 Weak Mutation 23: gnu.trove.impl.hash.THashIterator.remove()V:114 - ReplaceComparisonOperator == -> -2
   * 16 Weak Mutation 25: gnu.trove.impl.hash.THashIterator.remove()V:120 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 17 Weak Mutation 27: gnu.trove.impl.hash.THashIterator.remove()V:121 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 18 Weak Mutation 26: gnu.trove.impl.hash.THashIterator.remove()V:120 - DeleteStatement: tempDisableAutoCompaction()V
   * 19 Weak Mutation 29: gnu.trove.impl.hash.THashIterator.remove()V:121 - InsertUnaryOp +1
   * 20 Weak Mutation 28: gnu.trove.impl.hash.THashIterator.remove()V:121 - InsertUnaryOp Negation
   * 21 Weak Mutation 31: gnu.trove.impl.hash.THashIterator.remove()V:121 - DeleteField: _indexI
   * 22 Weak Mutation 30: gnu.trove.impl.hash.THashIterator.remove()V:121 - InsertUnaryOp -1
   * 23 Weak Mutation 34: gnu.trove.impl.hash.THashIterator.remove()V:124 - ReplaceConstant - 0 -> 1
   * 24 Weak Mutation 35: gnu.trove.impl.hash.THashIterator.remove()V:124 - DeleteStatement: reenableAutoCompaction(Z)V
   * 25 Weak Mutation 32: gnu.trove.impl.hash.THashIterator.remove()V:121 - DeleteStatement: removeAt(I)V
   * 26 Weak Mutation 33: gnu.trove.impl.hash.THashIterator.remove()V:124 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 27 Weak Mutation 39: gnu.trove.impl.hash.THashIterator.remove()V:127 - InsertUnaryOp Negation
   * 28 Weak Mutation 42: gnu.trove.impl.hash.THashIterator.remove()V:127 - DeleteField: _expectedSizeI
   * 29 Weak Mutation 43: gnu.trove.impl.hash.THashIterator.remove()V:127 - ReplaceConstant - 1 -> 0
   * 30 Weak Mutation 40: gnu.trove.impl.hash.THashIterator.remove()V:127 - InsertUnaryOp +1
   * 31 Weak Mutation 41: gnu.trove.impl.hash.THashIterator.remove()V:127 - InsertUnaryOp -1
   * 32 Weak Mutation 46: gnu.trove.impl.hash.THashIterator.remove()V:127 - ReplaceArithmeticOperator - -> /
   * 33 Weak Mutation 47: gnu.trove.impl.hash.THashIterator.remove()V:127 - ReplaceArithmeticOperator - -> *
   * 34 Weak Mutation 44: gnu.trove.impl.hash.THashIterator.remove()V:127 - ReplaceArithmeticOperator - -> +
   * 35 Weak Mutation 49: gnu.trove.impl.hash.THashIterator.moveToNextIndex()V:138 - ReplaceComparisonOperator >= -> ==
   * 36 Weak Mutation 48: gnu.trove.impl.hash.THashIterator.moveToNextIndex()V:138 - DeleteStatement: nextIndex()I
   * 37 Weak Mutation 60: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - ReplaceComparisonOperator == -> <=
   */

  @Test
  public void test7()  throws Throwable  {
      THashSet<Object> tHashSet0 = new THashSet<Object>(3, 3);
      tHashSet0.add((Object) "{}");
      TObjectHashIterator<Object> tObjectHashIterator0 = new TObjectHashIterator<Object>((TObjectHash<Object>) tHashSet0);
      tObjectHashIterator0.next();
      tObjectHashIterator0.remove();
      tHashSet0.add((Object) "{}");
      // Undeclared exception!
      try {
        tObjectHashIterator0.hasNext();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 8
  /*
   * 42 covered goals:
   * 1 gnu.trove.impl.hash.THashIterator.nextIndex()I: I39 Branch 7 IF_ACMPNE L161 - false
   * 2 Weak Mutation 0: gnu.trove.impl.hash.THashIterator.<init>(Lgnu/trove/impl/hash/TObjectHash;)V:74 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 3 Weak Mutation 1: gnu.trove.impl.hash.THashIterator.<init>(Lgnu/trove/impl/hash/TObjectHash;)V:74 - DeleteStatement: size()I
   * 4 Weak Mutation 2: gnu.trove.impl.hash.THashIterator.<init>(Lgnu/trove/impl/hash/TObjectHash;)V:75 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 5 Weak Mutation 3: gnu.trove.impl.hash.THashIterator.<init>(Lgnu/trove/impl/hash/TObjectHash;)V:75 - DeleteStatement: capacity()I
   * 6 Weak Mutation 10: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - DeleteStatement: nextIndex()I
   * 7 Weak Mutation 13: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - ReplaceComparisonOperator < -> -2
   * 8 Weak Mutation 15: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - ReplaceConstant - 0 -> 1
   * 9 Weak Mutation 55: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - DeleteField: _expectedSizeI
   * 10 Weak Mutation 54: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - InsertUnaryOp -1
   * 11 Weak Mutation 53: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - InsertUnaryOp +1
   * 12 Weak Mutation 52: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - InsertUnaryOp Negation
   * 13 Weak Mutation 59: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - ReplaceComparisonOperator == -> -2
   * 14 Weak Mutation 57: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - DeleteStatement: size()I
   * 15 Weak Mutation 56: gnu.trove.impl.hash.THashIterator.nextIndex()I:155 - DeleteField: _hashLgnu/trove/impl/hash/THash;
   * 16 Weak Mutation 63: gnu.trove.impl.hash.THashIterator.nextIndex()I:160 - InsertUnaryOp Negation
   * 17 Weak Mutation 62: gnu.trove.impl.hash.THashIterator.nextIndex()I:159 - DeleteField: _set[Ljava/lang/Object;
   * 18 Weak Mutation 61: gnu.trove.impl.hash.THashIterator.nextIndex()I:159 - DeleteField: _object_hashLgnu/trove/impl/hash/TObjectHash;
   * 19 Weak Mutation 68: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC 1 i
   * 20 Weak Mutation 69: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC -1 i
   * 21 Weak Mutation 71: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - ReplaceComparisonOperator <= -> <
   * 22 Weak Mutation 64: gnu.trove.impl.hash.THashIterator.nextIndex()I:160 - InsertUnaryOp +1
   * 23 Weak Mutation 65: gnu.trove.impl.hash.THashIterator.nextIndex()I:160 - InsertUnaryOp -1
   * 24 Weak Mutation 66: gnu.trove.impl.hash.THashIterator.nextIndex()I:160 - DeleteField: _indexI
   * 25 Weak Mutation 67: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp Negation of i
   * 26 Weak Mutation 76: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - DeleteField: FREELjava/lang/Object;
   * 27 Weak Mutation 77: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - ReplaceComparisonOperator == -> !=
   * 28 Weak Mutation 78: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp Negation of i
   * 29 Weak Mutation 79: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC 1 i
   * 30 Weak Mutation 72: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - ReplaceComparisonOperator <= -> -1
   * 31 Weak Mutation 73: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp Negation of i
   * 32 Weak Mutation 74: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC 1 i
   * 33 Weak Mutation 75: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC -1 i
   * 34 Weak Mutation 85: gnu.trove.impl.hash.THashIterator.nextIndex()I:164 - InsertUnaryOp IINC -1 i
   * 35 Weak Mutation 84: gnu.trove.impl.hash.THashIterator.nextIndex()I:164 - InsertUnaryOp IINC 1 i
   * 36 Weak Mutation 81: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - DeleteField: REMOVEDLjava/lang/Object;
   * 37 Weak Mutation 80: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - InsertUnaryOp IINC -1 i
   * 38 Weak Mutation 83: gnu.trove.impl.hash.THashIterator.nextIndex()I:164 - InsertUnaryOp Negation of i
   * 39 Weak Mutation 82: gnu.trove.impl.hash.THashIterator.nextIndex()I:161 - ReplaceComparisonOperator != -> ==
   * 40 Weak Mutation 13: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - ReplaceComparisonOperator < -> -2
   * 41 Weak Mutation 15: gnu.trove.impl.hash.THashIterator.hasNext()Z:103 - ReplaceConstant - 0 -> 1
   * 42 gnu.trove.impl.hash.THashIterator.hasNext()Z: I4 Branch 1 IFLT L103 - true
   */

  @Test
  public void test8()  throws Throwable  {
      THashSet<Object> tHashSet0 = new THashSet<Object>(1);
      Object object0 = TObjectHash.REMOVED;
      tHashSet0.add(object0);
      TObjectHashIterator<Object> tObjectHashIterator0 = tHashSet0.iterator();
      assertNotNull(tObjectHashIterator0);
      
      boolean boolean0 = tObjectHashIterator0.hasNext();
      assertEquals(false, boolean0);
  }
}
