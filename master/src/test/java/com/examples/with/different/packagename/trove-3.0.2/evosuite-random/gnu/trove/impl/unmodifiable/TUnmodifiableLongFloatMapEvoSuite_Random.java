/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableLongFloatMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableLongSet;
import gnu.trove.map.TLongFloatMap;
import gnu.trove.map.hash.TLongFloatHashMap;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableLongFloatMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      long[] longArray0 = new long[5];
      long long0 = (-1154L);
      longArray0[0] = long0;
      long long1 = 0L;
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      long long4 = (-1L);
      longArray0[4] = long4;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) long4;
      floatArray0[1] = (float) longArray0[0];
      float float0 = 1153.6621F;
      floatArray0[2] = float0;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
      TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap0 = new TUnmodifiableLongFloatMap((TLongFloatMap) tLongFloatHashMap0);
      TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap1 = new TUnmodifiableLongFloatMap((TLongFloatMap) tUnmodifiableLongFloatMap0);
      float float1 = 0.0F;
      // Undeclared exception!
      try {
        tUnmodifiableLongFloatMap1.adjustValue(longArray0[4], float1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap();
      TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap0 = new TUnmodifiableLongFloatMap((TLongFloatMap) tLongFloatHashMap0);
      float float0 = 1.0F;
      tUnmodifiableLongFloatMap0.containsValue(float0);
      TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap1 = new TUnmodifiableLongFloatMap((TLongFloatMap) tLongFloatHashMap0);
      float[] floatArray0 = new float[6];
      tUnmodifiableLongFloatMap1.valueCollection();
      float float1 = 0.0F;
      floatArray0[0] = float1;
      floatArray0[0] = float1;
      floatArray0[1] = float1;
      floatArray0[2] = float1;
      floatArray0[3] = float0;
      floatArray0[4] = float1;
      floatArray0[5] = float0;
      float float2 = 0.0F;
      floatArray0[1] = float2;
      float float3 = 0.0F;
      floatArray0[2] = float3;
      float float4 = 0.0F;
      floatArray0[3] = float4;
      tUnmodifiableLongFloatMap0.keys();
      tUnmodifiableLongFloatMap0.containsValue(float4);
      float float5 = 807.91095F;
      floatArray0[4] = float5;
      float float6 = 0.0F;
      floatArray0[5] = float6;
      tUnmodifiableLongFloatMap1.values(floatArray0);
      int int0 = 0;
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(int0, int0);
      TLongFloatHashMap tLongFloatHashMap2 = null;
      try {
        tLongFloatHashMap2 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap1);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 463646329;
      TLongFloatHashMap tLongFloatHashMap0 = null;
      try {
        tLongFloatHashMap0 = new TLongFloatHashMap(int0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = 0L;
      longArray0[0] = long0;
      float[] floatArray0 = new float[9];
      float float0 = (-518.39874F);
      floatArray0[0] = float0;
      floatArray0[1] = (float) long0;
      floatArray0[2] = (float) long0;
      floatArray0[3] = (float) longArray0[0];
      floatArray0[4] = (float) longArray0[0];
      floatArray0[5] = (float) long0;
      floatArray0[6] = (float) long0;
      floatArray0[7] = (float) long0;
      floatArray0[8] = (float) long0;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
      TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap0 = new TUnmodifiableLongFloatMap((TLongFloatMap) tLongFloatHashMap0);
      long[] longArray1 = tUnmodifiableLongFloatMap0.keys();
      assertNotSame(longArray1, longArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = (-712L);
      longArray0[0] = long0;
      long long1 = 0L;
      longArray0[1] = long1;
      long long2 = 1731L;
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      long long4 = 0L;
      longArray0[4] = long4;
      long long5 = 0L;
      longArray0[5] = long5;
      long long6 = (-9223372036854775808L);
      longArray0[6] = long6;
      long long7 = 269L;
      longArray0[7] = long7;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) longArray0[4];
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap0);
      TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap0 = new TUnmodifiableLongFloatMap((TLongFloatMap) tLongFloatHashMap1);
      TUnmodifiableLongSet tUnmodifiableLongSet0 = (TUnmodifiableLongSet)tUnmodifiableLongFloatMap0.keySet();
      assertEquals(1, tUnmodifiableLongSet0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = (-1684L);
      longArray0[0] = long0;
      long long1 = (-438L);
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      float[] floatArray0 = new float[8];
      float float0 = Float.NEGATIVE_INFINITY;
      floatArray0[0] = float0;
      floatArray0[1] = (float) long2;
      floatArray0[2] = (float) longArray0[0];
      floatArray0[3] = (float) long2;
      floatArray0[4] = (float) long0;
      floatArray0[5] = (float) long1;
      floatArray0[6] = (float) long2;
      floatArray0[7] = (float) longArray0[0];
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
      TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap0 = new TUnmodifiableLongFloatMap((TLongFloatMap) tLongFloatHashMap0);
      TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap1 = new TUnmodifiableLongFloatMap((TLongFloatMap) tUnmodifiableLongFloatMap0);
      long long4 = (-508L);
      // Undeclared exception!
      try {
        tUnmodifiableLongFloatMap1.putIfAbsent(long4, long4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap();
          TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap0 = new TUnmodifiableLongFloatMap((TLongFloatMap) tLongFloatHashMap0);
          tUnmodifiableLongFloatMap0.keys();
          long long0 = 0L;
          String string0 = "NjxV$";
          tUnmodifiableLongFloatMap0.containsValue((float) long0);
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"NjxV$\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = (-825L);
      longArray0[0] = long0;
      long long1 = 0L;
      longArray0[1] = long1;
      long long2 = 1211L;
      longArray0[2] = long2;
      long long3 = 1158L;
      longArray0[3] = long3;
      long long4 = 400L;
      longArray0[4] = long4;
      long long5 = (-1L);
      longArray0[5] = long5;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) longArray0[4];
      float float0 = 0.0F;
      floatArray0[1] = float0;
      float float1 = 0.0F;
      floatArray0[2] = float1;
      floatArray0[3] = (float) long0;
      floatArray0[4] = (float) long4;
      floatArray0[5] = (float) longArray0[1];
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
      TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap0 = new TUnmodifiableLongFloatMap((TLongFloatMap) tLongFloatHashMap0);
      long long6 = (-151L);
      boolean boolean0 = tUnmodifiableLongFloatMap0.containsKey(long6);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 2141977;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0, int0);
      TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap0 = new TUnmodifiableLongFloatMap((TLongFloatMap) tLongFloatHashMap0);
      long long0 = (-1L);
      // Undeclared exception!
      try {
        tUnmodifiableLongFloatMap0.increment(long0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap();
      float float0 = (-1.0F);
      tLongFloatHashMap0.containsValue(float0);
      int int0 = (-649);
      TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap0 = new TUnmodifiableLongFloatMap((TLongFloatMap) tLongFloatHashMap0);
      tUnmodifiableLongFloatMap0.keySet();
      tUnmodifiableLongFloatMap0.getNoEntryValue();
      tLongFloatHashMap0.ensureCapacity(int0);
      TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap1 = new TUnmodifiableLongFloatMap((TLongFloatMap) tLongFloatHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableLongFloatMap1.putIfAbsent((long) int0, (float) int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-1);
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0, int0);
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap0);
      TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap0 = new TUnmodifiableLongFloatMap((TLongFloatMap) tLongFloatHashMap1);
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      // Undeclared exception!
      try {
        tUnmodifiableLongFloatMap0.putAll((Map<? extends Long, ? extends Float>) hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0);
      TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap0 = new TUnmodifiableLongFloatMap((TLongFloatMap) tLongFloatHashMap0);
      tLongFloatHashMap0.containsKey((long) int0);
      tUnmodifiableLongFloatMap0.valueCollection();
      int int1 = 0;
      long long0 = 2L;
      tUnmodifiableLongFloatMap0.get(long0);
      boolean boolean0 = true;
      tLongFloatHashMap0.reenableAutoCompaction(boolean0);
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(int1);
      long long1 = (-1843L);
      float float0 = (-65.957214F);
      // Undeclared exception!
      try {
        tUnmodifiableLongFloatMap0.put(long1, float0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-300);
      int int1 = 1;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int1);
      TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap0 = new TUnmodifiableLongFloatMap((TLongFloatMap) tLongFloatHashMap0);
      long long0 = 847L;
      tUnmodifiableLongFloatMap0.containsKey(long0);
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(int0);
      TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap1 = new TUnmodifiableLongFloatMap((TLongFloatMap) tLongFloatHashMap1);
      tUnmodifiableLongFloatMap1.values();
      tUnmodifiableLongFloatMap1.iterator();
      String string0 = "jW}";
      String string1 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 2: jW}:jW%7D#
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 1201;
          TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap();
          String string0 = "";
          boolean boolean0 = true;
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0, boolean0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:136)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      float float0 = (-438.52744F);
      long long0 = 1768L;
      float float1 = 1236.64F;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0, float0, long0, float1);
      TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap0 = new TUnmodifiableLongFloatMap((TLongFloatMap) tLongFloatHashMap0);
      long long1 = tUnmodifiableLongFloatMap0.getNoEntryKey();
      assertEquals(1768L, long1);
      
      TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap1 = new TUnmodifiableLongFloatMap((TLongFloatMap) tLongFloatHashMap0);
      tUnmodifiableLongFloatMap1.hashCode();
      assertTrue(long0 == long1);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0, float0);
      TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap0 = new TUnmodifiableLongFloatMap((TLongFloatMap) tLongFloatHashMap0);
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(int0);
      TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap1 = new TUnmodifiableLongFloatMap((TLongFloatMap) tLongFloatHashMap1);
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://#
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = 0L;
      longArray0[0] = long0;
      long long1 = (-1226L);
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) long3;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap0);
      TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap0 = new TUnmodifiableLongFloatMap((TLongFloatMap) tLongFloatHashMap1);
      // Undeclared exception!
      try {
        tUnmodifiableLongFloatMap0.increment(longArray0[2]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test17()  throws Throwable  {
//       int int0 = 1986;
//       long long0 = 1L;
//       long[] longArray0 = new long[9];
//       longArray0[0] = long0;
//       longArray0[1] = long0;
//       longArray0[2] = (long) int0;
//       longArray0[3] = long0;
//       longArray0[4] = (long) int0;
//       longArray0[5] = long0;
//       longArray0[6] = (long) int0;
//       longArray0[7] = (long) int0;
//       longArray0[8] = long0;
//       float[] floatArray0 = new float[2];
//       floatArray0[0] = (float) longArray0[2];
//       floatArray0[1] = (float) longArray0[6];
//       TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
//       TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap0 = new TUnmodifiableLongFloatMap((TLongFloatMap) tLongFloatHashMap0);
//       int int1 = tUnmodifiableLongFloatMap0.size();
//       assertEquals(1, int1);
//       
//       float float0 = 1724.1735F;
//       TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(int0, (float) int0, long0, float0);
//       TUnmodifiableLongFloatMap tUnmodifiableLongFloatMap1 = new TUnmodifiableLongFloatMap((TLongFloatMap) tLongFloatHashMap1);
//       tLongFloatHashMap1.compact();
//       float float1 = tUnmodifiableLongFloatMap1.get((long) int0);
//       assertEquals(1724.1735F, float1, 0.01F);
//   }
}
