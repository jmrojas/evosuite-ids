/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TShortCollection;
import gnu.trove.impl.sync.TSynchronizedShortCollection;
import gnu.trove.map.TShortObjectMap;
import gnu.trove.map.hash.TShortObjectHashMap;
import gnu.trove.set.hash.TShortHashSet;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortHashEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TShortHashSet tShortHashSet0 = new TShortHashSet();
      short[] shortArray0 = new short[2];
      short short0 = (short) (-1);
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      short short1 = (short) (-622);
      shortArray0[0] = short1;
      tShortHashSet0.tempDisableAutoCompaction();
      short short2 = (short)0;
      shortArray0[1] = short2;
      int int0 = 1368;
      TShortObjectHashMap<Object> tShortObjectHashMap0 = new TShortObjectHashMap<Object>(int0, (float) shortArray0[1]);
      TShortObjectHashMap<Object> tShortObjectHashMap1 = new TShortObjectHashMap<Object>((TShortObjectMap<?>) tShortObjectHashMap0);
      short short3 = (short)2;
      String string0 = "";
      String string1 = " greater than begin index ";
      String string2 = "Y$";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string1, string2, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0:  greater than begin index :Y$%7F#
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      float float0 = 3.4028235E38F;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0);
      short[] shortArray0 = new short[8];
      short short0 = (short)59;
      shortArray0[0] = short0;
      short short1 = (short)1470;
      shortArray0[1] = short1;
      short short2 = (short) (-54);
      shortArray0[2] = short2;
      short short3 = (short) (-555);
      shortArray0[3] = short3;
      short short4 = (short)1746;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)450;
      shortArray0[6] = short6;
      short short7 = (short) (-1266);
      shortArray0[7] = short7;
      tShortHashSet0.containsAll(shortArray0);
      short short8 = (short)0;
      TShortHashSet tShortHashSet1 = new TShortHashSet();
      tShortHashSet1.iterator();
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>(int0, float0, short8);
      tShortObjectHashMap0.hashCode();
      int int1 = 0;
      TShortObjectHashMap<Object> tShortObjectHashMap1 = new TShortObjectHashMap<Object>(int1);
      FileDescriptor fileDescriptor0 = null;
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(fileDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 1100;
      int int1 = 1566;
      float float0 = 1691.674F;
      short short0 = (short)10243;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int1, float0, short0);
      int int2 = 1294;
      short short1 = (short)0;
      TShortObjectHashMap<Object> tShortObjectHashMap0 = new TShortObjectHashMap<Object>(int2, (float) int2, short1);
      float float1 = Float.POSITIVE_INFINITY;
      tShortHashSet0.addAll(tShortObjectHashMap0._set);
      tShortObjectHashMap0.compact();
      short short2 = (short)0;
      TShortObjectHashMap<Object> tShortObjectHashMap1 = new TShortObjectHashMap<Object>(int0, float1, short2);
      tShortObjectHashMap1.hashCode();
      OutputStream outputStream0 = null;
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-1703);
      short short0 = (short) (-743);
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0, (float) int0, short0);
      TShortHashSet tShortHashSet1 = new TShortHashSet();
      tShortHashSet1.size();
      short[] shortArray0 = new short[2];
      tShortHashSet1.compact();
      short short1 = (short) (-1);
      shortArray0[0] = short1;
      short short2 = (short)72;
      shortArray0[1] = short2;
      short[] shortArray1 = tShortHashSet1.toArray(shortArray0);
      assertSame(shortArray1, shortArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short) (-2040);
      shortArray0[0] = short0;
      TShortObjectHashMap<String> tShortObjectHashMap0 = new TShortObjectHashMap<String>((int) shortArray0[0]);
      int int0 = 816;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tShortObjectHashMap0._states, (int) shortArray0[0], int0);
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream((InputStream) byteArrayInputStream0, (int) shortArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TShortObjectHashMap<Object> tShortObjectHashMap0 = new TShortObjectHashMap<Object>();
      tShortObjectHashMap0.getNoEntryValue();
      tShortObjectHashMap0.isEmpty();
      TShortObjectHashMap<Integer> tShortObjectHashMap1 = new TShortObjectHashMap<Integer>();
      TShortCollection tShortCollection0 = null;
      Locale locale0 = Locale.PRC;
      String string0 = locale0.getDisplayName();
      TSynchronizedShortCollection tSynchronizedShortCollection0 = new TSynchronizedShortCollection(tShortCollection0, (Object) string0);
      TShortHashSet tShortHashSet0 = null;
      try {
        tShortHashSet0 = new TShortHashSet((TShortCollection) tSynchronizedShortCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 866;
      float float0 = 0.5F;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0);
      short[] shortArray0 = new short[4];
      FileDescriptor fileDescriptor0 = null;
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(fileDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      short[] shortArray0 = new short[8];
      short short0 = (short)1036;
      shortArray0[0] = short0;
      short short1 = (short) (-1061);
      shortArray0[1] = short1;
      short short2 = (short) (-1615);
      shortArray0[2] = short2;
      short short3 = (short)1491;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short) (-898);
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)0;
      TShortObjectHashMap<String> tShortObjectHashMap0 = new TShortObjectHashMap<String>();
      tShortObjectHashMap0.values();
      shortArray0[7] = short7;
      TShortHashSet tShortHashSet0 = new TShortHashSet(shortArray0);
      TShortObjectHashMap<String> tShortObjectHashMap1 = new TShortObjectHashMap<String>(int0);
      tShortObjectHashMap1.capacity();
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>();
      TShortObjectHashMap<Object> tShortObjectHashMap1 = new TShortObjectHashMap<Object>((TShortObjectMap<?>) tShortObjectHashMap0);
      int int0 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) dataOutputStream0);
      tShortObjectHashMap1.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(23, tShortObjectHashMap0.capacity());
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 54;
      short short0 = (short)7;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0, (float) int0, short0);
      String string0 = "Mb[0)-j{";
      File file0 = new File(string0, string0);
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(file0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // Mb[0)-j{
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TShortObjectHashMap<String> tShortObjectHashMap0 = new TShortObjectHashMap<String>();
      tShortObjectHashMap0.valueCollection();
      int int0 = Integer.MAX_VALUE;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0, int0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      tShortHashSet0.removeAll((Collection<?>) linkedList0);
      String string0 = tShortHashSet0.toString();
      int int1 = 0;
      TShortHashSet tShortHashSet1 = new TShortHashSet(int1);
      boolean boolean0 = true;
      OutputStream outputStream0 = null;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(outputStream0);
      PrintStream printStream0 = new PrintStream((OutputStream) filterOutputStream0);
      // Undeclared exception!
      try {
        printStream0.append((CharSequence) string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = (short)823;
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      float float0 = (-1480.5157F);
      TShortObjectHashMap<Object> tShortObjectHashMap0 = new TShortObjectHashMap<Object>((int) shortArray0[0], float0);
      TShortObjectHashMap<Object> tShortObjectHashMap1 = new TShortObjectHashMap<Object>((TShortObjectMap<?>) tShortObjectHashMap0);
      String string0 = "CYbz,!g;";
      File file0 = new File(string0);
      File file1 = new File(file0, string0);
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(file1, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // CYbz,!g;
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TShortHashSet tShortHashSet0 = new TShortHashSet();
      tShortHashSet0.compact();
      TShortObjectHashMap<Object> tShortObjectHashMap0 = new TShortObjectHashMap<Object>();
      String string0 = "";
      int int0 = (-1013);
      TShortHashSet tShortHashSet1 = new TShortHashSet(int0, int0);
      File file0 = new File(string0);
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         //  (No such file or directory)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      int int1 = 1178;
      TShortObjectHashMap<String> tShortObjectHashMap0 = new TShortObjectHashMap<String>(int1);
      int int2 = (-1);
      TShortHashSet tShortHashSet0 = new TShortHashSet(int2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TShortHashSet tShortHashSet0 = new TShortHashSet();
      short[] shortArray0 = new short[9];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short) (-541);
      shortArray0[1] = short1;
      short short2 = (short)323;
      shortArray0[2] = short2;
      short short3 = (short) (-705);
      shortArray0[3] = short3;
      short short4 = (short) (-147);
      shortArray0[4] = short4;
      short short5 = (short) (-21161);
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short) (-435);
      shortArray0[7] = short7;
      short short8 = (short)1409;
      shortArray0[8] = short8;
      tShortHashSet0.removeAll(shortArray0);
      assertEquals(23, tShortHashSet0.capacity());
      
      tShortHashSet0.trimToSize();
      assertEquals(0, tShortHashSet0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 117;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0);
      short[] shortArray0 = new short[2];
      short short0 = (short) (-679);
      shortArray0[0] = short0;
      short short1 = (short) (-110);
      shortArray0[1] = short1;
      boolean boolean0 = tShortHashSet0.removeAll(shortArray0);
      assertEquals(277, tShortHashSet0.capacity());
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      TShortHashSet tShortHashSet0 = new TShortHashSet();
      short short0 = (short)683;
      tShortHashSet0.toArray();
      boolean boolean0 = tShortHashSet0.remove(short0);
      assertEquals(false, boolean0);
      assertEquals(23, tShortHashSet0.capacity());
  }
}
