/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TByteFunction;
import gnu.trove.map.TByteByteMap;
import gnu.trove.map.hash.TByteByteHashMap;
import gnu.trove.procedure.TByteByteProcedure;
import gnu.trove.procedure.TByteProcedure;
import gnu.trove.set.TByteSet;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteByteHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap$TValueView.<init>(Lgnu/trove/map/hash/TByteByteHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TByteByteHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TByteByteHashMap.valueCollection()Lgnu/trove/TByteCollection;: root-Branch
   * 4 gnu.trove.map.hash.TByteByteHashMap.setUp(I)I: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap();
      tByteByteHashMap0.valueCollection();
      assertEquals(23, tByteByteHashMap0.capacity());
  }

  //Test case number: 1
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.put(BB)B: root-Branch
   * 2 gnu.trove.map.hash.TByteByteHashMap.<init>(IFBB)V: root-Branch
   * 3 gnu.trove.map.hash.TByteByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 4 gnu.trove.map.hash.TByteByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 5 gnu.trove.map.hash.TByteByteHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 6 gnu.trove.map.hash.TByteByteHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 7 gnu.trove.map.hash.TByteByteHashMap.doPut(BBI)B: I12 Branch 40 IFGE L214 - true
   * 8 gnu.trove.map.hash.TByteByteHashMap.doPut(BBI)B: I41 Branch 41 IFEQ L221 - false
   * 9 gnu.trove.map.hash.TByteByteHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   * 10 gnu.trove.map.hash.TByteByteHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - false
   */

  @Test
  public void test1()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap((-1942), (float) (-1942), (byte)0, (byte)0);
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      hashMap0.put((Byte) (byte)0, (Byte) (byte)0);
      tByteByteHashMap0.putAll((Map<? extends Byte, ? extends Byte>) hashMap0);
      assertEquals(1, tByteByteHashMap0.size());
      assertEquals(7, tByteByteHashMap0.capacity());
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TByteByteHashMap.putIfAbsent(BB)B: I9 Branch 39 IFGE L205 - true
   * 3 gnu.trove.map.hash.TByteByteHashMap.remove(B)B: I14 Branch 46 IFLT L276 - false
   */

  @Test
  public void test2()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap();
      tByteByteHashMap0.putIfAbsent((byte)0, (byte)0);
      assertEquals("{0=0}", tByteByteHashMap0.toString());
      
      byte byte0 = tByteByteHashMap0.remove((byte)0);
      assertEquals((byte)0, byte0);
  }

  //Test case number: 3
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.increment(B)Z: root-Branch
   * 2 gnu.trove.map.hash.TByteByteHashMap.adjustValue(BB)Z: I9 Branch 71 IFGE L477 - false
   * 3 gnu.trove.map.hash.TByteByteHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(1537, 1.0F);
      boolean boolean0 = tByteByteHashMap0.increment((byte) (-1));
      assertEquals(false, boolean0);
      assertEquals(1597, tByteByteHashMap0.capacity());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteByteHashMap.clear()V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap();
      tByteByteHashMap0.clear();
      assertEquals(23, tByteByteHashMap0.capacity());
      assertEquals("{}", tByteByteHashMap0.toString());
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteByteHashMap.containsKey(B)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(1537, 1.0F);
      tByteByteHashMap0.containsKey((byte) (-1));
      assertEquals(1597, tByteByteHashMap0.capacity());
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteByteHashMap.forEachKey(Lgnu/trove/procedure/TByteProcedure;)Z: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(1537, 1.0F);
      boolean boolean0 = tByteByteHashMap0.forEachKey((TByteProcedure) null);
      assertEquals(true, boolean0);
      assertEquals(1597, tByteByteHashMap0.capacity());
  }

  //Test case number: 7
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.keySet()Lgnu/trove/set/TByteSet;: root-Branch
   * 2 gnu.trove.map.hash.TByteByteHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TByteByteHashMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TByteByteHashMap.<init>(I)V: root-Branch
   */

//   @Test
//   public void test7()  throws Throwable  {
//       TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap((int) (byte)0);
//       TByteSet tByteSet0 = tByteByteHashMap0.keySet();
//       assertEquals(0, tByteSet0.getNoEntryValue());
//   }

  //Test case number: 8
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.iterator()Lgnu/trove/iterator/TByteByteIterator;: root-Branch
   * 2 gnu.trove.map.hash.TByteByteHashMap$TByteByteHashIterator.<init>(Lgnu/trove/map/hash/TByteByteHashMap;Lgnu/trove/map/hash/TByteByteHashMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TByteByteHashMap.<init>(Lgnu/trove/map/TByteByteMap;)V: I10 Branch 34 IFEQ L133 - false
   * 4 gnu.trove.map.hash.TByteByteHashMap.<init>(Lgnu/trove/map/TByteByteMap;)V: I38 Branch 35 IFEQ L139 - false
   * 5 gnu.trove.map.hash.TByteByteHashMap.<init>(Lgnu/trove/map/TByteByteMap;)V: I50 Branch 36 IFEQ L143 - false
   * 6 gnu.trove.map.hash.TByteByteHashMap.putAll(Lgnu/trove/map/TByteByteMap;)V: I15 Branch 43 IFEQ L243 - true
   */

//   @Test
//   public void test8()  throws Throwable  {
//       TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap((-859), 10.0F, (byte) (-1), (byte) (-1));
//       TByteByteHashMap tByteByteHashMap1 = new TByteByteHashMap((TByteByteMap) tByteByteHashMap0);
//       assertEquals(-1, tByteByteHashMap1.getNoEntryValue());
//       assertEquals(3, tByteByteHashMap1.capacity());
//       assertEquals(-1, tByteByteHashMap1.getNoEntryKey());
//   }

  //Test case number: 9
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap$TByteByteHashIterator.value()B: root-Branch
   * 2 gnu.trove.map.hash.TByteByteHashMap$TByteByteHashIterator.key()B: root-Branch
   * 3 gnu.trove.map.hash.TByteByteHashMap$TByteByteHashIterator.advance()V: root-Branch
   * 4 gnu.trove.map.hash.TByteByteHashMap.doPut(BBI)B: I12 Branch 40 IFGE L214 - false
   * 5 gnu.trove.map.hash.TByteByteHashMap.doPut(BBI)B: I41 Branch 41 IFEQ L221 - true
   * 6 gnu.trove.map.hash.TByteByteHashMap.putAll(Lgnu/trove/map/TByteByteMap;)V: I15 Branch 43 IFEQ L243 - false
   * 7 gnu.trove.map.hash.TByteByteHashMap.adjustOrPutValue(BBB)B: I9 Branch 72 IFGE L491 - true
   * 8 gnu.trove.map.hash.TByteByteHashMap.adjustOrPutValue(BBB)B: I59 Branch 73 IFEQ L502 - false
   */

  @Test
  public void test9()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap((int) (byte)0);
      tByteByteHashMap0.adjustOrPutValue((byte)0, (byte) (-5), (byte) (-117));
      tByteByteHashMap0.putAll((TByteByteMap) tByteByteHashMap0);
      assertEquals(false, tByteByteHashMap0.isEmpty());
      assertEquals("{0=-117}", tByteByteHashMap0.toString());
  }

  //Test case number: 10
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.<init>(Lgnu/trove/map/TByteByteMap;)V: I38 Branch 35 IFEQ L139 - true
   * 2 gnu.trove.map.hash.TByteByteHashMap.<init>(Lgnu/trove/map/TByteByteMap;)V: I50 Branch 36 IFEQ L143 - true
   * 3 gnu.trove.map.hash.TByteByteHashMap.iterator()Lgnu/trove/iterator/TByteByteIterator;: root-Branch
   * 4 gnu.trove.map.hash.TByteByteHashMap.<init>(Lgnu/trove/map/TByteByteMap;)V: I10 Branch 34 IFEQ L133 - false
   * 5 gnu.trove.map.hash.TByteByteHashMap.putAll(Lgnu/trove/map/TByteByteMap;)V: I15 Branch 43 IFEQ L243 - true
   * 6 gnu.trove.map.hash.TByteByteHashMap$TByteByteHashIterator.<init>(Lgnu/trove/map/hash/TByteByteHashMap;Lgnu/trove/map/hash/TByteByteHashMap;)V: root-Branch
   */

//   @Test
//   public void test10()  throws Throwable  {
//       TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(1976);
//       TByteByteHashMap tByteByteHashMap1 = new TByteByteHashMap((TByteByteMap) tByteByteHashMap0);
//       assertEquals(23, tByteByteHashMap1.capacity());
//       assertEquals(0, tByteByteHashMap1.getNoEntryValue());
//       assertEquals(0, tByteByteHashMap1.getNoEntryKey());
//   }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteByteHashMap.putIfAbsent(BB)B: I9 Branch 39 IFGE L205 - false
   */

  @Test
  public void test11()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap();
      tByteByteHashMap0.putIfAbsent((byte)0, (byte)0);
      byte byte0 = tByteByteHashMap0.putIfAbsent((byte)0, (byte)0);
      assertEquals(1, tByteByteHashMap0.size());
      assertEquals((byte)0, byte0);
  }

  //Test case number: 12
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.get(B)B: I9 Branch 44 IFGE L253 - true
   * 2 gnu.trove.map.hash.TByteByteHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 3 gnu.trove.map.hash.TByteByteHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 4 gnu.trove.map.hash.TByteByteHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 5 gnu.trove.map.hash.TByteByteHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 6 gnu.trove.map.hash.TByteByteHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 7 gnu.trove.map.hash.TByteByteHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 8 gnu.trove.map.hash.TByteByteHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap((-968), 0.0F, (byte) (-13), (byte) (-109));
      tByteByteHashMap0.putIfAbsent((byte) (-13), (byte) (-95));
      boolean boolean0 = tByteByteHashMap0.equals((Object) tByteByteHashMap0);
      assertEquals(7, tByteByteHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteByteHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap();
      tByteByteHashMap0.putIfAbsent((byte)5, (byte) (-59));
      boolean boolean0 = tByteByteHashMap0.isEmpty();
      assertEquals(1, tByteByteHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteByteHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test14()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(1976);
      boolean boolean0 = tByteByteHashMap0.isEmpty();
      assertEquals(4177, tByteByteHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteByteHashMap.remove(B)B: I14 Branch 46 IFLT L276 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(148);
      byte byte0 = tByteByteHashMap0.remove((byte)97);
      assertEquals((byte)0, byte0);
      assertEquals(311, tByteByteHashMap0.capacity());
      assertEquals(true, tByteByteHashMap0.isEmpty());
  }

  //Test case number: 16
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.keys()[B: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TByteByteHashMap.keys()[B: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TByteByteHashMap.keys()[B: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TByteByteHashMap.keys()[B: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap((int) (byte)0);
      tByteByteHashMap0.adjustOrPutValue((byte)0, (byte) (-5), (byte) (-117));
      tByteByteHashMap0.keys();
      assertEquals(false, tByteByteHashMap0.isEmpty());
      assertEquals("{0=-117}", tByteByteHashMap0.toString());
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.keys([B)[B: I10 Branch 49 IF_ICMPGE L315 - true
   * 2 gnu.trove.map.hash.TByteByteHashMap.keys([B)[B: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TByteByteHashMap.keys([B)[B: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TByteByteHashMap.keys([B)[B: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap();
      byte[] byteArray0 = tByteByteHashMap0.keys(tByteByteHashMap0._states);
      assertNotNull(byteArray0);
      assertEquals(23, tByteByteHashMap0.capacity());
  }

  //Test case number: 18
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.keys([B)[B: I10 Branch 49 IF_ICMPGE L315 - false
   * 2 gnu.trove.map.hash.TByteByteHashMap.keys([B)[B: I44 Branch 51 IF_ICMPNE L323 - false
   * 3 gnu.trove.map.hash.TByteByteHashMap.keys([B)[B: I37 Branch 50 IFLE L322 - true
   * 4 gnu.trove.map.hash.TByteByteHashMap.keys([B)[B: I37 Branch 50 IFLE L322 - false
   * 5 gnu.trove.map.hash.TByteByteHashMap.keys([B)[B: I44 Branch 51 IF_ICMPNE L323 - true
   * 6 gnu.trove.map.hash.TByteByteHashMap.<init>([B[B)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 7 gnu.trove.map.hash.TByteByteHashMap.<init>([B[B)V: I24 Branch 33 IF_ICMPGE L119 - false
   */

  @Test
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[1];
      tByteByteHashMap0.adjustOrPutValue((byte) (-115), (byte)0, (byte)0);
      tByteByteHashMap0.keys(byteArray1);
      assertEquals(2, tByteByteHashMap0.size());
      assertEquals("{-115=0, 0=0}", tByteByteHashMap0.toString());
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.values()[B: I27 Branch 52 IFLE L343 - true
   * 2 gnu.trove.map.hash.TByteByteHashMap.values()[B: I27 Branch 52 IFLE L343 - false
   * 3 gnu.trove.map.hash.TByteByteHashMap.values()[B: I34 Branch 53 IF_ICMPNE L344 - true
   * 4 gnu.trove.map.hash.TByteByteHashMap.values()[B: I34 Branch 53 IF_ICMPNE L344 - false
   */

  @Test
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(byteArray0, byteArray0);
      byte[] byteArray1 = tByteByteHashMap0.values();
      assertEquals(1, tByteByteHashMap0.size());
      assertNotNull(byteArray1);
      assertEquals("{0=0}", tByteByteHashMap0.toString());
      assertEquals(11, tByteByteHashMap0.capacity());
  }

  //Test case number: 20
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.values([B)[B: I44 Branch 56 IF_ICMPNE L363 - false
   * 2 gnu.trove.map.hash.TByteByteHashMap.values([B)[B: I10 Branch 54 IF_ICMPGE L355 - true
   * 3 gnu.trove.map.hash.TByteByteHashMap.values([B)[B: I37 Branch 55 IFLE L362 - true
   * 4 gnu.trove.map.hash.TByteByteHashMap.values([B)[B: I37 Branch 55 IFLE L362 - false
   * 5 gnu.trove.map.hash.TByteByteHashMap.values([B)[B: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(byteArray0, byteArray0);
      byte[] byteArray1 = tByteByteHashMap0.values(tByteByteHashMap0._set);
      assertNotNull(byteArray1);
      assertEquals(17, tByteByteHashMap0.capacity());
      assertEquals(1, tByteByteHashMap0.size());
      assertEquals("{0=0}", tByteByteHashMap0.toString());
  }

  //Test case number: 21
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.containsValue(B)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TByteByteHashMap.containsValue(B)Z: I30 Branch 59 IF_ICMPNE L377 - true
   * 3 gnu.trove.map.hash.TByteByteHashMap.containsValue(B)Z: I18 Branch 57 IFLE L376 - true
   * 4 gnu.trove.map.hash.TByteByteHashMap.containsValue(B)Z: I18 Branch 57 IFLE L376 - false
   * 5 gnu.trove.map.hash.TByteByteHashMap.containsValue(B)Z: I25 Branch 58 IF_ICMPNE L377 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap((int) (byte)0);
      tByteByteHashMap0.adjustOrPutValue((byte)0, (byte) (-5), (byte) (-117));
      boolean boolean0 = tByteByteHashMap0.containsValue((byte) (-106));
      assertEquals(1, tByteByteHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 22
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.containsValue(B)Z: I30 Branch 59 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TByteByteHashMap.containsValue(B)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TByteByteHashMap.containsValue(B)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 4 gnu.trove.map.hash.TByteByteHashMap.containsValue(B)Z: I25 Branch 58 IF_ICMPNE L377 - false
   */

  @Test
  public void test22()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap();
      tByteByteHashMap0.putIfAbsent((byte)0, (byte)0);
      boolean boolean0 = tByteByteHashMap0.containsValue((byte)0);
      assertEquals(false, tByteByteHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TByteByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TByteByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test23()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(1537, 1.0F);
      boolean boolean0 = tByteByteHashMap0.forEachValue((TByteProcedure) null);
      assertEquals(true, boolean0);
      assertEquals(1597, tByteByteHashMap0.capacity());
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TByteByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TByteByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(byteArray0, byteArray0);
      // Undeclared exception!
      try {
        tByteByteHashMap0.forEachValue((TByteProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 25
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TByteByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TByteByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   * 4 gnu.trove.map.hash.TByteByteHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(1537, 1.0F);
      tByteByteHashMap0.transformValues((TByteFunction) null);
      assertEquals(1597, tByteByteHashMap0.capacity());
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TByteByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TByteByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(byteArray0, byteArray0);
      // Undeclared exception!
      try {
        tByteByteHashMap0.transformValues((TByteFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.retainEntries(Lgnu/trove/procedure/TByteByteProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TByteByteHashMap.retainEntries(Lgnu/trove/procedure/TByteByteProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TByteByteHashMap.retainEntries(Lgnu/trove/procedure/TByteByteProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test27()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap((-968), 0.0F, (byte) (-13), (byte) (-109));
      boolean boolean0 = tByteByteHashMap0.retainEntries((TByteByteProcedure) null);
      assertEquals("{}", tByteByteHashMap0.toString());
      assertEquals(3, tByteByteHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 28
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.retainEntries(Lgnu/trove/procedure/TByteByteProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TByteByteHashMap.retainEntries(Lgnu/trove/procedure/TByteByteProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TByteByteHashMap.retainEntries(Lgnu/trove/procedure/TByteByteProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap();
      TByteByteHashMap tByteByteHashMap1 = new TByteByteHashMap(tByteByteHashMap0._set, tByteByteHashMap0._states);
      // Undeclared exception!
      try {
        tByteByteHashMap1.retainEntries((TByteByteProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteByteHashMap.adjustValue(BB)Z: I9 Branch 71 IFGE L477 - true
   */

  @Test
  public void test29()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap();
      tByteByteHashMap0.putIfAbsent((byte)0, (byte)0);
      boolean boolean0 = tByteByteHashMap0.adjustValue((byte)0, (byte)0);
      assertEquals(1, tByteByteHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.adjustOrPutValue(BBB)B: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TByteByteHashMap.adjustOrPutValue(BBB)B: I59 Branch 73 IFEQ L502 - true
   */

  @Test
  public void test30()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(148);
      tByteByteHashMap0.compact();
      tByteByteHashMap0.put((byte)122, (byte)122);
      TByteByteHashMap tByteByteHashMap1 = new TByteByteHashMap(148, (float) (byte)0, (byte)3, (byte)3);
      tByteByteHashMap0._set = tByteByteHashMap1._states;
      tByteByteHashMap0.trimToSize();
      byte byte0 = tByteByteHashMap0.adjustOrPutValue((byte)0, (byte)0, (byte) (-86));
      assertEquals(false, tByteByteHashMap0.isEmpty());
      assertEquals((byte)122, byte0);
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteByteHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   */

  @Test
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(byteArray0, byteArray0);
      boolean boolean0 = tByteByteHashMap0.equals((Object) "1");
      assertEquals(1, tByteByteHashMap0.size());
      assertEquals("{0=0}", tByteByteHashMap0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteByteHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   */

  @Test
  public void test32()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(148);
      tByteByteHashMap0.put((byte)97, (byte)97);
      TByteByteHashMap tByteByteHashMap1 = new TByteByteHashMap(148, (float) (byte)0, (byte)3, (byte)3);
      boolean boolean0 = tByteByteHashMap0.equals((Object) tByteByteHashMap1);
      assertEquals(false, tByteByteHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 33
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - false
   * 2 gnu.trove.map.hash.TByteByteHashMap.equals(Ljava/lang/Object;)Z: I87 Branch 79 IF_ICMPEQ L1200 - false
   * 3 gnu.trove.map.hash.TByteByteHashMap.equals(Ljava/lang/Object;)Z: I90 Branch 80 IF_ICMPEQ L1200 - false
   * 4 gnu.trove.map.hash.TByteByteHashMap.get(B)B: I9 Branch 44 IFGE L253 - true
   */

  @Test
  public void test33()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(148);
      tByteByteHashMap0.put((byte)97, (byte)97);
      TByteByteHashMap tByteByteHashMap1 = new TByteByteHashMap(148, (float) (byte)0, (byte)3, (byte)3);
      tByteByteHashMap1.putIfAbsent((byte)97, (byte)0);
      boolean boolean0 = tByteByteHashMap0.equals((Object) tByteByteHashMap1);
      assertEquals("{97=97}", tByteByteHashMap0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 34
  /*
   * 15 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.equals(Ljava/lang/Object;)Z: I90 Branch 80 IF_ICMPEQ L1200 - true
   * 2 gnu.trove.map.hash.TByteByteHashMap.<init>(IFBB)V: root-Branch
   * 3 gnu.trove.map.hash.TByteByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 4 gnu.trove.map.hash.TByteByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 5 gnu.trove.map.hash.TByteByteHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 6 gnu.trove.map.hash.TByteByteHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 7 gnu.trove.map.hash.TByteByteHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 8 gnu.trove.map.hash.TByteByteHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 9 gnu.trove.map.hash.TByteByteHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 10 gnu.trove.map.hash.TByteByteHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 11 gnu.trove.map.hash.TByteByteHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 12 gnu.trove.map.hash.TByteByteHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 13 gnu.trove.map.hash.TByteByteHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - false
   * 14 gnu.trove.map.hash.TByteByteHashMap.equals(Ljava/lang/Object;)Z: I87 Branch 79 IF_ICMPEQ L1200 - false
   * 15 gnu.trove.map.hash.TByteByteHashMap.get(B)B: I9 Branch 44 IFGE L253 - false
   */

  @Test
  public void test34()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(148);
      tByteByteHashMap0.put((byte)122, (byte)122);
      TByteByteHashMap tByteByteHashMap1 = new TByteByteHashMap(148, (float) (byte)0, (byte)3, (byte)3);
      tByteByteHashMap1.putIfAbsent((byte) (-52), (byte)0);
      boolean boolean0 = tByteByteHashMap0.equals((Object) tByteByteHashMap1);
      assertEquals(false, tByteByteHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 35
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 2 gnu.trove.map.hash.TByteByteHashMap.<init>(I)V: root-Branch
   * 3 gnu.trove.map.hash.TByteByteHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 4 gnu.trove.map.hash.TByteByteHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 5 gnu.trove.map.hash.TByteByteHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   * 6 gnu.trove.map.hash.TByteByteHashMap.adjustOrPutValue(BBB)B: I9 Branch 72 IFGE L491 - true
   * 7 gnu.trove.map.hash.TByteByteHashMap.adjustOrPutValue(BBB)B: I59 Branch 73 IFEQ L502 - false
   */

  @Test
  public void test35()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap((int) (byte)0);
      tByteByteHashMap0.adjustOrPutValue((byte)0, (byte) (-5), (byte) (-117));
      int int0 = tByteByteHashMap0.hashCode();
      assertEquals(false, tByteByteHashMap0.isEmpty());
      assertEquals((-117), int0);
  }

  //Test case number: 36
  /*
   * 11 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap$1.execute(BB)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TByteByteHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TByteByteHashMap.toString()Ljava/lang/String;: root-Branch
   * 4 gnu.trove.map.hash.TByteByteHashMap.forEachEntry(Lgnu/trove/procedure/TByteByteProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 5 gnu.trove.map.hash.TByteByteHashMap.forEachEntry(Lgnu/trove/procedure/TByteByteProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 6 gnu.trove.map.hash.TByteByteHashMap.forEachEntry(Lgnu/trove/procedure/TByteByteProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 7 gnu.trove.map.hash.TByteByteHashMap.forEachEntry(Lgnu/trove/procedure/TByteByteProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 8 gnu.trove.map.hash.TByteByteHashMap.forEachEntry(Lgnu/trove/procedure/TByteByteProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 9 gnu.trove.map.hash.TByteByteHashMap.putIfAbsent(BB)B: I9 Branch 39 IFGE L205 - true
   * 10 gnu.trove.map.hash.TByteByteHashMap$1.<init>(Lgnu/trove/map/hash/TByteByteHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 11 gnu.trove.map.hash.TByteByteHashMap$1.execute(BB)Z: I4 Branch 115 IFEQ L1233 - false
   */

  @Test
  public void test36()  throws Throwable  {
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap();
      tByteByteHashMap0.putIfAbsent((byte)0, (byte)0);
      tByteByteHashMap0.putIfAbsent((byte)95, (byte)95);
      String string0 = tByteByteHashMap0.toString();
      assertEquals(false, tByteByteHashMap0.isEmpty());
      assertEquals("{95=95, 0=0}", string0);
  }

  //Test case number: 37
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TByteByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 2 gnu.trove.map.hash.TByteByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 3 gnu.trove.map.hash.TByteByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 4 gnu.trove.map.hash.TByteByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 5 gnu.trove.map.hash.TByteByteHashMap.put(BB)B: root-Branch
   * 6 gnu.trove.map.hash.TByteByteHashMap.setUp(I)I: root-Branch
   * 7 gnu.trove.map.hash.TByteByteHashMap.doPut(BBI)B: I12 Branch 40 IFGE L214 - true
   * 8 gnu.trove.map.hash.TByteByteHashMap.doPut(BBI)B: I12 Branch 40 IFGE L214 - false
   * 9 gnu.trove.map.hash.TByteByteHashMap.doPut(BBI)B: I41 Branch 41 IFEQ L221 - true
   * 10 gnu.trove.map.hash.TByteByteHashMap.doPut(BBI)B: I41 Branch 41 IFEQ L221 - false
   * 11 gnu.trove.map.hash.TByteByteHashMap.<init>([B[B)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 12 gnu.trove.map.hash.TByteByteHashMap.<init>([B[B)V: I24 Branch 33 IF_ICMPGE L119 - false
   */

  @Test
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      TByteByteHashMap tByteByteHashMap0 = new TByteByteHashMap(byteArray0, byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((int) (byte)0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tByteByteHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(11, tByteByteHashMap0.capacity());
      assertEquals(1, tByteByteHashMap0.size());
      assertEquals("{0=0}", tByteByteHashMap0.toString());
      assertEquals(false, tByteByteHashMap0.isEmpty());
  }
}
