/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TLongFloatMap;
import gnu.trove.map.hash.TLongFloatHashMap;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.set.TLongSet;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TLongFloatHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


//   @Test
//   public void test0()  throws Throwable  {
//       int int0 = 1768;
//       TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0);
//       boolean boolean0 = true;
//       tLongFloatHashMap0.reenableAutoCompaction(boolean0);
//       assertEquals(0L, tLongFloatHashMap0.getNoEntryKey());
//       assertEquals(3821, tLongFloatHashMap0.capacity());
//       assertEquals(0.0F, tLongFloatHashMap0.getNoEntryValue(), 0.01F);
//   }

//   @Test
//   public void test1()  throws Throwable  {
//       int int0 = (-204);
//       TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0);
//       TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap0);
//       tLongFloatHashMap1.clear();
//       assertEquals(0L, tLongFloatHashMap0.getNoEntryKey());
//       assertEquals(23, tLongFloatHashMap1.capacity());
//       assertEquals(0.0F, tLongFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(0.0F, tLongFloatHashMap1.getNoEntryValue(), 0.01F);
//   }

//   @Test
//   public void test2()  throws Throwable  {
//       int int0 = 0;
//       TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0, int0);
//       long long0 = 1L;
//       float float0 = tLongFloatHashMap0.get(long0);
//       assertEquals(0.0F, float0, 0.01F);
//       
//       TLongFloatHashMap tLongFloatHashMap1 = null;
//       try {
//         tLongFloatHashMap1 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap0);
//         fail("Expecting exception: OutOfMemoryError");
//       
//       } catch(OutOfMemoryError e) {
//          //
//          // Java heap space
//          //
//       }
//   }

  @Test
  public void test3()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = (-639L);
      longArray0[0] = long0;
      long long1 = 0L;
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = (-469L);
      longArray0[3] = long3;
      long long4 = 0L;
      longArray0[4] = long4;
      long long5 = 316L;
      longArray0[5] = long5;
      long long6 = (-1322L);
      longArray0[6] = long6;
      long long7 = (-9223372036854775808L);
      longArray0[7] = long7;
      long long8 = 0L;
      longArray0[8] = long8;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) long0;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
      TLongFloatMap tLongFloatMap0 = null;
      TLongFloatHashMap tLongFloatHashMap1 = null;
      try {
        tLongFloatHashMap1 = new TLongFloatHashMap(tLongFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test4()  throws Throwable  {
//       long[] longArray0 = new long[10];
//       long long0 = 666L;
//       longArray0[0] = long0;
//       long long1 = 1L;
//       longArray0[1] = long1;
//       long long2 = 0L;
//       longArray0[2] = long2;
//       long long3 = (-59L);
//       longArray0[3] = long3;
//       long long4 = 209L;
//       longArray0[4] = long4;
//       long long5 = (-1328L);
//       longArray0[5] = long5;
//       long long6 = 1L;
//       longArray0[6] = long6;
//       long long7 = (-695L);
//       longArray0[7] = long7;
//       long long8 = (-1133L);
//       longArray0[8] = long8;
//       long long9 = (-827L);
//       longArray0[9] = long9;
//       float[] floatArray0 = new float[6];
//       floatArray0[0] = (float) long8;
//       floatArray0[1] = (float) long4;
//       floatArray0[2] = (float) longArray0[6];
//       float float0 = (-807.86804F);
//       floatArray0[3] = float0;
//       floatArray0[4] = (float) longArray0[4];
//       floatArray0[5] = (float) long5;
//       TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
//       assertEquals("{666=-1133.0, -1328=-1328.0, -59=-807.86804, 209=209.0, 1=209.0, 0=1.0}", tLongFloatHashMap0.toString());
//       
//       long[] longArray1 = new long[7];
//       long long10 = 130L;
//       longArray1[0] = long10;
//       long long11 = 0L;
//       longArray1[1] = long11;
//       long long12 = 0L;
//       longArray1[2] = long12;
//       long long13 = 0L;
//       longArray1[3] = long13;
//       long long14 = (-228L);
//       longArray1[4] = long14;
//       long long15 = (-1L);
//       longArray1[5] = long15;
//       long long16 = (-1291L);
//       longArray1[6] = long16;
//       float[] floatArray1 = new float[4];
//       floatArray1[0] = (float) long15;
//       floatArray1[1] = (float) longArray1[0];
//       floatArray1[2] = (float) longArray1[5];
//       floatArray1[3] = (float) longArray1[2];
//       TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(longArray1, floatArray1);
//       TLongSet tLongSet0 = tLongFloatHashMap1.keySet();
//       assertEquals(0.0F, tLongFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals(2, tLongFloatHashMap1.size());
//       assertEquals("{130=-1.0, 0=0.0}", tLongFloatHashMap1.toString());
//       assertEquals(0L, tLongFloatHashMap1.getNoEntryKey());
//       assertEquals(2, tLongSet0.size());
//   }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 142;
          TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0, int0);
          boolean boolean0 = true;
          TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap0);
          String string0 = "J^:}";
          File file0 = new File(string0);
          File file1 = file0.getAbsoluteFile();
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(file1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/mnt/fastdata/ac1gf/Experiments_Major/apps/trove-3.0.2/J^:}\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:165)
             // java.io.PrintStream.<init>(PrintStream.java:279)
             // sun.reflect.GeneratedConstructorAccessor15.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

//   @Test
//   public void test6()  throws Throwable  {
//       int int0 = 1837;
//       TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0, int0);
//       float float0 = tLongFloatHashMap0.getNoEntryValue();
//       assertEquals(0.0F, float0, 0.01F);
//       assertEquals(0L, tLongFloatHashMap0.getNoEntryKey());
//       
//       int int1 = (-1445);
//       TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap();
//       TLongFloatHashMap tLongFloatHashMap2 = new TLongFloatHashMap(int1);
//       assertEquals(0L, tLongFloatHashMap2.getNoEntryKey());
//       assertEquals(0.0F, tLongFloatHashMap2.getNoEntryValue(), 0.01F);
//       
//       // Undeclared exception!
//       try {
//         tLongFloatHashMap1.setAutoCompactionFactor((float) int1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Factor must be >= 0: -1445.0
//          //
//       }
//   }

  @Test
  public void test7()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = (-1553L);
      longArray0[0] = long0;
      long long1 = 0L;
      longArray0[1] = long1;
      long long2 = (-2022L);
      longArray0[2] = long2;
      long long3 = 1886L;
      longArray0[3] = long3;
      long long4 = (-178L);
      longArray0[4] = long4;
      long long5 = (-1L);
      longArray0[5] = long5;
      long long6 = 0L;
      longArray0[6] = long6;
      long long7 = 0L;
      longArray0[7] = long7;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) long4;
      floatArray0[1] = (float) long3;
      float float0 = 0.0F;
      floatArray0[2] = float0;
      floatArray0[3] = (float) longArray0[4];
      floatArray0[4] = (float) longArray0[5];
      floatArray0[5] = (float) longArray0[0];
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
      int int0 = (-1);
      tLongFloatHashMap0.ensureCapacity(int0);
      int int1 = 1020;
      float float1 = (-483.8203F);
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(int1, float1);
      tLongFloatHashMap1.ensureCapacity(int1);
      TLongFloatHashMap tLongFloatHashMap2 = new TLongFloatHashMap();
      float float2 = tLongFloatHashMap2.getNoEntryValue();
      long long8 = 1L;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      long long9 = 0L;
      tLongFloatHashMap2.adjustOrPutValue(long9, float2, float2);
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 175;
      float float0 = 16.484236F;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0, float0);
      boolean boolean0 = false;
      tLongFloatHashMap0.reenableAutoCompaction(boolean0);
      int int1 = 1254;
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(int1, int1, int1, int1);
      tLongFloatHashMap1.clear();
      int int2 = (-410);
      int int3 = 1876;
      TLongFloatHashMap tLongFloatHashMap2 = new TLongFloatHashMap(int3);
      assertEquals(3821, tLongFloatHashMap2.capacity());
      
      tLongFloatHashMap1.getAutoCompactionFactor();
      tLongFloatHashMap2.compact();
      tLongFloatHashMap1.trimToSize();
      TLongFloatHashMap tLongFloatHashMap3 = new TLongFloatHashMap(int2);
      tLongFloatHashMap0.getNoEntryValue();
      tLongFloatHashMap3.increment((long) int2);
      tLongFloatHashMap3.getNoEntryValue();
      long long0 = (-1555L);
      float float1 = 0.0F;
      boolean boolean1 = tLongFloatHashMap0.adjustValue(long0, float1);
      tLongFloatHashMap1.reenableAutoCompaction(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      float float0 = 487.2641F;
      int int1 = (-1409);
      int int2 = (-364);
      float float1 = (-1672.1046F);
      long[] longArray0 = new long[10];
      longArray0[0] = (long) int2;
      longArray0[1] = (long) int2;
      longArray0[2] = (long) int2;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int1;
      longArray0[6] = (long) int0;
      longArray0[7] = (long) int1;
      longArray0[8] = (long) int1;
      longArray0[9] = (long) int2;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) longArray0[4];
      floatArray0[1] = (float) longArray0[6];
      floatArray0[2] = float0;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(int2, float1, (long) int0, float1);
      long long0 = 0L;
      tLongFloatHashMap1.put(long0, (float) int0);
      TLongFloatHashMap tLongFloatHashMap2 = new TLongFloatHashMap(int1, float0, (long) int1, float0);
      tLongFloatHashMap2.keys();
      float float2 = 1328.0273F;
      TLongFloatHashMap tLongFloatHashMap3 = new TLongFloatHashMap(int0, float0, (long) int0, float2);
      tLongFloatHashMap3.valueCollection();
      String string0 = "Ir2Ls)HH~";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // Ir2Ls)HH~
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0, int0);
      long long0 = (-1539L);
      tLongFloatHashMap0.containsKey(long0);
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap();
      float[] floatArray0 = tLongFloatHashMap1.values();
      assertNotNull(floatArray0);
      
      int int1 = 185;
      TLongFloatHashMap tLongFloatHashMap2 = new TLongFloatHashMap(int1);
      assertEquals(379, tLongFloatHashMap2.capacity());
      
      tLongFloatHashMap2.compact();
      tLongFloatHashMap2.iterator();
      assertEquals(0L, tLongFloatHashMap2.getNoEntryKey());
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      long long0 = 0L;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0, (float) int0, long0, (float) int0);
      int int1 = 0;
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(int1);
      boolean boolean0 = tLongFloatHashMap0.contains((long) int1);
      tLongFloatHashMap1.clear();
      float[] floatArray0 = tLongFloatHashMap1.values();
      TLongFloatHashMap tLongFloatHashMap2 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap1);
      long long1 = (-514L);
      tLongFloatHashMap1.reenableAutoCompaction(boolean0);
      tLongFloatHashMap2.contains(long1);
      TLongFloatHashMap tLongFloatHashMap3 = new TLongFloatHashMap(tLongFloatHashMap1._set, floatArray0);
      long long2 = 1L;
      tLongFloatHashMap2.increment(long2);
      tLongFloatHashMap0.getNoEntryValue();
      Locale locale0 = Locale.FRENCH;
      String string0 = locale0.getDisplayVariant();
      tLongFloatHashMap2.equals((Object) string0);
      String string1 = ">";
      File file0 = new File(string1);
      tLongFloatHashMap1.trimToSize();
      tLongFloatHashMap0.getNoEntryValue();
      File file1 = file0.getCanonicalFile();
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(file1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /mnt/fastdata/ac1gf/Experiments_Major/apps/trove-3.0.2/> (No such file or directory)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-1704);
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0, int0);
      long[] longArray0 = tLongFloatHashMap0._set;
      float float0 = 1.0F;
      long long0 = (-1331L);
      float float1 = (-991.609F);
      tLongFloatHashMap0.adjustValue(long0, float1);
      tLongFloatHashMap0.put((long) int0, float0);
      tLongFloatHashMap0.trimToSize();
      tLongFloatHashMap0.iterator();
      tLongFloatHashMap0.keys();
      TFloatProcedure tFloatProcedure0 = null;
      // Undeclared exception!
      try {
        tLongFloatHashMap0.forEachValue(tFloatProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test13()  throws Throwable  {
//       int int0 = (-678);
//       float float0 = 0.0F;
//       TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0, float0);
//       float[] floatArray0 = new float[4];
//       floatArray0[0] = (float) int0;
//       floatArray0[1] = float0;
//       floatArray0[2] = (float) int0;
//       float float1 = 689.3899F;
//       floatArray0[3] = float1;
//       TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(tLongFloatHashMap0._set, floatArray0);
//       assertEquals("{0=-678.0}", tLongFloatHashMap1.toString());
//       assertEquals(11, tLongFloatHashMap1.capacity());
//       assertEquals(0.0F, tLongFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals(0L, tLongFloatHashMap1.getNoEntryKey());
//       assertEquals(1, tLongFloatHashMap1.size());
//       
//       TLongFloatMap tLongFloatMap0 = null;
//       // Undeclared exception!
//       try {
//         tLongFloatHashMap0.putAll(tLongFloatMap0);
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1332;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0);
      tLongFloatHashMap0.contains((long) int0);
      int int1 = (-1940);
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(int1, int1);
      OutputStream outputStream0 = null;
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test15()  throws Throwable  {
//       int int0 = (-1209);
//       float float0 = 1473.4257F;
//       TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0, float0);
//       TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(int0, int0);
//       boolean boolean0 = tLongFloatHashMap0.increment((long) int0);
//       assertEquals(false, boolean0);
//       
//       tLongFloatHashMap1.reenableAutoCompaction(boolean0);
//       float[] floatArray0 = new float[3];
//       floatArray0[0] = float0;
//       floatArray0[1] = (float) int0;
//       floatArray0[2] = (float) int0;
//       float[] floatArray1 = tLongFloatHashMap0.values(floatArray0);
//       assertNotNull(floatArray1);
//       
//       tLongFloatHashMap0.putAll((TLongFloatMap) tLongFloatHashMap1);
//       assertEquals(0L, tLongFloatHashMap0.getNoEntryKey());
//       assertEquals(0.0F, tLongFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(0L, tLongFloatHashMap1.getNoEntryKey());
//   }

  @Test
  public void test16()  throws Throwable  {
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap();
      tLongFloatHashMap0.clear();
      int int0 = 0;
      long long0 = 0L;
      tLongFloatHashMap0.remove(long0);
      tLongFloatHashMap0.contains(long0);
      long long1 = 0L;
      float float0 = (-1294.8971F);
      tLongFloatHashMap0.isEmpty();
      float[] floatArray0 = new float[2];
      floatArray0[0] = float0;
      floatArray0[0] = (float) long1;
      floatArray0[1] = (float) long1;
      floatArray0[1] = (float) long1;
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(tLongFloatHashMap0._set, floatArray0);
      long long2 = 84L;
      tLongFloatHashMap0.contains(long2);
      TLongFloatHashMap tLongFloatHashMap2 = new TLongFloatHashMap();
      floatArray0[0] = (float) long1;
      floatArray0[1] = (float) int0;
      TLongFloatHashMap tLongFloatHashMap3 = new TLongFloatHashMap();
      tLongFloatHashMap3.compact();
      long long3 = 1504L;
      float float1 = 1.0F;
      tLongFloatHashMap0.adjustOrPutValue(long3, float1, (float) long3);
      assertEquals(1, tLongFloatHashMap0.size());
      
      tLongFloatHashMap3.trimToSize();
      TLongFloatHashMap tLongFloatHashMap4 = new TLongFloatHashMap(int0, (float) int0, long1, float0);
      tLongFloatHashMap4.tempDisableAutoCompaction();
      tLongFloatHashMap2.hashCode();
      tLongFloatHashMap4.getNoEntryValue();
      tLongFloatHashMap4.values();
      assertFalse(tLongFloatHashMap4.equals(tLongFloatHashMap0));
  }

//   @Test
//   public void test17()  throws Throwable  {
//       int int0 = (-1896);
//       TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0);
//       assertEquals(0.0F, tLongFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(0L, tLongFloatHashMap0.getNoEntryKey());
//   }

  @Test
  public void test18()  throws Throwable  {
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap();
      tLongFloatHashMap0.toString();
      long[] longArray0 = new long[8];
      long long0 = 1943L;
      longArray0[0] = long0;
      long long1 = (-9223372036854775808L);
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = 748L;
      longArray0[3] = long3;
      long long4 = 625L;
      longArray0[4] = long4;
      long long5 = (-1665L);
      longArray0[5] = long5;
      long long6 = (-1217L);
      longArray0[6] = long6;
      long long7 = (-1861L);
      longArray0[7] = long7;
      tLongFloatHashMap0.keys(longArray0);
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap0);
      long long8 = (-746L);
      tLongFloatHashMap1.containsKey(long8);
      tLongFloatHashMap1.tempDisableAutoCompaction();
      int int0 = 0;
      tLongFloatHashMap1._states = tLongFloatHashMap0._states;
      long long9 = 502L;
      float float0 = 202.31564F;
      tLongFloatHashMap1.adjustOrPutValue(long9, (float) long9, float0);
      assertEquals(false, tLongFloatHashMap1.isEmpty());
      
      TLongFloatHashMap tLongFloatHashMap2 = new TLongFloatHashMap(int0, int0, int0, int0);
      tLongFloatHashMap2.getAutoCompactionFactor();
      tLongFloatHashMap2.trimToSize();
      assertEquals(0L, tLongFloatHashMap2.getNoEntryKey());
  }
}
