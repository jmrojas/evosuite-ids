/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TIntCollection;
import gnu.trove.list.TIntList;
import gnu.trove.map.TIntObjectMap;
import gnu.trove.map.hash.TIntObjectHashMap;
import gnu.trove.set.hash.TIntHashSet;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntHashEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 0;
      int int1 = 1652;
      TIntHashSet tIntHashSet0 = new TIntHashSet(int0, int0, int1);
      tIntHashSet0.ensureCapacity(int0);
      TIntHashSet tIntHashSet1 = new TIntHashSet();
      int int2 = (-1225);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      tIntHashSet1.removeAll((Collection<?>) linkedList0);
      int int3 = (-1);
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>(int3, int3, int0);
      TIntObjectHashMap<Object> tIntObjectHashMap1 = new TIntObjectHashMap<Object>((TIntObjectMap<?>) tIntObjectHashMap0);
      tIntObjectHashMap1.keys();
      tIntHashSet1.contains(int2);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      TIntList tIntList0 = null;
      tIntHashSet1.containsAll((Collection<?>) linkedList1);
      tIntHashSet1.getAutoCompactionFactor();
      tIntHashSet1.containsAll(tIntHashSet0._set);
      Locale locale0 = Locale.PRC;
      String string0 = locale0.getDisplayVariant();
      linkedList1.toString();
      tIntHashSet1.equals((Object) string0);
      TIntObjectHashMap<Object> tIntObjectHashMap2 = new TIntObjectHashMap<Object>();
      Locale locale1 = Locale.CANADA;
      String string1 = locale1.getDisplayLanguage();
      linkedList1.add((Object) string1);
      String string2 = "e>9#`";
      tIntHashSet1.iterator();
      URI uRI0 = null;
      try {
        uRI0 = new URI(string2, string2, string2);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 1: e>9#`:e%3E9%23%60#e%3E9%23%60
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      float float0 = (-1.0F);
      float float1 = 204.76016F;
      TIntObjectHashMap<String> tIntObjectHashMap0 = new TIntObjectHashMap<String>(int0, float1);
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)51;
      byteArray0[0] = byte0;
      byte byte1 = (byte)92;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)119;
      byteArray0[3] = byte3;
      byte byte4 = (byte)63;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-72);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-25);
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-57);
      byteArray0[8] = byte8;
      byte byte9 = (byte)0;
      byteArray0[9] = byte9;
      tIntObjectHashMap0._states = byteArray0;
      TIntObjectHashMap<Object> tIntObjectHashMap1 = new TIntObjectHashMap<Object>(int0, float0, int0);
      Object object0 = null;
      tIntObjectHashMap1.equals(object0);
      assertEquals(0, tIntObjectHashMap1.getNoEntryValue());
      
      TIntHashSet tIntHashSet0 = new TIntHashSet();
      tIntHashSet0.toArray();
      assertEquals(23, tIntHashSet0.capacity());
      assertEquals(0, tIntHashSet0.getNoEntryValue());
  }

  @Test
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = int0;
      TIntHashSet tIntHashSet0 = new TIntHashSet(intArray0);
      int int1 = (-2011);
      int int2 = 0;
      TIntHashSet tIntHashSet1 = new TIntHashSet(int2, int1);
      int int3 = tIntHashSet1.size();
      float float0 = (-1655.5189F);
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>(int1, float0, int1);
      float float1 = 338.90726F;
      int int4 = 0;
      TIntObjectHashMap<Integer> tIntObjectHashMap1 = new TIntObjectHashMap<Integer>(int0, float1, int4);
      tIntObjectHashMap1.compact();
      TIntObjectHashMap<Object> tIntObjectHashMap2 = new TIntObjectHashMap<Object>((TIntObjectMap<?>) tIntObjectHashMap0);
      float float2 = 0.0F;
      tIntObjectHashMap0.setAutoCompactionFactor(float2);
      tIntObjectHashMap2.tempDisableAutoCompaction();
      int int5 = 751;
      int[] intArray1 = new int[1];
      intArray1[0] = int5;
      intArray1[0] = int5;
      TIntHashSet tIntHashSet2 = new TIntHashSet(intArray1);
      assertEquals("{751}", tIntHashSet2.toString());
      
      int int6 = 353;
      TIntObjectHashMap<Object> tIntObjectHashMap3 = new TIntObjectHashMap<Object>(int6);
      tIntHashSet0.toArray(tIntHashSet1._set);
      float float3 = 1428.5626F;
      TIntObjectHashMap<Integer> tIntObjectHashMap4 = new TIntObjectHashMap<Integer>();
      tIntHashSet1.hashCode();
      float float4 = 1401.6141F;
      tIntHashSet0.add(int3);
      assertEquals(false, tIntHashSet0.isEmpty());
      assertFalse(tIntHashSet1.equals(tIntHashSet2));
      assertEquals("{0}", tIntHashSet0.toString());
      
      tIntObjectHashMap3.clear();
      assertEquals(0, tIntObjectHashMap3.getNoEntryValue());
      
      tIntObjectHashMap4.setAutoCompactionFactor(float4);
      TIntObjectHashMap<Object> tIntObjectHashMap5 = new TIntObjectHashMap<Object>(int5, float3);
      TIntObjectHashMap<Integer> tIntObjectHashMap6 = new TIntObjectHashMap<Integer>((TIntObjectMap<? extends Integer>) tIntObjectHashMap4);
      assertEquals(23, tIntObjectHashMap4.capacity());
      assertEquals(0, tIntObjectHashMap4.getNoEntryValue());
      
      tIntObjectHashMap5.clear();
      assertEquals(0, tIntObjectHashMap5.getNoEntryValue());
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      int int2 = 14143;
      TIntObjectHashMap<String> tIntObjectHashMap0 = new TIntObjectHashMap<String>(int2);
      ObjectOutput objectOutput0 = null;
      // Undeclared exception!
      try {
        tIntObjectHashMap0.writeExternal(objectOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>(int0, int0, int0);
      TIntObjectHashMap<Object> tIntObjectHashMap1 = new TIntObjectHashMap<Object>((TIntObjectMap<?>) tIntObjectHashMap0);
      tIntObjectHashMap1.getAutoCompactionFactor();
      int int1 = 0;
      float float0 = (-445.27515F);
      int int2 = 0;
      TIntObjectHashMap<Object> tIntObjectHashMap2 = new TIntObjectHashMap<Object>(int1, float0, int2);
      int int3 = (-1112);
      TIntObjectHashMap<Object> tIntObjectHashMap3 = new TIntObjectHashMap<Object>(int3, int3);
      byte[] byteArray0 = tIntObjectHashMap3._states;
      OutputStream outputStream0 = null;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(outputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) bufferedOutputStream0);
      tIntObjectHashMap2.writeExternal((ObjectOutput) objectOutputStream0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      TIntHashSet tIntHashSet0 = new TIntHashSet((Collection<? extends Integer>) linkedList0);
      tIntHashSet0.clear();
      assertEquals(23, tIntHashSet0.capacity());
      assertEquals(0, tIntHashSet0.getNoEntryValue());
      
      tIntObjectHashMap3.clear();
      assertEquals(0, tIntObjectHashMap3.getNoEntryValue());
  }

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 47;
      intArray0[0] = int0;
      int int1 = 541;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      TIntHashSet tIntHashSet0 = new TIntHashSet(intArray0);
      TIntHashSet tIntHashSet1 = new TIntHashSet((TIntCollection) tIntHashSet0);
      tIntHashSet1._states = tIntHashSet0._states;
      assertEquals("{541,47,0}", tIntHashSet1.toString());
      assertEquals(0, tIntHashSet1.getNoEntryValue());
      assertTrue(tIntHashSet1.equals(tIntHashSet0));
      assertTrue(tIntHashSet0.equals(tIntHashSet1));
  }

  @Test
  public void test6()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      TIntHashSet tIntHashSet0 = new TIntHashSet((Collection<? extends Integer>) linkedList0);
      tIntHashSet0.retainAll((Collection<?>) linkedList0);
      assertEquals(23, tIntHashSet0.capacity());
      
      tIntHashSet0.trimToSize();
      TIntHashSet tIntHashSet1 = new TIntHashSet((TIntCollection) tIntHashSet0);
      tIntHashSet1.removeAll(tIntHashSet0._set);
      int int0 = 515;
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>(int0);
      TIntObjectHashMap<Object> tIntObjectHashMap1 = new TIntObjectHashMap<Object>((TIntObjectMap<?>) tIntObjectHashMap0);
      float float0 = 760.43787F;
      tIntObjectHashMap1.setAutoCompactionFactor(float0);
      assertEquals(0, tIntObjectHashMap0.getNoEntryValue());
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 25;
      int int1 = 0;
      TIntHashSet tIntHashSet0 = new TIntHashSet(int0);
      int[] intArray0 = new int[4];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      boolean boolean0 = tIntHashSet0.removeAll(intArray0);
      assertEquals(false, boolean0);
      
      float float0 = 1323.8269F;
      TIntHashSet tIntHashSet1 = new TIntHashSet(int1, float0, int1);
      assertEquals(0, tIntHashSet1.getNoEntryValue());
      
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>(int0);
      assertEquals(67, tIntObjectHashMap0.capacity());
      assertEquals(0, tIntObjectHashMap0.getNoEntryValue());
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 1607;
      int int1 = (-1);
      TIntHashSet tIntHashSet0 = new TIntHashSet(int0, int0, int1);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)69;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-85);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-74);
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-1);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-11);
      byteArray0[8] = byte8;
      tIntHashSet0._states = byteArray0;
      int int2 = 1901;
      float float0 = (-1.0F);
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>(int2, float0, int2);
      boolean boolean0 = true;
      tIntObjectHashMap0.reenableAutoCompaction(boolean0);
      int int3 = 0;
      String string0 = File.pathSeparator;
      tIntObjectHashMap0.putIfAbsent(int3, (Object) string0);
      assertEquals(1, tIntObjectHashMap0.size());
      assertEquals("{0=:}", tIntObjectHashMap0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      int[] intArray0 = new int[2];
      TIntObjectMap<Object> tIntObjectMap0 = null;
      TIntObjectHashMap<Object> tIntObjectHashMap0 = null;
      try {
        tIntObjectHashMap0 = new TIntObjectHashMap<Object>(tIntObjectMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
