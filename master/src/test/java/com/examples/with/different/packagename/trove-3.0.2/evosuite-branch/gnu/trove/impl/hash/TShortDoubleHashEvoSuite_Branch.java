/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TShortDoubleMap;
import gnu.trove.map.hash.TShortDoubleHashMap;
import gnu.trove.procedure.TShortProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortDoubleHashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TShortDoubleHash.<init>(IFSD)V: root-Branch
   * 2 gnu.trove.impl.hash.TShortDoubleHash.setUp(I)I: root-Branch
   */

//   @Test
//   public void test0()  throws Throwable  {
//       TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((int) (short) (-9), (float) (short) (-9), (short) (byte)64, (double) (byte)0);
//       assertEquals(64, tShortDoubleHashMap0.getNoEntryKey());
//       assertEquals(0.0, tShortDoubleHashMap0.getNoEntryValue(), 0.01D);
//   }

  //Test case number: 1
  /*
   * 10 covered goals:
   * 1 gnu.trove.impl.hash.TShortDoubleHash.removeAt(I)V: root-Branch
   * 2 gnu.trove.impl.hash.TShortDoubleHash.insertKeyAt(IS)V: root-Branch
   * 3 gnu.trove.impl.hash.TShortDoubleHash.index(S)I: I37 Branch 5 IFNE L228 - true
   * 4 gnu.trove.impl.hash.TShortDoubleHash.index(S)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 5 gnu.trove.impl.hash.TShortDoubleHash.index(S)I: I51 Branch 7 IF_ICMPNE L231 - false
   * 6 gnu.trove.impl.hash.TShortDoubleHash.insertKey(S)I: I30 Branch 13 IFNE L279 - true
   * 7 gnu.trove.impl.hash.TShortDoubleHash.insertKey(S)I: I30 Branch 13 IFNE L279 - false
   * 8 gnu.trove.impl.hash.TShortDoubleHash.insertKey(S)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 9 gnu.trove.impl.hash.TShortDoubleHash.insertKey(S)I: I56 Branch 15 IF_ICMPNE L286 - false
   * 10 gnu.trove.impl.hash.TShortDoubleHash.<init>(I)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      short[] shortArray0 = new short[11];
      double[] doubleArray0 = new double[7];
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      assertEquals(false, tShortDoubleHashMap0.isEmpty());
      
      tShortDoubleHashMap0.remove((short)0);
      assertEquals(true, tShortDoubleHashMap0.isEmpty());
      assertEquals("{}", tShortDoubleHashMap0.toString());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TShortDoubleHash.getNoEntryValue()D: root-Branch
   * 2 gnu.trove.impl.hash.TShortDoubleHash.<init>()V: root-Branch
   */

//   @Test
//   public void test2()  throws Throwable  {
//       TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
//       double double0 = tShortDoubleHashMap0.getNoEntryValue();
//       assertEquals(0.0, double0, 0.01D);
//       assertEquals(0, tShortDoubleHashMap0.getNoEntryKey());
//       assertEquals(23, tShortDoubleHashMap0.capacity());
//   }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TShortDoubleHash.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   * 2 gnu.trove.impl.hash.TShortDoubleHash.<init>(IF)V: root-Branch
   */

//   @Test
//   public void test3()  throws Throwable  {
//       TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(133853, 133853);
//       ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
//       ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
//       tShortDoubleHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
//       assertEquals(0, tShortDoubleHashMap0.getNoEntryKey());
//       assertEquals(0.0, tShortDoubleHashMap0.getNoEntryValue(), 0.01D);
//   }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TShortDoubleHash.getNoEntryKey()S: root-Branch
   * 2 gnu.trove.impl.hash.TShortDoubleHash.<init>()V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      short short0 = tShortDoubleHashMap0.getNoEntryKey();
      assertEquals(0.0, tShortDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals((short)0, short0);
      assertEquals(23, tShortDoubleHashMap0.capacity());
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TShortDoubleHash.contains(S)Z: I5 Branch 1 IFLT L178 - true
   * 2 gnu.trove.impl.hash.TShortDoubleHash.index(S)I: I37 Branch 5 IFNE L228 - false
   */

//   @Test
//   public void test5()  throws Throwable  {
//       TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((int) (short) (-9), (float) (short) (-9));
//       boolean boolean0 = tShortDoubleHashMap0.contains((short) (byte)1);
//       assertEquals(0, tShortDoubleHashMap0.getNoEntryKey());
//       assertEquals(0.0, tShortDoubleHashMap0.getNoEntryValue(), 0.01D);
//       assertEquals(false, boolean0);
//   }

  //Test case number: 6
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TShortDoubleHash.contains(S)Z: I5 Branch 1 IFLT L178 - false
   * 2 gnu.trove.impl.hash.TShortDoubleHash.index(S)I: I51 Branch 7 IF_ICMPNE L231 - false
   */

//   @Test
//   public void test6()  throws Throwable  {
//       short[] shortArray0 = new short[4];
//       double[] doubleArray0 = new double[5];
//       TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
//       boolean boolean0 = tShortDoubleHashMap0.containsKey((short)0);
//       assertEquals(1, tShortDoubleHashMap0.size());
//       assertEquals(0.0, tShortDoubleHashMap0.getNoEntryValue(), 0.01D);
//       assertEquals(0, tShortDoubleHashMap0.getNoEntryKey());
//       assertEquals(11, tShortDoubleHashMap0.capacity());
//       assertEquals(true, boolean0);
//   }

  //Test case number: 7
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TShortDoubleHash.forEach(Lgnu/trove/procedure/TShortProcedure;)Z: I18 Branch 2 IFLE L192 - true
   * 2 gnu.trove.impl.hash.TShortDoubleHash.forEach(Lgnu/trove/procedure/TShortProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TShortDoubleHash.forEach(Lgnu/trove/procedure/TShortProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

//   @Test
//   public void test7()  throws Throwable  {
//       TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((int) (short)21915);
//       boolean boolean0 = tShortDoubleHashMap0.forEach((TShortProcedure) null);
//       assertEquals(43853, tShortDoubleHashMap0.capacity());
//       assertEquals(0, tShortDoubleHashMap0.getNoEntryKey());
//       assertEquals(true, boolean0);
//       assertEquals(0.0, tShortDoubleHashMap0.getNoEntryValue(), 0.01D);
//   }

  //Test case number: 8
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TShortDoubleHash.forEach(Lgnu/trove/procedure/TShortProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - false
   * 2 gnu.trove.impl.hash.TShortDoubleHash.forEach(Lgnu/trove/procedure/TShortProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TShortDoubleHash.forEach(Lgnu/trove/procedure/TShortProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

  @Test
  public void test8()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((int) (short)21915);
      tShortDoubleHashMap0.put((short)21915, (short)21915);
      // Undeclared exception!
      try {
        tShortDoubleHashMap0.forEachKey((TShortProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.hash.TShortDoubleHash.indexRehashed(SIIB)I: I29 Branch 8 IFGE L245 - true
   * 2 gnu.trove.impl.hash.TShortDoubleHash.indexRehashed(SIIB)I: I46 Branch 9 IFNE L250 - true
   * 3 gnu.trove.impl.hash.TShortDoubleHash.indexRehashed(SIIB)I: I58 Branch 10 IF_ICMPNE L254 - false
   * 4 gnu.trove.impl.hash.TShortDoubleHash.indexRehashed(SIIB)I: I61 Branch 11 IF_ICMPEQ L254 - true
   * 5 gnu.trove.impl.hash.TShortDoubleHash.indexRehashed(SIIB)I: I70 Branch 12 IF_ICMPNE L256 - true
   * 6 gnu.trove.impl.hash.TShortDoubleHash.indexRehashed(SIIB)I: I29 Branch 8 IFGE L245 - false
   * 7 gnu.trove.impl.hash.TShortDoubleHash.indexRehashed(SIIB)I: I46 Branch 9 IFNE L250 - false
   * 8 gnu.trove.impl.hash.TShortDoubleHash.index(S)I: I46 Branch 6 IF_ICMPNE L231 - true
   */

//   @Test
//   public void test9()  throws Throwable  {
//       TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((int) (short) (-9), (float) (short) (-9));
//       byte[] byteArray0 = new byte[13];
//       byteArray0[0] = (byte)64;
//       byteArray0[2] = (byte)2;
//       tShortDoubleHashMap0._states = byteArray0;
//       double double0 = tShortDoubleHashMap0.get((short) (byte)0);
//       assertEquals(0.0, double0, 0.01D);
//       assertEquals(0, tShortDoubleHashMap0.getNoEntryKey());
//   }

  //Test case number: 10
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TShortDoubleHash.indexRehashed(SIIB)I: I58 Branch 10 IF_ICMPNE L254 - true
   * 2 gnu.trove.impl.hash.TShortDoubleHash.indexRehashed(SIIB)I: I46 Branch 9 IFNE L250 - false
   */

//   @Test
//   public void test10()  throws Throwable  {
//       TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((int) (short)10, (float) (short)10);
//       byte[] byteArray0 = new byte[3];
//       byteArray0[0] = (byte)88;
//       byteArray0[1] = (byte)88;
//       tShortDoubleHashMap0._states = byteArray0;
//       double double0 = tShortDoubleHashMap0.get((short) (byte)88);
//       assertEquals(0.0, double0, 0.01D);
//       assertEquals(0, tShortDoubleHashMap0.getNoEntryKey());
//   }

  //Test case number: 11
  /*
   * 15 covered goals:
   * 1 gnu.trove.impl.hash.TShortDoubleHash.indexRehashed(SIIB)I: I61 Branch 11 IF_ICMPEQ L254 - false
   * 2 gnu.trove.impl.hash.TShortDoubleHash.insertKey(S)I: I56 Branch 15 IF_ICMPNE L286 - true
   * 3 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 4 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I45 Branch 18 IFGE L310 - true
   * 5 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I45 Branch 18 IFGE L310 - false
   * 6 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I62 Branch 19 IFNE L316 - true
   * 7 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I62 Branch 19 IFNE L316 - false
   * 8 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 9 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 10 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I103 Branch 22 IF_ICMPNE L327 - true
   * 11 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I115 Branch 23 IF_ICMPNE L332 - true
   * 12 gnu.trove.impl.hash.TShortDoubleHash.indexRehashed(SIIB)I: I58 Branch 10 IF_ICMPNE L254 - false
   * 13 gnu.trove.impl.hash.TShortDoubleHash.index(S)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 14 gnu.trove.impl.hash.TShortDoubleHash.index(S)I: I51 Branch 7 IF_ICMPNE L231 - true
   * 15 gnu.trove.impl.hash.TShortDoubleHash.insertKey(S)I: I56 Branch 15 IF_ICMPNE L286 - false
   */

  @Test
  public void test11()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(133853, 133853);
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short) (-734);
      shortArray0[4] = (short)1424;
      double[] doubleArray0 = new double[6];
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      tShortDoubleHashMap0.putAll((TShortDoubleMap) tShortDoubleHashMap1);
      boolean boolean0 = tShortDoubleHashMap0.increment((short) (-734));
      assertEquals(false, tShortDoubleHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.hash.TShortDoubleHash.indexRehashed(SIIB)I: I70 Branch 12 IF_ICMPNE L256 - false
   * 2 gnu.trove.impl.hash.TShortDoubleHash.indexRehashed(SIIB)I: I29 Branch 8 IFGE L245 - true
   * 3 gnu.trove.impl.hash.TShortDoubleHash.indexRehashed(SIIB)I: I29 Branch 8 IFGE L245 - false
   * 4 gnu.trove.impl.hash.TShortDoubleHash.indexRehashed(SIIB)I: I46 Branch 9 IFNE L250 - true
   * 5 gnu.trove.impl.hash.TShortDoubleHash.indexRehashed(SIIB)I: I58 Branch 10 IF_ICMPNE L254 - true
   * 6 gnu.trove.impl.hash.TShortDoubleHash.indexRehashed(SIIB)I: I70 Branch 12 IF_ICMPNE L256 - true
   * 7 gnu.trove.impl.hash.TShortDoubleHash.index(S)I: I37 Branch 5 IFNE L228 - true
   * 8 gnu.trove.impl.hash.TShortDoubleHash.index(S)I: I46 Branch 6 IF_ICMPNE L231 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((int) (short)10, (float) (short)10);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)2;
      tShortDoubleHashMap0._states = byteArray0;
      double double0 = tShortDoubleHashMap0.get((short) (byte)88);
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 13
  /*
   * 5 covered goals:
   * 1 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 2 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 3 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I67 Branch 20 IF_ICMPEQ L317 - false
   * 4 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 5 gnu.trove.impl.hash.TShortDoubleHash.insertKey(S)I: I50 Branch 14 IF_ICMPNE L286 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((int) (short) (-9), (float) (short) (-9));
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)64;
      byteArray0[2] = (byte)2;
      tShortDoubleHashMap0._states = byteArray0;
      tShortDoubleHashMap0.adjustOrPutValue((short) (byte)0, (double) (byte)64, (double) (byte)64);
      assertEquals(1, tShortDoubleHashMap0.size());
      assertEquals(0.0, tShortDoubleHashMap0.getNoEntryValue(), 0.01D);
  }

  //Test case number: 14
  /*
   * 5 covered goals:
   * 1 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I31 Branch 17 IF_ICMPNE L306 - true
   * 2 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I115 Branch 23 IF_ICMPNE L332 - false
   * 3 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I120 Branch 24 IF_ICMPEQ L336 - false
   * 4 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 5 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   */

  @Test
  public void test14()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((int) (short)10, (float) (short)10);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)2;
      tShortDoubleHashMap0._states = byteArray0;
      byteArray0[0] = (byte)2;
      tShortDoubleHashMap0.adjustOrPutValue((short) (byte)88, (double) (short)10, (double) (byte)2);
      assertEquals("{88=2.0}", tShortDoubleHashMap0.toString());
      assertEquals(1, tShortDoubleHashMap0.size());
  }

  //Test case number: 15
  /*
   * 9 covered goals:
   * 1 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I103 Branch 22 IF_ICMPNE L327 - false
   * 2 gnu.trove.impl.hash.TShortDoubleHash.<init>(I)V: root-Branch
   * 3 gnu.trove.impl.hash.TShortDoubleHash.insertKeyAt(IS)V: root-Branch
   * 4 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I62 Branch 19 IFNE L316 - false
   * 5 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 6 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 7 gnu.trove.impl.hash.TShortDoubleHash.insertKey(S)I: I30 Branch 13 IFNE L279 - false
   * 8 gnu.trove.impl.hash.TShortDoubleHash.insertKey(S)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 9 gnu.trove.impl.hash.TShortDoubleHash.insertKey(S)I: I56 Branch 15 IF_ICMPNE L286 - true
   */

//   @Test
//   public void test15()  throws Throwable  {
//       short[] shortArray0 = new short[4];
//       shortArray0[1] = (short)132;
//       shortArray0[2] = (short)132;
//       double[] doubleArray0 = new double[3];
//       TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
//       assertEquals(0, tShortDoubleHashMap0.getNoEntryKey());
//       assertEquals("{132=0.0, 0=0.0}", tShortDoubleHashMap0.toString());
//       assertEquals(11, tShortDoubleHashMap0.capacity());
//       assertEquals(2, tShortDoubleHashMap0.size());
//   }

  //Test case number: 16
  /*
   * 12 covered goals:
   * 1 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I120 Branch 24 IF_ICMPEQ L336 - true
   * 2 gnu.trove.impl.hash.TShortDoubleHash.<init>(IF)V: root-Branch
   * 3 gnu.trove.impl.hash.TShortDoubleHash.setUp(I)I: root-Branch
   * 4 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 5 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I45 Branch 18 IFGE L310 - true
   * 6 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I45 Branch 18 IFGE L310 - false
   * 7 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I62 Branch 19 IFNE L316 - true
   * 8 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 9 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I115 Branch 23 IF_ICMPNE L332 - true
   * 10 gnu.trove.impl.hash.TShortDoubleHash.insertKeyRehash(SIIB)I: I115 Branch 23 IF_ICMPNE L332 - false
   * 11 gnu.trove.impl.hash.TShortDoubleHash.insertKey(S)I: I30 Branch 13 IFNE L279 - true
   * 12 gnu.trove.impl.hash.TShortDoubleHash.insertKey(S)I: I50 Branch 14 IF_ICMPNE L286 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((int) (short)0, (float) (short)0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      byteArray0[2] = (byte)76;
      tShortDoubleHashMap0._states = byteArray0;
      byteArray0[1] = (byte)76;
      // Undeclared exception!
      try {
        tShortDoubleHashMap0.adjustOrPutValue((short) (byte)76, (double) (byte)76, (double) (byte)76);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No free or removed slots available. Key set full?!!
         //
      }
  }
}
