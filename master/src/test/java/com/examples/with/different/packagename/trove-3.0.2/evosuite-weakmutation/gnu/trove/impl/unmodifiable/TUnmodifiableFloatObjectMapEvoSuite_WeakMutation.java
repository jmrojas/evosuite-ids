/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableFloatSet;
import gnu.trove.map.TFloatObjectMap;
import gnu.trove.map.hash.TFloatObjectHashMap;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import java.util.Collection;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableFloatObjectMapEvoSuite_WeakMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 19 covered goals:
   * 1 Weak Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.size()I:58 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 2 Weak Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.size()I:58 - DeleteStatement: size()I
   * 3 Weak Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 4 Weak Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 5 Weak Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 6 Weak Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 7 Weak Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 1 -> 0
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.size()I: root-Branch
   * 9 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - true
   * 10 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - false
   * 11 Weak Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.<init>(Lgnu/trove/map/TFloatObjectMap;)V:53 - ReplaceComparisonOperator != null -> = null
   * 12 Weak Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.size()I:58 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 13 Weak Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.size()I:58 - DeleteStatement: size()I
   * 14 Weak Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 15 Weak Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 16 Weak Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 17 Weak Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 18 Weak Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 1 -> 0
   * 19 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.<init>(Lgnu/trove/map/TFloatObjectMap;)V: I17 Branch 1 IFNONNULL L53 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>();
      TUnmodifiableFloatObjectMap<Integer> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
      TFloatObjectHashMap<String> tFloatObjectHashMap1 = new TFloatObjectHashMap<String>(1738, 0, 1738);
      TUnmodifiableFloatObjectMap<String> tUnmodifiableFloatObjectMap1 = new TUnmodifiableFloatObjectMap<String>((TFloatObjectMap<String>) tFloatObjectHashMap1);
      boolean boolean0 = tUnmodifiableFloatObjectMap1.equals((Object) tUnmodifiableFloatObjectMap0);
      assertEquals(true, boolean0);
  }

  //Test case number: 1
  /*
   * 5 covered goals:
   * 1 Weak Mutation 11: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.isEmpty()Z:59 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 2 Weak Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.isEmpty()Z:59 - DeleteStatement: isEmpty()Z
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.isEmpty()Z: root-Branch
   * 4 Weak Mutation 11: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.isEmpty()Z:59 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 5 Weak Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.isEmpty()Z:59 - DeleteStatement: isEmpty()Z
   */

  @Test
  public void test1()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(119, 119, 119);
      TUnmodifiableFloatObjectMap<Integer> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
      boolean boolean0 = tUnmodifiableFloatObjectMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 7 covered goals:
   * 1 Weak Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.containsKey(F)Z:60 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 2 Weak Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.containsKey(F)Z:60 - InsertUnaryOp Negation of key
   * 3 Weak Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.containsKey(F)Z:60 - DeleteStatement: containsKey(F)Z
   * 4 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.containsKey(F)Z: root-Branch
   * 5 Weak Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.containsKey(F)Z:60 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 6 Weak Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.containsKey(F)Z:60 - InsertUnaryOp Negation of key
   * 7 Weak Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.containsKey(F)Z:60 - DeleteStatement: containsKey(F)Z
   */

  @Test
  public void test2()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>();
      TUnmodifiableFloatObjectMap<Integer> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
      boolean boolean0 = tUnmodifiableFloatObjectMap0.containsKey((float) 463646329);
      assertEquals(false, boolean0);
  }

  //Test case number: 3
  /*
   * 5 covered goals:
   * 1 Weak Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.containsValue(Ljava/lang/Object;)Z:61 - DeleteStatement: containsValue(Ljava/lang/Object;)Z
   * 2 Weak Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.containsValue(Ljava/lang/Object;)Z:61 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.containsValue(Ljava/lang/Object;)Z: root-Branch
   * 4 Weak Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.containsValue(Ljava/lang/Object;)Z:61 - DeleteStatement: containsValue(Ljava/lang/Object;)Z
   * 5 Weak Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.containsValue(Ljava/lang/Object;)Z:61 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   */

  @Test
  public void test3()  throws Throwable  {
      TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>(463646329, 463646329, 463646329);
      TUnmodifiableFloatObjectMap<String> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<String>((TFloatObjectMap<String>) tFloatObjectHashMap0);
      boolean boolean0 = tUnmodifiableFloatObjectMap0.containsValue((Object) "0x1.ba2ae8p28");
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 7 covered goals:
   * 1 Weak Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.get(F)Ljava/lang/Object;:62 - InsertUnaryOp Negation of key
   * 2 Weak Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.get(F)Ljava/lang/Object;:62 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 3 Weak Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.get(F)Ljava/lang/Object;:62 - DeleteStatement: get(F)Ljava/lang/Object;
   * 4 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.get(F)Ljava/lang/Object;: root-Branch
   * 5 Weak Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.get(F)Ljava/lang/Object;:62 - InsertUnaryOp Negation of key
   * 6 Weak Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.get(F)Ljava/lang/Object;:62 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 7 Weak Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.get(F)Ljava/lang/Object;:62 - DeleteStatement: get(F)Ljava/lang/Object;
   */

  @Test
  public void test4()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(154);
      TUnmodifiableFloatObjectMap<Integer> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
      tUnmodifiableFloatObjectMap0.get((float) 154);
  }

  //Test case number: 5
  /*
   * 14 covered goals:
   * 1 Weak Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keySet()Lgnu/trove/set/TFloatSet;:74 - DeleteField: keySetLgnu/trove/set/TFloatSet;
   * 2 Weak Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keySet()Lgnu/trove/set/TFloatSet;:74 - ReplaceComparisonOperator != null -> = null
   * 3 Weak Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keySet()Lgnu/trove/set/TFloatSet;:75 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 4 Weak Mutation 25: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keySet()Lgnu/trove/set/TFloatSet;:75 - DeleteStatement: unmodifiableSet(Lgnu/trove/set/TFloatSet;)Lgnu/trove/set/TFloatSet;
   * 5 Weak Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keySet()Lgnu/trove/set/TFloatSet;:75 - DeleteStatement: keySet()Lgnu/trove/set/TFloatSet;
   * 6 Weak Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keySet()Lgnu/trove/set/TFloatSet;:76 - DeleteField: keySetLgnu/trove/set/TFloatSet;
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keySet()Lgnu/trove/set/TFloatSet;: I4 Branch 2 IFNONNULL L74 - true
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keySet()Lgnu/trove/set/TFloatSet;: I4 Branch 2 IFNONNULL L74 - false
   * 9 Weak Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keySet()Lgnu/trove/set/TFloatSet;:74 - DeleteField: keySetLgnu/trove/set/TFloatSet;
   * 10 Weak Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keySet()Lgnu/trove/set/TFloatSet;:75 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 11 Weak Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keySet()Lgnu/trove/set/TFloatSet;:74 - ReplaceComparisonOperator != null -> = null
   * 12 Weak Mutation 25: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keySet()Lgnu/trove/set/TFloatSet;:75 - DeleteStatement: unmodifiableSet(Lgnu/trove/set/TFloatSet;)Lgnu/trove/set/TFloatSet;
   * 13 Weak Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keySet()Lgnu/trove/set/TFloatSet;:75 - DeleteStatement: keySet()Lgnu/trove/set/TFloatSet;
   * 14 Weak Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keySet()Lgnu/trove/set/TFloatSet;:76 - DeleteField: keySetLgnu/trove/set/TFloatSet;
   */

  @Test
  public void test5()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>();
      TUnmodifiableFloatObjectMap<Integer> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
      TUnmodifiableFloatSet tUnmodifiableFloatSet0 = (TUnmodifiableFloatSet)tUnmodifiableFloatObjectMap0.keySet();
      assertNotNull(tUnmodifiableFloatSet0);
      
      TUnmodifiableFloatSet tUnmodifiableFloatSet1 = (TUnmodifiableFloatSet)tUnmodifiableFloatObjectMap0.keySet();
      assertSame(tUnmodifiableFloatSet1, tUnmodifiableFloatSet0);
  }

  //Test case number: 6
  /*
   * 5 covered goals:
   * 1 Weak Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keys()[F:78 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 2 Weak Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keys()[F:78 - DeleteStatement: keys()[F
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keys()[F: root-Branch
   * 4 Weak Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keys()[F:78 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 5 Weak Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keys()[F:78 - DeleteStatement: keys()[F
   */

  @Test
  public void test6()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(154);
      TUnmodifiableFloatObjectMap<Integer> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
      float[] floatArray0 = tUnmodifiableFloatObjectMap0.keys();
      assertNotNull(floatArray0);
  }

  //Test case number: 7
  /*
   * 5 covered goals:
   * 1 Weak Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keys([F)[F:79 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 2 Weak Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keys([F)[F:79 - DeleteStatement: keys([F)[F
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keys([F)[F: root-Branch
   * 4 Weak Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keys([F)[F:79 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 5 Weak Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.keys([F)[F:79 - DeleteStatement: keys([F)[F
   */

  @Test
  public void test7()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>();
      TUnmodifiableFloatObjectMap<Object> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Object>((TFloatObjectMap<Object>) tFloatObjectHashMap0);
      float[] floatArray0 = tUnmodifiableFloatObjectMap0.keys(tFloatObjectHashMap0._set);
      assertNotNull(floatArray0);
  }

  //Test case number: 8
  /*
   * 14 covered goals:
   * 1 Weak Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.valueCollection()Ljava/util/Collection;:82 - DeleteField: valuesLjava/util/Collection;
   * 2 Weak Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.valueCollection()Ljava/util/Collection;:82 - ReplaceComparisonOperator != null -> = null
   * 3 Weak Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: valueCollection()Ljava/util/Collection;
   * 4 Weak Mutation 35: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: unmodifiableCollection(Ljava/util/Collection;)Ljava/util/Collection;
   * 5 Weak Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 6 Weak Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.valueCollection()Ljava/util/Collection;:84 - DeleteField: valuesLjava/util/Collection;
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.valueCollection()Ljava/util/Collection;: I4 Branch 3 IFNONNULL L82 - true
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.valueCollection()Ljava/util/Collection;: I4 Branch 3 IFNONNULL L82 - false
   * 9 Weak Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.valueCollection()Ljava/util/Collection;:82 - DeleteField: valuesLjava/util/Collection;
   * 10 Weak Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: valueCollection()Ljava/util/Collection;
   * 11 Weak Mutation 35: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: unmodifiableCollection(Ljava/util/Collection;)Ljava/util/Collection;
   * 12 Weak Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.valueCollection()Ljava/util/Collection;:82 - ReplaceComparisonOperator != null -> = null
   * 13 Weak Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 14 Weak Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.valueCollection()Ljava/util/Collection;:84 - DeleteField: valuesLjava/util/Collection;
   */

  @Test
  public void test8()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>(1845, 1845, 1845);
      TUnmodifiableFloatObjectMap<Float> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Float>((TFloatObjectMap<Float>) tFloatObjectHashMap0);
      Collection<Float> collection0 = tUnmodifiableFloatObjectMap0.valueCollection();
      assertNotNull(collection0);
      
      Collection<Float> collection1 = tUnmodifiableFloatObjectMap0.valueCollection();
      assertSame(collection1, collection0);
  }

  //Test case number: 9
  /*
   * 5 covered goals:
   * 1 Weak Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.values()[Ljava/lang/Object;:86 - DeleteStatement: values()[Ljava/lang/Object;
   * 2 Weak Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.values()[Ljava/lang/Object;:86 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.values()[Ljava/lang/Object;: root-Branch
   * 4 Weak Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.values()[Ljava/lang/Object;:86 - DeleteStatement: values()[Ljava/lang/Object;
   * 5 Weak Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.values()[Ljava/lang/Object;:86 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   */

//   @Test
//   public void test9()  throws Throwable  {
//       TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>();
//       TUnmodifiableFloatObjectMap<Float> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Float>((TFloatObjectMap<Float>) tFloatObjectHashMap0);
//       Float[] floatArray0 = tUnmodifiableFloatObjectMap0.values();
//       assertNotNull(floatArray0);
//   }

  //Test case number: 10
  /*
   * 5 covered goals:
   * 1 Weak Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 2 Weak Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteStatement: values([Ljava/lang/Object;)[Ljava/lang/Object;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: root-Branch
   * 4 Weak Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 5 Weak Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteStatement: values([Ljava/lang/Object;)[Ljava/lang/Object;
   */

  @Test
  public void test10()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(1845, 1845);
      TUnmodifiableFloatObjectMap<Integer> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
      Integer[] integerArray0 = new Integer[3];
      Integer[] integerArray1 = tUnmodifiableFloatObjectMap0.values(integerArray0);
      assertSame(integerArray1, integerArray0);
  }

  //Test case number: 11
  /*
   * 8 covered goals:
   * 1 Weak Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 0 -> 1
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - false
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - true
   * 4 Weak Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 5 Weak Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 6 Weak Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 7 Weak Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 8 Weak Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 0 -> 1
   */

  @Test
  public void test11()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(485, 485);
      TUnmodifiableFloatObjectMap<Integer> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
      boolean boolean0 = tUnmodifiableFloatObjectMap0.equals((Object) "English");
      assertEquals(false, boolean0);
  }

  //Test case number: 12
  /*
   * 5 covered goals:
   * 1 Weak Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.hashCode()I:90 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 2 Weak Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.hashCode()I:90 - DeleteStatement: hashCode()I
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.hashCode()I: root-Branch
   * 4 Weak Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.hashCode()I:90 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 5 Weak Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.hashCode()I:90 - DeleteStatement: hashCode()I
   */

  @Test
  public void test12()  throws Throwable  {
      TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>((-1));
      TUnmodifiableFloatObjectMap<String> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<String>((TFloatObjectMap<String>) tFloatObjectHashMap0);
      int int0 = tUnmodifiableFloatObjectMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 13
  /*
   * 5 covered goals:
   * 1 Weak Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.toString()Ljava/lang/String;:91 - DeleteStatement: toString()Ljava/lang/String;
   * 2 Weak Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.toString()Ljava/lang/String;:91 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.toString()Ljava/lang/String;: root-Branch
   * 4 Weak Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.toString()Ljava/lang/String;:91 - DeleteStatement: toString()Ljava/lang/String;
   * 5 Weak Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.toString()Ljava/lang/String;:91 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   */

  @Test
  public void test13()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>();
      TUnmodifiableFloatObjectMap<Float> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Float>((TFloatObjectMap<Float>) tFloatObjectHashMap0);
      String string0 = tUnmodifiableFloatObjectMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 14
  /*
   * 5 covered goals:
   * 1 Weak Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.getNoEntryKey()F:92 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 2 Weak Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.getNoEntryKey()F:92 - DeleteStatement: getNoEntryKey()F
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.getNoEntryKey()F: root-Branch
   * 4 Weak Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.getNoEntryKey()F:92 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 5 Weak Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.getNoEntryKey()F:92 - DeleteStatement: getNoEntryKey()F
   */

//   @Test
//   public void test14()  throws Throwable  {
//       TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(119, 119, 119);
//       TUnmodifiableFloatObjectMap<Integer> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Integer>((TFloatObjectMap<Integer>) tFloatObjectHashMap0);
//       float float0 = tUnmodifiableFloatObjectMap0.getNoEntryKey();
//       assertEquals(119.0F, float0, 0.01F);
//   }

  //Test case number: 15
  /*
   * 5 covered goals:
   * 1 Weak Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z:95 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z
   * 2 Weak Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z:95 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   * 4 Weak Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z:95 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z
   * 5 Weak Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z:95 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   */

  @Test
  public void test15()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>(21006137, (-537.2472F), (-537.2472F));
      TUnmodifiableFloatObjectMap<Float> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Float>((TFloatObjectMap<Float>) tFloatObjectHashMap0);
      boolean boolean0 = tUnmodifiableFloatObjectMap0.forEachKey((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 16
  /*
   * 5 covered goals:
   * 1 Weak Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 2 Weak Mutation 56: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   * 4 Weak Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 5 Weak Mutation 56: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z
   */

  @Test
  public void test16()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>((-132));
      TUnmodifiableFloatObjectMap<Float> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Float>((TFloatObjectMap<Float>) tFloatObjectHashMap0);
      Float[] floatArray0 = new Float[14];
      ToObjectArrayProceedure<Float> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Float>(floatArray0);
      boolean boolean0 = tUnmodifiableFloatObjectMap0.forEachValue((TObjectProcedure<? super Float>) toObjectArrayProceedure0);
      assertEquals(true, boolean0);
  }

  //Test case number: 17
  /*
   * 5 covered goals:
   * 1 Weak Mutation 58: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.forEachEntry(Lgnu/trove/procedure/TFloatObjectProcedure;)Z:101 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TFloatObjectProcedure;)Z
   * 2 Weak Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.forEachEntry(Lgnu/trove/procedure/TFloatObjectProcedure;)Z:101 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.forEachEntry(Lgnu/trove/procedure/TFloatObjectProcedure;)Z: root-Branch
   * 4 Weak Mutation 58: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.forEachEntry(Lgnu/trove/procedure/TFloatObjectProcedure;)Z:101 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TFloatObjectProcedure;)Z
   * 5 Weak Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.forEachEntry(Lgnu/trove/procedure/TFloatObjectProcedure;)Z:101 - DeleteField: mLgnu/trove/map/TFloatObjectMap;
   */

//   @Test
//   public void test17()  throws Throwable  {
//       TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>((-132), 0.5F, 0.5F);
//       TUnmodifiableFloatObjectMap<String> tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<String>((TFloatObjectMap<String>) tFloatObjectHashMap0);
//       tFloatObjectHashMap0.putAll((TFloatObjectMap<? extends String>) tUnmodifiableFloatObjectMap0);
//       assertEquals(0.5F, tUnmodifiableFloatObjectMap0.getNoEntryKey(), 0.01F);
//   }

  //Test case number: 18
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.<init>(Lgnu/trove/map/TFloatObjectMap;)V: I17 Branch 1 IFNONNULL L53 - false
   * 2 Weak Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap.<init>(Lgnu/trove/map/TFloatObjectMap;)V:53 - ReplaceComparisonOperator != null -> = null
   */

  @Test
  public void test18()  throws Throwable  {
      TUnmodifiableFloatObjectMap<Integer> tUnmodifiableFloatObjectMap0 = null;
      try {
        tUnmodifiableFloatObjectMap0 = new TUnmodifiableFloatObjectMap<Integer>((TFloatObjectMap<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
