/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TIntDoubleMapDecorator;
import gnu.trove.map.TIntDoubleMap;
import gnu.trove.map.hash.TIntDoubleHashMap;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntDoubleMapDecoratorEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = int0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) intArray0[0];
      doubleArray0[1] = (double) intArray0[0];
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) intArray0[0];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      AbstractMap.SimpleImmutableEntry<TIntDoubleHashMap, TIntDoubleHashMap> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<TIntDoubleHashMap, TIntDoubleHashMap>(tIntDoubleHashMap0, tIntDoubleHashMap0);
      TIntDoubleHashMap tIntDoubleHashMap1 = abstractMap_SimpleImmutableEntry0.getValue();
      assertEquals(1, tIntDoubleHashMap1.size());
  }

  @Test
  public void test1()  throws Throwable  {
      TIntDoubleMapDecorator tIntDoubleMapDecorator0 = new TIntDoubleMapDecorator();
      int int0 = (-1106);
      Integer integer0 = new Integer(int0);
      Double double0 = new Double((double) integer0);
      // Undeclared exception!
      try {
        tIntDoubleMapDecorator0.put(integer0, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test2()  throws Throwable  {
//       TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
//       TIntDoubleMapDecorator tIntDoubleMapDecorator0 = new TIntDoubleMapDecorator((TIntDoubleMap) tIntDoubleHashMap0);
//       TIntDoubleMapDecorator tIntDoubleMapDecorator1 = new TIntDoubleMapDecorator();
//       int int0 = 0;
//       Integer integer0 = new Integer(int0);
//       Double double0 = null;
//       tIntDoubleMapDecorator0.put(integer0, double0);
//       Integer integer1 = null;
//       Double double1 = null;
//       try {
//         double1 = new Double((double) integer1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test3()  throws Throwable  {
      TIntDoubleMapDecorator tIntDoubleMapDecorator0 = new TIntDoubleMapDecorator();
      TIntDoubleMap tIntDoubleMap0 = tIntDoubleMapDecorator0.getMap();
      TIntDoubleMapDecorator tIntDoubleMapDecorator1 = new TIntDoubleMapDecorator(tIntDoubleMap0);
      String string0 = "[[|g7\\;";
      // Undeclared exception!
      try {
        tIntDoubleMapDecorator1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = (-1650);
      intArray0[0] = int0;
      int int1 = (-1237);
      intArray0[1] = int1;
      int int2 = 24407;
      intArray0[2] = int2;
      int int3 = 1023;
      intArray0[3] = int3;
      int int4 = 1;
      intArray0[4] = int4;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) intArray0[3];
      doubleArray0[1] = (double) intArray0[1];
      doubleArray0[2] = (double) intArray0[4];
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) intArray0[2];
      doubleArray0[5] = (double) intArray0[3];
      doubleArray0[6] = (double) int2;
      doubleArray0[7] = (double) int3;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      TIntDoubleMapDecorator tIntDoubleMapDecorator0 = new TIntDoubleMapDecorator((TIntDoubleMap) tIntDoubleHashMap0);
      tIntDoubleMapDecorator0.put((Integer) int0, (Double) doubleArray0[5]);
      int int5 = 0;
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int5);
      TIntDoubleMapDecorator tIntDoubleMapDecorator1 = new TIntDoubleMapDecorator((TIntDoubleMap) tIntDoubleHashMap1);
      Object object0 = null;
      boolean boolean0 = tIntDoubleMapDecorator1.equals(object0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = (-1635);
      intArray0[0] = int0;
      int int1 = 117;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int2;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int2;
      doubleArray0[3] = (double) intArray0[1];
      doubleArray0[4] = (double) intArray0[1];
      double double0 = (-139.77146253004904);
      doubleArray0[5] = double0;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap((TIntDoubleMap) tIntDoubleHashMap0);
      TIntDoubleMapDecorator tIntDoubleMapDecorator0 = new TIntDoubleMapDecorator((TIntDoubleMap) tIntDoubleHashMap1);
      int int4 = 1628;
      String string0 = Integer.toOctalString(int4);
      tIntDoubleMapDecorator0.equals((Object) string0);
      TIntDoubleMapDecorator tIntDoubleMapDecorator1 = new TIntDoubleMapDecorator();
      int int5 = 1876;
      String string1 = "JTH|F}";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string1, string1, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: JTH|F}://JTH|F}JTH%7CF%7D#JTH%7CF%7D
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TIntDoubleMapDecorator tIntDoubleMapDecorator0 = new TIntDoubleMapDecorator();
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      double double0 = 780.1103080621056;
      Double double1 = new Double(double0);
      integer0.doubleValue();
      // Undeclared exception!
      try {
        tIntDoubleMapDecorator0.put(integer0, double1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TIntDoubleMapDecorator tIntDoubleMapDecorator0 = new TIntDoubleMapDecorator();
      int int0 = 168;
      Integer integer0 = new Integer(int0);
      double double0 = 0.0;
      Double double1 = new Double(double0);
      // Undeclared exception!
      try {
        tIntDoubleMapDecorator0.put(integer0, double1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 1;
      float float0 = (-818.0077F);
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0, float0, int0, (double) float0);
      TIntDoubleMapDecorator tIntDoubleMapDecorator0 = new TIntDoubleMapDecorator((TIntDoubleMap) tIntDoubleHashMap0);
      String string0 = "a|V";
      String string1 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: a|V://a|Va%7CV#
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TIntDoubleMapDecorator tIntDoubleMapDecorator0 = new TIntDoubleMapDecorator((TIntDoubleMap) tIntDoubleHashMap0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) pipedInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      double double0 = Double.POSITIVE_INFINITY;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0, (float) int0, int1, double0);
      TIntDoubleHashMap tIntDoubleHashMap1 = null;
      try {
        tIntDoubleHashMap1 = new TIntDoubleHashMap((TIntDoubleMap) tIntDoubleHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TIntDoubleMapDecorator tIntDoubleMapDecorator0 = new TIntDoubleMapDecorator();
      // Undeclared exception!
      try {
        tIntDoubleMapDecorator0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
