/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.HashFunctions;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class HashFunctionsEvoSuite_WeakMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 38 covered goals:
   * 1 Weak Mutation 0: gnu.trove.impl.HashFunctions.hash(D)I:26 - InsertUnaryOp Negation
   * 2 Weak Mutation 2: gnu.trove.impl.HashFunctions.hash(D)I:26 - ReplaceComparisonOperator != -> ==
   * 3 Weak Mutation 3: gnu.trove.impl.HashFunctions.hash(D)I:26 - InsertUnaryOp Negation of value
   * 4 Weak Mutation 4: gnu.trove.impl.HashFunctions.hash(D)I:26 - DeleteStatement: isNaN(D)Z
   * 5 Weak Mutation 5: gnu.trove.impl.HashFunctions.hash(D)I:26 - ReplaceComparisonOperator == -> !=
   * 6 Weak Mutation 7: gnu.trove.impl.HashFunctions.hash(D)I:28 - InsertUnaryOp Negation of value
   * 7 Weak Mutation 8: gnu.trove.impl.HashFunctions.hash(D)I:28 - DeleteStatement: doubleToLongBits(D)J
   * 8 Weak Mutation 9: gnu.trove.impl.HashFunctions.hash(D)I:29 - InsertUnaryOp Negation of bits
   * 9 Weak Mutation 10: gnu.trove.impl.HashFunctions.hash(D)I:29 - InsertUnaryOp Negation of bits
   * 10 Weak Mutation 11: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceConstant - 32 -> 0
   * 11 Weak Mutation 12: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceConstant - 32 -> 1
   * 12 Weak Mutation 13: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceConstant - 32 -> -1
   * 13 Weak Mutation 14: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceConstant - 32 -> 31
   * 14 Weak Mutation 15: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceConstant - 32 -> 33
   * 15 Weak Mutation 17: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceBitwiseOperator >>> -> <<
   * 16 Weak Mutation 16: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceBitwiseOperator >>> -> >>
   * 17 Weak Mutation 19: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceBitwiseOperator ^ -> |
   * 18 Weak Mutation 18: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceBitwiseOperator ^ -> &
   * 19 gnu.trove.impl.HashFunctions.hash(D)I: I3 Branch 1 IFNE L26 - false
   * 20 gnu.trove.impl.HashFunctions.hash(D)I: I6 Branch 2 IFEQ L26 - true
   * 21 Weak Mutation 0: gnu.trove.impl.HashFunctions.hash(D)I:26 - InsertUnaryOp Negation
   * 22 Weak Mutation 2: gnu.trove.impl.HashFunctions.hash(D)I:26 - ReplaceComparisonOperator != -> ==
   * 23 Weak Mutation 3: gnu.trove.impl.HashFunctions.hash(D)I:26 - InsertUnaryOp Negation of value
   * 24 Weak Mutation 4: gnu.trove.impl.HashFunctions.hash(D)I:26 - DeleteStatement: isNaN(D)Z
   * 25 Weak Mutation 5: gnu.trove.impl.HashFunctions.hash(D)I:26 - ReplaceComparisonOperator == -> !=
   * 26 Weak Mutation 7: gnu.trove.impl.HashFunctions.hash(D)I:28 - InsertUnaryOp Negation of value
   * 27 Weak Mutation 8: gnu.trove.impl.HashFunctions.hash(D)I:28 - DeleteStatement: doubleToLongBits(D)J
   * 28 Weak Mutation 9: gnu.trove.impl.HashFunctions.hash(D)I:29 - InsertUnaryOp Negation of bits
   * 29 Weak Mutation 10: gnu.trove.impl.HashFunctions.hash(D)I:29 - InsertUnaryOp Negation of bits
   * 30 Weak Mutation 11: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceConstant - 32 -> 0
   * 31 Weak Mutation 12: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceConstant - 32 -> 1
   * 32 Weak Mutation 13: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceConstant - 32 -> -1
   * 33 Weak Mutation 14: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceConstant - 32 -> 31
   * 34 Weak Mutation 15: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceConstant - 32 -> 33
   * 35 Weak Mutation 17: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceBitwiseOperator >>> -> <<
   * 36 Weak Mutation 16: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceBitwiseOperator >>> -> >>
   * 37 Weak Mutation 19: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceBitwiseOperator ^ -> |
   * 38 Weak Mutation 18: gnu.trove.impl.HashFunctions.hash(D)I:29 - ReplaceBitwiseOperator ^ -> &
   */

  @Test
  public void test0()  throws Throwable  {
      int int0 = HashFunctions.hash((-1758.7461172390558));
      assertEquals((-961337324), int0);
  }

  //Test case number: 1
  /*
   * 32 covered goals:
   * 1 Weak Mutation 20: gnu.trove.impl.HashFunctions.hash(F)I:41 - InsertUnaryOp Negation
   * 2 Weak Mutation 23: gnu.trove.impl.HashFunctions.hash(F)I:41 - InsertUnaryOp Negation of value
   * 3 Weak Mutation 22: gnu.trove.impl.HashFunctions.hash(F)I:41 - ReplaceComparisonOperator != -> ==
   * 4 Weak Mutation 25: gnu.trove.impl.HashFunctions.hash(F)I:41 - ReplaceComparisonOperator == -> !=
   * 5 Weak Mutation 24: gnu.trove.impl.HashFunctions.hash(F)I:41 - DeleteStatement: isNaN(F)Z
   * 6 Weak Mutation 27: gnu.trove.impl.HashFunctions.hash(F)I:43 - InsertUnaryOp Negation of value
   * 7 Weak Mutation 29: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceConstant - 6.6360896E8 -> 1.0
   * 8 Weak Mutation 28: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceConstant - 6.6360896E8 -> 0.0
   * 9 Weak Mutation 31: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceConstant - 6.6360896E8 -> 6.6360896E8
   * 10 Weak Mutation 30: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceConstant - 6.6360896E8 -> -1.0
   * 11 Weak Mutation 34: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceArithmeticOperator * -> %
   * 12 Weak Mutation 35: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceArithmeticOperator * -> /
   * 13 Weak Mutation 32: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceArithmeticOperator * -> -
   * 14 Weak Mutation 33: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceArithmeticOperator * -> +
   * 15 Weak Mutation 36: gnu.trove.impl.HashFunctions.hash(F)I:43 - DeleteStatement: floatToIntBits(F)I
   * 16 gnu.trove.impl.HashFunctions.hash(F)I: I3 Branch 3 IFNE L41 - false
   * 17 gnu.trove.impl.HashFunctions.hash(F)I: I6 Branch 4 IFEQ L41 - true
   * 18 Weak Mutation 20: gnu.trove.impl.HashFunctions.hash(F)I:41 - InsertUnaryOp Negation
   * 19 Weak Mutation 23: gnu.trove.impl.HashFunctions.hash(F)I:41 - InsertUnaryOp Negation of value
   * 20 Weak Mutation 22: gnu.trove.impl.HashFunctions.hash(F)I:41 - ReplaceComparisonOperator != -> ==
   * 21 Weak Mutation 25: gnu.trove.impl.HashFunctions.hash(F)I:41 - ReplaceComparisonOperator == -> !=
   * 22 Weak Mutation 24: gnu.trove.impl.HashFunctions.hash(F)I:41 - DeleteStatement: isNaN(F)Z
   * 23 Weak Mutation 27: gnu.trove.impl.HashFunctions.hash(F)I:43 - InsertUnaryOp Negation of value
   * 24 Weak Mutation 29: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceConstant - 6.6360896E8 -> 1.0
   * 25 Weak Mutation 28: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceConstant - 6.6360896E8 -> 0.0
   * 26 Weak Mutation 31: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceConstant - 6.6360896E8 -> 6.6360896E8
   * 27 Weak Mutation 30: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceConstant - 6.6360896E8 -> -1.0
   * 28 Weak Mutation 34: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceArithmeticOperator * -> %
   * 29 Weak Mutation 35: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceArithmeticOperator * -> /
   * 30 Weak Mutation 32: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceArithmeticOperator * -> -
   * 31 Weak Mutation 33: gnu.trove.impl.HashFunctions.hash(F)I:43 - ReplaceArithmeticOperator * -> +
   * 32 Weak Mutation 36: gnu.trove.impl.HashFunctions.hash(F)I:43 - DeleteStatement: floatToIntBits(F)I
   */

  @Test
  public void test1()  throws Throwable  {
      int int0 = HashFunctions.hash((float) 982);
      assertEquals(1394063923, int0);
  }

  //Test case number: 2
  /*
   * 7 covered goals:
   * 1 Weak Mutation 38: gnu.trove.impl.HashFunctions.hash(I)I:54 - InsertUnaryOp IINC 1 value
   * 2 Weak Mutation 39: gnu.trove.impl.HashFunctions.hash(I)I:54 - InsertUnaryOp IINC -1 value
   * 3 Weak Mutation 37: gnu.trove.impl.HashFunctions.hash(I)I:54 - InsertUnaryOp Negation of value
   * 4 gnu.trove.impl.HashFunctions.hash(I)I: root-Branch
   * 5 Weak Mutation 38: gnu.trove.impl.HashFunctions.hash(I)I:54 - InsertUnaryOp IINC 1 value
   * 6 Weak Mutation 39: gnu.trove.impl.HashFunctions.hash(I)I:54 - InsertUnaryOp IINC -1 value
   * 7 Weak Mutation 37: gnu.trove.impl.HashFunctions.hash(I)I:54 - InsertUnaryOp Negation of value
   */

  @Test
  public void test2()  throws Throwable  {
      int int0 = HashFunctions.hash((-961337324));
      assertEquals((-961337324), int0);
  }

  //Test case number: 3
  /*
   * 23 covered goals:
   * 1 Weak Mutation 42: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceConstant - 32 -> 0
   * 2 Weak Mutation 43: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceConstant - 32 -> 1
   * 3 Weak Mutation 40: gnu.trove.impl.HashFunctions.hash(J)I:63 - InsertUnaryOp Negation of value
   * 4 Weak Mutation 41: gnu.trove.impl.HashFunctions.hash(J)I:63 - InsertUnaryOp Negation of value
   * 5 Weak Mutation 46: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceConstant - 32 -> 33
   * 6 Weak Mutation 47: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceBitwiseOperator >>> -> >>
   * 7 Weak Mutation 44: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceConstant - 32 -> -1
   * 8 Weak Mutation 45: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceConstant - 32 -> 31
   * 9 Weak Mutation 50: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceBitwiseOperator ^ -> |
   * 10 Weak Mutation 49: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceBitwiseOperator ^ -> &
   * 11 Weak Mutation 48: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceBitwiseOperator >>> -> <<
   * 12 gnu.trove.impl.HashFunctions.hash(J)I: root-Branch
   * 13 Weak Mutation 42: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceConstant - 32 -> 0
   * 14 Weak Mutation 43: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceConstant - 32 -> 1
   * 15 Weak Mutation 40: gnu.trove.impl.HashFunctions.hash(J)I:63 - InsertUnaryOp Negation of value
   * 16 Weak Mutation 41: gnu.trove.impl.HashFunctions.hash(J)I:63 - InsertUnaryOp Negation of value
   * 17 Weak Mutation 46: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceConstant - 32 -> 33
   * 18 Weak Mutation 47: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceBitwiseOperator >>> -> >>
   * 19 Weak Mutation 44: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceConstant - 32 -> -1
   * 20 Weak Mutation 45: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceConstant - 32 -> 31
   * 21 Weak Mutation 50: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceBitwiseOperator ^ -> |
   * 22 Weak Mutation 49: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceBitwiseOperator ^ -> &
   * 23 Weak Mutation 48: gnu.trove.impl.HashFunctions.hash(J)I:63 - ReplaceBitwiseOperator >>> -> <<
   */

  @Test
  public void test3()  throws Throwable  {
      int int0 = HashFunctions.hash((long) (-961337324));
      assertEquals(961337323, int0);
  }

  //Test case number: 4
  /*
   * 6 covered goals:
   * 1 Weak Mutation 51: gnu.trove.impl.HashFunctions.hash(Ljava/lang/Object;)I:72 - ReplaceComparisonOperator != null -> = null
   * 2 Weak Mutation 53: gnu.trove.impl.HashFunctions.hash(Ljava/lang/Object;)I:72 - DeleteStatement: hashCode()I
   * 3 gnu.trove.impl.HashFunctions.<init>()V: root-Branch
   * 4 gnu.trove.impl.HashFunctions.hash(Ljava/lang/Object;)I: I3 Branch 5 IFNONNULL L72 - true
   * 5 Weak Mutation 51: gnu.trove.impl.HashFunctions.hash(Ljava/lang/Object;)I:72 - ReplaceComparisonOperator != null -> = null
   * 6 Weak Mutation 53: gnu.trove.impl.HashFunctions.hash(Ljava/lang/Object;)I:72 - DeleteStatement: hashCode()I
   */

//   @Test
//   public void test4()  throws Throwable  {
//       HashFunctions hashFunctions0 = new HashFunctions();
//       int int0 = HashFunctions.hash((Object) hashFunctions0);
//       assertEquals(1302944538, int0);
//   }

  //Test case number: 5
  /*
   * 4 covered goals:
   * 1 Weak Mutation 52: gnu.trove.impl.HashFunctions.hash(Ljava/lang/Object;)I:72 - ReplaceConstant - 0 -> 1
   * 2 gnu.trove.impl.HashFunctions.hash(Ljava/lang/Object;)I: I3 Branch 5 IFNONNULL L72 - false
   * 3 Weak Mutation 51: gnu.trove.impl.HashFunctions.hash(Ljava/lang/Object;)I:72 - ReplaceComparisonOperator != null -> = null
   * 4 Weak Mutation 52: gnu.trove.impl.HashFunctions.hash(Ljava/lang/Object;)I:72 - ReplaceConstant - 0 -> 1
   */

  @Test
  public void test5()  throws Throwable  {
      int int0 = HashFunctions.hash((Object) null);
      assertEquals(0, int0);
  }

  //Test case number: 6
  /*
   * 31 covered goals:
   * 1 Weak Mutation 54: gnu.trove.impl.HashFunctions.fastCeil(F)I:81 - InsertUnaryOp Negation of v
   * 2 Weak Mutation 55: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - InsertUnaryOp Negation of v
   * 3 Weak Mutation 59: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceArithmeticOperator - -> +
   * 4 Weak Mutation 58: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - InsertUnaryOp IINC -1 possible_result
   * 5 Weak Mutation 57: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - InsertUnaryOp IINC 1 possible_result
   * 6 Weak Mutation 56: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - InsertUnaryOp Negation of possible_result
   * 7 Weak Mutation 63: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceConstant - 0.0 -> 1.0
   * 8 Weak Mutation 62: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceArithmeticOperator - -> *
   * 9 Weak Mutation 61: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceArithmeticOperator - -> /
   * 10 Weak Mutation 68: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceComparisonOperator <= -> -1
   * 11 Weak Mutation 64: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceConstant - 0.0 -> -1.0
   * 12 Weak Mutation 65: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - DeleteStatement: floatSub(FF)I
   * 13 Weak Mutation 69: gnu.trove.impl.HashFunctions.fastCeil(F)I:83 - InsertUnaryOp Negation of possible_result
   * 14 Weak Mutation 70: gnu.trove.impl.HashFunctions.fastCeil(F)I:83 - InsertUnaryOp IINC 1 possible_result
   * 15 Weak Mutation 71: gnu.trove.impl.HashFunctions.fastCeil(F)I:83 - InsertUnaryOp IINC -1 possible_result
   * 16 gnu.trove.impl.HashFunctions.fastCeil(F)I: I13 Branch 6 IFLE L82 - false
   * 17 Weak Mutation 55: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - InsertUnaryOp Negation of v
   * 18 Weak Mutation 54: gnu.trove.impl.HashFunctions.fastCeil(F)I:81 - InsertUnaryOp Negation of v
   * 19 Weak Mutation 59: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceArithmeticOperator - -> +
   * 20 Weak Mutation 58: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - InsertUnaryOp IINC -1 possible_result
   * 21 Weak Mutation 57: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - InsertUnaryOp IINC 1 possible_result
   * 22 Weak Mutation 56: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - InsertUnaryOp Negation of possible_result
   * 23 Weak Mutation 63: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceConstant - 0.0 -> 1.0
   * 24 Weak Mutation 62: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceArithmeticOperator - -> *
   * 25 Weak Mutation 61: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceArithmeticOperator - -> /
   * 26 Weak Mutation 68: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceComparisonOperator <= -> -1
   * 27 Weak Mutation 69: gnu.trove.impl.HashFunctions.fastCeil(F)I:83 - InsertUnaryOp Negation of possible_result
   * 28 Weak Mutation 70: gnu.trove.impl.HashFunctions.fastCeil(F)I:83 - InsertUnaryOp IINC 1 possible_result
   * 29 Weak Mutation 71: gnu.trove.impl.HashFunctions.fastCeil(F)I:83 - InsertUnaryOp IINC -1 possible_result
   * 30 Weak Mutation 64: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceConstant - 0.0 -> -1.0
   * 31 Weak Mutation 65: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - DeleteStatement: floatSub(FF)I
   */

  @Test
  public void test6()  throws Throwable  {
      int int0 = HashFunctions.fastCeil(981.4329F);
      assertEquals(982, int0);
  }

  //Test case number: 7
  /*
   * 5 covered goals:
   * 1 Weak Mutation 60: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceArithmeticOperator - -> %
   * 2 Weak Mutation 67: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceComparisonOperator <= -> <
   * 3 gnu.trove.impl.HashFunctions.fastCeil(F)I: I13 Branch 6 IFLE L82 - true
   * 4 Weak Mutation 60: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceArithmeticOperator - -> %
   * 5 Weak Mutation 67: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceComparisonOperator <= -> <
   */

  @Test
  public void test7()  throws Throwable  {
      int int0 = HashFunctions.fastCeil((float) 0);
      assertEquals(0, int0);
  }

  //Test case number: 8
  /*
   * 16 covered goals:
   * 1 Weak Mutation 66: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceComparisonOperator <= -> ==
   * 2 Weak Mutation 55: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - InsertUnaryOp Negation of v
   * 3 Weak Mutation 54: gnu.trove.impl.HashFunctions.fastCeil(F)I:81 - InsertUnaryOp Negation of v
   * 4 Weak Mutation 59: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceArithmeticOperator - -> +
   * 5 Weak Mutation 58: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - InsertUnaryOp IINC -1 possible_result
   * 6 Weak Mutation 57: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - InsertUnaryOp IINC 1 possible_result
   * 7 Weak Mutation 56: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - InsertUnaryOp Negation of possible_result
   * 8 Weak Mutation 63: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceConstant - 0.0 -> 1.0
   * 9 Weak Mutation 62: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceArithmeticOperator - -> *
   * 10 Weak Mutation 61: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceArithmeticOperator - -> /
   * 11 Weak Mutation 69: gnu.trove.impl.HashFunctions.fastCeil(F)I:83 - InsertUnaryOp Negation of possible_result
   * 12 Weak Mutation 70: gnu.trove.impl.HashFunctions.fastCeil(F)I:83 - InsertUnaryOp IINC 1 possible_result
   * 13 Weak Mutation 71: gnu.trove.impl.HashFunctions.fastCeil(F)I:83 - InsertUnaryOp IINC -1 possible_result
   * 14 Weak Mutation 64: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceConstant - 0.0 -> -1.0
   * 15 Weak Mutation 65: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - DeleteStatement: floatSub(FF)I
   * 16 Weak Mutation 66: gnu.trove.impl.HashFunctions.fastCeil(F)I:82 - ReplaceComparisonOperator <= -> ==
   */

  @Test
  public void test8()  throws Throwable  {
      int int0 = HashFunctions.fastCeil((-39.58604F));
      assertEquals((-39), int0);
  }
}
