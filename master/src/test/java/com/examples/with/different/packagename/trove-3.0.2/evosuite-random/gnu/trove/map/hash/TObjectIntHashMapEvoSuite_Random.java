/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedIntList;
import gnu.trove.list.TIntList;
import gnu.trove.list.linked.TIntLinkedList;
import gnu.trove.map.custom_hash.TObjectIntCustomHashMap;
import gnu.trove.map.hash.TObjectIntHashMap;
import gnu.trove.procedure.TIntProcedure;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.RandomAccessFile;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectIntHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TObjectIntHashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>> tObjectIntHashMap0 = new TObjectIntHashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      String string0 = "2Sr49";
      Locale locale0 = new Locale(string0, string0);
      String string1 = locale0.toLanguageTag();
      Integer integer0 = null;
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>((Object) string1, integer0);
      int int0 = 1909;
      tObjectIntHashMap0.adjustOrPutValue(abstractMap_SimpleImmutableEntry0, int0, int0);
      float float0 = 0.0F;
      tObjectIntHashMap0.setAutoCompactionFactor(float0);
      String string2 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string2, string2, string2, string2, string2);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://?#
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 2026;
      float float0 = 0.0F;
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>(int0, float0, int0);
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList(int0);
      TSynchronizedIntList tSynchronizedIntList0 = new TSynchronizedIntList((TIntList) tIntLinkedList0);
      String string0 = tSynchronizedIntList0.toString();
      int int1 = tObjectIntHashMap0.get((Object) string0);
      assertEquals(2026, int1);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 353;
      TObjectIntHashMap<Object> tObjectIntHashMap0 = new TObjectIntHashMap<Object>(int0);
      TObjectIntHashMap<Object> tObjectIntHashMap1 = new TObjectIntHashMap<Object>(int0);
      int int1 = 0;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 418;
      TObjectIntHashMap<AbstractMap.SimpleImmutableEntry<String, Integer>> tObjectIntHashMap0 = new TObjectIntHashMap<AbstractMap.SimpleImmutableEntry<String, Integer>>(int0);
      int int1 = tObjectIntHashMap0.hashCode();
      TObjectIntHashMap<Integer> tObjectIntHashMap1 = new TObjectIntHashMap<Integer>(int0);
      int int2 = 0;
      float float0 = 977.6845F;
      TObjectIntHashMap<String> tObjectIntHashMap2 = new TObjectIntHashMap<String>(int2, float0, int2);
      String[] stringArray0 = new String[1];
      String string0 = "0dE1flK";
      stringArray0[0] = string0;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) int2;
      integerArray0[1] = (Integer) int1;
      integerArray0[2] = (Integer) int1;
      assertEquals(0, (int)integerArray0[2]);
      
      Integer[] integerArray1 = tObjectIntHashMap1.keys(integerArray0);
      assertNotNull(integerArray1);
      
      int int3 = 0;
      TObjectIntHashMap<TObjectIntHashMap<String>> tObjectIntHashMap3 = new TObjectIntHashMap<TObjectIntHashMap<String>>(int2, float0, int3);
      Object object0 = new Object();
      tObjectIntHashMap3.containsKey(object0);
      String[] stringArray1 = tObjectIntHashMap2.keys(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(0, tObjectIntHashMap2.getNoEntryValue());
      
      tObjectIntHashMap1.keySet();
      assertEquals(0, tObjectIntHashMap1.getNoEntryValue());
      assertEquals(877, tObjectIntHashMap1.capacity());
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      TObjectIntHashMap<TObjectIntHashMap<String>> tObjectIntHashMap0 = new TObjectIntHashMap<TObjectIntHashMap<String>>(int1);
      tObjectIntHashMap0.trimToSize();
      assertEquals(0, tObjectIntHashMap0.getNoEntryValue());
      assertEquals(3, tObjectIntHashMap0.capacity());
      assertEquals("{}", tObjectIntHashMap0.toString());
      
      float float0 = 1772.4147F;
      TObjectIntHashMap<Object> tObjectIntHashMap1 = new TObjectIntHashMap<Object>(int0, float0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) float0;
      objectArray0[1] = (Object) tObjectIntHashMap1;
      objectArray0[2] = (Object) int0;
      objectArray0[3] = (Object) int0;
      objectArray0[4] = (Object) int0;
      objectArray0[5] = (Object) int0;
      tObjectIntHashMap1._set = objectArray0;
      assertEquals(0, tObjectIntHashMap1.getNoEntryValue());
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 0;
      TObjectIntHashMap<TObjectIntCustomHashMap<Integer>> tObjectIntHashMap0 = new TObjectIntHashMap<TObjectIntCustomHashMap<Integer>>(int0);
      TObjectIntCustomHashMap<Integer> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<Integer>();
      int int1 = tObjectIntHashMap0.putIfAbsent(tObjectIntCustomHashMap0, int0);
      tObjectIntHashMap0.keySet();
      float float0 = 1.0F;
      int int2 = 128;
      TObjectIntHashMap<TObjectIntHashMap<Integer>> tObjectIntHashMap1 = new TObjectIntHashMap<TObjectIntHashMap<Integer>>(int1, float0, int2);
      TObjectIntHashMap<Integer> tObjectIntHashMap2 = null;
      boolean boolean0 = tObjectIntHashMap1.adjustValue(tObjectIntHashMap2, int1);
      assertEquals(false, tObjectIntHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 149;
      int int1 = 660;
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>(int1, int0, int0);
      int int2 = (-740);
      TObjectIntHashMap<String> tObjectIntHashMap1 = new TObjectIntHashMap<String>(int2, int1);
      String string0 = "";
      int int3 = 3527;
      int int4 = (-1647);
      tObjectIntHashMap0.capacity();
      TObjectIntHashMap<TObjectIntHashMap<Object>> tObjectIntHashMap2 = new TObjectIntHashMap<TObjectIntHashMap<Object>>(int4, int4);
      tObjectIntHashMap2.getAutoCompactionFactor();
      int int5 = (-152);
      TObjectIntHashMap<TObjectIntCustomHashMap<Integer>> tObjectIntHashMap3 = new TObjectIntHashMap<TObjectIntCustomHashMap<Integer>>(int5, int5);
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>();
      TIntProcedure tIntProcedure0 = null;
      tObjectIntHashMap0.forEachValue(tIntProcedure0);
      int int0 = (-1);
      int int1 = 209;
      TObjectIntHashMap<TObjectIntHashMap<Integer>> tObjectIntHashMap1 = new TObjectIntHashMap<TObjectIntHashMap<Integer>>(int0, int0, int1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) fileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream Closed
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>();
      TObjectIntHashMap<String> tObjectIntHashMap1 = new TObjectIntHashMap<String>();
      int int0 = 0;
      float float0 = 874.80493F;
      TObjectIntHashMap<AbstractMap.SimpleImmutableEntry<String, String>> tObjectIntHashMap2 = new TObjectIntHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(int0, float0);
      Object object0 = null;
      tObjectIntHashMap2.get(object0);
      String string0 = "<(1X(\"\\pO[+a";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 0: <(1X(\"\\pO[+a
         //
      }
  }
}
