/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TObjectFunction;
import gnu.trove.impl.unmodifiable.TUnmodifiableFloatSet;
import gnu.trove.map.TFloatObjectMap;
import gnu.trove.map.hash.TFloatObjectHashMap;
import gnu.trove.procedure.TFloatObjectProcedure;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import gnu.trove.set.TFloatSet;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatObjectHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap$KeyView.toArray([F)[F: root-Branch
   * 2 gnu.trove.map.hash.TFloatObjectHashMap$KeyView.<init>(Lgnu/trove/map/hash/TFloatObjectHashMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TFloatObjectHashMap$1.<init>(Lgnu/trove/map/hash/TFloatObjectHashMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TFloatObjectHashMap.keySet()Lgnu/trove/set/TFloatSet;: root-Branch
   * 5 gnu.trove.map.hash.TFloatObjectHashMap.<init>(IF)V: root-Branch
   * 6 gnu.trove.map.hash.TFloatObjectHashMap.setUp(I)I: root-Branch
   * 7 gnu.trove.map.hash.TFloatObjectHashMap.keys([F)[F: I6 Branch 54 IF_ICMPGE L327 - true
   * 8 gnu.trove.map.hash.TFloatObjectHashMap.keys([F)[F: I34 Branch 55 IFLE L334 - true
   * 9 gnu.trove.map.hash.TFloatObjectHashMap.keys([F)[F: I34 Branch 55 IFLE L334 - false
   * 10 gnu.trove.map.hash.TFloatObjectHashMap.keys([F)[F: I41 Branch 56 IF_ICMPNE L335 - true
   */

//   @Test
//   public void test0()  throws Throwable  {
//       TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>(1, 1);
//       TFloatSet tFloatSet0 = tFloatObjectHashMap0.keySet();
//       TUnmodifiableFloatSet tUnmodifiableFloatSet0 = new TUnmodifiableFloatSet(tFloatSet0);
//       float[] floatArray0 = tUnmodifiableFloatSet0.toArray(tFloatObjectHashMap0._set);
//       assertNotNull(floatArray0);
//       assertEquals(0.0F, tFloatObjectHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals(0.0F, tFloatSet0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 1
  /*
   * 14 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap$1.execute(FLjava/lang/Object;)Z: root-Branch
   * 2 gnu.trove.map.hash.TFloatObjectHashMap.<init>(Lgnu/trove/map/TFloatObjectMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TFloatObjectHashMap.<init>(IFF)V: root-Branch
   * 4 gnu.trove.map.hash.TFloatObjectHashMap.getNoEntryKey()F: root-Branch
   * 5 gnu.trove.map.hash.TFloatObjectHashMap.putAll(Lgnu/trove/map/TFloatObjectMap;)V: root-Branch
   * 6 gnu.trove.map.hash.TFloatObjectHashMap.put(FLjava/lang/Object;)Ljava/lang/Object;: root-Branch
   * 7 gnu.trove.map.hash.TFloatObjectHashMap.<init>()V: root-Branch
   * 8 gnu.trove.map.hash.TFloatObjectHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I11 Branch 48 IFGE L239 - true
   * 9 gnu.trove.map.hash.TFloatObjectHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I40 Branch 49 IFEQ L247 - false
   * 10 gnu.trove.map.hash.TFloatObjectHashMap.forEachEntry(Lgnu/trove/procedure/TFloatObjectProcedure;)Z: I23 Branch 65 IFLE L416 - true
   * 11 gnu.trove.map.hash.TFloatObjectHashMap.forEachEntry(Lgnu/trove/procedure/TFloatObjectProcedure;)Z: I23 Branch 65 IFLE L416 - false
   * 12 gnu.trove.map.hash.TFloatObjectHashMap.forEachEntry(Lgnu/trove/procedure/TFloatObjectProcedure;)Z: I30 Branch 66 IF_ICMPNE L417 - true
   * 13 gnu.trove.map.hash.TFloatObjectHashMap.forEachEntry(Lgnu/trove/procedure/TFloatObjectProcedure;)Z: I30 Branch 66 IF_ICMPNE L417 - false
   * 14 gnu.trove.map.hash.TFloatObjectHashMap.forEachEntry(Lgnu/trove/procedure/TFloatObjectProcedure;)Z: I39 Branch 67 IFNE L417 - true
   */

  @Test
  public void test1()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>();
      tFloatObjectHashMap0.put((-1740.281F), (Float) (-1740.281F));
      TFloatObjectHashMap<Object> tFloatObjectHashMap1 = new TFloatObjectHashMap<Object>((TFloatObjectMap<?>) tFloatObjectHashMap0);
      assertEquals(false, tFloatObjectHashMap0.isEmpty());
      assertEquals(1, tFloatObjectHashMap0.size());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap$ValueView.<init>(Lgnu/trove/map/hash/TFloatObjectHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TFloatObjectHashMap.valueCollection()Ljava/util/Collection;: root-Branch
   */

//   @Test
//   public void test2()  throws Throwable  {
//       TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>(0, 1, 1);
//       tFloatObjectHashMap0.valueCollection();
//       assertEquals(1.0F, tFloatObjectHashMap0.getNoEntryKey(), 0.01F);
//   }

  //Test case number: 3
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap$TFloatObjectHashIterator.<init>(Lgnu/trove/map/hash/TFloatObjectHashMap;Lgnu/trove/map/hash/TFloatObjectHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TFloatObjectHashMap.iterator()Lgnu/trove/iterator/TFloatObjectIterator;: root-Branch
   * 3 gnu.trove.map.hash.TFloatObjectHashMap.<init>(I)V: root-Branch
   * 4 gnu.trove.map.hash.TFloatObjectHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 73 IFNE L467 - true
   * 5 gnu.trove.map.hash.TFloatObjectHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 74 IF_ICMPEQ L471 - true
   * 6 gnu.trove.map.hash.TFloatObjectHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 75 IFEQ L476 - true
   */

//   @Test
//   public void test3()  throws Throwable  {
//       TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>((-206));
//       TFloatObjectHashMap<String> tFloatObjectHashMap1 = new TFloatObjectHashMap<String>();
//       boolean boolean0 = tFloatObjectHashMap0.equals((Object) tFloatObjectHashMap1);
//       assertEquals(0.0F, tFloatObjectHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals(23, tFloatObjectHashMap1.capacity());
//       assertEquals(true, boolean0);
//   }

  //Test case number: 4
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap$TFloatObjectHashIterator.value()Ljava/lang/Object;: root-Branch
   * 2 gnu.trove.map.hash.TFloatObjectHashMap$TFloatObjectHashIterator.key()F: root-Branch
   * 3 gnu.trove.map.hash.TFloatObjectHashMap$TFloatObjectHashIterator.advance()V: root-Branch
   * 4 gnu.trove.map.hash.TFloatObjectHashMap.containsKey(F)Z: root-Branch
   * 5 gnu.trove.map.hash.TFloatObjectHashMap.get(F)Ljava/lang/Object;: I9 Branch 46 IFGE L213 - false
   * 6 gnu.trove.map.hash.TFloatObjectHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 75 IFEQ L476 - false
   * 7 gnu.trove.map.hash.TFloatObjectHashMap.equals(Ljava/lang/Object;)Z: I52 Branch 76 IFNONNULL L480 - false
   * 8 gnu.trove.map.hash.TFloatObjectHashMap.equals(Ljava/lang/Object;)Z: I58 Branch 77 IFNONNULL L481 - false
   * 9 gnu.trove.map.hash.TFloatObjectHashMap.equals(Ljava/lang/Object;)Z: I62 Branch 78 IFNE L481 - false
   * 10 gnu.trove.map.hash.TFloatObjectHashMap$TFloatObjectHashIterator.<init>(Lgnu/trove/map/hash/TFloatObjectHashMap;Lgnu/trove/map/hash/TFloatObjectHashMap;)V: root-Branch
   * 11 gnu.trove.map.hash.TFloatObjectHashMap.iterator()Lgnu/trove/iterator/TFloatObjectIterator;: root-Branch
   * 12 gnu.trove.map.hash.TFloatObjectHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 74 IF_ICMPEQ L471 - true
   */

//   @Test
//   public void test4()  throws Throwable  {
//       TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>((-206));
//       byte[] byteArray0 = new byte[5];
//       byteArray0[2] = (byte) (-44);
//       byteArray0[2] = (byte)1;
//       tFloatObjectHashMap0._states = byteArray0;
//       TFloatObjectHashMap<String> tFloatObjectHashMap1 = new TFloatObjectHashMap<String>();
//       boolean boolean0 = tFloatObjectHashMap0.equals((Object) tFloatObjectHashMap1);
//       assertEquals(0.0F, tFloatObjectHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals(false, boolean0);
//       assertEquals(23, tFloatObjectHashMap1.capacity());
//   }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap.clear()V: root-Branch
   */

//   @Test
//   public void test5()  throws Throwable  {
//       TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>((-206));
//       tFloatObjectHashMap0.clear();
//       assertEquals(0.0F, tFloatObjectHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals("{}", tFloatObjectHashMap0.toString());
//   }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   */

//   @Test
//   public void test6()  throws Throwable  {
//       TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>(0, 1, 1);
//       boolean boolean0 = tFloatObjectHashMap0.forEachKey((TFloatProcedure) null);
//       assertEquals(true, boolean0);
//       assertEquals(1.0F, tFloatObjectHashMap0.getNoEntryKey(), 0.01F);
//   }

  //Test case number: 7
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TFloatObjectHashMap.rehash(I)V: I47 Branch 36 IFLE L161 - true
   * 3 gnu.trove.map.hash.TFloatObjectHashMap.rehash(I)V: I47 Branch 36 IFLE L161 - false
   * 4 gnu.trove.map.hash.TFloatObjectHashMap.rehash(I)V: I54 Branch 37 IF_ICMPNE L162 - true
   * 5 gnu.trove.map.hash.TFloatObjectHashMap.remove(F)Ljava/lang/Object;: I13 Branch 50 IFLT L259 - false
   */

  @Test
  public void test7()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(1803, 1803, 1803);
      tFloatObjectHashMap0.put(0.0F, (Integer) 1803);
      assertEquals(1, tFloatObjectHashMap0.size());
      
      tFloatObjectHashMap0.remove((float) 0);
      assertEquals(true, tFloatObjectHashMap0.isEmpty());
  }

  //Test case number: 8
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap.containsValue(Ljava/lang/Object;)Z: I30 Branch 40 IF_ICMPNE L194 - false
   * 2 gnu.trove.map.hash.TFloatObjectHashMap.containsValue(Ljava/lang/Object;)Z: I35 Branch 41 IF_ACMPNE L194 - true
   * 3 gnu.trove.map.hash.TFloatObjectHashMap.containsValue(Ljava/lang/Object;)Z: I23 Branch 39 IFLE L193 - true
   * 4 gnu.trove.map.hash.TFloatObjectHashMap.putIfAbsent(FLjava/lang/Object;)Ljava/lang/Object;: I9 Branch 47 IFGE L229 - true
   * 5 gnu.trove.map.hash.TFloatObjectHashMap.containsValue(Ljava/lang/Object;)Z: I14 Branch 38 IF_ACMPNE L192 - false
   * 6 gnu.trove.map.hash.TFloatObjectHashMap.containsValue(Ljava/lang/Object;)Z: I23 Branch 39 IFLE L193 - false
   * 7 gnu.trove.map.hash.TFloatObjectHashMap.containsValue(Ljava/lang/Object;)Z: I30 Branch 40 IF_ICMPNE L194 - true
   */

  @Test
  public void test8()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>(205, 3.4028235E38F);
      tFloatObjectHashMap0.putIfAbsent(3.4028235E38F, (Float) 3.4028235E38F);
      boolean boolean0 = tFloatObjectHashMap0.containsValue((Object) null);
      assertEquals(1, tFloatObjectHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 9
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap.containsValue(Ljava/lang/Object;)Z: I35 Branch 41 IF_ACMPNE L194 - false
   * 2 gnu.trove.map.hash.TFloatObjectHashMap.containsValue(Ljava/lang/Object;)Z: I14 Branch 38 IF_ACMPNE L192 - false
   * 3 gnu.trove.map.hash.TFloatObjectHashMap.containsValue(Ljava/lang/Object;)Z: I23 Branch 39 IFLE L193 - false
   * 4 gnu.trove.map.hash.TFloatObjectHashMap.containsValue(Ljava/lang/Object;)Z: I30 Branch 40 IF_ICMPNE L194 - true
   * 5 gnu.trove.map.hash.TFloatObjectHashMap.containsValue(Ljava/lang/Object;)Z: I30 Branch 40 IF_ICMPNE L194 - false
   */

  @Test
  public void test9()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>(4481, (-59.3448F));
      assertEquals(3, tFloatObjectHashMap0.capacity());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      tFloatObjectHashMap0._states = byteArray0;
      boolean boolean0 = tFloatObjectHashMap0.containsValue((Object) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 10
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap.containsValue(Ljava/lang/Object;)Z: I57 Branch 43 IF_ICMPNE L200 - false
   * 2 gnu.trove.map.hash.TFloatObjectHashMap.containsValue(Ljava/lang/Object;)Z: I62 Branch 44 IF_ACMPEQ L200 - false
   * 3 gnu.trove.map.hash.TFloatObjectHashMap.containsValue(Ljava/lang/Object;)Z: I68 Branch 45 IFEQ L200 - true
   * 4 gnu.trove.map.hash.TFloatObjectHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 73 IFNE L467 - false
   * 5 gnu.trove.map.hash.TFloatObjectHashMap.containsValue(Ljava/lang/Object;)Z: I14 Branch 38 IF_ACMPNE L192 - true
   * 6 gnu.trove.map.hash.TFloatObjectHashMap.containsValue(Ljava/lang/Object;)Z: I50 Branch 42 IFLE L199 - true
   * 7 gnu.trove.map.hash.TFloatObjectHashMap.containsValue(Ljava/lang/Object;)Z: I50 Branch 42 IFLE L199 - false
   * 8 gnu.trove.map.hash.TFloatObjectHashMap.containsValue(Ljava/lang/Object;)Z: I57 Branch 43 IF_ICMPNE L200 - true
   */

  @Test
  public void test10()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>();
      tFloatObjectHashMap0.putIfAbsent((float) 168, (Float) (-9.824261F));
      TFloatObjectHashMap<Integer> tFloatObjectHashMap1 = new TFloatObjectHashMap<Integer>(168, 168, 168);
      boolean boolean0 = tFloatObjectHashMap0.containsValue((Object) tFloatObjectHashMap1);
      assertEquals("{168.0=-9.824261}", tFloatObjectHashMap0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 11
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap.get(F)Ljava/lang/Object;: I9 Branch 46 IFGE L213 - true
   * 2 gnu.trove.map.hash.TFloatObjectHashMap.rehash(I)V: I54 Branch 37 IF_ICMPNE L162 - false
   */

  @Test
  public void test11()  throws Throwable  {
      TFloatObjectHashMap<Object> tFloatObjectHashMap0 = new TFloatObjectHashMap<Object>((-14), (-14));
      Object object0 = new Object();
      tFloatObjectHashMap0.putIfAbsent((float) (-14), object0);
      tFloatObjectHashMap0.get((float) (-14));
      assertEquals(7, tFloatObjectHashMap0.capacity());
      assertEquals(1, tFloatObjectHashMap0.size());
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap.putIfAbsent(FLjava/lang/Object;)Ljava/lang/Object;: I9 Branch 47 IFGE L229 - false
   */

  @Test
  public void test12()  throws Throwable  {
      TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>(17, 0.0F, 7.8207307F);
      tFloatObjectHashMap0.put((float) 17, (String) null);
      tFloatObjectHashMap0.putIfAbsent((float) 17, "");
      assertEquals("{17.0=null}", tFloatObjectHashMap0.toString());
      assertEquals(1, tFloatObjectHashMap0.size());
  }

  //Test case number: 13
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I11 Branch 48 IFGE L239 - false
   * 2 gnu.trove.map.hash.TFloatObjectHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I40 Branch 49 IFEQ L247 - true
   * 3 gnu.trove.map.hash.TFloatObjectHashMap.putAll(Ljava/util/Map;)V: I13 Branch 51 IFEQ L279 - true
   * 4 gnu.trove.map.hash.TFloatObjectHashMap.putAll(Ljava/util/Map;)V: I13 Branch 51 IFEQ L279 - false
   */

  @Test
  public void test13()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>();
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      Float float0 = new Float((-75.44073316289843));
      hashMap0.put(float0, float0);
      tFloatObjectHashMap0.putAll((Map<? extends Float, ? extends Float>) hashMap0);
      tFloatObjectHashMap0.putAll((Map<? extends Float, ? extends Float>) hashMap0);
      assertEquals("{-75.440735=-75.440735}", tFloatObjectHashMap0.toString());
      assertEquals(1, tFloatObjectHashMap0.size());
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap.remove(F)Ljava/lang/Object;: I13 Branch 50 IFLT L259 - true
   */

//   @Test
//   public void test14()  throws Throwable  {
//       TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>((-206));
//       tFloatObjectHashMap0.remove((-1406.6232F));
//       assertEquals(0.0F, tFloatObjectHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals(true, tFloatObjectHashMap0.isEmpty());
//   }

  //Test case number: 15
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap.keys()[F: I34 Branch 53 IF_ICMPNE L316 - false
   * 2 gnu.trove.map.hash.TFloatObjectHashMap.keys()[F: I27 Branch 52 IFLE L315 - true
   * 3 gnu.trove.map.hash.TFloatObjectHashMap.keys()[F: I27 Branch 52 IFLE L315 - false
   * 4 gnu.trove.map.hash.TFloatObjectHashMap.keys()[F: I34 Branch 53 IF_ICMPNE L316 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>((-1), (-1740.281F), 1907.7299F);
      tFloatObjectHashMap0.putIfAbsent((float) (-1), (Integer) (-1));
      tFloatObjectHashMap0.keys();
      assertEquals(false, tFloatObjectHashMap0.isEmpty());
      assertEquals("{-1.0=-1}", tFloatObjectHashMap0.toString());
  }

  //Test case number: 16
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap.keys([F)[F: I6 Branch 54 IF_ICMPGE L327 - false
   * 2 gnu.trove.map.hash.TFloatObjectHashMap.keys([F)[F: I41 Branch 56 IF_ICMPNE L335 - false
   * 3 gnu.trove.map.hash.TFloatObjectHashMap.keys()[F: I27 Branch 52 IFLE L315 - true
   * 4 gnu.trove.map.hash.TFloatObjectHashMap.keys()[F: I27 Branch 52 IFLE L315 - false
   * 5 gnu.trove.map.hash.TFloatObjectHashMap.keys()[F: I34 Branch 53 IF_ICMPNE L316 - true
   * 6 gnu.trove.map.hash.TFloatObjectHashMap.keys([F)[F: I34 Branch 55 IFLE L334 - true
   * 7 gnu.trove.map.hash.TFloatObjectHashMap.keys([F)[F: I34 Branch 55 IFLE L334 - false
   * 8 gnu.trove.map.hash.TFloatObjectHashMap.keys([F)[F: I41 Branch 56 IF_ICMPNE L335 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>();
      float[] floatArray0 = tFloatObjectHashMap0.keys();
      assertNotNull(floatArray0);
      
      TFloatObjectHashMap<Float> tFloatObjectHashMap1 = new TFloatObjectHashMap<Float>((-1374), (-1374), (-1374));
      Float float0 = new Float((double) 3);
      tFloatObjectHashMap1.put((float) 3, float0);
      tFloatObjectHashMap1.keys(floatArray0);
      assertEquals(false, tFloatObjectHashMap1.isEmpty());
      assertEquals("{3.0=3.0}", tFloatObjectHashMap1.toString());
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap.values()[Ljava/lang/Object;: I35 Branch 58 IF_ICMPNE L357 - false
   * 2 gnu.trove.map.hash.TFloatObjectHashMap.values()[Ljava/lang/Object;: I28 Branch 57 IFLE L356 - true
   * 3 gnu.trove.map.hash.TFloatObjectHashMap.values()[Ljava/lang/Object;: I28 Branch 57 IFLE L356 - false
   * 4 gnu.trove.map.hash.TFloatObjectHashMap.values()[Ljava/lang/Object;: I35 Branch 58 IF_ICMPNE L357 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>(17, 0.0F, 7.8207307F);
      tFloatObjectHashMap0.put((float) 17, (String) null);
      tFloatObjectHashMap0.values();
      assertEquals(7, tFloatObjectHashMap0.capacity());
      assertEquals("{17.0=null}", tFloatObjectHashMap0.toString());
  }

  //Test case number: 18
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: I6 Branch 59 IF_ICMPGE L368 - true
   * 2 gnu.trove.map.hash.TFloatObjectHashMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: I39 Branch 60 IFLE L376 - true
   * 3 gnu.trove.map.hash.TFloatObjectHashMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: I39 Branch 60 IFLE L376 - false
   * 4 gnu.trove.map.hash.TFloatObjectHashMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: I46 Branch 61 IF_ICMPNE L377 - true
   */

//   @Test
//   public void test18()  throws Throwable  {
//       TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>(1);
//       Float[] floatArray0 = new Float[7];
//       Float[] floatArray1 = tFloatObjectHashMap0.values(floatArray0);
//       assertEquals(0.0F, tFloatObjectHashMap0.getNoEntryKey(), 0.01F);
//       assertSame(floatArray1, floatArray0);
//       assertNotNull(floatArray1);
//   }

  //Test case number: 19
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: I6 Branch 59 IF_ICMPGE L368 - false
   * 2 gnu.trove.map.hash.TFloatObjectHashMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: I46 Branch 61 IF_ICMPNE L377 - false
   * 3 gnu.trove.map.hash.TFloatObjectHashMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: I39 Branch 60 IFLE L376 - true
   * 4 gnu.trove.map.hash.TFloatObjectHashMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: I39 Branch 60 IFLE L376 - false
   * 5 gnu.trove.map.hash.TFloatObjectHashMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: I46 Branch 61 IF_ICMPNE L377 - true
   * 6 gnu.trove.map.hash.TFloatObjectHashMap.putAll(Ljava/util/Map;)V: I13 Branch 51 IFEQ L279 - true
   * 7 gnu.trove.map.hash.TFloatObjectHashMap.putAll(Ljava/util/Map;)V: I13 Branch 51 IFEQ L279 - false
   */

  @Test
  public void test19()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>();
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      Float float0 = new Float((-75.44073316289843));
      hashMap0.put(float0, float0);
      Float float1 = new Float(1650.6154F);
      hashMap0.put(float1, float1);
      tFloatObjectHashMap0.putAll((Map<? extends Float, ? extends Float>) hashMap0);
      Float[] floatArray0 = new Float[1];
      tFloatObjectHashMap0.values(floatArray0);
      assertEquals(2, tFloatObjectHashMap0.size());
      assertEquals("{-75.440735=-75.440735,1650.6154=1650.6154}", tFloatObjectHashMap0.toString());
  }

  //Test case number: 20
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I25 Branch 63 IF_ICMPNE L402 - false
   * 2 gnu.trove.map.hash.TFloatObjectHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I31 Branch 64 IFNE L402 - true
   * 3 gnu.trove.map.hash.TFloatObjectHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I18 Branch 62 IFLE L401 - true
   * 4 gnu.trove.map.hash.TFloatObjectHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I18 Branch 62 IFLE L401 - false
   * 5 gnu.trove.map.hash.TFloatObjectHashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I25 Branch 63 IF_ICMPNE L402 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>(1498, 1498);
      Object[] objectArray0 = new Object[6];
      Float float0 = new Float((float) 1498);
      tFloatObjectHashMap0.putIfAbsent((float) 1498, float0);
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(objectArray0);
      boolean boolean0 = tFloatObjectHashMap0.forEachValue((TObjectProcedure<? super Float>) toObjectArrayProceedure0);
      assertEquals(1, tFloatObjectHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 21
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap.retainEntries(Lgnu/trove/procedure/TFloatObjectProcedure;)Z: I31 Branch 68 IFLE L436 - true
   * 2 gnu.trove.map.hash.TFloatObjectHashMap.retainEntries(Lgnu/trove/procedure/TFloatObjectProcedure;)Z: I31 Branch 68 IFLE L436 - false
   * 3 gnu.trove.map.hash.TFloatObjectHashMap.retainEntries(Lgnu/trove/procedure/TFloatObjectProcedure;)Z: I38 Branch 69 IF_ICMPNE L437 - true
   */

//   @Test
//   public void test21()  throws Throwable  {
//       TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>(106, 1.4E-45F);
//       boolean boolean0 = tFloatObjectHashMap0.retainEntries((TFloatObjectProcedure<? super Float>) null);
//       assertEquals("{}", tFloatObjectHashMap0.toString());
//       assertEquals(3, tFloatObjectHashMap0.capacity());
//       assertEquals(false, boolean0);
//       assertEquals(0.0F, tFloatObjectHashMap0.getNoEntryKey(), 0.01F);
//   }

  //Test case number: 22
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap.retainEntries(Lgnu/trove/procedure/TFloatObjectProcedure;)Z: I38 Branch 69 IF_ICMPNE L437 - false
   * 2 gnu.trove.map.hash.TFloatObjectHashMap.retainEntries(Lgnu/trove/procedure/TFloatObjectProcedure;)Z: I31 Branch 68 IFLE L436 - false
   * 3 gnu.trove.map.hash.TFloatObjectHashMap.retainEntries(Lgnu/trove/procedure/TFloatObjectProcedure;)Z: I38 Branch 69 IF_ICMPNE L437 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>();
      tFloatObjectHashMap0.putIfAbsent((float) 168, (Float) (-9.824261F));
      // Undeclared exception!
      try {
        tFloatObjectHashMap0.retainEntries((TFloatObjectProcedure<? super Float>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 23
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I18 Branch 71 IFLE L455 - true
   * 2 gnu.trove.map.hash.TFloatObjectHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I18 Branch 71 IFLE L455 - false
   * 3 gnu.trove.map.hash.TFloatObjectHashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I25 Branch 72 IF_ICMPNE L456 - true
   * 4 gnu.trove.map.hash.TFloatObjectHashMap.<init>(I)V: root-Branch
   */

//   @Test
//   public void test23()  throws Throwable  {
//       TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>(1498);
//       tFloatObjectHashMap0.transformValues((TObjectFunction<String, String>) null);
//       assertEquals(3049, tFloatObjectHashMap0.capacity());
//       assertEquals(0.0F, tFloatObjectHashMap0.getNoEntryKey(), 0.01F);
//   }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 74 IF_ICMPEQ L471 - false
   * 2 gnu.trove.map.hash.TFloatObjectHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TFloatObjectHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 73 IFNE L467 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>();
      tFloatObjectHashMap0.put((-1740.281F), (Float) (-1740.281F));
      TFloatObjectHashMap<Integer> tFloatObjectHashMap1 = new TFloatObjectHashMap<Integer>((-1), (-1740.281F), 1907.7299F);
      boolean boolean0 = tFloatObjectHashMap0.equals((Object) tFloatObjectHashMap1);
      assertEquals(1, tFloatObjectHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 25
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap.hashCode()I: I29 Branch 81 IF_ICMPNE L503 - false
   * 2 gnu.trove.map.hash.TFloatObjectHashMap.hashCode()I: I41 Branch 82 IFNONNULL L504 - true
   * 3 gnu.trove.map.hash.TFloatObjectHashMap.hashCode()I: I22 Branch 80 IFLE L502 - true
   * 4 gnu.trove.map.hash.TFloatObjectHashMap.hashCode()I: I22 Branch 80 IFLE L502 - false
   * 5 gnu.trove.map.hash.TFloatObjectHashMap.hashCode()I: I29 Branch 81 IF_ICMPNE L503 - true
   */

  @Test
  public void test25()  throws Throwable  {
      TFloatObjectHashMap<Integer> tFloatObjectHashMap0 = new TFloatObjectHashMap<Integer>((-1), (-1740.281F), 1907.7299F);
      tFloatObjectHashMap0.putIfAbsent((float) (-1), (Integer) (-1));
      int int0 = tFloatObjectHashMap0.hashCode();
      assertEquals(1, tFloatObjectHashMap0.size());
      assertEquals(836880517, int0);
  }

  //Test case number: 26
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap.hashCode()I: I41 Branch 82 IFNONNULL L504 - false
   * 2 gnu.trove.map.hash.TFloatObjectHashMap.put(FLjava/lang/Object;)Ljava/lang/Object;: root-Branch
   * 3 gnu.trove.map.hash.TFloatObjectHashMap.rehash(I)V: I47 Branch 36 IFLE L161 - true
   * 4 gnu.trove.map.hash.TFloatObjectHashMap.rehash(I)V: I47 Branch 36 IFLE L161 - false
   * 5 gnu.trove.map.hash.TFloatObjectHashMap.rehash(I)V: I54 Branch 37 IF_ICMPNE L162 - true
   * 6 gnu.trove.map.hash.TFloatObjectHashMap.rehash(I)V: I54 Branch 37 IF_ICMPNE L162 - false
   * 7 gnu.trove.map.hash.TFloatObjectHashMap.hashCode()I: I22 Branch 80 IFLE L502 - true
   * 8 gnu.trove.map.hash.TFloatObjectHashMap.hashCode()I: I22 Branch 80 IFLE L502 - false
   * 9 gnu.trove.map.hash.TFloatObjectHashMap.hashCode()I: I29 Branch 81 IF_ICMPNE L503 - true
   * 10 gnu.trove.map.hash.TFloatObjectHashMap.hashCode()I: I29 Branch 81 IF_ICMPNE L503 - false
   */

  @Test
  public void test26()  throws Throwable  {
      TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>(17, 0.0F, 7.8207307F);
      tFloatObjectHashMap0.put((float) 17, (String) null);
      int int0 = tFloatObjectHashMap0.hashCode();
      assertEquals(false, tFloatObjectHashMap0.isEmpty());
      assertEquals(1344805618, int0);
  }

  //Test case number: 27
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap$KeyView.toString()Ljava/lang/String;: I34 Branch 35 IFEQ L744 - true
   * 2 gnu.trove.map.hash.TFloatObjectHashMap$KeyView.<init>(Lgnu/trove/map/hash/TFloatObjectHashMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TFloatObjectHashMap$KeyView.toString()Ljava/lang/String;: I21 Branch 33 IFLE L742 - true
   * 4 gnu.trove.map.hash.TFloatObjectHashMap$KeyView.toString()Ljava/lang/String;: I21 Branch 33 IFLE L742 - false
   * 5 gnu.trove.map.hash.TFloatObjectHashMap$KeyView.toString()Ljava/lang/String;: I30 Branch 34 IF_ICMPNE L743 - true
   * 6 gnu.trove.map.hash.TFloatObjectHashMap$KeyView.toString()Ljava/lang/String;: I30 Branch 34 IF_ICMPNE L743 - false
   * 7 gnu.trove.map.hash.TFloatObjectHashMap$KeyView.toString()Ljava/lang/String;: I34 Branch 35 IFEQ L744 - false
   * 8 gnu.trove.map.hash.TFloatObjectHashMap.keySet()Lgnu/trove/set/TFloatSet;: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>(1, 1);
      TFloatSet tFloatSet0 = tFloatObjectHashMap0.keySet();
      tFloatObjectHashMap0.putIfAbsent((-5.478409F), "DEFAULT_LONG_NO_ENTRY_VALUE: ");
      tFloatObjectHashMap0.putIfAbsent((float) 1, "DEFAULT_LONG_NO_ENTRY_VALUE: ");
      TUnmodifiableFloatSet tUnmodifiableFloatSet0 = new TUnmodifiableFloatSet(tFloatSet0);
      String string0 = tUnmodifiableFloatSet0.toString();
      assertEquals(false, tFloatSet0.isEmpty());
      assertEquals("{-5.478409,1.0", string0);
  }

  //Test case number: 28
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I39 Branch 84 IF_ICMPNE L974 - false
   * 2 gnu.trove.map.hash.TFloatObjectHashMap.<init>(IFF)V: root-Branch
   * 3 gnu.trove.map.hash.TFloatObjectHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 83 IFLE L973 - true
   * 4 gnu.trove.map.hash.TFloatObjectHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 83 IFLE L973 - false
   * 5 gnu.trove.map.hash.TFloatObjectHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I39 Branch 84 IF_ICMPNE L974 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TFloatObjectHashMap<Float> tFloatObjectHashMap0 = new TFloatObjectHashMap<Float>(17, (float) 17, 7.8207307F);
      tFloatObjectHashMap0.putIfAbsent(7.8207307F, (Float) 7.8207307F);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tFloatObjectHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(false, tFloatObjectHashMap0.isEmpty());
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\u0016\u0000\u0000A\uFFFD\u0000\u0000?\u0000\u0000\u0000@\uFFFDCm\u0000\u0000\u0000\u0001@\uFFFDCmsr\u0000\u000Fjava.lang.Float\uFFFD\uFFFD\u0262\uFFFD<\uFFFD\uFFFD\u0002\u0000\u0001F\u0000\u0005valuexr\u0000\u0010java.lang.Number\uFFFD\uFFFD\uFFFD\u001D\u000B\uFFFD\uFFFD\uFFFD\u0002\u0000\u0000xp@\uFFFDCm", byteArrayOutputStream0.toString());
  }

  //Test case number: 29
  /*
   * 15 covered goals:
   * 1 gnu.trove.map.hash.TFloatObjectHashMap$2.execute(FLjava/lang/Object;)Z: I4 Branch 97 IFEQ L1013 - true
   * 2 gnu.trove.map.hash.TFloatObjectHashMap$2.execute(FLjava/lang/Object;)Z: I4 Branch 97 IFEQ L1013 - false
   * 3 gnu.trove.map.hash.TFloatObjectHashMap$1.<init>(Lgnu/trove/map/hash/TFloatObjectHashMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TFloatObjectHashMap$2.<init>(Lgnu/trove/map/hash/TFloatObjectHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 5 gnu.trove.map.hash.TFloatObjectHashMap.toString()Ljava/lang/String;: root-Branch
   * 6 gnu.trove.map.hash.TFloatObjectHashMap.<init>(IF)V: root-Branch
   * 7 gnu.trove.map.hash.TFloatObjectHashMap.setUp(I)I: root-Branch
   * 8 gnu.trove.map.hash.TFloatObjectHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I11 Branch 48 IFGE L239 - true
   * 9 gnu.trove.map.hash.TFloatObjectHashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I40 Branch 49 IFEQ L247 - false
   * 10 gnu.trove.map.hash.TFloatObjectHashMap.putIfAbsent(FLjava/lang/Object;)Ljava/lang/Object;: I9 Branch 47 IFGE L229 - true
   * 11 gnu.trove.map.hash.TFloatObjectHashMap.forEachEntry(Lgnu/trove/procedure/TFloatObjectProcedure;)Z: I23 Branch 65 IFLE L416 - true
   * 12 gnu.trove.map.hash.TFloatObjectHashMap.forEachEntry(Lgnu/trove/procedure/TFloatObjectProcedure;)Z: I23 Branch 65 IFLE L416 - false
   * 13 gnu.trove.map.hash.TFloatObjectHashMap.forEachEntry(Lgnu/trove/procedure/TFloatObjectProcedure;)Z: I30 Branch 66 IF_ICMPNE L417 - true
   * 14 gnu.trove.map.hash.TFloatObjectHashMap.forEachEntry(Lgnu/trove/procedure/TFloatObjectProcedure;)Z: I30 Branch 66 IF_ICMPNE L417 - false
   * 15 gnu.trove.map.hash.TFloatObjectHashMap.forEachEntry(Lgnu/trove/procedure/TFloatObjectProcedure;)Z: I39 Branch 67 IFNE L417 - true
   */

  @Test
  public void test29()  throws Throwable  {
      TFloatObjectHashMap<String> tFloatObjectHashMap0 = new TFloatObjectHashMap<String>(1, 1);
      tFloatObjectHashMap0.putIfAbsent((-5.478409F), "DEFAULT_LONG_NO_ENTRY_VALUE: ");
      tFloatObjectHashMap0.putIfAbsent((float) 1, "DEFAULT_LONG_NO_ENTRY_VALUE: ");
      String string0 = tFloatObjectHashMap0.toString();
      assertEquals(2, tFloatObjectHashMap0.size());
      assertEquals("{-5.478409=DEFAULT_LONG_NO_ENTRY_VALUE: ,1.0=DEFAULT_LONG_NO_ENTRY_VALUE: }", string0);
  }
}
