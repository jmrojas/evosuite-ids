/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.stack.array;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TCharCollection;
import gnu.trove.impl.sync.TSynchronizedCharSet;
import gnu.trove.list.array.TCharArrayList;
import gnu.trove.set.TCharSet;
import gnu.trove.set.hash.TCharHashSet;
import gnu.trove.stack.TCharStack;
import gnu.trove.stack.array.TCharArrayStack;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.io.StreamCorruptedException;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Locale;
import java.util.StringTokenizer;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharArrayStackEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 1;
      char char0 = 'g';
      TCharArrayStack tCharArrayStack0 = new TCharArrayStack(int0, char0);
      char[] charArray0 = new char[9];
      charArray0[0] = char0;
      char char1 = ']';
      charArray0[1] = char1;
      charArray0[2] = char0;
      charArray0[3] = char0;
      charArray0[4] = char0;
      char char2 = '}';
      charArray0[5] = char2;
      char char3 = 'a';
      charArray0[6] = char3;
      charArray0[7] = char0;
      charArray0[8] = char0;
      tCharArrayStack0.toArray(charArray0);
      // Undeclared exception!
      try {
        tCharArrayStack0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TCharArrayStack tCharArrayStack0 = new TCharArrayStack();
      char char0 = '+';
      tCharArrayStack0.push(char0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-67);
      byteArray0[1] = byte1;
      byte byte2 = (byte)1;
      byteArray0[2] = byte2;
      byte byte3 = (byte)31;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-1);
      byteArray0[6] = byte6;
      int int0 = 0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) byteArray0[3], int0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) byteArrayInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TCharArrayStack tCharArrayStack0 = new TCharArrayStack();
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)10;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-10);
      byteArray0[1] = byte1;
      tCharArrayStack0.clear();
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-45);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      String string0 = File.separator;
      tCharArrayStack0.equals((Object) string0);
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte)93;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-128);
      byteArray0[8] = byte8;
      byte byte9 = (byte) (-1);
      byteArray0[9] = byte9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 0AF60001
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TCharArrayStack tCharArrayStack0 = new TCharArrayStack();
      TCharArrayStack tCharArrayStack1 = new TCharArrayStack((TCharStack) tCharArrayStack0);
      String string0 = "Spi+f<V.";
      // Undeclared exception!
      try {
        URI.create(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 5: Spi+f<V.
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TCharStack tCharStack0 = null;
      TCharArrayStack tCharArrayStack0 = null;
      try {
        tCharArrayStack0 = new TCharArrayStack(tCharStack0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Only support TCharArrayStack
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TCharArrayStack tCharArrayStack0 = new TCharArrayStack();
      char char0 = 'B';
      tCharArrayStack0.push(char0);
      assertEquals(1, tCharArrayStack0.size());
      assertEquals("{B}", tCharArrayStack0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-816);
      TCharArrayStack tCharArrayStack0 = null;
      try {
        tCharArrayStack0 = new TCharArrayStack(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-678);
      TCharArrayStack tCharArrayStack0 = null;
      try {
        tCharArrayStack0 = new TCharArrayStack(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TCharArrayStack tCharArrayStack0 = new TCharArrayStack();
      ObjectInput objectInput0 = null;
      // Undeclared exception!
      try {
        tCharArrayStack0.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 10;
      TCharArrayStack tCharArrayStack0 = new TCharArrayStack(int0);
      TCharArrayStack tCharArrayStack1 = new TCharArrayStack((TCharStack) tCharArrayStack0);
      String string0 = "";
      // Undeclared exception!
      try {
        tCharArrayStack0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 1943;
      char char0 = 'M';
      TCharArrayStack tCharArrayStack0 = new TCharArrayStack(int0, char0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(int0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 1899;
      int int1 = (-581);
      TCharArrayStack tCharArrayStack0 = null;
      try {
        tCharArrayStack0 = new TCharArrayStack(int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TCharStack tCharStack0 = null;
      TCharArrayStack tCharArrayStack0 = new TCharArrayStack();
      String string0 = "@AXb8~\\:)5";
      String string1 = "mwaicbi7Y/";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string1);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // mwaicbi7Y/
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TCharArrayStack tCharArrayStack0 = new TCharArrayStack();
      TCharArrayStack tCharArrayStack1 = new TCharArrayStack();
      char[] charArray0 = new char[10];
      char char0 = '%';
      charArray0[0] = char0;
      char char1 = '8';
      charArray0[1] = char1;
      char char2 = 'B';
      char[] charArray1 = tCharArrayStack0.toArray();
      assertNotNull(charArray1);
      
      charArray0[2] = char2;
      char char3 = ']';
      charArray0[3] = char3;
      char char4 = 'C';
      charArray0[4] = char4;
      char char5 = 'U';
      charArray0[5] = char5;
      char char6 = 'F';
      charArray0[6] = char6;
      tCharArrayStack0.clear();
      char char7 = 'u';
      tCharArrayStack0.getNoEntryValue();
      charArray0[7] = char7;
      char char8 = '5';
      charArray0[8] = char8;
      char char9 = '}';
      charArray0[9] = char9;
      tCharArrayStack0.toArray(charArray0);
      String string0 = tCharArrayStack0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try {
        tCharArrayStack0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      char char0 = 'r';
      TCharArrayStack tCharArrayStack0 = new TCharArrayStack(int0, char0);
      TCharArrayStack tCharArrayStack1 = new TCharArrayStack((TCharStack) tCharArrayStack0);
      TCharArrayStack tCharArrayStack2 = new TCharArrayStack((TCharStack) tCharArrayStack1);
      char[] charArray0 = new char[4];
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = char0;
      charArray0[3] = char0;
      tCharArrayStack2.toArray(charArray0);
      assertEquals('r', tCharArrayStack0.getNoEntryValue());
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 401;
      char char0 = 'e';
      TCharArrayStack tCharArrayStack0 = new TCharArrayStack(int0, char0);
      tCharArrayStack0.hashCode();
      InputStream inputStream0 = null;
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream(inputStream0, inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      int int1 = 0;
      char char0 = 'd';
      TCharArrayStack tCharArrayStack0 = new TCharArrayStack(int1, char0);
      Locale locale0 = Locale.ROOT;
      String string0 = locale0.getDisplayCountry();
      tCharArrayStack0.equals((Object) string0);
      char[] charArray0 = new char[10];
      charArray0[0] = char0;
      char char1 = 'u';
      charArray0[1] = char1;
      charArray0[2] = char0;
      charArray0[3] = char0;
      charArray0[4] = char0;
      charArray0[5] = char0;
      charArray0[6] = char0;
      charArray0[7] = char0;
      charArray0[8] = char0;
      charArray0[9] = char0;
      tCharArrayStack0.toArray(charArray0);
      char char2 = '3';
      TCharArrayStack tCharArrayStack1 = null;
      try {
        tCharArrayStack1 = new TCharArrayStack(int0, char2);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 598;
      char char0 = 'H';
      TCharArrayStack tCharArrayStack0 = new TCharArrayStack(int0, char0);
      int int1 = 1050;
      float float0 = (-1.0F);
      TCharHashSet tCharHashSet0 = new TCharHashSet(int1, float0, char0);
      TSynchronizedCharSet tSynchronizedCharSet0 = new TSynchronizedCharSet((TCharSet) tCharHashSet0);
      TCharArrayList tCharArrayList0 = new TCharArrayList((TCharCollection) tSynchronizedCharSet0);
      String string0 = "}";
      boolean boolean0 = true;
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0, boolean0);
      String string1 = stringTokenizer0.nextToken();
      tCharArrayStack0.equals((Object) string1);
      String string2 = tCharArrayList0.toString();
      tCharArrayStack0.equals((Object) string2);
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 0;
      char char0 = 'C';
      TCharArrayStack tCharArrayStack0 = new TCharArrayStack(int0, char0);
      char[] charArray0 = new char[8];
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = char0;
      charArray0[3] = char0;
      charArray0[4] = char0;
      charArray0[5] = char0;
      char char1 = 'p';
      charArray0[6] = char1;
      charArray0[7] = char0;
      tCharArrayStack0.toArray(charArray0);
      TCharArrayStack tCharArrayStack1 = new TCharArrayStack();
      TCharArrayStack tCharArrayStack2 = new TCharArrayStack((TCharStack) tCharArrayStack1);
      assertEquals('\u0000', tCharArrayStack2.getNoEntryValue());
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 0;
      char char0 = 'j';
      TCharArrayStack tCharArrayStack0 = new TCharArrayStack(int0, char0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) byteArrayOutputStream0);
      int int1 = (-1453);
      TCharArrayStack tCharArrayStack1 = null;
      try {
        tCharArrayStack1 = new TCharArrayStack(int1, char0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
