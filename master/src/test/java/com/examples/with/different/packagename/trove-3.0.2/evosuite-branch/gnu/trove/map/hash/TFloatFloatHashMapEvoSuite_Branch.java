/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TFloatCollection;
import gnu.trove.function.TFloatFunction;
import gnu.trove.map.TFloatFloatMap;
import gnu.trove.map.hash.TFloatFloatHashMap;
import gnu.trove.procedure.TFloatFloatProcedure;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.set.TFloatSet;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatFloatHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 18 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap$TFloatFloatHashIterator.value()F: root-Branch
   * 2 gnu.trove.map.hash.TFloatFloatHashMap$TFloatFloatHashIterator.advance()V: root-Branch
   * 3 gnu.trove.map.hash.TFloatFloatHashMap$TFloatFloatHashIterator.key()F: root-Branch
   * 4 gnu.trove.map.hash.TFloatFloatHashMap$TFloatFloatHashIterator.<init>(Lgnu/trove/map/hash/TFloatFloatHashMap;Lgnu/trove/map/hash/TFloatFloatHashMap;)V: root-Branch
   * 5 gnu.trove.map.hash.TFloatFloatHashMap.setUp(I)I: root-Branch
   * 6 gnu.trove.map.hash.TFloatFloatHashMap.put(FF)F: root-Branch
   * 7 gnu.trove.map.hash.TFloatFloatHashMap.iterator()Lgnu/trove/iterator/TFloatFloatIterator;: root-Branch
   * 8 gnu.trove.map.hash.TFloatFloatHashMap.<init>([F[F)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 9 gnu.trove.map.hash.TFloatFloatHashMap.<init>([F[F)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 10 gnu.trove.map.hash.TFloatFloatHashMap.<init>(Lgnu/trove/map/TFloatFloatMap;)V: I10 Branch 34 IFEQ L133 - false
   * 11 gnu.trove.map.hash.TFloatFloatHashMap.<init>(Lgnu/trove/map/TFloatFloatMap;)V: I40 Branch 35 IFEQ L139 - true
   * 12 gnu.trove.map.hash.TFloatFloatHashMap.<init>(Lgnu/trove/map/TFloatFloatMap;)V: I54 Branch 36 IFEQ L143 - true
   * 13 gnu.trove.map.hash.TFloatFloatHashMap.doPut(FFI)F: I12 Branch 40 IFGE L214 - true
   * 14 gnu.trove.map.hash.TFloatFloatHashMap.doPut(FFI)F: I12 Branch 40 IFGE L214 - false
   * 15 gnu.trove.map.hash.TFloatFloatHashMap.doPut(FFI)F: I41 Branch 41 IFEQ L221 - true
   * 16 gnu.trove.map.hash.TFloatFloatHashMap.doPut(FFI)F: I41 Branch 41 IFEQ L221 - false
   * 17 gnu.trove.map.hash.TFloatFloatHashMap.putAll(Lgnu/trove/map/TFloatFloatMap;)V: I15 Branch 43 IFEQ L243 - true
   * 18 gnu.trove.map.hash.TFloatFloatHashMap.putAll(Lgnu/trove/map/TFloatFloatMap;)V: I15 Branch 43 IFEQ L243 - false
   */

//   @Test
//   public void test0()  throws Throwable  {
//       float[] floatArray0 = new float[10];
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
//       TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap0);
//       assertEquals(23, tFloatFloatHashMap1.capacity());
//       assertEquals("{0.0=0.0}", tFloatFloatHashMap0.toString());
//       assertEquals(0.0F, tFloatFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals(1, tFloatFloatHashMap0.size());
//       assertEquals(1, tFloatFloatHashMap1.size());
//   }

  //Test case number: 1
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap$TValueView.<init>(Lgnu/trove/map/hash/TFloatFloatHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.valueCollection()Lgnu/trove/TFloatCollection;: root-Branch
   * 3 gnu.trove.map.hash.TFloatFloatHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(0, 0);
      TFloatCollection tFloatCollection0 = tFloatFloatHashMap0.valueCollection();
      assertEquals(0, tFloatCollection0.size());
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TFloatFloatHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.keySet()Lgnu/trove/set/TFloatSet;: root-Branch
   * 3 gnu.trove.map.hash.TFloatFloatHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap((-1));
      TFloatSet tFloatSet0 = tFloatFloatHashMap0.keySet();
      assertEquals(true, tFloatSet0.isEmpty());
  }

  //Test case number: 3
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.remove(F)F: I14 Branch 46 IFLT L276 - false
   * 3 gnu.trove.map.hash.TFloatFloatHashMap.adjustOrPutValue(FFF)F: I9 Branch 72 IFGE L491 - true
   * 4 gnu.trove.map.hash.TFloatFloatHashMap.adjustOrPutValue(FFF)F: I58 Branch 73 IFEQ L502 - false
   * 5 gnu.trove.map.hash.TFloatFloatHashMap.<init>()V: root-Branch
   */

//   @Test
//   public void test3()  throws Throwable  {
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
//       tFloatFloatHashMap0.adjustOrPutValue((float) 0, (float) 0, (float) 0);
//       assertEquals("{0.0=0.0}", tFloatFloatHashMap0.toString());
//       
//       float float0 = tFloatFloatHashMap0.remove(0.0F);
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(0, 0);
      boolean boolean0 = tFloatFloatHashMap0.forEachKey((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.containsKey(F)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      float[] floatArray0 = new float[24];
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
      tFloatFloatHashMap0.containsKey((-610.8838F));
      assertEquals(67, tFloatFloatHashMap0.capacity());
      assertEquals("{0.0=0.0}", tFloatFloatHashMap0.toString());
      assertEquals(1, tFloatFloatHashMap0.size());
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.clear()V: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      tFloatFloatHashMap0.clear();
      assertEquals(23, tFloatFloatHashMap0.capacity());
      assertEquals("{}", tFloatFloatHashMap0.toString());
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.increment(F)Z: root-Branch
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.adjustValue(FF)Z: I9 Branch 71 IFGE L477 - false
   */

  @Test
  public void test7()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap((-1));
      boolean boolean0 = tFloatFloatHashMap0.increment((-1.0F));
      assertEquals(false, boolean0);
  }

  //Test case number: 8
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.<init>(Lgnu/trove/map/TFloatFloatMap;)V: I40 Branch 35 IFEQ L139 - false
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.<init>(Lgnu/trove/map/TFloatFloatMap;)V: I54 Branch 36 IFEQ L143 - false
   * 3 gnu.trove.map.hash.TFloatFloatHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 4 gnu.trove.map.hash.TFloatFloatHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 5 gnu.trove.map.hash.TFloatFloatHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 6 gnu.trove.map.hash.TFloatFloatHashMap.<init>(Lgnu/trove/map/TFloatFloatMap;)V: I10 Branch 34 IFEQ L133 - false
   * 7 gnu.trove.map.hash.TFloatFloatHashMap.<init>(IFFF)V: root-Branch
   */

//   @Test
//   public void test8()  throws Throwable  {
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap((-1), (-1), (-1), (-1));
//       TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap0);
//       assertEquals((-1.0F), tFloatFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals(3, tFloatFloatHashMap1.capacity());
//       assertEquals((-1.0F), tFloatFloatHashMap1.getNoEntryKey(), 0.01F);
//   }

  //Test case number: 9
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.adjustOrPutValue(FFF)F: I9 Branch 72 IFGE L491 - true
   * 3 gnu.trove.map.hash.TFloatFloatHashMap.adjustOrPutValue(FFF)F: I58 Branch 73 IFEQ L502 - false
   */

  @Test
  public void test9()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      tFloatFloatHashMap0.adjustOrPutValue(0.0F, (float) 0, (float) 0);
      tFloatFloatHashMap0.compact();
      assertEquals(1, tFloatFloatHashMap0.size());
      assertEquals("{0.0=0.0}", tFloatFloatHashMap0.toString());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.putIfAbsent(FF)F: I9 Branch 39 IFGE L205 - false
   */

//   @Test
//   public void test10()  throws Throwable  {
//       float[] floatArray0 = new float[10];
//       floatArray0[5] = 1.0F;
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
//       float float0 = tFloatFloatHashMap0.putIfAbsent(1.0F, 0.5F);
//       assertEquals(2, tFloatFloatHashMap0.size());
//       assertEquals("{1.0=1.0, 0.0=0.0}", tFloatFloatHashMap0.toString());
//       assertEquals(1.0F, float0, 0.01F);
//       assertEquals(23, tFloatFloatHashMap0.capacity());
//   }

  //Test case number: 11
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - false
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(0, 0);
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      hashMap0.put((Float) 0.0F, (Float) 0.0F);
      tFloatFloatHashMap0.putAll((Map<? extends Float, ? extends Float>) hashMap0);
      assertEquals(7, tFloatFloatHashMap0.capacity());
      assertEquals(1, tFloatFloatHashMap0.size());
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.get(F)F: I9 Branch 44 IFGE L253 - false
   */

//   @Test
//   public void test12()  throws Throwable  {
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(0, 0);
//       float float0 = tFloatFloatHashMap0.get((float) 126);
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 13
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.putIfAbsent(FF)F: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(1565);
      tFloatFloatHashMap0.putIfAbsent((float) 1565, (float) 1565);
      boolean boolean0 = tFloatFloatHashMap0.isEmpty();
      assertEquals(1, tFloatFloatHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test14()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      boolean boolean0 = tFloatFloatHashMap0.isEmpty();
      assertEquals(true, boolean0);
      assertEquals(23, tFloatFloatHashMap0.capacity());
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.remove(F)F: I14 Branch 46 IFLT L276 - true
   */

//   @Test
//   public void test15()  throws Throwable  {
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(133853);
//       float float0 = tFloatFloatHashMap0.remove(0.0F);
//       assertEquals(267713, tFloatFloatHashMap0.capacity());
//       assertEquals(0.0F, float0, 0.01F);
//       assertEquals(0, tFloatFloatHashMap0.size());
//   }

  //Test case number: 16
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.keys()[F: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.keys()[F: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TFloatFloatHashMap.keys()[F: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TFloatFloatHashMap.keys()[F: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(1565);
      tFloatFloatHashMap0.putIfAbsent((float) 1565, (float) 1565);
      tFloatFloatHashMap0.keys();
      assertEquals(1, tFloatFloatHashMap0.size());
      assertEquals("{1565.0=1565.0}", tFloatFloatHashMap0.toString());
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.keys([F)[F: I10 Branch 49 IF_ICMPGE L315 - true
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.keys([F)[F: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TFloatFloatHashMap.keys([F)[F: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TFloatFloatHashMap.keys([F)[F: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(0, 0);
      float[] floatArray0 = tFloatFloatHashMap0.keys(tFloatFloatHashMap0._set);
      assertNotNull(floatArray0);
  }

  //Test case number: 18
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.keys([F)[F: I10 Branch 49 IF_ICMPGE L315 - false
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.keys([F)[F: I44 Branch 51 IF_ICMPNE L323 - false
   * 3 gnu.trove.map.hash.TFloatFloatHashMap.keys([F)[F: I37 Branch 50 IFLE L322 - true
   * 4 gnu.trove.map.hash.TFloatFloatHashMap.keys([F)[F: I37 Branch 50 IFLE L322 - false
   * 5 gnu.trove.map.hash.TFloatFloatHashMap.keys([F)[F: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test18()  throws Throwable  {
      float[] floatArray0 = new float[24];
      floatArray0[0] = (-13.318787F);
      floatArray0[2] = (float) 1386;
      floatArray0[5] = (-610.8838F);
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(0, (-16.74883F));
      float[] floatArray1 = tFloatFloatHashMap0.keys(tFloatFloatHashMap1._set);
      assertEquals("{-610.8838=-610.8838, 1386.0=1386.0, -13.318787=-13.318787, 0.0=0.0}", tFloatFloatHashMap0.toString());
      assertEquals(4, tFloatFloatHashMap0.size());
      assertNotNull(floatArray1);
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.values()[F: I34 Branch 53 IF_ICMPNE L344 - false
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.values()[F: I27 Branch 52 IFLE L343 - true
   * 3 gnu.trove.map.hash.TFloatFloatHashMap.values()[F: I27 Branch 52 IFLE L343 - false
   * 4 gnu.trove.map.hash.TFloatFloatHashMap.values()[F: I34 Branch 53 IF_ICMPNE L344 - true
   */

  @Test
  public void test19()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(1565);
      tFloatFloatHashMap0.putIfAbsent((float) 1565, (float) 1565);
      tFloatFloatHashMap0.values();
      assertEquals(false, tFloatFloatHashMap0.isEmpty());
      assertEquals("{1565.0=1565.0}", tFloatFloatHashMap0.toString());
  }

  //Test case number: 20
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.values([F)[F: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TFloatFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TFloatFloatHashMap.values([F)[F: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(1565);
      float[] floatArray0 = tFloatFloatHashMap0.values(tFloatFloatHashMap0._set);
      assertEquals(3203, tFloatFloatHashMap0.capacity());
      assertNotNull(floatArray0);
  }

  //Test case number: 21
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.values([F)[F: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.values([F)[F: I44 Branch 56 IF_ICMPNE L363 - false
   * 3 gnu.trove.map.hash.TFloatFloatHashMap.keys()[F: I27 Branch 47 IFLE L303 - true
   * 4 gnu.trove.map.hash.TFloatFloatHashMap.keys()[F: I27 Branch 47 IFLE L303 - false
   * 5 gnu.trove.map.hash.TFloatFloatHashMap.keys()[F: I34 Branch 48 IF_ICMPNE L304 - true
   * 6 gnu.trove.map.hash.TFloatFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - true
   * 7 gnu.trove.map.hash.TFloatFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - false
   * 8 gnu.trove.map.hash.TFloatFloatHashMap.values([F)[F: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      float[] floatArray0 = tFloatFloatHashMap0.keys();
      tFloatFloatHashMap0.putIfAbsent(725.42865F, (-273.19934F));
      tFloatFloatHashMap0.values(floatArray0);
      assertEquals(false, tFloatFloatHashMap0.isEmpty());
      assertEquals("{725.42865=-273.19934}", tFloatFloatHashMap0.toString());
  }

  //Test case number: 22
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.containsValue(F)Z: I31 Branch 59 IFNE L377 - true
   * 3 gnu.trove.map.hash.TFloatFloatHashMap.containsValue(F)Z: I18 Branch 57 IFLE L376 - true
   * 4 gnu.trove.map.hash.TFloatFloatHashMap.containsValue(F)Z: I18 Branch 57 IFLE L376 - false
   * 5 gnu.trove.map.hash.TFloatFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap((-1));
      tFloatFloatHashMap0.putIfAbsent(0.0F, 0.0F);
      boolean boolean0 = tFloatFloatHashMap0.containsValue((float) (-1));
      assertEquals("{0.0=0.0}", tFloatFloatHashMap0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 23
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.containsValue(F)Z: I31 Branch 59 IFNE L377 - false
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.containsValue(F)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TFloatFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 4 gnu.trove.map.hash.TFloatFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - false
   */

  @Test
  public void test23()  throws Throwable  {
      float[] floatArray0 = new float[10];
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
      boolean boolean0 = tFloatFloatHashMap0.containsValue(0.0F);
      assertEquals(true, boolean0);
      assertEquals(1, tFloatFloatHashMap0.size());
      assertEquals("{0.0=0.0}", tFloatFloatHashMap0.toString());
      assertEquals(23, tFloatFloatHashMap0.capacity());
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TFloatFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(0, 0);
      boolean boolean0 = tFloatFloatHashMap0.forEachValue((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 25
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.<init>(IF)V: root-Branch
   * 3 gnu.trove.map.hash.TFloatFloatHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 4 gnu.trove.map.hash.TFloatFloatHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 5 gnu.trove.map.hash.TFloatFloatHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 6 gnu.trove.map.hash.TFloatFloatHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 7 gnu.trove.map.hash.TFloatFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 8 gnu.trove.map.hash.TFloatFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test25()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(0, 0);
      tFloatFloatHashMap0.put((float) 126, (-1640.0465F));
      // Undeclared exception!
      try {
        tFloatFloatHashMap0.forEachValue((TFloatProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TFloatFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      tFloatFloatHashMap0.transformValues((TFloatFunction) null);
      assertEquals(23, tFloatFloatHashMap0.capacity());
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TFloatFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test27()  throws Throwable  {
      float[] floatArray0 = new float[8];
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
      // Undeclared exception!
      try {
        tFloatFloatHashMap0.transformValues((TFloatFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.retainEntries(Lgnu/trove/procedure/TFloatFloatProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.retainEntries(Lgnu/trove/procedure/TFloatFloatProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TFloatFloatHashMap.retainEntries(Lgnu/trove/procedure/TFloatFloatProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   * 4 gnu.trove.map.hash.TFloatFloatHashMap.<init>()V: root-Branch
   */

  @Test
  public void test28()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      boolean boolean0 = tFloatFloatHashMap0.retainEntries((TFloatFloatProcedure) null);
      assertEquals(false, boolean0);
      assertEquals(23, tFloatFloatHashMap0.capacity());
  }

  //Test case number: 29
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.retainEntries(Lgnu/trove/procedure/TFloatFloatProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TFloatFloatHashMap$TFloatFloatHashIterator.value()F: root-Branch
   * 3 gnu.trove.map.hash.TFloatFloatHashMap$TFloatFloatHashIterator.advance()V: root-Branch
   * 4 gnu.trove.map.hash.TFloatFloatHashMap$TFloatFloatHashIterator.key()F: root-Branch
   * 5 gnu.trove.map.hash.TFloatFloatHashMap$TFloatFloatHashIterator.<init>(Lgnu/trove/map/hash/TFloatFloatHashMap;Lgnu/trove/map/hash/TFloatFloatHashMap;)V: root-Branch
   * 6 gnu.trove.map.hash.TFloatFloatHashMap.iterator()Lgnu/trove/iterator/TFloatFloatIterator;: root-Branch
   * 7 gnu.trove.map.hash.TFloatFloatHashMap.retainEntries(Lgnu/trove/procedure/TFloatFloatProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 8 gnu.trove.map.hash.TFloatFloatHashMap.retainEntries(Lgnu/trove/procedure/TFloatFloatProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   * 9 gnu.trove.map.hash.TFloatFloatHashMap.putAll(Lgnu/trove/map/TFloatFloatMap;)V: I15 Branch 43 IFEQ L243 - true
   * 10 gnu.trove.map.hash.TFloatFloatHashMap.putAll(Lgnu/trove/map/TFloatFloatMap;)V: I15 Branch 43 IFEQ L243 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(0, 830.1601F, (float) 0, (float) 0);
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(tFloatFloatHashMap0._set, tFloatFloatHashMap0._set);
      tFloatFloatHashMap0.putAll((TFloatFloatMap) tFloatFloatHashMap1);
      // Undeclared exception!
      try {
        tFloatFloatHashMap0.retainEntries((TFloatFloatProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.adjustValue(FF)Z: I9 Branch 71 IFGE L477 - true
   */

  @Test
  public void test30()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap((-1));
      tFloatFloatHashMap0.putIfAbsent(0.0F, 0.0F);
      boolean boolean0 = tFloatFloatHashMap0.adjustValue(0.0F, 0.0F);
      assertEquals(1, tFloatFloatHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 31
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.adjustOrPutValue(FFF)F: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.adjustOrPutValue(FFF)F: I58 Branch 73 IFEQ L502 - true
   */

//   @Test
//   public void test31()  throws Throwable  {
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap((-1));
//       tFloatFloatHashMap0.putIfAbsent(0.0F, 0.0F);
//       float float0 = tFloatFloatHashMap0.adjustOrPutValue(0.0F, (float) (-1), 0.0F);
//       assertEquals(false, tFloatFloatHashMap0.isEmpty());
//       assertEquals((-1.0F), float0, 0.01F);
//   }

  //Test case number: 32
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   */

  @Test
  public void test32()  throws Throwable  {
      float[] floatArray0 = new float[1];
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
      boolean boolean0 = tFloatFloatHashMap0.equals((Object) "{0.0=0.0}");
      assertEquals(false, boolean0);
      assertEquals(false, tFloatFloatHashMap0.isEmpty());
      assertEquals("{0.0=0.0}", tFloatFloatHashMap0.toString());
  }

  //Test case number: 33
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.<init>(IFFF)V: root-Branch
   * 3 gnu.trove.map.hash.TFloatFloatHashMap.<init>(I)V: root-Branch
   * 4 gnu.trove.map.hash.TFloatFloatHashMap.putIfAbsent(FF)F: I9 Branch 39 IFGE L205 - true
   * 5 gnu.trove.map.hash.TFloatFloatHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   */

  @Test
  public void test33()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap((-1));
      tFloatFloatHashMap0.putIfAbsent(0.0F, 0.0F);
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap((-1), (-1), (-1), (-1));
      boolean boolean0 = tFloatFloatHashMap0.equals((Object) tFloatFloatHashMap1);
      assertEquals("{0.0=0.0}", tFloatFloatHashMap0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 34
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - false
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.equals(Ljava/lang/Object;)Z: I89 Branch 79 IFEQ L1200 - false
   * 3 gnu.trove.map.hash.TFloatFloatHashMap.equals(Ljava/lang/Object;)Z: I93 Branch 80 IFEQ L1200 - true
   * 4 gnu.trove.map.hash.TFloatFloatHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - true
   * 5 gnu.trove.map.hash.TFloatFloatHashMap.get(F)F: I9 Branch 44 IFGE L253 - true
   * 6 gnu.trove.map.hash.TFloatFloatHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 7 gnu.trove.map.hash.TFloatFloatHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 8 gnu.trove.map.hash.TFloatFloatHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 9 gnu.trove.map.hash.TFloatFloatHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 10 gnu.trove.map.hash.TFloatFloatHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   */

  @Test
  public void test34()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[5] = 10.0F;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(floatArray0, tFloatFloatHashMap0._set);
      boolean boolean0 = tFloatFloatHashMap0.equals((Object) tFloatFloatHashMap1);
      assertEquals("{10.0=10.0, 0.0=0.0}", tFloatFloatHashMap0.toString());
      assertEquals(2, tFloatFloatHashMap0.size());
      assertTrue(tFloatFloatHashMap1.equals(tFloatFloatHashMap0));
      assertEquals("{10.0=0.0, 0.0=0.0}", tFloatFloatHashMap1.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 35
  /*
   * 11 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.equals(Ljava/lang/Object;)Z: I89 Branch 79 IFEQ L1200 - true
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.get(F)F: I9 Branch 44 IFGE L253 - true
   * 3 gnu.trove.map.hash.TFloatFloatHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 4 gnu.trove.map.hash.TFloatFloatHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 5 gnu.trove.map.hash.TFloatFloatHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 6 gnu.trove.map.hash.TFloatFloatHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 7 gnu.trove.map.hash.TFloatFloatHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 8 gnu.trove.map.hash.TFloatFloatHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 9 gnu.trove.map.hash.TFloatFloatHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - false
   * 10 gnu.trove.map.hash.TFloatFloatHashMap.equals(Ljava/lang/Object;)Z: I89 Branch 79 IFEQ L1200 - false
   * 11 gnu.trove.map.hash.TFloatFloatHashMap.equals(Ljava/lang/Object;)Z: I93 Branch 80 IFEQ L1200 - true
   */

  @Test
  public void test35()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[5] = 10.0F;
      floatArray0[9] = (-1100.2898F);
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(floatArray0, tFloatFloatHashMap0._set);
      boolean boolean0 = tFloatFloatHashMap0.equals((Object) tFloatFloatHashMap1);
      assertEquals("{10.0=0.0, -1100.2898=0.0, 0.0=10.0}", tFloatFloatHashMap1.toString());
      assertTrue(tFloatFloatHashMap1.equals(tFloatFloatHashMap0));
      assertEquals(true, boolean0);
      assertEquals(3, tFloatFloatHashMap1.size());
  }

  //Test case number: 36
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 3 gnu.trove.map.hash.TFloatFloatHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   * 4 gnu.trove.map.hash.TFloatFloatHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   */

  @Test
  public void test36()  throws Throwable  {
      float[] floatArray0 = new float[1];
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
      int int0 = tFloatFloatHashMap0.hashCode();
      assertEquals("{0.0=0.0}", tFloatFloatHashMap0.toString());
      assertEquals(0, int0);
      assertEquals(false, tFloatFloatHashMap0.isEmpty());
  }

  //Test case number: 37
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap$1.execute(FF)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TFloatFloatHashMap$1.<init>(Lgnu/trove/map/hash/TFloatFloatHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 3 gnu.trove.map.hash.TFloatFloatHashMap$1.execute(FF)Z: I4 Branch 115 IFEQ L1233 - false
   * 4 gnu.trove.map.hash.TFloatFloatHashMap.toString()Ljava/lang/String;: root-Branch
   * 5 gnu.trove.map.hash.TFloatFloatHashMap.forEachEntry(Lgnu/trove/procedure/TFloatFloatProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 6 gnu.trove.map.hash.TFloatFloatHashMap.forEachEntry(Lgnu/trove/procedure/TFloatFloatProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 7 gnu.trove.map.hash.TFloatFloatHashMap.forEachEntry(Lgnu/trove/procedure/TFloatFloatProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 8 gnu.trove.map.hash.TFloatFloatHashMap.forEachEntry(Lgnu/trove/procedure/TFloatFloatProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 9 gnu.trove.map.hash.TFloatFloatHashMap.forEachEntry(Lgnu/trove/procedure/TFloatFloatProcedure;)Z: I39 Branch 65 IFNE L422 - true
   */

  @Test
  public void test37()  throws Throwable  {
      float[] floatArray0 = new float[24];
      floatArray0[0] = (-13.318787F);
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
      String string0 = tFloatFloatHashMap0.toString();
      assertEquals("{-13.318787=-13.318787, 0.0=0.0}", string0);
      assertEquals(2, tFloatFloatHashMap0.size());
      assertNotNull(string0);
      assertEquals(67, tFloatFloatHashMap0.capacity());
  }

  //Test case number: 38
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TFloatFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 2 gnu.trove.map.hash.TFloatFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 3 gnu.trove.map.hash.TFloatFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 4 gnu.trove.map.hash.TFloatFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 5 gnu.trove.map.hash.TFloatFloatHashMap.setUp(I)I: root-Branch
   * 6 gnu.trove.map.hash.TFloatFloatHashMap.put(FF)F: root-Branch
   * 7 gnu.trove.map.hash.TFloatFloatHashMap.doPut(FFI)F: I12 Branch 40 IFGE L214 - true
   * 8 gnu.trove.map.hash.TFloatFloatHashMap.doPut(FFI)F: I12 Branch 40 IFGE L214 - false
   * 9 gnu.trove.map.hash.TFloatFloatHashMap.doPut(FFI)F: I41 Branch 41 IFEQ L221 - true
   * 10 gnu.trove.map.hash.TFloatFloatHashMap.doPut(FFI)F: I41 Branch 41 IFEQ L221 - false
   * 11 gnu.trove.map.hash.TFloatFloatHashMap.<init>([F[F)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 12 gnu.trove.map.hash.TFloatFloatHashMap.<init>([F[F)V: I24 Branch 33 IF_ICMPGE L119 - false
   */

  @Test
  public void test38()  throws Throwable  {
      float[] floatArray0 = new float[4];
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(133853);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tFloatFloatHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals("{0.0=0.0}", tFloatFloatHashMap0.toString());
      assertEquals(11, tFloatFloatHashMap0.capacity());
      assertEquals(1, tFloatFloatHashMap0.size());
      assertEquals(false, tFloatFloatHashMap0.isEmpty());
  }
}
