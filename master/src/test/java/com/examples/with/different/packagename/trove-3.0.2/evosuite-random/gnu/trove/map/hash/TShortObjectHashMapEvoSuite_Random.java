/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TObjectFunction;
import gnu.trove.map.TShortObjectMap;
import gnu.trove.map.hash.TShortObjectHashMap;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.URI;
import java.util.AbstractMap;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortObjectHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-1749);
      int int1 = 0;
      float float0 = 0.0F;
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>(int1, float0);
      short short0 = (short) (-1);
      tShortObjectHashMap0.putIfAbsent(short0, (Integer) int1);
      int int2 = 1976;
      TShortObjectHashMap<Object> tShortObjectHashMap1 = new TShortObjectHashMap<Object>(int2);
      int int3 = (-1552);
      short short1 = (short)169;
      TShortObjectHashMap<Object> tShortObjectHashMap2 = new TShortObjectHashMap<Object>(int3, (float) int0, short1);
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-962);
      TShortObjectHashMap<TShortObjectHashMap<Short>> tShortObjectHashMap0 = new TShortObjectHashMap<TShortObjectHashMap<Short>>(int0);
      short short0 = (short)0;
      tShortObjectHashMap0.remove(short0);
      int int1 = (-496);
      TShortObjectHashMap<TShortObjectHashMap<Short>> tShortObjectHashMap1 = new TShortObjectHashMap<TShortObjectHashMap<Short>>(int1, int1);
      tShortObjectHashMap1.toString();
      String string0 = "}so%/^5iatullxQX/w";
      // Undeclared exception!
      try {
        URI.create(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 0: }so%/^5iatullxQX/w
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-1128);
      float float0 = (-1638.414F);
      short short0 = (short) (-1364);
      TShortObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, String>> tShortObjectHashMap0 = new TShortObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, String>>(int0, float0, short0);
      tShortObjectHashMap0.size();
      int int1 = 0;
      short short1 = (short)1;
      TShortObjectHashMap<String> tShortObjectHashMap1 = new TShortObjectHashMap<String>(int1, (float) int1, short1);
      tShortObjectHashMap1.clear();
      short short2 = (short)422;
      TShortObjectHashMap<String> tShortObjectHashMap2 = new TShortObjectHashMap<String>(int1, (float) int1, short2);
      TShortObjectHashMap<Integer> tShortObjectHashMap3 = new TShortObjectHashMap<Integer>();
      AbstractMap.SimpleEntry<TShortObjectHashMap<String>, Short> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<TShortObjectHashMap<String>, Short>(tShortObjectHashMap2, (Short) short2);
      abstractMap_SimpleEntry0.getKey();
      int int2 = 9677;
      TShortObjectHashMap<Short> tShortObjectHashMap4 = new TShortObjectHashMap<Short>(int2, int2);
      int int3 = tShortObjectHashMap4.size();
      TShortObjectHashMap<Short> tShortObjectHashMap5 = new TShortObjectHashMap<Short>();
      short short3 = (short)1;
      tShortObjectHashMap4.putIfAbsent(short3, (Short) short2);
      tShortObjectHashMap4.compact();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream((InputStream) pipedInputStream0, int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
      }
  }

//   @Test
//   public void test3()  throws Throwable  {
//       int int0 = 8;
//       TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>();
//       short[] shortArray0 = new short[10];
//       short short0 = (short)0;
//       shortArray0[0] = short0;
//       short short1 = (short)21189;
//       shortArray0[1] = short1;
//       short short2 = (short)0;
//       shortArray0[2] = short2;
//       short short3 = (short) (-1635);
//       shortArray0[3] = short3;
//       short short4 = (short)6;
//       shortArray0[4] = short4;
//       short short5 = (short)1;
//       shortArray0[5] = short5;
//       short short6 = (short) (-1998);
//       shortArray0[6] = short6;
//       short short7 = (short)210;
//       shortArray0[7] = short7;
//       short short8 = (short) (-1);
//       shortArray0[8] = short8;
//       short short9 = (short)1050;
//       shortArray0[9] = short9;
//       tShortObjectHashMap0._set = shortArray0;
//       float float0 = (-1.0F);
//       short short10 = (short)0;
//       TShortObjectHashMap<String> tShortObjectHashMap1 = new TShortObjectHashMap<String>(int0, int0);
//       int int1 = tShortObjectHashMap1.hashCode();
//       assertEquals(0, int1);
//       
//       TShortObjectHashMap<String> tShortObjectHashMap2 = new TShortObjectHashMap<String>(int0, float0, short10);
//       assertEquals(3, tShortObjectHashMap2.capacity());
//       assertEquals(0, tShortObjectHashMap2.getNoEntryKey());
//   }

//   @Test
//   public void test4()  throws Throwable  {
//       int int0 = (-1);
//       float float0 = 26.336407F;
//       short short0 = (short)21915;
//       TShortObjectHashMap<TShortObjectHashMap<Short>> tShortObjectHashMap0 = new TShortObjectHashMap<TShortObjectHashMap<Short>>(int0, float0, short0);
//       boolean boolean0 = true;
//       tShortObjectHashMap0.reenableAutoCompaction(boolean0);
//       assertEquals(21915, tShortObjectHashMap0.getNoEntryKey());
//   }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 0;
      float float0 = 10.0F;
      TShortObjectHashMap<String> tShortObjectHashMap0 = new TShortObjectHashMap<String>(int0, float0);
      TObjectFunction<String, String> tObjectFunction0 = null;
      tShortObjectHashMap0.transformValues(tObjectFunction0);
      short short0 = (short)1269;
      TShortObjectHashMap<Short> tShortObjectHashMap1 = new TShortObjectHashMap<Short>(int0, float0, short0);
      TShortObjectMap<Short> tShortObjectMap0 = null;
      // Undeclared exception!
      try {
        tShortObjectHashMap1.putAll(tShortObjectMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-1021);
      int int1 = (-677);
      float float0 = 744.8251F;
      short short0 = (short) (-1626);
      float float1 = (-1.0F);
      short short1 = (short)2411;
      TShortObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Integer>> tShortObjectHashMap0 = new TShortObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Integer>>((int) short0, float1, short1);
      float float2 = (-1.0F);
      // Undeclared exception!
      try {
        tShortObjectHashMap0.setAutoCompactionFactor(float2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1.0
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-1463);
      float float0 = 1.0F;
      short short0 = (short)12;
      TShortObjectHashMap<Object> tShortObjectHashMap0 = new TShortObjectHashMap<Object>(int0, float0, short0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }
}
