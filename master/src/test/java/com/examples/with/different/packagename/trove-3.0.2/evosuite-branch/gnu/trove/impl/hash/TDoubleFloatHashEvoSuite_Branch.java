/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.hash.TDoubleFloatHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleFloatHashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleFloatHash.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   * 2 gnu.trove.impl.hash.TDoubleFloatHash.setUp(I)I: root-Branch
   * 3 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyAt(ID)V: root-Branch
   * 4 gnu.trove.impl.hash.TDoubleFloatHash.<init>(I)V: root-Branch
   * 5 gnu.trove.impl.hash.TDoubleFloatHash.insertKey(D)I: I30 Branch 13 IFNE L279 - true
   * 6 gnu.trove.impl.hash.TDoubleFloatHash.insertKey(D)I: I30 Branch 13 IFNE L279 - false
   * 7 gnu.trove.impl.hash.TDoubleFloatHash.insertKey(D)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 8 gnu.trove.impl.hash.TDoubleFloatHash.insertKey(D)I: I57 Branch 15 IFNE L286 - false
   */

//   @Test
//   public void test0()  throws Throwable  {
//       double[] doubleArray0 = new double[10];
//       float[] floatArray0 = new float[5];
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
//       ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
//       BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) byteArrayOutputStream0);
//       ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) bufferedOutputStream0);
//       tDoubleFloatHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
//       assertEquals(0.0F, tDoubleFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(23, tDoubleFloatHashMap0.capacity());
//       assertEquals(0.0, tDoubleFloatHashMap0.getNoEntryKey(), 0.01D);
//       assertEquals(1, tDoubleFloatHashMap0.size());
//       assertEquals("{0.0=0.0}", tDoubleFloatHashMap0.toString());
//   }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TDoubleFloatHash.getNoEntryKey()D: root-Branch
   */

//   @Test
//   public void test1()  throws Throwable  {
//       double[] doubleArray0 = new double[10];
//       float[] floatArray0 = new float[5];
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
//       double double0 = tDoubleFloatHashMap0.getNoEntryKey();
//       assertEquals(23, tDoubleFloatHashMap0.capacity());
//       assertEquals("{0.0=0.0}", tDoubleFloatHashMap0.toString());
//       assertEquals(0.0F, tDoubleFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(0.0, double0, 0.01D);
//       assertEquals(1, tDoubleFloatHashMap0.size());
//   }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TDoubleFloatHash.getNoEntryValue()F: root-Branch
   */

//   @Test
//   public void test2()  throws Throwable  {
//       double[] doubleArray0 = new double[5];
//       float[] floatArray0 = new float[5];
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
//       float float0 = tDoubleFloatHashMap0.getNoEntryValue();
//       assertEquals("{0.0=0.0}", tDoubleFloatHashMap0.toString());
//       assertEquals(11, tDoubleFloatHashMap0.capacity());
//       assertEquals(0.0, tDoubleFloatHashMap0.getNoEntryKey(), 0.01D);
//       assertEquals(1, tDoubleFloatHashMap0.size());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TDoubleFloatHash.<init>(IFDF)V: root-Branch
   */

//   @Test
//   public void test3()  throws Throwable  {
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1592), (float) (-1592), (double) (-1592), (-33.64188F));
//       assertEquals((-1592.0), tDoubleFloatHashMap0.getNoEntryKey(), 0.01D);
//       assertEquals((-33.64188F), tDoubleFloatHashMap0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 4
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleFloatHash.contains(D)Z: I5 Branch 1 IFLT L178 - true
   * 2 gnu.trove.impl.hash.TDoubleFloatHash.index(D)I: I37 Branch 5 IFNE L228 - false
   * 3 gnu.trove.impl.hash.TDoubleFloatHash.<init>()V: root-Branch
   */

//   @Test
//   public void test4()  throws Throwable  {
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
//       boolean boolean0 = tDoubleFloatHashMap0.contains((-1141.5991204346371));
//       assertEquals(false, boolean0);
//       assertEquals(0.0, tDoubleFloatHashMap0.getNoEntryKey(), 0.01D);
//       assertEquals(23, tDoubleFloatHashMap0.capacity());
//       assertEquals(0.0F, tDoubleFloatHashMap0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 5
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleFloatHash.contains(D)Z: I5 Branch 1 IFLT L178 - false
   * 2 gnu.trove.impl.hash.TDoubleFloatHash.index(D)I: I37 Branch 5 IFNE L228 - true
   * 3 gnu.trove.impl.hash.TDoubleFloatHash.index(D)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 4 gnu.trove.impl.hash.TDoubleFloatHash.index(D)I: I52 Branch 7 IFNE L231 - false
   */

//   @Test
//   public void test5()  throws Throwable  {
//       double[] doubleArray0 = new double[5];
//       float[] floatArray0 = new float[5];
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
//       boolean boolean0 = tDoubleFloatHashMap0.contains(0.0);
//       assertEquals(0.0F, tDoubleFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(true, boolean0);
//       assertEquals(1, tDoubleFloatHashMap0.size());
//       assertEquals("{0.0=0.0}", tDoubleFloatHashMap0.toString());
//       assertEquals(0.0, tDoubleFloatHashMap0.getNoEntryKey(), 0.01D);
//   }

  //Test case number: 6
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleFloatHash.forEach(Lgnu/trove/procedure/TDoubleProcedure;)Z: I18 Branch 2 IFLE L192 - true
   * 2 gnu.trove.impl.hash.TDoubleFloatHash.forEach(Lgnu/trove/procedure/TDoubleProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TDoubleFloatHash.forEach(Lgnu/trove/procedure/TDoubleProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   * 4 gnu.trove.impl.hash.TDoubleFloatHash.<init>(IF)V: root-Branch
   */

//   @Test
//   public void test6()  throws Throwable  {
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(Integer.MAX_VALUE, Integer.MAX_VALUE);
//       boolean boolean0 = tDoubleFloatHashMap0.forEach((TDoubleProcedure) null);
//       assertEquals(true, boolean0);
//       assertEquals(0.0, tDoubleFloatHashMap0.getNoEntryKey(), 0.01D);
//       assertEquals(0.0F, tDoubleFloatHashMap0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 7
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleFloatHash.forEach(Lgnu/trove/procedure/TDoubleProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - false
   * 2 gnu.trove.impl.hash.TDoubleFloatHash.forEach(Lgnu/trove/procedure/TDoubleProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TDoubleFloatHash.forEach(Lgnu/trove/procedure/TDoubleProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

  @Test
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      float[] floatArray0 = new float[12];
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      // Undeclared exception!
      try {
        tDoubleFloatHashMap0.forEach((TDoubleProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 8
  /*
   * 18 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleFloatHash.indexRehashed(DIIB)I: I62 Branch 11 IF_ICMPEQ L254 - true
   * 2 gnu.trove.impl.hash.TDoubleFloatHash.indexRehashed(DIIB)I: I46 Branch 9 IFNE L250 - false
   * 3 gnu.trove.impl.hash.TDoubleFloatHash.removeAt(I)V: root-Branch
   * 4 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 5 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I45 Branch 18 IFGE L310 - false
   * 6 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I62 Branch 19 IFNE L316 - true
   * 7 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I62 Branch 19 IFNE L316 - false
   * 8 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 9 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 10 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I104 Branch 22 IFNE L327 - false
   * 11 gnu.trove.impl.hash.TDoubleFloatHash.insertKey(D)I: I57 Branch 15 IFNE L286 - true
   * 12 gnu.trove.impl.hash.TDoubleFloatHash.index(D)I: I52 Branch 7 IFNE L231 - true
   * 13 gnu.trove.impl.hash.TDoubleFloatHash.indexRehashed(DIIB)I: I29 Branch 8 IFGE L245 - true
   * 14 gnu.trove.impl.hash.TDoubleFloatHash.indexRehashed(DIIB)I: I29 Branch 8 IFGE L245 - false
   * 15 gnu.trove.impl.hash.TDoubleFloatHash.indexRehashed(DIIB)I: I46 Branch 9 IFNE L250 - true
   * 16 gnu.trove.impl.hash.TDoubleFloatHash.indexRehashed(DIIB)I: I59 Branch 10 IFNE L254 - false
   * 17 gnu.trove.impl.hash.TDoubleFloatHash.indexRehashed(DIIB)I: I62 Branch 11 IF_ICMPEQ L254 - false
   * 18 gnu.trove.impl.hash.TDoubleFloatHash.indexRehashed(DIIB)I: I71 Branch 12 IF_ICMPNE L256 - true
   */

//   @Test
//   public void test8()  throws Throwable  {
//       double[] doubleArray0 = new double[5];
//       doubleArray0[0] = (-1.0);
//       float[] floatArray0 = new float[15];
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
//       assertEquals(2, tDoubleFloatHashMap0.size());
//       
//       tDoubleFloatHashMap0.remove((double) 0.0F);
//       float float0 = tDoubleFloatHashMap0.get(0.0);
//       assertEquals(1, tDoubleFloatHashMap0.size());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 9
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleFloatHash.indexRehashed(DIIB)I: I71 Branch 12 IF_ICMPNE L256 - false
   * 2 gnu.trove.impl.hash.TDoubleFloatHash.contains(D)Z: I5 Branch 1 IFLT L178 - true
   * 3 gnu.trove.impl.hash.TDoubleFloatHash.index(D)I: I46 Branch 6 IF_ICMPNE L231 - true
   * 4 gnu.trove.impl.hash.TDoubleFloatHash.indexRehashed(DIIB)I: I29 Branch 8 IFGE L245 - true
   * 5 gnu.trove.impl.hash.TDoubleFloatHash.indexRehashed(DIIB)I: I59 Branch 10 IFNE L254 - true
   * 6 gnu.trove.impl.hash.TDoubleFloatHash.indexRehashed(DIIB)I: I71 Branch 12 IF_ICMPNE L256 - true
   */

//   @Test
//   public void test9()  throws Throwable  {
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
//       tDoubleFloatHashMap0.trimToSize();
//       byte[] byteArray0 = new byte[4];
//       byteArray0[0] = (byte)64;
//       byteArray0[1] = (byte)1;
//       byteArray0[2] = (byte)64;
//       tDoubleFloatHashMap0._states = byteArray0;
//       boolean boolean0 = tDoubleFloatHashMap0.contains((-1141.5991204346371));
//       assertEquals(false, boolean0);
//       assertEquals(0.0F, tDoubleFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(0.0, tDoubleFloatHashMap0.getNoEntryKey(), 0.01D);
//   }

  //Test case number: 10
  /*
   * 5 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 2 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 3 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I67 Branch 20 IF_ICMPEQ L317 - false
   * 4 gnu.trove.impl.hash.TDoubleFloatHash.insertKey(D)I: I57 Branch 15 IFNE L286 - false
   * 5 gnu.trove.impl.hash.TDoubleFloatHash.insertKey(D)I: I50 Branch 14 IF_ICMPNE L286 - true
   */

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      float[] floatArray0 = new float[12];
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      tDoubleFloatHashMap0.remove((double) 0.0F);
      assertEquals(true, tDoubleFloatHashMap0.isEmpty());
      
      tDoubleFloatHashMap0.adjustOrPutValue((double) 0.0F, 0.0F, 0.0F);
      assertEquals("{0.0=0.0}", tDoubleFloatHashMap0.toString());
      assertEquals(1, tDoubleFloatHashMap0.size());
  }

  //Test case number: 11
  /*
   * 24 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I31 Branch 17 IF_ICMPNE L306 - true
   * 2 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I45 Branch 18 IFGE L310 - true
   * 3 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 4 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I116 Branch 23 IF_ICMPNE L332 - true
   * 5 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyAt(ID)V: root-Branch
   * 6 gnu.trove.impl.hash.TDoubleFloatHash.removeAt(I)V: root-Branch
   * 7 gnu.trove.impl.hash.TDoubleFloatHash.<init>(I)V: root-Branch
   * 8 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 9 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 10 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I62 Branch 19 IFNE L316 - false
   * 11 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 12 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I67 Branch 20 IF_ICMPEQ L317 - false
   * 13 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I104 Branch 22 IFNE L327 - false
   * 14 gnu.trove.impl.hash.TDoubleFloatHash.insertKey(D)I: I30 Branch 13 IFNE L279 - false
   * 15 gnu.trove.impl.hash.TDoubleFloatHash.insertKey(D)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 16 gnu.trove.impl.hash.TDoubleFloatHash.insertKey(D)I: I57 Branch 15 IFNE L286 - true
   * 17 gnu.trove.impl.hash.TDoubleFloatHash.index(D)I: I37 Branch 5 IFNE L228 - true
   * 18 gnu.trove.impl.hash.TDoubleFloatHash.index(D)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 19 gnu.trove.impl.hash.TDoubleFloatHash.index(D)I: I52 Branch 7 IFNE L231 - true
   * 20 gnu.trove.impl.hash.TDoubleFloatHash.index(D)I: I52 Branch 7 IFNE L231 - false
   * 21 gnu.trove.impl.hash.TDoubleFloatHash.indexRehashed(DIIB)I: I29 Branch 8 IFGE L245 - false
   * 22 gnu.trove.impl.hash.TDoubleFloatHash.indexRehashed(DIIB)I: I46 Branch 9 IFNE L250 - true
   * 23 gnu.trove.impl.hash.TDoubleFloatHash.indexRehashed(DIIB)I: I59 Branch 10 IFNE L254 - false
   * 24 gnu.trove.impl.hash.TDoubleFloatHash.indexRehashed(DIIB)I: I62 Branch 11 IF_ICMPEQ L254 - false
   */

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      float[] floatArray0 = new float[12];
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      tDoubleFloatHashMap0.remove((double) 0.0F);
      tDoubleFloatHashMap0.remove((-1.0));
      tDoubleFloatHashMap0.adjustOrPutValue((double) 0.0F, 0.0F, 0.0F);
      assertEquals(1, tDoubleFloatHashMap0.size());
      assertEquals("{0.0=0.0}", tDoubleFloatHashMap0.toString());
  }

  //Test case number: 12
  /*
   * 14 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I104 Branch 22 IFNE L327 - true
   * 2 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I116 Branch 23 IF_ICMPNE L332 - false
   * 3 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I121 Branch 24 IF_ICMPEQ L336 - true
   * 4 gnu.trove.impl.hash.TDoubleFloatHash.setUp(I)I: root-Branch
   * 5 gnu.trove.impl.hash.TDoubleFloatHash.<init>()V: root-Branch
   * 6 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 7 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I45 Branch 18 IFGE L310 - true
   * 8 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I45 Branch 18 IFGE L310 - false
   * 9 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I62 Branch 19 IFNE L316 - true
   * 10 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 11 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 12 gnu.trove.impl.hash.TDoubleFloatHash.insertKeyRehash(DIIB)I: I116 Branch 23 IF_ICMPNE L332 - true
   * 13 gnu.trove.impl.hash.TDoubleFloatHash.insertKey(D)I: I30 Branch 13 IFNE L279 - true
   * 14 gnu.trove.impl.hash.TDoubleFloatHash.insertKey(D)I: I50 Branch 14 IF_ICMPNE L286 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      tDoubleFloatHashMap0.trimToSize();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)64;
      tDoubleFloatHashMap0._states = byteArray0;
      // Undeclared exception!
      try {
        tDoubleFloatHashMap0.put((double) (byte)1, (float) (byte)1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No free or removed slots available. Key set full?!!
         //
      }
  }
}
