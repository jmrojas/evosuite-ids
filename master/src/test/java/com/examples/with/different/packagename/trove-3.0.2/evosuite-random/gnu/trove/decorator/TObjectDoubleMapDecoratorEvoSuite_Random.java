/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TObjectDoubleMapDecorator;
import gnu.trove.map.TObjectDoubleMap;
import gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap;
import gnu.trove.map.hash.TObjectDoubleHashMap;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectDoubleMapDecoratorEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      int int0 = (-1651);
      TObjectDoubleCustomHashMap<AbstractMap.SimpleEntry<Integer, Double>> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<AbstractMap.SimpleEntry<Integer, Double>>((HashingStrategy<? super AbstractMap.SimpleEntry<Integer, Double>>) identityHashingStrategy0, int0);
      String string0 = "";
      Locale locale0 = new Locale(string0);
      String string1 = locale0.getDisplayName();
      identityHashingStrategy0.computeHashCode((Object) string1);
      TObjectDoubleMapDecorator<AbstractMap.SimpleEntry<Integer, Double>> tObjectDoubleMapDecorator0 = new TObjectDoubleMapDecorator<AbstractMap.SimpleEntry<Integer, Double>>((TObjectDoubleMap<AbstractMap.SimpleEntry<Integer, Double>>) tObjectDoubleCustomHashMap0);
      String string2 = tObjectDoubleCustomHashMap0.toString();
      tObjectDoubleMapDecorator0.size();
      double double0 = 60.45945073964833;
      Double double1 = new Double(double0);
      String string3 = "";
      AbstractMap.SimpleImmutableEntry<Double, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, String>(double1, string3);
      String string4 = File.separator;
      IdentityHashingStrategy<Integer> identityHashingStrategy1 = new IdentityHashingStrategy<Integer>();
      URI uRI0 = null;
      try {
        uRI0 = new URI(string2, string0, string4);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: {}:#/
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TObjectDoubleHashMap<String> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<String>();
      TObjectDoubleMapDecorator<String> tObjectDoubleMapDecorator0 = new TObjectDoubleMapDecorator<String>((TObjectDoubleMap<String>) tObjectDoubleHashMap0);
      String string0 = "";
      tObjectDoubleHashMap0.keys();
      String string1 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://?#
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TObjectDoubleMapDecorator<Double> tObjectDoubleMapDecorator0 = new TObjectDoubleMapDecorator<Double>();
      String string0 = "=5%&:{BI)X$<J75!=\\#";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: =5%&:{BI)X$<J75!=\\#://[=5%&:{BI)X$<J75!=\\#]=5%25&:%7BBI)X$%3CJ75!=%5C%23#=5%25&:%7BBI)X$%3CJ75!=%5C%23
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TObjectDoubleMapDecorator<TObjectDoubleHashMap<Integer>> tObjectDoubleMapDecorator0 = new TObjectDoubleMapDecorator<TObjectDoubleHashMap<Integer>>();
      Locale locale0 = Locale.GERMAN;
      String string0 = "Mk3&";
      // Undeclared exception!
      try {
        locale0.getUnicodeLocaleType(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: Mk3&
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TObjectDoubleMapDecorator<Double> tObjectDoubleMapDecorator0 = new TObjectDoubleMapDecorator<Double>();
      double double0 = 0.0;
      Double double1 = new Double(double0);
      // Undeclared exception!
      try {
        tObjectDoubleMapDecorator0.put(double1, double1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TObjectDoubleMapDecorator<TObjectDoubleHashMap<Object>> tObjectDoubleMapDecorator0 = new TObjectDoubleMapDecorator<TObjectDoubleHashMap<Object>>();
          Locale locale0 = Locale.CANADA_FRENCH;
          String string0 = "fU=v`!%4>";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
      TObjectDoubleMapDecorator<Integer> tObjectDoubleMapDecorator0 = new TObjectDoubleMapDecorator<Integer>();
      Locale locale0 = Locale.ROOT;
      char char0 = '.';
      // Undeclared exception!
      try {
        locale0.getExtension(char0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed extension key: .
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TObjectDoubleMapDecorator<Object> tObjectDoubleMapDecorator0 = new TObjectDoubleMapDecorator<Object>();
      // Undeclared exception!
      try {
        tObjectDoubleMapDecorator0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TObjectDoubleMapDecorator<Object> tObjectDoubleMapDecorator0 = new TObjectDoubleMapDecorator<Object>();
      tObjectDoubleMapDecorator0.keySet();
      TObjectDoubleMapDecorator<Integer> tObjectDoubleMapDecorator1 = new TObjectDoubleMapDecorator<Integer>();
      TObjectDoubleMapDecorator<Double> tObjectDoubleMapDecorator2 = new TObjectDoubleMapDecorator<Double>();
      tObjectDoubleMapDecorator2.values();
      IdentityHashingStrategy<TObjectDoubleCustomHashMap<Double>> identityHashingStrategy0 = new IdentityHashingStrategy<TObjectDoubleCustomHashMap<Double>>();
      int int0 = (-425);
      String string0 = "";
      Locale locale0 = new Locale(string0);
      String string1 = locale0.getISO3Language();
      Double double0 = new Double((double) int0);
      // Undeclared exception!
      try {
        tObjectDoubleMapDecorator0.put((Object) string1, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TObjectDoubleMapDecorator<Object> tObjectDoubleMapDecorator0 = new TObjectDoubleMapDecorator<Object>();
      int int0 = 0;
      float float0 = 1.0F;
      Object object0 = null;
      Double double0 = new Double((double) float0);
      AbstractMap.SimpleImmutableEntry<Object, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Double>(object0, double0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>((Map.Entry<?, ?>) abstractMap_SimpleImmutableEntry0);
      abstractMap_SimpleEntry0.setValue(object0);
      TObjectDoubleMap<AbstractMap.SimpleImmutableEntry<Object, Double>> tObjectDoubleMap0 = null;
      TObjectDoubleMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Double>> tObjectDoubleMapDecorator1 = new TObjectDoubleMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Double>>(tObjectDoubleMap0);
      TObjectDoubleHashMap<TObjectDoubleHashMap<Object>> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<TObjectDoubleHashMap<Object>>(int0, float0);
      // Undeclared exception!
      try {
        tObjectDoubleMapDecorator0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TObjectDoubleMapDecorator<AbstractMap.SimpleEntry<Integer, Integer>> tObjectDoubleMapDecorator0 = new TObjectDoubleMapDecorator<AbstractMap.SimpleEntry<Integer, Integer>>();
      // Undeclared exception!
      try {
        tObjectDoubleMapDecorator0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
