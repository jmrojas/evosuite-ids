/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TCharFunction;
import gnu.trove.map.TIntCharMap;
import gnu.trove.map.hash.TIntCharHashMap;
import gnu.trove.procedure.TCharProcedure;
import gnu.trove.procedure.TIntCharProcedure;
import gnu.trove.procedure.TIntProcedure;
import gnu.trove.set.TIntSet;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntCharHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.forEachKey(Lgnu/trove/procedure/TIntProcedure;)Z: root-Branch
   * 2 gnu.trove.map.hash.TIntCharHashMap.<init>(IF)V: root-Branch
   * 3 gnu.trove.map.hash.TIntCharHashMap.setUp(I)I: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap((int) '/', (float) '/');
      boolean boolean0 = tIntCharHashMap0.forEachKey((TIntProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.keySet()Lgnu/trove/set/TIntSet;: root-Branch
   * 2 gnu.trove.map.hash.TIntCharHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TIntCharHashMap;)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap((-1065), (float) 'i');
      TIntSet tIntSet0 = tIntCharHashMap0.keySet();
      assertEquals(0, tIntSet0.size());
  }

  //Test case number: 2
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TIntCharHashMap.<init>(I)V: root-Branch
   * 3 gnu.trove.map.hash.TIntCharHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 4 gnu.trove.map.hash.TIntCharHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 5 gnu.trove.map.hash.TIntCharHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 6 gnu.trove.map.hash.TIntCharHashMap.remove(I)C: I14 Branch 46 IFLT L276 - false
   * 7 gnu.trove.map.hash.TIntCharHashMap.put(IC)C: root-Branch
   * 8 gnu.trove.map.hash.TIntCharHashMap.doPut(ICI)C: I12 Branch 40 IFGE L214 - true
   * 9 gnu.trove.map.hash.TIntCharHashMap.doPut(ICI)C: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test2()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(0);
      tIntCharHashMap0.put(0, '?');
      assertEquals(1, tIntCharHashMap0.size());
      
      char char0 = tIntCharHashMap0.remove((int) '\u0000');
      assertEquals('?', char0);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.increment(I)Z: root-Branch
   * 2 gnu.trove.map.hash.TIntCharHashMap.adjustValue(IC)Z: I9 Branch 71 IFGE L477 - false
   */

  @Test
  public void test3()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap((int) '/', (float) '/');
      boolean boolean0 = tIntCharHashMap0.increment((-1));
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.containsKey(I)Z: root-Branch
   * 2 gnu.trove.map.hash.TIntCharHashMap.<init>(IFIC)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap((-5), (float) (-5), (-5), '|');
      boolean boolean0 = tIntCharHashMap0.containsKey((-5));
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.clear()V: root-Branch
   * 2 gnu.trove.map.hash.TIntCharHashMap.<init>()V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      tIntCharHashMap0.clear();
      assertEquals(23, tIntCharHashMap0.capacity());
      assertEquals("{}", tIntCharHashMap0.toString());
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.valueCollection()Lgnu/trove/TCharCollection;: root-Branch
   * 2 gnu.trove.map.hash.TIntCharHashMap$TValueView.<init>(Lgnu/trove/map/hash/TIntCharHashMap;)V: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      tIntCharHashMap0.valueCollection();
      assertEquals(23, tIntCharHashMap0.capacity());
  }

  //Test case number: 7
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.<init>(Lgnu/trove/map/TIntCharMap;)V: I10 Branch 34 IFEQ L133 - false
   * 2 gnu.trove.map.hash.TIntCharHashMap.<init>(Lgnu/trove/map/TIntCharMap;)V: I38 Branch 35 IFEQ L139 - false
   * 3 gnu.trove.map.hash.TIntCharHashMap.<init>(Lgnu/trove/map/TIntCharMap;)V: I50 Branch 36 IFEQ L143 - false
   * 4 gnu.trove.map.hash.TIntCharHashMap$TIntCharHashIterator.<init>(Lgnu/trove/map/hash/TIntCharHashMap;Lgnu/trove/map/hash/TIntCharHashMap;)V: root-Branch
   * 5 gnu.trove.map.hash.TIntCharHashMap.iterator()Lgnu/trove/iterator/TIntCharIterator;: root-Branch
   * 6 gnu.trove.map.hash.TIntCharHashMap.putAll(Lgnu/trove/map/TIntCharMap;)V: I15 Branch 43 IFEQ L243 - true
   */

  @Test
  public void test7()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(374, (float) 374, 374, '3');
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap((TIntCharMap) tIntCharHashMap0);
      assertEquals('3', tIntCharHashMap1.getNoEntryValue());
      assertEquals(374, tIntCharHashMap1.getNoEntryKey());
      assertEquals(3, tIntCharHashMap1.capacity());
  }

  //Test case number: 8
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.<init>(Lgnu/trove/map/TIntCharMap;)V: I38 Branch 35 IFEQ L139 - true
   * 2 gnu.trove.map.hash.TIntCharHashMap.<init>(Lgnu/trove/map/TIntCharMap;)V: I50 Branch 36 IFEQ L143 - true
   * 3 gnu.trove.map.hash.TIntCharHashMap.<init>(Lgnu/trove/map/TIntCharMap;)V: I10 Branch 34 IFEQ L133 - false
   */

  @Test
  public void test8()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(374);
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap((TIntCharMap) tIntCharHashMap0);
      assertEquals(23, tIntCharHashMap1.capacity());
      assertEquals(0, tIntCharHashMap1.getNoEntryKey());
  }

  //Test case number: 9
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.putIfAbsent(IC)C: I9 Branch 39 IFGE L205 - false
   * 2 gnu.trove.map.hash.TIntCharHashMap.doPut(ICI)C: I12 Branch 40 IFGE L214 - false
   * 3 gnu.trove.map.hash.TIntCharHashMap.doPut(ICI)C: I41 Branch 41 IFEQ L221 - true
   * 4 gnu.trove.map.hash.TIntCharHashMap.<init>([I[C)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 5 gnu.trove.map.hash.TIntCharHashMap.<init>([I[C)V: I24 Branch 33 IF_ICMPGE L119 - false
   */

  @Test
  public void test9()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 1744;
      char[] charArray0 = new char[4];
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      char char0 = tIntCharHashMap0.putIfAbsent(1744, 'e');
      assertEquals(17, tIntCharHashMap0.capacity());
      assertEquals("{1744=\u0000, 0=\u0000}", tIntCharHashMap0.toString());
      assertEquals(2, tIntCharHashMap0.size());
      assertEquals('\u0000', char0);
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - false
   * 2 gnu.trove.map.hash.TIntCharHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   */

  @Test
  public void test10()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      HashMap<Integer, Character> hashMap0 = new HashMap<Integer, Character>();
      Integer integer0 = new Integer((-827));
      Character character0 = Character.valueOf('');
      hashMap0.put(integer0, character0);
      tIntCharHashMap0.putAll((Map<? extends Integer, ? extends Character>) hashMap0);
      assertEquals(1, tIntCharHashMap0.size());
      assertEquals("{-827=}", tIntCharHashMap0.toString());
  }

  //Test case number: 11
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.get(I)C: I9 Branch 44 IFGE L253 - true
   * 2 gnu.trove.map.hash.TIntCharHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 3 gnu.trove.map.hash.TIntCharHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 4 gnu.trove.map.hash.TIntCharHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 5 gnu.trove.map.hash.TIntCharHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 6 gnu.trove.map.hash.TIntCharHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 7 gnu.trove.map.hash.TIntCharHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 8 gnu.trove.map.hash.TIntCharHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - true
   * 9 gnu.trove.map.hash.TIntCharHashMap.adjustOrPutValue(ICC)C: I9 Branch 72 IFGE L491 - true
   * 10 gnu.trove.map.hash.TIntCharHashMap.adjustOrPutValue(ICC)C: I59 Branch 73 IFEQ L502 - false
   */

  @Test
  public void test11()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      tIntCharHashMap0.adjustOrPutValue((int) '[', 'm', '\u0003');
      boolean boolean0 = tIntCharHashMap0.equals((Object) tIntCharHashMap0);
      assertEquals("{91=\u0003}", tIntCharHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.get(I)C: I9 Branch 44 IFGE L253 - false
   * 2 gnu.trove.map.hash.TIntCharHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - false
   * 3 gnu.trove.map.hash.TIntCharHashMap.equals(Ljava/lang/Object;)Z: I87 Branch 79 IF_ICMPEQ L1200 - false
   * 4 gnu.trove.map.hash.TIntCharHashMap.equals(Ljava/lang/Object;)Z: I90 Branch 80 IF_ICMPEQ L1200 - true
   * 5 gnu.trove.map.hash.TIntCharHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      char[] charArray0 = new char[4];
      tIntCharHashMap0.adjustOrPutValue((int) '[', 'm', '\u0003');
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap(tIntCharHashMap0._set, charArray0);
      boolean boolean0 = tIntCharHashMap0.equals((Object) tIntCharHashMap1);
      assertEquals(false, tIntCharHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntCharHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      tIntCharHashMap0.adjustOrPutValue((int) 'r', 'r', 'r');
      boolean boolean0 = tIntCharHashMap0.isEmpty();
      assertEquals(1, tIntCharHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntCharHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test14()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap((-5), (float) (-5), (-5), '|');
      boolean boolean0 = tIntCharHashMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntCharHashMap.remove(I)C: I14 Branch 46 IFLT L276 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(0);
      char char0 = tIntCharHashMap0.remove((-694));
      assertEquals(true, tIntCharHashMap0.isEmpty());
      assertEquals('\u0000', char0);
  }

  //Test case number: 16
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.keys()[I: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TIntCharHashMap.keys()[I: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TIntCharHashMap.keys()[I: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TIntCharHashMap.keys()[I: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      tIntCharHashMap0.adjustOrPutValue((int) 'r', 'r', 'r');
      tIntCharHashMap0.keys();
      assertEquals("{114=r}", tIntCharHashMap0.toString());
      assertEquals(false, tIntCharHashMap0.isEmpty());
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.keys([I)[I: I10 Branch 49 IF_ICMPGE L315 - true
   * 2 gnu.trove.map.hash.TIntCharHashMap.keys([I)[I: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TIntCharHashMap.keys([I)[I: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TIntCharHashMap.keys([I)[I: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[7];
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      int[] intArray1 = tIntCharHashMap0.keys(intArray0);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(23, tIntCharHashMap0.capacity());
  }

  //Test case number: 18
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.keys([I)[I: I10 Branch 49 IF_ICMPGE L315 - false
   * 2 gnu.trove.map.hash.TIntCharHashMap.keys([I)[I: I44 Branch 51 IF_ICMPNE L323 - false
   * 3 gnu.trove.map.hash.TIntCharHashMap.keys()[I: I27 Branch 47 IFLE L303 - true
   * 4 gnu.trove.map.hash.TIntCharHashMap.keys()[I: I27 Branch 47 IFLE L303 - false
   * 5 gnu.trove.map.hash.TIntCharHashMap.keys()[I: I34 Branch 48 IF_ICMPNE L304 - true
   * 6 gnu.trove.map.hash.TIntCharHashMap.keys([I)[I: I37 Branch 50 IFLE L322 - true
   * 7 gnu.trove.map.hash.TIntCharHashMap.keys([I)[I: I37 Branch 50 IFLE L322 - false
   * 8 gnu.trove.map.hash.TIntCharHashMap.keys([I)[I: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      int[] intArray0 = tIntCharHashMap0.keys();
      tIntCharHashMap0.adjustOrPutValue((int) 'r', 'r', 'r');
      tIntCharHashMap0.keys(intArray0);
      assertEquals(1, tIntCharHashMap0.size());
      assertEquals("{114=r}", tIntCharHashMap0.toString());
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.values()[C: I34 Branch 53 IF_ICMPNE L344 - false
   * 2 gnu.trove.map.hash.TIntCharHashMap.values()[C: I27 Branch 52 IFLE L343 - true
   * 3 gnu.trove.map.hash.TIntCharHashMap.values()[C: I27 Branch 52 IFLE L343 - false
   * 4 gnu.trove.map.hash.TIntCharHashMap.values()[C: I34 Branch 53 IF_ICMPNE L344 - true
   */

  @Test
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[5];
      char[] charArray0 = new char[10];
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      char[] charArray1 = tIntCharHashMap0.values();
      assertEquals(1, tIntCharHashMap0.size());
      assertEquals("{0=\u0000}", tIntCharHashMap0.toString());
      assertNotNull(charArray1);
      assertEquals(23, tIntCharHashMap0.capacity());
  }

  //Test case number: 20
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.values([C)[C: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TIntCharHashMap.values([C)[C: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TIntCharHashMap.values([C)[C: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TIntCharHashMap.values([C)[C: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[10];
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap((-1552));
      char[] charArray1 = tIntCharHashMap0.values(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray1, charArray0);
  }

  //Test case number: 21
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.values([C)[C: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TIntCharHashMap.values([C)[C: I44 Branch 56 IF_ICMPNE L363 - false
   * 3 gnu.trove.map.hash.TIntCharHashMap.values([C)[C: I37 Branch 55 IFLE L362 - true
   * 4 gnu.trove.map.hash.TIntCharHashMap.values([C)[C: I37 Branch 55 IFLE L362 - false
   * 5 gnu.trove.map.hash.TIntCharHashMap.values([C)[C: I44 Branch 56 IF_ICMPNE L363 - true
   * 6 gnu.trove.map.hash.TIntCharHashMap.putIfAbsent(IC)C: I9 Branch 39 IFGE L205 - true
   * 7 gnu.trove.map.hash.TIntCharHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   */

  @Test
  public void test21()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(0);
      tIntCharHashMap0.putIfAbsent(0, 'Y');
      tIntCharHashMap0.adjustOrPutValue((-1767), 'Y', 'u');
      char[] charArray0 = new char[1];
      tIntCharHashMap0.values(charArray0);
      assertEquals(2, tIntCharHashMap0.size());
      assertEquals("{-1767=u, 0=Y}", tIntCharHashMap0.toString());
  }

  //Test case number: 22
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.containsValue(C)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TIntCharHashMap.containsValue(C)Z: I30 Branch 59 IF_ICMPNE L377 - true
   * 3 gnu.trove.map.hash.TIntCharHashMap.containsValue(C)Z: I18 Branch 57 IFLE L376 - true
   * 4 gnu.trove.map.hash.TIntCharHashMap.containsValue(C)Z: I18 Branch 57 IFLE L376 - false
   * 5 gnu.trove.map.hash.TIntCharHashMap.containsValue(C)Z: I25 Branch 58 IF_ICMPNE L377 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(0);
      tIntCharHashMap0.put(0, '?');
      boolean boolean0 = tIntCharHashMap0.containsValue('S');
      assertEquals(1, tIntCharHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 23
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.containsValue(C)Z: I30 Branch 59 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TIntCharHashMap.containsValue(C)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TIntCharHashMap.containsValue(C)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 4 gnu.trove.map.hash.TIntCharHashMap.containsValue(C)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 5 gnu.trove.map.hash.TIntCharHashMap.containsValue(C)Z: I30 Branch 59 IF_ICMPNE L377 - true
   */

  @Test
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = (-1552);
      intArray0[2] = (-1552);
      intArray0[3] = (-1552);
      intArray0[4] = (-1552);
      char[] charArray0 = new char[10];
      charArray0[0] = '~';
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      boolean boolean0 = tIntCharHashMap0.containsValue('~');
      assertEquals(2, tIntCharHashMap0.size());
      assertEquals(true, boolean0);
      assertEquals(23, tIntCharHashMap0.capacity());
      assertEquals("{-1552=\u0000, 0=~}", tIntCharHashMap0.toString());
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TIntCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TIntCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(374, (float) 374, 374, '3');
      boolean boolean0 = tIntCharHashMap0.forEachValue((TCharProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TIntCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TIntCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[8];
      char[] charArray0 = new char[4];
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      // Undeclared exception!
      try {
        tIntCharHashMap0.forEachValue((TCharProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TIntCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TIntCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap((-5), (float) (-5), (-5), '|');
      tIntCharHashMap0.transformValues((TCharFunction) null);
      assertEquals(-5, tIntCharHashMap0.getNoEntryKey());
  }

  //Test case number: 27
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TIntCharHashMap$TIntCharHashIterator.value()C: root-Branch
   * 3 gnu.trove.map.hash.TIntCharHashMap$TIntCharHashIterator.key()I: root-Branch
   * 4 gnu.trove.map.hash.TIntCharHashMap$TIntCharHashIterator.<init>(Lgnu/trove/map/hash/TIntCharHashMap;Lgnu/trove/map/hash/TIntCharHashMap;)V: root-Branch
   * 5 gnu.trove.map.hash.TIntCharHashMap$TIntCharHashIterator.advance()V: root-Branch
   * 6 gnu.trove.map.hash.TIntCharHashMap.iterator()Lgnu/trove/iterator/TIntCharIterator;: root-Branch
   * 7 gnu.trove.map.hash.TIntCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I18 Branch 66 IFLE L434 - false
   * 8 gnu.trove.map.hash.TIntCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   * 9 gnu.trove.map.hash.TIntCharHashMap.putAll(Lgnu/trove/map/TIntCharMap;)V: I15 Branch 43 IFEQ L243 - true
   * 10 gnu.trove.map.hash.TIntCharHashMap.putAll(Lgnu/trove/map/TIntCharMap;)V: I15 Branch 43 IFEQ L243 - false
   */

  @Test
  public void test27()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      char[] charArray0 = new char[10];
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap(tIntCharHashMap0._set, charArray0);
      tIntCharHashMap0.putAll((TIntCharMap) tIntCharHashMap1);
      // Undeclared exception!
      try {
        tIntCharHashMap0.transformValues((TCharFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.retainEntries(Lgnu/trove/procedure/TIntCharProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TIntCharHashMap.retainEntries(Lgnu/trove/procedure/TIntCharProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TIntCharHashMap.retainEntries(Lgnu/trove/procedure/TIntCharProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   * 4 gnu.trove.map.hash.TIntCharHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test28()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap((-1065), (float) 'i');
      boolean boolean0 = tIntCharHashMap0.retainEntries((TIntCharProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 29
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.retainEntries(Lgnu/trove/procedure/TIntCharProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TIntCharHashMap.retainEntries(Lgnu/trove/procedure/TIntCharProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TIntCharHashMap.retainEntries(Lgnu/trove/procedure/TIntCharProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[6];
      char[] charArray0 = new char[4];
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      // Undeclared exception!
      try {
        tIntCharHashMap0.retainEntries((TIntCharProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntCharHashMap.adjustValue(IC)Z: I9 Branch 71 IFGE L477 - true
   */

  @Test
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = (-1552);
      char[] charArray0 = new char[10];
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      boolean boolean0 = tIntCharHashMap0.adjustValue((-1552), 'a');
      assertEquals("{-1552=a, 0=\u0000}", tIntCharHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 31
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.adjustOrPutValue(ICC)C: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TIntCharHashMap.adjustOrPutValue(ICC)C: I59 Branch 73 IFEQ L502 - true
   */

  @Test
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1086);
      char[] charArray0 = new char[4];
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      char char0 = tIntCharHashMap0.adjustOrPutValue((-1086), '\u0000', '+');
      assertEquals(11, tIntCharHashMap0.capacity());
      assertEquals(2, tIntCharHashMap0.size());
      assertEquals('\u0000', char0);
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntCharHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   */

  @Test
  public void test32()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      boolean boolean0 = tIntCharHashMap0.equals((Object) "{}");
      assertEquals(false, boolean0);
      assertEquals(23, tIntCharHashMap0.capacity());
  }

  //Test case number: 33
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   * 2 gnu.trove.map.hash.TIntCharHashMap.<init>(IFIC)V: root-Branch
   */

  @Test
  public void test33()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap(1351, (float) 0, 0, 'z');
      tIntCharHashMap0.put((-9), '}');
      boolean boolean0 = tIntCharHashMap0.equals((Object) tIntCharHashMap1);
      assertEquals(false, tIntCharHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 34
  /*
   * 11 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.equals(Ljava/lang/Object;)Z: I90 Branch 80 IF_ICMPEQ L1200 - false
   * 2 gnu.trove.map.hash.TIntCharHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 3 gnu.trove.map.hash.TIntCharHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 4 gnu.trove.map.hash.TIntCharHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 5 gnu.trove.map.hash.TIntCharHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 6 gnu.trove.map.hash.TIntCharHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 7 gnu.trove.map.hash.TIntCharHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - false
   * 8 gnu.trove.map.hash.TIntCharHashMap.equals(Ljava/lang/Object;)Z: I87 Branch 79 IF_ICMPEQ L1200 - false
   * 9 gnu.trove.map.hash.TIntCharHashMap.equals(Ljava/lang/Object;)Z: I90 Branch 80 IF_ICMPEQ L1200 - true
   * 10 gnu.trove.map.hash.TIntCharHashMap.get(I)C: I9 Branch 44 IFGE L253 - true
   * 11 gnu.trove.map.hash.TIntCharHashMap.get(I)C: I9 Branch 44 IFGE L253 - false
   */

  @Test
  public void test34()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      tIntCharHashMap0.adjustOrPutValue((int) '[', 'm', '\u0003');
      tIntCharHashMap0.put((int) '.', '\u008B');
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap(tIntCharHashMap0._set, charArray0);
      boolean boolean0 = tIntCharHashMap0.equals((Object) tIntCharHashMap1);
      assertEquals(2, tIntCharHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 35
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 2 gnu.trove.map.hash.TIntCharHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 3 gnu.trove.map.hash.TIntCharHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   * 4 gnu.trove.map.hash.TIntCharHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 5 gnu.trove.map.hash.TIntCharHashMap.put(IC)C: root-Branch
   * 6 gnu.trove.map.hash.TIntCharHashMap.doPut(ICI)C: I12 Branch 40 IFGE L214 - false
   * 7 gnu.trove.map.hash.TIntCharHashMap.doPut(ICI)C: I41 Branch 41 IFEQ L221 - true
   * 8 gnu.trove.map.hash.TIntCharHashMap.<init>([I[C)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 9 gnu.trove.map.hash.TIntCharHashMap.<init>([I[C)V: I24 Branch 33 IF_ICMPGE L119 - false
   */

  @Test
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[5];
      char[] charArray0 = new char[5];
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      int int0 = tIntCharHashMap0.hashCode();
      assertEquals(1, tIntCharHashMap0.size());
      assertEquals(0, int0);
  }

  //Test case number: 36
  /*
   * 16 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap$1.execute(IC)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TIntCharHashMap.<init>(I)V: root-Branch
   * 3 gnu.trove.map.hash.TIntCharHashMap.toString()Ljava/lang/String;: root-Branch
   * 4 gnu.trove.map.hash.TIntCharHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 5 gnu.trove.map.hash.TIntCharHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 6 gnu.trove.map.hash.TIntCharHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 7 gnu.trove.map.hash.TIntCharHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 8 gnu.trove.map.hash.TIntCharHashMap.forEachEntry(Lgnu/trove/procedure/TIntCharProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 9 gnu.trove.map.hash.TIntCharHashMap.forEachEntry(Lgnu/trove/procedure/TIntCharProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 10 gnu.trove.map.hash.TIntCharHashMap.forEachEntry(Lgnu/trove/procedure/TIntCharProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 11 gnu.trove.map.hash.TIntCharHashMap.forEachEntry(Lgnu/trove/procedure/TIntCharProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 12 gnu.trove.map.hash.TIntCharHashMap.forEachEntry(Lgnu/trove/procedure/TIntCharProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 13 gnu.trove.map.hash.TIntCharHashMap.adjustOrPutValue(ICC)C: I9 Branch 72 IFGE L491 - true
   * 14 gnu.trove.map.hash.TIntCharHashMap.adjustOrPutValue(ICC)C: I59 Branch 73 IFEQ L502 - false
   * 15 gnu.trove.map.hash.TIntCharHashMap$1.<init>(Lgnu/trove/map/hash/TIntCharHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 16 gnu.trove.map.hash.TIntCharHashMap$1.execute(IC)Z: I4 Branch 115 IFEQ L1233 - false
   */

  @Test
  public void test36()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(0);
      tIntCharHashMap0.putIfAbsent(0, 'Y');
      tIntCharHashMap0.adjustOrPutValue((-1767), 'Y', 'u');
      String string0 = tIntCharHashMap0.toString();
      assertEquals(2, tIntCharHashMap0.size());
      assertEquals("{-1767=u, 0=Y}", string0);
  }

  //Test case number: 37
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TIntCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 2 gnu.trove.map.hash.TIntCharHashMap.setUp(I)I: root-Branch
   * 3 gnu.trove.map.hash.TIntCharHashMap.<init>()V: root-Branch
   * 4 gnu.trove.map.hash.TIntCharHashMap.putIfAbsent(IC)C: I9 Branch 39 IFGE L205 - true
   * 5 gnu.trove.map.hash.TIntCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 6 gnu.trove.map.hash.TIntCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 7 gnu.trove.map.hash.TIntCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 8 gnu.trove.map.hash.TIntCharHashMap.doPut(ICI)C: I12 Branch 40 IFGE L214 - true
   * 9 gnu.trove.map.hash.TIntCharHashMap.doPut(ICI)C: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test37()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      tIntCharHashMap0.putIfAbsent(0, 't');
      PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      tIntCharHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(false, tIntCharHashMap0.isEmpty());
      assertEquals("{0=t}", tIntCharHashMap0.toString());
  }
}
