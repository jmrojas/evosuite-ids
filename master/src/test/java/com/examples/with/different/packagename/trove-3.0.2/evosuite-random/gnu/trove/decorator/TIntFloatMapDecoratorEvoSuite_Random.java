/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TIntFloatMapDecorator;
import gnu.trove.map.TIntFloatMap;
import gnu.trove.map.hash.TIntFloatHashMap;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntFloatMapDecoratorEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


//   @Test
//   public void test0()  throws Throwable  {
//       String string0 = "kZY3";
//       int int0 = 0;
//       TIntFloatMapDecorator tIntFloatMapDecorator0 = new TIntFloatMapDecorator();
//       TIntFloatMap tIntFloatMap0 = tIntFloatMapDecorator0.getMap();
//       TIntFloatMapDecorator tIntFloatMapDecorator1 = new TIntFloatMapDecorator(tIntFloatMap0);
//       String string1 = File.pathSeparator;
//       tIntFloatMapDecorator1.get((Object) string1);
//       Integer integer0 = Integer.getInteger(string0, int0);
//       AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, (Integer) int0);
//       int int1 = abstractMap_SimpleEntry0.hashCode();
//       assertNotSame(integer0, int1);
//   }

  @Test
  public void test1()  throws Throwable  {
      TIntFloatMapDecorator tIntFloatMapDecorator0 = new TIntFloatMapDecorator();
      String string0 = " vs b=";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TIntFloatMapDecorator tIntFloatMapDecorator0 = new TIntFloatMapDecorator();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string0 = locale0.getISO3Language();
      tIntFloatMapDecorator0.containsKey((Object) string0);
      // Undeclared exception!
      try {
        tIntFloatMapDecorator0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      String string0 = "|m@E&Q?uhOqEcBFAd\"";
      TIntFloatMapDecorator tIntFloatMapDecorator0 = new TIntFloatMapDecorator();
      int int0 = 0;
      String string1 = Integer.toString(int0, int0);
      Float float0 = tIntFloatMapDecorator0.remove((Object) string1);
      Locale locale1 = null;
      String string2 = locale0.getDisplayCountry(locale1);
      AbstractMap.SimpleEntry<Float, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Float, Object>(float0, (Object) string2);
      abstractMap_SimpleEntry0.getKey();
      double double0 = 0.0;
      Float float1 = new Float(double0);
      AbstractMap.SimpleEntry<String, Float> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Float>(string0, float1);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 0: |m@E&Q?uhOqEcBFAd\":%7Cm@E&Q?uhOqEcBFAd%22#%7Cm@E&Q?uhOqEcBFAd%22
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0);
      TIntFloatMapDecorator tIntFloatMapDecorator0 = new TIntFloatMapDecorator((TIntFloatMap) tIntFloatHashMap0);
      tIntFloatMapDecorator0.keySet();
      double double0 = (-762.1918154723476);
      tIntFloatMapDecorator0.entrySet();
      Float float0 = new Float(double0);
      tIntFloatMapDecorator0.put((Integer) int0, float0);
      assertEquals(1, tIntFloatHashMap0.size());
      
      TIntFloatMapDecorator tIntFloatMapDecorator1 = new TIntFloatMapDecorator();
      tIntFloatMapDecorator0.clear();
      assertEquals(true, tIntFloatMapDecorator0.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-1);
      float float0 = 0.0F;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0, float0, int0, float0);
      TIntFloatHashMap tIntFloatHashMap1 = null;
      try {
        tIntFloatHashMap1 = new TIntFloatHashMap((TIntFloatMap) tIntFloatHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TIntFloatMapDecorator tIntFloatMapDecorator0 = new TIntFloatMapDecorator();
      File file0 = null;
      String string0 = "";
      int int0 = (-1236);
      Integer integer0 = new Integer(int0);
      Float float0 = null;
      // Undeclared exception!
      try {
        tIntFloatMapDecorator0.put(integer0, float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TIntFloatMapDecorator tIntFloatMapDecorator0 = new TIntFloatMapDecorator();
      String string0 = "NG:j}iGXBG><";
      int int0 = 120;
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: NG:j}iGXBG><://NG:j%7DiGXBG%3E%3C@[NG:j}iGXBG><]:120NG:j%7DiGXBG%3E%3C?NG:j%7DiGXBG%3E%3C#NG:j%7DiGXBG%3E%3C
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TIntFloatMapDecorator tIntFloatMapDecorator0 = new TIntFloatMapDecorator();
      // Undeclared exception!
      try {
        tIntFloatMapDecorator0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      int int1 = 610;
      float float0 = 0.5F;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int1, float0);
      TIntFloatMapDecorator tIntFloatMapDecorator0 = new TIntFloatMapDecorator((TIntFloatMap) tIntFloatHashMap0);
      int int2 = 1;
      float float1 = 1771.0195F;
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(int2, float1);
      TIntFloatMapDecorator tIntFloatMapDecorator1 = new TIntFloatMapDecorator((TIntFloatMap) tIntFloatHashMap1);
      tIntFloatMapDecorator1.clear();
      tIntFloatMapDecorator1.put((Integer) int2, (Float) float1);
      TIntFloatHashMap tIntFloatHashMap2 = new TIntFloatHashMap(int0);
      tIntFloatHashMap1.clear();
      tIntFloatMapDecorator1.put((Integer) int2, (Float) float1);
      TIntFloatMapDecorator tIntFloatMapDecorator2 = new TIntFloatMapDecorator((TIntFloatMap) tIntFloatHashMap1);
      TIntFloatMapDecorator tIntFloatMapDecorator3 = new TIntFloatMapDecorator((TIntFloatMap) tIntFloatHashMap2);
      int int3 = 869;
      float float2 = 10.0F;
      tIntFloatMapDecorator3.entrySet();
      tIntFloatMapDecorator1.putAll((Map<? extends Integer, ? extends Float>) tIntFloatMapDecorator2);
      int int4 = 966;
      float float3 = (-852.2572F);
      int int5 = 624;
      Integer integer0 = new Integer(int5);
      String string0 = "?";
      TIntFloatMapDecorator tIntFloatMapDecorator4 = new TIntFloatMapDecorator((TIntFloatMap) tIntFloatHashMap2);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ?://?%3F#?
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TIntFloatMapDecorator tIntFloatMapDecorator0 = new TIntFloatMapDecorator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = "";
      try {
        byteArrayOutputStream0.toString(string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // 
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TIntFloatMap tIntFloatMap0 = null;
      TIntFloatMapDecorator tIntFloatMapDecorator0 = new TIntFloatMapDecorator(tIntFloatMap0);
      // Undeclared exception!
      try {
        tIntFloatMapDecorator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 1;
      intArray0[3] = int3;
      int int4 = (-406);
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      int int6 = (-1);
      intArray0[6] = int6;
      int int7 = 0;
      intArray0[7] = int7;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) intArray0[2];
      float float0 = 559.921F;
      floatArray0[1] = float0;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      TIntFloatMapDecorator tIntFloatMapDecorator0 = new TIntFloatMapDecorator((TIntFloatMap) tIntFloatHashMap0);
      assertEquals("{null=559.921}", tIntFloatMapDecorator0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-1);
      float float0 = (-1.0F);
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0, float0);
      TIntFloatMapDecorator tIntFloatMapDecorator0 = new TIntFloatMapDecorator((TIntFloatMap) tIntFloatHashMap0);
      String string0 = tIntFloatHashMap0.toString();
      tIntFloatMapDecorator0.remove((Object) string0);
      TIntFloatMapDecorator tIntFloatMapDecorator1 = new TIntFloatMapDecorator();
      tIntFloatMapDecorator1.entrySet();
      TIntFloatMapDecorator tIntFloatMapDecorator2 = new TIntFloatMapDecorator((TIntFloatMap) tIntFloatHashMap0);
      int int1 = tIntFloatMapDecorator2.size();
      assertFalse(int1 == int0);
  }

  @Test
  public void test14()  throws Throwable  {
      TIntFloatMap tIntFloatMap0 = null;
      TIntFloatMapDecorator tIntFloatMapDecorator0 = new TIntFloatMapDecorator(tIntFloatMap0);
      // Undeclared exception!
      try {
        tIntFloatMapDecorator0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TIntFloatMapDecorator tIntFloatMapDecorator0 = new TIntFloatMapDecorator();
      String string0 = "Z'SYf};&sTO7Bkekp";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: Z'SYf};&sTO7Bkekp://Z'SYf};&sTO7BkekpZ'SYf%7D;&sTO7Bkekp#Z'SYf%7D;&sTO7Bkekp
         //
      }
  }
}
