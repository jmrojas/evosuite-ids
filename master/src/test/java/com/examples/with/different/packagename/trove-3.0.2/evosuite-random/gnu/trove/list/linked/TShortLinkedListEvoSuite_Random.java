/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.list.linked;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TShortCollection;
import gnu.trove.impl.sync.TSynchronizedRandomAccessShortList;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortSet;
import gnu.trove.list.TShortList;
import gnu.trove.list.array.TShortArrayList;
import gnu.trove.list.linked.TShortLinkedList;
import gnu.trove.set.TShortSet;
import gnu.trove.set.hash.TShortHashSet;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortLinkedListEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = "q#,_<*x+%";
      try {
        byteArrayOutputStream0.toString(string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // q#,_<*x+%
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      int int0 = (-2035);
      int int1 = (-1446);
      short[] shortArray0 = new short[10];
      short short0 = (short) (-1578);
      shortArray0[0] = short0;
      short short1 = (short) (-1642);
      shortArray0[1] = short1;
      short short2 = (short)1120;
      shortArray0[2] = short2;
      short short3 = (short)1321;
      shortArray0[3] = short3;
      short short4 = (short) (-1);
      shortArray0[4] = short4;
      short short5 = (short) (-1897);
      shortArray0[5] = short5;
      short short6 = (short)2045;
      shortArray0[6] = short6;
      short short7 = (short) (-925);
      shortArray0[7] = short7;
      short short8 = (short)0;
      shortArray0[8] = short8;
      short short9 = (short) (-296);
      shortArray0[9] = short9;
      int int2 = 1279;
      TShortLinkedList tShortLinkedList1 = TShortLinkedList.link(shortArray0, int2, shortArray0[4]);
      assertNotNull(tShortLinkedList1);
      
      // Undeclared exception!
      try {
        tShortLinkedList0.insert(int1, tShortLinkedList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      short short0 = (short)1867;
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList(short0);
      int int0 = (-1280);
      // Undeclared exception!
      try {
        tShortLinkedList0.removeAt(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no elemenet at -1280
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      int int0 = 0;
      short short0 = (short)1831;
      // Undeclared exception!
      try {
        tShortLinkedList0.replace(int0, short0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // at offset 0
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short)1731;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)1;
      shortArray0[2] = short2;
      short short3 = (short)1228;
      shortArray0[3] = short3;
      short short4 = (short)1820;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)92;
      shortArray0[6] = short6;
      int int0 = 137;
      // Undeclared exception!
      try {
        TShortLinkedList.link(shortArray0, int0, short0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 137
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      short[] shortArray0 = new short[4];
      int int0 = 1819;
      int int1 = (-541);
      // Undeclared exception!
      try {
        tShortLinkedList0.max();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      short short0 = (short)0;
      TShortLinkedList tShortLinkedList1 = new TShortLinkedList(short0);
      short short1 = (short)0;
      int int0 = (-793);
      int int1 = tShortLinkedList1.binarySearch(short1, (int) short0, int0);
      assertEquals((-1), int1);
      
      short short2 = (short)0;
      tShortLinkedList1.fill(short2);
      short short3 = (short)1722;
      boolean boolean0 = tShortLinkedList1.containsAll((TShortCollection) tShortLinkedList0);
      TShortLinkedList tShortLinkedList2 = new TShortLinkedList(short3);
      short[] shortArray0 = tShortLinkedList0.toArray(int0, (int) short1);
      assertNotNull(shortArray0);
      
      TShortLinkedList tShortLinkedList3 = new TShortLinkedList((TShortList) tShortLinkedList2);
      short[] shortArray1 = new short[4];
      short short4 = (short)0;
      boolean boolean1 = tShortLinkedList2.remove(short4);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try {
        tShortLinkedList3.get((int) short3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 1722 exceeds size 0
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      TShortLinkedList tShortLinkedList1 = new TShortLinkedList();
      int int0 = 0;
      TShortLinkedList tShortLinkedList2 = (TShortLinkedList)tShortLinkedList0.subList(int0, int0);
      assertNotNull(tShortLinkedList2);
      
      int int1 = 980;
      boolean boolean0 = tShortLinkedList0.removeAll((TShortCollection) tShortLinkedList2);
      int int2 = (-1012);
      short short0 = (short)833;
      tShortLinkedList1.fill(int1, int2, short0);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortLinkedList0);
      String string0 = tSynchronizedRandomAccessShortList0.toString();
      assertNotNull(string0);
      
      short short1 = (short)10;
      tSynchronizedRandomAccessShortList0.fill((int) short0, int0, short1);
      boolean boolean1 = TShortLinkedList.no(string0);
      assertEquals(true, tShortLinkedList0.isEmpty());
      assertEquals("{}", tShortLinkedList0.toString());
      assertTrue(boolean1 == boolean0);
  }

//   @Test
//   public void test8()  throws Throwable  {
//       short[] shortArray0 = new short[9];
//       short short0 = (short) (-1176);
//       shortArray0[0] = short0;
//       short short1 = (short) (-32768);
//       shortArray0[1] = short1;
//       short short2 = (short) (-32768);
//       shortArray0[2] = short2;
//       short short3 = (short) (-190);
//       shortArray0[3] = short3;
//       short short4 = (short) (-456);
//       shortArray0[4] = short4;
//       short short5 = (short)402;
//       shortArray0[5] = short5;
//       short short6 = (short) (-1225);
//       shortArray0[6] = short6;
//       short short7 = (short)235;
//       shortArray0[7] = short7;
//       short short8 = (short)0;
//       shortArray0[8] = short8;
//       TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0, shortArray0[7]);
//       Locale locale0 = Locale.CHINESE;
//       String string0 = locale0.toString();
//       tShortArrayList0.equals((Object) string0);
//       TShortLinkedList tShortLinkedList0 = new TShortLinkedList((TShortList) tShortArrayList0);
//       int int0 = 10;
//       short short9 = (short) (-1369);
//       tShortLinkedList0.insert(int0, short9);
//       assertEquals(-3779, tShortLinkedList0.sum());
//       assertEquals(10, tShortLinkedList0.size());
//   }

  @Test
  public void test9()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)254;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short) (-1493);
      shortArray0[4] = short4;
      short short5 = (short) (-382);
      shortArray0[5] = short5;
      short short6 = (short) (-2007);
      shortArray0[6] = short6;
      short short7 = (short)0;
      shortArray0[7] = short7;
      short short8 = (short) (-1093);
      shortArray0[8] = short8;
      short short9 = (short)942;
      shortArray0[9] = short9;
      TShortLinkedList tShortLinkedList0 = TShortLinkedList.link(shortArray0, shortArray0[5], short8);
      assertNotNull(tShortLinkedList0);
      
      TShortHashSet tShortHashSet0 = new TShortHashSet();
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      boolean boolean0 = tShortLinkedList0.addAll((TShortCollection) tUnmodifiableShortSet0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short) (-4);
      shortArray0[0] = short0;
      short short1 = (short) (-32768);
      short[] shortArray1 = new short[2];
      shortArray1[0] = short0;
      short short2 = (short) (-64);
      shortArray1[1] = short2;
      int int0 = 436;
      // Undeclared exception!
      try {
        TShortLinkedList.link(shortArray1, shortArray1[0], int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      short[] shortArray0 = new short[10];
      short short0 = (short)1870;
      shortArray0[0] = short0;
      short short1 = (short)684;
      shortArray0[1] = short1;
      short short2 = (short)1922;
      shortArray0[2] = short2;
      short short3 = (short)1259;
      shortArray0[3] = short3;
      short short4 = (short)1897;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)973;
      shortArray0[7] = short7;
      short short8 = (short) (-1205);
      shortArray0[8] = short8;
      short short9 = (short) (-452);
      shortArray0[9] = short9;
      int int0 = (-960);
      // Undeclared exception!
      try {
        tShortLinkedList0.toArray(shortArray0, (int) short4, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1897
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short)792;
      shortArray0[0] = short0;
      short short1 = (short) (-1131);
      short short2 = (short)31;
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList(short2);
      int int0 = tShortLinkedList0.hashCode();
      assertEquals(961, int0);
      
      shortArray0[1] = short1;
      short short3 = (short) (-29673);
      shortArray0[2] = short3;
      short short4 = (short)1066;
      shortArray0[3] = short4;
      short short5 = (short)32767;
      shortArray0[4] = short5;
      short short6 = (short)73;
      shortArray0[5] = short6;
      TShortLinkedList tShortLinkedList1 = TShortLinkedList.link(shortArray0, short0, shortArray0[2]);
      assertNotNull(tShortLinkedList1);
      
      tShortLinkedList1.clear();
      assertEquals(true, tShortLinkedList1.isEmpty());
      
      int int1 = tShortLinkedList0.lastIndexOf(shortArray0[3]);
      assertEquals((-1), int1);
  }

  @Test
  public void test13()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short) (-8429);
      shortArray0[0] = short0;
      short short1 = (short) (-800);
      shortArray0[1] = short1;
      short short2 = (short)568;
      shortArray0[2] = short2;
      short short3 = (short) (-67);
      shortArray0[3] = short3;
      short short4 = (short) (-1937);
      shortArray0[4] = short4;
      short short5 = (short) (-1273);
      shortArray0[5] = short5;
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      boolean boolean0 = tShortLinkedList0.isEmpty();
      short short6 = (short) (-354);
      shortArray0[6] = short6;
      short short7 = (short)2;
      shortArray0[7] = short7;
      short short8 = (short) (-1467);
      shortArray0[8] = short8;
      int int0 = (-1535);
      TShortLinkedList tShortLinkedList1 = TShortLinkedList.link(shortArray0, short8, int0);
      assertNotNull(tShortLinkedList1);
      
      boolean boolean1 = tShortLinkedList1.retainAll(shortArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, boolean1);
  }

  @Test
  public void test14()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short) (-263);
      shortArray0[0] = short0;
      short short1 = (short) (-1998);
      shortArray0[1] = short1;
      short short2 = (short)1;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short) (-914);
      shortArray0[6] = short6;
      short short7 = (short) (-1);
      shortArray0[7] = short7;
      short short8 = (short)41;
      shortArray0[8] = short8;
      short short9 = (short)32767;
      shortArray0[9] = short9;
      int int0 = 1108;
      int int1 = (-586);
      TShortLinkedList tShortLinkedList0 = TShortLinkedList.link(shortArray0, int0, int1);
      ObjectOutput objectOutput0 = null;
      // Undeclared exception!
      try {
        tShortLinkedList0.writeExternal(objectOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      TShortLinkedList tShortLinkedList1 = new TShortLinkedList((TShortList) tShortLinkedList0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      boolean boolean0 = tShortLinkedList0.retainAll((Collection<?>) linkedList0);
      assertEquals(false, boolean0);
      
      tShortLinkedList1.isEmpty();
      boolean boolean1 = tShortLinkedList0.isEmpty();
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[1];
      short short0 = (short)0;
      linkedList0.add((Short) short0);
      shortArray0[0] = short0;
      int int0 = 32767;
      TShortLinkedList tShortLinkedList2 = TShortLinkedList.link(shortArray0, int0, short0);
      assertNotNull(tShortLinkedList2);
      
      int int1 = (-1681);
      int int2 = (-99);
      // Undeclared exception!
      try {
        tShortLinkedList0.toArray(shortArray0, int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -1681
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)1591;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)0;
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      tShortLinkedList0.no_entry_value = short2;
      shortArray0[3] = short3;
      short short4 = (short)1;
      TShortLinkedList tShortLinkedList1 = new TShortLinkedList();
      // Undeclared exception!
      try {
        tShortLinkedList1.indexOf(short1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      short short0 = (short)760;
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList(short0);
      short short1 = (short)458;
      // Undeclared exception!
      try {
        tShortLinkedList0.insert((int) short0, short1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
