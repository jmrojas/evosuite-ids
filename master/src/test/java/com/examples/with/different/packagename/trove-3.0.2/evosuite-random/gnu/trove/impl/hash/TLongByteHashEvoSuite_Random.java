/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TLongByteMap;
import gnu.trove.map.hash.TLongByteHashMap;
import gnu.trove.procedure.TLongByteProcedure;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TLongByteHashEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap();
      assertEquals(23, tLongByteHashMap0.capacity());
      
      tLongByteHashMap0.compact();
      long long0 = 1L;
      byte byte0 = (byte) (-1);
      tLongByteHashMap0.adjustValue(long0, byte0);
      TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap((TLongByteMap) tLongByteHashMap0);
      assertEquals(0L, tLongByteHashMap1.getNoEntryKey());
  }

  @Test
  public void test1()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = (-1665L);
      longArray0[0] = long0;
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)6;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte)52;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-92);
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-53);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-87);
      byteArray0[8] = byte8;
      byte byte9 = (byte) (-16);
      byteArray0[9] = byte9;
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(longArray0, byteArray0);
      assertEquals(1, tLongByteHashMap0.size());
      
      tLongByteHashMap0.clear();
      assertEquals(0L, tLongByteHashMap0.getNoEntryKey());
  }

  @Test
  public void test2()  throws Throwable  {
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap();
      long long0 = 0L;
      tLongByteHashMap0.getNoEntryValue();
      byte byte0 = (byte)0;
      tLongByteHashMap0.put(long0, byte0);
      int int0 = 1175484103;
      tLongByteHashMap0.isEmpty();
      float float0 = (-1.0F);
      long long1 = 0L;
      // Undeclared exception!
      try {
        tLongByteHashMap0.setAutoCompactionFactor(float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1.0
         //
      }
  }

//   @Test
//   public void test3()  throws Throwable  {
//       int int0 = 1;
//       TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(int0, int0);
//       int int1 = tLongByteHashMap0.hashCode();
//       int int2 = 0;
//       float float0 = 0.0F;
//       byte byte0 = (byte)80;
//       TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap(int1, float0, (long) int2, byte0);
//       tLongByteHashMap0.putAll((TLongByteMap) tLongByteHashMap1);
//       assertEquals(80, tLongByteHashMap1.getNoEntryValue());
//       assertEquals(0, tLongByteHashMap0.getNoEntryValue());
//       assertEquals(0L, tLongByteHashMap1.getNoEntryKey());
//       assertEquals(0L, tLongByteHashMap0.getNoEntryKey());
//       
//       TLongByteHashMap tLongByteHashMap2 = new TLongByteHashMap(int2);
//       long long0 = (-10L);
//       long long1 = tLongByteHashMap2.getNoEntryKey();
//       assertEquals(0L, long1);
//       
//       boolean boolean0 = tLongByteHashMap2.containsKey(long0);
//       assertEquals(false, boolean0);
//       assertEquals(0, tLongByteHashMap2.getNoEntryValue());
//   }

//   @Test
//   public void test4()  throws Throwable  {
//       long[] longArray0 = new long[8];
//       long long0 = (-1454L);
//       longArray0[0] = long0;
//       long long1 = 778L;
//       longArray0[1] = long1;
//       long long2 = 1962L;
//       longArray0[2] = long2;
//       long long3 = 0L;
//       int int0 = 194;
//       float float0 = 1896.2407F;
//       TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(int0, float0);
//       long long4 = (-1L);
//       boolean boolean0 = tLongByteHashMap0.increment(long4);
//       assertEquals(false, boolean0);
//       assertEquals(0, tLongByteHashMap0.getNoEntryValue());
//       assertEquals(0L, tLongByteHashMap0.getNoEntryKey());
//       
//       longArray0[3] = long3;
//       long long5 = 0L;
//       longArray0[4] = long5;
//       long long6 = (-1144L);
//       longArray0[5] = long6;
//       long long7 = 0L;
//       longArray0[6] = long7;
//       long long8 = (-1644L);
//       longArray0[7] = long8;
//       byte[] byteArray0 = new byte[1];
//       byte byte0 = (byte)0;
//       byteArray0[0] = byte0;
//       TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap(longArray0, byteArray0);
//       TLongByteProcedure tLongByteProcedure0 = null;
//       // Undeclared exception!
//       try {
//         tLongByteHashMap1.forEachEntry(tLongByteProcedure0);
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

//   @Test
//   public void test5()  throws Throwable  {
//       long[] longArray0 = new long[5];
//       long long0 = 0L;
//       longArray0[0] = long0;
//       long long1 = 1L;
//       longArray0[1] = long1;
//       long long2 = 1006L;
//       longArray0[2] = long2;
//       long long3 = 0L;
//       longArray0[3] = long3;
//       long long4 = (-1L);
//       longArray0[4] = long4;
//       byte[] byteArray0 = new byte[3];
//       byte byte0 = (byte)88;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte) (-32);
//       byteArray0[1] = byte1;
//       byte byte2 = (byte) (-53);
//       byteArray0[2] = byte2;
//       TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(longArray0, byteArray0);
//       long long5 = tLongByteHashMap0.getNoEntryKey();
//       assertEquals(0L, long5);
//       assertEquals(11, tLongByteHashMap0.capacity());
//       assertEquals(0, tLongByteHashMap0.getNoEntryValue());
//       assertEquals("{1006=-53, 1=-32, 0=88}", tLongByteHashMap0.toString());
//   }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 1391;
      float float0 = 0.0F;
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(int0, float0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      tLongByteHashMap0._set = longArray0;
      TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap();
      TLongByteHashMap tLongByteHashMap2 = new TLongByteHashMap((TLongByteMap) tLongByteHashMap1);
      TLongByteHashMap tLongByteHashMap3 = new TLongByteHashMap((TLongByteMap) tLongByteHashMap2);
      OutputStream outputStream0 = null;
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap();
      String string0 = "";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // 
         //
      }
  }

//   @Test
//   public void test8()  throws Throwable  {
//       int int0 = (-1120);
//       byte byte0 = (byte)89;
//       TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(int0, (float) int0, (long) int0, byte0);
//       TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap((TLongByteMap) tLongByteHashMap0);
//       tLongByteHashMap1.size();
//       assertEquals(89, tLongByteHashMap0.getNoEntryValue());
//       assertEquals((-1120L), tLongByteHashMap0.getNoEntryKey());
//       assertEquals(89, tLongByteHashMap1.getNoEntryValue());
//   }

//   @Test
//   public void test9()  throws Throwable  {
//       long[] longArray0 = new long[2];
//       long long0 = (-1952L);
//       longArray0[0] = long0;
//       long long1 = 0L;
//       longArray0[1] = long1;
//       byte[] byteArray0 = new byte[5];
//       byte byte0 = (byte)0;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte) (-102);
//       byteArray0[1] = byte1;
//       byte byte2 = (byte) (-37);
//       byteArray0[2] = byte2;
//       byte byte3 = (byte) (-50);
//       byteArray0[3] = byte3;
//       byte byte4 = (byte) (-36);
//       byteArray0[4] = byte4;
//       TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(longArray0, byteArray0);
//       TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap((TLongByteMap) tLongByteHashMap0);
//       boolean boolean0 = false;
//       tLongByteHashMap1.reenableAutoCompaction(boolean0);
//       assertEquals(2, tLongByteHashMap0.size());
//       assertEquals(23, tLongByteHashMap1.capacity());
//       assertEquals(0L, tLongByteHashMap1.getNoEntryKey());
//       assertEquals(0, tLongByteHashMap1.getNoEntryValue());
//       assertEquals("{-1952=0, 0=-102}", tLongByteHashMap0.toString());
//   }

//   @Test
//   public void test10()  throws Throwable  {
//       int int0 = (-1131);
//       TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(int0);
//       tLongByteHashMap0.trimToSize();
//       tLongByteHashMap0.capacity();
//       tLongByteHashMap0.ensureCapacity(int0);
//       int int1 = 0;
//       TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap(int1);
//       byte byte0 = (byte)0;
//       tLongByteHashMap1.setAutoCompactionFactor((float) int1);
//       boolean boolean0 = tLongByteHashMap1.containsKey((long) int1);
//       assertEquals(false, boolean0);
//       
//       tLongByteHashMap1.containsValue(byte0);
//       tLongByteHashMap1.capacity();
//       assertEquals(0L, tLongByteHashMap1.getNoEntryKey());
//       assertEquals(0, tLongByteHashMap1.getNoEntryValue());
//   }

//   @Test
//   public void test11()  throws Throwable  {
//       long[] longArray0 = new long[8];
//       long long0 = 1L;
//       longArray0[0] = long0;
//       long long1 = (-1294L);
//       longArray0[1] = long1;
//       long long2 = 0L;
//       longArray0[2] = long2;
//       long long3 = 0L;
//       longArray0[3] = long3;
//       long long4 = 0L;
//       longArray0[4] = long4;
//       long long5 = 0L;
//       longArray0[5] = long5;
//       long long6 = 0L;
//       longArray0[6] = long6;
//       long long7 = 403L;
//       longArray0[7] = long7;
//       byte[] byteArray0 = new byte[7];
//       byte byte0 = (byte)94;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte) (-94);
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)74;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte) (-119);
//       byteArray0[3] = byte3;
//       byte byte4 = (byte) (-110);
//       byteArray0[4] = byte4;
//       byte byte5 = (byte)77;
//       byteArray0[5] = byte5;
//       byte byte6 = (byte) (-27);
//       byteArray0[6] = byte6;
//       TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(longArray0, byteArray0);
//       TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap((TLongByteMap) tLongByteHashMap0);
//       tLongByteHashMap1.isEmpty();
//       assertEquals(0L, tLongByteHashMap0.getNoEntryKey());
//       assertEquals(3, tLongByteHashMap0.size());
//       assertEquals("{-1294=-94, 1=94, 0=-27}", tLongByteHashMap0.toString());
//       
//       TLongByteHashMap tLongByteHashMap2 = new TLongByteHashMap();
//       TLongByteHashMap tLongByteHashMap3 = new TLongByteHashMap();
//       tLongByteHashMap3.keySet();
//       assertEquals(0, tLongByteHashMap3.getNoEntryValue());
//       assertEquals(23, tLongByteHashMap3.capacity());
//       assertFalse(tLongByteHashMap3.equals(tLongByteHashMap1));
//   }

//   @Test
//   public void test12()  throws Throwable  {
//       int int0 = (-2022);
//       long[] longArray0 = new long[8];
//       longArray0[0] = (long) int0;
//       longArray0[1] = (long) int0;
//       longArray0[2] = (long) int0;
//       long long0 = 1L;
//       longArray0[3] = long0;
//       long long1 = (-1064L);
//       longArray0[4] = long1;
//       longArray0[5] = (long) int0;
//       longArray0[6] = (long) int0;
//       long long2 = 20L;
//       longArray0[7] = long2;
//       byte[] byteArray0 = new byte[7];
//       byte byte0 = (byte) (-88);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)0;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)31;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte) (-111);
//       byteArray0[3] = byte3;
//       byte byte4 = (byte) (-117);
//       byteArray0[4] = byte4;
//       byte byte5 = (byte)0;
//       byteArray0[5] = byte5;
//       byte byte6 = (byte)0;
//       byteArray0[6] = byte6;
//       TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(longArray0, byteArray0);
//       assertEquals(0, tLongByteHashMap0.getNoEntryValue());
//       assertEquals(3, tLongByteHashMap0.size());
//       assertEquals(0L, tLongByteHashMap0.getNoEntryKey());
//       assertEquals("{-2022=0, -1064=-117, 1=-111}", tLongByteHashMap0.toString());
//       
//       float float0 = 275.5909F;
//       TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap(int0, float0);
//       tLongByteHashMap1.trimToSize();
//       tLongByteHashMap1.getAutoCompactionFactor();
//       assertEquals(0L, tLongByteHashMap1.getNoEntryKey());
//       assertEquals(0, tLongByteHashMap1.getNoEntryValue());
//   }

//   @Test
//   public void test13()  throws Throwable  {
//       long[] longArray0 = new long[2];
//       long long0 = (-1L);
//       longArray0[0] = long0;
//       long long1 = (-1L);
//       longArray0[1] = long1;
//       byte[] byteArray0 = new byte[9];
//       byte byte0 = (byte)96;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte) (-105);
//       byteArray0[1] = byte1;
//       byteArray0[0] = byte1;
//       byteArray0[1] = byte0;
//       byteArray0[2] = byte1;
//       byteArray0[3] = byte0;
//       byte byte2 = (byte)17;
//       byteArray0[4] = byte2;
//       byteArray0[5] = byte2;
//       byte byte3 = (byte)91;
//       byteArray0[6] = byte3;
//       byteArray0[7] = byte3;
//       byteArray0[8] = byte2;
//       byte byte4 = (byte)0;
//       byteArray0[2] = byte4;
//       byte byte5 = (byte) (-93);
//       byteArray0[3] = byte5;
//       byte byte6 = (byte) (-63);
//       byteArray0[4] = byte6;
//       byte byte7 = (byte)0;
//       byteArray0[5] = byte7;
//       byte byte8 = (byte) (-35);
//       byteArray0[6] = byte8;
//       byte byte9 = (byte)39;
//       byteArray0[7] = byte9;
//       byte byte10 = (byte)0;
//       byteArray0[8] = byte10;
//       TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(longArray0, byteArray0);
//       boolean boolean0 = true;
//       tLongByteHashMap0.reenableAutoCompaction(boolean0);
//       int int0 = (-1192);
//       float float0 = (-89.8447F);
//       boolean boolean1 = true;
//       tLongByteHashMap0.reenableAutoCompaction(boolean1);
//       assertEquals(1, tLongByteHashMap0.size());
//       assertEquals(0L, tLongByteHashMap0.getNoEntryKey());
//       assertEquals("{-1=96}", tLongByteHashMap0.toString());
//       assertEquals(0, tLongByteHashMap0.getNoEntryValue());
//       assertEquals(23, tLongByteHashMap0.capacity());
//       
//       byte byte11 = (byte) (-69);
//       TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap(int0, float0, (long) int0, byte11);
//       TLongByteHashMap tLongByteHashMap2 = new TLongByteHashMap((TLongByteMap) tLongByteHashMap1);
//       tLongByteHashMap2.compact();
//       assertEquals((-1192L), tLongByteHashMap1.getNoEntryKey());
//       assertEquals(-69, tLongByteHashMap1.getNoEntryValue());
//       assertEquals(-69, tLongByteHashMap2.getNoEntryValue());
//   }

//   @Test
//   public void test14()  throws Throwable  {
//       int int0 = (-1525);
//       TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(int0);
//       byte[] byteArray0 = tLongByteHashMap0._states;
//       assertEquals(0L, tLongByteHashMap0.getNoEntryKey());
//       assertEquals(0, tLongByteHashMap0.getNoEntryValue());
//       
//       int int1 = 0;
//       float float0 = 1460.9197F;
//       byte byte0 = (byte)0;
//       TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap(int1, float0, (long) int1, byte0);
//       tLongByteHashMap1.size();
//       assertEquals(0, tLongByteHashMap1.getNoEntryValue());
//       assertEquals(0L, tLongByteHashMap1.getNoEntryKey());
//   }

//   @Test
//   public void test15()  throws Throwable  {
//       TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap();
//       tLongByteHashMap0.size();
//       tLongByteHashMap0.iterator();
//       tLongByteHashMap0.valueCollection();
//       int int0 = (-1541);
//       byte byte0 = tLongByteHashMap0.getNoEntryValue();
//       assertEquals((byte)0, byte0);
//       
//       TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap((TLongByteMap) tLongByteHashMap0);
//       tLongByteHashMap0.clear();
//       assertEquals(0L, tLongByteHashMap0.getNoEntryKey());
//       assertEquals(23, tLongByteHashMap0.capacity());
//       
//       float float0 = 0.0F;
//       byte byte1 = (byte)0;
//       TLongByteHashMap tLongByteHashMap2 = new TLongByteHashMap(int0, float0, (long) int0, byte1);
//       assertEquals(0, tLongByteHashMap2.getNoEntryValue());
//       assertEquals((-1541L), tLongByteHashMap2.getNoEntryKey());
//   }

//   @Test
//   public void test16()  throws Throwable  {
//       long[] longArray0 = new long[8];
//       long long0 = 1898L;
//       longArray0[0] = long0;
//       long long1 = 1L;
//       longArray0[1] = long1;
//       long long2 = 0L;
//       longArray0[2] = long2;
//       long long3 = 0L;
//       longArray0[3] = long3;
//       long long4 = 0L;
//       longArray0[4] = long4;
//       long long5 = 1L;
//       longArray0[5] = long5;
//       long long6 = (-511L);
//       longArray0[6] = long6;
//       long long7 = 953L;
//       longArray0[7] = long7;
//       byte[] byteArray0 = new byte[5];
//       byte byte0 = (byte)1;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)22;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)1;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte)100;
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)0;
//       byteArray0[4] = byte4;
//       TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(longArray0, byteArray0);
//       assertEquals(0L, tLongByteHashMap0.getNoEntryKey());
//       assertEquals("{1898=1, 1=22, 0=0}", tLongByteHashMap0.toString());
//       assertEquals(3, tLongByteHashMap0.size());
//       assertEquals(0, tLongByteHashMap0.getNoEntryValue());
//       
//       TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap();
//       tLongByteHashMap1.size();
//       assertEquals(0, tLongByteHashMap1.getNoEntryValue());
//       assertEquals(0L, tLongByteHashMap1.getNoEntryKey());
//   }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 493;
      byte byte0 = (byte) (-104);
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(int0, (float) int0, (long) int0, byte0);
      int int1 = 501165979;
      long long0 = 0L;
      tLongByteHashMap0.put(long0, byte0);
      TLongByteHashMap tLongByteHashMap1 = null;
      try {
        tLongByteHashMap1 = new TLongByteHashMap(int1);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 1291;
      byte byte0 = (byte)1;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      long long0 = 1L;
      longArray0[2] = long0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(longArray0, byteArray0);
      TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap((TLongByteMap) tLongByteHashMap0);
      tLongByteHashMap1.size();
      assertEquals("{1=1}", tLongByteHashMap0.toString());
      
      TLongByteHashMap tLongByteHashMap2 = new TLongByteHashMap(int0, (float) int0, (long) int0, byte0);
      tLongByteHashMap2.compact();
      long long1 = 0L;
      byte byte1 = (byte) (-100);
      tLongByteHashMap2.adjustValue(long1, byte1);
      byte byte2 = tLongByteHashMap2.getNoEntryValue();
      tLongByteHashMap2.tempDisableAutoCompaction();
      tLongByteHashMap2.clear();
      tLongByteHashMap2.clear();
      TLongByteHashMap tLongByteHashMap3 = new TLongByteHashMap((TLongByteMap) tLongByteHashMap2);
      tLongByteHashMap2.toString();
      long long2 = 0L;
      long long3 = (-1390L);
      byte byte3 = tLongByteHashMap3.getNoEntryValue();
      tLongByteHashMap3.put(long3, byte0);
      long long4 = 624L;
      byte byte4 = (byte)120;
      tLongByteHashMap3.adjustOrPutValue(long4, byte4, byte2);
      tLongByteHashMap2.keySet();
      tLongByteHashMap3.containsKey(long2);
      TLongByteHashMap tLongByteHashMap4 = new TLongByteHashMap((int) byte1, (float) byte1);
      tLongByteHashMap3.getNoEntryKey();
      assertEquals("{624=1, -1390=1}", tLongByteHashMap3.toString());
      
      tLongByteHashMap2.size();
      assertTrue(byte0 == byte3);
  }
}
