/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TByteObjectMap;
import gnu.trove.map.hash.TByteObjectHashMap;
import gnu.trove.procedure.TByteObjectProcedure;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.AbstractMap;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteObjectHashMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 1701;
      float float0 = 0.0F;
      TByteObjectHashMap<Byte> tByteObjectHashMap0 = new TByteObjectHashMap<Byte>(int0, float0);
      ObjectInput objectInput0 = null;
      // Undeclared exception!
      try {
        tByteObjectHashMap0.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 200;
      TByteObjectHashMap<TByteObjectHashMap<String>> tByteObjectHashMap0 = new TByteObjectHashMap<TByteObjectHashMap<String>>(int0);
      assertEquals(433, tByteObjectHashMap0.capacity());
  }

//   @Test
//   public void test2()  throws Throwable  {
//       int int0 = 1812;
//       float float0 = 0.0F;
//       byte byte0 = (byte) (-10);
//       TByteObjectHashMap<AbstractMap.SimpleEntry<Integer, Byte>> tByteObjectHashMap0 = new TByteObjectHashMap<AbstractMap.SimpleEntry<Integer, Byte>>(int0, float0, byte0);
//       tByteObjectHashMap0.iterator();
//       assertEquals(-10, tByteObjectHashMap0.getNoEntryKey());
//       
//       float float1 = 257.65628F;
//       TByteObjectHashMap<TByteObjectHashMap<Integer>> tByteObjectHashMap1 = new TByteObjectHashMap<TByteObjectHashMap<Integer>>((int) byte0, float1);
//       byte byte1 = (byte)0;
//       TByteObjectProcedure<TByteObjectHashMap<Integer>> tByteObjectProcedure0 = null;
//       boolean boolean0 = tByteObjectHashMap1.forEachEntry(tByteObjectProcedure0);
//       assertEquals(true, boolean0);
//       assertEquals("{}", tByteObjectHashMap1.toString());
//       
//       boolean boolean1 = tByteObjectHashMap1.contains(byte1);
//       assertFalse(boolean1 == boolean0);
//   }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-1);
      TByteObjectHashMap<Byte> tByteObjectHashMap0 = new TByteObjectHashMap<Byte>(int0, int0);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-1);
      byteArray0[0] = byte0;
      byte byte1 = (byte)11;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      int int1 = (-1050);
      byte byte4 = (byte) (-27);
      TByteObjectHashMap<String> tByteObjectHashMap1 = new TByteObjectHashMap<String>(int1, (float) byte1, byte4);
      byteArray0[3] = byte3;
      byte byte5 = (byte) (-73);
      tByteObjectHashMap1.isEmpty();
      byteArray0[4] = byte5;
      byte byte6 = (byte) (-105);
      byteArray0[5] = byte6;
      byte byte7 = (byte)0;
      String string0 = "";
      tByteObjectHashMap1.putIfAbsent(byte7, string0);
      assertEquals(false, tByteObjectHashMap1.isEmpty());
      
      tByteObjectHashMap0.keys(byteArray0);
      TByteObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, Byte>> tByteObjectHashMap2 = new TByteObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, Byte>>();
      // Undeclared exception!
      try {
        tByteObjectHashMap2.setAutoCompactionFactor((float) byteArray0[4]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -73.0
         //
      }
  }

//   @Test
//   public void test4()  throws Throwable  {
//       int int0 = (-145);
//       byte byte0 = (byte)98;
//       TByteObjectHashMap<Object> tByteObjectHashMap0 = new TByteObjectHashMap<Object>(int0, (float) int0, byte0);
//       tByteObjectHashMap0.size();
//       assertEquals(98, tByteObjectHashMap0.getNoEntryKey());
//   }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-1073);
      int int1 = 1;
      float float0 = 0.0F;
      String string0 = ",";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0);
      // Undeclared exception!
      try {
        stringTokenizer0.nextToken(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 0;
          TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>(int0);
          tByteObjectHashMap0.compact();
          int int1 = (-1814);
          float float0 = (-371.20728F);
          TByteObjectHashMap<Integer> tByteObjectHashMap1 = new TByteObjectHashMap<Integer>(int1, float0);
          tByteObjectHashMap0.putAll((TByteObjectMap<? extends Integer>) tByteObjectHashMap1);
          String string0 = "";
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.GeneratedConstructorAccessor10.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 120;
      TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>(int0, int0);
      TByteObjectHashMap<TByteObjectHashMap<Byte>> tByteObjectHashMap1 = new TByteObjectHashMap<TByteObjectHashMap<Byte>>();
      tByteObjectHashMap1.capacity();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 845;
      int int1 = 1122;
      float float0 = 1356.6129F;
      byte byte0 = (byte)0;
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>(int1, float0, byte0);
      byte byte1 = tByteObjectHashMap0.getNoEntryKey();
      assertEquals((byte)0, byte1);
      
      float float1 = (-1944.4425F);
      byte byte2 = (byte)0;
      TByteObjectHashMap<Integer> tByteObjectHashMap1 = new TByteObjectHashMap<Integer>(int0, float1, byte2);
      byte[] byteArray0 = tByteObjectHashMap1._states;
      assertTrue(byte2 == byte1);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 435;
      float float0 = (-1471.6295F);
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>(int0, float0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)60;
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)32;
      byteArray0[2] = byte2;
      byte byte3 = (byte)23;
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-97);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-73);
      byteArray0[6] = byte6;
      tByteObjectHashMap0._states = byteArray0;
      assertSame(tByteObjectHashMap0._states, byteArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 1439;
      int int1 = 2965421;
      byte byte0 = (byte)73;
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>(int0);
      TByteObjectHashMap<Byte> tByteObjectHashMap1 = new TByteObjectHashMap<Byte>(int1, (float) int0, byte0);
      tByteObjectHashMap1.trimToSize();
      float float0 = 0.0F;
      TByteObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>> tByteObjectHashMap2 = new TByteObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>>(int0, float0);
      Integer integer0 = null;
      String string0 = "z13}Arb<C59";
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, string0);
      TByteObjectHashMap<String> tByteObjectHashMap3 = new TByteObjectHashMap<String>();
      tByteObjectHashMap3.getAutoCompactionFactor();
      AbstractMap.SimpleEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, String>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, String>>(integer0, abstractMap_SimpleImmutableEntry0);
      abstractMap_SimpleEntry0.getKey();
  }
}
