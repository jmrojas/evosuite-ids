/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TShortLongMapDecorator;
import gnu.trove.map.TShortLongMap;
import gnu.trove.map.hash.TShortLongHashMap;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InterruptedIOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortLongMapDecoratorEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      tShortLongHashMap0.tempDisableAutoCompaction();
      TShortLongMapDecorator tShortLongMapDecorator0 = new TShortLongMapDecorator((TShortLongMap) tShortLongHashMap0);
      TShortLongHashMap tShortLongHashMap1 = (TShortLongHashMap)tShortLongMapDecorator0.getMap();
      assertNotNull(tShortLongHashMap1);
      
      TShortLongMapDecorator tShortLongMapDecorator1 = new TShortLongMapDecorator((TShortLongMap) tShortLongHashMap1);
      String string0 = ">z>OF~0-!5n";
      Locale locale0 = Locale.forLanguageTag(string0);
      tShortLongMapDecorator0.keySet();
      String string1 = locale0.getDisplayLanguage();
      boolean boolean0 = tShortLongMapDecorator0.isEmpty();
      boolean boolean1 = tShortLongMapDecorator1.containsKey((Object) string1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-782);
      TShortLongMap tShortLongMap0 = null;
      TShortLongMapDecorator tShortLongMapDecorator0 = new TShortLongMapDecorator(tShortLongMap0);
      OutputStream outputStream0 = null;
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      tShortLongMapDecorator0.remove((Object) tShortLongHashMap0);
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TShortLongMapDecorator tShortLongMapDecorator0 = new TShortLongMapDecorator((TShortLongMap) tShortLongHashMap0);
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      String string0 = locale0.getDisplayVariant(locale1);
      tShortLongMapDecorator0.equals((Object) string0);
      short short0 = (short)1883;
      Short short1 = new Short(short0);
      Long long0 = new Long((long) short1);
      tShortLongMapDecorator0.put(short1, long0);
      assertEquals(1, tShortLongMapDecorator0.size());
      
      TShortLongMapDecorator tShortLongMapDecorator1 = new TShortLongMapDecorator();
      tShortLongMapDecorator0.clear();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 295;
      short short2 = (short) (-1598);
      Short short3 = new Short(short2);
      // Undeclared exception!
      try {
        tShortLongMapDecorator0.putAll((Map<? extends Short, ? extends Long>) tShortLongMapDecorator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test3()  throws Throwable  {
//       TShortLongMapDecorator tShortLongMapDecorator0 = new TShortLongMapDecorator();
//       PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
//       TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
//       TShortLongMapDecorator tShortLongMapDecorator1 = new TShortLongMapDecorator((TShortLongMap) tShortLongHashMap0);
//       tShortLongMapDecorator0.putAll((Map<? extends Short, ? extends Long>) tShortLongMapDecorator1);
//       boolean boolean0 = false;
//       PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0, boolean0);
//       PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
//       ObjectInputStream objectInputStream0 = null;
//       try {
//         objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
//         fail("Expecting exception: InterruptedIOException");
//       
//       } catch(InterruptedIOException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test4()  throws Throwable  {
      TShortLongMapDecorator tShortLongMapDecorator0 = new TShortLongMapDecorator();
      tShortLongMapDecorator0.entrySet();
      short short0 = (short) (-913);
      Short short1 = new Short(short0);
      long long0 = 0L;
      Long long1 = new Long(long0);
      // Undeclared exception!
      try {
        tShortLongMapDecorator0.put(short1, long1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 0;
          int int1 = 1797;
          TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(int1);
          TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap((TShortLongMap) tShortLongHashMap0);
          TShortLongMapDecorator tShortLongMapDecorator0 = new TShortLongMapDecorator((TShortLongMap) tShortLongHashMap1);
          String string0 = " > ";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
      long long0 = (-1L);
      Long long1 = new Long(long0);
      TShortLongMap tShortLongMap0 = null;
      TShortLongHashMap tShortLongHashMap0 = null;
      try {
        tShortLongHashMap0 = new TShortLongHashMap(tShortLongMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TShortLongMapDecorator tShortLongMapDecorator0 = new TShortLongMapDecorator();
      TShortLongMapDecorator tShortLongMapDecorator1 = new TShortLongMapDecorator();
      String string0 = "";
      try {
        Short.decode(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-717);
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(int0);
      TShortLongMapDecorator tShortLongMapDecorator0 = new TShortLongMapDecorator((TShortLongMap) tShortLongHashMap0);
      tShortLongMapDecorator0.hashCode();
      int int1 = 1843;
      float float0 = 1126.1697F;
      short short0 = (short) (-1202);
      Short short1 = new Short(short0);
      Long long0 = new Long((long) int1);
      String string0 = "";
      try {
        Short.decode(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(int1, int0);
      TShortLongMapDecorator tShortLongMapDecorator0 = new TShortLongMapDecorator((TShortLongMap) tShortLongHashMap0);
      String string0 = "";
      String string1 = "E*R3oK{u5Ru(qG<I2ed";
      File file0 = new File(string0, string1);
      File file1 = file0.getCanonicalFile();
      File file2 = new File(file1, string0);
      File file3 = file2.getParentFile();
      String string2 = file3.getCanonicalPath();
      tShortLongMapDecorator0.remove((Object) string2);
      float float0 = 109.19015F;
      short short0 = (short)0;
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap(int0, float0, short0, (long) int0);
      TShortLongMapDecorator tShortLongMapDecorator1 = new TShortLongMapDecorator((TShortLongMap) tShortLongHashMap1);
      InputStream inputStream0 = null;
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream(inputStream0, inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(int0);
      TShortLongMapDecorator tShortLongMapDecorator0 = new TShortLongMapDecorator((TShortLongMap) tShortLongHashMap0);
      String string0 = "";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TShortLongMap tShortLongMap0 = null;
      TShortLongMapDecorator tShortLongMapDecorator0 = new TShortLongMapDecorator(tShortLongMap0);
      int int0 = 0;
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(int0, int0);
      short short0 = (short)1334;
      Short short1 = new Short(short0);
      AbstractMap.SimpleEntry<TShortLongHashMap, Short> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<TShortLongHashMap, Short>(tShortLongHashMap0, short1);
      tShortLongMapDecorator0.get((Object) abstractMap_SimpleEntry0);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1817;
      float float0 = (-1649.6777F);
      int int1 = 0;
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(int1, int0);
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap((TShortLongMap) tShortLongHashMap0);
      TShortLongMapDecorator tShortLongMapDecorator0 = new TShortLongMapDecorator((TShortLongMap) tShortLongHashMap1);
      String string0 = "";
      String string1 = "";
      File file0 = new File(string1, string1);
      // Undeclared exception!
      try {
        File.createTempFile(string0, string1, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TShortLongMapDecorator tShortLongMapDecorator0 = new TShortLongMapDecorator();
      short short0 = (short) (-1560);
      Short short1 = new Short(short0);
      short1.intValue();
      tShortLongMapDecorator0.containsValue((Object) short1);
      // Undeclared exception!
      try {
        tShortLongMapDecorator0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TShortLongMapDecorator tShortLongMapDecorator0 = new TShortLongMapDecorator();
      short short0 = (short) (-1242);
      Short short1 = new Short(short0);
      long long0 = 1946L;
      Long long1 = new Long(long0);
      // Undeclared exception!
      try {
        tShortLongMapDecorator0.put(short1, long1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
