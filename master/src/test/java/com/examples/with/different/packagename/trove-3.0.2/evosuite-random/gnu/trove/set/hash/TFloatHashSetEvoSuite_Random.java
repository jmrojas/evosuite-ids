/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.set.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TFloatCollection;
import gnu.trove.impl.sync.TSynchronizedFloatList;
import gnu.trove.impl.sync.TSynchronizedRandomAccessFloatList;
import gnu.trove.impl.unmodifiable.TUnmodifiableFloatList;
import gnu.trove.list.TFloatList;
import gnu.trove.list.array.TFloatArrayList;
import gnu.trove.list.linked.TFloatLinkedList;
import gnu.trove.set.hash.TFloatHashSet;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.LinkedList;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatHashSetEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = 0.0F;
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet();
      String string0 = "";
      URI uRI0 = new URI(string0);
      String string1 = uRI0.getRawFragment();
      tFloatHashSet0.clear();
      boolean boolean0 = tFloatHashSet0.equals((Object) string1);
      assertEquals(false, boolean0);
      
      floatArray0[0] = float0;
      float float1 = (-342.99088F);
      floatArray0[1] = float1;
      float float2 = 10.0F;
      floatArray0[2] = float2;
      float float3 = (-614.0113F);
      floatArray0[3] = float3;
      float float4 = (-1656.7599F);
      TFloatHashSet tFloatHashSet1 = new TFloatHashSet(tFloatHashSet0._set);
      assertEquals("{}", tFloatHashSet0.toString());
      assertEquals("{0.0}", tFloatHashSet1.toString());
      
      floatArray0[4] = float4;
      TFloatHashSet tFloatHashSet2 = new TFloatHashSet(floatArray0);
      assertEquals("{-614.0113,-1656.7599,10.0,-342.99088,0.0}", tFloatHashSet2.toString());
      
      TFloatHashSet tFloatHashSet3 = new TFloatHashSet();
      assertFalse(tFloatHashSet3.equals(tFloatHashSet2));
  }

  @Test
  public void test1()  throws Throwable  {
      float float0 = (-1718.8969F);
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList(float0);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatLinkedList0);
      int int0 = (-1638);
      int int1 = 10;
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessFloatList0.subList(int0, int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // begin index can not be < 0
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet();
      float[] floatArray0 = new float[10];
      float float0 = (-1.0F);
      floatArray0[0] = float0;
      float float1 = 1130.6198F;
      floatArray0[1] = float1;
      float float2 = (-59.238968F);
      floatArray0[2] = float2;
      float float3 = 3.4028235E38F;
      floatArray0[3] = float3;
      float float4 = 1872.9202F;
      floatArray0[4] = float4;
      float float5 = Float.POSITIVE_INFINITY;
      floatArray0[5] = float5;
      float float6 = 0.0F;
      floatArray0[6] = float6;
      float float7 = 0.0F;
      floatArray0[7] = float7;
      float float8 = 1093.0408F;
      floatArray0[8] = float8;
      float float9 = 1.0F;
      floatArray0[9] = float9;
      tFloatHashSet0.removeAll(floatArray0);
      tFloatHashSet0.hashCode();
      float[] floatArray1 = new float[2];
      float float10 = 0.0F;
      int int0 = 771;
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(int0);
      tFloatHashSet0.containsAll((TFloatCollection) tFloatArrayList0);
      tFloatHashSet0.addAll((TFloatCollection) tFloatArrayList0);
      tFloatHashSet0.retainAll(floatArray1);
      tFloatHashSet0.isEmpty();
      tFloatHashSet0.add(float10);
      TFloatHashSet tFloatHashSet1 = new TFloatHashSet((TFloatCollection) tFloatHashSet0);
      float float11 = 1225.7687F;
      tFloatHashSet0.retainAll(floatArray1);
      tFloatHashSet0.trimToSize();
      LinkedList<TFloatHashSet> linkedList0 = new LinkedList<TFloatHashSet>();
      tFloatHashSet0.containsAll((Collection<?>) linkedList0);
      tFloatHashSet0.removeAll((Collection<?>) linkedList0);
      TFloatHashSet tFloatHashSet2 = new TFloatHashSet(int0);
      linkedList0.removeLastOccurrence((Object) tFloatHashSet2);
      floatArray1[0] = float11;
      tFloatHashSet1.getNoEntryValue();
      float float12 = (-1056.0411F);
      floatArray1[1] = float12;
      linkedList0.offer(tFloatHashSet0);
      tFloatHashSet1.retainAll((Collection<?>) linkedList0);
      tFloatHashSet0.retainAll(floatArray1);
      TFloatArrayList.wrap(tFloatHashSet0._set);
      assertEquals(3, tFloatHashSet0.capacity());
      assertTrue(tFloatHashSet0.equals(tFloatHashSet2));
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 1;
      float float0 = 2034.0088F;
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(int0, float0);
      String string0 = tFloatHashSet0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      int int1 = 1707;
      TFloatHashSet tFloatHashSet1 = new TFloatHashSet(int1, int1);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      float[] floatArray0 = tFloatHashSet0.toArray(tFloatHashSet1._set);
      assertNotNull(floatArray0);
      
      boolean boolean0 = tFloatHashSet1.containsAll((Collection<?>) linkedList0);
      int int2 = (-1186);
      boolean boolean1 = tFloatHashSet1.removeAll((Collection<?>) linkedList0);
      assertFalse(boolean1 == boolean0);
      
      TFloatHashSet tFloatHashSet2 = new TFloatHashSet(int2, int2);
      tFloatHashSet2.capacity();
      boolean boolean2 = tFloatHashSet1.containsAll(tFloatHashSet2._set);
      TFloatHashSet tFloatHashSet3 = new TFloatHashSet();
      boolean boolean3 = tFloatHashSet2.addAll((TFloatCollection) tFloatHashSet3);
      assertTrue(boolean3 == boolean2);
      
      float[] floatArray1 = tFloatHashSet2.toArray();
      assertNotNull(floatArray1);
      assertEquals("{}", tFloatHashSet2.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = "";
      int int0 = 202;
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(int0);
      int int1 = tFloatHashSet0.size();
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) int1;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      float float0 = (-1.0F);
      floatArray0[3] = float0;
      floatArray0[4] = (float) int1;
      floatArray0[5] = (float) int1;
      floatArray0[6] = (float) int0;
      floatArray0[7] = (float) int0;
      tFloatHashSet0.containsAll(floatArray0);
      linkedList0.peekFirst();
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = (-556);
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(int0);
      boolean boolean0 = false;
      tFloatHashSet0.reenableAutoCompaction(boolean0);
      float float0 = 0.0F;
      floatArray0[0] = float0;
      floatArray0[0] = float0;
      TFloatHashSet tFloatHashSet1 = new TFloatHashSet(floatArray0);
      boolean boolean1 = tFloatHashSet1.contains(float0);
      assertEquals("{0.0}", tFloatHashSet1.toString());
      assertEquals(1, tFloatHashSet1.size());
      assertEquals(true, boolean1);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(int0, int0);
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet((TFloatCollection) tSynchronizedFloatList0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) int0;
      floatArray0[6] = (float) int0;
      floatArray0[7] = (float) int0;
      floatArray0[8] = (float) int0;
      boolean boolean0 = tFloatHashSet0.removeAll(floatArray0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet();
      assertEquals(true, tFloatHashSet0.isEmpty());
      
      float float0 = 1407.6425F;
      boolean boolean0 = tFloatHashSet0.add(float0);
      assertEquals("{1407.6425}", tFloatHashSet0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-596);
      float float0 = 0.0F;
      float float1 = 238.09718F;
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(int0, float0, float1);
      float float2 = 1475.571F;
      tFloatHashSet0.setAutoCompactionFactor(float2);
      assertFalse(float2 == float1);
  }

  @Test
  public void test9()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = (-1274.4407F);
      floatArray0[0] = float0;
      float float1 = (-1662.0613F);
      floatArray0[1] = float1;
      float float2 = 466.7665F;
      floatArray0[2] = float2;
      float float3 = 1.4E-45F;
      floatArray0[3] = float3;
      float float4 = (-1477.8163F);
      floatArray0[4] = float4;
      float float5 = 1708.4218F;
      floatArray0[5] = float5;
      float float6 = 1.0F;
      floatArray0[6] = float6;
      float float7 = (-1.0F);
      floatArray0[7] = float7;
      float float8 = 0.0F;
      floatArray0[8] = float8;
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, float5);
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet((TFloatCollection) tFloatArrayList0);
      assertEquals("{-1.0,0.0,1.4E-45,1.0,-1477.8163,-1274.4407,466.7665,1708.4218,-1662.0613}", tFloatHashSet0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 815;
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(int0, int0);
      float float0 = 507.42255F;
      tFloatArrayList0.binarySearch(float0);
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet((TFloatCollection) tFloatArrayList0);
      boolean boolean0 = tFloatHashSet0.addAll((TFloatCollection) tFloatArrayList0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet((TFloatCollection) tFloatArrayList0);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-5);
      byte[] byteArray1 = tFloatHashSet0._states;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-87);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-24);
      tFloatHashSet0.removeAll((TFloatCollection) tFloatArrayList0);
      byteArray0[2] = byte2;
      tFloatHashSet0.getNoEntryValue();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      TFloatHashSet tFloatHashSet1 = new TFloatHashSet((Collection<? extends Float>) linkedList0);
      tFloatHashSet0._states = byteArray0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) byteArray0[1];
      floatArray0[1] = (float) byte2;
      floatArray0[2] = (float) byteArray0[0];
      // Undeclared exception!
      try {
        tFloatHashSet0.retainAll(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = (-1765.9115F);
      floatArray0[1] = float1;
      float float2 = (-1462.123F);
      floatArray0[2] = float2;
      float float3 = Float.POSITIVE_INFINITY;
      floatArray0[3] = float3;
      float float4 = 1.0F;
      floatArray0[4] = float4;
      float float5 = 10.0F;
      floatArray0[5] = float5;
      float float6 = 999.1501F;
      floatArray0[6] = float6;
      float float7 = 1680.1316F;
      floatArray0[7] = float7;
      float float8 = 522.8996F;
      floatArray0[8] = float8;
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(floatArray0);
      float[] floatArray1 = tFloatHashSet0.toArray();
      assertNotNull(floatArray1);
      assertEquals("{1.0,522.8996,1680.1316,-1462.123,999.1501,-1765.9115,10.0,Infinity,0.0}", tFloatHashSet0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList();
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList((TFloatCollection) tFloatLinkedList0);
      TUnmodifiableFloatList tUnmodifiableFloatList0 = new TUnmodifiableFloatList((TFloatList) tFloatArrayList0);
      int int0 = 0;
      int int1 = 0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) int1;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(floatArray0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-47);
      byteArray0[0] = byte0;
      byte byte1 = (byte)14;
      byteArray0[1] = byte1;
      byte byte2 = (byte)113;
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      tFloatHashSet0._states = byteArray0;
      TUnmodifiableFloatList tUnmodifiableFloatList1 = (TUnmodifiableFloatList)tUnmodifiableFloatList0.subList(int0, int1);
      TFloatHashSet tFloatHashSet1 = new TFloatHashSet((TFloatCollection) tUnmodifiableFloatList1);
      TFloatHashSet tFloatHashSet2 = new TFloatHashSet();
      float float0 = 603.4412F;
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      TFloatHashSet tFloatHashSet3 = new TFloatHashSet((TFloatCollection) tFloatHashSet2);
      tFloatHashSet2.containsAll((Collection<?>) linkedList0);
      tFloatHashSet2.add(float0);
      int int2 = 0;
      tFloatHashSet2.addAll((Collection<? extends Float>) linkedList0);
      float float1 = 772.31445F;
      TFloatHashSet tFloatHashSet4 = new TFloatHashSet(int2, float1);
      tFloatHashSet2.tempDisableAutoCompaction();
      assertEquals("{603.4412}", tFloatHashSet2.toString());
      
      boolean boolean0 = tFloatHashSet4.add(float1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet();
      tFloatHashSet0.getAutoCompactionFactor();
      float[] floatArray0 = new float[1];
      tFloatHashSet0.retainAll(floatArray0);
      float float0 = (-1419.0256F);
      int int0 = (-1);
      tFloatHashSet0.ensureCapacity(int0);
      floatArray0[0] = float0;
      tFloatHashSet0.addAll(floatArray0);
      floatArray0[0] = float0;
      tFloatHashSet0.getNoEntryValue();
      assertEquals("{-1419.0256}", tFloatHashSet0.toString());
      
      int int1 = (-455);
      TFloatHashSet tFloatHashSet1 = new TFloatHashSet(int1);
      Collection<TFloatHashSet> collection0 = null;
      // Undeclared exception!
      try {
        tFloatHashSet1.removeAll(collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
