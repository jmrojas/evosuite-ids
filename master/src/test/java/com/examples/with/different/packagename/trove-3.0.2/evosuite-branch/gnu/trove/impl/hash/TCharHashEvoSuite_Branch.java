/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TCharObjectMap;
import gnu.trove.map.hash.TCharObjectHashMap;
import gnu.trove.procedure.TCharProcedure;
import gnu.trove.set.hash.TCharHashSet;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharHashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TCharHash.getNoEntryValue()C: root-Branch
   * 2 gnu.trove.impl.hash.TCharHash.<init>(IF)V: I15 Branch 3 IFEQ L103 - true
   * 3 gnu.trove.impl.hash.TCharHash.setUp(I)I: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TCharHashSet tCharHashSet0 = new TCharHashSet(1570, 1570);
      char char0 = tCharHashSet0.getNoEntryValue();
      assertEquals('\u0000', char0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TCharHash.<init>(IFC)V: I14 Branch 4 IFEQ L122 - true
   */

  @Test
  public void test1()  throws Throwable  {
      TCharHashSet tCharHashSet0 = new TCharHashSet((int) '\u0000', (float) '\u0000', '\u0000');
      assertEquals('\u0000', tCharHashSet0.getNoEntryValue());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TCharHash.<init>(IFC)V: I14 Branch 4 IFEQ L122 - false
   */

  @Test
  public void test2()  throws Throwable  {
      TCharHashSet tCharHashSet0 = new TCharHashSet((int) 'r', (float) '\u0000', 'r');
      assertEquals('r', tCharHashSet0.getNoEntryValue());
  }

  //Test case number: 3
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TCharHash.contains(C)Z: I5 Branch 5 IFLT L163 - true
   * 2 gnu.trove.impl.hash.TCharHash.index(C)I: I37 Branch 9 IFNE L213 - false
   * 3 gnu.trove.impl.hash.TCharHash.<init>()V: I13 Branch 1 IFEQ L68 - true
   */

  @Test
  public void test3()  throws Throwable  {
      TCharHashSet tCharHashSet0 = new TCharHashSet();
      boolean boolean0 = tCharHashSet0.containsAll(tCharHashSet0._set);
      assertEquals(23, tCharHashSet0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TCharHash.forEach(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 6 IFLE L177 - true
   * 2 gnu.trove.impl.hash.TCharHash.forEach(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 6 IFLE L177 - false
   * 3 gnu.trove.impl.hash.TCharHash.forEach(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 7 IF_ICMPNE L178 - true
   * 4 gnu.trove.impl.hash.TCharHash.<init>(I)V: I14 Branch 2 IFEQ L85 - true
   */

  @Test
  public void test4()  throws Throwable  {
      TCharObjectHashMap<String> tCharObjectHashMap0 = new TCharObjectHashMap<String>((-2147483640));
      boolean boolean0 = tCharObjectHashMap0.forEachKey((TCharProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 5
  /*
   * 5 covered goals:
   * 1 gnu.trove.impl.hash.TCharHash.forEach(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 7 IF_ICMPNE L178 - false
   * 2 gnu.trove.impl.hash.TCharHash.forEach(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 6 IFLE L177 - false
   * 3 gnu.trove.impl.hash.TCharHash.forEach(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 7 IF_ICMPNE L178 - true
   * 4 gnu.trove.impl.hash.TCharHash.insertKeyAt(IC)V: root-Branch
   * 5 gnu.trove.impl.hash.TCharHash.insertKey(C)I: I30 Branch 17 IFNE L263 - false
   */

  @Test
  public void test5()  throws Throwable  {
      TCharObjectHashMap<Object> tCharObjectHashMap0 = new TCharObjectHashMap<Object>(941, (float) 941, 'j');
      tCharObjectHashMap0.putIfAbsent('j', (Object) "ja-JP");
      // Undeclared exception!
      try {
        tCharObjectHashMap0.forEachKey((TCharProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 6
  /*
   * 20 covered goals:
   * 1 gnu.trove.impl.hash.TCharHash.index(C)I: I51 Branch 11 IF_ICMPNE L216 - true
   * 2 gnu.trove.impl.hash.TCharHash.indexRehashed(CIIB)I: I46 Branch 13 IFNE L235 - true
   * 3 gnu.trove.impl.hash.TCharHash.indexRehashed(CIIB)I: I58 Branch 14 IF_ICMPNE L239 - false
   * 4 gnu.trove.impl.hash.TCharHash.indexRehashed(CIIB)I: I61 Branch 15 IF_ICMPEQ L239 - false
   * 5 gnu.trove.impl.hash.TCharHash.insertKey(C)I: I56 Branch 19 IF_ICMPNE L270 - true
   * 6 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I28 Branch 20 IF_ICMPNE L290 - true
   * 7 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I45 Branch 22 IFGE L294 - false
   * 8 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I62 Branch 23 IFNE L300 - true
   * 9 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I62 Branch 23 IFNE L300 - false
   * 10 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I67 Branch 24 IF_ICMPEQ L301 - true
   * 11 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I97 Branch 25 IF_ICMPNE L311 - false
   * 12 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I103 Branch 26 IF_ICMPNE L311 - false
   * 13 gnu.trove.impl.hash.TCharHash.contains(C)Z: I5 Branch 5 IFLT L163 - false
   * 14 gnu.trove.impl.hash.TCharHash.<init>(IF)V: I15 Branch 3 IFEQ L103 - true
   * 15 gnu.trove.impl.hash.TCharHash.insertKey(C)I: I30 Branch 17 IFNE L263 - true
   * 16 gnu.trove.impl.hash.TCharHash.insertKey(C)I: I50 Branch 18 IF_ICMPNE L270 - false
   * 17 gnu.trove.impl.hash.TCharHash.insertKey(C)I: I56 Branch 19 IF_ICMPNE L270 - false
   * 18 gnu.trove.impl.hash.TCharHash.index(C)I: I37 Branch 9 IFNE L213 - true
   * 19 gnu.trove.impl.hash.TCharHash.index(C)I: I46 Branch 10 IF_ICMPNE L216 - false
   * 20 gnu.trove.impl.hash.TCharHash.indexRehashed(CIIB)I: I29 Branch 12 IFGE L230 - false
   */

  @Test
  public void test6()  throws Throwable  {
      TCharObjectHashMap<String> tCharObjectHashMap0 = new TCharObjectHashMap<String>();
      TCharObjectHashMap<Object> tCharObjectHashMap1 = new TCharObjectHashMap<Object>((TCharObjectMap<?>) tCharObjectHashMap0);
      char[] charArray0 = new char[8];
      charArray0[5] = '\\';
      charArray0[6] = 'L';
      charArray0[7] = 'L';
      TCharHashSet tCharHashSet0 = new TCharHashSet(charArray0);
      boolean boolean0 = tCharHashSet0.containsAll(tCharObjectHashMap1._set);
      assertEquals(true, boolean0);
      assertEquals("{\u0000,L,\\}", tCharHashSet0.toString());
  }

  //Test case number: 7
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.TCharHash.indexRehashed(CIIB)I: I70 Branch 16 IF_ICMPNE L241 - false
   * 2 gnu.trove.impl.hash.TCharHash.contains(C)Z: I5 Branch 5 IFLT L163 - true
   * 3 gnu.trove.impl.hash.TCharHash.index(C)I: I46 Branch 10 IF_ICMPNE L216 - true
   * 4 gnu.trove.impl.hash.TCharHash.indexRehashed(CIIB)I: I29 Branch 12 IFGE L230 - true
   * 5 gnu.trove.impl.hash.TCharHash.indexRehashed(CIIB)I: I58 Branch 14 IF_ICMPNE L239 - true
   * 6 gnu.trove.impl.hash.TCharHash.indexRehashed(CIIB)I: I70 Branch 16 IF_ICMPNE L241 - true
   */

  @Test
  public void test7()  throws Throwable  {
      TCharHashSet tCharHashSet0 = new TCharHashSet();
      assertEquals(23, tCharHashSet0.capacity());
      
      char[] charArray0 = new char[6];
      tCharHashSet0.compact();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-1);
      tCharHashSet0._states = byteArray0;
      charArray0[5] = 'Q';
      boolean boolean0 = tCharHashSet0.containsAll(charArray0);
      assertEquals(false, boolean0);
  }

  //Test case number: 8
  /*
   * 25 covered goals:
   * 1 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I31 Branch 21 IF_ICMPNE L290 - true
   * 2 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I45 Branch 22 IFGE L294 - true
   * 3 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I97 Branch 25 IF_ICMPNE L311 - true
   * 4 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I115 Branch 27 IF_ICMPNE L316 - true
   * 5 gnu.trove.impl.hash.TCharHash.removeAt(I)V: root-Branch
   * 6 gnu.trove.impl.hash.TCharHash.<init>(I)V: I14 Branch 2 IFEQ L85 - true
   * 7 gnu.trove.impl.hash.TCharHash.insertKey(C)I: I30 Branch 17 IFNE L263 - false
   * 8 gnu.trove.impl.hash.TCharHash.insertKey(C)I: I50 Branch 18 IF_ICMPNE L270 - false
   * 9 gnu.trove.impl.hash.TCharHash.insertKey(C)I: I56 Branch 19 IF_ICMPNE L270 - false
   * 10 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I28 Branch 20 IF_ICMPNE L290 - false
   * 11 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I31 Branch 21 IF_ICMPNE L290 - false
   * 12 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I67 Branch 24 IF_ICMPEQ L301 - false
   * 13 gnu.trove.impl.hash.TCharHash.index(C)I: I37 Branch 9 IFNE L213 - true
   * 14 gnu.trove.impl.hash.TCharHash.index(C)I: I46 Branch 10 IF_ICMPNE L216 - true
   * 15 gnu.trove.impl.hash.TCharHash.index(C)I: I46 Branch 10 IF_ICMPNE L216 - false
   * 16 gnu.trove.impl.hash.TCharHash.index(C)I: I51 Branch 11 IF_ICMPNE L216 - false
   * 17 gnu.trove.impl.hash.TCharHash.indexRehashed(CIIB)I: I29 Branch 12 IFGE L230 - true
   * 18 gnu.trove.impl.hash.TCharHash.indexRehashed(CIIB)I: I29 Branch 12 IFGE L230 - false
   * 19 gnu.trove.impl.hash.TCharHash.indexRehashed(CIIB)I: I46 Branch 13 IFNE L235 - true
   * 20 gnu.trove.impl.hash.TCharHash.indexRehashed(CIIB)I: I46 Branch 13 IFNE L235 - false
   * 21 gnu.trove.impl.hash.TCharHash.indexRehashed(CIIB)I: I58 Branch 14 IF_ICMPNE L239 - true
   * 22 gnu.trove.impl.hash.TCharHash.indexRehashed(CIIB)I: I58 Branch 14 IF_ICMPNE L239 - false
   * 23 gnu.trove.impl.hash.TCharHash.indexRehashed(CIIB)I: I61 Branch 15 IF_ICMPEQ L239 - true
   * 24 gnu.trove.impl.hash.TCharHash.indexRehashed(CIIB)I: I70 Branch 16 IF_ICMPNE L241 - true
   * 25 gnu.trove.impl.hash.TCharHash.insertKey(C)I: I50 Branch 18 IF_ICMPNE L270 - true
   */

  @Test
  public void test8()  throws Throwable  {
      char[] charArray0 = new char[19];
      charArray0[13] = '*';
      TCharHashSet tCharHashSet0 = new TCharHashSet(charArray0);
      tCharHashSet0.removeAll(charArray0);
      assertEquals(true, tCharHashSet0.isEmpty());
      
      boolean boolean0 = tCharHashSet0.addAll(charArray0);
      assertEquals(true, boolean0);
  }

  //Test case number: 9
  /*
   * 17 covered goals:
   * 1 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I103 Branch 26 IF_ICMPNE L311 - true
   * 2 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I115 Branch 27 IF_ICMPNE L316 - false
   * 3 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I120 Branch 28 IF_ICMPEQ L320 - true
   * 4 gnu.trove.impl.hash.TCharHash.setUp(I)I: root-Branch
   * 5 gnu.trove.impl.hash.TCharHash.insertKeyAt(IC)V: root-Branch
   * 6 gnu.trove.impl.hash.TCharHash.insertKey(C)I: I30 Branch 17 IFNE L263 - true
   * 7 gnu.trove.impl.hash.TCharHash.insertKey(C)I: I50 Branch 18 IF_ICMPNE L270 - true
   * 8 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I28 Branch 20 IF_ICMPNE L290 - true
   * 9 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I45 Branch 22 IFGE L294 - true
   * 10 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I45 Branch 22 IFGE L294 - false
   * 11 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I62 Branch 23 IFNE L300 - true
   * 12 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I62 Branch 23 IFNE L300 - false
   * 13 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I67 Branch 24 IF_ICMPEQ L301 - true
   * 14 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I97 Branch 25 IF_ICMPNE L311 - true
   * 15 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I97 Branch 25 IF_ICMPNE L311 - false
   * 16 gnu.trove.impl.hash.TCharHash.insertKeyRehash(CIIB)I: I115 Branch 27 IF_ICMPNE L316 - true
   * 17 gnu.trove.impl.hash.TCharHash.<init>()V: I13 Branch 1 IFEQ L68 - true
   */

  @Test
  public void test9()  throws Throwable  {
      TCharHashSet tCharHashSet0 = new TCharHashSet();
      char[] charArray0 = new char[6];
      tCharHashSet0.compact();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-33);
      tCharHashSet0._states = byteArray0;
      charArray0[5] = 'Q';
      // Undeclared exception!
      try {
        tCharHashSet0.addAll(charArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No free or removed slots available. Key set full?!!
         //
      }
  }
}
