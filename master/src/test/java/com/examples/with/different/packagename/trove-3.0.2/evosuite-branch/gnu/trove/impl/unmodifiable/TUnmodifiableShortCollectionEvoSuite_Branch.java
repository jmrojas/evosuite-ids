/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TShortCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessShortList;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortList;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortSet;
import gnu.trove.list.TShortList;
import gnu.trove.list.array.TShortArrayList;
import gnu.trove.list.linked.TShortLinkedList;
import gnu.trove.procedure.TShortProcedure;
import gnu.trove.set.TShortSet;
import gnu.trove.set.hash.TShortHashSet;
import java.util.Collection;
import java.util.LinkedList;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableShortCollectionEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 5 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection$1.next()S: root-Branch
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection$1.<init>(Lgnu/trove/impl/unmodifiable/TUnmodifiableShortCollection;)V: root-Branch
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection$1.hasNext()Z: root-Branch
   * 4 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.iterator()Lgnu/trove/iterator/TShortIterator;: root-Branch
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.<init>(Lgnu/trove/TShortCollection;)V: I7 Branch 1 IFNONNULL L58 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      short[] shortArray0 = new short[9];
      tShortArrayList0.add(shortArray0);
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortArrayList0);
      tShortArrayList0.removeAll((TShortCollection) tUnmodifiableRandomAccessShortList0);
      assertEquals(4, tShortArrayList0.size());
      assertEquals("{0, 0, 0, 0}", tShortArrayList0.toString());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.removeAll(Ljava/util/Collection;)Z: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TShortHashSet tShortHashSet0 = new TShortHashSet();
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      // Undeclared exception!
      try {
        tUnmodifiableShortSet0.removeAll((Collection<?>) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TShortHashSet tShortHashSet0 = new TShortHashSet(10);
      TUnmodifiableShortCollection tUnmodifiableShortCollection0 = new TUnmodifiableShortCollection((TShortCollection) tShortHashSet0);
      String string0 = tUnmodifiableShortCollection0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.add(S)Z: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TShortHashSet tShortHashSet0 = new TShortHashSet(1550);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      // Undeclared exception!
      try {
        tUnmodifiableShortSet0.add((short)458);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.containsAll(Ljava/util/Collection;)Z: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TShortHashSet tShortHashSet0 = new TShortHashSet();
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = tUnmodifiableShortSet0.containsAll((Collection<?>) linkedList0);
      assertEquals(true, boolean0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.addAll(Lgnu/trove/TShortCollection;)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TShortHashSet tShortHashSet0 = new TShortHashSet();
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      // Undeclared exception!
      try {
        tUnmodifiableShortSet0.addAll((TShortCollection) tShortHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.retainAll(Ljava/util/Collection;)Z: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      short[] shortArray0 = new short[5];
      TShortHashSet tShortHashSet0 = new TShortHashSet(shortArray0);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try {
        tUnmodifiableShortSet0.retainAll((Collection<?>) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.toArray([S)[S: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortLinkedList0);
      short[] shortArray0 = new short[16];
      short[] shortArray1 = tUnmodifiableShortList0.toArray(shortArray0);
      assertSame(shortArray0, shortArray1);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.remove(S)Z: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TShortHashSet tShortHashSet0 = new TShortHashSet(10);
      TUnmodifiableShortCollection tUnmodifiableShortCollection0 = new TUnmodifiableShortCollection((TShortCollection) tShortHashSet0);
      // Undeclared exception!
      try {
        tUnmodifiableShortCollection0.remove((short)183);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.removeAll([S)Z: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TShortHashSet tShortHashSet0 = new TShortHashSet();
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      // Undeclared exception!
      try {
        tUnmodifiableShortSet0.removeAll(tShortHashSet0._set);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.containsAll([S)Z: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TUnmodifiableShortCollection tUnmodifiableShortCollection0 = new TUnmodifiableShortCollection((TShortCollection) tShortArrayList0);
      short[] shortArray0 = new short[2];
      boolean boolean0 = tUnmodifiableShortCollection0.containsAll(shortArray0);
      assertEquals(false, boolean0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.clear()V: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableShortList0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.getNoEntryValue()S: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TUnmodifiableShortCollection tUnmodifiableShortCollection0 = new TUnmodifiableShortCollection((TShortCollection) tShortArrayList0);
      short short0 = tUnmodifiableShortCollection0.getNoEntryValue();
      assertEquals((short)0, short0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.size()I: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortArrayList0);
      int int0 = tUnmodifiableRandomAccessShortList0.size();
      assertEquals(0, int0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.containsAll(Lgnu/trove/TShortCollection;)Z: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortArrayList0);
      boolean boolean0 = tUnmodifiableShortList0.containsAll((TShortCollection) tShortArrayList0);
      assertEquals(true, boolean0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.isEmpty()Z: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TUnmodifiableShortCollection tUnmodifiableShortCollection0 = new TUnmodifiableShortCollection((TShortCollection) tShortArrayList0);
      boolean boolean0 = tUnmodifiableShortCollection0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.forEach(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TUnmodifiableShortCollection tUnmodifiableShortCollection0 = new TUnmodifiableShortCollection((TShortCollection) tShortArrayList0);
      boolean boolean0 = tUnmodifiableShortCollection0.forEach((TShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.addAll([S)Z: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TShortHashSet tShortHashSet0 = new TShortHashSet((-583), (-583));
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      // Undeclared exception!
      try {
        tUnmodifiableShortSet0.addAll(tShortHashSet0._set);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.contains(S)Z: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TUnmodifiableShortCollection tUnmodifiableShortCollection0 = new TUnmodifiableShortCollection((TShortCollection) tShortArrayList0);
      boolean boolean0 = tUnmodifiableShortCollection0.contains((short)72);
      assertEquals(false, boolean0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.retainAll(Lgnu/trove/TShortCollection;)Z: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList((short)313);
      TUnmodifiableShortCollection tUnmodifiableShortCollection0 = new TUnmodifiableShortCollection((TShortCollection) tShortLinkedList0);
      // Undeclared exception!
      try {
        tUnmodifiableShortCollection0.retainAll((TShortCollection) tShortLinkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.removeAll(Lgnu/trove/TShortCollection;)Z: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TShortHashSet tShortHashSet0 = new TShortHashSet();
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      // Undeclared exception!
      try {
        tUnmodifiableShortSet0.removeAll((TShortCollection) tShortHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.toArray()[S: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TShortHashSet tShortHashSet0 = new TShortHashSet(10);
      TUnmodifiableShortCollection tUnmodifiableShortCollection0 = new TUnmodifiableShortCollection((TShortCollection) tShortHashSet0);
      short[] shortArray0 = tUnmodifiableShortCollection0.toArray();
      assertNotNull(shortArray0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.retainAll([S)Z: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortLinkedList0);
      short[] shortArray0 = new short[16];
      // Undeclared exception!
      try {
        tUnmodifiableShortList0.retainAll(shortArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 23
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.addAll(Ljava/util/Collection;)Z: root-Branch
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.<init>(Lgnu/trove/TShortCollection;)V: I7 Branch 1 IFNONNULL L58 - true
   */

  @Test
  public void test23()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortLinkedList0);
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessShortList0.addAll((Collection<? extends Short>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection.<init>(Lgnu/trove/TShortCollection;)V: I7 Branch 1 IFNONNULL L58 - false
   */

  @Test
  public void test24()  throws Throwable  {
      TUnmodifiableShortCollection tUnmodifiableShortCollection0 = null;
      try {
        tUnmodifiableShortCollection0 = new TUnmodifiableShortCollection((TShortCollection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
