/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.HashFunctions;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class HashFunctionsEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 0;
      HashFunctions.hash(int0);
      HashFunctions.hash(double0);
      HashFunctions hashFunctions0 = new HashFunctions();
      double double1 = 1915.5432233207728;
      HashFunctions.hash(double1);
      HashFunctions hashFunctions1 = new HashFunctions();
      HashFunctions.hash((Object) hashFunctions1);
      HashFunctions hashFunctions2 = new HashFunctions();
      assertFalse(hashFunctions2.equals(hashFunctions0));
  }

//   @Test
//   public void test1()  throws Throwable  {
//       float float0 = 0.0F;
//       int int0 = HashFunctions.hash(float0);
//       HashFunctions hashFunctions0 = new HashFunctions();
//       float float1 = 228.8276F;
//       HashFunctions.hash((long) int0);
//       long long0 = 155L;
//       HashFunctions.hash(long0);
//       long long1 = (-1L);
//       HashFunctions.hash(long1);
//       HashFunctions.hash(float1);
//       float float2 = (-1100.0275F);
//       HashFunctions.fastCeil(float2);
//       int int1 = HashFunctions.hash((Object) hashFunctions0);
//       assertEquals(2078059187, int1);
//       
//       double double0 = (-1806.227449790564);
//       String string0 = "-Wj!iXU";
//       HashFunctions.hash((Object) string0);
//       int int2 = HashFunctions.hash(double0);
//       assertEquals(671430457, int2);
//   }

//   @Test
//   public void test2()  throws Throwable  {
//       float float0 = 1267.4651F;
//       HashFunctions.fastCeil(float0);
//       HashFunctions hashFunctions0 = new HashFunctions();
//       double double0 = (-1.0);
//       int int0 = HashFunctions.hash(double0);
//       int int1 = HashFunctions.hash(int0);
//       long long0 = 0L;
//       HashFunctions hashFunctions1 = new HashFunctions();
//       HashFunctions.hash((float) int0);
//       HashFunctions.hash(long0);
//       HashFunctions hashFunctions2 = new HashFunctions();
//       float float1 = (-994.37354F);
//       HashFunctions.fastCeil(float1);
//       int int2 = HashFunctions.hash((Object) hashFunctions2);
//       HashFunctions hashFunctions3 = new HashFunctions();
//       HashFunctions hashFunctions4 = new HashFunctions();
//       HashFunctions.hash((Object) hashFunctions4);
//       float float2 = (-661.213F);
//       int int3 = HashFunctions.hash(float2);
//       Object object0 = new Object();
//       HashFunctions.hash(object0);
//       HashFunctions.hash(int2);
//       double double1 = 0.0;
//       float float3 = 1654.0355F;
//       HashFunctions.fastCeil(float3);
//       HashFunctions.fastCeil((float) int1);
//       int int4 = HashFunctions.hash((float) int2);
//       assertEquals(1531378336, int4);
//       
//       HashFunctions.hash(double0);
//       HashFunctions.hash(double1);
//       long long1 = 0L;
//       HashFunctions.hash(long1);
//       int int5 = HashFunctions.hash((long) int3);
//       assertEquals(758361222, int5);
//   }

//   @Test
//   public void test3()  throws Throwable  {
//       float float0 = (-967.48816F);
//       HashFunctions.fastCeil(float0);
//       float float1 = (-31.081554F);
//       int int0 = (-844);
//       HashFunctions.hash(int0);
//       int int1 = (-1171);
//       int int2 = HashFunctions.hash(int1);
//       float float2 = 370.1811F;
//       HashFunctions.hash((float) int2);
//       HashFunctions.hash(float2);
//       HashFunctions hashFunctions0 = new HashFunctions();
//       float float3 = (-1753.1195F);
//       HashFunctions.hash(float3);
//       int int3 = (-290);
//       int int4 = 0;
//       HashFunctions.hash(int4);
//       HashFunctions.hash(int3);
//       Object object0 = new Object();
//       int int5 = (-415);
//       HashFunctions.hash(float1);
//       HashFunctions.hash(int5);
//       double double0 = 1337.453258710132;
//       HashFunctions.hash(double0);
//       HashFunctions hashFunctions1 = new HashFunctions();
//       HashFunctions hashFunctions2 = new HashFunctions();
//       int int6 = HashFunctions.hash(object0);
//       assertEquals(386125083, int6);
//       
//       double double1 = 0.0;
//       HashFunctions.hash(double1);
//       int int7 = HashFunctions.fastCeil(float1);
//       float float4 = 0.0F;
//       HashFunctions.fastCeil(float4);
//       double double2 = (-1562.7140318496186);
//       float float5 = (-1384.5278F);
//       HashFunctions.hash(int7);
//       HashFunctions.fastCeil(float5);
//       Object object1 = null;
//       HashFunctions.hash(int3);
//       HashFunctions.hash(object1);
//       HashFunctions.hash(double2);
//       int int8 = HashFunctions.fastCeil(float5);
//       assertEquals((-1384), int8);
//   }

//   @Test
//   public void test4()  throws Throwable  {
//       int int0 = 0;
//       HashFunctions.hash(int0);
//       long long0 = 0L;
//       HashFunctions.hash(long0);
//       double double0 = (-1.0);
//       HashFunctions hashFunctions0 = new HashFunctions();
//       int int1 = HashFunctions.hash((Object) hashFunctions0);
//       assertEquals(831725722, int1);
//       
//       long long1 = 0L;
//       HashFunctions.hash(long1);
//       HashFunctions.hash(double0);
//       int int2 = (-632);
//       Object object0 = new Object();
//       long long2 = 0L;
//       HashFunctions.hash(long2);
//       HashFunctions.hash(object0);
//       HashFunctions.hash(int2);
//       Object object1 = new Object();
//       int int3 = HashFunctions.hash(object1);
//       assertEquals(1747317211, int3);
//   }

  @Test
  public void test5()  throws Throwable  {
      float float0 = 367.6404F;
      long long0 = 1755L;
      int int0 = HashFunctions.hash(long0);
      assertEquals(1755, int0);
      
      int int1 = HashFunctions.hash(float0);
      assertEquals(1382233819, int1);
      
      float float1 = 6.6360896E8F;
      int int2 = HashFunctions.fastCeil(float1);
      assertEquals(663608960, int2);
  }

//   @Test
//   public void test6()  throws Throwable  {
//       double double0 = 1.0;
//       int int0 = HashFunctions.hash(double0);
//       float float0 = 0.0F;
//       HashFunctions.fastCeil(float0);
//       int int1 = HashFunctions.hash(double0);
//       HashFunctions.hash((long) int0);
//       float float1 = 1436.275F;
//       HashFunctions hashFunctions0 = new HashFunctions();
//       long long0 = (-1L);
//       HashFunctions.hash(long0);
//       int int2 = HashFunctions.hash((Object) hashFunctions0);
//       assertEquals(154440776, int2);
//       
//       HashFunctions.hash(float1);
//       HashFunctions hashFunctions1 = new HashFunctions();
//       HashFunctions.fastCeil((float) long0);
//       HashFunctions.hash(double0);
//       int int3 = 0;
//       HashFunctions.hash(int3);
//       float float2 = 1.0F;
//       float float3 = 0.0F;
//       HashFunctions.hash(float3);
//       double double1 = (-1.0);
//       float float4 = (-1849.5881F);
//       HashFunctions.hash(float4);
//       HashFunctions.hash(double1);
//       int int4 = HashFunctions.fastCeil(float2);
//       HashFunctions.hash((float) int4);
//       float float5 = (-1632.4276F);
//       HashFunctions.fastCeil(float5);
//       int int5 = 1367;
//       HashFunctions.hash(int5);
//       HashFunctions.hash((float) int1);
//       float float6 = (-521.09235F);
//       double double2 = (-1178.812900700918);
//       HashFunctions.hash(double2);
//       HashFunctions.hash((double) float6);
//       HashFunctions.hash(float6);
//       long long1 = 1324L;
//       HashFunctions.hash(long1);
//       double double3 = 0.0;
//       int int6 = HashFunctions.hash(double3);
//       assertEquals(0, int6);
//   }

  @Test
  public void test7()  throws Throwable  {
      double double0 = 1423.1466694831802;
      float float0 = 0.0F;
      int int0 = HashFunctions.fastCeil(float0);
      assertEquals(0, int0);
      
      int int1 = HashFunctions.hash(double0);
      assertEquals(1880120004, int1);
      
      double double1 = 1.0;
      HashFunctions.hash(double1);
      long long0 = 608L;
      int int2 = HashFunctions.hash(long0);
      assertEquals(608, int2);
  }

  @Test
  public void test8()  throws Throwable  {
      String string0 = "";
      HashFunctions.hash((Object) string0);
      int int0 = 506;
      HashFunctions hashFunctions0 = new HashFunctions();
      int int1 = HashFunctions.hash(int0);
      HashFunctions.hash(int0);
      long long0 = (-951L);
      int int2 = HashFunctions.hash(long0);
      HashFunctions hashFunctions1 = new HashFunctions();
      int int3 = 484;
      HashFunctions.hash(int3);
      int int4 = HashFunctions.hash((long) int2);
      assertEquals(950, int4);
      
      float float0 = (-164.21423F);
      int int5 = HashFunctions.hash(float0);
      assertEquals((-775226657), int5);
      
      int int6 = HashFunctions.hash(int1);
      HashFunctions hashFunctions2 = new HashFunctions();
      int int7 = HashFunctions.hash(int6);
      assertEquals(506, int7);
      
      double double0 = 378.7845768725522;
      int int8 = HashFunctions.hash(double0);
      assertEquals((-536010631), int8);
      
      float float1 = (-996.74146F);
      int int9 = HashFunctions.fastCeil(float1);
      assertEquals((-996), int9);
  }

//   @Test
//   public void test9()  throws Throwable  {
//       float float0 = 0.0F;
//       HashFunctions.fastCeil(float0);
//       HashFunctions hashFunctions0 = new HashFunctions();
//       int int0 = HashFunctions.hash((Object) hashFunctions0);
//       assertEquals(389394221, int0);
//       
//       HashFunctions.fastCeil(float0);
//       HashFunctions.hash(float0);
//       float float1 = 1.0F;
//       int int1 = HashFunctions.hash(float1);
//       HashFunctions hashFunctions1 = new HashFunctions();
//       float float2 = 1241.6971F;
//       HashFunctions.hash(float2);
//       double double0 = 566.7109781882258;
//       HashFunctions.hash((float) int1);
//       HashFunctions hashFunctions2 = new HashFunctions();
//       int int2 = HashFunctions.hash((Object) hashFunctions2);
//       int int3 = (-617);
//       HashFunctions.hash(int3);
//       int int4 = HashFunctions.hash(int2);
//       HashFunctions.hash((float) int1);
//       HashFunctions hashFunctions3 = new HashFunctions();
//       HashFunctions.hash(int4);
//       HashFunctions hashFunctions4 = new HashFunctions();
//       String string0 = "X;yiZMe!];|";
//       HashFunctions.hash((Object) string0);
//       HashFunctions.hash((Object) hashFunctions3);
//       HashFunctions.hash((double) int1);
//       HashFunctions hashFunctions5 = new HashFunctions();
//       HashFunctions.hash((Object) hashFunctions5);
//       HashFunctions hashFunctions6 = new HashFunctions();
//       HashFunctions.hash((Object) hashFunctions6);
//       Object object0 = new Object();
//       HashFunctions.hash(object0);
//       int int5 = HashFunctions.hash(double0);
//       int int6 = HashFunctions.fastCeil((float) int5);
//       HashFunctions.hash(int6);
//       HashFunctions hashFunctions7 = new HashFunctions();
//       HashFunctions.fastCeil((float) int5);
//       String string1 = "I5";
//       int int7 = HashFunctions.hash((Object) string1);
//       assertEquals(2316, int7);
//   }

//   @Test
//   public void test10()  throws Throwable  {
//       float float0 = 0.0F;
//       int int0 = HashFunctions.fastCeil(float0);
//       HashFunctions.hash((long) int0);
//       long long0 = 0L;
//       HashFunctions hashFunctions0 = new HashFunctions();
//       double double0 = 1740.8131721536397;
//       HashFunctions.hash(double0);
//       Object object0 = new Object();
//       HashFunctions.hash(object0);
//       HashFunctions.hash(long0);
//       long long1 = 921L;
//       String string0 = "";
//       int int1 = HashFunctions.hash((Object) string0);
//       Object object1 = new Object();
//       int int2 = HashFunctions.hash(object1);
//       assertEquals(2141531439, int2);
//       
//       long long2 = (-1L);
//       HashFunctions.hash((long) int1);
//       HashFunctions.hash(long2);
//       long long3 = (-1L);
//       HashFunctions.hash(long3);
//       HashFunctions.hash(long1);
//       int int3 = HashFunctions.hash((double) long0);
//       assertEquals(0, int3);
//   }

//   @Test
//   public void test11()  throws Throwable  {
//       long long0 = 1397L;
//       HashFunctions hashFunctions0 = new HashFunctions();
//       int int0 = HashFunctions.hash((Object) hashFunctions0);
//       assertEquals(1391903583, int0);
//       
//       HashFunctions.hash(long0);
//       HashFunctions hashFunctions1 = new HashFunctions();
//       float float0 = 0.0F;
//       int int1 = HashFunctions.hash(float0);
//       float float1 = 1153.7135F;
//       int int2 = 1698;
//       HashFunctions.hash((long) int2);
//       HashFunctions.hash(int2);
//       HashFunctions hashFunctions2 = new HashFunctions();
//       HashFunctions.fastCeil(float1);
//       HashFunctions hashFunctions3 = new HashFunctions();
//       HashFunctions hashFunctions4 = new HashFunctions();
//       String string0 = "]w{Us\"+";
//       HashFunctions.hash((Object) string0);
//       HashFunctions hashFunctions5 = new HashFunctions();
//       Object object0 = new Object();
//       HashFunctions.hash(object0);
//       int int3 = 1813;
//       int int4 = 0;
//       HashFunctions.hash(int4);
//       HashFunctions.hash((double) int1);
//       int int5 = (-1439);
//       HashFunctions.hash(int5);
//       HashFunctions.hash((float) int1);
//       HashFunctions.hash(int3);
//       HashFunctions.hash((long) int4);
//       int int6 = HashFunctions.hash((Object) hashFunctions3);
//       HashFunctions.hash((double) int6);
//       double double0 = (-1.0);
//       int int7 = HashFunctions.hash(double0);
//       assertEquals((-1074790400), int7);
//   }

//   @Test
//   public void test12()  throws Throwable  {
//       long long0 = 1172L;
//       int int0 = HashFunctions.hash(long0);
//       int int1 = (-1711);
//       int int2 = HashFunctions.hash(int1);
//       float float0 = 0.0F;
//       HashFunctions.hash(float0);
//       float float1 = (-1005.6057F);
//       int int3 = HashFunctions.fastCeil(float1);
//       float float2 = (-754.4649F);
//       HashFunctions.hash(float2);
//       float float3 = 2039.803F;
//       HashFunctions.fastCeil(float3);
//       HashFunctions.hash(int2);
//       Object object0 = new Object();
//       HashFunctions.hash(int0);
//       int int4 = HashFunctions.hash(object0);
//       assertEquals(1178082678, int4);
//       
//       float float4 = 1285.4113F;
//       HashFunctions.hash(float4);
//       long long1 = 1094L;
//       HashFunctions.hash(long1);
//       HashFunctions.fastCeil(float4);
//       int int5 = 0;
//       int int6 = HashFunctions.hash(int5);
//       int int7 = HashFunctions.hash((long) int5);
//       long long2 = 711L;
//       double double0 = 0.0;
//       double double1 = 1.0;
//       HashFunctions.hash(double1);
//       HashFunctions.hash((long) int2);
//       HashFunctions.hash(double0);
//       HashFunctions.hash(long2);
//       HashFunctions.hash((long) int6);
//       long long3 = (-577L);
//       HashFunctions.hash(int5);
//       HashFunctions.hash(int7);
//       HashFunctions.hash(long3);
//       HashFunctions.fastCeil((float) int3);
//       int int8 = HashFunctions.fastCeil((float) int3);
//       assertEquals((-1005), int8);
//   }

//   @Test
//   public void test13()  throws Throwable  {
//       long long0 = (-1088L);
//       HashFunctions.hash(long0);
//       HashFunctions.hash(long0);
//       HashFunctions hashFunctions0 = new HashFunctions();
//       int int0 = HashFunctions.hash((Object) hashFunctions0);
//       assertEquals(418613692, int0);
//   }

//   @Test
//   public void test14()  throws Throwable  {
//       int int0 = 0;
//       double double0 = 0.0;
//       HashFunctions.hash(double0);
//       HashFunctions.hash(int0);
//       int int1 = 32;
//       HashFunctions.hash((float) int1);
//       int int2 = HashFunctions.hash(int1);
//       int int3 = 0;
//       HashFunctions.hash(int3);
//       float float0 = 1503.8955F;
//       String string0 = "K+H}cUp'=#)`qj";
//       HashFunctions.hash((Object) string0);
//       float float1 = 874.8948F;
//       HashFunctions.fastCeil(float1);
//       Object object0 = new Object();
//       int int4 = HashFunctions.hash(object0);
//       Object object1 = null;
//       double double1 = (-324.69986977465425);
//       int int5 = HashFunctions.hash((long) int4);
//       assertEquals(2080388391, int5);
//       
//       HashFunctions.hash(double1);
//       HashFunctions.hash(object1);
//       HashFunctions.hash(float0);
//       HashFunctions.hash(int2);
//       float float2 = 0.0F;
//       HashFunctions.fastCeil(float2);
//       int int6 = HashFunctions.hash((double) float2);
//       assertEquals(0, int6);
//   }

  @Test
  public void test15()  throws Throwable  {
      double double0 = 1.0;
      int int0 = HashFunctions.hash(double0);
      double double1 = 0.0;
      float float0 = 0.0F;
      HashFunctions.hash(double0);
      int int1 = HashFunctions.fastCeil(float0);
      int int2 = HashFunctions.hash((long) int0);
      long long0 = (-1L);
      int int3 = HashFunctions.hash((double) long0);
      int int4 = HashFunctions.fastCeil((float) int3);
      assertEquals((-1074790400), int4);
      
      int int5 = HashFunctions.hash(int2);
      assertEquals(1072693248, int5);
      
      HashFunctions hashFunctions0 = new HashFunctions();
      HashFunctions.hash(int1);
      int int6 = HashFunctions.hash(long0);
      int int7 = 32;
      HashFunctions.hash(int7);
      String string0 = "f";
      int int8 = 0;
      int int9 = HashFunctions.hash(int8);
      int int10 = HashFunctions.hash((Object) string0);
      assertEquals(102, int10);
      
      float float1 = (-46.206177F);
      int int11 = HashFunctions.hash(float1);
      assertEquals((-790334282), int11);
      
      HashFunctions.hash(double1);
      float float2 = (-1.0F);
      HashFunctions.fastCeil(float2);
      HashFunctions.fastCeil((float) int9);
      assertTrue(int9 == int6);
      
      HashFunctions.hash((float) long0);
      long long1 = 0L;
      int int12 = HashFunctions.hash(long1);
      assertTrue(int12 == int1);
  }

//   @Test
//   public void test16()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "CJ)1fn)Ka7=";
//       HashFunctions.hash((float) int0);
//       int int1 = HashFunctions.hash((Object) string0);
//       HashFunctions.hash(int1);
//       HashFunctions.hash((double) int1);
//       HashFunctions hashFunctions0 = new HashFunctions();
//       float float0 = (-1933.2731F);
//       float float1 = (-1758.4596F);
//       HashFunctions.fastCeil(float1);
//       HashFunctions.hash((long) int1);
//       HashFunctions hashFunctions1 = new HashFunctions();
//       String string1 = "";
//       HashFunctions.hash((Object) string1);
//       int int2 = HashFunctions.hash((Object) hashFunctions1);
//       assertEquals(1884084856, int2);
//       
//       HashFunctions.fastCeil(float0);
//       int int3 = HashFunctions.hash(int0);
//       float float2 = 1035.2903F;
//       float float3 = (-1.0F);
//       HashFunctions.fastCeil(float3);
//       HashFunctions.fastCeil(float2);
//       double double0 = 0.0;
//       int int4 = HashFunctions.hash(double0);
//       int int5 = HashFunctions.hash((double) int4);
//       HashFunctions.hash(float0);
//       HashFunctions hashFunctions2 = new HashFunctions();
//       HashFunctions.hash((float) int3);
//       long long0 = 798L;
//       HashFunctions.hash(long0);
//       HashFunctions hashFunctions3 = new HashFunctions();
//       HashFunctions.hash((float) int3);
//       HashFunctions.hash((float) int0);
//       HashFunctions.hash((float) int5);
//       double double1 = 0.0;
//       int int6 = HashFunctions.hash(double1);
//       assertEquals(0, int6);
//   }

//   @Test
//   public void test17()  throws Throwable  {
//       float float0 = 623.86365F;
//       int int0 = (-1723);
//       HashFunctions.hash(int0);
//       double double0 = 0.0;
//       HashFunctions.hash(double0);
//       HashFunctions.fastCeil((float) int0);
//       int int1 = (-435);
//       HashFunctions.hash(int1);
//       long long0 = 1L;
//       int int2 = HashFunctions.hash(long0);
//       int int3 = (-1);
//       HashFunctions.hash(int3);
//       HashFunctions.hash(float0);
//       HashFunctions.hash((long) int2);
//       HashFunctions hashFunctions0 = new HashFunctions();
//       Object object0 = new Object();
//       int int4 = HashFunctions.hash(object0);
//       assertEquals(842553420, int4);
//   }

  @Test
  public void test18()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.0;
      HashFunctions.hash(double1);
      HashFunctions.hash(double0);
      int int0 = (-477);
      HashFunctions.hash(int0);
      int int1 = (-1037);
      HashFunctions.hash(int1);
      HashFunctions hashFunctions0 = new HashFunctions();
  }

  @Test
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      int int0 = HashFunctions.hash(object0);
      HashFunctions hashFunctions0 = new HashFunctions();
      float float0 = 0.0F;
      HashFunctions.fastCeil(float0);
      int int1 = (-1895);
      HashFunctions hashFunctions1 = new HashFunctions();
      HashFunctions.hash(int1);
      HashFunctions.hash((float) int0);
      float float1 = 824.64716F;
      HashFunctions.hash(float1);
      HashFunctions.hash(object0);
      float float2 = (-1.0F);
      double double0 = 0.0;
      HashFunctions.hash(double0);
      HashFunctions.hash(float2);
      HashFunctions.hash(int0);
      HashFunctions.fastCeil(float2);
      double double1 = 872.4106964854279;
      HashFunctions.hash(double1);
      HashFunctions hashFunctions2 = new HashFunctions();
      assertFalse(hashFunctions2.equals(hashFunctions0));
  }
}
