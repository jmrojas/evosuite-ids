/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TCharFunction;
import gnu.trove.impl.sync.TSynchronizedIntCharMap;
import gnu.trove.map.TIntCharMap;
import gnu.trove.map.hash.TIntCharHashMap;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.RandomAccessFile;
import java.io.StreamCorruptedException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Locale;
import java.util.MissingResourceException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedIntCharMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      tIntCharHashMap0.toString();
      String string0 = integer0.toString();
      TSynchronizedIntCharMap tSynchronizedIntCharMap0 = new TSynchronizedIntCharMap((TIntCharMap) tIntCharHashMap0, (Object) string0);
      tSynchronizedIntCharMap0.valueCollection();
      char[] charArray0 = new char[10];
      char char0 = 'F';
      charArray0[0] = char0;
      char char1 = 'I';
      charArray0[1] = char1;
      char char2 = 'u';
      charArray0[2] = char2;
      char char3 = '>';
      charArray0[3] = char3;
      char char4 = '3';
      charArray0[4] = char4;
      char char5 = 'o';
      charArray0[5] = char5;
      char char6 = '\"';
      charArray0[6] = char6;
      char char7 = 'F';
      charArray0[7] = char7;
      char char8 = 'i';
      charArray0[8] = char8;
      char char9 = 'g';
      charArray0[9] = char9;
      char[] charArray1 = tSynchronizedIntCharMap0.values(charArray0);
      assertSame(charArray1, charArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 1;
      intArray0[0] = int0;
      int int1 = 115;
      intArray0[1] = int1;
      int int2 = (-1435);
      intArray0[2] = int2;
      int int3 = (-1795);
      intArray0[3] = int3;
      int int4 = (-1688);
      intArray0[4] = int4;
      int int5 = 1306;
      intArray0[5] = int5;
      int int6 = (-907);
      intArray0[6] = int6;
      int int7 = 594;
      intArray0[7] = int7;
      int int8 = 0;
      intArray0[8] = int8;
      char[] charArray0 = new char[5];
      char char0 = '7';
      charArray0[0] = char0;
      char char1 = 'b';
      charArray0[1] = char1;
      char char2 = '|';
      charArray0[2] = char2;
      char char3 = 's';
      charArray0[3] = char3;
      char char4 = 'n';
      charArray0[4] = char4;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      TSynchronizedIntCharMap tSynchronizedIntCharMap0 = new TSynchronizedIntCharMap((TIntCharMap) tIntCharHashMap0);
      char[] charArray1 = tSynchronizedIntCharMap0.values();
      assertNotSame(charArray1, charArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-960);
      intArray0[0] = int0;
      int int1 = (-1579);
      intArray0[1] = int1;
      int int2 = (-1808);
      intArray0[2] = int2;
      char[] charArray0 = new char[10];
      char char0 = 'B';
      charArray0[0] = char0;
      char char1 = '#';
      charArray0[1] = char1;
      char char2 = 'k';
      charArray0[2] = char2;
      char char3 = 'E';
      charArray0[3] = char3;
      char char4 = '0';
      charArray0[4] = char4;
      char char5 = '<';
      charArray0[5] = char5;
      char char6 = 'C';
      charArray0[6] = char6;
      char char7 = '[';
      charArray0[7] = char7;
      char char8 = '3';
      charArray0[8] = char8;
      char char9 = 'd';
      charArray0[9] = char9;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap((TIntCharMap) tIntCharHashMap0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) fileInputStream0);
      try {
        dataInputStream0.readUTF();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream Closed
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 620171;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 1;
      intArray0[2] = int2;
      int int3 = (-586);
      intArray0[3] = int3;
      int int4 = 244;
      intArray0[4] = int4;
      int int5 = (-300);
      intArray0[5] = int5;
      int int6 = 1;
      intArray0[6] = int6;
      char[] charArray0 = new char[9];
      char char0 = 'H';
      charArray0[0] = char0;
      char char1 = 'K';
      charArray0[1] = char1;
      char char2 = 'M';
      charArray0[2] = char2;
      char char3 = '';
      charArray0[3] = char3;
      char char4 = 'd';
      charArray0[4] = char4;
      char char5 = 'e';
      charArray0[5] = char5;
      char char6 = 'z';
      charArray0[6] = char6;
      char char7 = '{';
      charArray0[7] = char7;
      char char8 = '\"';
      charArray0[8] = char8;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      TSynchronizedIntCharMap tSynchronizedIntCharMap0 = new TSynchronizedIntCharMap((TIntCharMap) tIntCharHashMap0);
      TSynchronizedIntCharMap tSynchronizedIntCharMap1 = new TSynchronizedIntCharMap((TIntCharMap) tSynchronizedIntCharMap0);
      assertEquals(false, tSynchronizedIntCharMap1.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = (-1048);
      intArray0[1] = int1;
      int int2 = 3125257;
      intArray0[2] = int2;
      char[] charArray0 = new char[10];
      char char0 = 'O';
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = char0;
      charArray0[3] = char0;
      charArray0[4] = char0;
      charArray0[5] = char0;
      char char1 = '8';
      charArray0[6] = char1;
      charArray0[7] = char0;
      charArray0[8] = char1;
      charArray0[9] = char0;
      char char2 = '.';
      charArray0[0] = char2;
      char char3 = 'c';
      charArray0[1] = char3;
      char char4 = 'p';
      charArray0[2] = char4;
      char char5 = 'o';
      charArray0[3] = char5;
      char char6 = 'n';
      charArray0[4] = char6;
      char char7 = '9';
      charArray0[5] = char7;
      char char8 = '}';
      charArray0[6] = char8;
      char char9 = '%';
      charArray0[7] = char9;
      char char10 = 'H';
      charArray0[8] = char10;
      char char11 = '>';
      charArray0[9] = char11;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      int int3 = 439;
      String string0 = Character.getName(int3);
      TSynchronizedIntCharMap tSynchronizedIntCharMap0 = new TSynchronizedIntCharMap((TIntCharMap) tIntCharHashMap0, (Object) string0);
      tSynchronizedIntCharMap0.clear();
      assertEquals(0, tIntCharHashMap0.size());
      assertEquals(true, tIntCharHashMap0.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 0;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0, int0);
      TSynchronizedIntCharMap tSynchronizedIntCharMap0 = new TSynchronizedIntCharMap((TIntCharMap) tIntCharHashMap0);
      TCharFunction tCharFunction0 = null;
      tSynchronizedIntCharMap0.transformValues(tCharFunction0);
      HashMap<Object, Integer> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Object, Integer>(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TIntCharMap tIntCharMap0 = null;
      TSynchronizedIntCharMap tSynchronizedIntCharMap0 = null;
      try {
        tSynchronizedIntCharMap0 = new TSynchronizedIntCharMap(tIntCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 958;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0);
      tIntCharHashMap0.size();
      TSynchronizedIntCharMap tSynchronizedIntCharMap0 = new TSynchronizedIntCharMap((TIntCharMap) tIntCharHashMap0);
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap((TIntCharMap) tIntCharHashMap0);
      TSynchronizedIntCharMap tSynchronizedIntCharMap1 = new TSynchronizedIntCharMap((TIntCharMap) tIntCharHashMap1);
      tSynchronizedIntCharMap1.putAll((TIntCharMap) tIntCharHashMap0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      locale0.getISO3Language();
      Locale locale1 = Locale.CANADA;
      locale0.getDisplayLanguage(locale1);
      tSynchronizedIntCharMap0.getNoEntryKey();
      tIntCharHashMap1.keys();
      char[] charArray0 = new char[1];
      char char0 = tSynchronizedIntCharMap1.getNoEntryValue();
      char char1 = ')';
      tSynchronizedIntCharMap1.clear();
      charArray0[0] = char1;
      tSynchronizedIntCharMap1.keys();
      tSynchronizedIntCharMap1.values();
      tSynchronizedIntCharMap1.values(charArray0);
      tSynchronizedIntCharMap0.increment((int) char0);
      String string0 = "Ja";
      String string1 = locale0.getUnicodeLocaleType(string0);
      TSynchronizedIntCharMap tSynchronizedIntCharMap2 = new TSynchronizedIntCharMap((TIntCharMap) tSynchronizedIntCharMap1, (Object) string1);
      // Undeclared exception!
      try {
        tSynchronizedIntCharMap2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 153;
      char char0 = '&';
      int int1 = (-1357);
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0, (float) char0);
      int int2 = 60;
      String string0 = Integer.toBinaryString(int2);
      TSynchronizedIntCharMap tSynchronizedIntCharMap0 = new TSynchronizedIntCharMap((TIntCharMap) tIntCharHashMap0, (Object) string0);
      tSynchronizedIntCharMap0.valueCollection();
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap(int0);
      File file0 = null;
      String string1 = "vX";
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(file0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"vX\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      float float0 = (-1.0F);
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0, float0);
      String string0 = " hashCode= ";
      String string1 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI:  hashCode= :// hashCode= %20hashCode=%20#
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      TSynchronizedIntCharMap tSynchronizedIntCharMap0 = new TSynchronizedIntCharMap((TIntCharMap) tIntCharHashMap0);
      String string0 = tSynchronizedIntCharMap0.toString();
      TSynchronizedIntCharMap tSynchronizedIntCharMap1 = new TSynchronizedIntCharMap((TIntCharMap) tIntCharHashMap0, (Object) string0);
      tSynchronizedIntCharMap1.getNoEntryKey();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.toString();
      String string1 = byteArrayOutputStream0.toString();
      TSynchronizedIntCharMap tSynchronizedIntCharMap2 = new TSynchronizedIntCharMap((TIntCharMap) tIntCharHashMap0, (Object) string1);
      tSynchronizedIntCharMap2.getNoEntryKey();
      tSynchronizedIntCharMap1.keys();
      TIntCharMap tIntCharMap0 = null;
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = null;
      String string2 = locale0.getDisplayCountry(locale1);
      locale0.getISO3Language();
      TSynchronizedIntCharMap tSynchronizedIntCharMap3 = new TSynchronizedIntCharMap(tIntCharMap0, (Object) string2);
      TIntCharMap tIntCharMap1 = null;
      TSynchronizedIntCharMap tSynchronizedIntCharMap4 = null;
      try {
        tSynchronizedIntCharMap4 = new TSynchronizedIntCharMap(tIntCharMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = 1634;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = (-211);
      intArray0[2] = int2;
      int int3 = 1800;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = 1020;
      intArray0[5] = int5;
      int int6 = 1465;
      intArray0[6] = int6;
      int int7 = 0;
      intArray0[7] = int7;
      int int8 = 915;
      intArray0[8] = int8;
      int int9 = 0;
      intArray0[9] = int9;
      char[] charArray0 = new char[10];
      char char0 = '%';
      charArray0[0] = char0;
      char char1 = '}';
      charArray0[1] = char1;
      char char2 = 'f';
      charArray0[2] = char2;
      char char3 = 'u';
      charArray0[3] = char3;
      char char4 = 'E';
      charArray0[4] = char4;
      char char5 = 'd';
      charArray0[5] = char5;
      char char6 = ')';
      charArray0[6] = char6;
      char char7 = 'g';
      charArray0[7] = char7;
      char char8 = 'Y';
      charArray0[8] = char8;
      char char9 = '\\';
      charArray0[9] = char9;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      String string0 = "-tkW_yI9~AZ,oz?@";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 6: -tkW_yI9~AZ,oz?@
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1;
      char char0 = 'U';
      int int1 = (-238);
      float float0 = 0.0F;
      int int2 = (-811);
      float float1 = 588.0117F;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int2, float1);
      String string0 = "";
      String string1 = ">M2O%4'";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string1, string0, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://%3EM2O%254'?%3EM2O%254'#%3EM2O%254'
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TIntCharMap tIntCharMap0 = null;
      String string0 = "9AN\\0tlE9'";
      File file0 = new File(string0);
      String string1 = file0.getCanonicalPath();
      TSynchronizedIntCharMap tSynchronizedIntCharMap0 = new TSynchronizedIntCharMap(tIntCharMap0, (Object) string1);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: 9AN\\0tlE9':9AN%5C0tlE9'#/mnt/fastdata/ac1gf/Experiments_Major/apps/trove-3.0.2/9AN%5C0tlE9'
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      tIntCharHashMap0.clear();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tIntCharHashMap0._states);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 00000000
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TIntCharMap tIntCharMap0 = null;
      Object object0 = null;
      TSynchronizedIntCharMap tSynchronizedIntCharMap0 = new TSynchronizedIntCharMap(tIntCharMap0, object0);
      // Undeclared exception!
      try {
        tSynchronizedIntCharMap0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = (-920);
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      char[] charArray0 = new char[3];
      char char0 = '^';
      charArray0[0] = char0;
      char char1 = '+';
      charArray0[1] = char1;
      char char2 = ' ';
      charArray0[2] = char2;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      Character character0 = Character.valueOf(char0);
      TSynchronizedIntCharMap tSynchronizedIntCharMap0 = new TSynchronizedIntCharMap((TIntCharMap) tIntCharHashMap0, (Object) character0);
      int int3 = tSynchronizedIntCharMap0.size();
      assertEquals(2, int3);
      
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap();
      TSynchronizedIntCharMap tSynchronizedIntCharMap1 = new TSynchronizedIntCharMap((TIntCharMap) tIntCharHashMap1);
      assertFalse(tSynchronizedIntCharMap1.equals(tSynchronizedIntCharMap0));
  }
}
