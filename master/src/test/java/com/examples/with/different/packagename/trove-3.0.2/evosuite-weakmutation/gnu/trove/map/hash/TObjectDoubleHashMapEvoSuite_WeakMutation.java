/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TDoubleCollection;
import gnu.trove.function.TDoubleFunction;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection;
import gnu.trove.map.TObjectDoubleMap;
import gnu.trove.map.hash.TObjectDoubleHashMap;
import gnu.trove.procedure.TObjectDoubleProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import gnu.trove.set.hash.TDoubleHashSet;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectDoubleHashMapEvoSuite_WeakMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 220 covered goals:
   * 1 Weak Mutation 0: gnu.trove.map.hash.TObjectDoubleHashMap$1.execute(Ljava/lang/Object;D)Z:63 - DeleteField: this$0Lgnu/trove/map/hash/TObjectDoubleHashMap;
   * 2 Weak Mutation 1: gnu.trove.map.hash.TObjectDoubleHashMap$1.execute(Ljava/lang/Object;D)Z:63 - InsertUnaryOp Negation of value
   * 3 Weak Mutation 2: gnu.trove.map.hash.TObjectDoubleHashMap$1.execute(Ljava/lang/Object;D)Z:63 - DeleteStatement: put(Ljava/lang/Object;D)D
   * 4 Weak Mutation 3: gnu.trove.map.hash.TObjectDoubleHashMap$1.execute(Ljava/lang/Object;D)Z:64 - ReplaceConstant - 1 -> 0
   * 5 Weak Mutation 98: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:122 - InsertUnaryOp Negation of noEntryValue
   * 6 Weak Mutation 102: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:124 - ReplaceConstant - 0.0 -> -1.0
   * 7 Weak Mutation 103: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:124 - DeleteStatement: doubleSub(DD)I
   * 8 Weak Mutation 101: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:124 - ReplaceConstant - 0.0 -> 1.0
   * 9 Weak Mutation 99: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:124 - InsertUnaryOp Negation
   * 10 Weak Mutation 106: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:124 - ReplaceComparisonOperator == -> -2
   * 11 Weak Mutation 111: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:138 - ReplaceComparisonOperator == -> !=
   * 12 Weak Mutation 114: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:140 - DeleteField: _loadFactorF
   * 13 Weak Mutation 113: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:140 - InsertUnaryOp Negation
   * 14 Weak Mutation 112: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:140 - ReplaceVariable hashmap -> this
   * 15 Weak Mutation 116: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:141 - InsertUnaryOp Negation
   * 16 Weak Mutation 115: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:141 - ReplaceVariable hashmap -> this
   * 17 Weak Mutation 118: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:143 - InsertUnaryOp Negation
   * 18 Weak Mutation 125: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:143 - ReplaceComparisonOperator == -> -2
   * 19 Weak Mutation 122: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:143 - DeleteStatement: doubleSub(DD)I
   * 20 Weak Mutation 121: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:143 - ReplaceConstant - 0.0 -> -1.0
   * 21 Weak Mutation 120: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:143 - ReplaceConstant - 0.0 -> 1.0
   * 22 Weak Mutation 137: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceArithmeticOperator / -> -
   * 23 Weak Mutation 136: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - DeleteField: _loadFactorF
   * 24 Weak Mutation 139: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceArithmeticOperator / -> %
   * 25 Weak Mutation 138: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceArithmeticOperator / -> +
   * 26 Weak Mutation 141: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - DeleteStatement: ceil(D)D
   * 27 Weak Mutation 140: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceArithmeticOperator / -> *
   * 28 Weak Mutation 142: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - DeleteStatement: setUp(I)I
   * 29 Weak Mutation 131: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceConstant - 10.0 -> 1.0
   * 30 Weak Mutation 130: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceConstant - 10.0 -> 0.0
   * 31 Weak Mutation 133: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceConstant - 10.0 -> 9.0
   * 32 Weak Mutation 132: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceConstant - 10.0 -> -1.0
   * 33 Weak Mutation 135: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - InsertUnaryOp Negation
   * 34 Weak Mutation 134: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceConstant - 10.0 -> 11.0
   * 35 Weak Mutation 143: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:148 - DeleteStatement: putAll(Lgnu/trove/map/TObjectDoubleMap;)V
   * 36 Weak Mutation 144: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:162 - InsertUnaryOp Negation of initialCapacity
   * 37 Weak Mutation 145: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:162 - InsertUnaryOp IINC 1 initialCapacity
   * 38 Weak Mutation 146: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:162 - InsertUnaryOp IINC -1 initialCapacity
   * 39 Weak Mutation 147: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:163 - ReplaceVariable capacity -> initialCapacity
   * 40 Weak Mutation 148: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:163 - InsertUnaryOp Negation of capacity
   * 41 Weak Mutation 149: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:163 - InsertUnaryOp IINC 1 capacity
   * 42 Weak Mutation 150: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:163 - InsertUnaryOp IINC -1 capacity
   * 43 Weak Mutation 152: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:164 - InsertUnaryOp Negation of capacity
   * 44 Weak Mutation 153: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:164 - InsertUnaryOp IINC 1 capacity
   * 45 Weak Mutation 154: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:164 - InsertUnaryOp IINC -1 capacity
   * 46 Weak Mutation 151: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:164 - ReplaceVariable capacity -> initialCapacity
   * 47 Weak Mutation 236: gnu.trove.map.hash.TObjectDoubleHashMap.getNoEntryValue()D:203 - InsertUnaryOp Negation
   * 48 Weak Mutation 288: gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D:238 - ReplaceVariable key -> FREE
   * 49 Weak Mutation 289: gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D:238 - ReplaceVariable key -> REMOVED
   * 50 Weak Mutation 290: gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D:238 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 51 Weak Mutation 291: gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D:239 - InsertUnaryOp Negation of value
   * 52 Weak Mutation 292: gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D:239 - InsertUnaryOp Negation of index
   * 53 Weak Mutation 293: gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D:239 - InsertUnaryOp IINC 1 index
   * 54 Weak Mutation 294: gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D:239 - InsertUnaryOp IINC -1 index
   * 55 Weak Mutation 317: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:253 - InsertUnaryOp Negation
   * 56 Weak Mutation 319: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:254 - ReplaceConstant - 1 -> 0
   * 57 Weak Mutation 320: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:255 - InsertUnaryOp Negation of index
   * 58 Weak Mutation 321: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:255 - ReplaceComparisonOperator >= -> ==
   * 59 Weak Mutation 340: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:261 - InsertUnaryOp Negation of value
   * 60 Weak Mutation 339: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:261 - ReplaceVariable value -> previous
   * 61 Weak Mutation 338: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:261 - InsertUnaryOp IINC -1 index
   * 62 Weak Mutation 337: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:261 - InsertUnaryOp IINC 1 index
   * 63 Weak Mutation 336: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:261 - InsertUnaryOp Negation of index
   * 64 Weak Mutation 335: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:261 - DeleteField: _values[D
   * 65 Weak Mutation 342: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:263 - ReplaceComparisonOperator == -> !=
   * 66 Weak Mutation 341: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:263 - InsertUnaryOp Negation of isNewMapping
   * 67 Weak Mutation 343: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:264 - InsertUnaryOp Negation
   * 68 Weak Mutation 345: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:264 - DeleteStatement: postInsertHook(Z)V
   * 69 Weak Mutation 344: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:264 - DeleteField: consumeFreeSlotZ
   * 70 Weak Mutation 347: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:266 - InsertUnaryOp Negation of previous
   * 71 Weak Mutation 346: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:266 - ReplaceVariable previous -> value
   * 72 Weak Mutation 387: gnu.trove.map.hash.TObjectDoubleHashMap.putAll(Lgnu/trove/map/TObjectDoubleMap;)V:308 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z
   * 73 Weak Mutation 386: gnu.trove.map.hash.TObjectDoubleHashMap.putAll(Lgnu/trove/map/TObjectDoubleMap;)V:308 - DeleteField: PUT_ALL_PROCLgnu/trove/procedure/TObjectDoubleProcedure;
   * 74 Weak Mutation 723: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:504 - DeleteField: _set[Ljava/lang/Object;
   * 75 Weak Mutation 724: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:505 - DeleteField: _values[D
   * 76 Weak Mutation 728: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:506 - InsertUnaryOp IINC -1 i
   * 77 Weak Mutation 730: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:506 - ReplaceComparisonOperator <= -> <
   * 78 Weak Mutation 731: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:506 - ReplaceComparisonOperator <= -> -1
   * 79 Weak Mutation 726: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:506 - InsertUnaryOp Negation of i
   * 80 Weak Mutation 727: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:506 - InsertUnaryOp IINC 1 i
   * 81 Weak Mutation 747: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 82 Weak Mutation 745: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - ReplaceComparisonOperator == -> !=
   * 83 Weak Mutation 744: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - DeleteField: REMOVEDLjava/lang/Object;
   * 84 Weak Mutation 751: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 85 Weak Mutation 750: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 86 Weak Mutation 749: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 87 Weak Mutation 748: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 88 Weak Mutation 738: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - ReplaceComparisonOperator == -> !=
   * 89 Weak Mutation 737: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - DeleteField: FREELjava/lang/Object;
   * 90 Weak Mutation 736: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - ReplaceVariable FREE -> REMOVED
   * 91 Weak Mutation 743: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - ReplaceVariable REMOVED -> FREE
   * 92 Weak Mutation 742: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 93 Weak Mutation 741: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 94 Weak Mutation 740: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 95 Weak Mutation 754: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - ReplaceComparisonOperator != -> ==
   * 96 Weak Mutation 752: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 97 Weak Mutation 753: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - DeleteStatement: execute(Ljava/lang/Object;D)Z
   * 98 Weak Mutation 733: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 99 Weak Mutation 734: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 100 Weak Mutation 735: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 101 Weak Mutation 756: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:513 - ReplaceConstant - 1 -> 0
   * 102 gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I: root-Branch
   * 103 gnu.trove.map.hash.TObjectDoubleHashMap.putAll(Lgnu/trove/map/TObjectDoubleMap;)V: root-Branch
   * 104 gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D: root-Branch
   * 105 gnu.trove.map.hash.TObjectDoubleHashMap.<init>()V: root-Branch
   * 106 gnu.trove.map.hash.TObjectDoubleHashMap.getNoEntryValue()D: root-Branch
   * 107 gnu.trove.map.hash.TObjectDoubleHashMap$1.<init>(Lgnu/trove/map/hash/TObjectDoubleHashMap;)V: root-Branch
   * 108 gnu.trove.map.hash.TObjectDoubleHashMap$1.execute(Ljava/lang/Object;D)Z: root-Branch
   * 109 gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V: I25 Branch 8 IFEQ L124 - true
   * 110 gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V: I13 Branch 9 IFEQ L138 - false
   * 111 gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V: I37 Branch 10 IFEQ L143 - true
   * 112 gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D: I12 Branch 21 IFGE L255 - true
   * 113 gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D: I41 Branch 22 IFEQ L263 - false
   * 114 gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I18 Branch 47 IFLE L506 - true
   * 115 gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I18 Branch 47 IFLE L506 - false
   * 116 gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - true
   * 117 gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - false
   * 118 gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I30 Branch 49 IF_ACMPEQ L507 - false
   * 119 gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I39 Branch 50 IFNE L507 - true
   * 120 Weak Mutation 0: gnu.trove.map.hash.TObjectDoubleHashMap$1.execute(Ljava/lang/Object;D)Z:63 - DeleteField: this$0Lgnu/trove/map/hash/TObjectDoubleHashMap;
   * 121 Weak Mutation 1: gnu.trove.map.hash.TObjectDoubleHashMap$1.execute(Ljava/lang/Object;D)Z:63 - InsertUnaryOp Negation of value
   * 122 Weak Mutation 2: gnu.trove.map.hash.TObjectDoubleHashMap$1.execute(Ljava/lang/Object;D)Z:63 - DeleteStatement: put(Ljava/lang/Object;D)D
   * 123 Weak Mutation 3: gnu.trove.map.hash.TObjectDoubleHashMap$1.execute(Ljava/lang/Object;D)Z:64 - ReplaceConstant - 1 -> 0
   * 124 Weak Mutation 102: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:124 - ReplaceConstant - 0.0 -> -1.0
   * 125 Weak Mutation 103: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:124 - DeleteStatement: doubleSub(DD)I
   * 126 Weak Mutation 101: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:124 - ReplaceConstant - 0.0 -> 1.0
   * 127 Weak Mutation 98: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:122 - InsertUnaryOp Negation of noEntryValue
   * 128 Weak Mutation 99: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:124 - InsertUnaryOp Negation
   * 129 Weak Mutation 111: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:138 - ReplaceComparisonOperator == -> !=
   * 130 Weak Mutation 106: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:124 - ReplaceComparisonOperator == -> -2
   * 131 Weak Mutation 118: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:143 - InsertUnaryOp Negation
   * 132 Weak Mutation 116: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:141 - InsertUnaryOp Negation
   * 133 Weak Mutation 115: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:141 - ReplaceVariable hashmap -> this
   * 134 Weak Mutation 114: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:140 - DeleteField: _loadFactorF
   * 135 Weak Mutation 113: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:140 - InsertUnaryOp Negation
   * 136 Weak Mutation 112: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:140 - ReplaceVariable hashmap -> this
   * 137 Weak Mutation 125: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:143 - ReplaceComparisonOperator == -> -2
   * 138 Weak Mutation 122: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:143 - DeleteStatement: doubleSub(DD)I
   * 139 Weak Mutation 121: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:143 - ReplaceConstant - 0.0 -> -1.0
   * 140 Weak Mutation 120: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:143 - ReplaceConstant - 0.0 -> 1.0
   * 141 Weak Mutation 137: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceArithmeticOperator / -> -
   * 142 Weak Mutation 136: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - DeleteField: _loadFactorF
   * 143 Weak Mutation 139: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceArithmeticOperator / -> %
   * 144 Weak Mutation 138: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceArithmeticOperator / -> +
   * 145 Weak Mutation 141: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - DeleteStatement: ceil(D)D
   * 146 Weak Mutation 140: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceArithmeticOperator / -> *
   * 147 Weak Mutation 143: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:148 - DeleteStatement: putAll(Lgnu/trove/map/TObjectDoubleMap;)V
   * 148 Weak Mutation 142: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - DeleteStatement: setUp(I)I
   * 149 Weak Mutation 131: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceConstant - 10.0 -> 1.0
   * 150 Weak Mutation 130: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceConstant - 10.0 -> 0.0
   * 151 Weak Mutation 133: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceConstant - 10.0 -> 9.0
   * 152 Weak Mutation 132: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceConstant - 10.0 -> -1.0
   * 153 Weak Mutation 135: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - InsertUnaryOp Negation
   * 154 Weak Mutation 134: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceConstant - 10.0 -> 11.0
   * 155 Weak Mutation 152: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:164 - InsertUnaryOp Negation of capacity
   * 156 Weak Mutation 153: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:164 - InsertUnaryOp IINC 1 capacity
   * 157 Weak Mutation 154: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:164 - InsertUnaryOp IINC -1 capacity
   * 158 Weak Mutation 144: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:162 - InsertUnaryOp Negation of initialCapacity
   * 159 Weak Mutation 145: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:162 - InsertUnaryOp IINC 1 initialCapacity
   * 160 Weak Mutation 146: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:162 - InsertUnaryOp IINC -1 initialCapacity
   * 161 Weak Mutation 147: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:163 - ReplaceVariable capacity -> initialCapacity
   * 162 Weak Mutation 148: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:163 - InsertUnaryOp Negation of capacity
   * 163 Weak Mutation 149: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:163 - InsertUnaryOp IINC 1 capacity
   * 164 Weak Mutation 150: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:163 - InsertUnaryOp IINC -1 capacity
   * 165 Weak Mutation 151: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:164 - ReplaceVariable capacity -> initialCapacity
   * 166 Weak Mutation 236: gnu.trove.map.hash.TObjectDoubleHashMap.getNoEntryValue()D:203 - InsertUnaryOp Negation
   * 167 Weak Mutation 317: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:253 - InsertUnaryOp Negation
   * 168 Weak Mutation 319: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:254 - ReplaceConstant - 1 -> 0
   * 169 Weak Mutation 288: gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D:238 - ReplaceVariable key -> FREE
   * 170 Weak Mutation 289: gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D:238 - ReplaceVariable key -> REMOVED
   * 171 Weak Mutation 290: gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D:238 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 172 Weak Mutation 291: gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D:239 - InsertUnaryOp Negation of value
   * 173 Weak Mutation 292: gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D:239 - InsertUnaryOp Negation of index
   * 174 Weak Mutation 293: gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D:239 - InsertUnaryOp IINC 1 index
   * 175 Weak Mutation 294: gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D:239 - InsertUnaryOp IINC -1 index
   * 176 Weak Mutation 343: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:264 - InsertUnaryOp Negation
   * 177 Weak Mutation 342: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:263 - ReplaceComparisonOperator == -> !=
   * 178 Weak Mutation 341: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:263 - InsertUnaryOp Negation of isNewMapping
   * 179 Weak Mutation 340: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:261 - InsertUnaryOp Negation of value
   * 180 Weak Mutation 339: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:261 - ReplaceVariable value -> previous
   * 181 Weak Mutation 338: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:261 - InsertUnaryOp IINC -1 index
   * 182 Weak Mutation 337: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:261 - InsertUnaryOp IINC 1 index
   * 183 Weak Mutation 336: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:261 - InsertUnaryOp Negation of index
   * 184 Weak Mutation 347: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:266 - InsertUnaryOp Negation of previous
   * 185 Weak Mutation 346: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:266 - ReplaceVariable previous -> value
   * 186 Weak Mutation 345: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:264 - DeleteStatement: postInsertHook(Z)V
   * 187 Weak Mutation 344: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:264 - DeleteField: consumeFreeSlotZ
   * 188 Weak Mutation 320: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:255 - InsertUnaryOp Negation of index
   * 189 Weak Mutation 321: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:255 - ReplaceComparisonOperator >= -> ==
   * 190 Weak Mutation 335: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:261 - DeleteField: _values[D
   * 191 Weak Mutation 387: gnu.trove.map.hash.TObjectDoubleHashMap.putAll(Lgnu/trove/map/TObjectDoubleMap;)V:308 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z
   * 192 Weak Mutation 386: gnu.trove.map.hash.TObjectDoubleHashMap.putAll(Lgnu/trove/map/TObjectDoubleMap;)V:308 - DeleteField: PUT_ALL_PROCLgnu/trove/procedure/TObjectDoubleProcedure;
   * 193 Weak Mutation 747: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 194 Weak Mutation 745: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - ReplaceComparisonOperator == -> !=
   * 195 Weak Mutation 744: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - DeleteField: REMOVEDLjava/lang/Object;
   * 196 Weak Mutation 751: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 197 Weak Mutation 750: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 198 Weak Mutation 749: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 199 Weak Mutation 748: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 200 Weak Mutation 738: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - ReplaceComparisonOperator == -> !=
   * 201 Weak Mutation 737: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - DeleteField: FREELjava/lang/Object;
   * 202 Weak Mutation 736: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - ReplaceVariable FREE -> REMOVED
   * 203 Weak Mutation 743: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - ReplaceVariable REMOVED -> FREE
   * 204 Weak Mutation 742: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 205 Weak Mutation 741: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 206 Weak Mutation 740: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 207 Weak Mutation 754: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - ReplaceComparisonOperator != -> ==
   * 208 Weak Mutation 752: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 209 Weak Mutation 753: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - DeleteStatement: execute(Ljava/lang/Object;D)Z
   * 210 Weak Mutation 756: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:513 - ReplaceConstant - 1 -> 0
   * 211 Weak Mutation 728: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:506 - InsertUnaryOp IINC -1 i
   * 212 Weak Mutation 730: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:506 - ReplaceComparisonOperator <= -> <
   * 213 Weak Mutation 731: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:506 - ReplaceComparisonOperator <= -> -1
   * 214 Weak Mutation 733: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 215 Weak Mutation 734: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 216 Weak Mutation 735: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 217 Weak Mutation 723: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:504 - DeleteField: _set[Ljava/lang/Object;
   * 218 Weak Mutation 724: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:505 - DeleteField: _values[D
   * 219 Weak Mutation 726: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:506 - InsertUnaryOp Negation of i
   * 220 Weak Mutation 727: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:506 - InsertUnaryOp IINC 1 i
   */

  @Test
  public void test0()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>();
      tObjectDoubleHashMap0.put((Double) (-533.9045040623099), (-602.2555221353941));
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap1 = new TObjectDoubleHashMap<Object>((TObjectDoubleMap<?>) tObjectDoubleHashMap0);
      assertEquals(1, tObjectDoubleHashMap0.size());
      assertEquals(23, tObjectDoubleHashMap0.capacity());
  }

  //Test case number: 1
  /*
   * 135 covered goals:
   * 1 Weak Mutation 158: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:180 - ReplaceVariable newCapacity -> oldCapacity
   * 2 Weak Mutation 166: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:182 - ReplaceVariable newCapacity -> oldCapacity
   * 3 Weak Mutation 172: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:183 - DeleteField: no_entry_valueD
   * 4 Weak Mutation 174: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - ReplaceVariable oldCapacity -> newCapacity
   * 5 Weak Mutation 205: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceComparisonOperator == -> !=
   * 6 Weak Mutation 204: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - DeleteField: REMOVEDLjava/lang/Object;
   * 7 Weak Mutation 201: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - InsertUnaryOp IINC 1 i
   * 8 Weak Mutation 200: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - InsertUnaryOp Negation of i
   * 9 Weak Mutation 203: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceVariable REMOVED -> FREE
   * 10 Weak Mutation 202: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - InsertUnaryOp IINC -1 i
   * 11 Weak Mutation 197: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceVariable oldKeys -> _set
   * 12 Weak Mutation 199: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceVariable i -> oldCapacity
   * 13 Weak Mutation 198: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceVariable i -> newCapacity
   * 14 Weak Mutation 207: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:187 - ReplaceVariable i -> newCapacity
   * 15 Weak Mutation 206: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:187 - ReplaceVariable oldKeys -> _set
   * 16 Weak Mutation 208: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:187 - ReplaceVariable i -> oldCapacity
   * 17 Weak Mutation 209: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:187 - InsertUnaryOp Negation of i
   * 18 Weak Mutation 210: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:187 - InsertUnaryOp IINC 1 i
   * 19 Weak Mutation 211: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:187 - InsertUnaryOp IINC -1 i
   * 20 Weak Mutation 212: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:188 - ReplaceVariable o -> FREE
   * 21 Weak Mutation 213: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:188 - ReplaceVariable o -> REMOVED
   * 22 Weak Mutation 214: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:188 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 23 Weak Mutation 220: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:189 - InsertUnaryOp IINC -1 index
   * 24 Weak Mutation 221: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:189 - ReplaceComparisonOperator >= -> ==
   * 25 Weak Mutation 216: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:189 - ReplaceVariable index -> oldCapacity
   * 26 Weak Mutation 217: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:189 - ReplaceVariable index -> i
   * 27 Weak Mutation 218: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:189 - InsertUnaryOp Negation of index
   * 28 Weak Mutation 219: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:189 - InsertUnaryOp IINC 1 index
   * 29 Weak Mutation 215: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:189 - ReplaceVariable index -> newCapacity
   * 30 Weak Mutation 295: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:245 - ReplaceVariable key -> FREE
   * 31 Weak Mutation 296: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:245 - ReplaceVariable key -> REMOVED
   * 32 Weak Mutation 297: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:245 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 33 Weak Mutation 298: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:246 - InsertUnaryOp Negation of index
   * 34 Weak Mutation 299: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:246 - InsertUnaryOp IINC 1 index
   * 35 Weak Mutation 300: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:246 - InsertUnaryOp IINC -1 index
   * 36 Weak Mutation 302: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:246 - ReplaceComparisonOperator >= -> >
   * 37 Weak Mutation 313: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:248 - InsertUnaryOp Negation of value
   * 38 Weak Mutation 315: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:248 - InsertUnaryOp IINC 1 index
   * 39 Weak Mutation 314: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:248 - InsertUnaryOp Negation of index
   * 40 Weak Mutation 316: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:248 - InsertUnaryOp IINC -1 index
   * 41 Weak Mutation 318: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:253 - DeleteField: no_entry_valueD
   * 42 Weak Mutation 322: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:255 - ReplaceComparisonOperator >= -> >
   * 43 gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - false
   * 44 gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V: I61 Branch 13 IF_ACMPEQ L186 - false
   * 45 gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V: I77 Branch 14 IFGE L189 - true
   * 46 gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D: I9 Branch 20 IFGE L246 - true
   * 47 Weak Mutation 100: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:124 - DeleteField: no_entry_valueD
   * 48 Weak Mutation 110: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:125 - DeleteStatement: fill([DD)V
   * 49 Weak Mutation 108: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:125 - InsertUnaryOp Negation
   * 50 Weak Mutation 109: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:125 - DeleteField: no_entry_valueD
   * 51 Weak Mutation 107: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:125 - DeleteField: _values[D
   * 52 Weak Mutation 105: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:124 - ReplaceComparisonOperator == -> <=
   * 53 Weak Mutation 155: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:174 - DeleteField: _set[Ljava/lang/Object;
   * 54 Weak Mutation 156: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:177 - DeleteField: _set[Ljava/lang/Object;
   * 55 Weak Mutation 157: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:178 - DeleteField: _values[D
   * 56 Weak Mutation 158: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:180 - ReplaceVariable newCapacity -> oldCapacity
   * 57 Weak Mutation 159: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:180 - InsertUnaryOp Negation of newCapacity
   * 58 Weak Mutation 171: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:183 - InsertUnaryOp Negation
   * 59 Weak Mutation 170: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:183 - DeleteField: _values[D
   * 60 Weak Mutation 169: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:182 - InsertUnaryOp IINC -1 newCapacity
   * 61 Weak Mutation 168: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:182 - InsertUnaryOp IINC 1 newCapacity
   * 62 Weak Mutation 175: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - InsertUnaryOp Negation of oldCapacity
   * 63 Weak Mutation 174: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - ReplaceVariable oldCapacity -> newCapacity
   * 64 Weak Mutation 173: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:183 - DeleteStatement: fill([DD)V
   * 65 Weak Mutation 172: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:183 - DeleteField: no_entry_valueD
   * 66 Weak Mutation 163: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:181 - ReplaceVariable FREE -> REMOVED
   * 67 Weak Mutation 162: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:181 - DeleteField: _set[Ljava/lang/Object;
   * 68 Weak Mutation 161: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:180 - InsertUnaryOp IINC -1 newCapacity
   * 69 Weak Mutation 160: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:180 - InsertUnaryOp IINC 1 newCapacity
   * 70 Weak Mutation 167: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:182 - InsertUnaryOp Negation of newCapacity
   * 71 Weak Mutation 166: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:182 - ReplaceVariable newCapacity -> oldCapacity
   * 72 Weak Mutation 165: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:181 - DeleteStatement: fill([Ljava/lang/Object;Ljava/lang/Object;)V
   * 73 Weak Mutation 164: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:181 - DeleteField: FREELjava/lang/Object;
   * 74 Weak Mutation 186: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - ReplaceComparisonOperator <= -> <
   * 75 Weak Mutation 187: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - ReplaceComparisonOperator <= -> -1
   * 76 Weak Mutation 184: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - ReplaceVariable i -> oldCapacity
   * 77 Weak Mutation 190: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceVariable i -> oldCapacity
   * 78 Weak Mutation 191: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - InsertUnaryOp Negation of i
   * 79 Weak Mutation 188: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceVariable oldKeys -> _set
   * 80 Weak Mutation 189: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceVariable i -> newCapacity
   * 81 Weak Mutation 178: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - ReplaceVariable i -> newCapacity
   * 82 Weak Mutation 179: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - ReplaceVariable i -> oldCapacity
   * 83 Weak Mutation 176: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - InsertUnaryOp IINC 1 oldCapacity
   * 84 Weak Mutation 177: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - InsertUnaryOp IINC -1 oldCapacity
   * 85 Weak Mutation 182: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - InsertUnaryOp IINC -1 i
   * 86 Weak Mutation 183: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - ReplaceVariable i -> newCapacity
   * 87 Weak Mutation 180: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - InsertUnaryOp Negation of i
   * 88 Weak Mutation 181: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - InsertUnaryOp IINC 1 i
   * 89 Weak Mutation 205: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceComparisonOperator == -> !=
   * 90 Weak Mutation 204: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - DeleteField: REMOVEDLjava/lang/Object;
   * 91 Weak Mutation 207: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:187 - ReplaceVariable i -> newCapacity
   * 92 Weak Mutation 206: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:187 - ReplaceVariable oldKeys -> _set
   * 93 Weak Mutation 201: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - InsertUnaryOp IINC 1 i
   * 94 Weak Mutation 200: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - InsertUnaryOp Negation of i
   * 95 Weak Mutation 203: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceVariable REMOVED -> FREE
   * 96 Weak Mutation 202: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - InsertUnaryOp IINC -1 i
   * 97 Weak Mutation 197: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceVariable oldKeys -> _set
   * 98 Weak Mutation 196: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceComparisonOperator == -> !=
   * 99 Weak Mutation 199: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceVariable i -> oldCapacity
   * 100 Weak Mutation 198: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceVariable i -> newCapacity
   * 101 Weak Mutation 193: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - InsertUnaryOp IINC -1 i
   * 102 Weak Mutation 192: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - InsertUnaryOp IINC 1 i
   * 103 Weak Mutation 195: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - DeleteField: FREELjava/lang/Object;
   * 104 Weak Mutation 194: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceVariable FREE -> REMOVED
   * 105 Weak Mutation 220: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:189 - InsertUnaryOp IINC -1 index
   * 106 Weak Mutation 221: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:189 - ReplaceComparisonOperator >= -> ==
   * 107 Weak Mutation 216: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:189 - ReplaceVariable index -> oldCapacity
   * 108 Weak Mutation 217: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:189 - ReplaceVariable index -> i
   * 109 Weak Mutation 218: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:189 - InsertUnaryOp Negation of index
   * 110 Weak Mutation 219: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:189 - InsertUnaryOp IINC 1 index
   * 111 Weak Mutation 212: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:188 - ReplaceVariable o -> FREE
   * 112 Weak Mutation 213: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:188 - ReplaceVariable o -> REMOVED
   * 113 Weak Mutation 214: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:188 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 114 Weak Mutation 215: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:189 - ReplaceVariable index -> newCapacity
   * 115 Weak Mutation 208: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:187 - ReplaceVariable i -> oldCapacity
   * 116 Weak Mutation 209: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:187 - InsertUnaryOp Negation of i
   * 117 Weak Mutation 210: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:187 - InsertUnaryOp IINC 1 i
   * 118 Weak Mutation 211: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:187 - InsertUnaryOp IINC -1 i
   * 119 Weak Mutation 313: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:248 - InsertUnaryOp Negation of value
   * 120 Weak Mutation 315: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:248 - InsertUnaryOp IINC 1 index
   * 121 Weak Mutation 314: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:248 - InsertUnaryOp Negation of index
   * 122 Weak Mutation 316: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:248 - InsertUnaryOp IINC -1 index
   * 123 Weak Mutation 318: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:253 - DeleteField: no_entry_valueD
   * 124 Weak Mutation 295: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:245 - ReplaceVariable key -> FREE
   * 125 Weak Mutation 296: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:245 - ReplaceVariable key -> REMOVED
   * 126 Weak Mutation 297: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:245 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 127 Weak Mutation 298: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:246 - InsertUnaryOp Negation of index
   * 128 Weak Mutation 299: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:246 - InsertUnaryOp IINC 1 index
   * 129 Weak Mutation 300: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:246 - InsertUnaryOp IINC -1 index
   * 130 Weak Mutation 302: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:246 - ReplaceComparisonOperator >= -> >
   * 131 Weak Mutation 322: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:255 - ReplaceComparisonOperator >= -> >
   * 132 gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - true
   * 133 gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - false
   * 134 gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - true
   * 135 gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V: I25 Branch 8 IFEQ L124 - false
   */

  @Test
  public void test1()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>((-92), (float) (-245418205), (-748.678580409953));
      double double0 = tObjectDoubleHashMap0.putIfAbsent((Integer) (-92), (double) (-92));
      assertEquals(false, tObjectDoubleHashMap0.isEmpty());
      assertEquals((-748.678580409953), double0, 0.01D);
  }

  //Test case number: 2
  /*
   * 9 covered goals:
   * 1 Weak Mutation 239: gnu.trove.map.hash.TObjectDoubleHashMap.containsKey(Ljava/lang/Object;)Z:209 - ReplaceVariable key -> REMOVED
   * 2 Weak Mutation 238: gnu.trove.map.hash.TObjectDoubleHashMap.containsKey(Ljava/lang/Object;)Z:209 - ReplaceVariable key -> FREE
   * 3 Weak Mutation 240: gnu.trove.map.hash.TObjectDoubleHashMap.containsKey(Ljava/lang/Object;)Z:209 - DeleteStatement: contains(Ljava/lang/Object;)Z
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.containsKey(Ljava/lang/Object;)Z: root-Branch
   * 5 Weak Mutation 94: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(I)V:93 - InsertUnaryOp Negation
   * 6 Weak Mutation 239: gnu.trove.map.hash.TObjectDoubleHashMap.containsKey(Ljava/lang/Object;)Z:209 - ReplaceVariable key -> REMOVED
   * 7 Weak Mutation 238: gnu.trove.map.hash.TObjectDoubleHashMap.containsKey(Ljava/lang/Object;)Z:209 - ReplaceVariable key -> FREE
   * 8 Weak Mutation 240: gnu.trove.map.hash.TObjectDoubleHashMap.containsKey(Ljava/lang/Object;)Z:209 - DeleteStatement: contains(Ljava/lang/Object;)Z
   * 9 gnu.trove.map.hash.TObjectDoubleHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>((-8));
      tObjectDoubleHashMap0.containsKey((Object) "de");
      assertEquals(0.0, tObjectDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals(3, tObjectDoubleHashMap0.capacity());
  }

  //Test case number: 3
  /*
   * 44 covered goals:
   * 1 Weak Mutation 258: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp IINC 1 i
   * 2 Weak Mutation 259: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp IINC -1 i
   * 3 Weak Mutation 257: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp Negation of i
   * 4 Weak Mutation 262: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - ReplaceComparisonOperator == -> !=
   * 5 Weak Mutation 263: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp Negation of val
   * 6 Weak Mutation 260: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - ReplaceVariable REMOVED -> FREE
   * 7 Weak Mutation 261: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - DeleteField: REMOVEDLjava/lang/Object;
   * 8 Weak Mutation 266: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp IINC -1 i
   * 9 Weak Mutation 267: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - DeleteStatement: doubleSub(DD)I
   * 10 Weak Mutation 264: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp Negation of i
   * 11 Weak Mutation 265: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp IINC 1 i
   * 12 Weak Mutation 268: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - ReplaceComparisonOperator != -> <
   * 13 gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z: I25 Branch 16 IF_ACMPEQ L219 - false
   * 14 gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z: I30 Branch 17 IF_ACMPEQ L219 - false
   * 15 gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z: I36 Branch 18 IFNE L219 - true
   * 16 Weak Mutation 254: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - DeleteField: FREELjava/lang/Object;
   * 17 Weak Mutation 255: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - ReplaceComparisonOperator == -> !=
   * 18 Weak Mutation 252: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp IINC -1 i
   * 19 Weak Mutation 253: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - ReplaceVariable FREE -> REMOVED
   * 20 Weak Mutation 250: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp Negation of i
   * 21 Weak Mutation 251: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp IINC 1 i
   * 22 Weak Mutation 248: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:218 - ReplaceComparisonOperator <= -> -1
   * 23 Weak Mutation 247: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:218 - ReplaceComparisonOperator <= -> <
   * 24 Weak Mutation 244: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:218 - InsertUnaryOp IINC 1 i
   * 25 Weak Mutation 245: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:218 - InsertUnaryOp IINC -1 i
   * 26 Weak Mutation 242: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:216 - DeleteField: _values[D
   * 27 Weak Mutation 243: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:218 - InsertUnaryOp Negation of i
   * 28 Weak Mutation 241: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:215 - DeleteField: _set[Ljava/lang/Object;
   * 29 Weak Mutation 272: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:223 - ReplaceConstant - 0 -> 1
   * 30 Weak Mutation 258: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp IINC 1 i
   * 31 Weak Mutation 259: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp IINC -1 i
   * 32 Weak Mutation 257: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp Negation of i
   * 33 Weak Mutation 262: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - ReplaceComparisonOperator == -> !=
   * 34 Weak Mutation 263: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp Negation of val
   * 35 Weak Mutation 260: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - ReplaceVariable REMOVED -> FREE
   * 36 Weak Mutation 261: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - DeleteField: REMOVEDLjava/lang/Object;
   * 37 Weak Mutation 266: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp IINC -1 i
   * 38 Weak Mutation 267: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - DeleteStatement: doubleSub(DD)I
   * 39 Weak Mutation 264: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp Negation of i
   * 40 Weak Mutation 265: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp IINC 1 i
   * 41 Weak Mutation 268: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - ReplaceComparisonOperator != -> <
   * 42 gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z: I18 Branch 15 IFLE L218 - true
   * 43 gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z: I18 Branch 15 IFLE L218 - false
   * 44 gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z: I25 Branch 16 IF_ACMPEQ L219 - true
   */

  @Test
  public void test3()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>((-1));
      tObjectDoubleHashMap0.put((Integer) (-1), (double) (-1));
      boolean boolean0 = tObjectDoubleHashMap0.containsValue(0.0);
      assertEquals(1, tObjectDoubleHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 16 covered goals:
   * 1 Weak Mutation 269: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - ReplaceComparisonOperator != -> >
   * 2 Weak Mutation 258: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp IINC 1 i
   * 3 Weak Mutation 259: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp IINC -1 i
   * 4 Weak Mutation 257: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp Negation of i
   * 5 Weak Mutation 262: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - ReplaceComparisonOperator == -> !=
   * 6 Weak Mutation 263: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp Negation of val
   * 7 Weak Mutation 260: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - ReplaceVariable REMOVED -> FREE
   * 8 Weak Mutation 261: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - DeleteField: REMOVEDLjava/lang/Object;
   * 9 Weak Mutation 266: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp IINC -1 i
   * 10 Weak Mutation 267: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - DeleteStatement: doubleSub(DD)I
   * 11 Weak Mutation 264: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp Negation of i
   * 12 Weak Mutation 265: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp IINC 1 i
   * 13 Weak Mutation 104: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:124 - ReplaceComparisonOperator == -> >=
   * 14 Weak Mutation 222: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:189 - ReplaceComparisonOperator >= -> >
   * 15 Weak Mutation 269: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - ReplaceComparisonOperator != -> >
   * 16 Weak Mutation 301: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:246 - ReplaceComparisonOperator >= -> ==
   */

  @Test
  public void test4()  throws Throwable  {
      TObjectDoubleHashMap<String> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<String>(1, 0.0F, 747.0759965711228);
      tObjectDoubleHashMap0.putIfAbsent("=gZkF^Sv0cA", (double) 1);
      boolean boolean0 = tObjectDoubleHashMap0.containsValue((double) 0.0F);
      assertEquals(1, tObjectDoubleHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 19 covered goals:
   * 1 Weak Mutation 283: gnu.trove.map.hash.TObjectDoubleHashMap.get(Ljava/lang/Object;)D:230 - DeleteField: no_entry_valueD
   * 2 Weak Mutation 275: gnu.trove.map.hash.TObjectDoubleHashMap.get(Ljava/lang/Object;)D:229 - DeleteStatement: index(Ljava/lang/Object;)I
   * 3 Weak Mutation 274: gnu.trove.map.hash.TObjectDoubleHashMap.get(Ljava/lang/Object;)D:229 - ReplaceVariable key -> REMOVED
   * 4 Weak Mutation 273: gnu.trove.map.hash.TObjectDoubleHashMap.get(Ljava/lang/Object;)D:229 - ReplaceVariable key -> FREE
   * 5 Weak Mutation 278: gnu.trove.map.hash.TObjectDoubleHashMap.get(Ljava/lang/Object;)D:230 - InsertUnaryOp IINC -1 index
   * 6 Weak Mutation 277: gnu.trove.map.hash.TObjectDoubleHashMap.get(Ljava/lang/Object;)D:230 - InsertUnaryOp IINC 1 index
   * 7 Weak Mutation 276: gnu.trove.map.hash.TObjectDoubleHashMap.get(Ljava/lang/Object;)D:230 - InsertUnaryOp Negation of index
   * 8 Weak Mutation 282: gnu.trove.map.hash.TObjectDoubleHashMap.get(Ljava/lang/Object;)D:230 - InsertUnaryOp Negation
   * 9 Weak Mutation 281: gnu.trove.map.hash.TObjectDoubleHashMap.get(Ljava/lang/Object;)D:230 - ReplaceComparisonOperator >= -> -1
   * 10 Weak Mutation 275: gnu.trove.map.hash.TObjectDoubleHashMap.get(Ljava/lang/Object;)D:229 - DeleteStatement: index(Ljava/lang/Object;)I
   * 11 Weak Mutation 274: gnu.trove.map.hash.TObjectDoubleHashMap.get(Ljava/lang/Object;)D:229 - ReplaceVariable key -> REMOVED
   * 12 Weak Mutation 273: gnu.trove.map.hash.TObjectDoubleHashMap.get(Ljava/lang/Object;)D:229 - ReplaceVariable key -> FREE
   * 13 Weak Mutation 278: gnu.trove.map.hash.TObjectDoubleHashMap.get(Ljava/lang/Object;)D:230 - InsertUnaryOp IINC -1 index
   * 14 Weak Mutation 277: gnu.trove.map.hash.TObjectDoubleHashMap.get(Ljava/lang/Object;)D:230 - InsertUnaryOp IINC 1 index
   * 15 Weak Mutation 276: gnu.trove.map.hash.TObjectDoubleHashMap.get(Ljava/lang/Object;)D:230 - InsertUnaryOp Negation of index
   * 16 Weak Mutation 283: gnu.trove.map.hash.TObjectDoubleHashMap.get(Ljava/lang/Object;)D:230 - DeleteField: no_entry_valueD
   * 17 Weak Mutation 282: gnu.trove.map.hash.TObjectDoubleHashMap.get(Ljava/lang/Object;)D:230 - InsertUnaryOp Negation
   * 18 Weak Mutation 281: gnu.trove.map.hash.TObjectDoubleHashMap.get(Ljava/lang/Object;)D:230 - ReplaceComparisonOperator >= -> -1
   * 19 gnu.trove.map.hash.TObjectDoubleHashMap.get(Ljava/lang/Object;)D: I9 Branch 19 IFGE L230 - false
   */

  @Test
  public void test5()  throws Throwable  {
      TObjectDoubleHashMap<String> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<String>(4961459, 4961459, 4961459);
      double double0 = tObjectDoubleHashMap0.get((Object) "");
      assertEquals(4961459.0, double0, 0.01D);
  }

  //Test case number: 6
  /*
   * 21 covered goals:
   * 1 Weak Mutation 310: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:247 - ReplaceArithmeticOperator - -> %
   * 2 Weak Mutation 305: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:247 - InsertUnaryOp Negation of index
   * 3 Weak Mutation 304: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:247 - DeleteField: _values[D
   * 4 Weak Mutation 307: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:247 - InsertUnaryOp IINC -1 index
   * 5 Weak Mutation 306: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:247 - InsertUnaryOp IINC 1 index
   * 6 Weak Mutation 309: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:247 - ReplaceArithmeticOperator - -> +
   * 7 Weak Mutation 308: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:247 - ReplaceConstant - 1 -> 0
   * 8 Weak Mutation 311: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:247 - ReplaceArithmeticOperator - -> /
   * 9 Weak Mutation 312: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:247 - ReplaceArithmeticOperator - -> *
   * 10 Weak Mutation 303: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:246 - ReplaceComparisonOperator >= -> -1
   * 11 Weak Mutation 305: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:247 - InsertUnaryOp Negation of index
   * 12 Weak Mutation 304: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:247 - DeleteField: _values[D
   * 13 Weak Mutation 307: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:247 - InsertUnaryOp IINC -1 index
   * 14 Weak Mutation 306: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:247 - InsertUnaryOp IINC 1 index
   * 15 Weak Mutation 309: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:247 - ReplaceArithmeticOperator - -> +
   * 16 Weak Mutation 308: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:247 - ReplaceConstant - 1 -> 0
   * 17 Weak Mutation 311: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:247 - ReplaceArithmeticOperator - -> /
   * 18 Weak Mutation 310: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:247 - ReplaceArithmeticOperator - -> %
   * 19 Weak Mutation 312: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:247 - ReplaceArithmeticOperator - -> *
   * 20 Weak Mutation 303: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:246 - ReplaceComparisonOperator >= -> -1
   * 21 gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D: I9 Branch 20 IFGE L246 - false
   */

  @Test
  public void test6()  throws Throwable  {
      TObjectDoubleHashMap<String> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<String>(1, 0.0F, 747.0759965711228);
      tObjectDoubleHashMap0.putIfAbsent("=gZkF^Sv0cA", (double) 1);
      tObjectDoubleHashMap0.ensureCapacity(1);
      double double0 = tObjectDoubleHashMap0.putIfAbsent("=gZkF^Sv0cA", 747.0759965711228);
      assertEquals(false, tObjectDoubleHashMap0.isEmpty());
      assertEquals(1.0, double0, 0.01D);
  }

  //Test case number: 7
  /*
   * 28 covered goals:
   * 1 Weak Mutation 323: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:255 - ReplaceComparisonOperator >= -> -1
   * 2 Weak Mutation 326: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:256 - ReplaceArithmeticOperator - -> +
   * 3 Weak Mutation 327: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:256 - ReplaceArithmeticOperator - -> %
   * 4 Weak Mutation 324: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:256 - InsertUnaryOp Negation of index
   * 5 Weak Mutation 325: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:256 - ReplaceConstant - 1 -> 0
   * 6 Weak Mutation 328: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:256 - ReplaceArithmeticOperator - -> /
   * 7 Weak Mutation 329: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:256 - ReplaceArithmeticOperator - -> *
   * 8 Weak Mutation 332: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:257 - InsertUnaryOp IINC 1 index
   * 9 Weak Mutation 333: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:257 - InsertUnaryOp IINC -1 index
   * 10 Weak Mutation 330: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:257 - DeleteField: _values[D
   * 11 Weak Mutation 331: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:257 - InsertUnaryOp Negation of index
   * 12 Weak Mutation 334: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:258 - ReplaceConstant - 0 -> 1
   * 13 gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D: I12 Branch 21 IFGE L255 - false
   * 14 gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D: I41 Branch 22 IFEQ L263 - true
   * 15 Weak Mutation 96: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IF)V:107 - InsertUnaryOp Negation
   * 16 Weak Mutation 326: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:256 - ReplaceArithmeticOperator - -> +
   * 17 Weak Mutation 327: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:256 - ReplaceArithmeticOperator - -> %
   * 18 Weak Mutation 324: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:256 - InsertUnaryOp Negation of index
   * 19 Weak Mutation 325: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:256 - ReplaceConstant - 1 -> 0
   * 20 Weak Mutation 323: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:255 - ReplaceComparisonOperator >= -> -1
   * 21 Weak Mutation 334: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:258 - ReplaceConstant - 0 -> 1
   * 22 Weak Mutation 332: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:257 - InsertUnaryOp IINC 1 index
   * 23 Weak Mutation 333: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:257 - InsertUnaryOp IINC -1 index
   * 24 Weak Mutation 330: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:257 - DeleteField: _values[D
   * 25 Weak Mutation 331: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:257 - InsertUnaryOp Negation of index
   * 26 Weak Mutation 328: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:256 - ReplaceArithmeticOperator - -> /
   * 27 Weak Mutation 329: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:256 - ReplaceArithmeticOperator - -> *
   * 28 gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(148, 148);
      Double double0 = new Double((double) 148);
      tObjectDoubleHashMap0.put(double0, 11.050765547398836);
      double double1 = tObjectDoubleHashMap0.put((Double) 148.0, (-450.3138336167042));
      assertEquals(1, tObjectDoubleHashMap0.size());
      assertEquals(11.050765547398836, double1, 0.01D);
  }

  //Test case number: 8
  /*
   * 21 covered goals:
   * 1 Weak Mutation 349: gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D:272 - DeleteField: no_entry_valueD
   * 2 Weak Mutation 348: gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D:272 - InsertUnaryOp Negation
   * 3 Weak Mutation 351: gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D:273 - ReplaceVariable key -> REMOVED
   * 4 Weak Mutation 350: gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D:273 - ReplaceVariable key -> FREE
   * 5 Weak Mutation 352: gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D:273 - DeleteStatement: index(Ljava/lang/Object;)I
   * 6 Weak Mutation 358: gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D:274 - ReplaceComparisonOperator < -> -2
   * 7 Weak Mutation 353: gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D:274 - InsertUnaryOp Negation of index
   * 8 Weak Mutation 354: gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D:274 - InsertUnaryOp IINC 1 index
   * 9 Weak Mutation 355: gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D:274 - InsertUnaryOp IINC -1 index
   * 10 Weak Mutation 367: gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D:278 - InsertUnaryOp Negation of prev
   * 11 gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D: I14 Branch 23 IFLT L274 - true
   * 12 Weak Mutation 351: gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D:273 - ReplaceVariable key -> REMOVED
   * 13 Weak Mutation 350: gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D:273 - ReplaceVariable key -> FREE
   * 14 Weak Mutation 349: gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D:272 - DeleteField: no_entry_valueD
   * 15 Weak Mutation 348: gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D:272 - InsertUnaryOp Negation
   * 16 Weak Mutation 358: gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D:274 - ReplaceComparisonOperator < -> -2
   * 17 Weak Mutation 352: gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D:273 - DeleteStatement: index(Ljava/lang/Object;)I
   * 18 Weak Mutation 353: gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D:274 - InsertUnaryOp Negation of index
   * 19 Weak Mutation 354: gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D:274 - InsertUnaryOp IINC 1 index
   * 20 Weak Mutation 355: gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D:274 - InsertUnaryOp IINC -1 index
   * 21 Weak Mutation 367: gnu.trove.map.hash.TObjectDoubleHashMap.remove(Ljava/lang/Object;)D:278 - InsertUnaryOp Negation of prev
   */

  @Test
  public void test8()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(1997, 0.0F, (-326.9084685753613));
      double double0 = tObjectDoubleHashMap0.remove((Object) "{}");
      assertEquals(true, tObjectDoubleHashMap0.isEmpty());
      assertEquals((-326.9084685753613), double0, 0.01D);
  }

  //Test case number: 9
  /*
   * 9 covered goals:
   * 1 Weak Mutation 377: gnu.trove.map.hash.TObjectDoubleHashMap.putAll(Ljava/util/Map;)V:299 - DeleteStatement: entrySet()Ljava/util/Set;
   * 2 Weak Mutation 380: gnu.trove.map.hash.TObjectDoubleHashMap.putAll(Ljava/util/Map;)V:300 - ReplaceComparisonOperator == -> !=
   * 3 Weak Mutation 379: gnu.trove.map.hash.TObjectDoubleHashMap.putAll(Ljava/util/Map;)V:300 - DeleteStatement: hasNext()Z
   * 4 Weak Mutation 378: gnu.trove.map.hash.TObjectDoubleHashMap.putAll(Ljava/util/Map;)V:300 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap.putAll(Ljava/util/Map;)V: I13 Branch 24 IFEQ L300 - true
   * 6 Weak Mutation 380: gnu.trove.map.hash.TObjectDoubleHashMap.putAll(Ljava/util/Map;)V:300 - ReplaceComparisonOperator == -> !=
   * 7 Weak Mutation 377: gnu.trove.map.hash.TObjectDoubleHashMap.putAll(Ljava/util/Map;)V:299 - DeleteStatement: entrySet()Ljava/util/Set;
   * 8 Weak Mutation 379: gnu.trove.map.hash.TObjectDoubleHashMap.putAll(Ljava/util/Map;)V:300 - DeleteStatement: hasNext()Z
   * 9 Weak Mutation 378: gnu.trove.map.hash.TObjectDoubleHashMap.putAll(Ljava/util/Map;)V:300 - DeleteStatement: iterator()Ljava/util/Iterator;
   */

  @Test
  public void test9()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(56, (float) 56, (-183.74991952939615));
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      tObjectDoubleHashMap0.putAll((Map<? extends Double, ? extends Double>) hashMap0);
      assertEquals((-183.74991952939615), tObjectDoubleHashMap0.getNoEntryValue(), 0.01D);
  }

  //Test case number: 10
  /*
   * 25 covered goals:
   * 1 Weak Mutation 398: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:316 - DeleteField: no_entry_valueD
   * 2 Weak Mutation 395: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:316 - ReplaceConstant - 0 -> 1
   * 3 Weak Mutation 394: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:316 - DeleteField: _values[D
   * 4 Weak Mutation 393: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:315 - DeleteStatement: fill([Ljava/lang/Object;IILjava/lang/Object;)V
   * 5 Weak Mutation 392: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:315 - DeleteField: FREELjava/lang/Object;
   * 6 Weak Mutation 399: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:316 - DeleteStatement: fill([DIID)V
   * 7 Weak Mutation 397: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:316 - InsertUnaryOp Negation
   * 8 Weak Mutation 396: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:316 - DeleteField: _values[D
   * 9 Weak Mutation 391: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:315 - ReplaceVariable FREE -> REMOVED
   * 10 Weak Mutation 390: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:315 - DeleteField: _set[Ljava/lang/Object;
   * 11 Weak Mutation 389: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:315 - ReplaceConstant - 0 -> 1
   * 12 Weak Mutation 388: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:315 - DeleteField: _set[Ljava/lang/Object;
   * 13 Weak Mutation 395: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:316 - ReplaceConstant - 0 -> 1
   * 14 Weak Mutation 394: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:316 - DeleteField: _values[D
   * 15 Weak Mutation 393: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:315 - DeleteStatement: fill([Ljava/lang/Object;IILjava/lang/Object;)V
   * 16 Weak Mutation 392: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:315 - DeleteField: FREELjava/lang/Object;
   * 17 Weak Mutation 399: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:316 - DeleteStatement: fill([DIID)V
   * 18 Weak Mutation 398: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:316 - DeleteField: no_entry_valueD
   * 19 Weak Mutation 397: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:316 - InsertUnaryOp Negation
   * 20 Weak Mutation 396: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:316 - DeleteField: _values[D
   * 21 Weak Mutation 391: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:315 - ReplaceVariable FREE -> REMOVED
   * 22 Weak Mutation 390: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:315 - DeleteField: _set[Ljava/lang/Object;
   * 23 Weak Mutation 389: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:315 - ReplaceConstant - 0 -> 1
   * 24 Weak Mutation 388: gnu.trove.map.hash.TObjectDoubleHashMap.clear()V:315 - DeleteField: _set[Ljava/lang/Object;
   * 25 gnu.trove.map.hash.TObjectDoubleHashMap.clear()V: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Object>(0, 1.4E-45F, (-610.3458914860001));
      tObjectDoubleHashMap0.clear();
      assertEquals((-610.3458914860001), tObjectDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals("{}", tObjectDoubleHashMap0.toString());
  }

  //Test case number: 11
  /*
   * 131 covered goals:
   * 1 Weak Mutation 425: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp Negation of i
   * 2 Weak Mutation 424: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable i -> j
   * 3 Weak Mutation 427: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC -1 i
   * 4 Weak Mutation 426: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC 1 i
   * 5 Weak Mutation 429: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - DeleteField: REMOVEDLjava/lang/Object;
   * 6 Weak Mutation 428: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable REMOVED -> FREE
   * 7 Weak Mutation 430: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - ReplaceComparisonOperator == -> !=
   * 8 Weak Mutation 422: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable k -> keys
   * 9 Weak Mutation 440: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable i -> j
   * 10 Weak Mutation 441: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp Negation of i
   * 11 Weak Mutation 442: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC 1 i
   * 12 Weak Mutation 443: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC -1 i
   * 13 Weak Mutation 432: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable keys -> k
   * 14 Weak Mutation 433: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable j -> i
   * 15 Weak Mutation 434: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp Negation of j
   * 16 Weak Mutation 435: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC 1 j
   * 17 Weak Mutation 436: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC -1 j
   * 18 Weak Mutation 437: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable j -> i
   * 19 Weak Mutation 438: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable k -> keys
   * 20 Weak Mutation 431: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable keys -> _set
   * 21 Weak Mutation 652: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:440 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 22 Weak Mutation 651: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:440 - ReplaceVariable key -> REMOVED
   * 23 Weak Mutation 650: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:440 - ReplaceVariable key -> FREE
   * 24 Weak Mutation 653: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:443 - InsertUnaryOp Negation of index
   * 25 Weak Mutation 655: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:443 - InsertUnaryOp IINC -1 index
   * 26 Weak Mutation 654: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:443 - InsertUnaryOp IINC 1 index
   * 27 Weak Mutation 656: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:443 - ReplaceComparisonOperator >= -> ==
   * 28 Weak Mutation 683: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:448 - InsertUnaryOp Negation of put_amount
   * 29 Weak Mutation 682: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:448 - ReplaceVariable put_amount -> adjust_amount
   * 30 Weak Mutation 681: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:448 - InsertUnaryOp IINC -1 index
   * 31 Weak Mutation 680: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:448 - InsertUnaryOp IINC 1 index
   * 32 Weak Mutation 679: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:448 - InsertUnaryOp Negation of index
   * 33 Weak Mutation 678: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:448 - DeleteField: _values[D
   * 34 Weak Mutation 684: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:449 - ReplaceConstant - 1 -> 0
   * 35 Weak Mutation 686: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:454 - ReplaceComparisonOperator == -> !=
   * 36 Weak Mutation 685: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:454 - InsertUnaryOp Negation of isNewMapping
   * 37 Weak Mutation 687: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:455 - InsertUnaryOp Negation
   * 38 Weak Mutation 688: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:455 - DeleteField: consumeFreeSlotZ
   * 39 Weak Mutation 689: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:455 - DeleteStatement: postInsertHook(Z)V
   * 40 Weak Mutation 692: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:458 - InsertUnaryOp Negation of newValue
   * 41 Weak Mutation 690: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:458 - ReplaceVariable newValue -> adjust_amount
   * 42 gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;: I30 Branch 26 IF_ACMPEQ L335 - false
   * 43 gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;: I35 Branch 27 IF_ACMPEQ L335 - false
   * 44 gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D: I9 Branch 41 IFGE L443 - true
   * 45 gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D: I51 Branch 42 IFEQ L454 - false
   * 46 Weak Mutation 411: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:334 - ReplaceComparisonOperator <= -> <
   * 47 Weak Mutation 408: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:334 - InsertUnaryOp IINC -1 i
   * 48 Weak Mutation 409: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:334 - ReplaceVariable i -> j
   * 49 Weak Mutation 415: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable i -> j
   * 50 Weak Mutation 412: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:334 - ReplaceComparisonOperator <= -> -1
   * 51 Weak Mutation 413: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable k -> keys
   * 52 Weak Mutation 402: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:334 - ReplaceVariable k -> keys
   * 53 Weak Mutation 400: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:331 - DeleteStatement: size()I
   * 54 Weak Mutation 401: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:332 - DeleteField: _set[Ljava/lang/Object;
   * 55 Weak Mutation 406: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:334 - InsertUnaryOp Negation of i
   * 56 Weak Mutation 407: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:334 - InsertUnaryOp IINC 1 i
   * 57 Weak Mutation 404: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:334 - ReplaceConstant - 0 -> 1
   * 58 Weak Mutation 405: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:334 - ReplaceVariable i -> j
   * 59 Weak Mutation 444: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:340 - ReplaceVariable keys -> _set
   * 60 Weak Mutation 445: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:340 - ReplaceVariable keys -> k
   * 61 Weak Mutation 417: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC 1 i
   * 62 Weak Mutation 416: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp Negation of i
   * 63 Weak Mutation 419: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable FREE -> REMOVED
   * 64 Weak Mutation 418: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC -1 i
   * 65 Weak Mutation 421: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - ReplaceComparisonOperator == -> !=
   * 66 Weak Mutation 420: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - DeleteField: FREELjava/lang/Object;
   * 67 Weak Mutation 411: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:334 - ReplaceComparisonOperator <= -> <
   * 68 Weak Mutation 408: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:334 - InsertUnaryOp IINC -1 i
   * 69 Weak Mutation 409: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:334 - ReplaceVariable i -> j
   * 70 Weak Mutation 415: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable i -> j
   * 71 Weak Mutation 412: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:334 - ReplaceComparisonOperator <= -> -1
   * 72 Weak Mutation 413: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable k -> keys
   * 73 Weak Mutation 402: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:334 - ReplaceVariable k -> keys
   * 74 Weak Mutation 400: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:331 - DeleteStatement: size()I
   * 75 Weak Mutation 401: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:332 - DeleteField: _set[Ljava/lang/Object;
   * 76 Weak Mutation 406: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:334 - InsertUnaryOp Negation of i
   * 77 Weak Mutation 407: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:334 - InsertUnaryOp IINC 1 i
   * 78 Weak Mutation 404: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:334 - ReplaceConstant - 0 -> 1
   * 79 Weak Mutation 405: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:334 - ReplaceVariable i -> j
   * 80 Weak Mutation 440: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable i -> j
   * 81 Weak Mutation 441: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp Negation of i
   * 82 Weak Mutation 442: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC 1 i
   * 83 Weak Mutation 443: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC -1 i
   * 84 Weak Mutation 444: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:340 - ReplaceVariable keys -> _set
   * 85 Weak Mutation 445: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:340 - ReplaceVariable keys -> k
   * 86 Weak Mutation 432: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable keys -> k
   * 87 Weak Mutation 433: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable j -> i
   * 88 Weak Mutation 434: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp Negation of j
   * 89 Weak Mutation 435: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC 1 j
   * 90 Weak Mutation 436: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC -1 j
   * 91 Weak Mutation 437: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable j -> i
   * 92 Weak Mutation 438: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable k -> keys
   * 93 Weak Mutation 425: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp Negation of i
   * 94 Weak Mutation 424: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable i -> j
   * 95 Weak Mutation 427: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC -1 i
   * 96 Weak Mutation 426: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC 1 i
   * 97 Weak Mutation 429: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - DeleteField: REMOVEDLjava/lang/Object;
   * 98 Weak Mutation 428: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable REMOVED -> FREE
   * 99 Weak Mutation 431: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable keys -> _set
   * 100 Weak Mutation 430: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - ReplaceComparisonOperator == -> !=
   * 101 Weak Mutation 417: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC 1 i
   * 102 Weak Mutation 416: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp Negation of i
   * 103 Weak Mutation 419: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable FREE -> REMOVED
   * 104 Weak Mutation 418: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC -1 i
   * 105 Weak Mutation 421: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - ReplaceComparisonOperator == -> !=
   * 106 Weak Mutation 420: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - DeleteField: FREELjava/lang/Object;
   * 107 Weak Mutation 422: gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable k -> keys
   * 108 Weak Mutation 687: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:455 - InsertUnaryOp Negation
   * 109 Weak Mutation 686: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:454 - ReplaceComparisonOperator == -> !=
   * 110 Weak Mutation 685: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:454 - InsertUnaryOp Negation of isNewMapping
   * 111 Weak Mutation 684: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:449 - ReplaceConstant - 1 -> 0
   * 112 Weak Mutation 683: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:448 - InsertUnaryOp Negation of put_amount
   * 113 Weak Mutation 682: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:448 - ReplaceVariable put_amount -> adjust_amount
   * 114 Weak Mutation 681: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:448 - InsertUnaryOp IINC -1 index
   * 115 Weak Mutation 680: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:448 - InsertUnaryOp IINC 1 index
   * 116 Weak Mutation 679: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:448 - InsertUnaryOp Negation of index
   * 117 Weak Mutation 678: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:448 - DeleteField: _values[D
   * 118 Weak Mutation 692: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:458 - InsertUnaryOp Negation of newValue
   * 119 Weak Mutation 690: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:458 - ReplaceVariable newValue -> adjust_amount
   * 120 Weak Mutation 688: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:455 - DeleteField: consumeFreeSlotZ
   * 121 Weak Mutation 689: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:455 - DeleteStatement: postInsertHook(Z)V
   * 122 Weak Mutation 653: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:443 - InsertUnaryOp Negation of index
   * 123 Weak Mutation 652: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:440 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 124 Weak Mutation 655: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:443 - InsertUnaryOp IINC -1 index
   * 125 Weak Mutation 654: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:443 - InsertUnaryOp IINC 1 index
   * 126 Weak Mutation 651: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:440 - ReplaceVariable key -> REMOVED
   * 127 Weak Mutation 650: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:440 - ReplaceVariable key -> FREE
   * 128 Weak Mutation 656: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:443 - ReplaceComparisonOperator >= -> ==
   * 129 gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;: I23 Branch 25 IFLE L334 - true
   * 130 gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;: I23 Branch 25 IFLE L334 - false
   * 131 gnu.trove.map.hash.TObjectDoubleHashMap.keys()[Ljava/lang/Object;: I30 Branch 26 IF_ACMPEQ L335 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>((-638), (-1156.7289F));
      tObjectDoubleHashMap0.adjustOrPutValue((Double) (-1337.9088623431708), 41.17329670259999, (-1337.9088623431708));
      tObjectDoubleHashMap0.keys();
      assertEquals(1, tObjectDoubleHashMap0.size());
      assertEquals("{-1337.9088623431708=-1337.9088623431708}", tObjectDoubleHashMap0.toString());
  }

  //Test case number: 12
  /*
   * 62 covered goals:
   * 1 Weak Mutation 446: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:346 - DeleteStatement: size()I
   * 2 Weak Mutation 447: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - ReplaceVariable a -> _set
   * 3 Weak Mutation 451: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - ReplaceComparisonOperator >= -> ==
   * 4 Weak Mutation 450: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - InsertUnaryOp IINC -1 size
   * 5 Weak Mutation 449: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - InsertUnaryOp IINC 1 size
   * 6 Weak Mutation 448: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - InsertUnaryOp Negation of size
   * 7 Weak Mutation 461: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:353 - DeleteField: _set[Ljava/lang/Object;
   * 8 Weak Mutation 474: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceComparisonOperator <= -> -1
   * 9 Weak Mutation 473: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceComparisonOperator <= -> <
   * 10 Weak Mutation 470: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> j
   * 11 Weak Mutation 471: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> size
   * 12 Weak Mutation 468: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - InsertUnaryOp IINC 1 i
   * 13 Weak Mutation 469: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - InsertUnaryOp IINC -1 i
   * 14 Weak Mutation 466: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> size
   * 15 Weak Mutation 467: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - InsertUnaryOp Negation of i
   * 16 Weak Mutation 464: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceConstant - 0 -> 1
   * 17 Weak Mutation 465: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> j
   * 18 Weak Mutation 462: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable k -> a
   * 19 Weak Mutation 478: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> size
   * 20 Weak Mutation 479: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp Negation of i
   * 21 Weak Mutation 477: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> j
   * 22 Weak Mutation 475: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable k -> a
   * 23 Weak Mutation 484: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceComparisonOperator == -> !=
   * 24 Weak Mutation 481: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC -1 i
   * 25 Weak Mutation 480: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC 1 i
   * 26 Weak Mutation 483: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - DeleteField: FREELjava/lang/Object;
   * 27 Weak Mutation 482: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable FREE -> REMOVED
   * 28 Weak Mutation 511: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:361 - ReplaceVariable a -> _set
   * 29 Weak Mutation 512: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:361 - ReplaceVariable a -> k
   * 30 gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I10 Branch 28 IF_ICMPGE L347 - true
   * 31 gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L355 - true
   * 32 gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L355 - false
   * 33 gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I44 Branch 30 IF_ACMPEQ L356 - true
   * 34 Weak Mutation 446: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:346 - DeleteStatement: size()I
   * 35 Weak Mutation 447: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - ReplaceVariable a -> _set
   * 36 Weak Mutation 478: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> size
   * 37 Weak Mutation 479: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp Negation of i
   * 38 Weak Mutation 477: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> j
   * 39 Weak Mutation 474: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceComparisonOperator <= -> -1
   * 40 Weak Mutation 475: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable k -> a
   * 41 Weak Mutation 473: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceComparisonOperator <= -> <
   * 42 Weak Mutation 470: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> j
   * 43 Weak Mutation 471: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> size
   * 44 Weak Mutation 468: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - InsertUnaryOp IINC 1 i
   * 45 Weak Mutation 469: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - InsertUnaryOp IINC -1 i
   * 46 Weak Mutation 466: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> size
   * 47 Weak Mutation 467: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - InsertUnaryOp Negation of i
   * 48 Weak Mutation 464: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceConstant - 0 -> 1
   * 49 Weak Mutation 465: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> j
   * 50 Weak Mutation 462: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable k -> a
   * 51 Weak Mutation 461: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:353 - DeleteField: _set[Ljava/lang/Object;
   * 52 Weak Mutation 451: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - ReplaceComparisonOperator >= -> ==
   * 53 Weak Mutation 450: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - InsertUnaryOp IINC -1 size
   * 54 Weak Mutation 449: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - InsertUnaryOp IINC 1 size
   * 55 Weak Mutation 448: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - InsertUnaryOp Negation of size
   * 56 Weak Mutation 511: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:361 - ReplaceVariable a -> _set
   * 57 Weak Mutation 484: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceComparisonOperator == -> !=
   * 58 Weak Mutation 481: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC -1 i
   * 59 Weak Mutation 480: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC 1 i
   * 60 Weak Mutation 483: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - DeleteField: FREELjava/lang/Object;
   * 61 Weak Mutation 482: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable FREE -> REMOVED
   * 62 Weak Mutation 512: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:361 - ReplaceVariable a -> k
   */

  @Test
  public void test12()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(1, 1);
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap1 = new TObjectDoubleHashMap<Object>(0, 0);
      Object[] objectArray0 = tObjectDoubleHashMap1.keys(tObjectDoubleHashMap0._set);
      assertEquals(0.0, tObjectDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertNotNull(objectArray0);
      assertEquals(0.0, tObjectDoubleHashMap1.getNoEntryValue(), 0.01D);
  }

  //Test case number: 13
  /*
   * 95 covered goals:
   * 1 Weak Mutation 453: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - ReplaceComparisonOperator >= -> -1
   * 2 Weak Mutation 460: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:349 - DeleteStatement: newInstance(Ljava/lang/Class;I)Ljava/lang/Object;
   * 3 Weak Mutation 459: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:349 - InsertUnaryOp IINC -1 size
   * 4 Weak Mutation 458: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:349 - InsertUnaryOp IINC 1 size
   * 5 Weak Mutation 457: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:349 - InsertUnaryOp Negation of size
   * 6 Weak Mutation 456: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:349 - DeleteStatement: getComponentType()Ljava/lang/Class;
   * 7 Weak Mutation 455: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:349 - DeleteStatement: getClass()Ljava/lang/Class;
   * 8 Weak Mutation 454: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:349 - ReplaceVariable a -> _set
   * 9 Weak Mutation 493: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - DeleteField: REMOVEDLjava/lang/Object;
   * 10 Weak Mutation 492: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable REMOVED -> FREE
   * 11 Weak Mutation 494: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceComparisonOperator == -> !=
   * 12 Weak Mutation 489: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp Negation of i
   * 13 Weak Mutation 488: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> size
   * 14 Weak Mutation 491: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC -1 i
   * 15 Weak Mutation 490: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC 1 i
   * 16 Weak Mutation 485: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable k -> a
   * 17 Weak Mutation 487: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> j
   * 18 Weak Mutation 508: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp Negation of i
   * 19 Weak Mutation 509: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC 1 i
   * 20 Weak Mutation 510: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC -1 i
   * 21 Weak Mutation 504: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable k -> a
   * 22 Weak Mutation 506: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable i -> j
   * 23 Weak Mutation 507: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable i -> size
   * 24 Weak Mutation 500: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC 1 j
   * 25 Weak Mutation 501: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC -1 j
   * 26 Weak Mutation 502: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> i
   * 27 Weak Mutation 503: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> size
   * 28 Weak Mutation 496: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable a -> k
   * 29 Weak Mutation 497: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> i
   * 30 Weak Mutation 498: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> size
   * 31 Weak Mutation 499: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp Negation of j
   * 32 Weak Mutation 495: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable a -> _set
   * 33 gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I10 Branch 28 IF_ICMPGE L347 - false
   * 34 gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I44 Branch 30 IF_ACMPEQ L356 - false
   * 35 gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I49 Branch 31 IF_ACMPEQ L356 - false
   * 36 Weak Mutation 446: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:346 - DeleteStatement: size()I
   * 37 Weak Mutation 447: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - ReplaceVariable a -> _set
   * 38 Weak Mutation 478: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> size
   * 39 Weak Mutation 479: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp Negation of i
   * 40 Weak Mutation 477: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> j
   * 41 Weak Mutation 474: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceComparisonOperator <= -> -1
   * 42 Weak Mutation 475: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable k -> a
   * 43 Weak Mutation 473: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceComparisonOperator <= -> <
   * 44 Weak Mutation 470: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> j
   * 45 Weak Mutation 471: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> size
   * 46 Weak Mutation 468: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - InsertUnaryOp IINC 1 i
   * 47 Weak Mutation 469: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - InsertUnaryOp IINC -1 i
   * 48 Weak Mutation 466: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> size
   * 49 Weak Mutation 467: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - InsertUnaryOp Negation of i
   * 50 Weak Mutation 464: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceConstant - 0 -> 1
   * 51 Weak Mutation 465: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> j
   * 52 Weak Mutation 462: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable k -> a
   * 53 Weak Mutation 461: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:353 - DeleteField: _set[Ljava/lang/Object;
   * 54 Weak Mutation 450: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - InsertUnaryOp IINC -1 size
   * 55 Weak Mutation 449: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - InsertUnaryOp IINC 1 size
   * 56 Weak Mutation 448: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - InsertUnaryOp Negation of size
   * 57 Weak Mutation 511: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:361 - ReplaceVariable a -> _set
   * 58 Weak Mutation 484: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceComparisonOperator == -> !=
   * 59 Weak Mutation 481: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC -1 i
   * 60 Weak Mutation 480: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC 1 i
   * 61 Weak Mutation 483: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - DeleteField: FREELjava/lang/Object;
   * 62 Weak Mutation 482: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable FREE -> REMOVED
   * 63 Weak Mutation 512: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:361 - ReplaceVariable a -> k
   * 64 Weak Mutation 460: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:349 - DeleteStatement: newInstance(Ljava/lang/Class;I)Ljava/lang/Object;
   * 65 Weak Mutation 459: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:349 - InsertUnaryOp IINC -1 size
   * 66 Weak Mutation 458: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:349 - InsertUnaryOp IINC 1 size
   * 67 Weak Mutation 457: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:349 - InsertUnaryOp Negation of size
   * 68 Weak Mutation 456: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:349 - DeleteStatement: getComponentType()Ljava/lang/Class;
   * 69 Weak Mutation 455: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:349 - DeleteStatement: getClass()Ljava/lang/Class;
   * 70 Weak Mutation 454: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:349 - ReplaceVariable a -> _set
   * 71 Weak Mutation 453: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - ReplaceComparisonOperator >= -> -1
   * 72 Weak Mutation 508: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp Negation of i
   * 73 Weak Mutation 509: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC 1 i
   * 74 Weak Mutation 510: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC -1 i
   * 75 Weak Mutation 504: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable k -> a
   * 76 Weak Mutation 506: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable i -> j
   * 77 Weak Mutation 507: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable i -> size
   * 78 Weak Mutation 500: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC 1 j
   * 79 Weak Mutation 501: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC -1 j
   * 80 Weak Mutation 502: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> i
   * 81 Weak Mutation 503: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> size
   * 82 Weak Mutation 496: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable a -> k
   * 83 Weak Mutation 497: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> i
   * 84 Weak Mutation 498: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> size
   * 85 Weak Mutation 499: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp Negation of j
   * 86 Weak Mutation 493: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - DeleteField: REMOVEDLjava/lang/Object;
   * 87 Weak Mutation 492: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable REMOVED -> FREE
   * 88 Weak Mutation 495: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable a -> _set
   * 89 Weak Mutation 494: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceComparisonOperator == -> !=
   * 90 Weak Mutation 489: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp Negation of i
   * 91 Weak Mutation 488: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> size
   * 92 Weak Mutation 491: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC -1 i
   * 93 Weak Mutation 490: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC 1 i
   * 94 Weak Mutation 485: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable k -> a
   * 95 Weak Mutation 487: gnu.trove.map.hash.TObjectDoubleHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> j
   */

  @Test
  public void test13()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>((-638), (-1156.7289F));
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1415.3459658489362));
      tObjectDoubleHashMap0.adjustOrPutValue((Double) (-1337.9088623431708), 41.17329670259999, (-1337.9088623431708));
      tObjectDoubleHashMap0.adjustOrPutValue(double0, (-1337.9088623431708), Double.POSITIVE_INFINITY);
      tObjectDoubleHashMap0.keys(doubleArray0);
      assertEquals(2, tObjectDoubleHashMap0.size());
      assertEquals("{-1415.3459658489362=Infinity,-1337.9088623431708=-1337.9088623431708}", tObjectDoubleHashMap0.toString());
  }

  //Test case number: 14
  /*
   * 61 covered goals:
   * 1 Weak Mutation 535: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - ReplaceVariable i -> j
   * 2 Weak Mutation 541: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - ReplaceComparisonOperator == -> !=
   * 3 Weak Mutation 540: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - DeleteField: REMOVEDLjava/lang/Object;
   * 4 Weak Mutation 537: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - InsertUnaryOp IINC 1 i
   * 5 Weak Mutation 536: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - InsertUnaryOp Negation of i
   * 6 Weak Mutation 539: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - ReplaceVariable REMOVED -> FREE
   * 7 Weak Mutation 538: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - InsertUnaryOp IINC -1 i
   * 8 Weak Mutation 550: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:379 - InsertUnaryOp Negation of i
   * 9 Weak Mutation 551: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:379 - InsertUnaryOp IINC 1 i
   * 10 Weak Mutation 548: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:379 - ReplaceVariable v -> vals
   * 11 Weak Mutation 549: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:379 - ReplaceVariable i -> j
   * 12 Weak Mutation 546: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:379 - InsertUnaryOp IINC -1 j
   * 13 Weak Mutation 547: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:379 - ReplaceVariable j -> i
   * 14 Weak Mutation 544: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:379 - InsertUnaryOp Negation of j
   * 15 Weak Mutation 545: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:379 - InsertUnaryOp IINC 1 j
   * 16 Weak Mutation 552: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:379 - InsertUnaryOp IINC -1 i
   * 17 Weak Mutation 543: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:379 - ReplaceVariable j -> i
   * 18 Weak Mutation 542: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:379 - ReplaceVariable vals -> v
   * 19 gnu.trove.map.hash.TObjectDoubleHashMap.values()[D: I34 Branch 33 IF_ACMPEQ L378 - false
   * 20 gnu.trove.map.hash.TObjectDoubleHashMap.values()[D: I39 Branch 34 IF_ACMPEQ L378 - false
   * 21 Weak Mutation 550: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:379 - InsertUnaryOp Negation of i
   * 22 Weak Mutation 551: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:379 - InsertUnaryOp IINC 1 i
   * 23 Weak Mutation 548: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:379 - ReplaceVariable v -> vals
   * 24 Weak Mutation 549: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:379 - ReplaceVariable i -> j
   * 25 Weak Mutation 546: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:379 - InsertUnaryOp IINC -1 j
   * 26 Weak Mutation 547: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:379 - ReplaceVariable j -> i
   * 27 Weak Mutation 544: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:379 - InsertUnaryOp Negation of j
   * 28 Weak Mutation 545: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:379 - InsertUnaryOp IINC 1 j
   * 29 Weak Mutation 552: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:379 - InsertUnaryOp IINC -1 i
   * 30 Weak Mutation 553: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:382 - ReplaceVariable vals -> v
   * 31 Weak Mutation 516: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:377 - ReplaceVariable v -> vals
   * 32 Weak Mutation 517: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:377 - ReplaceConstant - 0 -> 1
   * 33 Weak Mutation 518: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:377 - ReplaceVariable i -> j
   * 34 Weak Mutation 519: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:377 - InsertUnaryOp Negation of i
   * 35 Weak Mutation 513: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:373 - DeleteStatement: size()I
   * 36 Weak Mutation 514: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:374 - DeleteField: _values[D
   * 37 Weak Mutation 515: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:375 - DeleteField: _set[Ljava/lang/Object;
   * 38 Weak Mutation 524: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:377 - ReplaceComparisonOperator <= -> <
   * 39 Weak Mutation 525: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:377 - ReplaceComparisonOperator <= -> -1
   * 40 Weak Mutation 527: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - ReplaceVariable i -> j
   * 41 Weak Mutation 520: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:377 - InsertUnaryOp IINC 1 i
   * 42 Weak Mutation 521: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:377 - InsertUnaryOp IINC -1 i
   * 43 Weak Mutation 522: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:377 - ReplaceVariable i -> j
   * 44 Weak Mutation 533: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - ReplaceComparisonOperator == -> !=
   * 45 Weak Mutation 532: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - DeleteField: FREELjava/lang/Object;
   * 46 Weak Mutation 535: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - ReplaceVariable i -> j
   * 47 Weak Mutation 529: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - InsertUnaryOp IINC 1 i
   * 48 Weak Mutation 528: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - InsertUnaryOp Negation of i
   * 49 Weak Mutation 531: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - ReplaceVariable FREE -> REMOVED
   * 50 Weak Mutation 530: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - InsertUnaryOp IINC -1 i
   * 51 Weak Mutation 541: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - ReplaceComparisonOperator == -> !=
   * 52 Weak Mutation 540: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - DeleteField: REMOVEDLjava/lang/Object;
   * 53 Weak Mutation 543: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:379 - ReplaceVariable j -> i
   * 54 Weak Mutation 542: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:379 - ReplaceVariable vals -> v
   * 55 Weak Mutation 537: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - InsertUnaryOp IINC 1 i
   * 56 Weak Mutation 536: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - InsertUnaryOp Negation of i
   * 57 Weak Mutation 539: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - ReplaceVariable REMOVED -> FREE
   * 58 Weak Mutation 538: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - InsertUnaryOp IINC -1 i
   * 59 gnu.trove.map.hash.TObjectDoubleHashMap.values()[D: I27 Branch 32 IFLE L377 - true
   * 60 gnu.trove.map.hash.TObjectDoubleHashMap.values()[D: I27 Branch 32 IFLE L377 - false
   * 61 gnu.trove.map.hash.TObjectDoubleHashMap.values()[D: I34 Branch 33 IF_ACMPEQ L378 - true
   */

  @Test
  public void test14()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(148, 148);
      Double double0 = new Double((double) 148);
      tObjectDoubleHashMap0.put(double0, 11.050765547398836);
      tObjectDoubleHashMap0.values();
      assertEquals(1, tObjectDoubleHashMap0.size());
      assertEquals("{148.0=11.050765547398836}", tObjectDoubleHashMap0.toString());
  }

  //Test case number: 15
  /*
   * 39 covered goals:
   * 1 Weak Mutation 559: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:389 - ReplaceComparisonOperator >= -> >
   * 2 Weak Mutation 615: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:401 - ReplaceComparisonOperator <= -> <
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D: I65 Branch 39 IF_ICMPLE L401 - true
   * 4 Weak Mutation 559: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:389 - ReplaceComparisonOperator >= -> >
   * 5 Weak Mutation 556: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:389 - InsertUnaryOp IINC 1 size
   * 6 Weak Mutation 557: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:389 - InsertUnaryOp IINC -1 size
   * 7 Weak Mutation 554: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:388 - DeleteStatement: size()I
   * 8 Weak Mutation 555: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:389 - InsertUnaryOp Negation of size
   * 9 Weak Mutation 567: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:396 - ReplaceConstant - 0 -> 1
   * 10 Weak Mutation 566: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:396 - ReplaceVariable v -> array
   * 11 Weak Mutation 565: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:394 - DeleteField: _set[Ljava/lang/Object;
   * 12 Weak Mutation 564: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:393 - DeleteField: _values[D
   * 13 Weak Mutation 574: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:396 - ReplaceVariable i -> size
   * 14 Weak Mutation 573: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:396 - ReplaceVariable i -> j
   * 15 Weak Mutation 572: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:396 - InsertUnaryOp IINC -1 i
   * 16 Weak Mutation 571: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:396 - InsertUnaryOp IINC 1 i
   * 17 Weak Mutation 570: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:396 - InsertUnaryOp Negation of i
   * 18 Weak Mutation 569: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:396 - ReplaceVariable i -> size
   * 19 Weak Mutation 568: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:396 - ReplaceVariable i -> j
   * 20 Weak Mutation 610: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:401 - ReplaceVariable array -> v
   * 21 Weak Mutation 611: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:401 - InsertUnaryOp Negation of size
   * 22 Weak Mutation 615: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:401 - ReplaceComparisonOperator <= -> <
   * 23 Weak Mutation 612: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:401 - InsertUnaryOp IINC 1 size
   * 24 Weak Mutation 613: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:401 - InsertUnaryOp IINC -1 size
   * 25 Weak Mutation 623: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:404 - ReplaceVariable array -> v
   * 26 Weak Mutation 576: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:396 - ReplaceComparisonOperator <= -> <
   * 27 Weak Mutation 577: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:396 - ReplaceComparisonOperator <= -> -1
   * 28 Weak Mutation 579: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - ReplaceVariable i -> j
   * 29 Weak Mutation 580: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - ReplaceVariable i -> size
   * 30 Weak Mutation 581: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - InsertUnaryOp Negation of i
   * 31 Weak Mutation 582: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - InsertUnaryOp IINC 1 i
   * 32 Weak Mutation 583: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - InsertUnaryOp IINC -1 i
   * 33 Weak Mutation 584: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - ReplaceVariable FREE -> REMOVED
   * 34 Weak Mutation 585: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - DeleteField: FREELjava/lang/Object;
   * 35 Weak Mutation 586: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - ReplaceComparisonOperator == -> !=
   * 36 gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D: I10 Branch 35 IF_ICMPGE L389 - true
   * 37 gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D: I37 Branch 36 IFLE L396 - true
   * 38 gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D: I37 Branch 36 IFLE L396 - false
   * 39 gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D: I44 Branch 37 IF_ACMPEQ L397 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(8);
      double[] doubleArray0 = tObjectDoubleHashMap0.values();
      assertNotNull(doubleArray0);
      
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap1 = new TObjectDoubleHashMap<Integer>();
      double[] doubleArray1 = tObjectDoubleHashMap1.values(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(17, tObjectDoubleHashMap0.capacity());
      assertEquals(0.0, tObjectDoubleHashMap0.getNoEntryValue(), 0.01D);
  }

  //Test case number: 16
  /*
   * 76 covered goals:
   * 1 Weak Mutation 560: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:389 - ReplaceComparisonOperator >= -> -1
   * 2 Weak Mutation 563: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:390 - InsertUnaryOp IINC -1 size
   * 3 Weak Mutation 562: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:390 - InsertUnaryOp IINC 1 size
   * 4 Weak Mutation 561: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:390 - InsertUnaryOp Negation of size
   * 5 Weak Mutation 588: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - ReplaceVariable i -> j
   * 6 Weak Mutation 589: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - ReplaceVariable i -> size
   * 7 Weak Mutation 590: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - InsertUnaryOp Negation of i
   * 8 Weak Mutation 591: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - InsertUnaryOp IINC 1 i
   * 9 Weak Mutation 593: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - ReplaceVariable REMOVED -> FREE
   * 10 Weak Mutation 592: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - InsertUnaryOp IINC -1 i
   * 11 Weak Mutation 595: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - ReplaceComparisonOperator == -> !=
   * 12 Weak Mutation 594: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - DeleteField: REMOVEDLjava/lang/Object;
   * 13 Weak Mutation 608: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - InsertUnaryOp IINC 1 i
   * 14 Weak Mutation 609: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - InsertUnaryOp IINC -1 i
   * 15 Weak Mutation 597: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - ReplaceVariable j -> i
   * 16 Weak Mutation 596: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - ReplaceVariable array -> v
   * 17 Weak Mutation 599: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - InsertUnaryOp Negation of j
   * 18 Weak Mutation 598: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - ReplaceVariable j -> size
   * 19 Weak Mutation 601: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - InsertUnaryOp IINC -1 j
   * 20 Weak Mutation 600: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - InsertUnaryOp IINC 1 j
   * 21 Weak Mutation 603: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - ReplaceVariable j -> size
   * 22 Weak Mutation 602: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - ReplaceVariable j -> i
   * 23 Weak Mutation 605: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - ReplaceVariable i -> j
   * 24 Weak Mutation 604: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - ReplaceVariable v -> array
   * 25 Weak Mutation 607: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - InsertUnaryOp Negation of i
   * 26 Weak Mutation 606: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - ReplaceVariable i -> size
   * 27 gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D: I10 Branch 35 IF_ICMPGE L389 - false
   * 28 gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D: I44 Branch 37 IF_ACMPEQ L397 - false
   * 29 gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D: I49 Branch 38 IF_ACMPEQ L397 - false
   * 30 Weak Mutation 553: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:382 - ReplaceVariable vals -> v
   * 31 Weak Mutation 516: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:377 - ReplaceVariable v -> vals
   * 32 Weak Mutation 517: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:377 - ReplaceConstant - 0 -> 1
   * 33 Weak Mutation 518: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:377 - ReplaceVariable i -> j
   * 34 Weak Mutation 519: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:377 - InsertUnaryOp Negation of i
   * 35 Weak Mutation 513: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:373 - DeleteStatement: size()I
   * 36 Weak Mutation 514: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:374 - DeleteField: _values[D
   * 37 Weak Mutation 515: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:375 - DeleteField: _set[Ljava/lang/Object;
   * 38 Weak Mutation 524: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:377 - ReplaceComparisonOperator <= -> <
   * 39 Weak Mutation 525: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:377 - ReplaceComparisonOperator <= -> -1
   * 40 Weak Mutation 527: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - ReplaceVariable i -> j
   * 41 Weak Mutation 520: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:377 - InsertUnaryOp IINC 1 i
   * 42 Weak Mutation 521: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:377 - InsertUnaryOp IINC -1 i
   * 43 Weak Mutation 522: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:377 - ReplaceVariable i -> j
   * 44 Weak Mutation 533: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - ReplaceComparisonOperator == -> !=
   * 45 Weak Mutation 532: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - DeleteField: FREELjava/lang/Object;
   * 46 Weak Mutation 529: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - InsertUnaryOp IINC 1 i
   * 47 Weak Mutation 528: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - InsertUnaryOp Negation of i
   * 48 Weak Mutation 531: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - ReplaceVariable FREE -> REMOVED
   * 49 Weak Mutation 530: gnu.trove.map.hash.TObjectDoubleHashMap.values()[D:378 - InsertUnaryOp IINC -1 i
   * 50 Weak Mutation 615: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:401 - ReplaceComparisonOperator <= -> <
   * 51 Weak Mutation 563: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:390 - InsertUnaryOp IINC -1 size
   * 52 Weak Mutation 562: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:390 - InsertUnaryOp IINC 1 size
   * 53 Weak Mutation 561: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:390 - InsertUnaryOp Negation of size
   * 54 Weak Mutation 560: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:389 - ReplaceComparisonOperator >= -> -1
   * 55 Weak Mutation 608: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - InsertUnaryOp IINC 1 i
   * 56 Weak Mutation 609: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - InsertUnaryOp IINC -1 i
   * 57 Weak Mutation 588: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - ReplaceVariable i -> j
   * 58 Weak Mutation 589: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - ReplaceVariable i -> size
   * 59 Weak Mutation 590: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - InsertUnaryOp Negation of i
   * 60 Weak Mutation 591: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - InsertUnaryOp IINC 1 i
   * 61 Weak Mutation 593: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - ReplaceVariable REMOVED -> FREE
   * 62 Weak Mutation 592: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - InsertUnaryOp IINC -1 i
   * 63 Weak Mutation 595: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - ReplaceComparisonOperator == -> !=
   * 64 Weak Mutation 594: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - DeleteField: REMOVEDLjava/lang/Object;
   * 65 Weak Mutation 597: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - ReplaceVariable j -> i
   * 66 Weak Mutation 596: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - ReplaceVariable array -> v
   * 67 Weak Mutation 599: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - InsertUnaryOp Negation of j
   * 68 Weak Mutation 598: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - ReplaceVariable j -> size
   * 69 Weak Mutation 601: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - InsertUnaryOp IINC -1 j
   * 70 Weak Mutation 600: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - InsertUnaryOp IINC 1 j
   * 71 Weak Mutation 603: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - ReplaceVariable j -> size
   * 72 Weak Mutation 602: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - ReplaceVariable j -> i
   * 73 Weak Mutation 605: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - ReplaceVariable i -> j
   * 74 Weak Mutation 604: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - ReplaceVariable v -> array
   * 75 Weak Mutation 607: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - InsertUnaryOp Negation of i
   * 76 Weak Mutation 606: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:398 - ReplaceVariable i -> size
   */

  @Test
  public void test16()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(1997, 0.0F, (-326.9084685753613));
      double[] doubleArray0 = tObjectDoubleHashMap0.values();
      tObjectDoubleHashMap0.putIfAbsent((Double) (-326.9084685753613), (-1857.069569197783));
      tObjectDoubleHashMap0.values(doubleArray0);
      assertEquals(7, tObjectDoubleHashMap0.capacity());
      assertEquals("{-326.9084685753613=-1857.069569197783}", tObjectDoubleHashMap0.toString());
  }

  //Test case number: 17
  /*
   * 47 covered goals:
   * 1 Weak Mutation 622: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:402 - DeleteField: no_entry_valueD
   * 2 Weak Mutation 558: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:389 - ReplaceComparisonOperator >= -> ==
   * 3 Weak Mutation 556: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:389 - InsertUnaryOp IINC 1 size
   * 4 Weak Mutation 557: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:389 - InsertUnaryOp IINC -1 size
   * 5 Weak Mutation 554: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:388 - DeleteStatement: size()I
   * 6 Weak Mutation 555: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:389 - InsertUnaryOp Negation of size
   * 7 Weak Mutation 567: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:396 - ReplaceConstant - 0 -> 1
   * 8 Weak Mutation 566: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:396 - ReplaceVariable v -> array
   * 9 Weak Mutation 565: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:394 - DeleteField: _set[Ljava/lang/Object;
   * 10 Weak Mutation 564: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:393 - DeleteField: _values[D
   * 11 Weak Mutation 574: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:396 - ReplaceVariable i -> size
   * 12 Weak Mutation 573: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:396 - ReplaceVariable i -> j
   * 13 Weak Mutation 572: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:396 - InsertUnaryOp IINC -1 i
   * 14 Weak Mutation 571: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:396 - InsertUnaryOp IINC 1 i
   * 15 Weak Mutation 570: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:396 - InsertUnaryOp Negation of i
   * 16 Weak Mutation 569: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:396 - ReplaceVariable i -> size
   * 17 Weak Mutation 568: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:396 - ReplaceVariable i -> j
   * 18 Weak Mutation 610: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:401 - ReplaceVariable array -> v
   * 19 Weak Mutation 611: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:401 - InsertUnaryOp Negation of size
   * 20 Weak Mutation 612: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:401 - InsertUnaryOp IINC 1 size
   * 21 Weak Mutation 613: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:401 - InsertUnaryOp IINC -1 size
   * 22 Weak Mutation 618: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:402 - InsertUnaryOp Negation of size
   * 23 Weak Mutation 619: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:402 - InsertUnaryOp IINC 1 size
   * 24 Weak Mutation 616: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:401 - ReplaceComparisonOperator <= -> -1
   * 25 Weak Mutation 617: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:402 - ReplaceVariable array -> v
   * 26 Weak Mutation 623: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:404 - ReplaceVariable array -> v
   * 27 Weak Mutation 620: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:402 - InsertUnaryOp IINC -1 size
   * 28 Weak Mutation 621: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:402 - InsertUnaryOp Negation
   * 29 Weak Mutation 576: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:396 - ReplaceComparisonOperator <= -> <
   * 30 Weak Mutation 577: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:396 - ReplaceComparisonOperator <= -> -1
   * 31 Weak Mutation 579: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - ReplaceVariable i -> j
   * 32 Weak Mutation 580: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - ReplaceVariable i -> size
   * 33 Weak Mutation 581: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - InsertUnaryOp Negation of i
   * 34 Weak Mutation 582: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - InsertUnaryOp IINC 1 i
   * 35 Weak Mutation 583: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - InsertUnaryOp IINC -1 i
   * 36 Weak Mutation 584: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - ReplaceVariable FREE -> REMOVED
   * 37 Weak Mutation 585: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - DeleteField: FREELjava/lang/Object;
   * 38 Weak Mutation 586: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:397 - ReplaceComparisonOperator == -> !=
   * 39 Weak Mutation 558: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:389 - ReplaceComparisonOperator >= -> ==
   * 40 Weak Mutation 618: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:402 - InsertUnaryOp Negation of size
   * 41 Weak Mutation 619: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:402 - InsertUnaryOp IINC 1 size
   * 42 Weak Mutation 616: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:401 - ReplaceComparisonOperator <= -> -1
   * 43 Weak Mutation 617: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:402 - ReplaceVariable array -> v
   * 44 Weak Mutation 622: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:402 - DeleteField: no_entry_valueD
   * 45 Weak Mutation 620: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:402 - InsertUnaryOp IINC -1 size
   * 46 Weak Mutation 621: gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D:402 - InsertUnaryOp Negation
   * 47 gnu.trove.map.hash.TObjectDoubleHashMap.values([D)[D: I65 Branch 39 IF_ICMPLE L401 - false
   */

  @Test
  public void test17()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>((-229), (float) (-229), (-981.5900138569189));
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = tObjectDoubleHashMap0.values(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals((-981.5900138569189), tObjectDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertSame(doubleArray0, doubleArray1);
  }

  //Test case number: 18
  /*
   * 30 covered goals:
   * 1 Weak Mutation 627: gnu.trove.map.hash.TObjectDoubleHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceConstant - 1.0 -> -1.0
   * 2 Weak Mutation 626: gnu.trove.map.hash.TObjectDoubleHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceConstant - 1.0 -> 0.0
   * 3 Weak Mutation 625: gnu.trove.map.hash.TObjectDoubleHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceVariable key -> REMOVED
   * 4 Weak Mutation 624: gnu.trove.map.hash.TObjectDoubleHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceVariable key -> FREE
   * 5 Weak Mutation 629: gnu.trove.map.hash.TObjectDoubleHashMap.increment(Ljava/lang/Object;)Z:420 - DeleteStatement: adjustValue(Ljava/lang/Object;D)Z
   * 6 Weak Mutation 628: gnu.trove.map.hash.TObjectDoubleHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceConstant - 1.0 -> 2.0
   * 7 Weak Mutation 631: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:426 - ReplaceVariable key -> REMOVED
   * 8 Weak Mutation 630: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:426 - ReplaceVariable key -> FREE
   * 9 Weak Mutation 632: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:426 - DeleteStatement: index(Ljava/lang/Object;)I
   * 10 Weak Mutation 635: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:427 - InsertUnaryOp IINC -1 index
   * 11 Weak Mutation 634: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:427 - InsertUnaryOp IINC 1 index
   * 12 Weak Mutation 633: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:427 - InsertUnaryOp Negation of index
   * 13 Weak Mutation 638: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:427 - ReplaceComparisonOperator >= -> -1
   * 14 Weak Mutation 639: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:428 - ReplaceConstant - 0 -> 1
   * 15 gnu.trove.map.hash.TObjectDoubleHashMap.increment(Ljava/lang/Object;)Z: root-Branch
   * 16 gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z: I9 Branch 40 IFGE L427 - false
   * 17 Weak Mutation 627: gnu.trove.map.hash.TObjectDoubleHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceConstant - 1.0 -> -1.0
   * 18 Weak Mutation 626: gnu.trove.map.hash.TObjectDoubleHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceConstant - 1.0 -> 0.0
   * 19 Weak Mutation 625: gnu.trove.map.hash.TObjectDoubleHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceVariable key -> REMOVED
   * 20 Weak Mutation 624: gnu.trove.map.hash.TObjectDoubleHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceVariable key -> FREE
   * 21 Weak Mutation 631: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:426 - ReplaceVariable key -> REMOVED
   * 22 Weak Mutation 630: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:426 - ReplaceVariable key -> FREE
   * 23 Weak Mutation 629: gnu.trove.map.hash.TObjectDoubleHashMap.increment(Ljava/lang/Object;)Z:420 - DeleteStatement: adjustValue(Ljava/lang/Object;D)Z
   * 24 Weak Mutation 628: gnu.trove.map.hash.TObjectDoubleHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceConstant - 1.0 -> 2.0
   * 25 Weak Mutation 635: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:427 - InsertUnaryOp IINC -1 index
   * 26 Weak Mutation 634: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:427 - InsertUnaryOp IINC 1 index
   * 27 Weak Mutation 633: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:427 - InsertUnaryOp Negation of index
   * 28 Weak Mutation 632: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:426 - DeleteStatement: index(Ljava/lang/Object;)I
   * 29 Weak Mutation 639: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:428 - ReplaceConstant - 0 -> 1
   * 30 Weak Mutation 638: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:427 - ReplaceComparisonOperator >= -> -1
   */

  @Test
  public void test18()  throws Throwable  {
      TObjectDoubleHashMap<String> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<String>((-1), (float) (-1), 0.0);
      boolean boolean0 = tObjectDoubleHashMap0.increment("\nequals() of a or b object are asymmetric");
      assertEquals(0.0, tObjectDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals(false, boolean0);
  }

  //Test case number: 19
  /*
   * 19 covered goals:
   * 1 Weak Mutation 637: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:427 - ReplaceComparisonOperator >= -> >
   * 2 Weak Mutation 644: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - InsertUnaryOp Negation of amount
   * 3 Weak Mutation 647: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - ReplaceArithmeticOperator + -> /
   * 4 Weak Mutation 646: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - ReplaceArithmeticOperator + -> %
   * 5 Weak Mutation 641: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - InsertUnaryOp Negation of index
   * 6 Weak Mutation 640: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - DeleteField: _values[D
   * 7 Weak Mutation 643: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - InsertUnaryOp IINC -1 index
   * 8 Weak Mutation 642: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - InsertUnaryOp IINC 1 index
   * 9 Weak Mutation 649: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:431 - ReplaceConstant - 1 -> 0
   * 10 gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z: I9 Branch 40 IFGE L427 - true
   * 11 Weak Mutation 637: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:427 - ReplaceComparisonOperator >= -> >
   * 12 Weak Mutation 649: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:431 - ReplaceConstant - 1 -> 0
   * 13 Weak Mutation 644: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - InsertUnaryOp Negation of amount
   * 14 Weak Mutation 647: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - ReplaceArithmeticOperator + -> /
   * 15 Weak Mutation 646: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - ReplaceArithmeticOperator + -> %
   * 16 Weak Mutation 641: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - InsertUnaryOp Negation of index
   * 17 Weak Mutation 640: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - DeleteField: _values[D
   * 18 Weak Mutation 643: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - InsertUnaryOp IINC -1 index
   * 19 Weak Mutation 642: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - InsertUnaryOp IINC 1 index
   */

  @Test
  public void test19()  throws Throwable  {
      TObjectDoubleHashMap<String> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<String>(1, 0.0F, 747.0759965711228);
      tObjectDoubleHashMap0.putIfAbsent("=gZkF^Sv0cA", (double) 1);
      boolean boolean0 = tObjectDoubleHashMap0.adjustValue("=gZkF^Sv0cA", (double) 0.0F);
      assertEquals(7, tObjectDoubleHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 20
  /*
   * 20 covered goals:
   * 1 Weak Mutation 636: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:427 - ReplaceComparisonOperator >= -> ==
   * 2 Weak Mutation 648: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - ReplaceArithmeticOperator + -> *
   * 3 Weak Mutation 645: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - ReplaceArithmeticOperator + -> -
   * 4 Weak Mutation 631: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:426 - ReplaceVariable key -> REMOVED
   * 5 Weak Mutation 630: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:426 - ReplaceVariable key -> FREE
   * 6 Weak Mutation 635: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:427 - InsertUnaryOp IINC -1 index
   * 7 Weak Mutation 634: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:427 - InsertUnaryOp IINC 1 index
   * 8 Weak Mutation 633: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:427 - InsertUnaryOp Negation of index
   * 9 Weak Mutation 632: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:426 - DeleteStatement: index(Ljava/lang/Object;)I
   * 10 Weak Mutation 649: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:431 - ReplaceConstant - 1 -> 0
   * 11 Weak Mutation 644: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - InsertUnaryOp Negation of amount
   * 12 Weak Mutation 647: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - ReplaceArithmeticOperator + -> /
   * 13 Weak Mutation 646: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - ReplaceArithmeticOperator + -> %
   * 14 Weak Mutation 641: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - InsertUnaryOp Negation of index
   * 15 Weak Mutation 640: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - DeleteField: _values[D
   * 16 Weak Mutation 643: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - InsertUnaryOp IINC -1 index
   * 17 Weak Mutation 642: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - InsertUnaryOp IINC 1 index
   * 18 Weak Mutation 636: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:427 - ReplaceComparisonOperator >= -> ==
   * 19 Weak Mutation 648: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - ReplaceArithmeticOperator + -> *
   * 20 Weak Mutation 645: gnu.trove.map.hash.TObjectDoubleHashMap.adjustValue(Ljava/lang/Object;D)Z:430 - ReplaceArithmeticOperator + -> -
   */

  @Test
  public void test20()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(1997, 0.0F, (-326.9084685753613));
      tObjectDoubleHashMap0.putIfAbsent((Double) (-326.9084685753613), (-1857.069569197783));
      boolean boolean0 = tObjectDoubleHashMap0.adjustValue((Double) (-326.9084685753613), (-1113.4747065223985));
      assertEquals(1, tObjectDoubleHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 21
  /*
   * 2 covered goals:
   * 1 Weak Mutation 657: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:443 - ReplaceComparisonOperator >= -> >
   * 2 Weak Mutation 657: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:443 - ReplaceComparisonOperator >= -> >
   */

  @Test
  public void test21()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(0);
      double double0 = tObjectDoubleHashMap0.adjustOrPutValue((Integer) 0, 0.0, 0.0);
      assertEquals("{0=0.0}", tObjectDoubleHashMap0.toString());
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 22
  /*
   * 45 covered goals:
   * 1 Weak Mutation 664: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:444 - ReplaceArithmeticOperator - -> %
   * 2 Weak Mutation 222: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:189 - ReplaceComparisonOperator >= -> >
   * 3 Weak Mutation 677: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:446 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 676: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:445 - ReplaceArithmeticOperator + -> *
   * 5 Weak Mutation 675: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:445 - ReplaceArithmeticOperator + -> /
   * 6 Weak Mutation 674: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:445 - ReplaceArithmeticOperator + -> %
   * 7 Weak Mutation 673: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:445 - ReplaceArithmeticOperator + -> -
   * 8 Weak Mutation 672: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:445 - InsertUnaryOp Negation of adjust_amount
   * 9 Weak Mutation 691: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:458 - ReplaceVariable newValue -> put_amount
   * 10 Weak Mutation 668: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:445 - InsertUnaryOp Negation of index
   * 11 Weak Mutation 669: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:445 - InsertUnaryOp IINC 1 index
   * 12 Weak Mutation 670: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:445 - InsertUnaryOp IINC -1 index
   * 13 Weak Mutation 671: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:445 - ReplaceVariable adjust_amount -> put_amount
   * 14 Weak Mutation 665: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:444 - ReplaceArithmeticOperator - -> /
   * 15 Weak Mutation 666: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:444 - ReplaceArithmeticOperator - -> *
   * 16 Weak Mutation 667: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:445 - DeleteField: _values[D
   * 17 Weak Mutation 660: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:444 - InsertUnaryOp IINC 1 index
   * 18 Weak Mutation 661: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:444 - InsertUnaryOp IINC -1 index
   * 19 Weak Mutation 662: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:444 - ReplaceConstant - 1 -> 0
   * 20 Weak Mutation 663: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:444 - ReplaceArithmeticOperator - -> +
   * 21 Weak Mutation 658: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:443 - ReplaceComparisonOperator >= -> -1
   * 22 Weak Mutation 659: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:444 - InsertUnaryOp Negation of index
   * 23 Weak Mutation 677: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:446 - ReplaceConstant - 0 -> 1
   * 24 Weak Mutation 676: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:445 - ReplaceArithmeticOperator + -> *
   * 25 Weak Mutation 675: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:445 - ReplaceArithmeticOperator + -> /
   * 26 Weak Mutation 674: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:445 - ReplaceArithmeticOperator + -> %
   * 27 Weak Mutation 673: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:445 - ReplaceArithmeticOperator + -> -
   * 28 Weak Mutation 672: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:445 - InsertUnaryOp Negation of adjust_amount
   * 29 Weak Mutation 691: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:458 - ReplaceVariable newValue -> put_amount
   * 30 Weak Mutation 668: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:445 - InsertUnaryOp Negation of index
   * 31 Weak Mutation 669: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:445 - InsertUnaryOp IINC 1 index
   * 32 Weak Mutation 670: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:445 - InsertUnaryOp IINC -1 index
   * 33 Weak Mutation 671: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:445 - ReplaceVariable adjust_amount -> put_amount
   * 34 Weak Mutation 664: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:444 - ReplaceArithmeticOperator - -> %
   * 35 Weak Mutation 665: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:444 - ReplaceArithmeticOperator - -> /
   * 36 Weak Mutation 666: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:444 - ReplaceArithmeticOperator - -> *
   * 37 Weak Mutation 667: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:445 - DeleteField: _values[D
   * 38 Weak Mutation 660: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:444 - InsertUnaryOp IINC 1 index
   * 39 Weak Mutation 661: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:444 - InsertUnaryOp IINC -1 index
   * 40 Weak Mutation 662: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:444 - ReplaceConstant - 1 -> 0
   * 41 Weak Mutation 663: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:444 - ReplaceArithmeticOperator - -> +
   * 42 Weak Mutation 658: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:443 - ReplaceComparisonOperator >= -> -1
   * 43 Weak Mutation 659: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:444 - InsertUnaryOp Negation of index
   * 44 gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D: I9 Branch 41 IFGE L443 - false
   * 45 gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D: I51 Branch 42 IFEQ L454 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TObjectDoubleHashMap<String> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<String>(1, 0.0F, 747.0759965711228);
      tObjectDoubleHashMap0.putIfAbsent("=gZkF^Sv0cA", (double) 1);
      tObjectDoubleHashMap0.ensureCapacity(1);
      double double0 = tObjectDoubleHashMap0.adjustOrPutValue("=gZkF^Sv0cA", 747.0759965711228, Double.POSITIVE_INFINITY);
      assertEquals(false, tObjectDoubleHashMap0.isEmpty());
      assertEquals(748.0759965711228, double0, 0.01D);
  }

  //Test case number: 23
  /*
   * 4 covered goals:
   * 1 Weak Mutation 693: gnu.trove.map.hash.TObjectDoubleHashMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z:470 - DeleteStatement: forEach(Lgnu/trove/procedure/TObjectProcedure;)Z
   * 2 gnu.trove.map.hash.TObjectDoubleHashMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   * 3 Weak Mutation 106: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:124 - ReplaceComparisonOperator == -> -2
   * 4 Weak Mutation 693: gnu.trove.map.hash.TObjectDoubleHashMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z:470 - DeleteStatement: forEach(Lgnu/trove/procedure/TObjectProcedure;)Z
   */

  @Test
  public void test23()  throws Throwable  {
      TObjectDoubleHashMap<String> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<String>(0, 0, 0);
      String[] stringArray0 = new String[2];
      ToObjectArrayProceedure<String> toObjectArrayProceedure0 = new ToObjectArrayProceedure<String>(stringArray0);
      boolean boolean0 = tObjectDoubleHashMap0.forEachKey((TObjectProcedure<? super String>) toObjectArrayProceedure0);
      assertEquals(true, boolean0);
      assertEquals(0.0, tObjectDoubleHashMap0.getNoEntryValue(), 0.01D);
  }

  //Test case number: 24
  /*
   * 47 covered goals:
   * 1 Weak Mutation 694: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:482 - DeleteField: _set[Ljava/lang/Object;
   * 2 Weak Mutation 695: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:483 - DeleteField: _values[D
   * 3 Weak Mutation 700: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:484 - ReplaceComparisonOperator <= -> <
   * 4 Weak Mutation 701: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:484 - ReplaceComparisonOperator <= -> -1
   * 5 Weak Mutation 698: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:484 - InsertUnaryOp IINC -1 i
   * 6 Weak Mutation 696: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:484 - InsertUnaryOp Negation of i
   * 7 Weak Mutation 697: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:484 - InsertUnaryOp IINC 1 i
   * 8 Weak Mutation 703: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:485 - InsertUnaryOp Negation of i
   * 9 Weak Mutation 705: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:485 - InsertUnaryOp IINC -1 i
   * 10 Weak Mutation 704: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:485 - InsertUnaryOp IINC 1 i
   * 11 Weak Mutation 707: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:485 - DeleteField: FREELjava/lang/Object;
   * 12 Weak Mutation 706: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:485 - ReplaceVariable FREE -> REMOVED
   * 13 Weak Mutation 708: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:485 - ReplaceComparisonOperator == -> !=
   * 14 Weak Mutation 722: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:490 - ReplaceConstant - 1 -> 0
   * 15 Weak Mutation 1223: gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.toString()Ljava/lang/String;:932 - ReplaceConstant - { -> 
   * 16 Weak Mutation 1225: gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.toString()Ljava/lang/String;:933 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z
   * 17 Weak Mutation 1224: gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.toString()Ljava/lang/String;:933 - DeleteField: this$0Lgnu/trove/map/hash/TObjectDoubleHashMap;
   * 18 Weak Mutation 1227: gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.toString()Ljava/lang/String;:947 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 19 Weak Mutation 1226: gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.toString()Ljava/lang/String;:947 - ReplaceConstant - } -> 
   * 20 Weak Mutation 1228: gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.toString()Ljava/lang/String;:948 - DeleteStatement: toString()Ljava/lang/String;
   * 21 gnu.trove.map.hash.TObjectDoubleHashMap.valueCollection()Lgnu/trove/TDoubleCollection;: root-Branch
   * 22 gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.<init>(Lgnu/trove/map/hash/TObjectDoubleHashMap;)V: root-Branch
   * 23 gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.toString()Ljava/lang/String;: root-Branch
   * 24 gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection$1.<init>(Lgnu/trove/map/hash/TObjectDoubleHashMap$TDoubleValueCollection;Ljava/lang/StringBuilder;)V: root-Branch
   * 25 gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I18 Branch 43 IFLE L484 - true
   * 26 gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I18 Branch 43 IFLE L484 - false
   * 27 gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: I25 Branch 44 IF_ACMPEQ L485 - true
   * 28 Weak Mutation 703: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:485 - InsertUnaryOp Negation of i
   * 29 Weak Mutation 700: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:484 - ReplaceComparisonOperator <= -> <
   * 30 Weak Mutation 701: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:484 - ReplaceComparisonOperator <= -> -1
   * 31 Weak Mutation 698: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:484 - InsertUnaryOp IINC -1 i
   * 32 Weak Mutation 696: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:484 - InsertUnaryOp Negation of i
   * 33 Weak Mutation 697: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:484 - InsertUnaryOp IINC 1 i
   * 34 Weak Mutation 694: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:482 - DeleteField: _set[Ljava/lang/Object;
   * 35 Weak Mutation 695: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:483 - DeleteField: _values[D
   * 36 Weak Mutation 705: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:485 - InsertUnaryOp IINC -1 i
   * 37 Weak Mutation 704: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:485 - InsertUnaryOp IINC 1 i
   * 38 Weak Mutation 707: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:485 - DeleteField: FREELjava/lang/Object;
   * 39 Weak Mutation 706: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:485 - ReplaceVariable FREE -> REMOVED
   * 40 Weak Mutation 708: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:485 - ReplaceComparisonOperator == -> !=
   * 41 Weak Mutation 722: gnu.trove.map.hash.TObjectDoubleHashMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:490 - ReplaceConstant - 1 -> 0
   * 42 Weak Mutation 1223: gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.toString()Ljava/lang/String;:932 - ReplaceConstant - { -> 
   * 43 Weak Mutation 1228: gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.toString()Ljava/lang/String;:948 - DeleteStatement: toString()Ljava/lang/String;
   * 44 Weak Mutation 1225: gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.toString()Ljava/lang/String;:933 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z
   * 45 Weak Mutation 1224: gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.toString()Ljava/lang/String;:933 - DeleteField: this$0Lgnu/trove/map/hash/TObjectDoubleHashMap;
   * 46 Weak Mutation 1227: gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.toString()Ljava/lang/String;:947 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 47 Weak Mutation 1226: gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.toString()Ljava/lang/String;:947 - ReplaceConstant - } -> 
   */

  @Test
  public void test24()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>((-229), (float) (-229), (-981.5900138569189));
      TDoubleCollection tDoubleCollection0 = tObjectDoubleHashMap0.valueCollection();
      TUnmodifiableDoubleCollection tUnmodifiableDoubleCollection0 = new TUnmodifiableDoubleCollection(tDoubleCollection0);
      String string0 = tUnmodifiableDoubleCollection0.toString();
      assertEquals((-981.5900138569189), tDoubleCollection0.getNoEntryValue(), 0.01D);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  //Test case number: 25
  /*
   * 43 covered goals:
   * 1 Weak Mutation 757: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:525 - ReplaceConstant - 0 -> 1
   * 2 Weak Mutation 758: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:527 - DeleteField: _set[Ljava/lang/Object;
   * 3 Weak Mutation 759: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:528 - DeleteField: _values[D
   * 4 Weak Mutation 760: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:531 - DeleteStatement: tempDisableAutoCompaction()V
   * 5 Weak Mutation 762: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:533 - InsertUnaryOp Negation of i
   * 6 Weak Mutation 763: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:533 - InsertUnaryOp IINC 1 i
   * 7 Weak Mutation 766: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:533 - ReplaceComparisonOperator <= -> <
   * 8 Weak Mutation 767: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:533 - ReplaceComparisonOperator <= -> -1
   * 9 Weak Mutation 764: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:533 - InsertUnaryOp IINC -1 i
   * 10 Weak Mutation 774: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:534 - ReplaceComparisonOperator == -> !=
   * 11 Weak Mutation 772: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:534 - ReplaceVariable FREE -> REMOVED
   * 12 Weak Mutation 773: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:534 - DeleteField: FREELjava/lang/Object;
   * 13 Weak Mutation 770: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:534 - InsertUnaryOp IINC 1 i
   * 14 Weak Mutation 771: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:534 - InsertUnaryOp IINC -1 i
   * 15 Weak Mutation 769: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:534 - InsertUnaryOp Negation of i
   * 16 Weak Mutation 797: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:543 - DeleteStatement: reenableAutoCompaction(Z)V
   * 17 Weak Mutation 796: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:543 - ReplaceConstant - 1 -> 0
   * 18 Weak Mutation 800: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:546 - InsertUnaryOp Negation of modified
   * 19 Weak Mutation 801: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:546 - InsertUnaryOp IINC 1 modified
   * 20 Weak Mutation 802: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:546 - InsertUnaryOp IINC -1 modified
   * 21 gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I27 Branch 51 IFLE L533 - true
   * 22 gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I27 Branch 51 IFLE L533 - false
   * 23 gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: I34 Branch 52 IF_ACMPEQ L534 - true
   * 24 Weak Mutation 762: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:533 - InsertUnaryOp Negation of i
   * 25 Weak Mutation 763: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:533 - InsertUnaryOp IINC 1 i
   * 26 Weak Mutation 760: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:531 - DeleteStatement: tempDisableAutoCompaction()V
   * 27 Weak Mutation 766: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:533 - ReplaceComparisonOperator <= -> <
   * 28 Weak Mutation 767: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:533 - ReplaceComparisonOperator <= -> -1
   * 29 Weak Mutation 764: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:533 - InsertUnaryOp IINC -1 i
   * 30 Weak Mutation 758: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:527 - DeleteField: _set[Ljava/lang/Object;
   * 31 Weak Mutation 759: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:528 - DeleteField: _values[D
   * 32 Weak Mutation 757: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:525 - ReplaceConstant - 0 -> 1
   * 33 Weak Mutation 800: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:546 - InsertUnaryOp Negation of modified
   * 34 Weak Mutation 801: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:546 - InsertUnaryOp IINC 1 modified
   * 35 Weak Mutation 802: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:546 - InsertUnaryOp IINC -1 modified
   * 36 Weak Mutation 797: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:543 - DeleteStatement: reenableAutoCompaction(Z)V
   * 37 Weak Mutation 796: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:543 - ReplaceConstant - 1 -> 0
   * 38 Weak Mutation 774: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:534 - ReplaceComparisonOperator == -> !=
   * 39 Weak Mutation 772: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:534 - ReplaceVariable FREE -> REMOVED
   * 40 Weak Mutation 773: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:534 - DeleteField: FREELjava/lang/Object;
   * 41 Weak Mutation 770: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:534 - InsertUnaryOp IINC 1 i
   * 42 Weak Mutation 771: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:534 - InsertUnaryOp IINC -1 i
   * 43 Weak Mutation 769: gnu.trove.map.hash.TObjectDoubleHashMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:534 - InsertUnaryOp Negation of i
   */

  @Test
  public void test25()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>();
      boolean boolean0 = tObjectDoubleHashMap0.retainEntries((TObjectDoubleProcedure<? super Integer>) null);
      assertEquals(false, boolean0);
      assertEquals(23, tObjectDoubleHashMap0.capacity());
  }

  //Test case number: 26
  /*
   * 49 covered goals:
   * 1 Weak Mutation 803: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:556 - DeleteField: _set[Ljava/lang/Object;
   * 2 Weak Mutation 804: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:557 - DeleteField: _values[D
   * 3 Weak Mutation 805: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:558 - InsertUnaryOp Negation of i
   * 4 Weak Mutation 806: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:558 - InsertUnaryOp IINC 1 i
   * 5 Weak Mutation 807: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:558 - InsertUnaryOp IINC -1 i
   * 6 Weak Mutation 810: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:558 - ReplaceComparisonOperator <= -> -1
   * 7 Weak Mutation 821: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:559 - DeleteField: REMOVEDLjava/lang/Object;
   * 8 Weak Mutation 820: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:559 - ReplaceVariable REMOVED -> FREE
   * 9 Weak Mutation 822: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:559 - ReplaceComparisonOperator == -> !=
   * 10 Weak Mutation 817: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:559 - InsertUnaryOp Negation of i
   * 11 Weak Mutation 819: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:559 - InsertUnaryOp IINC -1 i
   * 12 Weak Mutation 818: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:559 - InsertUnaryOp IINC 1 i
   * 13 Weak Mutation 812: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:559 - InsertUnaryOp Negation of i
   * 14 Weak Mutation 813: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:559 - InsertUnaryOp IINC 1 i
   * 15 Weak Mutation 814: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:559 - InsertUnaryOp IINC -1 i
   * 16 Weak Mutation 815: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:559 - ReplaceComparisonOperator = null -> != null
   * 17 Weak Mutation 823: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:560 - InsertUnaryOp Negation of i
   * 18 Weak Mutation 829: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:560 - DeleteStatement: execute(D)D
   * 19 Weak Mutation 828: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:560 - InsertUnaryOp IINC -1 i
   * 20 Weak Mutation 825: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:560 - InsertUnaryOp IINC -1 i
   * 21 Weak Mutation 824: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:560 - InsertUnaryOp IINC 1 i
   * 22 Weak Mutation 827: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:560 - InsertUnaryOp IINC 1 i
   * 23 Weak Mutation 826: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:560 - InsertUnaryOp Negation of i
   * 24 gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: I18 Branch 55 IFLE L558 - false
   * 25 gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: I24 Branch 56 IFNULL L559 - false
   * 26 gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: I29 Branch 57 IF_ACMPEQ L559 - false
   * 27 Weak Mutation 821: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:559 - DeleteField: REMOVEDLjava/lang/Object;
   * 28 Weak Mutation 820: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:559 - ReplaceVariable REMOVED -> FREE
   * 29 Weak Mutation 823: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:560 - InsertUnaryOp Negation of i
   * 30 Weak Mutation 822: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:559 - ReplaceComparisonOperator == -> !=
   * 31 Weak Mutation 817: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:559 - InsertUnaryOp Negation of i
   * 32 Weak Mutation 819: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:559 - InsertUnaryOp IINC -1 i
   * 33 Weak Mutation 818: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:559 - InsertUnaryOp IINC 1 i
   * 34 Weak Mutation 829: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:560 - DeleteStatement: execute(D)D
   * 35 Weak Mutation 828: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:560 - InsertUnaryOp IINC -1 i
   * 36 Weak Mutation 825: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:560 - InsertUnaryOp IINC -1 i
   * 37 Weak Mutation 824: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:560 - InsertUnaryOp IINC 1 i
   * 38 Weak Mutation 827: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:560 - InsertUnaryOp IINC 1 i
   * 39 Weak Mutation 826: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:560 - InsertUnaryOp Negation of i
   * 40 Weak Mutation 804: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:557 - DeleteField: _values[D
   * 41 Weak Mutation 805: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:558 - InsertUnaryOp Negation of i
   * 42 Weak Mutation 806: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:558 - InsertUnaryOp IINC 1 i
   * 43 Weak Mutation 807: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:558 - InsertUnaryOp IINC -1 i
   * 44 Weak Mutation 803: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:556 - DeleteField: _set[Ljava/lang/Object;
   * 45 Weak Mutation 812: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:559 - InsertUnaryOp Negation of i
   * 46 Weak Mutation 813: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:559 - InsertUnaryOp IINC 1 i
   * 47 Weak Mutation 814: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:559 - InsertUnaryOp IINC -1 i
   * 48 Weak Mutation 815: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:559 - ReplaceComparisonOperator = null -> != null
   * 49 Weak Mutation 810: gnu.trove.map.hash.TObjectDoubleHashMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V:558 - ReplaceComparisonOperator <= -> -1
   */

  @Test
  public void test26()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(1997, 0.0F, (-326.9084685753613));
      // Undeclared exception!
      try {
        tObjectDoubleHashMap0.transformValues((TDoubleFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 27
  /*
   * 9 covered goals:
   * 1 Weak Mutation 831: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceVariable other -> REMOVED
   * 2 Weak Mutation 830: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceVariable other -> FREE
   * 3 Weak Mutation 832: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceComparisonOperator != -> ==
   * 4 Weak Mutation 833: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:577 - ReplaceConstant - 0 -> 1
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 58 IFNE L576 - false
   * 6 Weak Mutation 831: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceVariable other -> REMOVED
   * 7 Weak Mutation 830: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceVariable other -> FREE
   * 8 Weak Mutation 832: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceComparisonOperator != -> ==
   * 9 Weak Mutation 833: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:577 - ReplaceConstant - 0 -> 1
   */

  @Test
  public void test27()  throws Throwable  {
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Object>(1080197120, 1080197120);
      boolean boolean0 = tObjectDoubleHashMap0.equals((Object) "/");
      assertEquals(false, boolean0);
      assertEquals(0.0, tObjectDoubleHashMap0.getNoEntryValue(), 0.01D);
  }

  //Test case number: 28
  /*
   * 21 covered goals:
   * 1 Weak Mutation 834: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:579 - ReplaceVariable other -> FREE
   * 2 Weak Mutation 835: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:579 - ReplaceVariable other -> REMOVED
   * 3 Weak Mutation 839: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:580 - ReplaceComparisonOperator == -> -2
   * 4 Weak Mutation 836: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:580 - DeleteStatement: size()I
   * 5 Weak Mutation 837: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:580 - DeleteStatement: size()I
   * 6 Weak Mutation 842: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:584 - DeleteStatement: iterator()Lgnu/trove/iterator/TObjectDoubleIterator;
   * 7 Weak Mutation 843: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:585 - DeleteStatement: hasNext()Z
   * 8 Weak Mutation 844: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:585 - ReplaceComparisonOperator == -> !=
   * 9 gnu.trove.map.hash.TObjectDoubleHashMap.iterator()Lgnu/trove/iterator/TObjectDoubleIterator;: root-Branch
   * 10 gnu.trove.map.hash.TObjectDoubleHashMap$TObjectDoubleHashIterator.<init>(Lgnu/trove/map/hash/TObjectDoubleHashMap;Lgnu/trove/map/hash/TObjectDoubleHashMap;)V: root-Branch
   * 11 gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 58 IFNE L576 - true
   * 12 gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 59 IF_ICMPEQ L580 - true
   * 13 gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 60 IFEQ L585 - true
   * 14 Weak Mutation 834: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:579 - ReplaceVariable other -> FREE
   * 15 Weak Mutation 835: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:579 - ReplaceVariable other -> REMOVED
   * 16 Weak Mutation 839: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:580 - ReplaceComparisonOperator == -> -2
   * 17 Weak Mutation 836: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:580 - DeleteStatement: size()I
   * 18 Weak Mutation 837: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:580 - DeleteStatement: size()I
   * 19 Weak Mutation 842: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:584 - DeleteStatement: iterator()Lgnu/trove/iterator/TObjectDoubleIterator;
   * 20 Weak Mutation 843: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:585 - DeleteStatement: hasNext()Z
   * 21 Weak Mutation 844: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:585 - ReplaceComparisonOperator == -> !=
   */

  @Test
  public void test28()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(1997, 0.0F, (-326.9084685753613));
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap1 = new TObjectDoubleHashMap<Integer>(1997, 172.78012F);
      boolean boolean0 = tObjectDoubleHashMap1.equals((Object) tObjectDoubleHashMap0);
      assertEquals((-326.9084685753613), tObjectDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals(true, boolean0);
      assertEquals(17, tObjectDoubleHashMap1.capacity());
      assertEquals(0.0, tObjectDoubleHashMap1.getNoEntryValue(), 0.01D);
  }

  //Test case number: 29
  /*
   * 90 covered goals:
   * 1 Weak Mutation 838: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:580 - ReplaceComparisonOperator == -> >=
   * 2 Weak Mutation 841: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:581 - ReplaceConstant - 0 -> 1
   * 3 gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 59 IF_ICMPEQ L580 - false
   * 4 Weak Mutation 155: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:174 - DeleteField: _set[Ljava/lang/Object;
   * 5 Weak Mutation 156: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:177 - DeleteField: _set[Ljava/lang/Object;
   * 6 Weak Mutation 157: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:178 - DeleteField: _values[D
   * 7 Weak Mutation 158: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:180 - ReplaceVariable newCapacity -> oldCapacity
   * 8 Weak Mutation 159: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:180 - InsertUnaryOp Negation of newCapacity
   * 9 Weak Mutation 171: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:183 - InsertUnaryOp Negation
   * 10 Weak Mutation 170: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:183 - DeleteField: _values[D
   * 11 Weak Mutation 169: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:182 - InsertUnaryOp IINC -1 newCapacity
   * 12 Weak Mutation 168: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:182 - InsertUnaryOp IINC 1 newCapacity
   * 13 Weak Mutation 175: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - InsertUnaryOp Negation of oldCapacity
   * 14 Weak Mutation 174: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - ReplaceVariable oldCapacity -> newCapacity
   * 15 Weak Mutation 173: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:183 - DeleteStatement: fill([DD)V
   * 16 Weak Mutation 172: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:183 - DeleteField: no_entry_valueD
   * 17 Weak Mutation 163: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:181 - ReplaceVariable FREE -> REMOVED
   * 18 Weak Mutation 162: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:181 - DeleteField: _set[Ljava/lang/Object;
   * 19 Weak Mutation 161: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:180 - InsertUnaryOp IINC -1 newCapacity
   * 20 Weak Mutation 160: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:180 - InsertUnaryOp IINC 1 newCapacity
   * 21 Weak Mutation 167: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:182 - InsertUnaryOp Negation of newCapacity
   * 22 Weak Mutation 166: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:182 - ReplaceVariable newCapacity -> oldCapacity
   * 23 Weak Mutation 165: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:181 - DeleteStatement: fill([Ljava/lang/Object;Ljava/lang/Object;)V
   * 24 Weak Mutation 164: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:181 - DeleteField: FREELjava/lang/Object;
   * 25 Weak Mutation 186: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - ReplaceComparisonOperator <= -> <
   * 26 Weak Mutation 187: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - ReplaceComparisonOperator <= -> -1
   * 27 Weak Mutation 184: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - ReplaceVariable i -> oldCapacity
   * 28 Weak Mutation 190: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceVariable i -> oldCapacity
   * 29 Weak Mutation 191: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - InsertUnaryOp Negation of i
   * 30 Weak Mutation 188: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceVariable oldKeys -> _set
   * 31 Weak Mutation 189: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceVariable i -> newCapacity
   * 32 Weak Mutation 178: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - ReplaceVariable i -> newCapacity
   * 33 Weak Mutation 179: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - ReplaceVariable i -> oldCapacity
   * 34 Weak Mutation 176: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - InsertUnaryOp IINC 1 oldCapacity
   * 35 Weak Mutation 177: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - InsertUnaryOp IINC -1 oldCapacity
   * 36 Weak Mutation 182: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - InsertUnaryOp IINC -1 i
   * 37 Weak Mutation 183: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - ReplaceVariable i -> newCapacity
   * 38 Weak Mutation 180: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - InsertUnaryOp Negation of i
   * 39 Weak Mutation 181: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:185 - InsertUnaryOp IINC 1 i
   * 40 Weak Mutation 205: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceComparisonOperator == -> !=
   * 41 Weak Mutation 204: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - DeleteField: REMOVEDLjava/lang/Object;
   * 42 Weak Mutation 207: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:187 - ReplaceVariable i -> newCapacity
   * 43 Weak Mutation 206: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:187 - ReplaceVariable oldKeys -> _set
   * 44 Weak Mutation 201: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - InsertUnaryOp IINC 1 i
   * 45 Weak Mutation 200: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - InsertUnaryOp Negation of i
   * 46 Weak Mutation 203: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceVariable REMOVED -> FREE
   * 47 Weak Mutation 202: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - InsertUnaryOp IINC -1 i
   * 48 Weak Mutation 197: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceVariable oldKeys -> _set
   * 49 Weak Mutation 196: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceComparisonOperator == -> !=
   * 50 Weak Mutation 199: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceVariable i -> oldCapacity
   * 51 Weak Mutation 198: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceVariable i -> newCapacity
   * 52 Weak Mutation 193: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - InsertUnaryOp IINC -1 i
   * 53 Weak Mutation 192: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - InsertUnaryOp IINC 1 i
   * 54 Weak Mutation 195: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - DeleteField: FREELjava/lang/Object;
   * 55 Weak Mutation 194: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:186 - ReplaceVariable FREE -> REMOVED
   * 56 Weak Mutation 220: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:189 - InsertUnaryOp IINC -1 index
   * 57 Weak Mutation 221: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:189 - ReplaceComparisonOperator >= -> ==
   * 58 Weak Mutation 216: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:189 - ReplaceVariable index -> oldCapacity
   * 59 Weak Mutation 217: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:189 - ReplaceVariable index -> i
   * 60 Weak Mutation 218: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:189 - InsertUnaryOp Negation of index
   * 61 Weak Mutation 219: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:189 - InsertUnaryOp IINC 1 index
   * 62 Weak Mutation 212: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:188 - ReplaceVariable o -> FREE
   * 63 Weak Mutation 213: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:188 - ReplaceVariable o -> REMOVED
   * 64 Weak Mutation 214: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:188 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 65 Weak Mutation 215: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:189 - ReplaceVariable index -> newCapacity
   * 66 Weak Mutation 208: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:187 - ReplaceVariable i -> oldCapacity
   * 67 Weak Mutation 209: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:187 - InsertUnaryOp Negation of i
   * 68 Weak Mutation 210: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:187 - InsertUnaryOp IINC 1 i
   * 69 Weak Mutation 211: gnu.trove.map.hash.TObjectDoubleHashMap.rehash(I)V:187 - InsertUnaryOp IINC -1 i
   * 70 Weak Mutation 313: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:248 - InsertUnaryOp Negation of value
   * 71 Weak Mutation 315: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:248 - InsertUnaryOp IINC 1 index
   * 72 Weak Mutation 314: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:248 - InsertUnaryOp Negation of index
   * 73 Weak Mutation 316: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:248 - InsertUnaryOp IINC -1 index
   * 74 Weak Mutation 318: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:253 - DeleteField: no_entry_valueD
   * 75 Weak Mutation 295: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:245 - ReplaceVariable key -> FREE
   * 76 Weak Mutation 296: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:245 - ReplaceVariable key -> REMOVED
   * 77 Weak Mutation 297: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:245 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 78 Weak Mutation 298: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:246 - InsertUnaryOp Negation of index
   * 79 Weak Mutation 299: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:246 - InsertUnaryOp IINC 1 index
   * 80 Weak Mutation 300: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:246 - InsertUnaryOp IINC -1 index
   * 81 Weak Mutation 301: gnu.trove.map.hash.TObjectDoubleHashMap.putIfAbsent(Ljava/lang/Object;D)D:246 - ReplaceComparisonOperator >= -> ==
   * 82 Weak Mutation 831: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceVariable other -> REMOVED
   * 83 Weak Mutation 830: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceVariable other -> FREE
   * 84 Weak Mutation 834: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:579 - ReplaceVariable other -> FREE
   * 85 Weak Mutation 835: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:579 - ReplaceVariable other -> REMOVED
   * 86 Weak Mutation 832: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceComparisonOperator != -> ==
   * 87 Weak Mutation 836: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:580 - DeleteStatement: size()I
   * 88 Weak Mutation 837: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:580 - DeleteStatement: size()I
   * 89 Weak Mutation 838: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:580 - ReplaceComparisonOperator == -> >=
   * 90 Weak Mutation 841: gnu.trove.map.hash.TObjectDoubleHashMap.equals(Ljava/lang/Object;)Z:581 - ReplaceConstant - 0 -> 1
   */

  @Test
  public void test29()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(1997, 0.0F, (-326.9084685753613));
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap1 = new TObjectDoubleHashMap<Integer>(1997);
      tObjectDoubleHashMap0.putIfAbsent((Double) (-326.9084685753613), (-1857.069569197783));
      boolean boolean0 = tObjectDoubleHashMap1.equals((Object) tObjectDoubleHashMap0);
      assertEquals(false, tObjectDoubleHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 30
  /*
   * 110 covered goals:
   * 1 Weak Mutation 930: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - ReplaceBitwiseOperator ^ -> |
   * 2 Weak Mutation 881: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:611 - DeleteField: _set[Ljava/lang/Object;
   * 3 Weak Mutation 880: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:610 - ReplaceConstant - 0 -> 1
   * 4 Weak Mutation 883: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:613 - ReplaceVariable i -> hashcode
   * 5 Weak Mutation 882: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:612 - DeleteField: _values[D
   * 6 Weak Mutation 885: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:613 - InsertUnaryOp IINC 1 i
   * 7 Weak Mutation 884: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:613 - InsertUnaryOp Negation of i
   * 8 Weak Mutation 887: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:613 - ReplaceVariable i -> hashcode
   * 9 Weak Mutation 886: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:613 - InsertUnaryOp IINC -1 i
   * 10 Weak Mutation 889: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:613 - ReplaceComparisonOperator <= -> <
   * 11 Weak Mutation 890: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:613 - ReplaceComparisonOperator <= -> -1
   * 12 Weak Mutation 893: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - InsertUnaryOp Negation of i
   * 13 Weak Mutation 892: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - ReplaceVariable i -> hashcode
   * 14 Weak Mutation 895: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - InsertUnaryOp IINC -1 i
   * 15 Weak Mutation 894: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - InsertUnaryOp IINC 1 i
   * 16 Weak Mutation 937: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:619 - InsertUnaryOp IINC -1 hashcode
   * 17 Weak Mutation 936: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:619 - InsertUnaryOp IINC 1 hashcode
   * 18 Weak Mutation 933: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> /
   * 19 Weak Mutation 932: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> %
   * 20 Weak Mutation 935: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:619 - InsertUnaryOp Negation of hashcode
   * 21 Weak Mutation 934: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> *
   * 22 Weak Mutation 929: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - ReplaceBitwiseOperator ^ -> &
   * 23 Weak Mutation 928: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - DeleteStatement: hashCode()I
   * 24 Weak Mutation 931: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> -
   * 25 Weak Mutation 926: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 i
   * 26 Weak Mutation 927: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 i
   * 27 Weak Mutation 924: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - ReplaceVariable i -> hashcode
   * 28 Weak Mutation 925: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp Negation of i
   * 29 Weak Mutation 920: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 i
   * 30 Weak Mutation 921: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - ReplaceComparisonOperator != null -> = null
   * 31 Weak Mutation 918: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp Negation of i
   * 32 Weak Mutation 919: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 i
   * 33 Weak Mutation 917: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - ReplaceVariable i -> hashcode
   * 34 Weak Mutation 914: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 i
   * 35 Weak Mutation 915: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - DeleteStatement: hash(D)I
   * 36 Weak Mutation 912: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp Negation of i
   * 37 Weak Mutation 913: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 i
   * 38 Weak Mutation 911: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - ReplaceVariable i -> hashcode
   * 39 Weak Mutation 910: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 hashcode
   * 40 Weak Mutation 909: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 hashcode
   * 41 Weak Mutation 908: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp Negation of hashcode
   * 42 Weak Mutation 907: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - ReplaceVariable hashcode -> i
   * 43 Weak Mutation 906: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - ReplaceComparisonOperator == -> !=
   * 44 Weak Mutation 905: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - DeleteField: REMOVEDLjava/lang/Object;
   * 45 Weak Mutation 904: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - ReplaceVariable REMOVED -> FREE
   * 46 Weak Mutation 903: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - InsertUnaryOp IINC -1 i
   * 47 Weak Mutation 902: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - InsertUnaryOp IINC 1 i
   * 48 Weak Mutation 901: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - InsertUnaryOp Negation of i
   * 49 Weak Mutation 900: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - ReplaceVariable i -> hashcode
   * 50 Weak Mutation 898: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - ReplaceComparisonOperator == -> !=
   * 51 Weak Mutation 897: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - DeleteField: FREELjava/lang/Object;
   * 52 Weak Mutation 896: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - ReplaceVariable FREE -> REMOVED
   * 53 Weak Mutation 881: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:611 - DeleteField: _set[Ljava/lang/Object;
   * 54 Weak Mutation 880: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:610 - ReplaceConstant - 0 -> 1
   * 55 Weak Mutation 883: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:613 - ReplaceVariable i -> hashcode
   * 56 Weak Mutation 882: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:612 - DeleteField: _values[D
   * 57 Weak Mutation 885: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:613 - InsertUnaryOp IINC 1 i
   * 58 Weak Mutation 884: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:613 - InsertUnaryOp Negation of i
   * 59 Weak Mutation 887: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:613 - ReplaceVariable i -> hashcode
   * 60 Weak Mutation 886: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:613 - InsertUnaryOp IINC -1 i
   * 61 Weak Mutation 889: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:613 - ReplaceComparisonOperator <= -> <
   * 62 Weak Mutation 890: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:613 - ReplaceComparisonOperator <= -> -1
   * 63 Weak Mutation 893: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - InsertUnaryOp Negation of i
   * 64 Weak Mutation 892: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - ReplaceVariable i -> hashcode
   * 65 Weak Mutation 895: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - InsertUnaryOp IINC -1 i
   * 66 Weak Mutation 894: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - InsertUnaryOp IINC 1 i
   * 67 Weak Mutation 937: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:619 - InsertUnaryOp IINC -1 hashcode
   * 68 Weak Mutation 936: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:619 - InsertUnaryOp IINC 1 hashcode
   * 69 Weak Mutation 933: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> /
   * 70 Weak Mutation 932: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> %
   * 71 Weak Mutation 935: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:619 - InsertUnaryOp Negation of hashcode
   * 72 Weak Mutation 934: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> *
   * 73 Weak Mutation 929: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - ReplaceBitwiseOperator ^ -> &
   * 74 Weak Mutation 928: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - DeleteStatement: hashCode()I
   * 75 Weak Mutation 931: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> -
   * 76 Weak Mutation 930: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - ReplaceBitwiseOperator ^ -> |
   * 77 Weak Mutation 926: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 i
   * 78 Weak Mutation 927: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 i
   * 79 Weak Mutation 924: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - ReplaceVariable i -> hashcode
   * 80 Weak Mutation 925: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp Negation of i
   * 81 Weak Mutation 920: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 i
   * 82 Weak Mutation 921: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - ReplaceComparisonOperator != null -> = null
   * 83 Weak Mutation 918: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp Negation of i
   * 84 Weak Mutation 919: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 i
   * 85 Weak Mutation 917: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - ReplaceVariable i -> hashcode
   * 86 Weak Mutation 914: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 i
   * 87 Weak Mutation 915: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - DeleteStatement: hash(D)I
   * 88 Weak Mutation 912: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp Negation of i
   * 89 Weak Mutation 913: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 i
   * 90 Weak Mutation 911: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - ReplaceVariable i -> hashcode
   * 91 Weak Mutation 910: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 hashcode
   * 92 Weak Mutation 909: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 hashcode
   * 93 Weak Mutation 908: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - InsertUnaryOp Negation of hashcode
   * 94 Weak Mutation 907: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:615 - ReplaceVariable hashcode -> i
   * 95 Weak Mutation 906: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - ReplaceComparisonOperator == -> !=
   * 96 Weak Mutation 905: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - DeleteField: REMOVEDLjava/lang/Object;
   * 97 Weak Mutation 904: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - ReplaceVariable REMOVED -> FREE
   * 98 Weak Mutation 903: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - InsertUnaryOp IINC -1 i
   * 99 Weak Mutation 902: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - InsertUnaryOp IINC 1 i
   * 100 Weak Mutation 901: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - InsertUnaryOp Negation of i
   * 101 Weak Mutation 900: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - ReplaceVariable i -> hashcode
   * 102 Weak Mutation 898: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - ReplaceComparisonOperator == -> !=
   * 103 Weak Mutation 897: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - DeleteField: FREELjava/lang/Object;
   * 104 Weak Mutation 896: gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I:614 - ReplaceVariable FREE -> REMOVED
   * 105 gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I: I22 Branch 65 IFLE L613 - true
   * 106 gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I: I22 Branch 65 IFLE L613 - false
   * 107 gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - true
   * 108 gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - false
   * 109 gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I: I34 Branch 67 IF_ACMPEQ L614 - false
   * 110 gnu.trove.map.hash.TObjectDoubleHashMap.hashCode()I: I45 Branch 68 IFNONNULL L615 - true
   */

  @Test
  public void test30()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(148, 148);
      Double double0 = new Double((double) 148);
      tObjectDoubleHashMap0.put(double0, 11.050765547398836);
      int int0 = tObjectDoubleHashMap0.hashCode();
      assertEquals("{148.0=11.050765547398836}", tObjectDoubleHashMap0.toString());
      assertEquals((-245418205), int0);
  }

  //Test case number: 31
  /*
   * 10 covered goals:
   * 1 Weak Mutation 4: gnu.trove.map.hash.TObjectDoubleHashMap$KeyView.iterator()Ljava/util/Iterator;:628 - DeleteField: this$0Lgnu/trove/map/hash/TObjectDoubleHashMap;
   * 2 Weak Mutation 23: gnu.trove.map.hash.TObjectDoubleHashMap$MapBackedView.size()I:667 - DeleteStatement: size()I
   * 3 Weak Mutation 22: gnu.trove.map.hash.TObjectDoubleHashMap$MapBackedView.size()I:667 - DeleteField: this$0Lgnu/trove/map/hash/TObjectDoubleHashMap;
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap.keySet()Ljava/util/Set;: root-Branch
   * 5 gnu.trove.map.hash.TObjectDoubleHashMap$KeyView.iterator()Ljava/util/Iterator;: root-Branch
   * 6 gnu.trove.map.hash.TObjectDoubleHashMap$KeyView.<init>(Lgnu/trove/map/hash/TObjectDoubleHashMap;)V: root-Branch
   * 7 gnu.trove.map.hash.TObjectDoubleHashMap$MapBackedView.size()I: root-Branch
   * 8 Weak Mutation 4: gnu.trove.map.hash.TObjectDoubleHashMap$KeyView.iterator()Ljava/util/Iterator;:628 - DeleteField: this$0Lgnu/trove/map/hash/TObjectDoubleHashMap;
   * 9 Weak Mutation 23: gnu.trove.map.hash.TObjectDoubleHashMap$MapBackedView.size()I:667 - DeleteStatement: size()I
   * 10 Weak Mutation 22: gnu.trove.map.hash.TObjectDoubleHashMap$MapBackedView.size()I:667 - DeleteField: this$0Lgnu/trove/map/hash/TObjectDoubleHashMap;
   */

  @Test
  public void test31()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(1997, 0.0F, (-326.9084685753613));
      Set<Double> set0 = tObjectDoubleHashMap0.keySet();
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet((Collection<? extends Double>) set0);
      assertEquals((-326.9084685753613), tObjectDoubleHashMap0.getNoEntryValue(), 0.01D);
  }

  //Test case number: 32
  /*
   * 21 covered goals:
   * 1 Weak Mutation 1016: gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.contains(D)Z:747 - DeleteField: this$0Lgnu/trove/map/hash/TObjectDoubleHashMap;
   * 2 Weak Mutation 1017: gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.contains(D)Z:747 - InsertUnaryOp Negation of entry
   * 3 Weak Mutation 1018: gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.contains(D)Z:747 - DeleteStatement: containsValue(D)Z
   * 4 gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.contains(D)Z: root-Branch
   * 5 Weak Mutation 254: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - DeleteField: FREELjava/lang/Object;
   * 6 Weak Mutation 255: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - ReplaceComparisonOperator == -> !=
   * 7 Weak Mutation 252: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp IINC -1 i
   * 8 Weak Mutation 253: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - ReplaceVariable FREE -> REMOVED
   * 9 Weak Mutation 250: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp Negation of i
   * 10 Weak Mutation 251: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:219 - InsertUnaryOp IINC 1 i
   * 11 Weak Mutation 248: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:218 - ReplaceComparisonOperator <= -> -1
   * 12 Weak Mutation 247: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:218 - ReplaceComparisonOperator <= -> <
   * 13 Weak Mutation 244: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:218 - InsertUnaryOp IINC 1 i
   * 14 Weak Mutation 245: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:218 - InsertUnaryOp IINC -1 i
   * 15 Weak Mutation 242: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:216 - DeleteField: _values[D
   * 16 Weak Mutation 243: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:218 - InsertUnaryOp Negation of i
   * 17 Weak Mutation 241: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:215 - DeleteField: _set[Ljava/lang/Object;
   * 18 Weak Mutation 272: gnu.trove.map.hash.TObjectDoubleHashMap.containsValue(D)Z:223 - ReplaceConstant - 0 -> 1
   * 19 Weak Mutation 1016: gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.contains(D)Z:747 - DeleteField: this$0Lgnu/trove/map/hash/TObjectDoubleHashMap;
   * 20 Weak Mutation 1017: gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.contains(D)Z:747 - InsertUnaryOp Negation of entry
   * 21 Weak Mutation 1018: gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection.contains(D)Z:747 - DeleteStatement: containsValue(D)Z
   */

  @Test
  public void test32()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>((-229), (float) (-229), (-981.5900138569189));
      TDoubleCollection tDoubleCollection0 = tObjectDoubleHashMap0.valueCollection();
      TUnmodifiableDoubleCollection tUnmodifiableDoubleCollection0 = new TUnmodifiableDoubleCollection(tDoubleCollection0);
      boolean boolean0 = tUnmodifiableDoubleCollection0.contains((-533.9045040623099));
      assertEquals((-981.5900138569189), tDoubleCollection0.getNoEntryValue(), 0.01D);
      assertEquals(false, boolean0);
  }

  //Test case number: 33
  /*
   * 105 covered goals:
   * 1 Weak Mutation 946: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - DeleteField: _sizeI
   * 2 Weak Mutation 971: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1095 - InsertUnaryOp IINC 1 i
   * 3 Weak Mutation 970: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1095 - InsertUnaryOp Negation of i
   * 4 Weak Mutation 969: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1095 - DeleteField: _set[Ljava/lang/Object;
   * 5 Weak Mutation 973: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1095 - DeleteStatement: writeObject(Ljava/lang/Object;)V
   * 6 Weak Mutation 972: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1095 - InsertUnaryOp IINC -1 i
   * 7 Weak Mutation 978: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1096 - DeleteStatement: writeDouble(D)V
   * 8 Weak Mutation 976: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1096 - InsertUnaryOp IINC 1 i
   * 9 Weak Mutation 977: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1096 - InsertUnaryOp IINC -1 i
   * 10 Weak Mutation 975: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1096 - InsertUnaryOp Negation of i
   * 11 Weak Mutation 974: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1096 - DeleteField: _values[D
   * 12 gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I45 Branch 71 IF_ACMPEQ L1094 - false
   * 13 Weak Mutation 96: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IF)V:107 - InsertUnaryOp Negation
   * 14 Weak Mutation 687: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:455 - InsertUnaryOp Negation
   * 15 Weak Mutation 686: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:454 - ReplaceComparisonOperator == -> !=
   * 16 Weak Mutation 685: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:454 - InsertUnaryOp Negation of isNewMapping
   * 17 Weak Mutation 684: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:449 - ReplaceConstant - 1 -> 0
   * 18 Weak Mutation 683: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:448 - InsertUnaryOp Negation of put_amount
   * 19 Weak Mutation 682: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:448 - ReplaceVariable put_amount -> adjust_amount
   * 20 Weak Mutation 681: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:448 - InsertUnaryOp IINC -1 index
   * 21 Weak Mutation 680: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:448 - InsertUnaryOp IINC 1 index
   * 22 Weak Mutation 679: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:448 - InsertUnaryOp Negation of index
   * 23 Weak Mutation 678: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:448 - DeleteField: _values[D
   * 24 Weak Mutation 692: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:458 - InsertUnaryOp Negation of newValue
   * 25 Weak Mutation 690: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:458 - ReplaceVariable newValue -> adjust_amount
   * 26 Weak Mutation 688: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:455 - DeleteField: consumeFreeSlotZ
   * 27 Weak Mutation 689: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:455 - DeleteStatement: postInsertHook(Z)V
   * 28 Weak Mutation 653: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:443 - InsertUnaryOp Negation of index
   * 29 Weak Mutation 652: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:440 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 30 Weak Mutation 655: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:443 - InsertUnaryOp IINC -1 index
   * 31 Weak Mutation 654: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:443 - InsertUnaryOp IINC 1 index
   * 32 Weak Mutation 651: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:440 - ReplaceVariable key -> REMOVED
   * 33 Weak Mutation 650: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:440 - ReplaceVariable key -> FREE
   * 34 Weak Mutation 656: gnu.trove.map.hash.TObjectDoubleHashMap.adjustOrPutValue(Ljava/lang/Object;DD)D:443 - ReplaceComparisonOperator >= -> ==
   * 35 Weak Mutation 956: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp Negation of i
   * 36 Weak Mutation 957: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC 1 i
   * 37 Weak Mutation 958: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC -1 i
   * 38 Weak Mutation 959: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceVariable REMOVED -> FREE
   * 39 Weak Mutation 953: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - ReplaceComparisonOperator <= -> <
   * 40 Weak Mutation 954: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - ReplaceComparisonOperator <= -> -1
   * 41 Weak Mutation 955: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: _set[Ljava/lang/Object;
   * 42 Weak Mutation 948: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - DeleteField: _set[Ljava/lang/Object;
   * 43 Weak Mutation 949: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp Negation of i
   * 44 Weak Mutation 950: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp IINC 1 i
   * 45 Weak Mutation 951: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp IINC -1 i
   * 46 Weak Mutation 944: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp +1
   * 47 Weak Mutation 945: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp -1
   * 48 Weak Mutation 947: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - DeleteStatement: writeInt(I)V
   * 49 Weak Mutation 940: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1087 - InsertUnaryOp Negation
   * 50 Weak Mutation 943: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp Negation
   * 51 Weak Mutation 942: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1087 - DeleteStatement: writeDouble(D)V
   * 52 Weak Mutation 939: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1081 - DeleteStatement: writeByte(I)V
   * 53 Weak Mutation 938: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1081 - ReplaceConstant - 0 -> 1
   * 54 Weak Mutation 968: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceComparisonOperator == -> !=
   * 55 Weak Mutation 963: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp Negation of i
   * 56 Weak Mutation 962: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: _set[Ljava/lang/Object;
   * 57 Weak Mutation 961: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceComparisonOperator == -> !=
   * 58 Weak Mutation 960: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: REMOVEDLjava/lang/Object;
   * 59 Weak Mutation 967: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: FREELjava/lang/Object;
   * 60 Weak Mutation 966: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceVariable FREE -> REMOVED
   * 61 Weak Mutation 965: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC -1 i
   * 62 Weak Mutation 964: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC 1 i
   * 63 Weak Mutation 956: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp Negation of i
   * 64 Weak Mutation 957: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC 1 i
   * 65 Weak Mutation 958: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC -1 i
   * 66 Weak Mutation 959: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceVariable REMOVED -> FREE
   * 67 Weak Mutation 953: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - ReplaceComparisonOperator <= -> <
   * 68 Weak Mutation 954: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - ReplaceComparisonOperator <= -> -1
   * 69 Weak Mutation 955: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: _set[Ljava/lang/Object;
   * 70 Weak Mutation 948: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - DeleteField: _set[Ljava/lang/Object;
   * 71 Weak Mutation 949: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp Negation of i
   * 72 Weak Mutation 950: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp IINC 1 i
   * 73 Weak Mutation 951: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp IINC -1 i
   * 74 Weak Mutation 944: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp +1
   * 75 Weak Mutation 945: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp -1
   * 76 Weak Mutation 946: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - DeleteField: _sizeI
   * 77 Weak Mutation 947: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - DeleteStatement: writeInt(I)V
   * 78 Weak Mutation 940: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1087 - InsertUnaryOp Negation
   * 79 Weak Mutation 943: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp Negation
   * 80 Weak Mutation 942: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1087 - DeleteStatement: writeDouble(D)V
   * 81 Weak Mutation 939: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1081 - DeleteStatement: writeByte(I)V
   * 82 Weak Mutation 938: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1081 - ReplaceConstant - 0 -> 1
   * 83 Weak Mutation 978: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1096 - DeleteStatement: writeDouble(D)V
   * 84 Weak Mutation 976: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1096 - InsertUnaryOp IINC 1 i
   * 85 Weak Mutation 977: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1096 - InsertUnaryOp IINC -1 i
   * 86 Weak Mutation 971: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1095 - InsertUnaryOp IINC 1 i
   * 87 Weak Mutation 970: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1095 - InsertUnaryOp Negation of i
   * 88 Weak Mutation 969: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1095 - DeleteField: _set[Ljava/lang/Object;
   * 89 Weak Mutation 968: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceComparisonOperator == -> !=
   * 90 Weak Mutation 975: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1096 - InsertUnaryOp Negation of i
   * 91 Weak Mutation 974: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1096 - DeleteField: _values[D
   * 92 Weak Mutation 973: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1095 - DeleteStatement: writeObject(Ljava/lang/Object;)V
   * 93 Weak Mutation 972: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1095 - InsertUnaryOp IINC -1 i
   * 94 Weak Mutation 963: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp Negation of i
   * 95 Weak Mutation 962: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: _set[Ljava/lang/Object;
   * 96 Weak Mutation 961: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceComparisonOperator == -> !=
   * 97 Weak Mutation 960: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: REMOVEDLjava/lang/Object;
   * 98 Weak Mutation 967: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: FREELjava/lang/Object;
   * 99 Weak Mutation 966: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceVariable FREE -> REMOVED
   * 100 Weak Mutation 965: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC -1 i
   * 101 Weak Mutation 964: gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC 1 i
   * 102 gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 69 IFLE L1093 - true
   * 103 gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 69 IFLE L1093 - false
   * 104 gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I39 Branch 70 IF_ACMPEQ L1094 - false
   * 105 gnu.trove.map.hash.TObjectDoubleHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I45 Branch 71 IF_ACMPEQ L1094 - true
   */

  @Test
  public void test33()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(1, 95.405235F);
      tObjectDoubleHashMap0.adjustOrPutValue((Integer) 1, Double.POSITIVE_INFINITY, (-182.30427941848058));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
      tObjectDoubleHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
  }

  //Test case number: 34
  /*
   * 47 covered goals:
   * 1 Weak Mutation 979: gnu.trove.map.hash.TObjectDoubleHashMap.readExternal(Ljava/io/ObjectInput;)V:1106 - DeleteStatement: readByte()B
   * 2 Weak Mutation 111: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:138 - ReplaceComparisonOperator == -> !=
   * 3 Weak Mutation 104: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:124 - ReplaceComparisonOperator == -> >=
   * 4 Weak Mutation 119: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:143 - DeleteField: no_entry_valueD
   * 5 Weak Mutation 118: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:143 - InsertUnaryOp Negation
   * 6 Weak Mutation 117: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:141 - DeleteField: no_entry_valueD
   * 7 Weak Mutation 116: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:141 - InsertUnaryOp Negation
   * 8 Weak Mutation 115: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:141 - ReplaceVariable hashmap -> this
   * 9 Weak Mutation 114: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:140 - DeleteField: _loadFactorF
   * 10 Weak Mutation 113: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:140 - InsertUnaryOp Negation
   * 11 Weak Mutation 112: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:140 - ReplaceVariable hashmap -> this
   * 12 Weak Mutation 127: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:144 - InsertUnaryOp Negation
   * 13 Weak Mutation 126: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:144 - DeleteField: _values[D
   * 14 Weak Mutation 123: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:143 - ReplaceComparisonOperator == -> >=
   * 15 Weak Mutation 122: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:143 - DeleteStatement: doubleSub(DD)I
   * 16 Weak Mutation 121: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:143 - ReplaceConstant - 0.0 -> -1.0
   * 17 Weak Mutation 120: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:143 - ReplaceConstant - 0.0 -> 1.0
   * 18 Weak Mutation 137: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceArithmeticOperator / -> -
   * 19 Weak Mutation 136: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - DeleteField: _loadFactorF
   * 20 Weak Mutation 139: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceArithmeticOperator / -> %
   * 21 Weak Mutation 138: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceArithmeticOperator / -> +
   * 22 Weak Mutation 141: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - DeleteStatement: ceil(D)D
   * 23 Weak Mutation 140: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceArithmeticOperator / -> *
   * 24 Weak Mutation 143: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:148 - DeleteStatement: putAll(Lgnu/trove/map/TObjectDoubleMap;)V
   * 25 Weak Mutation 142: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - DeleteStatement: setUp(I)I
   * 26 Weak Mutation 129: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:144 - DeleteStatement: fill([DD)V
   * 27 Weak Mutation 128: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:144 - DeleteField: no_entry_valueD
   * 28 Weak Mutation 131: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceConstant - 10.0 -> 1.0
   * 29 Weak Mutation 130: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceConstant - 10.0 -> 0.0
   * 30 Weak Mutation 133: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceConstant - 10.0 -> 9.0
   * 31 Weak Mutation 132: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceConstant - 10.0 -> -1.0
   * 32 Weak Mutation 135: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - InsertUnaryOp Negation
   * 33 Weak Mutation 134: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:146 - ReplaceConstant - 10.0 -> 11.0
   * 34 Weak Mutation 237: gnu.trove.map.hash.TObjectDoubleHashMap.getNoEntryValue()D:203 - DeleteField: no_entry_valueD
   * 35 Weak Mutation 236: gnu.trove.map.hash.TObjectDoubleHashMap.getNoEntryValue()D:203 - InsertUnaryOp Negation
   * 36 Weak Mutation 387: gnu.trove.map.hash.TObjectDoubleHashMap.putAll(Lgnu/trove/map/TObjectDoubleMap;)V:308 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z
   * 37 Weak Mutation 386: gnu.trove.map.hash.TObjectDoubleHashMap.putAll(Lgnu/trove/map/TObjectDoubleMap;)V:308 - DeleteField: PUT_ALL_PROCLgnu/trove/procedure/TObjectDoubleProcedure;
   * 38 Weak Mutation 119: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:143 - DeleteField: no_entry_valueD
   * 39 Weak Mutation 117: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:141 - DeleteField: no_entry_valueD
   * 40 Weak Mutation 127: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:144 - InsertUnaryOp Negation
   * 41 Weak Mutation 126: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:144 - DeleteField: _values[D
   * 42 Weak Mutation 123: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:143 - ReplaceComparisonOperator == -> >=
   * 43 Weak Mutation 129: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:144 - DeleteStatement: fill([DD)V
   * 44 Weak Mutation 128: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:144 - DeleteField: no_entry_valueD
   * 45 Weak Mutation 237: gnu.trove.map.hash.TObjectDoubleHashMap.getNoEntryValue()D:203 - DeleteField: no_entry_valueD
   * 46 Weak Mutation 979: gnu.trove.map.hash.TObjectDoubleHashMap.readExternal(Ljava/io/ObjectInput;)V:1106 - DeleteStatement: readByte()B
   * 47 gnu.trove.map.hash.TObjectDoubleHashMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V: I37 Branch 10 IFEQ L143 - false
   */

  @Test
  public void test34()  throws Throwable  {
      TObjectDoubleHashMap<String> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<String>(4961459, 4961459, 4961459);
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap1 = new TObjectDoubleHashMap<Object>((TObjectDoubleMap<?>) tObjectDoubleHashMap0);
      // Undeclared exception!
      try {
        tObjectDoubleHashMap1.readExternal((ObjectInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 35
  /*
   * 23 covered goals:
   * 1 Weak Mutation 998: gnu.trove.map.hash.TObjectDoubleHashMap.toString()Ljava/lang/String;:1130 - ReplaceConstant - { -> 
   * 2 Weak Mutation 999: gnu.trove.map.hash.TObjectDoubleHashMap.toString()Ljava/lang/String;:1131 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z
   * 3 Weak Mutation 1001: gnu.trove.map.hash.TObjectDoubleHashMap.toString()Ljava/lang/String;:1141 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 4 Weak Mutation 1000: gnu.trove.map.hash.TObjectDoubleHashMap.toString()Ljava/lang/String;:1141 - ReplaceConstant - } -> 
   * 5 Weak Mutation 1002: gnu.trove.map.hash.TObjectDoubleHashMap.toString()Ljava/lang/String;:1142 - DeleteStatement: toString()Ljava/lang/String;
   * 6 gnu.trove.map.hash.TObjectDoubleHashMap.toString()Ljava/lang/String;: root-Branch
   * 7 gnu.trove.map.hash.TObjectDoubleHashMap$2.<init>(Lgnu/trove/map/hash/TObjectDoubleHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 8 Weak Mutation 102: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:124 - ReplaceConstant - 0.0 -> -1.0
   * 9 Weak Mutation 103: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:124 - DeleteStatement: doubleSub(DD)I
   * 10 Weak Mutation 100: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:124 - DeleteField: no_entry_valueD
   * 11 Weak Mutation 101: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:124 - ReplaceConstant - 0.0 -> 1.0
   * 12 Weak Mutation 98: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:122 - InsertUnaryOp Negation of noEntryValue
   * 13 Weak Mutation 99: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:124 - InsertUnaryOp Negation
   * 14 Weak Mutation 110: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:125 - DeleteStatement: fill([DD)V
   * 15 Weak Mutation 108: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:125 - InsertUnaryOp Negation
   * 16 Weak Mutation 109: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:125 - DeleteField: no_entry_valueD
   * 17 Weak Mutation 107: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:125 - DeleteField: _values[D
   * 18 Weak Mutation 105: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(IFD)V:124 - ReplaceComparisonOperator == -> <=
   * 19 Weak Mutation 1001: gnu.trove.map.hash.TObjectDoubleHashMap.toString()Ljava/lang/String;:1141 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 20 Weak Mutation 1000: gnu.trove.map.hash.TObjectDoubleHashMap.toString()Ljava/lang/String;:1141 - ReplaceConstant - } -> 
   * 21 Weak Mutation 1002: gnu.trove.map.hash.TObjectDoubleHashMap.toString()Ljava/lang/String;:1142 - DeleteStatement: toString()Ljava/lang/String;
   * 22 Weak Mutation 999: gnu.trove.map.hash.TObjectDoubleHashMap.toString()Ljava/lang/String;:1131 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z
   * 23 Weak Mutation 998: gnu.trove.map.hash.TObjectDoubleHashMap.toString()Ljava/lang/String;:1130 - ReplaceConstant - { -> 
   */

  @Test
  public void test35()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(56, (float) 56, (-183.74991952939615));
      String string0 = tObjectDoubleHashMap0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals((-183.74991952939615), tObjectDoubleHashMap0.getNoEntryValue(), 0.01D);
  }

  //Test case number: 36
  /*
   * 92 covered goals:
   * 1 Weak Mutation 1255: gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z:1134 - ReplaceComparisonOperator == -> !=
   * 2 Weak Mutation 1254: gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z:1134 - DeleteField: firstZ
   * 3 Weak Mutation 1253: gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z:1134 - InsertUnaryOp Negation
   * 4 Weak Mutation 1256: gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z:1134 - ReplaceConstant - 0 -> 1
   * 5 Weak Mutation 1263: gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z:1137 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 6 Weak Mutation 1262: gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z:1137 - ReplaceConstant - = -> 
   * 7 Weak Mutation 1261: gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z:1137 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
   * 8 Weak Mutation 1260: gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z:1137 - DeleteField: val$bufLjava/lang/StringBuilder;
   * 9 Weak Mutation 1264: gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z:1137 - InsertUnaryOp Negation of value
   * 10 Weak Mutation 1265: gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z:1137 - DeleteStatement: append(D)Ljava/lang/StringBuilder;
   * 11 Weak Mutation 1266: gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z:1138 - ReplaceConstant - 1 -> 0
   * 12 gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z: I4 Branch 102 IFEQ L1134 - false
   * 13 Weak Mutation 94: gnu.trove.map.hash.TObjectDoubleHashMap.<init>(I)V:93 - InsertUnaryOp Negation
   * 14 Weak Mutation 152: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:164 - InsertUnaryOp Negation of capacity
   * 15 Weak Mutation 153: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:164 - InsertUnaryOp IINC 1 capacity
   * 16 Weak Mutation 154: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:164 - InsertUnaryOp IINC -1 capacity
   * 17 Weak Mutation 144: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:162 - InsertUnaryOp Negation of initialCapacity
   * 18 Weak Mutation 145: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:162 - InsertUnaryOp IINC 1 initialCapacity
   * 19 Weak Mutation 146: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:162 - InsertUnaryOp IINC -1 initialCapacity
   * 20 Weak Mutation 147: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:163 - ReplaceVariable capacity -> initialCapacity
   * 21 Weak Mutation 148: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:163 - InsertUnaryOp Negation of capacity
   * 22 Weak Mutation 149: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:163 - InsertUnaryOp IINC 1 capacity
   * 23 Weak Mutation 150: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:163 - InsertUnaryOp IINC -1 capacity
   * 24 Weak Mutation 151: gnu.trove.map.hash.TObjectDoubleHashMap.setUp(I)I:164 - ReplaceVariable capacity -> initialCapacity
   * 25 Weak Mutation 317: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:253 - InsertUnaryOp Negation
   * 26 Weak Mutation 319: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:254 - ReplaceConstant - 1 -> 0
   * 27 Weak Mutation 288: gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D:238 - ReplaceVariable key -> FREE
   * 28 Weak Mutation 289: gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D:238 - ReplaceVariable key -> REMOVED
   * 29 Weak Mutation 290: gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D:238 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 30 Weak Mutation 291: gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D:239 - InsertUnaryOp Negation of value
   * 31 Weak Mutation 292: gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D:239 - InsertUnaryOp Negation of index
   * 32 Weak Mutation 293: gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D:239 - InsertUnaryOp IINC 1 index
   * 33 Weak Mutation 294: gnu.trove.map.hash.TObjectDoubleHashMap.put(Ljava/lang/Object;D)D:239 - InsertUnaryOp IINC -1 index
   * 34 Weak Mutation 343: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:264 - InsertUnaryOp Negation
   * 35 Weak Mutation 342: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:263 - ReplaceComparisonOperator == -> !=
   * 36 Weak Mutation 341: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:263 - InsertUnaryOp Negation of isNewMapping
   * 37 Weak Mutation 340: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:261 - InsertUnaryOp Negation of value
   * 38 Weak Mutation 339: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:261 - ReplaceVariable value -> previous
   * 39 Weak Mutation 338: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:261 - InsertUnaryOp IINC -1 index
   * 40 Weak Mutation 337: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:261 - InsertUnaryOp IINC 1 index
   * 41 Weak Mutation 336: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:261 - InsertUnaryOp Negation of index
   * 42 Weak Mutation 347: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:266 - InsertUnaryOp Negation of previous
   * 43 Weak Mutation 346: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:266 - ReplaceVariable previous -> value
   * 44 Weak Mutation 345: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:264 - DeleteStatement: postInsertHook(Z)V
   * 45 Weak Mutation 344: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:264 - DeleteField: consumeFreeSlotZ
   * 46 Weak Mutation 320: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:255 - InsertUnaryOp Negation of index
   * 47 Weak Mutation 321: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:255 - ReplaceComparisonOperator >= -> ==
   * 48 Weak Mutation 335: gnu.trove.map.hash.TObjectDoubleHashMap.doPut(DI)D:261 - DeleteField: _values[D
   * 49 Weak Mutation 747: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 50 Weak Mutation 745: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - ReplaceComparisonOperator == -> !=
   * 51 Weak Mutation 744: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - DeleteField: REMOVEDLjava/lang/Object;
   * 52 Weak Mutation 751: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 53 Weak Mutation 750: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 54 Weak Mutation 749: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 55 Weak Mutation 748: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 56 Weak Mutation 738: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - ReplaceComparisonOperator == -> !=
   * 57 Weak Mutation 737: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - DeleteField: FREELjava/lang/Object;
   * 58 Weak Mutation 736: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - ReplaceVariable FREE -> REMOVED
   * 59 Weak Mutation 743: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - ReplaceVariable REMOVED -> FREE
   * 60 Weak Mutation 742: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 61 Weak Mutation 741: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 62 Weak Mutation 740: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 63 Weak Mutation 754: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - ReplaceComparisonOperator != -> ==
   * 64 Weak Mutation 752: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 65 Weak Mutation 753: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - DeleteStatement: execute(Ljava/lang/Object;D)Z
   * 66 Weak Mutation 756: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:513 - ReplaceConstant - 1 -> 0
   * 67 Weak Mutation 728: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:506 - InsertUnaryOp IINC -1 i
   * 68 Weak Mutation 730: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:506 - ReplaceComparisonOperator <= -> <
   * 69 Weak Mutation 731: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:506 - ReplaceComparisonOperator <= -> -1
   * 70 Weak Mutation 733: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 71 Weak Mutation 734: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 72 Weak Mutation 735: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 73 Weak Mutation 723: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:504 - DeleteField: _set[Ljava/lang/Object;
   * 74 Weak Mutation 724: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:505 - DeleteField: _values[D
   * 75 Weak Mutation 726: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:506 - InsertUnaryOp Negation of i
   * 76 Weak Mutation 727: gnu.trove.map.hash.TObjectDoubleHashMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:506 - InsertUnaryOp IINC 1 i
   * 77 Weak Mutation 1001: gnu.trove.map.hash.TObjectDoubleHashMap.toString()Ljava/lang/String;:1141 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 78 Weak Mutation 1000: gnu.trove.map.hash.TObjectDoubleHashMap.toString()Ljava/lang/String;:1141 - ReplaceConstant - } -> 
   * 79 Weak Mutation 1002: gnu.trove.map.hash.TObjectDoubleHashMap.toString()Ljava/lang/String;:1142 - DeleteStatement: toString()Ljava/lang/String;
   * 80 Weak Mutation 999: gnu.trove.map.hash.TObjectDoubleHashMap.toString()Ljava/lang/String;:1131 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z
   * 81 Weak Mutation 998: gnu.trove.map.hash.TObjectDoubleHashMap.toString()Ljava/lang/String;:1130 - ReplaceConstant - { -> 
   * 82 Weak Mutation 1255: gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z:1134 - ReplaceComparisonOperator == -> !=
   * 83 Weak Mutation 1254: gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z:1134 - DeleteField: firstZ
   * 84 Weak Mutation 1253: gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z:1134 - InsertUnaryOp Negation
   * 85 Weak Mutation 1263: gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z:1137 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 86 Weak Mutation 1262: gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z:1137 - ReplaceConstant - = -> 
   * 87 Weak Mutation 1261: gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z:1137 - DeleteStatement: append(Ljava/lang/Object;)Ljava/lang/StringBuilder;
   * 88 Weak Mutation 1260: gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z:1137 - DeleteField: val$bufLjava/lang/StringBuilder;
   * 89 Weak Mutation 1256: gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z:1134 - ReplaceConstant - 0 -> 1
   * 90 Weak Mutation 1266: gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z:1138 - ReplaceConstant - 1 -> 0
   * 91 Weak Mutation 1264: gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z:1137 - InsertUnaryOp Negation of value
   * 92 Weak Mutation 1265: gnu.trove.map.hash.TObjectDoubleHashMap$2.execute(Ljava/lang/Object;D)Z:1137 - DeleteStatement: append(D)Ljava/lang/StringBuilder;
   */

  @Test
  public void test36()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>((-1));
      tObjectDoubleHashMap0.put((Integer) (-1), (double) (-1));
      String string0 = tObjectDoubleHashMap0.toString();
      assertEquals(false, tObjectDoubleHashMap0.isEmpty());
      assertEquals("{-1=-1.0}", string0);
  }
}
