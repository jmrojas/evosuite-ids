/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.custom_hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.hash.TObjectHash;
import gnu.trove.map.TObjectIntMap;
import gnu.trove.map.custom_hash.TObjectIntCustomHashMap;
import gnu.trove.map.hash.TObjectIntHashMap;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PushbackInputStream;
import java.io.StreamCorruptedException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.MissingResourceException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectIntCustomHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      int int0 = 935;
      Locale locale0 = Locale.ROOT;
      String string0 = locale0.getISO3Country();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      identityHashingStrategy0.equals((Object) string0, (Object) string1);
      int int1 = (-752);
      float float0 = 0.0F;
      TObjectIntCustomHashMap<Integer> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, int1, float0, int0);
      int int2 = tObjectIntCustomHashMap0.adjustOrPutValue((Integer) int0, int0, int1);
      float float1 = 1.0F;
      TObjectIntCustomHashMap<AbstractMap.SimpleEntry<Integer, Integer>> tObjectIntCustomHashMap1 = new TObjectIntCustomHashMap<AbstractMap.SimpleEntry<Integer, Integer>>((HashingStrategy<? super AbstractMap.SimpleEntry<Integer, Integer>>) identityHashingStrategy0, int2, (float) int0, int1);
      tObjectIntCustomHashMap1.hashCode();
      TObjectIntCustomHashMap<String> tObjectIntCustomHashMap2 = new TObjectIntCustomHashMap<String>((HashingStrategy<? super String>) identityHashingStrategy0, int2);
      TObjectIntCustomHashMap<Object> tObjectIntCustomHashMap3 = new TObjectIntCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, (TObjectIntMap<?>) tObjectIntCustomHashMap2);
      Object object0 = TObjectHash.FREE;
      int int3 = (-1428);
      int int4 = 399;
      tObjectIntCustomHashMap3.adjustOrPutValue(object0, int3, int4);
      tObjectIntCustomHashMap2.getNoEntryValue();
      assertEquals(7, tObjectIntCustomHashMap0.capacity());
      
      TObjectIntCustomHashMap<String> tObjectIntCustomHashMap4 = new TObjectIntCustomHashMap<String>((HashingStrategy<? super String>) identityHashingStrategy0, int0, float1);
      tObjectIntCustomHashMap4.isEmpty();
      tObjectIntCustomHashMap4.keys();
      assertEquals(953, tObjectIntCustomHashMap4.capacity());
  }

  @Test
  public void test1()  throws Throwable  {
      IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
      TObjectIntCustomHashMap<Integer> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0);
      int[] intArray0 = new int[6];
      int int0 = 873;
      intArray0[0] = int0;
      int int1 = (-424);
      intArray0[1] = int1;
      int int2 = 148;
      intArray0[2] = int2;
      int int3 = (-1511);
      intArray0[3] = int3;
      int int4 = 205;
      intArray0[4] = int4;
      int int5 = (-878);
      intArray0[5] = int5;
      int[] intArray1 = tObjectIntCustomHashMap0.values(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertEquals(23, tObjectIntCustomHashMap0.capacity());
  }

  @Test
  public void test2()  throws Throwable  {
      HashingStrategy<Object> hashingStrategy0 = null;
      int int0 = 18;
      float float0 = (-1.0F);
      TObjectIntCustomHashMap<TObjectIntHashMap<Integer>> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<TObjectIntHashMap<Integer>>((HashingStrategy<? super TObjectIntHashMap<Integer>>) hashingStrategy0, int0, float0);
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = null;
      int int1 = tObjectIntCustomHashMap0.put(tObjectIntHashMap0, int0);
      assertEquals(1, tObjectIntCustomHashMap0.size());
      assertEquals(0, int1);
  }

  @Test
  public void test3()  throws Throwable  {
      IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
      TObjectIntCustomHashMap<TObjectIntCustomHashMap<String>> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<TObjectIntCustomHashMap<String>>();
      OutputStream outputStream0 = null;
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      int int0 = 860;
      TObjectIntCustomHashMap<IdentityHashingStrategy<String>> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<IdentityHashingStrategy<String>>((HashingStrategy<? super IdentityHashingStrategy<String>>) identityHashingStrategy0, int0);
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte) (-113);
      byteArray0[0] = byte0;
      byte byte1 = (byte)45;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-37);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-9);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-5);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-39);
      byteArray0[5] = byte5;
      byte byte6 = (byte)10;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte)44;
      byteArray0[8] = byte8;
      byte byte9 = (byte) (-72);
      byteArray0[9] = byte9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 8F2DDBF7
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      HashingStrategy<Object> hashingStrategy0 = null;
      int int0 = 1288;
      TObjectIntCustomHashMap<TObjectIntHashMap<String>> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<TObjectIntHashMap<String>>((HashingStrategy<? super TObjectIntHashMap<String>>) hashingStrategy0, int0);
      TObjectIntCustomHashMap<Object> tObjectIntCustomHashMap1 = new TObjectIntCustomHashMap<Object>((HashingStrategy<? super Object>) hashingStrategy0, int0, (float) int0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-1);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-61);
      byteArray0[1] = byte1;
      byte byte2 = (byte)33;
      byteArray0[2] = byte2;
      byte byte3 = (byte)39;
      byteArray0[3] = byte3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) byteArray0[1], (int) byte1);
      int int1 = 277;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) byteArrayInputStream0, int1);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pushbackInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TObjectIntCustomHashMap<TObjectIntHashMap<String>> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<TObjectIntHashMap<String>>();
      int int0 = (-404);
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>(int0);
      TObjectIntCustomHashMap<String> tObjectIntCustomHashMap1 = new TObjectIntCustomHashMap<String>();
      Object[] objectArray0 = tObjectIntCustomHashMap1.keys();
      assertNotNull(objectArray0);
      
      // Undeclared exception!
      try {
        tObjectIntCustomHashMap0.put(tObjectIntHashMap0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>();
      Locale locale0 = Locale.CANADA;
      String string0 = locale0.getDisplayCountry();
      AbstractMap.SimpleImmutableEntry<TObjectIntHashMap<String>, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<TObjectIntHashMap<String>, Object>(tObjectIntHashMap0, (Object) string0);
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectIntCustomHashMap<TObjectIntCustomHashMap<String>> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<TObjectIntCustomHashMap<String>>((HashingStrategy<? super TObjectIntCustomHashMap<String>>) identityHashingStrategy0);
      // Undeclared exception!
      try {
        abstractMap_SimpleImmutableEntry0.setValue((Object) tObjectIntCustomHashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
      int int0 = 1911;
      float float0 = (-655.62103F);
      TObjectIntCustomHashMap<Integer> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, int0, float0);
      assertEquals(0, tObjectIntCustomHashMap0.getNoEntryValue());
  }
}
