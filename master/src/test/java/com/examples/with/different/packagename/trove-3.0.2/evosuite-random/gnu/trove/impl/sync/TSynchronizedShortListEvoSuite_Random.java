/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TShortCollection;
import gnu.trove.impl.sync.TSynchronizedRandomAccessShortList;
import gnu.trove.impl.sync.TSynchronizedShortList;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessShortList;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortList;
import gnu.trove.list.TShortList;
import gnu.trove.list.array.TShortArrayList;
import gnu.trove.list.linked.TShortLinkedList;
import gnu.trove.procedure.TShortProcedure;
import gnu.trove.set.hash.TShortHashSet;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Stack;
import java.util.Vector;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedShortListEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TShortList tShortList0 = null;
      TSynchronizedShortList tSynchronizedShortList0 = null;
      try {
        tSynchronizedShortList0 = new TSynchronizedShortList(tShortList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      Locale locale0 = Locale.TAIWAN;
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortArrayList0);
      short[] shortArray0 = new short[7];
      short short0 = (short)1263;
      shortArray0[0] = short0;
      short short1 = (short) (-1);
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)2029;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      tSynchronizedShortList0.removeAll(shortArray0);
      Locale locale1 = null;
      String string0 = locale0.getDisplayScript(locale1);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0, (Object) string0);
      short short7 = (short)0;
      int int0 = tSynchronizedRandomAccessShortList0.lastIndexOf(short7);
      assertEquals((-1), int0);
  }

  @Test
  public void test2()  throws Throwable  {
      short short0 = (short) (-1785);
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList(short0);
      String string0 = "mguR>#Yy]c";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 4: mguR>#Yy]c:mguR%3E%23Yy]c#mguR%3E%23Yy]c
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      TShortArrayList tShortArrayList0 = new TShortArrayList(int0);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
      short[] shortArray0 = new short[1];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short[] shortArray1 = tSynchronizedRandomAccessShortList0.toArray(shortArray0);
      assertSame(shortArray1, shortArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 1340;
      TShortList tShortList0 = null;
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://?#
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortLinkedList0);
      short[] shortArray0 = new short[10];
      short short0 = (short) (-1431);
      shortArray0[0] = short0;
      short short1 = (short) (-417);
      shortArray0[1] = short1;
      short short2 = (short)1876;
      shortArray0[2] = short2;
      short short3 = (short)1914;
      shortArray0[3] = short3;
      short short4 = (short) (-1914);
      shortArray0[4] = short4;
      short short5 = (short) (-569);
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)0;
      shortArray0[7] = short7;
      short short8 = (short)0;
      shortArray0[8] = short8;
      short short9 = (short)31;
      shortArray0[9] = short9;
      int int0 = 1507;
      int int1 = 0;
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessShortList0.toArray(shortArray0, int0, int1, (int) short2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1507
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 1;
      short short0 = (short) (-967);
      TShortArrayList tShortArrayList0 = new TShortArrayList(int0, short0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = linkedList0.toString();
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TShortList tShortList0 = null;
      String string0 = "g%wf63]T?Ag\"}>\"*4k";
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"g%wf63]T?Ag\"}>\"*4k\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      String string0 = "y[NWQ>i%oqL";
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0, (Object) string0);
      short[] shortArray0 = new short[9];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)1;
      shortArray0[1] = short1;
      short short2 = (short) (-1038);
      shortArray0[2] = short2;
      short short3 = (short)548;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short) (-1);
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)1139;
      shortArray0[7] = short7;
      short short8 = (short)0;
      shortArray0[8] = short8;
      tSynchronizedRandomAccessShortList0.add(shortArray0);
      assertEquals(false, tSynchronizedRandomAccessShortList0.isEmpty());
      assertEquals(false, tShortArrayList0.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      TShortArrayList tShortArrayList0 = new TShortArrayList(int0);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
      short[] shortArray0 = new short[5];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short) (-733);
      int int1 = 2042;
      shortArray0[0] = short0;
      shortArray0[1] = short1;
      shortArray0[2] = short0;
      shortArray0[3] = short1;
      shortArray0[4] = short1;
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessShortList0.replace(int1, short1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2042
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      short short0 = (short) (-1);
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList(short0);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortLinkedList0);
      Object object0 = null;
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList1 = new TSynchronizedRandomAccessShortList((TShortList) tSynchronizedRandomAccessShortList0, object0);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList2 = (TSynchronizedRandomAccessShortList)tSynchronizedRandomAccessShortList1.list;
      int int0 = 0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = short0;
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessShortList1.set(int0, shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 1299;
      TShortArrayList tShortArrayList0 = new TShortArrayList(int0);
      Stack<String> stack0 = new Stack<String>();
      String string0 = stack0.toString();
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortArrayList0, (Object) string0);
      tSynchronizedShortList0.isEmpty();
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortArrayList0);
      int int1 = 964;
      TUnmodifiableShortList tUnmodifiableShortList1 = (TUnmodifiableShortList)tUnmodifiableShortList0.subList(int1, int0);
      Locale locale0 = Locale.ITALIAN;
      String string1 = locale0.toLanguageTag();
      TSynchronizedShortList tSynchronizedShortList1 = new TSynchronizedShortList((TShortList) tUnmodifiableShortList1, (Object) string1);
      short short0 = (short)1649;
      // Undeclared exception!
      try {
        tSynchronizedShortList1.add(short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 10;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0);
      TShortArrayList tShortArrayList0 = new TShortArrayList((TShortCollection) tShortHashSet0);
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.FRANCE;
      String string0 = locale0.getDisplayName(locale1);
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortArrayList0, (Object) string0);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tSynchronizedShortList0);
      TSynchronizedShortList tSynchronizedShortList1 = (TSynchronizedShortList)tSynchronizedRandomAccessShortList0.list;
      boolean boolean0 = tSynchronizedShortList0.containsAll((TShortCollection) tSynchronizedShortList1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short)65;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)38;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)485;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
      Object object0 = null;
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortArrayList0, object0);
      int int0 = 47447201;
      // Undeclared exception!
      try {
        tSynchronizedShortList0.reverse(int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-1730);
      short short0 = (short)352;
      TShortArrayList tShortArrayList0 = null;
      try {
        tShortArrayList0 = new TShortArrayList(int0, short0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      short short0 = (short)1;
      short[] shortArray0 = new short[10];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      shortArray0[7] = short0;
      shortArray0[8] = short0;
      shortArray0[9] = short0;
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortArrayList0);
      LinkedList<Vector<Integer>> linkedList0 = new LinkedList<Vector<Integer>>();
      tSynchronizedShortList0.removeAll((Collection<?>) linkedList0);
      TShortArrayList tShortArrayList1 = new TShortArrayList();
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList1);
      TShortArrayList tShortArrayList2 = (TShortArrayList)tSynchronizedRandomAccessShortList0.list;
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList1 = (TSynchronizedRandomAccessShortList)tSynchronizedRandomAccessShortList0.mutex;
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList2 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList2, (Object) tSynchronizedRandomAccessShortList1);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList3 = new TSynchronizedRandomAccessShortList((TShortList) tSynchronizedRandomAccessShortList2);
      short short1 = (short)212;
      tSynchronizedRandomAccessShortList3.fill(short1);
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList(short0);
      int int0 = (-727);
      // Undeclared exception!
      try {
        tShortLinkedList0.subList((int) short0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // begin index 1 greater than end index -727
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      short short0 = (short)1177;
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortArrayList0);
      TShortProcedure tShortProcedure0 = null;
      short[] shortArray0 = new short[7];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      tSynchronizedShortList0.add(shortArray0);
      // Undeclared exception!
      try {
        tSynchronizedShortList0.grep(tShortProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      short short0 = (short) (-953);
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList(short0);
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortLinkedList0);
      short short1 = (short) (-1478);
      tSynchronizedShortList0.contains(short1);
      short[] shortArray0 = new short[2];
      tSynchronizedShortList0.removeAll((TShortCollection) tShortLinkedList0);
      shortArray0[0] = short0;
      tSynchronizedShortList0.retainAll(shortArray0);
      String string0 = "=/JoiZ0E d{)O";
      String string1 = "X2c.5<yXiTk";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string1, string1, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: =/JoiZ0E d{)O://=%2FJoiZ0E%20d%7B)OX2c.5%3CyXiTk?X2c.5%3CyXiTk#=/JoiZ0E%20d%7B)O
         //
      }
  }
}
