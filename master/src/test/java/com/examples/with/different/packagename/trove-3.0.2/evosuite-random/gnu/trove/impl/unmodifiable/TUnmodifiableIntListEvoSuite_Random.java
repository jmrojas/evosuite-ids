/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedIntList;
import gnu.trove.impl.unmodifiable.TUnmodifiableIntList;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessIntList;
import gnu.trove.list.TIntList;
import gnu.trove.list.array.TIntArrayList;
import gnu.trove.list.linked.TIntLinkedList;
import gnu.trove.procedure.TIntProcedure;
import java.util.ArrayList;
import java.util.Collection;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableIntListEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-522);
      TIntArrayList tIntArrayList0 = null;
      try {
        tIntArrayList0 = new TIntArrayList(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 962;
      int int1 = (-1773);
      TIntArrayList tIntArrayList0 = new TIntArrayList(int0, int1);
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList((TIntList) tIntArrayList0);
      int int2 = 0;
      int[] intArray0 = new int[4];
      intArray0[0] = int1;
      intArray0[1] = int1;
      intArray0[2] = int2;
      intArray0[3] = int1;
      int int3 = 0;
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessIntList0.set(int2, intArray0, int3, int2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = (-1);
      intArray0[0] = int0;
      TIntList tIntList0 = null;
      TUnmodifiableIntList tUnmodifiableIntList0 = null;
      try {
        tUnmodifiableIntList0 = new TUnmodifiableIntList(tIntList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList((TIntList) tIntArrayList0);
      int[] intArray0 = new int[10];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = (-1616);
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 1;
      intArray0[3] = int3;
      int int4 = 1;
      intArray0[4] = int4;
      int int5 = 1;
      intArray0[5] = int5;
      int int6 = 0;
      intArray0[6] = int6;
      int int7 = 0;
      intArray0[7] = int7;
      int int8 = (-307);
      intArray0[8] = int8;
      int int9 = 1;
      intArray0[9] = int9;
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessIntList0.add(intArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      TUnmodifiableIntList tUnmodifiableIntList0 = new TUnmodifiableIntList((TIntList) tIntArrayList0);
      int int0 = 1312;
      int[] intArray0 = new int[6];
      int int1 = Integer.MIN_VALUE;
      int int2 = 0;
      intArray0[0] = int0;
      intArray0[1] = int2;
      intArray0[2] = int2;
      intArray0[3] = int1;
      intArray0[4] = int0;
      intArray0[5] = int2;
      // Undeclared exception!
      try {
        tUnmodifiableIntList0.insert(int1, int2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-383);
      int int1 = 0;
      TIntArrayList tIntArrayList0 = null;
      try {
        tIntArrayList0 = new TIntArrayList(int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 1852;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = (-1910);
      intArray0[3] = int3;
      int int4 = 385;
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      int int6 = 1780;
      intArray0[6] = int6;
      int int7 = Integer.MAX_VALUE;
      intArray0[7] = int7;
      int int8 = 103;
      intArray0[8] = int8;
      TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList((TIntList) tIntArrayList0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = tUnmodifiableRandomAccessIntList0.containsAll((Collection<?>) arrayList0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      TIntList tIntList0 = null;
      TUnmodifiableIntList tUnmodifiableIntList0 = null;
      try {
        tUnmodifiableIntList0 = new TUnmodifiableIntList(tIntList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-1);
      TIntArrayList tIntArrayList0 = null;
      try {
        tIntArrayList0 = new TIntArrayList(int0, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = (-1464);
      intArray0[2] = int2;
      int int3 = 1;
      intArray0[3] = int3;
      int int4 = (-441);
      intArray0[4] = int4;
      int int5 = (-11);
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList((TIntList) tIntArrayList0);
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList((TIntList) tIntLinkedList0);
      tUnmodifiableRandomAccessIntList0.toArray();
      intArray0[5] = int5;
      int int6 = (-1095);
      intArray0[6] = int6;
      int int7 = (-1);
      intArray0[7] = int7;
      int int8 = 1;
      intArray0[8] = int8;
      int int9 = (-298);
      intArray0[9] = int9;
      TIntArrayList tIntArrayList1 = TIntArrayList.wrap(intArray0, int4);
      TUnmodifiableIntList tUnmodifiableIntList0 = new TUnmodifiableIntList((TIntList) tIntArrayList1);
      // Undeclared exception!
      try {
        tUnmodifiableIntList0.remove(intArray0[6], intArray0[0]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList(int0);
      TUnmodifiableIntList tUnmodifiableIntList0 = new TUnmodifiableIntList((TIntList) tIntLinkedList0);
      int int1 = (-1);
      int int2 = (-586);
      // Undeclared exception!
      try {
        tUnmodifiableIntList0.set(int1, int2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-52);
      int int1 = 1227;
      int[] intArray0 = new int[5];
      intArray0[0] = int0;
      intArray0[1] = int1;
      int int2 = 1993;
      intArray0[2] = int2;
      intArray0[3] = int1;
      int int3 = 0;
      intArray0[4] = int3;
      TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
      TUnmodifiableIntList tUnmodifiableIntList0 = new TUnmodifiableIntList((TIntList) tIntArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableIntList0.sort(int0, intArray0[2]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 405;
      TIntArrayList tIntArrayList0 = new TIntArrayList(int0, int0);
      int[] intArray0 = new int[8];
      int int1 = 799;
      intArray0[0] = int1;
      intArray0[1] = int0;
      intArray0[2] = int1;
      intArray0[3] = int1;
      intArray0[4] = int1;
      intArray0[5] = int1;
      intArray0[6] = int0;
      int int2 = 0;
      intArray0[7] = int2;
      intArray0[0] = int1;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList((TIntList) tIntArrayList0);
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = int0;
      TIntArrayList.wrap(intArray0, intArray0[7]);
      int int3 = 0;
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessIntList0.get(intArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 799
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      TUnmodifiableIntList tUnmodifiableIntList0 = new TUnmodifiableIntList((TIntList) tIntArrayList0);
      int int0 = 0;
      int int1 = tUnmodifiableIntList0.lastIndexOf(int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test14()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList((TIntList) tIntArrayList0);
      TUnmodifiableIntList tUnmodifiableIntList0 = new TUnmodifiableIntList((TIntList) tIntLinkedList0);
      int int0 = 0;
      int[] intArray0 = tUnmodifiableIntList0.toArray(int0, int0);
      assertNotNull(intArray0);
  }

  @Test
  public void test15()  throws Throwable  {
      TIntList tIntList0 = null;
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = null;
      try {
        tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList(tIntList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList();
      TIntProcedure tIntProcedure0 = null;
      TIntLinkedList tIntLinkedList1 = (TIntLinkedList)tIntLinkedList0.inverseGrep(tIntProcedure0);
      TSynchronizedIntList tSynchronizedIntList0 = new TSynchronizedIntList((TIntList) tIntLinkedList1);
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList((TIntList) tSynchronizedIntList0);
      int[] intArray0 = new int[10];
      int int0 = 1993;
      intArray0[0] = int0;
      int int1 = (-154);
      intArray0[1] = int1;
      int int2 = (-1);
      intArray0[2] = int2;
      int int3 = (-1820);
      intArray0[3] = int3;
      int int4 = 720;
      intArray0[4] = int4;
      int int5 = 1962;
      intArray0[5] = int5;
      int int6 = (-1141);
      intArray0[6] = int6;
      int int7 = 1;
      intArray0[7] = int7;
      int int8 = 564;
      intArray0[8] = int8;
      int int9 = 0;
      intArray0[9] = int9;
      boolean boolean0 = tUnmodifiableRandomAccessIntList0.containsAll(intArray0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList();
      TIntProcedure tIntProcedure0 = null;
      TIntLinkedList tIntLinkedList1 = (TIntLinkedList)tIntLinkedList0.grep(tIntProcedure0);
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList((TIntList) tIntLinkedList1);
      TIntLinkedList tIntLinkedList2 = (TIntLinkedList)tUnmodifiableRandomAccessIntList0.grep(tIntProcedure0);
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList1 = new TUnmodifiableRandomAccessIntList((TIntList) tIntLinkedList2);
      int[] intArray0 = new int[6];
      int int0 = 1259;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 1;
      intArray0[2] = int2;
      int int3 = (-1113);
      intArray0[3] = int3;
      int int4 = Integer.MIN_VALUE;
      intArray0[4] = int4;
      int int5 = (-1);
      intArray0[5] = int5;
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessIntList1.add(intArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
