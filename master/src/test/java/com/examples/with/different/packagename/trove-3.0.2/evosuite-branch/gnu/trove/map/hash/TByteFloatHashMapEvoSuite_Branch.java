/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TFloatFunction;
import gnu.trove.map.TByteFloatMap;
import gnu.trove.map.hash.TByteFloatHashMap;
import gnu.trove.procedure.TByteFloatProcedure;
import gnu.trove.procedure.TByteProcedure;
import gnu.trove.procedure.TFloatProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteFloatHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TByteFloatHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TByteFloatHashMap.setUp(I)I: root-Branch
   * 3 gnu.trove.map.hash.TByteFloatHashMap.<init>()V: root-Branch
   * 4 gnu.trove.map.hash.TByteFloatHashMap.keySet()Lgnu/trove/set/TByteSet;: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
      tByteFloatHashMap0.keySet();
      assertEquals(23, tByteFloatHashMap0.capacity());
  }

  //Test case number: 1
  /*
   * 13 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap$TByteFloatHashIterator.advance()V: root-Branch
   * 2 gnu.trove.map.hash.TByteFloatHashMap$TByteFloatHashIterator.value()F: root-Branch
   * 3 gnu.trove.map.hash.TByteFloatHashMap$TByteFloatHashIterator.<init>(Lgnu/trove/map/hash/TByteFloatHashMap;Lgnu/trove/map/hash/TByteFloatHashMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TByteFloatHashMap$TByteFloatHashIterator.key()B: root-Branch
   * 5 gnu.trove.map.hash.TByteFloatHashMap.put(BF)F: root-Branch
   * 6 gnu.trove.map.hash.TByteFloatHashMap.iterator()Lgnu/trove/iterator/TByteFloatIterator;: root-Branch
   * 7 gnu.trove.map.hash.TByteFloatHashMap.<init>(Lgnu/trove/map/TByteFloatMap;)V: I10 Branch 34 IFEQ L133 - false
   * 8 gnu.trove.map.hash.TByteFloatHashMap.<init>(Lgnu/trove/map/TByteFloatMap;)V: I38 Branch 35 IFEQ L139 - true
   * 9 gnu.trove.map.hash.TByteFloatHashMap.<init>(Lgnu/trove/map/TByteFloatMap;)V: I52 Branch 36 IFEQ L143 - true
   * 10 gnu.trove.map.hash.TByteFloatHashMap.doPut(BFI)F: I12 Branch 40 IFGE L214 - true
   * 11 gnu.trove.map.hash.TByteFloatHashMap.doPut(BFI)F: I41 Branch 41 IFEQ L221 - false
   * 12 gnu.trove.map.hash.TByteFloatHashMap.putAll(Lgnu/trove/map/TByteFloatMap;)V: I15 Branch 43 IFEQ L243 - true
   * 13 gnu.trove.map.hash.TByteFloatHashMap.putAll(Lgnu/trove/map/TByteFloatMap;)V: I15 Branch 43 IFEQ L243 - false
   */

  @Test
  public void test1()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
      tByteFloatHashMap0.put((byte)37, (byte)37);
      TByteFloatHashMap tByteFloatHashMap1 = new TByteFloatHashMap((TByteFloatMap) tByteFloatHashMap0);
      assertEquals(false, tByteFloatHashMap0.isEmpty());
      assertEquals("{37=37.0}", tByteFloatHashMap1.toString());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.forEachKey(Lgnu/trove/procedure/TByteProcedure;)Z: root-Branch
   * 2 gnu.trove.map.hash.TByteFloatHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(4, 1.0F);
      boolean boolean0 = tByteFloatHashMap0.forEachKey((TByteProcedure) null);
      assertEquals(true, boolean0);
      assertEquals(5, tByteFloatHashMap0.capacity());
  }

  //Test case number: 3
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.increment(B)Z: root-Branch
   * 2 gnu.trove.map.hash.TByteFloatHashMap.<init>([B[F)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 3 gnu.trove.map.hash.TByteFloatHashMap.<init>([B[F)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 4 gnu.trove.map.hash.TByteFloatHashMap.doPut(BFI)F: I12 Branch 40 IFGE L214 - false
   * 5 gnu.trove.map.hash.TByteFloatHashMap.doPut(BFI)F: I41 Branch 41 IFEQ L221 - true
   * 6 gnu.trove.map.hash.TByteFloatHashMap.adjustValue(BF)Z: I9 Branch 71 IFGE L477 - false
   */

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      float[] floatArray0 = new float[7];
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(byteArray0, floatArray0);
      boolean boolean0 = tByteFloatHashMap0.increment((byte)28);
      assertEquals(1, tByteFloatHashMap0.size());
      assertEquals("{0=0.0}", tByteFloatHashMap0.toString());
      assertEquals(false, boolean0);
      assertEquals(17, tByteFloatHashMap0.capacity());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.clear()V: root-Branch
   * 2 gnu.trove.map.hash.TByteFloatHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap((-398));
      tByteFloatHashMap0.clear();
      assertEquals("{}", tByteFloatHashMap0.toString());
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TByteFloatHashMap.remove(B)F: I14 Branch 46 IFLT L276 - false
   */

//   @Test
//   public void test5()  throws Throwable  {
//       byte[] byteArray0 = new byte[3];
//       byteArray0[0] = (byte) (-15);
//       float[] floatArray0 = new float[6];
//       TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(byteArray0, floatArray0);
//       assertEquals(2, tByteFloatHashMap0.size());
//       
//       float float0 = tByteFloatHashMap0.remove((byte) (-15));
//       assertEquals("{0=0.0}", tByteFloatHashMap0.toString());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 6
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.containsKey(B)Z: root-Branch
   * 2 gnu.trove.map.hash.TByteFloatHashMap.<init>(IFBF)V: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap((-546), (float) (-546), (byte)0, (float) (-546));
      boolean boolean0 = tByteFloatHashMap0.containsKey((byte)0);
      assertEquals(false, boolean0);
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.valueCollection()Lgnu/trove/TFloatCollection;: root-Branch
   * 2 gnu.trove.map.hash.TByteFloatHashMap$TValueView.<init>(Lgnu/trove/map/hash/TByteFloatHashMap;)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
      tByteFloatHashMap0.valueCollection();
      assertEquals(23, tByteFloatHashMap0.capacity());
  }

  //Test case number: 8
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.<init>(Lgnu/trove/map/TByteFloatMap;)V: I38 Branch 35 IFEQ L139 - false
   * 2 gnu.trove.map.hash.TByteFloatHashMap.<init>(Lgnu/trove/map/TByteFloatMap;)V: I52 Branch 36 IFEQ L143 - false
   * 3 gnu.trove.map.hash.TByteFloatHashMap$TByteFloatHashIterator.<init>(Lgnu/trove/map/hash/TByteFloatHashMap;Lgnu/trove/map/hash/TByteFloatHashMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TByteFloatHashMap.iterator()Lgnu/trove/iterator/TByteFloatIterator;: root-Branch
   * 5 gnu.trove.map.hash.TByteFloatHashMap.<init>(Lgnu/trove/map/TByteFloatMap;)V: I10 Branch 34 IFEQ L133 - false
   * 6 gnu.trove.map.hash.TByteFloatHashMap.putAll(Lgnu/trove/map/TByteFloatMap;)V: I15 Branch 43 IFEQ L243 - true
   */

//   @Test
//   public void test8()  throws Throwable  {
//       TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(12, (float) 12, (byte) (-70), (float) (byte) (-70));
//       TByteFloatHashMap tByteFloatHashMap1 = new TByteFloatHashMap((TByteFloatMap) tByteFloatHashMap0);
//       assertEquals(3, tByteFloatHashMap1.capacity());
//       assertEquals(-70, tByteFloatHashMap1.getNoEntryKey());
//       assertEquals((-70.0F), tByteFloatHashMap1.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 9
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.putIfAbsent(BF)F: I9 Branch 39 IFGE L205 - false
   * 2 gnu.trove.map.hash.TByteFloatHashMap.adjustOrPutValue(BFF)F: I9 Branch 72 IFGE L491 - true
   * 3 gnu.trove.map.hash.TByteFloatHashMap.adjustOrPutValue(BFF)F: I58 Branch 73 IFEQ L502 - false
   */

//   @Test
//   public void test9()  throws Throwable  {
//       TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
//       tByteFloatHashMap0.adjustOrPutValue((byte)0, (float) 0, (float) 0);
//       float float0 = tByteFloatHashMap0.putIfAbsent((byte)0, (byte)0);
//       assertEquals(false, tByteFloatHashMap0.isEmpty());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 10
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - false
   * 2 gnu.trove.map.hash.TByteFloatHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   * 3 gnu.trove.map.hash.TByteFloatHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 4 gnu.trove.map.hash.TByteFloatHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 5 gnu.trove.map.hash.TByteFloatHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 6 gnu.trove.map.hash.TByteFloatHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   */

  @Test
  public void test10()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap((-546), (float) (-546), (byte)0, (float) (-546));
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      hashMap0.put((Byte) (byte)0, (Float) 1575.2274F);
      tByteFloatHashMap0.putAll((Map<? extends Byte, ? extends Float>) hashMap0);
      assertEquals(7, tByteFloatHashMap0.capacity());
      assertEquals(1, tByteFloatHashMap0.size());
  }

  //Test case number: 11
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.get(B)F: I9 Branch 44 IFGE L253 - true
   * 2 gnu.trove.map.hash.TByteFloatHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 3 gnu.trove.map.hash.TByteFloatHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 4 gnu.trove.map.hash.TByteFloatHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 5 gnu.trove.map.hash.TByteFloatHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 6 gnu.trove.map.hash.TByteFloatHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 7 gnu.trove.map.hash.TByteFloatHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 8 gnu.trove.map.hash.TByteFloatHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap((int) (byte)12);
      tByteFloatHashMap0.put((byte)12, (byte)12);
      boolean boolean0 = tByteFloatHashMap0.equals((Object) tByteFloatHashMap0);
      assertEquals(false, tByteFloatHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.get(B)F: I9 Branch 44 IFGE L253 - false
   * 2 gnu.trove.map.hash.TByteFloatHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - false
   * 3 gnu.trove.map.hash.TByteFloatHashMap.equals(Ljava/lang/Object;)Z: I89 Branch 79 IFEQ L1200 - false
   * 4 gnu.trove.map.hash.TByteFloatHashMap.equals(Ljava/lang/Object;)Z: I93 Branch 80 IFEQ L1200 - true
   * 5 gnu.trove.map.hash.TByteFloatHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 6 gnu.trove.map.hash.TByteFloatHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 7 gnu.trove.map.hash.TByteFloatHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 8 gnu.trove.map.hash.TByteFloatHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 9 gnu.trove.map.hash.TByteFloatHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 10 gnu.trove.map.hash.TByteFloatHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   */

  @Test
  public void test12()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap((-1013), (float) (byte)0);
      tByteFloatHashMap0.put((byte)0, (float) (-1013));
      tByteFloatHashMap0._set = tByteFloatHashMap0._states;
      boolean boolean0 = tByteFloatHashMap0.equals((Object) tByteFloatHashMap0);
      assertEquals("{1=-1013.0}", tByteFloatHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   */

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      float[] floatArray0 = new float[7];
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(byteArray0, floatArray0);
      boolean boolean0 = tByteFloatHashMap0.isEmpty();
      assertEquals(17, tByteFloatHashMap0.capacity());
      assertEquals(false, boolean0);
      assertEquals("{0=0.0}", tByteFloatHashMap0.toString());
      assertEquals(1, tByteFloatHashMap0.size());
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test14()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(4, 1.0F);
      boolean boolean0 = tByteFloatHashMap0.isEmpty();
      assertEquals(true, boolean0);
      assertEquals(5, tByteFloatHashMap0.capacity());
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.remove(B)F: I14 Branch 46 IFLT L276 - true
   */

//   @Test
//   public void test15()  throws Throwable  {
//       TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
//       float float0 = tByteFloatHashMap0.remove((byte)0);
//       assertEquals(true, tByteFloatHashMap0.isEmpty());
//       assertEquals(0.0F, float0, 0.01F);
//       assertEquals(23, tByteFloatHashMap0.capacity());
//   }

  //Test case number: 16
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.keys()[B: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TByteFloatHashMap.keys()[B: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TByteFloatHashMap.keys()[B: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TByteFloatHashMap.keys()[B: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
      tByteFloatHashMap0.adjustOrPutValue((byte)0, (float) 0, (float) 0);
      tByteFloatHashMap0.keys();
      assertEquals("{0=0.0}", tByteFloatHashMap0.toString());
      assertEquals(1, tByteFloatHashMap0.size());
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.keys([B)[B: I10 Branch 49 IF_ICMPGE L315 - true
   * 2 gnu.trove.map.hash.TByteFloatHashMap.keys([B)[B: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TByteFloatHashMap.keys([B)[B: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TByteFloatHashMap.keys([B)[B: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap((-110), (float) (-110), (byte) (-41), (float) (byte) (-41));
      byte[] byteArray0 = tByteFloatHashMap0.keys(tByteFloatHashMap0._set);
      assertNotNull(byteArray0);
  }

  //Test case number: 18
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.keys([B)[B: I10 Branch 49 IF_ICMPGE L315 - false
   * 2 gnu.trove.map.hash.TByteFloatHashMap.keys([B)[B: I44 Branch 51 IF_ICMPNE L323 - false
   * 3 gnu.trove.map.hash.TByteFloatHashMap.keys([B)[B: I37 Branch 50 IFLE L322 - true
   * 4 gnu.trove.map.hash.TByteFloatHashMap.keys([B)[B: I37 Branch 50 IFLE L322 - false
   * 5 gnu.trove.map.hash.TByteFloatHashMap.keys([B)[B: I44 Branch 51 IF_ICMPNE L323 - true
   * 6 gnu.trove.map.hash.TByteFloatHashMap.keys()[B: I27 Branch 47 IFLE L303 - true
   * 7 gnu.trove.map.hash.TByteFloatHashMap.keys()[B: I27 Branch 47 IFLE L303 - false
   * 8 gnu.trove.map.hash.TByteFloatHashMap.keys()[B: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
      byte[] byteArray0 = tByteFloatHashMap0.keys();
      tByteFloatHashMap0.put((byte)37, (byte)37);
      byte[] byteArray1 = tByteFloatHashMap0.keys(byteArray0);
      assertEquals(false, tByteFloatHashMap0.isEmpty());
      assertNotSame(byteArray0, byteArray1);
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.values()[F: I34 Branch 53 IF_ICMPNE L344 - false
   * 2 gnu.trove.map.hash.TByteFloatHashMap.values()[F: I27 Branch 52 IFLE L343 - true
   * 3 gnu.trove.map.hash.TByteFloatHashMap.values()[F: I27 Branch 52 IFLE L343 - false
   * 4 gnu.trove.map.hash.TByteFloatHashMap.values()[F: I34 Branch 53 IF_ICMPNE L344 - true
   */

  @Test
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      float[] floatArray0 = new float[7];
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(byteArray0, floatArray0);
      float[] floatArray1 = tByteFloatHashMap0.values();
      assertEquals(1, tByteFloatHashMap0.size());
      assertEquals("{0=0.0}", tByteFloatHashMap0.toString());
      assertEquals(17, tByteFloatHashMap0.capacity());
      assertNotNull(floatArray1);
  }

  //Test case number: 20
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.values([F)[F: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TByteFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TByteFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TByteFloatHashMap.values([F)[F: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(0, 151);
      float[] floatArray0 = new float[8];
      float[] floatArray1 = tByteFloatHashMap0.values(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
  }

  //Test case number: 21
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.values([F)[F: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TByteFloatHashMap.values([F)[F: I44 Branch 56 IF_ICMPNE L363 - false
   * 3 gnu.trove.map.hash.TByteFloatHashMap.values()[F: I27 Branch 52 IFLE L343 - true
   * 4 gnu.trove.map.hash.TByteFloatHashMap.values()[F: I27 Branch 52 IFLE L343 - false
   * 5 gnu.trove.map.hash.TByteFloatHashMap.values()[F: I34 Branch 53 IF_ICMPNE L344 - true
   * 6 gnu.trove.map.hash.TByteFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - true
   * 7 gnu.trove.map.hash.TByteFloatHashMap.values([F)[F: I37 Branch 55 IFLE L362 - false
   * 8 gnu.trove.map.hash.TByteFloatHashMap.values([F)[F: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
      tByteFloatHashMap0.adjustOrPutValue((byte)0, (float) 0, (float) 0);
      TByteFloatHashMap tByteFloatHashMap1 = new TByteFloatHashMap((-1474), (-1474));
      float[] floatArray0 = tByteFloatHashMap1.values();
      tByteFloatHashMap0.values(floatArray0);
      assertEquals("{0=0.0}", tByteFloatHashMap0.toString());
      assertFalse(tByteFloatHashMap1.equals(tByteFloatHashMap0));
  }

  //Test case number: 22
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TByteFloatHashMap.containsValue(F)Z: I31 Branch 59 IFNE L377 - true
   * 3 gnu.trove.map.hash.TByteFloatHashMap.containsValue(F)Z: I18 Branch 57 IFLE L376 - true
   * 4 gnu.trove.map.hash.TByteFloatHashMap.containsValue(F)Z: I18 Branch 57 IFLE L376 - false
   * 5 gnu.trove.map.hash.TByteFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
      tByteFloatHashMap0.put((byte)37, (byte)37);
      boolean boolean0 = tByteFloatHashMap0.containsValue(0.0F);
      assertEquals("{37=37.0}", tByteFloatHashMap0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 23
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.containsValue(F)Z: I31 Branch 59 IFNE L377 - false
   * 2 gnu.trove.map.hash.TByteFloatHashMap.containsValue(F)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TByteFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 4 gnu.trove.map.hash.TByteFloatHashMap.containsValue(F)Z: I25 Branch 58 IF_ICMPNE L377 - false
   */

  @Test
  public void test23()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(1039);
      float[] floatArray0 = new float[6];
      TByteFloatHashMap tByteFloatHashMap1 = new TByteFloatHashMap(tByteFloatHashMap0._set, floatArray0);
      boolean boolean0 = tByteFloatHashMap1.containsValue((float) (byte)0);
      assertEquals("{0=0.0}", tByteFloatHashMap1.toString());
      assertEquals(1, tByteFloatHashMap1.size());
      assertEquals(4177, tByteFloatHashMap1.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TByteFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TByteFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
      boolean boolean0 = tByteFloatHashMap0.forEachValue((TFloatProcedure) null);
      assertEquals(23, tByteFloatHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TByteFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TByteFloatHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      float[] floatArray0 = new float[9];
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(byteArray0, floatArray0);
      // Undeclared exception!
      try {
        tByteFloatHashMap0.forEachValue((TFloatProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TByteFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TByteFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
      tByteFloatHashMap0.transformValues((TFloatFunction) null);
      assertEquals(23, tByteFloatHashMap0.capacity());
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TByteFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TByteFloatHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      float[] floatArray0 = new float[10];
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(byteArray0, floatArray0);
      // Undeclared exception!
      try {
        tByteFloatHashMap0.transformValues((TFloatFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.retainEntries(Lgnu/trove/procedure/TByteFloatProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TByteFloatHashMap.retainEntries(Lgnu/trove/procedure/TByteFloatProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TByteFloatHashMap.retainEntries(Lgnu/trove/procedure/TByteFloatProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   * 4 gnu.trove.map.hash.TByteFloatHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 5 gnu.trove.map.hash.TByteFloatHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 6 gnu.trove.map.hash.TByteFloatHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap((-110), (float) (-110), (byte) (-41), (float) (byte) (-41));
      boolean boolean0 = tByteFloatHashMap0.retainEntries((TByteFloatProcedure) null);
      assertEquals("{}", tByteFloatHashMap0.toString());
      assertEquals(false, boolean0);
      assertEquals(3, tByteFloatHashMap0.capacity());
  }

  //Test case number: 29
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.retainEntries(Lgnu/trove/procedure/TByteFloatProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TByteFloatHashMap.retainEntries(Lgnu/trove/procedure/TByteFloatProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TByteFloatHashMap.retainEntries(Lgnu/trove/procedure/TByteFloatProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   * 4 gnu.trove.map.hash.TByteFloatHashMap.putIfAbsent(BF)F: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test29()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
      tByteFloatHashMap0.putIfAbsent((byte)0, 0.0F);
      // Undeclared exception!
      try {
        tByteFloatHashMap0.retainEntries((TByteFloatProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.adjustValue(BF)Z: I9 Branch 71 IFGE L477 - true
   * 2 gnu.trove.map.hash.TByteFloatHashMap.increment(B)Z: root-Branch
   */

  @Test
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)28;
      float[] floatArray0 = new float[7];
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(byteArray0, floatArray0);
      boolean boolean0 = tByteFloatHashMap0.increment((byte)28);
      assertEquals("{28=1.0, 0=0.0}", tByteFloatHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 31
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.adjustOrPutValue(BFF)F: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TByteFloatHashMap.adjustOrPutValue(BFF)F: I58 Branch 73 IFEQ L502 - true
   */

//   @Test
//   public void test31()  throws Throwable  {
//       byte[] byteArray0 = new byte[4];
//       float[] floatArray0 = new float[9];
//       TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(byteArray0, floatArray0);
//       float float0 = tByteFloatHashMap0.adjustOrPutValue((byte)0, 0.0F, 0.0F);
//       assertEquals("{0=0.0}", tByteFloatHashMap0.toString());
//       assertEquals(23, tByteFloatHashMap0.capacity());
//       assertEquals(1, tByteFloatHashMap0.size());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 32
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   */

  @Test
  public void test32()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap((-546), (float) (-546), (byte)0, (float) (-546));
      boolean boolean0 = tByteFloatHashMap0.equals((Object) "0");
      assertEquals(false, boolean0);
  }

  //Test case number: 33
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   * 2 gnu.trove.map.hash.TByteFloatHashMap.<init>(IFBF)V: root-Branch
   * 3 gnu.trove.map.hash.TByteFloatHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   */

  @Test
  public void test33()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap((-110), (float) (-110), (byte) (-41), (float) (byte) (-41));
      float[] floatArray0 = new float[5];
      TByteFloatHashMap tByteFloatHashMap1 = new TByteFloatHashMap(tByteFloatHashMap0._set, floatArray0);
      boolean boolean0 = tByteFloatHashMap0.equals((Object) tByteFloatHashMap1);
      assertEquals(false, boolean0);
      assertFalse(tByteFloatHashMap1.equals(tByteFloatHashMap0));
      assertEquals(1, tByteFloatHashMap1.size());
      assertEquals(11, tByteFloatHashMap1.capacity());
      assertEquals("{0=0.0}", tByteFloatHashMap1.toString());
  }

  //Test case number: 34
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 2 gnu.trove.map.hash.TByteFloatHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TByteFloatHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 4 gnu.trove.map.hash.TByteFloatHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 5 gnu.trove.map.hash.TByteFloatHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   */

  @Test
  public void test34()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap();
      tByteFloatHashMap0.putIfAbsent((byte)0, 0.0F);
      int int0 = tByteFloatHashMap0.hashCode();
      assertEquals("{0=0.0}", tByteFloatHashMap0.toString());
      assertEquals(0, int0);
  }

  //Test case number: 35
  /*
   * 18 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap$1.execute(BF)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TByteFloatHashMap$1.<init>(Lgnu/trove/map/hash/TByteFloatHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 3 gnu.trove.map.hash.TByteFloatHashMap$1.execute(BF)Z: I4 Branch 115 IFEQ L1233 - false
   * 4 gnu.trove.map.hash.TByteFloatHashMap.<init>(IF)V: root-Branch
   * 5 gnu.trove.map.hash.TByteFloatHashMap.put(BF)F: root-Branch
   * 6 gnu.trove.map.hash.TByteFloatHashMap.toString()Ljava/lang/String;: root-Branch
   * 7 gnu.trove.map.hash.TByteFloatHashMap.doPut(BFI)F: I12 Branch 40 IFGE L214 - true
   * 8 gnu.trove.map.hash.TByteFloatHashMap.doPut(BFI)F: I12 Branch 40 IFGE L214 - false
   * 9 gnu.trove.map.hash.TByteFloatHashMap.doPut(BFI)F: I41 Branch 41 IFEQ L221 - true
   * 10 gnu.trove.map.hash.TByteFloatHashMap.doPut(BFI)F: I41 Branch 41 IFEQ L221 - false
   * 11 gnu.trove.map.hash.TByteFloatHashMap.forEachEntry(Lgnu/trove/procedure/TByteFloatProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 12 gnu.trove.map.hash.TByteFloatHashMap.forEachEntry(Lgnu/trove/procedure/TByteFloatProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 13 gnu.trove.map.hash.TByteFloatHashMap.forEachEntry(Lgnu/trove/procedure/TByteFloatProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 14 gnu.trove.map.hash.TByteFloatHashMap.forEachEntry(Lgnu/trove/procedure/TByteFloatProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 15 gnu.trove.map.hash.TByteFloatHashMap.forEachEntry(Lgnu/trove/procedure/TByteFloatProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 16 gnu.trove.map.hash.TByteFloatHashMap.<init>([B[F)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 17 gnu.trove.map.hash.TByteFloatHashMap.<init>([B[F)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 18 gnu.trove.map.hash.TByteFloatHashMap.putIfAbsent(BF)F: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test35()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap(0, 151);
      float[] floatArray0 = new float[8];
      TByteFloatHashMap tByteFloatHashMap1 = new TByteFloatHashMap(tByteFloatHashMap0._states, floatArray0);
      tByteFloatHashMap1.putIfAbsent((byte) (-121), 51.53884F);
      String string0 = tByteFloatHashMap1.toString();
      assertEquals(2, tByteFloatHashMap1.size());
      assertEquals("{-121=51.53884, 0=0.0}", string0);
  }

  //Test case number: 36
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TByteFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 2 gnu.trove.map.hash.TByteFloatHashMap.setUp(I)I: root-Branch
   * 3 gnu.trove.map.hash.TByteFloatHashMap.<init>(I)V: root-Branch
   * 4 gnu.trove.map.hash.TByteFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 5 gnu.trove.map.hash.TByteFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 6 gnu.trove.map.hash.TByteFloatHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 7 gnu.trove.map.hash.TByteFloatHashMap.adjustOrPutValue(BFF)F: I9 Branch 72 IFGE L491 - true
   * 8 gnu.trove.map.hash.TByteFloatHashMap.adjustOrPutValue(BFF)F: I58 Branch 73 IFEQ L502 - false
   */

  @Test
  public void test36()  throws Throwable  {
      TByteFloatHashMap tByteFloatHashMap0 = new TByteFloatHashMap((-398));
      tByteFloatHashMap0.adjustOrPutValue((byte)65, (-927.67487F), (float) (-398));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tByteFloatHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(1, tByteFloatHashMap0.size());
      assertEquals("{65=-398.0}", tByteFloatHashMap0.toString());
  }
}
