/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TIntFloatMap;
import gnu.trove.map.hash.TIntFloatHashMap;
import gnu.trove.procedure.TFloatProcedure;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.UnsupportedEncodingException;
import java.util.AbstractMap;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntFloatHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


//   @Test
//   public void test0()  throws Throwable  {
//       int int0 = 1286;
//       int int1 = 522;
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0, int0, int1, int1);
//       tIntFloatHashMap0.keySet();
//       tIntFloatHashMap0.keySet();
//       TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap();
//       tIntFloatHashMap0.ensureCapacity(int0);
//       assertEquals("{}", tIntFloatHashMap0.toString());
//       
//       tIntFloatHashMap1.capacity();
//       int int2 = tIntFloatHashMap1.hashCode();
//       tIntFloatHashMap0.capacity();
//       tIntFloatHashMap0.tempDisableAutoCompaction();
//       int int3 = (-1140);
//       String string0 = "]8CaPur$D<e8";
//       int[] intArray0 = new int[8];
//       intArray0[0] = int3;
//       intArray0[1] = int3;
//       int int4 = 695;
//       intArray0[2] = int4;
//       intArray0[3] = int1;
//       float[] floatArray0 = tIntFloatHashMap1.values();
//       assertNotNull(floatArray0);
//       
//       intArray0[4] = int2;
//       intArray0[5] = int2;
//       intArray0[6] = int3;
//       int int5 = (-281);
//       intArray0[7] = int5;
//       int[] intArray1 = tIntFloatHashMap1.keys(intArray0);
//       assertNotNull(intArray1);
//       
//       AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>(string0, (Integer) int3);
//       abstractMap_SimpleEntry0.hashCode();
//       TIntFloatHashMap tIntFloatHashMap2 = new TIntFloatHashMap(int3);
//       float float0 = tIntFloatHashMap2.putIfAbsent(int3, int3);
//       assertEquals(false, tIntFloatHashMap2.isEmpty());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0, float0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int1 = (-1161);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-1);
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0);
      tIntFloatHashMap0.contains(int0);
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(int0);
      TIntFloatHashMap tIntFloatHashMap2 = new TIntFloatHashMap((TIntFloatMap) tIntFloatHashMap1);
      tIntFloatHashMap2.keys();
      tIntFloatHashMap2.compact();
      float float0 = 0.0F;
      int int1 = (-1334);
      tIntFloatHashMap0.get(int1);
      tIntFloatHashMap2.remove(int0);
      tIntFloatHashMap2.containsValue(float0);
      int int2 = (-1);
      TIntFloatHashMap tIntFloatHashMap3 = new TIntFloatHashMap(int2, int2);
      float float1 = (-1219.3048F);
      tIntFloatHashMap3.containsValue(float1);
      tIntFloatHashMap3.clear();
      float float2 = (-1777.0844F);
      tIntFloatHashMap0.adjustOrPutValue(int2, float2, float0);
      assertEquals("{-1=0.0}", tIntFloatHashMap0.toString());
      
      int int3 = tIntFloatHashMap3.hashCode();
      boolean boolean0 = tIntFloatHashMap3.containsKey(int3);
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0, int0);
      int int1 = (-1);
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(int1, int0, int0, int0);
      TIntFloatHashMap tIntFloatHashMap2 = null;
      try {
        tIntFloatHashMap2 = new TIntFloatHashMap((TIntFloatMap) tIntFloatHashMap1);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-1724);
      int int1 = (-1878);
      float float0 = 0.0F;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int1, float0);
      float float1 = tIntFloatHashMap0.getAutoCompactionFactor();
      int[] intArray0 = new int[5];
      intArray0[0] = int0;
      intArray0[1] = int1;
      intArray0[2] = int0;
      intArray0[3] = int1;
      intArray0[4] = int1;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) intArray0[4];
      floatArray0[1] = (float) int1;
      floatArray0[2] = (float) intArray0[1];
      floatArray0[3] = float1;
      floatArray0[4] = (float) intArray0[3];
      floatArray0[5] = float0;
      floatArray0[6] = (float) intArray0[2];
      floatArray0[7] = (float) intArray0[2];
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(intArray0, floatArray0);
      assertEquals(17, tIntFloatHashMap1.capacity());
      assertEquals(2, tIntFloatHashMap1.size());
      assertEquals("{-1724=-1878.0, -1878=-1878.0}", tIntFloatHashMap1.toString());
      
      TIntFloatHashMap tIntFloatHashMap2 = new TIntFloatHashMap(int0);
      tIntFloatHashMap2.size();
      assertFalse(tIntFloatHashMap2.equals(tIntFloatHashMap1));
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 455;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0, int0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) int0;
      float float0 = 0.0F;
      tIntFloatHashMap0.setAutoCompactionFactor(float0);
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      tIntFloatHashMap0.tempDisableAutoCompaction();
      tIntFloatHashMap0.toString();
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) int0;
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(tIntFloatHashMap0._set, floatArray0);
      floatArray0[6] = (float) int0;
      floatArray0[7] = (float) int0;
      tIntFloatHashMap1.keys(tIntFloatHashMap0._set);
      tIntFloatHashMap0.values(floatArray0);
      tIntFloatHashMap0.toString();
      Locale locale0 = Locale.CHINA;
      tIntFloatHashMap0.valueCollection();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 1;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      String string0 = "F.'UF:3Vrm^LP8-";
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(string0, string0);
      abstractMap_SimpleEntry0.setValue(string0);
      int int1 = (-1973);
      tIntFloatHashMap0.contains(int1);
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(int0, int0);
      tIntFloatHashMap1.putIfAbsent(int0, int1);
      tIntFloatHashMap1.getNoEntryKey();
      assertEquals(false, tIntFloatHashMap1.isEmpty());
      
      TIntFloatHashMap tIntFloatHashMap2 = new TIntFloatHashMap(int0);
      assertFalse(tIntFloatHashMap2.equals(tIntFloatHashMap1));
  }

//   @Test
//   public void test7()  throws Throwable  {
//       int int0 = 992;
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0, int0);
//       tIntFloatHashMap0.getAutoCompactionFactor();
//       int int1 = (-939);
//       float float0 = 1806.4606F;
//       tIntFloatHashMap0.getNoEntryValue();
//       float float1 = (-328.33344F);
//       TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(int1, float0, int1, float1);
//       int int2 = (-767);
//       float float2 = 0.0F;
//       float float3 = tIntFloatHashMap1.putIfAbsent(int2, float2);
//       assertEquals("{-767=0.0}", tIntFloatHashMap1.toString());
//       assertEquals((-328.33344F), float3, 0.01F);
//   }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 66923;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0, int0);
      int int1 = 175447;
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(int1, int1);
      int int2 = (-1);
      tIntFloatHashMap1.containsKey(int2);
      tIntFloatHashMap1.tempDisableAutoCompaction();
      int int3 = 1392;
      TIntFloatHashMap tIntFloatHashMap2 = new TIntFloatHashMap(int3);
      tIntFloatHashMap2.tempDisableAutoCompaction();
      tIntFloatHashMap1.getAutoCompactionFactor();
      Object object0 = null;
      String string0 = "] dG).cI}:tYyJr[P";
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(object0, string0);
      AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<Object, String>, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<Object, String>, Integer>(abstractMap_SimpleEntry0, (Integer) int1);
      abstractMap_SimpleEntry1.equals(object0);
      boolean boolean0 = tIntFloatHashMap2.containsValue((float) int3);
      assertEquals(2879, tIntFloatHashMap2.capacity());
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      int[] intArray0 = new int[1];
      float[] floatArray0 = new float[1];
      float float0 = (-1583.7653F);
      floatArray0[0] = float0;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      int int0 = 0;
      tIntFloatHashMap0.contains(int0);
      int int1 = 0;
      intArray0[0] = int1;
      intArray0[0] = int1;
      float[] floatArray1 = new float[10];
      floatArray1[0] = (float) intArray0[0];
      floatArray1[1] = (float) int1;
      floatArray1[2] = (float) int1;
      floatArray1[3] = (float) int1;
      int int2 = (-1021);
      float float1 = 1.0F;
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(int2, float1);
      tIntFloatHashMap1.getNoEntryValue();
      floatArray1[4] = (float) intArray0[0];
      floatArray1[5] = (float) intArray0[0];
      floatArray1[6] = (float) int1;
      floatArray1[7] = (float) int1;
      floatArray1[8] = (float) int1;
      floatArray1[9] = (float) int1;
      TIntFloatHashMap tIntFloatHashMap2 = new TIntFloatHashMap(intArray0, floatArray1);
      int int3 = 0;
      tIntFloatHashMap1.ensureCapacity(int3);
      tIntFloatHashMap2.remove(intArray0[0]);
      TIntFloatHashMap tIntFloatHashMap3 = new TIntFloatHashMap();
      float float2 = 1208.0612F;
      float float3 = 0.0F;
      tIntFloatHashMap2.setAutoCompactionFactor(float3);
      tIntFloatHashMap3.containsValue(float2);
      tIntFloatHashMap2.values(floatArray1);
      assertFalse(tIntFloatHashMap2.equals(tIntFloatHashMap0));
      assertEquals("{}", tIntFloatHashMap2.toString());
      
      TIntFloatHashMap tIntFloatHashMap4 = new TIntFloatHashMap();
      assertFalse(tIntFloatHashMap4.equals(tIntFloatHashMap0));
  }

//   @Test
//   public void test10()  throws Throwable  {
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
//       TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap((TIntFloatMap) tIntFloatHashMap0);
//       TIntFloatHashMap tIntFloatHashMap2 = new TIntFloatHashMap((TIntFloatMap) tIntFloatHashMap1);
//       int int0 = (-603);
//       tIntFloatHashMap2.ensureCapacity(int0);
//       assertEquals(23, tIntFloatHashMap1.capacity());
//       assertEquals(0, tIntFloatHashMap2.getNoEntryKey());
//       assertEquals(0.0F, tIntFloatHashMap1.getNoEntryValue(), 0.01F);
//   }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-262);
      int int1 = 10243;
      float float0 = 1526.9978F;
      int int2 = 1594;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int1, float0, int2, (float) int1);
      int int3 = 686;
      tIntFloatHashMap0.get(int3);
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(int0);
      TIntFloatHashMap tIntFloatHashMap2 = new TIntFloatHashMap();
      tIntFloatHashMap0.keySet();
      int int4 = 0;
      float float1 = 1488.0701F;
      float float2 = 0.0F;
      tIntFloatHashMap1.adjustOrPutValue(int4, float1, float2);
      tIntFloatHashMap1.toString();
      tIntFloatHashMap1.hashCode();
      tIntFloatHashMap1.isEmpty();
      tIntFloatHashMap1.compact();
      assertEquals(1, tIntFloatHashMap1.size());
      assertEquals("{0=0.0}", tIntFloatHashMap1.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1017;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0, int0);
      tIntFloatHashMap0.size();
      int int1 = 1586;
      float float0 = 0.0F;
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap();
      int int2 = (-1);
      float float1 = 0.0F;
      int int3 = 1518;
      float float2 = 1613.2817F;
      TIntFloatHashMap tIntFloatHashMap2 = new TIntFloatHashMap(int2, float1, int3, float2);
      tIntFloatHashMap2.keys();
      float float3 = (-1287.7511F);
      tIntFloatHashMap1.put(int2, float3);
      TIntFloatHashMap tIntFloatHashMap3 = new TIntFloatHashMap(int1, float0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = "=";
      try {
        byteArrayOutputStream0.toString(string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // =
         //
      }
  }

//   @Test
//   public void test13()  throws Throwable  {
//       int int0 = 0;
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0);
//       TFloatProcedure tFloatProcedure0 = null;
//       boolean boolean0 = tIntFloatHashMap0.forEachValue(tFloatProcedure0);
//       assertEquals(true, boolean0);
//       
//       float[] floatArray0 = tIntFloatHashMap0.values();
//       assertNotNull(floatArray0);
//       
//       TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap((TIntFloatMap) tIntFloatHashMap0);
//       TIntFloatHashMap tIntFloatHashMap2 = new TIntFloatHashMap((TIntFloatMap) tIntFloatHashMap1);
//       assertEquals(0.0F, tIntFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals(23, tIntFloatHashMap1.capacity());
//       assertEquals(0, tIntFloatHashMap1.getNoEntryKey());
//       assertEquals(23, tIntFloatHashMap2.capacity());
//   }

//   @Test
//   public void test14()  throws Throwable  {
//       int[] intArray0 = new int[5];
//       int int0 = 1099;
//       intArray0[0] = int0;
//       int int1 = 163;
//       intArray0[1] = int1;
//       int int2 = 316;
//       int int3 = (-415);
//       float float0 = (-1164.5759F);
//       float float1 = 1446.8224F;
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int3, float0, int1, float1);
//       tIntFloatHashMap0.trimToSize();
//       assertEquals(3, tIntFloatHashMap0.capacity());
//       
//       intArray0[2] = int2;
//       int int4 = 120;
//       intArray0[3] = int4;
//       int int5 = 353;
//       intArray0[4] = int5;
//       float[] floatArray0 = new float[4];
//       floatArray0[0] = (float) intArray0[0];
//       floatArray0[1] = (float) intArray0[4];
//       float float2 = 925.7009F;
//       floatArray0[0] = float2;
//       floatArray0[1] = (float) int1;
//       floatArray0[2] = (float) intArray0[3];
//       floatArray0[3] = (float) int5;
//       floatArray0[0] = (float) intArray0[2];
//       floatArray0[1] = (float) int0;
//       floatArray0[2] = (float) intArray0[3];
//       floatArray0[3] = (float) intArray0[3];
//       floatArray0[2] = (float) intArray0[3];
//       floatArray0[3] = (float) int4;
//       TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(intArray0, floatArray0);
//       float[] floatArray1 = tIntFloatHashMap1.values(floatArray0);
//       assertNotNull(floatArray1);
//       assertSame(floatArray1, floatArray0);
//       assertEquals("{1099=316.0, 163=1099.0, 316=120.0, 120=120.0}", tIntFloatHashMap1.toString());
//       
//       int int6 = 0;
//       float float3 = 10.0F;
//       int int7 = 557;
//       TIntFloatHashMap tIntFloatHashMap2 = new TIntFloatHashMap(int6, float3, int7, float3);
//       int[] intArray1 = tIntFloatHashMap2._set;
//       int int8 = 70;
//       float float4 = tIntFloatHashMap2.remove(int8);
//       assertEquals(10.0F, float4, 0.01F);
//       assertFalse(tIntFloatHashMap2.equals(tIntFloatHashMap1));
//   }

  @Test
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 1510;
      intArray0[1] = int1;
      int int2 = (-979);
      intArray0[2] = int2;
      int int3 = (-1623);
      intArray0[3] = int3;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) intArray0[0];
      floatArray0[1] = (float) int1;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int2;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) int0;
      floatArray0[6] = (float) intArray0[0];
      floatArray0[7] = (float) int0;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap((TIntFloatMap) tIntFloatHashMap0);
      String string0 = "";
      String string1 = "{";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      boolean boolean0 = true;
      tIntFloatHashMap0.reenableAutoCompaction(boolean0);
      assertEquals(23, tIntFloatHashMap0.capacity());
  }
}
