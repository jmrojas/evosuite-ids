/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TObjectFunction;
import gnu.trove.map.hash.THashMap;
import gnu.trove.procedure.TObjectObjectProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class THashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 11 covered goals:
   * 1 gnu.trove.map.hash.THashMap$KeyView.<init>(Lgnu/trove/map/hash/THashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.THashMap$EntryView$EntryIterator.<init>(Lgnu/trove/map/hash/THashMap$EntryView;Lgnu/trove/map/hash/THashMap;)V: root-Branch
   * 3 gnu.trove.map.hash.THashMap.keySet()Ljava/util/Set;: root-Branch
   * 4 gnu.trove.map.hash.THashMap.<init>(Lgnu/trove/map/hash/THashMap;)V: root-Branch
   * 5 gnu.trove.map.hash.THashMap.entrySet()Ljava/util/Set;: root-Branch
   * 6 gnu.trove.map.hash.THashMap.<init>(I)V: root-Branch
   * 7 gnu.trove.map.hash.THashMap$EntryView.iterator()Ljava/util/Iterator;: root-Branch
   * 8 gnu.trove.map.hash.THashMap$EntryView.<init>(Lgnu/trove/map/hash/THashMap;)V: root-Branch
   * 9 gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V: I15 Branch 60 IFEQ L553 - true
   * 10 gnu.trove.map.hash.THashMap.setUp(I)I: root-Branch
   * 11 gnu.trove.map.hash.THashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      THashMap<Integer, String> tHashMap0 = new THashMap<Integer, String>(0, 0);
      THashMap<Integer, Object> tHashMap1 = new THashMap<Integer, Object>(tHashMap0);
      Set<Integer> set0 = tHashMap1.keySet();
      assertEquals(true, set0.isEmpty());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.THashMap.containsKey(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      THashMap<Object, String> tHashMap0 = new THashMap<Object, String>(175439, 175439);
      boolean boolean0 = tHashMap0.containsKey((Object) 175439);
      assertEquals(false, boolean0);
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.THashMap.values()Ljava/util/Collection;: root-Branch
   * 2 gnu.trove.map.hash.THashMap$ValueView.<init>(Lgnu/trove/map/hash/THashMap;)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      THashMap<Integer, String> tHashMap0 = new THashMap<Integer, String>(14, 14);
      THashMap<Integer, Object> tHashMap1 = new THashMap<Integer, Object>(tHashMap0);
      Collection<Object> collection0 = tHashMap1.values();
      assertEquals(0, collection0.size());
  }

  //Test case number: 3
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.THashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.THashMap.rehash(I)V: I65 Branch 45 IF_ACMPNE L399 - false
   * 3 gnu.trove.map.hash.THashMap.<init>(Ljava/util/Map;)V: root-Branch
   * 4 gnu.trove.map.hash.THashMap.rehash(I)V: I51 Branch 43 IFLE L396 - true
   * 5 gnu.trove.map.hash.THashMap.rehash(I)V: I51 Branch 43 IFLE L396 - false
   * 6 gnu.trove.map.hash.THashMap.rehash(I)V: I62 Branch 44 IF_ACMPEQ L399 - true
   * 7 gnu.trove.map.hash.THashMap.rehash(I)V: I62 Branch 44 IF_ACMPEQ L399 - false
   */

  @Test
  public void test3()  throws Throwable  {
      THashMap<Integer, String> tHashMap0 = new THashMap<Integer, String>(0, 0);
      THashMap<Object, String> tHashMap1 = new THashMap<Object, String>((Map<?, ? extends String>) tHashMap0);
      tHashMap1.removeAt(0);
      assertEquals(false, tHashMap1.isEmpty());
      assertEquals(3, tHashMap1.capacity());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.THashMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      THashMap<Integer, String> tHashMap0 = new THashMap<Integer, String>(1870);
      Integer[] integerArray0 = new Integer[6];
      ToObjectArrayProceedure<Integer> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Integer>(integerArray0);
      boolean boolean0 = tHashMap0.forEachKey((TObjectProcedure<? super Integer>) toObjectArrayProceedure0);
      assertEquals(3821, tHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 5
  /*
   * 14 covered goals:
   * 1 gnu.trove.map.hash.THashMap$EqProcedure.<init>(Lgnu/trove/map/hash/THashMap;Ljava/util/Map;)V: root-Branch
   * 2 gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z: I4 Branch 26 IFNE L194 - true
   * 3 gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z: I20 Branch 27 IF_ICMPEQ L198 - true
   * 4 gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z: I3 Branch 1 IFNONNULL L262 - false
   * 5 gnu.trove.map.hash.THashMap$EqProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z: I8 Branch 2 IFGT L262 - false
   * 6 gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I25 Branch 33 IF_ACMPEQ L319 - false
   * 7 gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I30 Branch 34 IF_ACMPEQ L319 - false
   * 8 gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I39 Branch 35 IFNE L319 - false
   * 9 gnu.trove.map.hash.THashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: root-Branch
   * 10 gnu.trove.map.hash.THashMap.<init>()V: root-Branch
   * 11 gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I11 Branch 24 IFGE L171 - true
   * 12 gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I40 Branch 25 IFEQ L177 - false
   * 13 gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I18 Branch 32 IFLE L318 - false
   * 14 gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I25 Branch 33 IF_ACMPEQ L319 - true
   */

  @Test
  public void test5()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>();
      tHashMap0.put((Integer) null, (Integer) null);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put((Object) "", "");
      boolean boolean0 = tHashMap0.equals((Object) hashMap0);
      assertEquals(1, tHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: I9 Branch 23 IFGE L161 - true
   */

  @Test
  public void test6()  throws Throwable  {
      THashMap<Integer, String> tHashMap0 = new THashMap<Integer, String>(0, 0);
      THashMap<Integer, Object> tHashMap1 = new THashMap<Integer, Object>(tHashMap0);
      tHashMap1.putIfAbsent((Integer) 1689, (Object) tHashMap1);
      assertEquals(1, tHashMap1.size());
      assertEquals(false, tHashMap1.isEmpty());
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.THashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: I9 Branch 23 IFGE L161 - false
   */

  @Test
  public void test7()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>();
      tHashMap0.put((Integer) 205753, (Integer) 205753);
      tHashMap0.putIfAbsent((Integer) 205753, (Integer) null);
      assertEquals(false, tHashMap0.isEmpty());
      assertEquals(1, tHashMap0.size());
  }

  //Test case number: 8
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I11 Branch 24 IFGE L171 - false
   * 2 gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I40 Branch 25 IFEQ L177 - true
   */

  @Test
  public void test8()  throws Throwable  {
      THashMap<Integer, String> tHashMap0 = new THashMap<Integer, String>(14, 14);
      tHashMap0.put((Integer) 14, "");
      String string0 = tHashMap0.put((Integer) 14, (String) null);
      assertEquals(false, tHashMap0.isEmpty());
      assertEquals("", string0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z: I4 Branch 26 IFNE L194 - false
   */

  @Test
  public void test9()  throws Throwable  {
      THashMap<Integer, String> tHashMap0 = new THashMap<Integer, String>((-1814), (-1814));
      boolean boolean0 = tHashMap0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z: I20 Branch 27 IF_ICMPEQ L198 - false
   * 2 gnu.trove.map.hash.THashMap.equals(Ljava/lang/Object;)Z: I4 Branch 26 IFNE L194 - true
   */

  @Test
  public void test10()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put((Object) "", "");
      boolean boolean0 = tHashMap0.equals((Object) hashMap0);
      assertEquals(23, tHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 11
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z: I4 Branch 7 IFEQ L219 - true
   * 2 gnu.trove.map.hash.THashMap$1.execute(Ljava/lang/Object;Ljava/lang/Object;)Z: I4 Branch 7 IFEQ L219 - false
   * 3 gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I39 Branch 35 IFNE L319 - true
   * 4 gnu.trove.map.hash.THashMap$1.<init>(Lgnu/trove/map/hash/THashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 5 gnu.trove.map.hash.THashMap.toString()Ljava/lang/String;: root-Branch
   * 6 gnu.trove.map.hash.THashMap.rehash(I)V: I65 Branch 45 IF_ACMPNE L399 - true
   * 7 gnu.trove.map.hash.THashMap.rehash(I)V: I76 Branch 46 IFGE L402 - true
   * 8 gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I18 Branch 32 IFLE L318 - true
   */

  @Test
  public void test11()  throws Throwable  {
      THashMap<Integer, String> tHashMap0 = new THashMap<Integer, String>((-1814), (-1814));
      tHashMap0.put((Integer) 17, "F");
      tHashMap0.put((Integer) (-1814), (String) null);
      String string0 = tHashMap0.toString();
      assertEquals(17, tHashMap0.capacity());
      assertEquals("{-1814=null, 17=F}", string0);
  }

  //Test case number: 12
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z: I8 Branch 6 IFNONNULL L244 - true
   * 2 gnu.trove.map.hash.THashMap.hashCode()I: root-Branch
   * 3 gnu.trove.map.hash.THashMap$HashProcedure.getHashCode()I: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>();
      tHashMap0.put((Integer) 14, (Integer) 3);
      int int0 = tHashMap0.hashCode();
      assertEquals(false, tHashMap0.isEmpty());
      assertEquals(13, int0);
  }

  //Test case number: 13
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.THashMap$HashProcedure.execute(Ljava/lang/Object;Ljava/lang/Object;)Z: I8 Branch 6 IFNONNULL L244 - false
   * 2 gnu.trove.map.hash.THashMap.hashCode()I: root-Branch
   * 3 gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I30 Branch 34 IF_ACMPEQ L319 - false
   * 4 gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I39 Branch 35 IFNE L319 - true
   * 5 gnu.trove.map.hash.THashMap$HashProcedure.getHashCode()I: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>((int) (byte)0, (float) 1689);
      tHashMap0.put((Integer) 0, (Integer) null);
      int int0 = tHashMap0.hashCode();
      assertEquals(1, tHashMap0.size());
      assertEquals(0, int0);
  }

  //Test case number: 14
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I30 Branch 34 IF_ACMPEQ L319 - true
   * 2 gnu.trove.map.hash.THashMap$1.<init>(Lgnu/trove/map/hash/THashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 3 gnu.trove.map.hash.THashMap.toString()Ljava/lang/String;: root-Branch
   * 4 gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I18 Branch 32 IFLE L318 - true
   * 5 gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I18 Branch 32 IFLE L318 - false
   * 6 gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I25 Branch 33 IF_ACMPEQ L319 - true
   * 7 gnu.trove.map.hash.THashMap.forEachEntry(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I25 Branch 33 IF_ACMPEQ L319 - false
   */

  @Test
  public void test14()  throws Throwable  {
      THashMap<Integer, String> tHashMap0 = new THashMap<Integer, String>(0, 0);
      tHashMap0.removeAt(0);
      assertEquals(false, tHashMap0.isEmpty());
      
      String string0 = tHashMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 15
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I26 Branch 36 IFLE L345 - true
   * 2 gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I26 Branch 36 IFLE L345 - false
   * 3 gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I33 Branch 37 IF_ACMPEQ L346 - true
   */

  @Test
  public void test15()  throws Throwable  {
      THashMap<String, String> tHashMap0 = new THashMap<String, String>(0, (float) (byte)0);
      boolean boolean0 = tHashMap0.retainEntries((TObjectObjectProcedure<? super String, ? super String>) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 16
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I33 Branch 37 IF_ACMPEQ L346 - false
   * 2 gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I38 Branch 38 IF_ACMPEQ L346 - false
   * 3 gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I26 Branch 36 IFLE L345 - false
   * 4 gnu.trove.map.hash.THashMap.retainEntries(Lgnu/trove/procedure/TObjectObjectProcedure;)Z: I33 Branch 37 IF_ACMPEQ L346 - true
   * 5 gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I18 Branch 28 IFLE L295 - true
   * 6 gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I18 Branch 28 IFLE L295 - false
   * 7 gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I25 Branch 29 IF_ACMPEQ L296 - true
   * 8 gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I25 Branch 29 IF_ACMPEQ L296 - false
   * 9 gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I30 Branch 30 IF_ACMPEQ L296 - false
   * 10 gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I36 Branch 31 IFNE L296 - true
   */

  @Test
  public void test16()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>((int) (byte)0, (float) 1689);
      tHashMap0.put((Integer) 0, (Integer) null);
      THashMap<String, String> tHashMap1 = new THashMap<String, String>(0, (float) (byte)0);
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tHashMap1._set);
      tHashMap0.forEachValue((TObjectProcedure<? super Integer>) toObjectArrayProceedure0);
      assertEquals(false, tHashMap0.isEmpty());
      
      // Undeclared exception!
      try {
        tHashMap1.retainEntries((TObjectObjectProcedure<? super String, ? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I25 Branch 41 IF_ACMPEQ L370 - false
   * 2 gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I30 Branch 42 IF_ACMPEQ L370 - false
   * 3 gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I18 Branch 40 IFLE L369 - false
   * 4 gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I25 Branch 41 IF_ACMPEQ L370 - true
   */

  @Test
  public void test17()  throws Throwable  {
      THashMap<String, Object> tHashMap0 = new THashMap<String, Object>(1332);
      tHashMap0.put((String) null, (Object) null);
      // Undeclared exception!
      try {
        tHashMap0.transformValues((TObjectFunction<Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 18
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I30 Branch 42 IF_ACMPEQ L370 - true
   * 2 gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;: I13 Branch 49 IFLT L453 - false
   * 3 gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I18 Branch 40 IFLE L369 - true
   * 4 gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I18 Branch 40 IFLE L369 - false
   * 5 gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I25 Branch 41 IF_ACMPEQ L370 - true
   * 6 gnu.trove.map.hash.THashMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: I25 Branch 41 IF_ACMPEQ L370 - false
   */

  @Test
  public void test18()  throws Throwable  {
      THashMap<String, Object> tHashMap0 = new THashMap<String, Object>(1332);
      tHashMap0.put("", (Object) null);
      assertEquals(false, tHashMap0.isEmpty());
      
      tHashMap0.remove((Object) "");
      tHashMap0.transformValues((TObjectFunction<Object, Object>) null);
      assertEquals("{}", tHashMap0.toString());
  }

  //Test case number: 19
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.THashMap.rehash(I)V: I76 Branch 46 IFGE L402 - false
   * 2 gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I18 Branch 28 IFLE L295 - true
   * 3 gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I18 Branch 28 IFLE L295 - false
   * 4 gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I25 Branch 29 IF_ACMPEQ L296 - true
   * 5 gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I25 Branch 29 IF_ACMPEQ L296 - false
   * 6 gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I30 Branch 30 IF_ACMPEQ L296 - false
   * 7 gnu.trove.map.hash.THashMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: I36 Branch 31 IFNE L296 - true
   * 8 gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;: root-Branch
   * 9 gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V: I15 Branch 60 IFEQ L553 - false
   * 10 gnu.trove.map.hash.THashMap$Entry.getKey()Ljava/lang/Object;: root-Branch
   * 11 gnu.trove.map.hash.THashMap$Entry.getValue()Ljava/lang/Object;: root-Branch
   * 12 gnu.trove.map.hash.THashMap$Entry.<init>(Lgnu/trove/map/hash/THashMap;Ljava/lang/Object;Ljava/lang/Object;I)V: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      THashMap<Integer, String> tHashMap0 = new THashMap<Integer, String>(14, 14);
      tHashMap0.put((Integer) 14, "");
      THashMap<Integer, Object> tHashMap1 = new THashMap<Integer, Object>(tHashMap0);
      THashMap<Integer, Integer> tHashMap2 = new THashMap<Integer, Integer>();
      tHashMap2.trimToSize();
      tHashMap1.put((Integer) 3, (Object) "");
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tHashMap2._set);
      tHashMap1.forEachValue((TObjectProcedure<? super Object>) toObjectArrayProceedure0);
      assertEquals("{14=}", tHashMap0.toString());
      
      // Undeclared exception!
      try {
        tHashMap2.ensureCapacity(3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Equal objects must have equal hashcodes. During rehashing, Trove discovered that the following two objects claim to be equal (as in java.lang.Object.equals()) but their hashCodes (or those calculated by your TObjectHashingStrategy) are not equal.This violates the general contract of java.lang.Object.hashCode().  See bullet point two in that method's documentation. object #1 =class java.lang.String id= 677832117 hashCode= 0 toString= ; object #2 =class java.lang.String id= 2071126731 hashCode= 0 toString= 
         // 
         // hashCode() and/or equals() have inconsistent implementation
         // Key set lost entries, now got 1 instead of 0. This can manifest itself as an apparent duplicate key.
         //
      }
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;: I9 Branch 47 IFGE L424 - true
   */

  @Test
  public void test20()  throws Throwable  {
      THashMap<String, Object> tHashMap0 = new THashMap<String, Object>(1332);
      tHashMap0.put((String) null, (Object) null);
      tHashMap0.get((Object) null);
      assertEquals(1, tHashMap0.size());
      assertEquals("{null=null}", tHashMap0.toString());
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.THashMap.get(Ljava/lang/Object;)Ljava/lang/Object;: I9 Branch 47 IFGE L424 - false
   */

  @Test
  public void test21()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>((int) (byte)0, (float) 1689);
      tHashMap0.get((Object) "{}");
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.THashMap.clear()V: I4 Branch 48 IFNE L432 - true
   */

  @Test
  public void test22()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>();
      tHashMap0.put((Integer) 205753, (Integer) 205753);
      assertEquals("{205753=205753}", tHashMap0.toString());
      
      tHashMap0.clear();
      assertEquals("{}", tHashMap0.toString());
  }

  //Test case number: 23
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.THashMap.clear()V: I4 Branch 48 IFNE L432 - false
   * 2 gnu.trove.map.hash.THashMap.<init>()V: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>();
      tHashMap0.clear();
      assertEquals(23, tHashMap0.capacity());
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;: I13 Branch 49 IFLT L453 - true
   */

  @Test
  public void test24()  throws Throwable  {
      THashMap<Integer, String> tHashMap0 = new THashMap<Integer, String>(0, 0);
      Object object0 = tHashMap0.remove((Object) null);
      assertNull(object0);
      assertEquals(true, tHashMap0.isEmpty());
      assertEquals(0, tHashMap0.size());
  }

  //Test case number: 25
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I30 Branch 52 IF_ACMPEQ L516 - false
   * 2 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I35 Branch 53 IF_ACMPEQ L516 - false
   * 3 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I40 Branch 54 IF_ACMPNE L516 - true
   * 4 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I14 Branch 50 IF_ACMPNE L514 - false
   * 5 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I23 Branch 51 IFLE L515 - true
   * 6 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I23 Branch 51 IFLE L515 - false
   * 7 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I30 Branch 52 IF_ACMPEQ L516 - true
   */

  @Test
  public void test25()  throws Throwable  {
      THashMap<Integer, String> tHashMap0 = new THashMap<Integer, String>((-1814), (-1814));
      tHashMap0.put((Integer) 17, "F");
      THashMap<Integer, Object> tHashMap1 = new THashMap<Integer, Object>(tHashMap0);
      boolean boolean0 = tHashMap1.containsValue((Object) null);
      assertEquals(7, tHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I35 Branch 53 IF_ACMPEQ L516 - true
   * 2 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I23 Branch 51 IFLE L515 - true
   * 3 gnu.trove.map.hash.THashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;: I13 Branch 49 IFLT L453 - false
   */

  @Test
  public void test26()  throws Throwable  {
      THashMap<String, Object> tHashMap0 = new THashMap<String, Object>(1332);
      tHashMap0.put("", (Object) null);
      assertEquals(1, tHashMap0.size());
      
      tHashMap0.remove((Object) "");
      boolean boolean0 = tHashMap0.containsValue((Object) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 27
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I40 Branch 54 IF_ACMPNE L516 - false
   * 2 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I14 Branch 50 IF_ACMPNE L514 - false
   * 3 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I23 Branch 51 IFLE L515 - false
   * 4 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I30 Branch 52 IF_ACMPEQ L516 - true
   * 5 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I30 Branch 52 IF_ACMPEQ L516 - false
   * 6 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I35 Branch 53 IF_ACMPEQ L516 - false
   */

  @Test
  public void test27()  throws Throwable  {
      THashMap<String, Object> tHashMap0 = new THashMap<String, Object>(1332);
      tHashMap0.put((String) null, (Object) null);
      boolean boolean0 = tHashMap0.containsValue((Object) null);
      assertEquals(false, tHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 28
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I62 Branch 56 IF_ACMPEQ L523 - false
   * 2 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I67 Branch 57 IF_ACMPEQ L523 - false
   * 3 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I72 Branch 58 IF_ACMPEQ L523 - false
   * 4 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I79 Branch 59 IFEQ L523 - true
   * 5 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I14 Branch 50 IF_ACMPNE L514 - true
   * 6 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I55 Branch 55 IFLE L522 - true
   * 7 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I55 Branch 55 IFLE L522 - false
   * 8 gnu.trove.map.hash.THashMap.containsValue(Ljava/lang/Object;)Z: I62 Branch 56 IF_ACMPEQ L523 - true
   */

  @Test
  public void test28()  throws Throwable  {
      THashMap<Integer, String> tHashMap0 = new THashMap<Integer, String>(0, 0);
      tHashMap0.put((Integer) 0, "`XOe9l|xLU8g");
      THashMap<Integer, Object> tHashMap1 = new THashMap<Integer, Object>(tHashMap0);
      boolean boolean0 = tHashMap1.containsValue((Object) "{}");
      assertEquals(1, tHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 29
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 62 IF_ACMPEQ L884 - true
   * 2 gnu.trove.map.hash.THashMap.removeAt(I)V: root-Branch
   * 3 gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 61 IFLE L883 - true
   * 4 gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 61 IFLE L883 - false
   * 5 gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 62 IF_ACMPEQ L884 - false
   * 6 gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V: I39 Branch 63 IF_ACMPEQ L884 - true
   */

  @Test
  public void test29()  throws Throwable  {
      THashMap<Integer, String> tHashMap0 = new THashMap<Integer, String>(0, 0);
      THashMap<Integer, Object> tHashMap1 = new THashMap<Integer, Object>(tHashMap0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      tHashMap0._set = tHashMap1._set;
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tHashMap0.removeAt(0);
      assertEquals(-1, tHashMap0.size());
      
      tHashMap1.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
  }

  //Test case number: 30
  /*
   * 28 covered goals:
   * 1 gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V: I39 Branch 63 IF_ACMPEQ L884 - false
   * 2 gnu.trove.map.hash.THashMap$EntryView$EntryIterator.objectAtIndex(I)Lgnu/trove/map/hash/THashMap$Entry;: root-Branch
   * 3 gnu.trove.map.hash.THashMap$EntryView$EntryIterator.<init>(Lgnu/trove/map/hash/THashMap$EntryView;Lgnu/trove/map/hash/THashMap;)V: root-Branch
   * 4 gnu.trove.map.hash.THashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: root-Branch
   * 5 gnu.trove.map.hash.THashMap.setUp(I)I: root-Branch
   * 6 gnu.trove.map.hash.THashMap.<init>(Lgnu/trove/map/hash/THashMap;)V: root-Branch
   * 7 gnu.trove.map.hash.THashMap.<init>(IF)V: root-Branch
   * 8 gnu.trove.map.hash.THashMap.entrySet()Ljava/util/Set;: root-Branch
   * 9 gnu.trove.map.hash.THashMap.<init>(I)V: root-Branch
   * 10 gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 61 IFLE L883 - true
   * 11 gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 61 IFLE L883 - false
   * 12 gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 62 IF_ACMPEQ L884 - false
   * 13 gnu.trove.map.hash.THashMap.writeExternal(Ljava/io/ObjectOutput;)V: I39 Branch 63 IF_ACMPEQ L884 - true
   * 14 gnu.trove.map.hash.THashMap.rehash(I)V: I51 Branch 43 IFLE L396 - true
   * 15 gnu.trove.map.hash.THashMap.rehash(I)V: I51 Branch 43 IFLE L396 - false
   * 16 gnu.trove.map.hash.THashMap.rehash(I)V: I62 Branch 44 IF_ACMPEQ L399 - true
   * 17 gnu.trove.map.hash.THashMap.rehash(I)V: I62 Branch 44 IF_ACMPEQ L399 - false
   * 18 gnu.trove.map.hash.THashMap.rehash(I)V: I65 Branch 45 IF_ACMPNE L399 - true
   * 19 gnu.trove.map.hash.THashMap.rehash(I)V: I76 Branch 46 IFGE L402 - true
   * 20 gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I11 Branch 24 IFGE L171 - true
   * 21 gnu.trove.map.hash.THashMap.doPut(Ljava/lang/Object;I)Ljava/lang/Object;: I40 Branch 25 IFEQ L177 - false
   * 22 gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V: I15 Branch 60 IFEQ L553 - true
   * 23 gnu.trove.map.hash.THashMap.putAll(Ljava/util/Map;)V: I15 Branch 60 IFEQ L553 - false
   * 24 gnu.trove.map.hash.THashMap$Entry.getKey()Ljava/lang/Object;: root-Branch
   * 25 gnu.trove.map.hash.THashMap$Entry.getValue()Ljava/lang/Object;: root-Branch
   * 26 gnu.trove.map.hash.THashMap$Entry.<init>(Lgnu/trove/map/hash/THashMap;Ljava/lang/Object;Ljava/lang/Object;I)V: root-Branch
   * 27 gnu.trove.map.hash.THashMap$EntryView.iterator()Ljava/util/Iterator;: root-Branch
   * 28 gnu.trove.map.hash.THashMap$EntryView.<init>(Lgnu/trove/map/hash/THashMap;)V: root-Branch
   */

  @Test
  public void test30()  throws Throwable  {
      THashMap<Integer, String> tHashMap0 = new THashMap<Integer, String>(0, 0);
      tHashMap0.put((Integer) 0, "`XOe9l|xLU8g");
      THashMap<Integer, Object> tHashMap1 = new THashMap<Integer, Object>(tHashMap0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tHashMap1.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(7, tHashMap0.capacity());
      assertEquals("{0=`XOe9l|xLU8g}", tHashMap1.toString());
  }
}
