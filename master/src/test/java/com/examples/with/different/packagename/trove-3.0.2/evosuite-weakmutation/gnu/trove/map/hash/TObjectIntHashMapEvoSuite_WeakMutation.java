/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TIntCollection;
import gnu.trove.function.TIntFunction;
import gnu.trove.map.TObjectIntMap;
import gnu.trove.map.custom_hash.TObjectIntCustomHashMap;
import gnu.trove.map.hash.TObjectIntHashMap;
import gnu.trove.procedure.TIntProcedure;
import gnu.trove.procedure.TObjectIntProcedure;
import gnu.trove.strategy.HashingStrategy;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectIntHashMapEvoSuite_WeakMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 269 covered goals:
   * 1 Weak Mutation 0: gnu.trove.map.hash.TObjectIntHashMap$1.execute(Ljava/lang/Object;I)Z:63 - DeleteField: this$0Lgnu/trove/map/hash/TObjectIntHashMap;
   * 2 Weak Mutation 1: gnu.trove.map.hash.TObjectIntHashMap$1.execute(Ljava/lang/Object;I)Z:63 - InsertUnaryOp Negation of value
   * 3 Weak Mutation 2: gnu.trove.map.hash.TObjectIntHashMap$1.execute(Ljava/lang/Object;I)Z:63 - InsertUnaryOp IINC 1 value
   * 4 Weak Mutation 3: gnu.trove.map.hash.TObjectIntHashMap$1.execute(Ljava/lang/Object;I)Z:63 - InsertUnaryOp IINC -1 value
   * 5 Weak Mutation 4: gnu.trove.map.hash.TObjectIntHashMap$1.execute(Ljava/lang/Object;I)Z:63 - DeleteStatement: put(Ljava/lang/Object;I)I
   * 6 Weak Mutation 5: gnu.trove.map.hash.TObjectIntHashMap$1.execute(Ljava/lang/Object;I)Z:64 - ReplaceConstant - 1 -> 0
   * 7 Weak Mutation 108: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:122 - InsertUnaryOp IINC -1 noEntryValue
   * 8 Weak Mutation 106: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:122 - InsertUnaryOp Negation of noEntryValue
   * 9 Weak Mutation 107: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:122 - InsertUnaryOp IINC 1 noEntryValue
   * 10 Weak Mutation 105: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:122 - ReplaceVariable noEntryValue -> initialCapacity
   * 11 Weak Mutation 110: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:124 - InsertUnaryOp +1
   * 12 Weak Mutation 111: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:124 - InsertUnaryOp -1
   * 13 Weak Mutation 109: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:124 - InsertUnaryOp Negation
   * 14 Weak Mutation 115: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:124 - ReplaceComparisonOperator == -> -2
   * 15 Weak Mutation 122: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:138 - ReplaceComparisonOperator == -> !=
   * 16 Weak Mutation 125: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:140 - DeleteField: _loadFactorF
   * 17 Weak Mutation 124: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:140 - InsertUnaryOp Negation
   * 18 Weak Mutation 123: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:140 - ReplaceVariable hashmap -> this
   * 19 Weak Mutation 127: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:141 - InsertUnaryOp Negation
   * 20 Weak Mutation 126: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:141 - ReplaceVariable hashmap -> this
   * 21 Weak Mutation 129: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:141 - InsertUnaryOp -1
   * 22 Weak Mutation 128: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:141 - InsertUnaryOp +1
   * 23 Weak Mutation 137: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:143 - ReplaceComparisonOperator == -> -2
   * 24 Weak Mutation 131: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:143 - InsertUnaryOp Negation
   * 25 Weak Mutation 133: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:143 - InsertUnaryOp -1
   * 26 Weak Mutation 132: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:143 - InsertUnaryOp +1
   * 27 Weak Mutation 152: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - ReplaceArithmeticOperator / -> +
   * 28 Weak Mutation 153: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - ReplaceArithmeticOperator / -> %
   * 29 Weak Mutation 154: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - ReplaceArithmeticOperator / -> *
   * 30 Weak Mutation 155: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - DeleteStatement: ceil(D)D
   * 31 Weak Mutation 156: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - DeleteStatement: setUp(I)I
   * 32 Weak Mutation 144: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - ReplaceConstant - 10.0 -> 0.0
   * 33 Weak Mutation 145: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - ReplaceConstant - 10.0 -> 1.0
   * 34 Weak Mutation 146: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - ReplaceConstant - 10.0 -> -1.0
   * 35 Weak Mutation 147: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - ReplaceConstant - 10.0 -> 9.0
   * 36 Weak Mutation 148: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - ReplaceConstant - 10.0 -> 11.0
   * 37 Weak Mutation 149: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - InsertUnaryOp Negation
   * 38 Weak Mutation 150: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - DeleteField: _loadFactorF
   * 39 Weak Mutation 151: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - ReplaceArithmeticOperator / -> -
   * 40 Weak Mutation 157: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:148 - DeleteStatement: putAll(Lgnu/trove/map/TObjectIntMap;)V
   * 41 Weak Mutation 158: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:162 - InsertUnaryOp Negation of initialCapacity
   * 42 Weak Mutation 159: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:162 - InsertUnaryOp IINC 1 initialCapacity
   * 43 Weak Mutation 160: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:162 - InsertUnaryOp IINC -1 initialCapacity
   * 44 Weak Mutation 163: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:163 - InsertUnaryOp IINC 1 capacity
   * 45 Weak Mutation 162: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:163 - InsertUnaryOp Negation of capacity
   * 46 Weak Mutation 161: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:163 - ReplaceVariable capacity -> initialCapacity
   * 47 Weak Mutation 164: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:163 - InsertUnaryOp IINC -1 capacity
   * 48 Weak Mutation 168: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:164 - InsertUnaryOp IINC -1 capacity
   * 49 Weak Mutation 167: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:164 - InsertUnaryOp IINC 1 capacity
   * 50 Weak Mutation 166: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:164 - InsertUnaryOp Negation of capacity
   * 51 Weak Mutation 165: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:164 - ReplaceVariable capacity -> initialCapacity
   * 52 Weak Mutation 254: gnu.trove.map.hash.TObjectIntHashMap.getNoEntryValue()I:203 - InsertUnaryOp -1
   * 53 Weak Mutation 252: gnu.trove.map.hash.TObjectIntHashMap.getNoEntryValue()I:203 - InsertUnaryOp Negation
   * 54 Weak Mutation 253: gnu.trove.map.hash.TObjectIntHashMap.getNoEntryValue()I:203 - InsertUnaryOp +1
   * 55 Weak Mutation 315: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:238 - ReplaceVariable key -> FREE
   * 56 Weak Mutation 317: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:238 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 57 Weak Mutation 316: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:238 - ReplaceVariable key -> REMOVED
   * 58 Weak Mutation 319: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:239 - InsertUnaryOp Negation of value
   * 59 Weak Mutation 324: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:239 - InsertUnaryOp IINC 1 index
   * 60 Weak Mutation 325: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:239 - InsertUnaryOp IINC -1 index
   * 61 Weak Mutation 323: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:239 - InsertUnaryOp Negation of index
   * 62 Weak Mutation 320: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:239 - InsertUnaryOp IINC 1 value
   * 63 Weak Mutation 321: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:239 - InsertUnaryOp IINC -1 value
   * 64 Weak Mutation 326: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:245 - ReplaceVariable key -> FREE
   * 65 Weak Mutation 327: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:245 - ReplaceVariable key -> REMOVED
   * 66 Weak Mutation 328: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:245 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 67 Weak Mutation 334: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:246 - ReplaceComparisonOperator >= -> >
   * 68 Weak Mutation 332: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:246 - InsertUnaryOp IINC -1 index
   * 69 Weak Mutation 330: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:246 - InsertUnaryOp Negation of index
   * 70 Weak Mutation 331: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:246 - InsertUnaryOp IINC 1 index
   * 71 Weak Mutation 351: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:248 - InsertUnaryOp Negation of index
   * 72 Weak Mutation 349: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:248 - InsertUnaryOp IINC -1 value
   * 73 Weak Mutation 348: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:248 - InsertUnaryOp IINC 1 value
   * 74 Weak Mutation 347: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:248 - InsertUnaryOp Negation of value
   * 75 Weak Mutation 352: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:248 - InsertUnaryOp IINC 1 index
   * 76 Weak Mutation 353: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:248 - InsertUnaryOp IINC -1 index
   * 77 Weak Mutation 356: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:253 - InsertUnaryOp -1
   * 78 Weak Mutation 354: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:253 - InsertUnaryOp Negation
   * 79 Weak Mutation 355: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:253 - InsertUnaryOp +1
   * 80 Weak Mutation 358: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:254 - ReplaceConstant - 1 -> 0
   * 81 Weak Mutation 361: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:255 - InsertUnaryOp Negation of index
   * 82 Weak Mutation 363: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:255 - ReplaceComparisonOperator >= -> >
   * 83 Weak Mutation 380: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - DeleteField: _values[I
   * 84 Weak Mutation 383: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - InsertUnaryOp Negation of index
   * 85 Weak Mutation 385: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - InsertUnaryOp IINC -1 index
   * 86 Weak Mutation 384: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - InsertUnaryOp IINC 1 index
   * 87 Weak Mutation 390: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - InsertUnaryOp IINC -1 value
   * 88 Weak Mutation 389: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - InsertUnaryOp IINC 1 value
   * 89 Weak Mutation 388: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - InsertUnaryOp Negation of value
   * 90 Weak Mutation 392: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:263 - ReplaceComparisonOperator == -> !=
   * 91 Weak Mutation 391: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:263 - InsertUnaryOp Negation of isNewMapping
   * 92 Weak Mutation 395: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:264 - DeleteStatement: postInsertHook(Z)V
   * 93 Weak Mutation 394: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:264 - DeleteField: consumeFreeSlotZ
   * 94 Weak Mutation 393: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:264 - InsertUnaryOp Negation
   * 95 Weak Mutation 398: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:266 - InsertUnaryOp Negation of previous
   * 96 Weak Mutation 447: gnu.trove.map.hash.TObjectIntHashMap.putAll(Lgnu/trove/map/TObjectIntMap;)V:308 - DeleteField: PUT_ALL_PROCLgnu/trove/procedure/TObjectIntProcedure;
   * 97 Weak Mutation 448: gnu.trove.map.hash.TObjectIntHashMap.putAll(Lgnu/trove/map/TObjectIntMap;)V:308 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z
   * 98 Weak Mutation 806: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:504 - DeleteField: _set[Ljava/lang/Object;
   * 99 Weak Mutation 807: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:505 - DeleteField: _values[I
   * 100 Weak Mutation 813: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:506 - ReplaceComparisonOperator <= -> <
   * 101 Weak Mutation 814: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:506 - ReplaceComparisonOperator <= -> -1
   * 102 Weak Mutation 809: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:506 - InsertUnaryOp Negation of i
   * 103 Weak Mutation 810: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:506 - InsertUnaryOp IINC 1 i
   * 104 Weak Mutation 811: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:506 - InsertUnaryOp IINC -1 i
   * 105 Weak Mutation 821: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - ReplaceComparisonOperator == -> !=
   * 106 Weak Mutation 820: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - DeleteField: FREELjava/lang/Object;
   * 107 Weak Mutation 823: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 108 Weak Mutation 817: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 109 Weak Mutation 816: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 110 Weak Mutation 819: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - ReplaceVariable FREE -> REMOVED
   * 111 Weak Mutation 818: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 112 Weak Mutation 828: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - ReplaceComparisonOperator == -> !=
   * 113 Weak Mutation 831: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 114 Weak Mutation 830: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 115 Weak Mutation 825: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 116 Weak Mutation 824: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 117 Weak Mutation 827: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - DeleteField: REMOVEDLjava/lang/Object;
   * 118 Weak Mutation 826: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - ReplaceVariable REMOVED -> FREE
   * 119 Weak Mutation 834: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 120 Weak Mutation 835: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 121 Weak Mutation 832: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 122 Weak Mutation 833: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 123 Weak Mutation 836: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - DeleteStatement: execute(Ljava/lang/Object;I)Z
   * 124 Weak Mutation 837: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - ReplaceComparisonOperator != -> ==
   * 125 Weak Mutation 839: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:513 - ReplaceConstant - 1 -> 0
   * 126 gnu.trove.map.hash.TObjectIntHashMap$1.<init>(Lgnu/trove/map/hash/TObjectIntHashMap;)V: root-Branch
   * 127 gnu.trove.map.hash.TObjectIntHashMap$1.execute(Ljava/lang/Object;I)Z: root-Branch
   * 128 gnu.trove.map.hash.TObjectIntHashMap.putAll(Lgnu/trove/map/TObjectIntMap;)V: root-Branch
   * 129 gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I: root-Branch
   * 130 gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I: root-Branch
   * 131 gnu.trove.map.hash.TObjectIntHashMap.getNoEntryValue()I: root-Branch
   * 132 gnu.trove.map.hash.TObjectIntHashMap.<init>()V: root-Branch
   * 133 gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V: I23 Branch 8 IFEQ L124 - true
   * 134 gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V: I13 Branch 9 IFEQ L138 - false
   * 135 gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V: I35 Branch 10 IFEQ L143 - true
   * 136 gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I: I9 Branch 20 IFGE L246 - true
   * 137 gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I: I12 Branch 21 IFGE L255 - true
   * 138 gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I: I41 Branch 22 IFEQ L263 - false
   * 139 gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I18 Branch 47 IFLE L506 - true
   * 140 gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I18 Branch 47 IFLE L506 - false
   * 141 gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - true
   * 142 gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - false
   * 143 gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I30 Branch 49 IF_ACMPEQ L507 - false
   * 144 gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I39 Branch 50 IFNE L507 - true
   * 145 Weak Mutation 0: gnu.trove.map.hash.TObjectIntHashMap$1.execute(Ljava/lang/Object;I)Z:63 - DeleteField: this$0Lgnu/trove/map/hash/TObjectIntHashMap;
   * 146 Weak Mutation 1: gnu.trove.map.hash.TObjectIntHashMap$1.execute(Ljava/lang/Object;I)Z:63 - InsertUnaryOp Negation of value
   * 147 Weak Mutation 2: gnu.trove.map.hash.TObjectIntHashMap$1.execute(Ljava/lang/Object;I)Z:63 - InsertUnaryOp IINC 1 value
   * 148 Weak Mutation 3: gnu.trove.map.hash.TObjectIntHashMap$1.execute(Ljava/lang/Object;I)Z:63 - InsertUnaryOp IINC -1 value
   * 149 Weak Mutation 4: gnu.trove.map.hash.TObjectIntHashMap$1.execute(Ljava/lang/Object;I)Z:63 - DeleteStatement: put(Ljava/lang/Object;I)I
   * 150 Weak Mutation 5: gnu.trove.map.hash.TObjectIntHashMap$1.execute(Ljava/lang/Object;I)Z:64 - ReplaceConstant - 1 -> 0
   * 151 Weak Mutation 110: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:124 - InsertUnaryOp +1
   * 152 Weak Mutation 111: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:124 - InsertUnaryOp -1
   * 153 Weak Mutation 108: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:122 - InsertUnaryOp IINC -1 noEntryValue
   * 154 Weak Mutation 109: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:124 - InsertUnaryOp Negation
   * 155 Weak Mutation 106: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:122 - InsertUnaryOp Negation of noEntryValue
   * 156 Weak Mutation 107: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:122 - InsertUnaryOp IINC 1 noEntryValue
   * 157 Weak Mutation 105: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:122 - ReplaceVariable noEntryValue -> initialCapacity
   * 158 Weak Mutation 115: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:124 - ReplaceComparisonOperator == -> -2
   * 159 Weak Mutation 127: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:141 - InsertUnaryOp Negation
   * 160 Weak Mutation 126: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:141 - ReplaceVariable hashmap -> this
   * 161 Weak Mutation 125: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:140 - DeleteField: _loadFactorF
   * 162 Weak Mutation 124: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:140 - InsertUnaryOp Negation
   * 163 Weak Mutation 123: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:140 - ReplaceVariable hashmap -> this
   * 164 Weak Mutation 122: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:138 - ReplaceComparisonOperator == -> !=
   * 165 Weak Mutation 137: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:143 - ReplaceComparisonOperator == -> -2
   * 166 Weak Mutation 129: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:141 - InsertUnaryOp -1
   * 167 Weak Mutation 128: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:141 - InsertUnaryOp +1
   * 168 Weak Mutation 131: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:143 - InsertUnaryOp Negation
   * 169 Weak Mutation 133: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:143 - InsertUnaryOp -1
   * 170 Weak Mutation 132: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:143 - InsertUnaryOp +1
   * 171 Weak Mutation 152: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - ReplaceArithmeticOperator / -> +
   * 172 Weak Mutation 153: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - ReplaceArithmeticOperator / -> %
   * 173 Weak Mutation 154: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - ReplaceArithmeticOperator / -> *
   * 174 Weak Mutation 155: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - DeleteStatement: ceil(D)D
   * 175 Weak Mutation 156: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - DeleteStatement: setUp(I)I
   * 176 Weak Mutation 157: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:148 - DeleteStatement: putAll(Lgnu/trove/map/TObjectIntMap;)V
   * 177 Weak Mutation 158: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:162 - InsertUnaryOp Negation of initialCapacity
   * 178 Weak Mutation 159: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:162 - InsertUnaryOp IINC 1 initialCapacity
   * 179 Weak Mutation 144: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - ReplaceConstant - 10.0 -> 0.0
   * 180 Weak Mutation 145: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - ReplaceConstant - 10.0 -> 1.0
   * 181 Weak Mutation 146: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - ReplaceConstant - 10.0 -> -1.0
   * 182 Weak Mutation 147: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - ReplaceConstant - 10.0 -> 9.0
   * 183 Weak Mutation 148: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - ReplaceConstant - 10.0 -> 11.0
   * 184 Weak Mutation 149: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - InsertUnaryOp Negation
   * 185 Weak Mutation 150: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - DeleteField: _loadFactorF
   * 186 Weak Mutation 151: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:146 - ReplaceArithmeticOperator / -> -
   * 187 Weak Mutation 168: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:164 - InsertUnaryOp IINC -1 capacity
   * 188 Weak Mutation 163: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:163 - InsertUnaryOp IINC 1 capacity
   * 189 Weak Mutation 162: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:163 - InsertUnaryOp Negation of capacity
   * 190 Weak Mutation 161: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:163 - ReplaceVariable capacity -> initialCapacity
   * 191 Weak Mutation 160: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:162 - InsertUnaryOp IINC -1 initialCapacity
   * 192 Weak Mutation 167: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:164 - InsertUnaryOp IINC 1 capacity
   * 193 Weak Mutation 166: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:164 - InsertUnaryOp Negation of capacity
   * 194 Weak Mutation 165: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:164 - ReplaceVariable capacity -> initialCapacity
   * 195 Weak Mutation 164: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:163 - InsertUnaryOp IINC -1 capacity
   * 196 Weak Mutation 254: gnu.trove.map.hash.TObjectIntHashMap.getNoEntryValue()I:203 - InsertUnaryOp -1
   * 197 Weak Mutation 252: gnu.trove.map.hash.TObjectIntHashMap.getNoEntryValue()I:203 - InsertUnaryOp Negation
   * 198 Weak Mutation 253: gnu.trove.map.hash.TObjectIntHashMap.getNoEntryValue()I:203 - InsertUnaryOp +1
   * 199 Weak Mutation 315: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:238 - ReplaceVariable key -> FREE
   * 200 Weak Mutation 317: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:238 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 201 Weak Mutation 316: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:238 - ReplaceVariable key -> REMOVED
   * 202 Weak Mutation 319: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:239 - InsertUnaryOp Negation of value
   * 203 Weak Mutation 351: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:248 - InsertUnaryOp Negation of index
   * 204 Weak Mutation 349: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:248 - InsertUnaryOp IINC -1 value
   * 205 Weak Mutation 348: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:248 - InsertUnaryOp IINC 1 value
   * 206 Weak Mutation 347: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:248 - InsertUnaryOp Negation of value
   * 207 Weak Mutation 326: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:245 - ReplaceVariable key -> FREE
   * 208 Weak Mutation 327: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:245 - ReplaceVariable key -> REMOVED
   * 209 Weak Mutation 324: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:239 - InsertUnaryOp IINC 1 index
   * 210 Weak Mutation 325: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:239 - InsertUnaryOp IINC -1 index
   * 211 Weak Mutation 323: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:239 - InsertUnaryOp Negation of index
   * 212 Weak Mutation 320: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:239 - InsertUnaryOp IINC 1 value
   * 213 Weak Mutation 321: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:239 - InsertUnaryOp IINC -1 value
   * 214 Weak Mutation 334: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:246 - ReplaceComparisonOperator >= -> >
   * 215 Weak Mutation 332: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:246 - InsertUnaryOp IINC -1 index
   * 216 Weak Mutation 330: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:246 - InsertUnaryOp Negation of index
   * 217 Weak Mutation 331: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:246 - InsertUnaryOp IINC 1 index
   * 218 Weak Mutation 328: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:245 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 219 Weak Mutation 380: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - DeleteField: _values[I
   * 220 Weak Mutation 383: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - InsertUnaryOp Negation of index
   * 221 Weak Mutation 356: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:253 - InsertUnaryOp -1
   * 222 Weak Mutation 358: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:254 - ReplaceConstant - 1 -> 0
   * 223 Weak Mutation 352: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:248 - InsertUnaryOp IINC 1 index
   * 224 Weak Mutation 353: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:248 - InsertUnaryOp IINC -1 index
   * 225 Weak Mutation 354: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:253 - InsertUnaryOp Negation
   * 226 Weak Mutation 355: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:253 - InsertUnaryOp +1
   * 227 Weak Mutation 361: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:255 - InsertUnaryOp Negation of index
   * 228 Weak Mutation 363: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:255 - ReplaceComparisonOperator >= -> >
   * 229 Weak Mutation 395: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:264 - DeleteStatement: postInsertHook(Z)V
   * 230 Weak Mutation 394: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:264 - DeleteField: consumeFreeSlotZ
   * 231 Weak Mutation 393: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:264 - InsertUnaryOp Negation
   * 232 Weak Mutation 392: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:263 - ReplaceComparisonOperator == -> !=
   * 233 Weak Mutation 398: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:266 - InsertUnaryOp Negation of previous
   * 234 Weak Mutation 385: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - InsertUnaryOp IINC -1 index
   * 235 Weak Mutation 384: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - InsertUnaryOp IINC 1 index
   * 236 Weak Mutation 391: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:263 - InsertUnaryOp Negation of isNewMapping
   * 237 Weak Mutation 390: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - InsertUnaryOp IINC -1 value
   * 238 Weak Mutation 389: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - InsertUnaryOp IINC 1 value
   * 239 Weak Mutation 388: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - InsertUnaryOp Negation of value
   * 240 Weak Mutation 447: gnu.trove.map.hash.TObjectIntHashMap.putAll(Lgnu/trove/map/TObjectIntMap;)V:308 - DeleteField: PUT_ALL_PROCLgnu/trove/procedure/TObjectIntProcedure;
   * 241 Weak Mutation 448: gnu.trove.map.hash.TObjectIntHashMap.putAll(Lgnu/trove/map/TObjectIntMap;)V:308 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z
   * 242 Weak Mutation 821: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - ReplaceComparisonOperator == -> !=
   * 243 Weak Mutation 820: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - DeleteField: FREELjava/lang/Object;
   * 244 Weak Mutation 823: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 245 Weak Mutation 817: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 246 Weak Mutation 816: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 247 Weak Mutation 819: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - ReplaceVariable FREE -> REMOVED
   * 248 Weak Mutation 818: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 249 Weak Mutation 828: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - ReplaceComparisonOperator == -> !=
   * 250 Weak Mutation 831: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 251 Weak Mutation 830: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 252 Weak Mutation 825: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 253 Weak Mutation 824: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 254 Weak Mutation 827: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - DeleteField: REMOVEDLjava/lang/Object;
   * 255 Weak Mutation 826: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - ReplaceVariable REMOVED -> FREE
   * 256 Weak Mutation 806: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:504 - DeleteField: _set[Ljava/lang/Object;
   * 257 Weak Mutation 807: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:505 - DeleteField: _values[I
   * 258 Weak Mutation 813: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:506 - ReplaceComparisonOperator <= -> <
   * 259 Weak Mutation 814: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:506 - ReplaceComparisonOperator <= -> -1
   * 260 Weak Mutation 809: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:506 - InsertUnaryOp Negation of i
   * 261 Weak Mutation 810: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:506 - InsertUnaryOp IINC 1 i
   * 262 Weak Mutation 811: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:506 - InsertUnaryOp IINC -1 i
   * 263 Weak Mutation 834: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 264 Weak Mutation 835: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 265 Weak Mutation 832: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 266 Weak Mutation 833: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 267 Weak Mutation 839: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:513 - ReplaceConstant - 1 -> 0
   * 268 Weak Mutation 836: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - DeleteStatement: execute(Ljava/lang/Object;I)Z
   * 269 Weak Mutation 837: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - ReplaceComparisonOperator != -> ==
   */

  @Test
  public void test0()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>();
      tObjectIntHashMap0.putIfAbsent((Integer) 0, 0);
      TObjectIntHashMap<Integer> tObjectIntHashMap1 = new TObjectIntHashMap<Integer>((TObjectIntMap<? extends Integer>) tObjectIntHashMap0);
      assertEquals(false, tObjectIntHashMap0.isEmpty());
      assertTrue(tObjectIntHashMap0.equals(tObjectIntHashMap1));
  }

  //Test case number: 1
  /*
   * 170 covered goals:
   * 1 Weak Mutation 169: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:174 - DeleteField: _set[Ljava/lang/Object;
   * 2 Weak Mutation 170: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:177 - DeleteField: _set[Ljava/lang/Object;
   * 3 Weak Mutation 171: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:178 - DeleteField: _values[I
   * 4 Weak Mutation 175: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:180 - InsertUnaryOp IINC -1 newCapacity
   * 5 Weak Mutation 174: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:180 - InsertUnaryOp IINC 1 newCapacity
   * 6 Weak Mutation 173: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:180 - InsertUnaryOp Negation of newCapacity
   * 7 Weak Mutation 172: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:180 - ReplaceVariable newCapacity -> oldCapacity
   * 8 Weak Mutation 178: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:181 - DeleteField: FREELjava/lang/Object;
   * 9 Weak Mutation 179: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:181 - DeleteStatement: fill([Ljava/lang/Object;Ljava/lang/Object;)V
   * 10 Weak Mutation 176: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:181 - DeleteField: _set[Ljava/lang/Object;
   * 11 Weak Mutation 177: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:181 - ReplaceVariable FREE -> REMOVED
   * 12 Weak Mutation 182: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:182 - InsertUnaryOp IINC 1 newCapacity
   * 13 Weak Mutation 183: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:182 - InsertUnaryOp IINC -1 newCapacity
   * 14 Weak Mutation 180: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:182 - ReplaceVariable newCapacity -> oldCapacity
   * 15 Weak Mutation 181: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:182 - InsertUnaryOp Negation of newCapacity
   * 16 Weak Mutation 186: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:183 - InsertUnaryOp +1
   * 17 Weak Mutation 187: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:183 - InsertUnaryOp -1
   * 18 Weak Mutation 184: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:183 - DeleteField: _values[I
   * 19 Weak Mutation 185: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:183 - InsertUnaryOp Negation
   * 20 Weak Mutation 189: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:183 - DeleteStatement: fill([II)V
   * 21 Weak Mutation 190: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - ReplaceVariable oldCapacity -> newCapacity
   * 22 Weak Mutation 191: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - InsertUnaryOp Negation of oldCapacity
   * 23 Weak Mutation 200: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - ReplaceVariable i -> oldCapacity
   * 24 Weak Mutation 203: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - ReplaceComparisonOperator <= -> -1
   * 25 Weak Mutation 202: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - ReplaceComparisonOperator <= -> <
   * 26 Weak Mutation 197: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - InsertUnaryOp IINC 1 i
   * 27 Weak Mutation 196: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - InsertUnaryOp Negation of i
   * 28 Weak Mutation 199: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - ReplaceVariable i -> newCapacity
   * 29 Weak Mutation 198: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - InsertUnaryOp IINC -1 i
   * 30 Weak Mutation 193: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - InsertUnaryOp IINC -1 oldCapacity
   * 31 Weak Mutation 192: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - InsertUnaryOp IINC 1 oldCapacity
   * 32 Weak Mutation 195: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - ReplaceVariable i -> oldCapacity
   * 33 Weak Mutation 194: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - ReplaceVariable i -> newCapacity
   * 34 Weak Mutation 205: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable i -> newCapacity
   * 35 Weak Mutation 204: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable oldKeys -> _set
   * 36 Weak Mutation 207: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - InsertUnaryOp Negation of i
   * 37 Weak Mutation 206: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable i -> oldCapacity
   * 38 Weak Mutation 220: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - DeleteField: REMOVEDLjava/lang/Object;
   * 39 Weak Mutation 221: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceComparisonOperator == -> !=
   * 40 Weak Mutation 216: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - InsertUnaryOp Negation of i
   * 41 Weak Mutation 217: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - InsertUnaryOp IINC 1 i
   * 42 Weak Mutation 218: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - InsertUnaryOp IINC -1 i
   * 43 Weak Mutation 219: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable REMOVED -> FREE
   * 44 Weak Mutation 212: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceComparisonOperator == -> !=
   * 45 Weak Mutation 213: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable oldKeys -> _set
   * 46 Weak Mutation 214: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable i -> newCapacity
   * 47 Weak Mutation 215: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable i -> oldCapacity
   * 48 Weak Mutation 208: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - InsertUnaryOp IINC 1 i
   * 49 Weak Mutation 209: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - InsertUnaryOp IINC -1 i
   * 50 Weak Mutation 210: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable FREE -> REMOVED
   * 51 Weak Mutation 211: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - DeleteField: FREELjava/lang/Object;
   * 52 Weak Mutation 222: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:187 - ReplaceVariable oldKeys -> _set
   * 53 Weak Mutation 223: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:187 - ReplaceVariable i -> newCapacity
   * 54 Weak Mutation 227: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:187 - InsertUnaryOp IINC -1 i
   * 55 Weak Mutation 226: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:187 - InsertUnaryOp IINC 1 i
   * 56 Weak Mutation 225: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:187 - InsertUnaryOp Negation of i
   * 57 Weak Mutation 224: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:187 - ReplaceVariable i -> oldCapacity
   * 58 Weak Mutation 230: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:188 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 59 Weak Mutation 229: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:188 - ReplaceVariable o -> REMOVED
   * 60 Weak Mutation 228: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:188 - ReplaceVariable o -> FREE
   * 61 Weak Mutation 237: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:189 - ReplaceComparisonOperator >= -> ==
   * 62 Weak Mutation 236: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:189 - InsertUnaryOp IINC -1 index
   * 63 Weak Mutation 235: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:189 - InsertUnaryOp IINC 1 index
   * 64 Weak Mutation 234: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:189 - InsertUnaryOp Negation of index
   * 65 Weak Mutation 233: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:189 - ReplaceVariable index -> i
   * 66 Weak Mutation 232: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:189 - ReplaceVariable index -> oldCapacity
   * 67 Weak Mutation 231: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:189 - ReplaceVariable index -> newCapacity
   * 68 Weak Mutation 333: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:246 - ReplaceComparisonOperator >= -> ==
   * 69 Weak Mutation 329: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:246 - ReplaceVariable index -> value
   * 70 Weak Mutation 350: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:248 - ReplaceVariable index -> value
   * 71 Weak Mutation 346: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:248 - ReplaceVariable value -> index
   * 72 Weak Mutation 359: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:255 - ReplaceVariable index -> previous
   * 73 Weak Mutation 360: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:255 - ReplaceVariable index -> value
   * 74 Weak Mutation 362: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:255 - ReplaceComparisonOperator >= -> ==
   * 75 Weak Mutation 381: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - ReplaceVariable index -> previous
   * 76 Weak Mutation 382: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - ReplaceVariable index -> value
   * 77 Weak Mutation 387: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - ReplaceVariable value -> previous
   * 78 Weak Mutation 386: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - ReplaceVariable value -> index
   * 79 Weak Mutation 397: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:266 - ReplaceVariable previous -> value
   * 80 Weak Mutation 396: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:266 - ReplaceVariable previous -> index
   * 81 gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - true
   * 82 gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - false
   * 83 gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - true
   * 84 gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - false
   * 85 gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V: I61 Branch 13 IF_ACMPEQ L186 - false
   * 86 gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V: I77 Branch 14 IFGE L189 - true
   * 87 Weak Mutation 102: gnu.trove.map.hash.TObjectIntHashMap.<init>(IF)V:107 - InsertUnaryOp +1
   * 88 Weak Mutation 103: gnu.trove.map.hash.TObjectIntHashMap.<init>(IF)V:107 - InsertUnaryOp -1
   * 89 Weak Mutation 101: gnu.trove.map.hash.TObjectIntHashMap.<init>(IF)V:107 - InsertUnaryOp Negation
   * 90 Weak Mutation 171: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:178 - DeleteField: _values[I
   * 91 Weak Mutation 170: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:177 - DeleteField: _set[Ljava/lang/Object;
   * 92 Weak Mutation 169: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:174 - DeleteField: _set[Ljava/lang/Object;
   * 93 Weak Mutation 175: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:180 - InsertUnaryOp IINC -1 newCapacity
   * 94 Weak Mutation 174: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:180 - InsertUnaryOp IINC 1 newCapacity
   * 95 Weak Mutation 173: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:180 - InsertUnaryOp Negation of newCapacity
   * 96 Weak Mutation 172: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:180 - ReplaceVariable newCapacity -> oldCapacity
   * 97 Weak Mutation 186: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:183 - InsertUnaryOp +1
   * 98 Weak Mutation 187: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:183 - InsertUnaryOp -1
   * 99 Weak Mutation 184: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:183 - DeleteField: _values[I
   * 100 Weak Mutation 185: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:183 - InsertUnaryOp Negation
   * 101 Weak Mutation 190: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - ReplaceVariable oldCapacity -> newCapacity
   * 102 Weak Mutation 191: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - InsertUnaryOp Negation of oldCapacity
   * 103 Weak Mutation 189: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:183 - DeleteStatement: fill([II)V
   * 104 Weak Mutation 178: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:181 - DeleteField: FREELjava/lang/Object;
   * 105 Weak Mutation 179: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:181 - DeleteStatement: fill([Ljava/lang/Object;Ljava/lang/Object;)V
   * 106 Weak Mutation 176: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:181 - DeleteField: _set[Ljava/lang/Object;
   * 107 Weak Mutation 177: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:181 - ReplaceVariable FREE -> REMOVED
   * 108 Weak Mutation 182: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:182 - InsertUnaryOp IINC 1 newCapacity
   * 109 Weak Mutation 183: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:182 - InsertUnaryOp IINC -1 newCapacity
   * 110 Weak Mutation 180: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:182 - ReplaceVariable newCapacity -> oldCapacity
   * 111 Weak Mutation 181: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:182 - InsertUnaryOp Negation of newCapacity
   * 112 Weak Mutation 205: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable i -> newCapacity
   * 113 Weak Mutation 204: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable oldKeys -> _set
   * 114 Weak Mutation 207: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - InsertUnaryOp Negation of i
   * 115 Weak Mutation 206: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable i -> oldCapacity
   * 116 Weak Mutation 200: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - ReplaceVariable i -> oldCapacity
   * 117 Weak Mutation 203: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - ReplaceComparisonOperator <= -> -1
   * 118 Weak Mutation 202: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - ReplaceComparisonOperator <= -> <
   * 119 Weak Mutation 197: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - InsertUnaryOp IINC 1 i
   * 120 Weak Mutation 196: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - InsertUnaryOp Negation of i
   * 121 Weak Mutation 199: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - ReplaceVariable i -> newCapacity
   * 122 Weak Mutation 198: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - InsertUnaryOp IINC -1 i
   * 123 Weak Mutation 193: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - InsertUnaryOp IINC -1 oldCapacity
   * 124 Weak Mutation 192: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - InsertUnaryOp IINC 1 oldCapacity
   * 125 Weak Mutation 195: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - ReplaceVariable i -> oldCapacity
   * 126 Weak Mutation 194: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - ReplaceVariable i -> newCapacity
   * 127 Weak Mutation 220: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - DeleteField: REMOVEDLjava/lang/Object;
   * 128 Weak Mutation 221: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceComparisonOperator == -> !=
   * 129 Weak Mutation 222: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:187 - ReplaceVariable oldKeys -> _set
   * 130 Weak Mutation 223: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:187 - ReplaceVariable i -> newCapacity
   * 131 Weak Mutation 216: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - InsertUnaryOp Negation of i
   * 132 Weak Mutation 217: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - InsertUnaryOp IINC 1 i
   * 133 Weak Mutation 218: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - InsertUnaryOp IINC -1 i
   * 134 Weak Mutation 219: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable REMOVED -> FREE
   * 135 Weak Mutation 212: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceComparisonOperator == -> !=
   * 136 Weak Mutation 213: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable oldKeys -> _set
   * 137 Weak Mutation 214: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable i -> newCapacity
   * 138 Weak Mutation 215: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable i -> oldCapacity
   * 139 Weak Mutation 208: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - InsertUnaryOp IINC 1 i
   * 140 Weak Mutation 209: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - InsertUnaryOp IINC -1 i
   * 141 Weak Mutation 210: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable FREE -> REMOVED
   * 142 Weak Mutation 211: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - DeleteField: FREELjava/lang/Object;
   * 143 Weak Mutation 237: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:189 - ReplaceComparisonOperator >= -> ==
   * 144 Weak Mutation 236: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:189 - InsertUnaryOp IINC -1 index
   * 145 Weak Mutation 235: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:189 - InsertUnaryOp IINC 1 index
   * 146 Weak Mutation 234: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:189 - InsertUnaryOp Negation of index
   * 147 Weak Mutation 233: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:189 - ReplaceVariable index -> i
   * 148 Weak Mutation 232: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:189 - ReplaceVariable index -> oldCapacity
   * 149 Weak Mutation 231: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:189 - ReplaceVariable index -> newCapacity
   * 150 Weak Mutation 230: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:188 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 151 Weak Mutation 229: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:188 - ReplaceVariable o -> REMOVED
   * 152 Weak Mutation 228: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:188 - ReplaceVariable o -> FREE
   * 153 Weak Mutation 227: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:187 - InsertUnaryOp IINC -1 i
   * 154 Weak Mutation 226: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:187 - InsertUnaryOp IINC 1 i
   * 155 Weak Mutation 225: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:187 - InsertUnaryOp Negation of i
   * 156 Weak Mutation 224: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:187 - ReplaceVariable i -> oldCapacity
   * 157 Weak Mutation 350: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:248 - ReplaceVariable index -> value
   * 158 Weak Mutation 346: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:248 - ReplaceVariable value -> index
   * 159 Weak Mutation 333: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:246 - ReplaceComparisonOperator >= -> ==
   * 160 Weak Mutation 329: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:246 - ReplaceVariable index -> value
   * 161 Weak Mutation 381: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - ReplaceVariable index -> previous
   * 162 Weak Mutation 382: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - ReplaceVariable index -> value
   * 163 Weak Mutation 359: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:255 - ReplaceVariable index -> previous
   * 164 Weak Mutation 360: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:255 - ReplaceVariable index -> value
   * 165 Weak Mutation 362: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:255 - ReplaceComparisonOperator >= -> ==
   * 166 Weak Mutation 397: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:266 - ReplaceVariable previous -> value
   * 167 Weak Mutation 396: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:266 - ReplaceVariable previous -> index
   * 168 Weak Mutation 387: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - ReplaceVariable value -> previous
   * 169 Weak Mutation 386: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - ReplaceVariable value -> index
   * 170 gnu.trove.map.hash.TObjectIntHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer((-1644));
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>(Integer.MAX_VALUE, (-1644));
      int int0 = tObjectIntHashMap0.putIfAbsent("Equal objects must have equal hashcodes. During rehashing, Trove discovered that the following two objects claim to be equal (as in java.lang.Object.equals()) but their hashCodes (or those calculated by your TObjectHashingStrategy) are not equal.This violates the general contract of java.lang.Object.hashCode().  See bullet point two in that method's documentation. object #1 =", (int) integer0);
      assertEquals(7, tObjectIntHashMap0.capacity());
      assertEquals(0, int0);
  }

  //Test case number: 2
  /*
   * 67 covered goals:
   * 1 Weak Mutation 238: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:189 - ReplaceComparisonOperator >= -> >
   * 2 Weak Mutation 171: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:178 - DeleteField: _values[I
   * 3 Weak Mutation 170: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:177 - DeleteField: _set[Ljava/lang/Object;
   * 4 Weak Mutation 169: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:174 - DeleteField: _set[Ljava/lang/Object;
   * 5 Weak Mutation 175: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:180 - InsertUnaryOp IINC -1 newCapacity
   * 6 Weak Mutation 174: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:180 - InsertUnaryOp IINC 1 newCapacity
   * 7 Weak Mutation 173: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:180 - InsertUnaryOp Negation of newCapacity
   * 8 Weak Mutation 172: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:180 - ReplaceVariable newCapacity -> oldCapacity
   * 9 Weak Mutation 186: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:183 - InsertUnaryOp +1
   * 10 Weak Mutation 187: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:183 - InsertUnaryOp -1
   * 11 Weak Mutation 184: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:183 - DeleteField: _values[I
   * 12 Weak Mutation 185: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:183 - InsertUnaryOp Negation
   * 13 Weak Mutation 190: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - ReplaceVariable oldCapacity -> newCapacity
   * 14 Weak Mutation 191: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - InsertUnaryOp Negation of oldCapacity
   * 15 Weak Mutation 189: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:183 - DeleteStatement: fill([II)V
   * 16 Weak Mutation 178: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:181 - DeleteField: FREELjava/lang/Object;
   * 17 Weak Mutation 179: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:181 - DeleteStatement: fill([Ljava/lang/Object;Ljava/lang/Object;)V
   * 18 Weak Mutation 176: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:181 - DeleteField: _set[Ljava/lang/Object;
   * 19 Weak Mutation 177: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:181 - ReplaceVariable FREE -> REMOVED
   * 20 Weak Mutation 182: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:182 - InsertUnaryOp IINC 1 newCapacity
   * 21 Weak Mutation 183: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:182 - InsertUnaryOp IINC -1 newCapacity
   * 22 Weak Mutation 180: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:182 - ReplaceVariable newCapacity -> oldCapacity
   * 23 Weak Mutation 181: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:182 - InsertUnaryOp Negation of newCapacity
   * 24 Weak Mutation 205: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable i -> newCapacity
   * 25 Weak Mutation 204: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable oldKeys -> _set
   * 26 Weak Mutation 207: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - InsertUnaryOp Negation of i
   * 27 Weak Mutation 206: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable i -> oldCapacity
   * 28 Weak Mutation 200: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - ReplaceVariable i -> oldCapacity
   * 29 Weak Mutation 203: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - ReplaceComparisonOperator <= -> -1
   * 30 Weak Mutation 202: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - ReplaceComparisonOperator <= -> <
   * 31 Weak Mutation 197: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - InsertUnaryOp IINC 1 i
   * 32 Weak Mutation 196: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - InsertUnaryOp Negation of i
   * 33 Weak Mutation 199: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - ReplaceVariable i -> newCapacity
   * 34 Weak Mutation 198: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - InsertUnaryOp IINC -1 i
   * 35 Weak Mutation 193: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - InsertUnaryOp IINC -1 oldCapacity
   * 36 Weak Mutation 192: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - InsertUnaryOp IINC 1 oldCapacity
   * 37 Weak Mutation 195: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - ReplaceVariable i -> oldCapacity
   * 38 Weak Mutation 194: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:185 - ReplaceVariable i -> newCapacity
   * 39 Weak Mutation 220: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - DeleteField: REMOVEDLjava/lang/Object;
   * 40 Weak Mutation 221: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceComparisonOperator == -> !=
   * 41 Weak Mutation 222: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:187 - ReplaceVariable oldKeys -> _set
   * 42 Weak Mutation 223: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:187 - ReplaceVariable i -> newCapacity
   * 43 Weak Mutation 216: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - InsertUnaryOp Negation of i
   * 44 Weak Mutation 217: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - InsertUnaryOp IINC 1 i
   * 45 Weak Mutation 218: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - InsertUnaryOp IINC -1 i
   * 46 Weak Mutation 219: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable REMOVED -> FREE
   * 47 Weak Mutation 212: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceComparisonOperator == -> !=
   * 48 Weak Mutation 213: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable oldKeys -> _set
   * 49 Weak Mutation 214: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable i -> newCapacity
   * 50 Weak Mutation 215: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable i -> oldCapacity
   * 51 Weak Mutation 208: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - InsertUnaryOp IINC 1 i
   * 52 Weak Mutation 209: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - InsertUnaryOp IINC -1 i
   * 53 Weak Mutation 210: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - ReplaceVariable FREE -> REMOVED
   * 54 Weak Mutation 211: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:186 - DeleteField: FREELjava/lang/Object;
   * 55 Weak Mutation 236: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:189 - InsertUnaryOp IINC -1 index
   * 56 Weak Mutation 235: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:189 - InsertUnaryOp IINC 1 index
   * 57 Weak Mutation 234: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:189 - InsertUnaryOp Negation of index
   * 58 Weak Mutation 232: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:189 - ReplaceVariable index -> oldCapacity
   * 59 Weak Mutation 231: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:189 - ReplaceVariable index -> newCapacity
   * 60 Weak Mutation 230: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:188 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 61 Weak Mutation 229: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:188 - ReplaceVariable o -> REMOVED
   * 62 Weak Mutation 228: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:188 - ReplaceVariable o -> FREE
   * 63 Weak Mutation 227: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:187 - InsertUnaryOp IINC -1 i
   * 64 Weak Mutation 226: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:187 - InsertUnaryOp IINC 1 i
   * 65 Weak Mutation 225: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:187 - InsertUnaryOp Negation of i
   * 66 Weak Mutation 224: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:187 - ReplaceVariable i -> oldCapacity
   * 67 Weak Mutation 238: gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V:189 - ReplaceComparisonOperator >= -> >
   */

  @Test
  public void test2()  throws Throwable  {
      TObjectIntHashMap<Object> tObjectIntHashMap0 = new TObjectIntHashMap<Object>(0, (-1879.1013F));
      int int0 = tObjectIntHashMap0.putIfAbsent((Object) "", 0);
      assertEquals(1, tObjectIntHashMap0.size());
      assertEquals(0, int0);
  }

  //Test case number: 3
  /*
   * 11 covered goals:
   * 1 Weak Mutation 255: gnu.trove.map.hash.TObjectIntHashMap.getNoEntryValue()I:203 - DeleteField: no_entry_valueI
   * 2 Weak Mutation 119: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:125 - InsertUnaryOp -1
   * 3 Weak Mutation 118: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:125 - InsertUnaryOp +1
   * 4 Weak Mutation 117: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:125 - InsertUnaryOp Negation
   * 5 Weak Mutation 116: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:125 - DeleteField: _values[I
   * 6 Weak Mutation 113: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:124 - ReplaceComparisonOperator == -> >=
   * 7 Weak Mutation 112: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:124 - DeleteField: no_entry_valueI
   * 8 Weak Mutation 121: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:125 - DeleteStatement: fill([II)V
   * 9 Weak Mutation 120: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:125 - DeleteField: no_entry_valueI
   * 10 Weak Mutation 255: gnu.trove.map.hash.TObjectIntHashMap.getNoEntryValue()I:203 - DeleteField: no_entry_valueI
   * 11 gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V: I23 Branch 8 IFEQ L124 - false
   */

  @Test
  public void test3()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>(0, 0, 1);
      int int0 = tObjectIntHashMap0.getNoEntryValue();
      assertEquals(1, int0);
  }

  //Test case number: 4
  /*
   * 50 covered goals:
   * 1 Weak Mutation 258: gnu.trove.map.hash.TObjectIntHashMap.containsKey(Ljava/lang/Object;)Z:209 - DeleteStatement: contains(Ljava/lang/Object;)Z
   * 2 Weak Mutation 256: gnu.trove.map.hash.TObjectIntHashMap.containsKey(Ljava/lang/Object;)Z:209 - ReplaceVariable key -> FREE
   * 3 Weak Mutation 257: gnu.trove.map.hash.TObjectIntHashMap.containsKey(Ljava/lang/Object;)Z:209 - ReplaceVariable key -> REMOVED
   * 4 Weak Mutation 966: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:610 - ReplaceConstant - 0 -> 1
   * 5 Weak Mutation 967: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:611 - DeleteField: _set[Ljava/lang/Object;
   * 6 Weak Mutation 968: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:612 - DeleteField: _values[I
   * 7 Weak Mutation 976: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:613 - ReplaceComparisonOperator <= -> -1
   * 8 Weak Mutation 971: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:613 - InsertUnaryOp IINC 1 i
   * 9 Weak Mutation 970: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:613 - InsertUnaryOp Negation of i
   * 10 Weak Mutation 969: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:613 - ReplaceVariable i -> hashcode
   * 11 Weak Mutation 975: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:613 - ReplaceComparisonOperator <= -> <
   * 12 Weak Mutation 973: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:613 - ReplaceVariable i -> hashcode
   * 13 Weak Mutation 972: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:613 - InsertUnaryOp IINC -1 i
   * 14 Weak Mutation 984: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - ReplaceComparisonOperator == -> !=
   * 15 Weak Mutation 978: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - ReplaceVariable i -> hashcode
   * 16 Weak Mutation 979: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - InsertUnaryOp Negation of i
   * 17 Weak Mutation 982: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - ReplaceVariable FREE -> REMOVED
   * 18 Weak Mutation 983: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - DeleteField: FREELjava/lang/Object;
   * 19 Weak Mutation 980: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - InsertUnaryOp IINC 1 i
   * 20 Weak Mutation 981: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - InsertUnaryOp IINC -1 i
   * 21 Weak Mutation 1021: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:619 - InsertUnaryOp Negation of hashcode
   * 22 Weak Mutation 1022: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:619 - InsertUnaryOp IINC 1 hashcode
   * 23 Weak Mutation 1023: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:619 - InsertUnaryOp IINC -1 hashcode
   * 24 gnu.trove.map.hash.TObjectIntHashMap.containsKey(Ljava/lang/Object;)Z: root-Branch
   * 25 gnu.trove.map.hash.TObjectIntHashMap.hashCode()I: I22 Branch 65 IFLE L613 - true
   * 26 gnu.trove.map.hash.TObjectIntHashMap.hashCode()I: I22 Branch 65 IFLE L613 - false
   * 27 gnu.trove.map.hash.TObjectIntHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - true
   * 28 Weak Mutation 258: gnu.trove.map.hash.TObjectIntHashMap.containsKey(Ljava/lang/Object;)Z:209 - DeleteStatement: contains(Ljava/lang/Object;)Z
   * 29 Weak Mutation 256: gnu.trove.map.hash.TObjectIntHashMap.containsKey(Ljava/lang/Object;)Z:209 - ReplaceVariable key -> FREE
   * 30 Weak Mutation 257: gnu.trove.map.hash.TObjectIntHashMap.containsKey(Ljava/lang/Object;)Z:209 - ReplaceVariable key -> REMOVED
   * 31 Weak Mutation 1021: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:619 - InsertUnaryOp Negation of hashcode
   * 32 Weak Mutation 1022: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:619 - InsertUnaryOp IINC 1 hashcode
   * 33 Weak Mutation 1023: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:619 - InsertUnaryOp IINC -1 hashcode
   * 34 Weak Mutation 984: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - ReplaceComparisonOperator == -> !=
   * 35 Weak Mutation 978: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - ReplaceVariable i -> hashcode
   * 36 Weak Mutation 979: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - InsertUnaryOp Negation of i
   * 37 Weak Mutation 976: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:613 - ReplaceComparisonOperator <= -> -1
   * 38 Weak Mutation 982: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - ReplaceVariable FREE -> REMOVED
   * 39 Weak Mutation 983: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - DeleteField: FREELjava/lang/Object;
   * 40 Weak Mutation 980: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - InsertUnaryOp IINC 1 i
   * 41 Weak Mutation 981: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - InsertUnaryOp IINC -1 i
   * 42 Weak Mutation 971: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:613 - InsertUnaryOp IINC 1 i
   * 43 Weak Mutation 970: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:613 - InsertUnaryOp Negation of i
   * 44 Weak Mutation 969: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:613 - ReplaceVariable i -> hashcode
   * 45 Weak Mutation 968: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:612 - DeleteField: _values[I
   * 46 Weak Mutation 975: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:613 - ReplaceComparisonOperator <= -> <
   * 47 Weak Mutation 973: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:613 - ReplaceVariable i -> hashcode
   * 48 Weak Mutation 972: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:613 - InsertUnaryOp IINC -1 i
   * 49 Weak Mutation 967: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:611 - DeleteField: _set[Ljava/lang/Object;
   * 50 Weak Mutation 966: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:610 - ReplaceConstant - 0 -> 1
   */

  @Test
  public void test4()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>();
      tObjectIntHashMap0.containsKey((Object) tObjectIntHashMap0);
      assertEquals(23, tObjectIntHashMap0.capacity());
  }

  //Test case number: 5
  /*
   * 132 covered goals:
   * 1 Weak Mutation 279: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp Negation of i
   * 2 Weak Mutation 278: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - ReplaceVariable i -> val
   * 3 Weak Mutation 283: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - DeleteField: REMOVEDLjava/lang/Object;
   * 4 Weak Mutation 282: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - ReplaceVariable REMOVED -> FREE
   * 5 Weak Mutation 281: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp IINC -1 i
   * 6 Weak Mutation 280: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp IINC 1 i
   * 7 Weak Mutation 287: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp IINC 1 val
   * 8 Weak Mutation 286: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp Negation of val
   * 9 Weak Mutation 285: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - ReplaceVariable val -> i
   * 10 Weak Mutation 284: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - ReplaceComparisonOperator == -> !=
   * 11 Weak Mutation 288: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp IINC -1 val
   * 12 Weak Mutation 289: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - ReplaceVariable i -> val
   * 13 Weak Mutation 290: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp Negation of i
   * 14 Weak Mutation 291: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp IINC 1 i
   * 15 Weak Mutation 292: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp IINC -1 i
   * 16 Weak Mutation 294: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - ReplaceComparisonOperator != -> <
   * 17 Weak Mutation 719: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:440 - ReplaceVariable key -> REMOVED
   * 18 Weak Mutation 718: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:440 - ReplaceVariable key -> FREE
   * 19 Weak Mutation 720: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:440 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 20 Weak Mutation 721: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:443 - ReplaceVariable index -> adjust_amount
   * 21 Weak Mutation 722: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:443 - ReplaceVariable index -> put_amount
   * 22 Weak Mutation 723: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:443 - InsertUnaryOp Negation of index
   * 23 Weak Mutation 724: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:443 - InsertUnaryOp IINC 1 index
   * 24 Weak Mutation 725: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:443 - InsertUnaryOp IINC -1 index
   * 25 Weak Mutation 726: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:443 - ReplaceComparisonOperator >= -> ==
   * 26 Weak Mutation 762: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - ReplaceVariable put_amount -> adjust_amount
   * 27 Weak Mutation 763: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - InsertUnaryOp Negation of put_amount
   * 28 Weak Mutation 760: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - InsertUnaryOp IINC -1 index
   * 29 Weak Mutation 761: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - ReplaceVariable put_amount -> index
   * 30 Weak Mutation 764: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - InsertUnaryOp IINC 1 put_amount
   * 31 Weak Mutation 765: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - InsertUnaryOp IINC -1 put_amount
   * 32 Weak Mutation 755: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - DeleteField: _values[I
   * 33 Weak Mutation 758: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - InsertUnaryOp Negation of index
   * 34 Weak Mutation 759: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - InsertUnaryOp IINC 1 index
   * 35 Weak Mutation 756: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - ReplaceVariable index -> adjust_amount
   * 36 Weak Mutation 757: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - ReplaceVariable index -> put_amount
   * 37 Weak Mutation 766: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:449 - ReplaceConstant - 1 -> 0
   * 38 Weak Mutation 767: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:454 - InsertUnaryOp Negation of isNewMapping
   * 39 Weak Mutation 768: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:454 - ReplaceComparisonOperator == -> !=
   * 40 Weak Mutation 770: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:455 - DeleteField: consumeFreeSlotZ
   * 41 Weak Mutation 771: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:455 - DeleteStatement: postInsertHook(Z)V
   * 42 Weak Mutation 769: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:455 - InsertUnaryOp Negation
   * 43 Weak Mutation 775: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:458 - InsertUnaryOp Negation of newValue
   * 44 Weak Mutation 772: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:458 - ReplaceVariable newValue -> index
   * 45 Weak Mutation 773: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:458 - ReplaceVariable newValue -> adjust_amount
   * 46 gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z: I25 Branch 16 IF_ACMPEQ L219 - false
   * 47 gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z: I30 Branch 17 IF_ACMPEQ L219 - false
   * 48 gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z: I35 Branch 18 IF_ICMPNE L219 - true
   * 49 gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I: I9 Branch 41 IFGE L443 - true
   * 50 gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I: I51 Branch 42 IFEQ L454 - false
   * 51 Weak Mutation 275: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - DeleteField: FREELjava/lang/Object;
   * 52 Weak Mutation 274: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - ReplaceVariable FREE -> REMOVED
   * 53 Weak Mutation 273: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp IINC -1 i
   * 54 Weak Mutation 272: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp IINC 1 i
   * 55 Weak Mutation 276: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - ReplaceComparisonOperator == -> !=
   * 56 Weak Mutation 259: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:215 - DeleteField: _set[Ljava/lang/Object;
   * 57 Weak Mutation 262: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:218 - InsertUnaryOp Negation of i
   * 58 Weak Mutation 263: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:218 - InsertUnaryOp IINC 1 i
   * 59 Weak Mutation 260: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:216 - DeleteField: _values[I
   * 60 Weak Mutation 261: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:218 - ReplaceVariable i -> val
   * 61 Weak Mutation 267: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:218 - ReplaceComparisonOperator <= -> <
   * 62 Weak Mutation 264: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:218 - InsertUnaryOp IINC -1 i
   * 63 Weak Mutation 265: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:218 - ReplaceVariable i -> val
   * 64 Weak Mutation 270: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - ReplaceVariable i -> val
   * 65 Weak Mutation 271: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp Negation of i
   * 66 Weak Mutation 268: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:218 - ReplaceComparisonOperator <= -> -1
   * 67 Weak Mutation 297: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:223 - ReplaceConstant - 0 -> 1
   * 68 Weak Mutation 275: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - DeleteField: FREELjava/lang/Object;
   * 69 Weak Mutation 274: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - ReplaceVariable FREE -> REMOVED
   * 70 Weak Mutation 273: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp IINC -1 i
   * 71 Weak Mutation 272: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp IINC 1 i
   * 72 Weak Mutation 279: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp Negation of i
   * 73 Weak Mutation 278: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - ReplaceVariable i -> val
   * 74 Weak Mutation 276: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - ReplaceComparisonOperator == -> !=
   * 75 Weak Mutation 283: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - DeleteField: REMOVEDLjava/lang/Object;
   * 76 Weak Mutation 282: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - ReplaceVariable REMOVED -> FREE
   * 77 Weak Mutation 281: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp IINC -1 i
   * 78 Weak Mutation 280: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp IINC 1 i
   * 79 Weak Mutation 287: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp IINC 1 val
   * 80 Weak Mutation 286: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp Negation of val
   * 81 Weak Mutation 285: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - ReplaceVariable val -> i
   * 82 Weak Mutation 284: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - ReplaceComparisonOperator == -> !=
   * 83 Weak Mutation 259: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:215 - DeleteField: _set[Ljava/lang/Object;
   * 84 Weak Mutation 262: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:218 - InsertUnaryOp Negation of i
   * 85 Weak Mutation 263: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:218 - InsertUnaryOp IINC 1 i
   * 86 Weak Mutation 260: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:216 - DeleteField: _values[I
   * 87 Weak Mutation 261: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:218 - ReplaceVariable i -> val
   * 88 Weak Mutation 267: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:218 - ReplaceComparisonOperator <= -> <
   * 89 Weak Mutation 264: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:218 - InsertUnaryOp IINC -1 i
   * 90 Weak Mutation 265: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:218 - ReplaceVariable i -> val
   * 91 Weak Mutation 270: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - ReplaceVariable i -> val
   * 92 Weak Mutation 271: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp Negation of i
   * 93 Weak Mutation 268: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:218 - ReplaceComparisonOperator <= -> -1
   * 94 Weak Mutation 288: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp IINC -1 val
   * 95 Weak Mutation 289: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - ReplaceVariable i -> val
   * 96 Weak Mutation 290: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp Negation of i
   * 97 Weak Mutation 291: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp IINC 1 i
   * 98 Weak Mutation 292: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - InsertUnaryOp IINC -1 i
   * 99 Weak Mutation 294: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:219 - ReplaceComparisonOperator != -> <
   * 100 Weak Mutation 297: gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z:223 - ReplaceConstant - 0 -> 1
   * 101 Weak Mutation 762: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - ReplaceVariable put_amount -> adjust_amount
   * 102 Weak Mutation 763: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - InsertUnaryOp Negation of put_amount
   * 103 Weak Mutation 760: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - InsertUnaryOp IINC -1 index
   * 104 Weak Mutation 761: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - ReplaceVariable put_amount -> index
   * 105 Weak Mutation 766: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:449 - ReplaceConstant - 1 -> 0
   * 106 Weak Mutation 767: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:454 - InsertUnaryOp Negation of isNewMapping
   * 107 Weak Mutation 764: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - InsertUnaryOp IINC 1 put_amount
   * 108 Weak Mutation 765: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - InsertUnaryOp IINC -1 put_amount
   * 109 Weak Mutation 755: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - DeleteField: _values[I
   * 110 Weak Mutation 758: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - InsertUnaryOp Negation of index
   * 111 Weak Mutation 759: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - InsertUnaryOp IINC 1 index
   * 112 Weak Mutation 756: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - ReplaceVariable index -> adjust_amount
   * 113 Weak Mutation 757: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - ReplaceVariable index -> put_amount
   * 114 Weak Mutation 719: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:440 - ReplaceVariable key -> REMOVED
   * 115 Weak Mutation 718: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:440 - ReplaceVariable key -> FREE
   * 116 Weak Mutation 720: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:440 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 117 Weak Mutation 721: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:443 - ReplaceVariable index -> adjust_amount
   * 118 Weak Mutation 722: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:443 - ReplaceVariable index -> put_amount
   * 119 Weak Mutation 723: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:443 - InsertUnaryOp Negation of index
   * 120 Weak Mutation 724: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:443 - InsertUnaryOp IINC 1 index
   * 121 Weak Mutation 725: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:443 - InsertUnaryOp IINC -1 index
   * 122 Weak Mutation 726: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:443 - ReplaceComparisonOperator >= -> ==
   * 123 Weak Mutation 775: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:458 - InsertUnaryOp Negation of newValue
   * 124 Weak Mutation 772: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:458 - ReplaceVariable newValue -> index
   * 125 Weak Mutation 773: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:458 - ReplaceVariable newValue -> adjust_amount
   * 126 Weak Mutation 770: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:455 - DeleteField: consumeFreeSlotZ
   * 127 Weak Mutation 771: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:455 - DeleteStatement: postInsertHook(Z)V
   * 128 Weak Mutation 768: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:454 - ReplaceComparisonOperator == -> !=
   * 129 Weak Mutation 769: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:455 - InsertUnaryOp Negation
   * 130 gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z: I18 Branch 15 IFLE L218 - true
   * 131 gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z: I18 Branch 15 IFLE L218 - false
   * 132 gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z: I25 Branch 16 IF_ACMPEQ L219 - true
   */

  @Test
  public void test5()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>();
      tObjectIntHashMap0.adjustOrPutValue((Integer) (-1), 17929, (-1));
      boolean boolean0 = tObjectIntHashMap0.containsValue(917);
      assertEquals(1, tObjectIntHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 21 covered goals:
   * 1 Weak Mutation 298: gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I:229 - ReplaceVariable key -> FREE
   * 2 Weak Mutation 299: gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I:229 - ReplaceVariable key -> REMOVED
   * 3 Weak Mutation 300: gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I:229 - DeleteStatement: index(Ljava/lang/Object;)I
   * 4 Weak Mutation 307: gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I:230 - InsertUnaryOp Negation
   * 5 Weak Mutation 306: gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I:230 - ReplaceComparisonOperator >= -> -1
   * 6 Weak Mutation 309: gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I:230 - InsertUnaryOp -1
   * 7 Weak Mutation 308: gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I:230 - InsertUnaryOp +1
   * 8 Weak Mutation 301: gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I:230 - InsertUnaryOp Negation of index
   * 9 Weak Mutation 302: gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I:230 - InsertUnaryOp IINC 1 index
   * 10 Weak Mutation 303: gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I:230 - InsertUnaryOp IINC -1 index
   * 11 gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I: I9 Branch 19 IFGE L230 - false
   * 12 Weak Mutation 307: gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I:230 - InsertUnaryOp Negation
   * 13 Weak Mutation 306: gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I:230 - ReplaceComparisonOperator >= -> -1
   * 14 Weak Mutation 309: gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I:230 - InsertUnaryOp -1
   * 15 Weak Mutation 308: gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I:230 - InsertUnaryOp +1
   * 16 Weak Mutation 298: gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I:229 - ReplaceVariable key -> FREE
   * 17 Weak Mutation 299: gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I:229 - ReplaceVariable key -> REMOVED
   * 18 Weak Mutation 300: gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I:229 - DeleteStatement: index(Ljava/lang/Object;)I
   * 19 Weak Mutation 301: gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I:230 - InsertUnaryOp Negation of index
   * 20 Weak Mutation 302: gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I:230 - InsertUnaryOp IINC 1 index
   * 21 Weak Mutation 303: gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I:230 - InsertUnaryOp IINC -1 index
   */

  @Test
  public void test6()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>();
      int int0 = tObjectIntHashMap0.get((Object) "jpn");
      assertEquals(0, int0);
      assertEquals(23, tObjectIntHashMap0.capacity());
  }

  //Test case number: 7
  /*
   * 22 covered goals:
   * 1 Weak Mutation 335: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:246 - ReplaceComparisonOperator >= -> -1
   * 2 Weak Mutation 342: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:247 - ReplaceArithmeticOperator - -> +
   * 3 Weak Mutation 341: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:247 - ReplaceConstant - 1 -> 0
   * 4 Weak Mutation 340: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:247 - InsertUnaryOp IINC -1 index
   * 5 Weak Mutation 339: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:247 - InsertUnaryOp IINC 1 index
   * 6 Weak Mutation 338: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:247 - InsertUnaryOp Negation of index
   * 7 Weak Mutation 337: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:247 - ReplaceVariable index -> value
   * 8 Weak Mutation 336: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:247 - DeleteField: _values[I
   * 9 Weak Mutation 345: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:247 - ReplaceArithmeticOperator - -> *
   * 10 Weak Mutation 344: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:247 - ReplaceArithmeticOperator - -> /
   * 11 gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I: I9 Branch 20 IFGE L246 - false
   * 12 Weak Mutation 329: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:246 - ReplaceVariable index -> value
   * 13 Weak Mutation 342: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:247 - ReplaceArithmeticOperator - -> +
   * 14 Weak Mutation 341: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:247 - ReplaceConstant - 1 -> 0
   * 15 Weak Mutation 340: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:247 - InsertUnaryOp IINC -1 index
   * 16 Weak Mutation 339: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:247 - InsertUnaryOp IINC 1 index
   * 17 Weak Mutation 338: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:247 - InsertUnaryOp Negation of index
   * 18 Weak Mutation 337: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:247 - ReplaceVariable index -> value
   * 19 Weak Mutation 336: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:247 - DeleteField: _values[I
   * 20 Weak Mutation 345: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:247 - ReplaceArithmeticOperator - -> *
   * 21 Weak Mutation 344: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:247 - ReplaceArithmeticOperator - -> /
   * 22 Weak Mutation 335: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:246 - ReplaceComparisonOperator >= -> -1
   */

  @Test
  public void test7()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>();
      tObjectIntHashMap0.putIfAbsent((Integer) 0, 0);
      int int0 = tObjectIntHashMap0.putIfAbsent((Integer) 0, 0);
      assertEquals("{0=0}", tObjectIntHashMap0.toString());
      assertEquals(0, int0);
  }

  //Test case number: 8
  /*
   * 25 covered goals:
   * 1 Weak Mutation 357: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:253 - DeleteField: no_entry_valueI
   * 2 Weak Mutation 0: gnu.trove.map.hash.TObjectIntHashMap$1.execute(Ljava/lang/Object;I)Z:63 - DeleteField: this$0Lgnu/trove/map/hash/TObjectIntHashMap;
   * 3 Weak Mutation 1: gnu.trove.map.hash.TObjectIntHashMap$1.execute(Ljava/lang/Object;I)Z:63 - InsertUnaryOp Negation of value
   * 4 Weak Mutation 2: gnu.trove.map.hash.TObjectIntHashMap$1.execute(Ljava/lang/Object;I)Z:63 - InsertUnaryOp IINC 1 value
   * 5 Weak Mutation 3: gnu.trove.map.hash.TObjectIntHashMap$1.execute(Ljava/lang/Object;I)Z:63 - InsertUnaryOp IINC -1 value
   * 6 Weak Mutation 4: gnu.trove.map.hash.TObjectIntHashMap$1.execute(Ljava/lang/Object;I)Z:63 - DeleteStatement: put(Ljava/lang/Object;I)I
   * 7 Weak Mutation 5: gnu.trove.map.hash.TObjectIntHashMap$1.execute(Ljava/lang/Object;I)Z:64 - ReplaceConstant - 1 -> 0
   * 8 Weak Mutation 823: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 9 Weak Mutation 828: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - ReplaceComparisonOperator == -> !=
   * 10 Weak Mutation 831: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 11 Weak Mutation 830: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 12 Weak Mutation 825: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 13 Weak Mutation 824: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 14 Weak Mutation 827: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - DeleteField: REMOVEDLjava/lang/Object;
   * 15 Weak Mutation 826: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - ReplaceVariable REMOVED -> FREE
   * 16 Weak Mutation 834: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 17 Weak Mutation 835: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 18 Weak Mutation 832: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 19 Weak Mutation 833: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 20 Weak Mutation 836: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - DeleteStatement: execute(Ljava/lang/Object;I)Z
   * 21 Weak Mutation 837: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - ReplaceComparisonOperator != -> ==
   * 22 Weak Mutation 114: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:124 - ReplaceComparisonOperator == -> <=
   * 23 Weak Mutation 318: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:239 - ReplaceVariable value -> index
   * 24 Weak Mutation 322: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:239 - ReplaceVariable index -> value
   * 25 Weak Mutation 357: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:253 - DeleteField: no_entry_valueI
   */

  @Test
  public void test8()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>();
      tObjectIntHashMap0.put("[Warning] apparent concurrent modification of the key set. Size before and after rehash() do not match ", 1523);
      TObjectIntHashMap<Object> tObjectIntHashMap1 = new TObjectIntHashMap<Object>((-2001), 1482, (-1654));
      tObjectIntHashMap1.putAll((TObjectIntMap<?>) tObjectIntHashMap0);
      assertEquals(false, tObjectIntHashMap0.isEmpty());
      assertEquals(1, tObjectIntHashMap1.size());
  }

  //Test case number: 9
  /*
   * 34 covered goals:
   * 1 Weak Mutation 364: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:255 - ReplaceComparisonOperator >= -> -1
   * 2 Weak Mutation 372: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:256 - ReplaceArithmeticOperator - -> *
   * 3 Weak Mutation 369: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:256 - ReplaceArithmeticOperator - -> +
   * 4 Weak Mutation 368: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:256 - ReplaceConstant - 1 -> 0
   * 5 Weak Mutation 371: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:256 - ReplaceArithmeticOperator - -> /
   * 6 Weak Mutation 370: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:256 - ReplaceArithmeticOperator - -> %
   * 7 Weak Mutation 365: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:256 - ReplaceVariable index -> previous
   * 8 Weak Mutation 366: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:256 - ReplaceVariable index -> value
   * 9 Weak Mutation 367: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:256 - InsertUnaryOp Negation of index
   * 10 Weak Mutation 373: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:257 - DeleteField: _values[I
   * 11 Weak Mutation 375: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:257 - ReplaceVariable index -> value
   * 12 Weak Mutation 374: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:257 - ReplaceVariable index -> previous
   * 13 Weak Mutation 377: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:257 - InsertUnaryOp IINC 1 index
   * 14 Weak Mutation 376: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:257 - InsertUnaryOp Negation of index
   * 15 Weak Mutation 378: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:257 - InsertUnaryOp IINC -1 index
   * 16 Weak Mutation 379: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:258 - ReplaceConstant - 0 -> 1
   * 17 gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I: I12 Branch 21 IFGE L255 - false
   * 18 gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I: I41 Branch 22 IFEQ L263 - true
   * 19 Weak Mutation 373: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:257 - DeleteField: _values[I
   * 20 Weak Mutation 372: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:256 - ReplaceArithmeticOperator - -> *
   * 21 Weak Mutation 375: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:257 - ReplaceVariable index -> value
   * 22 Weak Mutation 374: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:257 - ReplaceVariable index -> previous
   * 23 Weak Mutation 369: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:256 - ReplaceArithmeticOperator - -> +
   * 24 Weak Mutation 368: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:256 - ReplaceConstant - 1 -> 0
   * 25 Weak Mutation 371: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:256 - ReplaceArithmeticOperator - -> /
   * 26 Weak Mutation 370: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:256 - ReplaceArithmeticOperator - -> %
   * 27 Weak Mutation 377: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:257 - InsertUnaryOp IINC 1 index
   * 28 Weak Mutation 376: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:257 - InsertUnaryOp Negation of index
   * 29 Weak Mutation 379: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:258 - ReplaceConstant - 0 -> 1
   * 30 Weak Mutation 378: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:257 - InsertUnaryOp IINC -1 index
   * 31 Weak Mutation 364: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:255 - ReplaceComparisonOperator >= -> -1
   * 32 Weak Mutation 365: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:256 - ReplaceVariable index -> previous
   * 33 Weak Mutation 366: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:256 - ReplaceVariable index -> value
   * 34 Weak Mutation 367: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:256 - InsertUnaryOp Negation of index
   */

  @Test
  public void test9()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>();
      tObjectIntHashMap0.adjustOrPutValue((Integer) (-1), 17929, (-1));
      int int0 = tObjectIntHashMap0.put((Integer) (-1), (-1));
      assertEquals(false, tObjectIntHashMap0.isEmpty());
      assertEquals((-1), int0);
  }

  //Test case number: 10
  /*
   * 31 covered goals:
   * 1 Weak Mutation 400: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:272 - InsertUnaryOp +1
   * 2 Weak Mutation 401: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:272 - InsertUnaryOp -1
   * 3 Weak Mutation 399: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:272 - InsertUnaryOp Negation
   * 4 Weak Mutation 403: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:273 - ReplaceVariable key -> FREE
   * 5 Weak Mutation 404: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:273 - ReplaceVariable key -> REMOVED
   * 6 Weak Mutation 405: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:273 - DeleteStatement: index(Ljava/lang/Object;)I
   * 7 Weak Mutation 408: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:274 - InsertUnaryOp IINC 1 index
   * 8 Weak Mutation 409: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:274 - InsertUnaryOp IINC -1 index
   * 9 Weak Mutation 412: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:274 - ReplaceComparisonOperator < -> -2
   * 10 Weak Mutation 406: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:274 - ReplaceVariable index -> prev
   * 11 Weak Mutation 407: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:274 - InsertUnaryOp Negation of index
   * 12 Weak Mutation 425: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:278 - InsertUnaryOp IINC 1 prev
   * 13 Weak Mutation 424: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:278 - InsertUnaryOp Negation of prev
   * 14 Weak Mutation 426: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:278 - InsertUnaryOp IINC -1 prev
   * 15 Weak Mutation 423: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:278 - ReplaceVariable prev -> index
   * 16 gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I: I14 Branch 23 IFLT L274 - true
   * 17 Weak Mutation 408: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:274 - InsertUnaryOp IINC 1 index
   * 18 Weak Mutation 409: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:274 - InsertUnaryOp IINC -1 index
   * 19 Weak Mutation 412: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:274 - ReplaceComparisonOperator < -> -2
   * 20 Weak Mutation 403: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:273 - ReplaceVariable key -> FREE
   * 21 Weak Mutation 400: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:272 - InsertUnaryOp +1
   * 22 Weak Mutation 401: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:272 - InsertUnaryOp -1
   * 23 Weak Mutation 406: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:274 - ReplaceVariable index -> prev
   * 24 Weak Mutation 407: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:274 - InsertUnaryOp Negation of index
   * 25 Weak Mutation 404: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:273 - ReplaceVariable key -> REMOVED
   * 26 Weak Mutation 405: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:273 - DeleteStatement: index(Ljava/lang/Object;)I
   * 27 Weak Mutation 399: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:272 - InsertUnaryOp Negation
   * 28 Weak Mutation 425: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:278 - InsertUnaryOp IINC 1 prev
   * 29 Weak Mutation 424: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:278 - InsertUnaryOp Negation of prev
   * 30 Weak Mutation 426: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:278 - InsertUnaryOp IINC -1 prev
   * 31 Weak Mutation 423: gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I:278 - ReplaceVariable prev -> index
   */

  @Test
  public void test10()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>();
      int int0 = tObjectIntHashMap0.remove((Object) null);
      assertEquals(23, tObjectIntHashMap0.capacity());
      assertEquals(true, tObjectIntHashMap0.isEmpty());
      assertEquals(0, int0);
  }

  //Test case number: 11
  /*
   * 9 covered goals:
   * 1 Weak Mutation 438: gnu.trove.map.hash.TObjectIntHashMap.putAll(Ljava/util/Map;)V:299 - DeleteStatement: entrySet()Ljava/util/Set;
   * 2 Weak Mutation 440: gnu.trove.map.hash.TObjectIntHashMap.putAll(Ljava/util/Map;)V:300 - DeleteStatement: hasNext()Z
   * 3 Weak Mutation 441: gnu.trove.map.hash.TObjectIntHashMap.putAll(Ljava/util/Map;)V:300 - ReplaceComparisonOperator == -> !=
   * 4 Weak Mutation 439: gnu.trove.map.hash.TObjectIntHashMap.putAll(Ljava/util/Map;)V:300 - DeleteStatement: iterator()Ljava/util/Iterator;
   * 5 gnu.trove.map.hash.TObjectIntHashMap.putAll(Ljava/util/Map;)V: I13 Branch 24 IFEQ L300 - true
   * 6 Weak Mutation 440: gnu.trove.map.hash.TObjectIntHashMap.putAll(Ljava/util/Map;)V:300 - DeleteStatement: hasNext()Z
   * 7 Weak Mutation 441: gnu.trove.map.hash.TObjectIntHashMap.putAll(Ljava/util/Map;)V:300 - ReplaceComparisonOperator == -> !=
   * 8 Weak Mutation 438: gnu.trove.map.hash.TObjectIntHashMap.putAll(Ljava/util/Map;)V:299 - DeleteStatement: entrySet()Ljava/util/Set;
   * 9 Weak Mutation 439: gnu.trove.map.hash.TObjectIntHashMap.putAll(Ljava/util/Map;)V:300 - DeleteStatement: iterator()Ljava/util/Iterator;
   */

  @Test
  public void test11()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>(Integer.MAX_VALUE, (-1644));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      tObjectIntHashMap0.putAll((Map<? extends String, ? extends Integer>) hashMap0);
      assertEquals(0, tObjectIntHashMap0.getNoEntryValue());
  }

  //Test case number: 12
  /*
   * 29 covered goals:
   * 1 Weak Mutation 454: gnu.trove.map.hash.TObjectIntHashMap.clear()V:315 - DeleteStatement: fill([Ljava/lang/Object;IILjava/lang/Object;)V
   * 2 Weak Mutation 453: gnu.trove.map.hash.TObjectIntHashMap.clear()V:315 - DeleteField: FREELjava/lang/Object;
   * 3 Weak Mutation 452: gnu.trove.map.hash.TObjectIntHashMap.clear()V:315 - ReplaceVariable FREE -> REMOVED
   * 4 Weak Mutation 451: gnu.trove.map.hash.TObjectIntHashMap.clear()V:315 - DeleteField: _set[Ljava/lang/Object;
   * 5 Weak Mutation 450: gnu.trove.map.hash.TObjectIntHashMap.clear()V:315 - ReplaceConstant - 0 -> 1
   * 6 Weak Mutation 449: gnu.trove.map.hash.TObjectIntHashMap.clear()V:315 - DeleteField: _set[Ljava/lang/Object;
   * 7 Weak Mutation 462: gnu.trove.map.hash.TObjectIntHashMap.clear()V:316 - DeleteStatement: fill([IIII)V
   * 8 Weak Mutation 461: gnu.trove.map.hash.TObjectIntHashMap.clear()V:316 - DeleteField: no_entry_valueI
   * 9 Weak Mutation 460: gnu.trove.map.hash.TObjectIntHashMap.clear()V:316 - InsertUnaryOp -1
   * 10 Weak Mutation 459: gnu.trove.map.hash.TObjectIntHashMap.clear()V:316 - InsertUnaryOp +1
   * 11 Weak Mutation 458: gnu.trove.map.hash.TObjectIntHashMap.clear()V:316 - InsertUnaryOp Negation
   * 12 Weak Mutation 457: gnu.trove.map.hash.TObjectIntHashMap.clear()V:316 - DeleteField: _values[I
   * 13 Weak Mutation 456: gnu.trove.map.hash.TObjectIntHashMap.clear()V:316 - ReplaceConstant - 0 -> 1
   * 14 Weak Mutation 455: gnu.trove.map.hash.TObjectIntHashMap.clear()V:316 - DeleteField: _values[I
   * 15 gnu.trove.map.hash.TObjectIntHashMap.clear()V: root-Branch
   * 16 Weak Mutation 462: gnu.trove.map.hash.TObjectIntHashMap.clear()V:316 - DeleteStatement: fill([IIII)V
   * 17 Weak Mutation 461: gnu.trove.map.hash.TObjectIntHashMap.clear()V:316 - DeleteField: no_entry_valueI
   * 18 Weak Mutation 460: gnu.trove.map.hash.TObjectIntHashMap.clear()V:316 - InsertUnaryOp -1
   * 19 Weak Mutation 459: gnu.trove.map.hash.TObjectIntHashMap.clear()V:316 - InsertUnaryOp +1
   * 20 Weak Mutation 458: gnu.trove.map.hash.TObjectIntHashMap.clear()V:316 - InsertUnaryOp Negation
   * 21 Weak Mutation 457: gnu.trove.map.hash.TObjectIntHashMap.clear()V:316 - DeleteField: _values[I
   * 22 Weak Mutation 456: gnu.trove.map.hash.TObjectIntHashMap.clear()V:316 - ReplaceConstant - 0 -> 1
   * 23 Weak Mutation 455: gnu.trove.map.hash.TObjectIntHashMap.clear()V:316 - DeleteField: _values[I
   * 24 Weak Mutation 454: gnu.trove.map.hash.TObjectIntHashMap.clear()V:315 - DeleteStatement: fill([Ljava/lang/Object;IILjava/lang/Object;)V
   * 25 Weak Mutation 453: gnu.trove.map.hash.TObjectIntHashMap.clear()V:315 - DeleteField: FREELjava/lang/Object;
   * 26 Weak Mutation 452: gnu.trove.map.hash.TObjectIntHashMap.clear()V:315 - ReplaceVariable FREE -> REMOVED
   * 27 Weak Mutation 451: gnu.trove.map.hash.TObjectIntHashMap.clear()V:315 - DeleteField: _set[Ljava/lang/Object;
   * 28 Weak Mutation 450: gnu.trove.map.hash.TObjectIntHashMap.clear()V:315 - ReplaceConstant - 0 -> 1
   * 29 Weak Mutation 449: gnu.trove.map.hash.TObjectIntHashMap.clear()V:315 - DeleteField: _set[Ljava/lang/Object;
   */

  @Test
  public void test12()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>((-1644), (-1644), (-1644));
      tObjectIntHashMap0.clear();
      assertEquals(-1644, tObjectIntHashMap0.getNoEntryValue());
      assertEquals("{}", tObjectIntHashMap0.toString());
  }

  //Test case number: 13
  /*
   * 91 covered goals:
   * 1 Weak Mutation 493: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - ReplaceComparisonOperator == -> !=
   * 2 Weak Mutation 492: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - DeleteField: REMOVEDLjava/lang/Object;
   * 3 Weak Mutation 489: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC 1 i
   * 4 Weak Mutation 488: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp Negation of i
   * 5 Weak Mutation 491: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable REMOVED -> FREE
   * 6 Weak Mutation 490: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC -1 i
   * 7 Weak Mutation 485: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable k -> keys
   * 8 Weak Mutation 487: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable i -> j
   * 9 Weak Mutation 504: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp Negation of i
   * 10 Weak Mutation 505: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC 1 i
   * 11 Weak Mutation 506: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC -1 i
   * 12 Weak Mutation 500: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable j -> i
   * 13 Weak Mutation 501: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable k -> keys
   * 14 Weak Mutation 503: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable i -> j
   * 15 Weak Mutation 496: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable j -> i
   * 16 Weak Mutation 497: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp Negation of j
   * 17 Weak Mutation 498: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC 1 j
   * 18 Weak Mutation 499: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC -1 j
   * 19 Weak Mutation 495: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable keys -> k
   * 20 Weak Mutation 494: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable keys -> _set
   * 21 gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;: I30 Branch 26 IF_ACMPEQ L335 - false
   * 22 gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;: I35 Branch 27 IF_ACMPEQ L335 - false
   * 23 Weak Mutation 478: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable i -> j
   * 24 Weak Mutation 479: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp Negation of i
   * 25 Weak Mutation 476: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable k -> keys
   * 26 Weak Mutation 474: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:334 - ReplaceComparisonOperator <= -> <
   * 27 Weak Mutation 475: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:334 - ReplaceComparisonOperator <= -> -1
   * 28 Weak Mutation 472: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:334 - ReplaceVariable i -> j
   * 29 Weak Mutation 470: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:334 - InsertUnaryOp IINC 1 i
   * 30 Weak Mutation 471: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:334 - InsertUnaryOp IINC -1 i
   * 31 Weak Mutation 468: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:334 - ReplaceVariable i -> j
   * 32 Weak Mutation 469: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:334 - InsertUnaryOp Negation of i
   * 33 Weak Mutation 467: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:334 - ReplaceConstant - 0 -> 1
   * 34 Weak Mutation 464: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:332 - DeleteField: _set[Ljava/lang/Object;
   * 35 Weak Mutation 465: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:334 - ReplaceVariable k -> keys
   * 36 Weak Mutation 463: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:331 - DeleteStatement: size()I
   * 37 Weak Mutation 508: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:340 - ReplaceVariable keys -> k
   * 38 Weak Mutation 507: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:340 - ReplaceVariable keys -> _set
   * 39 Weak Mutation 484: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - ReplaceComparisonOperator == -> !=
   * 40 Weak Mutation 481: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC -1 i
   * 41 Weak Mutation 480: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC 1 i
   * 42 Weak Mutation 483: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - DeleteField: FREELjava/lang/Object;
   * 43 Weak Mutation 482: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable FREE -> REMOVED
   * 44 Weak Mutation 98: gnu.trove.map.hash.TObjectIntHashMap.<init>(I)V:93 - InsertUnaryOp +1
   * 45 Weak Mutation 99: gnu.trove.map.hash.TObjectIntHashMap.<init>(I)V:93 - InsertUnaryOp -1
   * 46 Weak Mutation 97: gnu.trove.map.hash.TObjectIntHashMap.<init>(I)V:93 - InsertUnaryOp Negation
   * 47 Weak Mutation 478: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable i -> j
   * 48 Weak Mutation 479: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp Negation of i
   * 49 Weak Mutation 476: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable k -> keys
   * 50 Weak Mutation 474: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:334 - ReplaceComparisonOperator <= -> <
   * 51 Weak Mutation 475: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:334 - ReplaceComparisonOperator <= -> -1
   * 52 Weak Mutation 472: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:334 - ReplaceVariable i -> j
   * 53 Weak Mutation 470: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:334 - InsertUnaryOp IINC 1 i
   * 54 Weak Mutation 471: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:334 - InsertUnaryOp IINC -1 i
   * 55 Weak Mutation 468: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:334 - ReplaceVariable i -> j
   * 56 Weak Mutation 469: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:334 - InsertUnaryOp Negation of i
   * 57 Weak Mutation 467: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:334 - ReplaceConstant - 0 -> 1
   * 58 Weak Mutation 464: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:332 - DeleteField: _set[Ljava/lang/Object;
   * 59 Weak Mutation 465: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:334 - ReplaceVariable k -> keys
   * 60 Weak Mutation 463: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:331 - DeleteStatement: size()I
   * 61 Weak Mutation 508: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:340 - ReplaceVariable keys -> k
   * 62 Weak Mutation 504: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp Negation of i
   * 63 Weak Mutation 505: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC 1 i
   * 64 Weak Mutation 506: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC -1 i
   * 65 Weak Mutation 507: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:340 - ReplaceVariable keys -> _set
   * 66 Weak Mutation 500: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable j -> i
   * 67 Weak Mutation 501: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable k -> keys
   * 68 Weak Mutation 503: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable i -> j
   * 69 Weak Mutation 496: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable j -> i
   * 70 Weak Mutation 497: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp Negation of j
   * 71 Weak Mutation 498: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC 1 j
   * 72 Weak Mutation 499: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - InsertUnaryOp IINC -1 j
   * 73 Weak Mutation 493: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - ReplaceComparisonOperator == -> !=
   * 74 Weak Mutation 492: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - DeleteField: REMOVEDLjava/lang/Object;
   * 75 Weak Mutation 495: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable keys -> k
   * 76 Weak Mutation 494: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:337 - ReplaceVariable keys -> _set
   * 77 Weak Mutation 489: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC 1 i
   * 78 Weak Mutation 488: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp Negation of i
   * 79 Weak Mutation 491: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable REMOVED -> FREE
   * 80 Weak Mutation 490: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC -1 i
   * 81 Weak Mutation 485: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable k -> keys
   * 82 Weak Mutation 484: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - ReplaceComparisonOperator == -> !=
   * 83 Weak Mutation 487: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable i -> j
   * 84 Weak Mutation 481: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC -1 i
   * 85 Weak Mutation 480: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - InsertUnaryOp IINC 1 i
   * 86 Weak Mutation 483: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - DeleteField: FREELjava/lang/Object;
   * 87 Weak Mutation 482: gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;:335 - ReplaceVariable FREE -> REMOVED
   * 88 gnu.trove.map.hash.TObjectIntHashMap.<init>(I)V: root-Branch
   * 89 gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;: I23 Branch 25 IFLE L334 - true
   * 90 gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;: I23 Branch 25 IFLE L334 - false
   * 91 gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;: I30 Branch 26 IF_ACMPEQ L335 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>(Integer.MIN_VALUE);
      tObjectIntHashMap0.put((Integer) 647, 1877);
      tObjectIntHashMap0.keys();
      assertEquals(false, tObjectIntHashMap0.isEmpty());
      assertEquals("{647=1877}", tObjectIntHashMap0.toString());
  }

  //Test case number: 14
  /*
   * 112 covered goals:
   * 1 Weak Mutation 550: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> j
   * 2 Weak Mutation 551: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> size
   * 3 Weak Mutation 548: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable k -> a
   * 4 Weak Mutation 556: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - DeleteField: REMOVEDLjava/lang/Object;
   * 5 Weak Mutation 557: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceComparisonOperator == -> !=
   * 6 Weak Mutation 554: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC -1 i
   * 7 Weak Mutation 555: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable REMOVED -> FREE
   * 8 Weak Mutation 552: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp Negation of i
   * 9 Weak Mutation 553: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC 1 i
   * 10 Weak Mutation 558: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable a -> _set
   * 11 Weak Mutation 559: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable a -> k
   * 12 Weak Mutation 567: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable k -> a
   * 13 Weak Mutation 566: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> size
   * 14 Weak Mutation 565: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> i
   * 15 Weak Mutation 564: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC -1 j
   * 16 Weak Mutation 563: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC 1 j
   * 17 Weak Mutation 562: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp Negation of j
   * 18 Weak Mutation 561: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> size
   * 19 Weak Mutation 560: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> i
   * 20 Weak Mutation 573: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC -1 i
   * 21 Weak Mutation 572: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC 1 i
   * 22 Weak Mutation 571: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp Negation of i
   * 23 Weak Mutation 570: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable i -> size
   * 24 Weak Mutation 569: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable i -> j
   * 25 gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I44 Branch 30 IF_ACMPEQ L356 - false
   * 26 gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I49 Branch 31 IF_ACMPEQ L356 - false
   * 27 Weak Mutation 509: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:346 - DeleteStatement: size()I
   * 28 Weak Mutation 510: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - ReplaceVariable a -> _set
   * 29 Weak Mutation 511: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - InsertUnaryOp Negation of size
   * 30 Weak Mutation 546: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - DeleteField: FREELjava/lang/Object;
   * 31 Weak Mutation 547: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceComparisonOperator == -> !=
   * 32 Weak Mutation 544: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC -1 i
   * 33 Weak Mutation 545: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable FREE -> REMOVED
   * 34 Weak Mutation 575: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:361 - ReplaceVariable a -> k
   * 35 Weak Mutation 574: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:361 - ReplaceVariable a -> _set
   * 36 Weak Mutation 512: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - InsertUnaryOp IINC 1 size
   * 37 Weak Mutation 513: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - InsertUnaryOp IINC -1 size
   * 38 Weak Mutation 514: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - ReplaceComparisonOperator >= -> ==
   * 39 Weak Mutation 524: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:353 - DeleteField: _set[Ljava/lang/Object;
   * 40 Weak Mutation 525: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable k -> a
   * 41 Weak Mutation 527: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceConstant - 0 -> 1
   * 42 Weak Mutation 533: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> j
   * 43 Weak Mutation 532: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - InsertUnaryOp IINC -1 i
   * 44 Weak Mutation 534: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> size
   * 45 Weak Mutation 529: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> size
   * 46 Weak Mutation 528: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> j
   * 47 Weak Mutation 531: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - InsertUnaryOp IINC 1 i
   * 48 Weak Mutation 530: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - InsertUnaryOp Negation of i
   * 49 Weak Mutation 541: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> size
   * 50 Weak Mutation 540: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> j
   * 51 Weak Mutation 543: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC 1 i
   * 52 Weak Mutation 542: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp Negation of i
   * 53 Weak Mutation 537: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceComparisonOperator <= -> -1
   * 54 Weak Mutation 536: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceComparisonOperator <= -> <
   * 55 Weak Mutation 538: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable k -> a
   * 56 Weak Mutation 509: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:346 - DeleteStatement: size()I
   * 57 Weak Mutation 510: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - ReplaceVariable a -> _set
   * 58 Weak Mutation 511: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - InsertUnaryOp Negation of size
   * 59 Weak Mutation 550: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> j
   * 60 Weak Mutation 551: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> size
   * 61 Weak Mutation 548: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable k -> a
   * 62 Weak Mutation 546: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - DeleteField: FREELjava/lang/Object;
   * 63 Weak Mutation 547: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceComparisonOperator == -> !=
   * 64 Weak Mutation 544: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC -1 i
   * 65 Weak Mutation 545: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable FREE -> REMOVED
   * 66 Weak Mutation 558: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable a -> _set
   * 67 Weak Mutation 559: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable a -> k
   * 68 Weak Mutation 556: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - DeleteField: REMOVEDLjava/lang/Object;
   * 69 Weak Mutation 557: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceComparisonOperator == -> !=
   * 70 Weak Mutation 554: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC -1 i
   * 71 Weak Mutation 555: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable REMOVED -> FREE
   * 72 Weak Mutation 552: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp Negation of i
   * 73 Weak Mutation 553: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC 1 i
   * 74 Weak Mutation 567: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable k -> a
   * 75 Weak Mutation 566: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> size
   * 76 Weak Mutation 565: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> i
   * 77 Weak Mutation 564: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC -1 j
   * 78 Weak Mutation 563: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC 1 j
   * 79 Weak Mutation 562: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp Negation of j
   * 80 Weak Mutation 561: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> size
   * 81 Weak Mutation 560: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable j -> i
   * 82 Weak Mutation 575: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:361 - ReplaceVariable a -> k
   * 83 Weak Mutation 574: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:361 - ReplaceVariable a -> _set
   * 84 Weak Mutation 573: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC -1 i
   * 85 Weak Mutation 572: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp IINC 1 i
   * 86 Weak Mutation 571: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - InsertUnaryOp Negation of i
   * 87 Weak Mutation 570: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable i -> size
   * 88 Weak Mutation 569: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:358 - ReplaceVariable i -> j
   * 89 Weak Mutation 512: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - InsertUnaryOp IINC 1 size
   * 90 Weak Mutation 513: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - InsertUnaryOp IINC -1 size
   * 91 Weak Mutation 514: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:347 - ReplaceComparisonOperator >= -> ==
   * 92 Weak Mutation 524: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:353 - DeleteField: _set[Ljava/lang/Object;
   * 93 Weak Mutation 525: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable k -> a
   * 94 Weak Mutation 527: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceConstant - 0 -> 1
   * 95 Weak Mutation 533: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> j
   * 96 Weak Mutation 532: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - InsertUnaryOp IINC -1 i
   * 97 Weak Mutation 534: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> size
   * 98 Weak Mutation 529: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> size
   * 99 Weak Mutation 528: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceVariable i -> j
   * 100 Weak Mutation 531: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - InsertUnaryOp IINC 1 i
   * 101 Weak Mutation 530: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - InsertUnaryOp Negation of i
   * 102 Weak Mutation 541: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> size
   * 103 Weak Mutation 540: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable i -> j
   * 104 Weak Mutation 543: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp IINC 1 i
   * 105 Weak Mutation 542: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - InsertUnaryOp Negation of i
   * 106 Weak Mutation 537: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceComparisonOperator <= -> -1
   * 107 Weak Mutation 536: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:355 - ReplaceComparisonOperator <= -> <
   * 108 Weak Mutation 538: gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:356 - ReplaceVariable k -> a
   * 109 gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I10 Branch 28 IF_ICMPGE L347 - true
   * 110 gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L355 - true
   * 111 gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L355 - false
   * 112 gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I44 Branch 30 IF_ACMPEQ L356 - true
   */

  @Test
  public void test14()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>(Integer.MIN_VALUE);
      tObjectIntHashMap0.put((Integer) 647, 1877);
      Integer[] integerArray0 = new Integer[3];
      Integer[] integerArray1 = tObjectIntHashMap0.keys(integerArray0);
      assertEquals(false, tObjectIntHashMap0.isEmpty());
      assertSame(integerArray0, integerArray1);
  }

  //Test case number: 15
  /*
   * 81 covered goals:
   * 1 Weak Mutation 599: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - InsertUnaryOp Negation of i
   * 2 Weak Mutation 598: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - ReplaceVariable i -> j
   * 3 Weak Mutation 601: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - InsertUnaryOp IINC -1 i
   * 4 Weak Mutation 600: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - InsertUnaryOp IINC 1 i
   * 5 Weak Mutation 603: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - DeleteField: REMOVEDLjava/lang/Object;
   * 6 Weak Mutation 602: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - ReplaceVariable REMOVED -> FREE
   * 7 Weak Mutation 604: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - ReplaceComparisonOperator == -> !=
   * 8 Weak Mutation 610: gnu.trove.map.hash.TObjectIntHashMap.values()[I:379 - ReplaceVariable j -> i
   * 9 Weak Mutation 611: gnu.trove.map.hash.TObjectIntHashMap.values()[I:379 - ReplaceVariable v -> vals
   * 10 Weak Mutation 608: gnu.trove.map.hash.TObjectIntHashMap.values()[I:379 - InsertUnaryOp IINC 1 j
   * 11 Weak Mutation 609: gnu.trove.map.hash.TObjectIntHashMap.values()[I:379 - InsertUnaryOp IINC -1 j
   * 12 Weak Mutation 614: gnu.trove.map.hash.TObjectIntHashMap.values()[I:379 - InsertUnaryOp IINC 1 i
   * 13 Weak Mutation 615: gnu.trove.map.hash.TObjectIntHashMap.values()[I:379 - InsertUnaryOp IINC -1 i
   * 14 Weak Mutation 612: gnu.trove.map.hash.TObjectIntHashMap.values()[I:379 - ReplaceVariable i -> j
   * 15 Weak Mutation 613: gnu.trove.map.hash.TObjectIntHashMap.values()[I:379 - InsertUnaryOp Negation of i
   * 16 Weak Mutation 605: gnu.trove.map.hash.TObjectIntHashMap.values()[I:379 - ReplaceVariable vals -> v
   * 17 Weak Mutation 607: gnu.trove.map.hash.TObjectIntHashMap.values()[I:379 - InsertUnaryOp Negation of j
   * 18 Weak Mutation 606: gnu.trove.map.hash.TObjectIntHashMap.values()[I:379 - ReplaceVariable j -> i
   * 19 gnu.trove.map.hash.TObjectIntHashMap.values()[I: I34 Branch 33 IF_ACMPEQ L378 - false
   * 20 gnu.trove.map.hash.TObjectIntHashMap.values()[I: I39 Branch 34 IF_ACMPEQ L378 - false
   * 21 Weak Mutation 616: gnu.trove.map.hash.TObjectIntHashMap.values()[I:382 - ReplaceVariable vals -> v
   * 22 Weak Mutation 576: gnu.trove.map.hash.TObjectIntHashMap.values()[I:373 - DeleteStatement: size()I
   * 23 Weak Mutation 577: gnu.trove.map.hash.TObjectIntHashMap.values()[I:374 - DeleteField: _values[I
   * 24 Weak Mutation 578: gnu.trove.map.hash.TObjectIntHashMap.values()[I:375 - DeleteField: _set[Ljava/lang/Object;
   * 25 Weak Mutation 579: gnu.trove.map.hash.TObjectIntHashMap.values()[I:377 - ReplaceVariable v -> vals
   * 26 Weak Mutation 580: gnu.trove.map.hash.TObjectIntHashMap.values()[I:377 - ReplaceConstant - 0 -> 1
   * 27 Weak Mutation 581: gnu.trove.map.hash.TObjectIntHashMap.values()[I:377 - ReplaceVariable i -> j
   * 28 Weak Mutation 582: gnu.trove.map.hash.TObjectIntHashMap.values()[I:377 - InsertUnaryOp Negation of i
   * 29 Weak Mutation 583: gnu.trove.map.hash.TObjectIntHashMap.values()[I:377 - InsertUnaryOp IINC 1 i
   * 30 Weak Mutation 584: gnu.trove.map.hash.TObjectIntHashMap.values()[I:377 - InsertUnaryOp IINC -1 i
   * 31 Weak Mutation 585: gnu.trove.map.hash.TObjectIntHashMap.values()[I:377 - ReplaceVariable i -> j
   * 32 Weak Mutation 587: gnu.trove.map.hash.TObjectIntHashMap.values()[I:377 - ReplaceComparisonOperator <= -> <
   * 33 Weak Mutation 588: gnu.trove.map.hash.TObjectIntHashMap.values()[I:377 - ReplaceComparisonOperator <= -> -1
   * 34 Weak Mutation 590: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - ReplaceVariable i -> j
   * 35 Weak Mutation 591: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - InsertUnaryOp Negation of i
   * 36 Weak Mutation 593: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - InsertUnaryOp IINC -1 i
   * 37 Weak Mutation 592: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - InsertUnaryOp IINC 1 i
   * 38 Weak Mutation 595: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - DeleteField: FREELjava/lang/Object;
   * 39 Weak Mutation 594: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - ReplaceVariable FREE -> REMOVED
   * 40 Weak Mutation 596: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - ReplaceComparisonOperator == -> !=
   * 41 Weak Mutation 610: gnu.trove.map.hash.TObjectIntHashMap.values()[I:379 - ReplaceVariable j -> i
   * 42 Weak Mutation 611: gnu.trove.map.hash.TObjectIntHashMap.values()[I:379 - ReplaceVariable v -> vals
   * 43 Weak Mutation 608: gnu.trove.map.hash.TObjectIntHashMap.values()[I:379 - InsertUnaryOp IINC 1 j
   * 44 Weak Mutation 609: gnu.trove.map.hash.TObjectIntHashMap.values()[I:379 - InsertUnaryOp IINC -1 j
   * 45 Weak Mutation 614: gnu.trove.map.hash.TObjectIntHashMap.values()[I:379 - InsertUnaryOp IINC 1 i
   * 46 Weak Mutation 615: gnu.trove.map.hash.TObjectIntHashMap.values()[I:379 - InsertUnaryOp IINC -1 i
   * 47 Weak Mutation 612: gnu.trove.map.hash.TObjectIntHashMap.values()[I:379 - ReplaceVariable i -> j
   * 48 Weak Mutation 613: gnu.trove.map.hash.TObjectIntHashMap.values()[I:379 - InsertUnaryOp Negation of i
   * 49 Weak Mutation 616: gnu.trove.map.hash.TObjectIntHashMap.values()[I:382 - ReplaceVariable vals -> v
   * 50 Weak Mutation 576: gnu.trove.map.hash.TObjectIntHashMap.values()[I:373 - DeleteStatement: size()I
   * 51 Weak Mutation 577: gnu.trove.map.hash.TObjectIntHashMap.values()[I:374 - DeleteField: _values[I
   * 52 Weak Mutation 578: gnu.trove.map.hash.TObjectIntHashMap.values()[I:375 - DeleteField: _set[Ljava/lang/Object;
   * 53 Weak Mutation 579: gnu.trove.map.hash.TObjectIntHashMap.values()[I:377 - ReplaceVariable v -> vals
   * 54 Weak Mutation 580: gnu.trove.map.hash.TObjectIntHashMap.values()[I:377 - ReplaceConstant - 0 -> 1
   * 55 Weak Mutation 581: gnu.trove.map.hash.TObjectIntHashMap.values()[I:377 - ReplaceVariable i -> j
   * 56 Weak Mutation 582: gnu.trove.map.hash.TObjectIntHashMap.values()[I:377 - InsertUnaryOp Negation of i
   * 57 Weak Mutation 583: gnu.trove.map.hash.TObjectIntHashMap.values()[I:377 - InsertUnaryOp IINC 1 i
   * 58 Weak Mutation 584: gnu.trove.map.hash.TObjectIntHashMap.values()[I:377 - InsertUnaryOp IINC -1 i
   * 59 Weak Mutation 585: gnu.trove.map.hash.TObjectIntHashMap.values()[I:377 - ReplaceVariable i -> j
   * 60 Weak Mutation 587: gnu.trove.map.hash.TObjectIntHashMap.values()[I:377 - ReplaceComparisonOperator <= -> <
   * 61 Weak Mutation 588: gnu.trove.map.hash.TObjectIntHashMap.values()[I:377 - ReplaceComparisonOperator <= -> -1
   * 62 Weak Mutation 590: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - ReplaceVariable i -> j
   * 63 Weak Mutation 591: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - InsertUnaryOp Negation of i
   * 64 Weak Mutation 593: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - InsertUnaryOp IINC -1 i
   * 65 Weak Mutation 592: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - InsertUnaryOp IINC 1 i
   * 66 Weak Mutation 595: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - DeleteField: FREELjava/lang/Object;
   * 67 Weak Mutation 594: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - ReplaceVariable FREE -> REMOVED
   * 68 Weak Mutation 596: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - ReplaceComparisonOperator == -> !=
   * 69 Weak Mutation 599: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - InsertUnaryOp Negation of i
   * 70 Weak Mutation 598: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - ReplaceVariable i -> j
   * 71 Weak Mutation 601: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - InsertUnaryOp IINC -1 i
   * 72 Weak Mutation 600: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - InsertUnaryOp IINC 1 i
   * 73 Weak Mutation 603: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - DeleteField: REMOVEDLjava/lang/Object;
   * 74 Weak Mutation 602: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - ReplaceVariable REMOVED -> FREE
   * 75 Weak Mutation 605: gnu.trove.map.hash.TObjectIntHashMap.values()[I:379 - ReplaceVariable vals -> v
   * 76 Weak Mutation 604: gnu.trove.map.hash.TObjectIntHashMap.values()[I:378 - ReplaceComparisonOperator == -> !=
   * 77 Weak Mutation 607: gnu.trove.map.hash.TObjectIntHashMap.values()[I:379 - InsertUnaryOp Negation of j
   * 78 Weak Mutation 606: gnu.trove.map.hash.TObjectIntHashMap.values()[I:379 - ReplaceVariable j -> i
   * 79 gnu.trove.map.hash.TObjectIntHashMap.values()[I: I27 Branch 32 IFLE L377 - true
   * 80 gnu.trove.map.hash.TObjectIntHashMap.values()[I: I27 Branch 32 IFLE L377 - false
   * 81 gnu.trove.map.hash.TObjectIntHashMap.values()[I: I34 Branch 33 IF_ACMPEQ L378 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>((-1107));
      tObjectIntHashMap0.adjustOrPutValue((Integer) 89, (-1), 413);
      tObjectIntHashMap0.values();
      assertEquals(false, tObjectIntHashMap0.isEmpty());
      assertEquals("{89=413}", tObjectIntHashMap0.toString());
  }

  //Test case number: 16
  /*
   * 145 covered goals:
   * 1 Weak Mutation 653: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - InsertUnaryOp Negation of i
   * 2 Weak Mutation 652: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - ReplaceVariable i -> size
   * 3 Weak Mutation 655: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - InsertUnaryOp IINC -1 i
   * 4 Weak Mutation 654: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - InsertUnaryOp IINC 1 i
   * 5 Weak Mutation 651: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - ReplaceVariable i -> j
   * 6 Weak Mutation 656: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - ReplaceVariable REMOVED -> FREE
   * 7 Weak Mutation 657: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - DeleteField: REMOVEDLjava/lang/Object;
   * 8 Weak Mutation 658: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - ReplaceComparisonOperator == -> !=
   * 9 Weak Mutation 672: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - InsertUnaryOp IINC -1 i
   * 10 Weak Mutation 668: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - ReplaceVariable i -> j
   * 11 Weak Mutation 669: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - ReplaceVariable i -> size
   * 12 Weak Mutation 670: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - InsertUnaryOp Negation of i
   * 13 Weak Mutation 671: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - InsertUnaryOp IINC 1 i
   * 14 Weak Mutation 664: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - InsertUnaryOp IINC -1 j
   * 15 Weak Mutation 665: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - ReplaceVariable j -> i
   * 16 Weak Mutation 666: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - ReplaceVariable j -> size
   * 17 Weak Mutation 667: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - ReplaceVariable v -> array
   * 18 Weak Mutation 660: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - ReplaceVariable j -> i
   * 19 Weak Mutation 661: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - ReplaceVariable j -> size
   * 20 Weak Mutation 662: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - InsertUnaryOp Negation of j
   * 21 Weak Mutation 663: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - InsertUnaryOp IINC 1 j
   * 22 Weak Mutation 659: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - ReplaceVariable array -> v
   * 23 gnu.trove.map.hash.TObjectIntHashMap.values([I)[I: I44 Branch 37 IF_ACMPEQ L397 - false
   * 24 gnu.trove.map.hash.TObjectIntHashMap.values([I)[I: I49 Branch 38 IF_ACMPEQ L397 - false
   * 25 Weak Mutation 618: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:389 - InsertUnaryOp Negation of size
   * 26 Weak Mutation 619: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:389 - InsertUnaryOp IINC 1 size
   * 27 Weak Mutation 617: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:388 - DeleteStatement: size()I
   * 28 Weak Mutation 620: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:389 - InsertUnaryOp IINC -1 size
   * 29 Weak Mutation 621: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:389 - ReplaceComparisonOperator >= -> ==
   * 30 Weak Mutation 627: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:393 - DeleteField: _values[I
   * 31 Weak Mutation 631: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:396 - ReplaceVariable i -> j
   * 32 Weak Mutation 630: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:396 - ReplaceConstant - 0 -> 1
   * 33 Weak Mutation 629: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:396 - ReplaceVariable v -> array
   * 34 Weak Mutation 628: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:394 - DeleteField: _set[Ljava/lang/Object;
   * 35 Weak Mutation 635: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:396 - InsertUnaryOp IINC -1 i
   * 36 Weak Mutation 634: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:396 - InsertUnaryOp IINC 1 i
   * 37 Weak Mutation 633: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:396 - InsertUnaryOp Negation of i
   * 38 Weak Mutation 632: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:396 - ReplaceVariable i -> size
   * 39 Weak Mutation 639: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:396 - ReplaceComparisonOperator <= -> <
   * 40 Weak Mutation 637: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:396 - ReplaceVariable i -> size
   * 41 Weak Mutation 636: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:396 - ReplaceVariable i -> j
   * 42 Weak Mutation 686: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:402 - InsertUnaryOp -1
   * 43 Weak Mutation 685: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:402 - InsertUnaryOp +1
   * 44 Weak Mutation 684: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:402 - InsertUnaryOp Negation
   * 45 Weak Mutation 683: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:402 - InsertUnaryOp IINC -1 size
   * 46 Weak Mutation 682: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:402 - InsertUnaryOp IINC 1 size
   * 47 Weak Mutation 681: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:402 - InsertUnaryOp Negation of size
   * 48 Weak Mutation 680: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:402 - ReplaceVariable array -> v
   * 49 Weak Mutation 679: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:401 - ReplaceComparisonOperator <= -> -1
   * 50 Weak Mutation 676: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:401 - InsertUnaryOp IINC -1 size
   * 51 Weak Mutation 675: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:401 - InsertUnaryOp IINC 1 size
   * 52 Weak Mutation 674: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:401 - InsertUnaryOp Negation of size
   * 53 Weak Mutation 673: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:401 - ReplaceVariable array -> v
   * 54 Weak Mutation 688: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:404 - ReplaceVariable array -> v
   * 55 Weak Mutation 649: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - ReplaceComparisonOperator == -> !=
   * 56 Weak Mutation 648: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - DeleteField: FREELjava/lang/Object;
   * 57 Weak Mutation 645: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - InsertUnaryOp IINC 1 i
   * 58 Weak Mutation 644: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - InsertUnaryOp Negation of i
   * 59 Weak Mutation 647: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - ReplaceVariable FREE -> REMOVED
   * 60 Weak Mutation 646: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - InsertUnaryOp IINC -1 i
   * 61 Weak Mutation 640: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:396 - ReplaceComparisonOperator <= -> -1
   * 62 Weak Mutation 643: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - ReplaceVariable i -> size
   * 63 Weak Mutation 642: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - ReplaceVariable i -> j
   * 64 Weak Mutation 762: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - ReplaceVariable put_amount -> adjust_amount
   * 65 Weak Mutation 763: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - InsertUnaryOp Negation of put_amount
   * 66 Weak Mutation 760: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - InsertUnaryOp IINC -1 index
   * 67 Weak Mutation 761: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - ReplaceVariable put_amount -> index
   * 68 Weak Mutation 766: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:449 - ReplaceConstant - 1 -> 0
   * 69 Weak Mutation 764: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - InsertUnaryOp IINC 1 put_amount
   * 70 Weak Mutation 765: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - InsertUnaryOp IINC -1 put_amount
   * 71 Weak Mutation 755: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - DeleteField: _values[I
   * 72 Weak Mutation 758: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - InsertUnaryOp Negation of index
   * 73 Weak Mutation 759: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - InsertUnaryOp IINC 1 index
   * 74 Weak Mutation 756: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - ReplaceVariable index -> adjust_amount
   * 75 Weak Mutation 757: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:448 - ReplaceVariable index -> put_amount
   * 76 Weak Mutation 726: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:443 - ReplaceComparisonOperator >= -> ==
   * 77 Weak Mutation 770: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:455 - DeleteField: consumeFreeSlotZ
   * 78 Weak Mutation 771: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:455 - DeleteStatement: postInsertHook(Z)V
   * 79 Weak Mutation 769: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:455 - InsertUnaryOp Negation
   * 80 Weak Mutation 618: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:389 - InsertUnaryOp Negation of size
   * 81 Weak Mutation 619: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:389 - InsertUnaryOp IINC 1 size
   * 82 Weak Mutation 617: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:388 - DeleteStatement: size()I
   * 83 Weak Mutation 620: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:389 - InsertUnaryOp IINC -1 size
   * 84 Weak Mutation 621: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:389 - ReplaceComparisonOperator >= -> ==
   * 85 Weak Mutation 627: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:393 - DeleteField: _values[I
   * 86 Weak Mutation 631: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:396 - ReplaceVariable i -> j
   * 87 Weak Mutation 630: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:396 - ReplaceConstant - 0 -> 1
   * 88 Weak Mutation 629: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:396 - ReplaceVariable v -> array
   * 89 Weak Mutation 628: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:394 - DeleteField: _set[Ljava/lang/Object;
   * 90 Weak Mutation 635: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:396 - InsertUnaryOp IINC -1 i
   * 91 Weak Mutation 634: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:396 - InsertUnaryOp IINC 1 i
   * 92 Weak Mutation 633: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:396 - InsertUnaryOp Negation of i
   * 93 Weak Mutation 632: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:396 - ReplaceVariable i -> size
   * 94 Weak Mutation 639: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:396 - ReplaceComparisonOperator <= -> <
   * 95 Weak Mutation 637: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:396 - ReplaceVariable i -> size
   * 96 Weak Mutation 636: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:396 - ReplaceVariable i -> j
   * 97 Weak Mutation 686: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:402 - InsertUnaryOp -1
   * 98 Weak Mutation 685: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:402 - InsertUnaryOp +1
   * 99 Weak Mutation 684: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:402 - InsertUnaryOp Negation
   * 100 Weak Mutation 683: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:402 - InsertUnaryOp IINC -1 size
   * 101 Weak Mutation 682: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:402 - InsertUnaryOp IINC 1 size
   * 102 Weak Mutation 681: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:402 - InsertUnaryOp Negation of size
   * 103 Weak Mutation 680: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:402 - ReplaceVariable array -> v
   * 104 Weak Mutation 679: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:401 - ReplaceComparisonOperator <= -> -1
   * 105 Weak Mutation 676: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:401 - InsertUnaryOp IINC -1 size
   * 106 Weak Mutation 675: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:401 - InsertUnaryOp IINC 1 size
   * 107 Weak Mutation 674: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:401 - InsertUnaryOp Negation of size
   * 108 Weak Mutation 673: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:401 - ReplaceVariable array -> v
   * 109 Weak Mutation 672: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - InsertUnaryOp IINC -1 i
   * 110 Weak Mutation 688: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:404 - ReplaceVariable array -> v
   * 111 Weak Mutation 653: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - InsertUnaryOp Negation of i
   * 112 Weak Mutation 652: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - ReplaceVariable i -> size
   * 113 Weak Mutation 655: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - InsertUnaryOp IINC -1 i
   * 114 Weak Mutation 654: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - InsertUnaryOp IINC 1 i
   * 115 Weak Mutation 649: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - ReplaceComparisonOperator == -> !=
   * 116 Weak Mutation 648: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - DeleteField: FREELjava/lang/Object;
   * 117 Weak Mutation 651: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - ReplaceVariable i -> j
   * 118 Weak Mutation 645: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - InsertUnaryOp IINC 1 i
   * 119 Weak Mutation 644: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - InsertUnaryOp Negation of i
   * 120 Weak Mutation 647: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - ReplaceVariable FREE -> REMOVED
   * 121 Weak Mutation 646: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - InsertUnaryOp IINC -1 i
   * 122 Weak Mutation 640: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:396 - ReplaceComparisonOperator <= -> -1
   * 123 Weak Mutation 643: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - ReplaceVariable i -> size
   * 124 Weak Mutation 642: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - ReplaceVariable i -> j
   * 125 Weak Mutation 668: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - ReplaceVariable i -> j
   * 126 Weak Mutation 669: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - ReplaceVariable i -> size
   * 127 Weak Mutation 670: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - InsertUnaryOp Negation of i
   * 128 Weak Mutation 671: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - InsertUnaryOp IINC 1 i
   * 129 Weak Mutation 664: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - InsertUnaryOp IINC -1 j
   * 130 Weak Mutation 665: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - ReplaceVariable j -> i
   * 131 Weak Mutation 666: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - ReplaceVariable j -> size
   * 132 Weak Mutation 667: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - ReplaceVariable v -> array
   * 133 Weak Mutation 660: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - ReplaceVariable j -> i
   * 134 Weak Mutation 661: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - ReplaceVariable j -> size
   * 135 Weak Mutation 662: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - InsertUnaryOp Negation of j
   * 136 Weak Mutation 663: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - InsertUnaryOp IINC 1 j
   * 137 Weak Mutation 656: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - ReplaceVariable REMOVED -> FREE
   * 138 Weak Mutation 657: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - DeleteField: REMOVEDLjava/lang/Object;
   * 139 Weak Mutation 658: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:397 - ReplaceComparisonOperator == -> !=
   * 140 Weak Mutation 659: gnu.trove.map.hash.TObjectIntHashMap.values([I)[I:398 - ReplaceVariable array -> v
   * 141 gnu.trove.map.hash.TObjectIntHashMap.values([I)[I: I10 Branch 35 IF_ICMPGE L389 - true
   * 142 gnu.trove.map.hash.TObjectIntHashMap.values([I)[I: I37 Branch 36 IFLE L396 - true
   * 143 gnu.trove.map.hash.TObjectIntHashMap.values([I)[I: I37 Branch 36 IFLE L396 - false
   * 144 gnu.trove.map.hash.TObjectIntHashMap.values([I)[I: I44 Branch 37 IF_ACMPEQ L397 - true
   * 145 gnu.trove.map.hash.TObjectIntHashMap.values([I)[I: I65 Branch 39 IF_ICMPLE L401 - false
   */

  @Test
  public void test16()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>(1482, 1482);
      tObjectIntHashMap0.adjustOrPutValue((Integer) 1523, 1482, 1615);
      int[] intArray0 = new int[5];
      tObjectIntHashMap0.values(intArray0);
      assertEquals("{1523=1615}", tObjectIntHashMap0.toString());
      assertEquals(1, tObjectIntHashMap0.size());
  }

  //Test case number: 17
  /*
   * 28 covered goals:
   * 1 Weak Mutation 692: gnu.trove.map.hash.TObjectIntHashMap.increment(Ljava/lang/Object;)Z:420 - DeleteStatement: adjustValue(Ljava/lang/Object;I)Z
   * 2 Weak Mutation 690: gnu.trove.map.hash.TObjectIntHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceVariable key -> REMOVED
   * 3 Weak Mutation 691: gnu.trove.map.hash.TObjectIntHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceConstant - 1 -> 0
   * 4 Weak Mutation 689: gnu.trove.map.hash.TObjectIntHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceVariable key -> FREE
   * 5 Weak Mutation 694: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:426 - ReplaceVariable key -> REMOVED
   * 6 Weak Mutation 695: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:426 - DeleteStatement: index(Ljava/lang/Object;)I
   * 7 Weak Mutation 693: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:426 - ReplaceVariable key -> FREE
   * 8 Weak Mutation 702: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:427 - ReplaceComparisonOperator >= -> -1
   * 9 Weak Mutation 698: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:427 - InsertUnaryOp IINC 1 index
   * 10 Weak Mutation 699: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:427 - InsertUnaryOp IINC -1 index
   * 11 Weak Mutation 696: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:427 - ReplaceVariable index -> amount
   * 12 Weak Mutation 697: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:427 - InsertUnaryOp Negation of index
   * 13 Weak Mutation 703: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:428 - ReplaceConstant - 0 -> 1
   * 14 gnu.trove.map.hash.TObjectIntHashMap.increment(Ljava/lang/Object;)Z: root-Branch
   * 15 gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z: I9 Branch 40 IFGE L427 - false
   * 16 Weak Mutation 702: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:427 - ReplaceComparisonOperator >= -> -1
   * 17 Weak Mutation 703: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:428 - ReplaceConstant - 0 -> 1
   * 18 Weak Mutation 698: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:427 - InsertUnaryOp IINC 1 index
   * 19 Weak Mutation 699: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:427 - InsertUnaryOp IINC -1 index
   * 20 Weak Mutation 696: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:427 - ReplaceVariable index -> amount
   * 21 Weak Mutation 697: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:427 - InsertUnaryOp Negation of index
   * 22 Weak Mutation 694: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:426 - ReplaceVariable key -> REMOVED
   * 23 Weak Mutation 695: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:426 - DeleteStatement: index(Ljava/lang/Object;)I
   * 24 Weak Mutation 692: gnu.trove.map.hash.TObjectIntHashMap.increment(Ljava/lang/Object;)Z:420 - DeleteStatement: adjustValue(Ljava/lang/Object;I)Z
   * 25 Weak Mutation 693: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:426 - ReplaceVariable key -> FREE
   * 26 Weak Mutation 690: gnu.trove.map.hash.TObjectIntHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceVariable key -> REMOVED
   * 27 Weak Mutation 691: gnu.trove.map.hash.TObjectIntHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceConstant - 1 -> 0
   * 28 Weak Mutation 689: gnu.trove.map.hash.TObjectIntHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceVariable key -> FREE
   */

  @Test
  public void test17()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>((-1644), (-1644), (-1644));
      boolean boolean0 = tObjectIntHashMap0.increment((Integer) Integer.MAX_VALUE);
      assertEquals(-1644, tObjectIntHashMap0.getNoEntryValue());
      assertEquals(false, boolean0);
  }

  //Test case number: 18
  /*
   * 42 covered goals:
   * 1 Weak Mutation 700: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:427 - ReplaceComparisonOperator >= -> ==
   * 2 Weak Mutation 713: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - ReplaceArithmeticOperator + -> -
   * 3 Weak Mutation 712: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - InsertUnaryOp IINC -1 amount
   * 4 Weak Mutation 715: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - ReplaceArithmeticOperator + -> /
   * 5 Weak Mutation 714: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - ReplaceArithmeticOperator + -> %
   * 6 Weak Mutation 716: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - ReplaceArithmeticOperator + -> *
   * 7 Weak Mutation 705: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - ReplaceVariable index -> amount
   * 8 Weak Mutation 704: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - DeleteField: _values[I
   * 9 Weak Mutation 707: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - InsertUnaryOp IINC 1 index
   * 10 Weak Mutation 706: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - InsertUnaryOp Negation of index
   * 11 Weak Mutation 709: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - ReplaceVariable amount -> index
   * 12 Weak Mutation 708: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - InsertUnaryOp IINC -1 index
   * 13 Weak Mutation 711: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - InsertUnaryOp IINC 1 amount
   * 14 Weak Mutation 710: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - InsertUnaryOp Negation of amount
   * 15 Weak Mutation 717: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:431 - ReplaceConstant - 1 -> 0
   * 16 gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z: I9 Branch 40 IFGE L427 - true
   * 17 Weak Mutation 698: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:427 - InsertUnaryOp IINC 1 index
   * 18 Weak Mutation 699: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:427 - InsertUnaryOp IINC -1 index
   * 19 Weak Mutation 696: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:427 - ReplaceVariable index -> amount
   * 20 Weak Mutation 697: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:427 - InsertUnaryOp Negation of index
   * 21 Weak Mutation 694: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:426 - ReplaceVariable key -> REMOVED
   * 22 Weak Mutation 695: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:426 - DeleteStatement: index(Ljava/lang/Object;)I
   * 23 Weak Mutation 692: gnu.trove.map.hash.TObjectIntHashMap.increment(Ljava/lang/Object;)Z:420 - DeleteStatement: adjustValue(Ljava/lang/Object;I)Z
   * 24 Weak Mutation 693: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:426 - ReplaceVariable key -> FREE
   * 25 Weak Mutation 690: gnu.trove.map.hash.TObjectIntHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceVariable key -> REMOVED
   * 26 Weak Mutation 691: gnu.trove.map.hash.TObjectIntHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceConstant - 1 -> 0
   * 27 Weak Mutation 689: gnu.trove.map.hash.TObjectIntHashMap.increment(Ljava/lang/Object;)Z:420 - ReplaceVariable key -> FREE
   * 28 Weak Mutation 700: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:427 - ReplaceComparisonOperator >= -> ==
   * 29 Weak Mutation 713: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - ReplaceArithmeticOperator + -> -
   * 30 Weak Mutation 712: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - InsertUnaryOp IINC -1 amount
   * 31 Weak Mutation 715: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - ReplaceArithmeticOperator + -> /
   * 32 Weak Mutation 714: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - ReplaceArithmeticOperator + -> %
   * 33 Weak Mutation 717: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:431 - ReplaceConstant - 1 -> 0
   * 34 Weak Mutation 716: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - ReplaceArithmeticOperator + -> *
   * 35 Weak Mutation 705: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - ReplaceVariable index -> amount
   * 36 Weak Mutation 704: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - DeleteField: _values[I
   * 37 Weak Mutation 707: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - InsertUnaryOp IINC 1 index
   * 38 Weak Mutation 706: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - InsertUnaryOp Negation of index
   * 39 Weak Mutation 709: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - ReplaceVariable amount -> index
   * 40 Weak Mutation 708: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - InsertUnaryOp IINC -1 index
   * 41 Weak Mutation 711: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - InsertUnaryOp IINC 1 amount
   * 42 Weak Mutation 710: gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z:430 - InsertUnaryOp Negation of amount
   */

  @Test
  public void test18()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>(Integer.MIN_VALUE);
      tObjectIntHashMap0.put((Integer) 647, 1877);
      boolean boolean0 = tObjectIntHashMap0.increment((Integer) 647);
      assertEquals(false, tObjectIntHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 19
  /*
   * 73 covered goals:
   * 1 Weak Mutation 728: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:443 - ReplaceComparisonOperator >= -> -1
   * 2 Weak Mutation 738: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:444 - ReplaceArithmeticOperator - -> *
   * 3 Weak Mutation 737: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:444 - ReplaceArithmeticOperator - -> /
   * 4 Weak Mutation 736: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:444 - ReplaceArithmeticOperator - -> %
   * 5 Weak Mutation 729: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:444 - ReplaceVariable index -> adjust_amount
   * 6 Weak Mutation 730: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:444 - ReplaceVariable index -> put_amount
   * 7 Weak Mutation 731: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:444 - InsertUnaryOp Negation of index
   * 8 Weak Mutation 732: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:444 - InsertUnaryOp IINC 1 index
   * 9 Weak Mutation 733: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:444 - InsertUnaryOp IINC -1 index
   * 10 Weak Mutation 734: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:444 - ReplaceConstant - 1 -> 0
   * 11 Weak Mutation 735: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:444 - ReplaceArithmeticOperator - -> +
   * 12 Weak Mutation 747: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - InsertUnaryOp Negation of adjust_amount
   * 13 Weak Mutation 745: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - ReplaceVariable adjust_amount -> index
   * 14 Weak Mutation 744: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - InsertUnaryOp IINC -1 index
   * 15 Weak Mutation 751: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - ReplaceArithmeticOperator + -> %
   * 16 Weak Mutation 750: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - ReplaceArithmeticOperator + -> -
   * 17 Weak Mutation 749: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - InsertUnaryOp IINC -1 adjust_amount
   * 18 Weak Mutation 748: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - InsertUnaryOp IINC 1 adjust_amount
   * 19 Weak Mutation 739: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - DeleteField: _values[I
   * 20 Weak Mutation 743: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - InsertUnaryOp IINC 1 index
   * 21 Weak Mutation 742: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - InsertUnaryOp Negation of index
   * 22 Weak Mutation 741: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - ReplaceVariable index -> put_amount
   * 23 Weak Mutation 740: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - ReplaceVariable index -> adjust_amount
   * 24 Weak Mutation 752: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - ReplaceArithmeticOperator + -> /
   * 25 Weak Mutation 753: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - ReplaceArithmeticOperator + -> *
   * 26 Weak Mutation 754: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:446 - ReplaceConstant - 0 -> 1
   * 27 Weak Mutation 774: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:458 - ReplaceVariable newValue -> put_amount
   * 28 gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I: I9 Branch 41 IFGE L443 - false
   * 29 gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I: I51 Branch 42 IFEQ L454 - true
   * 30 Weak Mutation 381: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - ReplaceVariable index -> previous
   * 31 Weak Mutation 359: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:255 - ReplaceVariable index -> previous
   * 32 Weak Mutation 362: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:255 - ReplaceComparisonOperator >= -> ==
   * 33 Weak Mutation 396: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:266 - ReplaceVariable previous -> index
   * 34 Weak Mutation 767: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:454 - InsertUnaryOp Negation of isNewMapping
   * 35 Weak Mutation 719: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:440 - ReplaceVariable key -> REMOVED
   * 36 Weak Mutation 718: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:440 - ReplaceVariable key -> FREE
   * 37 Weak Mutation 720: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:440 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 38 Weak Mutation 721: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:443 - ReplaceVariable index -> adjust_amount
   * 39 Weak Mutation 722: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:443 - ReplaceVariable index -> put_amount
   * 40 Weak Mutation 723: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:443 - InsertUnaryOp Negation of index
   * 41 Weak Mutation 724: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:443 - InsertUnaryOp IINC 1 index
   * 42 Weak Mutation 725: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:443 - InsertUnaryOp IINC -1 index
   * 43 Weak Mutation 775: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:458 - InsertUnaryOp Negation of newValue
   * 44 Weak Mutation 772: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:458 - ReplaceVariable newValue -> index
   * 45 Weak Mutation 773: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:458 - ReplaceVariable newValue -> adjust_amount
   * 46 Weak Mutation 768: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:454 - ReplaceComparisonOperator == -> !=
   * 47 Weak Mutation 747: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - InsertUnaryOp Negation of adjust_amount
   * 48 Weak Mutation 745: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - ReplaceVariable adjust_amount -> index
   * 49 Weak Mutation 744: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - InsertUnaryOp IINC -1 index
   * 50 Weak Mutation 751: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - ReplaceArithmeticOperator + -> %
   * 51 Weak Mutation 750: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - ReplaceArithmeticOperator + -> -
   * 52 Weak Mutation 749: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - InsertUnaryOp IINC -1 adjust_amount
   * 53 Weak Mutation 748: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - InsertUnaryOp IINC 1 adjust_amount
   * 54 Weak Mutation 739: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - DeleteField: _values[I
   * 55 Weak Mutation 738: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:444 - ReplaceArithmeticOperator - -> *
   * 56 Weak Mutation 737: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:444 - ReplaceArithmeticOperator - -> /
   * 57 Weak Mutation 736: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:444 - ReplaceArithmeticOperator - -> %
   * 58 Weak Mutation 743: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - InsertUnaryOp IINC 1 index
   * 59 Weak Mutation 742: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - InsertUnaryOp Negation of index
   * 60 Weak Mutation 741: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - ReplaceVariable index -> put_amount
   * 61 Weak Mutation 740: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - ReplaceVariable index -> adjust_amount
   * 62 Weak Mutation 754: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:446 - ReplaceConstant - 0 -> 1
   * 63 Weak Mutation 752: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - ReplaceArithmeticOperator + -> /
   * 64 Weak Mutation 753: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:445 - ReplaceArithmeticOperator + -> *
   * 65 Weak Mutation 728: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:443 - ReplaceComparisonOperator >= -> -1
   * 66 Weak Mutation 729: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:444 - ReplaceVariable index -> adjust_amount
   * 67 Weak Mutation 730: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:444 - ReplaceVariable index -> put_amount
   * 68 Weak Mutation 731: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:444 - InsertUnaryOp Negation of index
   * 69 Weak Mutation 732: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:444 - InsertUnaryOp IINC 1 index
   * 70 Weak Mutation 733: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:444 - InsertUnaryOp IINC -1 index
   * 71 Weak Mutation 734: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:444 - ReplaceConstant - 1 -> 0
   * 72 Weak Mutation 735: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:444 - ReplaceArithmeticOperator - -> +
   * 73 Weak Mutation 774: gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I:458 - ReplaceVariable newValue -> put_amount
   */

  @Test
  public void test19()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>();
      tObjectIntHashMap0.put("[Warning] apparent concurrent modification of the key set. Size before and after rehash() do not match ", 1523);
      int int0 = tObjectIntHashMap0.adjustOrPutValue("[Warning] apparent concurrent modification of the key set. Size before and after rehash() do not match ", (-2001), (-2001));
      assertEquals(false, tObjectIntHashMap0.isEmpty());
      assertEquals((-478), int0);
  }

  //Test case number: 20
  /*
   * 31 covered goals:
   * 1 Weak Mutation 777: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:482 - DeleteField: _set[Ljava/lang/Object;
   * 2 Weak Mutation 778: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:483 - DeleteField: _values[I
   * 3 Weak Mutation 784: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:484 - ReplaceComparisonOperator <= -> -1
   * 4 Weak Mutation 783: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:484 - ReplaceComparisonOperator <= -> <
   * 5 Weak Mutation 780: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:484 - InsertUnaryOp IINC 1 i
   * 6 Weak Mutation 781: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:484 - InsertUnaryOp IINC -1 i
   * 7 Weak Mutation 779: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:484 - InsertUnaryOp Negation of i
   * 8 Weak Mutation 791: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:485 - ReplaceComparisonOperator == -> !=
   * 9 Weak Mutation 790: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:485 - DeleteField: FREELjava/lang/Object;
   * 10 Weak Mutation 789: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:485 - ReplaceVariable FREE -> REMOVED
   * 11 Weak Mutation 788: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:485 - InsertUnaryOp IINC -1 i
   * 12 Weak Mutation 787: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:485 - InsertUnaryOp IINC 1 i
   * 13 Weak Mutation 786: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:485 - InsertUnaryOp Negation of i
   * 14 Weak Mutation 805: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:490 - ReplaceConstant - 1 -> 0
   * 15 gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I18 Branch 43 IFLE L484 - true
   * 16 gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I18 Branch 43 IFLE L484 - false
   * 17 gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I25 Branch 44 IF_ACMPEQ L485 - true
   * 18 Weak Mutation 805: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:490 - ReplaceConstant - 1 -> 0
   * 19 Weak Mutation 791: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:485 - ReplaceComparisonOperator == -> !=
   * 20 Weak Mutation 790: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:485 - DeleteField: FREELjava/lang/Object;
   * 21 Weak Mutation 789: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:485 - ReplaceVariable FREE -> REMOVED
   * 22 Weak Mutation 788: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:485 - InsertUnaryOp IINC -1 i
   * 23 Weak Mutation 787: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:485 - InsertUnaryOp IINC 1 i
   * 24 Weak Mutation 786: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:485 - InsertUnaryOp Negation of i
   * 25 Weak Mutation 784: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:484 - ReplaceComparisonOperator <= -> -1
   * 26 Weak Mutation 783: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:484 - ReplaceComparisonOperator <= -> <
   * 27 Weak Mutation 780: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:484 - InsertUnaryOp IINC 1 i
   * 28 Weak Mutation 781: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:484 - InsertUnaryOp IINC -1 i
   * 29 Weak Mutation 778: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:483 - DeleteField: _values[I
   * 30 Weak Mutation 779: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:484 - InsertUnaryOp Negation of i
   * 31 Weak Mutation 777: gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:482 - DeleteField: _set[Ljava/lang/Object;
   */

  @Test
  public void test20()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(794);
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>((-125), (float) integerArray0[0], (int) integerArray0[1]);
      boolean boolean0 = tObjectIntHashMap0.forEachValue((TIntProcedure) null);
      assertEquals(794, tObjectIntHashMap0.getNoEntryValue());
      assertEquals(true, boolean0);
  }

  //Test case number: 21
  /*
   * 43 covered goals:
   * 1 Weak Mutation 840: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:525 - ReplaceConstant - 0 -> 1
   * 2 Weak Mutation 841: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:527 - DeleteField: _set[Ljava/lang/Object;
   * 3 Weak Mutation 842: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:528 - DeleteField: _values[I
   * 4 Weak Mutation 843: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:531 - DeleteStatement: tempDisableAutoCompaction()V
   * 5 Weak Mutation 850: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:533 - ReplaceComparisonOperator <= -> -1
   * 6 Weak Mutation 849: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:533 - ReplaceComparisonOperator <= -> <
   * 7 Weak Mutation 846: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:533 - InsertUnaryOp IINC 1 i
   * 8 Weak Mutation 847: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:533 - InsertUnaryOp IINC -1 i
   * 9 Weak Mutation 845: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:533 - InsertUnaryOp Negation of i
   * 10 Weak Mutation 855: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - ReplaceVariable FREE -> REMOVED
   * 11 Weak Mutation 854: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp IINC -1 i
   * 12 Weak Mutation 853: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp IINC 1 i
   * 13 Weak Mutation 852: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp Negation of i
   * 14 Weak Mutation 857: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - ReplaceComparisonOperator == -> !=
   * 15 Weak Mutation 856: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - DeleteField: FREELjava/lang/Object;
   * 16 Weak Mutation 880: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:543 - DeleteStatement: reenableAutoCompaction(Z)V
   * 17 Weak Mutation 879: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:543 - ReplaceConstant - 1 -> 0
   * 18 Weak Mutation 883: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:546 - InsertUnaryOp Negation of modified
   * 19 Weak Mutation 885: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:546 - InsertUnaryOp IINC -1 modified
   * 20 Weak Mutation 884: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:546 - InsertUnaryOp IINC 1 modified
   * 21 gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I27 Branch 51 IFLE L533 - true
   * 22 gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I27 Branch 51 IFLE L533 - false
   * 23 gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I34 Branch 52 IF_ACMPEQ L534 - true
   * 24 Weak Mutation 880: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:543 - DeleteStatement: reenableAutoCompaction(Z)V
   * 25 Weak Mutation 883: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:546 - InsertUnaryOp Negation of modified
   * 26 Weak Mutation 885: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:546 - InsertUnaryOp IINC -1 modified
   * 27 Weak Mutation 884: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:546 - InsertUnaryOp IINC 1 modified
   * 28 Weak Mutation 879: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:543 - ReplaceConstant - 1 -> 0
   * 29 Weak Mutation 850: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:533 - ReplaceComparisonOperator <= -> -1
   * 30 Weak Mutation 849: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:533 - ReplaceComparisonOperator <= -> <
   * 31 Weak Mutation 855: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - ReplaceVariable FREE -> REMOVED
   * 32 Weak Mutation 854: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp IINC -1 i
   * 33 Weak Mutation 853: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp IINC 1 i
   * 34 Weak Mutation 852: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp Negation of i
   * 35 Weak Mutation 857: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - ReplaceComparisonOperator == -> !=
   * 36 Weak Mutation 856: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - DeleteField: FREELjava/lang/Object;
   * 37 Weak Mutation 842: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:528 - DeleteField: _values[I
   * 38 Weak Mutation 843: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:531 - DeleteStatement: tempDisableAutoCompaction()V
   * 39 Weak Mutation 840: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:525 - ReplaceConstant - 0 -> 1
   * 40 Weak Mutation 841: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:527 - DeleteField: _set[Ljava/lang/Object;
   * 41 Weak Mutation 846: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:533 - InsertUnaryOp IINC 1 i
   * 42 Weak Mutation 847: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:533 - InsertUnaryOp IINC -1 i
   * 43 Weak Mutation 845: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:533 - InsertUnaryOp Negation of i
   */

  @Test
  public void test21()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>();
      boolean boolean0 = tObjectIntHashMap0.retainEntries((TObjectIntProcedure<? super Integer>) null);
      assertEquals(23, tObjectIntHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 22
  /*
   * 59 covered goals:
   * 1 Weak Mutation 864: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - ReplaceComparisonOperator == -> !=
   * 2 Weak Mutation 866: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp Negation of i
   * 3 Weak Mutation 867: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp IINC 1 i
   * 4 Weak Mutation 868: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp IINC -1 i
   * 5 Weak Mutation 869: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp Negation of i
   * 6 Weak Mutation 870: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp IINC 1 i
   * 7 Weak Mutation 871: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp IINC -1 i
   * 8 Weak Mutation 872: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - DeleteStatement: execute(Ljava/lang/Object;I)Z
   * 9 Weak Mutation 859: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp Negation of i
   * 10 Weak Mutation 863: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - DeleteField: REMOVEDLjava/lang/Object;
   * 11 Weak Mutation 862: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - ReplaceVariable REMOVED -> FREE
   * 12 Weak Mutation 861: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp IINC -1 i
   * 13 Weak Mutation 860: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp IINC 1 i
   * 14 Weak Mutation 881: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:543 - ReplaceConstant - 1 -> 0
   * 15 Weak Mutation 882: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:543 - DeleteStatement: reenableAutoCompaction(Z)V
   * 16 gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I34 Branch 52 IF_ACMPEQ L534 - false
   * 17 gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I39 Branch 53 IF_ACMPEQ L534 - false
   * 18 Weak Mutation 351: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:248 - InsertUnaryOp Negation of index
   * 19 Weak Mutation 349: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:248 - InsertUnaryOp IINC -1 value
   * 20 Weak Mutation 348: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:248 - InsertUnaryOp IINC 1 value
   * 21 Weak Mutation 347: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:248 - InsertUnaryOp Negation of value
   * 22 Weak Mutation 326: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:245 - ReplaceVariable key -> FREE
   * 23 Weak Mutation 327: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:245 - ReplaceVariable key -> REMOVED
   * 24 Weak Mutation 334: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:246 - ReplaceComparisonOperator >= -> >
   * 25 Weak Mutation 332: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:246 - InsertUnaryOp IINC -1 index
   * 26 Weak Mutation 330: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:246 - InsertUnaryOp Negation of index
   * 27 Weak Mutation 331: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:246 - InsertUnaryOp IINC 1 index
   * 28 Weak Mutation 328: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:245 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 29 Weak Mutation 352: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:248 - InsertUnaryOp IINC 1 index
   * 30 Weak Mutation 353: gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I:248 - InsertUnaryOp IINC -1 index
   * 31 Weak Mutation 850: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:533 - ReplaceComparisonOperator <= -> -1
   * 32 Weak Mutation 855: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - ReplaceVariable FREE -> REMOVED
   * 33 Weak Mutation 854: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp IINC -1 i
   * 34 Weak Mutation 853: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp IINC 1 i
   * 35 Weak Mutation 852: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp Negation of i
   * 36 Weak Mutation 857: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - ReplaceComparisonOperator == -> !=
   * 37 Weak Mutation 856: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - DeleteField: FREELjava/lang/Object;
   * 38 Weak Mutation 842: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:528 - DeleteField: _values[I
   * 39 Weak Mutation 843: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:531 - DeleteStatement: tempDisableAutoCompaction()V
   * 40 Weak Mutation 840: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:525 - ReplaceConstant - 0 -> 1
   * 41 Weak Mutation 841: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:527 - DeleteField: _set[Ljava/lang/Object;
   * 42 Weak Mutation 846: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:533 - InsertUnaryOp IINC 1 i
   * 43 Weak Mutation 847: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:533 - InsertUnaryOp IINC -1 i
   * 44 Weak Mutation 845: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:533 - InsertUnaryOp Negation of i
   * 45 Weak Mutation 881: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:543 - ReplaceConstant - 1 -> 0
   * 46 Weak Mutation 882: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:543 - DeleteStatement: reenableAutoCompaction(Z)V
   * 47 Weak Mutation 864: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - ReplaceComparisonOperator == -> !=
   * 48 Weak Mutation 866: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp Negation of i
   * 49 Weak Mutation 867: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp IINC 1 i
   * 50 Weak Mutation 868: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp IINC -1 i
   * 51 Weak Mutation 869: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp Negation of i
   * 52 Weak Mutation 870: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp IINC 1 i
   * 53 Weak Mutation 871: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp IINC -1 i
   * 54 Weak Mutation 872: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - DeleteStatement: execute(Ljava/lang/Object;I)Z
   * 55 Weak Mutation 859: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp Negation of i
   * 56 Weak Mutation 863: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - DeleteField: REMOVEDLjava/lang/Object;
   * 57 Weak Mutation 862: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - ReplaceVariable REMOVED -> FREE
   * 58 Weak Mutation 861: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp IINC -1 i
   * 59 Weak Mutation 860: gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z:534 - InsertUnaryOp IINC 1 i
   */

  @Test
  public void test22()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>();
      tObjectIntHashMap0.putIfAbsent((Integer) 0, 0);
      // Undeclared exception!
      try {
        tObjectIntHashMap0.retainEntries((TObjectIntProcedure<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 23
  /*
   * 49 covered goals:
   * 1 Weak Mutation 886: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:556 - DeleteField: _set[Ljava/lang/Object;
   * 2 Weak Mutation 887: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:557 - DeleteField: _values[I
   * 3 Weak Mutation 889: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:558 - InsertUnaryOp IINC 1 i
   * 4 Weak Mutation 888: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:558 - InsertUnaryOp Negation of i
   * 5 Weak Mutation 890: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:558 - InsertUnaryOp IINC -1 i
   * 6 Weak Mutation 893: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:558 - ReplaceComparisonOperator <= -> -1
   * 7 Weak Mutation 895: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:559 - InsertUnaryOp Negation of i
   * 8 Weak Mutation 905: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:559 - ReplaceComparisonOperator == -> !=
   * 9 Weak Mutation 904: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:559 - DeleteField: REMOVEDLjava/lang/Object;
   * 10 Weak Mutation 903: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:559 - ReplaceVariable REMOVED -> FREE
   * 11 Weak Mutation 902: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:559 - InsertUnaryOp IINC -1 i
   * 12 Weak Mutation 901: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:559 - InsertUnaryOp IINC 1 i
   * 13 Weak Mutation 900: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:559 - InsertUnaryOp Negation of i
   * 14 Weak Mutation 898: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:559 - ReplaceComparisonOperator = null -> != null
   * 15 Weak Mutation 897: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:559 - InsertUnaryOp IINC -1 i
   * 16 Weak Mutation 896: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:559 - InsertUnaryOp IINC 1 i
   * 17 Weak Mutation 912: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:560 - DeleteStatement: execute(I)I
   * 18 Weak Mutation 911: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:560 - InsertUnaryOp IINC -1 i
   * 19 Weak Mutation 910: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:560 - InsertUnaryOp IINC 1 i
   * 20 Weak Mutation 909: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:560 - InsertUnaryOp Negation of i
   * 21 Weak Mutation 908: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:560 - InsertUnaryOp IINC -1 i
   * 22 Weak Mutation 907: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:560 - InsertUnaryOp IINC 1 i
   * 23 Weak Mutation 906: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:560 - InsertUnaryOp Negation of i
   * 24 gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V: I18 Branch 55 IFLE L558 - false
   * 25 gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V: I24 Branch 56 IFNULL L559 - false
   * 26 gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V: I29 Branch 57 IF_ACMPEQ L559 - false
   * 27 Weak Mutation 887: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:557 - DeleteField: _values[I
   * 28 Weak Mutation 886: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:556 - DeleteField: _set[Ljava/lang/Object;
   * 29 Weak Mutation 889: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:558 - InsertUnaryOp IINC 1 i
   * 30 Weak Mutation 888: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:558 - InsertUnaryOp Negation of i
   * 31 Weak Mutation 890: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:558 - InsertUnaryOp IINC -1 i
   * 32 Weak Mutation 893: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:558 - ReplaceComparisonOperator <= -> -1
   * 33 Weak Mutation 895: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:559 - InsertUnaryOp Negation of i
   * 34 Weak Mutation 912: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:560 - DeleteStatement: execute(I)I
   * 35 Weak Mutation 911: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:560 - InsertUnaryOp IINC -1 i
   * 36 Weak Mutation 910: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:560 - InsertUnaryOp IINC 1 i
   * 37 Weak Mutation 909: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:560 - InsertUnaryOp Negation of i
   * 38 Weak Mutation 908: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:560 - InsertUnaryOp IINC -1 i
   * 39 Weak Mutation 907: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:560 - InsertUnaryOp IINC 1 i
   * 40 Weak Mutation 906: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:560 - InsertUnaryOp Negation of i
   * 41 Weak Mutation 905: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:559 - ReplaceComparisonOperator == -> !=
   * 42 Weak Mutation 904: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:559 - DeleteField: REMOVEDLjava/lang/Object;
   * 43 Weak Mutation 903: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:559 - ReplaceVariable REMOVED -> FREE
   * 44 Weak Mutation 902: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:559 - InsertUnaryOp IINC -1 i
   * 45 Weak Mutation 901: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:559 - InsertUnaryOp IINC 1 i
   * 46 Weak Mutation 900: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:559 - InsertUnaryOp Negation of i
   * 47 Weak Mutation 898: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:559 - ReplaceComparisonOperator = null -> != null
   * 48 Weak Mutation 897: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:559 - InsertUnaryOp IINC -1 i
   * 49 Weak Mutation 896: gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V:559 - InsertUnaryOp IINC 1 i
   */

  @Test
  public void test23()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>();
      // Undeclared exception!
      try {
        tObjectIntHashMap0.transformValues((TIntFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 24
  /*
   * 9 covered goals:
   * 1 Weak Mutation 914: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceVariable other -> REMOVED
   * 2 Weak Mutation 915: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceComparisonOperator != -> ==
   * 3 Weak Mutation 913: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceVariable other -> FREE
   * 4 Weak Mutation 916: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:577 - ReplaceConstant - 0 -> 1
   * 5 gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 58 IFNE L576 - false
   * 6 Weak Mutation 916: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:577 - ReplaceConstant - 0 -> 1
   * 7 Weak Mutation 914: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceVariable other -> REMOVED
   * 8 Weak Mutation 915: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceComparisonOperator != -> ==
   * 9 Weak Mutation 913: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceVariable other -> FREE
   */

  @Test
  public void test24()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>(1039);
      boolean boolean0 = tObjectIntHashMap0.equals((Object) "0");
      assertEquals(0, tObjectIntHashMap0.getNoEntryValue());
      assertEquals(false, boolean0);
      assertEquals(2081, tObjectIntHashMap0.capacity());
  }

  //Test case number: 25
  /*
   * 27 covered goals:
   * 1 Weak Mutation 918: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:579 - ReplaceVariable other -> REMOVED
   * 2 Weak Mutation 917: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:579 - ReplaceVariable other -> FREE
   * 3 Weak Mutation 922: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:580 - ReplaceComparisonOperator == -> -2
   * 4 Weak Mutation 920: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:580 - DeleteStatement: size()I
   * 5 Weak Mutation 919: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:580 - DeleteStatement: size()I
   * 6 Weak Mutation 925: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:584 - DeleteStatement: iterator()Lgnu/trove/iterator/TObjectIntIterator;
   * 7 Weak Mutation 926: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:585 - DeleteStatement: hasNext()Z
   * 8 Weak Mutation 927: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:585 - ReplaceComparisonOperator == -> !=
   * 9 gnu.trove.map.hash.TObjectIntHashMap$TObjectIntHashIterator.<init>(Lgnu/trove/map/hash/TObjectIntHashMap;Lgnu/trove/map/hash/TObjectIntHashMap;)V: root-Branch
   * 10 gnu.trove.map.hash.TObjectIntHashMap.iterator()Lgnu/trove/iterator/TObjectIntIterator;: root-Branch
   * 11 gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 58 IFNE L576 - true
   * 12 gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 59 IF_ICMPEQ L580 - true
   * 13 gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 60 IFEQ L585 - true
   * 14 Weak Mutation 254: gnu.trove.map.hash.TObjectIntHashMap.getNoEntryValue()I:203 - InsertUnaryOp -1
   * 15 Weak Mutation 252: gnu.trove.map.hash.TObjectIntHashMap.getNoEntryValue()I:203 - InsertUnaryOp Negation
   * 16 Weak Mutation 253: gnu.trove.map.hash.TObjectIntHashMap.getNoEntryValue()I:203 - InsertUnaryOp +1
   * 17 Weak Mutation 914: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceVariable other -> REMOVED
   * 18 Weak Mutation 915: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceComparisonOperator != -> ==
   * 19 Weak Mutation 913: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:576 - ReplaceVariable other -> FREE
   * 20 Weak Mutation 926: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:585 - DeleteStatement: hasNext()Z
   * 21 Weak Mutation 927: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:585 - ReplaceComparisonOperator == -> !=
   * 22 Weak Mutation 925: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:584 - DeleteStatement: iterator()Lgnu/trove/iterator/TObjectIntIterator;
   * 23 Weak Mutation 922: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:580 - ReplaceComparisonOperator == -> -2
   * 24 Weak Mutation 920: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:580 - DeleteStatement: size()I
   * 25 Weak Mutation 918: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:579 - ReplaceVariable other -> REMOVED
   * 26 Weak Mutation 919: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:580 - DeleteStatement: size()I
   * 27 Weak Mutation 917: gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z:579 - ReplaceVariable other -> FREE
   */

  @Test
  public void test25()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>();
      TObjectIntCustomHashMap<String> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<String>((HashingStrategy<? super String>) null, (TObjectIntMap<? extends String>) tObjectIntHashMap0);
      boolean boolean0 = tObjectIntHashMap0.equals((Object) tObjectIntCustomHashMap0);
      assertEquals(0, tObjectIntCustomHashMap0.getNoEntryValue());
      assertEquals(true, boolean0);
      assertEquals(23, tObjectIntHashMap0.capacity());
  }

  //Test case number: 26
  /*
   * 110 covered goals:
   * 1 Weak Mutation 992: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - ReplaceComparisonOperator == -> !=
   * 2 Weak Mutation 987: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - InsertUnaryOp Negation of i
   * 3 Weak Mutation 990: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - ReplaceVariable REMOVED -> FREE
   * 4 Weak Mutation 991: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - DeleteField: REMOVEDLjava/lang/Object;
   * 5 Weak Mutation 988: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - InsertUnaryOp IINC 1 i
   * 6 Weak Mutation 989: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - InsertUnaryOp IINC -1 i
   * 7 Weak Mutation 1017: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> -
   * 8 Weak Mutation 1018: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> %
   * 9 Weak Mutation 1019: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> /
   * 10 Weak Mutation 1020: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> *
   * 11 Weak Mutation 1011: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp Negation of i
   * 12 Weak Mutation 1012: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 i
   * 13 Weak Mutation 1013: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 i
   * 14 Weak Mutation 1014: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - DeleteStatement: hashCode()I
   * 15 Weak Mutation 1015: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - ReplaceBitwiseOperator ^ -> &
   * 16 Weak Mutation 1001: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - DeleteStatement: hash(I)I
   * 17 Weak Mutation 1000: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 i
   * 18 Weak Mutation 1005: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 i
   * 19 Weak Mutation 1004: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp Negation of i
   * 20 Weak Mutation 1007: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - ReplaceComparisonOperator != null -> = null
   * 21 Weak Mutation 1006: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 i
   * 22 Weak Mutation 995: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 hashcode
   * 23 Weak Mutation 994: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp Negation of hashcode
   * 24 Weak Mutation 996: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 hashcode
   * 25 Weak Mutation 999: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 i
   * 26 Weak Mutation 998: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp Negation of i
   * 27 gnu.trove.map.hash.TObjectIntHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - false
   * 28 gnu.trove.map.hash.TObjectIntHashMap.hashCode()I: I34 Branch 67 IF_ACMPEQ L614 - false
   * 29 gnu.trove.map.hash.TObjectIntHashMap.hashCode()I: I45 Branch 68 IFNONNULL L615 - true
   * 30 Weak Mutation 315: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:238 - ReplaceVariable key -> FREE
   * 31 Weak Mutation 317: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:238 - DeleteStatement: insertKey(Ljava/lang/Object;)I
   * 32 Weak Mutation 316: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:238 - ReplaceVariable key -> REMOVED
   * 33 Weak Mutation 319: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:239 - InsertUnaryOp Negation of value
   * 34 Weak Mutation 318: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:239 - ReplaceVariable value -> index
   * 35 Weak Mutation 324: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:239 - InsertUnaryOp IINC 1 index
   * 36 Weak Mutation 325: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:239 - InsertUnaryOp IINC -1 index
   * 37 Weak Mutation 322: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:239 - ReplaceVariable index -> value
   * 38 Weak Mutation 323: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:239 - InsertUnaryOp Negation of index
   * 39 Weak Mutation 320: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:239 - InsertUnaryOp IINC 1 value
   * 40 Weak Mutation 321: gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I:239 - InsertUnaryOp IINC -1 value
   * 41 Weak Mutation 380: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - DeleteField: _values[I
   * 42 Weak Mutation 383: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - InsertUnaryOp Negation of index
   * 43 Weak Mutation 382: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - ReplaceVariable index -> value
   * 44 Weak Mutation 356: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:253 - InsertUnaryOp -1
   * 45 Weak Mutation 358: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:254 - ReplaceConstant - 1 -> 0
   * 46 Weak Mutation 354: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:253 - InsertUnaryOp Negation
   * 47 Weak Mutation 355: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:253 - InsertUnaryOp +1
   * 48 Weak Mutation 360: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:255 - ReplaceVariable index -> value
   * 49 Weak Mutation 361: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:255 - InsertUnaryOp Negation of index
   * 50 Weak Mutation 363: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:255 - ReplaceComparisonOperator >= -> >
   * 51 Weak Mutation 395: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:264 - DeleteStatement: postInsertHook(Z)V
   * 52 Weak Mutation 394: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:264 - DeleteField: consumeFreeSlotZ
   * 53 Weak Mutation 393: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:264 - InsertUnaryOp Negation
   * 54 Weak Mutation 392: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:263 - ReplaceComparisonOperator == -> !=
   * 55 Weak Mutation 398: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:266 - InsertUnaryOp Negation of previous
   * 56 Weak Mutation 397: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:266 - ReplaceVariable previous -> value
   * 57 Weak Mutation 387: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - ReplaceVariable value -> previous
   * 58 Weak Mutation 386: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - ReplaceVariable value -> index
   * 59 Weak Mutation 385: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - InsertUnaryOp IINC -1 index
   * 60 Weak Mutation 384: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - InsertUnaryOp IINC 1 index
   * 61 Weak Mutation 391: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:263 - InsertUnaryOp Negation of isNewMapping
   * 62 Weak Mutation 390: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - InsertUnaryOp IINC -1 value
   * 63 Weak Mutation 389: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - InsertUnaryOp IINC 1 value
   * 64 Weak Mutation 388: gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I:261 - InsertUnaryOp Negation of value
   * 65 Weak Mutation 1021: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:619 - InsertUnaryOp Negation of hashcode
   * 66 Weak Mutation 1022: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:619 - InsertUnaryOp IINC 1 hashcode
   * 67 Weak Mutation 1023: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:619 - InsertUnaryOp IINC -1 hashcode
   * 68 Weak Mutation 984: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - ReplaceComparisonOperator == -> !=
   * 69 Weak Mutation 978: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - ReplaceVariable i -> hashcode
   * 70 Weak Mutation 979: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - InsertUnaryOp Negation of i
   * 71 Weak Mutation 976: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:613 - ReplaceComparisonOperator <= -> -1
   * 72 Weak Mutation 982: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - ReplaceVariable FREE -> REMOVED
   * 73 Weak Mutation 983: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - DeleteField: FREELjava/lang/Object;
   * 74 Weak Mutation 980: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - InsertUnaryOp IINC 1 i
   * 75 Weak Mutation 981: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - InsertUnaryOp IINC -1 i
   * 76 Weak Mutation 971: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:613 - InsertUnaryOp IINC 1 i
   * 77 Weak Mutation 970: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:613 - InsertUnaryOp Negation of i
   * 78 Weak Mutation 969: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:613 - ReplaceVariable i -> hashcode
   * 79 Weak Mutation 968: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:612 - DeleteField: _values[I
   * 80 Weak Mutation 975: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:613 - ReplaceComparisonOperator <= -> <
   * 81 Weak Mutation 973: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:613 - ReplaceVariable i -> hashcode
   * 82 Weak Mutation 972: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:613 - InsertUnaryOp IINC -1 i
   * 83 Weak Mutation 967: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:611 - DeleteField: _set[Ljava/lang/Object;
   * 84 Weak Mutation 966: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:610 - ReplaceConstant - 0 -> 1
   * 85 Weak Mutation 1017: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> -
   * 86 Weak Mutation 1018: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> %
   * 87 Weak Mutation 1019: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> /
   * 88 Weak Mutation 1020: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - ReplaceArithmeticOperator + -> *
   * 89 Weak Mutation 1011: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp Negation of i
   * 90 Weak Mutation 1012: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 i
   * 91 Weak Mutation 1013: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 i
   * 92 Weak Mutation 1014: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - DeleteStatement: hashCode()I
   * 93 Weak Mutation 1015: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - ReplaceBitwiseOperator ^ -> &
   * 94 Weak Mutation 1001: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - DeleteStatement: hash(I)I
   * 95 Weak Mutation 1000: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 i
   * 96 Weak Mutation 1005: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 i
   * 97 Weak Mutation 1004: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp Negation of i
   * 98 Weak Mutation 1007: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - ReplaceComparisonOperator != null -> = null
   * 99 Weak Mutation 1006: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 i
   * 100 Weak Mutation 992: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - ReplaceComparisonOperator == -> !=
   * 101 Weak Mutation 995: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 hashcode
   * 102 Weak Mutation 994: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp Negation of hashcode
   * 103 Weak Mutation 996: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp IINC -1 hashcode
   * 104 Weak Mutation 999: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp IINC 1 i
   * 105 Weak Mutation 998: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:615 - InsertUnaryOp Negation of i
   * 106 Weak Mutation 987: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - InsertUnaryOp Negation of i
   * 107 Weak Mutation 990: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - ReplaceVariable REMOVED -> FREE
   * 108 Weak Mutation 991: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - DeleteField: REMOVEDLjava/lang/Object;
   * 109 Weak Mutation 988: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - InsertUnaryOp IINC 1 i
   * 110 Weak Mutation 989: gnu.trove.map.hash.TObjectIntHashMap.hashCode()I:614 - InsertUnaryOp IINC -1 i
   */

  @Test
  public void test26()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>();
      tObjectIntHashMap0.put("", 89);
      int int0 = tObjectIntHashMap0.hashCode();
      assertEquals("{=89}", tObjectIntHashMap0.toString());
      assertEquals(89, int0);
  }

  //Test case number: 27
  /*
   * 67 covered goals:
   * 1 Weak Mutation 1024: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1081 - ReplaceConstant - 0 -> 1
   * 2 Weak Mutation 1025: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1081 - DeleteStatement: writeByte(I)V
   * 3 Weak Mutation 1026: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1087 - InsertUnaryOp Negation
   * 4 Weak Mutation 1027: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1087 - InsertUnaryOp +1
   * 5 Weak Mutation 1028: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1087 - InsertUnaryOp -1
   * 6 Weak Mutation 1030: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1087 - DeleteStatement: writeInt(I)V
   * 7 Weak Mutation 1032: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp +1
   * 8 Weak Mutation 1033: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp -1
   * 9 Weak Mutation 1035: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - DeleteStatement: writeInt(I)V
   * 10 Weak Mutation 1031: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp Negation
   * 11 Weak Mutation 1036: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - DeleteField: _set[Ljava/lang/Object;
   * 12 Weak Mutation 1037: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp Negation of i
   * 13 Weak Mutation 1038: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp IINC 1 i
   * 14 Weak Mutation 1039: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp IINC -1 i
   * 15 Weak Mutation 1041: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - ReplaceComparisonOperator <= -> <
   * 16 Weak Mutation 1042: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - ReplaceComparisonOperator <= -> -1
   * 17 Weak Mutation 1049: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceComparisonOperator == -> !=
   * 18 Weak Mutation 1048: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: REMOVEDLjava/lang/Object;
   * 19 Weak Mutation 1051: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp Negation of i
   * 20 Weak Mutation 1050: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: _set[Ljava/lang/Object;
   * 21 Weak Mutation 1053: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC -1 i
   * 22 Weak Mutation 1052: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC 1 i
   * 23 Weak Mutation 1055: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: FREELjava/lang/Object;
   * 24 Weak Mutation 1054: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceVariable FREE -> REMOVED
   * 25 Weak Mutation 1043: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: _set[Ljava/lang/Object;
   * 26 Weak Mutation 1045: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC 1 i
   * 27 Weak Mutation 1044: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp Negation of i
   * 28 Weak Mutation 1047: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceVariable REMOVED -> FREE
   * 29 Weak Mutation 1046: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC -1 i
   * 30 Weak Mutation 1056: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceComparisonOperator == -> !=
   * 31 gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 69 IFLE L1093 - true
   * 32 gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 69 IFLE L1093 - false
   * 33 gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I39 Branch 70 IF_ACMPEQ L1094 - false
   * 34 gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I45 Branch 71 IF_ACMPEQ L1094 - true
   * 35 Weak Mutation 102: gnu.trove.map.hash.TObjectIntHashMap.<init>(IF)V:107 - InsertUnaryOp +1
   * 36 Weak Mutation 103: gnu.trove.map.hash.TObjectIntHashMap.<init>(IF)V:107 - InsertUnaryOp -1
   * 37 Weak Mutation 101: gnu.trove.map.hash.TObjectIntHashMap.<init>(IF)V:107 - InsertUnaryOp Negation
   * 38 Weak Mutation 1032: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp +1
   * 39 Weak Mutation 1033: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp -1
   * 40 Weak Mutation 1035: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - DeleteStatement: writeInt(I)V
   * 41 Weak Mutation 1036: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - DeleteField: _set[Ljava/lang/Object;
   * 42 Weak Mutation 1037: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp Negation of i
   * 43 Weak Mutation 1038: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp IINC 1 i
   * 44 Weak Mutation 1039: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp IINC -1 i
   * 45 Weak Mutation 1024: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1081 - ReplaceConstant - 0 -> 1
   * 46 Weak Mutation 1025: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1081 - DeleteStatement: writeByte(I)V
   * 47 Weak Mutation 1026: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1087 - InsertUnaryOp Negation
   * 48 Weak Mutation 1027: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1087 - InsertUnaryOp +1
   * 49 Weak Mutation 1028: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1087 - InsertUnaryOp -1
   * 50 Weak Mutation 1030: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1087 - DeleteStatement: writeInt(I)V
   * 51 Weak Mutation 1031: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp Negation
   * 52 Weak Mutation 1049: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceComparisonOperator == -> !=
   * 53 Weak Mutation 1048: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: REMOVEDLjava/lang/Object;
   * 54 Weak Mutation 1051: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp Negation of i
   * 55 Weak Mutation 1050: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: _set[Ljava/lang/Object;
   * 56 Weak Mutation 1053: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC -1 i
   * 57 Weak Mutation 1052: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC 1 i
   * 58 Weak Mutation 1055: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: FREELjava/lang/Object;
   * 59 Weak Mutation 1054: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceVariable FREE -> REMOVED
   * 60 Weak Mutation 1041: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - ReplaceComparisonOperator <= -> <
   * 61 Weak Mutation 1043: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: _set[Ljava/lang/Object;
   * 62 Weak Mutation 1042: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - ReplaceComparisonOperator <= -> -1
   * 63 Weak Mutation 1045: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC 1 i
   * 64 Weak Mutation 1044: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp Negation of i
   * 65 Weak Mutation 1047: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceVariable REMOVED -> FREE
   * 66 Weak Mutation 1046: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC -1 i
   * 67 Weak Mutation 1056: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceComparisonOperator == -> !=
   */

  @Test
  public void test27()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>(0, 599.5365F);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(75);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tObjectIntHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
  }

  //Test case number: 28
  /*
   * 32 covered goals:
   * 1 Weak Mutation 1029: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1087 - DeleteField: no_entry_valueI
   * 2 Weak Mutation 1032: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp +1
   * 3 Weak Mutation 1033: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp -1
   * 4 Weak Mutation 1035: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - DeleteStatement: writeInt(I)V
   * 5 Weak Mutation 1036: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - DeleteField: _set[Ljava/lang/Object;
   * 6 Weak Mutation 1037: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp Negation of i
   * 7 Weak Mutation 1038: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp IINC 1 i
   * 8 Weak Mutation 1039: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - InsertUnaryOp IINC -1 i
   * 9 Weak Mutation 1024: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1081 - ReplaceConstant - 0 -> 1
   * 10 Weak Mutation 1025: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1081 - DeleteStatement: writeByte(I)V
   * 11 Weak Mutation 1026: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1087 - InsertUnaryOp Negation
   * 12 Weak Mutation 1027: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1087 - InsertUnaryOp +1
   * 13 Weak Mutation 1028: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1087 - InsertUnaryOp -1
   * 14 Weak Mutation 1030: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1087 - DeleteStatement: writeInt(I)V
   * 15 Weak Mutation 1031: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1090 - InsertUnaryOp Negation
   * 16 Weak Mutation 1049: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceComparisonOperator == -> !=
   * 17 Weak Mutation 1048: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: REMOVEDLjava/lang/Object;
   * 18 Weak Mutation 1051: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp Negation of i
   * 19 Weak Mutation 1050: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: _set[Ljava/lang/Object;
   * 20 Weak Mutation 1053: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC -1 i
   * 21 Weak Mutation 1052: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC 1 i
   * 22 Weak Mutation 1055: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: FREELjava/lang/Object;
   * 23 Weak Mutation 1054: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceVariable FREE -> REMOVED
   * 24 Weak Mutation 1041: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - ReplaceComparisonOperator <= -> <
   * 25 Weak Mutation 1043: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - DeleteField: _set[Ljava/lang/Object;
   * 26 Weak Mutation 1042: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1093 - ReplaceComparisonOperator <= -> -1
   * 27 Weak Mutation 1045: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC 1 i
   * 28 Weak Mutation 1044: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp Negation of i
   * 29 Weak Mutation 1047: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceVariable REMOVED -> FREE
   * 30 Weak Mutation 1046: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - InsertUnaryOp IINC -1 i
   * 31 Weak Mutation 1056: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1094 - ReplaceComparisonOperator == -> !=
   * 32 Weak Mutation 1029: gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V:1087 - DeleteField: no_entry_valueI
   */

  @Test
  public void test28()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>(75, 75, 615);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(75);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tObjectIntHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
  }

  //Test case number: 29
  /*
   * 26 covered goals:
   * 1 Weak Mutation 1089: gnu.trove.map.hash.TObjectIntHashMap.toString()Ljava/lang/String;:1130 - ReplaceConstant - { -> 
   * 2 Weak Mutation 1090: gnu.trove.map.hash.TObjectIntHashMap.toString()Ljava/lang/String;:1131 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z
   * 3 Weak Mutation 1092: gnu.trove.map.hash.TObjectIntHashMap.toString()Ljava/lang/String;:1141 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 4 Weak Mutation 1091: gnu.trove.map.hash.TObjectIntHashMap.toString()Ljava/lang/String;:1141 - ReplaceConstant - } -> 
   * 5 Weak Mutation 1093: gnu.trove.map.hash.TObjectIntHashMap.toString()Ljava/lang/String;:1142 - DeleteStatement: toString()Ljava/lang/String;
   * 6 gnu.trove.map.hash.TObjectIntHashMap$2.<init>(Lgnu/trove/map/hash/TObjectIntHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 7 gnu.trove.map.hash.TObjectIntHashMap.toString()Ljava/lang/String;: root-Branch
   * 8 Weak Mutation 821: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - ReplaceComparisonOperator == -> !=
   * 9 Weak Mutation 820: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - DeleteField: FREELjava/lang/Object;
   * 10 Weak Mutation 817: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC 1 i
   * 11 Weak Mutation 816: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp Negation of i
   * 12 Weak Mutation 819: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - ReplaceVariable FREE -> REMOVED
   * 13 Weak Mutation 818: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:507 - InsertUnaryOp IINC -1 i
   * 14 Weak Mutation 806: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:504 - DeleteField: _set[Ljava/lang/Object;
   * 15 Weak Mutation 807: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:505 - DeleteField: _values[I
   * 16 Weak Mutation 813: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:506 - ReplaceComparisonOperator <= -> <
   * 17 Weak Mutation 814: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:506 - ReplaceComparisonOperator <= -> -1
   * 18 Weak Mutation 809: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:506 - InsertUnaryOp Negation of i
   * 19 Weak Mutation 810: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:506 - InsertUnaryOp IINC 1 i
   * 20 Weak Mutation 811: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:506 - InsertUnaryOp IINC -1 i
   * 21 Weak Mutation 839: gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z:513 - ReplaceConstant - 1 -> 0
   * 22 Weak Mutation 1092: gnu.trove.map.hash.TObjectIntHashMap.toString()Ljava/lang/String;:1141 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 23 Weak Mutation 1093: gnu.trove.map.hash.TObjectIntHashMap.toString()Ljava/lang/String;:1142 - DeleteStatement: toString()Ljava/lang/String;
   * 24 Weak Mutation 1089: gnu.trove.map.hash.TObjectIntHashMap.toString()Ljava/lang/String;:1130 - ReplaceConstant - { -> 
   * 25 Weak Mutation 1090: gnu.trove.map.hash.TObjectIntHashMap.toString()Ljava/lang/String;:1131 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z
   * 26 Weak Mutation 1091: gnu.trove.map.hash.TObjectIntHashMap.toString()Ljava/lang/String;:1141 - ReplaceConstant - } -> 
   */

  @Test
  public void test29()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>((-1644), (-1644), (-1644));
      String string0 = tObjectIntHashMap0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(-1644, tObjectIntHashMap0.getNoEntryValue());
  }

  //Test case number: 30
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap$TIntValueCollection.<init>(Lgnu/trove/map/hash/TObjectIntHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TObjectIntHashMap.valueCollection()Lgnu/trove/TIntCollection;: root-Branch
   * 3 Weak Mutation 114: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:124 - ReplaceComparisonOperator == -> <=
   */

  @Test
  public void test30()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>((-1644), (-1644), (-1644));
      TIntCollection tIntCollection0 = tObjectIntHashMap0.valueCollection();
      assertEquals(-1644, tIntCollection0.getNoEntryValue());
  }

  //Test case number: 31
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap$KeyView.<init>(Lgnu/trove/map/hash/TObjectIntHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TObjectIntHashMap.keySet()Ljava/util/Set;: root-Branch
   * 3 Weak Mutation 98: gnu.trove.map.hash.TObjectIntHashMap.<init>(I)V:93 - InsertUnaryOp +1
   * 4 Weak Mutation 99: gnu.trove.map.hash.TObjectIntHashMap.<init>(I)V:93 - InsertUnaryOp -1
   * 5 Weak Mutation 97: gnu.trove.map.hash.TObjectIntHashMap.<init>(I)V:93 - InsertUnaryOp Negation
   */

  @Test
  public void test31()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>(1039);
      tObjectIntHashMap0.keySet();
      assertEquals(2081, tObjectIntHashMap0.capacity());
      assertEquals(0, tObjectIntHashMap0.getNoEntryValue());
  }

  //Test case number: 32
  /*
   * 31 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V: I13 Branch 9 IFEQ L138 - true
   * 2 Weak Mutation 110: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:124 - InsertUnaryOp +1
   * 3 Weak Mutation 111: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:124 - InsertUnaryOp -1
   * 4 Weak Mutation 108: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:122 - InsertUnaryOp IINC -1 noEntryValue
   * 5 Weak Mutation 109: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:124 - InsertUnaryOp Negation
   * 6 Weak Mutation 106: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:122 - InsertUnaryOp Negation of noEntryValue
   * 7 Weak Mutation 107: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:122 - InsertUnaryOp IINC 1 noEntryValue
   * 8 Weak Mutation 105: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:122 - ReplaceVariable noEntryValue -> initialCapacity
   * 9 Weak Mutation 119: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:125 - InsertUnaryOp -1
   * 10 Weak Mutation 118: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:125 - InsertUnaryOp +1
   * 11 Weak Mutation 117: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:125 - InsertUnaryOp Negation
   * 12 Weak Mutation 116: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:125 - DeleteField: _values[I
   * 13 Weak Mutation 113: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:124 - ReplaceComparisonOperator == -> >=
   * 14 Weak Mutation 112: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:124 - DeleteField: no_entry_valueI
   * 15 Weak Mutation 122: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:138 - ReplaceComparisonOperator == -> !=
   * 16 Weak Mutation 121: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:125 - DeleteStatement: fill([II)V
   * 17 Weak Mutation 120: gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V:125 - DeleteField: no_entry_valueI
   * 18 Weak Mutation 157: gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V:148 - DeleteStatement: putAll(Lgnu/trove/map/TObjectIntMap;)V
   * 19 Weak Mutation 158: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:162 - InsertUnaryOp Negation of initialCapacity
   * 20 Weak Mutation 159: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:162 - InsertUnaryOp IINC 1 initialCapacity
   * 21 Weak Mutation 168: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:164 - InsertUnaryOp IINC -1 capacity
   * 22 Weak Mutation 163: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:163 - InsertUnaryOp IINC 1 capacity
   * 23 Weak Mutation 162: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:163 - InsertUnaryOp Negation of capacity
   * 24 Weak Mutation 161: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:163 - ReplaceVariable capacity -> initialCapacity
   * 25 Weak Mutation 160: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:162 - InsertUnaryOp IINC -1 initialCapacity
   * 26 Weak Mutation 167: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:164 - InsertUnaryOp IINC 1 capacity
   * 27 Weak Mutation 166: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:164 - InsertUnaryOp Negation of capacity
   * 28 Weak Mutation 165: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:164 - ReplaceVariable capacity -> initialCapacity
   * 29 Weak Mutation 164: gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I:163 - InsertUnaryOp IINC -1 capacity
   * 30 Weak Mutation 447: gnu.trove.map.hash.TObjectIntHashMap.putAll(Lgnu/trove/map/TObjectIntMap;)V:308 - DeleteField: PUT_ALL_PROCLgnu/trove/procedure/TObjectIntProcedure;
   * 31 Weak Mutation 448: gnu.trove.map.hash.TObjectIntHashMap.putAll(Lgnu/trove/map/TObjectIntMap;)V:308 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z
   */

  @Test
  public void test32()  throws Throwable  {
      TObjectIntCustomHashMap<Integer> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<Integer>((HashingStrategy<? super Integer>) null, 366, (-358.98438F), 1809);
      TObjectIntHashMap<Object> tObjectIntHashMap0 = new TObjectIntHashMap<Object>((TObjectIntMap<?>) tObjectIntCustomHashMap0);
      assertEquals(1809, tObjectIntHashMap0.getNoEntryValue());
  }
}
