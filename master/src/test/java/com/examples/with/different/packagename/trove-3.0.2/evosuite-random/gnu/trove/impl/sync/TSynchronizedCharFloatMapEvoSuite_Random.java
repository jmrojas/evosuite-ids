/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedCharFloatMap;
import gnu.trove.impl.sync.TSynchronizedCharSet;
import gnu.trove.impl.sync.TSynchronizedFloatCollection;
import gnu.trove.map.TCharFloatMap;
import gnu.trove.map.hash.TCharFloatHashMap;
import gnu.trove.procedure.TCharFloatProcedure;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedCharFloatMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = 'J';
      charArray0[0] = char0;
      char char1 = 'T';
      charArray0[1] = char1;
      char char2 = 'M';
      charArray0[2] = char2;
      char char3 = 'e';
      charArray0[3] = char3;
      char char4 = '2';
      charArray0[4] = char4;
      char char5 = 'M';
      charArray0[5] = char5;
      char char6 = '1';
      charArray0[6] = char6;
      char char7 = 'q';
      charArray0[7] = char7;
      char char8 = '|';
      charArray0[8] = char8;
      float[] floatArray0 = new float[6];
      float float0 = (-1.0F);
      floatArray0[0] = float0;
      floatArray0[1] = (float) char3;
      floatArray0[2] = (float) char0;
      floatArray0[3] = (float) charArray0[0];
      floatArray0[4] = (float) char4;
      floatArray0[5] = (float) charArray0[7];
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(charArray0, floatArray0);
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap0 = new TSynchronizedCharFloatMap((TCharFloatMap) tCharFloatHashMap0);
      String string0 = tSynchronizedCharFloatMap0.toString();
      assertEquals("{T=101.0, e=74.0, M=113.0, J=-1.0, 2=50.0}", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap();
      Object object0 = null;
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap0 = new TSynchronizedCharFloatMap((TCharFloatMap) tCharFloatHashMap0);
      float float0 = (-672.5738F);
      tSynchronizedCharFloatMap0.containsValue(float0);
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap1 = new TSynchronizedCharFloatMap((TCharFloatMap) tCharFloatHashMap0, object0);
      TCharFloatProcedure tCharFloatProcedure0 = null;
      tSynchronizedCharFloatMap1.iterator();
      // Undeclared exception!
      try {
        tSynchronizedCharFloatMap1.forEachEntry(tCharFloatProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 245;
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(int0, int0);
      String string0 = "";
      Locale locale0 = new Locale(string0, string0);
      Locale locale1 = Locale.JAPAN;
      String string1 = locale0.getDisplayCountry(locale1);
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap0 = new TSynchronizedCharFloatMap((TCharFloatMap) tCharFloatHashMap0, (Object) string1);
      TCharFloatHashMap tCharFloatHashMap1 = new TCharFloatHashMap((TCharFloatMap) tSynchronizedCharFloatMap0);
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap1 = new TSynchronizedCharFloatMap((TCharFloatMap) tCharFloatHashMap1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      float float0 = 0.0F;
      floatArray0[2] = float0;
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) int0;
      float float1 = 1.0F;
      floatArray0[6] = float1;
      float[] floatArray1 = tSynchronizedCharFloatMap1.values(floatArray0);
      assertSame(floatArray0, floatArray1);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 606;
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(int0);
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap0 = new TSynchronizedCharFloatMap((TCharFloatMap) tCharFloatHashMap0);
      String string0 = "";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 1;
      char char0 = 'y';
      float float0 = 0.0F;
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap((int) char0);
      TCharFloatHashMap tCharFloatHashMap1 = new TCharFloatHashMap((TCharFloatMap) tCharFloatHashMap0);
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap0 = new TSynchronizedCharFloatMap((TCharFloatMap) tCharFloatHashMap1);
      tSynchronizedCharFloatMap0.containsValue(float0);
      TCharFloatHashMap tCharFloatHashMap2 = new TCharFloatHashMap(int0, (float) int0, char0, float0);
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap1 = new TSynchronizedCharFloatMap((TCharFloatMap) tCharFloatHashMap2);
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap2 = new TSynchronizedCharFloatMap((TCharFloatMap) tSynchronizedCharFloatMap1);
      tSynchronizedCharFloatMap2.remove(char0);
      int int1 = (-619);
      char char1 = tSynchronizedCharFloatMap2.getNoEntryKey();
      assertEquals('y', char1);
      
      TSynchronizedFloatCollection tSynchronizedFloatCollection0 = (TSynchronizedFloatCollection)tSynchronizedCharFloatMap1.valueCollection();
      assertNotNull(tSynchronizedFloatCollection0);
      
      float float1 = (-686.25195F);
      char char2 = 'H';
      float float2 = (-437.88165F);
      TCharFloatHashMap tCharFloatHashMap3 = new TCharFloatHashMap(int1, float1, char2, float2);
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap3 = new TSynchronizedCharFloatMap((TCharFloatMap) tCharFloatHashMap3);
      TSynchronizedCharSet tSynchronizedCharSet0 = (TSynchronizedCharSet)tSynchronizedCharFloatMap3.keySet();
      assertNotNull(tSynchronizedCharSet0);
      
      char char3 = '|';
      Character character0 = Character.valueOf(char3);
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap4 = new TSynchronizedCharFloatMap((TCharFloatMap) tSynchronizedCharFloatMap3, (Object) character0);
      assertEquals('H', tSynchronizedCharFloatMap3.getNoEntryKey());
  }

  @Test
  public void test5()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = '`';
      charArray0[0] = char0;
      char char1 = '|';
      charArray0[1] = char1;
      char char2 = 'Q';
      charArray0[2] = char2;
      char char3 = '+';
      charArray0[3] = char3;
      char char4 = 'A';
      charArray0[4] = char4;
      char char5 = 'o';
      charArray0[5] = char5;
      char char6 = ':';
      charArray0[6] = char6;
      char char7 = '2';
      charArray0[7] = char7;
      char char8 = ')';
      charArray0[8] = char8;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) charArray0[4];
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(charArray0, floatArray0);
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap0 = new TSynchronizedCharFloatMap((TCharFloatMap) tCharFloatHashMap0);
      TSynchronizedCharSet tSynchronizedCharSet0 = (TSynchronizedCharSet)tSynchronizedCharFloatMap0.keySet();
      assertEquals('\u0000', tSynchronizedCharSet0.getNoEntryValue());
  }

  @Test
  public void test6()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap();
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap0 = new TSynchronizedCharFloatMap((TCharFloatMap) tCharFloatHashMap0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap1 = new TSynchronizedCharFloatMap((TCharFloatMap) tSynchronizedCharFloatMap0);
      String string0 = locale0.getCountry();
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap2 = new TSynchronizedCharFloatMap((TCharFloatMap) tCharFloatHashMap0, (Object) string0);
      tSynchronizedCharFloatMap2.valueCollection();
      char char0 = '\"';
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) char0;
      tSynchronizedCharFloatMap1.values(floatArray0);
      tSynchronizedCharFloatMap2.values();
      tSynchronizedCharFloatMap2.keySet();
      float float0 = tSynchronizedCharFloatMap2.put(char0, char0);
      float float1 = 397.3448F;
      tSynchronizedCharFloatMap0.getNoEntryValue();
      tCharFloatHashMap0.containsValue(float1);
      tSynchronizedCharFloatMap0.put(char0, float1);
      tSynchronizedCharFloatMap0.values();
      tSynchronizedCharFloatMap2.containsValue(float0);
      char char1 = '>';
      tSynchronizedCharFloatMap2.size();
      tSynchronizedCharFloatMap2.containsKey(char1);
      assertEquals(false, tCharFloatHashMap0.isEmpty());
      assertTrue(tSynchronizedCharFloatMap2.equals(tSynchronizedCharFloatMap0));
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-573);
      char char0 = 'p';
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(int0, (float) int0, char0, (float) char0);
      double double0 = 1759.6231812010478;
      Float float0 = new Float(double0);
      tCharFloatHashMap0.equals((Object) float0);
      int int1 = 0;
      TCharFloatHashMap tCharFloatHashMap1 = new TCharFloatHashMap(int1, (float) float0);
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap0 = new TSynchronizedCharFloatMap((TCharFloatMap) tCharFloatHashMap1);
      tSynchronizedCharFloatMap0.containsValue((float) float0);
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap1 = new TSynchronizedCharFloatMap((TCharFloatMap) tCharFloatHashMap0);
      tSynchronizedCharFloatMap1.clear();
      int int2 = 0;
      String string0 = Character.getName(int2);
      boolean boolean0 = tSynchronizedCharFloatMap1.equals((Object) string0);
      assertEquals(false, boolean0);
      
      char[] charArray0 = tSynchronizedCharFloatMap1.keys();
      assertNotNull(charArray0);
      
      TCharFloatProcedure tCharFloatProcedure0 = null;
      tCharFloatHashMap0.retainEntries(tCharFloatProcedure0);
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) int0;
      float float1 = 1658.9534F;
      floatArray0[1] = float1;
      floatArray0[2] = (float) char0;
      floatArray0[3] = (float) char0;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) float0;
      floatArray0[6] = (float) char0;
      floatArray0[7] = (float) int2;
      floatArray0[8] = (float) int0;
      floatArray0[9] = (float) char0;
      float[] floatArray1 = tSynchronizedCharFloatMap0.values(floatArray0);
      assertNotNull(floatArray1);
      assertTrue(tSynchronizedCharFloatMap0.equals(tSynchronizedCharFloatMap1));
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-1);
      float float0 = (-1454.7036F);
      char char0 = '|';
      float float1 = (-720.01654F);
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(int0, float0, char0, float1);
      String string0 = " ,2g>";
      int int1 = 302;
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int1, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI:  ,2g>://%20,2g%3E@ ,2g>:302%20,2g%3E?%20,2g%3E#%20,2g%3E
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      TCharFloatMap tCharFloatMap0 = null;
      Object object0 = new Object();
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap0 = new TSynchronizedCharFloatMap(tCharFloatMap0, object0);
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap1 = new TSynchronizedCharFloatMap((TCharFloatMap) tSynchronizedCharFloatMap0, object0);
      // Undeclared exception!
      try {
        tSynchronizedCharFloatMap1.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TCharFloatMap tCharFloatMap0 = null;
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap0 = null;
      try {
        tSynchronizedCharFloatMap0 = new TSynchronizedCharFloatMap(tCharFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      char char0 = 'V';
      float float0 = 0.5F;
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(int0, (float) int0, char0, float0);
      InputStream inputStream0 = null;
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      // Undeclared exception!
      try {
        dataInputStream0.readUTF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TCharFloatMap tCharFloatMap0 = null;
      double double0 = (-1824.586195465193);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-1);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-101);
      byteArray0[1] = byte1;
      byte byte2 = (byte)45;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-5);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)119;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-71);
      byteArray0[6] = byte6;
      byte byte7 = (byte)18;
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap0 = null;
      try {
        tSynchronizedCharFloatMap0 = new TSynchronizedCharFloatMap(tCharFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-531);
      char char0 = 'L';
      float float0 = 0.0F;
      char[] charArray0 = new char[5];
      charArray0[0] = char0;
      char char1 = 'r';
      charArray0[1] = char1;
      charArray0[2] = char0;
      charArray0[3] = char0;
      charArray0[4] = char0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) charArray0[1];
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(charArray0, floatArray0);
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap0 = new TSynchronizedCharFloatMap((TCharFloatMap) tCharFloatHashMap0);
      Object object0 = null;
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap1 = new TSynchronizedCharFloatMap((TCharFloatMap) tSynchronizedCharFloatMap0, object0);
      char char2 = 'R';
      // Undeclared exception!
      try {
        tSynchronizedCharFloatMap1.increment(char2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = 'Q';
      char char1 = '0';
      charArray0[0] = char1;
      charArray0[1] = char0;
      charArray0[2] = char1;
      charArray0[3] = char1;
      charArray0[4] = char0;
      charArray0[5] = char0;
      charArray0[0] = char0;
      char char2 = 'J';
      charArray0[1] = char2;
      char char3 = '`';
      charArray0[2] = char3;
      char char4 = 'x';
      charArray0[3] = char4;
      char char5 = '9';
      charArray0[4] = char5;
      char char6 = 'a';
      charArray0[5] = char6;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) charArray0[2];
      floatArray0[1] = (float) charArray0[4];
      float float0 = 0.0F;
      floatArray0[2] = float0;
      floatArray0[3] = (float) char0;
      floatArray0[4] = (float) char5;
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap();
      String string0 = "4-$";
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap0 = new TSynchronizedCharFloatMap((TCharFloatMap) tCharFloatHashMap0, (Object) string0);
      char char7 = '?';
      tSynchronizedCharFloatMap0.putIfAbsent(char7, charArray0[1]);
      float float1 = 1214.3868F;
      floatArray0[5] = float1;
      floatArray0[6] = (float) char3;
      TCharFloatHashMap tCharFloatHashMap1 = new TCharFloatHashMap(charArray0, floatArray0);
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap1 = new TSynchronizedCharFloatMap((TCharFloatMap) tCharFloatHashMap1);
      float float2 = tSynchronizedCharFloatMap1.getNoEntryValue();
      assertFalse(float2 == float1);
  }

//   @Test
//   public void test15()  throws Throwable  {
//       char[] charArray0 = new char[5];
//       char char0 = 'H';
//       charArray0[0] = char0;
//       char char1 = 'X';
//       charArray0[1] = char1;
//       char char2 = '=';
//       charArray0[2] = char2;
//       char char3 = 'Z';
//       charArray0[3] = char3;
//       char char4 = 'Q';
//       charArray0[4] = char4;
//       float[] floatArray0 = new float[3];
//       floatArray0[0] = (float) charArray0[2];
//       floatArray0[1] = (float) charArray0[1];
//       floatArray0[2] = (float) char2;
//       TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(charArray0, floatArray0);
//       float float0 = 0.0F;
//       Float float1 = new Float(float0);
//       TSynchronizedCharFloatMap tSynchronizedCharFloatMap0 = new TSynchronizedCharFloatMap((TCharFloatMap) tCharFloatHashMap0, (Object) float1);
//       char char5 = 'h';
//       Character character0 = Character.valueOf(char5);
//       String string0 = character0.toString();
//       TSynchronizedCharFloatMap tSynchronizedCharFloatMap1 = new TSynchronizedCharFloatMap((TCharFloatMap) tSynchronizedCharFloatMap0, (Object) string0);
//       char char6 = '\\';
//       float float2 = (-1892.1442F);
//       tSynchronizedCharFloatMap1.adjustOrPutValue(char6, (float) char1, float2);
//       int int0 = 0;
//       TCharFloatHashMap tCharFloatHashMap1 = new TCharFloatHashMap(int0);
//       tCharFloatHashMap1.clear();
//       float float3 = (-1043.6813F);
//       String string1 = Float.toString(float3);
//       tCharFloatHashMap1.keys();
//       TSynchronizedCharFloatMap tSynchronizedCharFloatMap2 = new TSynchronizedCharFloatMap((TCharFloatMap) tCharFloatHashMap1, (Object) string1);
//       tSynchronizedCharFloatMap2.putAll((TCharFloatMap) tCharFloatHashMap1);
//       assertEquals(0.0F, tSynchronizedCharFloatMap2.getNoEntryValue(), 0.01F);
//   }

  @Test
  public void test16()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap();
      int int0 = 1303;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      String string0 = byteArrayOutputStream0.toString();
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap0 = new TSynchronizedCharFloatMap((TCharFloatMap) tCharFloatHashMap0, (Object) string0);
      int int1 = 1763;
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int1, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://@:1763?#
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-1505);
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap();
      float float0 = (-873.6015F);
      String string0 = Float.toString(float0);
      TSynchronizedCharFloatMap tSynchronizedCharFloatMap0 = new TSynchronizedCharFloatMap((TCharFloatMap) tCharFloatHashMap0, (Object) string0);
      TCharFloatHashMap tCharFloatHashMap1 = new TCharFloatHashMap(int0, int0);
      TCharFloatHashMap tCharFloatHashMap2 = new TCharFloatHashMap((TCharFloatMap) tCharFloatHashMap1);
      String string1 = "";
      // Undeclared exception!
      try {
        File.createTempFile(string1, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }
}
