/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TFloatFunction;
import gnu.trove.map.TDoubleFloatMap;
import gnu.trove.map.hash.TDoubleFloatHashMap;
import gnu.trove.procedure.TDoubleFloatProcedure;
import gnu.trove.procedure.TDoubleProcedure;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleFloatHashMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      boolean boolean0 = true;
      tDoubleFloatHashMap0.reenableAutoCompaction(boolean0);
      int int0 = (-1530);
      float float0 = (-1907.5446F);
      double double0 = 0.0;
      double double1 = 0.0;
      float float1 = 1033.0442F;
      tDoubleFloatHashMap0.adjustOrPutValue(double1, float1, float0);
      assertEquals(false, tDoubleFloatHashMap0.isEmpty());
      
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap(int0, float0, (double) float0, (float) int0);
      TDoubleFloatHashMap tDoubleFloatHashMap2 = new TDoubleFloatHashMap((TDoubleFloatMap) tDoubleFloatHashMap1);
      TDoubleFloatHashMap tDoubleFloatHashMap3 = new TDoubleFloatHashMap(int0, float0, double0, (float) int0);
      float float2 = 0.5F;
      tDoubleFloatHashMap1.toString();
      tDoubleFloatHashMap3.adjustOrPutValue((double) float0, (float) int0, float2);
      double double2 = 73.90299677379119;
      float float3 = 269.58237F;
      boolean boolean1 = tDoubleFloatHashMap3.adjustValue(double2, float3);
      assertEquals(false, boolean1);
  }

//   @Test
//   public void test1()  throws Throwable  {
//       int int0 = 1662;
//       float float0 = (-1153.7501F);
//       double double0 = (-428.0207192386129);
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0, float0, double0, float0);
//       TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap((TDoubleFloatMap) tDoubleFloatHashMap0);
//       double[] doubleArray0 = tDoubleFloatHashMap1.keys(tDoubleFloatHashMap0._set);
//       assertNotNull(doubleArray0);
//       assertEquals((-428.0207192386129), tDoubleFloatHashMap1.getNoEntryKey(), 0.01D);
//       assertEquals((-1153.7501F), tDoubleFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals(3, tDoubleFloatHashMap1.capacity());
//   }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 0;
      float float0 = 1314.8917F;
      double double0 = (-1573.3990151958226);
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0, float0, double0, float0);
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      tDoubleFloatHashMap1.trimToSize();
      Map.Entry<Double, AbstractMap.SimpleImmutableEntry<Float, Double>> map_Entry0 = null;
      int int1 = 0;
      TDoubleFloatHashMap tDoubleFloatHashMap2 = new TDoubleFloatHashMap(int1);
      double double1 = (-1195.9070157865947);
      tDoubleFloatHashMap2.contains(double1);
      double double2 = 0.0;
      tDoubleFloatHashMap2.containsKey(double2);
      TDoubleFloatHashMap tDoubleFloatHashMap3 = new TDoubleFloatHashMap();
      tDoubleFloatHashMap2.equals((Object) tDoubleFloatHashMap3);
      int int2 = 1808;
      TDoubleFloatMap tDoubleFloatMap0 = null;
      TDoubleFloatHashMap tDoubleFloatHashMap4 = null;
      try {
        tDoubleFloatHashMap4 = new TDoubleFloatHashMap(tDoubleFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = (-1);
          int int1 = 8363;
          float float0 = Float.NEGATIVE_INFINITY;
          double double0 = Double.POSITIVE_INFINITY;
          float float1 = (-808.08875F);
          TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int1, int1);
          tDoubleFloatHashMap0.hashCode();
          TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap(int1, float0, double0, float1);
          double double1 = (-1522.1261569556725);
          tDoubleFloatHashMap1.containsKey(double1);
          tDoubleFloatHashMap1.clear();
          TDoubleFloatHashMap tDoubleFloatHashMap2 = new TDoubleFloatHashMap(int0);
          TFloatFunction tFloatFunction0 = null;
          tDoubleFloatHashMap1.transformValues(tFloatFunction0);
          tDoubleFloatHashMap2.getNoEntryKey();
          int int2 = (-1923);
          float float2 = 0.0F;
          TDoubleFloatHashMap tDoubleFloatHashMap3 = new TDoubleFloatHashMap(int2);
          tDoubleFloatHashMap3.size();
          tDoubleFloatHashMap3.getNoEntryKey();
          tDoubleFloatHashMap3.containsValue(float1);
          TDoubleFloatHashMap tDoubleFloatHashMap4 = new TDoubleFloatHashMap(int2, float2);
          String string0 = "=";
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"=\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

//   @Test
//   public void test4()  throws Throwable  {
//       int int0 = (-514);
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0);
//       double double0 = 0.0;
//       float float0 = (-1524.5327F);
//       float float1 = tDoubleFloatHashMap0.putIfAbsent(double0, float0);
//       assertEquals(1, tDoubleFloatHashMap0.size());
//       assertEquals(0.0F, float1, 0.01F);
//   }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 0;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0);
      float float0 = Float.NEGATIVE_INFINITY;
      tDoubleFloatHashMap0.adjustOrPutValue((double) int0, float0, (float) int0);
      float float1 = (-1.0F);
      // Undeclared exception!
      try {
        tDoubleFloatHashMap0.setAutoCompactionFactor(float1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1.0
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 1159.6527102395216;
      doubleArray0[0] = double0;
      double double1 = (-74.12268318768052);
      doubleArray0[1] = double1;
      float[] floatArray0 = new float[4];
      float float0 = (-31.778141F);
      floatArray0[0] = float0;
      float float1 = 50.52273F;
      floatArray0[1] = float1;
      float float2 = (-155.43916F);
      floatArray0[2] = float2;
      float float3 = (-1639.8365F);
      floatArray0[3] = float3;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      int int0 = 0;
      int int1 = 1130;
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap(int1);
      tDoubleFloatHashMap1.valueCollection();
      TDoubleFloatHashMap tDoubleFloatHashMap2 = new TDoubleFloatHashMap(int0, int0);
      tDoubleFloatHashMap2.capacity();
      TDoubleFloatProcedure tDoubleFloatProcedure0 = null;
      tDoubleFloatHashMap1.forEachEntry(tDoubleFloatProcedure0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
      tDoubleFloatHashMap2.writeExternal((ObjectOutput) objectOutputStream0);
  }

  @Test
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 1.0;
      int int0 = (-1635);
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0);
      doubleArray0[0] = double0;
      double double1 = 1.0;
      doubleArray0[1] = double1;
      double double2 = (-1.0);
      doubleArray0[2] = double2;
      float[] floatArray0 = new float[6];
      float float0 = 453.91724F;
      floatArray0[0] = float0;
      float float1 = (-539.3369F);
      floatArray0[1] = float1;
      float float2 = 10.0F;
      floatArray0[2] = float2;
      float float3 = 1904.0448F;
      floatArray0[3] = float3;
      float float4 = (-1482.7776F);
      floatArray0[4] = float4;
      float float5 = Float.POSITIVE_INFINITY;
      floatArray0[5] = float5;
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      assertEquals(2, tDoubleFloatHashMap1.size());
      assertEquals("{1.0=-539.3369, -1.0=10.0}", tDoubleFloatHashMap1.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 1998.375402499657;
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      int int0 = (-1075);
      float float0 = 170.72559F;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0, float0);
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = (-1.0);
      doubleArray0[5] = double5;
      double double6 = 0.0;
      doubleArray0[6] = double6;
      double double7 = (-828.8448729125139);
      doubleArray0[7] = double7;
      float[] floatArray0 = new float[1];
      tDoubleFloatHashMap0.clear();
      assertEquals("{}", tDoubleFloatHashMap0.toString());
      
      float float1 = 2013.3877F;
      floatArray0[0] = float1;
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      assertEquals(17, tDoubleFloatHashMap1.capacity());
      assertEquals("{1998.375402499657=2013.3877}", tDoubleFloatHashMap1.toString());
      assertEquals(1, tDoubleFloatHashMap1.size());
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = (-1);
          double double0 = Double.NEGATIVE_INFINITY;
          TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0, (float) int0, double0, (float) int0);
          boolean boolean0 = tDoubleFloatHashMap0.isEmpty();
          assertEquals(true, boolean0);
          
          byte[] byteArray0 = new byte[5];
          byte byte0 = (byte)0;
          byteArray0[0] = byte0;
          String string0 = "9K^65}~&BYBle9AY:[D";
          boolean boolean1 = false;
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0, boolean1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"9K^65}~&BYBle9AY:[D\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:136)
             // sun.reflect.GeneratedConstructorAccessor18.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
      TDoubleFloatMap tDoubleFloatMap0 = null;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = null;
      try {
        tDoubleFloatHashMap0 = new TDoubleFloatHashMap(tDoubleFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-762);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      double double0 = 1644.7640208778018;
      doubleArray0[5] = double0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      float float0 = 10.0F;
      floatArray0[3] = float0;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) int0;
      floatArray0[6] = (float) int0;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      double[] doubleArray1 = tDoubleFloatHashMap0.keys(doubleArray0);
      assertNotNull(doubleArray1);
      
      double double1 = 0.0;
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap();
      TDoubleFloatHashMap tDoubleFloatHashMap2 = new TDoubleFloatHashMap((TDoubleFloatMap) tDoubleFloatHashMap1);
      TDoubleFloatHashMap tDoubleFloatHashMap3 = new TDoubleFloatHashMap((TDoubleFloatMap) tDoubleFloatHashMap2);
      float float1 = Float.NEGATIVE_INFINITY;
      tDoubleFloatHashMap3.adjustOrPutValue(double1, (float) int0, float1);
      assertEquals(1, tDoubleFloatHashMap3.size());
      
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) int0;
      doubleArray2[1] = double1;
      doubleArray2[2] = double1;
      float[] floatArray1 = new float[7];
      floatArray1[0] = (float) int0;
      float float2 = 0.0F;
      floatArray1[1] = float2;
      floatArray1[2] = (float) int0;
      floatArray1[3] = (float) int0;
      floatArray1[4] = (float) int0;
      floatArray1[5] = (float) int0;
      floatArray1[6] = (float) int0;
      TDoubleFloatHashMap tDoubleFloatHashMap4 = new TDoubleFloatHashMap(doubleArray2, floatArray1);
      tDoubleFloatHashMap4.size();
      TDoubleFloatHashMap tDoubleFloatHashMap5 = new TDoubleFloatHashMap(int0, (float) int0, double1, (float) int0);
      assertFalse(tDoubleFloatHashMap5.equals(tDoubleFloatHashMap4));
  }

  @Test
  public void test12()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      float[] floatArray0 = new float[6];
      float float0 = (-950.0655F);
      floatArray0[0] = float0;
      float float1 = 1.0F;
      floatArray0[1] = float1;
      float float2 = (-104.87009F);
      floatArray0[2] = float2;
      float float3 = 1962.4194F;
      floatArray0[3] = float3;
      float float4 = 1.0F;
      floatArray0[4] = float4;
      float float5 = 837.4322F;
      floatArray0[5] = float5;
      float[] floatArray1 = tDoubleFloatHashMap0.values(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(23, tDoubleFloatHashMap0.capacity());
      assertSame(floatArray1, floatArray0);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      double[] doubleArray0 = new double[6];
      double double0 = (-839.3272748655064);
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) float0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) float0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      tDoubleFloatHashMap0.iterator();
      assertEquals("{-839.3272748655064=0.0, 0.0=0.0}", tDoubleFloatHashMap0.toString());
      assertEquals(2, tDoubleFloatHashMap0.size());
      
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap(int0, float0);
      TDoubleFloatHashMap tDoubleFloatHashMap2 = null;
      try {
        tDoubleFloatHashMap2 = new TDoubleFloatHashMap((TDoubleFloatMap) tDoubleFloatHashMap1);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "NU@DB@sRKXhTOfnAQ";
      String string1 = "o)kk_;|";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string1, string0, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: NU@DB@sRKXhTOfnAQ://o)kk_;|NU@DB@sRKXhTOfnAQ#o)kk_;%7C
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      double double1 = (-1450.4145245331877);
      doubleArray0[1] = double1;
      double double2 = (-1955.9296707699148);
      doubleArray0[2] = double2;
      double double3 = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = (-275.3020824340671);
      doubleArray0[5] = double5;
      double double6 = (-881.9277924397431);
      doubleArray0[6] = double6;
      float[] floatArray0 = new float[1];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      int int0 = 153;
      PipedInputStream pipedInputStream0 = new PipedInputStream(int0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 0;
      float float0 = 1.0F;
      Locale locale0 = Locale.CHINESE;
      locale0.getScript();
      char char0 = '5';
      Locale locale1 = Locale.CHINESE;
      locale0.getDisplayVariant(locale1);
      // Undeclared exception!
      try {
        locale0.getExtension(char0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed extension key: 5
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-801);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) int0;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      tDoubleFloatHashMap0.get((double) floatArray0[2]);
      int int1 = (-1896);
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap(int1, int0, int0, int0);
      tDoubleFloatHashMap1.trimToSize();
      assertEquals("{}", tDoubleFloatHashMap1.toString());
      
      TDoubleFloatHashMap tDoubleFloatHashMap2 = new TDoubleFloatHashMap();
      TDoubleFloatHashMap tDoubleFloatHashMap3 = new TDoubleFloatHashMap((TDoubleFloatMap) tDoubleFloatHashMap2);
      double double0 = 1.0;
      float float0 = 1984.0476F;
      tDoubleFloatHashMap3.adjustOrPutValue(double0, (float) int0, float0);
      assertEquals(1, tDoubleFloatHashMap3.size());
      
      double double1 = 510.2769300249998;
      TDoubleFloatHashMap tDoubleFloatHashMap4 = new TDoubleFloatHashMap(int0, (float) int0, double1, (float) int0);
      TDoubleProcedure tDoubleProcedure0 = null;
      tDoubleFloatHashMap4.isEmpty();
      tDoubleFloatHashMap4.forEach(tDoubleProcedure0);
      int int2 = 0;
      float float1 = 1049.0245F;
      float float2 = (-747.8126F);
      TDoubleFloatHashMap tDoubleFloatHashMap5 = new TDoubleFloatHashMap(int2, float1, (double) int2, float2);
      assertFalse(tDoubleFloatHashMap5.equals(tDoubleFloatHashMap3));
  }
}
