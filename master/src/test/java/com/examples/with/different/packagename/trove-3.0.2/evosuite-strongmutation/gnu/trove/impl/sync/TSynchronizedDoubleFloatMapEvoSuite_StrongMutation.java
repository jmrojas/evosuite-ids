/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedDoubleFloatMap;
import gnu.trove.impl.sync.TSynchronizedDoubleSet;
import gnu.trove.impl.sync.TSynchronizedFloatCollection;
import gnu.trove.iterator.TDoubleFloatIterator;
import gnu.trove.map.TDoubleFloatMap;
import gnu.trove.map.hash.TDoubleFloatHashMap;
import gnu.trove.procedure.TDoubleFloatProcedure;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.procedure.TFloatProcedure;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedDoubleFloatMapEvoSuite_StrongMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 5 covered goals:
   * 1 Strong Mutation 7: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.isEmpty()Z:74 - DeleteStatement: isEmpty()Z
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.isEmpty()Z: root-Branch
   * 3 Strong Mutation 0: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.<init>(Lgnu/trove/map/TDoubleFloatMap;)V:59 - ReplaceComparisonOperator != null -> = null
   * 4 Strong Mutation 7: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.isEmpty()Z:74 - DeleteStatement: isEmpty()Z
   * 5 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.<init>(Lgnu/trove/map/TDoubleFloatMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1060), (-1060), (-1060), (-1060));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 1
  /*
   * 10 covered goals:
   * 1 Strong Mutation 11: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsKey(D)Z:77 - DeleteStatement: containsKey(D)Z
   * 2 Strong Mutation 10: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsKey(D)Z:77 - InsertUnaryOp Negation of key
   * 3 Strong Mutation 10: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsKey(D)Z:77 - InsertUnaryOp Negation of key
   * 4 Strong Mutation 11: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsKey(D)Z:77 - DeleteStatement: containsKey(D)Z
   * 5 Strong Mutation 21: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.put(DF)F:87 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 6 Strong Mutation 20: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.put(DF)F:87 - DeleteField: mutexLjava/lang/Object;
   * 7 Strong Mutation 23: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.put(DF)F:87 - InsertUnaryOp Negation of value
   * 8 Strong Mutation 22: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.put(DF)F:87 - InsertUnaryOp Negation of key
   * 9 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsKey(D)Z: root-Branch
   * 10 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.put(DF)F: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      tSynchronizedDoubleFloatMap0.put((-1798.8687791884315), 875.70746F);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.containsKey((-1798.8687791884315));
      assertEquals(1, tDoubleFloatHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 5 covered goals:
   * 1 Strong Mutation 13: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsValue(F)Z:80 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 2 Strong Mutation 12: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsValue(F)Z:80 - DeleteField: mutexLjava/lang/Object;
   * 3 Strong Mutation 12: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsValue(F)Z:80 - DeleteField: mutexLjava/lang/Object;
   * 4 Strong Mutation 13: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsValue(F)Z:80 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 5 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsValue(F)Z: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1051), (-1051), (-1051), (-1051));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      float[] floatArray0 = new float[5];
      floatArray0[2] = 945.20447F;
      tSynchronizedDoubleFloatMap0.containsValue(945.20447F);
      floatArray0[2] = (-1051.0F);
  }

  //Test case number: 3
  /*
   * 3 covered goals:
   * 1 Strong Mutation 14: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsValue(F)Z:80 - InsertUnaryOp Negation of value
   * 2 Strong Mutation 14: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsValue(F)Z:80 - InsertUnaryOp Negation of value
   * 3 Strong Mutation 15: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsValue(F)Z:80 - DeleteStatement: containsValue(F)Z
   */

  @Test
  public void test3()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(0);
      float[] floatArray0 = new float[7];
      floatArray0[2] = (float) 663;
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap(tDoubleFloatHashMap0._set, floatArray0);
      tDoubleFloatHashMap0.putAll((TDoubleFloatMap) tDoubleFloatHashMap1);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.containsValue((float) 663);
      assertEquals(true, boolean0);
  }

  //Test case number: 4
  /*
   * 6 covered goals:
   * 1 Strong Mutation 15: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsValue(F)Z:80 - DeleteStatement: containsValue(F)Z
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putIfAbsent(DF)F: root-Branch
   * 3 Strong Mutation 70: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putIfAbsent(DF)F:142 - DeleteField: mutexLjava/lang/Object;
   * 4 Strong Mutation 71: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putIfAbsent(DF)F:142 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 5 Strong Mutation 72: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putIfAbsent(DF)F:142 - InsertUnaryOp Negation of key
   * 6 Strong Mutation 73: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putIfAbsent(DF)F:142 - InsertUnaryOp Negation of value
   */

  @Test
  public void test4()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      tSynchronizedDoubleFloatMap0.putIfAbsent(1893.4332880563848, 0.0F);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.containsValue(0.0F);
      assertEquals("{1893.4332880563848=0.0}", tDoubleFloatHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 5
  /*
   * 5 covered goals:
   * 1 Strong Mutation 16: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.get(D)F:83 - DeleteField: mutexLjava/lang/Object;
   * 2 Strong Mutation 17: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.get(D)F:83 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 3 Strong Mutation 17: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.get(D)F:83 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 4 Strong Mutation 16: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.get(D)F:83 - DeleteField: mutexLjava/lang/Object;
   * 5 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.get(D)F: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1511.6877F;
      tSynchronizedDoubleFloatMap0.get((double) 1511.6877F);
      floatArray0[0] = 346.02704F;
  }

  //Test case number: 6
  /*
   * 4 covered goals:
   * 1 Strong Mutation 18: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.get(D)F:83 - InsertUnaryOp Negation of key
   * 2 Strong Mutation 19: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.get(D)F:83 - DeleteStatement: get(D)F
   * 3 Strong Mutation 19: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.get(D)F:83 - DeleteStatement: get(D)F
   * 4 Strong Mutation 18: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.get(D)F:83 - InsertUnaryOp Negation of key
   */

//   @Test
//   public void test6()  throws Throwable  {
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(1860, 1860);
//       TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
//       tDoubleFloatHashMap0.put((double) 1860, (float) 1860);
//       float float0 = tSynchronizedDoubleFloatMap0.get((double) 1860);
//       assertEquals(1860.0F, float0, 0.01F);
//   }

  //Test case number: 7
  /*
   * 12 covered goals:
   * 1 Strong Mutation 27: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.remove(D)F:90 - InsertUnaryOp Negation of key
   * 2 Strong Mutation 25: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.remove(D)F:90 - DeleteField: mutexLjava/lang/Object;
   * 3 Strong Mutation 27: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.remove(D)F:90 - InsertUnaryOp Negation of key
   * 4 Strong Mutation 26: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.remove(D)F:90 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 5 Strong Mutation 28: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.remove(D)F:90 - DeleteStatement: remove(D)F
   * 6 Strong Mutation 100: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 7 Strong Mutation 101: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - InsertUnaryOp Negation of key
   * 8 Strong Mutation 99: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - DeleteField: mutexLjava/lang/Object;
   * 9 Strong Mutation 104: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - ReplaceVariable put_amount -> adjust_amount
   * 10 Strong Mutation 105: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - InsertUnaryOp Negation of put_amount
   * 11 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.remove(D)F: root-Branch
   * 12 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F: root-Branch
   */

//   @Test
//   public void test7()  throws Throwable  {
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(1259, 1259);
//       TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
//       tSynchronizedDoubleFloatMap0.adjustOrPutValue(1259.0, (-157.86667F), (float) 1259);
//       assertEquals(false, tDoubleFloatHashMap0.isEmpty());
//       
//       float float0 = tSynchronizedDoubleFloatMap0.remove((double) 1259.0F);
//       assertEquals(1259.0F, float0, 0.01F);
//   }

  //Test case number: 8
  /*
   * 3 covered goals:
   * 1 Strong Mutation 28: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.remove(D)F:90 - DeleteStatement: remove(D)F
   * 2 Strong Mutation 25: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.remove(D)F:90 - DeleteField: mutexLjava/lang/Object;
   * 3 Strong Mutation 26: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.remove(D)F:90 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   */

//   @Test
//   public void test8()  throws Throwable  {
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
//       TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
//       tSynchronizedDoubleFloatMap0.adjustOrPutValue((double) 0.0F, (-639.9815F), 0.0F);
//       assertEquals(false, tDoubleFloatHashMap0.isEmpty());
//       
//       float float0 = tSynchronizedDoubleFloatMap0.remove(0.0);
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 9
  /*
   * 17 covered goals:
   * 1 Strong Mutation 33: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putAll(Lgnu/trove/map/TDoubleFloatMap;)V:96 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 2 Strong Mutation 2: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.size()I:71 - DeleteField: mutexLjava/lang/Object;
   * 3 Strong Mutation 3: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.size()I:71 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 4 Strong Mutation 4: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.size()I:71 - DeleteStatement: size()I
   * 5 Strong Mutation 32: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putAll(Lgnu/trove/map/TDoubleFloatMap;)V:96 - DeleteField: mutexLjava/lang/Object;
   * 6 Strong Mutation 1: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.<init>(Lgnu/trove/map/TDoubleFloatMap;Ljava/lang/Object;)V:67 - ReplaceVariable mutex -> mutex
   * 7 Strong Mutation 2: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.size()I:71 - DeleteField: mutexLjava/lang/Object;
   * 8 Strong Mutation 3: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.size()I:71 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 9 Strong Mutation 4: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.size()I:71 - DeleteStatement: size()I
   * 10 Strong Mutation 32: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putAll(Lgnu/trove/map/TDoubleFloatMap;)V:96 - DeleteField: mutexLjava/lang/Object;
   * 11 Strong Mutation 33: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putAll(Lgnu/trove/map/TDoubleFloatMap;)V:96 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 12 Strong Mutation 64: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.iterator()Lgnu/trove/iterator/TDoubleFloatIterator;:134 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 13 Strong Mutation 65: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.iterator()Lgnu/trove/iterator/TDoubleFloatIterator;:134 - DeleteStatement: iterator()Lgnu/trove/iterator/TDoubleFloatIterator;
   * 14 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.size()I: root-Branch
   * 15 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putAll(Lgnu/trove/map/TDoubleFloatMap;)V: root-Branch
   * 16 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.iterator()Lgnu/trove/iterator/TDoubleFloatIterator;: root-Branch
   * 17 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.<init>(Lgnu/trove/map/TDoubleFloatMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      Object object0 = new Object();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0, object0);
      tSynchronizedDoubleFloatMap0.put((double) 139, 1299.1611F);
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap(139);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap1 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap1);
      tSynchronizedDoubleFloatMap1.putAll((TDoubleFloatMap) tSynchronizedDoubleFloatMap0);
      assertEquals(1, tDoubleFloatHashMap0.size());
      assertEquals("{139.0=1299.1611}", tDoubleFloatHashMap0.toString());
  }

  //Test case number: 10
  /*
   * 7 covered goals:
   * 1 Strong Mutation 37: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.clear()V:99 - DeleteStatement: clear()V
   * 2 Strong Mutation 35: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.clear()V:99 - DeleteField: mutexLjava/lang/Object;
   * 3 Strong Mutation 36: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.clear()V:99 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 4 Strong Mutation 35: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.clear()V:99 - DeleteField: mutexLjava/lang/Object;
   * 5 Strong Mutation 36: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.clear()V:99 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 6 Strong Mutation 37: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.clear()V:99 - DeleteStatement: clear()V
   * 7 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.clear()V: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1051), (-1051), (-1051), (-1051));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      tSynchronizedDoubleFloatMap0.put((double) (-1051.0F), (-1051.0F));
      tSynchronizedDoubleFloatMap0.clear();
      assertEquals(7, tDoubleFloatHashMap0.capacity());
      assertEquals(true, tDoubleFloatHashMap0.isEmpty());
  }

  //Test case number: 11
  /*
   * 7 covered goals:
   * 1 Strong Mutation 45: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys()[D:113 - DeleteField: mutexLjava/lang/Object;
   * 2 Strong Mutation 46: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys()[D:113 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 3 Strong Mutation 47: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys()[D:113 - DeleteStatement: keys()[D
   * 4 Strong Mutation 46: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys()[D:113 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 5 Strong Mutation 47: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys()[D:113 - DeleteStatement: keys()[D
   * 6 Strong Mutation 45: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys()[D:113 - DeleteField: mutexLjava/lang/Object;
   * 7 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys()[D: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1060), (-1060), (-1060), (-1060));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      double[] doubleArray0 = tSynchronizedDoubleFloatMap0.keys();
      assertNotNull(doubleArray0);
  }

  //Test case number: 12
  /*
   * 6 covered goals:
   * 1 Strong Mutation 48: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys([D)[D:116 - DeleteField: mutexLjava/lang/Object;
   * 2 Strong Mutation 50: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys([D)[D:116 - DeleteStatement: keys([D)[D
   * 3 Strong Mutation 49: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys([D)[D:116 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 4 Strong Mutation 49: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys([D)[D:116 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 5 Strong Mutation 48: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys([D)[D:116 - DeleteField: mutexLjava/lang/Object;
   * 6 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys([D)[D: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-882));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0, (Object) "-882.0");
      double[] doubleArray0 = tSynchronizedDoubleFloatMap0.keys(tDoubleFloatHashMap0._set);
      assertNotNull(doubleArray0);
  }

  //Test case number: 13
  /*
   * 7 covered goals:
   * 1 Strong Mutation 60: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values()[F:127 - DeleteStatement: values()[F
   * 2 Strong Mutation 59: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values()[F:127 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 3 Strong Mutation 58: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values()[F:127 - DeleteField: mutexLjava/lang/Object;
   * 4 Strong Mutation 59: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values()[F:127 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 5 Strong Mutation 58: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values()[F:127 - DeleteField: mutexLjava/lang/Object;
   * 6 Strong Mutation 60: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values()[F:127 - DeleteStatement: values()[F
   * 7 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values()[F: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0, (Object) "-0x1.0p0");
      float[] floatArray0 = tSynchronizedDoubleFloatMap0.values();
      assertNotNull(floatArray0);
  }

  //Test case number: 14
  /*
   * 7 covered goals:
   * 1 Strong Mutation 61: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values([F)[F:130 - DeleteField: mutexLjava/lang/Object;
   * 2 Strong Mutation 63: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values([F)[F:130 - DeleteStatement: values([F)[F
   * 3 Strong Mutation 62: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values([F)[F:130 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 4 Strong Mutation 63: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values([F)[F:130 - DeleteStatement: values([F)[F
   * 5 Strong Mutation 62: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values([F)[F:130 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 6 Strong Mutation 61: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values([F)[F:130 - DeleteField: mutexLjava/lang/Object;
   * 7 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values([F)[F: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1051), (-1051), (-1051), (-1051));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      float[] floatArray0 = new float[5];
      float[] floatArray1 = tSynchronizedDoubleFloatMap0.values(floatArray0);
      assertSame(floatArray1, floatArray0);
  }

  //Test case number: 15
  /*
   * 2 covered goals:
   * 1 Strong Mutation 65: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.iterator()Lgnu/trove/iterator/TDoubleFloatIterator;:134 - DeleteStatement: iterator()Lgnu/trove/iterator/TDoubleFloatIterator;
   * 2 Strong Mutation 64: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.iterator()Lgnu/trove/iterator/TDoubleFloatIterator;:134 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   */

  @Test
  public void test15()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0, (Object) "-0x1.0p0");
      TDoubleFloatIterator tDoubleFloatIterator0 = tSynchronizedDoubleFloatMap0.iterator();
      assertEquals(false, tDoubleFloatIterator0.hasNext());
  }

  //Test case number: 16
  /*
   * 3 covered goals:
   * 1 Strong Mutation 66: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.getNoEntryKey()D:138 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.getNoEntryKey()D: root-Branch
   * 3 Strong Mutation 66: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.getNoEntryKey()D:138 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   */

  @Test
  public void test16()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      float[] floatArray0 = new float[8];
      floatArray0[5] = (-639.9815F);
      tSynchronizedDoubleFloatMap0.getNoEntryKey();
      floatArray0[5] = (-2.719759F);
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * 1 Strong Mutation 67: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.getNoEntryKey()D:138 - DeleteStatement: getNoEntryKey()D
   * 2 Strong Mutation 67: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.getNoEntryKey()D:138 - DeleteStatement: getNoEntryKey()D
   */

  @Test
  public void test17()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1051), (-1051), (-1051), (-1051));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      double double0 = tSynchronizedDoubleFloatMap0.getNoEntryKey();
      assertEquals((-1051.0), double0, 0.01D);
  }

  //Test case number: 18
  /*
   * 4 covered goals:
   * 1 Strong Mutation 68: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.getNoEntryValue()F:139 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.getNoEntryValue()F: root-Branch
   * 3 Strong Mutation 68: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.getNoEntryValue()F:139 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 4 Strong Mutation 69: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.getNoEntryValue()F:139 - DeleteStatement: getNoEntryValue()F
   */

  @Test
  public void test18()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1051), 10.0F, (double) (-1051), (float) (-1051));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 10.0F;
      tSynchronizedDoubleFloatMap0.getNoEntryValue();
      floatArray0[0] = (float) (-1051);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 Strong Mutation 69: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.getNoEntryValue()F:139 - DeleteStatement: getNoEntryValue()F
   */

//   @Test
//   public void test19()  throws Throwable  {
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1051), (-1051), (-1051), (-1051));
//       TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
//       float float0 = tSynchronizedDoubleFloatMap0.getNoEntryValue();
//       assertEquals((-1051.0F), float0, 0.01F);
//   }

  //Test case number: 20
  /*
   * 2 covered goals:
   * 1 Strong Mutation 77: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z:145 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(0, 0, 0, 0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.forEachKey((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 21
  /*
   * 2 covered goals:
   * 1 Strong Mutation 80: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z:148 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0, (Object) "");
      boolean boolean0 = tSynchronizedDoubleFloatMap0.forEachValue((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 3 covered goals:
   * 1 Strong Mutation 83: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachEntry(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z:151 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachEntry(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z: root-Branch
   * 3 Strong Mutation 83: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachEntry(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z:151 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z
   */

  @Test
  public void test22()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0, (Object) "");
      boolean boolean0 = tSynchronizedDoubleFloatMap0.forEachEntry((TDoubleFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 23
  /*
   * 5 covered goals:
   * 1 Strong Mutation 93: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.increment(D)Z:160 - DeleteStatement: increment(D)Z
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.increment(D)Z: root-Branch
   * 3 Strong Mutation 93: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.increment(D)Z:160 - DeleteStatement: increment(D)Z
   * 4 Strong Mutation 91: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.increment(D)Z:160 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 5 Strong Mutation 90: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.increment(D)Z:160 - DeleteField: mutexLjava/lang/Object;
   */

  @Test
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      float[] floatArray0 = new float[9];
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.increment(0.0);
      assertEquals("{0.0=1.0}", tDoubleFloatHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 24
  /*
   * 7 covered goals:
   * 1 Strong Mutation 92: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.increment(D)Z:160 - InsertUnaryOp Negation of key
   * 2 Strong Mutation 70: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putIfAbsent(DF)F:142 - DeleteField: mutexLjava/lang/Object;
   * 3 Strong Mutation 71: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putIfAbsent(DF)F:142 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 4 Strong Mutation 72: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putIfAbsent(DF)F:142 - InsertUnaryOp Negation of key
   * 5 Strong Mutation 73: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putIfAbsent(DF)F:142 - InsertUnaryOp Negation of value
   * 6 Strong Mutation 74: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putIfAbsent(DF)F:142 - DeleteStatement: putIfAbsent(DF)F
   * 7 Strong Mutation 92: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.increment(D)Z:160 - InsertUnaryOp Negation of key
   */

  @Test
  public void test24()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1), (-1));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0, (Object) "en-GB");
      tSynchronizedDoubleFloatMap0.putIfAbsent((double) (-1), (float) (-1));
      boolean boolean0 = tSynchronizedDoubleFloatMap0.increment(1.0);
      assertEquals(7, tDoubleFloatHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 25
  /*
   * 2 covered goals:
   * 1 Strong Mutation 90: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.increment(D)Z:160 - DeleteField: mutexLjava/lang/Object;
   * 2 Strong Mutation 91: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.increment(D)Z:160 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   */

  @Test
  public void test25()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1051), 10.0F, (double) (-1051), (float) (-1051));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 10.0F;
      tSynchronizedDoubleFloatMap0.increment((-521.8073464345689));
      floatArray0[0] = (float) (-1051);
  }

  //Test case number: 26
  /*
   * 9 covered goals:
   * 1 Strong Mutation 97: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustValue(DF)Z:163 - InsertUnaryOp Negation of amount
   * 2 Strong Mutation 95: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustValue(DF)Z:163 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 3 Strong Mutation 94: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustValue(DF)Z:163 - DeleteField: mutexLjava/lang/Object;
   * 4 Strong Mutation 96: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustValue(DF)Z:163 - InsertUnaryOp Negation of key
   * 5 Strong Mutation 95: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustValue(DF)Z:163 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 6 Strong Mutation 94: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustValue(DF)Z:163 - DeleteField: mutexLjava/lang/Object;
   * 7 Strong Mutation 96: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustValue(DF)Z:163 - InsertUnaryOp Negation of key
   * 8 Strong Mutation 97: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustValue(DF)Z:163 - InsertUnaryOp Negation of amount
   * 9 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustValue(DF)Z: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1051), 10.0F, (double) (-1051), (float) (-1051));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      tSynchronizedDoubleFloatMap0.put((double) (-1051.0F), 0.5F);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.adjustValue((-1051.0), 945.20447F);
      assertEquals(1, tDoubleFloatHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 27
  /*
   * 4 covered goals:
   * 1 Strong Mutation 103: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - InsertUnaryOp Negation of adjust_amount
   * 2 Strong Mutation 102: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - ReplaceVariable adjust_amount -> put_amount
   * 3 Strong Mutation 102: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - ReplaceVariable adjust_amount -> put_amount
   * 4 Strong Mutation 103: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - InsertUnaryOp Negation of adjust_amount
   */

//   @Test
//   public void test27()  throws Throwable  {
//       double[] doubleArray0 = new double[2];
//       float[] floatArray0 = new float[6];
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
//       TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
//       float float0 = tSynchronizedDoubleFloatMap0.adjustOrPutValue(0.0, 1.0F, (-1481.3086F));
//       assertEquals("{0.0=1.0}", tDoubleFloatHashMap0.toString());
//       assertEquals(1.0F, float0, 0.01F);
//   }

  //Test case number: 28
  /*
   * 6 covered goals:
   * 1 Strong Mutation 105: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - InsertUnaryOp Negation of put_amount
   * 2 Strong Mutation 100: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 3 Strong Mutation 101: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - InsertUnaryOp Negation of key
   * 4 Strong Mutation 99: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - DeleteField: mutexLjava/lang/Object;
   * 5 Strong Mutation 106: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - DeleteStatement: adjustOrPutValue(DFF)F
   * 6 Strong Mutation 104: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - ReplaceVariable put_amount -> adjust_amount
   */

//   @Test
//   public void test28()  throws Throwable  {
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-770));
//       TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0, (Object) "/");
//       float float0 = tSynchronizedDoubleFloatMap0.adjustOrPutValue(366.4099180424583, (-279.30005F), 0.0F);
//       assertEquals("{366.4099180424583=0.0}", tDoubleFloatHashMap0.toString());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 29
  /*
   * 4 covered goals:
   * 1 Strong Mutation 110: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.equals(Ljava/lang/Object;)Z:170 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.equals(Ljava/lang/Object;)Z: root-Branch
   * 3 Strong Mutation 110: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.equals(Ljava/lang/Object;)Z:170 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 4 Strong Mutation 109: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.equals(Ljava/lang/Object;)Z:170 - ReplaceVariable o -> mutex
   */

  @Test
  public void test29()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap1 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      boolean boolean0 = tSynchronizedDoubleFloatMap1.equals((Object) "cor\u00E9en");
      assertEquals(false, boolean0);
      assertTrue(tSynchronizedDoubleFloatMap1.equals(tSynchronizedDoubleFloatMap0));
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * 1 Strong Mutation 109: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.equals(Ljava/lang/Object;)Z:170 - ReplaceVariable o -> mutex
   */

  @Test
  public void test30()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.equals((Object) "cor\u00E9en");
      assertEquals(false, boolean0);
  }

  //Test case number: 31
  /*
   * 9 covered goals:
   * 1 Strong Mutation 113: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.hashCode()I:173 - DeleteStatement: hashCode()I
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.hashCode()I: root-Branch
   * 3 Strong Mutation 1: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.<init>(Lgnu/trove/map/TDoubleFloatMap;Ljava/lang/Object;)V:67 - ReplaceVariable mutex -> mutex
   * 4 Strong Mutation 21: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.put(DF)F:87 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 5 Strong Mutation 20: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.put(DF)F:87 - DeleteField: mutexLjava/lang/Object;
   * 6 Strong Mutation 23: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.put(DF)F:87 - InsertUnaryOp Negation of value
   * 7 Strong Mutation 22: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.put(DF)F:87 - InsertUnaryOp Negation of key
   * 8 Strong Mutation 24: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.put(DF)F:87 - DeleteStatement: put(DF)F
   * 9 Strong Mutation 113: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.hashCode()I:173 - DeleteStatement: hashCode()I
   */

  @Test
  public void test31()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      Object object0 = new Object();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0, object0);
      tSynchronizedDoubleFloatMap0.put((double) 139, 1299.1611F);
      int int0 = tSynchronizedDoubleFloatMap0.hashCode();
      assertEquals("{139.0=1299.1611}", tDoubleFloatHashMap0.toString());
      assertEquals(321510208, int0);
  }

  //Test case number: 32
  /*
   * 7 covered goals:
   * 1 Strong Mutation 114: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.toString()Ljava/lang/String;:176 - DeleteField: mutexLjava/lang/Object;
   * 2 Strong Mutation 116: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.toString()Ljava/lang/String;:176 - DeleteStatement: toString()Ljava/lang/String;
   * 3 Strong Mutation 115: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.toString()Ljava/lang/String;:176 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 4 Strong Mutation 116: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.toString()Ljava/lang/String;:176 - DeleteStatement: toString()Ljava/lang/String;
   * 5 Strong Mutation 115: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.toString()Ljava/lang/String;:176 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 6 Strong Mutation 114: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.toString()Ljava/lang/String;:176 - DeleteField: mutexLjava/lang/Object;
   * 7 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test32()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-86));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      String string0 = tSynchronizedDoubleFloatMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 33
  /*
   * 9 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;: I11 Branch 2 IFNONNULL L107 - true
   * 2 Strong Mutation 38: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;:106 - DeleteField: mutexLjava/lang/Object;
   * 3 Strong Mutation 40: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;:107 - ReplaceComparisonOperator != null -> = null
   * 4 Strong Mutation 41: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;:108 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 5 Strong Mutation 44: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;:109 - DeleteField: keySetLgnu/trove/set/TDoubleSet;
   * 6 Strong Mutation 38: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;:106 - DeleteField: mutexLjava/lang/Object;
   * 7 Strong Mutation 41: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;:108 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 8 Strong Mutation 44: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;:109 - DeleteField: keySetLgnu/trove/set/TDoubleSet;
   * 9 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;: I11 Branch 2 IFNONNULL L107 - false
   */

  @Test
  public void test33()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(0, 0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      TSynchronizedDoubleSet tSynchronizedDoubleSet0 = (TSynchronizedDoubleSet)tSynchronizedDoubleFloatMap0.keySet();
      assertNotNull(tSynchronizedDoubleSet0);
      
      TSynchronizedDoubleSet tSynchronizedDoubleSet1 = (TSynchronizedDoubleSet)tSynchronizedDoubleFloatMap0.keySet();
      assertSame(tSynchronizedDoubleSet1, tSynchronizedDoubleSet0);
  }

  //Test case number: 34
  /*
   * 11 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;: I11 Branch 3 IFNONNULL L121 - true
   * 2 Strong Mutation 0: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.<init>(Lgnu/trove/map/TDoubleFloatMap;)V:59 - ReplaceComparisonOperator != null -> = null
   * 3 Strong Mutation 51: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:120 - DeleteField: mutexLjava/lang/Object;
   * 4 Strong Mutation 54: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:122 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 5 Strong Mutation 53: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:121 - ReplaceComparisonOperator != null -> = null
   * 6 Strong Mutation 57: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:123 - DeleteField: valuesLgnu/trove/TFloatCollection;
   * 7 Strong Mutation 51: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:120 - DeleteField: mutexLjava/lang/Object;
   * 8 Strong Mutation 54: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:122 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 9 Strong Mutation 53: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:121 - ReplaceComparisonOperator != null -> = null
   * 10 Strong Mutation 57: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:123 - DeleteField: valuesLgnu/trove/TFloatCollection;
   * 11 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;: I11 Branch 3 IFNONNULL L121 - false
   */

  @Test
  public void test34()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(739, 739);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      TSynchronizedFloatCollection tSynchronizedFloatCollection0 = (TSynchronizedFloatCollection)tSynchronizedDoubleFloatMap0.valueCollection();
      assertNotNull(tSynchronizedFloatCollection0);
      
      TSynchronizedFloatCollection tSynchronizedFloatCollection1 = (TSynchronizedFloatCollection)tSynchronizedDoubleFloatMap0.valueCollection();
      assertSame(tSynchronizedFloatCollection1, tSynchronizedFloatCollection0);
  }
}
