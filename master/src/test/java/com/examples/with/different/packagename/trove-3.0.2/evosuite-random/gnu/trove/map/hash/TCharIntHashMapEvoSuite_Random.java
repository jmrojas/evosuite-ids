/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TCharIntMap;
import gnu.trove.map.hash.TCharIntHashMap;
import gnu.trove.procedure.TCharProcedure;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharIntHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      char[] charArray0 = new char[10];
      char char0 = '\'';
      charArray0[0] = char0;
      char char1 = ',';
      charArray0[1] = char1;
      char char2 = 'q';
      charArray0[2] = char2;
      char char3 = 'U';
      charArray0[3] = char3;
      char char4 = ';';
      charArray0[4] = char4;
      char char5 = 'c';
      charArray0[5] = char5;
      char char6 = '?';
      charArray0[6] = char6;
      char char7 = 'E';
      charArray0[7] = char7;
      char char8 = 'r';
      charArray0[8] = char8;
      char char9 = '7';
      charArray0[9] = char9;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) char0;
      int int0 = 26;
      char char10 = '8';
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0, (float) charArray0[4], char10, (int) charArray0[4]);
      tCharIntHashMap0.size();
      intArray0[1] = (int) charArray0[6];
      intArray0[2] = (int) charArray0[4];
      intArray0[3] = (int) char9;
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap(charArray0, intArray0);
      char char11 = '+';
      int int1 = 0;
      boolean boolean0 = tCharIntHashMap1.adjustValue(char11, int1);
      assertEquals(false, boolean0);
      assertEquals("{,=63, '=39, U=55, q=59}", tCharIntHashMap1.toString());
      assertEquals(false, tCharIntHashMap1.isEmpty());
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-1);
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      float float0 = (-511.72668F);
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap(int0, float0);
      char char0 = 'e';
      tCharIntHashMap1.contains(char0);
      int int1 = 398;
      char char1 = 'a';
      TCharIntHashMap tCharIntHashMap2 = new TCharIntHashMap(int1, (float) int1, char1, int1);
      tCharIntHashMap2.tempDisableAutoCompaction();
      TCharIntHashMap tCharIntHashMap3 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap2);
      tCharIntHashMap2.putIfAbsent(char0, int0);
      char char2 = 's';
      int int2 = tCharIntHashMap3.adjustOrPutValue(char2, int1, (int) char1);
      assertEquals(false, tCharIntHashMap2.isEmpty());
      assertEquals(97, int2);
  }

  @Test
  public void test2()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = 'h';
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap((int) char0);
      boolean boolean0 = true;
      tCharIntHashMap0.reenableAutoCompaction(boolean0);
      assertEquals(277, tCharIntHashMap0.capacity());
      
      charArray0[0] = char0;
      char char1 = '#';
      charArray0[1] = char1;
      char char2 = 'O';
      charArray0[2] = char2;
      char char3 = 'Y';
      charArray0[3] = char3;
      char char4 = 'v';
      charArray0[4] = char4;
      char char5 = 'r';
      charArray0[5] = char5;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) charArray0[4];
      int int0 = 92657;
      intArray0[1] = int0;
      intArray0[2] = (int) charArray0[5];
      intArray0[3] = (int) charArray0[3];
      intArray0[4] = (int) charArray0[5];
      intArray0[5] = (int) charArray0[1];
      intArray0[6] = (int) charArray0[0];
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap(charArray0, intArray0);
      assertEquals("{v=114, r=35, O=114, Y=89, h=118, #=92657}", tCharIntHashMap1.toString());
      assertEquals(6, tCharIntHashMap1.size());
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-1386);
      char char0 = '^';
      int int1 = 1002331963;
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0, (float) int0, char0, int1);
      tCharIntHashMap0.getNoEntryValue();
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap0);
      boolean boolean0 = true;
      tCharIntHashMap1.reenableAutoCompaction(boolean0);
      assertEquals('^', tCharIntHashMap1.getNoEntryKey());
      assertEquals(1002331963, tCharIntHashMap1.getNoEntryValue());
      assertEquals(3, tCharIntHashMap1.capacity());
      
      TCharIntHashMap tCharIntHashMap2 = new TCharIntHashMap(int0);
      int int2 = tCharIntHashMap2.hashCode();
      assertEquals(0, int2);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-1999);
      char char0 = 'e';
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0, (float) int0, char0, (int) char0);
      boolean boolean0 = true;
      tCharIntHashMap0.reenableAutoCompaction(boolean0);
      assertEquals("{}", tCharIntHashMap0.toString());
      
      int int1 = (-700);
      float float0 = 0.0F;
      char[] charArray0 = new char[2];
      char char1 = '5';
      charArray0[0] = char1;
      int int2 = 0;
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap(int2);
      float float1 = (-1401.553F);
      char char2 = 'J';
      TCharIntHashMap tCharIntHashMap2 = new TCharIntHashMap((int) char1, float1, char2, (int) charArray0[0]);
      char char3 = 'o';
      charArray0[1] = char3;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) char3;
      intArray0[1] = (int) charArray0[0];
      intArray0[2] = int1;
      TCharIntHashMap tCharIntHashMap3 = new TCharIntHashMap(charArray0, intArray0);
      char char4 = '>';
      tCharIntHashMap3.tempDisableAutoCompaction();
      int int3 = (-1059);
      int int4 = tCharIntHashMap3.put(char4, int3);
      assertEquals(3, tCharIntHashMap3.size());
      
      char char5 = '|';
      int int5 = 128;
      TCharIntHashMap tCharIntHashMap4 = new TCharIntHashMap(int1, float0, char5, int5);
      int int6 = tCharIntHashMap4.capacity();
      assertFalse(int6 == int4);
  }

  @Test
  public void test5()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = 'f';
      charArray0[0] = char0;
      char char1 = 'o';
      charArray0[1] = char1;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) charArray0[0];
      intArray0[1] = (int) char1;
      intArray0[2] = (int) charArray0[0];
      intArray0[3] = (int) char1;
      intArray0[4] = (int) char0;
      int int0 = (-267);
      intArray0[5] = int0;
      intArray0[6] = (int) charArray0[1];
      intArray0[7] = (int) charArray0[1];
      intArray0[8] = (int) charArray0[0];
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap0);
      tCharIntHashMap1.getAutoCompactionFactor();
      assertEquals(0, tCharIntHashMap1.getNoEntryValue());
      assertEquals("{o=111, f=102}", tCharIntHashMap1.toString());
      assertEquals(23, tCharIntHashMap1.capacity());
      assertEquals(23, tCharIntHashMap0.capacity());
      assertEquals(false, tCharIntHashMap1.isEmpty());
      assertEquals("{o=111, f=102}", tCharIntHashMap0.toString());
      assertEquals(2, tCharIntHashMap0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 81;
      char char0 = '~';
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0, (float) int0, char0, int0);
      tCharIntHashMap0.getAutoCompactionFactor();
      tCharIntHashMap0.capacity();
      String string0 = "Inserting same object twice, rehashing bug. Object= ";
      Object object0 = null;
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(string0, object0);
      AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, Object>, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, Object>, String>(abstractMap_SimpleImmutableEntry0, string0);
      abstractMap_SimpleEntry0.equals(object0);
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap();
      int int1 = tCharIntHashMap1.hashCode();
      assertEquals(23, tCharIntHashMap1.capacity());
      assertEquals(0, int1);
  }

  @Test
  public void test7()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      char[] charArray0 = new char[9];
      char char0 = 'e';
      charArray0[0] = char0;
      char char1 = '*';
      charArray0[1] = char1;
      char char2 = 'K';
      charArray0[2] = char2;
      char char3 = 'Q';
      charArray0[3] = char3;
      char char4 = '#';
      charArray0[4] = char4;
      char char5 = 'K';
      charArray0[5] = char5;
      char char6 = 'g';
      charArray0[6] = char6;
      char char7 = '.';
      charArray0[7] = char7;
      char char8 = '@';
      charArray0[8] = char8;
      char[] charArray1 = tCharIntHashMap0.keys(charArray0);
      assertSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      int int0 = (-821);
      Integer integer0 = new Integer(int0);
      AbstractMap.SimpleEntry<Integer, TCharIntHashMap> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, TCharIntHashMap>(integer0, tCharIntHashMap0);
      abstractMap_SimpleEntry0.getKey();
      char char9 = 'b';
      boolean boolean0 = tCharIntHashMap0.increment(char9);
      assertEquals(false, boolean0);
      assertEquals(23, tCharIntHashMap0.capacity());
  }

  @Test
  public void test8()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = 'V';
      charArray0[0] = char0;
      char char1 = ';';
      charArray0[1] = char1;
      char char2 = 'E';
      charArray0[2] = char2;
      char char3 = 'l';
      charArray0[3] = char3;
      char char4 = 'm';
      charArray0[4] = char4;
      char char5 = 'P';
      charArray0[5] = char5;
      char char6 = '(';
      charArray0[6] = char6;
      int[] intArray0 = new int[10];
      intArray0[0] = (int) charArray0[0];
      intArray0[1] = (int) char2;
      int int0 = 1389;
      intArray0[2] = int0;
      intArray0[3] = (int) charArray0[5];
      intArray0[4] = (int) char4;
      int int1 = (-1001);
      intArray0[5] = int1;
      intArray0[6] = (int) char5;
      intArray0[7] = (int) charArray0[1];
      intArray0[8] = (int) charArray0[0];
      intArray0[9] = (int) charArray0[2];
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap0);
      boolean boolean0 = tCharIntHashMap1.containsKey(charArray0[1]);
      assertEquals("{(=80, V=86, l=80, ;=69, m=109, P=-1001, E=1389}", tCharIntHashMap0.toString());
      assertEquals(true, boolean0);
      assertEquals(0, tCharIntHashMap1.getNoEntryValue());
      assertEquals(false, tCharIntHashMap0.isEmpty());
      assertEquals("{(=80, l=80, V=86, ;=69, m=109, P=-1001, E=1389}", tCharIntHashMap1.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 264;
      float float0 = 427.67615F;
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0, int0);
      char char0 = ' ';
      Character character0 = new Character(char0);
      tCharIntHashMap0.equals((Object) character0);
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap(int0, float0);
      char char1 = '2';
      tCharIntHashMap0.size();
      int int1 = tCharIntHashMap1.adjustOrPutValue(char1, char1, char1);
      assertEquals("{2=50}", tCharIntHashMap1.toString());
      assertEquals(50, int1);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 2039;
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0);
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap0);
      tCharIntHashMap1.isEmpty();
      TCharIntHashMap tCharIntHashMap2 = new TCharIntHashMap();
      TCharProcedure tCharProcedure0 = null;
      String string0 = "";
      String string1 = "from > to : ";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://?from%20%3E%20to%20:%20#from%20%3E%20to%20:%20
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[8];
      char char0 = 'w';
      charArray0[0] = char0;
      char char1 = 'q';
      charArray0[1] = char1;
      char char2 = '^';
      charArray0[2] = char2;
      char char3 = 'N';
      charArray0[3] = char3;
      char char4 = '*';
      charArray0[4] = char4;
      char char5 = 'O';
      charArray0[5] = char5;
      char char6 = 'M';
      charArray0[6] = char6;
      char char7 = 'P';
      charArray0[7] = char7;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) char5;
      intArray0[1] = (int) charArray0[3];
      intArray0[2] = (int) char7;
      intArray0[3] = (int) char6;
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap0);
      assertEquals("{q=78, N=77, ^=80, w=79}", tCharIntHashMap0.toString());
      assertEquals(false, tCharIntHashMap0.isEmpty());
      assertEquals("{q=78, N=77, w=79, ^=80}", tCharIntHashMap1.toString());
      assertEquals(0, tCharIntHashMap1.getNoEntryValue());
  }

  @Test
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = '_';
      charArray0[0] = char0;
      char char1 = '7';
      charArray0[1] = char1;
      char char2 = 'G';
      charArray0[2] = char2;
      char char3 = '@';
      charArray0[3] = char3;
      char char4 = 'B';
      charArray0[4] = char4;
      char char5 = '.';
      charArray0[5] = char5;
      char char6 = '(';
      charArray0[6] = char6;
      char char7 = 'D';
      charArray0[7] = char7;
      char char8 = 's';
      charArray0[8] = char8;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) charArray0[0];
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap0);
      assertEquals(1, tCharIntHashMap1.size());
      assertEquals("{_=95}", tCharIntHashMap0.toString());
      assertEquals(23, tCharIntHashMap1.capacity());
      assertEquals("{_=95}", tCharIntHashMap1.toString());
      assertEquals(0, tCharIntHashMap1.getNoEntryValue());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-175);
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0);
      int int1 = 836;
      float float0 = 1042.362F;
      tCharIntHashMap0.keySet();
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap(int1, float0);
      Integer integer0 = null;
      int int2 = (-1);
      float float1 = 38.662838F;
      char char0 = '@';
      int int3 = 0;
      TCharIntHashMap tCharIntHashMap2 = new TCharIntHashMap(int2, float1, char0, int3);
      char char1 = 'A';
      tCharIntHashMap2.containsKey(char1);
      TCharIntHashMap tCharIntHashMap3 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap2);
      tCharIntHashMap2.putAll((TCharIntMap) tCharIntHashMap3);
      String string0 = "8\"A:K>A*-PTueD]6(";
      int int4 = 0;
      float float2 = 1.0F;
      TCharIntHashMap tCharIntHashMap4 = new TCharIntHashMap(int4, float2);
      tCharIntHashMap2.hashCode();
      tCharIntHashMap0.capacity();
      tCharIntHashMap0.keys(tCharIntHashMap1._set);
      TCharIntHashMap tCharIntHashMap5 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap4);
      tCharIntHashMap2.keys(tCharIntHashMap3._set);
      tCharIntHashMap5.valueCollection();
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, string0);
      String string1 = abstractMap_SimpleEntry0.setValue(string0);
      assertEquals("8\"A:K>A*-PTueD]6(", string1);
  }

  @Test
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[10];
      char char0 = 'c';
      charArray0[0] = char0;
      char char1 = 'Q';
      charArray0[1] = char1;
      char char2 = '';
      charArray0[2] = char2;
      char char3 = 'W';
      charArray0[3] = char3;
      char char4 = '<';
      charArray0[4] = char4;
      char char5 = 'w';
      charArray0[5] = char5;
      char char6 = '-';
      charArray0[6] = char6;
      char char7 = 's';
      charArray0[7] = char7;
      char char8 = 'C';
      charArray0[8] = char8;
      char char9 = '}';
      charArray0[9] = char9;
      int[] intArray0 = new int[6];
      int int0 = 0;
      intArray0[0] = int0;
      intArray0[1] = (int) char4;
      int int1 = (-1676);
      intArray0[2] = int1;
      intArray0[3] = (int) char1;
      intArray0[4] = (int) char6;
      intArray0[5] = (int) charArray0[8];
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      assertEquals("{W=81, <=45, Q=60, =-1676, c=0, w=67}", tCharIntHashMap0.toString());
      
      int int2 = 0;
      char char10 = '!';
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap(int2, (float) int2, char10, int2);
      TCharIntHashMap tCharIntHashMap2 = null;
      try {
        tCharIntHashMap2 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap1);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 1948;
      String string0 = "";
      try {
        Integer.decode(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[8];
      char char0 = 'q';
      charArray0[0] = char0;
      char char1 = '\"';
      charArray0[1] = char1;
      char char2 = 'y';
      charArray0[2] = char2;
      char char3 = 'u';
      charArray0[3] = char3;
      char char4 = 'z';
      charArray0[4] = char4;
      char char5 = '(';
      charArray0[5] = char5;
      char char6 = '}';
      charArray0[6] = char6;
      char char7 = 'M';
      charArray0[7] = char7;
      int[] intArray0 = new int[10];
      intArray0[0] = (int) charArray0[5];
      intArray0[1] = (int) char4;
      intArray0[2] = (int) char0;
      intArray0[3] = (int) char5;
      intArray0[4] = (int) charArray0[4];
      intArray0[5] = (int) charArray0[4];
      intArray0[6] = (int) char2;
      intArray0[7] = (int) charArray0[1];
      intArray0[8] = (int) charArray0[5];
      intArray0[9] = (int) charArray0[7];
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      tCharIntHashMap0.trimToSize();
      assertEquals(17, tCharIntHashMap0.capacity());
      assertEquals("{u=40, q=40, M=34, (=122, }=121, z=122, y=113, \"=122}", tCharIntHashMap0.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 1156;
      float float0 = 0.0F;
      char char0 = 'K';
      int int1 = (-525);
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0, float0, char0, int1);
      tCharIntHashMap0.hashCode();
      float float1 = (-581.28467F);
      char char1 = 'C';
      int int2 = 146;
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap(int0, float1, char1, int2);
      TCharIntMap tCharIntMap0 = null;
      int int3 = 0;
      TCharIntHashMap tCharIntHashMap2 = new TCharIntHashMap(int3, int3);
      char char2 = 'K';
      tCharIntHashMap1.tempDisableAutoCompaction();
      tCharIntHashMap2.increment(char2);
      tCharIntHashMap2.compact();
      tCharIntHashMap2.keys();
      tCharIntHashMap2.valueCollection();
      TCharIntHashMap tCharIntHashMap3 = null;
      try {
        tCharIntHashMap3 = new TCharIntHashMap(tCharIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      Object object0 = null;
      tCharIntHashMap0.valueCollection();
      String string0 = "";
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(object0, string0);
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>((Map.Entry<?, ? extends String>) abstractMap_SimpleEntry0);
      abstractMap_SimpleImmutableEntry0.getValue();
      char char0 = '*';
      tCharIntHashMap0.containsKey(char0);
      assertEquals(23, tCharIntHashMap0.capacity());
  }
}
