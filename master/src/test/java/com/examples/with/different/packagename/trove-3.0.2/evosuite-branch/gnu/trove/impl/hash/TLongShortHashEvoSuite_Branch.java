/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.hash.TLongShortHashMap;
import gnu.trove.procedure.TLongProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TLongShortHashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TLongShortHash.getNoEntryValue()S: root-Branch
   * 2 gnu.trove.impl.hash.TLongShortHash.<init>(I)V: root-Branch
   * 3 gnu.trove.impl.hash.TLongShortHash.setUp(I)I: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(15);
      short short0 = tLongShortHashMap0.getNoEntryValue();
      assertEquals((short)0, short0);
      assertEquals(0L, tLongShortHashMap0.getNoEntryKey());
      assertEquals(31, tLongShortHashMap0.capacity());
  }

  //Test case number: 1
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.TLongShortHash.getNoEntryKey()J: root-Branch
   * 2 gnu.trove.impl.hash.TLongShortHash.insertKeyAt(IJ)V: root-Branch
   * 3 gnu.trove.impl.hash.TLongShortHash.insertKey(J)I: I30 Branch 13 IFNE L279 - true
   * 4 gnu.trove.impl.hash.TLongShortHash.insertKey(J)I: I30 Branch 13 IFNE L279 - false
   * 5 gnu.trove.impl.hash.TLongShortHash.insertKey(J)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 6 gnu.trove.impl.hash.TLongShortHash.insertKey(J)I: I57 Branch 15 IFNE L286 - false
   */

//   @Test
//   public void test1()  throws Throwable  {
//       long[] longArray0 = new long[8];
//       short[] shortArray0 = new short[6];
//       TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(longArray0, shortArray0);
//       long long0 = tLongShortHashMap0.getNoEntryKey();
//       assertEquals(17, tLongShortHashMap0.capacity());
//       assertEquals(0, tLongShortHashMap0.getNoEntryValue());
//       assertEquals(0L, long0);
//       assertEquals(1, tLongShortHashMap0.size());
//   }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TLongShortHash.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   * 2 gnu.trove.impl.hash.TLongShortHash.<init>()V: root-Branch
   */

//   @Test
//   public void test2()  throws Throwable  {
//       TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
//       ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
//       ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
//       tLongShortHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
//       assertEquals(23, tLongShortHashMap0.capacity());
//       assertEquals(0L, tLongShortHashMap0.getNoEntryKey());
//       assertEquals(0, tLongShortHashMap0.getNoEntryValue());
//   }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TLongShortHash.<init>(IF)V: root-Branch
   */

//   @Test
//   public void test3()  throws Throwable  {
//       TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap((int) (short) (-15), (float) (-2L));
//       assertEquals(0, tLongShortHashMap0.getNoEntryValue());
//       assertEquals(0L, tLongShortHashMap0.getNoEntryKey());
//   }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TLongShortHash.contains(J)Z: I5 Branch 1 IFLT L178 - true
   * 2 gnu.trove.impl.hash.TLongShortHash.index(J)I: I37 Branch 5 IFNE L228 - false
   */

//   @Test
//   public void test4()  throws Throwable  {
//       TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
//       boolean boolean0 = tLongShortHashMap0.containsKey((long) 0);
//       assertEquals(0L, tLongShortHashMap0.getNoEntryKey());
//       assertEquals(23, tLongShortHashMap0.capacity());
//       assertEquals(0, tLongShortHashMap0.getNoEntryValue());
//       assertEquals(false, boolean0);
//   }

  //Test case number: 5
  /*
   * 13 covered goals:
   * 1 gnu.trove.impl.hash.TLongShortHash.contains(J)Z: I5 Branch 1 IFLT L178 - false
   * 2 gnu.trove.impl.hash.TLongShortHash.index(J)I: I52 Branch 7 IFNE L231 - true
   * 3 gnu.trove.impl.hash.TLongShortHash.indexRehashed(JIIB)I: I29 Branch 8 IFGE L245 - false
   * 4 gnu.trove.impl.hash.TLongShortHash.indexRehashed(JIIB)I: I46 Branch 9 IFNE L250 - true
   * 5 gnu.trove.impl.hash.TLongShortHash.indexRehashed(JIIB)I: I59 Branch 10 IFNE L254 - false
   * 6 gnu.trove.impl.hash.TLongShortHash.indexRehashed(JIIB)I: I62 Branch 11 IF_ICMPEQ L254 - false
   * 7 gnu.trove.impl.hash.TLongShortHash.insertKey(J)I: I57 Branch 15 IFNE L286 - true
   * 8 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 9 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I45 Branch 18 IFGE L310 - false
   * 10 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I62 Branch 19 IFNE L316 - false
   * 11 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 12 gnu.trove.impl.hash.TLongShortHash.index(J)I: I37 Branch 5 IFNE L228 - true
   * 13 gnu.trove.impl.hash.TLongShortHash.index(J)I: I46 Branch 6 IF_ICMPNE L231 - false
   */

  @Test
  public void test5()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[3] = (-1L);
      short[] shortArray0 = new short[8];
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(longArray0, shortArray0);
      boolean boolean0 = tLongShortHashMap0.contains((long) (short) (-1));
      assertEquals(true, boolean0);
      assertEquals("{-1=0, 0=0}", tLongShortHashMap0.toString());
      assertEquals(2, tLongShortHashMap0.size());
  }

  //Test case number: 6
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TLongShortHash.forEach(Lgnu/trove/procedure/TLongProcedure;)Z: I18 Branch 2 IFLE L192 - true
   * 2 gnu.trove.impl.hash.TLongShortHash.forEach(Lgnu/trove/procedure/TLongProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TLongShortHash.forEach(Lgnu/trove/procedure/TLongProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   * 4 gnu.trove.impl.hash.TLongShortHash.<init>(IFJS)V: root-Branch
   */

//   @Test
//   public void test6()  throws Throwable  {
//       TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap((int) (short)1719, (float) 0L, 0L, (short)0);
//       boolean boolean0 = tLongShortHashMap0.forEach((TLongProcedure) null);
//       assertEquals(0, tLongShortHashMap0.getNoEntryValue());
//       assertEquals(true, boolean0);
//       assertEquals(0L, tLongShortHashMap0.getNoEntryKey());
//   }

  //Test case number: 7
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TLongShortHash.forEach(Lgnu/trove/procedure/TLongProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - false
   * 2 gnu.trove.impl.hash.TLongShortHash.forEach(Lgnu/trove/procedure/TLongProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TLongShortHash.forEach(Lgnu/trove/procedure/TLongProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

  @Test
  public void test7()  throws Throwable  {
      long[] longArray0 = new long[7];
      short[] shortArray0 = new short[9];
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(longArray0, shortArray0);
      // Undeclared exception!
      try {
        tLongShortHashMap0.forEachKey((TLongProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 8
  /*
   * 5 covered goals:
   * 1 gnu.trove.impl.hash.TLongShortHash.index(J)I: I46 Branch 6 IF_ICMPNE L231 - true
   * 2 gnu.trove.impl.hash.TLongShortHash.indexRehashed(JIIB)I: I46 Branch 9 IFNE L250 - false
   * 3 gnu.trove.impl.hash.TLongShortHash.contains(J)Z: I5 Branch 1 IFLT L178 - true
   * 4 gnu.trove.impl.hash.TLongShortHash.removeAt(I)V: root-Branch
   * 5 gnu.trove.impl.hash.TLongShortHash.index(J)I: I52 Branch 7 IFNE L231 - false
   */

  @Test
  public void test8()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      tLongShortHashMap0.put((long) 0, (short) (-1013));
      assertEquals(1, tLongShortHashMap0.size());
      
      tLongShortHashMap0.remove((long) 0);
      boolean boolean0 = tLongShortHashMap0.containsKey((long) 0);
      assertEquals(false, boolean0);
  }

  //Test case number: 9
  /*
   * 5 covered goals:
   * 1 gnu.trove.impl.hash.TLongShortHash.indexRehashed(JIIB)I: I29 Branch 8 IFGE L245 - true
   * 2 gnu.trove.impl.hash.TLongShortHash.indexRehashed(JIIB)I: I59 Branch 10 IFNE L254 - true
   * 3 gnu.trove.impl.hash.TLongShortHash.indexRehashed(JIIB)I: I71 Branch 12 IF_ICMPNE L256 - true
   * 4 gnu.trove.impl.hash.TLongShortHash.index(J)I: I52 Branch 7 IFNE L231 - true
   * 5 gnu.trove.impl.hash.TLongShortHash.indexRehashed(JIIB)I: I46 Branch 9 IFNE L250 - false
   */

  @Test
  public void test9()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[2] = (-1L);
      short[] shortArray0 = new short[6];
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(longArray0, shortArray0);
      tLongShortHashMap0.remove((-9223372036854775808L));
      assertEquals(0L, tLongShortHashMap0.getNoEntryKey());
      assertEquals("{-1=0, 0=0}", tLongShortHashMap0.toString());
      assertEquals(2, tLongShortHashMap0.size());
  }

  //Test case number: 10
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.TLongShortHash.indexRehashed(JIIB)I: I62 Branch 11 IF_ICMPEQ L254 - true
   * 2 gnu.trove.impl.hash.TLongShortHash.indexRehashed(JIIB)I: I71 Branch 12 IF_ICMPNE L256 - false
   * 3 gnu.trove.impl.hash.TLongShortHash.index(J)I: I46 Branch 6 IF_ICMPNE L231 - true
   * 4 gnu.trove.impl.hash.TLongShortHash.indexRehashed(JIIB)I: I29 Branch 8 IFGE L245 - false
   * 5 gnu.trove.impl.hash.TLongShortHash.indexRehashed(JIIB)I: I46 Branch 9 IFNE L250 - true
   * 6 gnu.trove.impl.hash.TLongShortHash.indexRehashed(JIIB)I: I59 Branch 10 IFNE L254 - false
   */

  @Test
  public void test10()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      tLongShortHashMap0.put((long) 0, (short) (-1013));
      assertEquals(false, tLongShortHashMap0.isEmpty());
      
      tLongShortHashMap0.remove((long) 0);
      long[] longArray0 = new long[1];
      tLongShortHashMap0._set = longArray0;
      short short0 = tLongShortHashMap0.remove((long) 0);
      assertEquals((short)0, short0);
  }

  //Test case number: 11
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TLongShortHash.insertKey(J)I: I50 Branch 14 IF_ICMPNE L286 - true
   * 2 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 3 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 4 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I67 Branch 20 IF_ICMPEQ L317 - false
   */

  @Test
  public void test11()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      tLongShortHashMap0.put((long) 0, (short) (-1));
      short short0 = tLongShortHashMap0.remove((long) 0);
      short short1 = tLongShortHashMap0.putIfAbsent((long) (short) (-1), (short) (-1));
      assertEquals(false, tLongShortHashMap0.isEmpty());
      assertFalse(short1 == short0);
  }

  //Test case number: 12
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I45 Branch 18 IFGE L310 - true
   * 2 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I62 Branch 19 IFNE L316 - true
   * 3 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 4 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I104 Branch 22 IFNE L327 - true
   * 5 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I116 Branch 23 IF_ICMPNE L332 - true
   * 6 gnu.trove.impl.hash.TLongShortHash.insertKey(J)I: I57 Branch 15 IFNE L286 - false
   */

//   @Test
//   public void test12()  throws Throwable  {
//       long[] longArray0 = new long[8];
//       longArray0[3] = 1004L;
//       longArray0[6] = (-1651L);
//       short[] shortArray0 = new short[7];
//       TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(longArray0, shortArray0);
//       assertEquals("{-1651=0, 1004=0, 0=0}", tLongShortHashMap0.toString());
//       assertEquals(17, tLongShortHashMap0.capacity());
//       assertEquals(0, tLongShortHashMap0.getNoEntryValue());
//       assertEquals(3, tLongShortHashMap0.size());
//   }

  //Test case number: 13
  /*
   * 10 covered goals:
   * 1 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 2 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I116 Branch 23 IF_ICMPNE L332 - false
   * 3 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I121 Branch 24 IF_ICMPEQ L336 - false
   * 4 gnu.trove.impl.hash.TLongShortHash.removeAt(I)V: root-Branch
   * 5 gnu.trove.impl.hash.TLongShortHash.insertKey(J)I: I50 Branch 14 IF_ICMPNE L286 - true
   * 6 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 7 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 8 gnu.trove.impl.hash.TLongShortHash.index(J)I: I37 Branch 5 IFNE L228 - true
   * 9 gnu.trove.impl.hash.TLongShortHash.index(J)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 10 gnu.trove.impl.hash.TLongShortHash.index(J)I: I52 Branch 7 IFNE L231 - false
   */

  @Test
  public void test13()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      tLongShortHashMap0.put((long) 0, (short) (-1));
      tLongShortHashMap0.remove((long) 0);
      long[] longArray0 = new long[1];
      tLongShortHashMap0._set = longArray0;
      short short0 = tLongShortHashMap0.putIfAbsent((long) (short) (-1), (short) (-1));
      assertEquals(false, tLongShortHashMap0.isEmpty());
      assertEquals((short)0, short0);
  }

  //Test case number: 14
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I104 Branch 22 IFNE L327 - false
   * 2 gnu.trove.impl.hash.TLongShortHash.<init>(I)V: root-Branch
   * 3 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I62 Branch 19 IFNE L316 - false
   * 4 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   */

  @Test
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[2] = (-1L);
      short[] shortArray0 = new short[14];
      longArray0[1] = (long) (short) (-1);
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(longArray0, shortArray0);
      assertEquals(2, tLongShortHashMap0.size());
      assertEquals("{-1=0, 0=0}", tLongShortHashMap0.toString());
      assertEquals(0L, tLongShortHashMap0.getNoEntryKey());
  }

  //Test case number: 15
  /*
   * 14 covered goals:
   * 1 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I121 Branch 24 IF_ICMPEQ L336 - true
   * 2 gnu.trove.impl.hash.TLongShortHash.setUp(I)I: root-Branch
   * 3 gnu.trove.impl.hash.TLongShortHash.<init>()V: root-Branch
   * 4 gnu.trove.impl.hash.TLongShortHash.insertKeyAt(IJ)V: root-Branch
   * 5 gnu.trove.impl.hash.TLongShortHash.insertKey(J)I: I30 Branch 13 IFNE L279 - true
   * 6 gnu.trove.impl.hash.TLongShortHash.insertKey(J)I: I30 Branch 13 IFNE L279 - false
   * 7 gnu.trove.impl.hash.TLongShortHash.insertKey(J)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 8 gnu.trove.impl.hash.TLongShortHash.insertKey(J)I: I57 Branch 15 IFNE L286 - true
   * 9 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 10 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I45 Branch 18 IFGE L310 - false
   * 11 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I62 Branch 19 IFNE L316 - true
   * 12 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 13 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I104 Branch 22 IFNE L327 - true
   * 14 gnu.trove.impl.hash.TLongShortHash.insertKeyRehash(JIIB)I: I116 Branch 23 IF_ICMPNE L332 - false
   */

  @Test
  public void test15()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      tLongShortHashMap0.put((long) 0, (short) (-1));
      long[] longArray0 = new long[1];
      tLongShortHashMap0._set = longArray0;
      // Undeclared exception!
      try {
        tLongShortHashMap0.putIfAbsent((long) (short) (-1), (short) (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No free or removed slots available. Key set full?!!
         //
      }
  }
}
