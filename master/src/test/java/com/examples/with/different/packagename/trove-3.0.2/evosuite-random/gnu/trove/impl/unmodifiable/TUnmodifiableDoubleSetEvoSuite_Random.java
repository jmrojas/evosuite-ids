/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TDoubleCollection;
import gnu.trove.impl.sync.TSynchronizedDoubleSet;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleSet;
import gnu.trove.iterator.TDoubleIterator;
import gnu.trove.list.array.TDoubleArrayList;
import gnu.trove.list.linked.TDoubleLinkedList;
import gnu.trove.set.TDoubleSet;
import gnu.trove.set.hash.TDoubleHashSet;
import java.io.File;
import java.io.IOException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.text.Segment;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableDoubleSetEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet();
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet0);
      double[] doubleArray0 = new double[10];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = (-894.9937753768627);
      doubleArray0[1] = double1;
      double double2 = 1141.828327781576;
      doubleArray0[2] = double2;
      double double3 = Double.POSITIVE_INFINITY;
      doubleArray0[3] = double3;
      double double4 = Double.POSITIVE_INFINITY;
      doubleArray0[4] = double4;
      double double5 = (-1537.5683280192234);
      doubleArray0[5] = double5;
      double double6 = (-2022.9992094152615);
      doubleArray0[6] = double6;
      double double7 = 0.0;
      doubleArray0[7] = double7;
      double double8 = 1.0;
      doubleArray0[8] = double8;
      double double9 = 0.0;
      doubleArray0[9] = double9;
      tDoubleHashSet0.toArray(doubleArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = tUnmodifiableDoubleSet0.containsAll((Collection<?>) linkedList0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet();
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet0);
      double double0 = (-1.0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleSet0.add(double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 540.7007262655424;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = (-1996.1814736271058);
      doubleArray0[4] = double4;
      double double5 = (-1.0);
      doubleArray0[5] = double5;
      double double6 = (-1869.3910739246);
      doubleArray0[6] = double6;
      double double7 = 0.0;
      doubleArray0[7] = double7;
      double double8 = (-1112.411448172133);
      doubleArray0[8] = double8;
      double double9 = 4.9E-324;
      doubleArray0[9] = double9;
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet(doubleArray0);
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      tUnmodifiableDoubleSet0.containsAll((Collection<?>) linkedList0);
      int int0 = (-394);
      TDoubleHashSet tDoubleHashSet1 = new TDoubleHashSet(int0, int0);
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet1 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet1);
      tUnmodifiableDoubleSet1.toArray();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      // Undeclared exception!
      try {
        tUnmodifiableDoubleSet1.removeAll((Collection<?>) linkedList1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      int int0 = 1016;
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet(int0);
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet0);
      tUnmodifiableDoubleSet0.containsAll(tDoubleHashSet0._set);
      doubleArray0[0] = double0;
      double double1 = 1528.843843412472;
      int int1 = 601;
      TDoubleHashSet tDoubleHashSet1 = new TDoubleHashSet(int1);
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet1 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      tUnmodifiableDoubleSet1.containsAll((Collection<?>) linkedList0);
      doubleArray0[1] = double1;
      double double2 = 1174.436027196538;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      TDoubleHashSet tDoubleHashSet2 = new TDoubleHashSet(doubleArray0);
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet2 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet2);
      tUnmodifiableDoubleSet2.getNoEntryValue();
      int int2 = 1;
      float float0 = (-1613.1171F);
      TDoubleHashSet tDoubleHashSet3 = new TDoubleHashSet(int2, float0, (double) float0);
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet3 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet3);
      double double4 = (-1800.3000932305233);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleSet3.remove(double4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-1752.3439838522033);
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 73.54741325890082;
      doubleArray0[2] = double2;
      double double3 = 1286.2514257716184;
      doubleArray0[3] = double3;
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet(doubleArray0);
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try {
        tUnmodifiableDoubleSet0.removeAll((Collection<?>) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet();
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet0);
      Segment segment0 = new Segment();
      String string0 = segment0.toString();
      tUnmodifiableDoubleSet0.equals((Object) string0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      segment0.isPartialReturn();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      // Undeclared exception!
      try {
        tUnmodifiableDoubleSet0.removeAll((Collection<?>) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TDoubleSet tDoubleSet0 = null;
      TSynchronizedDoubleSet tSynchronizedDoubleSet0 = null;
      try {
        tSynchronizedDoubleSet0 = new TSynchronizedDoubleSet(tDoubleSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(doubleArray0);
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet((TDoubleCollection) tDoubleArrayList0);
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleSet0.addAll((TDoubleCollection) tDoubleArrayList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TDoubleSet tDoubleSet0 = null;
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = null;
      try {
        tUnmodifiableDoubleSet0 = new TUnmodifiableDoubleSet(tDoubleSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      double double1 = (-408.0593869747703);
      doubleArray0[0] = double1;
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet();
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      tUnmodifiableDoubleSet0.containsAll((Collection<?>) linkedList0);
      double double2 = 1720.0874626059713;
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(doubleArray0);
      int int0 = 303;
      int int1 = (-1);
      // Undeclared exception!
      try {
        tDoubleArrayList0.subList(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // end index -1 greater than begin index 303
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet();
          int int0 = 584;
          TDoubleHashSet tDoubleHashSet1 = new TDoubleHashSet(int0);
          TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet1);
          tUnmodifiableDoubleSet0.contains((double) int0);
          TSynchronizedDoubleSet tSynchronizedDoubleSet0 = new TSynchronizedDoubleSet((TDoubleSet) tDoubleHashSet0);
          TUnmodifiableDoubleSet tUnmodifiableDoubleSet1 = new TUnmodifiableDoubleSet((TDoubleSet) tSynchronizedDoubleSet0);
          String string0 = "xg(ilsyCYf}";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-223);
      double double0 = 0.0;
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet(int0, (float) int0, double0);
      Collection<String> collection0 = null;
      // Undeclared exception!
      try {
        tDoubleHashSet0.containsAll(collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet();
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet0);
      TDoubleIterator tDoubleIterator0 = tUnmodifiableDoubleSet0.iterator();
      assertEquals(false, tDoubleIterator0.hasNext());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-1441);
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet(int0, int0);
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet0);
      tUnmodifiableDoubleSet0.containsAll((TDoubleCollection) tDoubleHashSet0);
      TDoubleSet tDoubleSet0 = null;
      String string0 = "kyub+hRr)'?8m";
      TSynchronizedDoubleSet tSynchronizedDoubleSet0 = new TSynchronizedDoubleSet(tDoubleSet0, (Object) string0);
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet1 = new TUnmodifiableDoubleSet((TDoubleSet) tSynchronizedDoubleSet0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleSet1.removeAll((TDoubleCollection) tSynchronizedDoubleSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TDoubleHashSet tDoubleHashSet0 = new TDoubleHashSet();
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = new TUnmodifiableDoubleSet((TDoubleSet) tDoubleHashSet0);
      // Undeclared exception!
      try {
        tDoubleLinkedList0.max();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
