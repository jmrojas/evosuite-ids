/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TIntDoubleMap;
import gnu.trove.map.hash.TIntDoubleHashMap;
import gnu.trove.procedure.TIntProcedure;
import gnu.trove.set.TIntSet;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntDoubleHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 602;
      intArray0[1] = int1;
      double[] doubleArray0 = new double[9];
      double double0 = (-1535.7111929504056);
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) intArray0[0];
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int1;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      double double1 = (-893.2520156384669);
      doubleArray0[7] = double1;
      doubleArray0[8] = (double) int1;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      tIntDoubleHashMap0.clear();
      int int2 = 1522;
      int int3 = (-696);
      double double2 = (-1.0);
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int2, (float) int2, int3, double2);
      TIntDoubleHashMap tIntDoubleHashMap2 = new TIntDoubleHashMap((TIntDoubleMap) tIntDoubleHashMap1);
      double double3 = tIntDoubleHashMap2.adjustOrPutValue(int2, (double) int2, double2);
      assertEquals(false, tIntDoubleHashMap2.isEmpty());
      assertEquals((-1.0), double3, 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = (-1282);
      intArray0[0] = int0;
      int int1 = 152;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 71741;
      intArray0[3] = int3;
      int int4 = (-436);
      intArray0[4] = int4;
      int int5 = Integer.MAX_VALUE;
      intArray0[5] = int5;
      int int6 = 870;
      intArray0[6] = int6;
      int int7 = 384;
      intArray0[7] = int7;
      int int8 = Integer.MAX_VALUE;
      intArray0[8] = int8;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int6;
      doubleArray0[1] = (double) int3;
      double double0 = 0.0;
      doubleArray0[2] = double0;
      doubleArray0[3] = (double) intArray0[7];
      doubleArray0[4] = (double) intArray0[7];
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) intArray0[0];
      doubleArray0[7] = (double) intArray0[2];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      tIntDoubleHashMap0.size();
      assertEquals(0.0, tIntDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals(0, tIntDoubleHashMap0.getNoEntryKey());
      assertEquals("{870=-1282.0, 384=0.0, 152=71741.0, -1282=870.0, -436=384.0, 2147483647=-1282.0, 71741=384.0, 0=0.0}", tIntDoubleHashMap0.toString());
      
      int int9 = 0;
      float float0 = 1.0F;
      double double1 = 1.0;
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int9, float0, int9, double1);
      TIntDoubleHashMap tIntDoubleHashMap2 = new TIntDoubleHashMap((TIntDoubleMap) tIntDoubleHashMap1);
      int[] intArray1 = new int[10];
      intArray1[0] = int9;
      intArray1[1] = int9;
      intArray1[2] = int9;
      intArray1[3] = int9;
      intArray1[4] = int9;
      intArray1[5] = int9;
      intArray1[6] = int9;
      intArray1[7] = int9;
      intArray1[8] = int9;
      intArray1[9] = int9;
      int[] intArray2 = tIntDoubleHashMap2.keys(intArray1);
      assertEquals(1.0, tIntDoubleHashMap1.getNoEntryValue(), 0.01D);
      assertNotNull(intArray2);
      assertEquals(0, tIntDoubleHashMap1.getNoEntryKey());
      assertEquals(0, tIntDoubleHashMap2.getNoEntryKey());
  }

  @Test
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = Integer.MAX_VALUE;
      intArray0[1] = int1;
      int int2 = 433;
      intArray0[2] = int2;
      int int3 = 1518310967;
      intArray0[3] = int3;
      int int4 = Integer.MAX_VALUE;
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int4;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) intArray0[5];
      doubleArray0[3] = (double) int3;
      doubleArray0[4] = (double) int2;
      doubleArray0[5] = (double) int5;
      doubleArray0[6] = (double) intArray0[0];
      doubleArray0[7] = (double) intArray0[4];
      doubleArray0[8] = (double) int5;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      assertEquals("{433=0.0, 1518310967=1.518310967E9, 2147483647=433.0, 0=0.0}", tIntDoubleHashMap0.toString());
      assertEquals(4, tIntDoubleHashMap0.size());
      assertEquals(0, tIntDoubleHashMap0.getNoEntryKey());
      assertEquals(0.0, tIntDoubleHashMap0.getNoEntryValue(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      int int0 = 0;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      int int1 = 425;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int1);
      tIntDoubleHashMap0.getAutoCompactionFactor();
      assertEquals(0, tIntDoubleHashMap0.getNoEntryKey());
      assertEquals(0.0, tIntDoubleHashMap0.getNoEntryValue(), 0.01D);
      
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap();
      Locale locale0 = Locale.ITALY;
      String string0 = locale0.toLanguageTag();
      tIntDoubleHashMap1.equals((Object) string0);
      assertEquals(0, tIntDoubleHashMap1.getNoEntryKey());
      assertEquals(0.0, tIntDoubleHashMap1.getNoEntryValue(), 0.01D);
      
      TIntDoubleHashMap tIntDoubleHashMap2 = new TIntDoubleHashMap(int0, int0);
      double double0 = tIntDoubleHashMap2.get(int0);
      assertEquals(0.0, double0, 0.01D);
      
      tIntDoubleHashMap2.keySet();
      tIntDoubleHashMap2.ensureCapacity(int0);
      TIntDoubleHashMap tIntDoubleHashMap3 = null;
      try {
        tIntDoubleHashMap3 = new TIntDoubleHashMap((TIntDoubleMap) tIntDoubleHashMap2);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 139;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      tIntDoubleHashMap0.getNoEntryValue();
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int0, int0);
      int int1 = 461;
      float float0 = 1643.8732F;
      double double0 = 1385.6357619449414;
      TIntDoubleHashMap tIntDoubleHashMap2 = new TIntDoubleHashMap(int1, float0, int1, double0);
      tIntDoubleHashMap2.setAutoCompactionFactor(float0);
      TIntDoubleHashMap tIntDoubleHashMap3 = new TIntDoubleHashMap(int1);
      double double1 = 1470.9254315701462;
      tIntDoubleHashMap3.put(int1, double1);
      tIntDoubleHashMap3.setAutoCompactionFactor((float) int1);
      assertEquals(1, tIntDoubleHashMap3.size());
      assertEquals(0.0, tIntDoubleHashMap3.getNoEntryValue(), 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 1850;
      intArray0[0] = int0;
      int int1 = (-1462);
      intArray0[1] = int1;
      int int2 = 426;
      intArray0[2] = int2;
      int int3 = 1005;
      intArray0[3] = int3;
      int int4 = 895;
      int int5 = 0;
      float float0 = 1586.9117F;
      int int6 = (-1004);
      double double0 = 0.0;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int5, float0, int6, double0);
      int int7 = 0;
      double double1 = (-1813.917079631734);
      tIntDoubleHashMap0.adjustOrPutValue(int7, double1, (double) int6);
      assertEquals("{0=-1004.0}", tIntDoubleHashMap0.toString());
      
      intArray0[4] = int4;
      double[] doubleArray0 = new double[5];
      double double2 = 0.0;
      doubleArray0[0] = double2;
      doubleArray0[1] = (double) intArray0[4];
      doubleArray0[2] = (double) intArray0[4];
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) intArray0[4];
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(intArray0, doubleArray0);
      tIntDoubleHashMap1.tempDisableAutoCompaction();
      assertEquals("{895=895.0, 426=895.0, 1005=-1462.0, -1462=895.0, 1850=0.0}", tIntDoubleHashMap1.toString());
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 1080;
          int int1 = (-1817);
          float float0 = 0.0F;
          TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0, float0);
          int int2 = 0;
          String string0 = "MY3T41.Q=Kl";
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"MY3T41.Q=Kl\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 1807;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 77509;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      boolean boolean0 = false;
      String string0 = tIntDoubleHashMap0.toString();
      assertNotNull(string0);
      
      tIntDoubleHashMap0.reenableAutoCompaction(boolean0);
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) int2;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int1;
      doubleArray0[5] = (double) int1;
      doubleArray0[6] = (double) int2;
      doubleArray0[7] = (double) intArray0[0];
      doubleArray0[8] = (double) int0;
      doubleArray0[9] = (double) int1;
      double[] doubleArray1 = tIntDoubleHashMap0.values(doubleArray0);
      assertNotNull(doubleArray1);
      
      intArray0[2] = int2;
      int int3 = 186;
      intArray0[3] = int3;
      int int4 = (-987);
      intArray0[4] = int4;
      int int5 = 0;
      double double0 = tIntDoubleHashMap0.get(int2);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0, tIntDoubleHashMap0.getNoEntryKey());
      
      intArray0[5] = int5;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) intArray0[2];
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(intArray0, doubleArray2);
      double double1 = (-1718.4478140290432);
      tIntDoubleHashMap1.containsValue(double1);
      assertEquals("{1807=77509.0}", tIntDoubleHashMap1.toString());
      assertEquals(17, tIntDoubleHashMap1.capacity());
      
      int int6 = 95;
      TIntDoubleHashMap tIntDoubleHashMap2 = new TIntDoubleHashMap(int6);
      int int7 = 0;
      tIntDoubleHashMap2.ensureCapacity(int7);
      assertEquals(0.0, tIntDoubleHashMap2.getNoEntryValue(), 0.01D);
      assertEquals(0, tIntDoubleHashMap2.getNoEntryKey());
  }

  @Test
  public void test9()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      double[] doubleArray0 = new double[5];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      double double1 = (-1100.5500224247933);
      doubleArray0[1] = double1;
      double double2 = 1930.3272622615061;
      doubleArray0[2] = double2;
      double double3 = 516.4447134809953;
      doubleArray0[3] = double3;
      double double4 = 1634.272037806595;
      doubleArray0[4] = double4;
      double[] doubleArray1 = tIntDoubleHashMap0.values(doubleArray0);
      assertNotNull(doubleArray1);
      
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap((TIntDoubleMap) tIntDoubleHashMap0);
      assertEquals(23, tIntDoubleHashMap1.capacity());
      
      tIntDoubleHashMap1.trimToSize();
      int int0 = (-856);
      tIntDoubleHashMap1.containsKey(int0);
      TIntDoubleHashMap tIntDoubleHashMap2 = new TIntDoubleHashMap();
      int int1 = (-1810);
      double double5 = 175.36155505519002;
      tIntDoubleHashMap2.putIfAbsent(int1, double5);
      tIntDoubleHashMap2.get(int1);
      tIntDoubleHashMap2.compact();
      tIntDoubleHashMap2.getAutoCompactionFactor();
      tIntDoubleHashMap2.trimToSize();
      assertEquals("{-1810=175.36155505519002}", tIntDoubleHashMap2.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-1456);
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0, int0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      double double0 = 0.0;
      doubleArray0[4] = double0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      tIntDoubleHashMap0.values(doubleArray0);
      int int1 = 0;
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int0, int0, int1, int1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream((InputStream) pipedInputStream0, (InputStream) pipedInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) sequenceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 2024;
      float float0 = (-1.0F);
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0);
      TIntProcedure tIntProcedure0 = null;
      boolean boolean0 = tIntDoubleHashMap0.forEachKey(tIntProcedure0);
      int int1 = 978;
      int int2 = (-28);
      double double0 = 1642.9018132147035;
      tIntDoubleHashMap0.isEmpty();
      assertEquals(0.0, tIntDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals(0, tIntDoubleHashMap0.getNoEntryKey());
      
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int1, (float) int1, int2, double0);
      tIntDoubleHashMap1.tempDisableAutoCompaction();
      assertEquals(-28, tIntDoubleHashMap1.getNoEntryKey());
      
      int int3 = 0;
      int int4 = 0;
      TIntDoubleHashMap tIntDoubleHashMap2 = new TIntDoubleHashMap(int3, int3, int4, int0);
      boolean boolean1 = tIntDoubleHashMap2.increment(int0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2024.0, tIntDoubleHashMap2.getNoEntryValue(), 0.01D);
      
      TIntDoubleHashMap tIntDoubleHashMap3 = new TIntDoubleHashMap(int0, float0);
      tIntDoubleHashMap3.size();
      assertEquals(0.0, tIntDoubleHashMap3.getNoEntryValue(), 0.01D);
      assertEquals(3, tIntDoubleHashMap3.capacity());
      assertEquals(0, tIntDoubleHashMap3.getNoEntryKey());
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1477;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0, int0);
      tIntDoubleHashMap0.ensureCapacity(int0);
      int int1 = (-1319);
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int1);
      tIntDoubleHashMap1.size();
      int int2 = 938;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int1;
      String string0 = "";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 738;
      intArray0[0] = int0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) intArray0[0];
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) intArray0[0];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      TIntSet tIntSet0 = tIntDoubleHashMap0.keySet();
      assertEquals("{738=738.0}", tIntDoubleHashMap0.toString());
      assertEquals(0.0, tIntDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals(0, tIntSet0.getNoEntryValue());
      assertEquals(11, tIntDoubleHashMap0.capacity());
  }

  @Test
  public void test14()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      tIntDoubleHashMap0.getAutoCompactionFactor();
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap();
      File file0 = null;
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name can't be null
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 15661423;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      assertEquals(23, tIntDoubleHashMap0.capacity());
      
      tIntDoubleHashMap0.trimToSize();
      float float0 = 0.0F;
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int0, float0);
      assertEquals(0.0, tIntDoubleHashMap1.getNoEntryValue(), 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 820;
      intArray0[0] = int0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) intArray0[0];
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) intArray0[0];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      Locale locale0 = Locale.TAIWAN;
      String string0 = locale0.getISO3Language();
      tIntDoubleHashMap0.equals((Object) string0);
      assertEquals(11, tIntDoubleHashMap0.capacity());
      assertEquals("{820=820.0}", tIntDoubleHashMap0.toString());
      assertEquals(0.0, tIntDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals(0, tIntDoubleHashMap0.getNoEntryKey());
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 0;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0);
      assertEquals(0.0, tIntDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals(0, tIntDoubleHashMap0.getNoEntryKey());
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = (-555);
      int[] intArray0 = new int[5];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) intArray0[2];
      doubleArray0[1] = (double) intArray0[1];
      doubleArray0[2] = (double) intArray0[0];
      doubleArray0[3] = (double) intArray0[3];
      doubleArray0[4] = (double) intArray0[3];
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) intArray0[3];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int0);
      tIntDoubleHashMap1.compact();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
      }
  }
}
