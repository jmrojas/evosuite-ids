/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TByteShortMap;
import gnu.trove.map.hash.TByteShortHashMap;
import gnu.trove.procedure.TByteShortProcedure;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteShortHashMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-107);
      byteArray0[4] = byte4;
      byte byte5 = (byte)114;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-67);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-88);
      byteArray0[8] = byte8;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) byte6;
      shortArray0[1] = (short) byteArray0[3];
      shortArray0[2] = (short) byte3;
      shortArray0[3] = (short) byteArray0[6];
      shortArray0[4] = (short) byteArray0[5];
      shortArray0[5] = (short) byte1;
      shortArray0[6] = (short) byteArray0[8];
      shortArray0[7] = (short) byte1;
      shortArray0[8] = (short) byteArray0[6];
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      Object object0 = null;
      boolean boolean0 = tByteShortHashMap0.equals(object0);
      assertEquals(false, boolean0);
      assertEquals(5, tByteShortHashMap0.size());
      assertEquals("{114=0, -107=114, -88=0, -67=0, 0=-88}", tByteShortHashMap0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-111);
      byteArray0[0] = byte0;
      byte byte1 = (byte)17;
      byteArray0[1] = byte1;
      byte byte2 = (byte)79;
      byteArray0[2] = byte2;
      byte byte3 = (byte)39;
      byteArray0[3] = byte3;
      byte byte4 = (byte)126;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      short[] shortArray0 = new short[10];
      short short0 = (short) (-2759);
      shortArray0[0] = short0;
      short short1 = (short) (-268);
      shortArray0[1] = short1;
      shortArray0[2] = (short) byteArray0[2];
      shortArray0[3] = (short) byteArray0[1];
      shortArray0[4] = (short) byteArray0[0];
      shortArray0[5] = (short) byte3;
      shortArray0[6] = (short) byteArray0[4];
      shortArray0[7] = (short) byteArray0[2];
      short short2 = (short)209;
      shortArray0[8] = short2;
      shortArray0[9] = (short) byteArray0[4];
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      int int0 = (-1662);
      tByteShortHashMap0.ensureCapacity(int0);
      assertEquals("{39=17, 17=-268, 79=79, 126=-111, -111=-2759, 0=39}", tByteShortHashMap0.toString());
      assertEquals(false, tByteShortHashMap0.isEmpty());
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)110;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)1;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-101);
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-52);
      byteArray0[7] = byte7;
      short[] shortArray0 = new short[5];
      short short0 = (short)1459;
      shortArray0[0] = short0;
      shortArray0[1] = (short) byteArray0[6];
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byteArray0[6];
      shortArray0[4] = (short) byteArray0[7];
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      assertEquals(17, tByteShortHashMap0.capacity());
      assertEquals(2, tByteShortHashMap0.size());
      assertEquals("{110=-101, 0=-52}", tByteShortHashMap0.toString());
  }

//   @Test
//   public void test3()  throws Throwable  {
//       int int0 = 99;
//       int int1 = 0;
//       float float0 = 1911.9546F;
//       TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int1, float0);
//       tByteShortHashMap0.iterator();
//       TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap(int0, int0);
//       byte byte0 = (byte)103;
//       boolean boolean0 = tByteShortHashMap1.increment(byte0);
//       assertEquals(false, boolean0);
//       
//       int int2 = 1717;
//       tByteShortHashMap1.compact();
//       assertEquals(3, tByteShortHashMap1.capacity());
//       assertEquals("{}", tByteShortHashMap1.toString());
//       
//       TByteShortHashMap tByteShortHashMap2 = new TByteShortHashMap(int2);
//       short[] shortArray0 = tByteShortHashMap2.values();
//       assertNotNull(shortArray0);
//       
//       TByteShortHashMap tByteShortHashMap3 = new TByteShortHashMap((TByteShortMap) tByteShortHashMap2);
//       tByteShortHashMap3.valueCollection();
//       short short0 = (short) (-1);
//       tByteShortHashMap3.containsValue(short0);
//       assertEquals(23, tByteShortHashMap3.capacity());
//       assertEquals(0, tByteShortHashMap3.getNoEntryKey());
//   }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)84;
      byteArray0[1] = byte1;
      byte byte2 = (byte)56;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-79);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-1);
      byteArray0[6] = byte6;
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) byteArray0[2];
      shortArray0[1] = (short) byteArray0[5];
      shortArray0[2] = (short) byte5;
      shortArray0[3] = (short) byte6;
      shortArray0[4] = (short) byte2;
      short short0 = (short) (-1343);
      shortArray0[5] = short0;
      short short1 = (short)1942;
      shortArray0[6] = short1;
      shortArray0[7] = (short) byte3;
      shortArray0[8] = (short) byte6;
      short short2 = (short)47;
      shortArray0[9] = short2;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap((TByteShortMap) tByteShortHashMap0);
      tByteShortHashMap1.getAutoCompactionFactor();
      int int0 = 0;
      byte byte7 = (byte) (-10);
      short short3 = (short) (-259);
      TByteShortMap tByteShortMap0 = null;
      TByteShortHashMap tByteShortHashMap2 = null;
      try {
        tByteShortHashMap2 = new TByteShortHashMap(tByteShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte) (-112);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-26);
      byteArray0[1] = byte1;
      byte byte2 = (byte)108;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-44);
      byteArray0[6] = byte6;
      byte byte7 = (byte)81;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-97);
      byteArray0[8] = byte8;
      byte byte9 = (byte) (-127);
      byteArray0[9] = byte9;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) byteArray0[7];
      shortArray0[1] = (short) byte3;
      short short0 = (short)5471;
      shortArray0[2] = short0;
      shortArray0[3] = (short) byteArray0[3];
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      assertEquals("{108=5471, -112=81, -26=0, 0=0}", tByteShortHashMap0.toString());
      assertEquals(4, tByteShortHashMap0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      byte byte0 = (byte) (-6);
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0, float0, byte0, (short) byte0);
      byte byte1 = (byte) (-29);
      boolean boolean0 = tByteShortHashMap0.contains(byte1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short(short0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = "Zfi";
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-35);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-101);
      byteArray0[2] = byte2;
      byte byte3 = (byte)69;
      byteArray0[3] = byte3;
      byte byte4 = (byte)2;
      byteArray0[4] = byte4;
      byte byte5 = (byte)1;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-1);
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      byteArray0[8] = byte8;
      byteArrayOutputStream0.write(byteArray0);
      try {
        byteArrayOutputStream0.toString(string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // Zfi
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 9922933;
      float float0 = 371.02112F;
      byte byte0 = (byte)0;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0, float0, byte0, (short) byte0);
      assertEquals(28289, tByteShortHashMap0.capacity());
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 359339171;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0, int0);
      byte byte0 = (byte)70;
      Short short0 = new Short((short) byte0);
      AbstractMap.SimpleImmutableEntry<Byte, Short> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Short>((Byte) byte0, short0);
      abstractMap_SimpleImmutableEntry0.toString();
      InputStream inputStream0 = null;
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream(inputStream0, inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 115;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-47);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) byte0;
      shortArray0[6] = (short) byte0;
      shortArray0[7] = (short) byte0;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      short[] shortArray1 = tByteShortHashMap0.values();
      assertNotNull(shortArray1);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)4;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-125);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      short[] shortArray2 = new short[4];
      shortArray2[0] = (short) byte0;
      short short0 = (short) (-365);
      shortArray2[1] = short0;
      shortArray2[2] = (short) byteArray0[2];
      shortArray2[3] = (short) byte3;
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap(byteArray0, shortArray2);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale0 = Locale.getDefault(locale_Category0);
      String string0 = locale0.getDisplayCountry();
      tByteShortHashMap1.equals((Object) string0);
      TByteShortHashMap tByteShortHashMap2 = new TByteShortHashMap(int0);
      byte byte4 = (byte)110;
      tByteShortHashMap2.get(byte4);
      tByteShortHashMap2.trimToSize();
      assertEquals(3, tByteShortHashMap2.capacity());
      
      int int1 = 232;
      TByteShortHashMap tByteShortHashMap3 = new TByteShortHashMap(int1);
      tByteShortHashMap3.capacity();
      assertFalse(tByteShortHashMap3.equals(tByteShortHashMap0));
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-566);
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0);
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap((TByteShortMap) tByteShortHashMap0);
      byte byte0 = (byte)54;
      TByteShortHashMap tByteShortHashMap2 = new TByteShortHashMap((TByteShortMap) tByteShortHashMap0);
      byte byte1 = (byte)14;
      short short0 = (short)0;
      tByteShortHashMap1.compact();
      tByteShortHashMap2.putIfAbsent(byte1, short0);
      tByteShortHashMap2.iterator();
      // Undeclared exception!
      try {
        tByteShortHashMap2.setAutoCompactionFactor((float) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -566.0
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-48);
      byteArray0[1] = byte1;
      byte byte2 = (byte)110;
      byteArray0[2] = byte2;
      byte byte3 = (byte)21;
      byteArray0[3] = byte3;
      byte byte4 = (byte)30;
      byteArray0[4] = byte4;
      byte byte5 = (byte)59;
      byteArray0[5] = byte5;
      byte byte6 = (byte)122;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-116);
      byteArray0[7] = byte7;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) byte2;
      shortArray0[1] = (short) byte1;
      shortArray0[2] = (short) byte7;
      shortArray0[3] = (short) byte3;
      shortArray0[4] = (short) byteArray0[7];
      shortArray0[5] = (short) byte1;
      shortArray0[6] = (short) byte0;
      shortArray0[7] = (short) byteArray0[2];
      shortArray0[8] = (short) byteArray0[7];
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap((TByteShortMap) tByteShortHashMap0);
      String string0 = "=";
      TByteShortHashMap tByteShortHashMap2 = null;
      AbstractMap.SimpleEntry<String, TByteShortHashMap> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, TByteShortHashMap>(string0, tByteShortHashMap2);
      TByteShortHashMap tByteShortHashMap3 = abstractMap_SimpleEntry0.setValue(tByteShortHashMap2);
      assertNull(tByteShortHashMap3);
  }

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)92;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-20);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-65);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-1);
      byteArray0[6] = byte6;
      byte byte7 = (byte)52;
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      byteArray0[8] = byte8;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) byte3;
      shortArray0[1] = (short) byte6;
      shortArray0[2] = (short) byteArray0[1];
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      assertEquals(23, tByteShortHashMap0.capacity());
      
      tByteShortHashMap0.compact();
      assertEquals(7, tByteShortHashMap0.capacity());
      assertEquals("{-20=92, 92=-1, 0=0}", tByteShortHashMap0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 127;
          TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0, int0);
          tByteShortHashMap0.iterator();
          String string0 = "iPcfS!mU)u-Bv~XG";
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"iPcfS!mU)u-Bv~XG\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-1902);
      float float0 = 299.1922F;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0, float0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-90);
      byteArray0[0] = byte0;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) byteArray0[0];
      short short0 = (short)121;
      shortArray0[1] = short0;
      shortArray0[2] = (short) byteArray0[0];
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap(tByteShortHashMap0._states, shortArray0);
      tByteShortHashMap0.putAll((TByteShortMap) tByteShortHashMap1);
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      tByteShortHashMap0._set = byteArray0;
      assertEquals(1, tByteShortHashMap0.size());
      
      byte byte2 = (byte)0;
      short short1 = (short)1730;
      TByteShortHashMap tByteShortHashMap2 = new TByteShortHashMap(int0, (float) int0, byte2, short1);
      tByteShortHashMap2.size();
      byte[] byteArray1 = tByteShortHashMap2._states;
      TByteShortHashMap tByteShortHashMap3 = new TByteShortHashMap();
      assertFalse(tByteShortHashMap3.equals(tByteShortHashMap0));
  }

  @Test
  public void test16()  throws Throwable  {
      short short0 = (short)706;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)48;
      byteArray0[0] = byte0;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap((int) short0);
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-33);
      byteArray0[2] = byte2;
      byte byte3 = (byte)46;
      byteArray0[3] = byte3;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) byte1;
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap(byteArray0, shortArray0);
      tByteShortHashMap1.setAutoCompactionFactor((float) short0);
      TByteShortHashMap tByteShortHashMap2 = new TByteShortHashMap(tByteShortHashMap1._states, shortArray0);
      Short short1 = new Short(short0);
      TByteShortHashMap tByteShortHashMap3 = new TByteShortHashMap(tByteShortHashMap1._set, shortArray0);
      byte byte4 = (byte) (-95);
      Byte byte5 = new Byte(byte4);
      String string0 = " > ";
      AbstractMap.SimpleEntry<Byte, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, String>(byte5, string0);
      shortArray0[0] = (short) byteArray0[0];
      TByteShortHashMap tByteShortHashMap4 = new TByteShortHashMap((int) byte2, (float) byte0);
      AbstractMap.SimpleEntry<Short, AbstractMap.SimpleEntry<Byte, String>> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Short, AbstractMap.SimpleEntry<Byte, String>>(short1, abstractMap_SimpleEntry0);
      shortArray0[0] = (short) byte0;
      AbstractMap.SimpleEntry<Byte, String> abstractMap_SimpleEntry2 = abstractMap_SimpleEntry1.getValue();
      assertSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
  }

//   @Test
//   public void test17()  throws Throwable  {
//       int int0 = 1523;
//       byte byte0 = (byte)73;
//       short short0 = (short) (-13349);
//       TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0, (float) int0, byte0, short0);
//       assertEquals(0.5F, tByteShortHashMap0.getAutoCompactionFactor(), 0.01F);
//   }

  @Test
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      locale0.getDisplayScript();
      tByteShortHashMap0.iterator();
      locale0.toLanguageTag();
      byte byte0 = (byte)70;
      tByteShortHashMap0.increment(byte0);
      Locale locale1 = Locale.GERMANY;
      locale0.getDisplayLanguage(locale1);
      locale0.getUnicodeLocaleAttributes();
      byte byte1 = (byte)48;
      tByteShortHashMap0.get(byte1);
      int int0 = 0;
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap(int0);
      TByteShortHashMap tByteShortHashMap2 = new TByteShortHashMap((TByteShortMap) tByteShortHashMap1);
      tByteShortHashMap1.compact();
      tByteShortHashMap0.isEmpty();
      tByteShortHashMap0._states = tByteShortHashMap1._set;
      tByteShortHashMap2.compact();
      short[] shortArray0 = new short[4];
      short short0 = (short)355;
      shortArray0[0] = short0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte0;
      tByteShortHashMap2.values(shortArray0);
      TByteShortProcedure tByteShortProcedure0 = null;
      // Undeclared exception!
      try {
        tByteShortHashMap0.retainEntries(tByteShortProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
      }
  }
}
