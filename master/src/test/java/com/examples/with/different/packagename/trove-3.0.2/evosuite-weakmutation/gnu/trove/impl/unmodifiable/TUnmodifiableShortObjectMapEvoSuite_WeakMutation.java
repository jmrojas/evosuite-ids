/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortSet;
import gnu.trove.map.TShortObjectMap;
import gnu.trove.map.hash.TShortObjectHashMap;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.TShortProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import java.util.Collection;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableShortObjectMapEvoSuite_WeakMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 16 covered goals:
   * 1 Weak Mutation 11: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.isEmpty()Z:59 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 2 Weak Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.isEmpty()Z:59 - DeleteStatement: isEmpty()Z
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.isEmpty()Z: root-Branch
   * 4 Weak Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.<init>(Lgnu/trove/map/TShortObjectMap;)V:53 - ReplaceComparisonOperator != null -> = null
   * 5 Weak Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.size()I:58 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 6 Weak Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.size()I:58 - DeleteStatement: size()I
   * 7 Weak Mutation 11: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.isEmpty()Z:59 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 8 Weak Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.isEmpty()Z:59 - DeleteStatement: isEmpty()Z
   * 9 Weak Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.getNoEntryKey()S:92 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 10 Weak Mutation 56: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.getNoEntryKey()S:92 - DeleteStatement: getNoEntryKey()S
   * 11 Weak Mutation 62: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachEntry(Lgnu/trove/procedure/TShortObjectProcedure;)Z:101 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TShortObjectProcedure;)Z
   * 12 Weak Mutation 61: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachEntry(Lgnu/trove/procedure/TShortObjectProcedure;)Z:101 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 13 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.getNoEntryKey()S: root-Branch
   * 14 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachEntry(Lgnu/trove/procedure/TShortObjectProcedure;)Z: root-Branch
   * 15 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.size()I: root-Branch
   * 16 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.<init>(Lgnu/trove/map/TShortObjectMap;)V: I17 Branch 1 IFNONNULL L53 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>(1148);
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      TShortObjectHashMap<Object> tShortObjectHashMap1 = new TShortObjectHashMap<Object>((TShortObjectMap<?>) tUnmodifiableShortObjectMap0);
      TUnmodifiableShortObjectMap<Object> tUnmodifiableShortObjectMap1 = new TUnmodifiableShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap1);
      boolean boolean0 = tUnmodifiableShortObjectMap1.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 1
  /*
   * 11 covered goals:
   * 1 Weak Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsKey(S)Z:60 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 2 Weak Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsKey(S)Z:60 - InsertUnaryOp Negation of key
   * 3 Weak Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsKey(S)Z:60 - InsertUnaryOp IINC 1 key
   * 4 Weak Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsKey(S)Z:60 - DeleteStatement: containsKey(S)Z
   * 5 Weak Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsKey(S)Z:60 - InsertUnaryOp IINC -1 key
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsKey(S)Z: root-Branch
   * 7 Weak Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsKey(S)Z:60 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 8 Weak Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsKey(S)Z:60 - InsertUnaryOp Negation of key
   * 9 Weak Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsKey(S)Z:60 - InsertUnaryOp IINC 1 key
   * 10 Weak Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsKey(S)Z:60 - DeleteStatement: containsKey(S)Z
   * 11 Weak Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsKey(S)Z:60 - InsertUnaryOp IINC -1 key
   */

  @Test
  public void test1()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>((int) (short)1515);
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      boolean boolean0 = tUnmodifiableShortObjectMap0.containsKey((short)1515);
      assertEquals(false, boolean0);
  }

  //Test case number: 2
  /*
   * 5 covered goals:
   * 1 Weak Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsValue(Ljava/lang/Object;)Z:61 - DeleteStatement: containsValue(Ljava/lang/Object;)Z
   * 2 Weak Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsValue(Ljava/lang/Object;)Z:61 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsValue(Ljava/lang/Object;)Z: root-Branch
   * 4 Weak Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsValue(Ljava/lang/Object;)Z:61 - DeleteStatement: containsValue(Ljava/lang/Object;)Z
   * 5 Weak Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsValue(Ljava/lang/Object;)Z:61 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   */

  @Test
  public void test2()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>(2025, 2025);
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      boolean boolean0 = tUnmodifiableShortObjectMap0.containsValue((Object) "{}");
      assertEquals(false, boolean0);
  }

  //Test case number: 3
  /*
   * 11 covered goals:
   * 1 Weak Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.get(S)Ljava/lang/Object;:62 - InsertUnaryOp Negation of key
   * 2 Weak Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.get(S)Ljava/lang/Object;:62 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 3 Weak Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.get(S)Ljava/lang/Object;:62 - InsertUnaryOp IINC -1 key
   * 4 Weak Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.get(S)Ljava/lang/Object;:62 - InsertUnaryOp IINC 1 key
   * 5 Weak Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.get(S)Ljava/lang/Object;:62 - DeleteStatement: get(S)Ljava/lang/Object;
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.get(S)Ljava/lang/Object;: root-Branch
   * 7 Weak Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.get(S)Ljava/lang/Object;:62 - InsertUnaryOp Negation of key
   * 8 Weak Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.get(S)Ljava/lang/Object;:62 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 9 Weak Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.get(S)Ljava/lang/Object;:62 - InsertUnaryOp IINC -1 key
   * 10 Weak Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.get(S)Ljava/lang/Object;:62 - InsertUnaryOp IINC 1 key
   * 11 Weak Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.get(S)Ljava/lang/Object;:62 - DeleteStatement: get(S)Ljava/lang/Object;
   */

  @Test
  public void test3()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>(129, 129);
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      tUnmodifiableShortObjectMap0.get((short) (-9));
  }

  //Test case number: 4
  /*
   * 14 covered goals:
   * 1 Weak Mutation 25: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;:74 - DeleteField: keySetLgnu/trove/set/TShortSet;
   * 2 Weak Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;:74 - ReplaceComparisonOperator != null -> = null
   * 3 Weak Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;:75 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 4 Weak Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;:75 - DeleteStatement: unmodifiableSet(Lgnu/trove/set/TShortSet;)Lgnu/trove/set/TShortSet;
   * 5 Weak Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;:75 - DeleteStatement: keySet()Lgnu/trove/set/TShortSet;
   * 6 Weak Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;:76 - DeleteField: keySetLgnu/trove/set/TShortSet;
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;: I4 Branch 2 IFNONNULL L74 - true
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;: I4 Branch 2 IFNONNULL L74 - false
   * 9 Weak Mutation 25: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;:74 - DeleteField: keySetLgnu/trove/set/TShortSet;
   * 10 Weak Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;:75 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 11 Weak Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;:74 - ReplaceComparisonOperator != null -> = null
   * 12 Weak Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;:75 - DeleteStatement: unmodifiableSet(Lgnu/trove/set/TShortSet;)Lgnu/trove/set/TShortSet;
   * 13 Weak Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;:75 - DeleteStatement: keySet()Lgnu/trove/set/TShortSet;
   * 14 Weak Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;:76 - DeleteField: keySetLgnu/trove/set/TShortSet;
   */

  @Test
  public void test4()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>(1148);
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = (TUnmodifiableShortSet)tUnmodifiableShortObjectMap0.keySet();
      assertNotNull(tUnmodifiableShortSet0);
      
      TUnmodifiableShortSet tUnmodifiableShortSet1 = (TUnmodifiableShortSet)tUnmodifiableShortObjectMap0.keySet();
      assertSame(tUnmodifiableShortSet1, tUnmodifiableShortSet0);
  }

  //Test case number: 5
  /*
   * 5 covered goals:
   * 1 Weak Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keys()[S:78 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 2 Weak Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keys()[S:78 - DeleteStatement: keys()[S
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keys()[S: root-Branch
   * 4 Weak Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keys()[S:78 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 5 Weak Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keys()[S:78 - DeleteStatement: keys()[S
   */

  @Test
  public void test5()  throws Throwable  {
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>();
      TUnmodifiableShortObjectMap<Integer> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Integer>((TShortObjectMap<Integer>) tShortObjectHashMap0);
      short[] shortArray0 = tUnmodifiableShortObjectMap0.keys();
      assertNotNull(shortArray0);
  }

  //Test case number: 6
  /*
   * 5 covered goals:
   * 1 Weak Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keys([S)[S:79 - DeleteStatement: keys([S)[S
   * 2 Weak Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keys([S)[S:79 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keys([S)[S: root-Branch
   * 4 Weak Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keys([S)[S:79 - DeleteStatement: keys([S)[S
   * 5 Weak Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keys([S)[S:79 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   */

  @Test
  public void test6()  throws Throwable  {
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>();
      TUnmodifiableShortObjectMap<Integer> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Integer>((TShortObjectMap<Integer>) tShortObjectHashMap0);
      short[] shortArray0 = tUnmodifiableShortObjectMap0.keys(tShortObjectHashMap0._set);
      assertNotNull(shortArray0);
  }

  //Test case number: 7
  /*
   * 14 covered goals:
   * 1 Weak Mutation 35: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;:82 - DeleteField: valuesLjava/util/Collection;
   * 2 Weak Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;:82 - ReplaceComparisonOperator != null -> = null
   * 3 Weak Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: valueCollection()Ljava/util/Collection;
   * 4 Weak Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: unmodifiableCollection(Ljava/util/Collection;)Ljava/util/Collection;
   * 5 Weak Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 6 Weak Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;:84 - DeleteField: valuesLjava/util/Collection;
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;: I4 Branch 3 IFNONNULL L82 - true
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;: I4 Branch 3 IFNONNULL L82 - false
   * 9 Weak Mutation 35: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;:82 - DeleteField: valuesLjava/util/Collection;
   * 10 Weak Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: valueCollection()Ljava/util/Collection;
   * 11 Weak Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: unmodifiableCollection(Ljava/util/Collection;)Ljava/util/Collection;
   * 12 Weak Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;:82 - ReplaceComparisonOperator != null -> = null
   * 13 Weak Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 14 Weak Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;:84 - DeleteField: valuesLjava/util/Collection;
   */

  @Test
  public void test7()  throws Throwable  {
      TShortObjectHashMap<Object> tShortObjectHashMap0 = new TShortObjectHashMap<Object>(2025);
      TUnmodifiableShortObjectMap<Object> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap0);
      Collection<Object> collection0 = tUnmodifiableShortObjectMap0.valueCollection();
      assertNotNull(collection0);
      
      Collection<Object> collection1 = tUnmodifiableShortObjectMap0.valueCollection();
      assertSame(collection1, collection0);
  }

  //Test case number: 8
  /*
   * 5 covered goals:
   * 1 Weak Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.values()[Ljava/lang/Object;:86 - DeleteStatement: values()[Ljava/lang/Object;
   * 2 Weak Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.values()[Ljava/lang/Object;:86 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.values()[Ljava/lang/Object;: root-Branch
   * 4 Weak Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.values()[Ljava/lang/Object;:86 - DeleteStatement: values()[Ljava/lang/Object;
   * 5 Weak Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.values()[Ljava/lang/Object;:86 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   */

  @Test
  public void test8()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>(1148);
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      TShortObjectHashMap<Object> tShortObjectHashMap1 = new TShortObjectHashMap<Object>((TShortObjectMap<?>) tUnmodifiableShortObjectMap0);
      TUnmodifiableShortObjectMap<Object> tUnmodifiableShortObjectMap1 = new TUnmodifiableShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap1);
      Object[] objectArray0 = tUnmodifiableShortObjectMap1.values();
      assertNotNull(objectArray0);
  }

  //Test case number: 9
  /*
   * 5 covered goals:
   * 1 Weak Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 2 Weak Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteStatement: values([Ljava/lang/Object;)[Ljava/lang/Object;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: root-Branch
   * 4 Weak Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 5 Weak Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteStatement: values([Ljava/lang/Object;)[Ljava/lang/Object;
   */

  @Test
  public void test9()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>(129, 129);
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      Short[] shortArray0 = new Short[10];
      Short[] shortArray1 = tUnmodifiableShortObjectMap0.values(shortArray0);
      assertSame(shortArray0, shortArray1);
  }

  //Test case number: 10
  /*
   * 12 covered goals:
   * 1 Weak Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 2 Weak Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 3 Weak Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 4 Weak Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 0 -> 1
   * 5 Weak Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - false
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - true
   * 8 Weak Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 9 Weak Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 10 Weak Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 11 Weak Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 0 -> 1
   * 12 Weak Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   */

  @Test
  public void test10()  throws Throwable  {
      TShortObjectHashMap<Object> tShortObjectHashMap0 = new TShortObjectHashMap<Object>(2025);
      TUnmodifiableShortObjectMap<Object> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap0);
      boolean boolean0 = tUnmodifiableShortObjectMap0.equals((Object) "en-GB");
      assertEquals(false, boolean0);
  }

  //Test case number: 11
  /*
   * 8 covered goals:
   * 1 Weak Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 1 -> 0
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - true
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - false
   * 4 Weak Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 5 Weak Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 6 Weak Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 7 Weak Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 8 Weak Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 1 -> 0
   */

  @Test
  public void test11()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>((-1569), (-1569));
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      TShortObjectHashMap<String> tShortObjectHashMap1 = new TShortObjectHashMap<String>((-1569));
      TUnmodifiableShortObjectMap<String> tUnmodifiableShortObjectMap1 = new TUnmodifiableShortObjectMap<String>((TShortObjectMap<String>) tShortObjectHashMap1);
      boolean boolean0 = tUnmodifiableShortObjectMap0.equals((Object) tUnmodifiableShortObjectMap1);
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 5 covered goals:
   * 1 Weak Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.hashCode()I:90 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 2 Weak Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.hashCode()I:90 - DeleteStatement: hashCode()I
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.hashCode()I: root-Branch
   * 4 Weak Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.hashCode()I:90 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 5 Weak Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.hashCode()I:90 - DeleteStatement: hashCode()I
   */

  @Test
  public void test12()  throws Throwable  {
      TShortObjectHashMap<Object> tShortObjectHashMap0 = new TShortObjectHashMap<Object>(1802, 1802);
      TUnmodifiableShortObjectMap<Object> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap0);
      int int0 = tUnmodifiableShortObjectMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 13
  /*
   * 5 covered goals:
   * 1 Weak Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.toString()Ljava/lang/String;:91 - DeleteStatement: toString()Ljava/lang/String;
   * 2 Weak Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.toString()Ljava/lang/String;:91 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.toString()Ljava/lang/String;: root-Branch
   * 4 Weak Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.toString()Ljava/lang/String;:91 - DeleteStatement: toString()Ljava/lang/String;
   * 5 Weak Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.toString()Ljava/lang/String;:91 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   */

  @Test
  public void test13()  throws Throwable  {
      TShortObjectHashMap<Object> tShortObjectHashMap0 = new TShortObjectHashMap<Object>(2025);
      TUnmodifiableShortObjectMap<Object> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap0);
      String string0 = tUnmodifiableShortObjectMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 14
  /*
   * 5 covered goals:
   * 1 Weak Mutation 58: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachKey(Lgnu/trove/procedure/TShortProcedure;)Z:95 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TShortProcedure;)Z
   * 2 Weak Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachKey(Lgnu/trove/procedure/TShortProcedure;)Z:95 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachKey(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   * 4 Weak Mutation 58: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachKey(Lgnu/trove/procedure/TShortProcedure;)Z:95 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TShortProcedure;)Z
   * 5 Weak Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachKey(Lgnu/trove/procedure/TShortProcedure;)Z:95 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   */

  @Test
  public void test14()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>(1148);
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      boolean boolean0 = tUnmodifiableShortObjectMap0.forEachKey((TShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 15
  /*
   * 5 covered goals:
   * 1 Weak Mutation 59: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 2 Weak Mutation 60: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   * 4 Weak Mutation 59: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 5 Weak Mutation 60: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z
   */

  @Test
  public void test15()  throws Throwable  {
      TShortObjectHashMap<String> tShortObjectHashMap0 = new TShortObjectHashMap<String>((-1569));
      TUnmodifiableShortObjectMap<String> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<String>((TShortObjectMap<String>) tShortObjectHashMap0);
      Object[] objectArray0 = new Object[3];
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(objectArray0);
      boolean boolean0 = tUnmodifiableShortObjectMap0.forEachValue((TObjectProcedure<? super String>) toObjectArrayProceedure0);
      assertEquals(true, boolean0);
  }

  //Test case number: 16
  /*
   * 7 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.putAll(Lgnu/trove/map/TShortObjectMap;)V: root-Branch
   * 2 Weak Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.size()I:58 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 3 Weak Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.size()I:58 - DeleteStatement: size()I
   * 4 Weak Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.getNoEntryKey()S:92 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   * 5 Weak Mutation 56: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.getNoEntryKey()S:92 - DeleteStatement: getNoEntryKey()S
   * 6 Weak Mutation 62: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachEntry(Lgnu/trove/procedure/TShortObjectProcedure;)Z:101 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TShortObjectProcedure;)Z
   * 7 Weak Mutation 61: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachEntry(Lgnu/trove/procedure/TShortObjectProcedure;)Z:101 - DeleteField: mLgnu/trove/map/TShortObjectMap;
   */

  @Test
  public void test16()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>(1148);
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      TShortObjectHashMap<Object> tShortObjectHashMap1 = new TShortObjectHashMap<Object>((TShortObjectMap<?>) tUnmodifiableShortObjectMap0);
      TUnmodifiableShortObjectMap<Object> tUnmodifiableShortObjectMap1 = new TUnmodifiableShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap1);
      // Undeclared exception!
      try {
        tUnmodifiableShortObjectMap1.putAll((TShortObjectMap<?>) tShortObjectHashMap1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.<init>(Lgnu/trove/map/TShortObjectMap;)V: I17 Branch 1 IFNONNULL L53 - false
   * 2 Weak Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.<init>(Lgnu/trove/map/TShortObjectMap;)V:53 - ReplaceComparisonOperator != null -> = null
   */

  @Test
  public void test17()  throws Throwable  {
      TUnmodifiableShortObjectMap<String> tUnmodifiableShortObjectMap0 = null;
      try {
        tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<String>((TShortObjectMap<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
