/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.set.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.hash.TObjectHash;
import gnu.trove.impl.sync.TSynchronizedRandomAccessIntList;
import gnu.trove.list.TIntList;
import gnu.trove.set.hash.TLinkedHashSet;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.Collection;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TLinkedHashSetEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 42012281;
      float float0 = 0.0F;
      TLinkedHashSet<Object> tLinkedHashSet0 = new TLinkedHashSet<Object>(int0);
      int int1 = 1;
      int int2 = 38;
      TLinkedHashSet<Integer> tLinkedHashSet1 = new TLinkedHashSet<Integer>(int2, int0);
      int int3 = (-2047);
      // Undeclared exception!
      try {
        tLinkedHashSet1.setUp(int3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TLinkedHashSet<Integer> tLinkedHashSet0 = new TLinkedHashSet<Integer>();
      int int0 = (-1);
      tLinkedHashSet0.compact();
      TLinkedHashSet<Object> tLinkedHashSet1 = null;
      try {
        tLinkedHashSet1 = new TLinkedHashSet<Object>(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TLinkedHashSet<String> tLinkedHashSet0 = new TLinkedHashSet<String>();
      ObjectOutput objectOutput0 = null;
      // Undeclared exception!
      try {
        tLinkedHashSet0.writeExternal(objectOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      TLinkedHashSet<Integer> tLinkedHashSet0 = new TLinkedHashSet<Integer>(int1, int1);
      int int2 = 882;
      float float0 = 0.5F;
      TLinkedHashSet<Object> tLinkedHashSet1 = new TLinkedHashSet<Object>(int2, float0);
      int int3 = tLinkedHashSet1.size();
      int int4 = 407;
      float float1 = 0.0F;
      TLinkedHashSet<String> tLinkedHashSet2 = new TLinkedHashSet<String>(int3, float1);
      tLinkedHashSet0.ensureCapacity(int4);
      String string0 = "8T(";
      tLinkedHashSet2.add(string0);
      tLinkedHashSet0.add((Integer) int1);
      tLinkedHashSet0.ensureCapacity(int4);
      tLinkedHashSet0.setUp(int4);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.available();
      PipedOutputStream pipedOutputStream0 = null;
      String string1 = "maH";
      tLinkedHashSet2.add(string1);
      // Undeclared exception!
      try {
        pipedInputStream0.connect(pipedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-1);
      int int1 = (-2008);
      TLinkedHashSet<Object> tLinkedHashSet0 = null;
      try {
        tLinkedHashSet0 = new TLinkedHashSet<Object>(int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TLinkedHashSet<String> tLinkedHashSet0 = new TLinkedHashSet<String>();
          TLinkedHashSet<Object> tLinkedHashSet1 = new TLinkedHashSet<Object>((Collection<?>) tLinkedHashSet0);
          tLinkedHashSet1.addAll((Collection<?>) tLinkedHashSet0);
          Object[] objectArray0 = tLinkedHashSet0._set;
          String string0 = "";
          tLinkedHashSet0.add(string0);
          tLinkedHashSet0.size();
          int int0 = 1860;
          TLinkedHashSet<Object> tLinkedHashSet2 = new TLinkedHashSet<Object>((Collection<?>) tLinkedHashSet0);
          tLinkedHashSet2.clear();
          tLinkedHashSet0.add(string0);
          TLinkedHashSet<Object> tLinkedHashSet3 = new TLinkedHashSet<Object>(int0);
          tLinkedHashSet3.setUp(int0);
          String string1 = "\\ROCYMucpx";
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\\ROCYMucpx\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.GeneratedConstructorAccessor12.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-1);
      TLinkedHashSet<String> tLinkedHashSet0 = null;
      try {
        tLinkedHashSet0 = new TLinkedHashSet<String>(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 1;
      TLinkedHashSet<Object> tLinkedHashSet0 = new TLinkedHashSet<Object>(int0);
      tLinkedHashSet0.tempDisableAutoCompaction();
      TLinkedHashSet<String> tLinkedHashSet1 = new TLinkedHashSet<String>(int0);
      tLinkedHashSet0.clear();
      tLinkedHashSet1.tempDisableAutoCompaction();
      tLinkedHashSet1.compact();
      Object object0 = null;
      tLinkedHashSet0.hashCode();
      tLinkedHashSet0.equals(object0);
      tLinkedHashSet0.add(object0);
      tLinkedHashSet0.hashCode();
      TLinkedHashSet<String> tLinkedHashSet2 = new TLinkedHashSet<String>();
      float float0 = 687.6013F;
      tLinkedHashSet0.setAutoCompactionFactor(float0);
      int int1 = 0;
      FileDescriptor fileDescriptor0 = FileDescriptor.out;
      InputStream inputStream0 = null;
      tLinkedHashSet0.compact();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TLinkedHashSet<String> tLinkedHashSet0 = new TLinkedHashSet<String>();
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) tLinkedHashSet0;
      objectArray0[1] = (Object) tLinkedHashSet0;
      objectArray0[2] = (Object) tLinkedHashSet0;
      int int0 = 671;
      TLinkedHashSet<Integer> tLinkedHashSet1 = new TLinkedHashSet<Integer>(int0);
      tLinkedHashSet0.removeAll((Collection<?>) tLinkedHashSet1);
      float float0 = (-775.9642F);
      objectArray0[0] = (Object) int0;
      objectArray0[1] = (Object) tLinkedHashSet0;
      objectArray0[2] = (Object) float0;
      Object object0 = TObjectHash.REMOVED;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) tLinkedHashSet0;
      objectArray0[5] = (Object) tLinkedHashSet0;
      objectArray0[6] = (Object) tLinkedHashSet0;
      objectArray0[7] = (Object) tLinkedHashSet0;
      objectArray0[8] = (Object) tLinkedHashSet0;
      objectArray0[9] = (Object) tLinkedHashSet0;
      TLinkedHashSet<Integer> tLinkedHashSet2 = new TLinkedHashSet<Integer>(int0, float0);
      objectArray0[3] = (Object) tLinkedHashSet0;
      objectArray0[4] = (Object) tLinkedHashSet0;
      objectArray0[5] = (Object) tLinkedHashSet0;
      objectArray0[6] = (Object) tLinkedHashSet0;
      objectArray0[7] = (Object) tLinkedHashSet0;
      objectArray0[8] = (Object) tLinkedHashSet0;
      objectArray0[9] = (Object) tLinkedHashSet0;
      Object[] objectArray1 = tLinkedHashSet0.toArray(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(23, tLinkedHashSet0.capacity());
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      TLinkedHashSet<Object> tLinkedHashSet0 = new TLinkedHashSet<Object>(int0);
      tLinkedHashSet0.size();
      tLinkedHashSet0.getAutoCompactionFactor();
      TLinkedHashSet<Object> tLinkedHashSet1 = new TLinkedHashSet<Object>();
      TLinkedHashSet<String> tLinkedHashSet2 = new TLinkedHashSet<String>(int0);
      int int1 = (-1240);
      float float0 = (-662.8147F);
      TLinkedHashSet<Object> tLinkedHashSet3 = new TLinkedHashSet<Object>(int1, float0);
      TIntList tIntList0 = null;
      TSynchronizedRandomAccessIntList tSynchronizedRandomAccessIntList0 = null;
      try {
        tSynchronizedRandomAccessIntList0 = new TSynchronizedRandomAccessIntList(tIntList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 798;
      float float0 = (-1.0F);
      TLinkedHashSet<Object> tLinkedHashSet0 = new TLinkedHashSet<Object>(int0);
      tLinkedHashSet0.toString();
      TLinkedHashSet<Object> tLinkedHashSet1 = null;
      try {
        tLinkedHashSet1 = new TLinkedHashSet<Object>(int0, float0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TLinkedHashSet<Object> tLinkedHashSet0 = new TLinkedHashSet<Object>();
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.toLanguageTag();
      tLinkedHashSet0.add((Object) string0);
      tLinkedHashSet0.iterator();
      int int0 = tLinkedHashSet0.hashCode();
      float float0 = 654.77045F;
      float float1 = 615.4337F;
      TLinkedHashSet<Integer> tLinkedHashSet1 = new TLinkedHashSet<Integer>(int0, float1);
      TLinkedHashSet<String> tLinkedHashSet2 = new TLinkedHashSet<String>(int0, float0);
      String string1 = "";
      tLinkedHashSet2.add(string1);
      tLinkedHashSet0.compact();
      int int1 = tLinkedHashSet0.size();
      TLinkedHashSet<Integer> tLinkedHashSet3 = new TLinkedHashSet<Integer>(int1);
      boolean boolean0 = false;
      tLinkedHashSet3.isEmpty();
      tLinkedHashSet3.reenableAutoCompaction(boolean0);
      tLinkedHashSet3.add((Integer) int0);
      TLinkedHashSet<Object> tLinkedHashSet4 = new TLinkedHashSet<Object>();
      tLinkedHashSet4.addAll((Collection<?>) tLinkedHashSet0);
      assertEquals(false, tLinkedHashSet0.isEmpty());
      
      boolean boolean1 = tLinkedHashSet0.removeAll((Collection<?>) tLinkedHashSet4);
      assertEquals(true, boolean1);
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TLinkedHashSet<Object> tLinkedHashSet0 = new TLinkedHashSet<Object>();
          String string0 = "3[}X";
          File file0 = new File(string0);
          String string1 = file0.getParent();
          tLinkedHashSet0.add((Object) string1);
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 215;
      TLinkedHashSet<String> tLinkedHashSet0 = new TLinkedHashSet<String>(int0, int0);
      TLinkedHashSet<Object> tLinkedHashSet1 = new TLinkedHashSet<Object>((Collection<?>) tLinkedHashSet0);
      boolean boolean0 = true;
      tLinkedHashSet1.reenableAutoCompaction(boolean0);
      TLinkedHashSet<Integer> tLinkedHashSet2 = new TLinkedHashSet<Integer>();
      tLinkedHashSet2.toArray();
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1590;
      TLinkedHashSet<String> tLinkedHashSet0 = new TLinkedHashSet<String>(int0, int0);
      String string0 = tLinkedHashSet0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      int int1 = 0;
      float float0 = (-1.0F);
      TLinkedHashSet<Object> tLinkedHashSet1 = new TLinkedHashSet<Object>(int1, float0);
      TLinkedHashSet<Integer> tLinkedHashSet2 = new TLinkedHashSet<Integer>();
      tLinkedHashSet1.retainAll((Collection<?>) tLinkedHashSet2);
      assertEquals(23, tLinkedHashSet2.capacity());
      
      tLinkedHashSet1.ensureCapacity(int1);
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      TLinkedHashSet<String> tLinkedHashSet3 = new TLinkedHashSet<String>((Collection<? extends String>) set0);
      tLinkedHashSet3._set = tLinkedHashSet1._set;
      tLinkedHashSet1.setAutoCompactionFactor((float) int1);
      assertEquals(3, tLinkedHashSet1.capacity());
  }
}
