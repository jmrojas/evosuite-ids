/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TIntCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableIntList;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessIntList;
import gnu.trove.list.TIntList;
import gnu.trove.list.array.TIntArrayList;
import gnu.trove.list.linked.TIntLinkedList;
import gnu.trove.procedure.TIntProcedure;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.RandomAccessFile;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.Locale;
import java.util.Random;
import java.util.Set;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableRandomAccessIntListEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = (-802);
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 600;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      int int6 = (-1334);
      intArray0[6] = int6;
      int int7 = 31;
      intArray0[7] = int7;
      int int8 = (-1);
      intArray0[8] = int8;
      int int9 = 1;
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0, int9);
      int int10 = (-1);
      // Undeclared exception!
      try {
        tIntArrayList0.subList(int5, int10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // end index -1 greater than begin index 0
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 1716;
      int int1 = 0;
      TIntArrayList tIntArrayList0 = new TIntArrayList(int0, int1);
      TUnmodifiableIntList tUnmodifiableIntList0 = new TUnmodifiableIntList((TIntList) tIntArrayList0);
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList((TIntList) tUnmodifiableIntList0);
      int int2 = tUnmodifiableRandomAccessIntList0.lastIndexOf(int1, int0);
      assertFalse(int2 == int0);
  }

  @Test
  public void test2()  throws Throwable  {
      TIntList tIntList0 = null;
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = null;
      try {
        tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList(tIntList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList(int0);
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList((TIntList) tIntLinkedList0);
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessIntList0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 1;
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList(int0);
      TIntArrayList tIntArrayList0 = new TIntArrayList((TIntCollection) tIntLinkedList0);
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList((TIntList) tIntArrayList0);
      assertEquals("{}", tUnmodifiableRandomAccessIntList0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 878;
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0);
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList((TIntList) tIntArrayList0);
      tUnmodifiableRandomAccessIntList0.lastIndexOf(int0);
      int int1 = 1721;
      tUnmodifiableRandomAccessIntList0.binarySearch(int1);
      intArray0[0] = int0;
      tUnmodifiableRandomAccessIntList0.hashCode();
      int int2 = 0;
      // Undeclared exception!
      try {
        tIntArrayList0.insert(intArray0[0], int2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not grow ArrayList wrapped external array
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-1104);
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList(int0);
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://#
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      TIntArrayList tIntArrayList1 = new TIntArrayList((TIntCollection) tIntArrayList0);
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList((TIntList) tIntArrayList1);
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessIntList0.addAll((TIntCollection) tIntArrayList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 2;
      TIntList tIntList0 = null;
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = null;
      try {
        tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList(tIntList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList();
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList((TIntList) tIntLinkedList0);
      int[] intArray0 = new int[6];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 825;
      intArray0[1] = int1;
      int int2 = 711;
      intArray0[2] = int2;
      int int3 = 1922;
      intArray0[3] = int3;
      int int4 = (-1526);
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessIntList0.addAll(intArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      TIntArrayList tIntArrayList0 = new TIntArrayList(int0);
      // Undeclared exception!
      try {
        tIntArrayList0.max();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot find maximum of an empty list
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 154;
      intArray0[0] = int0;
      int int1 = 1494;
      intArray0[1] = int1;
      intArray0[0] = int1;
      intArray0[1] = int1;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      int int2 = 98;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0, int1);
      tIntArrayList0.reverse();
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList((TIntList) tIntArrayList0);
      int int5 = (-1958);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      tIntArrayList0.retainAll((Collection<?>) set0);
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessIntList0.toArray(intArray0[4], int5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = Integer.MAX_VALUE;
      intArray0[1] = int1;
      int int2 = (-409);
      intArray0[2] = int2;
      int int3 = (-840);
      intArray0[3] = int3;
      int int4 = 1624;
      intArray0[4] = int4;
      int int5 = 2;
      intArray0[5] = int5;
      int int6 = 0;
      intArray0[6] = int6;
      int int7 = 0;
      intArray0[7] = int7;
      int int8 = 0;
      intArray0[8] = int8;
      int int9 = 483;
      intArray0[9] = int9;
      int int10 = Integer.MIN_VALUE;
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0, int10);
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList((TIntList) tIntArrayList0);
      int int11 = tUnmodifiableRandomAccessIntList0.hashCode();
      assertFalse(int11 == int9);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 10;
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList(int0);
      TIntProcedure tIntProcedure0 = null;
      TIntLinkedList tIntLinkedList1 = (TIntLinkedList)tIntLinkedList0.inverseGrep(tIntProcedure0);
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList((TIntList) tIntLinkedList1);
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessIntList0.sort(int0, int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1895;
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList(int0);
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList((TIntList) tIntLinkedList0);
      int int1 = 0;
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessIntList0.remove(int0, int1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList((TIntList) tIntArrayList0);
      int int0 = 0;
      Random random0 = new Random();
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessIntList0.shuffle(random0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      int int0 = (-200);
      tIntArrayList0.getNoEntryValue();
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList((TIntList) tIntArrayList0);
      File file0 = null;
      String string0 = "$n_\\W\"yD+S/Gi<";
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(file0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"$n_\\W\"yD+S/Gi<\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 0;
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList(int0);
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList((TIntList) tIntLinkedList0);
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessIntList0.min();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
