/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.set.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.iterator.hash.TObjectHashIterator;
import gnu.trove.set.hash.THashSet;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.Array;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.TreeSet;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class THashSetEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      THashSet<LinkedHashSet<Object>> tHashSet0 = new THashSet<LinkedHashSet<Object>>();
      boolean boolean0 = true;
      LinkedHashSet<String>[] linkedHashSetArray0 = (LinkedHashSet<String>[]) Array.newInstance(LinkedHashSet.class, 5);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      THashSet<HashSet<Integer>> tHashSet1 = new THashSet<HashSet<Integer>>();
      tHashSet1.retainAll((Collection<?>) linkedHashSet0);
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<String> linkedHashSet2 = new LinkedHashSet<String>();
      linkedHashSetArray0[2] = linkedHashSet2;
      LinkedHashSet<String> linkedHashSet3 = new LinkedHashSet<String>();
      linkedHashSetArray0[3] = linkedHashSet3;
      int int0 = 0;
      float float0 = (-605.7007F);
      LinkedHashSet<String> linkedHashSet4 = null;
      try {
        linkedHashSet4 = new LinkedHashSet<String>(int0, float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -605.7007
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      THashSet<LinkedHashSet<Integer>> tHashSet0 = new THashSet<LinkedHashSet<Integer>>(int0);
      String string0 = "U";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: U://UU?U#U
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      THashSet<Object> tHashSet0 = new THashSet<Object>();
      String[] stringArray0 = new String[1];
      String string0 = "";
      stringArray0[0] = string0;
      int int0 = (-456);
      float float0 = 0.0F;
      THashSet<Integer> tHashSet1 = new THashSet<Integer>(int0, float0);
      tHashSet1.hashCode();
      String string1 = "|\"+HY#`c;b";
      stringArray0[0] = string1;
      String[] stringArray1 = tHashSet0.toArray(stringArray0);
      assertEquals("{}", tHashSet0.toString());
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 106;
      THashSet<TreeSet<Integer>> tHashSet0 = new THashSet<TreeSet<Integer>>(int0);
      int int1 = 1592;
      tHashSet0.setUp(int1);
      THashSet<Integer> tHashSet1 = new THashSet<Integer>(int0);
      int int2 = 0;
      tHashSet1.add((Integer) int2);
      float float0 = 6.6360896E8F;
      THashSet<String> tHashSet2 = new THashSet<String>(int0, float0);
      tHashSet2.iterator();
      THashSet<Object> tHashSet3 = new THashSet<Object>((Collection<?>) tHashSet1);
      tHashSet3.clear();
      tHashSet3.capacity();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 1170;
      THashSet<Object> tHashSet0 = new THashSet<Object>(int0, int0);
      HashSet<Integer>[] hashSetArray0 = (HashSet<Integer>[]) Array.newInstance(HashSet.class, 9);
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      hashSetArray0[0] = hashSet0;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      hashSetArray0[1] = (HashSet<Integer>) linkedHashSet0;
      HashSet<Integer> hashSet1 = new HashSet<Integer>();
      hashSetArray0[2] = hashSet1;
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      hashSetArray0[3] = (HashSet<Integer>) linkedHashSet1;
      HashSet<Integer> hashSet2 = new HashSet<Integer>(int0, int0);
      hashSetArray0[4] = hashSet2;
      HashSet<Integer> hashSet3 = new HashSet<Integer>();
      hashSetArray0[5] = hashSet3;
      LinkedHashSet<Integer> linkedHashSet2 = new LinkedHashSet<Integer>();
      hashSetArray0[6] = (HashSet<Integer>) linkedHashSet2;
      HashSet<Integer> hashSet4 = new HashSet<Integer>();
      hashSetArray0[7] = hashSet4;
      int int1 = 0;
      float float0 = 1800.4427F;
      LinkedHashSet<Integer> linkedHashSet3 = new LinkedHashSet<Integer>(int1, float0);
      hashSetArray0[8] = (HashSet<Integer>) linkedHashSet3;
      HashSet<Integer>[] hashSetArray1 = tHashSet0.toArray(hashSetArray0);
      assertEquals("{}", tHashSet0.toString());
      assertSame(hashSetArray1, hashSetArray0);
      assertNotNull(hashSetArray1);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 96;
      float float0 = 1923.1427F;
      THashSet<Integer> tHashSet0 = new THashSet<Integer>();
      THashSet<Integer> tHashSet1 = new THashSet<Integer>(int0, int0);
      tHashSet0.isEmpty();
      THashSet<Object> tHashSet2 = new THashSet<Object>(int0, float0);
      tHashSet2.trimToSize();
      float float1 = tHashSet2.getAutoCompactionFactor();
      int int1 = (-985);
      THashSet<HashSet<String>> tHashSet3 = new THashSet<HashSet<String>>(int1, float1);
      tHashSet3.toString();
      THashSet<String> tHashSet4 = new THashSet<String>();
      tHashSet4.toArray(tHashSet0._set);
      tHashSet2.clear();
      THashSet<LinkedHashSet<String>> tHashSet5 = new THashSet<LinkedHashSet<String>>(int0, int0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) int0;
      objectArray0[1] = (Object) tHashSet5;
      tHashSet2.add(objectArray0[1]);
      THashSet<TreeSet<String>> tHashSet6 = new THashSet<TreeSet<String>>();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      tHashSet1.toArray();
      tHashSet6.add(treeSet0);
      objectArray0[2] = (Object) int0;
      objectArray0[3] = (Object) tHashSet5;
      HashSet<String> hashSet0 = new HashSet<String>();
      tHashSet3.add(hashSet0);
      tHashSet5._set = objectArray0;
      tHashSet1.tempDisableAutoCompaction();
      assertFalse(tHashSet1.equals(tHashSet0));
  }

  @Test
  public void test6()  throws Throwable  {
      HashSet<HashSet<Object>> hashSet0 = new HashSet<HashSet<Object>>();
      THashSet<Object> tHashSet0 = new THashSet<Object>((Collection<?>) hashSet0);
      String string0 = "";
      File file0 = new File(string0, string0);
      File file1 = new File(file0, string0);
      File file2 = file1.getAbsoluteFile();
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0, file2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      THashSet<String> tHashSet0 = new THashSet<String>();
      THashSet<String> tHashSet1 = new THashSet<String>((Collection<? extends String>) tHashSet0);
      TObjectHashIterator<String> tObjectHashIterator0 = tHashSet1.iterator();
      assertEquals(false, tObjectHashIterator0.hasNext());
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-1852);
      THashSet<String> tHashSet0 = new THashSet<String>(int0, int0);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-83);
      byteArray0[0] = byte0;
      byte byte1 = (byte)80;
      byteArray0[1] = byte1;
      byte byte2 = (byte)81;
      byteArray0[2] = byte2;
      THashSet<HashSet<Integer>> tHashSet1 = new THashSet<HashSet<Integer>>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream((InputStream) pipedInputStream0, (InputStream) pipedInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) sequenceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }
}
