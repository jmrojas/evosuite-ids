/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableFloatCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableIntFloatMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableIntSet;
import gnu.trove.map.TIntFloatMap;
import gnu.trove.map.hash.TIntFloatHashMap;
import gnu.trove.procedure.TIntFloatProcedure;
import java.io.File;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableIntFloatMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap0 = new TUnmodifiableIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      tIntFloatHashMap0.keys();
      tUnmodifiableIntFloatMap0.valueCollection();
      tUnmodifiableIntFloatMap0.size();
      int int0 = 0;
      tUnmodifiableIntFloatMap0.keySet();
      // Undeclared exception!
      try {
        tUnmodifiableIntFloatMap0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 1405;
      float float0 = 1.0F;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0, float0);
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap0 = new TUnmodifiableIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      int int1 = 2081;
      float float1 = Float.NEGATIVE_INFINITY;
      float float2 = 0.0F;
      // Undeclared exception!
      try {
        tUnmodifiableIntFloatMap0.adjustOrPutValue(int1, float1, float2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 209;
      int int1 = 0;
      float float0 = 0.0F;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int1, float0);
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap0 = new TUnmodifiableIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap1 = new TUnmodifiableIntFloatMap((TIntFloatMap) tUnmodifiableIntFloatMap0);
      int int2 = 2012;
      tUnmodifiableIntFloatMap1.get(int2);
      int int3 = 11861791;
      float float1 = Float.POSITIVE_INFINITY;
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(int0, (float) int0, int3, float1);
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap2 = new TUnmodifiableIntFloatMap((TIntFloatMap) tIntFloatHashMap1);
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int3;
      floatArray0[2] = (float) int3;
      floatArray0[3] = (float) int3;
      floatArray0[4] = float1;
      floatArray0[5] = (float) int3;
      floatArray0[6] = float1;
      float float2 = 0.0F;
      // Undeclared exception!
      try {
        tUnmodifiableIntFloatMap2.adjustValue(int3, float2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-1);
      int int1 = (-1829);
      float float0 = 854.6287F;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int1, float0);
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap0 = new TUnmodifiableIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      tUnmodifiableIntFloatMap0.hashCode();
      // Undeclared exception!
      try {
        tUnmodifiableIntFloatMap0.putAll((TIntFloatMap) tIntFloatHashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = (-1);
      intArray0[1] = int1;
      int int2 = 1367;
      intArray0[2] = int2;
      int int3 = (-1019);
      intArray0[3] = int3;
      int int4 = 1041;
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      int int6 = 0;
      intArray0[6] = int6;
      int int7 = 0;
      intArray0[7] = int7;
      int int8 = 62645741;
      intArray0[8] = int8;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) int7;
      floatArray0[1] = (float) int2;
      floatArray0[2] = (float) intArray0[1];
      floatArray0[0] = (float) int7;
      floatArray0[1] = (float) intArray0[3];
      floatArray0[2] = (float) intArray0[6];
      floatArray0[3] = (float) intArray0[4];
      floatArray0[4] = (float) int8;
      floatArray0[5] = (float) intArray0[8];
      floatArray0[6] = (float) int5;
      floatArray0[7] = (float) intArray0[8];
      floatArray0[8] = (float) int7;
      floatArray0[3] = (float) intArray0[4];
      floatArray0[4] = (float) int4;
      floatArray0[5] = (float) int1;
      floatArray0[6] = (float) int8;
      floatArray0[7] = (float) intArray0[1];
      floatArray0[8] = (float) intArray0[1];
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap0 = new TUnmodifiableIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      TUnmodifiableIntSet tUnmodifiableIntSet0 = (TUnmodifiableIntSet)tUnmodifiableIntFloatMap0.keySet();
      assertEquals("{-1019, 62645741, 1367, 1041, -1, 0}", tUnmodifiableIntSet0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap0 = new TUnmodifiableIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      TUnmodifiableFloatCollection tUnmodifiableFloatCollection0 = (TUnmodifiableFloatCollection)tUnmodifiableIntFloatMap0.valueCollection();
      assertEquals(0, tUnmodifiableFloatCollection0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = (-271);
      intArray0[1] = int1;
      int int2 = 118;
      intArray0[2] = int2;
      int int3 = 159;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = (-1269);
      intArray0[5] = int5;
      int int6 = 35863;
      intArray0[6] = int6;
      int int7 = (-1082);
      intArray0[7] = int7;
      int int8 = 1418;
      intArray0[8] = int8;
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) int4;
      floatArray0[1] = (float) intArray0[4];
      floatArray0[2] = (float) intArray0[3];
      floatArray0[3] = (float) int5;
      floatArray0[4] = (float) int2;
      floatArray0[5] = (float) intArray0[1];
      floatArray0[6] = (float) int0;
      floatArray0[7] = (float) int6;
      floatArray0[8] = (float) int2;
      floatArray0[9] = (float) intArray0[8];
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap0 = new TUnmodifiableIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      assertEquals(false, tUnmodifiableIntFloatMap0.isEmpty());
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0);
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap0 = new TUnmodifiableIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      int int1 = 2237;
      float float0 = 10.0F;
      // Undeclared exception!
      try {
        tUnmodifiableIntFloatMap0.adjustValue(int1, float0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 1565;
      int[] intArray0 = new int[6];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      int int1 = (-1422);
      intArray0[4] = int1;
      int int2 = 43;
      intArray0[5] = int2;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) intArray0[2];
      floatArray0[1] = (float) int2;
      floatArray0[2] = (float) intArray0[1];
      floatArray0[3] = (float) int1;
      floatArray0[4] = (float) intArray0[5];
      floatArray0[5] = (float) int0;
      floatArray0[6] = (float) int0;
      floatArray0[7] = (float) intArray0[2];
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap0 = new TUnmodifiableIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      TIntFloatProcedure tIntFloatProcedure0 = null;
      // Undeclared exception!
      try {
        tUnmodifiableIntFloatMap0.retainEntries(tIntFloatProcedure0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 881;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 190;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = (-2033);
      intArray0[5] = int5;
      int int6 = 1792;
      intArray0[6] = int6;
      int int7 = (-1431);
      intArray0[7] = int7;
      int int8 = (-266);
      intArray0[8] = int8;
      float[] floatArray0 = new float[8];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      floatArray0[1] = (float) int7;
      floatArray0[2] = (float) intArray0[6];
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) intArray0[3];
      floatArray0[5] = (float) int8;
      floatArray0[6] = (float) intArray0[1];
      float float1 = 0.0F;
      floatArray0[7] = float1;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap0 = new TUnmodifiableIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap1 = new TUnmodifiableIntFloatMap((TIntFloatMap) tUnmodifiableIntFloatMap0);
      tUnmodifiableIntFloatMap1.getNoEntryKey();
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap();
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap2 = new TUnmodifiableIntFloatMap((TIntFloatMap) tIntFloatHashMap1);
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap3 = new TUnmodifiableIntFloatMap((TIntFloatMap) tUnmodifiableIntFloatMap2);
      assertEquals(true, tUnmodifiableIntFloatMap3.isEmpty());
  }

  @Test
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = (-1395);
      intArray0[1] = int1;
      int int2 = (-458);
      intArray0[2] = int2;
      int int3 = 479;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = 952;
      intArray0[5] = int5;
      int[] intArray1 = new int[7];
      intArray1[0] = int5;
      intArray1[1] = int1;
      intArray1[2] = int0;
      intArray1[3] = int5;
      intArray1[4] = int5;
      intArray1[5] = int5;
      intArray1[6] = int5;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) intArray0[1];
      floatArray0[1] = (float) int2;
      floatArray0[2] = (float) int4;
      floatArray0[3] = (float) int4;
      floatArray0[4] = (float) intArray1[4];
      floatArray0[5] = (float) intArray0[2];
      float float0 = 0.0F;
      floatArray0[6] = float0;
      floatArray0[7] = (float) intArray1[2];
      float float1 = (-274.85977F);
      floatArray0[8] = float1;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray1, floatArray0);
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap0 = new TUnmodifiableIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      int int6 = 0;
      // Undeclared exception!
      try {
        tUnmodifiableIntFloatMap0.putIfAbsent(int6, float0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 1;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0, int0);
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap0 = new TUnmodifiableIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      int int1 = (-1467);
      // Undeclared exception!
      try {
        tUnmodifiableIntFloatMap0.increment(int1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1162;
      int int1 = 421;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0, int0, int1, int1);
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap((TIntFloatMap) tIntFloatHashMap0);
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap0 = new TUnmodifiableIntFloatMap((TIntFloatMap) tIntFloatHashMap1);
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap1 = new TUnmodifiableIntFloatMap((TIntFloatMap) tUnmodifiableIntFloatMap0);
      assertTrue(tUnmodifiableIntFloatMap1.equals(tUnmodifiableIntFloatMap0));
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-12);
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0, int0);
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap0 = new TUnmodifiableIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      float[] floatArray1 = tUnmodifiableIntFloatMap0.values(floatArray0);
      assertSame(floatArray0, floatArray1);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 135;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0);
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap0 = new TUnmodifiableIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap1 = new TUnmodifiableIntFloatMap((TIntFloatMap) tUnmodifiableIntFloatMap0);
      tUnmodifiableIntFloatMap1.get(int0);
      int int1 = (-1017);
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(int1, int1, int1, int1);
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap2 = new TUnmodifiableIntFloatMap((TIntFloatMap) tIntFloatHashMap1);
      TUnmodifiableFloatCollection tUnmodifiableFloatCollection0 = (TUnmodifiableFloatCollection)tUnmodifiableIntFloatMap2.valueCollection();
      assertEquals(0, tUnmodifiableFloatCollection0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 0;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0);
      intArray0[0] = int0;
      intArray0[1] = int0;
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap0 = new TUnmodifiableIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      tUnmodifiableIntFloatMap0.values();
      int int1 = 55;
      tUnmodifiableIntFloatMap0.getNoEntryKey();
      intArray0[0] = int1;
      int int2 = (-1);
      float float0 = 1439.6332F;
      // Undeclared exception!
      try {
        tUnmodifiableIntFloatMap0.adjustOrPutValue(int2, (float) int1, float0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap0 = new TUnmodifiableIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      tIntFloatHashMap0.putAll((TIntFloatMap) tUnmodifiableIntFloatMap0);
      float[] floatArray0 = new float[5];
      float float0 = (-957.3062F);
      floatArray0[0] = float0;
      float float1 = 1013.5815F;
      floatArray0[1] = float1;
      float float2 = 902.8989F;
      floatArray0[2] = float2;
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap1 = new TUnmodifiableIntFloatMap((TIntFloatMap) tUnmodifiableIntFloatMap0);
      float float3 = 1.0F;
      floatArray0[0] = float3;
      floatArray0[1] = float1;
      floatArray0[2] = float0;
      floatArray0[3] = float1;
      floatArray0[4] = float2;
      floatArray0[3] = float3;
      float float4 = 1.0F;
      tUnmodifiableIntFloatMap0.iterator();
      floatArray0[4] = float4;
      tIntFloatHashMap0.values(floatArray0);
      String string0 = File.separator;
      boolean boolean0 = tUnmodifiableIntFloatMap0.equals((Object) string0);
      assertEquals(false, boolean0);
      
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap();
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap2 = new TUnmodifiableIntFloatMap((TIntFloatMap) tIntFloatHashMap1);
      int int0 = (-71);
      float float5 = 1.0F;
      float float6 = (-1694.7987F);
      tUnmodifiableIntFloatMap1.iterator();
      float float7 = (-1418.757F);
      tUnmodifiableIntFloatMap1.containsValue(float7);
      // Undeclared exception!
      try {
        tUnmodifiableIntFloatMap2.adjustOrPutValue(int0, float5, float6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 413;
      int int1 = 482;
      float float0 = 0.0F;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0, (float) int0, int1, float0);
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap0 = new TUnmodifiableIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap1 = new TUnmodifiableIntFloatMap((TIntFloatMap) tUnmodifiableIntFloatMap0);
      TIntFloatMap tIntFloatMap0 = null;
      TUnmodifiableIntFloatMap tUnmodifiableIntFloatMap2 = null;
      try {
        tUnmodifiableIntFloatMap2 = new TUnmodifiableIntFloatMap(tIntFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
