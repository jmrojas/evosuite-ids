/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TShortCollection;
import gnu.trove.impl.sync.TSynchronizedRandomAccessShortList;
import gnu.trove.impl.sync.TSynchronizedShortCollection;
import gnu.trove.impl.sync.TSynchronizedShortList;
import gnu.trove.impl.sync.TSynchronizedShortSet;
import gnu.trove.iterator.TShortIterator;
import gnu.trove.list.TShortList;
import gnu.trove.list.array.TShortArrayList;
import gnu.trove.list.linked.TShortLinkedList;
import gnu.trove.procedure.TShortProcedure;
import gnu.trove.set.TShortSet;
import gnu.trove.set.hash.TShortHashSet;
import java.util.Collection;
import java.util.LinkedList;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedShortCollectionEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.contains(S)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedShortCollection.<init>(Lgnu/trove/TShortCollection;)V: I7 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(1);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
      boolean boolean0 = tSynchronizedRandomAccessShortList0.contains((short)0);
      assertEquals(false, boolean0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.size()I: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortLinkedList0);
      int int0 = tSynchronizedShortList0.size();
      assertEquals(0, int0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.retainAll(Ljava/util/Collection;)Z: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(1);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = tSynchronizedRandomAccessShortList0.retainAll((Collection<?>) linkedList0);
      assertEquals(false, boolean0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.removeAll(Lgnu/trove/TShortCollection;)Z: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortLinkedList0);
      boolean boolean0 = tSynchronizedShortList0.removeAll((TShortCollection) tSynchronizedShortList0);
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.removeAll(Ljava/util/Collection;)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedShortCollection.<init>(Lgnu/trove/TShortCollection;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TShortHashSet tShortHashSet0 = new TShortHashSet();
      TSynchronizedShortSet tSynchronizedShortSet0 = new TSynchronizedShortSet((TShortSet) tShortHashSet0, (Object) "");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      boolean boolean0 = tSynchronizedShortSet0.removeAll((Collection<?>) linkedList0);
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.removeAll([S)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TSynchronizedShortCollection tSynchronizedShortCollection0 = new TSynchronizedShortCollection((TShortCollection) tShortArrayList0);
      short[] shortArray0 = new short[5];
      boolean boolean0 = tSynchronizedShortCollection0.removeAll(shortArray0);
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.retainAll(Lgnu/trove/TShortCollection;)Z: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TShortHashSet tShortHashSet0 = new TShortHashSet();
      TSynchronizedShortSet tSynchronizedShortSet0 = new TSynchronizedShortSet((TShortSet) tShortHashSet0, (Object) "");
      boolean boolean0 = tSynchronizedShortSet0.retainAll((TShortCollection) tShortHashSet0);
      assertEquals(false, boolean0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.forEach(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(1236);
      Object object0 = new Object();
      TSynchronizedShortCollection tSynchronizedShortCollection0 = new TSynchronizedShortCollection((TShortCollection) tShortArrayList0, object0);
      boolean boolean0 = tSynchronizedShortCollection0.forEach((TShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.getNoEntryValue()S: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortLinkedList0);
      short short0 = tSynchronizedShortList0.getNoEntryValue();
      assertEquals((short)0, short0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.containsAll(Ljava/util/Collection;)Z: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(1);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = tSynchronizedRandomAccessShortList0.containsAll((Collection<?>) linkedList0);
      assertEquals(true, boolean0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.addAll([S)Z: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(1);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
      short[] shortArray0 = new short[2];
      boolean boolean0 = tSynchronizedRandomAccessShortList0.addAll(shortArray0);
      assertEquals(false, tShortArrayList0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.containsAll([S)Z: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TSynchronizedShortCollection tSynchronizedShortCollection0 = new TSynchronizedShortCollection((TShortCollection) tShortArrayList0);
      short[] shortArray0 = new short[5];
      boolean boolean0 = tSynchronizedShortCollection0.containsAll(shortArray0);
      assertEquals(false, boolean0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.addAll(Lgnu/trove/TShortCollection;)Z: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(1);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
      boolean boolean0 = tSynchronizedRandomAccessShortList0.addAll((TShortCollection) tShortArrayList0);
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.remove(S)Z: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortLinkedList0);
      boolean boolean0 = tSynchronizedShortList0.remove((short)0);
      assertEquals(false, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.containsAll(Lgnu/trove/TShortCollection;)Z: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(1);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
      boolean boolean0 = tSynchronizedRandomAccessShortList0.containsAll((TShortCollection) tShortArrayList0);
      assertEquals(true, boolean0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.isEmpty()Z: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(1);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
      boolean boolean0 = tSynchronizedRandomAccessShortList0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.iterator()Lgnu/trove/iterator/TShortIterator;: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TSynchronizedShortCollection tSynchronizedShortCollection0 = new TSynchronizedShortCollection((TShortCollection) tShortArrayList0);
      TShortIterator tShortIterator0 = tSynchronizedShortCollection0.iterator();
      assertEquals(false, tShortIterator0.hasNext());
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.retainAll([S)Z: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TShortHashSet tShortHashSet0 = new TShortHashSet();
      TSynchronizedShortSet tSynchronizedShortSet0 = new TSynchronizedShortSet((TShortSet) tShortHashSet0, (Object) "");
      boolean boolean0 = tSynchronizedShortSet0.retainAll(tShortHashSet0._set);
      assertEquals(false, boolean0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.add(S)Z: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TShortHashSet tShortHashSet0 = new TShortHashSet();
      TSynchronizedShortSet tSynchronizedShortSet0 = new TSynchronizedShortSet((TShortSet) tShortHashSet0, (Object) "");
      boolean boolean0 = tSynchronizedShortSet0.add((short) (-129));
      assertEquals(false, tShortHashSet0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.toArray()[S: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(1);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
      short[] shortArray0 = tSynchronizedRandomAccessShortList0.toArray();
      assertNotNull(shortArray0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TShortHashSet tShortHashSet0 = new TShortHashSet();
      TSynchronizedShortSet tSynchronizedShortSet0 = new TSynchronizedShortSet((TShortSet) tShortHashSet0, (Object) "");
      String string0 = tSynchronizedShortSet0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.toArray([S)[S: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TShortHashSet tShortHashSet0 = new TShortHashSet();
      TSynchronizedShortSet tSynchronizedShortSet0 = new TSynchronizedShortSet((TShortSet) tShortHashSet0, (Object) "");
      short[] shortArray0 = tSynchronizedShortSet0.toArray(tShortHashSet0._set);
      assertNotNull(shortArray0);
  }

  //Test case number: 22
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.clear()V: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedShortCollection.<init>(Lgnu/trove/TShortCollection;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(1236);
      Object object0 = new Object();
      TSynchronizedShortCollection tSynchronizedShortCollection0 = new TSynchronizedShortCollection((TShortCollection) tShortArrayList0, object0);
      tSynchronizedShortCollection0.clear();
      assertEquals("{}", tSynchronizedShortCollection0.toString());
  }

  //Test case number: 23
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.addAll(Ljava/util/Collection;)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedShortCollection.<init>(Lgnu/trove/TShortCollection;)V: I7 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test23()  throws Throwable  {
      short[] shortArray0 = new short[11];
      TShortHashSet tShortHashSet0 = new TShortHashSet(shortArray0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      TSynchronizedShortCollection tSynchronizedShortCollection0 = new TSynchronizedShortCollection((TShortCollection) tShortHashSet0);
      boolean boolean0 = tSynchronizedShortCollection0.addAll((Collection<? extends Short>) linkedList0);
      assertEquals(false, boolean0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCollection.<init>(Lgnu/trove/TShortCollection;)V: I7 Branch 1 IFNONNULL L59 - false
   */

  @Test
  public void test24()  throws Throwable  {
      TSynchronizedShortList tSynchronizedShortList0 = null;
      try {
        tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
