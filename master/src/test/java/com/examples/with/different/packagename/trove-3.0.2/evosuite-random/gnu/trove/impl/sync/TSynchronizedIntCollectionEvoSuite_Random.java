/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TIntCollection;
import gnu.trove.impl.sync.TSynchronizedIntCollection;
import gnu.trove.impl.sync.TSynchronizedIntList;
import gnu.trove.impl.sync.TSynchronizedIntSet;
import gnu.trove.impl.sync.TSynchronizedRandomAccessIntList;
import gnu.trove.impl.unmodifiable.TUnmodifiableIntSet;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessIntList;
import gnu.trove.list.TIntList;
import gnu.trove.list.array.TIntArrayList;
import gnu.trove.list.linked.TIntLinkedList;
import gnu.trove.procedure.TIntProcedure;
import gnu.trove.set.TIntSet;
import gnu.trove.set.hash.TIntHashSet;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import java.util.MissingResourceException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedIntCollectionEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-1445);
      TIntArrayList tIntArrayList0 = null;
      try {
        tIntArrayList0 = new TIntArrayList(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList();
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :#
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TIntList tIntList0 = null;
      int int0 = 0;
      TIntHashSet tIntHashSet0 = new TIntHashSet(int0, int0, int0);
      Object object0 = null;
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet((TIntSet) tIntHashSet0, object0);
      // Undeclared exception!
      try {
        tSynchronizedIntSet0.addAll(tIntHashSet0._set);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 1537;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 82037;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = (-1597);
      intArray0[5] = int5;
      int int6 = (-355);
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0, int6);
      String string0 = "6\\6eC|bnNGp.v";
      Locale locale0 = Locale.forLanguageTag(string0);
      String string1 = locale0.getISO3Country();
      TSynchronizedRandomAccessIntList tSynchronizedRandomAccessIntList0 = new TSynchronizedRandomAccessIntList((TIntList) tIntArrayList0, (Object) string1);
      Locale locale1 = Locale.CHINESE;
      String string2 = locale0.getDisplayLanguage(locale1);
      TSynchronizedIntList tSynchronizedIntList0 = new TSynchronizedIntList((TIntList) tSynchronizedRandomAccessIntList0, (Object) string2);
      int[] intArray1 = new int[9];
      intArray1[0] = int2;
      int int7 = 0;
      intArray1[1] = int7;
      intArray1[2] = int5;
      intArray1[3] = int5;
      intArray1[4] = int6;
      intArray1[5] = int4;
      intArray1[6] = int0;
      intArray1[7] = int6;
      intArray1[8] = int4;
      boolean boolean0 = tSynchronizedIntList0.removeAll(intArray1);
      assertEquals(0, tIntArrayList0.sum());
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      int int0 = 16;
      float float0 = 1.0F;
      TIntHashSet tIntHashSet0 = new TIntHashSet(int0, float0, int0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = locale0.getISO3Language();
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet((TIntSet) tIntHashSet0, (Object) string0);
      tSynchronizedIntSet0.toString();
      TSynchronizedRandomAccessIntList tSynchronizedRandomAccessIntList0 = new TSynchronizedRandomAccessIntList((TIntList) tIntArrayList0);
      int int1 = 73;
      tIntArrayList0.indexOf(int1);
      int[] intArray0 = new int[4];
      tSynchronizedRandomAccessIntList0.retainAll(intArray0);
      int int2 = (-1);
      intArray0[0] = int2;
      int int3 = 158;
      tSynchronizedRandomAccessIntList0.addAll(intArray0);
      intArray0[1] = int3;
      int int4 = 108;
      tSynchronizedRandomAccessIntList0.iterator();
      tSynchronizedRandomAccessIntList0.isEmpty();
      int int5 = 1352;
      tIntArrayList0.indexOf(int5);
      TIntCollection tIntCollection0 = null;
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessIntList0.retainAll(tIntCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TIntList tIntList0 = null;
      String string0 = "Y47(zxud>9iMl";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: Y47(zxud>9iMl://Y47%7F(zxud%3E9iMlY47%7F(zxud%3E9iMl?Y47%7F(zxud%3E9iMl#Y47%7F(zxud%3E9iMl
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 1523;
      TIntArrayList tIntArrayList0 = new TIntArrayList(int0, int0);
      TSynchronizedIntList tSynchronizedIntList0 = new TSynchronizedIntList((TIntList) tIntArrayList0);
      TSynchronizedIntList tSynchronizedIntList1 = new TSynchronizedIntList((TIntList) tSynchronizedIntList0);
      int[] intArray0 = new int[2];
      intArray0[0] = int0;
      intArray0[1] = int0;
      // Undeclared exception!
      try {
        tSynchronizedIntList1.retainAll(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1522
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TIntSet tIntSet0 = null;
      TUnmodifiableIntSet tUnmodifiableIntSet0 = null;
      try {
        tUnmodifiableIntSet0 = new TUnmodifiableIntSet(tIntSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList();
      TIntProcedure tIntProcedure0 = null;
      TIntLinkedList tIntLinkedList1 = (TIntLinkedList)tIntLinkedList0.grep(tIntProcedure0);
      Locale locale0 = Locale.ITALIAN;
      String string0 = locale0.getLanguage();
      TSynchronizedRandomAccessIntList tSynchronizedRandomAccessIntList0 = new TSynchronizedRandomAccessIntList((TIntList) tIntLinkedList1, (Object) string0);
      TIntLinkedList tIntLinkedList2 = (TIntLinkedList)tSynchronizedRandomAccessIntList0.grep(tIntProcedure0);
      TSynchronizedRandomAccessIntList tSynchronizedRandomAccessIntList1 = new TSynchronizedRandomAccessIntList((TIntList) tIntLinkedList2);
      TIntLinkedList tIntLinkedList3 = (TIntLinkedList)tSynchronizedRandomAccessIntList1.inverseGrep(tIntProcedure0);
      Locale locale1 = Locale.CANADA_FRENCH;
      String string1 = locale0.getDisplayName(locale1);
      TSynchronizedRandomAccessIntList tSynchronizedRandomAccessIntList2 = new TSynchronizedRandomAccessIntList((TIntList) tIntLinkedList3, (Object) string1);
      boolean boolean0 = tSynchronizedRandomAccessIntList2.retainAll((TIntCollection) tIntLinkedList3);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      TSynchronizedRandomAccessIntList tSynchronizedRandomAccessIntList0 = new TSynchronizedRandomAccessIntList((TIntList) tIntArrayList0);
      tSynchronizedRandomAccessIntList0.retainAll((TIntCollection) tIntArrayList0);
      int[] intArray0 = new int[9];
      int int0 = 105;
      intArray0[0] = int0;
      int int1 = 2030;
      intArray0[1] = int1;
      int int2 = 501165979;
      intArray0[2] = int2;
      int int3 = 229;
      intArray0[3] = int3;
      int int4 = (-1836);
      tSynchronizedRandomAccessIntList0.toString();
      intArray0[4] = int4;
      int int5 = 196;
      intArray0[5] = int5;
      Object object0 = null;
      tSynchronizedRandomAccessIntList0.equals(object0);
      int int6 = (-1);
      intArray0[6] = int6;
      int int7 = 353;
      intArray0[7] = int7;
      int int8 = 6250537;
      intArray0[8] = int8;
      int int9 = 1261;
      // Undeclared exception!
      try {
        tIntArrayList0.add(intArray0, int9, intArray0[8]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      int int0 = 0;
      TIntArrayList tIntArrayList1 = (TIntArrayList)tIntArrayList0.subList(int0, int0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      TIntHashSet tIntHashSet0 = new TIntHashSet((Collection<? extends Integer>) linkedList0);
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet((TIntSet) tIntHashSet0);
      TSynchronizedIntSet tSynchronizedIntSet1 = (TSynchronizedIntSet)tSynchronizedIntSet0.mutex;
      TSynchronizedIntList tSynchronizedIntList0 = new TSynchronizedIntList((TIntList) tIntArrayList1, (Object) tSynchronizedIntSet1);
      TSynchronizedRandomAccessIntList tSynchronizedRandomAccessIntList0 = new TSynchronizedRandomAccessIntList((TIntList) tSynchronizedIntList0);
      boolean boolean0 = tSynchronizedRandomAccessIntList0.addAll(tIntHashSet0._set);
      assertEquals("{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}", tIntArrayList1.toString());
      
      int int1 = (-75);
      TIntHashSet tIntHashSet1 = new TIntHashSet(int1, int1);
      TSynchronizedIntSet tSynchronizedIntSet2 = new TSynchronizedIntSet((TIntSet) tIntHashSet1);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      boolean boolean1 = tSynchronizedIntSet2.removeAll((Collection<?>) linkedList1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 893;
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList(int0);
      int int1 = 56;
      // Undeclared exception!
      try {
        tIntLinkedList0.subList(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // begin index 56 greater than last index 0
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = (-339);
      intArray0[0] = int0;
      int int1 = 1;
      intArray0[1] = int1;
      TIntHashSet tIntHashSet0 = new TIntHashSet(intArray0);
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet((TIntSet) tIntHashSet0);
      tSynchronizedIntSet0.retainAll((TIntCollection) tIntHashSet0);
      int int2 = 1;
      intArray0[2] = int2;
      int int3 = (-560);
      int[] intArray1 = new int[2];
      int int4 = 2034;
      intArray1[0] = int4;
      intArray1[1] = int0;
      int int5 = (-1493);
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray1, int5);
      Object object0 = new Object();
      TSynchronizedIntCollection tSynchronizedIntCollection0 = new TSynchronizedIntCollection((TIntCollection) tIntArrayList0, object0);
      tSynchronizedIntCollection0.equals(object0);
      intArray0[3] = int3;
      int int6 = 169;
      intArray0[4] = int6;
      int int7 = 731;
      intArray0[5] = int7;
      int int8 = 0;
      intArray0[6] = int8;
      int int9 = (-377);
      intArray0[7] = int9;
      int int10 = 172;
      intArray0[8] = int10;
      TIntHashSet tIntHashSet1 = new TIntHashSet(intArray0);
      TSynchronizedIntSet tSynchronizedIntSet1 = new TSynchronizedIntSet((TIntSet) tIntHashSet1);
      int[] intArray2 = tSynchronizedIntSet1.toArray();
      assertNotSame(intArray2, intArray1);
  }

  @Test
  public void test13()  throws Throwable  {
      TIntList tIntList0 = null;
      TSynchronizedRandomAccessIntList tSynchronizedRandomAccessIntList0 = null;
      try {
        tSynchronizedRandomAccessIntList0 = new TSynchronizedRandomAccessIntList(tIntList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TIntList tIntList0 = null;
      Locale locale0 = Locale.KOREA;
      String string0 = locale0.getISO3Country();
      TSynchronizedRandomAccessIntList tSynchronizedRandomAccessIntList0 = new TSynchronizedRandomAccessIntList(tIntList0, (Object) string0);
      int int0 = (-1);
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessIntList0.subList(int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList((TIntList) tIntArrayList0);
      int int0 = 42;
      int[] intArray0 = new int[5];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      int int1 = 686;
      int int2 = (-1896);
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessIntList0.insert(int0, intArray0, int1, int2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      TIntSet tIntSet0 = null;
      TUnmodifiableIntSet tUnmodifiableIntSet0 = null;
      try {
        tUnmodifiableIntSet0 = new TUnmodifiableIntSet(tIntSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 1496;
      intArray0[0] = int0;
      int int1 = 55;
      intArray0[1] = int1;
      int int2 = 458;
      intArray0[2] = int2;
      int int3 = (-1);
      intArray0[3] = int3;
      int int4 = (-725);
      intArray0[4] = int4;
      TIntArrayList.wrap(intArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(intArray0[2]);
      String string0 = "Inserting same object twice, rehashing bug. Object= ";
      try {
        byteArrayOutputStream0.toString(string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // Inserting same object twice, rehashing bug. Object= 
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 1202;
      TIntHashSet tIntHashSet0 = new TIntHashSet(int0);
      tIntHashSet0.iterator();
      TUnmodifiableIntSet tUnmodifiableIntSet0 = new TUnmodifiableIntSet((TIntSet) tIntHashSet0);
      TSynchronizedIntSet tSynchronizedIntSet0 = new TSynchronizedIntSet((TIntSet) tUnmodifiableIntSet0);
      int[] intArray0 = new int[10];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      int int1 = (-1129);
      intArray0[4] = int1;
      intArray0[5] = int0;
      int int2 = 0;
      intArray0[6] = int2;
      intArray0[7] = int0;
      intArray0[8] = int0;
      intArray0[9] = int0;
      tIntHashSet0.retainAll(intArray0);
      tSynchronizedIntSet0.containsAll(tIntHashSet0._set);
      tSynchronizedIntSet0.toArray(tIntHashSet0._set);
      TIntProcedure tIntProcedure0 = null;
      tUnmodifiableIntSet0.forEach(tIntProcedure0);
      tIntHashSet0.capacity();
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-26);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-1);
      byteArray0[3] = byte3;
      byte byte4 = (byte)93;
      byteArray0[4] = byte4;
      byte byte5 = (byte)1;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      tIntHashSet0._states = byteArray0;
      assertSame(tIntHashSet0._states, byteArray0);
  }

  @Test
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = (-378);
      intArray0[0] = int0;
      int int1 = 1;
      intArray0[1] = int1;
      int int2 = 35;
      intArray0[2] = int2;
      int int3 = 267;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = (-1695);
      intArray0[5] = int5;
      TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
      TSynchronizedRandomAccessIntList tSynchronizedRandomAccessIntList0 = new TSynchronizedRandomAccessIntList((TIntList) tIntArrayList0);
      TSynchronizedRandomAccessIntList tSynchronizedRandomAccessIntList1 = new TSynchronizedRandomAccessIntList((TIntList) tSynchronizedRandomAccessIntList0);
      tSynchronizedRandomAccessIntList1.containsAll(intArray0);
      int int6 = 2008;
      TIntHashSet tIntHashSet0 = new TIntHashSet(int6);
      int int7 = 24407;
      int[] intArray1 = new int[3];
      intArray1[0] = int6;
      String string0 = "";
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         //  (No such file or directory)
         //
      }
  }
}
