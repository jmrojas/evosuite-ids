/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.hash.TShortCharHashMap;
import gnu.trove.procedure.TShortProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortCharHashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 11 covered goals:
   * 1 gnu.trove.impl.hash.TShortCharHash.removeAt(I)V: root-Branch
   * 2 gnu.trove.impl.hash.TShortCharHash.<init>(I)V: root-Branch
   * 3 gnu.trove.impl.hash.TShortCharHash.insertKeyAt(IS)V: root-Branch
   * 4 gnu.trove.impl.hash.TShortCharHash.index(S)I: I37 Branch 5 IFNE L228 - true
   * 5 gnu.trove.impl.hash.TShortCharHash.index(S)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 6 gnu.trove.impl.hash.TShortCharHash.index(S)I: I51 Branch 7 IF_ICMPNE L231 - false
   * 7 gnu.trove.impl.hash.TShortCharHash.insertKey(S)I: I30 Branch 13 IFNE L279 - true
   * 8 gnu.trove.impl.hash.TShortCharHash.insertKey(S)I: I30 Branch 13 IFNE L279 - false
   * 9 gnu.trove.impl.hash.TShortCharHash.insertKey(S)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 10 gnu.trove.impl.hash.TShortCharHash.insertKey(S)I: I56 Branch 15 IF_ICMPNE L286 - false
   * 11 gnu.trove.impl.hash.TShortCharHash.setUp(I)I: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      short[] shortArray0 = new short[4];
      char[] charArray0 = new char[6];
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      assertEquals(false, tShortCharHashMap0.isEmpty());
      
      tShortCharHashMap0.remove((short)0);
      assertEquals(0, tShortCharHashMap0.size());
      assertEquals("{}", tShortCharHashMap0.toString());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TShortCharHash.getNoEntryKey()S: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      short[] shortArray0 = new short[6];
      char[] charArray0 = new char[7];
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      short short0 = tShortCharHashMap0.getNoEntryKey();
      assertEquals(17, tShortCharHashMap0.capacity());
      assertEquals(1, tShortCharHashMap0.size());
      assertEquals('\u0000', tShortCharHashMap0.getNoEntryValue());
      assertEquals((short)0, short0);
      assertEquals("{0=\u0000}", tShortCharHashMap0.toString());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TShortCharHash.getNoEntryValue()C: root-Branch
   * 2 gnu.trove.impl.hash.TShortCharHash.<init>(IFSC)V: root-Branch
   */

//   @Test
//   public void test2()  throws Throwable  {
//       TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(3, (float) '!', (short)0, '!');
//       char char0 = tShortCharHashMap0.getNoEntryValue();
//       assertEquals(0, tShortCharHashMap0.getNoEntryKey());
//       assertEquals('!', char0);
//   }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TShortCharHash.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   * 2 gnu.trove.impl.hash.TShortCharHash.<init>()V: root-Branch
   */

//   @Test
//   public void test3()  throws Throwable  {
//       TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
//       ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1549);
//       ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
//       tShortCharHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
//       assertEquals('\u0000', tShortCharHashMap0.getNoEntryValue());
//       assertEquals(23, tShortCharHashMap0.capacity());
//       assertEquals(0, tShortCharHashMap0.getNoEntryKey());
//   }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TShortCharHash.contains(S)Z: I5 Branch 1 IFLT L178 - true
   * 2 gnu.trove.impl.hash.TShortCharHash.index(S)I: I37 Branch 5 IFNE L228 - false
   */

//   @Test
//   public void test4()  throws Throwable  {
//       TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
//       boolean boolean0 = tShortCharHashMap0.contains((short) (byte)2);
//       assertEquals('\u0000', tShortCharHashMap0.getNoEntryValue());
//       assertEquals(false, boolean0);
//       assertEquals(23, tShortCharHashMap0.capacity());
//       assertEquals(0, tShortCharHashMap0.getNoEntryKey());
//   }

  //Test case number: 5
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TShortCharHash.contains(S)Z: I5 Branch 1 IFLT L178 - false
   * 2 gnu.trove.impl.hash.TShortCharHash.index(S)I: I51 Branch 7 IF_ICMPNE L231 - false
   * 3 gnu.trove.impl.hash.TShortCharHash.<init>(IF)V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(468, 468);
      tShortCharHashMap0.putIfAbsent((short)1997, '5');
      boolean boolean0 = tShortCharHashMap0.contains((short)1997);
      assertEquals(false, tShortCharHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TShortCharHash.forEach(Lgnu/trove/procedure/TShortProcedure;)Z: I18 Branch 2 IFLE L192 - true
   * 2 gnu.trove.impl.hash.TShortCharHash.forEach(Lgnu/trove/procedure/TShortProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TShortCharHash.forEach(Lgnu/trove/procedure/TShortProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

//   @Test
//   public void test6()  throws Throwable  {
//       TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap((-13), (-13));
//       boolean boolean0 = tShortCharHashMap0.forEach((TShortProcedure) null);
//       assertEquals(0, tShortCharHashMap0.getNoEntryKey());
//       assertEquals(true, boolean0);
//       assertEquals('\u0000', tShortCharHashMap0.getNoEntryValue());
//   }

  //Test case number: 7
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TShortCharHash.forEach(Lgnu/trove/procedure/TShortProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - false
   * 2 gnu.trove.impl.hash.TShortCharHash.<init>(IF)V: root-Branch
   * 3 gnu.trove.impl.hash.TShortCharHash.forEach(Lgnu/trove/procedure/TShortProcedure;)Z: I18 Branch 2 IFLE L192 - false
   */

  @Test
  public void test7()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(468, 468);
      tShortCharHashMap0.putIfAbsent((short)1997, '5');
      // Undeclared exception!
      try {
        tShortCharHashMap0.forEachKey((TShortProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 8
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.hash.TShortCharHash.indexRehashed(SIIB)I: I58 Branch 10 IF_ICMPNE L254 - false
   * 2 gnu.trove.impl.hash.TShortCharHash.indexRehashed(SIIB)I: I61 Branch 11 IF_ICMPEQ L254 - true
   * 3 gnu.trove.impl.hash.TShortCharHash.indexRehashed(SIIB)I: I46 Branch 9 IFNE L250 - false
   * 4 gnu.trove.impl.hash.TShortCharHash.indexRehashed(SIIB)I: I29 Branch 8 IFGE L245 - true
   * 5 gnu.trove.impl.hash.TShortCharHash.indexRehashed(SIIB)I: I29 Branch 8 IFGE L245 - false
   * 6 gnu.trove.impl.hash.TShortCharHash.indexRehashed(SIIB)I: I46 Branch 9 IFNE L250 - true
   * 7 gnu.trove.impl.hash.TShortCharHash.indexRehashed(SIIB)I: I70 Branch 12 IF_ICMPNE L256 - true
   * 8 gnu.trove.impl.hash.TShortCharHash.index(S)I: I46 Branch 6 IF_ICMPNE L231 - true
   */

//   @Test
//   public void test8()  throws Throwable  {
//       TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
//       byte[] byteArray0 = new byte[5];
//       byteArray0[0] = (byte)2;
//       byteArray0[2] = (byte)2;
//       tShortCharHashMap0.trimToSize();
//       tShortCharHashMap0._states = byteArray0;
//       char char0 = tShortCharHashMap0.get((short)0);
//       assertEquals(0, tShortCharHashMap0.getNoEntryKey());
//       assertEquals('\u0000', char0);
//   }

  //Test case number: 9
  /*
   * 9 covered goals:
   * 1 gnu.trove.impl.hash.TShortCharHash.indexRehashed(SIIB)I: I61 Branch 11 IF_ICMPEQ L254 - false
   * 2 gnu.trove.impl.hash.TShortCharHash.insertKey(S)I: I56 Branch 15 IF_ICMPNE L286 - true
   * 3 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 4 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I45 Branch 18 IFGE L310 - true
   * 5 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I62 Branch 19 IFNE L316 - false
   * 6 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 7 gnu.trove.impl.hash.TShortCharHash.indexRehashed(SIIB)I: I58 Branch 10 IF_ICMPNE L254 - false
   * 8 gnu.trove.impl.hash.TShortCharHash.index(S)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 9 gnu.trove.impl.hash.TShortCharHash.index(S)I: I51 Branch 7 IF_ICMPNE L231 - true
   */

  @Test
  public void test9()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[5] = (short) (-983);
      shortArray0[3] = (short)1593;
      char[] charArray0 = new char[7];
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      tShortCharHashMap0.get((short) (-983));
      assertEquals("{1593=\u0000, -983=\u0000, 0=\u0000}", tShortCharHashMap0.toString());
  }

  //Test case number: 10
  /*
   * 9 covered goals:
   * 1 gnu.trove.impl.hash.TShortCharHash.indexRehashed(SIIB)I: I70 Branch 12 IF_ICMPNE L256 - false
   * 2 gnu.trove.impl.hash.TShortCharHash.indexRehashed(SIIB)I: I29 Branch 8 IFGE L245 - true
   * 3 gnu.trove.impl.hash.TShortCharHash.indexRehashed(SIIB)I: I29 Branch 8 IFGE L245 - false
   * 4 gnu.trove.impl.hash.TShortCharHash.indexRehashed(SIIB)I: I46 Branch 9 IFNE L250 - true
   * 5 gnu.trove.impl.hash.TShortCharHash.indexRehashed(SIIB)I: I58 Branch 10 IF_ICMPNE L254 - true
   * 6 gnu.trove.impl.hash.TShortCharHash.indexRehashed(SIIB)I: I70 Branch 12 IF_ICMPNE L256 - true
   * 7 gnu.trove.impl.hash.TShortCharHash.contains(S)Z: I5 Branch 1 IFLT L178 - true
   * 8 gnu.trove.impl.hash.TShortCharHash.index(S)I: I37 Branch 5 IFNE L228 - true
   * 9 gnu.trove.impl.hash.TShortCharHash.index(S)I: I46 Branch 6 IF_ICMPNE L231 - true
   */

  @Test
  public void test10()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      assertEquals(23, tShortCharHashMap0.capacity());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      tShortCharHashMap0.trimToSize();
      tShortCharHashMap0._states = byteArray0;
      boolean boolean0 = tShortCharHashMap0.contains((short) (byte)2);
      assertEquals(false, boolean0);
  }

  //Test case number: 11
  /*
   * 9 covered goals:
   * 1 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I31 Branch 17 IF_ICMPNE L306 - true
   * 2 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I62 Branch 19 IFNE L316 - true
   * 3 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I67 Branch 20 IF_ICMPEQ L317 - false
   * 4 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 5 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I115 Branch 23 IF_ICMPNE L332 - true
   * 6 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 7 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 8 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I45 Branch 18 IFGE L310 - false
   * 9 gnu.trove.impl.hash.TShortCharHash.insertKey(S)I: I50 Branch 14 IF_ICMPNE L286 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      tShortCharHashMap0.trimToSize();
      tShortCharHashMap0._states = byteArray0;
      tShortCharHashMap0.putIfAbsent((short) (byte)1, '&');
      assertEquals(false, tShortCharHashMap0.isEmpty());
      assertEquals("{1=&}", tShortCharHashMap0.toString());
  }

  //Test case number: 12
  /*
   * 12 covered goals:
   * 1 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 2 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I103 Branch 22 IF_ICMPNE L327 - true
   * 3 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I115 Branch 23 IF_ICMPNE L332 - false
   * 4 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I120 Branch 24 IF_ICMPEQ L336 - false
   * 5 gnu.trove.impl.hash.TShortCharHash.<init>()V: root-Branch
   * 6 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 7 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I31 Branch 17 IF_ICMPNE L306 - true
   * 8 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 9 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I45 Branch 18 IFGE L310 - false
   * 10 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 11 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I115 Branch 23 IF_ICMPNE L332 - true
   * 12 gnu.trove.impl.hash.TShortCharHash.insertKey(S)I: I50 Branch 14 IF_ICMPNE L286 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[2] = (byte)2;
      tShortCharHashMap0.trimToSize();
      tShortCharHashMap0._states = byteArray0;
      tShortCharHashMap0.putIfAbsent((short) (byte)1, '&');
      char char0 = tShortCharHashMap0.putIfAbsent((short) (byte)0, '\u0000');
      assertEquals(11, tShortCharHashMap0.capacity());
      assertEquals('\u0000', char0);
  }

  //Test case number: 13
  /*
   * 15 covered goals:
   * 1 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I103 Branch 22 IF_ICMPNE L327 - false
   * 2 gnu.trove.impl.hash.TShortCharHash.setUp(I)I: root-Branch
   * 3 gnu.trove.impl.hash.TShortCharHash.<init>(I)V: root-Branch
   * 4 gnu.trove.impl.hash.TShortCharHash.insertKeyAt(IS)V: root-Branch
   * 5 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 6 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I45 Branch 18 IFGE L310 - true
   * 7 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I62 Branch 19 IFNE L316 - true
   * 8 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I62 Branch 19 IFNE L316 - false
   * 9 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 10 gnu.trove.impl.hash.TShortCharHash.insertKeyRehash(SIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 11 gnu.trove.impl.hash.TShortCharHash.insertKey(S)I: I30 Branch 13 IFNE L279 - true
   * 12 gnu.trove.impl.hash.TShortCharHash.insertKey(S)I: I30 Branch 13 IFNE L279 - false
   * 13 gnu.trove.impl.hash.TShortCharHash.insertKey(S)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 14 gnu.trove.impl.hash.TShortCharHash.insertKey(S)I: I56 Branch 15 IF_ICMPNE L286 - true
   * 15 gnu.trove.impl.hash.TShortCharHash.insertKey(S)I: I56 Branch 15 IF_ICMPNE L286 - false
   */

  @Test
  public void test13()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[5] = (short) (-983);
      shortArray0[3] = (short)1593;
      shortArray0[4] = (short) (-983);
      char[] charArray0 = new char[7];
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      assertEquals('\u0000', tShortCharHashMap0.getNoEntryValue());
      assertEquals("{1593=\u0000, -983=\u0000, 0=\u0000}", tShortCharHashMap0.toString());
      assertEquals(3, tShortCharHashMap0.size());
  }
}
