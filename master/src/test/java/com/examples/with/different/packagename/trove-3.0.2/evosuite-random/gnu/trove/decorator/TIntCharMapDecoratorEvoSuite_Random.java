/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TIntCharMapDecorator;
import gnu.trove.map.TIntCharMap;
import gnu.trove.map.hash.TIntCharHashMap;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntCharMapDecoratorEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 361;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0, int0);
      TIntCharMapDecorator tIntCharMapDecorator0 = new TIntCharMapDecorator((TIntCharMap) tIntCharHashMap0);
      String string0 = "(9W2EDj*4N?";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // (9W2EDj*4N?
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 1108;
      intArray0[0] = int0;
      int int1 = (-1963);
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      char[] charArray0 = new char[7];
      char char0 = '0';
      charArray0[0] = char0;
      char char1 = 'Q';
      charArray0[1] = char1;
      char char2 = 'U';
      charArray0[2] = char2;
      char char3 = '?';
      charArray0[3] = char3;
      char char4 = 'A';
      charArray0[4] = char4;
      char char5 = '^';
      charArray0[5] = char5;
      char char6 = 'R';
      charArray0[6] = char6;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      TIntCharMapDecorator tIntCharMapDecorator0 = new TIntCharMapDecorator((TIntCharMap) tIntCharHashMap0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = locale0.getDisplayCountry();
      boolean boolean0 = tIntCharMapDecorator0.containsValue((Object) string0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 84;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0);
      TIntCharMapDecorator tIntCharMapDecorator0 = new TIntCharMapDecorator((TIntCharMap) tIntCharHashMap0);
      tIntCharMapDecorator0.getMap();
      tIntCharHashMap0.getNoEntryValue();
      tIntCharMapDecorator0.keySet();
      String string0 = "81LQD%4:v";
      tIntCharMapDecorator0.containsKey((Object) string0);
      int int1 = 0;
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap(int1);
      TIntCharMapDecorator tIntCharMapDecorator1 = new TIntCharMapDecorator((TIntCharMap) tIntCharHashMap1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tIntCharHashMap1._states, int1, int1);
      char char0 = '(';
      Character character0 = Character.valueOf(char0);
      String string1 = character0.toString();
      tIntCharMapDecorator0.get((Object) string1);
      Character character1 = new Character(char0);
      tIntCharMapDecorator1.put((Integer) int0, character1);
      tIntCharMapDecorator0.toString();
      tIntCharHashMap1.keySet();
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream((InputStream) byteArrayInputStream0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      char char0 = '.';
      Character character0 = Character.valueOf(char0);
      TIntCharMapDecorator tIntCharMapDecorator0 = new TIntCharMapDecorator();
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      // Undeclared exception!
      try {
        tIntCharMapDecorator0.put(integer0, character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-1426);
      float float0 = (-1813.1173F);
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0, float0);
      int int1 = 0;
      char char0 = 'A';
      char[] charArray0 = new char[4];
      char char1 = 'x';
      charArray0[0] = char1;
      charArray0[1] = char0;
      charArray0[2] = char0;
      charArray0[0] = char0;
      charArray0[1] = char1;
      charArray0[2] = char1;
      charArray0[3] = char1;
      charArray0[3] = char0;
      TIntCharMapDecorator tIntCharMapDecorator0 = new TIntCharMapDecorator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      TIntCharMapDecorator tIntCharMapDecorator0 = new TIntCharMapDecorator((TIntCharMap) tIntCharHashMap0);
      tIntCharMapDecorator0.values();
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      String string0 = "<q";
      char char0 = 'v';
      Character character0 = new Character(char0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tIntCharMapDecorator0.writeExternal((ObjectOutput) objectOutputStream0);
      tIntCharMapDecorator0.put((Integer) int0, character0);
      tIntCharMapDecorator0.size();
      String string1 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: <q:%3Cq#
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 1645;
      intArray0[0] = int0;
      int int1 = 2557;
      intArray0[1] = int1;
      int int2 = 740;
      intArray0[2] = int2;
      int int3 = 944;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = 140;
      intArray0[5] = int5;
      int int6 = 1;
      intArray0[6] = int6;
      char[] charArray0 = new char[3];
      char char0 = '-';
      charArray0[0] = char0;
      char char1 = 'C';
      charArray0[1] = char1;
      char char2 = 'l';
      charArray0[2] = char2;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap((TIntCharMap) tIntCharHashMap0);
      TIntCharHashMap tIntCharHashMap2 = new TIntCharHashMap((TIntCharMap) tIntCharHashMap1);
      AbstractMap.SimpleEntry<TIntCharHashMap, Character> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<TIntCharHashMap, Character>(tIntCharHashMap2, (Character) char2);
      AbstractMap.SimpleEntry<TIntCharHashMap, Character> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<TIntCharHashMap, Character>((Map.Entry<? extends TIntCharHashMap, ? extends Character>) abstractMap_SimpleEntry0);
      abstractMap_SimpleEntry1.setValue((Character) charArray0[1]);
      TIntCharMapDecorator tIntCharMapDecorator0 = new TIntCharMapDecorator();
      // Undeclared exception!
      try {
        tIntCharMapDecorator0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0);
      TIntCharMapDecorator tIntCharMapDecorator0 = new TIntCharMapDecorator((TIntCharMap) tIntCharHashMap0);
      char char0 = 'a';
      Character character0 = Character.valueOf(char0);
      tIntCharMapDecorator0.put((Integer) int0, character0);
      assertEquals(1, tIntCharHashMap0.size());
      assertEquals("{null=a}", tIntCharMapDecorator0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      TIntCharMapDecorator tIntCharMapDecorator0 = new TIntCharMapDecorator();
      int int0 = 0;
      // Undeclared exception!
      try {
        tIntCharMapDecorator0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TIntCharMapDecorator tIntCharMapDecorator0 = new TIntCharMapDecorator();
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      int int0 = 483;
      char char0 = '?';
      // Undeclared exception!
      try {
        tIntCharMapDecorator0.put((Integer) int0, (Character) char0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      TIntCharMapDecorator tIntCharMapDecorator0 = new TIntCharMapDecorator((TIntCharMap) tIntCharHashMap0);
      TIntCharHashMap tIntCharHashMap1 = (TIntCharHashMap)tIntCharMapDecorator0.getMap();
      TIntCharMapDecorator tIntCharMapDecorator1 = new TIntCharMapDecorator((TIntCharMap) tIntCharHashMap1);
      int int0 = 220;
      int int1 = 0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tIntCharHashMap0._states, int0, int1);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TIntCharMapDecorator tIntCharMapDecorator0 = new TIntCharMapDecorator();
      Integer integer0 = null;
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getISO3Country();
      Character character0 = tIntCharMapDecorator0.remove((Object) string0);
      // Undeclared exception!
      try {
        tIntCharMapDecorator0.put(integer0, character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 67;
      intArray0[0] = int0;
      int int1 = 1414;
      intArray0[1] = int1;
      int int2 = 976;
      intArray0[2] = int2;
      int int3 = (-1473);
      intArray0[3] = int3;
      int int4 = (-1548);
      intArray0[4] = int4;
      int int5 = (-1);
      intArray0[5] = int5;
      int int6 = 1120;
      intArray0[6] = int6;
      int int7 = 1122;
      intArray0[7] = int7;
      int int8 = 0;
      intArray0[8] = int8;
      char[] charArray0 = new char[3];
      char char0 = '$';
      charArray0[0] = char0;
      char char1 = 'v';
      charArray0[1] = char1;
      char char2 = 'f';
      charArray0[2] = char2;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      TIntCharMapDecorator tIntCharMapDecorator0 = new TIntCharMapDecorator((TIntCharMap) tIntCharHashMap0);
      int int9 = (-311);
      int int10 = (-1);
      TIntCharMapDecorator tIntCharMapDecorator1 = new TIntCharMapDecorator();
      // Undeclared exception!
      try {
        tIntCharMapDecorator1.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 795;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = 1829;
      intArray0[5] = int5;
      int int6 = (-1925);
      intArray0[6] = int6;
      int int7 = (-570);
      intArray0[7] = int7;
      char[] charArray0 = new char[6];
      char char0 = 'N';
      charArray0[0] = char0;
      char char1 = '/';
      charArray0[1] = char1;
      char char2 = 'g';
      charArray0[2] = char2;
      char char3 = 'x';
      charArray0[3] = char3;
      char char4 = '4';
      charArray0[4] = char4;
      char char5 = 'p';
      charArray0[5] = char5;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      TIntCharMapDecorator tIntCharMapDecorator0 = new TIntCharMapDecorator((TIntCharMap) tIntCharHashMap0);
      int int8 = (-961);
      String string0 = Integer.toOctalString(int8);
      boolean boolean0 = tIntCharMapDecorator0.containsKey((Object) string0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1277;
      float float0 = 0.0F;
      int int1 = 0;
      char char0 = '(';
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0, float0, int1, char0);
      TIntCharMap tIntCharMap0 = null;
      TIntCharMapDecorator tIntCharMapDecorator0 = new TIntCharMapDecorator(tIntCharMap0);
      TIntCharHashMap tIntCharHashMap1 = null;
      try {
        tIntCharHashMap1 = new TIntCharHashMap((TIntCharMap) tIntCharHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }
}
