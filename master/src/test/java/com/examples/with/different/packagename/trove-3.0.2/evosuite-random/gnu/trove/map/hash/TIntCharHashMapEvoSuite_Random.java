/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.iterator.TIntCharIterator;
import gnu.trove.map.TIntCharMap;
import gnu.trove.map.hash.TIntCharHashMap;
import gnu.trove.procedure.TIntCharProcedure;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.util.AbstractMap;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntCharHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      float float0 = 0.0F;
      char char0 = '<';
      TIntCharMap tIntCharMap0 = null;
      TIntCharHashMap tIntCharHashMap0 = null;
      try {
        tIntCharHashMap0 = new TIntCharHashMap(tIntCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = (-1);
      int int2 = 683;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int2, int0);
      tIntCharHashMap0.getNoEntryKey();
      intArray0[1] = int1;
      intArray0[0] = int0;
      int int3 = 0;
      intArray0[1] = int3;
      char[] charArray0 = new char[3];
      char char0 = '<';
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap(intArray0[1]);
      tIntCharHashMap1.trimToSize();
      assertEquals("{}", tIntCharHashMap1.toString());
      assertEquals(3, tIntCharHashMap1.capacity());
      
      charArray0[0] = char0;
      intArray0[0] = (int) charArray0[0];
      intArray0[1] = int1;
      int int4 = 30;
      TIntCharHashMap tIntCharHashMap2 = new TIntCharHashMap(int4);
      tIntCharHashMap2.keySet();
      assertEquals(67, tIntCharHashMap2.capacity());
      
      char char1 = '`';
      charArray0[1] = char1;
      char char2 = '[';
      charArray0[2] = char2;
      TIntCharHashMap tIntCharHashMap3 = new TIntCharHashMap(intArray0, charArray0);
      assertEquals("{60=<, -1=`}", tIntCharHashMap3.toString());
      assertEquals(2, tIntCharHashMap3.size());
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[5];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      char[] charArray0 = new char[6];
      char char0 = 'Z';
      charArray0[0] = char0;
      char char1 = '0';
      charArray0[1] = char1;
      char char2 = 's';
      charArray0[2] = char2;
      char char3 = 'f';
      charArray0[3] = char3;
      char char4 = '|';
      charArray0[4] = char4;
      char char5 = '2';
      charArray0[5] = char5;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      assertEquals("{0=|}", tIntCharHashMap0.toString());
      assertEquals(1, tIntCharHashMap0.size());
      assertEquals(17, tIntCharHashMap0.capacity());
      
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap(int0);
      byte[] byteArray0 = tIntCharHashMap1._states;
      assertFalse(tIntCharHashMap1.equals(tIntCharHashMap0));
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-1544);
      int[] intArray0 = new int[7];
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      char[] charArray0 = new char[3];
      char char0 = '0';
      charArray0[0] = char0;
      char char1 = 'W';
      charArray0[1] = char1;
      char char2 = '`';
      charArray0[2] = char2;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      tIntCharHashMap0.getNoEntryValue();
      assertEquals("{-1544=`, 0=W}", tIntCharHashMap0.toString());
      assertEquals(17, tIntCharHashMap0.capacity());
      assertEquals(2, tIntCharHashMap0.size());
      
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap(int0);
      tIntCharHashMap1.compact();
      assertEquals("{}", tIntCharHashMap1.toString());
      assertEquals(3, tIntCharHashMap1.capacity());
  }

  @Test
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = (-18);
      intArray0[0] = int0;
      int int1 = 203;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      char[] charArray0 = new char[2];
      char char0 = 'Z';
      charArray0[0] = char0;
      char char1 = '>';
      charArray0[1] = char1;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      char[] charArray1 = tIntCharHashMap0.values();
      assertEquals("{-18=Z, 203=>}", tIntCharHashMap0.toString());
      assertNotNull(charArray1);
      
      int int3 = (-1);
      intArray0[3] = int3;
      char[] charArray2 = new char[1];
      char char2 = '\"';
      charArray2[0] = char2;
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap(intArray0, charArray2);
      int int4 = 0;
      tIntCharHashMap1.ensureCapacity(int4);
      assertEquals(11, tIntCharHashMap1.capacity());
      assertFalse(tIntCharHashMap1.equals(tIntCharHashMap0));
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-710);
      float float0 = 0.0F;
      int int1 = (-494);
      char char0 = 'N';
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0, float0, int1, char0);
      TIntCharIterator tIntCharIterator0 = tIntCharHashMap0.iterator();
      assertEquals(false, tIntCharIterator0.hasNext());
  }

  @Test
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 35863;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = (-1683);
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      char[] charArray0 = new char[10];
      char char0 = '&';
      charArray0[0] = char0;
      char char1 = 'e';
      charArray0[1] = char1;
      char char2 = 'H';
      charArray0[2] = char2;
      char char3 = 'A';
      charArray0[3] = char3;
      char char4 = '|';
      charArray0[4] = char4;
      char char5 = 'J';
      charArray0[5] = char5;
      char char6 = 'I';
      charArray0[6] = char6;
      char char7 = ')';
      charArray0[7] = char7;
      char char8 = '}';
      charArray0[8] = char8;
      char char9 = 'B';
      charArray0[9] = char9;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap((TIntCharMap) tIntCharHashMap0);
      assertEquals(false, tIntCharHashMap1.isEmpty());
      assertEquals(23, tIntCharHashMap1.capacity());
      assertEquals("{35863=H, -1683=|, 0=J}", tIntCharHashMap0.toString());
      assertEquals("{35863=H, -1683=|, 0=J}", tIntCharHashMap1.toString());
      assertEquals(0, tIntCharHashMap1.getNoEntryKey());
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      tIntCharHashMap0.getNoEntryValue();
      int int1 = 0;
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap(int1);
      tIntCharHashMap0.putAll((TIntCharMap) tIntCharHashMap1);
      TIntCharHashMap tIntCharHashMap2 = new TIntCharHashMap(int0, int0);
      tIntCharHashMap2.getAutoCompactionFactor();
      TIntCharHashMap tIntCharHashMap3 = null;
      try {
        tIntCharHashMap3 = new TIntCharHashMap((TIntCharMap) tIntCharHashMap2);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = (-1349);
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = (-1);
      intArray0[3] = int3;
      int int4 = 1185;
      intArray0[4] = int4;
      int int5 = 0;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      intArray0[5] = int5;
      char[] charArray0 = new char[1];
      char char0 = '5';
      charArray0[0] = char0;
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap(intArray0, charArray0);
      tIntCharHashMap1.ensureCapacity(intArray0[2]);
      assertEquals("{0=5}", tIntCharHashMap1.toString());
      assertEquals(17, tIntCharHashMap1.capacity());
      assertEquals(false, tIntCharHashMap1.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 62;
      int int1 = (-1926);
      char char0 = 'h';
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0, (float) int0, int1, char0);
      tIntCharHashMap0.ensureCapacity((int) char0);
      assertEquals("{}", tIntCharHashMap0.toString());
      
      tIntCharHashMap0.isEmpty();
      int int2 = (-1);
      float float0 = (-1146.9636F);
      char char1 = 'S';
      tIntCharHashMap0.keySet();
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap(int2, float0, int2, char1);
      int int3 = 1182;
      tIntCharHashMap1.put(int3, char1);
      assertEquals(1, tIntCharHashMap1.size());
      
      int int4 = 0;
      TIntCharHashMap tIntCharHashMap2 = new TIntCharHashMap(int4, int4);
      int[] intArray0 = tIntCharHashMap2._set;
      tIntCharHashMap2.iterator();
      assertFalse(tIntCharHashMap2.equals(tIntCharHashMap1));
  }

  @Test
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-1);
      intArray0[0] = int0;
      int int1 = 1;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      char[] charArray0 = new char[7];
      char char0 = 'I';
      charArray0[0] = char0;
      char char1 = 'U';
      charArray0[1] = char1;
      char char2 = ']';
      charArray0[2] = char2;
      char char3 = '_';
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap((int) charArray0[0]);
      AbstractMap.SimpleEntry<TIntCharHashMap, Character> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<TIntCharHashMap, Character>(tIntCharHashMap0, (Character) char2);
      PipedInputStream pipedInputStream0 = new PipedInputStream(int1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) pushbackInputStream0);
      try {
        dataInputStream0.readUTF();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-437);
      TIntCharHashMap tIntCharHashMap0 = null;
      AbstractMap.SimpleImmutableEntry<TIntCharHashMap, TIntCharHashMap> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<TIntCharHashMap, TIntCharHashMap>(tIntCharHashMap0, tIntCharHashMap0);
      abstractMap_SimpleImmutableEntry0.getKey();
      float float0 = 0.0F;
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap(int0, float0);
      int int1 = 0;
      char char0 = tIntCharHashMap1.get(int1);
      assertEquals('\u0000', char0);
  }

  @Test
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = (-1074);
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 1437;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      char[] charArray0 = new char[6];
      char char0 = 't';
      charArray0[0] = char0;
      char char1 = '3';
      charArray0[1] = char1;
      char char2 = 'C';
      charArray0[2] = char2;
      char char3 = '9';
      charArray0[3] = char3;
      char char4 = 'Q';
      charArray0[4] = char4;
      char char5 = 'Y';
      charArray0[5] = char5;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      String string0 = tIntCharHashMap0.toString();
      assertNotNull(string0);
      assertEquals("{1437=C, -1074=t, 0=Q}", string0);
      assertEquals(3, tIntCharHashMap0.size());
      assertEquals(17, tIntCharHashMap0.capacity());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0, int0);
      TIntCharHashMap tIntCharHashMap1 = null;
      try {
        tIntCharHashMap1 = new TIntCharHashMap((TIntCharMap) tIntCharHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      char char0 = '.';
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0, (float) int0, int0, char0);
      TIntCharHashMap tIntCharHashMap1 = null;
      try {
        tIntCharHashMap1 = new TIntCharHashMap((TIntCharMap) tIntCharHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 241;
      char char0 = 'J';
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0, (float) int0, int0, char0);
      tIntCharHashMap0.iterator();
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap((TIntCharMap) tIntCharHashMap0);
      tIntCharHashMap1.containsValue(char0);
      int int1 = 0;
      tIntCharHashMap0.contains(int1);
      int int2 = tIntCharHashMap0.capacity();
      TIntCharHashMap tIntCharHashMap2 = new TIntCharHashMap();
      int int3 = 0;
      tIntCharHashMap0.contains((int) char0);
      TIntCharProcedure tIntCharProcedure0 = null;
      tIntCharHashMap0.retainEntries(tIntCharProcedure0);
      tIntCharHashMap0.adjustValue(int3, char0);
      int int4 = 755;
      TIntCharHashMap tIntCharHashMap3 = new TIntCharHashMap(int4);
      int int5 = tIntCharHashMap2.hashCode();
      tIntCharHashMap2.remove(int4);
      tIntCharHashMap2.contains(int4);
      char char1 = tIntCharHashMap1.remove((int) char0);
      tIntCharHashMap3.setAutoCompactionFactor((float) char0);
      String string0 = "q6,2{E20Tl";
      Locale locale0 = new Locale(string0);
      String string1 = locale0.getDisplayVariant();
      tIntCharHashMap2.put(int2, char1);
      assertEquals(1, tIntCharHashMap2.size());
      
      tIntCharHashMap1.equals((Object) string1);
      byte[] byteArray0 = tIntCharHashMap0._states;
      char char2 = 'q';
      tIntCharHashMap3.containsValue(char2);
      locale0.getDisplayVariant();
      int int6 = (-1);
      TIntCharHashMap tIntCharHashMap4 = new TIntCharHashMap(int6);
      tIntCharHashMap4.keySet();
      tIntCharHashMap4.valueCollection();
      assertFalse(int6 == int5);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 0;
      float float0 = 6.6360896E8F;
      char char0 = '+';
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0, float0, int0, char0);
      boolean boolean0 = tIntCharHashMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 100;
      intArray0[0] = int0;
      int int1 = (-1);
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 318;
      intArray0[3] = int3;
      char[] charArray0 = new char[6];
      char char0 = '\'';
      charArray0[0] = char0;
      char char1 = 'q';
      charArray0[1] = char1;
      char char2 = '\'';
      charArray0[2] = char2;
      char char3 = '6';
      charArray0[3] = char3;
      char char4 = 'v';
      charArray0[4] = char4;
      char char5 = 'O';
      charArray0[5] = char5;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      assertEquals(4, tIntCharHashMap0.size());
      assertEquals("{100=', 318=6, -1=q, 0='}", tIntCharHashMap0.toString());
  }
}
