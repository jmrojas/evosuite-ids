/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TLongFunction;
import gnu.trove.map.TFloatLongMap;
import gnu.trove.map.hash.TFloatLongHashMap;
import gnu.trove.procedure.TFloatLongProcedure;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.procedure.TLongProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatLongHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TFloatLongHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TFloatLongHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TFloatLongHashMap.keySet()Lgnu/trove/set/TFloatSet;: root-Branch
   * 4 gnu.trove.map.hash.TFloatLongHashMap.setUp(I)I: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap();
      tFloatLongHashMap0.keySet();
      assertEquals(23, tFloatLongHashMap0.capacity());
  }

  //Test case number: 1
  /*
   * 17 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap$TFloatLongHashIterator.value()J: root-Branch
   * 2 gnu.trove.map.hash.TFloatLongHashMap$TFloatLongHashIterator.advance()V: root-Branch
   * 3 gnu.trove.map.hash.TFloatLongHashMap$TFloatLongHashIterator.<init>(Lgnu/trove/map/hash/TFloatLongHashMap;Lgnu/trove/map/hash/TFloatLongHashMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TFloatLongHashMap$TFloatLongHashIterator.key()F: root-Branch
   * 5 gnu.trove.map.hash.TFloatLongHashMap.iterator()Lgnu/trove/iterator/TFloatLongIterator;: root-Branch
   * 6 gnu.trove.map.hash.TFloatLongHashMap.put(FJ)J: root-Branch
   * 7 gnu.trove.map.hash.TFloatLongHashMap.<init>([F[J)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 8 gnu.trove.map.hash.TFloatLongHashMap.<init>([F[J)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 9 gnu.trove.map.hash.TFloatLongHashMap.<init>(Lgnu/trove/map/TFloatLongMap;)V: I10 Branch 34 IFEQ L133 - false
   * 10 gnu.trove.map.hash.TFloatLongHashMap.<init>(Lgnu/trove/map/TFloatLongMap;)V: I40 Branch 35 IFEQ L139 - true
   * 11 gnu.trove.map.hash.TFloatLongHashMap.<init>(Lgnu/trove/map/TFloatLongMap;)V: I54 Branch 36 IFEQ L143 - true
   * 12 gnu.trove.map.hash.TFloatLongHashMap.doPut(FJI)J: I12 Branch 40 IFGE L214 - true
   * 13 gnu.trove.map.hash.TFloatLongHashMap.doPut(FJI)J: I12 Branch 40 IFGE L214 - false
   * 14 gnu.trove.map.hash.TFloatLongHashMap.doPut(FJI)J: I41 Branch 41 IFEQ L221 - true
   * 15 gnu.trove.map.hash.TFloatLongHashMap.doPut(FJI)J: I41 Branch 41 IFEQ L221 - false
   * 16 gnu.trove.map.hash.TFloatLongHashMap.putAll(Lgnu/trove/map/TFloatLongMap;)V: I15 Branch 43 IFEQ L243 - true
   * 17 gnu.trove.map.hash.TFloatLongHashMap.putAll(Lgnu/trove/map/TFloatLongMap;)V: I15 Branch 43 IFEQ L243 - false
   */

//   @Test
//   public void test1()  throws Throwable  {
//       float[] floatArray0 = new float[2];
//       long[] longArray0 = new long[10];
//       TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
//       TFloatLongHashMap tFloatLongHashMap1 = new TFloatLongHashMap((TFloatLongMap) tFloatLongHashMap0);
//       assertEquals(1, tFloatLongHashMap0.size());
//       assertEquals(0L, tFloatLongHashMap1.getNoEntryValue());
//       assertEquals("{0.0=0}", tFloatLongHashMap0.toString());
//       assertEquals(0.0F, tFloatLongHashMap1.getNoEntryKey(), 0.01F);
//       assertEquals(23, tFloatLongHashMap1.capacity());
//       assertEquals(1, tFloatLongHashMap1.size());
//   }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap$TValueView.<init>(Lgnu/trove/map/hash/TFloatLongHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TFloatLongHashMap.valueCollection()Lgnu/trove/TLongCollection;: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap();
      tFloatLongHashMap0.valueCollection();
      assertEquals(23, tFloatLongHashMap0.capacity());
  }

  //Test case number: 3
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TFloatLongHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 3 gnu.trove.map.hash.TFloatLongHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 4 gnu.trove.map.hash.TFloatLongHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 5 gnu.trove.map.hash.TFloatLongHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 6 gnu.trove.map.hash.TFloatLongHashMap.remove(F)J: I14 Branch 46 IFLT L276 - false
   * 7 gnu.trove.map.hash.TFloatLongHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap((-1820), (-1820));
      tFloatLongHashMap0.put((-1.0F), (-134L));
      assertEquals(false, tFloatLongHashMap0.isEmpty());
      
      long long0 = tFloatLongHashMap0.remove((-1.0F));
      assertEquals((-134L), long0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.containsKey(F)Z: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap();
      tFloatLongHashMap0.containsKey(10.0F);
      assertEquals(23, tFloatLongHashMap0.capacity());
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.increment(F)Z: root-Branch
   * 2 gnu.trove.map.hash.TFloatLongHashMap.adjustValue(FJ)Z: I9 Branch 71 IFGE L477 - false
   */

  @Test
  public void test5()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap();
      boolean boolean0 = tFloatLongHashMap0.increment((float) 1733);
      assertEquals(23, tFloatLongHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.clear()V: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      float[] floatArray0 = new float[2];
      long[] longArray0 = new long[10];
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
      assertEquals(1, tFloatLongHashMap0.size());
      
      tFloatLongHashMap0.clear();
      assertEquals("{}", tFloatLongHashMap0.toString());
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   * 2 gnu.trove.map.hash.TFloatLongHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(0);
      boolean boolean0 = tFloatLongHashMap0.forEachKey((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 8
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.<init>(Lgnu/trove/map/TFloatLongMap;)V: I40 Branch 35 IFEQ L139 - false
   * 2 gnu.trove.map.hash.TFloatLongHashMap.<init>(Lgnu/trove/map/TFloatLongMap;)V: I54 Branch 36 IFEQ L143 - false
   * 3 gnu.trove.map.hash.TFloatLongHashMap.<init>(IFFJ)V: root-Branch
   * 4 gnu.trove.map.hash.TFloatLongHashMap.<init>(Lgnu/trove/map/TFloatLongMap;)V: I10 Branch 34 IFEQ L133 - false
   */

  @Test
  public void test8()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(0, (float) 0, (-1.0F), 1280L);
      TFloatLongHashMap tFloatLongHashMap1 = null;
      try {
        tFloatLongHashMap1 = new TFloatLongHashMap((TFloatLongMap) tFloatLongHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.putIfAbsent(FJ)J: I9 Branch 39 IFGE L205 - false
   */

  @Test
  public void test9()  throws Throwable  {
      float[] floatArray0 = new float[2];
      long[] longArray0 = new long[10];
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
      long long0 = tFloatLongHashMap0.putIfAbsent((float) 0L, 0L);
      assertEquals(23, tFloatLongHashMap0.capacity());
      assertEquals(1, tFloatLongHashMap0.size());
      assertEquals("{0.0=0}", tFloatLongHashMap0.toString());
      assertEquals(0L, long0);
  }

  //Test case number: 10
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - false
   * 2 gnu.trove.map.hash.TFloatLongHashMap.get(F)J: I9 Branch 44 IFGE L253 - false
   * 3 gnu.trove.map.hash.TFloatLongHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   */

  @Test
  public void test10()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap();
      long long0 = tFloatLongHashMap0.get((float) (-581));
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      Float float0 = new Float((double) (-1931));
      hashMap0.put(float0, (Long) long0);
      tFloatLongHashMap0.putAll((Map<? extends Float, ? extends Long>) hashMap0);
      assertEquals("{-1931.0=0}", tFloatLongHashMap0.toString());
      assertEquals(false, tFloatLongHashMap0.isEmpty());
  }

  //Test case number: 11
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.get(F)J: I9 Branch 44 IFGE L253 - true
   * 2 gnu.trove.map.hash.TFloatLongHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 3 gnu.trove.map.hash.TFloatLongHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 4 gnu.trove.map.hash.TFloatLongHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 5 gnu.trove.map.hash.TFloatLongHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 6 gnu.trove.map.hash.TFloatLongHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 7 gnu.trove.map.hash.TFloatLongHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 8 gnu.trove.map.hash.TFloatLongHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - true
   */

  @Test
  public void test11()  throws Throwable  {
      float[] floatArray0 = new float[2];
      long[] longArray0 = new long[4];
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
      boolean boolean0 = tFloatLongHashMap0.equals((Object) tFloatLongHashMap0);
      assertEquals(true, boolean0);
      assertEquals("{0.0=0}", tFloatLongHashMap0.toString());
      assertEquals(11, tFloatLongHashMap0.capacity());
      assertEquals(1, tFloatLongHashMap0.size());
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap();
      tFloatLongHashMap0.put(13.333513F, 687L);
      boolean boolean0 = tFloatLongHashMap0.isEmpty();
      assertEquals(1, tFloatLongHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test13()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(1560);
      boolean boolean0 = tFloatLongHashMap0.isEmpty();
      assertEquals(true, boolean0);
      assertEquals(3203, tFloatLongHashMap0.capacity());
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.remove(F)J: I14 Branch 46 IFLT L276 - true
   */

  @Test
  public void test14()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap((-14), (-14));
      long long0 = tFloatLongHashMap0.remove(0.0F);
      assertEquals(0, tFloatLongHashMap0.size());
      assertEquals(0L, long0);
  }

  //Test case number: 15
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.keys()[F: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TFloatLongHashMap.keys()[F: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TFloatLongHashMap.keys()[F: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TFloatLongHashMap.keys()[F: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap();
      tFloatLongHashMap0.put(13.333513F, 687L);
      tFloatLongHashMap0.keys();
      assertEquals(false, tFloatLongHashMap0.isEmpty());
      assertEquals("{13.333513=687}", tFloatLongHashMap0.toString());
  }

  //Test case number: 16
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.keys([F)[F: I44 Branch 51 IF_ICMPNE L323 - false
   * 2 gnu.trove.map.hash.TFloatLongHashMap.keys([F)[F: I10 Branch 49 IF_ICMPGE L315 - true
   * 3 gnu.trove.map.hash.TFloatLongHashMap.keys([F)[F: I37 Branch 50 IFLE L322 - true
   * 4 gnu.trove.map.hash.TFloatLongHashMap.keys([F)[F: I37 Branch 50 IFLE L322 - false
   * 5 gnu.trove.map.hash.TFloatLongHashMap.keys([F)[F: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap();
      tFloatLongHashMap0.put(13.333513F, 687L);
      tFloatLongHashMap0.keys(tFloatLongHashMap0._set);
      assertEquals("{13.333513=687}", tFloatLongHashMap0.toString());
      assertEquals(false, tFloatLongHashMap0.isEmpty());
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.values()[J: I34 Branch 53 IF_ICMPNE L344 - false
   * 2 gnu.trove.map.hash.TFloatLongHashMap.values()[J: I27 Branch 52 IFLE L343 - true
   * 3 gnu.trove.map.hash.TFloatLongHashMap.values()[J: I27 Branch 52 IFLE L343 - false
   * 4 gnu.trove.map.hash.TFloatLongHashMap.values()[J: I34 Branch 53 IF_ICMPNE L344 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap();
      tFloatLongHashMap0.put(0.0F, (long) 0);
      tFloatLongHashMap0.values();
      assertEquals("{0.0=0}", tFloatLongHashMap0.toString());
      assertEquals(false, tFloatLongHashMap0.isEmpty());
  }

  //Test case number: 18
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.values([J)[J: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TFloatLongHashMap.values([J)[J: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TFloatLongHashMap.values([J)[J: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TFloatLongHashMap.values([J)[J: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap();
      long[] longArray0 = new long[5];
      long[] longArray1 = tFloatLongHashMap0.values(longArray0);
      assertNotNull(longArray1);
      assertEquals(23, tFloatLongHashMap0.capacity());
      assertSame(longArray0, longArray1);
  }

  //Test case number: 19
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.values([J)[J: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TFloatLongHashMap.values([J)[J: I44 Branch 56 IF_ICMPNE L363 - false
   * 3 gnu.trove.map.hash.TFloatLongHashMap.values()[J: I27 Branch 52 IFLE L343 - true
   * 4 gnu.trove.map.hash.TFloatLongHashMap.values()[J: I27 Branch 52 IFLE L343 - false
   * 5 gnu.trove.map.hash.TFloatLongHashMap.values()[J: I34 Branch 53 IF_ICMPNE L344 - true
   * 6 gnu.trove.map.hash.TFloatLongHashMap.values([J)[J: I37 Branch 55 IFLE L362 - true
   * 7 gnu.trove.map.hash.TFloatLongHashMap.values([J)[J: I37 Branch 55 IFLE L362 - false
   * 8 gnu.trove.map.hash.TFloatLongHashMap.values([J)[J: I44 Branch 56 IF_ICMPNE L363 - true
   * 9 gnu.trove.map.hash.TFloatLongHashMap.putIfAbsent(FJ)J: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test19()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(1560);
      TFloatLongHashMap tFloatLongHashMap1 = new TFloatLongHashMap((-1879));
      tFloatLongHashMap0.putIfAbsent(0.0F, 1515L);
      long[] longArray0 = tFloatLongHashMap1.values();
      tFloatLongHashMap0.values(longArray0);
      assertEquals("{0.0=1515}", tFloatLongHashMap0.toString());
      assertEquals(3203, tFloatLongHashMap0.capacity());
  }

  //Test case number: 20
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.containsValue(J)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TFloatLongHashMap.containsValue(J)Z: I31 Branch 59 IFNE L377 - true
   * 3 gnu.trove.map.hash.TFloatLongHashMap.containsValue(J)Z: I18 Branch 57 IFLE L376 - true
   * 4 gnu.trove.map.hash.TFloatLongHashMap.containsValue(J)Z: I18 Branch 57 IFLE L376 - false
   * 5 gnu.trove.map.hash.TFloatLongHashMap.containsValue(J)Z: I25 Branch 58 IF_ICMPNE L377 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap();
      tFloatLongHashMap0.put(13.333513F, 687L);
      boolean boolean0 = tFloatLongHashMap0.containsValue(0L);
      assertEquals(false, tFloatLongHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 21
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.containsValue(J)Z: I31 Branch 59 IFNE L377 - false
   * 2 gnu.trove.map.hash.TFloatLongHashMap.containsValue(J)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TFloatLongHashMap.containsValue(J)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 4 gnu.trove.map.hash.TFloatLongHashMap.containsValue(J)Z: I25 Branch 58 IF_ICMPNE L377 - false
   */

  @Test
  public void test21()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2.1169894F);
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
      boolean boolean0 = tFloatLongHashMap0.containsValue((-1L));
      assertEquals(2, tFloatLongHashMap0.size());
      assertEquals(true, boolean0);
      assertEquals(17, tFloatLongHashMap0.capacity());
      assertEquals("{-2.1169894=-1, 0.0=0}", tFloatLongHashMap0.toString());
  }

  //Test case number: 22
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.forEachValue(Lgnu/trove/procedure/TLongProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TFloatLongHashMap.forEachValue(Lgnu/trove/procedure/TLongProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TFloatLongHashMap.forEachValue(Lgnu/trove/procedure/TLongProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap((-1422), 639.8369F);
      boolean boolean0 = tFloatLongHashMap0.forEachValue((TLongProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.transformValues(Lgnu/trove/function/TLongFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TFloatLongHashMap.transformValues(Lgnu/trove/function/TLongFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TFloatLongHashMap.transformValues(Lgnu/trove/function/TLongFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test23()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(1919);
      tFloatLongHashMap0.transformValues((TLongFunction) null);
      assertEquals(4177, tFloatLongHashMap0.capacity());
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.transformValues(Lgnu/trove/function/TLongFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TFloatLongHashMap.transformValues(Lgnu/trove/function/TLongFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TFloatLongHashMap.transformValues(Lgnu/trove/function/TLongFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap();
      tFloatLongHashMap0.put(1382.3077F, (-1L));
      // Undeclared exception!
      try {
        tFloatLongHashMap0.transformValues((TLongFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.retainEntries(Lgnu/trove/procedure/TFloatLongProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TFloatLongHashMap.retainEntries(Lgnu/trove/procedure/TFloatLongProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TFloatLongHashMap.retainEntries(Lgnu/trove/procedure/TFloatLongProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test25()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap();
      boolean boolean0 = tFloatLongHashMap0.retainEntries((TFloatLongProcedure) null);
      assertEquals(23, tFloatLongHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.retainEntries(Lgnu/trove/procedure/TFloatLongProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TFloatLongHashMap.retainEntries(Lgnu/trove/procedure/TFloatLongProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TFloatLongHashMap.retainEntries(Lgnu/trove/procedure/TFloatLongProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap();
      tFloatLongHashMap0.put(0.0F, (long) 0);
      // Undeclared exception!
      try {
        tFloatLongHashMap0.retainEntries((TFloatLongProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.adjustValue(FJ)Z: I9 Branch 71 IFGE L477 - true
   */

  @Test
  public void test27()  throws Throwable  {
      float[] floatArray0 = new float[8];
      long[] longArray0 = new long[5];
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
      boolean boolean0 = tFloatLongHashMap0.adjustValue((float) 0L, 0L);
      assertEquals("{0.0=0}", tFloatLongHashMap0.toString());
      assertEquals(1, tFloatLongHashMap0.size());
      assertEquals(17, tFloatLongHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.adjustOrPutValue(FJJ)J: I9 Branch 72 IFGE L491 - true
   * 2 gnu.trove.map.hash.TFloatLongHashMap.adjustOrPutValue(FJJ)J: I58 Branch 73 IFEQ L502 - false
   */

  @Test
  public void test28()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(1560);
      long long0 = tFloatLongHashMap0.adjustOrPutValue((float) (-1879), (-269L), 9223372036854775807L);
      assertEquals(1, tFloatLongHashMap0.size());
      assertEquals(9223372036854775807L, long0);
  }

  //Test case number: 29
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.adjustOrPutValue(FJJ)J: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TFloatLongHashMap.adjustOrPutValue(FJJ)J: I58 Branch 73 IFEQ L502 - true
   * 3 gnu.trove.map.hash.TFloatLongHashMap.doPut(FJI)J: I12 Branch 40 IFGE L214 - false
   * 4 gnu.trove.map.hash.TFloatLongHashMap.doPut(FJI)J: I41 Branch 41 IFEQ L221 - true
   */

  @Test
  public void test29()  throws Throwable  {
      float[] floatArray0 = new float[2];
      long[] longArray0 = new long[10];
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
      long long0 = tFloatLongHashMap0.adjustOrPutValue((float) 0L, 0L, 0L);
      assertEquals(1, tFloatLongHashMap0.size());
      assertEquals("{0.0=0}", tFloatLongHashMap0.toString());
      assertEquals(23, tFloatLongHashMap0.capacity());
      assertEquals(0L, long0);
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   * 2 gnu.trove.map.hash.TFloatLongHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test30()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(1560);
      boolean boolean0 = tFloatLongHashMap0.equals((Object) "ko");
      assertEquals(false, boolean0);
      assertEquals(3203, tFloatLongHashMap0.capacity());
  }

  //Test case number: 31
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - false
   * 2 gnu.trove.map.hash.TFloatLongHashMap.equals(Ljava/lang/Object;)Z: I89 Branch 79 IFEQ L1200 - false
   * 3 gnu.trove.map.hash.TFloatLongHashMap.equals(Ljava/lang/Object;)Z: I93 Branch 80 IFEQ L1200 - true
   * 4 gnu.trove.map.hash.TFloatLongHashMap.<init>()V: root-Branch
   * 5 gnu.trove.map.hash.TFloatLongHashMap.putIfAbsent(FJ)J: I9 Branch 39 IFGE L205 - true
   * 6 gnu.trove.map.hash.TFloatLongHashMap.get(F)J: I9 Branch 44 IFGE L253 - false
   * 7 gnu.trove.map.hash.TFloatLongHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 8 gnu.trove.map.hash.TFloatLongHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 9 gnu.trove.map.hash.TFloatLongHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 10 gnu.trove.map.hash.TFloatLongHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 11 gnu.trove.map.hash.TFloatLongHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 12 gnu.trove.map.hash.TFloatLongHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   */

  @Test
  public void test31()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap();
      long[] longArray0 = new long[1];
      tFloatLongHashMap0.putIfAbsent((float) 1733L, (long) (-1435));
      TFloatLongHashMap tFloatLongHashMap1 = new TFloatLongHashMap(tFloatLongHashMap0._set, longArray0);
      boolean boolean0 = tFloatLongHashMap0.equals((Object) tFloatLongHashMap1);
      assertEquals(false, tFloatLongHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 32
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 2 gnu.trove.map.hash.TFloatLongHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 3 gnu.trove.map.hash.TFloatLongHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 4 gnu.trove.map.hash.TFloatLongHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   */

  @Test
  public void test32()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap((-14), (-14));
      tFloatLongHashMap0.put(1932.0576F, (long) (-14));
      int int0 = tFloatLongHashMap0.hashCode();
      assertEquals(1, tFloatLongHashMap0.size());
      assertEquals(1402290804, int0);
  }

  //Test case number: 33
  /*
   * 11 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap$1.execute(FJ)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TFloatLongHashMap$1.<init>(Lgnu/trove/map/hash/TFloatLongHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 3 gnu.trove.map.hash.TFloatLongHashMap$1.execute(FJ)Z: I4 Branch 115 IFEQ L1233 - false
   * 4 gnu.trove.map.hash.TFloatLongHashMap.toString()Ljava/lang/String;: root-Branch
   * 5 gnu.trove.map.hash.TFloatLongHashMap.forEachEntry(Lgnu/trove/procedure/TFloatLongProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 6 gnu.trove.map.hash.TFloatLongHashMap.forEachEntry(Lgnu/trove/procedure/TFloatLongProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 7 gnu.trove.map.hash.TFloatLongHashMap.forEachEntry(Lgnu/trove/procedure/TFloatLongProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 8 gnu.trove.map.hash.TFloatLongHashMap.forEachEntry(Lgnu/trove/procedure/TFloatLongProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 9 gnu.trove.map.hash.TFloatLongHashMap.forEachEntry(Lgnu/trove/procedure/TFloatLongProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 10 gnu.trove.map.hash.TFloatLongHashMap.<init>([F[J)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 11 gnu.trove.map.hash.TFloatLongHashMap.<init>([F[J)V: I24 Branch 33 IF_ICMPGE L119 - false
   */

  @Test
  public void test33()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      long[] longArray0 = new long[10];
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
      String string0 = tFloatLongHashMap0.toString();
      assertNotNull(string0);
      assertEquals(23, tFloatLongHashMap0.capacity());
      assertEquals(2, tFloatLongHashMap0.size());
      assertEquals("{-Infinity=0, 0.0=0}", string0);
  }

  //Test case number: 34
  /*
   * 13 covered goals:
   * 1 gnu.trove.map.hash.TFloatLongHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 2 gnu.trove.map.hash.TFloatLongHashMap.put(FJ)J: root-Branch
   * 3 gnu.trove.map.hash.TFloatLongHashMap.setUp(I)I: root-Branch
   * 4 gnu.trove.map.hash.TFloatLongHashMap.<init>(IF)V: root-Branch
   * 5 gnu.trove.map.hash.TFloatLongHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 6 gnu.trove.map.hash.TFloatLongHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 7 gnu.trove.map.hash.TFloatLongHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 8 gnu.trove.map.hash.TFloatLongHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 9 gnu.trove.map.hash.TFloatLongHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 10 gnu.trove.map.hash.TFloatLongHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 11 gnu.trove.map.hash.TFloatLongHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 12 gnu.trove.map.hash.TFloatLongHashMap.doPut(FJI)J: I12 Branch 40 IFGE L214 - true
   * 13 gnu.trove.map.hash.TFloatLongHashMap.doPut(FJI)J: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test34()  throws Throwable  {
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap((-14), (-14));
      tFloatLongHashMap0.put(1932.0576F, (long) (-14));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(164089);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tFloatLongHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(7, tFloatLongHashMap0.capacity());
      assertEquals("{1932.0576=-14}", tFloatLongHashMap0.toString());
  }
}
