/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TFloatFunction;
import gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap;
import gnu.trove.map.TFloatFloatMap;
import gnu.trove.map.hash.TFloatFloatHashMap;
import gnu.trove.procedure.TFloatFloatProcedure;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableFloatFloatMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      float[] floatArray0 = new float[2];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = Float.NEGATIVE_INFINITY;
      floatArray0[1] = float1;
      float[] floatArray1 = tUnmodifiableFloatFloatMap0.keys(floatArray0);
      assertSame(floatArray1, floatArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap1 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tUnmodifiableFloatFloatMap0);
      Object object0 = null;
      boolean boolean0 = tUnmodifiableFloatFloatMap1.equals(object0);
      assertEquals(false, boolean0);
      assertTrue(tUnmodifiableFloatFloatMap1.equals(tUnmodifiableFloatFloatMap0));
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 70;
      float float0 = 150.99048F;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0, float0);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap((TFloatFloatMap) tUnmodifiableFloatFloatMap0);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap1 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap1);
      tUnmodifiableFloatFloatMap1.toString();
      TFloatFloatHashMap tFloatFloatHashMap2 = new TFloatFloatHashMap(int0, float0);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap2 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap2);
      float float1 = Float.NEGATIVE_INFINITY;
      // Undeclared exception!
      try {
        tUnmodifiableFloatFloatMap2.remove(float1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = 6.6360896E8F;
      floatArray0[0] = float0;
      float float1 = 1594.411F;
      floatArray0[1] = float1;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap1 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tUnmodifiableFloatFloatMap0);
      float float2 = (-916.96387F);
      // Undeclared exception!
      try {
        tUnmodifiableFloatFloatMap1.adjustValue(float1, float2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = 911.7616F;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap1 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      float float2 = Float.NEGATIVE_INFINITY;
      // Undeclared exception!
      try {
        tUnmodifiableFloatFloatMap1.putIfAbsent(float2, floatArray0[0]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 2002;
      float float0 = (-548.8952F);
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0, float0, float0, (float) int0);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      float float1 = (-112.46497F);
      // Undeclared exception!
      try {
        tUnmodifiableFloatFloatMap0.adjustOrPutValue((float) int0, float1, (float) int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TFloatFloatMap tFloatFloatMap0 = null;
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = null;
      try {
        tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap(tFloatFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-1541);
      float float0 = (-2017.0168F);
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      TFloatFloatProcedure tFloatFloatProcedure0 = null;
      tUnmodifiableFloatFloatMap0.forEachEntry(tFloatFloatProcedure0);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap1 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      tUnmodifiableFloatFloatMap1.containsKey(float0);
      float float1 = 1.0F;
      float float2 = Float.NEGATIVE_INFINITY;
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(int0, float2);
      TFloatFunction tFloatFunction0 = null;
      // Undeclared exception!
      try {
        tUnmodifiableFloatFloatMap1.transformValues(tFloatFunction0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 241;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0);
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap();
      TFloatFloatHashMap tFloatFloatHashMap2 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap1);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap2);
      tUnmodifiableFloatFloatMap0.toString();
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap1 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableFloatFloatMap1.put((float) int0, (float) int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 235;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableFloatFloatMap0.adjustValue((float) int0, (float) int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test10()  throws Throwable  {
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
//       TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap0);
//       TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap1);
//       assertEquals(0.0F, tUnmodifiableFloatFloatMap0.getNoEntryKey(), 0.01F);
//   }

  @Test
  public void test11()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      tUnmodifiableFloatFloatMap0.valueCollection();
      tUnmodifiableFloatFloatMap0.keySet();
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap1 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      int int0 = tUnmodifiableFloatFloatMap1.size();
      tUnmodifiableFloatFloatMap1.values(tFloatFloatHashMap0._set);
      tUnmodifiableFloatFloatMap1.size();
      int int1 = (-43);
      tUnmodifiableFloatFloatMap1.toString();
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(int1, int1);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap2 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap1);
      tFloatFloatHashMap1.getAutoCompactionFactor();
      tUnmodifiableFloatFloatMap2.getNoEntryKey();
      float float0 = (-1836.0157F);
      // Undeclared exception!
      try {
        tUnmodifiableFloatFloatMap2.adjustValue(float0, (float) int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      float float2 = (-1145.761F);
      floatArray0[2] = float2;
      float float3 = 1617.088F;
      floatArray0[3] = float3;
      float float4 = 0.5F;
      floatArray0[4] = float4;
      int int0 = 841;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      float float5 = 1309.1838F;
      float float6 = Float.NEGATIVE_INFINITY;
      // Undeclared exception!
      try {
        tUnmodifiableFloatFloatMap0.putIfAbsent(float5, float6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      float float0 = 1047.4917F;
      float float1 = 0.0F;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0, float0, (float) int0, float1);
      tFloatFloatHashMap0.size();
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap0);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap1);
      // Undeclared exception!
      try {
        tUnmodifiableFloatFloatMap0.remove(float1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      tUnmodifiableFloatFloatMap0.keys();
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap1 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      float float0 = 0.0F;
      float float1 = (-1755.9407F);
      // Undeclared exception!
      try {
        tUnmodifiableFloatFloatMap1.increment(float1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 834;
      float float0 = 0.0F;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0, float0);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      float float1 = (-1.0F);
      float float2 = tUnmodifiableFloatFloatMap0.get(float1);
      assertFalse(float2 == float1);
  }

  @Test
  public void test16()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = (-1559.9738F);
      floatArray0[1] = float1;
      float float2 = 0.0F;
      floatArray0[2] = float2;
      float float3 = 604.91956F;
      floatArray0[3] = float3;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
      TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      float float4 = tUnmodifiableFloatFloatMap0.getNoEntryKey();
      assertFalse(float4 == float3);
  }

//   @Test
//   public void test17()  throws Throwable  {
//       int int0 = 73;
//       float float0 = 380.7988F;
//       float float1 = 383.71426F;
//       float float2 = (-1853.1802F);
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0, float0, float1, float2);
//       TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
//       assertEquals((-1853.1802F), tUnmodifiableFloatFloatMap0.getNoEntryValue(), 0.01F);
//   }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      float float1 = 0.0F;
      float float2 = 1682.6272F;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0, float0, float1, float2);
      TFloatFloatHashMap tFloatFloatHashMap1 = null;
      try {
        tFloatFloatHashMap1 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

//   @Test
//   public void test19()  throws Throwable  {
//       int int0 = 442;
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0);
//       TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap0 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
//       tUnmodifiableFloatFloatMap0.getNoEntryKey();
//       int int1 = (-1);
//       TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(int1, int1);
//       TUnmodifiableFloatFloatMap tUnmodifiableFloatFloatMap1 = new TUnmodifiableFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap1);
//       assertEquals(0.0F, tUnmodifiableFloatFloatMap1.getNoEntryValue(), 0.01F);
//   }
}
