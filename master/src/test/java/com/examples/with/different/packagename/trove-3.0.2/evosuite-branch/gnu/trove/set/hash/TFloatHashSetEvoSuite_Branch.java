/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.set.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TFloatCollection;
import gnu.trove.impl.sync.TSynchronizedFloatList;
import gnu.trove.impl.sync.TSynchronizedFloatSet;
import gnu.trove.list.TFloatList;
import gnu.trove.list.array.TFloatArrayList;
import gnu.trove.set.TFloatSet;
import gnu.trove.set.hash.TFloatHashSet;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.Collection;
import java.util.LinkedList;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatHashSetEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 13 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet$TFloatHashIterator.next()F: root-Branch
   * 2 gnu.trove.set.hash.TFloatHashSet.retainAll(Ljava/util/Collection;)Z: I13 Branch 24 IFEQ L302 - false
   * 3 gnu.trove.set.hash.TFloatHashSet.retainAll(Ljava/util/Collection;)Z: I21 Branch 25 IFGT L303 - false
   * 4 gnu.trove.set.hash.TFloatHashSet.iterator()Lgnu/trove/iterator/TFloatIterator;: root-Branch
   * 5 gnu.trove.set.hash.TFloatHashSet.<init>(IF)V: root-Branch
   * 6 gnu.trove.set.hash.TFloatHashSet.add(F)Z: I9 Branch 9 IFGE L196 - true
   * 7 gnu.trove.set.hash.TFloatHashSet.add(F)Z: I9 Branch 9 IFGE L196 - false
   * 8 gnu.trove.set.hash.TFloatHashSet.retainAll(Ljava/util/Collection;)Z: I13 Branch 24 IFEQ L302 - true
   * 9 gnu.trove.set.hash.TFloatHashSet.addAll([F)Z: I12 Branch 22 IFLE L288 - true
   * 10 gnu.trove.set.hash.TFloatHashSet.addAll([F)Z: I12 Branch 22 IFLE L288 - false
   * 11 gnu.trove.set.hash.TFloatHashSet.addAll([F)Z: I20 Branch 23 IFEQ L289 - true
   * 12 gnu.trove.set.hash.TFloatHashSet.addAll([F)Z: I20 Branch 23 IFEQ L289 - false
   * 13 gnu.trove.set.hash.TFloatHashSet$TFloatHashIterator.<init>(Lgnu/trove/set/hash/TFloatHashSet;Lgnu/trove/impl/hash/TFloatHash;)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(916, 916);
      tFloatHashSet0.addAll(tFloatHashSet0._set);
      assertEquals("{0.0}", tFloatHashSet0.toString());
      
      boolean boolean0 = tFloatHashSet0.retainAll((Collection<?>) linkedList0);
      assertEquals(true, boolean0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.set.hash.TFloatHashSet.<init>(IFF)V: I12 Branch 1 IFEQ L101 - true
   */

  @Test
  public void test1()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(0, 0, 0);
      assertEquals(3, tFloatHashSet0.capacity());
  }

  //Test case number: 2
  /*
   * 4 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.<init>(Lgnu/trove/TFloatCollection;)V: I36 Branch 3 IFEQ L132 - false
   * 2 gnu.trove.set.hash.TFloatHashSet.<init>(I)V: root-Branch
   * 3 gnu.trove.set.hash.TFloatHashSet.<init>(IFF)V: I12 Branch 1 IFEQ L101 - false
   * 4 gnu.trove.set.hash.TFloatHashSet.<init>(Lgnu/trove/TFloatCollection;)V: I12 Branch 2 IFEQ L127 - false
   */

  @Test
  public void test2()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet((-2028), 0.0F, 1.0F);
      TFloatHashSet tFloatHashSet1 = null;
      try {
        tFloatHashSet1 = new TFloatHashSet((TFloatCollection) tFloatHashSet0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  //Test case number: 3
  /*
   * 9 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.toArray()[F: I34 Branch 5 IF_ICMPNE L166 - false
   * 2 gnu.trove.set.hash.TFloatHashSet.addAll(Lgnu/trove/TFloatCollection;)Z: I13 Branch 20 IFEQ L275 - false
   * 3 gnu.trove.set.hash.TFloatHashSet.addAll(Lgnu/trove/TFloatCollection;)Z: I24 Branch 21 IFEQ L277 - true
   * 4 gnu.trove.set.hash.TFloatHashSet.addAll(Lgnu/trove/TFloatCollection;)Z: I24 Branch 21 IFEQ L277 - false
   * 5 gnu.trove.set.hash.TFloatHashSet.addAll(Lgnu/trove/TFloatCollection;)Z: I13 Branch 20 IFEQ L275 - true
   * 6 gnu.trove.set.hash.TFloatHashSet.toArray()[F: I27 Branch 4 IFLE L165 - true
   * 7 gnu.trove.set.hash.TFloatHashSet.toArray()[F: I27 Branch 4 IFLE L165 - false
   * 8 gnu.trove.set.hash.TFloatHashSet.toArray()[F: I34 Branch 5 IF_ICMPNE L166 - true
   * 9 gnu.trove.set.hash.TFloatHashSet.<init>(Lgnu/trove/TFloatCollection;)V: I12 Branch 2 IFEQ L127 - true
   */

  @Test
  public void test3()  throws Throwable  {
      float[] floatArray0 = new float[7];
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, (-1640.6466F));
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet((TFloatCollection) tFloatArrayList0);
      float[] floatArray1 = tFloatHashSet0.toArray();
      assertEquals("{0.0}", tFloatHashSet0.toString());
      assertNotNull(floatArray1);
  }

  //Test case number: 4
  /*
   * 9 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.toArray([F)[F: I28 Branch 7 IF_ICMPNE L180 - false
   * 2 gnu.trove.set.hash.TFloatHashSet.rehash(I)V: I35 Branch 40 IFLE L410 - true
   * 3 gnu.trove.set.hash.TFloatHashSet.rehash(I)V: I35 Branch 40 IFLE L410 - false
   * 4 gnu.trove.set.hash.TFloatHashSet.rehash(I)V: I42 Branch 41 IF_ICMPNE L411 - true
   * 5 gnu.trove.set.hash.TFloatHashSet.rehash(I)V: I42 Branch 41 IF_ICMPNE L411 - false
   * 6 gnu.trove.set.hash.TFloatHashSet.toArray([F)[F: I45 Branch 8 IF_ICMPLE L185 - false
   * 7 gnu.trove.set.hash.TFloatHashSet.toArray([F)[F: I21 Branch 6 IFLE L179 - true
   * 8 gnu.trove.set.hash.TFloatHashSet.toArray([F)[F: I21 Branch 6 IFLE L179 - false
   * 9 gnu.trove.set.hash.TFloatHashSet.toArray([F)[F: I28 Branch 7 IF_ICMPNE L180 - true
   */

  @Test
  public void test4()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(0, 0);
      tFloatHashSet0.add((float) 0);
      tFloatHashSet0.toArray(tFloatHashSet0._set);
      assertEquals(false, tFloatHashSet0.isEmpty());
      assertEquals("{0.0}", tFloatHashSet0.toString());
  }

  //Test case number: 5
  /*
   * 7 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.toArray([F)[F: I45 Branch 8 IF_ICMPLE L185 - true
   * 2 gnu.trove.set.hash.TFloatHashSet.toArray([F)[F: I21 Branch 6 IFLE L179 - true
   * 3 gnu.trove.set.hash.TFloatHashSet.toArray([F)[F: I21 Branch 6 IFLE L179 - false
   * 4 gnu.trove.set.hash.TFloatHashSet.toArray([F)[F: I28 Branch 7 IF_ICMPNE L180 - true
   * 5 gnu.trove.set.hash.TFloatHashSet.toArray()[F: I27 Branch 4 IFLE L165 - true
   * 6 gnu.trove.set.hash.TFloatHashSet.toArray()[F: I27 Branch 4 IFLE L165 - false
   * 7 gnu.trove.set.hash.TFloatHashSet.toArray()[F: I34 Branch 5 IF_ICMPNE L166 - true
   */

  @Test
  public void test5()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(21);
      float[] floatArray0 = tFloatHashSet0.toArray();
      assertNotNull(floatArray0);
      
      float[] floatArray1 = tFloatHashSet0.toArray(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
  }

  //Test case number: 6
  /*
   * 6 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.remove(F)Z: I9 Branch 10 IFLT L209 - false
   * 2 gnu.trove.set.hash.TFloatHashSet.removeAll([F)Z: I20 Branch 38 IFEQ L379 - false
   * 3 gnu.trove.set.hash.TFloatHashSet.removeAll([F)Z: I12 Branch 37 IFLE L378 - true
   * 4 gnu.trove.set.hash.TFloatHashSet.removeAll([F)Z: I12 Branch 37 IFLE L378 - false
   * 5 gnu.trove.set.hash.TFloatHashSet.removeAll([F)Z: I20 Branch 38 IFEQ L379 - true
   * 6 gnu.trove.set.hash.TFloatHashSet.remove(F)Z: I9 Branch 10 IFLT L209 - true
   */

  @Test
  public void test6()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(916, 916);
      tFloatHashSet0.addAll(tFloatHashSet0._set);
      assertEquals("{0.0}", tFloatHashSet0.toString());
      
      boolean boolean0 = tFloatHashSet0.removeAll(tFloatHashSet0._set);
      assertEquals(true, boolean0);
  }

  //Test case number: 7
  /*
   * 3 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.containsAll(Ljava/util/Collection;)Z: I8 Branch 11 IFEQ L219 - false
   * 2 gnu.trove.set.hash.TFloatHashSet.containsAll(Ljava/util/Collection;)Z: I16 Branch 12 IFEQ L220 - false
   * 3 gnu.trove.set.hash.TFloatHashSet.containsAll(Ljava/util/Collection;)Z: I28 Branch 13 IFNE L222 - false
   */

  @Test
  public void test7()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(916, 916);
      Float float0 = new Float((float) 916);
      linkedList0.add(float0);
      boolean boolean0 = tFloatHashSet0.containsAll((Collection<?>) linkedList0);
      assertEquals(false, boolean0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.set.hash.TFloatHashSet.containsAll(Ljava/util/Collection;)Z: I16 Branch 12 IFEQ L220 - true
   */

  @Test
  public void test8()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(0, 785.3631F);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "");
      boolean boolean0 = tFloatHashSet0.containsAll((Collection<?>) linkedList0);
      assertEquals(false, boolean0);
  }

  //Test case number: 9
  /*
   * 5 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.containsAll(Ljava/util/Collection;)Z: I28 Branch 13 IFNE L222 - true
   * 2 gnu.trove.set.hash.TFloatHashSet.containsAll(Ljava/util/Collection;)Z: I8 Branch 11 IFEQ L219 - true
   * 3 gnu.trove.set.hash.TFloatHashSet.containsAll(Ljava/util/Collection;)Z: I8 Branch 11 IFEQ L219 - false
   * 4 gnu.trove.set.hash.TFloatHashSet.containsAll(Ljava/util/Collection;)Z: I16 Branch 12 IFEQ L220 - false
   * 5 gnu.trove.set.hash.TFloatHashSet.<init>()V: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet();
      tFloatHashSet0.add(1341.4519F);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) 1341.4519F);
      boolean boolean0 = tFloatHashSet0.containsAll((Collection<?>) linkedList0);
      assertEquals(1, tFloatHashSet0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 10
  /*
   * 4 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.containsAll(Lgnu/trove/TFloatCollection;)Z: I9 Branch 14 IFEQ L237 - true
   * 2 gnu.trove.set.hash.TFloatHashSet.containsAll(Lgnu/trove/TFloatCollection;)Z: I9 Branch 14 IFEQ L237 - false
   * 3 gnu.trove.set.hash.TFloatHashSet.containsAll(Lgnu/trove/TFloatCollection;)Z: I20 Branch 15 IFNE L239 - true
   * 4 gnu.trove.set.hash.TFloatHashSet.<init>([F)V: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      float[] floatArray0 = new float[7];
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(floatArray0);
      TSynchronizedFloatSet tSynchronizedFloatSet0 = new TSynchronizedFloatSet((TFloatSet) tFloatHashSet0);
      boolean boolean0 = tFloatHashSet0.containsAll((TFloatCollection) tSynchronizedFloatSet0);
      assertEquals(1, tSynchronizedFloatSet0.size());
      assertEquals(true, boolean0);
      assertEquals("{0.0}", tSynchronizedFloatSet0.toString());
  }

  //Test case number: 11
  /*
   * 4 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.containsAll(Lgnu/trove/TFloatCollection;)Z: I20 Branch 15 IFNE L239 - false
   * 2 gnu.trove.set.hash.TFloatHashSet.containsAll(Lgnu/trove/TFloatCollection;)Z: I9 Branch 14 IFEQ L237 - false
   * 3 gnu.trove.set.hash.TFloatHashSet.<init>(Lgnu/trove/TFloatCollection;)V: I12 Branch 2 IFEQ L127 - false
   * 4 gnu.trove.set.hash.TFloatHashSet.<init>(Lgnu/trove/TFloatCollection;)V: I36 Branch 3 IFEQ L132 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet();
      TFloatHashSet tFloatHashSet1 = new TFloatHashSet((TFloatCollection) tFloatHashSet0);
      tFloatHashSet0.add(1341.4519F);
      boolean boolean0 = tFloatHashSet1.containsAll((TFloatCollection) tFloatHashSet0);
      assertEquals(false, tFloatHashSet0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 12
  /*
   * 5 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.containsAll([F)Z: I8 Branch 16 IFLE L249 - true
   * 2 gnu.trove.set.hash.TFloatHashSet.containsAll([F)Z: I8 Branch 16 IFLE L249 - false
   * 3 gnu.trove.set.hash.TFloatHashSet.containsAll([F)Z: I16 Branch 17 IFNE L250 - true
   * 4 gnu.trove.set.hash.TFloatHashSet.<init>(Ljava/util/Collection;)V: root-Branch
   * 5 gnu.trove.set.hash.TFloatHashSet.addAll(Ljava/util/Collection;)Z: I12 Branch 18 IFEQ L261 - true
   */

  @Test
  public void test12()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet((Collection<? extends Float>) linkedList0);
      tFloatHashSet0.addAll(tFloatHashSet0._set);
      boolean boolean0 = tFloatHashSet0.containsAll(tFloatHashSet0._set);
      assertEquals("{0.0}", tFloatHashSet0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 13
  /*
   * 2 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.containsAll([F)Z: I16 Branch 17 IFNE L250 - false
   * 2 gnu.trove.set.hash.TFloatHashSet.containsAll([F)Z: I8 Branch 16 IFLE L249 - false
   */

  @Test
  public void test13()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(1952, (float) 1952, (-1304.4966F));
      boolean boolean0 = tFloatHashSet0.containsAll(tFloatHashSet0._set);
      assertEquals(false, boolean0);
  }

  //Test case number: 14
  /*
   * 3 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.addAll(Ljava/util/Collection;)Z: I27 Branch 19 IFEQ L263 - true
   * 2 gnu.trove.set.hash.TFloatHashSet.addAll(Ljava/util/Collection;)Z: I12 Branch 18 IFEQ L261 - false
   * 3 gnu.trove.set.hash.TFloatHashSet.addAll(Ljava/util/Collection;)Z: I27 Branch 19 IFEQ L263 - false
   */

  @Test
  public void test14()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((float) 916);
      linkedList0.add(float0);
      linkedList0.add(float0);
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet((Collection<? extends Float>) linkedList0);
      assertEquals(1, tFloatHashSet0.size());
      assertEquals("{916.0}", tFloatHashSet0.toString());
  }

  //Test case number: 15
  /*
   * 3 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.retainAll(Ljava/util/Collection;)Z: I21 Branch 25 IFGT L303 - true
   * 2 gnu.trove.set.hash.TFloatHashSet.retainAll(Ljava/util/Collection;)Z: I13 Branch 24 IFEQ L302 - true
   * 3 gnu.trove.set.hash.TFloatHashSet.retainAll(Ljava/util/Collection;)Z: I13 Branch 24 IFEQ L302 - false
   */

  @Test
  public void test15()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(916, 916);
      linkedList0.add((Float) 0.0F);
      tFloatHashSet0.addAll(tFloatHashSet0._set);
      boolean boolean0 = tFloatHashSet0.retainAll((Collection<?>) linkedList0);
      assertEquals("{0.0}", tFloatHashSet0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 16
  /*
   * 5 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.retainAll(Lgnu/trove/TFloatCollection;)Z: I4 Branch 26 IF_ACMPNE L314 - true
   * 2 gnu.trove.set.hash.TFloatHashSet.retainAll(Lgnu/trove/TFloatCollection;)Z: I22 Branch 27 IFEQ L319 - true
   * 3 gnu.trove.set.hash.TFloatHashSet.retainAll(Lgnu/trove/TFloatCollection;)Z: I22 Branch 27 IFEQ L319 - false
   * 4 gnu.trove.set.hash.TFloatHashSet.retainAll(Lgnu/trove/TFloatCollection;)Z: I29 Branch 28 IFNE L320 - false
   * 5 gnu.trove.set.hash.TFloatHashSet.<init>()V: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      float[] floatArray0 = new float[4];
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(floatArray0);
      TFloatHashSet tFloatHashSet1 = new TFloatHashSet();
      boolean boolean0 = tFloatHashSet0.retainAll((TFloatCollection) tFloatHashSet1);
      assertEquals(true, tFloatHashSet0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 17
  /*
   * 3 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.retainAll(Lgnu/trove/TFloatCollection;)Z: I4 Branch 26 IF_ACMPNE L314 - false
   * 2 gnu.trove.set.hash.TFloatHashSet.<init>(Ljava/util/Collection;)V: root-Branch
   * 3 gnu.trove.set.hash.TFloatHashSet.addAll(Ljava/util/Collection;)Z: I12 Branch 18 IFEQ L261 - true
   */

  @Test
  public void test17()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet((Collection<? extends Float>) linkedList0);
      boolean boolean0 = tFloatHashSet0.retainAll((TFloatCollection) tFloatHashSet0);
      assertEquals(false, boolean0);
  }

  //Test case number: 18
  /*
   * 7 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.retainAll(Lgnu/trove/TFloatCollection;)Z: I29 Branch 28 IFNE L320 - true
   * 2 gnu.trove.set.hash.TFloatHashSet.iterator()Lgnu/trove/iterator/TFloatIterator;: root-Branch
   * 3 gnu.trove.set.hash.TFloatHashSet.retainAll(Lgnu/trove/TFloatCollection;)Z: I4 Branch 26 IF_ACMPNE L314 - true
   * 4 gnu.trove.set.hash.TFloatHashSet.retainAll(Lgnu/trove/TFloatCollection;)Z: I22 Branch 27 IFEQ L319 - true
   * 5 gnu.trove.set.hash.TFloatHashSet.retainAll(Lgnu/trove/TFloatCollection;)Z: I22 Branch 27 IFEQ L319 - false
   * 6 gnu.trove.set.hash.TFloatHashSet$TFloatHashIterator.<init>(Lgnu/trove/set/hash/TFloatHashSet;Lgnu/trove/impl/hash/TFloatHash;)V: root-Branch
   * 7 gnu.trove.set.hash.TFloatHashSet$TFloatHashIterator.next()F: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      float[] floatArray0 = new float[7];
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, (-1640.6466F));
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet((TFloatCollection) tFloatArrayList0);
      boolean boolean0 = tFloatHashSet0.retainAll((TFloatCollection) tFloatArrayList0);
      assertEquals(false, boolean0);
      assertEquals("{0.0}", tFloatHashSet0.toString());
      assertEquals(1, tFloatHashSet0.size());
  }

  //Test case number: 19
  /*
   * 5 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.retainAll([F)Z: I33 Branch 30 IF_ICMPNE L337 - false
   * 2 gnu.trove.set.hash.TFloatHashSet.retainAll([F)Z: I39 Branch 31 IFGE L337 - true
   * 3 gnu.trove.set.hash.TFloatHashSet.retainAll([F)Z: I26 Branch 29 IFLE L336 - true
   * 4 gnu.trove.set.hash.TFloatHashSet.retainAll([F)Z: I26 Branch 29 IFLE L336 - false
   * 5 gnu.trove.set.hash.TFloatHashSet.retainAll([F)Z: I33 Branch 30 IF_ICMPNE L337 - true
   */

  @Test
  public void test19()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(0, 0);
      tFloatHashSet0.add((float) 0);
      boolean boolean0 = tFloatHashSet0.retainAll(tFloatHashSet0._set);
      assertEquals(false, tFloatHashSet0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 20
  /*
   * 5 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.retainAll([F)Z: I39 Branch 31 IFGE L337 - false
   * 2 gnu.trove.set.hash.TFloatHashSet.retainAll([F)Z: I26 Branch 29 IFLE L336 - true
   * 3 gnu.trove.set.hash.TFloatHashSet.retainAll([F)Z: I26 Branch 29 IFLE L336 - false
   * 4 gnu.trove.set.hash.TFloatHashSet.retainAll([F)Z: I33 Branch 30 IF_ICMPNE L337 - true
   * 5 gnu.trove.set.hash.TFloatHashSet.retainAll([F)Z: I33 Branch 30 IF_ICMPNE L337 - false
   */

  @Test
  public void test20()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(0, 785.3631F);
      float[] floatArray0 = new float[8];
      tFloatHashSet0.add(785.3631F);
      boolean boolean0 = tFloatHashSet0.retainAll(floatArray0);
      assertEquals(0, tFloatHashSet0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 21
  /*
   * 3 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.removeAll(Ljava/util/Collection;)Z: I12 Branch 32 IFEQ L349 - false
   * 2 gnu.trove.set.hash.TFloatHashSet.removeAll(Ljava/util/Collection;)Z: I20 Branch 33 IFEQ L350 - true
   * 3 gnu.trove.set.hash.TFloatHashSet.removeAll(Ljava/util/Collection;)Z: I12 Branch 32 IFEQ L349 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(0, 785.3631F);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "");
      boolean boolean0 = tFloatHashSet0.removeAll((Collection<?>) linkedList0);
      assertEquals(false, boolean0);
  }

  //Test case number: 22
  /*
   * 2 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.removeAll(Ljava/util/Collection;)Z: I20 Branch 33 IFEQ L350 - false
   * 2 gnu.trove.set.hash.TFloatHashSet.removeAll(Ljava/util/Collection;)Z: I32 Branch 34 IFEQ L352 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(310, 310);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add((Float) 0.0F);
      boolean boolean0 = tFloatHashSet0.removeAll((Collection<?>) linkedList0);
      assertEquals(false, boolean0);
  }

  //Test case number: 23
  /*
   * 4 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.removeAll(Ljava/util/Collection;)Z: I32 Branch 34 IFEQ L352 - false
   * 2 gnu.trove.set.hash.TFloatHashSet.removeAll(Ljava/util/Collection;)Z: I12 Branch 32 IFEQ L349 - true
   * 3 gnu.trove.set.hash.TFloatHashSet.removeAll(Ljava/util/Collection;)Z: I12 Branch 32 IFEQ L349 - false
   * 4 gnu.trove.set.hash.TFloatHashSet.removeAll(Ljava/util/Collection;)Z: I20 Branch 33 IFEQ L350 - false
   */

  @Test
  public void test23()  throws Throwable  {
      float[] floatArray0 = new float[7];
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(floatArray0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add((Float) 0.0F);
      boolean boolean0 = tFloatHashSet0.removeAll((Collection<?>) linkedList0);
      assertEquals(true, boolean0);
      assertEquals(true, tFloatHashSet0.isEmpty());
  }

  //Test case number: 24
  /*
   * 10 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.removeAll(Lgnu/trove/TFloatCollection;)Z: I24 Branch 36 IFEQ L367 - false
   * 2 gnu.trove.set.hash.TFloatHashSet.rehash(I)V: I35 Branch 40 IFLE L410 - true
   * 3 gnu.trove.set.hash.TFloatHashSet.rehash(I)V: I35 Branch 40 IFLE L410 - false
   * 4 gnu.trove.set.hash.TFloatHashSet.rehash(I)V: I42 Branch 41 IF_ICMPNE L411 - true
   * 5 gnu.trove.set.hash.TFloatHashSet.rehash(I)V: I42 Branch 41 IF_ICMPNE L411 - false
   * 6 gnu.trove.set.hash.TFloatHashSet.removeAll(Lgnu/trove/TFloatCollection;)Z: I13 Branch 35 IFEQ L365 - true
   * 7 gnu.trove.set.hash.TFloatHashSet.removeAll(Lgnu/trove/TFloatCollection;)Z: I13 Branch 35 IFEQ L365 - false
   * 8 gnu.trove.set.hash.TFloatHashSet.removeAll(Lgnu/trove/TFloatCollection;)Z: I24 Branch 36 IFEQ L367 - true
   * 9 gnu.trove.set.hash.TFloatHashSet.remove(F)Z: I9 Branch 10 IFLT L209 - true
   * 10 gnu.trove.set.hash.TFloatHashSet.remove(F)Z: I9 Branch 10 IFLT L209 - false
   */

  @Test
  public void test24()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(0, 0);
      tFloatHashSet0.add((float) 0);
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(tFloatHashSet0._set, (float) 0);
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
      assertEquals(1, tFloatHashSet0.size());
      
      boolean boolean0 = tFloatHashSet0.removeAll((TFloatCollection) tSynchronizedFloatList0);
      assertEquals(true, boolean0);
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.clear()V: I22 Branch 39 IFLE L393 - true
   * 2 gnu.trove.set.hash.TFloatHashSet.clear()V: I22 Branch 39 IFLE L393 - false
   * 3 gnu.trove.set.hash.TFloatHashSet.<init>(IF)V: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(916, 916);
      tFloatHashSet0.clear();
      assertEquals("{}", tFloatHashSet0.toString());
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.set.hash.TFloatHashSet.equals(Ljava/lang/Object;)Z: I4 Branch 42 IFNE L421 - false
   */

  @Test
  public void test26()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(0, 0);
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet((TFloatCollection) tFloatArrayList0);
      boolean boolean0 = tFloatHashSet0.equals((Object) "\uD55C\uAD6D\uC5B4");
      assertEquals(false, boolean0);
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.equals(Ljava/lang/Object;)Z: I20 Branch 43 IF_ICMPEQ L425 - false
   * 2 gnu.trove.set.hash.TFloatHashSet.<init>(IFF)V: I12 Branch 1 IFEQ L101 - false
   * 3 gnu.trove.set.hash.TFloatHashSet.equals(Ljava/lang/Object;)Z: I4 Branch 42 IFNE L421 - true
   */

  @Test
  public void test27()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(48, 48, 48);
      TFloatHashSet tFloatHashSet1 = new TFloatHashSet(tFloatHashSet0._set);
      boolean boolean0 = tFloatHashSet0.equals((Object) tFloatHashSet1);
      assertEquals("{48.0}", tFloatHashSet1.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 28
  /*
   * 7 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.equals(Ljava/lang/Object;)Z: I42 Branch 45 IF_ICMPNE L429 - false
   * 2 gnu.trove.set.hash.TFloatHashSet.equals(Ljava/lang/Object;)Z: I51 Branch 46 IFNE L430 - true
   * 3 gnu.trove.set.hash.TFloatHashSet.equals(Ljava/lang/Object;)Z: I4 Branch 42 IFNE L421 - true
   * 4 gnu.trove.set.hash.TFloatHashSet.equals(Ljava/lang/Object;)Z: I20 Branch 43 IF_ICMPEQ L425 - true
   * 5 gnu.trove.set.hash.TFloatHashSet.equals(Ljava/lang/Object;)Z: I34 Branch 44 IFLE L428 - true
   * 6 gnu.trove.set.hash.TFloatHashSet.equals(Ljava/lang/Object;)Z: I34 Branch 44 IFLE L428 - false
   * 7 gnu.trove.set.hash.TFloatHashSet.equals(Ljava/lang/Object;)Z: I42 Branch 45 IF_ICMPNE L429 - true
   */

  @Test
  public void test28()  throws Throwable  {
      float[] floatArray0 = new float[7];
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(floatArray0);
      boolean boolean0 = tFloatHashSet0.equals((Object) tFloatHashSet0);
      assertEquals(1, tFloatHashSet0.size());
      assertEquals(true, boolean0);
      assertEquals("{0.0}", tFloatHashSet0.toString());
  }

  //Test case number: 29
  /*
   * 4 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.hashCode()I: I13 Branch 47 IFLE L442 - true
   * 2 gnu.trove.set.hash.TFloatHashSet.hashCode()I: I13 Branch 47 IFLE L442 - false
   * 3 gnu.trove.set.hash.TFloatHashSet.hashCode()I: I21 Branch 48 IF_ICMPNE L443 - true
   * 4 gnu.trove.set.hash.TFloatHashSet.hashCode()I: I21 Branch 48 IF_ICMPNE L443 - false
   */

  @Test
  public void test29()  throws Throwable  {
      float[] floatArray0 = new float[7];
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, (-1640.6466F));
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet((TFloatCollection) tFloatArrayList0);
      int int0 = tFloatHashSet0.hashCode();
      assertEquals(1, tFloatHashSet0.size());
      assertEquals(0, int0);
  }

  //Test case number: 30
  /*
   * 11 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.toString()Ljava/lang/String;: I54 Branch 51 IF_ICMPGE L458 - false
   * 2 gnu.trove.set.hash.TFloatHashSet.<init>([F)V: root-Branch
   * 3 gnu.trove.set.hash.TFloatHashSet.toString()Ljava/lang/String;: I30 Branch 49 IFLE L455 - true
   * 4 gnu.trove.set.hash.TFloatHashSet.toString()Ljava/lang/String;: I30 Branch 49 IFLE L455 - false
   * 5 gnu.trove.set.hash.TFloatHashSet.toString()Ljava/lang/String;: I38 Branch 50 IF_ICMPNE L456 - true
   * 6 gnu.trove.set.hash.TFloatHashSet.toString()Ljava/lang/String;: I38 Branch 50 IF_ICMPNE L456 - false
   * 7 gnu.trove.set.hash.TFloatHashSet.toString()Ljava/lang/String;: I54 Branch 51 IF_ICMPGE L458 - true
   * 8 gnu.trove.set.hash.TFloatHashSet.addAll([F)Z: I12 Branch 22 IFLE L288 - true
   * 9 gnu.trove.set.hash.TFloatHashSet.addAll([F)Z: I12 Branch 22 IFLE L288 - false
   * 10 gnu.trove.set.hash.TFloatHashSet.addAll([F)Z: I20 Branch 23 IFEQ L289 - true
   * 11 gnu.trove.set.hash.TFloatHashSet.addAll([F)Z: I20 Branch 23 IFEQ L289 - false
   */

  @Test
  public void test30()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[2] = (float) (-2028);
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(floatArray0);
      String string0 = tFloatHashSet0.toString();
      assertNotNull(string0);
      assertEquals("{-2028.0,0.0}", string0);
  }

  //Test case number: 31
  /*
   * 12 covered goals:
   * 1 gnu.trove.set.hash.TFloatHashSet.writeExternal(Ljava/io/ObjectOutput;)V: I37 Branch 52 IFLE L506 - true
   * 2 gnu.trove.set.hash.TFloatHashSet.writeExternal(Ljava/io/ObjectOutput;)V: I37 Branch 52 IFLE L506 - false
   * 3 gnu.trove.set.hash.TFloatHashSet.writeExternal(Ljava/io/ObjectOutput;)V: I45 Branch 53 IF_ICMPNE L507 - true
   * 4 gnu.trove.set.hash.TFloatHashSet.writeExternal(Ljava/io/ObjectOutput;)V: I45 Branch 53 IF_ICMPNE L507 - false
   * 5 gnu.trove.set.hash.TFloatHashSet.<init>(I)V: root-Branch
   * 6 gnu.trove.set.hash.TFloatHashSet.add(F)Z: I9 Branch 9 IFGE L196 - true
   * 7 gnu.trove.set.hash.TFloatHashSet.add(F)Z: I9 Branch 9 IFGE L196 - false
   * 8 gnu.trove.set.hash.TFloatHashSet.addAll(Lgnu/trove/TFloatCollection;)Z: I13 Branch 20 IFEQ L275 - true
   * 9 gnu.trove.set.hash.TFloatHashSet.addAll(Lgnu/trove/TFloatCollection;)Z: I13 Branch 20 IFEQ L275 - false
   * 10 gnu.trove.set.hash.TFloatHashSet.addAll(Lgnu/trove/TFloatCollection;)Z: I24 Branch 21 IFEQ L277 - true
   * 11 gnu.trove.set.hash.TFloatHashSet.addAll(Lgnu/trove/TFloatCollection;)Z: I24 Branch 21 IFEQ L277 - false
   * 12 gnu.trove.set.hash.TFloatHashSet.<init>(Lgnu/trove/TFloatCollection;)V: I12 Branch 2 IFEQ L127 - true
   */

  @Test
  public void test31()  throws Throwable  {
      float[] floatArray0 = new float[7];
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, (-1640.6466F));
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet((TFloatCollection) tFloatArrayList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1952);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tFloatHashSet0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(1, tFloatHashSet0.size());
      assertEquals("{0.0}", tFloatHashSet0.toString());
  }
}
