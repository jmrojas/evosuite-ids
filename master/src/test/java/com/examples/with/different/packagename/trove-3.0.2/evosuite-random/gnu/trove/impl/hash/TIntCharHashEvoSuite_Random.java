/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TIntCharMap;
import gnu.trove.map.hash.TIntCharHashMap;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.StreamCorruptedException;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntCharHashEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 1542;
      intArray0[0] = int0;
      int int1 = 1;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      char[] charArray0 = new char[4];
      char char0 = '.';
      charArray0[0] = char0;
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = char0;
      charArray0[3] = char0;
      char char1 = ':';
      charArray0[1] = char1;
      char char2 = 'W';
      charArray0[2] = char2;
      char char3 = '*';
      charArray0[3] = char3;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      int[] intArray1 = tIntCharHashMap0.keys(intArray0);
      assertNotNull(intArray1);
      
      tIntCharHashMap0.containsValue(charArray0[2]);
      boolean boolean0 = tIntCharHashMap0.increment((int) charArray0[1]);
      assertEquals(11, tIntCharHashMap0.capacity());
      assertEquals(0, tIntCharHashMap0.getNoEntryKey());
      assertEquals('\u0000', tIntCharHashMap0.getNoEntryValue());
      assertEquals("{1542=., 1=:, 0=W}", tIntCharHashMap0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 2729;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      char[] charArray0 = new char[4];
      char char0 = '%';
      charArray0[0] = char0;
      char char1 = 'C';
      charArray0[1] = char1;
      char char2 = 'X';
      charArray0[2] = char2;
      char char3 = '3';
      charArray0[3] = char3;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap((TIntCharMap) tIntCharHashMap0);
      char char4 = tIntCharHashMap1.getNoEntryValue();
      assertEquals(0, tIntCharHashMap1.getNoEntryKey());
      assertEquals("{2729=%, 0=X}", tIntCharHashMap0.toString());
      assertEquals('\u0000', char4);
      assertTrue(tIntCharHashMap1.equals(tIntCharHashMap0));
      assertEquals(11, tIntCharHashMap0.capacity());
      
      int int3 = 1;
      TIntCharHashMap tIntCharHashMap2 = new TIntCharHashMap(int3, int3);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tIntCharHashMap2._states);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) dataInputStream0, int3);
      int int4 = tIntCharHashMap2.getNoEntryKey();
      assertEquals(0, int4);
      
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream((InputStream) bufferedInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) bufferedInputStream1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-1414);
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      assertEquals(23, tIntCharHashMap0.capacity());
      assertEquals(0, tIntCharHashMap0.getNoEntryKey());
      assertEquals('\u0000', tIntCharHashMap0.getNoEntryValue());
      
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap(int0, int0);
      int int1 = 0;
      TIntCharHashMap tIntCharHashMap2 = new TIntCharHashMap(int1, int1);
      tIntCharHashMap2.ensureCapacity(int1);
      int int2 = 923;
      float float0 = (-407.3698F);
      TIntCharHashMap tIntCharHashMap3 = new TIntCharHashMap(int2, float0);
      boolean boolean0 = true;
      tIntCharHashMap3.reenableAutoCompaction(boolean0);
      tIntCharHashMap3.getAutoCompactionFactor();
      assertEquals('\u0000', tIntCharHashMap3.getNoEntryValue());
      assertEquals(0, tIntCharHashMap3.getNoEntryKey());
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-1518);
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0, int0);
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap((TIntCharMap) tIntCharHashMap0);
      tIntCharHashMap1.trimToSize();
      tIntCharHashMap1.keys(tIntCharHashMap0._set);
      assertEquals(0, tIntCharHashMap1.getNoEntryKey());
      assertEquals('\u0000', tIntCharHashMap1.getNoEntryValue());
      
      char char0 = 'x';
      TIntCharHashMap tIntCharHashMap2 = new TIntCharHashMap(int0, (float) int0, int0, char0);
      tIntCharHashMap2.isEmpty();
      assertEquals(-1518, tIntCharHashMap2.getNoEntryKey());
      assertEquals('x', tIntCharHashMap2.getNoEntryValue());
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-1174);
      int[] intArray0 = new int[7];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      char[] charArray0 = new char[8];
      char char0 = 'i';
      charArray0[0] = char0;
      char char1 = 'N';
      charArray0[1] = char1;
      char char2 = 'v';
      charArray0[2] = char2;
      char char3 = 'K';
      charArray0[3] = char3;
      char char4 = '?';
      charArray0[4] = char4;
      char char5 = 'P';
      charArray0[5] = char5;
      char char6 = 'Q';
      charArray0[6] = char6;
      char char7 = ';';
      charArray0[7] = char7;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap((TIntCharMap) tIntCharHashMap0);
      float float0 = 1.0F;
      tIntCharHashMap1.setAutoCompactionFactor(float0);
      assertEquals(1, tIntCharHashMap0.size());
      assertEquals("{-1174=Q}", tIntCharHashMap1.toString());
      
      TIntCharHashMap tIntCharHashMap2 = new TIntCharHashMap(int0);
      int[] intArray1 = new int[5];
      int int1 = 0;
      tIntCharHashMap2.ensureCapacity(int1);
      intArray1[0] = int0;
      intArray1[1] = int0;
      int int2 = 1;
      intArray1[2] = int2;
      intArray1[3] = int0;
      intArray1[4] = int0;
      boolean boolean0 = true;
      tIntCharHashMap2.reenableAutoCompaction(boolean0);
      tIntCharHashMap2.capacity();
      tIntCharHashMap2._set = intArray1;
      tIntCharHashMap2.ensureCapacity(int0);
      TIntCharHashMap tIntCharHashMap3 = new TIntCharHashMap((TIntCharMap) tIntCharHashMap2);
      tIntCharHashMap3.tempDisableAutoCompaction();
      assertEquals(0, tIntCharHashMap3.getNoEntryKey());
      assertEquals(23, tIntCharHashMap3.capacity());
      assertFalse(tIntCharHashMap2.equals(tIntCharHashMap1));
  }

  @Test
  public void test5()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      tIntCharHashMap0.isEmpty();
      char char0 = tIntCharHashMap0.getNoEntryValue();
      assertEquals(0, tIntCharHashMap0.getNoEntryKey());
      
      int int0 = 302;
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap(int0);
      TIntCharHashMap tIntCharHashMap2 = new TIntCharHashMap((TIntCharMap) tIntCharHashMap1);
      char char1 = tIntCharHashMap2.remove(int0);
      assertEquals(0, tIntCharHashMap1.getNoEntryKey());
      assertTrue(char1 == char0);
      assertEquals(631, tIntCharHashMap1.capacity());
      assertEquals(0, tIntCharHashMap2.size());
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 912;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0);
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap(int0, int0);
      tIntCharHashMap1.valueCollection();
      tIntCharHashMap0.isEmpty();
      TIntCharHashMap tIntCharHashMap2 = new TIntCharHashMap((TIntCharMap) tIntCharHashMap1);
      tIntCharHashMap1.compact();
      int int1 = (-1);
      tIntCharHashMap2.isEmpty();
      String string0 = "";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 1384;
      float float0 = (-139.46854F);
      char char0 = '`';
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0);
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap((TIntCharMap) tIntCharHashMap0);
      int[] intArray0 = tIntCharHashMap1.keys();
      assertNotNull(intArray0);
      
      TIntCharHashMap tIntCharHashMap2 = new TIntCharHashMap(int0, float0, int0, char0);
      int int1 = 2007;
      TIntCharHashMap tIntCharHashMap3 = new TIntCharHashMap(int1);
      assertEquals(4177, tIntCharHashMap3.capacity());
      
      tIntCharHashMap3.trimToSize();
      assertEquals('\u0000', tIntCharHashMap3.getNoEntryValue());
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-449);
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0);
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap((TIntCharMap) tIntCharHashMap0);
      boolean boolean0 = tIntCharHashMap1.increment(int0);
      assertEquals('\u0000', tIntCharHashMap1.getNoEntryValue());
      assertEquals(0, tIntCharHashMap1.getNoEntryKey());
      assertEquals(false, boolean0);
      
      TIntCharHashMap tIntCharHashMap2 = new TIntCharHashMap();
      float float0 = 253.34076F;
      // Undeclared exception!
      try {
        tIntCharHashMap2.setAutoCompactionFactor((float) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -449.0
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 1977;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = (-1068);
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      char[] charArray0 = new char[9];
      char char0 = 'd';
      charArray0[0] = char0;
      char char1 = '9';
      charArray0[1] = char1;
      char char2 = 'Z';
      charArray0[2] = char2;
      char char3 = 'i';
      charArray0[3] = char3;
      char char4 = 'N';
      charArray0[4] = char4;
      char char5 = 'z';
      charArray0[5] = char5;
      char char6 = 'N';
      charArray0[6] = char6;
      char char7 = 's';
      charArray0[7] = char7;
      char char8 = '\\';
      charArray0[8] = char8;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      boolean boolean0 = tIntCharHashMap0.contains((int) charArray0[4]);
      assertEquals(false, boolean0);
      assertEquals(3, tIntCharHashMap0.size());
      assertEquals("{1977=9, -1068=i, 0=N}", tIntCharHashMap0.toString());
      assertEquals('\u0000', tIntCharHashMap0.getNoEntryValue());
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 492;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0);
      assertEquals(1039, tIntCharHashMap0.capacity());
      
      int int1 = (-1908);
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap(int1);
      char char0 = tIntCharHashMap1.getNoEntryValue();
      assertEquals('\u0000', char0);
      assertEquals(0, tIntCharHashMap1.getNoEntryKey());
  }

  @Test
  public void test11()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      char char0 = '5';
      float float0 = 1.0F;
      tIntCharHashMap0.setAutoCompactionFactor(float0);
      tIntCharHashMap0.containsValue(char0);
      tIntCharHashMap0.size();
      int int0 = 135;
      char char1 = tIntCharHashMap0.remove(int0);
      assertEquals(23, tIntCharHashMap0.capacity());
      assertEquals(0, tIntCharHashMap0.getNoEntryKey());
      assertEquals('\u0000', char1);
      assertEquals(true, tIntCharHashMap0.isEmpty());
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-77);
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0, int0);
      char[] charArray0 = new char[5];
      char char0 = 'o';
      tIntCharHashMap0.containsValue(char0);
      char char1 = '[';
      charArray0[0] = char1;
      char char2 = '(';
      charArray0[1] = char2;
      tIntCharHashMap0.capacity();
      char char3 = 'N';
      charArray0[2] = char3;
      int int1 = 0;
      char char4 = tIntCharHashMap0.getNoEntryValue();
      assertEquals('\u0000', char4);
      
      boolean boolean0 = tIntCharHashMap0.contains(int1);
      assertEquals(false, boolean0);
      
      char char5 = 'l';
      int int2 = Integer.MAX_VALUE;
      tIntCharHashMap0.toString();
      int int3 = 232;
      tIntCharHashMap0.adjustValue(int3, char5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tIntCharHashMap0._states);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) byteArrayInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) bufferedInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap();
      char[] charArray0 = new char[7];
      char char0 = 'x';
      charArray0[0] = char0;
      char char1 = '&';
      charArray0[1] = char1;
      char char2 = 'v';
      charArray0[2] = char2;
      char char3 = 'N';
      charArray0[3] = char3;
      char char4 = 'T';
      charArray0[4] = char4;
      char char5 = 'M';
      charArray0[5] = char5;
      char char6 = 'q';
      charArray0[6] = char6;
      char[] charArray1 = tIntCharHashMap0.values(charArray0);
      assertNotNull(charArray1);
      
      int int0 = 631;
      boolean boolean0 = tIntCharHashMap0.increment(int0);
      assertEquals(false, boolean0);
      
      boolean boolean1 = true;
      char char7 = '|';
      tIntCharHashMap0.containsValue(char7);
      tIntCharHashMap0.reenableAutoCompaction(boolean1);
      assertEquals(0, tIntCharHashMap0.getNoEntryKey());
      assertEquals(23, tIntCharHashMap0.capacity());
      assertEquals('\u0000', tIntCharHashMap0.getNoEntryValue());
  }

  @Test
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 0;
      intArray0[0] = int0;
      char[] charArray0 = new char[7];
      char char0 = '9';
      charArray0[0] = char0;
      char char1 = '6';
      charArray0[1] = char1;
      char char2 = 'G';
      charArray0[2] = char2;
      char char3 = '}';
      charArray0[3] = char3;
      char char4 = 'k';
      charArray0[4] = char4;
      char char5 = 'j';
      charArray0[5] = char5;
      char char6 = 'h';
      charArray0[6] = char6;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      String string0 = "";
      URI uRI0 = URI.create(string0);
      String string1 = uRI0.getAuthority();
      tIntCharHashMap0.equals((Object) string1);
      int int1 = 1519;
      intArray0[1] = int1;
      int int2 = (-918);
      intArray0[2] = int2;
      int int3 = (-121);
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = 1;
      intArray0[5] = int5;
      int int6 = (-1360);
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap(int6, int1);
      boolean boolean0 = false;
      tIntCharHashMap1.reenableAutoCompaction(boolean0);
      tIntCharHashMap1.getAutoCompactionFactor();
      int int7 = 1776;
      intArray0[6] = int7;
      char[] charArray1 = new char[3];
      char char7 = 'F';
      charArray1[0] = char7;
      char char8 = '?';
      charArray1[1] = char8;
      char char9 = 'z';
      charArray1[2] = char9;
      TIntCharHashMap tIntCharHashMap2 = new TIntCharHashMap(intArray0, charArray1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tIntCharHashMap2._states);
      assertEquals(1, byteArrayInputStream0.read());
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 01000000
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 393;
      int int1 = 0;
      float float0 = 1756.6344F;
      int int2 = (-1);
      char char0 = '\\';
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int1, float0, int2, char0);
      boolean boolean0 = tIntCharHashMap0.contains(int1);
      assertEquals(false, boolean0);
      assertEquals('\\', tIntCharHashMap0.getNoEntryValue());
      assertEquals(-1, tIntCharHashMap0.getNoEntryKey());
      
      float float1 = 1301.1451F;
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap(int0, float1);
      char char1 = tIntCharHashMap1.getNoEntryValue();
      assertEquals('\u0000', char1);
      
      int int3 = (-1571);
      int int4 = 321;
      tIntCharHashMap1.trimToSize();
      assertEquals(0, tIntCharHashMap1.getNoEntryKey());
      
      TIntCharHashMap tIntCharHashMap2 = new TIntCharHashMap(int4);
      float float2 = 0.0F;
      tIntCharHashMap2.setAutoCompactionFactor(float2);
      int int5 = 1408;
      tIntCharHashMap2.contains(int5);
      TIntCharHashMap tIntCharHashMap3 = new TIntCharHashMap(int3);
      TIntCharHashMap tIntCharHashMap4 = new TIntCharHashMap((TIntCharMap) tIntCharHashMap3);
      boolean boolean1 = false;
      tIntCharHashMap4.reenableAutoCompaction(boolean1);
      assertEquals('\u0000', tIntCharHashMap3.getNoEntryValue());
      assertEquals(0, tIntCharHashMap3.getNoEntryKey());
      assertEquals(23, tIntCharHashMap4.capacity());
      assertEquals('\u0000', tIntCharHashMap4.getNoEntryValue());
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 15;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0, int0);
      char char0 = 'V';
      tIntCharHashMap0.put(int0, char0);
      int int1 = tIntCharHashMap0.hashCode();
      int int2 = (-806);
      float float0 = (-423.63046F);
      int int3 = 367;
      tIntCharHashMap0.ensureCapacity(int1);
      assertEquals(7, tIntCharHashMap0.capacity());
      
      char char1 = '.';
      TIntCharHashMap tIntCharHashMap1 = new TIntCharHashMap(int2, float0, int3, char1);
      TIntCharHashMap tIntCharHashMap2 = new TIntCharHashMap((TIntCharMap) tIntCharHashMap1);
      assertFalse(tIntCharHashMap2.equals(tIntCharHashMap0));
  }

  @Test
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 1181;
      intArray0[0] = int0;
      int int1 = 924;
      intArray0[1] = int1;
      int int2 = (-1955);
      intArray0[2] = int2;
      int int3 = 1647;
      intArray0[3] = int3;
      int int4 = 581;
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      int int6 = 216;
      intArray0[6] = int6;
      int int7 = 0;
      intArray0[7] = int7;
      int int8 = (-544);
      intArray0[8] = int8;
      char[] charArray0 = new char[10];
      char char0 = '`';
      charArray0[0] = char0;
      char char1 = '#';
      charArray0[1] = char1;
      char char2 = '@';
      charArray0[2] = char2;
      char char3 = ']';
      charArray0[3] = char3;
      char char4 = 'Y';
      charArray0[4] = char4;
      char char5 = '>';
      charArray0[5] = char5;
      char char6 = '3';
      charArray0[6] = char6;
      char char7 = 'U';
      charArray0[7] = char7;
      char char8 = '\'';
      charArray0[8] = char8;
      char char9 = 'e';
      charArray0[9] = char9;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(intArray0, charArray0);
      tIntCharHashMap0.keys();
      assertEquals('\u0000', tIntCharHashMap0.getNoEntryValue());
      assertEquals("{581=Y, -544=', 1647=], 216=3, 1181=`, -1955=@, 924=#, 0=U}", tIntCharHashMap0.toString());
      assertEquals(8, tIntCharHashMap0.size());
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 1925;
      TIntCharHashMap tIntCharHashMap0 = new TIntCharHashMap(int0);
      OutputStream outputStream0 = null;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(outputStream0);
      boolean boolean0 = true;
      String string0 = "Equal objects must have equal hashcodes. During rehashing, Trove discovered that the following two objects claim to be equal (as in java.lang.Object.equals()) but their hashCodes (or those calculated by your TObjectHashingStrategy) are not equal.This violates the general contract of java.lang.Object.hashCode().  See bullet point two in that method's documentation. object #1 =";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream((OutputStream) filterOutputStream0, boolean0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // Equal objects must have equal hashcodes. During rehashing, Trove discovered that the following two objects claim to be equal (as in java.lang.Object.equals()) but their hashCodes (or those calculated by your TObjectHashingStrategy) are not equal.This violates the general contract of java.lang.Object.hashCode().  See bullet point two in that method's documentation. object #1 =
         //
      }
  }
}
