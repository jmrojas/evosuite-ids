/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.hash.TShortIntHashMap;
import gnu.trove.procedure.TShortProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortIntHashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TShortIntHash.getNoEntryKey()S: root-Branch
   * 2 gnu.trove.impl.hash.TShortIntHash.setUp(I)I: root-Branch
   * 3 gnu.trove.impl.hash.TShortIntHash.<init>()V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap();
      short short0 = tShortIntHashMap0.getNoEntryKey();
      assertEquals(23, tShortIntHashMap0.capacity());
      assertEquals(0, tShortIntHashMap0.getNoEntryValue());
      assertEquals((short)0, short0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TShortIntHash.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   */

//   @Test
//   public void test1()  throws Throwable  {
//       TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap();
//       ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
//       ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
//       tShortIntHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
//       assertEquals(23, tShortIntHashMap0.capacity());
//       assertEquals(0, tShortIntHashMap0.getNoEntryValue());
//       assertEquals(0, tShortIntHashMap0.getNoEntryKey());
//   }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TShortIntHash.<init>(IFSI)V: root-Branch
   */

//   @Test
//   public void test2()  throws Throwable  {
//       TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap((int) (short)0, (float) 0, (short)0, (int) (short)0);
//       assertEquals(0, tShortIntHashMap0.getNoEntryValue());
//       assertEquals(0, tShortIntHashMap0.getNoEntryKey());
//   }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TShortIntHash.getNoEntryValue()I: root-Branch
   * 2 gnu.trove.impl.hash.TShortIntHash.<init>(IF)V: root-Branch
   */

//   @Test
//   public void test3()  throws Throwable  {
//       TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap((-32768), (-32768));
//       int int0 = tShortIntHashMap0.getNoEntryValue();
//       assertEquals(0, int0);
//       assertEquals(0, tShortIntHashMap0.getNoEntryKey());
//   }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TShortIntHash.contains(S)Z: I5 Branch 1 IFLT L178 - true
   * 2 gnu.trove.impl.hash.TShortIntHash.index(S)I: I37 Branch 5 IFNE L228 - false
   */

//   @Test
//   public void test4()  throws Throwable  {
//       TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap();
//       boolean boolean0 = tShortIntHashMap0.contains((short) (-32768));
//       assertEquals(0, tShortIntHashMap0.getNoEntryKey());
//       assertEquals(23, tShortIntHashMap0.capacity());
//       assertEquals(false, boolean0);
//       assertEquals(0, tShortIntHashMap0.getNoEntryValue());
//   }

  //Test case number: 5
  /*
   * 7 covered goals:
   * 1 gnu.trove.impl.hash.TShortIntHash.contains(S)Z: I5 Branch 1 IFLT L178 - false
   * 2 gnu.trove.impl.hash.TShortIntHash.<init>(I)V: root-Branch
   * 3 gnu.trove.impl.hash.TShortIntHash.insertKeyAt(IS)V: root-Branch
   * 4 gnu.trove.impl.hash.TShortIntHash.index(S)I: I37 Branch 5 IFNE L228 - true
   * 5 gnu.trove.impl.hash.TShortIntHash.index(S)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 6 gnu.trove.impl.hash.TShortIntHash.index(S)I: I51 Branch 7 IF_ICMPNE L231 - false
   * 7 gnu.trove.impl.hash.TShortIntHash.insertKey(S)I: I30 Branch 13 IFNE L279 - false
   */

//   @Test
//   public void test5()  throws Throwable  {
//       short[] shortArray0 = new short[1];
//       int[] intArray0 = new int[9];
//       TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
//       boolean boolean0 = tShortIntHashMap0.contains((short)0);
//       assertEquals(0, tShortIntHashMap0.getNoEntryValue());
//       assertEquals(23, tShortIntHashMap0.capacity());
//       assertEquals(true, boolean0);
//       assertEquals(0, tShortIntHashMap0.getNoEntryKey());
//       assertEquals(1, tShortIntHashMap0.size());
//   }

  //Test case number: 6
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TShortIntHash.forEach(Lgnu/trove/procedure/TShortProcedure;)Z: I18 Branch 2 IFLE L192 - true
   * 2 gnu.trove.impl.hash.TShortIntHash.forEach(Lgnu/trove/procedure/TShortProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TShortIntHash.forEach(Lgnu/trove/procedure/TShortProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   * 4 gnu.trove.impl.hash.TShortIntHash.<init>()V: root-Branch
   */

//   @Test
//   public void test6()  throws Throwable  {
//       TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap();
//       boolean boolean0 = tShortIntHashMap0.forEach((TShortProcedure) null);
//       assertEquals(0, tShortIntHashMap0.getNoEntryValue());
//       assertEquals(23, tShortIntHashMap0.capacity());
//       assertEquals(true, boolean0);
//       assertEquals(0, tShortIntHashMap0.getNoEntryKey());
//   }

  //Test case number: 7
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.TShortIntHash.forEach(Lgnu/trove/procedure/TShortProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - false
   * 2 gnu.trove.impl.hash.TShortIntHash.insertKey(S)I: I30 Branch 13 IFNE L279 - true
   * 3 gnu.trove.impl.hash.TShortIntHash.insertKey(S)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 4 gnu.trove.impl.hash.TShortIntHash.insertKey(S)I: I56 Branch 15 IF_ICMPNE L286 - false
   * 5 gnu.trove.impl.hash.TShortIntHash.forEach(Lgnu/trove/procedure/TShortProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 6 gnu.trove.impl.hash.TShortIntHash.forEach(Lgnu/trove/procedure/TShortProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

  @Test
  public void test7()  throws Throwable  {
      short[] shortArray0 = new short[9];
      int[] intArray0 = new int[4];
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      // Undeclared exception!
      try {
        tShortIntHashMap0.forEachKey((TShortProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 8
  /*
   * 7 covered goals:
   * 1 gnu.trove.impl.hash.TShortIntHash.index(S)I: I51 Branch 7 IF_ICMPNE L231 - true
   * 2 gnu.trove.impl.hash.TShortIntHash.indexRehashed(SIIB)I: I29 Branch 8 IFGE L245 - true
   * 3 gnu.trove.impl.hash.TShortIntHash.indexRehashed(SIIB)I: I46 Branch 9 IFNE L250 - true
   * 4 gnu.trove.impl.hash.TShortIntHash.indexRehashed(SIIB)I: I58 Branch 10 IF_ICMPNE L254 - true
   * 5 gnu.trove.impl.hash.TShortIntHash.indexRehashed(SIIB)I: I70 Branch 12 IF_ICMPNE L256 - true
   * 6 gnu.trove.impl.hash.TShortIntHash.indexRehashed(SIIB)I: I46 Branch 9 IFNE L250 - false
   * 7 gnu.trove.impl.hash.TShortIntHash.indexRehashed(SIIB)I: I29 Branch 8 IFGE L245 - false
   */

  @Test
  public void test8()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)575;
      int[] intArray0 = new int[3];
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      boolean boolean0 = tShortIntHashMap0.contains((short) (-32768));
      assertEquals("{575=0, 0=0}", tShortIntHashMap0.toString());
      assertEquals(false, boolean0);
      assertEquals(2, tShortIntHashMap0.size());
  }

  //Test case number: 9
  /*
   * 11 covered goals:
   * 1 gnu.trove.impl.hash.TShortIntHash.indexRehashed(SIIB)I: I58 Branch 10 IF_ICMPNE L254 - false
   * 2 gnu.trove.impl.hash.TShortIntHash.indexRehashed(SIIB)I: I61 Branch 11 IF_ICMPEQ L254 - false
   * 3 gnu.trove.impl.hash.TShortIntHash.insertKey(S)I: I56 Branch 15 IF_ICMPNE L286 - true
   * 4 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 5 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I45 Branch 18 IFGE L310 - false
   * 6 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I62 Branch 19 IFNE L316 - true
   * 7 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I62 Branch 19 IFNE L316 - false
   * 8 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 9 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 10 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I103 Branch 22 IF_ICMPNE L327 - false
   * 11 gnu.trove.impl.hash.TShortIntHash.index(S)I: I51 Branch 7 IF_ICMPNE L231 - true
   */

  @Test
  public void test9()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (-1524);
      int[] intArray0 = new int[9];
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      tShortIntHashMap0.get((short)0);
      assertEquals("{0=0, -1524=0}", tShortIntHashMap0.toString());
      assertEquals(2, tShortIntHashMap0.size());
  }

  //Test case number: 10
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.hash.TShortIntHash.indexRehashed(SIIB)I: I61 Branch 11 IF_ICMPEQ L254 - true
   * 2 gnu.trove.impl.hash.TShortIntHash.indexRehashed(SIIB)I: I70 Branch 12 IF_ICMPNE L256 - false
   * 3 gnu.trove.impl.hash.TShortIntHash.indexRehashed(SIIB)I: I29 Branch 8 IFGE L245 - false
   * 4 gnu.trove.impl.hash.TShortIntHash.indexRehashed(SIIB)I: I46 Branch 9 IFNE L250 - true
   * 5 gnu.trove.impl.hash.TShortIntHash.indexRehashed(SIIB)I: I58 Branch 10 IF_ICMPNE L254 - false
   * 6 gnu.trove.impl.hash.TShortIntHash.contains(S)Z: I5 Branch 1 IFLT L178 - true
   * 7 gnu.trove.impl.hash.TShortIntHash.index(S)I: I46 Branch 6 IF_ICMPNE L231 - true
   * 8 gnu.trove.impl.hash.TShortIntHash.removeAt(I)V: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      short[] shortArray0 = new short[1];
      int[] intArray0 = new int[9];
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      tShortIntHashMap0._set = shortArray0;
      tShortIntHashMap0.remove((short)0);
      boolean boolean0 = tShortIntHashMap0.contains((short)0);
      assertEquals(true, tShortIntHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 11
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TShortIntHash.insertKey(S)I: I50 Branch 14 IF_ICMPNE L286 - true
   * 2 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 3 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 4 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I67 Branch 20 IF_ICMPEQ L317 - false
   */

  @Test
  public void test11()  throws Throwable  {
      short[] shortArray0 = new short[1];
      int[] intArray0 = new int[9];
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      tShortIntHashMap0.remove((short)0);
      assertEquals(true, tShortIntHashMap0.isEmpty());
      
      tShortIntHashMap0.put((short)0, (short)0);
      assertEquals(false, tShortIntHashMap0.isEmpty());
  }

  //Test case number: 12
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I45 Branch 18 IFGE L310 - true
   * 2 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I103 Branch 22 IF_ICMPNE L327 - true
   * 3 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I115 Branch 23 IF_ICMPNE L332 - true
   * 4 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I62 Branch 19 IFNE L316 - false
   * 5 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 6 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I103 Branch 22 IF_ICMPNE L327 - false
   */

  @Test
  public void test12()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1455);
      shortArray0[1] = (short) (-720);
      int[] intArray0 = new int[10];
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      assertEquals(3, tShortIntHashMap0.size());
      assertEquals("{-720=0, 0=0, -1455=0}", tShortIntHashMap0.toString());
      assertEquals(0, tShortIntHashMap0.getNoEntryValue());
  }

  //Test case number: 13
  /*
   * 10 covered goals:
   * 1 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 2 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I115 Branch 23 IF_ICMPNE L332 - false
   * 3 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I120 Branch 24 IF_ICMPEQ L336 - false
   * 4 gnu.trove.impl.hash.TShortIntHash.removeAt(I)V: root-Branch
   * 5 gnu.trove.impl.hash.TShortIntHash.index(S)I: I37 Branch 5 IFNE L228 - true
   * 6 gnu.trove.impl.hash.TShortIntHash.index(S)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 7 gnu.trove.impl.hash.TShortIntHash.index(S)I: I51 Branch 7 IF_ICMPNE L231 - false
   * 8 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 9 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 10 gnu.trove.impl.hash.TShortIntHash.insertKey(S)I: I50 Branch 14 IF_ICMPNE L286 - true
   */

  @Test
  public void test13()  throws Throwable  {
      short[] shortArray0 = new short[1];
      int[] intArray0 = new int[9];
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      tShortIntHashMap0._set = shortArray0;
      tShortIntHashMap0.remove((short)0);
      assertEquals(true, tShortIntHashMap0.isEmpty());
      
      int int0 = tShortIntHashMap0.put((short)0, (short)0);
      assertEquals(1, tShortIntHashMap0.size());
      assertEquals(0, int0);
  }

  //Test case number: 14
  /*
   * 14 covered goals:
   * 1 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I120 Branch 24 IF_ICMPEQ L336 - true
   * 2 gnu.trove.impl.hash.TShortIntHash.<init>(I)V: root-Branch
   * 3 gnu.trove.impl.hash.TShortIntHash.setUp(I)I: root-Branch
   * 4 gnu.trove.impl.hash.TShortIntHash.insertKeyAt(IS)V: root-Branch
   * 5 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 6 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I45 Branch 18 IFGE L310 - false
   * 7 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I62 Branch 19 IFNE L316 - true
   * 8 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 9 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I103 Branch 22 IF_ICMPNE L327 - true
   * 10 gnu.trove.impl.hash.TShortIntHash.insertKeyRehash(SIIB)I: I115 Branch 23 IF_ICMPNE L332 - false
   * 11 gnu.trove.impl.hash.TShortIntHash.insertKey(S)I: I30 Branch 13 IFNE L279 - true
   * 12 gnu.trove.impl.hash.TShortIntHash.insertKey(S)I: I30 Branch 13 IFNE L279 - false
   * 13 gnu.trove.impl.hash.TShortIntHash.insertKey(S)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 14 gnu.trove.impl.hash.TShortIntHash.insertKey(S)I: I56 Branch 15 IF_ICMPNE L286 - true
   */

  @Test
  public void test14()  throws Throwable  {
      short[] shortArray0 = new short[1];
      int[] intArray0 = new int[10];
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      tShortIntHashMap0._set = shortArray0;
      shortArray0[0] = (short)1354;
      // Undeclared exception!
      try {
        tShortIntHashMap0.put((short)0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No free or removed slots available. Key set full?!!
         //
      }
  }
}
