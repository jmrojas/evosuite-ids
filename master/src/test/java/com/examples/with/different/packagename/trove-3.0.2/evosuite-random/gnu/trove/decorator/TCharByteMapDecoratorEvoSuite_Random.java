/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TCharByteMapDecorator;
import gnu.trove.map.TCharByteMap;
import gnu.trove.map.hash.TCharByteHashMap;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharByteMapDecoratorEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TCharByteMapDecorator tCharByteMapDecorator0 = new TCharByteMapDecorator();
          String string0 = "";
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-1568);
      char char0 = '*';
      byte byte0 = (byte)23;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, (float) int0, char0, byte0);
      TCharByteMapDecorator tCharByteMapDecorator0 = new TCharByteMapDecorator((TCharByteMap) tCharByteHashMap0);
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.GERMAN;
      String string0 = locale0.getDisplayLanguage(locale1);
      boolean boolean0 = tCharByteMapDecorator0.containsKey((Object) string0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      TCharByteMapDecorator tCharByteMapDecorator0 = new TCharByteMapDecorator();
      int int0 = 1379;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0);
      String string0 = "}JXW\"<*[b76";
      try {
        Byte.valueOf(string0, int0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1379 greater than Character.MAX_RADIX
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TCharByteMapDecorator tCharByteMapDecorator0 = new TCharByteMapDecorator();
      char char0 = 'k';
      Character character0 = new Character(char0);
      byte byte0 = (byte) (-83);
      Byte byte1 = new Byte(byte0);
      // Undeclared exception!
      try {
        tCharByteMapDecorator0.put(character0, byte1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 798;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      Locale locale0 = Locale.CHINESE;
      locale0.getScript();
      String string0 = "Qyd;&&c_^";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 8: Qyd;&&c_^
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      String string0 = "";
      TCharByteMapDecorator tCharByteMapDecorator0 = new TCharByteMapDecorator();
      char char0 = 'C';
      Character character0 = Character.valueOf(char0);
      byte byte0 = (byte)112;
      Byte byte1 = new Byte(byte0);
      // Undeclared exception!
      try {
        tCharByteMapDecorator0.put(character0, byte1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TCharByteMapDecorator tCharByteMapDecorator0 = new TCharByteMapDecorator();
      // Undeclared exception!
      try {
        tCharByteMapDecorator0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TCharByteMapDecorator tCharByteMapDecorator0 = new TCharByteMapDecorator();
      int int0 = 0;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, int0);
      Object object0 = null;
      // Undeclared exception!
      try {
        tCharByteMapDecorator0.remove(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Locale locale1 = Locale.PRC;
      String string0 = locale0.getDisplayScript(locale1);
      char char0 = '\"';
      Character character0 = Character.valueOf(char0);
      AbstractMap.SimpleImmutableEntry<Object, Character> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Character>((Object) string0, character0);
      abstractMap_SimpleImmutableEntry0.getValue();
      abstractMap_SimpleImmutableEntry0.getKey();
      TCharByteMap tCharByteMap0 = null;
      locale0.getDisplayCountry();
      TCharByteMapDecorator tCharByteMapDecorator0 = new TCharByteMapDecorator(tCharByteMap0);
      char char1 = ';';
      Character character1 = new Character(char1);
      // Undeclared exception!
      try {
        tCharByteMapDecorator0.get((Object) character1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap();
      TCharByteMapDecorator tCharByteMapDecorator0 = new TCharByteMapDecorator();
      char char0 = 'g';
      String string0 = "6,gu";
      URI uRI0 = new URI(string0);
      String string1 = uRI0.getRawQuery();
      // Undeclared exception!
      try {
        tCharByteMapDecorator0.containsKey((Object) string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TCharByteMapDecorator tCharByteMapDecorator0 = new TCharByteMapDecorator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = (-724);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = 'v';
      charArray0[0] = char0;
      char char1 = '[';
      charArray0[1] = char1;
      char char2 = 'j';
      charArray0[2] = char2;
      char char3 = 'R';
      charArray0[3] = char3;
      char char4 = '1';
      charArray0[4] = char4;
      char char5 = 'C';
      charArray0[5] = char5;
      char char6 = 'j';
      charArray0[6] = char6;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-126);
      byteArray0[0] = byte0;
      byte byte1 = (byte)9;
      byteArray0[1] = byte1;
      byte byte2 = (byte)120;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-41);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-9);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)81;
      byteArray0[6] = byte6;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      TCharByteMapDecorator tCharByteMapDecorator0 = new TCharByteMapDecorator((TCharByteMap) tCharByteHashMap0);
      assertEquals(false, tCharByteMapDecorator0.isEmpty());
  }

  @Test
  public void test12()  throws Throwable  {
      TCharByteMapDecorator tCharByteMapDecorator0 = new TCharByteMapDecorator();
      int int0 = 1927;
      char char0 = 'B';
      byte byte0 = (byte)0;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, (float) int0, char0, byte0);
      TCharByteMapDecorator tCharByteMapDecorator1 = new TCharByteMapDecorator((TCharByteMap) tCharByteHashMap0);
      String string0 = "";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0);
      tCharByteHashMap0.iterator();
      // Undeclared exception!
      try {
        stringTokenizer0.nextToken();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          byte byte0 = (byte)111;
          Byte byte1 = new Byte(byte0);
          String string0 = "";
          AbstractMap.SimpleEntry<Byte, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Object>(byte1, (Object) string0);
          abstractMap_SimpleEntry0.getKey();
          int int0 = 928;
          TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0);
          TCharByteMapDecorator tCharByteMapDecorator0 = new TCharByteMapDecorator((TCharByteMap) tCharByteHashMap0);
          boolean boolean0 = tCharByteMapDecorator0.isEmpty();
          assertEquals(true, boolean0);
          
          TCharByteMapDecorator tCharByteMapDecorator1 = new TCharByteMapDecorator();
          String string1 = "";
          File file0 = new File(string1);
          File file1 = new File(file0, string1);
          String string2 = file1.getParent();
          AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>((Object) string2, (Integer) int0);
          String string3 = abstractMap_SimpleImmutableEntry0.toString();
          tCharByteMapDecorator1.get((Object) string3);
          char char0 = 'V';
          Character.valueOf(char0);
          byte byte2 = (byte) (-40);
          Byte byte3 = new Byte(byte2);
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0, boolean0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:136)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
      TCharByteMapDecorator tCharByteMapDecorator0 = new TCharByteMapDecorator();
      char char0 = '9';
      Character character0 = Character.valueOf(char0);
      Locale locale0 = Locale.KOREAN;
      String string0 = locale0.getISO3Language();
      Byte byte0 = tCharByteMapDecorator0.remove((Object) string0);
      // Undeclared exception!
      try {
        tCharByteMapDecorator0.put(character0, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap();
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap((TCharByteMap) tCharByteHashMap0);
      TCharByteMapDecorator tCharByteMapDecorator0 = new TCharByteMapDecorator((TCharByteMap) tCharByteHashMap1);
      tCharByteMapDecorator0.size();
      TCharByteMap tCharByteMap0 = null;
      char char0 = '\\';
      Character character0 = Character.valueOf(char0);
      byte byte0 = (byte)0;
      Byte byte1 = new Byte(byte0);
      tCharByteMapDecorator0.put(character0, byte1);
      tCharByteMapDecorator0.values();
      TCharByteMapDecorator tCharByteMapDecorator1 = new TCharByteMapDecorator(tCharByteMap0);
      TCharByteMapDecorator tCharByteMapDecorator2 = new TCharByteMapDecorator();
      tCharByteMapDecorator2.values();
      char char1 = '*';
      Character character1 = new Character(char1);
      byte byte2 = (byte) (-45);
      Byte byte3 = new Byte(byte2);
      // Undeclared exception!
      try {
        tCharByteMapDecorator1.put(character1, byte3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[8];
      char char0 = 'e';
      charArray0[0] = char0;
      char char1 = 'O';
      charArray0[1] = char1;
      char char2 = '^';
      charArray0[2] = char2;
      char char3 = '{';
      charArray0[3] = char3;
      char char4 = '}';
      charArray0[4] = char4;
      char char5 = 'V';
      charArray0[5] = char5;
      char char6 = 'w';
      charArray0[6] = char6;
      char char7 = '\\';
      charArray0[7] = char7;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-118);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-114);
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      byte byte4 = (byte)75;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-65);
      byteArray0[5] = byte5;
      byte byte6 = (byte)68;
      byteArray0[6] = byte6;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      TCharByteMapDecorator tCharByteMapDecorator0 = new TCharByteMapDecorator((TCharByteMap) tCharByteHashMap0);
      OutputStream outputStream0 = null;
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      TCharByteMapDecorator tCharByteMapDecorator0 = new TCharByteMapDecorator();
      char char0 = '?';
      String string0 = Character.toString(char0);
      tCharByteMapDecorator0.equals((Object) string0);
      TCharByteMapDecorator tCharByteMapDecorator1 = new TCharByteMapDecorator();
      byte byte0 = (byte)0;
      Byte byte1 = new Byte(byte0);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ?://?%3F#?
         //
      }
  }
}
