/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TCharFunction;
import gnu.trove.impl.sync.TSynchronizedCharCollection;
import gnu.trove.impl.sync.TSynchronizedDoubleCharMap;
import gnu.trove.impl.sync.TSynchronizedDoubleSet;
import gnu.trove.iterator.TDoubleCharIterator;
import gnu.trove.map.TDoubleCharMap;
import gnu.trove.map.hash.TDoubleCharHashMap;
import gnu.trove.procedure.TCharProcedure;
import gnu.trove.procedure.TDoubleCharProcedure;
import gnu.trove.procedure.TDoubleProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedDoubleCharMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.toString()Ljava/lang/String;: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.<init>(Lgnu/trove/map/TDoubleCharMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      String string0 = tSynchronizedDoubleCharMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.forEachEntry(Lgnu/trove/procedure/TDoubleCharProcedure;)Z: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap((-18), (-18));
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      boolean boolean0 = tSynchronizedDoubleCharMap0.forEachEntry((TDoubleCharProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.putAll(Ljava/util/Map;)V: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.<init>(Lgnu/trove/map/TDoubleCharMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(0);
      Double double0 = new Double((double) 0);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0, (Object) double0);
      HashMap<Double, Character> hashMap0 = new HashMap<Double, Character>();
      tSynchronizedDoubleCharMap0.putAll((Map<? extends Double, ? extends Character>) hashMap0);
      assertEquals(true, tSynchronizedDoubleCharMap0.isEmpty());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.putIfAbsent(DC)C: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(0);
      Double double0 = new Double((double) 0);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0, (Object) double0);
      tSynchronizedDoubleCharMap0.putIfAbsent((double) 0, '5');
      assertEquals(false, tDoubleCharHashMap0.isEmpty());
      assertEquals("{0.0=5}", tSynchronizedDoubleCharMap0.toString());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.hashCode()I: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(1931, 1931);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      int int0 = tSynchronizedDoubleCharMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.getNoEntryValue()C: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(1931, 1931);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      char char0 = tSynchronizedDoubleCharMap0.getNoEntryValue();
      assertEquals('\u0000', char0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(0);
      Double double0 = new Double((double) 0);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0, (Object) double0);
      boolean boolean0 = tSynchronizedDoubleCharMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.size()I: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      int int0 = tSynchronizedDoubleCharMap0.size();
      assertEquals(0, int0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.values([C)[C: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0, (Object) "=EZD:xn:p%");
      char[] charArray0 = new char[10];
      char[] charArray1 = tSynchronizedDoubleCharMap0.values(charArray0);
      assertSame(charArray1, charArray0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.increment(D)Z: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(0);
      Double double0 = new Double((double) 0);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0, (Object) double0);
      boolean boolean0 = tSynchronizedDoubleCharMap0.increment((double) double0);
      assertEquals(false, boolean0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.retainEntries(Lgnu/trove/procedure/TDoubleCharProcedure;)Z: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(0);
      Double double0 = new Double((double) 0);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0, (Object) double0);
      boolean boolean0 = tSynchronizedDoubleCharMap0.retainEntries((TDoubleCharProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      boolean boolean0 = tSynchronizedDoubleCharMap0.forEachKey((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.putAll(Lgnu/trove/map/TDoubleCharMap;)V: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      tSynchronizedDoubleCharMap0.putAll((TDoubleCharMap) tDoubleCharHashMap0);
      assertEquals("{}", tSynchronizedDoubleCharMap0.toString());
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.iterator()Lgnu/trove/iterator/TDoubleCharIterator;: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      TDoubleCharIterator tDoubleCharIterator0 = tSynchronizedDoubleCharMap0.iterator();
      assertEquals(false, tDoubleCharIterator0.hasNext());
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.transformValues(Lgnu/trove/function/TCharFunction;)V: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap((-18), (-18));
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      tSynchronizedDoubleCharMap0.transformValues((TCharFunction) null);
      assertEquals(0.0, tSynchronizedDoubleCharMap0.getNoEntryKey(), 0.01D);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.keys([D)[D: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(0);
      Double double0 = new Double((double) 0);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0, (Object) double0);
      double[] doubleArray0 = tSynchronizedDoubleCharMap0.keys(tDoubleCharHashMap0._set);
      assertNotNull(doubleArray0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.remove(D)C: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap((-18), (-18));
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      char char0 = tSynchronizedDoubleCharMap0.remove((double) (-18));
      assertEquals('\u0000', char0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      boolean boolean0 = tSynchronizedDoubleCharMap0.forEachValue((TCharProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.adjustOrPutValue(DCC)C: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      char char0 = tSynchronizedDoubleCharMap0.adjustOrPutValue((double) 'O', 'O', 'O');
      assertEquals(false, tDoubleCharHashMap0.isEmpty());
      assertEquals('O', char0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.keys()[D: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(1931, 1931);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      double[] doubleArray0 = tSynchronizedDoubleCharMap0.keys();
      assertNotNull(doubleArray0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.equals(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      boolean boolean0 = tSynchronizedDoubleCharMap0.equals((Object) "O");
      assertEquals(false, boolean0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.values()[C: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      char[] charArray0 = tSynchronizedDoubleCharMap0.values();
      assertNotNull(charArray0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.put(DC)C: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap((-18), (-18));
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      tSynchronizedDoubleCharMap0.put((double) (-18), '');
      assertEquals(false, tDoubleCharHashMap0.isEmpty());
      assertEquals(false, tSynchronizedDoubleCharMap0.isEmpty());
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.adjustValue(DC)Z: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      boolean boolean0 = tSynchronizedDoubleCharMap0.adjustValue((double) 'F', 'F');
      assertEquals(false, boolean0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.containsValue(C)Z: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      boolean boolean0 = tSynchronizedDoubleCharMap0.containsValue('F');
      assertEquals(false, boolean0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.containsKey(D)Z: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap((-18), (-18));
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      boolean boolean0 = tSynchronizedDoubleCharMap0.containsKey((double) '');
      assertEquals(false, boolean0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.clear()V: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(1931, 1931);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      tSynchronizedDoubleCharMap0.clear();
      assertEquals('\u0000', tSynchronizedDoubleCharMap0.getNoEntryValue());
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.get(D)C: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0, (Object) "=EZD:xn:p%");
      char char0 = tSynchronizedDoubleCharMap0.get((double) '\u0000');
      assertEquals('\u0000', char0);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.getNoEntryKey()D: root-Branch
   */

  @Test
  public void test28()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(0);
      Double double0 = new Double((double) 0);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0, (Object) double0);
      double double1 = tSynchronizedDoubleCharMap0.getNoEntryKey();
      assertNotSame(double0, double1);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.<init>(Lgnu/trove/map/TDoubleCharMap;)V: I17 Branch 1 IFNONNULL L59 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = null;
      try {
        tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.keySet()Lgnu/trove/set/TDoubleSet;: I11 Branch 2 IFNONNULL L107 - true
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.keySet()Lgnu/trove/set/TDoubleSet;: I11 Branch 2 IFNONNULL L107 - false
   * 3 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.<init>(Lgnu/trove/map/TDoubleCharMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test30()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      TSynchronizedDoubleSet tSynchronizedDoubleSet0 = (TSynchronizedDoubleSet)tSynchronizedDoubleCharMap0.keySet();
      assertNotNull(tSynchronizedDoubleSet0);
      
      TSynchronizedDoubleSet tSynchronizedDoubleSet1 = (TSynchronizedDoubleSet)tSynchronizedDoubleCharMap0.keySet();
      assertSame(tSynchronizedDoubleSet1, tSynchronizedDoubleSet0);
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.valueCollection()Lgnu/trove/TCharCollection;: I11 Branch 3 IFNONNULL L121 - true
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.valueCollection()Lgnu/trove/TCharCollection;: I11 Branch 3 IFNONNULL L121 - false
   * 3 gnu.trove.impl.sync.TSynchronizedDoubleCharMap.<init>(Lgnu/trove/map/TDoubleCharMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test31()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0, (Object) "=EZD:xn:p%");
      TSynchronizedCharCollection tSynchronizedCharCollection0 = (TSynchronizedCharCollection)tSynchronizedDoubleCharMap0.valueCollection();
      assertNotNull(tSynchronizedCharCollection0);
      
      TSynchronizedCharCollection tSynchronizedCharCollection1 = (TSynchronizedCharCollection)tSynchronizedDoubleCharMap0.valueCollection();
      assertSame(tSynchronizedCharCollection1, tSynchronizedCharCollection0);
  }
}
