/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.iterator.TFloatLongIterator;
import gnu.trove.map.TFloatLongMap;
import gnu.trove.map.hash.TFloatLongHashMap;
import gnu.trove.set.TFloatSet;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatLongHashMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 1031;
      float float0 = 10.0F;
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(int0, float0);
      int int1 = 1736;
      TFloatLongHashMap tFloatLongHashMap1 = new TFloatLongHashMap(int1, int0);
      tFloatLongHashMap0.putAll((TFloatLongMap) tFloatLongHashMap1);
      assertEquals(137, tFloatLongHashMap0.capacity());
  }

  @Test
  public void test1()  throws Throwable  {
      TFloatLongMap tFloatLongMap0 = null;
      TFloatLongHashMap tFloatLongHashMap0 = null;
      try {
        tFloatLongHashMap0 = new TFloatLongHashMap(tFloatLongMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-1);
      int int1 = (-846);
      float float0 = 1187.6146F;
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(int1, float0);
      tFloatLongHashMap0.getNoEntryKey();
      TFloatLongHashMap tFloatLongHashMap1 = new TFloatLongHashMap(int0, int0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-113);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      tFloatLongHashMap1._states = byteArray0;
      assertSame(tFloatLongHashMap1._states, byteArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = (-1710.8853F);
      floatArray0[0] = float0;
      long[] longArray0 = new long[9];
      long long0 = 0L;
      longArray0[0] = long0;
      long long1 = 1L;
      longArray0[1] = long1;
      long long2 = 829L;
      longArray0[2] = long2;
      long long3 = 412L;
      longArray0[3] = long3;
      long long4 = 1915L;
      longArray0[4] = long4;
      long long5 = 0L;
      longArray0[5] = long5;
      long long6 = (-1889L);
      longArray0[6] = long6;
      long long7 = (-1L);
      longArray0[7] = long7;
      long long8 = 1319L;
      longArray0[8] = long8;
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
      String string0 = tFloatLongHashMap0.toString();
      assertEquals("{-1710.8853=0}", string0);
      assertNotNull(string0);
      assertEquals(23, tFloatLongHashMap0.capacity());
      
      int int0 = (-614);
      TFloatLongHashMap tFloatLongHashMap1 = new TFloatLongHashMap(int0);
      float[] floatArray1 = new float[7];
      floatArray1[0] = (float) int0;
      floatArray1[1] = (float) int0;
      floatArray1[2] = (float) int0;
      floatArray1[3] = (float) int0;
      floatArray1[4] = (float) int0;
      floatArray1[5] = (float) int0;
      floatArray1[6] = (float) int0;
      tFloatLongHashMap1._set = floatArray1;
      assertFalse(tFloatLongHashMap1.equals(tFloatLongHashMap0));
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = (-1521);
          float float0 = 813.6447F;
          float float1 = Float.POSITIVE_INFINITY;
          long long0 = 418L;
          TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(int0, float0, float1, long0);
          tFloatLongHashMap0.size();
          int int1 = (-1167);
          tFloatLongHashMap0.trimToSize();
          assertEquals("{}", tFloatLongHashMap0.toString());
          
          TFloatLongHashMap tFloatLongHashMap1 = new TFloatLongHashMap(int1, int1);
          boolean boolean0 = tFloatLongHashMap1.containsKey((float) int1);
          long[] longArray0 = tFloatLongHashMap1.values();
          assertNotNull(longArray0);
          
          float[] floatArray0 = tFloatLongHashMap1.keys(tFloatLongHashMap0._set);
          assertNotNull(floatArray0);
          
          Map.Entry<Float, Object> map_Entry0 = null;
          String string0 = "";
          tFloatLongHashMap1.compact();
          File file0 = new File(string0, string0);
          File file1 = new File(file0, string0);
          File file2 = file1.getCanonicalFile();
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(file2, boolean0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // sun.reflect.GeneratedConstructorAccessor14.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = (-1009.85724F);
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      float float2 = 0.0F;
      floatArray0[2] = float2;
      float float3 = 0.0F;
      floatArray0[3] = float3;
      float float4 = 10.0F;
      floatArray0[4] = float4;
      float float5 = 883.6162F;
      floatArray0[5] = float5;
      float float6 = 0.0F;
      floatArray0[6] = float6;
      long[] longArray0 = new long[8];
      long long0 = 539L;
      longArray0[0] = long0;
      long long1 = (-1253L);
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = (-381L);
      longArray0[3] = long3;
      long long4 = 0L;
      longArray0[4] = long4;
      long long5 = 0L;
      longArray0[5] = long5;
      long long6 = 0L;
      longArray0[6] = long6;
      long long7 = 0L;
      longArray0[7] = long7;
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
      float float7 = 1220.6765F;
      String string0 = Float.toString(float7);
      boolean boolean0 = tFloatLongHashMap0.equals((Object) string0);
      assertEquals(4, tFloatLongHashMap0.size());
      assertEquals(false, boolean0);
      assertEquals("{883.6162=0, 10.0=0, -1009.85724=539, 0.0=0}", tFloatLongHashMap0.toString());
      
      TFloatLongHashMap tFloatLongHashMap1 = new TFloatLongHashMap();
      assertEquals(23, tFloatLongHashMap1.capacity());
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      float float0 = 725.7996F;
      long long0 = (-1202L);
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(int0, (float) int0, float0, long0);
      TFloatLongHashMap tFloatLongHashMap1 = null;
      try {
        tFloatLongHashMap1 = new TFloatLongHashMap((TFloatLongMap) tFloatLongHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 241;
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(int0);
      tFloatLongHashMap0.getNoEntryKey();
      tFloatLongHashMap0.setAutoCompactionFactor((float) int0);
      tFloatLongHashMap0.keySet();
      int int1 = (-1748);
      TFloatLongHashMap tFloatLongHashMap1 = new TFloatLongHashMap(int1);
      TFloatLongHashMap tFloatLongHashMap2 = new TFloatLongHashMap(int1);
      tFloatLongHashMap1.isEmpty();
      tFloatLongHashMap1.putAll((TFloatLongMap) tFloatLongHashMap2);
      int int2 = 500;
      float float0 = (-1508.4688F);
      tFloatLongHashMap2.capacity();
      float[] floatArray0 = tFloatLongHashMap2._set;
      tFloatLongHashMap2.increment(float0);
      float float1 = 123.77459F;
      TFloatLongHashMap tFloatLongHashMap3 = new TFloatLongHashMap(int2, float1);
      TFloatLongHashMap tFloatLongHashMap4 = new TFloatLongHashMap((TFloatLongMap) tFloatLongHashMap3);
      tFloatLongHashMap4.ensureCapacity(int2);
      assertEquals(7, tFloatLongHashMap4.capacity());
  }

  @Test
  public void test8()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = (-1169.7185F);
      floatArray0[0] = float0;
      float float1 = (-1.0F);
      floatArray0[1] = float1;
      float float2 = 1.0F;
      floatArray0[2] = float2;
      float float3 = (-1.0F);
      floatArray0[3] = float3;
      float float4 = 0.0F;
      floatArray0[4] = float4;
      float float5 = 689.31866F;
      floatArray0[5] = float5;
      float float6 = 1.0F;
      floatArray0[6] = float6;
      long[] longArray0 = new long[7];
      long long0 = (-681L);
      longArray0[0] = long0;
      long long1 = 1188L;
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      long long4 = (-89L);
      longArray0[4] = long4;
      long long5 = 986L;
      longArray0[5] = long5;
      long long6 = 0L;
      longArray0[6] = long6;
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
      assertEquals("{-1169.7185=-681, -1.0=0, 1.0=0, 689.31866=986, 0.0=-89}", tFloatLongHashMap0.toString());
      assertEquals(5, tFloatLongHashMap0.size());
  }

  @Test
  public void test9()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = (-319.8629F);
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      float float1 = 0.0F;
      floatArray0[3] = float1;
      float float2 = (-1.0F);
      floatArray0[4] = float2;
      float float3 = (-1.0F);
      floatArray0[0] = float3;
      float float4 = 0.5F;
      floatArray0[1] = float4;
      float float5 = (-447.7539F);
      floatArray0[2] = float5;
      float float6 = 1388.858F;
      floatArray0[3] = float6;
      float float7 = (-1121.4889F);
      floatArray0[4] = float7;
      long[] longArray0 = new long[4];
      long long0 = (-929L);
      longArray0[0] = long0;
      long long1 = 1L;
      longArray0[1] = long1;
      long long2 = 748L;
      longArray0[2] = long2;
      long long3 = 1587L;
      longArray0[3] = long3;
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
      boolean boolean0 = tFloatLongHashMap0.increment((float) longArray0[3]);
      assertEquals("{1388.858=1587, 0.5=1, -447.7539=748, -1.0=-929}", tFloatLongHashMap0.toString());
      assertEquals(false, boolean0);
      assertEquals(4, tFloatLongHashMap0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      TFloatLongMap tFloatLongMap0 = null;
      TFloatLongHashMap tFloatLongHashMap0 = null;
      try {
        tFloatLongHashMap0 = new TFloatLongHashMap(tFloatLongMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test11()  throws Throwable  {
//       float[] floatArray0 = new float[10];
//       float float0 = (-307.49887F);
//       floatArray0[0] = float0;
//       float float1 = (-1436.8445F);
//       floatArray0[1] = float1;
//       float float2 = (-1213.2651F);
//       floatArray0[2] = float2;
//       float float3 = (-1512.1836F);
//       floatArray0[3] = float3;
//       float float4 = (-1.0F);
//       floatArray0[4] = float4;
//       float float5 = 1313.8112F;
//       floatArray0[5] = float5;
//       float float6 = 0.0F;
//       floatArray0[6] = float6;
//       float float7 = 154.60379F;
//       floatArray0[7] = float7;
//       float float8 = 1.0F;
//       floatArray0[8] = float8;
//       float float9 = (-682.4072F);
//       floatArray0[9] = float9;
//       long[] longArray0 = new long[9];
//       long long0 = (-1L);
//       longArray0[0] = long0;
//       long long1 = 0L;
//       longArray0[1] = long1;
//       long long2 = (-1L);
//       longArray0[2] = long2;
//       long long3 = 0L;
//       longArray0[3] = long3;
//       long long4 = (-182L);
//       longArray0[4] = long4;
//       long long5 = (-9L);
//       longArray0[5] = long5;
//       long long6 = (-1937L);
//       longArray0[6] = long6;
//       long long7 = (-1384L);
//       longArray0[7] = long7;
//       long long8 = 0L;
//       longArray0[8] = long8;
//       TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
//       TFloatLongHashMap tFloatLongHashMap1 = new TFloatLongHashMap((TFloatLongMap) tFloatLongHashMap0);
//       byte[] byteArray0 = tFloatLongHashMap1._states;
//       assertEquals(false, tFloatLongHashMap1.isEmpty());
//       assertEquals(0.0F, tFloatLongHashMap1.getNoEntryKey(), 0.01F);
//       assertEquals("{1.0=0, -1.0=-182, -1213.2651=-1, -1436.8445=0, 1313.8112=-9, -1512.1836=0, -307.49887=-1, 154.60379=-1384, 0.0=-1937}", tFloatLongHashMap1.toString());
//       assertEquals("{0.0=-1937, -1.0=-182, -1213.2651=-1, -1436.8445=0, 1313.8112=-9, 1.0=0, 154.60379=-1384, -307.49887=-1, -1512.1836=0}", tFloatLongHashMap0.toString());
//       assertEquals(0L, tFloatLongHashMap1.getNoEntryValue());
//       assertEquals(9, tFloatLongHashMap0.size());
//   }

  @Test
  public void test12()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = 65.057655F;
      floatArray0[0] = float0;
      float float1 = 1774.0901F;
      floatArray0[1] = float1;
      float float2 = (-709.64813F);
      floatArray0[2] = float2;
      float float3 = 259.86298F;
      floatArray0[3] = float3;
      float float4 = 1295.9814F;
      floatArray0[4] = float4;
      float float5 = 0.0F;
      floatArray0[5] = float5;
      float float6 = (-1674.4575F);
      floatArray0[6] = float6;
      float float7 = 0.0F;
      floatArray0[7] = float7;
      float float8 = 0.0F;
      floatArray0[8] = float8;
      float float9 = 0.0F;
      floatArray0[9] = float9;
      long[] longArray0 = new long[5];
      long long0 = 665L;
      longArray0[0] = long0;
      long long1 = 0L;
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = (-1910L);
      longArray0[3] = long3;
      long long4 = 50L;
      longArray0[4] = long4;
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
      TFloatSet tFloatSet0 = tFloatLongHashMap0.keySet();
      assertEquals("{1295.9814=50, -709.64813=0, 1774.0901=0, 65.057655=665, 259.86298=-1910}", tFloatLongHashMap0.toString());
      assertEquals(false, tFloatLongHashMap0.isEmpty());
      assertEquals(5, tFloatSet0.size());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      float float0 = 1870.5676F;
      float float1 = (-252.54756F);
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(int0, float0, float1, (long) int0);
      TFloatLongIterator tFloatLongIterator0 = tFloatLongHashMap0.iterator();
      assertEquals(false, tFloatLongIterator0.hasNext());
  }

  @Test
  public void test14()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = 813.36084F;
      floatArray0[0] = float0;
      float float1 = 1956.8983F;
      floatArray0[1] = float1;
      float float2 = 1809.354F;
      floatArray0[2] = float2;
      float float3 = 701.80444F;
      floatArray0[3] = float3;
      float float4 = 80.65572F;
      floatArray0[4] = float4;
      float float5 = (-388.43927F);
      floatArray0[5] = float5;
      float float6 = 0.0F;
      floatArray0[6] = float6;
      long[] longArray0 = new long[4];
      long long0 = 0L;
      longArray0[0] = long0;
      long long1 = (-9223372036854775808L);
      longArray0[0] = long1;
      longArray0[1] = long1;
      longArray0[2] = long0;
      longArray0[0] = long0;
      long long2 = 0L;
      longArray0[1] = long2;
      longArray0[2] = long2;
      longArray0[3] = long1;
      longArray0[3] = long0;
      longArray0[1] = long1;
      long long3 = (-961L);
      longArray0[2] = long3;
      long long4 = (-1556L);
      longArray0[3] = long4;
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(floatArray0, longArray0);
      tFloatLongHashMap0._set = floatArray0;
      TFloatLongHashMap tFloatLongHashMap1 = new TFloatLongHashMap();
      TFloatLongHashMap tFloatLongHashMap2 = new TFloatLongHashMap((TFloatLongMap) tFloatLongHashMap1);
      float float7 = (-1100.7614F);
      long long5 = 0L;
      long long6 = tFloatLongHashMap2.adjustOrPutValue(float7, long5, long5);
      assertEquals("{-1100.7614=0}", tFloatLongHashMap2.toString());
      assertEquals(0L, long6);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 1861;
      float float0 = 0.0F;
      long long0 = (-996L);
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(int0, (float) int0, float0, long0);
      float float1 = (-365.30188F);
      long long1 = 1L;
      boolean boolean0 = tFloatLongHashMap0.adjustValue(float1, long1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale0 = Locale.getDefault(locale_Category0);
      String string0 = locale0.toLanguageTag();
      float float0 = Float.POSITIVE_INFINITY;
      Float float1 = new Float(float0);
      AbstractMap.SimpleEntry<Object, Float> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Float>((Object) string0, float1);
      String string1 = (String)abstractMap_SimpleEntry0.getKey();
      assertSame(string0, string1);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 0;
      float float0 = (-1603.5204F);
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(int0, float0);
      tFloatLongHashMap0.clear();
      float float1 = 621.6717F;
      TFloatLongHashMap tFloatLongHashMap1 = new TFloatLongHashMap(int0, float1);
      tFloatLongHashMap1.capacity();
      Locale locale0 = Locale.KOREA;
      Locale locale1 = null;
      // Undeclared exception!
      try {
        locale0.getDisplayCountry(locale1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 0;
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(int0);
      int int1 = tFloatLongHashMap0.hashCode();
      assertEquals(0, int1);
  }
}
