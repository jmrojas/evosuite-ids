/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TLongFunction;
import gnu.trove.impl.sync.TSynchronizedDoubleLongMap;
import gnu.trove.iterator.TDoubleLongIterator;
import gnu.trove.map.TDoubleLongMap;
import gnu.trove.map.hash.TDoubleLongHashMap;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedDoubleLongMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 328;
      TDoubleLongMap tDoubleLongMap0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = byteArrayOutputStream0.toString();
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap0 = new TSynchronizedDoubleLongMap(tDoubleLongMap0, (Object) string0);
      long long0 = 0L;
      String string1 = Long.toString(long0);
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap1 = new TSynchronizedDoubleLongMap((TDoubleLongMap) tSynchronizedDoubleLongMap0, (Object) string1);
      // Undeclared exception!
      try {
        tSynchronizedDoubleLongMap1.keys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TDoubleLongMap tDoubleLongMap0 = null;
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = Locale.ITALY;
      String string0 = locale0.getDisplayName(locale1);
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap0 = new TSynchronizedDoubleLongMap(tDoubleLongMap0, (Object) string0);
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap1 = null;
      try {
        tSynchronizedDoubleLongMap1 = new TSynchronizedDoubleLongMap(tDoubleLongMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-728);
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(int0);
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap0 = new TSynchronizedDoubleLongMap((TDoubleLongMap) tDoubleLongHashMap0);
      double double0 = 0.0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = true;
      String string0 = "-s4eh!UCZ*\\.j1oFnI";
      try {
        pipedOutputStream0.write(tDoubleLongHashMap0._states);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap();
      long long0 = (-1049L);
      String string0 = Long.toBinaryString(long0);
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap0 = new TSynchronizedDoubleLongMap((TDoubleLongMap) tDoubleLongHashMap0);
      tSynchronizedDoubleLongMap0.get((double) long0);
      TLongFunction tLongFunction0 = null;
      tSynchronizedDoubleLongMap0.valueCollection();
      tSynchronizedDoubleLongMap0.transformValues(tLongFunction0);
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap1 = new TSynchronizedDoubleLongMap((TDoubleLongMap) tDoubleLongHashMap0, (Object) string0);
      assertEquals(0L, tSynchronizedDoubleLongMap1.getNoEntryValue());
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 1759;
      float float0 = (-1.0F);
      int int1 = 0;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(int1, int0);
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap0 = new TSynchronizedDoubleLongMap((TDoubleLongMap) tDoubleLongHashMap0);
      tSynchronizedDoubleLongMap0.hashCode();
      long long0 = 514L;
      TDoubleLongHashMap tDoubleLongHashMap1 = new TDoubleLongHashMap(int0, float0, (double) int0, long0);
      String string0 = tDoubleLongHashMap1.toString();
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap1 = new TSynchronizedDoubleLongMap((TDoubleLongMap) tDoubleLongHashMap1, (Object) string0);
      double double0 = (-1186.7062363170853);
      tSynchronizedDoubleLongMap1.increment(double0);
      int int2 = 573953;
      TDoubleLongHashMap tDoubleLongHashMap2 = new TDoubleLongHashMap(int2, int2);
      long long1 = 1306L;
      long long2 = tSynchronizedDoubleLongMap1.adjustOrPutValue((double) int0, long0, long1);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) int2;
      longArray0[1] = long2;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = long2;
      longArray0[5] = (long) int2;
      tSynchronizedDoubleLongMap1.values(longArray0);
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap2 = new TSynchronizedDoubleLongMap((TDoubleLongMap) tDoubleLongHashMap2);
      Locale locale0 = Locale.PRC;
      String string1 = locale0.getVariant();
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap3 = new TSynchronizedDoubleLongMap((TDoubleLongMap) tSynchronizedDoubleLongMap2, (Object) string1);
      int int3 = 0;
      float float1 = 0.0F;
      Locale locale1 = new Locale(string1, string1, string1);
      String string2 = locale0.getDisplayCountry(locale1);
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap4 = new TSynchronizedDoubleLongMap((TDoubleLongMap) tSynchronizedDoubleLongMap2, (Object) string2);
      TDoubleLongHashMap tDoubleLongHashMap3 = new TDoubleLongHashMap(int3, float1);
      tSynchronizedDoubleLongMap1.clear();
      tSynchronizedDoubleLongMap1.keys(tDoubleLongHashMap3._set);
      assertEquals(7, tDoubleLongHashMap1.capacity());
      
      Long long3 = new Long((long) int3);
      String string3 = long3.toString();
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap5 = new TSynchronizedDoubleLongMap((TDoubleLongMap) tDoubleLongHashMap3, (Object) string3);
      double double1 = (-981.3496612147883);
      tSynchronizedDoubleLongMap5.get(double1);
      tSynchronizedDoubleLongMap5.toString();
      assertFalse(long3.equals(long2));
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          double[] doubleArray0 = new double[7];
          double double0 = 1469.8455252344331;
          doubleArray0[0] = double0;
          double double1 = (-257.1995485760629);
          doubleArray0[1] = double1;
          double double2 = (-1413.2086920552867);
          doubleArray0[2] = double2;
          double double3 = (-1.0);
          doubleArray0[3] = double3;
          double double4 = (-1716.3938604683692);
          doubleArray0[4] = double4;
          double double5 = (-272.09268682653584);
          doubleArray0[5] = double5;
          double double6 = 1997.5955632285775;
          doubleArray0[6] = double6;
          long[] longArray0 = new long[8];
          long long0 = (-1750L);
          longArray0[0] = long0;
          long long1 = (-2044L);
          longArray0[1] = long1;
          long long2 = 0L;
          longArray0[2] = long2;
          long long3 = (-1L);
          longArray0[3] = long3;
          long long4 = (-1L);
          longArray0[4] = long4;
          long long5 = (-1L);
          longArray0[5] = long5;
          long long6 = (-463L);
          longArray0[6] = long6;
          long long7 = 1L;
          longArray0[7] = long7;
          TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(doubleArray0, longArray0);
          String string0 = "J*`v&tdizNI";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap();
      String string0 = "";
      URI uRI0 = URI.create(string0);
      URI uRI1 = uRI0.resolve(string0);
      URI uRI2 = uRI1.resolve(uRI0);
      String string1 = uRI2.getPath();
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap0 = new TSynchronizedDoubleLongMap((TDoubleLongMap) tDoubleLongHashMap0, (Object) string1);
      long[] longArray0 = new long[6];
      long long0 = (-1L);
      longArray0[0] = long0;
      long long1 = 1115L;
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = 512L;
      longArray0[3] = long3;
      long long4 = 0L;
      longArray0[4] = long4;
      long long5 = 0L;
      longArray0[5] = long5;
      long[] longArray1 = tSynchronizedDoubleLongMap0.values(longArray0);
      assertSame(longArray1, longArray0);
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-1832);
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap();
      String string0 = "|55J";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 0: |55J
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap();
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap0 = new TSynchronizedDoubleLongMap((TDoubleLongMap) tDoubleLongHashMap0);
      long[] longArray0 = new long[7];
      long long0 = 0L;
      longArray0[0] = long0;
      long long1 = 0L;
      longArray0[1] = long1;
      long long2 = 1436L;
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      long long4 = 0L;
      longArray0[4] = long4;
      long long5 = 0L;
      longArray0[5] = long5;
      long long6 = 1L;
      longArray0[6] = long6;
      tSynchronizedDoubleLongMap0.values(longArray0);
      double double0 = Double.NEGATIVE_INFINITY;
      tSynchronizedDoubleLongMap0.keys();
      boolean boolean0 = tSynchronizedDoubleLongMap0.containsKey(double0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 1;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(int0);
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap0 = new TSynchronizedDoubleLongMap((TDoubleLongMap) tDoubleLongHashMap0);
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      double double0 = 820.6185069000825;
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = (double) int0;
      doubleArray0[8] = double0;
      double double1 = Double.POSITIVE_INFINITY;
      doubleArray0[9] = double1;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      double double2 = (-1022.2348905162331);
      doubleArray0[7] = double2;
      double double3 = (-1490.716583009436);
      doubleArray0[8] = double3;
      doubleArray0[9] = (double) int0;
      tDoubleLongHashMap0._set = doubleArray0;
      double double4 = tSynchronizedDoubleLongMap0.getNoEntryKey();
      assertEquals(0.0, double4, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      TDoubleLongMap tDoubleLongMap0 = null;
      long long0 = (-9223372036854775808L);
      Long long1 = new Long(long0);
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap0 = new TSynchronizedDoubleLongMap(tDoubleLongMap0, (Object) long1);
      long long2 = (-246L);
      // Undeclared exception!
      try {
        tSynchronizedDoubleLongMap0.containsValue(long2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 1823.9148617835317;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      long[] longArray0 = new long[9];
      long long0 = 1342L;
      longArray0[0] = long0;
      long long1 = (-1662L);
      longArray0[1] = long1;
      long long2 = 891L;
      longArray0[2] = long2;
      long long3 = (-1603L);
      longArray0[3] = long3;
      long long4 = (-2044L);
      longArray0[4] = long4;
      long long5 = 0L;
      longArray0[5] = long5;
      long long6 = 9223372036854775807L;
      longArray0[6] = long6;
      long long7 = (-1311L);
      longArray0[7] = long7;
      long long8 = 1307L;
      longArray0[8] = long8;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(doubleArray0, longArray0);
      double double2 = (-1.0);
      String string0 = Double.toString(double2);
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap0 = new TSynchronizedDoubleLongMap((TDoubleLongMap) tDoubleLongHashMap0, (Object) string0);
      tSynchronizedDoubleLongMap0.keySet();
      int int0 = (-1059);
      float float0 = 0.0F;
      TDoubleLongHashMap tDoubleLongHashMap1 = new TDoubleLongHashMap(int0, float0);
      TDoubleLongHashMap tDoubleLongHashMap2 = null;
      try {
        tDoubleLongHashMap2 = new TDoubleLongHashMap((TDoubleLongMap) tDoubleLongHashMap1);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 0;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(int0);
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap0 = new TSynchronizedDoubleLongMap((TDoubleLongMap) tDoubleLongHashMap0);
      long long0 = tSynchronizedDoubleLongMap0.remove((double) int0);
      TDoubleLongHashMap tDoubleLongHashMap1 = new TDoubleLongHashMap(int0, int0);
      int int1 = 521;
      TDoubleLongHashMap tDoubleLongHashMap2 = new TDoubleLongHashMap(int1, int0);
      tSynchronizedDoubleLongMap0.containsValue(long0);
      long long1 = 1L;
      long long2 = 0L;
      tSynchronizedDoubleLongMap0.adjustOrPutValue((double) long1, long2, (long) int0);
      assertEquals(1, tDoubleLongHashMap0.size());
      
      Long long3 = new Long(long1);
      String string0 = long3.toString();
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap1 = new TSynchronizedDoubleLongMap((TDoubleLongMap) tDoubleLongHashMap2, (Object) string0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) int1;
      longArray0[1] = long1;
      longArray0[2] = (long) long3;
      longArray0[3] = (long) int1;
      longArray0[4] = long1;
      tSynchronizedDoubleLongMap1.values(longArray0);
      tDoubleLongHashMap1.keys();
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap2 = new TSynchronizedDoubleLongMap((TDoubleLongMap) tDoubleLongHashMap1);
      tSynchronizedDoubleLongMap1.getNoEntryValue();
      tSynchronizedDoubleLongMap2.valueCollection();
      tSynchronizedDoubleLongMap2.hashCode();
      tSynchronizedDoubleLongMap2.increment((double) int0);
      tSynchronizedDoubleLongMap2.containsKey((double) int0);
      double double0 = 0.0;
      tSynchronizedDoubleLongMap2.containsKey(double0);
      tSynchronizedDoubleLongMap2.toString();
      assertFalse(tDoubleLongHashMap1.equals(tDoubleLongHashMap0));
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      double double0 = 0.0;
      long long0 = (-526L);
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(int0, (float) int0, double0, long0);
      String string0 = "";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 832;
      float float0 = (-1022.5843F);
      double double0 = 0.0;
      long long0 = (-37L);
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(int0, float0, double0, long0);
      Object object0 = null;
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap0 = new TSynchronizedDoubleLongMap((TDoubleLongMap) tDoubleLongHashMap0, object0);
      double double1 = 1.0;
      // Undeclared exception!
      try {
        tSynchronizedDoubleLongMap0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      float float0 = 1048.3097F;
      double double0 = 0.0;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap();
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap0 = new TSynchronizedDoubleLongMap((TDoubleLongMap) tDoubleLongHashMap0);
      tSynchronizedDoubleLongMap0.values();
      TDoubleLongHashMap tDoubleLongHashMap1 = new TDoubleLongHashMap(int0, float0, double0, (long) int0);
      TDoubleLongHashMap tDoubleLongHashMap2 = new TDoubleLongHashMap((TDoubleLongMap) tDoubleLongHashMap1);
      String string0 = "\"`BXZ{}\\.cAB21&u";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 0: \"`BXZ{}\\.cAB21&u
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 1063;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap();
      Locale locale0 = Locale.GERMAN;
      String string0 = locale0.getISO3Language();
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap0 = new TSynchronizedDoubleLongMap((TDoubleLongMap) tDoubleLongHashMap0, (Object) string0);
      long long0 = (-718L);
      double double0 = 0.0;
      tSynchronizedDoubleLongMap0.containsKey(double0);
      tSynchronizedDoubleLongMap0.adjustValue((double) int0, long0);
      TDoubleLongHashMap tDoubleLongHashMap1 = new TDoubleLongHashMap(int0);
      Locale locale1 = Locale.ITALIAN;
      String string1 = "";
      // Undeclared exception!
      try {
        locale1.getUnicodeLocaleType(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 1.0;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = 0.0;
      doubleArray0[5] = double5;
      double double6 = (-108.56757405058288);
      doubleArray0[6] = double6;
      double double7 = (-1622.4801242289282);
      doubleArray0[7] = double7;
      long[] longArray0 = new long[5];
      long long0 = (-269L);
      longArray0[0] = long0;
      long long1 = 929L;
      longArray0[1] = long1;
      long long2 = (-1029L);
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      long long4 = (-1594L);
      longArray0[4] = long4;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(doubleArray0, longArray0);
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap0 = new TSynchronizedDoubleLongMap((TDoubleLongMap) tDoubleLongHashMap0);
      long long5 = 1833L;
      long long6 = (-1285L);
      long long7 = tSynchronizedDoubleLongMap0.adjustOrPutValue(double4, long5, long6);
      assertEquals("{1.0=0, 0.0=239}", tDoubleLongHashMap0.toString());
      assertEquals(239L, long7);
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = (-1743);
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(int0);
      TDoubleLongHashMap tDoubleLongHashMap1 = new TDoubleLongHashMap((TDoubleLongMap) tDoubleLongHashMap0);
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap0 = new TSynchronizedDoubleLongMap((TDoubleLongMap) tDoubleLongHashMap1);
      String string0 = tSynchronizedDoubleLongMap0.toString();
      TSynchronizedDoubleLongMap tSynchronizedDoubleLongMap1 = new TSynchronizedDoubleLongMap((TDoubleLongMap) tDoubleLongHashMap1, (Object) string0);
      TDoubleLongIterator tDoubleLongIterator0 = tSynchronizedDoubleLongMap1.iterator();
      assertEquals(false, tDoubleLongIterator0.hasNext());
  }

  @Test
  public void test19()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TDoubleLongMap tDoubleLongMap0 = null;
          String string0 = "?!5L+DSt";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
