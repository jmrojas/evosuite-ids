/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap;
import gnu.trove.map.TObjectDoubleMap;
import gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap;
import gnu.trove.map.hash.TObjectDoubleHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.util.Set;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableObjectDoubleMapEvoSuite_WeakMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 17 covered goals:
   * 1 Weak Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.size()I:58 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 2 Weak Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.size()I:58 - DeleteStatement: size()I
   * 3 Weak Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.getNoEntryValue()D:92 - DeleteStatement: getNoEntryValue()D
   * 4 Weak Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.getNoEntryValue()D:92 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 5 Weak Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:101 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z
   * 6 Weak Mutation 56: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:101 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.size()I: root-Branch
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: root-Branch
   * 9 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.getNoEntryValue()D: root-Branch
   * 10 Weak Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:53 - ReplaceComparisonOperator != null -> = null
   * 11 Weak Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.size()I:58 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 12 Weak Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.size()I:58 - DeleteStatement: size()I
   * 13 Weak Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.getNoEntryValue()D:92 - DeleteStatement: getNoEntryValue()D
   * 14 Weak Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.getNoEntryValue()D:92 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 15 Weak Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:101 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z
   * 16 Weak Mutation 56: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z:101 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 17 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V: I17 Branch 1 IFNONNULL L53 - true
   */

  @Test
  public void test0()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectDoubleCustomHashMap<Integer> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, 117, (float) 117);
      TUnmodifiableObjectDoubleMap<Integer> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Integer>((TObjectDoubleMap<Integer>) tObjectDoubleCustomHashMap0);
      TObjectDoubleCustomHashMap<Object> tObjectDoubleCustomHashMap1 = new TObjectDoubleCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, (TObjectDoubleMap<?>) tUnmodifiableObjectDoubleMap0);
      assertEquals("{}", tObjectDoubleCustomHashMap1.toString());
  }

  //Test case number: 1
  /*
   * 5 covered goals:
   * 1 Weak Mutation 11: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.isEmpty()Z:59 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 2 Weak Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.isEmpty()Z:59 - DeleteStatement: isEmpty()Z
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.isEmpty()Z: root-Branch
   * 4 Weak Mutation 11: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.isEmpty()Z:59 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 5 Weak Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.isEmpty()Z:59 - DeleteStatement: isEmpty()Z
   */

  @Test
  public void test1()  throws Throwable  {
      TObjectDoubleHashMap<String> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<String>(0, 0, 0);
      TUnmodifiableObjectDoubleMap<String> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<String>((TObjectDoubleMap<String>) tObjectDoubleHashMap0);
      boolean boolean0 = tUnmodifiableObjectDoubleMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 5 covered goals:
   * 1 Weak Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.containsKey(Ljava/lang/Object;)Z:60 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 2 Weak Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.containsKey(Ljava/lang/Object;)Z:60 - DeleteStatement: containsKey(Ljava/lang/Object;)Z
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.containsKey(Ljava/lang/Object;)Z: root-Branch
   * 4 Weak Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.containsKey(Ljava/lang/Object;)Z:60 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 5 Weak Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.containsKey(Ljava/lang/Object;)Z:60 - DeleteStatement: containsKey(Ljava/lang/Object;)Z
   */

  @Test
  public void test2()  throws Throwable  {
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Object>(0, 0, 0);
      TUnmodifiableObjectDoubleMap<Object> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Object>((TObjectDoubleMap<Object>) tObjectDoubleHashMap0);
      boolean boolean0 = tUnmodifiableObjectDoubleMap0.containsKey((Object) tObjectDoubleHashMap0);
      assertEquals(false, boolean0);
  }

  //Test case number: 3
  /*
   * 7 covered goals:
   * 1 Weak Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.containsValue(D)Z:61 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 2 Weak Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.containsValue(D)Z:61 - DeleteStatement: containsValue(D)Z
   * 3 Weak Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.containsValue(D)Z:61 - InsertUnaryOp Negation of val
   * 4 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.containsValue(D)Z: root-Branch
   * 5 Weak Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.containsValue(D)Z:61 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 6 Weak Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.containsValue(D)Z:61 - DeleteStatement: containsValue(D)Z
   * 7 Weak Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.containsValue(D)Z:61 - InsertUnaryOp Negation of val
   */

  @Test
  public void test3()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(1, 1);
      TUnmodifiableObjectDoubleMap<Integer> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Integer>((TObjectDoubleMap<Integer>) tObjectDoubleHashMap0);
      boolean boolean0 = tUnmodifiableObjectDoubleMap0.containsValue((double) 1);
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 5 covered goals:
   * 1 Weak Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.get(Ljava/lang/Object;)D:62 - DeleteStatement: get(Ljava/lang/Object;)D
   * 2 Weak Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.get(Ljava/lang/Object;)D:62 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.get(Ljava/lang/Object;)D: root-Branch
   * 4 Weak Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.get(Ljava/lang/Object;)D:62 - DeleteStatement: get(Ljava/lang/Object;)D
   * 5 Weak Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.get(Ljava/lang/Object;)D:62 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   */

  @Test
  public void test4()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectDoubleCustomHashMap<Object> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, 18, (float) 18);
      TUnmodifiableObjectDoubleMap<Object> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Object>((TObjectDoubleMap<Object>) tObjectDoubleCustomHashMap0);
      double double0 = tUnmodifiableObjectDoubleMap0.get((Object) identityHashingStrategy0);
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 5
  /*
   * 14 covered goals:
   * 1 Weak Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keySet()Ljava/util/Set;:74 - DeleteField: keySetLjava/util/Set;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keySet()Ljava/util/Set;: I4 Branch 2 IFNONNULL L74 - true
   * 3 Weak Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keySet()Ljava/util/Set;:74 - ReplaceComparisonOperator != null -> = null
   * 4 Weak Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keySet()Ljava/util/Set;:75 - DeleteStatement: keySet()Ljava/util/Set;
   * 5 Weak Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keySet()Ljava/util/Set;:75 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 6 Weak Mutation 25: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keySet()Ljava/util/Set;:76 - DeleteField: keySetLjava/util/Set;
   * 7 Weak Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keySet()Ljava/util/Set;:75 - DeleteStatement: unmodifiableSet(Ljava/util/Set;)Ljava/util/Set;
   * 8 Weak Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keySet()Ljava/util/Set;:74 - ReplaceComparisonOperator != null -> = null
   * 9 Weak Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keySet()Ljava/util/Set;:74 - DeleteField: keySetLjava/util/Set;
   * 10 Weak Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keySet()Ljava/util/Set;:75 - DeleteStatement: keySet()Ljava/util/Set;
   * 11 Weak Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keySet()Ljava/util/Set;:75 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 12 Weak Mutation 25: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keySet()Ljava/util/Set;:76 - DeleteField: keySetLjava/util/Set;
   * 13 Weak Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keySet()Ljava/util/Set;:75 - DeleteStatement: unmodifiableSet(Ljava/util/Set;)Ljava/util/Set;
   * 14 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keySet()Ljava/util/Set;: I4 Branch 2 IFNONNULL L74 - false
   */

  @Test
  public void test5()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectDoubleCustomHashMap<Double> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Double>((HashingStrategy<? super Double>) identityHashingStrategy0, 731);
      TUnmodifiableObjectDoubleMap<Double> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Double>((TObjectDoubleMap<Double>) tObjectDoubleCustomHashMap0);
      Set<Double> set0 = tUnmodifiableObjectDoubleMap0.keySet();
      assertNotNull(set0);
      
      Set<Double> set1 = tUnmodifiableObjectDoubleMap0.keySet();
      assertSame(set1, set0);
  }

  //Test case number: 6
  /*
   * 5 covered goals:
   * 1 Weak Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keys()[Ljava/lang/Object;:78 - DeleteStatement: keys()[Ljava/lang/Object;
   * 2 Weak Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keys()[Ljava/lang/Object;:78 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keys()[Ljava/lang/Object;: root-Branch
   * 4 Weak Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keys()[Ljava/lang/Object;:78 - DeleteStatement: keys()[Ljava/lang/Object;
   * 5 Weak Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keys()[Ljava/lang/Object;:78 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   */

  @Test
  public void test6()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(1);
      TUnmodifiableObjectDoubleMap<Double> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Double>((TObjectDoubleMap<Double>) tObjectDoubleHashMap0);
      Object[] objectArray0 = tUnmodifiableObjectDoubleMap0.keys();
      assertNotNull(objectArray0);
  }

  //Test case number: 7
  /*
   * 5 covered goals:
   * 1 Weak Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:79 - DeleteStatement: keys([Ljava/lang/Object;)[Ljava/lang/Object;
   * 2 Weak Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:79 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: root-Branch
   * 4 Weak Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:79 - DeleteStatement: keys([Ljava/lang/Object;)[Ljava/lang/Object;
   * 5 Weak Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:79 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   */

  @Test
  public void test7()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(1);
      TUnmodifiableObjectDoubleMap<Double> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Double>((TObjectDoubleMap<Double>) tObjectDoubleHashMap0);
      Double[] doubleArray0 = new Double[7];
      Double[] doubleArray1 = tUnmodifiableObjectDoubleMap0.keys(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
  }

  //Test case number: 8
  /*
   * 14 covered goals:
   * 1 Weak Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;:82 - DeleteField: valuesLgnu/trove/TDoubleCollection;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;: I4 Branch 3 IFNONNULL L82 - true
   * 3 Weak Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;:82 - ReplaceComparisonOperator != null -> = null
   * 4 Weak Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;:83 - DeleteStatement: unmodifiableCollection(Lgnu/trove/TDoubleCollection;)Lgnu/trove/TDoubleCollection;
   * 5 Weak Mutation 35: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;:84 - DeleteField: valuesLgnu/trove/TDoubleCollection;
   * 6 Weak Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;:83 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 7 Weak Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;:83 - DeleteStatement: valueCollection()Lgnu/trove/TDoubleCollection;
   * 8 Weak Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;:82 - ReplaceComparisonOperator != null -> = null
   * 9 Weak Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;:82 - DeleteField: valuesLgnu/trove/TDoubleCollection;
   * 10 Weak Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;:83 - DeleteStatement: unmodifiableCollection(Lgnu/trove/TDoubleCollection;)Lgnu/trove/TDoubleCollection;
   * 11 Weak Mutation 35: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;:84 - DeleteField: valuesLgnu/trove/TDoubleCollection;
   * 12 Weak Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;:83 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 13 Weak Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;:83 - DeleteStatement: valueCollection()Lgnu/trove/TDoubleCollection;
   * 14 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;: I4 Branch 3 IFNONNULL L82 - false
   */

  @Test
  public void test8()  throws Throwable  {
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Object>(1, 1);
      TUnmodifiableObjectDoubleMap<Object> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Object>((TObjectDoubleMap<Object>) tObjectDoubleHashMap0);
      TUnmodifiableDoubleCollection tUnmodifiableDoubleCollection0 = (TUnmodifiableDoubleCollection)tUnmodifiableObjectDoubleMap0.valueCollection();
      assertNotNull(tUnmodifiableDoubleCollection0);
      
      TUnmodifiableDoubleCollection tUnmodifiableDoubleCollection1 = (TUnmodifiableDoubleCollection)tUnmodifiableObjectDoubleMap0.valueCollection();
      assertSame(tUnmodifiableDoubleCollection1, tUnmodifiableDoubleCollection0);
  }

  //Test case number: 9
  /*
   * 5 covered goals:
   * 1 Weak Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.values()[D:86 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 2 Weak Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.values()[D:86 - DeleteStatement: values()[D
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.values()[D: root-Branch
   * 4 Weak Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.values()[D:86 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 5 Weak Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.values()[D:86 - DeleteStatement: values()[D
   */

  @Test
  public void test9()  throws Throwable  {
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Object>(0, 0, 0);
      TUnmodifiableObjectDoubleMap<Object> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Object>((TObjectDoubleMap<Object>) tObjectDoubleHashMap0);
      double[] doubleArray0 = tUnmodifiableObjectDoubleMap0.values();
      assertNotNull(doubleArray0);
  }

  //Test case number: 10
  /*
   * 5 covered goals:
   * 1 Weak Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.values([D)[D:87 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 2 Weak Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.values([D)[D:87 - DeleteStatement: values([D)[D
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.values([D)[D: root-Branch
   * 4 Weak Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.values([D)[D:87 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 5 Weak Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.values([D)[D:87 - DeleteStatement: values([D)[D
   */

  @Test
  public void test10()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(59);
      TObjectDoubleCustomHashMap<Object> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, (TObjectDoubleMap<?>) tObjectDoubleHashMap0);
      TUnmodifiableObjectDoubleMap<Object> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Object>((TObjectDoubleMap<Object>) tObjectDoubleCustomHashMap0);
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = tUnmodifiableObjectDoubleMap0.values(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
  }

  //Test case number: 11
  /*
   * 12 covered goals:
   * 1 Weak Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.equals(Ljava/lang/Object;)Z:89 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 2 Weak Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 3 Weak Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 4 Weak Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.equals(Ljava/lang/Object;)Z:89 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 5 Weak Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 0 -> 1
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - false
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - true
   * 8 Weak Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.equals(Ljava/lang/Object;)Z:89 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 9 Weak Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 10 Weak Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 11 Weak Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.equals(Ljava/lang/Object;)Z:89 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 12 Weak Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 0 -> 1
   */

  @Test
  public void test11()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>((-691), (-691));
      TUnmodifiableObjectDoubleMap<Integer> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Integer>((TObjectDoubleMap<Integer>) tObjectDoubleHashMap0);
      boolean boolean0 = tUnmodifiableObjectDoubleMap0.equals((Object) "{}");
      assertEquals(false, boolean0);
  }

  //Test case number: 12
  /*
   * 5 covered goals:
   * 1 Weak Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.hashCode()I:90 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 2 Weak Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.hashCode()I:90 - DeleteStatement: hashCode()I
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.hashCode()I: root-Branch
   * 4 Weak Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.hashCode()I:90 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 5 Weak Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.hashCode()I:90 - DeleteStatement: hashCode()I
   */

  @Test
  public void test12()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectDoubleCustomHashMap<Integer> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, 117, (float) 117);
      TUnmodifiableObjectDoubleMap<Integer> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Integer>((TObjectDoubleMap<Integer>) tObjectDoubleCustomHashMap0);
      int int0 = tUnmodifiableObjectDoubleMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 13
  /*
   * 5 covered goals:
   * 1 Weak Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.toString()Ljava/lang/String;:91 - DeleteStatement: toString()Ljava/lang/String;
   * 2 Weak Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.toString()Ljava/lang/String;:91 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.toString()Ljava/lang/String;: root-Branch
   * 4 Weak Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.toString()Ljava/lang/String;:91 - DeleteStatement: toString()Ljava/lang/String;
   * 5 Weak Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.toString()Ljava/lang/String;:91 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   */

  @Test
  public void test13()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>();
      TUnmodifiableObjectDoubleMap<Double> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Double>((TObjectDoubleMap<Double>) tObjectDoubleHashMap0);
      String string0 = tUnmodifiableObjectDoubleMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 14
  /*
   * 5 covered goals:
   * 1 Weak Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z:95 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z
   * 2 Weak Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z:95 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   * 4 Weak Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z:95 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z
   * 5 Weak Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z:95 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   */

  @Test
  public void test14()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(1, 1);
      TUnmodifiableObjectDoubleMap<Integer> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Integer>((TObjectDoubleMap<Integer>) tObjectDoubleHashMap0);
      Integer[] integerArray0 = new Integer[17];
      ToObjectArrayProceedure<Integer> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Integer>(integerArray0);
      boolean boolean0 = tUnmodifiableObjectDoubleMap0.forEachKey((TObjectProcedure<? super Integer>) toObjectArrayProceedure0);
      assertEquals(true, boolean0);
  }

  //Test case number: 15
  /*
   * 5 covered goals:
   * 1 Weak Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:98 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z
   * 2 Weak Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:98 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   * 4 Weak Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:98 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z
   * 5 Weak Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:98 - DeleteField: mLgnu/trove/map/TObjectDoubleMap;
   */

  @Test
  public void test15()  throws Throwable  {
      TObjectDoubleHashMap<String> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<String>(0, 0, 0);
      TUnmodifiableObjectDoubleMap<String> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<String>((TObjectDoubleMap<String>) tObjectDoubleHashMap0);
      boolean boolean0 = tUnmodifiableObjectDoubleMap0.forEachValue((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 16
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V: I17 Branch 1 IFNONNULL L53 - false
   * 2 Weak Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V:53 - ReplaceComparisonOperator != null -> = null
   */

  @Test
  public void test16()  throws Throwable  {
      TUnmodifiableObjectDoubleMap<String> tUnmodifiableObjectDoubleMap0 = null;
      try {
        tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<String>((TObjectDoubleMap<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
