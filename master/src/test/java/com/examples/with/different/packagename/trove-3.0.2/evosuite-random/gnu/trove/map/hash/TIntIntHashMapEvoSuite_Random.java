/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TIntIntMap;
import gnu.trove.map.hash.TIntIntHashMap;
import gnu.trove.procedure.TIntProcedure;
import java.io.File;
import java.io.IOException;
import java.io.ObjectOutput;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntIntHashMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      int int0 = 756;
      tIntIntHashMap0.put(int0, int0);
      int int1 = 700;
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(int1);
      int[] intArray0 = new int[10];
      intArray0[0] = int1;
      intArray0[1] = int1;
      intArray0[2] = int1;
      intArray0[0] = int1;
      intArray0[1] = int1;
      intArray0[2] = int1;
      intArray0[3] = int1;
      intArray0[4] = int1;
      intArray0[5] = int1;
      intArray0[6] = int1;
      intArray0[7] = int1;
      intArray0[8] = int1;
      intArray0[9] = int1;
      intArray0[3] = int1;
      tIntIntHashMap1.toString();
      intArray0[4] = int1;
      intArray0[5] = int1;
      byte[] byteArray0 = new byte[1];
      TIntIntHashMap tIntIntHashMap2 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap1);
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byteArray0[0] = byte0;
      byteArray0[0] = byte0;
      tIntIntHashMap1._states = byteArray0;
      TIntIntHashMap tIntIntHashMap3 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap1);
      intArray0[6] = int1;
      intArray0[7] = int1;
      intArray0[8] = int1;
      intArray0[9] = int1;
      // Undeclared exception!
      try {
        tIntIntHashMap1.values(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1438
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      String string0 = "J";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: J://JJ#J
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 365;
      float float0 = (-1877.9513F);
      int int1 = (-1);
      int int2 = 0;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, float0, int1, int2);
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(int0);
      tIntIntHashMap1.clear();
      int int3 = 318;
      tIntIntHashMap1.size();
      int int4 = tIntIntHashMap1.remove(int3);
      assertEquals(761, tIntIntHashMap1.capacity());
      
      int int5 = (-1143);
      tIntIntHashMap0.containsKey(int5);
      tIntIntHashMap1.trimToSize();
      int[] intArray0 = new int[6];
      int int6 = (-1040);
      tIntIntHashMap1.adjustValue(int0, int6);
      intArray0[0] = int0;
      intArray0[1] = int4;
      intArray0[2] = int4;
      intArray0[3] = int4;
      tIntIntHashMap0.compact();
      intArray0[4] = int0;
      intArray0[5] = int3;
      int[] intArray1 = tIntIntHashMap1.keys(intArray0);
      assertEquals(3, tIntIntHashMap1.capacity());
      assertSame(intArray1, intArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      TIntIntMap tIntIntMap0 = null;
      TIntIntHashMap tIntIntHashMap0 = null;
      try {
        tIntIntHashMap0 = new TIntIntHashMap(tIntIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 824;
      float float0 = 1650.7303F;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, float0);
      boolean boolean0 = tIntIntHashMap0.containsValue(int0);
      assertEquals(false, boolean0);
      
      int int1 = 49;
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(int1);
      int int2 = (-628);
      int int3 = tIntIntHashMap1.get(int2);
      assertEquals(0, int3);
      assertEquals(137, tIntIntHashMap1.capacity());
  }

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0[1]);
      tIntIntHashMap0.compact();
      assertEquals("{}", tIntIntHashMap0.toString());
      
      int int2 = 1578;
      intArray0[2] = int2;
      int int3 = 148;
      intArray0[3] = int3;
      int int4 = 1622;
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(int3, intArray0[3]);
      boolean boolean0 = tIntIntHashMap1.containsValue(intArray0[2]);
      intArray0[4] = int4;
      int int5 = 1303;
      tIntIntHashMap1.reenableAutoCompaction(boolean0);
      intArray0[5] = int5;
      int int6 = 0;
      intArray0[6] = int6;
      tIntIntHashMap1.ensureCapacity(int2);
      int int7 = (-741);
      int int8 = (-69);
      tIntIntHashMap1.putIfAbsent(int4, int8);
      assertEquals(17, tIntIntHashMap1.capacity());
      
      intArray0[7] = int7;
      TIntIntHashMap tIntIntHashMap2 = new TIntIntHashMap(intArray0, intArray0);
      tIntIntHashMap2.isEmpty();
      int int9 = (-507);
      TIntIntHashMap tIntIntHashMap3 = new TIntIntHashMap(int9, int9);
      tIntIntHashMap3.tempDisableAutoCompaction();
      assertFalse(tIntIntHashMap3.equals(tIntIntHashMap2));
  }

  @Test
  public void test6()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      int int0 = 1203;
      tIntIntHashMap0.ensureCapacity(int0);
      tIntIntHashMap0.compact();
      tIntIntHashMap0.setAutoCompactionFactor((float) int0);
      int int1 = 718678369;
      int int2 = 0;
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(int1, int1, int1, int2);
      tIntIntHashMap1.hashCode();
      int int3 = (-1968);
      int int4 = (-1674);
      TIntIntHashMap tIntIntHashMap2 = new TIntIntHashMap(int1, int1, int3, int4);
      assertEquals(0, tIntIntHashMap2.size());
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-1);
      float float0 = (-1.0F);
      int int1 = 433;
      int[] intArray0 = new int[7];
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0);
      int int2 = (-1);
      int int3 = 49;
      int int4 = (-1963);
      tIntIntHashMap0.adjustOrPutValue(int2, int3, int4);
      intArray0[0] = int1;
      intArray0[1] = int1;
      tIntIntHashMap0.toString();
      int int5 = 628;
      ObjectOutput objectOutput0 = null;
      // Undeclared exception!
      try {
        tIntIntHashMap0.writeExternal(objectOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 1974;
          TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0);
          TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap();
          int int1 = (-821);
          tIntIntHashMap1.clear();
          tIntIntHashMap1.containsKey(int1);
          float float0 = 6.6360896E8F;
          TIntIntHashMap tIntIntHashMap2 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap1);
          int int2 = 1869;
          tIntIntHashMap1.keys(tIntIntHashMap0._set);
          tIntIntHashMap0.ensureCapacity(int2);
          tIntIntHashMap2.keySet();
          tIntIntHashMap1.putAll((TIntIntMap) tIntIntHashMap2);
          String string0 = "[N((&E~xn";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      int[] intArray0 = tIntIntHashMap0.keys();
      assertNotNull(intArray0);
      
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap0);
      TIntIntHashMap tIntIntHashMap2 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap1);
      assertEquals(23, tIntIntHashMap2.capacity());
      
      tIntIntHashMap2.trimToSize();
      TIntIntHashMap tIntIntHashMap3 = new TIntIntHashMap();
      int int0 = 469;
      tIntIntHashMap3.put(int0, int0);
      tIntIntHashMap3.containsKey(int0);
      assertEquals(1, tIntIntHashMap3.size());
      
      tIntIntHashMap0.tempDisableAutoCompaction();
      assertFalse(tIntIntHashMap0.equals(tIntIntHashMap3));
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-584);
      int[] intArray0 = new int[9];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = int0;
      intArray0[8] = int0;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      assertEquals(1, tIntIntHashMap0.size());
      assertEquals("{-584=-584}", tIntIntHashMap0.toString());
      assertEquals(23, tIntIntHashMap0.capacity());
      
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(int0);
      tIntIntHashMap1.iterator();
      assertFalse(tIntIntHashMap1.equals(tIntIntHashMap0));
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>((Integer) int0, (Integer) int0);
      abstractMap_SimpleEntry0.setValue((Integer) int0);
      abstractMap_SimpleEntry0.setValue((Integer) int0);
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap();
      TIntIntHashMap tIntIntHashMap2 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap1);
      TIntIntHashMap tIntIntHashMap3 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap2);
      assertEquals(23, tIntIntHashMap2.capacity());
      
      float float0 = 10.0F;
      int int1 = 0;
      TIntIntHashMap tIntIntHashMap4 = new TIntIntHashMap(int1);
      int int2 = (-1);
      tIntIntHashMap4.values();
      int int3 = 0;
      tIntIntHashMap4.valueCollection();
      tIntIntHashMap2.compact();
      tIntIntHashMap4.iterator();
      String string0 = "s";
      AbstractMap.SimpleImmutableEntry<String, TIntIntHashMap> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, TIntIntHashMap>(string0, tIntIntHashMap2);
      abstractMap_SimpleImmutableEntry0.getValue();
      boolean boolean0 = tIntIntHashMap2.isEmpty();
      tIntIntHashMap1.putAll((TIntIntMap) tIntIntHashMap2);
      assertEquals(3, tIntIntHashMap2.capacity());
      
      tIntIntHashMap4.contains(int3);
      TIntIntHashMap tIntIntHashMap5 = new TIntIntHashMap(int0, float0, int2, int3);
      int int4 = 0;
      tIntIntHashMap4.get(int4);
      boolean boolean1 = tIntIntHashMap5.contains(int2);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 0;
      float float0 = 823.3356F;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, float0);
      tIntIntHashMap0.ensureCapacity(int0);
      tIntIntHashMap0.valueCollection();
      TIntProcedure tIntProcedure0 = null;
      int int1 = 1372;
      tIntIntHashMap0.get(int1);
      tIntIntHashMap0.forEachKey(tIntProcedure0);
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap();
      int int2 = 549;
      tIntIntHashMap1.getNoEntryKey();
      tIntIntHashMap0.trimToSize();
      int int3 = (-1);
      tIntIntHashMap1.adjustOrPutValue(int2, int2, int3);
      int int4 = (-538);
      int int5 = (-1);
      tIntIntHashMap1.put(int4, int5);
      assertEquals(2, tIntIntHashMap1.size());
      
      tIntIntHashMap1.clear();
      assertEquals("{}", tIntIntHashMap1.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 629;
      float float0 = 0.0F;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, float0);
      int int1 = 568;
      int int2 = 1083;
      int int3 = 0;
      tIntIntHashMap0.adjustOrPutValue(int1, int2, int3);
      assertEquals(false, tIntIntHashMap0.isEmpty());
      
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap();
      tIntIntHashMap1.clear();
      assertFalse(tIntIntHashMap1.equals(tIntIntHashMap0));
  }

  @Test
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 1;
      intArray0[0] = int0;
      int int1 = 0;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0[0]);
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(int1, intArray0[0], int1, int0);
      tIntIntHashMap0.putAll((TIntIntMap) tIntIntHashMap1);
      TIntIntHashMap tIntIntHashMap2 = new TIntIntHashMap(int0);
      tIntIntHashMap2.setAutoCompactionFactor((float) intArray0[0]);
      tIntIntHashMap0.remove(int1);
      intArray0[1] = int1;
      int int2 = 1749;
      TIntIntHashMap tIntIntHashMap3 = new TIntIntHashMap(int2, int2);
      int int3 = (-229);
      tIntIntHashMap2.containsKey(int0);
      tIntIntHashMap2.adjustOrPutValue(int3, intArray0[0], int3);
      intArray0[2] = int3;
      int int4 = 0;
      TIntIntHashMap tIntIntHashMap4 = new TIntIntHashMap(int4);
      int int5 = 55;
      tIntIntHashMap4.capacity();
      intArray0[3] = int5;
      int int6 = 524;
      intArray0[4] = int6;
      int int7 = 0;
      intArray0[5] = int7;
      TIntIntHashMap tIntIntHashMap5 = new TIntIntHashMap(intArray0, intArray0);
      tIntIntHashMap5.trimToSize();
      tIntIntHashMap2.trimToSize();
      assertFalse(tIntIntHashMap2.equals(tIntIntHashMap1));
      
      TIntIntHashMap tIntIntHashMap6 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap4);
      int int8 = 65;
      tIntIntHashMap4.remove(int8);
      boolean boolean0 = tIntIntHashMap5.equals((Object) tIntIntHashMap6);
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 2042;
      float float0 = 1.0F;
      int int1 = (-1688);
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, float0, int0, int1);
      int[] intArray0 = new int[7];
      intArray0[0] = int1;
      intArray0[1] = int1;
      intArray0[2] = int0;
      intArray0[3] = int1;
      intArray0[4] = int0;
      intArray0[5] = int1;
      intArray0[6] = int1;
      int[] intArray1 = tIntIntHashMap0.keys(intArray0);
      assertEquals(2081, tIntIntHashMap0.capacity());
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
  }
}
