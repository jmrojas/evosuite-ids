/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TByteCollection;
import gnu.trove.function.TByteFunction;
import gnu.trove.map.TIntByteMap;
import gnu.trove.map.hash.TIntByteHashMap;
import gnu.trove.procedure.TByteProcedure;
import gnu.trove.procedure.TIntByteProcedure;
import gnu.trove.procedure.TIntProcedure;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntByteHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TIntByteHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TIntByteHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TIntByteHashMap.keySet()Lgnu/trove/set/TIntSet;: root-Branch
   * 4 gnu.trove.map.hash.TIntByteHashMap.setUp(I)I: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap();
      tIntByteHashMap0.keySet();
      assertEquals(23, tIntByteHashMap0.capacity());
  }

  //Test case number: 1
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.forEachKey(Lgnu/trove/procedure/TIntProcedure;)Z: root-Branch
   * 2 gnu.trove.map.hash.TIntByteHashMap.put(IB)B: root-Branch
   * 3 gnu.trove.map.hash.TIntByteHashMap.doPut(IBI)B: I12 Branch 40 IFGE L214 - true
   * 4 gnu.trove.map.hash.TIntByteHashMap.doPut(IBI)B: I12 Branch 40 IFGE L214 - false
   * 5 gnu.trove.map.hash.TIntByteHashMap.doPut(IBI)B: I41 Branch 41 IFEQ L221 - true
   * 6 gnu.trove.map.hash.TIntByteHashMap.doPut(IBI)B: I41 Branch 41 IFEQ L221 - false
   * 7 gnu.trove.map.hash.TIntByteHashMap.<init>([I[B)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 8 gnu.trove.map.hash.TIntByteHashMap.<init>([I[B)V: I24 Branch 33 IF_ICMPGE L119 - false
   */

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[2];
      byte[] byteArray0 = new byte[3];
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(intArray0, byteArray0);
      // Undeclared exception!
      try {
        tIntByteHashMap0.forEachKey((TIntProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 2
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.iterator()Lgnu/trove/iterator/TIntByteIterator;: root-Branch
   * 2 gnu.trove.map.hash.TIntByteHashMap$TIntByteHashIterator.<init>(Lgnu/trove/map/hash/TIntByteHashMap;Lgnu/trove/map/hash/TIntByteHashMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TIntByteHashMap.<init>(Lgnu/trove/map/TIntByteMap;)V: I10 Branch 34 IFEQ L133 - false
   * 4 gnu.trove.map.hash.TIntByteHashMap.<init>(Lgnu/trove/map/TIntByteMap;)V: I38 Branch 35 IFEQ L139 - true
   * 5 gnu.trove.map.hash.TIntByteHashMap.<init>(Lgnu/trove/map/TIntByteMap;)V: I50 Branch 36 IFEQ L143 - true
   * 6 gnu.trove.map.hash.TIntByteHashMap.putAll(Lgnu/trove/map/TIntByteMap;)V: I15 Branch 43 IFEQ L243 - true
   * 7 gnu.trove.map.hash.TIntByteHashMap.<init>(I)V: root-Branch
   */

//   @Test
//   public void test2()  throws Throwable  {
//       TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-2));
//       TIntByteHashMap tIntByteHashMap1 = new TIntByteHashMap((TIntByteMap) tIntByteHashMap0);
//       assertEquals(23, tIntByteHashMap1.capacity());
//       assertEquals(0, tIntByteHashMap1.getNoEntryKey());
//       assertEquals(0, tIntByteHashMap1.getNoEntryValue());
//   }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.containsKey(I)Z: root-Branch
   * 2 gnu.trove.map.hash.TIntByteHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-928), (-928));
      boolean boolean0 = tIntByteHashMap0.containsKey((-928));
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TIntByteHashMap.remove(I)B: I14 Branch 46 IFLT L276 - false
   */

  @Test
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-18);
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap();
      TIntByteHashMap tIntByteHashMap1 = new TIntByteHashMap(intArray0, tIntByteHashMap0._states);
      assertEquals(2, tIntByteHashMap1.size());
      
      byte byte0 = tIntByteHashMap1.remove((-18));
      assertEquals(1, tIntByteHashMap1.size());
      assertEquals((byte)0, byte0);
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.valueCollection()Lgnu/trove/TByteCollection;: root-Branch
   * 2 gnu.trove.map.hash.TIntByteHashMap$TValueView.<init>(Lgnu/trove/map/hash/TIntByteHashMap;)V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-2));
      TByteCollection tByteCollection0 = tIntByteHashMap0.valueCollection();
      assertEquals(0, tByteCollection0.size());
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntByteHashMap.clear()V: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-696));
      tIntByteHashMap0.clear();
      assertEquals("{}", tIntByteHashMap0.toString());
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.increment(I)Z: root-Branch
   * 2 gnu.trove.map.hash.TIntByteHashMap.adjustValue(IB)Z: I9 Branch 71 IFGE L477 - false
   */

  @Test
  public void test7()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap();
      boolean boolean0 = tIntByteHashMap0.increment(0);
      assertEquals(false, boolean0);
      assertEquals(23, tIntByteHashMap0.capacity());
  }

  //Test case number: 8
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.<init>(Lgnu/trove/map/TIntByteMap;)V: I38 Branch 35 IFEQ L139 - false
   * 2 gnu.trove.map.hash.TIntByteHashMap.<init>(Lgnu/trove/map/TIntByteMap;)V: I50 Branch 36 IFEQ L143 - false
   * 3 gnu.trove.map.hash.TIntByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 4 gnu.trove.map.hash.TIntByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 5 gnu.trove.map.hash.TIntByteHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 6 gnu.trove.map.hash.TIntByteHashMap.<init>(Lgnu/trove/map/TIntByteMap;)V: I10 Branch 34 IFEQ L133 - false
   * 7 gnu.trove.map.hash.TIntByteHashMap.<init>(IFIB)V: root-Branch
   */

//   @Test
//   public void test8()  throws Throwable  {
//       TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-1006), (float) (-1006), (-1006), (byte) (-90));
//       TIntByteHashMap tIntByteHashMap1 = new TIntByteHashMap((TIntByteMap) tIntByteHashMap0);
//       assertEquals(-90, tIntByteHashMap1.getNoEntryValue());
//       assertEquals(-1006, tIntByteHashMap1.getNoEntryKey());
//       assertEquals(3, tIntByteHashMap1.capacity());
//   }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntByteHashMap.putIfAbsent(IB)B: I9 Branch 39 IFGE L205 - false
   */

  @Test
  public void test9()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-928), (-928));
      int[] intArray0 = new int[6];
      intArray0[0] = (-928);
      TIntByteHashMap tIntByteHashMap1 = new TIntByteHashMap(intArray0, tIntByteHashMap0._states);
      byte byte0 = tIntByteHashMap1.putIfAbsent((-928), (byte)1);
      assertEquals(2, tIntByteHashMap1.size());
      assertEquals(17, tIntByteHashMap1.capacity());
      assertEquals((byte)0, byte0);
      assertEquals("{-928=0, 0=0}", tIntByteHashMap1.toString());
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - false
   * 2 gnu.trove.map.hash.TIntByteHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   */

  @Test
  public void test10()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-2));
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>((int) (byte)112);
      hashMap0.put((Integer) 0, (Byte) (byte)112);
      tIntByteHashMap0.putAll((Map<? extends Integer, ? extends Byte>) hashMap0);
      assertEquals("{0=112}", tIntByteHashMap0.toString());
      assertEquals(false, tIntByteHashMap0.isEmpty());
  }

  //Test case number: 11
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.get(I)B: I9 Branch 44 IFGE L253 - true
   * 2 gnu.trove.map.hash.TIntByteHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 3 gnu.trove.map.hash.TIntByteHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 4 gnu.trove.map.hash.TIntByteHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 5 gnu.trove.map.hash.TIntByteHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 6 gnu.trove.map.hash.TIntByteHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 7 gnu.trove.map.hash.TIntByteHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 8 gnu.trove.map.hash.TIntByteHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-696));
      tIntByteHashMap0.put((int) (byte) (-99), (byte) (-99));
      boolean boolean0 = tIntByteHashMap0.equals((Object) tIntByteHashMap0);
      assertEquals(false, tIntByteHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.get(I)B: I9 Branch 44 IFGE L253 - false
   * 2 gnu.trove.map.hash.TIntByteHashMap.values()[B: I27 Branch 52 IFLE L343 - true
   * 3 gnu.trove.map.hash.TIntByteHashMap.values()[B: I27 Branch 52 IFLE L343 - false
   * 4 gnu.trove.map.hash.TIntByteHashMap.values()[B: I34 Branch 53 IF_ICMPNE L344 - true
   * 5 gnu.trove.map.hash.TIntByteHashMap.values()[B: I34 Branch 53 IF_ICMPNE L344 - false
   * 6 gnu.trove.map.hash.TIntByteHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - false
   * 7 gnu.trove.map.hash.TIntByteHashMap.equals(Ljava/lang/Object;)Z: I87 Branch 79 IF_ICMPEQ L1200 - false
   * 8 gnu.trove.map.hash.TIntByteHashMap.equals(Ljava/lang/Object;)Z: I90 Branch 80 IF_ICMPEQ L1200 - true
   * 9 gnu.trove.map.hash.TIntByteHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 10 gnu.trove.map.hash.TIntByteHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 11 gnu.trove.map.hash.TIntByteHashMap.adjustOrPutValue(IBB)B: I9 Branch 72 IFGE L491 - true
   * 12 gnu.trove.map.hash.TIntByteHashMap.adjustOrPutValue(IBB)B: I59 Branch 73 IFEQ L502 - false
   */

  @Test
  public void test12()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-1), (-1));
      tIntByteHashMap0.adjustOrPutValue((int) (byte)3, (byte)3, (byte)3);
      byte[] byteArray0 = tIntByteHashMap0.values();
      TIntByteHashMap tIntByteHashMap1 = new TIntByteHashMap(tIntByteHashMap0._set, byteArray0);
      boolean boolean0 = tIntByteHashMap0.equals((Object) tIntByteHashMap1);
      assertEquals(7, tIntByteHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 13
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   * 2 gnu.trove.map.hash.TIntByteHashMap.iterator()Lgnu/trove/iterator/TIntByteIterator;: root-Branch
   * 3 gnu.trove.map.hash.TIntByteHashMap.putAll(Lgnu/trove/map/TIntByteMap;)V: I15 Branch 43 IFEQ L243 - true
   * 4 gnu.trove.map.hash.TIntByteHashMap.putAll(Lgnu/trove/map/TIntByteMap;)V: I15 Branch 43 IFEQ L243 - false
   * 5 gnu.trove.map.hash.TIntByteHashMap$TIntByteHashIterator.value()B: root-Branch
   * 6 gnu.trove.map.hash.TIntByteHashMap$TIntByteHashIterator.<init>(Lgnu/trove/map/hash/TIntByteHashMap;Lgnu/trove/map/hash/TIntByteHashMap;)V: root-Branch
   * 7 gnu.trove.map.hash.TIntByteHashMap$TIntByteHashIterator.advance()V: root-Branch
   * 8 gnu.trove.map.hash.TIntByteHashMap$TIntByteHashIterator.key()I: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-928), (-928));
      TIntByteHashMap tIntByteHashMap1 = new TIntByteHashMap(tIntByteHashMap0._set, tIntByteHashMap0._states);
      tIntByteHashMap0.putAll((TIntByteMap) tIntByteHashMap1);
      boolean boolean0 = tIntByteHashMap0.isEmpty();
      assertEquals(7, tIntByteHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntByteHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test14()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(694);
      boolean boolean0 = tIntByteHashMap0.isEmpty();
      assertEquals(1439, tIntByteHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntByteHashMap.remove(I)B: I14 Branch 46 IFLT L276 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-27), (-27));
      byte byte0 = tIntByteHashMap0.remove((int) (byte)93);
      assertEquals((byte)0, byte0);
      assertEquals(0, tIntByteHashMap0.size());
  }

  //Test case number: 16
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.keys()[I: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TIntByteHashMap.keys()[I: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TIntByteHashMap.keys()[I: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TIntByteHashMap.keys()[I: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[4];
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-1006), (float) (-1006), (-1006), (byte) (-90));
      TIntByteHashMap tIntByteHashMap1 = new TIntByteHashMap(intArray0, tIntByteHashMap0._states);
      int[] intArray1 = tIntByteHashMap1.keys();
      assertEquals(1, tIntByteHashMap1.size());
      assertEquals("{0=0}", tIntByteHashMap1.toString());
      assertNotNull(intArray1);
      assertEquals(11, tIntByteHashMap1.capacity());
      assertFalse(tIntByteHashMap1.equals(tIntByteHashMap0));
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.keys([I)[I: I10 Branch 49 IF_ICMPGE L315 - true
   * 2 gnu.trove.map.hash.TIntByteHashMap.keys([I)[I: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TIntByteHashMap.keys([I)[I: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TIntByteHashMap.keys([I)[I: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-1), (-1));
      int[] intArray0 = tIntByteHashMap0.keys(tIntByteHashMap0._set);
      assertNotNull(intArray0);
  }

  //Test case number: 18
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.keys([I)[I: I10 Branch 49 IF_ICMPGE L315 - false
   * 2 gnu.trove.map.hash.TIntByteHashMap.keys([I)[I: I44 Branch 51 IF_ICMPNE L323 - false
   * 3 gnu.trove.map.hash.TIntByteHashMap.keys([I)[I: I37 Branch 50 IFLE L322 - true
   * 4 gnu.trove.map.hash.TIntByteHashMap.keys([I)[I: I37 Branch 50 IFLE L322 - false
   * 5 gnu.trove.map.hash.TIntByteHashMap.keys([I)[I: I44 Branch 51 IF_ICMPNE L323 - true
   * 6 gnu.trove.map.hash.TIntByteHashMap.putIfAbsent(IB)B: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-18);
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap();
      TIntByteHashMap tIntByteHashMap1 = new TIntByteHashMap(intArray0, tIntByteHashMap0._states);
      tIntByteHashMap1.putIfAbsent((int) (byte) (-123), (byte) (-123));
      tIntByteHashMap1.keys(intArray0);
      assertEquals(3, tIntByteHashMap1.size());
      assertEquals("{-123=-123, -18=0, 0=0}", tIntByteHashMap1.toString());
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.values([B)[B: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TIntByteHashMap.values([B)[B: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TIntByteHashMap.values([B)[B: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TIntByteHashMap.values([B)[B: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test19()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-928), (-928));
      byte[] byteArray0 = tIntByteHashMap0.values(tIntByteHashMap0._states);
      assertNotNull(byteArray0);
  }

  //Test case number: 20
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.values([B)[B: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TIntByteHashMap.values([B)[B: I44 Branch 56 IF_ICMPNE L363 - false
   * 3 gnu.trove.map.hash.TIntByteHashMap.values([B)[B: I37 Branch 55 IFLE L362 - true
   * 4 gnu.trove.map.hash.TIntByteHashMap.values([B)[B: I37 Branch 55 IFLE L362 - false
   * 5 gnu.trove.map.hash.TIntByteHashMap.values([B)[B: I44 Branch 56 IF_ICMPNE L363 - true
   * 6 gnu.trove.map.hash.TIntByteHashMap.putIfAbsent(IB)B: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[11];
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(694);
      intArray0[0] = 694;
      tIntByteHashMap0.trimToSize();
      intArray0[2] = (int) (byte) (-119);
      TIntByteHashMap tIntByteHashMap1 = new TIntByteHashMap(intArray0, tIntByteHashMap0._states);
      tIntByteHashMap1.putIfAbsent((int) (byte) (-1), (byte) (-119));
      tIntByteHashMap1.values(tIntByteHashMap0._states);
      assertEquals(3, tIntByteHashMap0.capacity());
      assertEquals("{-1=-119, 694=0, -119=0, 0=0}", tIntByteHashMap1.toString());
  }

  //Test case number: 21
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.containsValue(B)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TIntByteHashMap.containsValue(B)Z: I30 Branch 59 IF_ICMPNE L377 - true
   * 3 gnu.trove.map.hash.TIntByteHashMap.containsValue(B)Z: I18 Branch 57 IFLE L376 - true
   * 4 gnu.trove.map.hash.TIntByteHashMap.containsValue(B)Z: I18 Branch 57 IFLE L376 - false
   * 5 gnu.trove.map.hash.TIntByteHashMap.containsValue(B)Z: I25 Branch 58 IF_ICMPNE L377 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-696));
      tIntByteHashMap0.put((int) (byte) (-99), (byte) (-99));
      boolean boolean0 = tIntByteHashMap0.containsValue((byte)0);
      assertEquals("{-99=-99}", tIntByteHashMap0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 22
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.containsValue(B)Z: I30 Branch 59 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TIntByteHashMap.containsValue(B)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TIntByteHashMap.containsValue(B)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 4 gnu.trove.map.hash.TIntByteHashMap.containsValue(B)Z: I25 Branch 58 IF_ICMPNE L377 - false
   */

  @Test
  public void test22()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-696));
      TIntByteHashMap tIntByteHashMap1 = new TIntByteHashMap(tIntByteHashMap0._set, tIntByteHashMap0._states);
      boolean boolean0 = tIntByteHashMap1.containsValue((byte)0);
      assertEquals(7, tIntByteHashMap1.capacity());
      assertEquals(1, tIntByteHashMap1.size());
      assertEquals("{0=0}", tIntByteHashMap1.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TIntByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TIntByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test23()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((int) (byte)16);
      boolean boolean0 = tIntByteHashMap0.forEachValue((TByteProcedure) null);
      assertEquals(37, tIntByteHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TIntByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TIntByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[2];
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap();
      TIntByteHashMap tIntByteHashMap1 = new TIntByteHashMap(intArray0, tIntByteHashMap0._states);
      // Undeclared exception!
      try {
        tIntByteHashMap1.forEachValue((TByteProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TIntByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TIntByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

//   @Test
//   public void test25()  throws Throwable  {
//       TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(0);
//       tIntByteHashMap0.transformValues((TByteFunction) null);
//       assertEquals(0.5F, tIntByteHashMap0.getAutoCompactionFactor(), 0.01F);
//   }

  //Test case number: 26
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TIntByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TIntByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   * 4 gnu.trove.map.hash.TIntByteHashMap.adjustOrPutValue(IBB)B: I9 Branch 72 IFGE L491 - true
   * 5 gnu.trove.map.hash.TIntByteHashMap.adjustOrPutValue(IBB)B: I59 Branch 73 IFEQ L502 - false
   */

  @Test
  public void test26()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-27), (-27));
      tIntByteHashMap0.adjustOrPutValue((-27), (byte)93, (byte)93);
      // Undeclared exception!
      try {
        tIntByteHashMap0.transformValues((TByteFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.retainEntries(Lgnu/trove/procedure/TIntByteProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TIntByteHashMap.retainEntries(Lgnu/trove/procedure/TIntByteProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TIntByteHashMap.retainEntries(Lgnu/trove/procedure/TIntByteProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test27()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-1006), (float) (-1006), (-1006), (byte) (-90));
      boolean boolean0 = tIntByteHashMap0.retainEntries((TIntByteProcedure) null);
      assertEquals("{}", tIntByteHashMap0.toString());
      assertEquals(3, tIntByteHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 28
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.retainEntries(Lgnu/trove/procedure/TIntByteProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TIntByteHashMap.retainEntries(Lgnu/trove/procedure/TIntByteProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TIntByteHashMap.retainEntries(Lgnu/trove/procedure/TIntByteProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap();
      TIntByteHashMap tIntByteHashMap1 = new TIntByteHashMap(tIntByteHashMap0._set, tIntByteHashMap0._states);
      // Undeclared exception!
      try {
        tIntByteHashMap1.retainEntries((TIntByteProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.adjustOrPutValue(IBB)B: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TIntByteHashMap.adjustOrPutValue(IBB)B: I59 Branch 73 IFEQ L502 - true
   */

  @Test
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[6];
      byte[] byteArray0 = new byte[7];
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(intArray0, byteArray0);
      byte byte0 = tIntByteHashMap0.adjustOrPutValue(0, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
      assertEquals(1, tIntByteHashMap0.size());
      assertEquals(17, tIntByteHashMap0.capacity());
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntByteHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   */

  @Test
  public void test30()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(0);
      boolean boolean0 = tIntByteHashMap0.equals((Object) (byte)79);
      assertEquals(false, boolean0);
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntByteHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   */

  @Test
  public void test31()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-928), (-928));
      TIntByteHashMap tIntByteHashMap1 = new TIntByteHashMap(tIntByteHashMap0._set, tIntByteHashMap0._states);
      boolean boolean0 = tIntByteHashMap1.equals((Object) tIntByteHashMap0);
      assertEquals("{0=0}", tIntByteHashMap1.toString());
      assertFalse(tIntByteHashMap0.equals(tIntByteHashMap1));
      assertEquals(1, tIntByteHashMap1.size());
      assertEquals(false, boolean0);
      assertEquals(7, tIntByteHashMap1.capacity());
  }

  //Test case number: 32
  /*
   * 16 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.equals(Ljava/lang/Object;)Z: I90 Branch 80 IF_ICMPEQ L1200 - false
   * 2 gnu.trove.map.hash.TIntByteHashMap.increment(I)Z: root-Branch
   * 3 gnu.trove.map.hash.TIntByteHashMap.<init>()V: root-Branch
   * 4 gnu.trove.map.hash.TIntByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 5 gnu.trove.map.hash.TIntByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 6 gnu.trove.map.hash.TIntByteHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 7 gnu.trove.map.hash.TIntByteHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 8 gnu.trove.map.hash.TIntByteHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 9 gnu.trove.map.hash.TIntByteHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 10 gnu.trove.map.hash.TIntByteHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 11 gnu.trove.map.hash.TIntByteHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 12 gnu.trove.map.hash.TIntByteHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 13 gnu.trove.map.hash.TIntByteHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - false
   * 14 gnu.trove.map.hash.TIntByteHashMap.equals(Ljava/lang/Object;)Z: I87 Branch 79 IF_ICMPEQ L1200 - false
   * 15 gnu.trove.map.hash.TIntByteHashMap.adjustValue(IB)Z: I9 Branch 71 IFGE L477 - true
   * 16 gnu.trove.map.hash.TIntByteHashMap.get(I)B: I9 Branch 44 IFGE L253 - true
   */

  @Test
  public void test32()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap();
      tIntByteHashMap0.put(0, (byte) (-78));
      tIntByteHashMap0.increment(0);
      TIntByteHashMap tIntByteHashMap1 = new TIntByteHashMap((int) (byte)0, (float) (byte)0);
      tIntByteHashMap1.put(0, (byte) (-78));
      boolean boolean0 = tIntByteHashMap0.equals((Object) tIntByteHashMap1);
      assertEquals(false, tIntByteHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 33
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 2 gnu.trove.map.hash.TIntByteHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 3 gnu.trove.map.hash.TIntByteHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   * 4 gnu.trove.map.hash.TIntByteHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test33()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-2));
      int int0 = tIntByteHashMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 34
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 2 gnu.trove.map.hash.TIntByteHashMap.<init>(IF)V: root-Branch
   * 3 gnu.trove.map.hash.TIntByteHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 4 gnu.trove.map.hash.TIntByteHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 5 gnu.trove.map.hash.TIntByteHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   */

  @Test
  public void test34()  throws Throwable  {
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-928), (-928));
      TIntByteHashMap tIntByteHashMap1 = new TIntByteHashMap(tIntByteHashMap0._set, tIntByteHashMap0._states);
      int int0 = tIntByteHashMap1.hashCode();
      assertEquals(1, tIntByteHashMap1.size());
      assertEquals(7, tIntByteHashMap1.capacity());
      assertEquals(0, int0);
      assertEquals("{0=0}", tIntByteHashMap1.toString());
  }

  //Test case number: 35
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap$1.execute(IB)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TIntByteHashMap$1.<init>(Lgnu/trove/map/hash/TIntByteHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 3 gnu.trove.map.hash.TIntByteHashMap$1.execute(IB)Z: I4 Branch 115 IFEQ L1233 - false
   * 4 gnu.trove.map.hash.TIntByteHashMap.toString()Ljava/lang/String;: root-Branch
   * 5 gnu.trove.map.hash.TIntByteHashMap.<init>(IFIB)V: root-Branch
   * 6 gnu.trove.map.hash.TIntByteHashMap.forEachEntry(Lgnu/trove/procedure/TIntByteProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 7 gnu.trove.map.hash.TIntByteHashMap.forEachEntry(Lgnu/trove/procedure/TIntByteProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 8 gnu.trove.map.hash.TIntByteHashMap.forEachEntry(Lgnu/trove/procedure/TIntByteProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 9 gnu.trove.map.hash.TIntByteHashMap.forEachEntry(Lgnu/trove/procedure/TIntByteProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 10 gnu.trove.map.hash.TIntByteHashMap.forEachEntry(Lgnu/trove/procedure/TIntByteProcedure;)Z: I39 Branch 65 IFNE L422 - true
   */

  @Test
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1006);
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap((-1006), (float) (-1006), (-1006), (byte) (-90));
      TIntByteHashMap tIntByteHashMap1 = new TIntByteHashMap(intArray0, tIntByteHashMap0._states);
      String string0 = tIntByteHashMap1.toString();
      assertNotNull(string0);
      assertEquals(11, tIntByteHashMap1.capacity());
      assertEquals(2, tIntByteHashMap1.size());
      assertEquals("{-1006=0, 0=0}", string0);
  }

  //Test case number: 36
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TIntByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 2 gnu.trove.map.hash.TIntByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 3 gnu.trove.map.hash.TIntByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 4 gnu.trove.map.hash.TIntByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 5 gnu.trove.map.hash.TIntByteHashMap.put(IB)B: root-Branch
   * 6 gnu.trove.map.hash.TIntByteHashMap.setUp(I)I: root-Branch
   * 7 gnu.trove.map.hash.TIntByteHashMap.doPut(IBI)B: I12 Branch 40 IFGE L214 - true
   * 8 gnu.trove.map.hash.TIntByteHashMap.doPut(IBI)B: I12 Branch 40 IFGE L214 - false
   * 9 gnu.trove.map.hash.TIntByteHashMap.doPut(IBI)B: I41 Branch 41 IFEQ L221 - true
   * 10 gnu.trove.map.hash.TIntByteHashMap.doPut(IBI)B: I41 Branch 41 IFEQ L221 - false
   * 11 gnu.trove.map.hash.TIntByteHashMap.<init>([I[B)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 12 gnu.trove.map.hash.TIntByteHashMap.<init>([I[B)V: I24 Branch 33 IF_ICMPGE L119 - false
   */

  @Test
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[2];
      byte[] byteArray0 = new byte[3];
      TIntByteHashMap tIntByteHashMap0 = new TIntByteHashMap(intArray0, byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((int) (byte)0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) dataOutputStream0);
      tIntByteHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(1, tIntByteHashMap0.size());
      assertEquals(7, tIntByteHashMap0.capacity());
      assertEquals("{0=0}", tIntByteHashMap0.toString());
  }
}
