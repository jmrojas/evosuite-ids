/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.hash.TObjectHash;
import gnu.trove.list.array.TDoubleArrayList;
import gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap;
import gnu.trove.map.hash.TObjectDoubleHashMap;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.net.URI;
import java.util.AbstractMap;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectDoubleHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-450);
      TObjectDoubleHashMap<String> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<String>(int0);
      int int1 = 1;
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap1 = new TObjectDoubleHashMap<Double>(int1);
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      int int2 = 1854585413;
      TObjectDoubleCustomHashMap<String> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<String>((HashingStrategy<? super String>) identityHashingStrategy0, int2, (float) int0, (double) int2);
      int int3 = 497;
      double double0 = 0.0;
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap2 = new TObjectDoubleHashMap<Object>(int3, (float) int0, double0);
      Object[] objectArray0 = tObjectDoubleHashMap2._set;
      tObjectDoubleHashMap1.containsKey((Object) tObjectDoubleCustomHashMap0);
      int int4 = 197;
      TObjectDoubleHashMap<AbstractMap.SimpleEntry<Double, Double>> tObjectDoubleHashMap3 = new TObjectDoubleHashMap<AbstractMap.SimpleEntry<Double, Double>>();
      AbstractMap.SimpleEntry<Double, Double> abstractMap_SimpleEntry0 = null;
      double double1 = (-63.715992249862026);
      tObjectDoubleHashMap0.keys();
      tObjectDoubleHashMap3.put(abstractMap_SimpleEntry0, double1);
      tObjectDoubleHashMap1.ensureCapacity(int4);
      assertEquals(397, tObjectDoubleHashMap1.capacity());
      assertEquals("{}", tObjectDoubleHashMap1.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      Double double0 = null;
      int int0 = (-878);
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(int0);
      FileDescriptor fileDescriptor0 = FileDescriptor.out;
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) fileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Bad file descriptor
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-1699);
      TObjectDoubleHashMap<TObjectDoubleHashMap<String>> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<TObjectDoubleHashMap<String>>(int0);
      int int1 = 0;
      String string0 = "";
      URI uRI0 = URI.create(string0);
      String string1 = uRI0.toASCIIString();
      tObjectDoubleHashMap0.equals((Object) string1);
      float float0 = (-1975.0593F);
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap1 = new TObjectDoubleHashMap<Double>(int1, float0);
      String string2 = "";
      String string3 = "vVyT)v>E~QN5xN'}Pi";
      File file0 = new File(string3);
      File file1 = file0.getAbsoluteFile();
      file0.getParentFile();
      File file2 = new File(file1, string2);
      File file3 = file2.getCanonicalFile();
      File file4 = file3.getParentFile();
      double double0 = (-1449.4517007495117);
      Double double1 = new Double(double0);
      tObjectDoubleHashMap1.adjustValue(double1, double0);
      // Undeclared exception!
      try {
        File.createTempFile(string2, string2, file4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>();
      double double0 = 976.6633774321198;
      Double double1 = new Double(double0);
      double double2 = tObjectDoubleHashMap0.put(double1, double0);
      assertEquals(1, tObjectDoubleHashMap0.size());
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 133853;
      TObjectDoubleHashMap<TObjectDoubleHashMap<String>> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<TObjectDoubleHashMap<String>>(int0);
      TObjectDoubleHashMap<String> tObjectDoubleHashMap1 = null;
      boolean boolean0 = tObjectDoubleHashMap0.increment(tObjectDoubleHashMap1);
      assertEquals(0.0, tObjectDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals(false, boolean0);
      assertEquals(267713, tObjectDoubleHashMap0.capacity());
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 143;
      TObjectDoubleHashMap<String> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<String>(int0);
      int int1 = 634;
      float float0 = 0.0F;
      boolean boolean0 = false;
      tObjectDoubleHashMap0.reenableAutoCompaction(boolean0);
      TObjectDoubleHashMap<AbstractMap.SimpleImmutableEntry<Double, Double>> tObjectDoubleHashMap1 = new TObjectDoubleHashMap<AbstractMap.SimpleImmutableEntry<Double, Double>>(int1, float0);
      boolean boolean1 = false;
      tObjectDoubleHashMap1.reenableAutoCompaction(boolean1);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      float float1 = 0.0F;
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap2 = new TObjectDoubleHashMap<Double>(int1, float1, (double) int1);
      tObjectDoubleHashMap2.toString();
      locale0.getDisplayName();
      tObjectDoubleHashMap1.contains((Object) string0);
      int int2 = (-620);
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap3 = new TObjectDoubleHashMap<Double>(int0);
      float float2 = 6.6360896E8F;
      double double0 = 455.2477471230635;
      String string1 = locale0.getLanguage();
      tObjectDoubleHashMap0.containsKey((Object) string1);
      TObjectDoubleHashMap<TObjectDoubleHashMap<Integer>> tObjectDoubleHashMap4 = new TObjectDoubleHashMap<TObjectDoubleHashMap<Integer>>(int2, float2, double0);
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap5 = null;
      double double1 = 0.0;
      tObjectDoubleHashMap4.adjustOrPutValue(tObjectDoubleHashMap5, (double) float2, double1);
      tObjectDoubleHashMap0.contains((Object) tObjectDoubleHashMap4);
      int int3 = (-696);
      int int4 = 1039;
      float float3 = 1133.043F;
      double double2 = 0.0;
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap6 = new TObjectDoubleHashMap<Object>(int4, float3, double2);
      tObjectDoubleHashMap6.size();
      TObjectDoubleHashMap<AbstractMap.SimpleImmutableEntry<Integer, String>> tObjectDoubleHashMap7 = new TObjectDoubleHashMap<AbstractMap.SimpleImmutableEntry<Integer, String>>(int3);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-929);
      float float0 = (-1374.8153F);
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Object>(int0, float0);
      tObjectDoubleHashMap0.tempDisableAutoCompaction();
      Object object0 = TObjectHash.FREE;
      tObjectDoubleHashMap0.contains(object0);
      double double0 = (-1.0);
      TObjectDoubleHashMap<TObjectDoubleCustomHashMap<String>> tObjectDoubleHashMap1 = new TObjectDoubleHashMap<TObjectDoubleCustomHashMap<String>>(int0, (float) int0, double0);
      InputStream inputStream0 = null;
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      int int0 = (-698);
      double double0 = 415.60637968584615;
      TDoubleArrayList tDoubleArrayList0 = null;
      try {
        tDoubleArrayList0 = new TDoubleArrayList(int0, double0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
