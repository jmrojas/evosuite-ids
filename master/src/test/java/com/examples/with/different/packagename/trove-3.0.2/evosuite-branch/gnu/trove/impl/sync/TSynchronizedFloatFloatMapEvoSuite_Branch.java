/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TFloatFunction;
import gnu.trove.impl.sync.TSynchronizedFloatCollection;
import gnu.trove.impl.sync.TSynchronizedFloatFloatMap;
import gnu.trove.impl.sync.TSynchronizedFloatSet;
import gnu.trove.iterator.TFloatFloatIterator;
import gnu.trove.map.TFloatFloatMap;
import gnu.trove.map.hash.TFloatFloatHashMap;
import gnu.trove.procedure.TFloatFloatProcedure;
import gnu.trove.procedure.TFloatProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedFloatFloatMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.retainEntries(Lgnu/trove/procedure/TFloatFloatProcedure;)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.<init>(Lgnu/trove/map/TFloatFloatMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(1974);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      boolean boolean0 = tSynchronizedFloatFloatMap0.retainEntries((TFloatFloatProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.remove(F)F: root-Branch
   */

//   @Test
//   public void test1()  throws Throwable  {
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(0, 0);
//       TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
//       float float0 = tSynchronizedFloatFloatMap0.remove((float) 0);
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.clear()V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      tSynchronizedFloatFloatMap0.clear();
      assertEquals(0, tSynchronizedFloatFloatMap0.size());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.hashCode()I: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap((-2147483636), (-2147483636));
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      int int0 = tSynchronizedFloatFloatMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(1974);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      boolean boolean0 = tSynchronizedFloatFloatMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(0, 0);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      tSynchronizedFloatFloatMap0.transformValues((TFloatFunction) null);
      assertEquals(0, tSynchronizedFloatFloatMap0.size());
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(0, 0);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      String string0 = tSynchronizedFloatFloatMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.containsValue(F)Z: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      boolean boolean0 = tSynchronizedFloatFloatMap0.containsValue(0.0F);
      assertEquals(false, boolean0);
  }

  //Test case number: 8
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.adjustValue(FF)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.<init>(Lgnu/trove/map/TFloatFloatMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap((-20));
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0, (Object) "ko");
      boolean boolean0 = tSynchronizedFloatFloatMap0.adjustValue((float) (-20), (float) (-20));
      assertEquals(false, boolean0);
  }

  //Test case number: 9
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.size()I: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.getNoEntryValue()F: root-Branch
   * 3 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.equals(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      boolean boolean0 = tSynchronizedFloatFloatMap0.equals((Object) tSynchronizedFloatFloatMap0);
      assertEquals(true, boolean0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.get(F)F: root-Branch
   */

//   @Test
//   public void test10()  throws Throwable  {
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(0, 0);
//       TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
//       float float0 = tSynchronizedFloatFloatMap0.get((float) 0);
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.iterator()Lgnu/trove/iterator/TFloatFloatIterator;: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      TFloatFloatIterator tFloatFloatIterator0 = tSynchronizedFloatFloatMap0.iterator();
      assertEquals(false, tFloatFloatIterator0.hasNext());
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.forEachEntry(Lgnu/trove/procedure/TFloatFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(1974);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      boolean boolean0 = tSynchronizedFloatFloatMap0.forEachEntry((TFloatFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.putAll(Ljava/util/Map;)V: root-Branch
   */

//   @Test
//   public void test13()  throws Throwable  {
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
//       TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
//       HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
//       tSynchronizedFloatFloatMap0.putAll((Map<? extends Float, ? extends Float>) hashMap0);
//       assertEquals(0.0F, tSynchronizedFloatFloatMap0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.getNoEntryKey()F: root-Branch
   */

//   @Test
//   public void test14()  throws Throwable  {
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
//       TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
//       float float0 = tSynchronizedFloatFloatMap0.getNoEntryKey();
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      boolean boolean0 = tSynchronizedFloatFloatMap0.forEachKey((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.containsKey(F)Z: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      boolean boolean0 = tSynchronizedFloatFloatMap0.containsKey(0.0F);
      assertEquals(false, boolean0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.increment(F)Z: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      boolean boolean0 = tSynchronizedFloatFloatMap0.increment(0.0F);
      assertEquals(false, boolean0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.keys([F)[F: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(0, 0);
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      float[] floatArray0 = tSynchronizedFloatFloatMap0.keys(tFloatFloatHashMap0._set);
      assertNotNull(floatArray0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.put(FF)F: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap((-2147483636), (-2147483636));
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      tSynchronizedFloatFloatMap0.put((float) 0, (float) 0);
      assertEquals(false, tFloatFloatHashMap0.isEmpty());
      assertEquals("{0.0=0.0}", tSynchronizedFloatFloatMap0.toString());
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.values()[F: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      float[] floatArray0 = tSynchronizedFloatFloatMap0.values();
      assertNotNull(floatArray0);
  }

  //Test case number: 21
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.putIfAbsent(FF)F: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.<init>(Lgnu/trove/map/TFloatFloatMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap((-20));
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0, (Object) "ko");
      tSynchronizedFloatFloatMap0.putIfAbsent((float) (-20), (float) (-20));
      assertEquals(false, tFloatFloatHashMap0.isEmpty());
      assertEquals("{-20.0=-20.0}", tSynchronizedFloatFloatMap0.toString());
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.putAll(Lgnu/trove/map/TFloatFloatMap;)V: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap((-2147483633), (-2147483633));
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      tSynchronizedFloatFloatMap0.putAll((TFloatFloatMap) tFloatFloatHashMap0);
      assertEquals(3, tFloatFloatHashMap0.capacity());
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.keys()[F: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap((-2147483636), (-2147483636));
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      float[] floatArray0 = tSynchronizedFloatFloatMap0.keys();
      assertNotNull(floatArray0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.adjustOrPutValue(FFF)F: root-Branch
   */

//   @Test
//   public void test24()  throws Throwable  {
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
//       TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
//       float float0 = tSynchronizedFloatFloatMap0.adjustOrPutValue(0.0F, 0.0F, 0.0F);
//       assertEquals(1, tFloatFloatHashMap0.size());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      boolean boolean0 = tSynchronizedFloatFloatMap0.forEachValue((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.values([F)[F: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      float[] floatArray0 = tSynchronizedFloatFloatMap0.values(tFloatFloatHashMap0._set);
      assertNotNull(floatArray0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.<init>(Lgnu/trove/map/TFloatFloatMap;)V: I17 Branch 1 IFNONNULL L59 - false
   */

  @Test
  public void test27()  throws Throwable  {
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = null;
      try {
        tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.keySet()Lgnu/trove/set/TFloatSet;: I11 Branch 2 IFNONNULL L107 - true
   * 2 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.keySet()Lgnu/trove/set/TFloatSet;: I11 Branch 2 IFNONNULL L107 - false
   */

  @Test
  public void test28()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      TSynchronizedFloatSet tSynchronizedFloatSet0 = (TSynchronizedFloatSet)tSynchronizedFloatFloatMap0.keySet();
      assertNotNull(tSynchronizedFloatSet0);
      
      TSynchronizedFloatSet tSynchronizedFloatSet1 = (TSynchronizedFloatSet)tSynchronizedFloatFloatMap0.keySet();
      assertSame(tSynchronizedFloatSet1, tSynchronizedFloatSet0);
  }

  //Test case number: 29
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.valueCollection()Lgnu/trove/TFloatCollection;: I11 Branch 3 IFNONNULL L121 - true
   * 2 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.valueCollection()Lgnu/trove/TFloatCollection;: I11 Branch 3 IFNONNULL L121 - false
   * 3 gnu.trove.impl.sync.TSynchronizedFloatFloatMap.<init>(Lgnu/trove/map/TFloatFloatMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test29()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      TSynchronizedFloatFloatMap tSynchronizedFloatFloatMap0 = new TSynchronizedFloatFloatMap((TFloatFloatMap) tFloatFloatHashMap0);
      TSynchronizedFloatCollection tSynchronizedFloatCollection0 = (TSynchronizedFloatCollection)tSynchronizedFloatFloatMap0.valueCollection();
      assertNotNull(tSynchronizedFloatCollection0);
      
      TSynchronizedFloatCollection tSynchronizedFloatCollection1 = (TSynchronizedFloatCollection)tSynchronizedFloatFloatMap0.valueCollection();
      assertSame(tSynchronizedFloatCollection1, tSynchronizedFloatCollection0);
  }
}
