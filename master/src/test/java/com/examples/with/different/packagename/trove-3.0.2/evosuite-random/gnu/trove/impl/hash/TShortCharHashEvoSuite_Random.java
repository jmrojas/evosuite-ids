/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TCharCollection;
import gnu.trove.map.TShortCharMap;
import gnu.trove.map.hash.TShortCharHashMap;
import gnu.trove.procedure.TCharProcedure;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortCharHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


//   @Test
//   public void test0()  throws Throwable  {
//       short[] shortArray0 = new short[6];
//       short short0 = (short)559;
//       shortArray0[0] = short0;
//       short short1 = (short)0;
//       shortArray0[1] = short1;
//       short short2 = (short) (-1458);
//       shortArray0[2] = short2;
//       short short3 = (short)0;
//       shortArray0[3] = short3;
//       short short4 = (short) (-322);
//       shortArray0[4] = short4;
//       short short5 = (short) (-1);
//       shortArray0[5] = short5;
//       char[] charArray0 = new char[3];
//       char char0 = 'Z';
//       charArray0[0] = char0;
//       char char1 = 'e';
//       charArray0[1] = char1;
//       char char2 = 'L';
//       charArray0[2] = char2;
//       TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
//       tShortCharHashMap0.getAutoCompactionFactor();
//       assertEquals(0, tShortCharHashMap0.getNoEntryKey());
//       assertEquals(17, tShortCharHashMap0.capacity());
//       assertEquals("{559=Z, -1458=L, 0=e}", tShortCharHashMap0.toString());
//       assertEquals('\u0000', tShortCharHashMap0.getNoEntryValue());
//   }

  @Test
  public void test1()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      String string0 = "";
      int int0 = 89;
      String string1 = "vk`kBRC4-6@<!\\";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int0, string0, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://@:89?vk%60kBRC4-6@%3C!%5C#vk%60kBRC4-6@%3C!%5C
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short) (-11);
      shortArray0[0] = short0;
      short short1 = (short) (-17287);
      shortArray0[1] = short1;
      short short2 = (short)1969;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      char[] charArray0 = new char[7];
      char char0 = 'a';
      charArray0[0] = char0;
      char char1 = 'x';
      charArray0[1] = char1;
      char char2 = 'w';
      charArray0[2] = char2;
      char char3 = 'Y';
      charArray0[3] = char3;
      char char4 = '?';
      charArray0[4] = char4;
      char char5 = '&';
      charArray0[5] = char5;
      char char6 = 'p';
      charArray0[6] = char6;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      InputStream inputStream0 = null;
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream(inputStream0, inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      tShortCharHashMap0.keySet();
      short short0 = (short)0;
      tShortCharHashMap0.ensureCapacity((int) short0);
      assertEquals(23, tShortCharHashMap0.capacity());
      
      tShortCharHashMap0.compact();
      tShortCharHashMap0.isEmpty();
      tShortCharHashMap0.containsKey(short0);
      tShortCharHashMap0.size();
      int int0 = 517;
      short short1 = (short) (-1420);
      char char0 = 'X';
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap(int0, (float) int0, short1, char0);
      TCharCollection tCharCollection0 = tShortCharHashMap0.valueCollection();
      assertEquals('\u0000', tCharCollection0.getNoEntryValue());
  }

  @Test
  public void test4()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      short short0 = (short) (-1214);
      char char0 = '0';
      short short1 = (short) (-1);
      char char1 = 'g';
      tShortCharHashMap0.size();
      tShortCharHashMap0.adjustValue(short1, char1);
      char[] charArray0 = new char[8];
      charArray0[0] = char0;
      charArray0[1] = char1;
      charArray0[2] = char0;
      charArray0[3] = char1;
      charArray0[4] = char1;
      short short2 = (short) (-1);
      tShortCharHashMap0.remove(short2);
      charArray0[5] = char0;
      charArray0[6] = char0;
      charArray0[7] = char1;
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap(tShortCharHashMap0._set, charArray0);
      tShortCharHashMap0.putAll((TShortCharMap) tShortCharHashMap1);
      charArray0[0] = char1;
      charArray0[1] = char0;
      charArray0[2] = char0;
      int int0 = tShortCharHashMap0.capacity();
      short short3 = (short) (-390);
      char char2 = 'o';
      TShortCharHashMap tShortCharHashMap2 = new TShortCharHashMap(int0, (float) charArray0[2], short3, char2);
      charArray0[3] = char1;
      charArray0[4] = char1;
      short short4 = (short)0;
      tShortCharHashMap0.containsKey(short4);
      charArray0[5] = char1;
      charArray0[6] = char1;
      charArray0[7] = char0;
      tShortCharHashMap0.iterator();
      TShortCharHashMap tShortCharHashMap3 = new TShortCharHashMap(tShortCharHashMap0._set, charArray0);
      tShortCharHashMap0.adjustOrPutValue(short0, char0, char0);
      assertEquals(2, tShortCharHashMap0.size());
      assertFalse(tShortCharHashMap0.equals(tShortCharHashMap1));
  }

//   @Test
//   public void test5()  throws Throwable  {
//       int int0 = 5930887;
//       short short0 = (short)0;
//       char char0 = 'o';
//       TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
//       short short1 = (short)185;
//       boolean boolean0 = tShortCharHashMap0.contains(short1);
//       assertEquals(false, boolean0);
//       assertEquals('\u0000', tShortCharHashMap0.getNoEntryValue());
//       assertEquals(23, tShortCharHashMap0.capacity());
//       assertEquals(0, tShortCharHashMap0.getNoEntryKey());
//       
//       TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap(int0, (float) int0, short0, char0);
//       boolean boolean1 = tShortCharHashMap1.isEmpty();
//       assertEquals(0, tShortCharHashMap1.getNoEntryKey());
//       assertEquals('o', tShortCharHashMap1.getNoEntryValue());
//       assertFalse(boolean1 == boolean0);
//   }

//   @Test
//   public void test6()  throws Throwable  {
//       int int0 = (-153);
//       TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0, int0);
//       TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap((TShortCharMap) tShortCharHashMap0);
//       TShortCharHashMap tShortCharHashMap2 = new TShortCharHashMap((TShortCharMap) tShortCharHashMap1);
//       tShortCharHashMap2.keys(tShortCharHashMap1._set);
//       assertEquals(0, tShortCharHashMap2.getNoEntryKey());
//       assertEquals('\u0000', tShortCharHashMap2.getNoEntryValue());
//       assertEquals('\u0000', tShortCharHashMap1.getNoEntryValue());
//   }

//   @Test
//   public void test7()  throws Throwable  {
//       short[] shortArray0 = new short[4];
//       short short0 = (short)472;
//       shortArray0[0] = short0;
//       short short1 = (short)36;
//       shortArray0[1] = short1;
//       short short2 = (short) (-1160);
//       shortArray0[2] = short2;
//       short short3 = (short)547;
//       shortArray0[3] = short3;
//       char[] charArray0 = new char[10];
//       char char0 = '4';
//       charArray0[0] = char0;
//       char char1 = '&';
//       charArray0[1] = char1;
//       char char2 = '=';
//       charArray0[2] = char2;
//       char char3 = '!';
//       charArray0[3] = char3;
//       char char4 = '8';
//       charArray0[4] = char4;
//       char char5 = '$';
//       charArray0[5] = char5;
//       char char6 = '';
//       charArray0[6] = char6;
//       char char7 = 'k';
//       charArray0[7] = char7;
//       char char8 = 'N';
//       charArray0[8] = char8;
//       char char9 = 'j';
//       charArray0[9] = char9;
//       TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
//       TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap((TShortCharMap) tShortCharHashMap0);
//       assertEquals('\u0000', tShortCharHashMap1.getNoEntryValue());
//       assertEquals("{-1160==, 547=!, 36=&, 472=4}", tShortCharHashMap0.toString());
//       assertEquals(0, tShortCharHashMap1.getNoEntryKey());
//       
//       TShortCharHashMap tShortCharHashMap2 = new TShortCharHashMap();
//       TCharCollection tCharCollection0 = tShortCharHashMap2.valueCollection();
//       assertEquals(0, tShortCharHashMap2.getNoEntryKey());
//       assertEquals('\u0000', tCharCollection0.getNoEntryValue());
//   }

//   @Test
//   public void test8()  throws Throwable  {
//       short[] shortArray0 = new short[10];
//       short short0 = (short)0;
//       shortArray0[0] = short0;
//       short short1 = (short)0;
//       shortArray0[1] = short1;
//       short short2 = (short)1;
//       shortArray0[2] = short2;
//       short short3 = (short) (-391);
//       shortArray0[3] = short3;
//       short short4 = (short)0;
//       shortArray0[4] = short4;
//       short short5 = (short) (-1);
//       shortArray0[5] = short5;
//       short short6 = (short) (-1135);
//       shortArray0[6] = short6;
//       short short7 = (short) (-132);
//       shortArray0[7] = short7;
//       short short8 = (short) (-130);
//       shortArray0[8] = short8;
//       short short9 = (short) (-1);
//       shortArray0[9] = short9;
//       char[] charArray0 = new char[10];
//       char char0 = 'K';
//       charArray0[0] = char0;
//       char char1 = '2';
//       charArray0[1] = char1;
//       char char2 = 'h';
//       charArray0[2] = char2;
//       char char3 = '';
//       charArray0[3] = char3;
//       char char4 = '(';
//       charArray0[4] = char4;
//       char char5 = '\\';
//       charArray0[5] = char5;
//       char char6 = 'o';
//       charArray0[6] = char6;
//       char char7 = 'P';
//       charArray0[7] = char7;
//       char char8 = '1';
//       charArray0[8] = char8;
//       char char9 = 'W';
//       charArray0[9] = char9;
//       TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
//       tShortCharHashMap0.isEmpty();
//       assertEquals(7, tShortCharHashMap0.size());
//       assertEquals('\u0000', tShortCharHashMap0.getNoEntryValue());
//       assertEquals(0, tShortCharHashMap0.getNoEntryKey());
//       assertEquals("{-1135=o, -130=1, -132=P, -391=, -1=W, 1=h, 0=(}", tShortCharHashMap0.toString());
//   }

//   @Test
//   public void test9()  throws Throwable  {
//       short[] shortArray0 = new short[8];
//       short short0 = (short)27385;
//       shortArray0[0] = short0;
//       short short1 = (short) (-11285);
//       shortArray0[1] = short1;
//       short short2 = (short)0;
//       shortArray0[2] = short2;
//       short short3 = (short)10951;
//       shortArray0[3] = short3;
//       short short4 = (short) (-1);
//       shortArray0[4] = short4;
//       short short5 = (short) (-1);
//       shortArray0[5] = short5;
//       short short6 = (short)1;
//       shortArray0[6] = short6;
//       short short7 = (short)0;
//       shortArray0[7] = short7;
//       char[] charArray0 = new char[8];
//       char char0 = '<';
//       charArray0[0] = char0;
//       char char1 = 'E';
//       charArray0[1] = char1;
//       char char2 = '~';
//       charArray0[2] = char2;
//       char char3 = '?';
//       charArray0[3] = char3;
//       char char4 = 'B';
//       charArray0[4] = char4;
//       char char5 = 'S';
//       charArray0[5] = char5;
//       char char6 = '`';
//       charArray0[6] = char6;
//       char char7 = 'n';
//       charArray0[7] = char7;
//       TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
//       assertEquals('\u0000', tShortCharHashMap0.getNoEntryValue());
//       assertEquals(6, tShortCharHashMap0.size());
//       assertEquals(0, tShortCharHashMap0.getNoEntryKey());
//       assertEquals("{27385=<, -11285=E, -1=S, 10951=?, 1=`, 0=n}", tShortCharHashMap0.toString());
//       
//       TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap();
//       TShortCharHashMap tShortCharHashMap2 = new TShortCharHashMap((TShortCharMap) tShortCharHashMap1);
//       TShortCharHashMap tShortCharHashMap3 = new TShortCharHashMap((TShortCharMap) tShortCharHashMap2);
//       short[] shortArray1 = tShortCharHashMap3.keys();
//       assertEquals('\u0000', tShortCharHashMap2.getNoEntryValue());
//       assertNotNull(shortArray1);
//       assertEquals(0, tShortCharHashMap2.getNoEntryKey());
//       assertEquals(23, tShortCharHashMap2.capacity());
//       assertEquals(23, tShortCharHashMap3.capacity());
//   }

  @Test
  public void test10()  throws Throwable  {
      TShortCharMap tShortCharMap0 = null;
      TShortCharHashMap tShortCharHashMap0 = null;
      try {
        tShortCharHashMap0 = new TShortCharHashMap(tShortCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test11()  throws Throwable  {
//       int int0 = 491;
//       float float0 = (-916.526F);
//       short short0 = (short)0;
//       short[] shortArray0 = new short[4];
//       short short1 = (short)12411;
//       shortArray0[0] = short1;
//       shortArray0[1] = short0;
//       short short2 = (short)1;
//       shortArray0[2] = short2;
//       shortArray0[3] = short0;
//       char[] charArray0 = new char[4];
//       char char0 = ' ';
//       charArray0[0] = char0;
//       char char1 = 'f';
//       charArray0[1] = char1;
//       char char2 = 'L';
//       charArray0[2] = char2;
//       char char3 = 'R';
//       charArray0[3] = char3;
//       TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
//       assertEquals(3, tShortCharHashMap0.size());
//       assertEquals(0, tShortCharHashMap0.getNoEntryKey());
//       assertEquals('\u0000', tShortCharHashMap0.getNoEntryValue());
//       assertEquals("{12411= , 1=L, 0=R}", tShortCharHashMap0.toString());
//       
//       char char4 = 'n';
//       TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap(int0, float0, short0, char4);
//       boolean boolean0 = true;
//       short[] shortArray1 = tShortCharHashMap1.keys();
//       assertNotNull(shortArray1);
//       
//       tShortCharHashMap1.reenableAutoCompaction(boolean0);
//       assertEquals(0, tShortCharHashMap1.getNoEntryKey());
//       assertEquals('n', tShortCharHashMap1.getNoEntryValue());
//   }

  @Test
  public void test12()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short) (-1015);
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short) (-1);
      shortArray0[4] = short4;
      short short5 = (short)26997;
      shortArray0[5] = short5;
      short short6 = (short)1990;
      shortArray0[6] = short6;
      short short7 = (short)27;
      shortArray0[7] = short7;
      short short8 = (short)989;
      shortArray0[8] = short8;
      short short9 = (short)130;
      shortArray0[9] = short9;
      char[] charArray0 = new char[8];
      char char0 = 'u';
      charArray0[0] = char0;
      char char1 = 'h';
      charArray0[1] = char1;
      char char2 = 'A';
      charArray0[2] = char2;
      char char3 = '\"';
      charArray0[3] = char3;
      char char4 = '@';
      charArray0[4] = char4;
      char char5 = 't';
      charArray0[5] = char5;
      char char6 = 'f';
      charArray0[6] = char6;
      char char7 = 'p';
      charArray0[7] = char7;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      boolean boolean0 = tShortCharHashMap0.contains(shortArray0[1]);
      assertEquals("{26997=t, 1990=f, -1=@, 27=p, -1015=A, 0=\"}", tShortCharHashMap0.toString());
      assertEquals(true, boolean0);
      assertEquals(6, tShortCharHashMap0.size());
      
      int int0 = 239;
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap(int0);
      float float0 = (-1368.1619F);
      // Undeclared exception!
      try {
        tShortCharHashMap1.setAutoCompactionFactor(float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1368.1619
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          short[] shortArray0 = new short[2];
          short short0 = (short)501;
          char[] charArray0 = new char[7];
          char char0 = '3';
          charArray0[0] = char0;
          char char1 = '9';
          charArray0[1] = char1;
          char char2 = '(';
          charArray0[2] = char2;
          char char3 = 'j';
          charArray0[3] = char3;
          char char4 = '6';
          charArray0[4] = char4;
          char char5 = 'r';
          charArray0[5] = char5;
          char char6 = 'N';
          charArray0[6] = char6;
          TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
          tShortCharHashMap0.getAutoCompactionFactor();
          shortArray0[0] = short0;
          short short1 = (short)609;
          shortArray0[0] = short0;
          shortArray0[1] = short0;
          shortArray0[1] = short1;
          char[] charArray1 = new char[3];
          char char7 = 'v';
          charArray1[0] = char7;
          char char8 = 'B';
          char char9 = '&';
          TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap((int) char8, (float) char7, shortArray0[0], char9);
          tShortCharHashMap1.isEmpty();
          charArray1[1] = char8;
          char char10 = 'W';
          charArray1[2] = char10;
          TShortCharHashMap tShortCharHashMap2 = new TShortCharHashMap(shortArray0, charArray1);
          String string0 = "";
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.GeneratedConstructorAccessor15.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test14()  throws Throwable  {
      TShortCharMap tShortCharMap0 = null;
      int int0 = (-808);
      short[] shortArray0 = new short[4];
      short short0 = (short) (-1163);
      shortArray0[0] = short0;
      short short1 = (short)1452;
      shortArray0[1] = short1;
      short short2 = (short) (-429);
      shortArray0[2] = short2;
      short short3 = (short)5779;
      shortArray0[3] = short3;
      char[] charArray0 = new char[10];
      char char0 = '&';
      charArray0[0] = char0;
      char char1 = 'u';
      charArray0[1] = char1;
      char char2 = '';
      charArray0[2] = char2;
      char char3 = 'r';
      charArray0[3] = char3;
      char char4 = '=';
      charArray0[4] = char4;
      char char5 = '=';
      charArray0[5] = char5;
      char char6 = 'A';
      charArray0[6] = char6;
      char char7 = 'A';
      charArray0[7] = char7;
      char char8 = '$';
      charArray0[8] = char8;
      char char9 = 'O';
      charArray0[9] = char9;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      tShortCharHashMap0.getNoEntryKey();
      float float0 = (-1965.9694F);
      short short4 = (short) (-1);
      char char10 = '<';
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap(int0, float0, short4, char10);
      char[] charArray1 = new char[3];
      charArray1[0] = char10;
      charArray1[1] = char10;
      charArray1[2] = char10;
      charArray1[0] = char10;
      charArray1[1] = char10;
      charArray1[2] = char10;
      tShortCharHashMap1.values(charArray1);
      TShortCharHashMap tShortCharHashMap2 = new TShortCharHashMap((int) charArray1[2]);
      charArray1[0] = char10;
      charArray1[1] = char10;
      charArray1[2] = char10;
      TShortCharHashMap tShortCharHashMap3 = null;
      try {
        tShortCharHashMap3 = new TShortCharHashMap(tShortCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test15()  throws Throwable  {
//       int int0 = 0;
//       float float0 = 0.0F;
//       short[] shortArray0 = new short[5];
//       short short0 = (short)4177;
//       shortArray0[0] = short0;
//       short short1 = (short)0;
//       shortArray0[1] = short1;
//       short short2 = (short)0;
//       shortArray0[2] = short2;
//       short short3 = (short)0;
//       shortArray0[3] = short3;
//       short short4 = (short) (-376);
//       shortArray0[4] = short4;
//       char[] charArray0 = new char[5];
//       char char0 = '@';
//       charArray0[0] = char0;
//       char char1 = '.';
//       charArray0[1] = char1;
//       char char2 = 'c';
//       charArray0[2] = char2;
//       char char3 = 'L';
//       charArray0[3] = char3;
//       char char4 = 'e';
//       charArray0[4] = char4;
//       TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
//       TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap((TShortCharMap) tShortCharHashMap0);
//       TShortCharHashMap tShortCharHashMap2 = new TShortCharHashMap((TShortCharMap) tShortCharHashMap1);
//       tShortCharHashMap2.keys();
//       assertEquals('\u0000', tShortCharHashMap0.getNoEntryValue());
//       assertEquals(3, tShortCharHashMap0.size());
//       assertEquals(0, tShortCharHashMap0.getNoEntryKey());
//       assertEquals("{4177=@, -376=e, 0=L}", tShortCharHashMap0.toString());
//       
//       short short5 = (short)0;
//       char char5 = '%';
//       TShortCharHashMap tShortCharHashMap3 = new TShortCharHashMap(int0, float0, short5, char5);
//       tShortCharHashMap3.getAutoCompactionFactor();
//       assertEquals('%', tShortCharHashMap3.getNoEntryValue());
//       assertEquals(0, tShortCharHashMap3.getNoEntryKey());
//   }

//   @Test
//   public void test16()  throws Throwable  {
//       int int0 = 1;
//       TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0);
//       short short0 = (short) (-1212);
//       char char0 = '-';
//       boolean boolean0 = tShortCharHashMap0.adjustValue(short0, char0);
//       assertEquals(false, boolean0);
//       assertEquals(0, tShortCharHashMap0.getNoEntryKey());
//       assertEquals('\u0000', tShortCharHashMap0.getNoEntryValue());
//   }

  @Test
  public void test17()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      short short0 = (short)0;
      tShortCharHashMap0.getNoEntryKey();
      TCharProcedure tCharProcedure0 = null;
      tShortCharHashMap0.trimToSize();
      char char0 = 's';
      tShortCharHashMap0.putIfAbsent(short0, char0);
      tShortCharHashMap0.hashCode();
      // Undeclared exception!
      try {
        tShortCharHashMap0.forEachValue(tCharProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 5779;
      float float0 = 1.0F;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap((TShortCharMap) tShortCharHashMap0);
      tShortCharHashMap1.iterator();
      TShortCharHashMap tShortCharHashMap2 = new TShortCharHashMap(int0, float0);
      boolean boolean0 = false;
      tShortCharHashMap2.reenableAutoCompaction(boolean0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      int int1 = 206;
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, int1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 388;
      float float0 = 0.0F;
      int int1 = 599;
      short short0 = (short)1514;
      float float1 = 1656.3237F;
      int int2 = 0;
      float float2 = (-1513.0071F);
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int2, float2);
      tShortCharHashMap0.getNoEntryKey();
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap((int) short0, float1);
      short short1 = (short) (-1);
      char char0 = 'K';
      tShortCharHashMap0.putIfAbsent(short1, char0);
      assertEquals(7, tShortCharHashMap0.capacity());
      
      tShortCharHashMap1.tempDisableAutoCompaction();
      char char1 = '6';
      TShortCharHashMap tShortCharHashMap2 = new TShortCharHashMap(int1, float0, short0, char1);
      boolean boolean0 = false;
      tShortCharHashMap2.reenableAutoCompaction(boolean0);
      TShortCharHashMap tShortCharHashMap3 = new TShortCharHashMap(int0, float0);
      tShortCharHashMap3.keySet();
      TShortCharHashMap tShortCharHashMap4 = null;
      try {
        tShortCharHashMap4 = new TShortCharHashMap((TShortCharMap) tShortCharHashMap3);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }
}
