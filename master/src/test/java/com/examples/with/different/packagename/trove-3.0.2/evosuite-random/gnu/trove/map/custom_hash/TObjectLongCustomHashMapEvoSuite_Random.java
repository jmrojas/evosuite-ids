/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.custom_hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableLongSet;
import gnu.trove.map.custom_hash.TObjectLongCustomHashMap;
import gnu.trove.map.hash.TObjectLongHashMap;
import gnu.trove.set.TLongSet;
import gnu.trove.set.hash.TLongHashSet;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.io.File;
import java.io.IOException;
import java.util.AbstractMap;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectLongCustomHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      IdentityHashingStrategy<Long> identityHashingStrategy0 = new IdentityHashingStrategy<Long>();
      int int0 = 1;
      float float0 = (-1387.9192F);
      long long0 = (-18L);
      TObjectLongHashMap<TObjectLongHashMap<Object>> tObjectLongHashMap0 = new TObjectLongHashMap<TObjectLongHashMap<Object>>(int0, float0, long0);
      String string0 = "}";
      File file0 = new File(string0);
      File file1 = new File(file0, string0);
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0, file1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      IdentityHashingStrategy<Long> identityHashingStrategy0 = new IdentityHashingStrategy<Long>();
      TObjectLongCustomHashMap<Long> tObjectLongCustomHashMap0 = new TObjectLongCustomHashMap<Long>((HashingStrategy<? super Long>) identityHashingStrategy0);
      tObjectLongCustomHashMap0.iterator();
      assertEquals(23, tObjectLongCustomHashMap0.capacity());
  }

  @Test
  public void test2()  throws Throwable  {
      TObjectLongCustomHashMap<AbstractMap.SimpleEntry<String, String>> tObjectLongCustomHashMap0 = new TObjectLongCustomHashMap<AbstractMap.SimpleEntry<String, String>>();
      tObjectLongCustomHashMap0.getAutoCompactionFactor();
      assertEquals(23, tObjectLongCustomHashMap0.capacity());
  }

  @Test
  public void test3()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectLongCustomHashMap<TObjectLongHashMap<String>> tObjectLongCustomHashMap0 = new TObjectLongCustomHashMap<TObjectLongHashMap<String>>((HashingStrategy<? super TObjectLongHashMap<String>>) identityHashingStrategy0);
      long[] longArray0 = new long[6];
      long long0 = 645L;
      longArray0[0] = long0;
      long long1 = 15L;
      longArray0[1] = long1;
      long long2 = 1168L;
      longArray0[2] = long2;
      long long3 = (-662L);
      longArray0[3] = long3;
      long long4 = 0L;
      longArray0[4] = long4;
      long long5 = 569L;
      longArray0[5] = long5;
      TLongHashSet tLongHashSet0 = new TLongHashSet(longArray0);
      TUnmodifiableLongSet tUnmodifiableLongSet0 = new TUnmodifiableLongSet((TLongSet) tLongHashSet0);
      String string0 = tUnmodifiableLongSet0.toString();
      Locale locale0 = Locale.UK;
      String string1 = locale0.getDisplayName();
      identityHashingStrategy0.equals((Object) string0, (Object) string1);
      tObjectLongCustomHashMap0.size();
      assertEquals(23, tObjectLongCustomHashMap0.capacity());
  }

  @Test
  public void test4()  throws Throwable  {
      TObjectLongCustomHashMap<TObjectLongCustomHashMap<Long>> tObjectLongCustomHashMap0 = new TObjectLongCustomHashMap<TObjectLongCustomHashMap<Long>>();
      Long[] longArray0 = new Long[8];
      long long0 = 9223372036854775807L;
      Long long1 = Long.valueOf(long0);
      longArray0[0] = long1;
      Long long2 = new Long(long0);
      longArray0[1] = long2;
      String string0 = "IpT =-nxI)z%}z";
      try {
        Long.valueOf(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"IpT =-nxI)z%}z\"
         //
      }
  }
}
