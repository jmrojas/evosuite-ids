/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableLongCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortLongMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortSet;
import gnu.trove.iterator.TShortLongIterator;
import gnu.trove.map.TShortLongMap;
import gnu.trove.map.hash.TShortLongHashMap;
import gnu.trove.procedure.TShortLongProcedure;
import java.io.File;
import java.io.ObjectInput;
import java.net.URI;
import java.net.URISyntaxException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableShortLongMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-1819);
      short[] shortArray0 = new short[7];
      short short0 = (short)1;
      shortArray0[0] = short0;
      short short1 = (short)2046;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)230;
      shortArray0[3] = short3;
      short short4 = (short) (-1);
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short) (-1906);
      shortArray0[6] = short6;
      long[] longArray0 = new long[10];
      longArray0[0] = (long) shortArray0[3];
      longArray0[1] = (long) shortArray0[1];
      longArray0[2] = (long) short0;
      longArray0[3] = (long) shortArray0[1];
      longArray0[4] = (long) shortArray0[3];
      longArray0[5] = (long) shortArray0[3];
      longArray0[6] = (long) short1;
      longArray0[7] = (long) short1;
      longArray0[8] = (long) short5;
      longArray0[9] = (long) shortArray0[2];
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap0 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap0);
      tUnmodifiableShortLongMap0.keys(shortArray0);
      TShortLongMap tShortLongMap0 = null;
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap1 = null;
      try {
        tUnmodifiableShortLongMap1 = new TUnmodifiableShortLongMap(tShortLongMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short)82;
      shortArray0[0] = short0;
      short short1 = (short) (-26659);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) shortArray0[0];
      longArray0[1] = (long) shortArray0[0];
      longArray0[2] = (long) short1;
      longArray0[3] = (long) shortArray0[0];
      longArray0[4] = (long) shortArray0[0];
      longArray0[5] = (long) short1;
      longArray0[6] = (long) short0;
      longArray0[7] = (long) shortArray0[0];
      longArray0[8] = (long) shortArray0[0];
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap0 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap0);
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short) (-1);
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short) (-3581);
      short short8 = (short) (-1);
      long long0 = 1886L;
      // Undeclared exception!
      try {
        tUnmodifiableShortLongMap0.putIfAbsent(short8, long0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 286973;
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(int0, int0);
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap0 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap0);
      tShortLongHashMap0.keySet();
      short short0 = (short)29771;
      tUnmodifiableShortLongMap0.containsKey(short0);
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap();
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap1 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap1);
      tUnmodifiableShortLongMap1.valueCollection();
      long[] longArray0 = new long[5];
      tShortLongHashMap1.getAutoCompactionFactor();
      long long0 = 0L;
      longArray0[0] = long0;
      tUnmodifiableShortLongMap1.values();
      tUnmodifiableShortLongMap0.size();
      long long1 = (-1524L);
      longArray0[1] = long1;
      long long2 = 0L;
      long long3 = 1254L;
      // Undeclared exception!
      try {
        tUnmodifiableShortLongMap0.put(short0, long3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TShortLongMap tShortLongMap0 = null;
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap0 = null;
      try {
        tUnmodifiableShortLongMap0 = new TUnmodifiableShortLongMap(tShortLongMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 2043;
      short short0 = (short)1;
      int int1 = (-836);
      float float0 = 0.0F;
      short short1 = (short) (-1764);
      long long0 = (-9223372036854775808L);
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(int1, float0, short1, long0);
      TShortLongHashMap tShortLongHashMap1 = null;
      try {
        tShortLongHashMap1 = new TShortLongHashMap((TShortLongMap) tShortLongHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-1);
      float float0 = 10.0F;
      short short0 = (short) (-1804);
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(int0, (float) short0);
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap((TShortLongMap) tShortLongHashMap0);
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap0 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap1);
      short short1 = (short)0;
      long long0 = (-494L);
      long long1 = (-1300L);
      // Undeclared exception!
      try {
        tUnmodifiableShortLongMap0.adjustOrPutValue(short1, long0, long1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap0 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap0);
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap1 = new TUnmodifiableShortLongMap((TShortLongMap) tUnmodifiableShortLongMap0);
      tUnmodifiableShortLongMap1.getNoEntryKey();
      short short0 = (short) (-484);
      // Undeclared exception!
      try {
        tUnmodifiableShortLongMap1.increment(short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-183);
      short[] shortArray0 = new short[10];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short) (-1);
      shortArray0[1] = short1;
      short short2 = (short)1;
      shortArray0[2] = short2;
      short short3 = (short)570;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short) (-27081);
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)1385;
      shortArray0[7] = short7;
      short short8 = (short)0;
      shortArray0[8] = short8;
      short short9 = (short)1652;
      shortArray0[9] = short9;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) short5;
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap((TShortLongMap) tShortLongHashMap0);
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap0 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap1);
      float float0 = (-943.8467F);
      short short10 = (short)1;
      TShortLongHashMap tShortLongHashMap2 = new TShortLongHashMap(int0, float0, short10, (long) int0);
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap1 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap2);
      tShortLongHashMap2.capacity();
      tShortLongHashMap2.keySet();
      tUnmodifiableShortLongMap1.keySet();
      tShortLongHashMap2.size();
      TShortLongIterator tShortLongIterator0 = tUnmodifiableShortLongMap1.iterator();
      assertEquals(false, tShortLongIterator0.hasNext());
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      short[] shortArray0 = new short[4];
      short short0 = (short)1009;
      shortArray0[0] = short0;
      short short1 = (short)1;
      shortArray0[1] = short1;
      short short2 = (short)0;
      float float0 = (-1.0F);
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((int) shortArray0[1], float0);
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap0 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortLongMap0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap((TShortLongMap) tShortLongHashMap0);
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap0 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap1);
      short short0 = (short) (-1);
      // Undeclared exception!
      try {
        tUnmodifiableShortLongMap0.increment(short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap0 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap0);
      short short0 = (short)0;
      // Undeclared exception!
      try {
        tUnmodifiableShortLongMap0.remove(short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 73;
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(int0);
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap((TShortLongMap) tShortLongHashMap0);
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap0 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap1);
      tUnmodifiableShortLongMap0.getNoEntryValue();
      short short0 = (short)426;
      // Undeclared exception!
      try {
        tUnmodifiableShortLongMap0.increment(short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap0 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap0);
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap((TShortLongMap) tUnmodifiableShortLongMap0);
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap1 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap1);
      String string0 = "ex?4bs)L";
      URI uRI0 = new URI(string0, string0, string0);
      String string1 = "(";
      URI uRI1 = null;
      try {
        uRI1 = new URI(string0, string0, string0, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ex?4bs)L://ex%3F4bs)Lex%3F4bs)L?(#(
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)825;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)1962;
      shortArray0[6] = short6;
      short short7 = (short)0;
      shortArray0[7] = short7;
      short short8 = (short)39;
      shortArray0[8] = short8;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) shortArray0[1];
      longArray0[1] = (long) short0;
      longArray0[2] = (long) short8;
      longArray0[0] = (long) short3;
      longArray0[1] = (long) shortArray0[3];
      longArray0[2] = (long) short5;
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap((TShortLongMap) tShortLongHashMap0);
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap0 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap1);
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap1 = new TUnmodifiableShortLongMap((TShortLongMap) tUnmodifiableShortLongMap0);
      tUnmodifiableShortLongMap1.get(short1);
      TShortLongHashMap tShortLongHashMap2 = new TShortLongHashMap();
      short short9 = (short)1768;
      tShortLongHashMap2.get(short9);
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap2 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap2);
      boolean boolean0 = tUnmodifiableShortLongMap2.isEmpty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 116;
      short short0 = (short)849;
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(int0, (float) int0, short0, (long) short0);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) short0;
      longArray0[1] = (long) short0;
      longArray0[2] = (long) short0;
      longArray0[3] = (long) short0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) short0;
      longArray0[6] = (long) int0;
      longArray0[7] = (long) short0;
      tShortLongHashMap0.values(longArray0);
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap((TShortLongMap) tShortLongHashMap0);
      TShortLongHashMap tShortLongHashMap2 = new TShortLongHashMap(tShortLongHashMap1._set, longArray0);
      TShortLongHashMap tShortLongHashMap3 = new TShortLongHashMap((TShortLongMap) tShortLongHashMap2);
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap0 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap3);
      long[] longArray1 = tUnmodifiableShortLongMap0.values(longArray0);
      assertNotNull(longArray1);
      
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap1 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap1);
      TShortLongProcedure tShortLongProcedure0 = null;
      boolean boolean0 = tUnmodifiableShortLongMap1.forEachEntry(tShortLongProcedure0);
      assertEquals(849L, tUnmodifiableShortLongMap1.getNoEntryValue());
      
      TShortLongHashMap tShortLongHashMap4 = new TShortLongHashMap(int0, int0);
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap2 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap4);
      tUnmodifiableShortLongMap2.getNoEntryValue();
      short short1 = (short) (-1344);
      tUnmodifiableShortLongMap2.containsKey(short1);
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap3 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap4);
      TUnmodifiableLongCollection tUnmodifiableLongCollection0 = (TUnmodifiableLongCollection)tUnmodifiableShortLongMap2.valueCollection();
      assertNotNull(tUnmodifiableLongCollection0);
      
      boolean boolean1 = tUnmodifiableShortLongMap2.isEmpty();
      assertTrue(boolean1 == boolean0);
      
      TUnmodifiableShortSet tUnmodifiableShortSet0 = (TUnmodifiableShortSet)tUnmodifiableShortLongMap2.keySet();
      assertNotNull(tUnmodifiableShortSet0);
      
      TShortLongHashMap tShortLongHashMap5 = new TShortLongHashMap((TShortLongMap) tShortLongHashMap4);
      long[] longArray2 = tUnmodifiableShortLongMap2.values();
      assertNotNull(longArray2);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)103;
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)126;
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-31);
      byteArray0[5] = byte5;
      byte byte6 = (byte)20;
      byteArray0[6] = byte6;
      byte byte7 = (byte)90;
      byteArray0[7] = byte7;
      tShortLongHashMap0._states = byteArray0;
      tUnmodifiableShortLongMap2.containsValue((long) int0);
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap4 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap5);
      tShortLongHashMap5.capacity();
      short short2 = (short)0;
      // Undeclared exception!
      try {
        tUnmodifiableShortLongMap4.increment(short2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)1756;
      shortArray0[0] = short0;
      short short1 = (short)2411;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) short3;
      longArray0[1] = (long) shortArray0[0];
      longArray0[2] = (long) shortArray0[0];
      longArray0[3] = (long) shortArray0[2];
      longArray0[4] = (long) short3;
      longArray0[5] = (long) short1;
      longArray0[6] = (long) shortArray0[4];
      longArray0[7] = (long) shortArray0[3];
      longArray0[8] = (long) short0;
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap0 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap0);
      tUnmodifiableShortLongMap0.keys();
      longArray0[0] = (long) short3;
      longArray0[1] = (long) shortArray0[1];
      longArray0[2] = (long) short2;
      longArray0[3] = (long) short1;
      longArray0[4] = (long) shortArray0[1];
      longArray0[5] = (long) shortArray0[4];
      longArray0[6] = (long) shortArray0[2];
      longArray0[7] = (long) short1;
      longArray0[8] = (long) shortArray0[3];
      TShortLongMap tShortLongMap0 = null;
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap1 = null;
      try {
        tUnmodifiableShortLongMap1 = new TUnmodifiableShortLongMap(tShortLongMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 587742049;
      float float0 = 1022.2155F;
      int int1 = (-1);
      short short0 = (short) (-550);
      int int2 = 0;
      short short1 = (short)1559;
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(int2, float0, short1, (long) short1);
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap0 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap0);
      String string0 = "'B4r*'mvEQd.d<zg,l";
      File file0 = new File(string0, string0);
      File file1 = file0.getAbsoluteFile();
      String string1 = file1.getParent();
      boolean boolean0 = tUnmodifiableShortLongMap0.equals((Object) string1);
      assertEquals(false, boolean0);
      
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap(int1, (float) int0, short0, (long) int0);
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap1 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap1);
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap2 = new TUnmodifiableShortLongMap((TShortLongMap) tUnmodifiableShortLongMap1);
      long[] longArray0 = tUnmodifiableShortLongMap1.values();
      assertNotNull(longArray0);
      
      // Undeclared exception!
      try {
        tUnmodifiableShortLongMap2.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short) (-353);
      shortArray0[0] = short0;
      short short1 = (short)63;
      shortArray0[1] = short1;
      short short2 = (short) (-1145);
      shortArray0[2] = short2;
      short short3 = (short) (-902);
      shortArray0[3] = short3;
      short short4 = (short) (-232);
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)769;
      shortArray0[6] = short6;
      short short7 = (short)219;
      shortArray0[7] = short7;
      short short8 = (short)1;
      shortArray0[8] = short8;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) short1;
      longArray0[1] = (long) short0;
      longArray0[2] = (long) short4;
      longArray0[3] = (long) short7;
      longArray0[4] = (long) shortArray0[3];
      longArray0[5] = (long) short0;
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap0 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap0);
      int int0 = tUnmodifiableShortLongMap0.size();
      assertEquals(6, int0);
      
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap();
      TUnmodifiableShortLongMap tUnmodifiableShortLongMap1 = new TUnmodifiableShortLongMap((TShortLongMap) tShortLongHashMap1);
      short short9 = (short)455;
      ObjectInput objectInput0 = null;
      long long0 = 9223372036854775807L;
      // Undeclared exception!
      try {
        tUnmodifiableShortLongMap1.put(short9, long0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
