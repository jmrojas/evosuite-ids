/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TIntDoubleMap;
import gnu.trove.map.hash.TIntDoubleHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.PrintStream;
import java.io.RandomAccessFile;
import java.io.UnsupportedEncodingException;
import java.util.AbstractMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntDoubleHashMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-243);
      float float0 = 977.6848F;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0, float0);
      int[] intArray0 = new int[9];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = int0;
      intArray0[8] = int0;
      tIntDoubleHashMap0.keys(intArray0);
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap((TIntDoubleMap) tIntDoubleHashMap0);
      boolean boolean0 = true;
      tIntDoubleHashMap1.reenableAutoCompaction(boolean0);
      TIntDoubleHashMap tIntDoubleHashMap2 = new TIntDoubleHashMap(int0, int0, int0, int0);
      int int1 = Integer.MIN_VALUE;
      TIntDoubleHashMap tIntDoubleHashMap3 = new TIntDoubleHashMap(int1);
      tIntDoubleHashMap3.ensureCapacity(int1);
      int int2 = 31;
      boolean boolean1 = tIntDoubleHashMap3.contains(int2);
      assertEquals(false, boolean1);
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-1609);
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0, int0);
      float float0 = tIntDoubleHashMap0.getAutoCompactionFactor();
      int int1 = 694;
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int1, (float) int0, int0, (double) float0);
      assertEquals("{}", tIntDoubleHashMap1.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 1042;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0, int0);
      double double0 = tIntDoubleHashMap0.getNoEntryValue();
      int int1 = (-1473);
      float float0 = 0.0F;
      double double1 = 0.0;
      tIntDoubleHashMap0.iterator();
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int1, float0, int1, double1);
      String string0 = "no elemenet at ";
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = double0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int1;
      doubleArray0[6] = double0;
      doubleArray0[7] = (double) int0;
      doubleArray0[8] = (double) int0;
      TIntDoubleHashMap tIntDoubleHashMap2 = new TIntDoubleHashMap(tIntDoubleHashMap1._set, doubleArray0);
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"no elemenet at \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0, int0);
      int int1 = 1044;
      double double0 = 598.3559274751908;
      double double1 = tIntDoubleHashMap0.adjustOrPutValue(int1, (double) int1, double0);
      assertEquals(7, tIntDoubleHashMap0.capacity());
      assertEquals(598.3559274751908, double1, 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 262;
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      double[] doubleArray0 = new double[1];
      double double0 = 1623.4035589581435;
      doubleArray0[0] = double0;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      intArray0[3] = int0;
      int int1 = (-1554);
      intArray0[0] = int1;
      int int2 = 1070;
      intArray0[1] = int2;
      int int3 = (-1862);
      intArray0[2] = int3;
      int int4 = (-1);
      intArray0[3] = int4;
      double[] doubleArray1 = new double[10];
      doubleArray1[0] = (double) int2;
      doubleArray1[1] = (double) int3;
      doubleArray1[2] = (double) int1;
      doubleArray1[3] = (double) int4;
      doubleArray1[4] = (double) intArray0[2];
      doubleArray1[5] = (double) intArray0[0];
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap();
      double double1 = tIntDoubleHashMap1.adjustOrPutValue(intArray0[0], doubleArray1[2], (double) int4);
      doubleArray1[0] = (double) int3;
      doubleArray1[1] = double1;
      doubleArray1[2] = (double) intArray0[0];
      doubleArray1[3] = (double) intArray0[3];
      double double2 = (-672.4425210643843);
      doubleArray1[4] = double2;
      double double3 = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = double3;
      doubleArray1[6] = double1;
      doubleArray1[7] = (double) int3;
      doubleArray1[8] = double3;
      doubleArray1[9] = double2;
      doubleArray1[6] = (double) int2;
      doubleArray1[7] = (double) intArray0[2];
      doubleArray1[8] = (double) intArray0[1];
      doubleArray1[9] = (double) intArray0[1];
      double double4 = 2017.393891502377;
      tIntDoubleHashMap1.containsValue(double4);
      assertEquals(false, tIntDoubleHashMap1.isEmpty());
      
      TIntDoubleHashMap tIntDoubleHashMap2 = new TIntDoubleHashMap(intArray0, doubleArray1);
      int int5 = 1996;
      tIntDoubleHashMap2.ensureCapacity(int5);
      assertEquals("{-1554=-1862.0, -1862=-1554.0, 1070=-1.0, -1=-1.0}", tIntDoubleHashMap2.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      double[] doubleArray0 = new double[3];
      double double0 = 1275.7729963612712;
      doubleArray0[0] = double0;
      double double1 = 539.7069821849562;
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      AbstractMap.SimpleImmutableEntry<Double, Integer> abstractMap_SimpleImmutableEntry0 = null;
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<Double, Integer>, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<Double, Integer>, Integer>(abstractMap_SimpleImmutableEntry0, integer0);
      abstractMap_SimpleImmutableEntry1.hashCode();
      doubleArray0[2] = double0;
      doubleArray0[1] = double1;
      double double2 = (-319.06676611622606);
      doubleArray0[2] = double2;
      double[] doubleArray1 = tIntDoubleHashMap0.values(doubleArray0);
      assertEquals(23, tIntDoubleHashMap0.capacity());
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      float float0 = 209.27716F;
      int int1 = 1993;
      float float1 = 686.9699F;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int1, float1);
      tIntDoubleHashMap0.hashCode();
      int int2 = (-141);
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int0, float0, int2, (double) int2);
      int int3 = 180;
      tIntDoubleHashMap1.capacity();
      double double0 = tIntDoubleHashMap1.put(int3, int3);
      int int4 = (-749);
      TIntDoubleHashMap tIntDoubleHashMap2 = new TIntDoubleHashMap(int4);
      tIntDoubleHashMap1.iterator();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int2;
      doubleArray0[1] = (double) int2;
      doubleArray0[2] = (double) int2;
      doubleArray0[3] = (double) float0;
      doubleArray0[4] = double0;
      doubleArray0[5] = (double) int2;
      doubleArray0[6] = double0;
      double double1 = (-653.8827677807672);
      doubleArray0[7] = double1;
      tIntDoubleHashMap2.values(doubleArray0);
      tIntDoubleHashMap1.putAll((TIntDoubleMap) tIntDoubleHashMap2);
      TDoubleProcedure tDoubleProcedure0 = null;
      // Undeclared exception!
      try {
        tIntDoubleHashMap1.forEachValue(tDoubleProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 79;
      intArray0[0] = int0;
      int int1 = 133853;
      intArray0[1] = int1;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) intArray0[0];
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) intArray0[1];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      assertEquals("{133853=133853.0, 79=79.0}", tIntDoubleHashMap0.toString());
      assertEquals(false, tIntDoubleHashMap0.isEmpty());
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 2729;
          float float0 = (-836.798F);
          double double0 = 0.0;
          TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0, float0, int0, double0);
          tIntDoubleHashMap0.getNoEntryKey();
          int int1 = 149;
          TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int1);
          boolean boolean0 = true;
          tIntDoubleHashMap1.reenableAutoCompaction(boolean0);
          String string0 = "Wc5";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          int int0 = 0;
          TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
          int int1 = 0;
          double double0 = (-1.0);
          tIntDoubleHashMap0.adjustOrPutValue(int1, (double) int0, double0);
          tIntDoubleHashMap0.size();
          TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int0);
          FileDescriptor fileDescriptor0 = FileDescriptor.out;
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:244)
             // sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0, int0);
      int int1 = tIntDoubleHashMap0.capacity();
      int int2 = 0;
      double double0 = (-1.0);
      tIntDoubleHashMap0.putIfAbsent(int1, double0);
      int int3 = 0;
      int int4 = (-1276);
      double double1 = 1697.2244214139814;
      tIntDoubleHashMap0.put(int4, double1);
      assertEquals(false, tIntDoubleHashMap0.isEmpty());
      
      double double2 = 504.96584551494084;
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int2, (float) int2, int3, double2);
      assertFalse(tIntDoubleHashMap1.equals(tIntDoubleHashMap0));
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 37;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0, int0);
      String string0 = "R\":pF@(1wJ8Ru6";
      tIntDoubleHashMap0.values();
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // R\":pF@(1wJ8Ru6 (No such file or directory)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-1783);
      int int1 = 1816;
      int[] intArray0 = new int[4];
      intArray0[0] = int0;
      int int2 = (-1602);
      intArray0[1] = int2;
      intArray0[2] = int1;
      intArray0[3] = int0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      ObjectOutput objectOutput0 = null;
      // Undeclared exception!
      try {
        tIntDoubleHashMap0.writeExternal(objectOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1550;
      int[] intArray0 = new int[2];
      intArray0[0] = int0;
      int int1 = 1;
      float float0 = 0.0F;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int1, float0, intArray0[0], (double) int0);
      int int2 = 0;
      double double0 = 0.0;
      boolean boolean0 = tIntDoubleHashMap0.adjustValue(int2, double0);
      assertEquals(false, boolean0);
      
      int int3 = (-240);
      intArray0[1] = int3;
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) intArray0[1];
      doubleArray0[1] = (double) intArray0[0];
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) intArray0[0];
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) intArray0[0];
      doubleArray0[6] = (double) int3;
      doubleArray0[0] = (double) intArray0[0];
      doubleArray0[1] = (double) int3;
      doubleArray0[2] = (double) intArray0[0];
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      double double1 = 0.0;
      doubleArray0[5] = double1;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) intArray0[0];
      doubleArray0[8] = (double) int3;
      doubleArray0[9] = (double) int0;
      doubleArray0[7] = (double) int0;
      doubleArray0[8] = (double) int0;
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(intArray0, doubleArray0);
      doubleArray0[9] = (double) intArray0[0];
      TIntDoubleHashMap tIntDoubleHashMap2 = new TIntDoubleHashMap(intArray0, doubleArray0);
      tIntDoubleHashMap2.keySet();
      assertEquals("{-240=-240.0, 1550=1550.0}", tIntDoubleHashMap2.toString());
      
      TIntDoubleHashMap tIntDoubleHashMap3 = new TIntDoubleHashMap(int0, int0, int0, int0);
      int int4 = (-235);
      tIntDoubleHashMap3.ensureCapacity(int4);
      assertFalse(tIntDoubleHashMap3.equals(tIntDoubleHashMap1));
      assertFalse(tIntDoubleHashMap3.equals(tIntDoubleHashMap2));
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-1716);
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0);
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap((TIntDoubleMap) tIntDoubleHashMap0);
      tIntDoubleHashMap0.keys();
      String string0 = "u'";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // u'
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-1);
      float float0 = 722.03394F;
      int[] intArray0 = new int[6];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) intArray0[0];
      doubleArray0[1] = (double) float0;
      doubleArray0[2] = (double) intArray0[4];
      doubleArray0[3] = (double) intArray0[0];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      assertEquals(17, tIntDoubleHashMap0.capacity());
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)16;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-95);
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-35);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-100);
      byteArray0[8] = byte8;
      tIntDoubleHashMap0._states = byteArray0;
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int0, int0);
      TIntDoubleHashMap tIntDoubleHashMap2 = new TIntDoubleHashMap(int0, float0);
      tIntDoubleHashMap2.values();
      tIntDoubleHashMap2.contains(int0);
      int int1 = (-727);
      tIntDoubleHashMap1.getNoEntryValue();
      double double0 = 0.0;
      tIntDoubleHashMap2.trimToSize();
      tIntDoubleHashMap2.put(int1, double0);
      tIntDoubleHashMap2.valueCollection();
      assertTrue(tIntDoubleHashMap2.equals(tIntDoubleHashMap0));
  }
}
