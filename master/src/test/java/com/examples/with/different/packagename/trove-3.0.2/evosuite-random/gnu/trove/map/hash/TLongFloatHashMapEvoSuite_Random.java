/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TFloatFunction;
import gnu.trove.map.TLongFloatMap;
import gnu.trove.map.hash.TLongFloatHashMap;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.PrintStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.StringTokenizer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TLongFloatHashMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-1754);
      float float0 = Float.POSITIVE_INFINITY;
      int int1 = (-677);
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int1);
      long long0 = 0L;
      tLongFloatHashMap0.increment(long0);
      long long1 = (-249L);
      float float1 = (-964.71814F);
      TLongFloatMap tLongFloatMap0 = null;
      String string0 = "";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap();
          int int0 = tLongFloatHashMap0.capacity();
          assertEquals(23, int0);
          
          float float0 = tLongFloatHashMap0.getAutoCompactionFactor();
          int int1 = 0;
          TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(int1);
          float float1 = tLongFloatHashMap1.getNoEntryValue();
          tLongFloatHashMap1.valueCollection();
          tLongFloatHashMap1.trimToSize();
          int int2 = 1541;
          int int3 = 193;
          float float2 = 10.0F;
          String string0 = tLongFloatHashMap1.toString();
          assertNotNull(string0);
          
          TLongFloatHashMap tLongFloatHashMap2 = new TLongFloatHashMap(int3, float2);
          float[] floatArray0 = new float[7];
          floatArray0[0] = float0;
          floatArray0[1] = float1;
          floatArray0[2] = (float) int1;
          floatArray0[3] = (float) int1;
          floatArray0[4] = float2;
          floatArray0[5] = (float) int3;
          float float3 = 1.0F;
          floatArray0[6] = float3;
          float[] floatArray1 = tLongFloatHashMap1.values(floatArray0);
          assertSame(floatArray1, floatArray0);
          assertNotNull(floatArray1);
          
          TLongFloatHashMap tLongFloatHashMap3 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap2);
          assertEquals(3, tLongFloatHashMap3.capacity());
          assertEquals(0.0F, tLongFloatHashMap3.getNoEntryValue(), 0.01F);
          
          TLongFloatHashMap tLongFloatHashMap4 = new TLongFloatHashMap(int2);
          tLongFloatHashMap1.valueCollection();
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"{}\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.GeneratedConstructorAccessor13.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = 1L;
      longArray0[0] = long0;
      long long1 = 0L;
      int int0 = 2039;
      long long2 = 805L;
      longArray0[0] = long2;
      long long3 = (-452L);
      longArray0[1] = long3;
      long long4 = 0L;
      float float0 = 0.0F;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0, (float) longArray0[0], long4, float0);
      longArray0[1] = long1;
      float[] floatArray0 = new float[4];
      int int1 = 0;
      float float1 = 0.0F;
      long long5 = 1012L;
      float float2 = (-1990.0774F);
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(int1, float1, long5, float2);
      Long long6 = new Long(longArray0[0]);
      String string0 = long6.toString();
      boolean boolean0 = tLongFloatHashMap1.equals((Object) string0);
      assertTrue(tLongFloatHashMap1.equals(tLongFloatHashMap0));
      
      floatArray0[0] = (float) long0;
      floatArray0[1] = (float) longArray0[0];
      floatArray0[2] = (float) long1;
      floatArray0[3] = (float) longArray0[0];
      TLongFloatHashMap tLongFloatHashMap2 = new TLongFloatHashMap(longArray0, floatArray0);
      int int2 = 1;
      tLongFloatHashMap0.clear();
      tLongFloatHashMap2.ensureCapacity(int2);
      TLongFloatHashMap tLongFloatHashMap3 = new TLongFloatHashMap(int2);
      boolean boolean1 = tLongFloatHashMap0.equals((Object) tLongFloatHashMap3);
      assertFalse(tLongFloatHashMap3.equals(tLongFloatHashMap2));
      assertEquals("{}", tLongFloatHashMap0.toString());
      assertFalse(boolean1 == boolean0);
      assertEquals(3, tLongFloatHashMap0.capacity());
      
      TFloatFunction tFloatFunction0 = null;
      // Undeclared exception!
      try {
        tLongFloatHashMap2.transformValues(tFloatFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 75;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0, int0, int0, int0);
      String string0 = tLongFloatHashMap0.toString();
      assertNotNull(string0);
      
      tLongFloatHashMap0.setAutoCompactionFactor((float) int0);
      float float0 = 1859.084F;
      int int1 = (-1768);
      float float1 = Float.NEGATIVE_INFINITY;
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(int1, float1);
      tLongFloatHashMap0.adjustValue((long) int0, float0);
      float[] floatArray0 = new float[7];
      Locale locale0 = Locale.CHINESE;
      String string1 = locale0.getCountry();
      tLongFloatHashMap0.equals((Object) string1);
      long long0 = (-1L);
      float float2 = 1607.9156F;
      tLongFloatHashMap1.put(long0, float2);
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) int0;
      floatArray0[6] = float0;
      tLongFloatHashMap0.values(floatArray0);
      tLongFloatHashMap0.getNoEntryKey();
      assertFalse(tLongFloatHashMap0.equals(tLongFloatHashMap1));
      assertEquals("{}", tLongFloatHashMap0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap();
      tLongFloatHashMap0.getNoEntryValue();
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(int0);
      String string0 = tLongFloatHashMap1.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      TLongFloatHashMap tLongFloatHashMap2 = new TLongFloatHashMap();
      long[] longArray0 = tLongFloatHashMap2.keys();
      assertEquals(23, tLongFloatHashMap2.capacity());
      assertNotNull(longArray0);
      
      tLongFloatHashMap1.valueCollection();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tLongFloatHashMap1._states, int0, int0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-1680);
      float float0 = 1846.4869F;
      float float1 = 10.0F;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0, float0, (long) int0, float1);
      tLongFloatHashMap0.contains((long) int0);
      int int1 = 0;
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(int1);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-93);
      byteArray0[0] = byte0;
      tLongFloatHashMap0.keys();
      byte byte1 = (byte)13;
      tLongFloatHashMap1.tempDisableAutoCompaction();
      byteArray0[1] = byte1;
      String string0 = "}";
      String string1 = "X$~AT*X*SKs,yLiR";
      String string2 = "}";
      int int2 = (-1214);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string1, string2, int2, string0, string2, string2);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: }://X$~AT*X*SKs,yLiR@}:-1214%7D?%7D#%7D
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = 1L;
      longArray0[0] = long0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) long0;
      floatArray0[1] = (float) longArray0[0];
      float float0 = 0.0F;
      floatArray0[2] = float0;
      floatArray0[3] = (float) longArray0[0];
      floatArray0[4] = (float) long0;
      float float1 = 309.2074F;
      floatArray0[5] = float1;
      floatArray0[6] = (float) longArray0[0];
      floatArray0[7] = (float) long0;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
      int int0 = 0;
      tLongFloatHashMap0.ensureCapacity(int0);
      assertEquals(17, tLongFloatHashMap0.capacity());
      assertEquals(1, tLongFloatHashMap0.size());
      assertEquals("{1=1.0}", tLongFloatHashMap0.toString());
  }

//   @Test
//   public void test7()  throws Throwable  {
//       int int0 = 515;
//       float float0 = 623.41016F;
//       TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0, float0);
//       long long0 = 0L;
//       float float1 = 0.0F;
//       float float2 = tLongFloatHashMap0.putIfAbsent(long0, float1);
//       assertEquals(false, tLongFloatHashMap0.isEmpty());
//       assertEquals(0.0F, float2, 0.01F);
//   }

//   @Test
//   public void test8()  throws Throwable  {
//       int int0 = 161;
//       TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0);
//       tLongFloatHashMap0.trimToSize();
//       assertEquals(3, tLongFloatHashMap0.capacity());
//       
//       int int1 = 961;
//       int int2 = 1518;
//       int int3 = 1;
//       float float0 = (-998.3007F);
//       TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(int3, float0);
//       TLongFloatHashMap tLongFloatHashMap2 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap1);
//       TLongFloatHashMap tLongFloatHashMap3 = new TLongFloatHashMap();
//       float float1 = 1631.3064F;
//       TLongFloatHashMap tLongFloatHashMap4 = new TLongFloatHashMap(int2, float1);
//       TLongFloatHashMap tLongFloatHashMap5 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap4);
//       Long long0 = new Long((long) int1);
//       String string0 = "no elemenet at ";
//       AbstractMap.SimpleImmutableEntry<Long, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Long, String>(long0, string0);
//       abstractMap_SimpleImmutableEntry0.getValue();
//       tLongFloatHashMap5.iterator();
//       TLongFloatHashMap tLongFloatHashMap6 = new TLongFloatHashMap(int1);
//       tLongFloatHashMap6.tempDisableAutoCompaction();
//       long long1 = (-903L);
//       float float2 = 1223.3242F;
//       float float3 = tLongFloatHashMap4.putIfAbsent(long1, float2);
//       assertEquals("{-903=1223.3242}", tLongFloatHashMap4.toString());
//       assertEquals(0.0F, float3, 0.01F);
//   }

  @Test
  public void test9()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = 0L;
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) longArray0[1];
      floatArray0[1] = (float) longArray0[2];
      floatArray0[2] = (float) long0;
      floatArray0[3] = (float) longArray0[2];
      floatArray0[4] = (float) long0;
      floatArray0[5] = (float) longArray0[1];
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
      tLongFloatHashMap0.iterator();
      assertEquals(1, tLongFloatHashMap0.size());
      
      long long1 = (-906L);
      longArray0[3] = long1;
      long long2 = 303L;
      longArray0[0] = long2;
      long long3 = 0L;
      longArray0[1] = long3;
      long long4 = 921L;
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap();
      long long5 = 1910L;
      tLongFloatHashMap1.contains(long5);
      longArray0[2] = long4;
      tLongFloatHashMap1.size();
      long long6 = 0L;
      longArray0[3] = long6;
      float[] floatArray1 = new float[3];
      floatArray1[0] = (float) long3;
      floatArray1[1] = (float) longArray0[0];
      floatArray1[2] = (float) long2;
      TLongFloatHashMap tLongFloatHashMap2 = new TLongFloatHashMap(longArray0, floatArray1);
      assertEquals(11, tLongFloatHashMap2.capacity());
      assertEquals("{921=303.0, 303=0.0, 0=303.0}", tLongFloatHashMap2.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-206);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) int0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) longArray0[0];
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) int0;
      floatArray0[6] = (float) int0;
      floatArray0[7] = (float) int0;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
      tLongFloatHashMap0.keySet();
      TLongFloatMap tLongFloatMap0 = null;
      TLongFloatHashMap tLongFloatHashMap1 = null;
      try {
        tLongFloatHashMap1 = new TLongFloatHashMap(tLongFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          long[] longArray0 = new long[8];
          long long0 = (-487L);
          longArray0[0] = long0;
          long long1 = 502L;
          longArray0[1] = long1;
          long long2 = 0L;
          longArray0[2] = long2;
          long long3 = (-1L);
          longArray0[3] = long3;
          long long4 = 0L;
          longArray0[4] = long4;
          long long5 = 1340L;
          longArray0[5] = long5;
          long long6 = 1505L;
          longArray0[6] = long6;
          long long7 = 0L;
          longArray0[7] = long7;
          float[] floatArray0 = new float[6];
          float float0 = (-1309.4839F);
          floatArray0[0] = float0;
          floatArray0[1] = (float) longArray0[1];
          float float1 = 0.0F;
          floatArray0[2] = float1;
          floatArray0[3] = (float) longArray0[2];
          floatArray0[4] = (float) long2;
          floatArray0[5] = (float) long5;
          TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
          FileDescriptor fileDescriptor0 = FileDescriptor.out;
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:244)
             // sun.reflect.GeneratedConstructorAccessor22.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-971);
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)30;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      Long long0 = new Long((long) byteArray0[0]);
      String string0 = long0.toString();
      tLongFloatHashMap0.equals((Object) string0);
      byte byte2 = (byte) (-34);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-110);
      byteArray0[3] = byte3;
      byteArray0[0] = byte3;
      byteArray0[1] = byte1;
      byteArray0[2] = byte2;
      byte byte4 = (byte)0;
      byteArray0[3] = byte4;
      byteArray0[4] = byte0;
      byteArray0[5] = byte3;
      byte byte5 = (byte)0;
      byteArray0[4] = byte5;
      byte byte6 = (byte)24;
      byteArray0[5] = byte6;
      tLongFloatHashMap0._states = byteArray0;
      assertSame(tLongFloatHashMap0._states, byteArray0);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-1942);
      float float0 = 0.0F;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      longArray0[6] = (long) int0;
      longArray0[7] = (long) int0;
      longArray0[8] = (long) int0;
      float[] floatArray0 = new float[8];
      float float1 = 825.77405F;
      floatArray0[0] = float1;
      floatArray0[1] = (float) longArray0[0];
      float float2 = 0.0F;
      floatArray0[2] = float2;
      floatArray0[3] = (float) longArray0[1];
      floatArray0[4] = (float) longArray0[4];
      floatArray0[5] = (float) longArray0[8];
      float float3 = 0.0F;
      floatArray0[6] = float3;
      floatArray0[7] = (float) longArray0[5];
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
      int int1 = 72;
      tLongFloatHashMap0.ensureCapacity(int1);
      assertEquals(163, tLongFloatHashMap0.capacity());
      
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(int0);
      Object object0 = null;
      tLongFloatHashMap1.equals(object0);
      tLongFloatHashMap1.clear();
      TLongFloatHashMap tLongFloatHashMap2 = new TLongFloatHashMap(int0, float0);
      TLongFloatHashMap tLongFloatHashMap3 = null;
      try {
        tLongFloatHashMap3 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap2);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = (-239);
          TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0);
          TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap0);
          tLongFloatHashMap1.getNoEntryKey();
          int int1 = (-1);
          TLongFloatHashMap tLongFloatHashMap2 = new TLongFloatHashMap(int1);
          TLongFloatHashMap tLongFloatHashMap3 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap2);
          tLongFloatHashMap3.trimToSize();
          String string0 = "&u";
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"&u\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.GeneratedConstructorAccessor13.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      tLongFloatHashMap0.clear();
      long[] longArray0 = new long[1];
      tLongFloatHashMap0.trimToSize();
      assertEquals("{}", tLongFloatHashMap0.toString());
      
      longArray0[0] = (long) int0;
      tLongFloatHashMap0._set = longArray0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      String string0 = " greater than last index ";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0);
      String string1 = stringTokenizer0.nextToken();
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>((Integer) int0, (Object) string1);
      abstractMap_SimpleEntry0.hashCode();
      floatArray0[4] = (float) int0;
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(int0, floatArray0[4]);
      float float0 = 0.0F;
      float float1 = (-619.36F);
      tLongFloatHashMap1.adjustOrPutValue((long) int0, float0, float1);
      assertEquals(1, tLongFloatHashMap1.size());
      
      floatArray0[5] = (float) int0;
      tLongFloatHashMap0.values(floatArray0);
      TLongFloatHashMap tLongFloatHashMap2 = new TLongFloatHashMap(int0);
      tLongFloatHashMap2.setAutoCompactionFactor((float) int0);
      assertFalse(tLongFloatHashMap2.equals(tLongFloatHashMap1));
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 0;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0);
      tLongFloatHashMap0.tempDisableAutoCompaction();
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) int0;
      floatArray0[6] = (float) int0;
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap();
      floatArray0[7] = (float) int0;
      float float0 = 0.0F;
      floatArray0[8] = float0;
      tLongFloatHashMap0.values(floatArray0);
      ObjectInput objectInput0 = null;
      // Undeclared exception!
      try {
        tLongFloatHashMap0.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
