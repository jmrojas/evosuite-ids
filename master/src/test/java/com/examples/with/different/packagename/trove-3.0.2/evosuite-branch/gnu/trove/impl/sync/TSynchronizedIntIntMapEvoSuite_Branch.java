/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TIntFunction;
import gnu.trove.impl.sync.TSynchronizedIntCollection;
import gnu.trove.impl.sync.TSynchronizedIntIntMap;
import gnu.trove.impl.sync.TSynchronizedIntSet;
import gnu.trove.iterator.TIntIntIterator;
import gnu.trove.map.TIntIntMap;
import gnu.trove.map.hash.TIntIntHashMap;
import gnu.trove.procedure.TIntIntProcedure;
import gnu.trove.procedure.TIntProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedIntIntMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.getNoEntryValue()I: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedIntIntMap.<init>(Lgnu/trove/map/TIntIntMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      int int0 = tSynchronizedIntIntMap0.getNoEntryValue();
      assertEquals(0, int0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.putAll(Lgnu/trove/map/TIntIntMap;)V: root-Branch
   */

//   @Test
//   public void test1()  throws Throwable  {
//       TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap((-9), (-9));
//       TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
//       tSynchronizedIntIntMap0.putAll((TIntIntMap) tIntIntHashMap0);
//       assertEquals(0.5F, tIntIntHashMap0.getAutoCompactionFactor(), 0.01F);
//   }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.values()[I: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      int[] intArray0 = tSynchronizedIntIntMap0.values();
      assertNotNull(intArray0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.hashCode()I: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      int int0 = tSynchronizedIntIntMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.putIfAbsent(II)I: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedIntIntMap.<init>(Lgnu/trove/map/TIntIntMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap((-863), (-863));
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0, (Object) (-863));
      tSynchronizedIntIntMap0.putIfAbsent(0, (-863));
      assertEquals("{0=-863}", tIntIntHashMap0.toString());
      assertEquals(1, tSynchronizedIntIntMap0.size());
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap((-12), (-12), (-12), (-12));
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      boolean boolean0 = tSynchronizedIntIntMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.iterator()Lgnu/trove/iterator/TIntIntIterator;: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      TIntIntIterator tIntIntIterator0 = tSynchronizedIntIntMap0.iterator();
      assertEquals(false, tIntIntIterator0.hasNext());
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.equals(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      boolean boolean0 = tSynchronizedIntIntMap0.equals((Object) "");
      assertEquals(false, boolean0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.getNoEntryKey()I: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap((-863), (-863));
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0, (Object) (-863));
      int int0 = tSynchronizedIntIntMap0.getNoEntryKey();
      assertEquals(0, int0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.put(II)I: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      tSynchronizedIntIntMap0.put(18, 0);
      assertEquals(1, tIntIntHashMap0.size());
      assertEquals("{18=0}", tSynchronizedIntIntMap0.toString());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.forEachEntry(Lgnu/trove/procedure/TIntIntProcedure;)Z: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(565, 565);
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      boolean boolean0 = tSynchronizedIntIntMap0.forEachEntry((TIntIntProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      boolean boolean0 = tSynchronizedIntIntMap0.forEachValue((TIntProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.adjustValue(II)Z: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      boolean boolean0 = tSynchronizedIntIntMap0.adjustValue((-1270), (-1270));
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap((-863), (-863));
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0, (Object) (-863));
      String string0 = tSynchronizedIntIntMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap((-863), (-863));
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0, (Object) (-863));
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      tSynchronizedIntIntMap0.putAll((Map<? extends Integer, ? extends Integer>) hashMap0);
      assertEquals(0, hashMap0.size());
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.containsValue(I)Z: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap((-5), (-5));
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      boolean boolean0 = tSynchronizedIntIntMap0.containsValue((-5));
      assertEquals(false, boolean0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.transformValues(Lgnu/trove/function/TIntFunction;)V: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(565, 565);
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      tSynchronizedIntIntMap0.transformValues((TIntFunction) null);
      assertEquals(0, tSynchronizedIntIntMap0.getNoEntryKey());
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.values([I)[I: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(1114, 1114, 1114, 1114);
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      int[] intArray0 = tSynchronizedIntIntMap0.values(tIntIntHashMap0._set);
      assertNotNull(intArray0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.clear()V: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(565, 565);
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      tSynchronizedIntIntMap0.clear();
      assertEquals(0, tSynchronizedIntIntMap0.size());
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.adjustOrPutValue(III)I: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap((-12), (-12), (-12), (-12));
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      int int0 = tSynchronizedIntIntMap0.adjustOrPutValue((-12), (-12), (-12));
      assertEquals(false, tIntIntHashMap0.isEmpty());
      assertEquals((-12), int0);
  }

  //Test case number: 20
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.increment(I)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedIntIntMap.<init>(Lgnu/trove/map/TIntIntMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap((-863), (-863));
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0, (Object) (-863));
      boolean boolean0 = tSynchronizedIntIntMap0.increment(0);
      assertEquals(false, boolean0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.retainEntries(Lgnu/trove/procedure/TIntIntProcedure;)Z: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(565, 565);
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      boolean boolean0 = tSynchronizedIntIntMap0.retainEntries((TIntIntProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.keys([I)[I: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap((-12), (-12), (-12), (-12));
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      int[] intArray0 = tSynchronizedIntIntMap0.keys(tIntIntHashMap0._set);
      assertNotNull(intArray0);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.remove(I)I: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      int int0 = tSynchronizedIntIntMap0.remove((-1270));
      assertEquals(0, int0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.get(I)I: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap((-9), (-9));
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      int int0 = tSynchronizedIntIntMap0.get((-9));
      assertEquals(0, int0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.keys()[I: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      int[] intArray0 = tSynchronizedIntIntMap0.keys();
      assertNotNull(intArray0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.forEachKey(Lgnu/trove/procedure/TIntProcedure;)Z: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(1114, 1114, 1114, 1114);
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      boolean boolean0 = tSynchronizedIntIntMap0.forEachKey((TIntProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.containsKey(I)Z: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap((-12), (-12), (-12), (-12));
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      boolean boolean0 = tSynchronizedIntIntMap0.containsKey((-12));
      assertEquals(false, boolean0);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.size()I: root-Branch
   */

  @Test
  public void test28()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap((-12), (-12), (-12), (-12));
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      int int0 = tSynchronizedIntIntMap0.size();
      assertEquals(0, int0);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.<init>(Lgnu/trove/map/TIntIntMap;)V: I17 Branch 1 IFNONNULL L59 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = null;
      try {
        tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.keySet()Lgnu/trove/set/TIntSet;: I11 Branch 2 IFNONNULL L107 - true
   * 2 gnu.trove.impl.sync.TSynchronizedIntIntMap.keySet()Lgnu/trove/set/TIntSet;: I11 Branch 2 IFNONNULL L107 - false
   */

  @Test
  public void test30()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap((-5), (-5));
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      TSynchronizedIntSet tSynchronizedIntSet0 = (TSynchronizedIntSet)tSynchronizedIntIntMap0.keySet();
      assertNotNull(tSynchronizedIntSet0);
      
      TSynchronizedIntSet tSynchronizedIntSet1 = (TSynchronizedIntSet)tSynchronizedIntIntMap0.keySet();
      assertSame(tSynchronizedIntSet1, tSynchronizedIntSet0);
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedIntIntMap.valueCollection()Lgnu/trove/TIntCollection;: I11 Branch 3 IFNONNULL L121 - true
   * 2 gnu.trove.impl.sync.TSynchronizedIntIntMap.valueCollection()Lgnu/trove/TIntCollection;: I11 Branch 3 IFNONNULL L121 - false
   * 3 gnu.trove.impl.sync.TSynchronizedIntIntMap.<init>(Lgnu/trove/map/TIntIntMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test31()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      TSynchronizedIntIntMap tSynchronizedIntIntMap0 = new TSynchronizedIntIntMap((TIntIntMap) tIntIntHashMap0);
      TSynchronizedIntCollection tSynchronizedIntCollection0 = (TSynchronizedIntCollection)tSynchronizedIntIntMap0.valueCollection();
      assertNotNull(tSynchronizedIntCollection0);
      
      TSynchronizedIntCollection tSynchronizedIntCollection1 = (TSynchronizedIntCollection)tSynchronizedIntIntMap0.valueCollection();
      assertSame(tSynchronizedIntCollection1, tSynchronizedIntCollection0);
  }
}
