/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap;
import gnu.trove.map.TDoubleObjectMap;
import gnu.trove.map.hash.TDoubleObjectHashMap;
import gnu.trove.procedure.TDoubleObjectProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.HashMap;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableDoubleObjectMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-1);
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>(int0, int0);
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      Collection<Object> collection0 = tUnmodifiableDoubleObjectMap0.valueCollection();
      assertEquals(0, collection0.size());
  }

//   @Test
//   public void test1()  throws Throwable  {
//       TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>();
//       int int0 = (-993);
//       tDoubleObjectHashMap0.ensureCapacity(int0);
//       TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
//       int int1 = 11579;
//       TDoubleObjectHashMap<Integer> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Integer>(int1);
//       TUnmodifiableDoubleObjectMap<Integer> tUnmodifiableDoubleObjectMap1 = new TUnmodifiableDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap1);
//       boolean boolean0 = tUnmodifiableDoubleObjectMap0.isEmpty();
//       assertEquals(true, boolean0);
//       
//       TDoubleObjectHashMap<Double> tDoubleObjectHashMap2 = new TDoubleObjectHashMap<Double>();
//       TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap2 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap2);
//       Double[] doubleArray0 = tUnmodifiableDoubleObjectMap2.values();
//       assertNotNull(doubleArray0);
//       
//       TDoubleObjectHashMap<Double> tDoubleObjectHashMap3 = new TDoubleObjectHashMap<Double>();
//       TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap3 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap3);
//       tDoubleObjectHashMap3.isEmpty();
//       TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap4 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tUnmodifiableDoubleObjectMap3);
//       TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap5 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
//       TDoubleObjectProcedure<Object> tDoubleObjectProcedure0 = null;
//       // Undeclared exception!
//       try {
//         tUnmodifiableDoubleObjectMap5.retainEntries(tDoubleObjectProcedure0);
//         fail("Expecting exception: UnsupportedOperationException");
//       
//       } catch(UnsupportedOperationException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test2()  throws Throwable  {
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>();
      TUnmodifiableDoubleObjectMap<Integer> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap0);
      URI uRI0 = null;
      double double0 = (-562.5486056417807);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleObjectMap0.remove(double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TDoubleObjectMap<Object> tDoubleObjectMap0 = null;
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = null;
      try {
        tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>(tDoubleObjectMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>(int0, int0);
      TDoubleObjectMap<Integer> tDoubleObjectMap0 = null;
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      tDoubleObjectHashMap0.putAll((TDoubleObjectMap<?>) tUnmodifiableDoubleObjectMap0);
      tUnmodifiableDoubleObjectMap0.iterator();
      TUnmodifiableDoubleObjectMap<Integer> tUnmodifiableDoubleObjectMap1 = null;
      try {
        tUnmodifiableDoubleObjectMap1 = new TUnmodifiableDoubleObjectMap<Integer>(tDoubleObjectMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 1954;
      float float0 = 1154.4283F;
      double double0 = 2.2250738585072014E-308;
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>(int0, float0, double0);
      tDoubleObjectHashMap0.compact();
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)9;
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-63);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-98);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-38);
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      tDoubleObjectHashMap0._states = byteArray0;
      TUnmodifiableDoubleObjectMap<Integer> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap0);
      double double1 = 132.04434823659926;
      // Undeclared exception!
      try {
        tUnmodifiableDoubleObjectMap0.put(double1, (Integer) int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-1310);
      float float0 = (-2044.9845F);
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>(int0, float0);
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      int int1 = 976;
      float float1 = 0.0F;
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Integer>(int1, float1);
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap2 = new TDoubleObjectHashMap<Double>();
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap1 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap2);
      TUnmodifiableDoubleObjectMap<Integer> tUnmodifiableDoubleObjectMap2 = new TUnmodifiableDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap1);
      tDoubleObjectHashMap1.getNoEntryKey();
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap3 = new TDoubleObjectHashMap<Object>((TDoubleObjectMap<?>) tDoubleObjectHashMap1);
      double double0 = (-1.0);
      URI uRI0 = null;
      tUnmodifiableDoubleObjectMap2.iterator();
      File file0 = null;
      try {
        file0 = new File(uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>();
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      double double0 = tUnmodifiableDoubleObjectMap0.getNoEntryKey();
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      TDoubleObjectHashMap<String> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<String>(int0, int0);
      float float0 = tDoubleObjectHashMap0.getAutoCompactionFactor();
      TUnmodifiableDoubleObjectMap<String> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<String>((TDoubleObjectMap<String>) tDoubleObjectHashMap0);
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      // Undeclared exception!
      try {
        tUnmodifiableDoubleObjectMap0.remove((double) float0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      double double0 = 697.5454013192443;
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>(int0, (float) int0, double0);
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      tUnmodifiableDoubleObjectMap0.keySet();
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      double double1 = 0.0;
      doubleArray0[7] = double1;
      doubleArray0[8] = (double) int0;
      doubleArray0[9] = double0;
      double[] doubleArray1 = tDoubleObjectHashMap0.keys(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test10()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>();
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      double double0 = 544.268428373082;
      // Undeclared exception!
      try {
        tUnmodifiableDoubleObjectMap0.remove(double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-1915);
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>();
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      Object object0 = null;
      tUnmodifiableDoubleObjectMap0.containsValue(object0);
      TDoubleObjectHashMap<String> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<String>(int0);
      TUnmodifiableDoubleObjectMap<String> tUnmodifiableDoubleObjectMap1 = new TUnmodifiableDoubleObjectMap<String>((TDoubleObjectMap<String>) tDoubleObjectHashMap1);
      int int1 = (-1);
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap2 = new TDoubleObjectHashMap<Object>(int1, int1);
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap2 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap2);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = Locale.US;
      String string0 = locale0.getDisplayScript(locale1);
      tDoubleObjectHashMap1.keys(tDoubleObjectHashMap0._set);
      tUnmodifiableDoubleObjectMap2.containsValue((Object) string0);
      locale0.getDisplayCountry(locale1);
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap3 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tUnmodifiableDoubleObjectMap2);
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 0;
      float float0 = 1309.8121F;
      TDoubleObjectHashMap<String> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<String>(int0, float0);
      float float1 = 1.0F;
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Object>(int0, float1);
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap1);
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap1 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap1);
      int int1 = 246;
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap2 = new TDoubleObjectHashMap<Integer>(int1);
      TUnmodifiableDoubleObjectMap<Integer> tUnmodifiableDoubleObjectMap2 = new TUnmodifiableDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap2);
      tUnmodifiableDoubleObjectMap2.keySet();
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap3 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tUnmodifiableDoubleObjectMap1);
      tDoubleObjectHashMap1.valueCollection();
      double double0 = 497.47288153004024;
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://?#
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 349;
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>(int0, int0, int0);
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap1 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tUnmodifiableDoubleObjectMap0);
      int int1 = (-372);
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Integer>(int1);
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap2 = new TDoubleObjectHashMap<Object>((TDoubleObjectMap<?>) tDoubleObjectHashMap1);
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap2 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap2);
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap3 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tUnmodifiableDoubleObjectMap2);
      String string0 = "6-o+DEz(A";
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"6-o+DEz(A\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 113;
      int int1 = 0;
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>(int1, int1);
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Integer>(int0, int0, int0);
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap2 = new TDoubleObjectHashMap<Object>((TDoubleObjectMap<?>) tDoubleObjectHashMap1);
      tDoubleObjectHashMap1.getNoEntryKey();
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap1 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap2);
      tUnmodifiableDoubleObjectMap1.valueCollection();
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap2 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap2);
      int int2 = (-1);
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap3 = new TDoubleObjectHashMap<Object>(int2, int2);
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap3 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap3);
      tDoubleObjectHashMap1.keys();
      tUnmodifiableDoubleObjectMap3.keySet();
      // Undeclared exception!
      try {
        tUnmodifiableDoubleObjectMap2.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 885;
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>();
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      double double0 = (-15.178485035072908);
      Double[] doubleArray0 = new Double[8];
      double double1 = (-1.0);
      Double double2 = new Double(double1);
      doubleArray0[0] = double2;
      doubleArray0[1] = (Double) double0;
      doubleArray0[2] = (Double) double0;
      double double3 = 218.30348347915898;
      Double double4 = new Double(double3);
      doubleArray0[3] = double4;
      doubleArray0[4] = (Double) double0;
      double double5 = 0.0;
      Double double6 = new Double(double5);
      doubleArray0[5] = double6;
      doubleArray0[6] = (Double) double0;
      doubleArray0[7] = (Double) double0;
      ToObjectArrayProceedure<Double> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Double>(doubleArray0);
      tUnmodifiableDoubleObjectMap0.forEachValue((TObjectProcedure<? super Double>) toObjectArrayProceedure0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleObjectMap0.putIfAbsent(double0, (Double) double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      TDoubleObjectMap<Object> tDoubleObjectMap0 = null;
      int int0 = 523;
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>(int0, int0);
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Double>((TDoubleObjectMap<? extends Double>) tDoubleObjectHashMap0);
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap1);
      Object object0 = null;
      tUnmodifiableDoubleObjectMap0.equals(object0);
      TDoubleObjectMap<Double> tDoubleObjectMap1 = null;
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap1 = null;
      try {
        tUnmodifiableDoubleObjectMap1 = new TUnmodifiableDoubleObjectMap<Double>(tDoubleObjectMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-814);
      double double0 = (-1339.4812085533463);
      TDoubleObjectMap<String> tDoubleObjectMap0 = null;
      TUnmodifiableDoubleObjectMap<String> tUnmodifiableDoubleObjectMap0 = null;
      try {
        tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<String>(tDoubleObjectMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
