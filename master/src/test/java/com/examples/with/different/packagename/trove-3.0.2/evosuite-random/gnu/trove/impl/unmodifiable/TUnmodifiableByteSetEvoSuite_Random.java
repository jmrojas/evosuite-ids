/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TByteCollection;
import gnu.trove.impl.sync.TSynchronizedByteSet;
import gnu.trove.impl.unmodifiable.TUnmodifiableByteList;
import gnu.trove.impl.unmodifiable.TUnmodifiableByteSet;
import gnu.trove.list.TByteList;
import gnu.trove.list.array.TByteArrayList;
import gnu.trove.set.TByteSet;
import gnu.trove.set.hash.TByteHashSet;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableByteSetEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = "";
      String string1 = "/\\U,+g";
      File file0 = new File(string1);
      File file1 = new File(file0, string1);
      // Undeclared exception!
      try {
        File.createTempFile(string0, string1, file1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 1656;
      float float0 = 0.0F;
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)125;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-54);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)12;
      byteArray0[6] = byte6;
      byte byte7 = (byte)11;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-119);
      byteArray0[8] = byte8;
      byte byte9 = (byte)73;
      byteArray0[9] = byte9;
      TByteHashSet tByteHashSet0 = new TByteHashSet(byteArray0);
      TByteHashSet tByteHashSet1 = new TByteHashSet((TByteCollection) tByteHashSet0);
      TUnmodifiableByteSet tUnmodifiableByteSet0 = new TUnmodifiableByteSet((TByteSet) tByteHashSet1);
      TSynchronizedByteSet tSynchronizedByteSet0 = new TSynchronizedByteSet((TByteSet) tUnmodifiableByteSet0);
      TUnmodifiableByteSet tUnmodifiableByteSet1 = new TUnmodifiableByteSet((TByteSet) tSynchronizedByteSet0);
      byte byte10 = (byte) (-52);
      // Undeclared exception!
      try {
        tUnmodifiableByteSet1.remove(byte10);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet();
      TUnmodifiableByteSet tUnmodifiableByteSet0 = new TUnmodifiableByteSet((TByteSet) tByteHashSet0);
      // Undeclared exception!
      try {
        tUnmodifiableByteSet0.retainAll((TByteCollection) tByteHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      TByteHashSet tByteHashSet0 = new TByteHashSet(int0, int0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)110;
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byte byte1 = (byte) (-46);
      tByteHashSet0.remove(byte1);
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      tByteHashSet0.compact();
      byte byte2 = (byte)54;
      TUnmodifiableByteSet tUnmodifiableByteSet0 = new TUnmodifiableByteSet((TByteSet) tByteHashSet0);
      tUnmodifiableByteSet0.toArray(tByteHashSet0._set);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try {
        tUnmodifiableByteSet0.retainAll((Collection<?>) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      byte byte0 = (byte)15;
      TByteHashSet tByteHashSet0 = new TByteHashSet(int0, (float) int0, byte0);
      TUnmodifiableByteSet tUnmodifiableByteSet0 = new TUnmodifiableByteSet((TByteSet) tByteHashSet0);
      tUnmodifiableByteSet0.isEmpty();
      TUnmodifiableByteSet tUnmodifiableByteSet1 = new TUnmodifiableByteSet((TByteSet) tByteHashSet0);
      int int1 = tUnmodifiableByteSet1.size();
      assertEquals(0, int1);
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-107);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      byteArray0[4] = byte4;
      byte byte5 = (byte)87;
      byteArray0[5] = byte5;
      byte byte6 = (byte)87;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-48);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-99);
      byteArray0[8] = byte8;
      byte byte9 = (byte)41;
      byteArray0[9] = byte9;
      TByteHashSet tByteHashSet0 = new TByteHashSet(byteArray0);
      TUnmodifiableByteSet tUnmodifiableByteSet0 = new TUnmodifiableByteSet((TByteSet) tByteHashSet0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = locale0.getDisplayCountry();
      boolean boolean0 = tUnmodifiableByteSet0.equals((Object) string0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 1892;
      byte byte0 = (byte)11;
      TByteHashSet tByteHashSet0 = new TByteHashSet(int0, (float) int0, byte0);
      TUnmodifiableByteSet tUnmodifiableByteSet0 = new TUnmodifiableByteSet((TByteSet) tByteHashSet0);
      tByteHashSet0.trimToSize();
      tUnmodifiableByteSet0.containsAll(tByteHashSet0._set);
      TUnmodifiableByteSet tUnmodifiableByteSet1 = new TUnmodifiableByteSet((TByteSet) tUnmodifiableByteSet0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      tUnmodifiableByteSet0.toArray(tByteHashSet0._states);
      // Undeclared exception!
      try {
        tUnmodifiableByteSet0.remove(byteArray0[3]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byte byte1 = (byte) (-75);
      byteArray0[3] = byte1;
      byteArray0[0] = byte1;
      byteArray0[1] = byte0;
      byteArray0[2] = byte1;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[4] = byte0;
      byte byte2 = (byte) (-79);
      byteArray0[0] = byte2;
      byte byte3 = (byte) (-14);
      byteArray0[1] = byte3;
      byte byte4 = (byte)105;
      TByteHashSet tByteHashSet0 = new TByteHashSet();
      TUnmodifiableByteSet tUnmodifiableByteSet0 = new TUnmodifiableByteSet((TByteSet) tByteHashSet0);
      TSynchronizedByteSet tSynchronizedByteSet0 = new TSynchronizedByteSet((TByteSet) tUnmodifiableByteSet0);
      String string0 = "DEFAULT_SHORT_NO_ENTRY_VALUE: ";
      File file0 = new File(string0, string0);
      String string1 = file0.getAbsolutePath();
      TSynchronizedByteSet tSynchronizedByteSet1 = new TSynchronizedByteSet((TByteSet) tSynchronizedByteSet0, (Object) string1);
      TUnmodifiableByteSet tUnmodifiableByteSet1 = new TUnmodifiableByteSet((TByteSet) tSynchronizedByteSet1);
      byteArray0[2] = byte4;
      byte byte5 = (byte)89;
      byteArray0[3] = byte5;
      byte byte6 = (byte)0;
      byteArray0[4] = byte6;
      TByteSet tByteSet0 = null;
      TUnmodifiableByteSet tUnmodifiableByteSet2 = null;
      try {
        tUnmodifiableByteSet2 = new TUnmodifiableByteSet(tByteSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TByteSet tByteSet0 = null;
      TUnmodifiableByteSet tUnmodifiableByteSet0 = null;
      try {
        tUnmodifiableByteSet0 = new TUnmodifiableByteSet(tByteSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet();
      Locale locale0 = Locale.TAIWAN;
      TUnmodifiableByteSet tUnmodifiableByteSet0 = new TUnmodifiableByteSet((TByteSet) tByteHashSet0);
      tUnmodifiableByteSet0.containsAll((TByteCollection) tByteHashSet0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-48);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-39);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      tUnmodifiableByteSet0.containsAll(byteArray0);
      tUnmodifiableByteSet0.containsAll(tByteHashSet0._set);
      Object object0 = null;
      locale0.equals(object0);
      tUnmodifiableByteSet0.size();
      // Undeclared exception!
      try {
        tUnmodifiableByteSet0.removeAll((TByteCollection) tByteHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)94;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      TByteHashSet tByteHashSet0 = new TByteHashSet(byteArray0);
      String string0 = "";
      String string1 = "cannot find maximum of an empty list";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string1, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://?cannot%20find%20maximum%20of%20an%20empty%20list#
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 930;
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-97);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-81);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)20;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-121);
      byteArray0[6] = byte6;
      byte byte7 = (byte)92;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-20);
      byteArray0[8] = byte8;
      byte byte9 = (byte)54;
      byteArray0[9] = byte9;
      TByteHashSet tByteHashSet0 = new TByteHashSet(byteArray0);
      TUnmodifiableByteSet tUnmodifiableByteSet0 = new TUnmodifiableByteSet((TByteSet) tByteHashSet0);
      byte byte10 = (byte)0;
      // Undeclared exception!
      try {
        tUnmodifiableByteSet0.remove(byte10);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-1011);
      float float0 = 917.0123F;
      TByteHashSet tByteHashSet0 = new TByteHashSet(int0, float0);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-108);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-53);
      byteArray0[2] = byte2;
      byte byte3 = (byte)91;
      byteArray0[3] = byte3;
      tByteHashSet0.toString();
      byte byte4 = (byte) (-2);
      byteArray0[4] = byte4;
      TUnmodifiableByteSet tUnmodifiableByteSet0 = new TUnmodifiableByteSet((TByteSet) tByteHashSet0);
      tUnmodifiableByteSet0.isEmpty();
      byte byte5 = (byte) (-15);
      TUnmodifiableByteSet tUnmodifiableByteSet1 = new TUnmodifiableByteSet((TByteSet) tByteHashSet0);
      byte byte6 = (byte)0;
      // Undeclared exception!
      try {
        tUnmodifiableByteSet1.remove(byte6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      TByteHashSet tByteHashSet0 = new TByteHashSet();
      TUnmodifiableByteSet tUnmodifiableByteSet0 = new TUnmodifiableByteSet((TByteSet) tByteHashSet0);
      // Undeclared exception!
      try {
        tUnmodifiableByteSet0.removeAll((TByteCollection) tByteHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)24;
      byteArray0[0] = byte0;
      TByteArrayList tByteArrayList0 = TByteArrayList.wrap(byteArray0, byte0);
      TUnmodifiableByteList tUnmodifiableByteList0 = new TUnmodifiableByteList((TByteList) tByteArrayList0);
      TByteCollection tByteCollection0 = tUnmodifiableByteList0.c;
      TByteHashSet tByteHashSet0 = new TByteHashSet(tByteCollection0);
      TUnmodifiableByteSet tUnmodifiableByteSet0 = new TUnmodifiableByteSet((TByteSet) tByteHashSet0);
      tUnmodifiableByteSet0.toArray();
      TByteSet tByteSet0 = null;
      TUnmodifiableByteSet tUnmodifiableByteSet1 = null;
      try {
        tUnmodifiableByteSet1 = new TUnmodifiableByteSet(tByteSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet();
      TUnmodifiableByteSet tUnmodifiableByteSet0 = new TUnmodifiableByteSet((TByteSet) tByteHashSet0);
      // Undeclared exception!
      try {
        tUnmodifiableByteSet0.addAll((TByteCollection) tByteHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = "";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }
}
