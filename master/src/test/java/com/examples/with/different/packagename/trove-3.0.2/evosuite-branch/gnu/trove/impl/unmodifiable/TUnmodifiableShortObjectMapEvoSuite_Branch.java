/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TObjectFunction;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortSet;
import gnu.trove.iterator.TShortObjectIterator;
import gnu.trove.map.TShortObjectMap;
import gnu.trove.map.hash.TShortObjectHashMap;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.TShortObjectProcedure;
import gnu.trove.procedure.TShortProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableShortObjectMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.<init>(Lgnu/trove/map/TShortObjectMap;)V: I17 Branch 1 IFNONNULL L53 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>((-888), (-888));
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      Short[] shortArray0 = new Short[3];
      ToObjectArrayProceedure<Short> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Short>(shortArray0);
      boolean boolean0 = tUnmodifiableShortObjectMap0.forEachValue((TObjectProcedure<? super Short>) toObjectArrayProceedure0);
      assertEquals(true, boolean0);
  }

  //Test case number: 1
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.putAll(Ljava/util/Map;)V: root-Branch
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.getNoEntryKey()S: root-Branch
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachEntry(Lgnu/trove/procedure/TShortObjectProcedure;)Z: root-Branch
   * 4 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.size()I: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>();
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      TShortObjectHashMap<Object> tShortObjectHashMap1 = new TShortObjectHashMap<Object>((TShortObjectMap<?>) tUnmodifiableShortObjectMap0);
      TUnmodifiableShortObjectMap<Object> tUnmodifiableShortObjectMap1 = new TUnmodifiableShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap1);
      HashMap<Short, Short> hashMap0 = new HashMap<Short, Short>();
      // Undeclared exception!
      try {
        tUnmodifiableShortObjectMap1.putAll((Map<? extends Short, ?>) hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keys()[S: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>((-888));
      TUnmodifiableShortObjectMap<Integer> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Integer>((TShortObjectMap<Integer>) tShortObjectHashMap0);
      short[] shortArray0 = tUnmodifiableShortObjectMap0.keys();
      assertNotNull(shortArray0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsValue(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TShortObjectHashMap<String> tShortObjectHashMap0 = new TShortObjectHashMap<String>(378, 378);
      TShortObjectHashMap<Object> tShortObjectHashMap1 = new TShortObjectHashMap<Object>((TShortObjectMap<?>) tShortObjectHashMap0);
      TUnmodifiableShortObjectMap<Object> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap1);
      boolean boolean0 = tUnmodifiableShortObjectMap0.containsValue((Object) tShortObjectHashMap0);
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>(150, 150);
      TUnmodifiableShortObjectMap<Integer> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Integer>((TShortObjectMap<Integer>) tShortObjectHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortObjectMap0.transformValues((TObjectFunction<Integer, Integer>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.remove(S)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>();
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortObjectMap0.remove((short)6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.values()[Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TShortObjectHashMap<Object> tShortObjectHashMap0 = new TShortObjectHashMap<Object>((int) (short) (-1806), (float) (short) (-1806));
      TUnmodifiableShortObjectMap<Object> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap0);
      Object[] objectArray0 = tUnmodifiableShortObjectMap0.values();
      assertNotNull(objectArray0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>();
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      Short[] shortArray0 = new Short[7];
      Short[] shortArray1 = tUnmodifiableShortObjectMap0.values(shortArray0);
      assertSame(shortArray0, shortArray1);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.retainEntries(Lgnu/trove/procedure/TShortObjectProcedure;)Z: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TShortObjectHashMap<Object> tShortObjectHashMap0 = new TShortObjectHashMap<Object>((int) (short) (-1806), (float) (short) (-1806));
      TUnmodifiableShortObjectMap<Object> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortObjectMap0.retainEntries((TShortObjectProcedure<? super Object>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.clear()V: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>();
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortObjectMap0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.putIfAbsent(SLjava/lang/Object;)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>();
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortObjectMap0.putIfAbsent((short)453, (Short) (short)453);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TShortObjectHashMap<Object> tShortObjectHashMap0 = new TShortObjectHashMap<Object>();
      TUnmodifiableShortObjectMap<Object> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap0);
      boolean boolean0 = tUnmodifiableShortObjectMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.put(SLjava/lang/Object;)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TShortObjectHashMap<String> tShortObjectHashMap0 = new TShortObjectHashMap<String>(378, 378);
      TShortObjectHashMap<Object> tShortObjectHashMap1 = new TShortObjectHashMap<Object>((TShortObjectMap<?>) tShortObjectHashMap0);
      TUnmodifiableShortObjectMap<Object> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap1);
      // Undeclared exception!
      try {
        tUnmodifiableShortObjectMap0.put((short)1582, (Object) tShortObjectHashMap1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 13
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.iterator()Lgnu/trove/iterator/TShortObjectIterator;: root-Branch
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap$1.<init>(Lgnu/trove/impl/unmodifiable/TUnmodifiableShortObjectMap;)V: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TShortObjectHashMap<String> tShortObjectHashMap0 = new TShortObjectHashMap<String>((-865), (-865));
      TUnmodifiableShortObjectMap<String> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<String>((TShortObjectMap<String>) tShortObjectHashMap0);
      TShortObjectIterator<String> tShortObjectIterator0 = tUnmodifiableShortObjectMap0.iterator();
      assertEquals(false, tShortObjectIterator0.hasNext());
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.containsKey(S)Z: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TShortObjectHashMap<String> tShortObjectHashMap0 = new TShortObjectHashMap<String>((-865), (-865));
      TUnmodifiableShortObjectMap<String> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<String>((TShortObjectMap<String>) tShortObjectHashMap0);
      boolean boolean0 = tUnmodifiableShortObjectMap0.containsKey((short) (-998));
      assertEquals(false, boolean0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keys([S)[S: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TShortObjectHashMap<Object> tShortObjectHashMap0 = new TShortObjectHashMap<Object>((-888));
      TUnmodifiableShortObjectMap<Object> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap0);
      short[] shortArray0 = tUnmodifiableShortObjectMap0.keys(tShortObjectHashMap0._set);
      assertNotNull(shortArray0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.forEachKey(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TShortObjectHashMap<Object> tShortObjectHashMap0 = new TShortObjectHashMap<Object>();
      TUnmodifiableShortObjectMap<Object> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap0);
      boolean boolean0 = tUnmodifiableShortObjectMap0.forEachKey((TShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>((-888));
      TUnmodifiableShortObjectMap<Integer> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Integer>((TShortObjectMap<Integer>) tShortObjectHashMap0);
      String string0 = tUnmodifiableShortObjectMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.hashCode()I: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TShortObjectHashMap<Object> tShortObjectHashMap0 = new TShortObjectHashMap<Object>();
      TUnmodifiableShortObjectMap<Object> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap0);
      int int0 = tUnmodifiableShortObjectMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.get(S)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>();
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      tUnmodifiableShortObjectMap0.get((short)230);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.putAll(Lgnu/trove/map/TShortObjectMap;)V: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>();
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortObjectMap0.putAll((TShortObjectMap<? extends Short>) tShortObjectHashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.<init>(Lgnu/trove/map/TShortObjectMap;)V: I17 Branch 1 IFNONNULL L53 - false
   */

  @Test
  public void test21()  throws Throwable  {
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = null;
      try {
        tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 22
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;: I4 Branch 2 IFNONNULL L74 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.keySet()Lgnu/trove/set/TShortSet;: I4 Branch 2 IFNONNULL L74 - false
   */

  @Test
  public void test22()  throws Throwable  {
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>(221, (float) 221, (short) (-1964));
      TUnmodifiableShortObjectMap<Integer> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Integer>((TShortObjectMap<Integer>) tShortObjectHashMap0);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = (TUnmodifiableShortSet)tUnmodifiableShortObjectMap0.keySet();
      assertNotNull(tUnmodifiableShortSet0);
      
      TUnmodifiableShortSet tUnmodifiableShortSet1 = (TUnmodifiableShortSet)tUnmodifiableShortObjectMap0.keySet();
      assertSame(tUnmodifiableShortSet1, tUnmodifiableShortSet0);
  }

  //Test case number: 23
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;: I4 Branch 3 IFNONNULL L82 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.valueCollection()Ljava/util/Collection;: I4 Branch 3 IFNONNULL L82 - false
   */

  @Test
  public void test23()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>();
      TUnmodifiableShortObjectMap<Short> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      Collection<Short> collection0 = tUnmodifiableShortObjectMap0.valueCollection();
      assertNotNull(collection0);
      
      Collection<Short> collection1 = tUnmodifiableShortObjectMap0.valueCollection();
      assertSame(collection1, collection0);
  }

  //Test case number: 24
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - false
   */

  @Test
  public void test24()  throws Throwable  {
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>(1120);
      TShortObjectHashMap<Integer> tShortObjectHashMap1 = new TShortObjectHashMap<Integer>(1120);
      TUnmodifiableShortObjectMap<Integer> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Integer>((TShortObjectMap<Integer>) tShortObjectHashMap1);
      boolean boolean0 = tUnmodifiableShortObjectMap0.equals((Object) tShortObjectHashMap0);
      assertEquals(true, boolean0);
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - false
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - true
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap.<init>(Lgnu/trove/map/TShortObjectMap;)V: I17 Branch 1 IFNONNULL L53 - true
   */

  @Test
  public void test25()  throws Throwable  {
      TShortObjectHashMap<Object> tShortObjectHashMap0 = new TShortObjectHashMap<Object>((-888));
      TUnmodifiableShortObjectMap<Object> tUnmodifiableShortObjectMap0 = new TUnmodifiableShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap0);
      boolean boolean0 = tUnmodifiableShortObjectMap0.equals((Object) "en-GB");
      assertEquals(false, boolean0);
  }
}
