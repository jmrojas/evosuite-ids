/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedCharByteMap;
import gnu.trove.map.TCharByteMap;
import gnu.trove.map.hash.TCharByteHashMap;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.text.Segment;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedCharByteMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap();
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap((TCharByteMap) tCharByteHashMap0);
      TSynchronizedCharByteMap tSynchronizedCharByteMap0 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap1);
      char char0 = 'c';
      Character character0 = new Character(char0);
      TSynchronizedCharByteMap tSynchronizedCharByteMap1 = new TSynchronizedCharByteMap((TCharByteMap) tSynchronizedCharByteMap0, (Object) character0);
      String string0 = File.separator;
      boolean boolean0 = tSynchronizedCharByteMap1.equals((Object) string0);
      assertEquals(false, boolean0);
      assertTrue(tSynchronizedCharByteMap0.equals(tSynchronizedCharByteMap1));
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, int0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)118;
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.toLanguageTag();
      TSynchronizedCharByteMap tSynchronizedCharByteMap0 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap0, (Object) string0);
      tSynchronizedCharByteMap0.clear();
      byte byte3 = (byte)25;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-104);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-63);
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-17);
      byteArray0[7] = byte7;
      locale0.getISO3Language();
      byte byte8 = (byte)0;
      boolean boolean0 = tSynchronizedCharByteMap0.isEmpty();
      assertEquals(true, boolean0);
      
      byteArray0[8] = byte8;
      tCharByteHashMap0.values(byteArray0);
      TSynchronizedCharByteMap tSynchronizedCharByteMap1 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap0);
      String string1 = tSynchronizedCharByteMap1.toString();
      assertNotNull(string1);
      assertEquals(true, tSynchronizedCharByteMap1.isEmpty());
  }

  @Test
  public void test2()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = 'S';
      charArray0[0] = char0;
      char char1 = 'w';
      charArray0[1] = char1;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)72;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-51);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)9;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-111);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-21);
      byteArray0[6] = byte6;
      byte byte7 = (byte)5;
      byteArray0[7] = byte7;
      byte byte8 = (byte)1;
      byteArray0[8] = byte8;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      TSynchronizedCharByteMap tSynchronizedCharByteMap0 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap0);
      char char2 = '\"';
      byte byte9 = (byte)3;
      tSynchronizedCharByteMap0.adjustOrPutValue(char2, byte9, byteArray0[8]);
      TCharByteMap tCharByteMap0 = null;
      TCharByteHashMap tCharByteHashMap1 = null;
      try {
        tCharByteHashMap1 = new TCharByteHashMap(tCharByteMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-1307);
      char char0 = '~';
      char[] charArray0 = new char[10];
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = char0;
      charArray0[3] = char0;
      charArray0[4] = char0;
      charArray0[5] = char0;
      charArray0[6] = char0;
      charArray0[7] = char0;
      charArray0[8] = char0;
      charArray0[9] = char0;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-77);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-80);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-57);
      byteArray0[4] = byte4;
      byte byte5 = (byte)79;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte)3;
      byteArray0[7] = byte7;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      Segment segment0 = new Segment();
      String string0 = segment0.toString();
      TSynchronizedCharByteMap tSynchronizedCharByteMap0 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap0, (Object) string0);
      tSynchronizedCharByteMap0.keys(tCharByteHashMap0._set);
      byte byte8 = (byte)29;
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(int0, (float) int0, char0, byte8);
      String string1 = "";
      File file0 = new File(string1);
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(file0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = 'I';
      charArray0[0] = char0;
      char char1 = 'D';
      charArray0[1] = char1;
      char char2 = 'a';
      charArray0[2] = char2;
      int int0 = (-154);
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0);
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap((TCharByteMap) tCharByteHashMap0);
      String string0 = "";
      File file0 = new File(string0);
      File file1 = file0.getParentFile();
      File file2 = new File(file1, string0);
      String string1 = file2.getCanonicalPath();
      TSynchronizedCharByteMap tSynchronizedCharByteMap0 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap1, (Object) string1);
      char char3 = 'P';
      byte byte0 = (byte)0;
      tSynchronizedCharByteMap0.adjustValue(char3, byte0);
      byte[] byteArray0 = new byte[1];
      byte byte1 = (byte)1;
      byteArray0[0] = byte1;
      byte byte2 = (byte)26;
      byteArray0[0] = byte2;
      TCharByteHashMap tCharByteHashMap2 = new TCharByteHashMap(charArray0, byteArray0);
      TSynchronizedCharByteMap tSynchronizedCharByteMap1 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap2);
      char char4 = ')';
      boolean boolean0 = tSynchronizedCharByteMap1.adjustValue(char4, byteArray0[0]);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 1973;
          TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0);
          String string0 = "^@44H+:E5";
          String string1 = "";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-333);
      char char0 = 'b';
      float float0 = (-1.0F);
      TCharByteMap tCharByteMap0 = null;
      Locale locale0 = Locale.CHINESE;
      String string0 = locale0.getScript();
      TSynchronizedCharByteMap tSynchronizedCharByteMap0 = new TSynchronizedCharByteMap(tCharByteMap0, (Object) string0);
      byte byte0 = (byte)0;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap((int) char0, float0, char0, byte0);
      TSynchronizedCharByteMap tSynchronizedCharByteMap1 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap0);
      tSynchronizedCharByteMap1.valueCollection();
      byte byte1 = (byte) (-108);
      int int1 = 1969;
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(int1);
      tSynchronizedCharByteMap1.clear();
      TSynchronizedCharByteMap tSynchronizedCharByteMap2 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap1);
      tSynchronizedCharByteMap2.values();
      char char1 = '~';
      tSynchronizedCharByteMap2.remove(char1);
      TCharByteHashMap tCharByteHashMap2 = new TCharByteHashMap(int0, (float) int0, char0, byte1);
      char char2 = '&';
      tSynchronizedCharByteMap2.adjustValue(char2, byte1);
      String string1 = "2IQw**Q*Jo*AH";
      TSynchronizedCharByteMap tSynchronizedCharByteMap3 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap2);
      tSynchronizedCharByteMap3.isEmpty();
      String string2 = "fu";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string1, string1, string2);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: 2IQw**Q*Jo*AH:2IQw**Q*Jo*AH#fu
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = 'o';
      charArray0[0] = char0;
      char char1 = 'J';
      charArray0[1] = char1;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-27);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-57);
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-90);
      byteArray0[4] = byte4;
      byte byte5 = (byte)41;
      byteArray0[5] = byte5;
      byte byte6 = (byte)31;
      byteArray0[6] = byte6;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap((TCharByteMap) tCharByteHashMap0);
      String string0 = "";
      File file0 = new File(string0, string0);
      URI uRI0 = file0.toURI();
      String string1 = uRI0.getRawQuery();
      String string2 = uRI0.getScheme();
      TSynchronizedCharByteMap tSynchronizedCharByteMap0 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap1, (Object) string2);
      TSynchronizedCharByteMap tSynchronizedCharByteMap1 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap1, (Object) string1);
      Locale locale0 = Locale.FRANCE;
      String string3 = locale0.getISO3Language();
      TSynchronizedCharByteMap tSynchronizedCharByteMap2 = new TSynchronizedCharByteMap((TCharByteMap) tSynchronizedCharByteMap1, (Object) string3);
      // Undeclared exception!
      try {
        tSynchronizedCharByteMap2.valueCollection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-587);
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0);
      TSynchronizedCharByteMap tSynchronizedCharByteMap0 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap0);
      String string0 = "+}ks5#czA~";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: +}ks5#czA~://+}ks5#czA~+%7Dks5%23czA~#+%7Dks5%23czA~
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TCharByteMap tCharByteMap0 = null;
      Locale locale0 = Locale.GERMAN;
      String string0 = locale0.getScript();
      TSynchronizedCharByteMap tSynchronizedCharByteMap0 = new TSynchronizedCharByteMap(tCharByteMap0, (Object) string0);
      Object object0 = null;
      TSynchronizedCharByteMap tSynchronizedCharByteMap1 = new TSynchronizedCharByteMap((TCharByteMap) tSynchronizedCharByteMap0, object0);
      char[] charArray0 = new char[7];
      char char0 = 'V';
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = char0;
      charArray0[3] = char0;
      charArray0[4] = char0;
      charArray0[5] = char0;
      charArray0[6] = char0;
      char char1 = '%';
      charArray0[0] = char1;
      char char2 = 'T';
      charArray0[1] = char2;
      char char3 = 'x';
      charArray0[2] = char3;
      char char4 = '2';
      charArray0[3] = char4;
      char char5 = 'W';
      charArray0[4] = char5;
      char char6 = 'Q';
      charArray0[5] = char6;
      char char7 = 'y';
      charArray0[6] = char7;
      // Undeclared exception!
      try {
        tSynchronizedCharByteMap1.keys(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TCharByteMap tCharByteMap0 = null;
      TSynchronizedCharByteMap tSynchronizedCharByteMap0 = null;
      try {
        tSynchronizedCharByteMap0 = new TSynchronizedCharByteMap(tCharByteMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      char char0 = 'U';
      byte byte0 = (byte)46;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, (float) int0, char0, byte0);
      TSynchronizedCharByteMap tSynchronizedCharByteMap0 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap0);
      boolean boolean0 = tSynchronizedCharByteMap0.containsValue(byte0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 781301;
      char char0 = '/';
      byte byte0 = (byte) (-110);
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, (float) int0, char0, byte0);
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap((TCharByteMap) tCharByteHashMap0);
      String string0 = "";
      Locale locale0 = new Locale(string0);
      String string1 = locale0.getDisplayCountry();
      TSynchronizedCharByteMap tSynchronizedCharByteMap0 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap0, (Object) string1);
      String string2 = tSynchronizedCharByteMap0.toString();
      TSynchronizedCharByteMap tSynchronizedCharByteMap1 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap1, (Object) string2);
      assertEquals(0, tSynchronizedCharByteMap1.size());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      char char0 = 'x';
      byte byte0 = (byte)0;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, float0, char0, byte0);
      String string0 = ",jiG";
      File file0 = new File(string0);
      File file1 = new File(file0, string0);
      String string1 = file1.toString();
      TSynchronizedCharByteMap tSynchronizedCharByteMap0 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap0, (Object) string1);
      char char1 = '(';
      boolean boolean0 = tSynchronizedCharByteMap0.increment(char1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap();
      tCharByteHashMap0.getNoEntryValue();
      byte byte0 = (byte)74;
      Byte byte1 = new Byte(byte0);
      TSynchronizedCharByteMap tSynchronizedCharByteMap0 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap0, (Object) byte1);
      tSynchronizedCharByteMap0.putAll((TCharByteMap) tCharByteHashMap0);
      String string0 = "";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = '[';
      charArray0[0] = char0;
      char char1 = '+';
      charArray0[1] = char1;
      char char2 = ']';
      charArray0[2] = char2;
      char char3 = '+';
      charArray0[3] = char3;
      char char4 = '^';
      charArray0[4] = char4;
      char char5 = '>';
      charArray0[5] = char5;
      char char6 = ' ';
      charArray0[6] = char6;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-99);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-29);
      byteArray0[1] = byte1;
      byte byte2 = (byte)20;
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-68);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-98);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-54);
      byteArray0[6] = byte6;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      Object object0 = null;
      TSynchronizedCharByteMap tSynchronizedCharByteMap0 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap0, object0);
      // Undeclared exception!
      try {
        tSynchronizedCharByteMap0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 0;
      float float0 = (-1099.1608F);
      char char0 = 'U';
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, float0);
      String string0 = "yPTyN=G&Nu)@yx7";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((int) char0);
      String string1 = byteArrayOutputStream0.toString();
      TSynchronizedCharByteMap tSynchronizedCharByteMap0 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap0, (Object) string1);
      Locale locale0 = Locale.FRANCE;
      String string2 = locale0.getDisplayScript();
      TSynchronizedCharByteMap tSynchronizedCharByteMap1 = new TSynchronizedCharByteMap((TCharByteMap) tSynchronizedCharByteMap0, (Object) string2);
      char char1 = '\"';
      byte byte0 = (byte) (-1);
      tSynchronizedCharByteMap1.adjustValue(char1, byte0);
      TSynchronizedCharByteMap tSynchronizedCharByteMap2 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap0);
      tSynchronizedCharByteMap2.clear();
      Locale locale1 = Locale.forLanguageTag(string0);
      Locale locale2 = Locale.KOREAN;
      tSynchronizedCharByteMap2.keys(tCharByteHashMap0._set);
      tSynchronizedCharByteMap2.putAll((TCharByteMap) tCharByteHashMap0);
      String string3 = locale1.getDisplayName(locale2);
      TSynchronizedCharByteMap tSynchronizedCharByteMap3 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap0, (Object) string3);
      tSynchronizedCharByteMap3.size();
      TCharByteMap tCharByteMap0 = null;
      TSynchronizedCharByteMap tSynchronizedCharByteMap4 = null;
      try {
        tSynchronizedCharByteMap4 = new TSynchronizedCharByteMap(tCharByteMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      TCharByteMap tCharByteMap0 = null;
      TSynchronizedCharByteMap tSynchronizedCharByteMap0 = null;
      try {
        tSynchronizedCharByteMap0 = new TSynchronizedCharByteMap(tCharByteMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = 'u';
      charArray0[0] = char0;
      char char1 = 'S';
      charArray0[1] = char1;
      char char2 = 'F';
      charArray0[2] = char2;
      char char3 = '{';
      charArray0[3] = char3;
      char char4 = '_';
      charArray0[4] = char4;
      char char5 = ':';
      charArray0[5] = char5;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-39);
      byteArray0[0] = byte0;
      byte byte1 = (byte)27;
      byteArray0[1] = byte1;
      byte byte2 = (byte)68;
      byteArray0[2] = byte2;
      byte byte3 = (byte)84;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-14);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-35);
      byteArray0[5] = byte5;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      TSynchronizedCharByteMap tSynchronizedCharByteMap0 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap0);
      tSynchronizedCharByteMap0.toString();
      int int0 = 1471;
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(int0);
      TSynchronizedCharByteMap tSynchronizedCharByteMap1 = new TSynchronizedCharByteMap((TCharByteMap) tCharByteHashMap1);
      byte[] byteArray1 = tSynchronizedCharByteMap1.values();
      assertNotSame(byteArray1, byteArray0);
  }
}
