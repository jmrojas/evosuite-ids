/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleSet;
import gnu.trove.map.TDoubleObjectMap;
import gnu.trove.map.hash.TDoubleObjectHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import java.util.Collection;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableDoubleObjectMapEvoSuite_WeakMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 19 covered goals:
   * 1 Weak Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.size()I:58 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 2 Weak Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.size()I:58 - DeleteStatement: size()I
   * 3 Weak Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 4 Weak Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 5 Weak Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 6 Weak Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 7 Weak Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 1 -> 0
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.size()I: root-Branch
   * 9 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - true
   * 10 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - false
   * 11 Weak Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.<init>(Lgnu/trove/map/TDoubleObjectMap;)V:53 - ReplaceComparisonOperator != null -> = null
   * 12 Weak Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.size()I:58 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 13 Weak Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.size()I:58 - DeleteStatement: size()I
   * 14 Weak Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 15 Weak Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 16 Weak Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 17 Weak Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 18 Weak Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 1 -> 0
   * 19 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.<init>(Lgnu/trove/map/TDoubleObjectMap;)V: I17 Branch 1 IFNONNULL L53 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>();
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) tUnmodifiableDoubleObjectMap0;
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Double>((-1160));
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap1 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap1);
      boolean boolean0 = tUnmodifiableDoubleObjectMap1.equals(objectArray0[0]);
      assertEquals(true, boolean0);
  }

  //Test case number: 1
  /*
   * 5 covered goals:
   * 1 Weak Mutation 11: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.isEmpty()Z:59 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 2 Weak Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.isEmpty()Z:59 - DeleteStatement: isEmpty()Z
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.isEmpty()Z: root-Branch
   * 4 Weak Mutation 11: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.isEmpty()Z:59 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 5 Weak Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.isEmpty()Z:59 - DeleteStatement: isEmpty()Z
   */

  @Test
  public void test1()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>(0, 0);
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      boolean boolean0 = tUnmodifiableDoubleObjectMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 7 covered goals:
   * 1 Weak Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.containsKey(D)Z:60 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 2 Weak Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.containsKey(D)Z:60 - InsertUnaryOp Negation of key
   * 3 Weak Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.containsKey(D)Z:60 - DeleteStatement: containsKey(D)Z
   * 4 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.containsKey(D)Z: root-Branch
   * 5 Weak Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.containsKey(D)Z:60 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 6 Weak Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.containsKey(D)Z:60 - InsertUnaryOp Negation of key
   * 7 Weak Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.containsKey(D)Z:60 - DeleteStatement: containsKey(D)Z
   */

  @Test
  public void test2()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>();
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      boolean boolean0 = tUnmodifiableDoubleObjectMap0.containsKey((double) (-1160));
      assertEquals(false, boolean0);
  }

  //Test case number: 3
  /*
   * 5 covered goals:
   * 1 Weak Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.containsValue(Ljava/lang/Object;)Z:61 - DeleteStatement: containsValue(Ljava/lang/Object;)Z
   * 2 Weak Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.containsValue(Ljava/lang/Object;)Z:61 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.containsValue(Ljava/lang/Object;)Z: root-Branch
   * 4 Weak Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.containsValue(Ljava/lang/Object;)Z:61 - DeleteStatement: containsValue(Ljava/lang/Object;)Z
   * 5 Weak Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.containsValue(Ljava/lang/Object;)Z:61 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   */

  @Test
  public void test3()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>(0, 0);
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      boolean boolean0 = tUnmodifiableDoubleObjectMap0.containsValue((Object) "");
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 7 covered goals:
   * 1 Weak Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.get(D)Ljava/lang/Object;:62 - InsertUnaryOp Negation of key
   * 2 Weak Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.get(D)Ljava/lang/Object;:62 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 3 Weak Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.get(D)Ljava/lang/Object;:62 - DeleteStatement: get(D)Ljava/lang/Object;
   * 4 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.get(D)Ljava/lang/Object;: root-Branch
   * 5 Weak Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.get(D)Ljava/lang/Object;:62 - InsertUnaryOp Negation of key
   * 6 Weak Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.get(D)Ljava/lang/Object;:62 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 7 Weak Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.get(D)Ljava/lang/Object;:62 - DeleteStatement: get(D)Ljava/lang/Object;
   */

  @Test
  public void test4()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>((-1160));
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      tUnmodifiableDoubleObjectMap0.get((double) (-1160));
  }

  //Test case number: 5
  /*
   * 14 covered goals:
   * 1 Weak Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;:74 - DeleteField: keySetLgnu/trove/set/TDoubleSet;
   * 2 Weak Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;:74 - ReplaceComparisonOperator != null -> = null
   * 3 Weak Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;:75 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 4 Weak Mutation 25: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;:75 - DeleteStatement: unmodifiableSet(Lgnu/trove/set/TDoubleSet;)Lgnu/trove/set/TDoubleSet;
   * 5 Weak Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;:75 - DeleteStatement: keySet()Lgnu/trove/set/TDoubleSet;
   * 6 Weak Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;:76 - DeleteField: keySetLgnu/trove/set/TDoubleSet;
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;: I4 Branch 2 IFNONNULL L74 - true
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;: I4 Branch 2 IFNONNULL L74 - false
   * 9 Weak Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;:74 - DeleteField: keySetLgnu/trove/set/TDoubleSet;
   * 10 Weak Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;:75 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 11 Weak Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;:74 - ReplaceComparisonOperator != null -> = null
   * 12 Weak Mutation 25: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;:75 - DeleteStatement: unmodifiableSet(Lgnu/trove/set/TDoubleSet;)Lgnu/trove/set/TDoubleSet;
   * 13 Weak Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;:75 - DeleteStatement: keySet()Lgnu/trove/set/TDoubleSet;
   * 14 Weak Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;:76 - DeleteField: keySetLgnu/trove/set/TDoubleSet;
   */

  @Test
  public void test5()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>((-1160));
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = (TUnmodifiableDoubleSet)tUnmodifiableDoubleObjectMap0.keySet();
      assertNotNull(tUnmodifiableDoubleSet0);
      
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet1 = (TUnmodifiableDoubleSet)tUnmodifiableDoubleObjectMap0.keySet();
      assertSame(tUnmodifiableDoubleSet1, tUnmodifiableDoubleSet0);
  }

  //Test case number: 6
  /*
   * 5 covered goals:
   * 1 Weak Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keys()[D:78 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 2 Weak Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keys()[D:78 - DeleteStatement: keys()[D
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keys()[D: root-Branch
   * 4 Weak Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keys()[D:78 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 5 Weak Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keys()[D:78 - DeleteStatement: keys()[D
   */

  @Test
  public void test6()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>();
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      double[] doubleArray0 = tUnmodifiableDoubleObjectMap0.keys();
      assertNotNull(doubleArray0);
  }

  //Test case number: 7
  /*
   * 5 covered goals:
   * 1 Weak Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keys([D)[D:79 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 2 Weak Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keys([D)[D:79 - DeleteStatement: keys([D)[D
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keys([D)[D: root-Branch
   * 4 Weak Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keys([D)[D:79 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 5 Weak Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keys([D)[D:79 - DeleteStatement: keys([D)[D
   */

  @Test
  public void test7()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>((-1160));
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      double[] doubleArray0 = tUnmodifiableDoubleObjectMap0.keys(tDoubleObjectHashMap0._set);
      assertNotNull(doubleArray0);
  }

  //Test case number: 8
  /*
   * 14 covered goals:
   * 1 Weak Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;:82 - DeleteField: valuesLjava/util/Collection;
   * 2 Weak Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;:82 - ReplaceComparisonOperator != null -> = null
   * 3 Weak Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: valueCollection()Ljava/util/Collection;
   * 4 Weak Mutation 35: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: unmodifiableCollection(Ljava/util/Collection;)Ljava/util/Collection;
   * 5 Weak Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 6 Weak Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;:84 - DeleteField: valuesLjava/util/Collection;
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;: I4 Branch 3 IFNONNULL L82 - true
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;: I4 Branch 3 IFNONNULL L82 - false
   * 9 Weak Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;:82 - DeleteField: valuesLjava/util/Collection;
   * 10 Weak Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: valueCollection()Ljava/util/Collection;
   * 11 Weak Mutation 35: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: unmodifiableCollection(Ljava/util/Collection;)Ljava/util/Collection;
   * 12 Weak Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;:82 - ReplaceComparisonOperator != null -> = null
   * 13 Weak Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 14 Weak Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;:84 - DeleteField: valuesLjava/util/Collection;
   */

  @Test
  public void test8()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>();
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      Collection<Object> collection0 = tUnmodifiableDoubleObjectMap0.valueCollection();
      assertNotNull(collection0);
      
      Collection<Object> collection1 = tUnmodifiableDoubleObjectMap0.valueCollection();
      assertSame(collection1, collection0);
  }

  //Test case number: 9
  /*
   * 10 covered goals:
   * 1 Weak Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 2 Weak Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteStatement: values([Ljava/lang/Object;)[Ljava/lang/Object;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: root-Branch
   * 4 Weak Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.values()[Ljava/lang/Object;:86 - DeleteStatement: values()[Ljava/lang/Object;
   * 5 Weak Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.values()[Ljava/lang/Object;:86 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 6 Weak Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.values()[Ljava/lang/Object;:86 - DeleteStatement: values()[Ljava/lang/Object;
   * 7 Weak Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 8 Weak Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.values()[Ljava/lang/Object;:86 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 9 Weak Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteStatement: values([Ljava/lang/Object;)[Ljava/lang/Object;
   * 10 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.values()[Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>(11, 11);
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      Object[] objectArray0 = tUnmodifiableDoubleObjectMap0.values();
      Object[] objectArray1 = tUnmodifiableDoubleObjectMap0.values(objectArray0);
      assertSame(objectArray0, objectArray1);
  }

  //Test case number: 10
  /*
   * 8 covered goals:
   * 1 Weak Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 0 -> 1
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - false
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - true
   * 4 Weak Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 5 Weak Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 6 Weak Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 7 Weak Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 8 Weak Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 0 -> 1
   */

  @Test
  public void test10()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>(6, 0, 0);
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      boolean boolean0 = tUnmodifiableDoubleObjectMap0.equals((Object) "{}");
      assertEquals(false, boolean0);
  }

  //Test case number: 11
  /*
   * 5 covered goals:
   * 1 Weak Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.hashCode()I:90 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 2 Weak Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.hashCode()I:90 - DeleteStatement: hashCode()I
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.hashCode()I: root-Branch
   * 4 Weak Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.hashCode()I:90 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 5 Weak Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.hashCode()I:90 - DeleteStatement: hashCode()I
   */

  @Test
  public void test11()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>(6, 6, 6);
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      int int0 = tUnmodifiableDoubleObjectMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 12
  /*
   * 5 covered goals:
   * 1 Weak Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.toString()Ljava/lang/String;:91 - DeleteStatement: toString()Ljava/lang/String;
   * 2 Weak Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.toString()Ljava/lang/String;:91 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.toString()Ljava/lang/String;: root-Branch
   * 4 Weak Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.toString()Ljava/lang/String;:91 - DeleteStatement: toString()Ljava/lang/String;
   * 5 Weak Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.toString()Ljava/lang/String;:91 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   */

  @Test
  public void test12()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>(6, 6, 6);
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      String string0 = tUnmodifiableDoubleObjectMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 13
  /*
   * 12 covered goals:
   * 1 Weak Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.getNoEntryKey()D:92 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 2 Weak Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.getNoEntryKey()D:92 - DeleteStatement: getNoEntryKey()D
   * 3 Weak Mutation 58: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachEntry(Lgnu/trove/procedure/TDoubleObjectProcedure;)Z:101 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TDoubleObjectProcedure;)Z
   * 4 Weak Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachEntry(Lgnu/trove/procedure/TDoubleObjectProcedure;)Z:101 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachEntry(Lgnu/trove/procedure/TDoubleObjectProcedure;)Z: root-Branch
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.getNoEntryKey()D: root-Branch
   * 7 Weak Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.size()I:58 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 8 Weak Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.size()I:58 - DeleteStatement: size()I
   * 9 Weak Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.getNoEntryKey()D:92 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 10 Weak Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.getNoEntryKey()D:92 - DeleteStatement: getNoEntryKey()D
   * 11 Weak Mutation 58: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachEntry(Lgnu/trove/procedure/TDoubleObjectProcedure;)Z:101 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TDoubleObjectProcedure;)Z
   * 12 Weak Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachEntry(Lgnu/trove/procedure/TDoubleObjectProcedure;)Z:101 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   */

  @Test
  public void test13()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>(9, 9, 9);
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Object>((TDoubleObjectMap<?>) tUnmodifiableDoubleObjectMap0);
      assertEquals(9.0, tDoubleObjectHashMap1.getNoEntryKey(), 0.01D);
  }

  //Test case number: 14
  /*
   * 5 covered goals:
   * 1 Weak Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z:95 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z
   * 2 Weak Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z:95 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   * 4 Weak Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z:95 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z
   * 5 Weak Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z:95 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   */

  @Test
  public void test14()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>();
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      boolean boolean0 = tUnmodifiableDoubleObjectMap0.forEachKey((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 15
  /*
   * 5 covered goals:
   * 1 Weak Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 2 Weak Mutation 56: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   * 4 Weak Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 5 Weak Mutation 56: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z
   */

  @Test
  public void test15()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>();
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      Object[] objectArray0 = new Object[13];
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(objectArray0);
      boolean boolean0 = tUnmodifiableDoubleObjectMap0.forEachValue((TObjectProcedure<? super Object>) toObjectArrayProceedure0);
      assertEquals(true, boolean0);
  }

  //Test case number: 16
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.<init>(Lgnu/trove/map/TDoubleObjectMap;)V: I17 Branch 1 IFNONNULL L53 - false
   * 2 Weak Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.<init>(Lgnu/trove/map/TDoubleObjectMap;)V:53 - ReplaceComparisonOperator != null -> = null
   */

  @Test
  public void test16()  throws Throwable  {
      TUnmodifiableDoubleObjectMap<Integer> tUnmodifiableDoubleObjectMap0 = null;
      try {
        tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
