/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.list.array;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TLongCollection;
import gnu.trove.impl.sync.TSynchronizedLongSet;
import gnu.trove.impl.sync.TSynchronizedRandomAccessLongList;
import gnu.trove.impl.unmodifiable.TUnmodifiableLongSet;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessLongList;
import gnu.trove.list.TLongList;
import gnu.trove.list.array.TLongArrayList;
import gnu.trove.list.linked.TLongLinkedList;
import gnu.trove.procedure.TLongProcedure;
import gnu.trove.set.TLongSet;
import gnu.trove.set.hash.TLongHashSet;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import java.util.Set;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TLongArrayListEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TLongArrayList tLongArrayList0 = new TLongArrayList();
      assertEquals("{}", tLongArrayList0.toString());
      assertEquals(0L, tLongArrayList0.getNoEntryValue());
      
      TUnmodifiableRandomAccessLongList tUnmodifiableRandomAccessLongList0 = new TUnmodifiableRandomAccessLongList((TLongList) tLongArrayList0);
      int int0 = (-344);
      long[] longArray0 = new long[3];
      long long0 = 58L;
      longArray0[0] = long0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      // Undeclared exception!
      try {
        tLongArrayList0.insert(int0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = (-9223372036854775808L);
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      long long1 = 0L;
      longArray0[4] = long1;
      longArray0[5] = long0;
      longArray0[6] = long1;
      longArray0[7] = long1;
      long long2 = (-1983L);
      longArray0[0] = long2;
      long long3 = (-623L);
      longArray0[1] = long3;
      long long4 = 9223372036854775807L;
      longArray0[2] = long4;
      long long5 = 1L;
      longArray0[3] = long5;
      long long6 = 1669L;
      longArray0[4] = long6;
      long long7 = 1705L;
      longArray0[5] = long7;
      long long8 = 111L;
      longArray0[6] = long8;
      long long9 = 0L;
      longArray0[7] = long9;
      TLongArrayList tLongArrayList0 = new TLongArrayList(longArray0);
      assertEquals(8, tLongArrayList0.size());
      assertEquals(0L, tLongArrayList0.getNoEntryValue());
      assertEquals("{-1983, -623, 9223372036854775807, 1, 1669, 1705, 111, 0}", tLongArrayList0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      long[] longArray0 = new long[7];
      long long0 = 661L;
      longArray0[0] = long0;
      long long1 = 9223372036854775807L;
      longArray0[1] = long1;
      long long2 = 1L;
      longArray0[2] = long2;
      long long3 = 994L;
      longArray0[3] = long3;
      long long4 = (-268L);
      longArray0[4] = long4;
      long long5 = 0L;
      longArray0[5] = long5;
      long long6 = 0L;
      longArray0[6] = long6;
      TLongArrayList tLongArrayList0 = TLongArrayList.wrap(longArray0);
      assertNotNull(tLongArrayList0);
      
      TSynchronizedRandomAccessLongList tSynchronizedRandomAccessLongList0 = new TSynchronizedRandomAccessLongList((TLongList) tLongArrayList0);
      int int0 = 10;
      int int1 = 0;
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessLongList0.subList(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // end index 0 greater than begin index 10
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-128);
      TLongArrayList tLongArrayList0 = null;
      try {
        tLongArrayList0 = new TLongArrayList(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = 893L;
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      TLongArrayList tLongArrayList0 = new TLongArrayList();
      TLongLinkedList tLongLinkedList0 = new TLongLinkedList();
      int int0 = 188;
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      try {
        tLongLinkedList0.subList(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // begin index 188 greater than last index 0
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 762;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) int0;
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      longArray0[6] = (long) int0;
      longArray0[7] = (long) int0;
      longArray0[1] = (long) int0;
      long long0 = 0L;
      longArray0[2] = long0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      TLongArrayList tLongArrayList0 = new TLongArrayList();
      TSynchronizedRandomAccessLongList tSynchronizedRandomAccessLongList0 = new TSynchronizedRandomAccessLongList((TLongList) tLongArrayList0);
      tLongArrayList0.containsAll((TLongCollection) tSynchronizedRandomAccessLongList0);
      assertEquals(0, tLongArrayList0.size());
      
      TLongArrayList tLongArrayList1 = new TLongArrayList(longArray0);
      TLongArrayList tLongArrayList2 = TLongArrayList.wrap(longArray0);
      boolean boolean0 = tLongArrayList1.removeAll((TLongCollection) tLongArrayList2);
      assertEquals(true, boolean0);
      
      longArray0[5] = (long) int0;
      longArray0[6] = (long) int0;
      longArray0[7] = (long) int0;
      long[] longArray1 = new long[9];
      longArray1[0] = long0;
      long long1 = (-1276L);
      longArray1[1] = long1;
      longArray1[2] = long0;
      longArray1[3] = long0;
      longArray1[4] = (long) int0;
      longArray1[5] = (long) int0;
      longArray1[6] = long0;
      longArray1[7] = long0;
      longArray1[8] = long0;
      TLongArrayList tLongArrayList3 = new TLongArrayList(longArray1);
      long long2 = 21L;
      TLongArrayList tLongArrayList4 = TLongArrayList.wrap(longArray0, long2);
      tLongArrayList4.getNoEntryValue();
      tLongArrayList4.sum();
      TLongArrayList tLongArrayList5 = new TLongArrayList(int0);
      int int1 = 0;
      int int2 = 1;
      // Undeclared exception!
      try {
        tLongArrayList1.insert(int2, longArray0[5]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = 0L;
      longArray0[0] = long0;
      long long1 = 217L;
      longArray0[1] = long1;
      long long2 = 1L;
      longArray0[2] = long2;
      long long3 = (-9223372036854775808L);
      longArray0[3] = long3;
      TLongHashSet tLongHashSet0 = new TLongHashSet(longArray0);
      TSynchronizedLongSet tSynchronizedLongSet0 = new TSynchronizedLongSet((TLongSet) tLongHashSet0);
      TLongArrayList tLongArrayList0 = new TLongArrayList((TLongCollection) tSynchronizedLongSet0);
      int int0 = 0;
      tLongArrayList0.setQuick(int0, int0);
      long[] longArray1 = new long[7];
      long long4 = 1912L;
      longArray1[0] = long4;
      long long5 = (-1393L);
      longArray1[1] = long5;
      long long6 = (-1456L);
      TLongArrayList tLongArrayList1 = TLongArrayList.wrap(longArray1, long6);
      assertNotNull(tLongArrayList1);
      
      tLongArrayList1.reverse();
      long long7 = (-1718L);
      longArray1[2] = long7;
      long long8 = (-1389L);
      // Undeclared exception!
      try {
        tLongArrayList1.addAll(longArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not grow ArrayList wrapped external array
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = 9223372036854775807L;
      longArray0[0] = long0;
      long long1 = 1933L;
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = 1681L;
      longArray0[3] = long3;
      long long4 = 3L;
      longArray0[4] = long4;
      long long5 = 1799L;
      longArray0[5] = long5;
      long long6 = (-1L);
      longArray0[6] = long6;
      long long7 = 1501L;
      longArray0[7] = long7;
      long long8 = 0L;
      longArray0[8] = long8;
      TLongArrayList tLongArrayList0 = TLongArrayList.wrap(longArray0);
      assertNotNull(tLongArrayList0);
      
      TLongProcedure tLongProcedure0 = null;
      // Undeclared exception!
      try {
        tLongArrayList0.grep(tLongProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test8()  throws Throwable  {
//       long[] longArray0 = new long[5];
//       long long0 = 0L;
//       longArray0[0] = long0;
//       long long1 = 273L;
//       longArray0[1] = long1;
//       long long2 = 647L;
//       longArray0[2] = long2;
//       long long3 = (-614L);
//       longArray0[3] = long3;
//       long long4 = 0L;
//       longArray0[4] = long4;
//       long long5 = 0L;
//       TLongArrayList tLongArrayList0 = TLongArrayList.wrap(longArray0, long5);
//       assertNotNull(tLongArrayList0);
//       
//       long long6 = tLongArrayList0.max();
//       assertEquals(5, tLongArrayList0.size());
//       assertEquals(0L, long6);
//       assertEquals(0L, tLongArrayList0.getNoEntryValue());
//   }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-1716);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) int0;
      TLongHashSet tLongHashSet0 = new TLongHashSet(longArray0);
      TUnmodifiableLongSet tUnmodifiableLongSet0 = new TUnmodifiableLongSet((TLongSet) tLongHashSet0);
      TLongArrayList tLongArrayList0 = new TLongArrayList();
      TLongArrayList tLongArrayList1 = new TLongArrayList((TLongCollection) tUnmodifiableLongSet0);
      tLongArrayList1.containsAll(longArray0);
      long long0 = (-448L);
      TLongArrayList tLongArrayList2 = null;
      try {
        tLongArrayList2 = new TLongArrayList(int0, long0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TLongArrayList tLongArrayList0 = new TLongArrayList();
      long[] longArray0 = new long[3];
      long long0 = 0L;
      long long1 = 1970L;
      tLongArrayList0.binarySearch(long1);
      longArray0[0] = long0;
      long long2 = (-575L);
      int int0 = 0;
      TLongArrayList tLongArrayList1 = new TLongArrayList(int0, long0);
      tLongArrayList0.equals((Object) tLongArrayList1);
      longArray0[1] = long2;
      int int1 = 0;
      tLongArrayList0.containsAll(longArray0);
      tLongArrayList0.clear(int1);
      long long3 = 0L;
      longArray0[2] = long3;
      tLongArrayList0.add(longArray0);
      tLongArrayList0.add(longArray0);
      assertEquals(false, tLongArrayList0.isEmpty());
      assertEquals("{0, -575, 0, 0, -575, 0}", tLongArrayList0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = 0L;
      longArray0[0] = long0;
      long long1 = 9223372036854775807L;
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      long long4 = 1537L;
      longArray0[4] = long4;
      long long5 = 1L;
      longArray0[5] = long5;
      long long6 = 0L;
      longArray0[6] = long6;
      long long7 = 542L;
      longArray0[7] = long7;
      long long8 = 867L;
      longArray0[8] = long8;
      TLongArrayList tLongArrayList0 = new TLongArrayList(longArray0);
      int int0 = 1724;
      // Undeclared exception!
      try {
        tLongArrayList0.removeAt(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1724
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TLongArrayList tLongArrayList0 = new TLongArrayList();
      long[] longArray0 = new long[4];
      long long0 = (-1610L);
      longArray0[0] = long0;
      long long1 = 1298L;
      longArray0[1] = long1;
      long long2 = (-1392L);
      longArray0[2] = long2;
      long long3 = 1464L;
      longArray0[3] = long3;
      long[] longArray1 = tLongArrayList0.toArray(longArray0);
      assertNotNull(longArray1);
      
      int int0 = (-743);
      // Undeclared exception!
      try {
        tLongArrayList0.insert(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TLongArrayList tLongArrayList0 = new TLongArrayList();
      TLongProcedure tLongProcedure0 = null;
      boolean boolean0 = tLongArrayList0.forEachDescending(tLongProcedure0);
      assertEquals("{}", tLongArrayList0.toString());
      
      int int0 = 785;
      TLongArrayList tLongArrayList1 = new TLongArrayList(int0);
      TLongArrayList tLongArrayList2 = new TLongArrayList(int0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int1 = 1;
      long long0 = 0L;
      boolean boolean1 = tLongArrayList2.contains(long0);
      assertFalse(boolean1 == boolean0);
      
      int int2 = (-1786);
      // Undeclared exception!
      try {
        tLongArrayList2.removeAt(int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1786
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = (-854L);
      longArray0[0] = long0;
      long long1 = (-580L);
      longArray0[1] = long1;
      long long2 = (-1164L);
      longArray0[2] = long2;
      long long3 = 1951L;
      longArray0[3] = long3;
      long long4 = 1L;
      longArray0[4] = long4;
      long long5 = (-1793L);
      longArray0[5] = long5;
      long long6 = 0L;
      longArray0[6] = long6;
      long long7 = (-1264L);
      longArray0[7] = long7;
      int int0 = 1323;
      long long8 = (-1529L);
      TLongArrayList tLongArrayList0 = new TLongArrayList(int0, long8);
      int int1 = 1360;
      long[] longArray1 = new long[5];
      longArray1[0] = long4;
      longArray1[1] = long4;
      long long9 = 0L;
      longArray1[2] = long9;
      longArray1[3] = long4;
      longArray1[4] = long2;
      int int2 = 201;
      int int3 = (-1);
      // Undeclared exception!
      try {
        tLongArrayList0.insert(int1, longArray1, int2, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      long long0 = 0L;
      TLongArrayList tLongArrayList0 = new TLongArrayList(int0, long0);
      long[] longArray0 = new long[8];
      longArray0[0] = long0;
      long long1 = 9223372036854775807L;
      longArray0[1] = long1;
      longArray0[2] = (long) int0;
      longArray0[3] = long0;
      longArray0[4] = long0;
      longArray0[5] = (long) int0;
      longArray0[6] = (long) int0;
      longArray0[7] = long0;
      tLongArrayList0.set(int0, longArray0, int0, int0);
      Locale locale0 = Locale.UK;
      int int1 = 0;
      int int2 = tLongArrayList0.lastIndexOf(int1, long0);
      assertEquals((-1), int2);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      boolean boolean0 = tLongArrayList0.contains((long) int0);
      boolean boolean1 = tLongArrayList0.retainAll((Collection<?>) set0);
      assertTrue(boolean1 == boolean0);
      
      Random random0 = new Random((long) int1);
      tLongArrayList0.shuffle(random0);
      assertEquals(0, tLongArrayList0.size());
      assertEquals(0L, tLongArrayList0.getNoEntryValue());
  }

  @Test
  public void test16()  throws Throwable  {
      TLongLinkedList tLongLinkedList0 = new TLongLinkedList();
      TLongArrayList tLongArrayList0 = new TLongArrayList((TLongCollection) tLongLinkedList0);
      long long0 = 0L;
      boolean boolean0 = tLongArrayList0.remove(long0);
      assertEquals(false, boolean0);
      assertEquals(true, tLongArrayList0.isEmpty());
      
      int int0 = 0;
      long[] longArray0 = new long[7];
      longArray0[0] = long0;
      longArray0[1] = (long) int0;
      long long1 = 0L;
      longArray0[2] = long1;
      longArray0[3] = (long) int0;
      longArray0[4] = long0;
      longArray0[5] = (long) int0;
      longArray0[6] = long0;
      tLongArrayList0.set(int0, longArray0, int0, int0);
      // Undeclared exception!
      try {
        tLongArrayList0.replace(int0, long0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = 1L;
      longArray0[0] = long0;
      long long1 = (-942L);
      longArray0[1] = long1;
      long long2 = 9223372036854775807L;
      longArray0[2] = long2;
      long long3 = (-163L);
      longArray0[3] = long3;
      long long4 = (-1L);
      longArray0[4] = long4;
      long long5 = (-951L);
      longArray0[5] = long5;
      long long6 = 0L;
      longArray0[6] = long6;
      long long7 = (-2022L);
      longArray0[7] = long7;
      long long8 = 1339L;
      longArray0[8] = long8;
      TLongArrayList tLongArrayList0 = TLongArrayList.wrap(longArray0, long0);
      assertEquals(1L, tLongArrayList0.getNoEntryValue());
      assertNotNull(tLongArrayList0);
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = (-83);
      TLongArrayList tLongArrayList0 = null;
      try {
        tLongArrayList0 = new TLongArrayList(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
