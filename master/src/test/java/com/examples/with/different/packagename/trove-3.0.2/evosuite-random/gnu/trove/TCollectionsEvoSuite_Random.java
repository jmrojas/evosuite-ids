/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TByteCollection;
import gnu.trove.TCollections;
import gnu.trove.impl.hash.TObjectHash;
import gnu.trove.impl.sync.TSynchronizedByteCollection;
import gnu.trove.impl.sync.TSynchronizedCharDoubleMap;
import gnu.trove.impl.sync.TSynchronizedDoubleFloatMap;
import gnu.trove.impl.sync.TSynchronizedDoubleIntMap;
import gnu.trove.impl.sync.TSynchronizedFloatByteMap;
import gnu.trove.impl.sync.TSynchronizedFloatLongMap;
import gnu.trove.impl.sync.TSynchronizedFloatSet;
import gnu.trove.impl.sync.TSynchronizedLongByteMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleIntMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleLongMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableLongByteMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessIntList;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessLongList;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessShortList;
import gnu.trove.list.TIntList;
import gnu.trove.list.TLongList;
import gnu.trove.list.TShortList;
import gnu.trove.list.linked.TShortLinkedList;
import gnu.trove.map.TByteCharMap;
import gnu.trove.map.TByteDoubleMap;
import gnu.trove.map.TCharByteMap;
import gnu.trove.map.TCharCharMap;
import gnu.trove.map.TCharDoubleMap;
import gnu.trove.map.TCharIntMap;
import gnu.trove.map.TCharLongMap;
import gnu.trove.map.TCharObjectMap;
import gnu.trove.map.TDoubleDoubleMap;
import gnu.trove.map.TDoubleFloatMap;
import gnu.trove.map.TDoubleIntMap;
import gnu.trove.map.TDoubleLongMap;
import gnu.trove.map.TFloatByteMap;
import gnu.trove.map.TFloatLongMap;
import gnu.trove.map.TFloatShortMap;
import gnu.trove.map.TIntDoubleMap;
import gnu.trove.map.TIntObjectMap;
import gnu.trove.map.TLongByteMap;
import gnu.trove.map.TLongCharMap;
import gnu.trove.map.TLongObjectMap;
import gnu.trove.map.TObjectShortMap;
import gnu.trove.map.TShortByteMap;
import gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap;
import gnu.trove.map.custom_hash.TObjectShortCustomHashMap;
import gnu.trove.map.hash.TByteCharHashMap;
import gnu.trove.map.hash.TByteDoubleHashMap;
import gnu.trove.map.hash.TCharByteHashMap;
import gnu.trove.map.hash.TCharCharHashMap;
import gnu.trove.map.hash.TCharDoubleHashMap;
import gnu.trove.map.hash.TCharIntHashMap;
import gnu.trove.map.hash.TCharLongHashMap;
import gnu.trove.map.hash.TCharObjectHashMap;
import gnu.trove.map.hash.TDoubleDoubleHashMap;
import gnu.trove.map.hash.TDoubleFloatHashMap;
import gnu.trove.map.hash.TDoubleIntHashMap;
import gnu.trove.map.hash.TDoubleLongHashMap;
import gnu.trove.map.hash.TFloatByteHashMap;
import gnu.trove.map.hash.TFloatLongHashMap;
import gnu.trove.map.hash.TFloatShortHashMap;
import gnu.trove.map.hash.TIntDoubleHashMap;
import gnu.trove.map.hash.TIntFloatHashMap;
import gnu.trove.map.hash.TIntObjectHashMap;
import gnu.trove.map.hash.TIntShortHashMap;
import gnu.trove.map.hash.TLongByteHashMap;
import gnu.trove.map.hash.TLongCharHashMap;
import gnu.trove.map.hash.TLongObjectHashMap;
import gnu.trove.map.hash.TObjectFloatHashMap;
import gnu.trove.map.hash.TShortShortHashMap;
import gnu.trove.set.TCharSet;
import gnu.trove.set.TFloatSet;
import gnu.trove.set.TIntSet;
import gnu.trove.set.hash.TCharHashSet;
import gnu.trove.set.hash.TFloatHashSet;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Stack;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCollectionsEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 0;
      float float0 = 1.0F;
      double double0 = (-216.45547706220424);
      int int1 = 946;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0, float0, double0, int1);
      TSynchronizedDoubleIntMap tSynchronizedDoubleIntMap0 = (TSynchronizedDoubleIntMap)TCollections.synchronizedMap((TDoubleIntMap) tDoubleIntHashMap0);
      char[] charArray0 = new char[9];
      char char0 = 'n';
      charArray0[0] = char0;
      char char1 = '~';
      charArray0[1] = char1;
      char char2 = 'X';
      charArray0[2] = char2;
      char char3 = '[';
      charArray0[3] = char3;
      char char4 = 'k';
      charArray0[4] = char4;
      char char5 = '1';
      charArray0[5] = char5;
      char char6 = 'b';
      charArray0[6] = char6;
      char char7 = 'R';
      charArray0[7] = char7;
      char char8 = 'J';
      charArray0[8] = char8;
      TCharHashSet tCharHashSet0 = new TCharHashSet(charArray0);
      TCollections.synchronizedSet((TCharSet) tCharHashSet0);
      TUnmodifiableDoubleIntMap tUnmodifiableDoubleIntMap0 = (TUnmodifiableDoubleIntMap)TCollections.unmodifiableMap((TDoubleIntMap) tSynchronizedDoubleIntMap0);
      assertEquals((-216.45547706220424), tUnmodifiableDoubleIntMap0.getNoEntryKey(), 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap();
      TCollections.synchronizedMap((TDoubleDoubleMap) tDoubleDoubleHashMap0);
      TLongList tLongList0 = null;
      TUnmodifiableRandomAccessLongList tUnmodifiableRandomAccessLongList0 = null;
      try {
        tUnmodifiableRandomAccessLongList0 = new TUnmodifiableRandomAccessLongList(tLongList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 638;
      TIntObjectHashMap<String> tIntObjectHashMap0 = new TIntObjectHashMap<String>(int0, int0);
      TIntSet tIntSet0 = tIntObjectHashMap0.keySet();
      TCollections.synchronizedSet(tIntSet0);
      TObjectDoubleCustomHashMap<Object> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Object>();
      Object object0 = TObjectHash.FREE;
      // Undeclared exception!
      try {
        tObjectDoubleCustomHashMap0.increment(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-250.01848152279996);
      doubleArray0[0] = double0;
      double double1 = 1804.4486715345295;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = (-666.6291819442347);
      doubleArray0[3] = double3;
      long[] longArray0 = new long[3];
      long long0 = 672L;
      longArray0[0] = long0;
      long long1 = 1112L;
      longArray0[1] = long1;
      long long2 = (-950L);
      longArray0[2] = long2;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(doubleArray0, longArray0);
      TUnmodifiableDoubleLongMap tUnmodifiableDoubleLongMap0 = (TUnmodifiableDoubleLongMap)TCollections.unmodifiableMap((TDoubleLongMap) tDoubleLongHashMap0);
      assertEquals(0.0, tUnmodifiableDoubleLongMap0.getNoEntryKey(), 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 1978;
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(int0, int0);
      TSynchronizedFloatLongMap tSynchronizedFloatLongMap0 = (TSynchronizedFloatLongMap)TCollections.synchronizedMap((TFloatLongMap) tFloatLongHashMap0);
      TSynchronizedFloatLongMap tSynchronizedFloatLongMap1 = (TSynchronizedFloatLongMap)TCollections.synchronizedMap((TFloatLongMap) tSynchronizedFloatLongMap0);
      TLongObjectHashMap<Integer> tLongObjectHashMap0 = new TLongObjectHashMap<Integer>();
      TLongObjectMap<Integer> tLongObjectMap0 = TCollections.synchronizedMap((TLongObjectMap<Integer>) tLongObjectHashMap0);
      tFloatLongHashMap0.putAll((TFloatLongMap) tSynchronizedFloatLongMap1);
      char[] charArray0 = new char[5];
      char char0 = ' ';
      charArray0[0] = char0;
      char char1 = 'J';
      charArray0[1] = char1;
      char char2 = 'F';
      charArray0[2] = char2;
      char char3 = '`';
      charArray0[3] = char3;
      char char4 = '_';
      charArray0[4] = char4;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) char3;
      doubleArray0[1] = (double) char4;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      TCollections.synchronizedMap((TCharDoubleMap) tCharDoubleHashMap0);
      TLongObjectMap<Integer> tLongObjectMap1 = TCollections.unmodifiableMap(tLongObjectMap0);
      assertTrue(tLongObjectMap0.equals(tLongObjectMap1));
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 0;
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap();
      TCollections.unmodifiableMap((TByteCharMap) tByteCharHashMap0);
      long long0 = (-797L);
      byte byte0 = (byte)119;
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(int0, (float) int0, long0, byte0);
      float float0 = 0.0F;
      float float1 = 0.0F;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap((int) byte0, float1);
      TCollections.synchronizedMap((TIntDoubleMap) tIntDoubleHashMap0);
      int int1 = (-207);
      TIntObjectHashMap<String> tIntObjectHashMap0 = new TIntObjectHashMap<String>((int) byte0, float0, int1);
      TCollections.synchronizedMap((TIntObjectMap<String>) tIntObjectHashMap0);
      TSynchronizedLongByteMap tSynchronizedLongByteMap0 = (TSynchronizedLongByteMap)TCollections.synchronizedMap((TLongByteMap) tLongByteHashMap0);
      TUnmodifiableLongByteMap tUnmodifiableLongByteMap0 = (TUnmodifiableLongByteMap)TCollections.unmodifiableMap((TLongByteMap) tSynchronizedLongByteMap0);
      assertEquals(true, tUnmodifiableLongByteMap0.isEmpty());
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 1134;
      float float0 = 0.0F;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0, float0);
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-518);
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(int0);
      TCollections.synchronizedMap((TCharCharMap) tCharCharHashMap0);
      int int1 = 1709;
      TLongCharHashMap tLongCharHashMap0 = new TLongCharHashMap(int1);
      TShortByteMap tShortByteMap0 = null;
      // Undeclared exception!
      try {
        TCollections.unmodifiableMap(tShortByteMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TObjectFloatHashMap<ArrayList<Integer>> tObjectFloatHashMap0 = new TObjectFloatHashMap<ArrayList<Integer>>();
      TByteDoubleMap tByteDoubleMap0 = null;
      TByteDoubleHashMap tByteDoubleHashMap0 = null;
      try {
        tByteDoubleHashMap0 = new TByteDoubleHashMap(tByteDoubleMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      float[] floatArray0 = new float[9];
      float float0 = (-1385.7483F);
      floatArray0[0] = float0;
      float float1 = (-1934.7574F);
      floatArray0[1] = float1;
      float float2 = 0.0F;
      floatArray0[2] = float2;
      float float3 = (-892.6804F);
      floatArray0[3] = float3;
      float float4 = (-946.18665F);
      floatArray0[4] = float4;
      float float5 = 0.0F;
      floatArray0[5] = float5;
      float float6 = (-1287.3813F);
      floatArray0[6] = float6;
      float float7 = (-1092.7095F);
      floatArray0[7] = float7;
      float float8 = 1172.6355F;
      floatArray0[8] = float8;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-37);
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-90);
      byteArray0[2] = byte2;
      byte byte3 = (byte)33;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-10);
      byteArray0[5] = byte5;
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      TSynchronizedFloatByteMap tSynchronizedFloatByteMap0 = (TSynchronizedFloatByteMap)TCollections.synchronizedMap((TFloatByteMap) tFloatByteHashMap0);
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap((TFloatByteMap) tSynchronizedFloatByteMap0);
      TCollections.unmodifiableMap((TFloatByteMap) tFloatByteHashMap1);
      TIntSet tIntSet0 = tIntFloatHashMap0.keySet();
      TCollections.synchronizedSet(tIntSet0);
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap();
      TCollections.unmodifiableMap((TCharLongMap) tCharLongHashMap0);
      TObjectShortCustomHashMap<ArrayList<Integer>> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<ArrayList<Integer>>();
      TCollections.unmodifiableMap((TObjectShortMap<ArrayList<Integer>>) tObjectShortCustomHashMap0);
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try {
        tObjectShortCustomHashMap0.increment(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 483;
      TLongCharMap tLongCharMap0 = null;
      // Undeclared exception!
      try {
        TCollections.synchronizedMap(tLongCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test11()  throws Throwable  {
//       int int0 = (-1756);
//       int int1 = 0;
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int1);
//       TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = (TSynchronizedDoubleFloatMap)TCollections.synchronizedMap((TDoubleFloatMap) tDoubleFloatHashMap0);
//       TCollections.synchronizedMap((TDoubleFloatMap) tSynchronizedDoubleFloatMap0);
//       float float0 = 0.0F;
//       TCharObjectHashMap<Stack<String>> tCharObjectHashMap0 = new TCharObjectHashMap<Stack<String>>(int0, float0);
//       TCollections.synchronizedMap((TCharObjectMap<Stack<String>>) tCharObjectHashMap0);
//       float[] floatArray0 = new float[5];
//       floatArray0[0] = (float) int0;
//       floatArray0[1] = (float) int0;
//       int int2 = tDoubleFloatHashMap0.size();
//       floatArray0[2] = (float) int0;
//       floatArray0[3] = float0;
//       floatArray0[4] = float0;
//       int[] intArray0 = new int[10];
//       intArray0[0] = int2;
//       intArray0[1] = int0;
//       intArray0[2] = int1;
//       int int3 = 0;
//       intArray0[3] = int3;
//       intArray0[4] = int0;
//       intArray0[5] = int2;
//       int int4 = 122;
//       intArray0[6] = int4;
//       intArray0[7] = int2;
//       intArray0[8] = int0;
//       intArray0[9] = int1;
//       TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(tCharObjectHashMap0._set, intArray0);
//       TCollections.unmodifiableMap((TCharIntMap) tCharIntHashMap0);
//       TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, tCharObjectHashMap0._states);
//       TByteCollection tByteCollection0 = tFloatByteHashMap0.valueCollection();
//       TSynchronizedByteCollection tSynchronizedByteCollection0 = (TSynchronizedByteCollection)TCollections.synchronizedCollection(tByteCollection0);
//       assertEquals(0, tSynchronizedByteCollection0.getNoEntryValue());
//   }

  @Test
  public void test12()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap();
      int int0 = 0;
      float float0 = 735.03986F;
      float float1 = 0.0F;
      short short0 = (short)561;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int0, float0, float1, short0);
      int int1 = 0;
      float float2 = 10.0F;
      TFloatLongHashMap tFloatLongHashMap0 = new TFloatLongHashMap(int1, float2);
      TFloatSet tFloatSet0 = tFloatLongHashMap0.keySet();
      TSynchronizedFloatSet tSynchronizedFloatSet0 = new TSynchronizedFloatSet(tFloatSet0);
      TCollections.synchronizedSet((TFloatSet) tSynchronizedFloatSet0);
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap((TFloatShortMap) tFloatShortHashMap0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = (TUnmodifiableFloatShortMap)TCollections.unmodifiableMap((TFloatShortMap) tFloatShortHashMap1);
      TCollections.synchronizedMap((TFloatShortMap) tUnmodifiableFloatShortMap0);
      tCharByteHashMap0.tempDisableAutoCompaction();
      TCollections.synchronizedMap((TCharByteMap) tCharByteHashMap0);
      int int2 = 1216;
      float float3 = 0.0F;
      TIntList tIntList0 = null;
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = null;
      try {
        tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList(tIntList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 'A';
      charArray0[0] = char0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) charArray0[0];
      doubleArray0[1] = (double) charArray0[0];
      doubleArray0[2] = (double) charArray0[0];
      doubleArray0[3] = (double) char0;
      doubleArray0[4] = (double) charArray0[0];
      doubleArray0[5] = (double) char0;
      doubleArray0[6] = (double) charArray0[0];
      doubleArray0[7] = (double) char0;
      double double0 = (-1548.1409111095934);
      doubleArray0[8] = double0;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      TSynchronizedCharDoubleMap tSynchronizedCharDoubleMap0 = (TSynchronizedCharDoubleMap)TCollections.synchronizedMap((TCharDoubleMap) tCharDoubleHashMap0);
      assertEquals(0.0, tSynchronizedCharDoubleMap0.getNoEntryValue(), 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      String string0 = "";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // 
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      TDoubleDoubleHashMap tDoubleDoubleHashMap0 = new TDoubleDoubleHashMap(int0);
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortLinkedList0);
      int int1 = (-1388);
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessShortList0.sort(int0, int1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
