/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TFloatFloatMap;
import gnu.trove.map.hash.TFloatFloatHashMap;
import gnu.trove.procedure.TFloatProcedure;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatFloatHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 0;
          float float0 = 973.776F;
          float float1 = (-1946.2131F);
          float float2 = (-1181.2356F);
          TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0, float1, float0, float2);
          tFloatFloatHashMap0.keys();
          float float3 = tFloatFloatHashMap0.getNoEntryKey();
          float float4 = (-1340.8787F);
          TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(int0, float0, float4, (float) int0);
          tFloatFloatHashMap0.keys(tFloatFloatHashMap1._set);
          TFloatFloatHashMap tFloatFloatHashMap2 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap1);
          float[] floatArray0 = new float[3];
          floatArray0[0] = float3;
          floatArray0[1] = float2;
          float float5 = 0.0F;
          floatArray0[2] = float5;
          TFloatFloatHashMap tFloatFloatHashMap3 = new TFloatFloatHashMap(floatArray0, tFloatFloatHashMap2._set);
          tFloatFloatHashMap2.compact();
          String string0 = "";
          tFloatFloatHashMap0.trimToSize();
          boolean boolean0 = false;
          TFloatFloatHashMap tFloatFloatHashMap4 = new TFloatFloatHashMap(tFloatFloatHashMap1._set, tFloatFloatHashMap0._set);
          tFloatFloatHashMap1.reenableAutoCompaction(boolean0);
          float[] floatArray1 = new float[9];
          floatArray1[0] = float0;
          floatArray1[1] = float5;
          floatArray1[2] = float4;
          floatArray1[3] = float1;
          floatArray1[4] = float3;
          floatArray1[5] = float2;
          floatArray1[6] = float5;
          floatArray1[7] = (float) int0;
          floatArray1[8] = float5;
          tFloatFloatHashMap3.keys(floatArray1);
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.GeneratedConstructorAccessor13.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 1512;
      float float0 = 1587.4402F;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0, float0, float0, (float) int0);
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap0);
      String string0 = "f\"";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

//   @Test
//   public void test2()  throws Throwable  {
//       int int0 = 1;
//       float[] floatArray0 = new float[8];
//       floatArray0[0] = (float) int0;
//       float float0 = 1.0F;
//       floatArray0[1] = float0;
//       floatArray0[2] = (float) int0;
//       floatArray0[3] = (float) int0;
//       floatArray0[4] = (float) int0;
//       floatArray0[5] = (float) int0;
//       floatArray0[6] = (float) int0;
//       floatArray0[7] = (float) int0;
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
//       float float1 = tFloatFloatHashMap0.get(floatArray0[0]);
//       assertEquals(1, tFloatFloatHashMap0.size());
//       assertEquals(1.0F, float1, 0.01F);
//       
//       TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(int0);
//       TFloatFloatHashMap tFloatFloatHashMap2 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap1);
//       tFloatFloatHashMap2.isEmpty();
//       assertEquals(0.0F, tFloatFloatHashMap2.getNoEntryValue(), 0.01F);
//       assertEquals(0.0F, tFloatFloatHashMap2.getNoEntryKey(), 0.01F);
//       assertEquals(0.0F, tFloatFloatHashMap1.getNoEntryKey(), 0.01F);
//   }

//   @Test
//   public void test3()  throws Throwable  {
//       int int0 = 133;
//       float float0 = (-1133.597F);
//       int int1 = 244;
//       float float1 = (-88.90382F);
//       float float2 = 1283.4792F;
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int1, float1, float1, float2);
//       tFloatFloatHashMap0.getNoEntryValue();
//       TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(int0, (float) int0, float0, float0);
//       TFloatFloatHashMap tFloatFloatHashMap2 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap1);
//       tFloatFloatHashMap2.putIfAbsent(float0, (float) int0);
//       TFloatFloatHashMap tFloatFloatHashMap3 = new TFloatFloatHashMap();
//       float float3 = 760.419F;
//       tFloatFloatHashMap3.compact();
//       tFloatFloatHashMap3.contains(float3);
//       int int2 = 273;
//       TFloatFloatHashMap tFloatFloatHashMap4 = new TFloatFloatHashMap();
//       tFloatFloatHashMap3.setAutoCompactionFactor(float3);
//       tFloatFloatHashMap3.getAutoCompactionFactor();
//       float float4 = 1.0F;
//       tFloatFloatHashMap1.contains(float4);
//       tFloatFloatHashMap4.containsValue((float) int2);
//       float float5 = tFloatFloatHashMap4.getNoEntryKey();
//       tFloatFloatHashMap4.clear();
//       tFloatFloatHashMap4._set = tFloatFloatHashMap1._set;
//       float float6 = (-1814.535F);
//       tFloatFloatHashMap4.putIfAbsent(float5, float6);
//       boolean boolean0 = false;
//       TFloatFloatHashMap tFloatFloatHashMap5 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap4);
//       tFloatFloatHashMap4.reenableAutoCompaction(boolean0);
//       tFloatFloatHashMap3.values();
//       float float7 = 0.0F;
//       TFloatFloatHashMap tFloatFloatHashMap6 = new TFloatFloatHashMap(int2, float7);
//       tFloatFloatHashMap5._states = tFloatFloatHashMap1._states;
//       tFloatFloatHashMap6.containsValue(float7);
//       tFloatFloatHashMap5.getNoEntryKey();
//       int int3 = 812;
//       float float8 = 0.0F;
//       float float9 = 1719.9349F;
//       TFloatFloatHashMap tFloatFloatHashMap7 = new TFloatFloatHashMap(int3, float8, float7, float9);
//       tFloatFloatHashMap4.putAll((TFloatFloatMap) tFloatFloatHashMap7);
//       tFloatFloatHashMap7.valueCollection();
//       float float10 = tFloatFloatHashMap2.get(float9);
//       assertEquals(1, tFloatFloatHashMap2.size());
//       assertEquals((-1133.597F), float10, 0.01F);
//   }

//   @Test
//   public void test4()  throws Throwable  {
//       int int0 = 145;
//       float float0 = 1258.0553F;
//       float float1 = 1.0F;
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0, float0, float1, float1);
//       tFloatFloatHashMap0.setAutoCompactionFactor(float1);
//       assertEquals(1.0F, tFloatFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(1.0F, tFloatFloatHashMap0.getNoEntryKey(), 0.01F);
//   }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          float[] floatArray0 = new float[3];
          float float0 = 415.02838F;
          floatArray0[0] = float0;
          floatArray0[1] = float0;
          floatArray0[2] = float0;
          float float1 = (-1355.1283F);
          floatArray0[0] = float1;
          float float2 = 468.39737F;
          floatArray0[1] = float2;
          float float3 = 0.0F;
          int int0 = (-451);
          TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0);
          TFloatProcedure tFloatProcedure0 = null;
          tFloatFloatHashMap0.forEach(tFloatProcedure0);
          floatArray0[2] = float3;
          TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(floatArray0, floatArray0);
          float float4 = 0.5F;
          float float5 = tFloatFloatHashMap1.putIfAbsent(float1, float4);
          int int1 = (-814);
          TFloatFloatHashMap tFloatFloatHashMap2 = new TFloatFloatHashMap(int1, int1, int1, int1);
          float float6 = 0.0F;
          tFloatFloatHashMap1.put(float6, float5);
          assertEquals("{-1355.1283=-1355.1283, 468.39737=468.39737, 0.0=-1355.1283}", tFloatFloatHashMap1.toString());
          
          TFloatFloatHashMap tFloatFloatHashMap3 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap2);
          tFloatFloatHashMap3.getAutoCompactionFactor();
          float float7 = 0.5F;
          TFloatFloatHashMap tFloatFloatHashMap4 = new TFloatFloatHashMap(int1, float7);
          float float8 = (-563.3907F);
          tFloatFloatHashMap4.get(float8);
          String string0 = "No free or removed slots available. Key set full?!!";
          boolean boolean0 = false;
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0, boolean0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"No free or removed slots available. Key set full?!!\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:136)
             // sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

//   @Test
//   public void test6()  throws Throwable  {
//       int int0 = (-550);
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0, int0);
//       float[] floatArray0 = new float[6];
//       floatArray0[0] = (float) int0;
//       floatArray0[1] = (float) int0;
//       floatArray0[2] = (float) int0;
//       floatArray0[3] = (float) int0;
//       floatArray0[4] = (float) int0;
//       floatArray0[5] = (float) int0;
//       float[] floatArray1 = tFloatFloatHashMap0.values(floatArray0);
//       assertEquals(0.0F, tFloatFloatHashMap0.getNoEntryKey(), 0.01F);
//       assertNotNull(floatArray1);
//       assertEquals(0.0F, tFloatFloatHashMap0.getNoEntryValue(), 0.01F);
//   }

//   @Test
//   public void test7()  throws Throwable  {
//       float[] floatArray0 = new float[6];
//       float float0 = 0.0F;
//       floatArray0[0] = float0;
//       float float1 = (-1684.9948F);
//       floatArray0[1] = float1;
//       float float2 = 0.0F;
//       floatArray0[2] = float2;
//       float float3 = (-1633.2775F);
//       floatArray0[3] = float3;
//       float float4 = (-1.0F);
//       floatArray0[4] = float4;
//       float float5 = (-1.0F);
//       floatArray0[5] = float5;
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
//       int int0 = tFloatFloatHashMap0.size();
//       assertEquals("{-1.0=-1.0, -1633.2775=-1633.2775, -1684.9948=-1684.9948, 0.0=0.0}", tFloatFloatHashMap0.toString());
//       assertEquals(4, int0);
//       
//       int int1 = 1034;
//       TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(int1);
//       tFloatFloatHashMap1.containsKey((float) int1);
//       float[] floatArray1 = tFloatFloatHashMap1.values();
//       assertNotNull(floatArray1);
//       
//       tFloatFloatHashMap1.getAutoCompactionFactor();
//       float float6 = 0.0F;
//       boolean boolean0 = tFloatFloatHashMap1.containsKey(float6);
//       assertEquals(false, boolean0);
//       
//       tFloatFloatHashMap1.adjustValue(float6, (float) int1);
//       tFloatFloatHashMap1.adjustValue((float) int1, (float) int1);
//       tFloatFloatHashMap1.ensureCapacity(int1);
//       assertEquals(0.0F, tFloatFloatHashMap1.getNoEntryKey(), 0.01F);
//       assertEquals(0.0F, tFloatFloatHashMap1.getNoEntryValue(), 0.01F);
//   }

//   @Test
//   public void test8()  throws Throwable  {
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
//       byte[] byteArray0 = tFloatFloatHashMap0._states;
//       assertEquals(0.0F, tFloatFloatHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals(23, tFloatFloatHashMap0.capacity());
//       assertEquals(0.0F, tFloatFloatHashMap0.getNoEntryValue(), 0.01F);
//       
//       int int0 = 113;
//       float float0 = 582.90967F;
//       float float1 = 1164.9781F;
//       TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(int0, float0, float0, float1);
//       float float2 = 846.0471F;
//       boolean boolean0 = tFloatFloatHashMap1.containsKey(float2);
//       assertEquals(false, boolean0);
//       
//       tFloatFloatHashMap1.containsValue(float1);
//       float float3 = 0.5F;
//       tFloatFloatHashMap1.setAutoCompactionFactor(float3);
//       assertEquals(1164.9781F, tFloatFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals(582.90967F, tFloatFloatHashMap1.getNoEntryKey(), 0.01F);
//   }

//   @Test
//   public void test9()  throws Throwable  {
//       int int0 = 63;
//       float float0 = (-1.0F);
//       int int1 = Integer.MAX_VALUE;
//       float[] floatArray0 = new float[8];
//       floatArray0[0] = (float) int0;
//       floatArray0[1] = (float) int0;
//       floatArray0[2] = (float) int0;
//       floatArray0[3] = (float) int1;
//       floatArray0[4] = float0;
//       floatArray0[5] = (float) int0;
//       floatArray0[6] = (float) int0;
//       floatArray0[7] = (float) int1;
//       float float1 = 1.0F;
//       float float2 = (-2025.5414F);
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0, float1, float2, floatArray0[3]);
//       TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap((TFloatFloatMap) tFloatFloatHashMap0);
//       tFloatFloatHashMap1.size();
//       assertEquals((-2025.5414F), tFloatFloatHashMap0.getNoEntryKey(), 0.01F);
//       
//       TFloatFloatHashMap tFloatFloatHashMap2 = new TFloatFloatHashMap(int0, floatArray0[5]);
//       float[] floatArray1 = tFloatFloatHashMap2.values(floatArray0);
//       assertNotNull(floatArray1);
//       
//       TFloatFloatHashMap tFloatFloatHashMap3 = new TFloatFloatHashMap(floatArray0, floatArray0);
//       tFloatFloatHashMap3.setAutoCompactionFactor(floatArray0[6]);
//       assertEquals(0.0F, tFloatFloatHashMap3.getNoEntryKey(), 0.01F);
//       assertEquals("{-1.0=-1.0, 63.0=63.0, 2.14748365E9=2.14748365E9}", tFloatFloatHashMap3.toString());
//       assertEquals(0.0F, tFloatFloatHashMap3.getNoEntryValue(), 0.01F);
//       assertEquals(3, tFloatFloatHashMap3.size());
//       
//       float float3 = 0.0F;
//       float float4 = 0.0F;
//       float float5 = 1334.449F;
//       TFloatFloatHashMap tFloatFloatHashMap4 = new TFloatFloatHashMap(int1, float3, float4, float5);
//       tFloatFloatHashMap4.size();
//       assertEquals(1334.449F, tFloatFloatHashMap4.getNoEntryValue(), 0.01F);
//       
//       TFloatFloatHashMap tFloatFloatHashMap5 = new TFloatFloatHashMap(int0, float0);
//       assertEquals(0.0F, tFloatFloatHashMap5.getNoEntryValue(), 0.01F);
//       assertEquals(0.0F, tFloatFloatHashMap5.getNoEntryKey(), 0.01F);
//   }

//   @Test
//   public void test10()  throws Throwable  {
//       float[] floatArray0 = new float[2];
//       float float0 = 0.0F;
//       floatArray0[0] = float0;
//       float float1 = (-825.53064F);
//       floatArray0[1] = float1;
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
//       int int0 = 289;
//       float float2 = (-1389.0764F);
//       TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap(int0, float2);
//       tFloatFloatHashMap0.putAll((TFloatFloatMap) tFloatFloatHashMap1);
//       assertEquals(0.0F, tFloatFloatHashMap1.getNoEntryKey(), 0.01F);
//       assertEquals(0.0F, tFloatFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals("{-825.53064=-825.53064, 0.0=0.0}", tFloatFloatHashMap0.toString());
//       assertEquals(5, tFloatFloatHashMap0.capacity());
//       
//       int int1 = (-1);
//       TFloatFloatHashMap tFloatFloatHashMap2 = new TFloatFloatHashMap(int1);
//       assertEquals(0.0F, tFloatFloatHashMap2.getNoEntryValue(), 0.01F);
//       assertEquals(0.0F, tFloatFloatHashMap2.getNoEntryKey(), 0.01F);
//   }

  @Test
  public void test11()  throws Throwable  {
      TFloatFloatMap tFloatFloatMap0 = null;
      float[] floatArray0 = new float[2];
      float float0 = 800.1857F;
      floatArray0[0] = float0;
      float float1 = Float.NEGATIVE_INFINITY;
      floatArray0[1] = float1;
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(floatArray0, floatArray0);
      tFloatFloatHashMap0.getAutoCompactionFactor();
      int int0 = 16729;
      float float2 = 780.5164F;
      float float3 = 1686.0249F;
      TFloatFloatHashMap tFloatFloatHashMap1 = new TFloatFloatHashMap();
      TFloatFloatHashMap tFloatFloatHashMap2 = null;
      try {
        tFloatFloatHashMap2 = new TFloatFloatHashMap(tFloatFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test12()  throws Throwable  {
//       int int0 = (-1624);
//       float float0 = 1825.8777F;
//       float float1 = Float.POSITIVE_INFINITY;
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap(int0, float0, float1, float1);
//       assertEquals(Float.POSITIVE_INFINITY, tFloatFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(Float.POSITIVE_INFINITY, tFloatFloatHashMap0.getNoEntryKey(), 0.01F);
//   }

  @Test
  public void test13()  throws Throwable  {
      TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
      tFloatFloatHashMap0.isEmpty();
      tFloatFloatHashMap0.clear();
      tFloatFloatHashMap0.getAutoCompactionFactor();
      float float0 = (-597.86676F);
      tFloatFloatHashMap0.get(float0);
      float float1 = (-1.0F);
      float[] floatArray0 = new float[6];
      floatArray0[0] = float1;
      tFloatFloatHashMap0.containsValue(floatArray0[0]);
      floatArray0[1] = float1;
      floatArray0[2] = float1;
      floatArray0[3] = float1;
      floatArray0[4] = float1;
      floatArray0[5] = float1;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale0 = Locale.getDefault(locale_Category0);
      String string0 = locale0.getISO3Country();
      tFloatFloatHashMap0.equals((Object) string0);
      tFloatFloatHashMap0._set = floatArray0;
      float float2 = tFloatFloatHashMap0.getNoEntryValue();
      boolean boolean0 = tFloatFloatHashMap0.increment(float1);
      assertEquals(false, boolean0);
      
      float float3 = tFloatFloatHashMap0.getNoEntryKey();
      assertEquals(23, tFloatFloatHashMap0.capacity());
      assertTrue(float3 == float2);
  }

//   @Test
//   public void test14()  throws Throwable  {
//       TFloatFloatHashMap tFloatFloatHashMap0 = new TFloatFloatHashMap();
//       float[] floatArray0 = tFloatFloatHashMap0.keys();
//       assertEquals(23, tFloatFloatHashMap0.capacity());
//       assertNotNull(floatArray0);
//       assertEquals(0.0F, tFloatFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(0.0F, tFloatFloatHashMap0.getNoEntryKey(), 0.01F);
//   }
}
