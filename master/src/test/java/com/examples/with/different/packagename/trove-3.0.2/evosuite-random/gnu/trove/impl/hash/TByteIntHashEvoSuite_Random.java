/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TByteIntMap;
import gnu.trove.map.hash.TByteIntHashMap;
import gnu.trove.procedure.TByteIntProcedure;
import gnu.trove.procedure.TByteProcedure;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteIntHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          int int0 = 1606;
          int int1 = (-1395);
          TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap();
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:244)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

//   @Test
//   public void test1()  throws Throwable  {
//       int int0 = (-138);
//       TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(int0);
//       tByteIntHashMap0.clear();
//       int int1 = 0;
//       TByteIntHashMap tByteIntHashMap1 = new TByteIntHashMap(int1);
//       TByteProcedure tByteProcedure0 = null;
//       Locale locale0 = Locale.TAIWAN;
//       Locale locale1 = Locale.KOREA;
//       String string0 = locale0.getDisplayLanguage(locale1);
//       tByteIntHashMap1.equals((Object) string0);
//       boolean boolean0 = tByteIntHashMap1.forEach(tByteProcedure0);
//       byte byte0 = (byte)83;
//       int int2 = 0;
//       boolean boolean1 = tByteIntHashMap1.adjustValue(byte0, int2);
//       tByteIntHashMap1.valueCollection();
//       tByteIntHashMap1.isEmpty();
//       tByteIntHashMap1.reenableAutoCompaction(boolean0);
//       assertFalse(boolean0 == boolean1);
//       
//       byte[] byteArray0 = tByteIntHashMap1._states;
//       assertEquals(0, tByteIntHashMap1.getNoEntryValue());
//       assertEquals(0, tByteIntHashMap1.getNoEntryKey());
//   }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 1915;
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(int0);
      byte byte0 = tByteIntHashMap0.getNoEntryKey();
      assertEquals(4177, tByteIntHashMap0.capacity());
      assertEquals((byte)0, byte0);
      assertEquals(0, tByteIntHashMap0.getNoEntryValue());
  }

  @Test
  public void test3()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      String string0 = "No free or removed slots available. Key set full?!!";
      Locale locale0 = Locale.forLanguageTag(string0);
      String string1 = locale0.getLanguage();
      String string2 = locale0.getISO3Language();
      hashMap0.put((Object) string1, (Object) string2);
      tByteIntHashMap0.size();
      byte byte0 = (byte) (-8);
      tByteIntHashMap0.ensureCapacity((int) byte0);
      tByteIntHashMap0.getAutoCompactionFactor();
      // Undeclared exception!
      try {
        tByteIntHashMap0.setAutoCompactionFactor((float) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -8.0
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-1);
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap((int) byte0, (float) byte0);
      byte byte1 = (byte) (-11);
      tByteIntHashMap0.adjustOrPutValue(byte1, byte0, byte1);
      byteArray0[0] = byte0;
      byte byte2 = (byte)61;
      byteArray0[1] = byte2;
      byte byte3 = (byte)0;
      byteArray0[2] = byte3;
      byte byte4 = (byte) (-73);
      tByteIntHashMap0.compact();
      byteArray0[3] = byte4;
      byte byte5 = (byte)15;
      byteArray0[4] = byte5;
      byte byte6 = (byte)53;
      byteArray0[5] = byte6;
      byte byte7 = (byte)59;
      byteArray0[6] = byte7;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) byte3;
      TByteIntHashMap tByteIntHashMap1 = new TByteIntHashMap(byteArray0, intArray0);
      String string0 = "tf@JKL\"|cU>FM g7{";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: tf@JKL\"|cU>FM g7{://tf@JKL\"|cU>FM g7{tf@JKL%22%7CcU%3EFM%20g7%7B#tf@JKL%22%7CcU%3EFM%20g7%7B
         //
      }
  }

//   @Test
//   public void test5()  throws Throwable  {
//       int int0 = 1103;
//       float float0 = (-1595.8796F);
//       TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(int0, float0);
//       tByteIntHashMap0.clear();
//       assertEquals(0, tByteIntHashMap0.getNoEntryKey());
//       assertEquals(0, tByteIntHashMap0.getNoEntryValue());
//   }

  @Test
  public void test6()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap();
      tByteIntHashMap0.keys();
      TByteIntHashMap tByteIntHashMap1 = new TByteIntHashMap((TByteIntMap) tByteIntHashMap0);
      TByteIntHashMap tByteIntHashMap2 = new TByteIntHashMap((TByteIntMap) tByteIntHashMap1);
      int int0 = 1;
      PipedInputStream pipedInputStream0 = new PipedInputStream(int0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) pipedInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap();
      byte byte0 = (byte) (-64);
      int int0 = (-806);
      tByteIntHashMap0.put(byte0, int0);
      int int1 = 1005;
      TByteIntHashMap tByteIntHashMap1 = new TByteIntHashMap(int1);
      tByteIntHashMap0.putAll((TByteIntMap) tByteIntHashMap1);
      tByteIntHashMap0.keys();
      tByteIntHashMap0.getNoEntryValue();
      byte byte1 = (byte)0;
      File file0 = null;
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name can't be null
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-71);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-54);
      byteArray0[3] = byte3;
      byte byte4 = (byte)15;
      byteArray0[4] = byte4;
      byte byte5 = (byte)82;
      byteArray0[5] = byte5;
      byte byte6 = (byte)127;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-1);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-97);
      byteArray0[8] = byte8;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) byte4;
      intArray0[1] = (int) byte2;
      intArray0[2] = (int) byteArray0[2];
      intArray0[3] = (int) byte6;
      intArray0[4] = (int) byteArray0[6];
      intArray0[5] = (int) byte8;
      intArray0[6] = (int) byteArray0[1];
      intArray0[7] = (int) byteArray0[1];
      intArray0[8] = (int) byteArray0[5];
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(byteArray0, intArray0);
      TByteIntHashMap tByteIntHashMap1 = new TByteIntHashMap((TByteIntMap) tByteIntHashMap0);
      TByteIntHashMap tByteIntHashMap2 = new TByteIntHashMap((TByteIntMap) tByteIntHashMap1);
      boolean boolean0 = tByteIntHashMap2.containsValue((int) byte5);
      assertEquals(0, tByteIntHashMap1.getNoEntryValue());
      assertEquals(8, tByteIntHashMap0.size());
      assertEquals("{-54=127, 15=127, 82=-97, 127=-1, -1=-1, -71=-71, -97=82, 0=15}", tByteIntHashMap0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-124);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-78);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-9);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-42);
      byteArray0[5] = byte5;
      byte byte6 = (byte)107;
      byteArray0[6] = byte6;
      byte byte7 = (byte)94;
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      byteArray0[8] = byte8;
      byte byte9 = (byte)0;
      byteArray0[9] = byte9;
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = int0;
      intArray0[1] = (int) byteArray0[1];
      intArray0[2] = (int) byteArray0[1];
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(byteArray0, intArray0);
      TByteIntHashMap tByteIntHashMap1 = new TByteIntHashMap((TByteIntMap) tByteIntHashMap0);
      assertEquals(23, tByteIntHashMap1.capacity());
      
      tByteIntHashMap1.compact();
      assertTrue(tByteIntHashMap0.equals(tByteIntHashMap1));
  }

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)15;
      byteArray0[1] = byte1;
      byte byte2 = (byte)2;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)123;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte)107;
      byteArray0[7] = byte7;
      byte byte8 = (byte)101;
      byteArray0[8] = byte8;
      byte byte9 = (byte)99;
      byteArray0[9] = byte9;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) byte7;
      intArray0[1] = (int) byte1;
      int int0 = 12;
      intArray0[2] = int0;
      int int1 = 0;
      intArray0[3] = int1;
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(byteArray0, intArray0);
      TByteIntMap tByteIntMap0 = null;
      // Undeclared exception!
      try {
        tByteIntHashMap0.putAll(tByteIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TByteIntMap tByteIntMap0 = null;
      TByteIntHashMap tByteIntHashMap0 = null;
      try {
        tByteIntHashMap0 = new TByteIntHashMap(tByteIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) byte0;
      intArray0[1] = (int) byte0;
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(byteArray0, intArray0);
      assertEquals(7, tByteIntHashMap0.capacity());
      
      tByteIntHashMap0.trimToSize();
      intArray0[0] = (int) byte0;
      intArray0[1] = (int) byte0;
      intArray0[2] = (int) byte0;
      intArray0[2] = (int) byteArray0[0];
      TByteIntHashMap tByteIntHashMap1 = new TByteIntHashMap(byteArray0, intArray0);
      int int0 = Integer.MAX_VALUE;
      int int1 = tByteIntHashMap1.adjustOrPutValue(byteArray0[0], int0, (int) byte0);
      assertEquals(Integer.MIN_VALUE, int1);
  }

//   @Test
//   public void test13()  throws Throwable  {
//       int int0 = 1515;
//       TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(int0);
//       tByteIntHashMap0.keySet();
//       assertEquals(3049, tByteIntHashMap0.capacity());
//       
//       int int1 = (-1579);
//       TByteIntHashMap tByteIntHashMap1 = new TByteIntHashMap(int1);
//       byte[] byteArray0 = tByteIntHashMap1._set;
//       int[] intArray0 = tByteIntHashMap1.values();
//       assertEquals(0, tByteIntHashMap1.getNoEntryKey());
//       assertEquals(0, tByteIntHashMap1.getNoEntryValue());
//       assertNotNull(intArray0);
//   }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      byte byte0 = (byte) (-46);
      int int1 = (-490);
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(int0, (float) int0, byte0, int1);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) byte0;
      int int2 = 537;
      intArray0[1] = int2;
      intArray0[2] = int1;
      int[] intArray1 = tByteIntHashMap0.values(intArray0);
      assertNotNull(intArray1);
      
      int int3 = 0;
      TByteIntHashMap tByteIntHashMap1 = new TByteIntHashMap(int3, int3);
      tByteIntHashMap1.tempDisableAutoCompaction();
      byte byte1 = tByteIntHashMap1.getNoEntryKey();
      int int4 = (-519);
      TByteIntHashMap tByteIntHashMap2 = new TByteIntHashMap(int4, int4);
      byte byte2 = (byte) (-63);
      byte byte3 = (byte) (-8);
      tByteIntHashMap2.adjustValue(byte3, byte3);
      int int5 = 314;
      tByteIntHashMap2.adjustOrPutValue(byte2, (int) byte2, int5);
      assertEquals(7, tByteIntHashMap2.capacity());
      
      TByteIntHashMap tByteIntHashMap3 = new TByteIntHashMap();
      TByteIntHashMap tByteIntHashMap4 = new TByteIntHashMap((TByteIntMap) tByteIntHashMap3);
      TByteIntHashMap tByteIntHashMap5 = new TByteIntHashMap((TByteIntMap) tByteIntHashMap4);
      float float0 = 0.5F;
      tByteIntHashMap5.getNoEntryKey();
      tByteIntHashMap5.contains(byte1);
      TByteIntProcedure tByteIntProcedure0 = null;
      tByteIntHashMap5.retainEntries(tByteIntProcedure0);
      TByteIntHashMap tByteIntHashMap6 = new TByteIntHashMap(int4, float0);
      int int6 = 369;
      tByteIntHashMap6.containsValue(int6);
      assertFalse(tByteIntHashMap6.equals(tByteIntHashMap2));
  }

  @Test
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-96);
      byteArray0[0] = byte0;
      int[] intArray0 = new int[10];
      intArray0[0] = (int) byteArray0[0];
      int int0 = 49;
      intArray0[1] = int0;
      intArray0[2] = (int) byteArray0[0];
      intArray0[3] = (int) byte0;
      intArray0[4] = (int) byteArray0[0];
      intArray0[5] = (int) byteArray0[0];
      intArray0[6] = (int) byteArray0[0];
      intArray0[7] = (int) byteArray0[0];
      intArray0[8] = (int) byte0;
      intArray0[9] = (int) byte0;
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(byteArray0, intArray0);
      tByteIntHashMap0.clear();
      TByteIntMap tByteIntMap0 = null;
      TByteIntHashMap tByteIntHashMap1 = null;
      try {
        tByteIntHashMap1 = new TByteIntHashMap(tByteIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test16()  throws Throwable  {
//       int int0 = 113189;
//       TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(int0, int0);
//       TByteIntHashMap tByteIntHashMap1 = new TByteIntHashMap((TByteIntMap) tByteIntHashMap0);
//       assertEquals(0, tByteIntHashMap0.getNoEntryValue());
//       assertEquals(0, tByteIntHashMap0.getNoEntryKey());
//       assertEquals(0, tByteIntHashMap1.getNoEntryValue());
//   }

  @Test
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-109);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-46);
      byteArray0[5] = byte5;
      byte byte6 = (byte)9;
      byteArray0[6] = byte6;
      byte byte7 = (byte)84;
      byteArray0[7] = byte7;
      byte byte8 = (byte)90;
      byteArray0[8] = byte8;
      byte byte9 = (byte) (-114);
      byteArray0[9] = byte9;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) byteArray0[2];
      int int0 = 0;
      intArray0[1] = int0;
      intArray0[2] = (int) byteArray0[8];
      intArray0[3] = (int) byteArray0[1];
      int int1 = 1;
      intArray0[4] = int1;
      intArray0[5] = (int) byteArray0[7];
      int int2 = 1578;
      intArray0[6] = int2;
      intArray0[7] = (int) byte9;
      intArray0[8] = (int) byte6;
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(byteArray0, intArray0);
      int int3 = 0;
      byte byte10 = (byte)0;
      int int4 = 0;
      float float0 = (-124.171104F);
      int int5 = (-1085);
      TByteIntHashMap tByteIntHashMap1 = new TByteIntHashMap(int4, float0, byte10, int5);
      int int6 = (-1);
      int int7 = 1888;
      tByteIntHashMap1.putIfAbsent(byte10, int7);
      assertEquals(1, tByteIntHashMap1.size());
      
      TByteIntHashMap tByteIntHashMap2 = new TByteIntHashMap(int3, (float) int3, byte10, int6);
      tByteIntHashMap2.getNoEntryKey();
      TByteIntHashMap tByteIntHashMap3 = new TByteIntHashMap();
      int int8 = 93;
      byte byte11 = (byte) (-117);
      TByteIntHashMap tByteIntHashMap4 = new TByteIntHashMap(int8, (float) int8, byte11, (int) byte11);
      tByteIntHashMap3.tempDisableAutoCompaction();
      ObjectInput objectInput0 = null;
      tByteIntHashMap4.getAutoCompactionFactor();
      // Undeclared exception!
      try {
        tByteIntHashMap4.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      TByteIntMap tByteIntMap0 = null;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-48);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      int[] intArray0 = new int[9];
      int int0 = 0;
      intArray0[0] = int0;
      intArray0[1] = (int) byte2;
      intArray0[2] = (int) byteArray0[2];
      intArray0[3] = (int) byte2;
      intArray0[4] = (int) byte2;
      intArray0[5] = (int) byteArray0[2];
      intArray0[6] = (int) byteArray0[0];
      intArray0[7] = (int) byte1;
      intArray0[8] = (int) byte2;
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(byteArray0, intArray0);
      tByteIntHashMap0.clear();
      TByteIntHashMap tByteIntHashMap1 = null;
      try {
        tByteIntHashMap1 = new TByteIntHashMap(tByteIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
