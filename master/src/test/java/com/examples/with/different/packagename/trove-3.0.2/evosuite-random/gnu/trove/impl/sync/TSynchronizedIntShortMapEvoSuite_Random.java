/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedIntShortMap;
import gnu.trove.iterator.TIntShortIterator;
import gnu.trove.map.TIntShortMap;
import gnu.trove.map.hash.TIntShortHashMap;
import gnu.trove.procedure.TIntShortProcedure;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedIntShortMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 1002;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0);
      TSynchronizedIntShortMap tSynchronizedIntShortMap0 = new TSynchronizedIntShortMap((TIntShortMap) tIntShortHashMap0);
      tSynchronizedIntShortMap0.keySet();
      String string0 = ")5/6#uO2N";
      TSynchronizedIntShortMap tSynchronizedIntShortMap1 = new TSynchronizedIntShortMap((TIntShortMap) tIntShortHashMap0, (Object) string0);
      TSynchronizedIntShortMap tSynchronizedIntShortMap2 = new TSynchronizedIntShortMap((TIntShortMap) tSynchronizedIntShortMap1);
      tSynchronizedIntShortMap2.size();
      int[] intArray0 = tSynchronizedIntShortMap2.keys();
      assertNotNull(intArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      TIntShortMap tIntShortMap0 = null;
      int int0 = 0;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0);
      TSynchronizedIntShortMap tSynchronizedIntShortMap0 = new TSynchronizedIntShortMap((TIntShortMap) tIntShortHashMap0);
      Object object0 = null;
      tSynchronizedIntShortMap0.equals(object0);
      String string0 = "^K.~+U1aq$tmC";
      int int1 = (-266);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int1, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ^K.~+U1aq$tmC://%5EK.~%7F+U1aq$tmC%7F@^K.~+U1aq$tmC:-266%5EK.~%7F+U1aq$tmC%7F?%5EK.~%7F+U1aq$tmC%7F#%5EK.~%7F+U1aq$tmC%7F
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-1294);
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0);
      String string0 = "A";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: A://A@A:-1294A?A#A
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-1095);
      float float0 = 0.0F;
      short short0 = (short)0;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0, float0, int0, short0);
      TSynchronizedIntShortMap tSynchronizedIntShortMap0 = new TSynchronizedIntShortMap((TIntShortMap) tIntShortHashMap0);
      tSynchronizedIntShortMap0.putAll((TIntShortMap) tIntShortHashMap0);
      assertEquals(0, tSynchronizedIntShortMap0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      int int0 = (-1103);
      TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap(int0, int0);
      Locale locale0 = Locale.US;
      String string0 = locale0.getDisplayLanguage();
      TSynchronizedIntShortMap tSynchronizedIntShortMap0 = new TSynchronizedIntShortMap((TIntShortMap) tIntShortHashMap1, (Object) string0);
      TSynchronizedIntShortMap tSynchronizedIntShortMap1 = new TSynchronizedIntShortMap((TIntShortMap) tIntShortHashMap0);
      TSynchronizedIntShortMap tSynchronizedIntShortMap2 = new TSynchronizedIntShortMap((TIntShortMap) tIntShortHashMap0);
      assertNotSame(tSynchronizedIntShortMap2, tSynchronizedIntShortMap1);
  }

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[1];
      TIntShortMap tIntShortMap0 = null;
      TIntShortHashMap tIntShortHashMap0 = null;
      try {
        tIntShortHashMap0 = new TIntShortHashMap(tIntShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-1703);
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0);
      int int1 = 1;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int1);
      String string0 = byteArrayOutputStream0.toString();
      TSynchronizedIntShortMap tSynchronizedIntShortMap0 = new TSynchronizedIntShortMap((TIntShortMap) tIntShortHashMap0, (Object) string0);
      TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap();
      TSynchronizedIntShortMap tSynchronizedIntShortMap1 = new TSynchronizedIntShortMap((TIntShortMap) tIntShortHashMap1);
      short short0 = (short)0;
      int int2 = 523;
      tSynchronizedIntShortMap1.get(int2);
      tSynchronizedIntShortMap1.containsValue(short0);
      TIntShortProcedure tIntShortProcedure0 = null;
      tSynchronizedIntShortMap1.forEachEntry(tIntShortProcedure0);
      Locale locale0 = Locale.JAPANESE;
      String string1 = locale0.getCountry();
      locale0.getCountry();
      TSynchronizedIntShortMap tSynchronizedIntShortMap2 = new TSynchronizedIntShortMap((TIntShortMap) tSynchronizedIntShortMap1, (Object) string1);
      tSynchronizedIntShortMap2.keySet();
      tSynchronizedIntShortMap1.containsValue(short0);
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 785;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0, int0);
      TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap((TIntShortMap) tIntShortHashMap0);
      String string0 = "+%cW]5ztv]7/a8e4";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Malformed escape pair at index 1: +%cW]5ztv]7/a8e4:+%25cW]5ztv]7/a8e4#+%25cW]5ztv]7/a8e4
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0);
      String string0 = "8)WH?FEh";
      String string1 = "begin index can not be < 0";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string1, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 8)WH?FEh://8)WH%3FFEhbegin%20index%20can%20not%20be%20%3C%200?begin%20index%20can%20not%20be%20%3C%200#begin%20index%20can%20not%20be%20%3C%200
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 434;
      float float0 = (-1353.218F);
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0, float0);
      Object object0 = new Object();
      TSynchronizedIntShortMap tSynchronizedIntShortMap0 = new TSynchronizedIntShortMap((TIntShortMap) tIntShortHashMap0, object0);
      tSynchronizedIntShortMap0.keys(tIntShortHashMap0._set);
      int[] intArray0 = new int[2];
      int int1 = 218;
      intArray0[0] = int1;
      int int2 = (-1639);
      intArray0[1] = int2;
      short[] shortArray0 = new short[7];
      short short0 = (short)77;
      shortArray0[0] = short0;
      short short1 = (short) (-309);
      shortArray0[1] = short1;
      short short2 = (short)281;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short) (-2022);
      shortArray0[4] = short4;
      short short5 = (short)751;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap(intArray0, shortArray0);
      TSynchronizedIntShortMap tSynchronizedIntShortMap1 = new TSynchronizedIntShortMap((TIntShortMap) tIntShortHashMap1);
      short short7 = tSynchronizedIntShortMap1.getNoEntryValue();
      assertTrue(short7 == short3);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0);
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://@:0?#
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 1;
      float float0 = 0.0F;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0, float0);
      Locale locale0 = Locale.KOREA;
      String string0 = locale0.getISO3Language();
      tIntShortHashMap0.equals((Object) string0);
      TSynchronizedIntShortMap tSynchronizedIntShortMap0 = new TSynchronizedIntShortMap((TIntShortMap) tIntShortHashMap0);
      TIntShortIterator tIntShortIterator0 = tSynchronizedIntShortMap0.iterator();
      assertEquals(false, tIntShortIterator0.hasNext());
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 0;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0);
      TSynchronizedIntShortMap tSynchronizedIntShortMap0 = new TSynchronizedIntShortMap((TIntShortMap) tIntShortHashMap0);
      int int1 = (-844);
      TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap(int1);
      TSynchronizedIntShortMap tSynchronizedIntShortMap1 = new TSynchronizedIntShortMap((TIntShortMap) tIntShortHashMap1);
      tSynchronizedIntShortMap1.clear();
      Object object0 = null;
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      tSynchronizedIntShortMap1.putAll((Map<? extends Integer, ? extends Short>) hashMap0);
      tSynchronizedIntShortMap1.equals(object0);
      short short0 = (short)27;
      int int2 = 278;
      tIntShortHashMap1.containsKey(int2);
      tSynchronizedIntShortMap1.putIfAbsent(int1, short0);
      int int3 = (-674);
      int int4 = 1553;
      tSynchronizedIntShortMap1.containsKey(int4);
      tSynchronizedIntShortMap1.get(int3);
      assertEquals(1, tIntShortHashMap1.size());
      assertEquals("{-844=27}", tSynchronizedIntShortMap1.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0, int0);
      TIntShortHashMap tIntShortHashMap1 = null;
      try {
        tIntShortHashMap1 = new TIntShortHashMap((TIntShortMap) tIntShortHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      TSynchronizedIntShortMap tSynchronizedIntShortMap0 = new TSynchronizedIntShortMap((TIntShortMap) tIntShortHashMap0);
      tSynchronizedIntShortMap0.size();
      int int0 = 0;
      short short0 = tSynchronizedIntShortMap0.remove(int0);
      String string0 = tSynchronizedIntShortMap0.toString();
      TSynchronizedIntShortMap tSynchronizedIntShortMap1 = new TSynchronizedIntShortMap((TIntShortMap) tIntShortHashMap0, (Object) string0);
      tSynchronizedIntShortMap1.keys(tIntShortHashMap0._set);
      TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap();
      tIntShortHashMap1.compact();
      int int1 = (-128);
      String string1 = "5{@Fx%Y%>C5";
      TSynchronizedIntShortMap tSynchronizedIntShortMap2 = new TSynchronizedIntShortMap((TIntShortMap) tIntShortHashMap1);
      short[] shortArray0 = new short[1];
      shortArray0[0] = short0;
      tSynchronizedIntShortMap1.values(shortArray0);
      tSynchronizedIntShortMap1.keySet();
      tSynchronizedIntShortMap2.keys(tIntShortHashMap1._set);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string1, string1, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 5{@Fx%Y%>C5://5{@Fx%Y%>C55%7B@Fx%25Y%25%3EC5#5%7B@Fx%25Y%25%3EC5
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      TSynchronizedIntShortMap tSynchronizedIntShortMap0 = new TSynchronizedIntShortMap((TIntShortMap) tIntShortHashMap0);
      TIntShortProcedure tIntShortProcedure0 = null;
      tSynchronizedIntShortMap0.forEachEntry(tIntShortProcedure0);
      int int0 = tSynchronizedIntShortMap0.hashCode();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      short short0 = (short) (-1);
      tSynchronizedIntShortMap0.putIfAbsent(int0, short0);
      Locale locale0 = Locale.getDefault(locale_Category0);
      String string0 = "";
      // Undeclared exception!
      try {
        locale0.getUnicodeLocaleType(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 199;
          int int1 = (-964);
          TIntShortMap tIntShortMap0 = null;
          String string0 = "=/roB+9-&m$;Ko$8R\\O";
          File file0 = new File(string0);
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"=/roB+9-&m$;Ko$8R\\O/=/roB+9-&m$;Ko$8R\\O5915915351092795190=/roB+9-&m$;Ko$8R\\O\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.File.createTempFile(File.java:1871)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:601)
             // org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:264)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

//   @Test
//   public void test17()  throws Throwable  {
//       int int0 = 58;
//       int int1 = 0;
//       short short0 = (short)943;
//       TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0, (float) int0, int1, short0);
//       Locale locale0 = Locale.US;
//       String string0 = locale0.toString();
//       TSynchronizedIntShortMap tSynchronizedIntShortMap0 = new TSynchronizedIntShortMap((TIntShortMap) tIntShortHashMap0, (Object) string0);
//       assertEquals(943, tSynchronizedIntShortMap0.getNoEntryValue());
//   }

//   @Test
//   public void test18()  throws Throwable  {
//       TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
//       Locale locale0 = Locale.PRC;
//       TIntShortProcedure tIntShortProcedure0 = null;
//       tIntShortHashMap0.forEachEntry(tIntShortProcedure0);
//       String string0 = locale0.toLanguageTag();
//       TSynchronizedIntShortMap tSynchronizedIntShortMap0 = new TSynchronizedIntShortMap((TIntShortMap) tIntShortHashMap0, (Object) string0);
//       assertEquals(0, tSynchronizedIntShortMap0.getNoEntryValue());
//   }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 1721;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0);
      TSynchronizedIntShortMap tSynchronizedIntShortMap0 = new TSynchronizedIntShortMap((TIntShortMap) tIntShortHashMap0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)112;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-100);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-103);
      byteArray0[2] = byte2;
      byte byte3 = (byte)63;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)113;
      byteArray0[5] = byte5;
      byte byte6 = (byte)87;
      byteArray0[6] = byte6;
      tIntShortHashMap0._states = byteArray0;
      // Undeclared exception!
      try {
        tSynchronizedIntShortMap0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3526
         //
      }
  }
}
