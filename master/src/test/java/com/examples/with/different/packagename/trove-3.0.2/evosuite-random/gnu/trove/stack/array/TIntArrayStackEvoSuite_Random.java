/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.stack.array;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.stack.TIntStack;
import gnu.trove.stack.array.TIntArrayStack;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PushbackInputStream;
import java.io.SyncFailedException;
import java.util.LinkedList;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntArrayStackEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TIntArrayStack tIntArrayStack0 = new TIntArrayStack();
      TIntArrayStack tIntArrayStack1 = new TIntArrayStack((TIntStack) tIntArrayStack0);
      tIntArrayStack1.hashCode();
      int int0 = 1382;
      TIntArrayStack tIntArrayStack2 = new TIntArrayStack(int0);
      tIntArrayStack2.toArray();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      char char0 = '#';
      // Undeclared exception!
      try {
        locale0.getExtension(char0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed extension key: #
         //
      }
  }

//   @Test
//   public void test1()  throws Throwable  {
//       TIntArrayStack tIntArrayStack0 = new TIntArrayStack();
//       tIntArrayStack0.clear();
//       int int0 = 508;
//       tIntArrayStack0.push(int0);
//       FileDescriptor fileDescriptor0 = FileDescriptor.out;
//       fileDescriptor0.valid();
//       tIntArrayStack0.peek();
//       try {
//         fileDescriptor0.sync();
//         fail("Expecting exception: SyncFailedException");
//       
//       } catch(SyncFailedException e) {
//          //
//          // sync failed
//          //
//       }
//   }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-1);
      int int1 = 969;
      TIntArrayStack tIntArrayStack0 = null;
      try {
        tIntArrayStack0 = new TIntArrayStack(int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 5;
      TIntArrayStack tIntArrayStack0 = new TIntArrayStack(int0);
      int int1 = (-167);
      int int2 = (-1092);
      TIntArrayStack tIntArrayStack1 = null;
      try {
        tIntArrayStack1 = new TIntArrayStack(int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TIntStack tIntStack0 = null;
      TIntArrayStack tIntArrayStack0 = new TIntArrayStack();
      tIntArrayStack0.hashCode();
      TIntArrayStack tIntArrayStack1 = null;
      try {
        tIntArrayStack1 = new TIntArrayStack(tIntStack0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Only support TIntArrayStack
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-1163);
      int int1 = 607;
      TIntArrayStack tIntArrayStack0 = null;
      try {
        tIntArrayStack0 = new TIntArrayStack(int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-1191);
      int int1 = 0;
      TIntArrayStack tIntArrayStack0 = new TIntArrayStack(int1, int1);
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 1127;
      TIntArrayStack tIntArrayStack0 = new TIntArrayStack(int0);
      int[] intArray0 = new int[7];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      tIntArrayStack0.toArray(intArray0);
      assertEquals("{}", tIntArrayStack0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-221);
      int int1 = 1095;
      int int2 = (-1);
      TIntArrayStack tIntArrayStack0 = new TIntArrayStack(int1, int2);
      int[] intArray0 = new int[2];
      intArray0[0] = int0;
      intArray0[1] = int0;
      tIntArrayStack0.toArray(intArray0);
      TIntArrayStack tIntArrayStack1 = null;
      try {
        tIntArrayStack1 = new TIntArrayStack(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      int int1 = (-122);
      TIntArrayStack tIntArrayStack0 = new TIntArrayStack(int0, int1);
      TIntArrayStack tIntArrayStack1 = new TIntArrayStack((TIntStack) tIntArrayStack0);
      TIntArrayStack tIntArrayStack2 = new TIntArrayStack((TIntStack) tIntArrayStack1);
      int[] intArray0 = new int[1];
      intArray0[0] = int1;
      tIntArrayStack2.toArray(intArray0);
      int int2 = (-1003);
      TIntArrayStack tIntArrayStack3 = null;
      try {
        tIntArrayStack3 = new TIntArrayStack(int2, int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 1;
      TIntArrayStack tIntArrayStack0 = new TIntArrayStack(int0);
      TIntArrayStack tIntArrayStack1 = new TIntArrayStack();
      // Undeclared exception!
      try {
        tIntArrayStack1.peek();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TIntArrayStack tIntArrayStack0 = new TIntArrayStack();
      int int0 = 0;
      int[] intArray0 = new int[3];
      intArray0[0] = int0;
      int int1 = 2;
      intArray0[1] = int1;
      intArray0[2] = int1;
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      tIntArrayStack0.clear();
      tIntArrayStack0.toArray(intArray0);
      int int2 = 0;
      TIntArrayStack tIntArrayStack1 = new TIntArrayStack(int0, int2);
      tIntArrayStack0.toString();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)10;
      tIntArrayStack1.size();
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      int int3 = 333;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) byteArray0[1], int3);
      int int4 = 0;
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream((InputStream) byteArrayInputStream0, int4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TIntArrayStack tIntArrayStack0 = new TIntArrayStack();
      int int0 = 0;
      TIntArrayStack tIntArrayStack1 = new TIntArrayStack(int0);
      tIntArrayStack1.clear();
      // Undeclared exception!
      try {
        tIntArrayStack1.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1;
      int int1 = 10;
      int int2 = 0;
      TIntArrayStack tIntArrayStack0 = new TIntArrayStack(int1, int2);
      // Undeclared exception!
      try {
        tIntArrayStack0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TIntArrayStack tIntArrayStack0 = new TIntArrayStack();
      TIntArrayStack tIntArrayStack1 = new TIntArrayStack((TIntStack) tIntArrayStack0);
      String string0 = tIntArrayStack0.toString();
      assertNotNull(string0);
      
      TIntArrayStack tIntArrayStack2 = new TIntArrayStack();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string1 = linkedList0.toString();
      boolean boolean0 = tIntArrayStack0.equals((Object) string1);
      assertEquals(false, boolean0);
      
      String string2 = tIntArrayStack0.toString();
      assertEquals("{}", string2);
      
      TIntArrayStack tIntArrayStack3 = new TIntArrayStack((TIntStack) tIntArrayStack0);
      TIntArrayStack tIntArrayStack4 = new TIntArrayStack();
      TIntArrayStack tIntArrayStack5 = new TIntArrayStack((TIntStack) tIntArrayStack3);
      // Undeclared exception!
      try {
        tIntArrayStack5.peek();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 2;
      int int1 = Integer.MIN_VALUE;
      TIntArrayStack tIntArrayStack0 = new TIntArrayStack(int0, int1);
      Locale locale0 = Locale.CHINESE;
      String string0 = locale0.toString();
      boolean boolean0 = tIntArrayStack0.equals((Object) string0);
      assertEquals(false, boolean0);
      assertEquals(-2147483648, tIntArrayStack0.getNoEntryValue());
  }

  @Test
  public void test16()  throws Throwable  {
      TIntArrayStack tIntArrayStack0 = new TIntArrayStack();
      OutputStream outputStream0 = null;
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      TIntArrayStack tIntArrayStack0 = new TIntArrayStack();
      TIntArrayStack tIntArrayStack1 = new TIntArrayStack((TIntStack) tIntArrayStack0);
      tIntArrayStack1.size();
      int int0 = 0;
      TIntArrayStack tIntArrayStack2 = new TIntArrayStack(int0);
      tIntArrayStack2.toArray();
      // Undeclared exception!
      try {
        tIntArrayStack2.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 0;
      TIntArrayStack tIntArrayStack0 = new TIntArrayStack(int0, int0);
      // Undeclared exception!
      try {
        tIntArrayStack0.peek();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 254;
      TIntArrayStack tIntArrayStack0 = new TIntArrayStack();
      TIntArrayStack tIntArrayStack1 = new TIntArrayStack((TIntStack) tIntArrayStack0);
      int int1 = 0;
      TIntArrayStack tIntArrayStack2 = new TIntArrayStack(int0, int1);
      TIntArrayStack tIntArrayStack3 = new TIntArrayStack((TIntStack) tIntArrayStack2);
      // Undeclared exception!
      try {
        tIntArrayStack2.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }
}
