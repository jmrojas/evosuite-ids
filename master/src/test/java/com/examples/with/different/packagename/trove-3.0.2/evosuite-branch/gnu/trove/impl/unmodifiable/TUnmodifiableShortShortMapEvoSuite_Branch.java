/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TShortFunction;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortSet;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap;
import gnu.trove.map.TShortShortMap;
import gnu.trove.map.hash.TShortShortHashMap;
import gnu.trove.procedure.TShortProcedure;
import gnu.trove.procedure.TShortShortProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableShortShortMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap$1.value()S: root-Branch
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap$1.<init>(Lgnu/trove/impl/unmodifiable/TUnmodifiableShortShortMap;)V: root-Branch
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap$1.advance()V: root-Branch
   * 4 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap$1.hasNext()Z: root-Branch
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap$1.key()S: root-Branch
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.size()I: root-Branch
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.iterator()Lgnu/trove/iterator/TShortShortIterator;: root-Branch
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.<init>(Lgnu/trove/map/TShortShortMap;)V: I17 Branch 1 IFNONNULL L58 - true
   */

  @Test
  public void test0()  throws Throwable  {
      short[] shortArray0 = new short[1];
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(shortArray0, shortArray0);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap((TShortShortMap) tUnmodifiableShortShortMap0);
      assertEquals(1, tUnmodifiableShortShortMap0.size());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      String string0 = tUnmodifiableShortShortMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.keys([S)[S: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap((-1795), (-1795));
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      short[] shortArray0 = tUnmodifiableShortShortMap0.keys(tShortShortHashMap0._set);
      assertNotNull(shortArray0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.hashCode()I: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(291);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      int int0 = tUnmodifiableShortShortMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.forEachEntry(Lgnu/trove/procedure/TShortShortProcedure;)Z: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap((-1795), (-1795));
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      boolean boolean0 = tUnmodifiableShortShortMap0.forEachEntry((TShortShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.containsKey(S)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      boolean boolean0 = tUnmodifiableShortShortMap0.containsKey((short)12);
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      boolean boolean0 = tUnmodifiableShortShortMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.keys()[S: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(0, (float) (short)20, (short)20, (short)20);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      short[] shortArray0 = tUnmodifiableShortShortMap0.keys();
      assertNotNull(shortArray0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.getNoEntryValue()S: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(1806, 1806);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      short short0 = tUnmodifiableShortShortMap0.getNoEntryValue();
      assertEquals((short)0, short0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.containsValue(S)Z: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(291);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      boolean boolean0 = tUnmodifiableShortShortMap0.containsValue((short)706);
      assertEquals(false, boolean0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.adjustOrPutValue(SSS)S: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      short[] shortArray0 = new short[1];
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(shortArray0, shortArray0);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortShortMap0.adjustOrPutValue((short) (-1830), (short) (-1830), (short) (-1830));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.increment(S)Z: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortShortMap0.increment((short) (-23));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.putIfAbsent(SS)S: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortShortMap0.putIfAbsent((short)12, (short)12);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.forEachKey(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(291);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      boolean boolean0 = tUnmodifiableShortShortMap0.forEachKey((TShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.values()[S: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(0, (float) (short)20, (short)20, (short)20);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      short[] shortArray0 = tUnmodifiableShortShortMap0.values();
      assertNotNull(shortArray0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      HashMap<Short, Short> hashMap0 = new HashMap<Short, Short>();
      // Undeclared exception!
      try {
        tUnmodifiableShortShortMap0.putAll((Map<? extends Short, ? extends Short>) hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.forEachValue(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      boolean boolean0 = tUnmodifiableShortShortMap0.forEachValue((TShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.clear()V: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortShortMap0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.getNoEntryKey()S: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(1806, 1806);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      short short0 = tUnmodifiableShortShortMap0.getNoEntryKey();
      assertEquals((short)0, short0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.remove(S)S: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(0, (float) (short)20, (short)20, (short)20);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortShortMap0.remove((short)20);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.putAll(Lgnu/trove/map/TShortShortMap;)V: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortShortMap0.putAll((TShortShortMap) tShortShortHashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.get(S)S: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      short short0 = tUnmodifiableShortShortMap0.get((short) (-23));
      assertEquals((short)0, short0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.adjustValue(SS)Z: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(1806, 1806);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortShortMap0.adjustValue((short)0, (short)0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.transformValues(Lgnu/trove/function/TShortFunction;)V: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap((int) (short)0, (float) 18, (short)0, (short)0);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortShortMap0.transformValues((TShortFunction) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.retainEntries(Lgnu/trove/procedure/TShortShortProcedure;)Z: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap((-1795), (-1795));
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortShortMap0.retainEntries((TShortShortProcedure) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.put(SS)S: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(291);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortShortMap0.put((short)706, (short)706);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.values([S)[S: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      short[] shortArray0 = tUnmodifiableShortShortMap0.values(tShortShortHashMap0._set);
      assertNotNull(shortArray0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.<init>(Lgnu/trove/map/TShortShortMap;)V: I17 Branch 1 IFNONNULL L58 - false
   */

  @Test
  public void test27()  throws Throwable  {
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = null;
      try {
        tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.keySet()Lgnu/trove/set/TShortSet;: I4 Branch 2 IFNONNULL L79 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.keySet()Lgnu/trove/set/TShortSet;: I4 Branch 2 IFNONNULL L79 - false
   */

  @Test
  public void test28()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(1806, 1806);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = (TUnmodifiableShortSet)tUnmodifiableShortShortMap0.keySet();
      assertNotNull(tUnmodifiableShortSet0);
      
      TUnmodifiableShortSet tUnmodifiableShortSet1 = (TUnmodifiableShortSet)tUnmodifiableShortShortMap0.keySet();
      assertSame(tUnmodifiableShortSet1, tUnmodifiableShortSet0);
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.valueCollection()Lgnu/trove/TShortCollection;: I4 Branch 3 IFNONNULL L87 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.valueCollection()Lgnu/trove/TShortCollection;: I4 Branch 3 IFNONNULL L87 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      TUnmodifiableShortCollection tUnmodifiableShortCollection0 = (TUnmodifiableShortCollection)tUnmodifiableShortShortMap0.valueCollection();
      assertNotNull(tUnmodifiableShortCollection0);
      
      TUnmodifiableShortCollection tUnmodifiableShortCollection1 = (TUnmodifiableShortCollection)tUnmodifiableShortShortMap0.valueCollection();
      assertSame(tUnmodifiableShortCollection1, tUnmodifiableShortCollection0);
  }

  //Test case number: 30
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L94 - false
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L94 - true
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap.<init>(Lgnu/trove/map/TShortShortMap;)V: I17 Branch 1 IFNONNULL L58 - true
   */

  @Test
  public void test30()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      boolean boolean0 = tUnmodifiableShortShortMap0.equals((Object) "\uD55C\uAD6D\uC5B4");
      assertEquals(false, boolean0);
  }
}
