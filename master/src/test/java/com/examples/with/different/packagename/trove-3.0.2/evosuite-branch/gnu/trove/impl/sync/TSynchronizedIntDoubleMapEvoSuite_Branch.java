/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TDoubleFunction;
import gnu.trove.impl.sync.TSynchronizedDoubleCollection;
import gnu.trove.impl.sync.TSynchronizedIntDoubleMap;
import gnu.trove.impl.sync.TSynchronizedIntSet;
import gnu.trove.map.TIntDoubleMap;
import gnu.trove.map.hash.TIntDoubleHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.procedure.TIntDoubleProcedure;
import gnu.trove.procedure.TIntProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedIntDoubleMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.forEachKey(Lgnu/trove/procedure/TIntProcedure;)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.<init>(Lgnu/trove/map/TIntDoubleMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      boolean boolean0 = tSynchronizedIntDoubleMap0.forEachKey((TIntProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(11);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      boolean boolean0 = tSynchronizedIntDoubleMap0.forEachValue((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.equals(Ljava/lang/Object;)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.<init>(Lgnu/trove/map/TIntDoubleMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap((-6));
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0, (Object) "fffffffa");
      boolean boolean0 = tSynchronizedIntDoubleMap0.equals((Object) "fffffffa");
      assertEquals(false, boolean0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.get(I)D: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      double double0 = tSynchronizedIntDoubleMap0.get((-1906));
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.increment(I)Z: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(11);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      boolean boolean0 = tSynchronizedIntDoubleMap0.increment(11);
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.clear()V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(0, 0, 0, 0);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0, (Object) "0x0.0p0");
      tSynchronizedIntDoubleMap0.clear();
      assertEquals(0, tSynchronizedIntDoubleMap0.size());
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.keys([I)[I: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      int[] intArray0 = tSynchronizedIntDoubleMap0.keys(tIntDoubleHashMap0._set);
      assertNotNull(intArray0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.put(ID)D: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      tSynchronizedIntDoubleMap0.put((-1906), 0.0);
      assertEquals("{-1906=0.0}", tIntDoubleHashMap0.toString());
      assertEquals("{-1906=0.0}", tSynchronizedIntDoubleMap0.toString());
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(136);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0, (Object) "Deutschland");
      String string0 = tSynchronizedIntDoubleMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 9
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.putAll(Lgnu/trove/map/TIntDoubleMap;)V: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.iterator()Lgnu/trove/iterator/TIntDoubleIterator;: root-Branch
   * 3 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.size()I: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(136);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0, (Object) "Deutschland");
      tSynchronizedIntDoubleMap0.putAll((TIntDoubleMap) tSynchronizedIntDoubleMap0);
      assertEquals(0, tSynchronizedIntDoubleMap0.size());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap((-6));
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0, (Object) "fffffffa");
      tSynchronizedIntDoubleMap0.transformValues((TDoubleFunction) null);
      assertEquals(0, tSynchronizedIntDoubleMap0.size());
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.containsValue(D)Z: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      boolean boolean0 = tSynchronizedIntDoubleMap0.containsValue((double) 23);
      assertEquals(false, boolean0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.containsKey(I)Z: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(11);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      boolean boolean0 = tSynchronizedIntDoubleMap0.containsKey(11);
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      tSynchronizedIntDoubleMap0.putAll((Map<? extends Integer, ? extends Double>) hashMap0);
      assertEquals(true, hashMap0.isEmpty());
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.values([D)[D: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      double[] doubleArray0 = new double[17];
      double[] doubleArray1 = tSynchronizedIntDoubleMap0.values(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.remove(I)D: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(11);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      double double0 = tSynchronizedIntDoubleMap0.remove(11);
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.getNoEntryValue()D: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      double double0 = tSynchronizedIntDoubleMap0.getNoEntryValue();
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.putIfAbsent(ID)D: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      tSynchronizedIntDoubleMap0.putIfAbsent(23, 23);
      assertEquals(false, tIntDoubleHashMap0.isEmpty());
      assertEquals(1, tSynchronizedIntDoubleMap0.size());
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.forEachEntry(Lgnu/trove/procedure/TIntDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(0, 0, 0, 0);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0, (Object) "0x0.0p0");
      boolean boolean0 = tSynchronizedIntDoubleMap0.forEachEntry((TIntDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.hashCode()I: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      int int0 = tSynchronizedIntDoubleMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.getNoEntryKey()I: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(0, 0, 0, 0);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0, (Object) "0x0.0p0");
      int int0 = tSynchronizedIntDoubleMap0.getNoEntryKey();
      assertEquals(0, int0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.values()[D: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      double[] doubleArray0 = tSynchronizedIntDoubleMap0.values();
      assertNotNull(doubleArray0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.retainEntries(Lgnu/trove/procedure/TIntDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(0, 0, 0, 0);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0, (Object) "0x0.0p0");
      boolean boolean0 = tSynchronizedIntDoubleMap0.retainEntries((TIntDoubleProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 23
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.isEmpty()Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.<init>(Lgnu/trove/map/TIntDoubleMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(136);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0, (Object) "Deutschland");
      boolean boolean0 = tSynchronizedIntDoubleMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.adjustOrPutValue(IDD)D: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(11);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      double double0 = tSynchronizedIntDoubleMap0.adjustOrPutValue(11, 11, 11);
      assertEquals(1, tIntDoubleHashMap0.size());
      assertEquals(11.0, double0, 0.01D);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.adjustValue(ID)Z: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      boolean boolean0 = tSynchronizedIntDoubleMap0.adjustValue(23, 23);
      assertEquals(false, boolean0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.keys()[I: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(11);
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      int[] intArray0 = tSynchronizedIntDoubleMap0.keys();
      assertNotNull(intArray0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.<init>(Lgnu/trove/map/TIntDoubleMap;)V: I17 Branch 1 IFNONNULL L59 - false
   */

  @Test
  public void test27()  throws Throwable  {
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = null;
      try {
        tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.keySet()Lgnu/trove/set/TIntSet;: I11 Branch 2 IFNONNULL L107 - true
   * 2 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.keySet()Lgnu/trove/set/TIntSet;: I11 Branch 2 IFNONNULL L107 - false
   */

  @Test
  public void test28()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      TSynchronizedIntSet tSynchronizedIntSet0 = (TSynchronizedIntSet)tSynchronizedIntDoubleMap0.keySet();
      assertNotNull(tSynchronizedIntSet0);
      
      TSynchronizedIntSet tSynchronizedIntSet1 = (TSynchronizedIntSet)tSynchronizedIntDoubleMap0.keySet();
      assertSame(tSynchronizedIntSet1, tSynchronizedIntSet0);
  }

  //Test case number: 29
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;: I11 Branch 3 IFNONNULL L121 - true
   * 2 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;: I11 Branch 3 IFNONNULL L121 - false
   * 3 gnu.trove.impl.sync.TSynchronizedIntDoubleMap.<init>(Lgnu/trove/map/TIntDoubleMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test29()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TSynchronizedIntDoubleMap tSynchronizedIntDoubleMap0 = new TSynchronizedIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      TSynchronizedDoubleCollection tSynchronizedDoubleCollection0 = (TSynchronizedDoubleCollection)tSynchronizedIntDoubleMap0.valueCollection();
      assertNotNull(tSynchronizedDoubleCollection0);
      
      TSynchronizedDoubleCollection tSynchronizedDoubleCollection1 = (TSynchronizedDoubleCollection)tSynchronizedIntDoubleMap0.valueCollection();
      assertSame(tSynchronizedDoubleCollection1, tSynchronizedDoubleCollection0);
  }
}
