/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.hash.TLongDoubleHashMap;
import gnu.trove.procedure.TLongProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TLongDoubleHashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TLongDoubleHash.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   * 2 gnu.trove.impl.hash.TLongDoubleHash.setUp(I)I: root-Branch
   * 3 gnu.trove.impl.hash.TLongDoubleHash.<init>()V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(32);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tLongDoubleHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(23, tLongDoubleHashMap0.capacity());
      assertEquals(0.0, tLongDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals(0L, tLongDoubleHashMap0.getNoEntryKey());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TLongDoubleHash.<init>(IF)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap((-1), (-1));
      assertEquals(0L, tLongDoubleHashMap0.getNoEntryKey());
      assertEquals(0.0, tLongDoubleHashMap0.getNoEntryValue(), 0.01D);
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TLongDoubleHash.getNoEntryValue()D: root-Branch
   * 2 gnu.trove.impl.hash.TLongDoubleHash.<init>(IFJD)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(0, (float) 0, (long) 0, (double) (-1L));
      double double0 = tLongDoubleHashMap0.getNoEntryValue();
      assertEquals(0L, tLongDoubleHashMap0.getNoEntryKey());
      assertEquals((-1.0), double0, 0.01D);
  }

  //Test case number: 3
  /*
   * 7 covered goals:
   * 1 gnu.trove.impl.hash.TLongDoubleHash.getNoEntryKey()J: root-Branch
   * 2 gnu.trove.impl.hash.TLongDoubleHash.insertKey(J)I: I30 Branch 13 IFNE L279 - true
   * 3 gnu.trove.impl.hash.TLongDoubleHash.insertKey(J)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 4 gnu.trove.impl.hash.TLongDoubleHash.insertKey(J)I: I57 Branch 15 IFNE L286 - false
   * 5 gnu.trove.impl.hash.TLongDoubleHash.<init>(I)V: root-Branch
   * 6 gnu.trove.impl.hash.TLongDoubleHash.insertKeyAt(IJ)V: root-Branch
   * 7 gnu.trove.impl.hash.TLongDoubleHash.insertKey(J)I: I30 Branch 13 IFNE L279 - false
   */

  @Test
  public void test3()  throws Throwable  {
      long[] longArray0 = new long[17];
      double[] doubleArray0 = new double[8];
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(longArray0, doubleArray0);
      long long0 = tLongDoubleHashMap0.getNoEntryKey();
      assertEquals(0.0, tLongDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals(1, tLongDoubleHashMap0.size());
      assertEquals(37, tLongDoubleHashMap0.capacity());
      assertEquals(0L, long0);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TLongDoubleHash.contains(J)Z: I5 Branch 1 IFLT L178 - true
   * 2 gnu.trove.impl.hash.TLongDoubleHash.index(J)I: I37 Branch 5 IFNE L228 - false
   */

  @Test
  public void test4()  throws Throwable  {
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap((-1542), 695.8687F, (long) (-1542), (double) (-1542));
      boolean boolean0 = tLongDoubleHashMap0.contains((long) (-1542));
      assertEquals((-1542L), tLongDoubleHashMap0.getNoEntryKey());
      assertEquals((-1542.0), tLongDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TLongDoubleHash.forEach(Lgnu/trove/procedure/TLongProcedure;)Z: I18 Branch 2 IFLE L192 - true
   * 2 gnu.trove.impl.hash.TLongDoubleHash.forEach(Lgnu/trove/procedure/TLongProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TLongDoubleHash.forEach(Lgnu/trove/procedure/TLongProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

  @Test
  public void test5()  throws Throwable  {
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(Integer.MAX_VALUE);
      boolean boolean0 = tLongDoubleHashMap0.forEach((TLongProcedure) null);
      assertEquals(true, boolean0);
      assertEquals(0.0, tLongDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals(0L, tLongDoubleHashMap0.getNoEntryKey());
  }

  //Test case number: 6
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TLongDoubleHash.forEach(Lgnu/trove/procedure/TLongProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - false
   * 2 gnu.trove.impl.hash.TLongDoubleHash.<init>()V: root-Branch
   * 3 gnu.trove.impl.hash.TLongDoubleHash.forEach(Lgnu/trove/procedure/TLongProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 4 gnu.trove.impl.hash.TLongDoubleHash.forEach(Lgnu/trove/procedure/TLongProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

  @Test
  public void test6()  throws Throwable  {
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap();
      double[] doubleArray0 = new double[1];
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap(tLongDoubleHashMap0._set, doubleArray0);
      // Undeclared exception!
      try {
        tLongDoubleHashMap1.forEach((TLongProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 7
  /*
   * 9 covered goals:
   * 1 gnu.trove.impl.hash.TLongDoubleHash.index(J)I: I52 Branch 7 IFNE L231 - true
   * 2 gnu.trove.impl.hash.TLongDoubleHash.indexRehashed(JIIB)I: I29 Branch 8 IFGE L245 - false
   * 3 gnu.trove.impl.hash.TLongDoubleHash.indexRehashed(JIIB)I: I46 Branch 9 IFNE L250 - true
   * 4 gnu.trove.impl.hash.TLongDoubleHash.indexRehashed(JIIB)I: I59 Branch 10 IFNE L254 - true
   * 5 gnu.trove.impl.hash.TLongDoubleHash.indexRehashed(JIIB)I: I71 Branch 12 IF_ICMPNE L256 - true
   * 6 gnu.trove.impl.hash.TLongDoubleHash.indexRehashed(JIIB)I: I46 Branch 9 IFNE L250 - false
   * 7 gnu.trove.impl.hash.TLongDoubleHash.index(J)I: I37 Branch 5 IFNE L228 - true
   * 8 gnu.trove.impl.hash.TLongDoubleHash.index(J)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 9 gnu.trove.impl.hash.TLongDoubleHash.indexRehashed(JIIB)I: I29 Branch 8 IFGE L245 - true
   */

  @Test
  public void test7()  throws Throwable  {
      long[] longArray0 = new long[17];
      longArray0[0] = (-583L);
      double[] doubleArray0 = new double[8];
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(longArray0, doubleArray0);
      tLongDoubleHashMap0.compact();
      boolean boolean0 = tLongDoubleHashMap0.contains((long) Integer.MAX_VALUE);
      assertEquals(5, tLongDoubleHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 8
  /*
   * 9 covered goals:
   * 1 gnu.trove.impl.hash.TLongDoubleHash.indexRehashed(JIIB)I: I59 Branch 10 IFNE L254 - false
   * 2 gnu.trove.impl.hash.TLongDoubleHash.indexRehashed(JIIB)I: I62 Branch 11 IF_ICMPEQ L254 - false
   * 3 gnu.trove.impl.hash.TLongDoubleHash.insertKey(J)I: I57 Branch 15 IFNE L286 - true
   * 4 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 5 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I45 Branch 18 IFGE L310 - false
   * 6 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I62 Branch 19 IFNE L316 - false
   * 7 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 8 gnu.trove.impl.hash.TLongDoubleHash.contains(J)Z: I5 Branch 1 IFLT L178 - false
   * 9 gnu.trove.impl.hash.TLongDoubleHash.index(J)I: I52 Branch 7 IFNE L231 - true
   */

  @Test
  public void test8()  throws Throwable  {
      long[] longArray0 = new long[17];
      longArray0[0] = (-583L);
      longArray0[2] = (long) Integer.MAX_VALUE;
      double[] doubleArray0 = new double[8];
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(longArray0, doubleArray0);
      tLongDoubleHashMap0.compact();
      boolean boolean0 = tLongDoubleHashMap0.contains((long) Integer.MAX_VALUE);
      assertEquals(7, tLongDoubleHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 9
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.hash.TLongDoubleHash.indexRehashed(JIIB)I: I71 Branch 12 IF_ICMPNE L256 - false
   * 2 gnu.trove.impl.hash.TLongDoubleHash.contains(J)Z: I5 Branch 1 IFLT L178 - true
   * 3 gnu.trove.impl.hash.TLongDoubleHash.index(J)I: I46 Branch 6 IF_ICMPNE L231 - true
   * 4 gnu.trove.impl.hash.TLongDoubleHash.indexRehashed(JIIB)I: I29 Branch 8 IFGE L245 - true
   * 5 gnu.trove.impl.hash.TLongDoubleHash.indexRehashed(JIIB)I: I29 Branch 8 IFGE L245 - false
   * 6 gnu.trove.impl.hash.TLongDoubleHash.indexRehashed(JIIB)I: I46 Branch 9 IFNE L250 - true
   * 7 gnu.trove.impl.hash.TLongDoubleHash.indexRehashed(JIIB)I: I59 Branch 10 IFNE L254 - true
   * 8 gnu.trove.impl.hash.TLongDoubleHash.indexRehashed(JIIB)I: I71 Branch 12 IF_ICMPNE L256 - true
   */

  @Test
  public void test9()  throws Throwable  {
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap((-1542), 695.8687F, (long) (-1542), (double) (-1542));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)94;
      byteArray0[2] = (byte)94;
      tLongDoubleHashMap0._states = byteArray0;
      byteArray0[1] = (byte)94;
      boolean boolean0 = tLongDoubleHashMap0.contains((long) (-1542));
      assertEquals(false, boolean0);
      assertEquals((-1542L), tLongDoubleHashMap0.getNoEntryKey());
      assertEquals((-1542.0), tLongDoubleHashMap0.getNoEntryValue(), 0.01D);
  }

  //Test case number: 10
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 2 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 3 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I67 Branch 20 IF_ICMPEQ L317 - false
   * 4 gnu.trove.impl.hash.TLongDoubleHash.removeAt(I)V: root-Branch
   * 5 gnu.trove.impl.hash.TLongDoubleHash.index(J)I: I37 Branch 5 IFNE L228 - true
   * 6 gnu.trove.impl.hash.TLongDoubleHash.index(J)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 7 gnu.trove.impl.hash.TLongDoubleHash.index(J)I: I52 Branch 7 IFNE L231 - false
   * 8 gnu.trove.impl.hash.TLongDoubleHash.insertKey(J)I: I50 Branch 14 IF_ICMPNE L286 - true
   */

  @Test
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[27];
      double[] doubleArray0 = new double[1];
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(longArray0, doubleArray0);
      tLongDoubleHashMap0.remove(0L);
      tLongDoubleHashMap0.adjustOrPutValue((long) (-1), 715.4694140718129, (double) (-1));
      assertEquals("{-1=-1.0}", tLongDoubleHashMap0.toString());
  }

  //Test case number: 11
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 2 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I104 Branch 22 IFNE L327 - true
   * 3 gnu.trove.impl.hash.TLongDoubleHash.insertKey(J)I: I57 Branch 15 IFNE L286 - false
   * 4 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I45 Branch 18 IFGE L310 - true
   * 5 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I62 Branch 19 IFNE L316 - true
   * 6 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I116 Branch 23 IF_ICMPNE L332 - true
   */

  @Test
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[17];
      longArray0[0] = (-583L);
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[4] = 507L;
      double[] doubleArray0 = new double[8];
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(longArray0, doubleArray0);
      tLongDoubleHashMap0.compact();
      assertEquals(11, tLongDoubleHashMap0.capacity());
      assertEquals("{-583=0.0, 2147483647=0.0, 507=0.0, 0=0.0}", tLongDoubleHashMap0.toString());
  }

  //Test case number: 12
  /*
   * 9 covered goals:
   * 1 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I104 Branch 22 IFNE L327 - false
   * 2 gnu.trove.impl.hash.TLongDoubleHash.<init>(I)V: root-Branch
   * 3 gnu.trove.impl.hash.TLongDoubleHash.insertKeyAt(IJ)V: root-Branch
   * 4 gnu.trove.impl.hash.TLongDoubleHash.insertKey(J)I: I30 Branch 13 IFNE L279 - false
   * 5 gnu.trove.impl.hash.TLongDoubleHash.insertKey(J)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 6 gnu.trove.impl.hash.TLongDoubleHash.insertKey(J)I: I57 Branch 15 IFNE L286 - true
   * 7 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I62 Branch 19 IFNE L316 - false
   * 8 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 9 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   */

  @Test
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 143L;
      longArray0[1] = (-852L);
      double[] doubleArray0 = new double[10];
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(longArray0, doubleArray0);
      assertEquals(0L, tLongDoubleHashMap0.getNoEntryKey());
      assertEquals("{0=0.0, 143=0.0, -852=0.0}", tLongDoubleHashMap0.toString());
      assertEquals(3, tLongDoubleHashMap0.size());
  }

  //Test case number: 13
  /*
   * 12 covered goals:
   * 1 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I116 Branch 23 IF_ICMPNE L332 - false
   * 2 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I121 Branch 24 IF_ICMPEQ L336 - true
   * 3 gnu.trove.impl.hash.TLongDoubleHash.setUp(I)I: root-Branch
   * 4 gnu.trove.impl.hash.TLongDoubleHash.<init>(IFJD)V: root-Branch
   * 5 gnu.trove.impl.hash.TLongDoubleHash.insertKey(J)I: I30 Branch 13 IFNE L279 - true
   * 6 gnu.trove.impl.hash.TLongDoubleHash.insertKey(J)I: I50 Branch 14 IF_ICMPNE L286 - true
   * 7 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 8 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I45 Branch 18 IFGE L310 - true
   * 9 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I45 Branch 18 IFGE L310 - false
   * 10 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I62 Branch 19 IFNE L316 - true
   * 11 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 12 gnu.trove.impl.hash.TLongDoubleHash.insertKeyRehash(JIIB)I: I116 Branch 23 IF_ICMPNE L332 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap((-1542), 695.8687F, (long) (-1542), (double) (-1542));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)94;
      byteArray0[2] = (byte)94;
      tLongDoubleHashMap0._states = byteArray0;
      byteArray0[1] = (byte)94;
      // Undeclared exception!
      try {
        tLongDoubleHashMap0.put(581L, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No free or removed slots available. Key set full?!!
         //
      }
  }
}
