/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TObjectShortMapDecorator;
import gnu.trove.map.TObjectShortMap;
import gnu.trove.map.custom_hash.TObjectShortCustomHashMap;
import gnu.trove.map.hash.TObjectShortHashMap;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.AbstractMap;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.text.Segment;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectShortMapDecoratorEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 0;
      float float0 = (-258.1675F);
      short short0 = (short)1291;
      TObjectShortCustomHashMap<TObjectShortCustomHashMap<Object>> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<TObjectShortCustomHashMap<Object>>();
      TObjectShortHashMap<Object> tObjectShortHashMap0 = new TObjectShortHashMap<Object>((TObjectShortMap<?>) tObjectShortCustomHashMap0);
      float float1 = 0.0F;
      short short1 = (short) (-366);
      TObjectShortHashMap<TObjectShortCustomHashMap<Integer>> tObjectShortHashMap1 = new TObjectShortHashMap<TObjectShortCustomHashMap<Integer>>((int) short0, float1, short1);
      TObjectShortMapDecorator<TObjectShortCustomHashMap<Integer>> tObjectShortMapDecorator0 = new TObjectShortMapDecorator<TObjectShortCustomHashMap<Integer>>((TObjectShortMap<TObjectShortCustomHashMap<Integer>>) tObjectShortHashMap1);
      OutputStream outputStream0 = null;
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TObjectShortMap<String> tObjectShortMap0 = null;
      TObjectShortMapDecorator<String> tObjectShortMapDecorator0 = new TObjectShortMapDecorator<String>(tObjectShortMap0);
      TObjectShortMap<String> tObjectShortMap1 = tObjectShortMapDecorator0.getMap();
      TObjectShortMapDecorator<String> tObjectShortMapDecorator1 = new TObjectShortMapDecorator<String>(tObjectShortMap1);
      char[] charArray0 = new char[9];
      char char0 = '{';
      charArray0[0] = char0;
      char char1 = 'r';
      charArray0[1] = char1;
      char char2 = 'c';
      charArray0[2] = char2;
      char char3 = 'd';
      charArray0[3] = char3;
      char char4 = 'f';
      charArray0[4] = char4;
      char char5 = 'e';
      charArray0[5] = char5;
      char char6 = 'Y';
      charArray0[6] = char6;
      char char7 = ')';
      charArray0[7] = char7;
      char char8 = '~';
      charArray0[8] = char8;
      Segment segment0 = new Segment(charArray0, (int) char5, (int) charArray0[0]);
      // Undeclared exception!
      try {
        segment0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 224
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TObjectShortMapDecorator<Short> tObjectShortMapDecorator0 = new TObjectShortMapDecorator<Short>();
      short short0 = (short)1965;
      Short short1 = new Short(short0);
      // Undeclared exception!
      try {
        tObjectShortMapDecorator0.put(short1, short1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TObjectShortMapDecorator<Object> tObjectShortMapDecorator0 = new TObjectShortMapDecorator<Object>();
      // Undeclared exception!
      try {
        tObjectShortMapDecorator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test4()  throws Throwable  {
//       IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
//       Integer integer0 = null;
//       identityHashingStrategy0.equals(integer0, integer0);
//       int int0 = 0;
//       float float0 = (-1802.09F);
//       short short0 = (short) (-856);
//       TObjectShortHashMap<String> tObjectShortHashMap0 = new TObjectShortHashMap<String>(int0, float0, short0);
//       TObjectShortMapDecorator<String> tObjectShortMapDecorator0 = new TObjectShortMapDecorator<String>((TObjectShortMap<String>) tObjectShortHashMap0);
//       OutputStream outputStream0 = null;
//       BufferedOutputStream bufferedOutputStream0 = null;
//       try {
//         bufferedOutputStream0 = new BufferedOutputStream(outputStream0, (int) integer0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test5()  throws Throwable  {
      TObjectShortMapDecorator<AbstractMap.SimpleImmutableEntry<Short, Short>> tObjectShortMapDecorator0 = new TObjectShortMapDecorator<AbstractMap.SimpleImmutableEntry<Short, Short>>();
      String string0 = File.pathSeparator;
      // Undeclared exception!
      try {
        tObjectShortMapDecorator0.get((Object) string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TObjectShortMapDecorator<Object> tObjectShortMapDecorator0 = new TObjectShortMapDecorator<Object>();
          int int0 = 0;
          TObjectShortHashMap<TObjectShortCustomHashMap<Object>> tObjectShortHashMap0 = new TObjectShortHashMap<TObjectShortCustomHashMap<Object>>();
          TObjectShortMapDecorator<TObjectShortCustomHashMap<Object>> tObjectShortMapDecorator1 = new TObjectShortMapDecorator<TObjectShortCustomHashMap<Object>>((TObjectShortMap<TObjectShortCustomHashMap<Object>>) tObjectShortHashMap0);
          tObjectShortMapDecorator1.clear();
          TObjectShortHashMap<String> tObjectShortHashMap1 = new TObjectShortHashMap<String>(int0);
          tObjectShortMapDecorator0.containsValue((Object) tObjectShortHashMap1);
          String string0 = " vs ";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
      TObjectShortMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>> tObjectShortMap0 = null;
      int int0 = 0;
      short short0 = (short)0;
      TObjectShortHashMap<Object> tObjectShortHashMap0 = new TObjectShortHashMap<Object>(int0, (float) int0, short0);
      TObjectShortMapDecorator<Object> tObjectShortMapDecorator0 = new TObjectShortMapDecorator<Object>((TObjectShortMap<Object>) tObjectShortHashMap0);
      TObjectShortCustomHashMap<Object> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<Object>();
      tObjectShortMapDecorator0.containsKey((Object) tObjectShortCustomHashMap0);
      TObjectShortMapDecorator<AbstractMap.SimpleImmutableEntry<Integer, Integer>> tObjectShortMapDecorator1 = new TObjectShortMapDecorator<AbstractMap.SimpleImmutableEntry<Integer, Integer>>(tObjectShortMap0);
      int int1 = (-1805);
      short short1 = (short)0;
      TObjectShortHashMap<Short> tObjectShortHashMap1 = new TObjectShortHashMap<Short>(int1, (float) int1, short1);
      TObjectShortMapDecorator<Short> tObjectShortMapDecorator2 = new TObjectShortMapDecorator<Short>((TObjectShortMap<Short>) tObjectShortHashMap1);
      Set<Map.Entry<Short, Short>> set0 = (Set<Map.Entry<Short, Short>>)tObjectShortMapDecorator2.entrySet();
      assertEquals(0, set0.size());
  }

  @Test
  public void test8()  throws Throwable  {
      short short0 = (short)557;
      Short short1 = new Short(short0);
      short short2 = (short)0;
      short short3 = (short)0;
      TObjectShortMapDecorator<Object> tObjectShortMapDecorator0 = new TObjectShortMapDecorator<Object>();
      // Undeclared exception!
      try {
        tObjectShortMapDecorator0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TObjectShortMapDecorator<Short> tObjectShortMapDecorator0 = new TObjectShortMapDecorator<Short>();
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      int int0 = 1147921;
      TObjectShortCustomHashMap<TObjectShortCustomHashMap<Object>> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<TObjectShortCustomHashMap<Object>>();
      TObjectShortMapDecorator<TObjectShortCustomHashMap<Object>> tObjectShortMapDecorator1 = new TObjectShortMapDecorator<TObjectShortCustomHashMap<Object>>((TObjectShortMap<TObjectShortCustomHashMap<Object>>) tObjectShortCustomHashMap0);
      TObjectShortCustomHashMap<Object> tObjectShortCustomHashMap1 = new TObjectShortCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, int0);
      TObjectShortCustomHashMap<Integer> tObjectShortCustomHashMap2 = new TObjectShortCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, int0);
      TObjectShortMapDecorator<Integer> tObjectShortMapDecorator2 = new TObjectShortMapDecorator<Integer>((TObjectShortMap<Integer>) tObjectShortCustomHashMap2);
      short short0 = (short)1021;
      Short short1 = new Short(short0);
      Short short2 = tObjectShortMapDecorator2.put((Integer) int0, short1);
      // Undeclared exception!
      try {
        tObjectShortMapDecorator1.put(tObjectShortCustomHashMap1, short2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TObjectShortMapDecorator<String> tObjectShortMapDecorator0 = new TObjectShortMapDecorator<String>();
      String string0 = "\nMore than one type used for keys. Watch out for asymmetric equals(). Read about the 'Liskov substitution principle' and the implications for equals() in java.";
      short short0 = (short)0;
      Short short1 = new Short(short0);
      // Undeclared exception!
      try {
        tObjectShortMapDecorator0.put(string0, short1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-1168);
      TObjectShortHashMap<Object> tObjectShortHashMap0 = new TObjectShortHashMap<Object>(int0);
      TObjectShortMapDecorator<Object> tObjectShortMapDecorator0 = new TObjectShortMapDecorator<Object>((TObjectShortMap<Object>) tObjectShortHashMap0);
      Set<Map.Entry<Object, Short>> set0 = (Set<Map.Entry<Object, Short>>)tObjectShortMapDecorator0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-1156);
      float float0 = 0.0F;
      TObjectShortHashMap<Short> tObjectShortHashMap0 = new TObjectShortHashMap<Short>(int0, float0);
      TObjectShortHashMap<Short> tObjectShortHashMap1 = null;
      try {
        tObjectShortHashMap1 = new TObjectShortHashMap<Short>((TObjectShortMap<? extends Short>) tObjectShortHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TObjectShortMapDecorator<Object> tObjectShortMapDecorator0 = new TObjectShortMapDecorator<Object>();
      // Undeclared exception!
      try {
        tObjectShortMapDecorator0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
