/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TShortFunction;
import gnu.trove.map.TByteShortMap;
import gnu.trove.map.hash.TByteShortHashMap;
import gnu.trove.procedure.TByteProcedure;
import gnu.trove.procedure.TByteShortProcedure;
import gnu.trove.procedure.TShortProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteShortHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 15 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap$TByteShortHashIterator.advance()V: root-Branch
   * 2 gnu.trove.map.hash.TByteShortHashMap$TByteShortHashIterator.value()S: root-Branch
   * 3 gnu.trove.map.hash.TByteShortHashMap$TByteShortHashIterator.<init>(Lgnu/trove/map/hash/TByteShortHashMap;Lgnu/trove/map/hash/TByteShortHashMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TByteShortHashMap$TByteShortHashIterator.key()B: root-Branch
   * 5 gnu.trove.map.hash.TByteShortHashMap.put(BS)S: root-Branch
   * 6 gnu.trove.map.hash.TByteShortHashMap.setUp(I)I: root-Branch
   * 7 gnu.trove.map.hash.TByteShortHashMap.<init>()V: root-Branch
   * 8 gnu.trove.map.hash.TByteShortHashMap.iterator()Lgnu/trove/iterator/TByteShortIterator;: root-Branch
   * 9 gnu.trove.map.hash.TByteShortHashMap.<init>(Lgnu/trove/map/TByteShortMap;)V: I10 Branch 34 IFEQ L133 - false
   * 10 gnu.trove.map.hash.TByteShortHashMap.<init>(Lgnu/trove/map/TByteShortMap;)V: I38 Branch 35 IFEQ L139 - true
   * 11 gnu.trove.map.hash.TByteShortHashMap.<init>(Lgnu/trove/map/TByteShortMap;)V: I50 Branch 36 IFEQ L143 - true
   * 12 gnu.trove.map.hash.TByteShortHashMap.doPut(BSI)S: I12 Branch 40 IFGE L214 - true
   * 13 gnu.trove.map.hash.TByteShortHashMap.doPut(BSI)S: I41 Branch 41 IFEQ L221 - false
   * 14 gnu.trove.map.hash.TByteShortHashMap.putAll(Lgnu/trove/map/TByteShortMap;)V: I15 Branch 43 IFEQ L243 - true
   * 15 gnu.trove.map.hash.TByteShortHashMap.putAll(Lgnu/trove/map/TByteShortMap;)V: I15 Branch 43 IFEQ L243 - false
   */

  @Test
  public void test0()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      tByteShortHashMap0.put((byte)0, (short) (-818));
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap((TByteShortMap) tByteShortHashMap0);
      assertEquals(1, tByteShortHashMap0.size());
      assertEquals("{0=-818}", tByteShortHashMap1.toString());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap$TValueView.<init>(Lgnu/trove/map/hash/TByteShortHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TByteShortHashMap.valueCollection()Lgnu/trove/TShortCollection;: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      tByteShortHashMap0.valueCollection();
      assertEquals(23, tByteShortHashMap0.capacity());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TByteShortHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TByteShortHashMap.keySet()Lgnu/trove/set/TByteSet;: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      tByteShortHashMap0.keySet();
      assertEquals(23, tByteShortHashMap0.capacity());
  }

  //Test case number: 3
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.increment(B)Z: root-Branch
   * 2 gnu.trove.map.hash.TByteShortHashMap.<init>(IF)V: root-Branch
   * 3 gnu.trove.map.hash.TByteShortHashMap.adjustValue(BS)Z: I9 Branch 71 IFGE L477 - false
   */

  @Test
  public void test3()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(Integer.MAX_VALUE, Integer.MAX_VALUE);
      boolean boolean0 = tByteShortHashMap0.increment((byte)0);
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.forEachKey(Lgnu/trove/procedure/TByteProcedure;)Z: root-Branch
   * 2 gnu.trove.map.hash.TByteShortHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(0);
      boolean boolean0 = tByteShortHashMap0.forEachKey((TByteProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteShortHashMap.clear()V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      tByteShortHashMap0.clear();
      assertEquals(23, tByteShortHashMap0.capacity());
      assertEquals("{}", tByteShortHashMap0.toString());
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteShortHashMap.containsKey(B)Z: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      tByteShortHashMap0.containsKey((byte) (-7));
      assertEquals(23, tByteShortHashMap0.capacity());
  }

  //Test case number: 7
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.<init>(Lgnu/trove/map/TByteShortMap;)V: I38 Branch 35 IFEQ L139 - false
   * 2 gnu.trove.map.hash.TByteShortHashMap.<init>(Lgnu/trove/map/TByteShortMap;)V: I50 Branch 36 IFEQ L143 - false
   * 3 gnu.trove.map.hash.TByteShortHashMap.<init>(Lgnu/trove/map/TByteShortMap;)V: I10 Branch 34 IFEQ L133 - false
   * 4 gnu.trove.map.hash.TByteShortHashMap.<init>(IFBS)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap((int) (byte)0, 0.0F, (byte) (-125), (short) (byte)62);
      TByteShortHashMap tByteShortHashMap1 = null;
      try {
        tByteShortHashMap1 = new TByteShortHashMap((TByteShortMap) tByteShortHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteShortHashMap.putIfAbsent(BS)S: I9 Branch 39 IFGE L205 - false
   */

  @Test
  public void test8()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      tByteShortHashMap0.put((byte)0, (short) (-818));
      short short0 = tByteShortHashMap0.putIfAbsent((byte)0, (byte)0);
      assertEquals("{0=-818}", tByteShortHashMap0.toString());
      assertEquals((short) (-818), short0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteShortHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   */

  @Test
  public void test9()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      HashMap<Byte, Short> hashMap0 = new HashMap<Byte, Short>();
      tByteShortHashMap0.putAll((Map<? extends Byte, ? extends Short>) hashMap0);
      assertEquals(23, tByteShortHashMap0.capacity());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteShortHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - false
   */

  @Test
  public void test10()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      HashMap<Byte, Short> hashMap0 = new HashMap<Byte, Short>();
      hashMap0.put((Byte) (byte)0, (Short) null);
      // Undeclared exception!
      try {
        tByteShortHashMap0.putAll((Map<? extends Byte, ? extends Short>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 11
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.get(B)S: I9 Branch 44 IFGE L253 - false
   * 2 gnu.trove.map.hash.TByteShortHashMap.adjustOrPutValue(BSS)S: I9 Branch 72 IFGE L491 - true
   * 3 gnu.trove.map.hash.TByteShortHashMap.adjustOrPutValue(BSS)S: I59 Branch 73 IFEQ L502 - false
   * 4 gnu.trove.map.hash.TByteShortHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 5 gnu.trove.map.hash.TByteShortHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 6 gnu.trove.map.hash.TByteShortHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 7 gnu.trove.map.hash.TByteShortHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 8 gnu.trove.map.hash.TByteShortHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 9 gnu.trove.map.hash.TByteShortHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 10 gnu.trove.map.hash.TByteShortHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - false
   * 11 gnu.trove.map.hash.TByteShortHashMap.equals(Ljava/lang/Object;)Z: I87 Branch 79 IF_ICMPEQ L1200 - false
   * 12 gnu.trove.map.hash.TByteShortHashMap.equals(Ljava/lang/Object;)Z: I90 Branch 80 IF_ICMPEQ L1200 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap((int) (byte)41, (float) (byte)15, (byte)41, (short) (byte)15);
      tByteShortHashMap0.adjustOrPutValue((byte)0, (short) (-26789), (short)20);
      tByteShortHashMap1.adjustOrPutValue((byte)71, (short) (byte)41, (short) (-26789));
      boolean boolean0 = tByteShortHashMap0.equals((Object) tByteShortHashMap1);
      assertEquals(1, tByteShortHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteShortHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      tByteShortHashMap0.put((byte)0, (byte)0);
      boolean boolean0 = tByteShortHashMap0.isEmpty();
      assertEquals(1, tByteShortHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   * 2 gnu.trove.map.hash.TByteShortHashMap.<init>(IFBS)V: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap((int) (byte)0, (-1721.9038F), (byte) (-85), (short) (byte) (-103));
      boolean boolean0 = tByteShortHashMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteShortHashMap.remove(B)S: I14 Branch 46 IFLT L276 - true
   */

  @Test
  public void test14()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(1439, 1439);
      short short0 = tByteShortHashMap0.remove((byte)1);
      assertEquals(0, tByteShortHashMap0.size());
      assertEquals((short)0, short0);
  }

  //Test case number: 15
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.keys()[B: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TByteShortHashMap.keys()[B: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TByteShortHashMap.keys()[B: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TByteShortHashMap.keys()[B: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      tByteShortHashMap0.adjustOrPutValue((byte)15, (short) (byte)15, (short) (-26789));
      tByteShortHashMap0.keys();
      assertEquals(1, tByteShortHashMap0.size());
      assertEquals("{15=-26789}", tByteShortHashMap0.toString());
  }

  //Test case number: 16
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.keys([B)[B: I10 Branch 49 IF_ICMPGE L315 - true
   * 2 gnu.trove.map.hash.TByteShortHashMap.keys([B)[B: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TByteShortHashMap.keys([B)[B: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TByteShortHashMap.keys([B)[B: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      byte[] byteArray0 = tByteShortHashMap0.keys(tByteShortHashMap0._states);
      assertNotNull(byteArray0);
      assertEquals(23, tByteShortHashMap0.capacity());
  }

  //Test case number: 17
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.keys([B)[B: I10 Branch 49 IF_ICMPGE L315 - false
   * 2 gnu.trove.map.hash.TByteShortHashMap.keys([B)[B: I44 Branch 51 IF_ICMPNE L323 - false
   * 3 gnu.trove.map.hash.TByteShortHashMap.keys([B)[B: I37 Branch 50 IFLE L322 - true
   * 4 gnu.trove.map.hash.TByteShortHashMap.keys([B)[B: I37 Branch 50 IFLE L322 - false
   * 5 gnu.trove.map.hash.TByteShortHashMap.keys([B)[B: I44 Branch 51 IF_ICMPNE L323 - true
   * 6 gnu.trove.map.hash.TByteShortHashMap.doPut(BSI)S: I12 Branch 40 IFGE L214 - false
   * 7 gnu.trove.map.hash.TByteShortHashMap.doPut(BSI)S: I41 Branch 41 IFEQ L221 - true
   * 8 gnu.trove.map.hash.TByteShortHashMap.<init>([B[S)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 9 gnu.trove.map.hash.TByteShortHashMap.<init>([B[S)V: I24 Branch 33 IF_ICMPGE L119 - false
   */

  @Test
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      short[] shortArray0 = new short[5];
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      byte[] byteArray1 = new byte[1];
      byte[] byteArray2 = tByteShortHashMap0.keys(byteArray1);
      assertEquals(2, tByteShortHashMap0.size());
      assertNotNull(byteArray2);
      assertEquals("{54=0, 0=0}", tByteShortHashMap0.toString());
      assertNotSame(byteArray1, byteArray2);
  }

  //Test case number: 18
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.values()[S: I27 Branch 52 IFLE L343 - true
   * 2 gnu.trove.map.hash.TByteShortHashMap.values()[S: I27 Branch 52 IFLE L343 - false
   * 3 gnu.trove.map.hash.TByteShortHashMap.values()[S: I34 Branch 53 IF_ICMPNE L344 - true
   * 4 gnu.trove.map.hash.TByteShortHashMap.values()[S: I34 Branch 53 IF_ICMPNE L344 - false
   */

  @Test
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      short[] shortArray0 = new short[5];
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      short[] shortArray1 = tByteShortHashMap0.values();
      assertEquals(23, tByteShortHashMap0.capacity());
      assertEquals(1, tByteShortHashMap0.size());
      assertEquals("{0=0}", tByteShortHashMap0.toString());
      assertNotNull(shortArray1);
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.values([S)[S: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TByteShortHashMap.values([S)[S: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TByteShortHashMap.values([S)[S: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TByteShortHashMap.values([S)[S: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test19()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      short[] shortArray0 = new short[6];
      short[] shortArray1 = tByteShortHashMap0.values(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(23, tByteShortHashMap0.capacity());
      assertSame(shortArray0, shortArray1);
  }

  //Test case number: 20
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.values([S)[S: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TByteShortHashMap.values([S)[S: I44 Branch 56 IF_ICMPNE L363 - false
   * 3 gnu.trove.map.hash.TByteShortHashMap.values([S)[S: I37 Branch 55 IFLE L362 - true
   * 4 gnu.trove.map.hash.TByteShortHashMap.values([S)[S: I37 Branch 55 IFLE L362 - false
   * 5 gnu.trove.map.hash.TByteShortHashMap.values([S)[S: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)9;
      short[] shortArray0 = new short[7];
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      short[] shortArray1 = new short[1];
      short[] shortArray2 = tByteShortHashMap0.values(shortArray1);
      assertEquals("{9=0, 0=0}", tByteShortHashMap0.toString());
      assertEquals(2, tByteShortHashMap0.size());
      assertEquals(17, tByteShortHashMap0.capacity());
      assertNotNull(shortArray2);
  }

  //Test case number: 21
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.containsValue(S)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TByteShortHashMap.containsValue(S)Z: I30 Branch 59 IF_ICMPNE L377 - false
   * 3 gnu.trove.map.hash.TByteShortHashMap.containsValue(S)Z: I18 Branch 57 IFLE L376 - false
   * 4 gnu.trove.map.hash.TByteShortHashMap.containsValue(S)Z: I25 Branch 58 IF_ICMPNE L377 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      tByteShortHashMap0.put((byte)0, (short) (-818));
      boolean boolean0 = tByteShortHashMap0.containsValue((short) (-818));
      assertEquals(false, tByteShortHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.containsValue(S)Z: I30 Branch 59 IF_ICMPNE L377 - true
   * 2 gnu.trove.map.hash.TByteShortHashMap.containsValue(S)Z: I18 Branch 57 IFLE L376 - true
   * 3 gnu.trove.map.hash.TByteShortHashMap.containsValue(S)Z: I18 Branch 57 IFLE L376 - false
   * 4 gnu.trove.map.hash.TByteShortHashMap.containsValue(S)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 5 gnu.trove.map.hash.TByteShortHashMap.containsValue(S)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 6 gnu.trove.map.hash.TByteShortHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 7 gnu.trove.map.hash.TByteShortHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 8 gnu.trove.map.hash.TByteShortHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 9 gnu.trove.map.hash.TByteShortHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   */

  @Test
  public void test22()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(1196, (float) (short) (-1169));
      tByteShortHashMap0.adjustOrPutValue((byte)0, (short) (-1169), (short) (-1481));
      boolean boolean0 = tByteShortHashMap0.containsValue((short)0);
      assertEquals(false, tByteShortHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.forEachValue(Lgnu/trove/procedure/TShortProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TByteShortHashMap.forEachValue(Lgnu/trove/procedure/TShortProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TByteShortHashMap.forEachValue(Lgnu/trove/procedure/TShortProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test23()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      boolean boolean0 = tByteShortHashMap0.forEachValue((TShortProcedure) null);
      assertEquals(true, boolean0);
      assertEquals(23, tByteShortHashMap0.capacity());
  }

  //Test case number: 24
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.transformValues(Lgnu/trove/function/TShortFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TByteShortHashMap.transformValues(Lgnu/trove/function/TShortFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TByteShortHashMap.transformValues(Lgnu/trove/function/TShortFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   * 4 gnu.trove.map.hash.TByteShortHashMap.removeAt(I)V: root-Branch
   * 5 gnu.trove.map.hash.TByteShortHashMap.remove(B)S: I14 Branch 46 IFLT L276 - false
   */

  @Test
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      short[] shortArray0 = new short[5];
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      assertEquals(1, tByteShortHashMap0.size());
      
      tByteShortHashMap0.remove((byte)0);
      tByteShortHashMap0.transformValues((TShortFunction) null);
      assertEquals(true, tByteShortHashMap0.isEmpty());
      assertEquals(0, tByteShortHashMap0.size());
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.transformValues(Lgnu/trove/function/TShortFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TByteShortHashMap.transformValues(Lgnu/trove/function/TShortFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TByteShortHashMap.transformValues(Lgnu/trove/function/TShortFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test25()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      tByteShortHashMap0.adjustOrPutValue((byte)99, (byte)99, (byte)99);
      // Undeclared exception!
      try {
        tByteShortHashMap0.transformValues((TShortFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.retainEntries(Lgnu/trove/procedure/TByteShortProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TByteShortHashMap.retainEntries(Lgnu/trove/procedure/TByteShortProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TByteShortHashMap.retainEntries(Lgnu/trove/procedure/TByteShortProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      boolean boolean0 = tByteShortHashMap0.retainEntries((TByteShortProcedure) null);
      assertEquals(false, boolean0);
      assertEquals(23, tByteShortHashMap0.capacity());
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.retainEntries(Lgnu/trove/procedure/TByteShortProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TByteShortHashMap.retainEntries(Lgnu/trove/procedure/TByteShortProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TByteShortHashMap.retainEntries(Lgnu/trove/procedure/TByteShortProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test27()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(1439, 1439);
      tByteShortHashMap0.put((byte)3, (byte)3);
      // Undeclared exception!
      try {
        tByteShortHashMap0.retainEntries((TByteShortProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.adjustOrPutValue(BSS)S: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TByteShortHashMap.adjustOrPutValue(BSS)S: I59 Branch 73 IFEQ L502 - true
   */

  @Test
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      short[] shortArray0 = new short[1];
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      short short0 = tByteShortHashMap0.adjustOrPutValue((byte)0, (short) (byte)0, (short) (-1703));
      assertEquals(1, tByteShortHashMap0.size());
      assertEquals(17, tByteShortHashMap0.capacity());
      assertEquals((short)0, short0);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TByteShortHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      boolean boolean0 = tByteShortHashMap0.equals((Object) null);
      assertEquals(false, boolean0);
      assertEquals(23, tByteShortHashMap0.capacity());
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   * 2 gnu.trove.map.hash.TByteShortHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test30()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(201);
      short[] shortArray0 = new short[9];
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap(tByteShortHashMap0._states, shortArray0);
      boolean boolean0 = tByteShortHashMap0.equals((Object) tByteShortHashMap1);
      assertFalse(tByteShortHashMap1.equals(tByteShortHashMap0));
      assertEquals(877, tByteShortHashMap1.capacity());
      assertEquals(1, tByteShortHashMap1.size());
      assertEquals(false, boolean0);
      assertEquals("{0=0}", tByteShortHashMap1.toString());
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - true
   * 2 gnu.trove.map.hash.TByteShortHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 3 gnu.trove.map.hash.TByteShortHashMap.get(B)S: I9 Branch 44 IFGE L253 - true
   */

  @Test
  public void test31()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(1196, (float) (short) (-1169));
      tByteShortHashMap0.adjustOrPutValue((byte)0, (short) (-1169), (short) (-1481));
      boolean boolean0 = tByteShortHashMap0.equals((Object) tByteShortHashMap0);
      assertEquals(7, tByteShortHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 32
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.equals(Ljava/lang/Object;)Z: I90 Branch 80 IF_ICMPEQ L1200 - false
   * 2 gnu.trove.map.hash.TByteShortHashMap.increment(B)Z: root-Branch
   * 3 gnu.trove.map.hash.TByteShortHashMap.adjustValue(BS)Z: I9 Branch 71 IFGE L477 - true
   * 4 gnu.trove.map.hash.TByteShortHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 5 gnu.trove.map.hash.TByteShortHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 6 gnu.trove.map.hash.TByteShortHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 7 gnu.trove.map.hash.TByteShortHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 8 gnu.trove.map.hash.TByteShortHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 9 gnu.trove.map.hash.TByteShortHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - false
   * 10 gnu.trove.map.hash.TByteShortHashMap.equals(Ljava/lang/Object;)Z: I87 Branch 79 IF_ICMPEQ L1200 - false
   * 11 gnu.trove.map.hash.TByteShortHashMap.putIfAbsent(BS)S: I9 Branch 39 IFGE L205 - true
   * 12 gnu.trove.map.hash.TByteShortHashMap.get(B)S: I9 Branch 44 IFGE L253 - true
   */

  @Test
  public void test32()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(Integer.MAX_VALUE, Integer.MAX_VALUE);
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap(1196, 1.0F);
      tByteShortHashMap1.adjustOrPutValue((byte)0, (byte)0, (byte)0);
      tByteShortHashMap1.increment((byte)0);
      tByteShortHashMap0.putIfAbsent((byte)0, (short) (-32768));
      boolean boolean0 = tByteShortHashMap1.equals((Object) tByteShortHashMap0);
      assertEquals(1, tByteShortHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 33
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 2 gnu.trove.map.hash.TByteShortHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TByteShortHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 4 gnu.trove.map.hash.TByteShortHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 5 gnu.trove.map.hash.TByteShortHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   */

  @Test
  public void test33()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      tByteShortHashMap0.put((byte)0, (short) (-818));
      int int0 = tByteShortHashMap0.hashCode();
      assertEquals(1, tByteShortHashMap0.size());
      assertEquals((-818), int0);
  }

  //Test case number: 34
  /*
   * 16 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap$1.execute(BS)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TByteShortHashMap$1.<init>(Lgnu/trove/map/hash/TByteShortHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 3 gnu.trove.map.hash.TByteShortHashMap$1.execute(BS)Z: I4 Branch 115 IFEQ L1233 - false
   * 4 gnu.trove.map.hash.TByteShortHashMap.put(BS)S: root-Branch
   * 5 gnu.trove.map.hash.TByteShortHashMap.toString()Ljava/lang/String;: root-Branch
   * 6 gnu.trove.map.hash.TByteShortHashMap.forEachEntry(Lgnu/trove/procedure/TByteShortProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 7 gnu.trove.map.hash.TByteShortHashMap.forEachEntry(Lgnu/trove/procedure/TByteShortProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 8 gnu.trove.map.hash.TByteShortHashMap.forEachEntry(Lgnu/trove/procedure/TByteShortProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 9 gnu.trove.map.hash.TByteShortHashMap.forEachEntry(Lgnu/trove/procedure/TByteShortProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 10 gnu.trove.map.hash.TByteShortHashMap.forEachEntry(Lgnu/trove/procedure/TByteShortProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 11 gnu.trove.map.hash.TByteShortHashMap.doPut(BSI)S: I12 Branch 40 IFGE L214 - true
   * 12 gnu.trove.map.hash.TByteShortHashMap.doPut(BSI)S: I12 Branch 40 IFGE L214 - false
   * 13 gnu.trove.map.hash.TByteShortHashMap.doPut(BSI)S: I41 Branch 41 IFEQ L221 - true
   * 14 gnu.trove.map.hash.TByteShortHashMap.doPut(BSI)S: I41 Branch 41 IFEQ L221 - false
   * 15 gnu.trove.map.hash.TByteShortHashMap.<init>([B[S)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 16 gnu.trove.map.hash.TByteShortHashMap.<init>([B[S)V: I24 Branch 33 IF_ICMPGE L119 - false
   */

  @Test
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)9;
      short[] shortArray0 = new short[7];
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      String string0 = tByteShortHashMap0.toString();
      assertEquals("{9=0, 0=0}", string0);
      assertEquals(2, tByteShortHashMap0.size());
      assertNotNull(string0);
      assertEquals(17, tByteShortHashMap0.capacity());
  }

  //Test case number: 35
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TByteShortHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 2 gnu.trove.map.hash.TByteShortHashMap.setUp(I)I: root-Branch
   * 3 gnu.trove.map.hash.TByteShortHashMap.<init>(IF)V: root-Branch
   * 4 gnu.trove.map.hash.TByteShortHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 5 gnu.trove.map.hash.TByteShortHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 6 gnu.trove.map.hash.TByteShortHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 7 gnu.trove.map.hash.TByteShortHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 8 gnu.trove.map.hash.TByteShortHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 9 gnu.trove.map.hash.TByteShortHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 10 gnu.trove.map.hash.TByteShortHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 11 gnu.trove.map.hash.TByteShortHashMap.adjustOrPutValue(BSS)S: I9 Branch 72 IFGE L491 - true
   * 12 gnu.trove.map.hash.TByteShortHashMap.adjustOrPutValue(BSS)S: I59 Branch 73 IFEQ L502 - false
   */

  @Test
  public void test35()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(1196, (float) (short) (-1169));
      tByteShortHashMap0.adjustOrPutValue((byte)0, (short) (-1169), (short) (-1481));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tByteShortHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(1, tByteShortHashMap0.size());
      assertEquals("{0=-1481}", tByteShortHashMap0.toString());
  }
}
