/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.stack.array;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.stack.TDoubleStack;
import gnu.trove.stack.array.TDoubleArrayStack;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleArrayStackEvoSuite_StrongMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 Strong Mutation 6: gnu.trove.stack.array.TDoubleArrayStack.<init>(ID)V:79 - InsertUnaryOp IINC 1 capacity
   * 2 Strong Mutation 4: gnu.trove.stack.array.TDoubleArrayStack.<init>(ID)V:79 - ReplaceVariable capacity -> DEFAULT_CAPACITY
   * 3 gnu.trove.stack.array.TDoubleArrayStack.<init>(ID)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TDoubleArrayStack tDoubleArrayStack0 = null;
      try {
        tDoubleArrayStack0 = new TDoubleArrayStack((-1), (-111.86998970968509));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 1
  /*
   * 4 covered goals:
   * 1 Strong Mutation 8: gnu.trove.stack.array.TDoubleArrayStack.<init>(ID)V:79 - InsertUnaryOp Negation of no_entry_value
   * 2 Strong Mutation 7: gnu.trove.stack.array.TDoubleArrayStack.<init>(ID)V:79 - InsertUnaryOp IINC -1 capacity
   * 3 Strong Mutation 7: gnu.trove.stack.array.TDoubleArrayStack.<init>(ID)V:79 - InsertUnaryOp IINC -1 capacity
   * 4 Strong Mutation 8: gnu.trove.stack.array.TDoubleArrayStack.<init>(ID)V:79 - InsertUnaryOp Negation of no_entry_value
   */

  @Test
  public void test1()  throws Throwable  {
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack(0, 0);
      assertEquals(0.0, tDoubleArrayStack0.getNoEntryValue(), 0.01D);
  }

  //Test case number: 2
  /*
   * 5 covered goals:
   * 1 Strong Mutation 14: gnu.trove.stack.array.TDoubleArrayStack.getNoEntryValue()D:107 - DeleteStatement: getNoEntryValue()D
   * 2 gnu.trove.stack.array.TDoubleArrayStack.getNoEntryValue()D: root-Branch
   * 3 Strong Mutation 14: gnu.trove.stack.array.TDoubleArrayStack.getNoEntryValue()D:107 - DeleteStatement: getNoEntryValue()D
   * 4 gnu.trove.stack.array.TDoubleArrayStack.<init>()V: root-Branch
   * 5 gnu.trove.stack.array.TDoubleArrayStack.<init>(I)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack();
      tDoubleArrayStack0.getNoEntryValue();
      TDoubleArrayStack tDoubleArrayStack1 = new TDoubleArrayStack(1262, 2046.18036721156);
      assertEquals(2046.18036721156, tDoubleArrayStack1.getNoEntryValue(), 0.01D);
  }

  //Test case number: 3
  /*
   * 14 covered goals:
   * 1 Strong Mutation 23: gnu.trove.stack.array.TDoubleArrayStack.pop()D:127 - ReplaceArithmeticOperator - -> %
   * 2 Strong Mutation 15: gnu.trove.stack.array.TDoubleArrayStack.push(D)V:117 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 3 Strong Mutation 17: gnu.trove.stack.array.TDoubleArrayStack.push(D)V:117 - DeleteStatement: add(D)Z
   * 4 Strong Mutation 16: gnu.trove.stack.array.TDoubleArrayStack.push(D)V:117 - InsertUnaryOp Negation of val
   * 5 Strong Mutation 19: gnu.trove.stack.array.TDoubleArrayStack.pop()D:127 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 6 Strong Mutation 18: gnu.trove.stack.array.TDoubleArrayStack.pop()D:127 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 7 Strong Mutation 21: gnu.trove.stack.array.TDoubleArrayStack.pop()D:127 - ReplaceConstant - 1 -> 0
   * 8 Strong Mutation 20: gnu.trove.stack.array.TDoubleArrayStack.pop()D:127 - DeleteStatement: size()I
   * 9 Strong Mutation 23: gnu.trove.stack.array.TDoubleArrayStack.pop()D:127 - ReplaceArithmeticOperator - -> %
   * 10 Strong Mutation 22: gnu.trove.stack.array.TDoubleArrayStack.pop()D:127 - ReplaceArithmeticOperator - -> +
   * 11 Strong Mutation 25: gnu.trove.stack.array.TDoubleArrayStack.pop()D:127 - ReplaceArithmeticOperator - -> *
   * 12 Strong Mutation 24: gnu.trove.stack.array.TDoubleArrayStack.pop()D:127 - ReplaceArithmeticOperator - -> /
   * 13 gnu.trove.stack.array.TDoubleArrayStack.pop()D: root-Branch
   * 14 gnu.trove.stack.array.TDoubleArrayStack.push(D)V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack();
      tDoubleArrayStack0.push((-29.304825994624625));
      tDoubleArrayStack0.push(59.2832348443188);
      double double0 = tDoubleArrayStack0.pop();
      assertEquals("{-29.304825994624625}", tDoubleArrayStack0.toString());
      assertEquals(59.2832348443188, double0, 0.01D);
  }

  //Test case number: 4
  /*
   * 5 covered goals:
   * 1 Strong Mutation 39: gnu.trove.stack.array.TDoubleArrayStack.clear()V:153 - DeleteStatement: clear()V
   * 2 Strong Mutation 38: gnu.trove.stack.array.TDoubleArrayStack.clear()V:153 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 3 Strong Mutation 38: gnu.trove.stack.array.TDoubleArrayStack.clear()V:153 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 4 Strong Mutation 39: gnu.trove.stack.array.TDoubleArrayStack.clear()V:153 - DeleteStatement: clear()V
   * 5 gnu.trove.stack.array.TDoubleArrayStack.clear()V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack();
      tDoubleArrayStack0.push((double) 10);
      assertEquals(1, tDoubleArrayStack0.size());
      
      tDoubleArrayStack0.clear();
      assertEquals(0, tDoubleArrayStack0.size());
  }

  //Test case number: 5
  /*
   * 66 covered goals:
   * 1 Strong Mutation 199: gnu.trove.stack.array.TDoubleArrayStack.swap([DII)V:227 - ReplaceVariable j -> DEFAULT_CAPACITY
   * 2 Strong Mutation 151: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - InsertUnaryOp Negation of i
   * 3 Strong Mutation 171: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:212 - ReplaceVariable j -> to
   * 4 Strong Mutation 170: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:212 - InsertUnaryOp IINC -1 i
   * 5 Strong Mutation 175: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:212 - InsertUnaryOp Negation of j
   * 6 Strong Mutation 173: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:212 - ReplaceVariable j -> DEFAULT_CAPACITY
   * 7 Strong Mutation 161: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - ReplaceComparisonOperator >= -> ==
   * 8 Strong Mutation 166: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:212 - ReplaceVariable i -> DEFAULT_CAPACITY
   * 9 Strong Mutation 164: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:212 - ReplaceVariable i -> to
   * 10 Strong Mutation 184: gnu.trove.stack.array.TDoubleArrayStack.swap([DII)V:225 - ReplaceVariable i -> DEFAULT_CAPACITY
   * 11 Strong Mutation 188: gnu.trove.stack.array.TDoubleArrayStack.swap([DII)V:225 - InsertUnaryOp IINC -1 i
   * 12 Strong Mutation 189: gnu.trove.stack.array.TDoubleArrayStack.swap([DII)V:226 - ReplaceVariable i -> DEFAULT_CAPACITY
   * 13 Strong Mutation 176: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:212 - InsertUnaryOp IINC 1 j
   * 14 Strong Mutation 201: gnu.trove.stack.array.TDoubleArrayStack.swap([DII)V:227 - InsertUnaryOp Negation of j
   * 15 Strong Mutation 202: gnu.trove.stack.array.TDoubleArrayStack.swap([DII)V:227 - InsertUnaryOp IINC 1 j
   * 16 Strong Mutation 197: gnu.trove.stack.array.TDoubleArrayStack.swap([DII)V:226 - InsertUnaryOp IINC 1 j
   * 17 Strong Mutation 196: gnu.trove.stack.array.TDoubleArrayStack.swap([DII)V:226 - InsertUnaryOp Negation of j
   * 18 Strong Mutation 193: gnu.trove.stack.array.TDoubleArrayStack.swap([DII)V:226 - InsertUnaryOp IINC -1 i
   * 19 Strong Mutation 194: gnu.trove.stack.array.TDoubleArrayStack.swap([DII)V:226 - ReplaceVariable j -> DEFAULT_CAPACITY
   * 20 Strong Mutation 36: gnu.trove.stack.array.TDoubleArrayStack.size()I:145 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 21 Strong Mutation 37: gnu.trove.stack.array.TDoubleArrayStack.size()I:145 - DeleteStatement: size()I
   * 22 Strong Mutation 40: gnu.trove.stack.array.TDoubleArrayStack.toArray()[D:164 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 23 Strong Mutation 41: gnu.trove.stack.array.TDoubleArrayStack.toArray()[D:164 - DeleteStatement: toArray()[D
   * 24 Strong Mutation 108: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:205 - InsertUnaryOp IINC -1 from
   * 25 Strong Mutation 118: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:208 - ReplaceVariable from -> DEFAULT_CAPACITY
   * 26 Strong Mutation 112: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:205 - InsertUnaryOp IINC 1 to
   * 27 Strong Mutation 127: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:208 - ReplaceComparisonOperator <= -> ==
   * 28 Strong Mutation 125: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:208 - InsertUnaryOp IINC 1 to
   * 29 Strong Mutation 124: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:208 - InsertUnaryOp Negation of to
   * 30 Strong Mutation 121: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:208 - InsertUnaryOp IINC -1 from
   * 31 Strong Mutation 137: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - ReplaceVariable to -> DEFAULT_CAPACITY
   * 32 Strong Mutation 140: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - InsertUnaryOp IINC 1 to
   * 33 Strong Mutation 143: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - ReplaceArithmeticOperator - -> +
   * 34 Strong Mutation 142: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - ReplaceConstant - 1 -> 0
   * 35 Strong Mutation 135: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - InsertUnaryOp IINC -1 from
   * 36 Strong Mutation 153: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - InsertUnaryOp IINC -1 i
   * 37 Strong Mutation 156: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - ReplaceVariable j -> DEFAULT_CAPACITY
   * 38 Strong Mutation 159: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - InsertUnaryOp IINC 1 j
   * 39 Strong Mutation 145: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - ReplaceArithmeticOperator - -> /
   * 40 Strong Mutation 146: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - ReplaceArithmeticOperator - -> *
   * 41 Strong Mutation 151: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - InsertUnaryOp Negation of i
   * 42 Strong Mutation 171: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:212 - ReplaceVariable j -> to
   * 43 Strong Mutation 170: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:212 - InsertUnaryOp IINC -1 i
   * 44 Strong Mutation 175: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:212 - InsertUnaryOp Negation of j
   * 45 Strong Mutation 173: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:212 - ReplaceVariable j -> DEFAULT_CAPACITY
   * 46 Strong Mutation 161: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - ReplaceComparisonOperator >= -> ==
   * 47 Strong Mutation 166: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:212 - ReplaceVariable i -> DEFAULT_CAPACITY
   * 48 Strong Mutation 164: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:212 - ReplaceVariable i -> to
   * 49 Strong Mutation 184: gnu.trove.stack.array.TDoubleArrayStack.swap([DII)V:225 - ReplaceVariable i -> DEFAULT_CAPACITY
   * 50 Strong Mutation 188: gnu.trove.stack.array.TDoubleArrayStack.swap([DII)V:225 - InsertUnaryOp IINC -1 i
   * 51 Strong Mutation 189: gnu.trove.stack.array.TDoubleArrayStack.swap([DII)V:226 - ReplaceVariable i -> DEFAULT_CAPACITY
   * 52 Strong Mutation 176: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:212 - InsertUnaryOp IINC 1 j
   * 53 Strong Mutation 201: gnu.trove.stack.array.TDoubleArrayStack.swap([DII)V:227 - InsertUnaryOp Negation of j
   * 54 Strong Mutation 202: gnu.trove.stack.array.TDoubleArrayStack.swap([DII)V:227 - InsertUnaryOp IINC 1 j
   * 55 Strong Mutation 197: gnu.trove.stack.array.TDoubleArrayStack.swap([DII)V:226 - InsertUnaryOp IINC 1 j
   * 56 Strong Mutation 196: gnu.trove.stack.array.TDoubleArrayStack.swap([DII)V:226 - InsertUnaryOp Negation of j
   * 57 Strong Mutation 199: gnu.trove.stack.array.TDoubleArrayStack.swap([DII)V:227 - ReplaceVariable j -> DEFAULT_CAPACITY
   * 58 Strong Mutation 193: gnu.trove.stack.array.TDoubleArrayStack.swap([DII)V:226 - InsertUnaryOp IINC -1 i
   * 59 Strong Mutation 194: gnu.trove.stack.array.TDoubleArrayStack.swap([DII)V:226 - ReplaceVariable j -> DEFAULT_CAPACITY
   * 60 gnu.trove.stack.array.TDoubleArrayStack.swap([DII)V: root-Branch
   * 61 gnu.trove.stack.array.TDoubleArrayStack.size()I: root-Branch
   * 62 gnu.trove.stack.array.TDoubleArrayStack.toArray()[D: root-Branch
   * 63 gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V: I4 Branch 4 IF_ICMPNE L205 - true
   * 64 gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V: I12 Branch 5 IF_ICMPLE L208 - true
   * 65 gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V: I32 Branch 6 IF_ICMPGE L211 - true
   * 66 gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V: I32 Branch 6 IF_ICMPGE L211 - false
   */

  @Test
  public void test5()  throws Throwable  {
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack();
      tDoubleArrayStack0.push((double) 10);
      tDoubleArrayStack0.push((double) 10);
      tDoubleArrayStack0.toArray();
      assertEquals("{10.0, 10.0}", tDoubleArrayStack0.toString());
      assertEquals(2, tDoubleArrayStack0.size());
  }

  //Test case number: 6
  /*
   * 48 covered goals:
   * 1 Strong Mutation 227: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:240 - ReplaceConstant - ,  -> 
   * 2 Strong Mutation 207: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - DeleteStatement: size()I
   * 3 Strong Mutation 220: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:239 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 4 Strong Mutation 221: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:239 - ReplaceVariable i -> DEFAULT_CAPACITY
   * 5 Strong Mutation 222: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:239 - InsertUnaryOp Negation of i
   * 6 Strong Mutation 223: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:239 - InsertUnaryOp IINC 1 i
   * 7 Strong Mutation 216: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - InsertUnaryOp IINC -1 i
   * 8 Strong Mutation 219: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - ReplaceComparisonOperator <= -> -1
   * 9 Strong Mutation 210: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - ReplaceArithmeticOperator - -> %
   * 10 Strong Mutation 228: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:240 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 11 Strong Mutation 226: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:239 - DeleteStatement: append(D)Ljava/lang/StringBuilder;
   * 12 Strong Mutation 225: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:239 - DeleteStatement: get(I)D
   * 13 Strong Mutation 224: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:239 - InsertUnaryOp IINC -1 i
   * 14 Strong Mutation 205: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:237 - ReplaceConstant - { -> 
   * 15 Strong Mutation 207: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - DeleteStatement: size()I
   * 16 Strong Mutation 206: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 17 Strong Mutation 220: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:239 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 18 Strong Mutation 221: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:239 - ReplaceVariable i -> DEFAULT_CAPACITY
   * 19 Strong Mutation 222: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:239 - InsertUnaryOp Negation of i
   * 20 Strong Mutation 223: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:239 - InsertUnaryOp IINC 1 i
   * 21 Strong Mutation 216: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - InsertUnaryOp IINC -1 i
   * 22 Strong Mutation 218: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - ReplaceComparisonOperator <= -> <
   * 23 Strong Mutation 219: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - ReplaceComparisonOperator <= -> -1
   * 24 Strong Mutation 212: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - ReplaceArithmeticOperator - -> *
   * 25 Strong Mutation 213: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - ReplaceVariable i -> DEFAULT_CAPACITY
   * 26 Strong Mutation 214: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - InsertUnaryOp Negation of i
   * 27 Strong Mutation 215: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - InsertUnaryOp IINC 1 i
   * 28 Strong Mutation 208: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - ReplaceConstant - 1 -> 0
   * 29 Strong Mutation 209: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - ReplaceArithmeticOperator - -> +
   * 30 Strong Mutation 210: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - ReplaceArithmeticOperator - -> %
   * 31 Strong Mutation 211: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - ReplaceArithmeticOperator - -> /
   * 32 Strong Mutation 239: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:246 - DeleteStatement: toString()Ljava/lang/String;
   * 33 Strong Mutation 238: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:245 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 34 Strong Mutation 237: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:245 - ReplaceConstant - } -> 
   * 35 Strong Mutation 236: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:243 - DeleteStatement: append(D)Ljava/lang/StringBuilder;
   * 36 Strong Mutation 235: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:243 - DeleteStatement: get(I)D
   * 37 Strong Mutation 234: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:243 - ReplaceConstant - 0 -> 1
   * 38 Strong Mutation 233: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:243 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 39 Strong Mutation 232: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:242 - ReplaceComparisonOperator <= -> -1
   * 40 Strong Mutation 229: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:242 - DeleteStatement: size()I
   * 41 Strong Mutation 228: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:240 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 42 Strong Mutation 227: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:240 - ReplaceConstant - ,  -> 
   * 43 Strong Mutation 226: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:239 - DeleteStatement: append(D)Ljava/lang/StringBuilder;
   * 44 Strong Mutation 225: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:239 - DeleteStatement: get(I)D
   * 45 Strong Mutation 224: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:239 - InsertUnaryOp IINC -1 i
   * 46 gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;: I17 Branch 7 IFLE L238 - true
   * 47 gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;: I17 Branch 7 IFLE L238 - false
   * 48 gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;: I41 Branch 8 IFLE L242 - false
   */

  @Test
  public void test6()  throws Throwable  {
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack();
      tDoubleArrayStack0.push((-29.304825994624625));
      tDoubleArrayStack0.push(59.2832348443188);
      String string0 = tDoubleArrayStack0.toString();
      assertEquals(2, tDoubleArrayStack0.size());
      assertEquals(59.2832348443188, tDoubleArrayStack0.peek(), 0.01D);
      assertEquals("{59.2832348443188, -29.304825994624625}", string0);
  }

  //Test case number: 7
  /*
   * 11 covered goals:
   * 1 Strong Mutation 233: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:243 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 2 Strong Mutation 218: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - ReplaceComparisonOperator <= -> <
   * 3 Strong Mutation 212: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - ReplaceArithmeticOperator - -> *
   * 4 Strong Mutation 215: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - InsertUnaryOp IINC 1 i
   * 5 Strong Mutation 208: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - ReplaceConstant - 1 -> 0
   * 6 Strong Mutation 211: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - ReplaceArithmeticOperator - -> /
   * 7 Strong Mutation 236: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:243 - DeleteStatement: append(D)Ljava/lang/StringBuilder;
   * 8 Strong Mutation 235: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:243 - DeleteStatement: get(I)D
   * 9 Strong Mutation 234: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:243 - ReplaceConstant - 0 -> 1
   * 10 Strong Mutation 232: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:242 - ReplaceComparisonOperator <= -> -1
   * 11 Strong Mutation 229: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:242 - DeleteStatement: size()I
   */

  @Test
  public void test7()  throws Throwable  {
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack();
      tDoubleArrayStack0.push((double) 10);
      String string0 = tDoubleArrayStack0.toString();
      assertEquals(1, tDoubleArrayStack0.size());
      assertNotNull(string0);
      assertEquals("{10.0}", string0);
  }

  //Test case number: 8
  /*
   * 13 covered goals:
   * 1 Strong Mutation 239: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:246 - DeleteStatement: toString()Ljava/lang/String;
   * 2 Strong Mutation 205: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:237 - ReplaceConstant - { -> 
   * 3 Strong Mutation 206: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 4 Strong Mutation 217: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - ReplaceComparisonOperator <= -> ==
   * 5 Strong Mutation 213: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - ReplaceVariable i -> DEFAULT_CAPACITY
   * 6 Strong Mutation 214: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - InsertUnaryOp Negation of i
   * 7 Strong Mutation 209: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - ReplaceArithmeticOperator - -> +
   * 8 Strong Mutation 238: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:245 - DeleteStatement: append(Ljava/lang/String;)Ljava/lang/StringBuilder;
   * 9 Strong Mutation 237: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:245 - ReplaceConstant - } -> 
   * 10 Strong Mutation 231: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:242 - ReplaceComparisonOperator <= -> <
   * 11 Strong Mutation 217: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:238 - ReplaceComparisonOperator <= -> ==
   * 12 Strong Mutation 231: gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;:242 - ReplaceComparisonOperator <= -> <
   * 13 gnu.trove.stack.array.TDoubleArrayStack.toString()Ljava/lang/String;: I41 Branch 8 IFLE L242 - true
   */

  @Test
  public void test8()  throws Throwable  {
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack();
      String string0 = tDoubleArrayStack0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  //Test case number: 9
  /*
   * 3 covered goals:
   * 1 Strong Mutation 241: gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z:252 - ReplaceConstant - 1 -> 0
   * 2 gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z: I4 Branch 9 IF_ACMPNE L251 - false
   * 3 Strong Mutation 241: gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z:252 - ReplaceConstant - 1 -> 0
   */

  @Test
  public void test9()  throws Throwable  {
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack();
      boolean boolean0 = tDoubleArrayStack0.equals((Object) tDoubleArrayStack0);
      assertEquals(true, boolean0);
  }

  //Test case number: 10
  /*
   * 11 covered goals:
   * 1 Strong Mutation 248: gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z:260 - ReplaceVariable that -> this
   * 2 Strong Mutation 250: gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z:260 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 3 Strong Mutation 248: gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z:260 - ReplaceVariable that -> this
   * 4 Strong Mutation 249: gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z:260 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 5 Strong Mutation 244: gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z:254 - DeleteStatement: getClass()Ljava/lang/Class;
   * 6 Strong Mutation 245: gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z:254 - ReplaceComparisonOperator == -> !=
   * 7 Strong Mutation 242: gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z:254 - ReplaceComparisonOperator = null -> != null
   * 8 Strong Mutation 243: gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z:254 - DeleteStatement: getClass()Ljava/lang/Class;
   * 9 Strong Mutation 240: gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z:251 - ReplaceComparisonOperator != -> ==
   * 10 gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z: I12 Branch 10 IFNULL L254 - false
   * 11 gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z: I17 Branch 11 IF_ACMPEQ L254 - true
   */

  @Test
  public void test10()  throws Throwable  {
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack();
      TDoubleArrayStack tDoubleArrayStack1 = new TDoubleArrayStack();
      tDoubleArrayStack0.equals((Object) tDoubleArrayStack1);
      tDoubleArrayStack0.push(687.8797201573761);
      assertEquals("{687.8797201573761}", tDoubleArrayStack0.toString());
      assertFalse(tDoubleArrayStack0.equals(tDoubleArrayStack1));
  }

  //Test case number: 11
  /*
   * 13 covered goals:
   * 1 Strong Mutation 249: gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z:260 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 2 Strong Mutation 9: gnu.trove.stack.array.TDoubleArrayStack.<init>(Lgnu/trove/stack/TDoubleStack;)V:90 - ReplaceComparisonOperator == -> !=
   * 3 Strong Mutation 10: gnu.trove.stack.array.TDoubleArrayStack.<init>(Lgnu/trove/stack/TDoubleStack;)V:92 - ReplaceVariable array_stack -> this
   * 4 Strong Mutation 11: gnu.trove.stack.array.TDoubleArrayStack.<init>(Lgnu/trove/stack/TDoubleStack;)V:92 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 5 Strong Mutation 250: gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z:260 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 6 Strong Mutation 244: gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z:254 - DeleteStatement: getClass()Ljava/lang/Class;
   * 7 Strong Mutation 245: gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z:254 - ReplaceComparisonOperator == -> !=
   * 8 Strong Mutation 242: gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z:254 - ReplaceComparisonOperator = null -> != null
   * 9 Strong Mutation 243: gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z:254 - DeleteStatement: getClass()Ljava/lang/Class;
   * 10 Strong Mutation 9: gnu.trove.stack.array.TDoubleArrayStack.<init>(Lgnu/trove/stack/TDoubleStack;)V:90 - ReplaceComparisonOperator == -> !=
   * 11 Strong Mutation 10: gnu.trove.stack.array.TDoubleArrayStack.<init>(Lgnu/trove/stack/TDoubleStack;)V:92 - ReplaceVariable array_stack -> this
   * 12 Strong Mutation 11: gnu.trove.stack.array.TDoubleArrayStack.<init>(Lgnu/trove/stack/TDoubleStack;)V:92 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 13 gnu.trove.stack.array.TDoubleArrayStack.<init>(Lgnu/trove/stack/TDoubleStack;)V: I8 Branch 1 IFEQ L90 - false
   */

  @Test
  public void test11()  throws Throwable  {
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack();
      TDoubleArrayStack tDoubleArrayStack1 = new TDoubleArrayStack((TDoubleStack) tDoubleArrayStack0);
      boolean boolean0 = tDoubleArrayStack0.equals((Object) tDoubleArrayStack1);
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 3 covered goals:
   * 1 Strong Mutation 252: gnu.trove.stack.array.TDoubleArrayStack.hashCode()I:265 - DeleteStatement: hashCode()I
   * 2 gnu.trove.stack.array.TDoubleArrayStack.hashCode()I: root-Branch
   * 3 Strong Mutation 252: gnu.trove.stack.array.TDoubleArrayStack.hashCode()I:265 - DeleteStatement: hashCode()I
   */

  @Test
  public void test12()  throws Throwable  {
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack();
      tDoubleArrayStack0.push((double) 10);
      int int0 = tDoubleArrayStack0.hashCode();
      assertEquals(1, tDoubleArrayStack0.size());
      assertEquals(1076101120, int0);
  }

  //Test case number: 13
  /*
   * 13 covered goals:
   * 1 Strong Mutation 256: gnu.trove.stack.array.TDoubleArrayStack.writeExternal(Ljava/io/ObjectOutput;)V:274 - DeleteStatement: writeObject(Ljava/lang/Object;)V
   * 2 Strong Mutation 2: gnu.trove.stack.array.TDoubleArrayStack.<init>(I)V:67 - InsertUnaryOp IINC 1 capacity
   * 3 Strong Mutation 3: gnu.trove.stack.array.TDoubleArrayStack.<init>(I)V:67 - InsertUnaryOp IINC -1 capacity
   * 4 Strong Mutation 254: gnu.trove.stack.array.TDoubleArrayStack.writeExternal(Ljava/io/ObjectOutput;)V:271 - DeleteStatement: writeByte(I)V
   * 5 Strong Mutation 255: gnu.trove.stack.array.TDoubleArrayStack.writeExternal(Ljava/io/ObjectOutput;)V:274 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 6 Strong Mutation 253: gnu.trove.stack.array.TDoubleArrayStack.writeExternal(Ljava/io/ObjectOutput;)V:271 - ReplaceConstant - 0 -> 1
   * 7 Strong Mutation 2: gnu.trove.stack.array.TDoubleArrayStack.<init>(I)V:67 - InsertUnaryOp IINC 1 capacity
   * 8 Strong Mutation 3: gnu.trove.stack.array.TDoubleArrayStack.<init>(I)V:67 - InsertUnaryOp IINC -1 capacity
   * 9 Strong Mutation 254: gnu.trove.stack.array.TDoubleArrayStack.writeExternal(Ljava/io/ObjectOutput;)V:271 - DeleteStatement: writeByte(I)V
   * 10 Strong Mutation 255: gnu.trove.stack.array.TDoubleArrayStack.writeExternal(Ljava/io/ObjectOutput;)V:274 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 11 Strong Mutation 253: gnu.trove.stack.array.TDoubleArrayStack.writeExternal(Ljava/io/ObjectOutput;)V:271 - ReplaceConstant - 0 -> 1
   * 12 Strong Mutation 256: gnu.trove.stack.array.TDoubleArrayStack.writeExternal(Ljava/io/ObjectOutput;)V:274 - DeleteStatement: writeObject(Ljava/lang/Object;)V
   * 13 gnu.trove.stack.array.TDoubleArrayStack.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      PrintStream printStream0 = new PrintStream((OutputStream) byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      tDoubleArrayStack0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\u0001\u0000sr\u0000%gnu.trove.list.array.TDoubleArrayList\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\f\u0000\u0000xpw\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000x", byteArrayOutputStream0.toString());
      assertEquals(81, byteArrayOutputStream0.size());
  }

  //Test case number: 14
  /*
   * 9 covered goals:
   * 1 gnu.trove.stack.array.TDoubleArrayStack.toArray([D)V: I15 Branch 2 IFGE L184 - true
   * 2 gnu.trove.stack.array.TDoubleArrayStack.toArray([D)V: I48 Branch 3 IF_ICMPLE L191 - true
   * 3 Strong Mutation 42: gnu.trove.stack.array.TDoubleArrayStack.toArray()[D:165 - ReplaceConstant - 0 -> 1
   * 4 Strong Mutation 107: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:205 - InsertUnaryOp IINC 1 from
   * 5 Strong Mutation 113: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:205 - InsertUnaryOp IINC -1 to
   * 6 Strong Mutation 42: gnu.trove.stack.array.TDoubleArrayStack.toArray()[D:165 - ReplaceConstant - 0 -> 1
   * 7 Strong Mutation 107: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:205 - InsertUnaryOp IINC 1 from
   * 8 Strong Mutation 113: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:205 - InsertUnaryOp IINC -1 to
   * 9 gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V: I4 Branch 4 IF_ICMPNE L205 - false
   */

  @Test
  public void test14()  throws Throwable  {
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack();
      double[] doubleArray0 = tDoubleArrayStack0.toArray();
      tDoubleArrayStack0.toArray(doubleArray0);
      assertEquals("{}", tDoubleArrayStack0.toString());
  }

  //Test case number: 15
  /*
   * 34 covered goals:
   * 1 gnu.trove.stack.array.TDoubleArrayStack.toArray([D)V: I15 Branch 2 IFGE L184 - false
   * 2 gnu.trove.stack.array.TDoubleArrayStack.toArray([D)V: I48 Branch 3 IF_ICMPLE L191 - false
   * 3 Strong Mutation 1: gnu.trove.stack.array.TDoubleArrayStack.<init>(I)V:67 - InsertUnaryOp Negation of capacity
   * 4 Strong Mutation 15: gnu.trove.stack.array.TDoubleArrayStack.push(D)V:117 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 5 Strong Mutation 17: gnu.trove.stack.array.TDoubleArrayStack.push(D)V:117 - DeleteStatement: add(D)Z
   * 6 Strong Mutation 16: gnu.trove.stack.array.TDoubleArrayStack.push(D)V:117 - InsertUnaryOp Negation of val
   * 7 Strong Mutation 19: gnu.trove.stack.array.TDoubleArrayStack.pop()D:127 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 8 Strong Mutation 18: gnu.trove.stack.array.TDoubleArrayStack.pop()D:127 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 9 Strong Mutation 21: gnu.trove.stack.array.TDoubleArrayStack.pop()D:127 - ReplaceConstant - 1 -> 0
   * 10 Strong Mutation 20: gnu.trove.stack.array.TDoubleArrayStack.pop()D:127 - DeleteStatement: size()I
   * 11 Strong Mutation 22: gnu.trove.stack.array.TDoubleArrayStack.pop()D:127 - ReplaceArithmeticOperator - -> +
   * 12 Strong Mutation 25: gnu.trove.stack.array.TDoubleArrayStack.pop()D:127 - ReplaceArithmeticOperator - -> *
   * 13 Strong Mutation 24: gnu.trove.stack.array.TDoubleArrayStack.pop()D:127 - ReplaceArithmeticOperator - -> /
   * 14 Strong Mutation 36: gnu.trove.stack.array.TDoubleArrayStack.size()I:145 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 15 Strong Mutation 37: gnu.trove.stack.array.TDoubleArrayStack.size()I:145 - DeleteStatement: size()I
   * 16 Strong Mutation 40: gnu.trove.stack.array.TDoubleArrayStack.toArray()[D:164 - DeleteField: _listLgnu/trove/list/array/TDoubleArrayList;
   * 17 Strong Mutation 41: gnu.trove.stack.array.TDoubleArrayStack.toArray()[D:164 - DeleteStatement: toArray()[D
   * 18 Strong Mutation 108: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:205 - InsertUnaryOp IINC -1 from
   * 19 Strong Mutation 118: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:208 - ReplaceVariable from -> DEFAULT_CAPACITY
   * 20 Strong Mutation 112: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:205 - InsertUnaryOp IINC 1 to
   * 21 Strong Mutation 127: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:208 - ReplaceComparisonOperator <= -> ==
   * 22 Strong Mutation 125: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:208 - InsertUnaryOp IINC 1 to
   * 23 Strong Mutation 124: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:208 - InsertUnaryOp Negation of to
   * 24 Strong Mutation 121: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:208 - InsertUnaryOp IINC -1 from
   * 25 Strong Mutation 137: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - ReplaceVariable to -> DEFAULT_CAPACITY
   * 26 Strong Mutation 140: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - InsertUnaryOp IINC 1 to
   * 27 Strong Mutation 143: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - ReplaceArithmeticOperator - -> +
   * 28 Strong Mutation 142: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - ReplaceConstant - 1 -> 0
   * 29 Strong Mutation 135: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - InsertUnaryOp IINC -1 from
   * 30 Strong Mutation 153: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - InsertUnaryOp IINC -1 i
   * 31 Strong Mutation 156: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - ReplaceVariable j -> DEFAULT_CAPACITY
   * 32 Strong Mutation 159: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - InsertUnaryOp IINC 1 j
   * 33 Strong Mutation 145: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - ReplaceArithmeticOperator - -> /
   * 34 Strong Mutation 146: gnu.trove.stack.array.TDoubleArrayStack.reverse([DII)V:211 - ReplaceArithmeticOperator - -> *
   */

  @Test
  public void test15()  throws Throwable  {
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack();
      tDoubleArrayStack0.push((double) 10);
      double[] doubleArray0 = tDoubleArrayStack0.toArray();
      assertEquals("{10.0}", tDoubleArrayStack0.toString());
      
      tDoubleArrayStack0.pop();
      tDoubleArrayStack0.toArray(doubleArray0);
      assertEquals(0, tDoubleArrayStack0.size());
  }

  //Test case number: 16
  /*
   * 7 covered goals:
   * 1 gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z: I12 Branch 10 IFNULL L254 - true
   * 2 Strong Mutation 5: gnu.trove.stack.array.TDoubleArrayStack.<init>(ID)V:79 - InsertUnaryOp Negation of capacity
   * 3 Strong Mutation 8: gnu.trove.stack.array.TDoubleArrayStack.<init>(ID)V:79 - InsertUnaryOp Negation of no_entry_value
   * 4 Strong Mutation 246: gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z:255 - ReplaceConstant - 0 -> 1
   * 5 Strong Mutation 240: gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z:251 - ReplaceComparisonOperator != -> ==
   * 6 Strong Mutation 246: gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z:255 - ReplaceConstant - 0 -> 1
   * 7 gnu.trove.stack.array.TDoubleArrayStack.equals(Ljava/lang/Object;)Z: I4 Branch 9 IF_ACMPNE L251 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TDoubleArrayStack tDoubleArrayStack0 = new TDoubleArrayStack(737, (-306.96561094342263));
      boolean boolean0 = tDoubleArrayStack0.equals((Object) null);
      assertEquals(false, boolean0);
      assertEquals((-306.96561094342263), tDoubleArrayStack0.getNoEntryValue(), 0.01D);
  }
}
