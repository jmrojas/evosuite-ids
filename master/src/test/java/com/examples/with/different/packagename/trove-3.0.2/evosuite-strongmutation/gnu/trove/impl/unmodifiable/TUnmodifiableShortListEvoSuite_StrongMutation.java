/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedRandomAccessShortList;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessShortList;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortList;
import gnu.trove.list.TShortList;
import gnu.trove.list.array.TShortArrayList;
import gnu.trove.list.linked.TShortLinkedList;
import gnu.trove.procedure.TShortProcedure;
import java.util.Random;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableShortListEvoSuite_StrongMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 10 covered goals:
   * 1 Strong Mutation 2: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.equals(Ljava/lang/Object;)Z:62 - DeleteField: listLgnu/trove/list/TShortList;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortList.equals(Ljava/lang/Object;)Z: I9 Branch 2 IFEQ L62 - false
   * 3 Strong Mutation 0: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.<init>(Lgnu/trove/list/TShortList;)V:59 - ReplaceVariable list -> list
   * 4 Strong Mutation 1: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.equals(Ljava/lang/Object;)Z:62 - ReplaceComparisonOperator == -> !=
   * 5 Strong Mutation 2: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.equals(Ljava/lang/Object;)Z:62 - DeleteField: listLgnu/trove/list/TShortList;
   * 6 Strong Mutation 3: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.equals(Ljava/lang/Object;)Z:62 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 7 Strong Mutation 4: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.equals(Ljava/lang/Object;)Z:62 - ReplaceComparisonOperator == -> !=
   * 8 Strong Mutation 5: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.equals(Ljava/lang/Object;)Z:62 - ReplaceConstant - 1 -> 0
   * 9 gnu.trove.impl.unmodifiable.TUnmodifiableShortList.<init>(Lgnu/trove/list/TShortList;)V: root-Branch
   * 10 gnu.trove.impl.unmodifiable.TUnmodifiableShortList.equals(Ljava/lang/Object;)Z: I4 Branch 1 IF_ACMPEQ L62 - false
   */

//   @Test
//   public void test0()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList(0);
//       Random random0 = new Random();
//       assertEquals(1882029389, random0.nextInt());
//       
//       TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortArrayList0);
//       boolean boolean0 = tUnmodifiableRandomAccessShortList0.equals((Object) tShortArrayList0);
//       assertEquals(true, boolean0);
//   }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 Strong Mutation 5: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.equals(Ljava/lang/Object;)Z:62 - ReplaceConstant - 1 -> 0
   * 2 Strong Mutation 3: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.equals(Ljava/lang/Object;)Z:62 - DeleteStatement: equals(Ljava/lang/Object;)Z
   */

  @Test
  public void test1()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(0);
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortArrayList0);
      boolean boolean0 = tUnmodifiableRandomAccessShortList0.equals((Object) tShortArrayList0);
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 5 covered goals:
   * 1 Strong Mutation 6: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.equals(Ljava/lang/Object;)Z:62 - ReplaceConstant - 0 -> 1
   * 2 Strong Mutation 1: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.equals(Ljava/lang/Object;)Z:62 - ReplaceComparisonOperator == -> !=
   * 3 Strong Mutation 4: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.equals(Ljava/lang/Object;)Z:62 - ReplaceComparisonOperator == -> !=
   * 4 Strong Mutation 6: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.equals(Ljava/lang/Object;)Z:62 - ReplaceConstant - 0 -> 1
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableShortList.equals(Ljava/lang/Object;)Z: I9 Branch 2 IFEQ L62 - true
   */

  @Test
  public void test2()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(0);
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortArrayList0);
      boolean boolean0 = tUnmodifiableRandomAccessShortList0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 3
  /*
   * 3 covered goals:
   * 1 Strong Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.hashCode()I:63 - DeleteStatement: hashCode()I
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortList.hashCode()I: root-Branch
   * 3 Strong Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.hashCode()I:63 - DeleteStatement: hashCode()I
   */

  @Test
  public void test3()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList((short)543);
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortLinkedList0);
      int int0 = tUnmodifiableRandomAccessShortList0.hashCode();
      assertEquals(16833, int0);
  }

  //Test case number: 4
  /*
   * 6 covered goals:
   * 1 Strong Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.get(I)S:65 - DeleteStatement: get(I)S
   * 2 Strong Mutation 11: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.get(I)S:65 - InsertUnaryOp IINC 1 index
   * 3 Strong Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.get(I)S:65 - InsertUnaryOp IINC -1 index
   * 4 Strong Mutation 11: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.get(I)S:65 - InsertUnaryOp IINC 1 index
   * 5 Strong Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.get(I)S:65 - InsertUnaryOp IINC -1 index
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableShortList.get(I)S: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList((short)0);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-375);
      tShortLinkedList0.add(shortArray0);
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortLinkedList0);
      short short0 = tUnmodifiableRandomAccessShortList0.get((int) (short)0);
      assertEquals((short) (-375), short0);
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * 1 Strong Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.indexOf(S)I:66 - DeleteField: listLgnu/trove/list/TShortList;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortList.indexOf(S)I: root-Branch
   * 3 Strong Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.indexOf(S)I:66 - DeleteField: listLgnu/trove/list/TShortList;
   */

  @Test
  public void test5()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[3] = (short)0;
      TShortArrayList tShortArrayList0 = new TShortArrayList(0);
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortArrayList0);
      tUnmodifiableShortList0.indexOf((short) (-1478));
      shortArray0[3] = (short) (-1478);
  }

  //Test case number: 6
  /*
   * 4 covered goals:
   * 1 Strong Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.indexOf(S)I:66 - InsertUnaryOp Negation of o
   * 2 Strong Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.indexOf(S)I:66 - InsertUnaryOp Negation of o
   * 3 Strong Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.indexOf(S)I:66 - InsertUnaryOp IINC -1 o
   * 4 Strong Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.indexOf(S)I:66 - InsertUnaryOp IINC 1 o
   */

//   @Test
//   public void test6()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList();
//       TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortArrayList0);
//       tUnmodifiableShortList0.indexOf((short)168);
//       Random random0 = new Random();
//       assertEquals(0.17429705465829004, random0.nextDouble(), 0.01D);
//   }

  //Test case number: 7
  /*
   * 2 covered goals:
   * 1 Strong Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.indexOf(S)I:66 - InsertUnaryOp IINC 1 o
   * 2 Strong Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.indexOf(S)I:66 - InsertUnaryOp IINC -1 o
   */

  @Test
  public void test7()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(0);
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortArrayList0);
      tShortArrayList0.add((short)0);
      int int0 = tUnmodifiableShortList0.indexOf((short)0);
      assertEquals(0, int0);
  }

  //Test case number: 8
  /*
   * 11 covered goals:
   * 1 Strong Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(S)I:67 - InsertUnaryOp IINC -1 o
   * 2 Strong Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(S)I:67 - DeleteField: listLgnu/trove/list/TShortList;
   * 3 Strong Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(S)I:67 - InsertUnaryOp IINC 1 o
   * 4 Strong Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(S)I:67 - InsertUnaryOp Negation of o
   * 5 Strong Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(S)I:67 - DeleteStatement: lastIndexOf(S)I
   * 6 Strong Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(S)I:67 - DeleteField: listLgnu/trove/list/TShortList;
   * 7 Strong Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(S)I:67 - InsertUnaryOp IINC 1 o
   * 8 Strong Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(S)I:67 - InsertUnaryOp Negation of o
   * 9 Strong Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(S)I:67 - DeleteStatement: lastIndexOf(S)I
   * 10 Strong Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(S)I:67 - InsertUnaryOp IINC -1 o
   * 11 gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(S)I: root-Branch
   */

//   @Test
//   public void test8()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList(0);
//       TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortArrayList0);
//       Random random0 = new Random();
//       assertEquals(0.08437091F, random0.nextFloat(), 0.01F);
//       
//       int int0 = tUnmodifiableShortList0.lastIndexOf((short)1729);
//       assertEquals((-1), int0);
//   }

  //Test case number: 9
  /*
   * 2 covered goals:
   * 1 Strong Mutation 25: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray(II)[S:70 - ReplaceVariable offset -> len
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray(II)[S: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      short[] shortArray0 = new short[2];
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0, (short) (-757));
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableShortList0.toArray((-912), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -912
         //
      }
  }

  //Test case number: 10
  /*
   * 3 covered goals:
   * 1 Strong Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray(II)[S:70 - InsertUnaryOp Negation of len
   * 2 Strong Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray(II)[S:70 - ReplaceVariable len -> offset
   * 3 Strong Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray(II)[S:70 - InsertUnaryOp IINC 1 len
   */

  @Test
  public void test10()  throws Throwable  {
      short[] shortArray0 = new short[2];
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessShortList0.toArray(0, (int) (short) (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 11
  /*
   * 4 covered goals:
   * 1 Strong Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray(II)[S:70 - InsertUnaryOp IINC -1 len
   * 2 Strong Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray(II)[S:70 - DeleteField: listLgnu/trove/list/TShortList;
   * 3 Strong Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray(II)[S:70 - InsertUnaryOp IINC 1 len
   * 4 Strong Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray(II)[S:70 - DeleteField: listLgnu/trove/list/TShortList;
   */

  @Test
  public void test11()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(0);
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortArrayList0);
      short[] shortArray0 = tUnmodifiableShortList0.toArray((int) (short)0, (int) (short)0);
      assertNotNull(shortArray0);
  }

  //Test case number: 12
  /*
   * 2 covered goals:
   * 1 Strong Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SII)[S:73 - InsertUnaryOp Negation of offset
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SII)[S: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      short[] shortArray0 = new short[6];
      TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList((TShortList) tShortArrayList0);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortLinkedList0, (Object) "jpn");
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tSynchronizedRandomAccessShortList0);
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessShortList0.toArray(shortArray0, (-2), (-2010));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -2
         //
      }
  }

  //Test case number: 13
  /*
   * 5 covered goals:
   * 1 Strong Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SII)[S:73 - InsertUnaryOp Negation of len
   * 2 Strong Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SII)[S:73 - InsertUnaryOp IINC -1 offset
   * 3 Strong Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SII)[S:73 - DeleteField: listLgnu/trove/list/TShortList;
   * 4 Strong Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SII)[S:73 - InsertUnaryOp IINC -1 offset
   * 5 Strong Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SII)[S:73 - InsertUnaryOp Negation of len
   */

  @Test
  public void test13()  throws Throwable  {
      short[] shortArray0 = new short[6];
      TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortArrayList0);
      short[] shortArray1 = tUnmodifiableShortList0.toArray(shortArray0, (int) (short)0, 1);
      assertSame(shortArray0, shortArray1);
  }

  //Test case number: 14
  /*
   * 6 covered goals:
   * 1 Strong Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SII)[S:73 - InsertUnaryOp IINC 1 len
   * 2 Strong Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SII)[S:73 - DeleteField: listLgnu/trove/list/TShortList;
   * 3 Strong Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SII)[S:73 - ReplaceVariable len -> offset
   * 4 Strong Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SII)[S:73 - InsertUnaryOp IINC -1 len
   * 5 Strong Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SII)[S:73 - ReplaceVariable len -> offset
   * 6 Strong Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SII)[S:73 - InsertUnaryOp IINC 1 len
   */

  @Test
  public void test14()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList((short) (-1798));
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortLinkedList0);
      short[] shortArray0 = new short[5];
      short[] shortArray1 = tUnmodifiableRandomAccessShortList0.toArray(shortArray0, 1920, (int) (short)0);
      assertSame(shortArray0, shortArray1);
  }

  //Test case number: 15
  /*
   * 12 covered goals:
   * 1 Strong Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - ReplaceVariable source_pos -> dest_pos
   * 2 Strong Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - ReplaceVariable source_pos -> len
   * 3 Strong Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - ReplaceVariable source_pos -> len
   * 4 Strong Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - InsertUnaryOp Negation of source_pos
   * 5 Strong Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - DeleteField: listLgnu/trove/list/TShortList;
   * 6 Strong Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - ReplaceVariable source_pos -> dest_pos
   * 7 Strong Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - InsertUnaryOp IINC -1 source_pos
   * 8 Strong Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - InsertUnaryOp IINC -1 dest_pos
   * 9 Strong Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - InsertUnaryOp IINC 1 dest_pos
   * 10 Strong Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - InsertUnaryOp Negation of dest_pos
   * 11 Strong Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - InsertUnaryOp Negation of len
   * 12 gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S: root-Branch
   */

//   @Test
//   public void test15()  throws Throwable  {
//       short[] shortArray0 = new short[6];
//       shortArray0[1] = (short) (-770);
//       TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0, (short) (-1109));
//       TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortArrayList0);
//       tUnmodifiableRandomAccessShortList0.toArray(shortArray0, (int) (short)2, (int) (short)1, 1);
//       assertEquals(0, tShortArrayList0.min());
//       assertEquals("{0, 0, 0, 0, 0, 0}", tUnmodifiableRandomAccessShortList0.toString());
//   }

  //Test case number: 16
  /*
   * 2 covered goals:
   * 1 Strong Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - ReplaceVariable dest_pos -> len
   * 2 Strong Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - ReplaceVariable dest_pos -> source_pos
   */

  @Test
  public void test16()  throws Throwable  {
      short[] shortArray0 = new short[6];
      TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessShortList0.toArray(shortArray0, 1, 190, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * 1 Strong Mutation 59: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - InsertUnaryOp IINC -1 len
   * 2 Strong Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - ReplaceVariable len -> dest_pos
   */

  @Test
  public void test17()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortArrayList0);
      short[] shortArray0 = new short[9];
      short[] shortArray1 = tUnmodifiableRandomAccessShortList0.toArray(shortArray0, (int) (short)0, (int) (short) (-1705), (int) (short)0);
      assertSame(shortArray0, shortArray1);
  }

  //Test case number: 18
  /*
   * 10 covered goals:
   * 1 Strong Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - InsertUnaryOp Negation of len
   * 2 Strong Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - InsertUnaryOp Negation of source_pos
   * 3 Strong Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - DeleteField: listLgnu/trove/list/TShortList;
   * 4 Strong Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - InsertUnaryOp IINC -1 source_pos
   * 5 Strong Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - InsertUnaryOp IINC 1 source_pos
   * 6 Strong Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - InsertUnaryOp IINC -1 dest_pos
   * 7 Strong Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - InsertUnaryOp IINC 1 dest_pos
   * 8 Strong Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - InsertUnaryOp Negation of dest_pos
   * 9 Strong Mutation 59: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - InsertUnaryOp IINC -1 len
   * 10 Strong Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.toArray([SIII)[S:76 - InsertUnaryOp IINC 1 source_pos
   */

  @Test
  public void test18()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      Random random0 = new Random();
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortLinkedList0);
      short[] shortArray0 = new short[9];
      short[] shortArray1 = tUnmodifiableRandomAccessShortList0.toArray(shortArray0, (int) (short)0, (int) (short)0, (int) (short)0);
      assertSame(shortArray0, shortArray1);
  }

  //Test case number: 19
  /*
   * 3 covered goals:
   * 1 Strong Mutation 62: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.forEachDescending(Lgnu/trove/procedure/TShortProcedure;)Z:80 - DeleteStatement: forEachDescending(Lgnu/trove/procedure/TShortProcedure;)Z
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortList.forEachDescending(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   * 3 Strong Mutation 62: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.forEachDescending(Lgnu/trove/procedure/TShortProcedure;)Z:80 - DeleteStatement: forEachDescending(Lgnu/trove/procedure/TShortProcedure;)Z
   */

  @Test
  public void test19()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(0);
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortArrayList0);
      boolean boolean0 = tUnmodifiableShortList0.forEachDescending((TShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 20
  /*
   * 10 covered goals:
   * 1 Strong Mutation 66: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(S)I:83 - InsertUnaryOp IINC -1 value
   * 2 Strong Mutation 63: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(S)I:83 - DeleteField: listLgnu/trove/list/TShortList;
   * 3 Strong Mutation 64: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(S)I:83 - InsertUnaryOp Negation of value
   * 4 Strong Mutation 65: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(S)I:83 - InsertUnaryOp IINC 1 value
   * 5 Strong Mutation 63: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(S)I:83 - DeleteField: listLgnu/trove/list/TShortList;
   * 6 Strong Mutation 64: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(S)I:83 - InsertUnaryOp Negation of value
   * 7 Strong Mutation 65: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(S)I:83 - InsertUnaryOp IINC 1 value
   * 8 Strong Mutation 66: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(S)I:83 - InsertUnaryOp IINC -1 value
   * 9 Strong Mutation 67: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(S)I:83 - DeleteStatement: binarySearch(S)I
   * 10 gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(S)I: root-Branch
   */

//   @Test
//   public void test20()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList(0);
//       Random random0 = new Random();
//       assertEquals(0.6955209563460419, random0.nextGaussian(), 0.01D);
//       
//       TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortArrayList0);
//       int int0 = tUnmodifiableRandomAccessShortList0.binarySearch((short) (-1530));
//       assertEquals((-1), int0);
//   }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 Strong Mutation 67: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(S)I:83 - DeleteStatement: binarySearch(S)I
   */

  @Test
  public void test21()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(0);
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortArrayList0);
      int int0 = tUnmodifiableRandomAccessShortList0.binarySearch((short) (-1530));
      assertEquals((-1), int0);
  }

  //Test case number: 22
  /*
   * 12 covered goals:
   * 1 Strong Mutation 79: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(SII)I:85 - InsertUnaryOp IINC -1 toIndex
   * 2 Strong Mutation 69: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(SII)I:85 - InsertUnaryOp Negation of value
   * 3 Strong Mutation 70: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(SII)I:85 - InsertUnaryOp IINC 1 value
   * 4 Strong Mutation 71: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(SII)I:85 - InsertUnaryOp IINC -1 value
   * 5 Strong Mutation 78: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(SII)I:85 - InsertUnaryOp IINC 1 toIndex
   * 6 Strong Mutation 69: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(SII)I:85 - InsertUnaryOp Negation of value
   * 7 Strong Mutation 70: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(SII)I:85 - InsertUnaryOp IINC 1 value
   * 8 Strong Mutation 71: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(SII)I:85 - InsertUnaryOp IINC -1 value
   * 9 Strong Mutation 78: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(SII)I:85 - InsertUnaryOp IINC 1 toIndex
   * 10 Strong Mutation 79: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(SII)I:85 - InsertUnaryOp IINC -1 toIndex
   * 11 Strong Mutation 74: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(SII)I:85 - InsertUnaryOp IINC 1 fromIndex
   * 12 gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(SII)I: root-Branch
   */

//   @Test
//   public void test22()  throws Throwable  {
//       TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
//       TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortLinkedList0);
//       tUnmodifiableShortList0.binarySearch((short)0, (short)0, (short) (-32768));
//       Random random0 = new Random();
//       assertEquals(0.33523715F, random0.nextFloat(), 0.01F);
//   }

  //Test case number: 23
  /*
   * 5 covered goals:
   * 1 Strong Mutation 72: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(SII)I:85 - ReplaceVariable fromIndex -> toIndex
   * 2 Strong Mutation 68: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(SII)I:85 - DeleteField: listLgnu/trove/list/TShortList;
   * 3 Strong Mutation 68: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(SII)I:85 - DeleteField: listLgnu/trove/list/TShortList;
   * 4 Strong Mutation 72: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(SII)I:85 - ReplaceVariable fromIndex -> toIndex
   * 5 Strong Mutation 75: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(SII)I:85 - InsertUnaryOp IINC -1 fromIndex
   */

  @Test
  public void test23()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortLinkedList0);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-32768);
      tUnmodifiableShortList0.binarySearch((short)0, (short)0, (short) (-32768));
      shortArray0[0] = (short)0;
  }

  //Test case number: 24
  /*
   * 2 covered goals:
   * 1 Strong Mutation 75: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(SII)I:85 - InsertUnaryOp IINC -1 fromIndex
   * 2 Strong Mutation 74: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.binarySearch(SII)I:85 - InsertUnaryOp IINC 1 fromIndex
   */

  @Test
  public void test24()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortArrayList0);
      int int0 = tUnmodifiableRandomAccessShortList0.binarySearch((short)31, (int) (short)31, (-1381));
      assertEquals((-32), int0);
  }

  //Test case number: 25
  /*
   * 5 covered goals:
   * 1 Strong Mutation 81: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.indexOf(IS)I:88 - DeleteField: listLgnu/trove/list/TShortList;
   * 2 Strong Mutation 84: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.indexOf(IS)I:88 - InsertUnaryOp IINC -1 offset
   * 3 Strong Mutation 84: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.indexOf(IS)I:88 - InsertUnaryOp IINC -1 offset
   * 4 Strong Mutation 81: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.indexOf(IS)I:88 - DeleteField: listLgnu/trove/list/TShortList;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableShortList.indexOf(IS)I: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[3] = (short)0;
      TShortArrayList tShortArrayList0 = new TShortArrayList(0);
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortArrayList0);
      tUnmodifiableShortList0.indexOf((int) (short)0, (short)0);
      shortArray0[3] = (short) (-1478);
  }

  //Test case number: 26
  /*
   * 6 covered goals:
   * 1 Strong Mutation 83: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.indexOf(IS)I:88 - InsertUnaryOp IINC 1 offset
   * 2 Strong Mutation 87: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.indexOf(IS)I:88 - InsertUnaryOp IINC -1 value
   * 3 Strong Mutation 86: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.indexOf(IS)I:88 - InsertUnaryOp IINC 1 value
   * 4 Strong Mutation 87: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.indexOf(IS)I:88 - InsertUnaryOp IINC -1 value
   * 5 Strong Mutation 86: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.indexOf(IS)I:88 - InsertUnaryOp IINC 1 value
   * 6 Strong Mutation 83: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.indexOf(IS)I:88 - InsertUnaryOp IINC 1 offset
   */

  @Test
  public void test26()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(0);
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortArrayList0);
      tShortArrayList0.add((short)0);
      int int0 = tUnmodifiableShortList0.indexOf((int) (short)0, (short)0);
      assertEquals(0, int0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 Strong Mutation 88: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.indexOf(IS)I:88 - DeleteStatement: indexOf(IS)I
   */

  @Test
  public void test27()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(1265);
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortArrayList0);
      int int0 = tUnmodifiableShortList0.indexOf(1265, (short)1620);
      assertEquals((-1), int0);
  }

  //Test case number: 28
  /*
   * 14 covered goals:
   * 1 Strong Mutation 91: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(IS)I:89 - InsertUnaryOp IINC 1 offset
   * 2 Strong Mutation 93: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(IS)I:89 - InsertUnaryOp Negation of value
   * 3 Strong Mutation 92: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(IS)I:89 - InsertUnaryOp IINC -1 offset
   * 4 Strong Mutation 95: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(IS)I:89 - InsertUnaryOp IINC -1 value
   * 5 Strong Mutation 94: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(IS)I:89 - InsertUnaryOp IINC 1 value
   * 6 Strong Mutation 89: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(IS)I:89 - DeleteField: listLgnu/trove/list/TShortList;
   * 7 Strong Mutation 93: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(IS)I:89 - InsertUnaryOp Negation of value
   * 8 Strong Mutation 92: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(IS)I:89 - InsertUnaryOp IINC -1 offset
   * 9 Strong Mutation 95: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(IS)I:89 - InsertUnaryOp IINC -1 value
   * 10 Strong Mutation 94: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(IS)I:89 - InsertUnaryOp IINC 1 value
   * 11 Strong Mutation 89: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(IS)I:89 - DeleteField: listLgnu/trove/list/TShortList;
   * 12 Strong Mutation 91: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(IS)I:89 - InsertUnaryOp IINC 1 offset
   * 13 Strong Mutation 96: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(IS)I:89 - DeleteStatement: lastIndexOf(IS)I
   * 14 gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(IS)I: root-Branch
   */

//   @Test
//   public void test28()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList(0);
//       TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortArrayList0);
//       Random random0 = new Random();
//       assertEquals(256171846, random0.nextInt());
//       
//       int int0 = tUnmodifiableShortList0.lastIndexOf(0, (short)1729);
//       assertEquals((-1), int0);
//   }

  //Test case number: 29
  /*
   * 1 covered goal:
   * 1 Strong Mutation 96: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.lastIndexOf(IS)I:89 - DeleteStatement: lastIndexOf(IS)I
   */

  @Test
  public void test29()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortArrayList0);
      int int0 = tUnmodifiableRandomAccessShortList0.lastIndexOf((int) (short) (-2015), (short) (-2015));
      assertEquals((-1), int0);
  }

  //Test case number: 30
  /*
   * 5 covered goals:
   * 1 Strong Mutation 97: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.grep(Lgnu/trove/procedure/TShortProcedure;)Lgnu/trove/list/TShortList;:90 - DeleteField: listLgnu/trove/list/TShortList;
   * 2 Strong Mutation 98: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.grep(Lgnu/trove/procedure/TShortProcedure;)Lgnu/trove/list/TShortList;:90 - DeleteStatement: grep(Lgnu/trove/procedure/TShortProcedure;)Lgnu/trove/list/TShortList;
   * 3 Strong Mutation 98: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.grep(Lgnu/trove/procedure/TShortProcedure;)Lgnu/trove/list/TShortList;:90 - DeleteStatement: grep(Lgnu/trove/procedure/TShortProcedure;)Lgnu/trove/list/TShortList;
   * 4 Strong Mutation 97: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.grep(Lgnu/trove/procedure/TShortProcedure;)Lgnu/trove/list/TShortList;:90 - DeleteField: listLgnu/trove/list/TShortList;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableShortList.grep(Lgnu/trove/procedure/TShortProcedure;)Lgnu/trove/list/TShortList;: root-Branch
   */

//   @Test
//   public void test30()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList();
//       TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortArrayList0);
//       TShortArrayList tShortArrayList1 = (TShortArrayList)tUnmodifiableRandomAccessShortList0.grep((TShortProcedure) null);
//       assertEquals(0, tShortArrayList1.getNoEntryValue());
//   }

  //Test case number: 31
  /*
   * 5 covered goals:
   * 1 Strong Mutation 99: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.inverseGrep(Lgnu/trove/procedure/TShortProcedure;)Lgnu/trove/list/TShortList;:91 - DeleteField: listLgnu/trove/list/TShortList;
   * 2 Strong Mutation 100: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.inverseGrep(Lgnu/trove/procedure/TShortProcedure;)Lgnu/trove/list/TShortList;:91 - DeleteStatement: inverseGrep(Lgnu/trove/procedure/TShortProcedure;)Lgnu/trove/list/TShortList;
   * 3 Strong Mutation 100: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.inverseGrep(Lgnu/trove/procedure/TShortProcedure;)Lgnu/trove/list/TShortList;:91 - DeleteStatement: inverseGrep(Lgnu/trove/procedure/TShortProcedure;)Lgnu/trove/list/TShortList;
   * 4 Strong Mutation 99: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.inverseGrep(Lgnu/trove/procedure/TShortProcedure;)Lgnu/trove/list/TShortList;:91 - DeleteField: listLgnu/trove/list/TShortList;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableShortList.inverseGrep(Lgnu/trove/procedure/TShortProcedure;)Lgnu/trove/list/TShortList;: root-Branch
   */

  @Test
  public void test31()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortArrayList0);
      TShortArrayList tShortArrayList1 = (TShortArrayList)tUnmodifiableShortList0.inverseGrep((TShortProcedure) null);
      assertEquals(true, tShortArrayList1.isEmpty());
  }

  //Test case number: 32
  /*
   * 2 covered goals:
   * 1 Strong Mutation 102: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.max()S:93 - DeleteStatement: max()S
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortList.max()S: root-Branch
   */

  @Test
  public void test32()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)91;
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortArrayList0);
      short short0 = tUnmodifiableShortList0.max();
      assertEquals((short)91, short0);
  }

  //Test case number: 33
  /*
   * 3 covered goals:
   * 1 Strong Mutation 103: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.min()S:94 - DeleteField: listLgnu/trove/list/TShortList;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortList.min()S: root-Branch
   * 3 Strong Mutation 103: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.min()S:94 - DeleteField: listLgnu/trove/list/TShortList;
   */

  @Test
  public void test33()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)2040;
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortArrayList0);
      tUnmodifiableShortList0.min();
      shortArray0[1] = (short)1551;
  }

  //Test case number: 34
  /*
   * 1 covered goal:
   * 1 Strong Mutation 104: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.min()S:94 - DeleteStatement: min()S
   */

  @Test
  public void test34()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList((short)0);
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortLinkedList0);
      short[] shortArray0 = new short[10];
      shortArray0[2] = (short) (-734);
      tShortLinkedList0.add(shortArray0);
      short short0 = tUnmodifiableShortList0.min();
      assertEquals((short) (-734), short0);
  }

  //Test case number: 35
  /*
   * 5 covered goals:
   * 1 Strong Mutation 105: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.sum()S:95 - DeleteField: listLgnu/trove/list/TShortList;
   * 2 Strong Mutation 106: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.sum()S:95 - DeleteStatement: sum()S
   * 3 Strong Mutation 106: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.sum()S:95 - DeleteStatement: sum()S
   * 4 Strong Mutation 105: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.sum()S:95 - DeleteField: listLgnu/trove/list/TShortList;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableShortList.sum()S: root-Branch
   */

  @Test
  public void test35()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(0);
      Random random0 = new Random();
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortArrayList0);
      short short0 = tUnmodifiableRandomAccessShortList0.sum();
      assertEquals((short)0, short0);
  }

  //Test case number: 36
  /*
   * 2 covered goals:
   * 1 Strong Mutation 108: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.subList(II)Lgnu/trove/list/TShortList;:98 - ReplaceVariable fromIndex -> toIndex
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableShortList.subList(II)Lgnu/trove/list/TShortList;: root-Branch
   */

  @Test
  public void test36()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableShortList0.subList((int) (short)320, (int) (short)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // end index 0 greater than begin index 320
         //
      }
  }

  //Test case number: 37
  /*
   * 15 covered goals:
   * 1 Strong Mutation 113: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.subList(II)Lgnu/trove/list/TShortList;:98 - InsertUnaryOp Negation of toIndex
   * 2 Strong Mutation 110: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.subList(II)Lgnu/trove/list/TShortList;:98 - InsertUnaryOp IINC 1 fromIndex
   * 3 Strong Mutation 111: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.subList(II)Lgnu/trove/list/TShortList;:98 - InsertUnaryOp IINC -1 fromIndex
   * 4 Strong Mutation 109: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.subList(II)Lgnu/trove/list/TShortList;:98 - InsertUnaryOp Negation of fromIndex
   * 5 Strong Mutation 107: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.subList(II)Lgnu/trove/list/TShortList;:98 - DeleteField: listLgnu/trove/list/TShortList;
   * 6 Strong Mutation 116: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.subList(II)Lgnu/trove/list/TShortList;:98 - DeleteStatement: subList(II)Lgnu/trove/list/TShortList;
   * 7 Strong Mutation 115: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.subList(II)Lgnu/trove/list/TShortList;:98 - InsertUnaryOp IINC -1 toIndex
   * 8 Strong Mutation 114: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.subList(II)Lgnu/trove/list/TShortList;:98 - InsertUnaryOp IINC 1 toIndex
   * 9 Strong Mutation 110: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.subList(II)Lgnu/trove/list/TShortList;:98 - InsertUnaryOp IINC 1 fromIndex
   * 10 Strong Mutation 111: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.subList(II)Lgnu/trove/list/TShortList;:98 - InsertUnaryOp IINC -1 fromIndex
   * 11 Strong Mutation 109: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.subList(II)Lgnu/trove/list/TShortList;:98 - InsertUnaryOp Negation of fromIndex
   * 12 Strong Mutation 107: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.subList(II)Lgnu/trove/list/TShortList;:98 - DeleteField: listLgnu/trove/list/TShortList;
   * 13 Strong Mutation 116: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.subList(II)Lgnu/trove/list/TShortList;:98 - DeleteStatement: subList(II)Lgnu/trove/list/TShortList;
   * 14 Strong Mutation 115: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.subList(II)Lgnu/trove/list/TShortList;:98 - InsertUnaryOp IINC -1 toIndex
   * 15 Strong Mutation 113: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.subList(II)Lgnu/trove/list/TShortList;:98 - InsertUnaryOp Negation of toIndex
   */

  @Test
  public void test37()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortArrayList0);
      TUnmodifiableShortList tUnmodifiableShortList1 = (TUnmodifiableShortList)tUnmodifiableShortList0.subList(1, 1);
      assertNotNull(tUnmodifiableShortList1);
      assertEquals("{}", tUnmodifiableShortList1.toString());
  }

  //Test case number: 38
  /*
   * 1 covered goal:
   * 1 Strong Mutation 112: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.subList(II)Lgnu/trove/list/TShortList;:98 - ReplaceVariable toIndex -> fromIndex
   */

  @Test
  public void test38()  throws Throwable  {
      short[] shortArray0 = new short[10];
      TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableShortList0.subList((int) (short)0, (-412));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // end index -412 greater than begin index 0
         //
      }
  }

  //Test case number: 39
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableShortList.shuffle(Ljava/util/Random;)V: root-Branch
   * 2 Strong Mutation 0: gnu.trove.impl.unmodifiable.TUnmodifiableShortList.<init>(Lgnu/trove/list/TShortList;)V:59 - ReplaceVariable list -> list
   */

  @Test
  public void test39()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(0);
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortArrayList0);
      Random random0 = new Random();
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessShortList0.shuffle(random0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
