/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.hash.TCharLongHashMap;
import gnu.trove.procedure.TCharProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharLongHashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.hash.TCharLongHash.getNoEntryValue()J: root-Branch
   * 2 gnu.trove.impl.hash.TCharLongHash.setUp(I)I: root-Branch
   * 3 gnu.trove.impl.hash.TCharLongHash.<init>(I)V: root-Branch
   * 4 gnu.trove.impl.hash.TCharLongHash.insertKeyAt(IC)V: root-Branch
   * 5 gnu.trove.impl.hash.TCharLongHash.insertKey(C)I: I30 Branch 13 IFNE L279 - true
   * 6 gnu.trove.impl.hash.TCharLongHash.insertKey(C)I: I30 Branch 13 IFNE L279 - false
   * 7 gnu.trove.impl.hash.TCharLongHash.insertKey(C)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 8 gnu.trove.impl.hash.TCharLongHash.insertKey(C)I: I56 Branch 15 IF_ICMPNE L286 - false
   */

  @Test
  public void test0()  throws Throwable  {
      char[] charArray0 = new char[7];
      long[] longArray0 = new long[7];
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap(charArray0, longArray0);
      long long0 = tCharLongHashMap0.getNoEntryValue();
      assertEquals(17, tCharLongHashMap0.capacity());
      assertEquals(0L, long0);
      assertEquals(1, tCharLongHashMap0.size());
      assertEquals('\u0000', tCharLongHashMap0.getNoEntryKey());
      assertEquals("{\u0000=0}", tCharLongHashMap0.toString());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TCharLongHash.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   * 2 gnu.trove.impl.hash.TCharLongHash.<init>()V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tCharLongHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(0L, tCharLongHashMap0.getNoEntryValue());
      assertEquals(23, tCharLongHashMap0.capacity());
      assertEquals('\u0000', tCharLongHashMap0.getNoEntryKey());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TCharLongHash.<init>(IFCJ)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap((int) '\u0000', (float) '\u0000', '\u0000', (long) ')');
      assertEquals(41L, tCharLongHashMap0.getNoEntryValue());
      assertEquals('\u0000', tCharLongHashMap0.getNoEntryKey());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TCharLongHash.getNoEntryKey()C: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap();
      char char0 = tCharLongHashMap0.getNoEntryKey();
      assertEquals(0L, tCharLongHashMap0.getNoEntryValue());
      assertEquals(23, tCharLongHashMap0.capacity());
      assertEquals('\u0000', char0);
  }

  //Test case number: 4
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TCharLongHash.contains(C)Z: I5 Branch 1 IFLT L178 - true
   * 2 gnu.trove.impl.hash.TCharLongHash.index(C)I: I37 Branch 5 IFNE L228 - false
   * 3 gnu.trove.impl.hash.TCharLongHash.<init>(IF)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap((int) 'E', (float) (-1350));
      boolean boolean0 = tCharLongHashMap0.contains('x');
      assertEquals(0L, tCharLongHashMap0.getNoEntryValue());
      assertEquals(false, boolean0);
      assertEquals('\u0000', tCharLongHashMap0.getNoEntryKey());
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TCharLongHash.forEach(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 2 IFLE L192 - true
   * 2 gnu.trove.impl.hash.TCharLongHash.forEach(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TCharLongHash.forEach(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

  @Test
  public void test5()  throws Throwable  {
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap();
      boolean boolean0 = tCharLongHashMap0.forEach((TCharProcedure) null);
      assertEquals('\u0000', tCharLongHashMap0.getNoEntryKey());
      assertEquals(true, boolean0);
      assertEquals(23, tCharLongHashMap0.capacity());
      assertEquals(0L, tCharLongHashMap0.getNoEntryValue());
  }

  //Test case number: 6
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TCharLongHash.forEach(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - false
   * 2 gnu.trove.impl.hash.TCharLongHash.forEach(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TCharLongHash.forEach(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

  @Test
  public void test6()  throws Throwable  {
      char[] charArray0 = new char[3];
      long[] longArray0 = new long[8];
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap(charArray0, longArray0);
      // Undeclared exception!
      try {
        tCharLongHashMap0.forEachKey((TCharProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 7
  /*
   * 10 covered goals:
   * 1 gnu.trove.impl.hash.TCharLongHash.index(C)I: I51 Branch 7 IF_ICMPNE L231 - true
   * 2 gnu.trove.impl.hash.TCharLongHash.indexRehashed(CIIB)I: I29 Branch 8 IFGE L245 - true
   * 3 gnu.trove.impl.hash.TCharLongHash.indexRehashed(CIIB)I: I46 Branch 9 IFNE L250 - true
   * 4 gnu.trove.impl.hash.TCharLongHash.indexRehashed(CIIB)I: I46 Branch 9 IFNE L250 - false
   * 5 gnu.trove.impl.hash.TCharLongHash.indexRehashed(CIIB)I: I58 Branch 10 IF_ICMPNE L254 - true
   * 6 gnu.trove.impl.hash.TCharLongHash.indexRehashed(CIIB)I: I70 Branch 12 IF_ICMPNE L256 - true
   * 7 gnu.trove.impl.hash.TCharLongHash.contains(C)Z: I5 Branch 1 IFLT L178 - true
   * 8 gnu.trove.impl.hash.TCharLongHash.index(C)I: I37 Branch 5 IFNE L228 - true
   * 9 gnu.trove.impl.hash.TCharLongHash.index(C)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 10 gnu.trove.impl.hash.TCharLongHash.indexRehashed(CIIB)I: I29 Branch 8 IFGE L245 - false
   */

  @Test
  public void test7()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[2] = 'E';
      long[] longArray0 = new long[7];
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap(charArray0, longArray0);
      boolean boolean0 = tCharLongHashMap0.contains('x');
      assertEquals(false, boolean0);
      assertEquals("{E=0, \u0000=0}", tCharLongHashMap0.toString());
      assertEquals(2, tCharLongHashMap0.size());
  }

  //Test case number: 8
  /*
   * 14 covered goals:
   * 1 gnu.trove.impl.hash.TCharLongHash.indexRehashed(CIIB)I: I58 Branch 10 IF_ICMPNE L254 - false
   * 2 gnu.trove.impl.hash.TCharLongHash.indexRehashed(CIIB)I: I61 Branch 11 IF_ICMPEQ L254 - false
   * 3 gnu.trove.impl.hash.TCharLongHash.insertKey(C)I: I56 Branch 15 IF_ICMPNE L286 - true
   * 4 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 5 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I45 Branch 18 IFGE L310 - true
   * 6 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I45 Branch 18 IFGE L310 - false
   * 7 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I62 Branch 19 IFNE L316 - true
   * 8 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I62 Branch 19 IFNE L316 - false
   * 9 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 10 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 11 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I103 Branch 22 IF_ICMPNE L327 - true
   * 12 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I115 Branch 23 IF_ICMPNE L332 - true
   * 13 gnu.trove.impl.hash.TCharLongHash.contains(C)Z: I5 Branch 1 IFLT L178 - false
   * 14 gnu.trove.impl.hash.TCharLongHash.index(C)I: I51 Branch 7 IF_ICMPNE L231 - true
   */

  @Test
  public void test8()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[2] = 'E';
      charArray0[3] = 'x';
      long[] longArray0 = new long[7];
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap(charArray0, longArray0);
      boolean boolean0 = tCharLongHashMap0.contains('x');
      assertEquals(3, tCharLongHashMap0.size());
      assertEquals("{x=0, E=0, \u0000=0}", tCharLongHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 9
  /*
   * 5 covered goals:
   * 1 gnu.trove.impl.hash.TCharLongHash.indexRehashed(CIIB)I: I70 Branch 12 IF_ICMPNE L256 - false
   * 2 gnu.trove.impl.hash.TCharLongHash.indexRehashed(CIIB)I: I29 Branch 8 IFGE L245 - true
   * 3 gnu.trove.impl.hash.TCharLongHash.indexRehashed(CIIB)I: I58 Branch 10 IF_ICMPNE L254 - true
   * 4 gnu.trove.impl.hash.TCharLongHash.indexRehashed(CIIB)I: I70 Branch 12 IF_ICMPNE L256 - true
   * 5 gnu.trove.impl.hash.TCharLongHash.index(C)I: I46 Branch 6 IF_ICMPNE L231 - true
   */

  @Test
  public void test9()  throws Throwable  {
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap();
      tCharLongHashMap0.trimToSize();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)66;
      tCharLongHashMap0._states = byteArray0;
      long long0 = tCharLongHashMap0.remove('Z');
      assertEquals(5, tCharLongHashMap0.capacity());
      assertEquals(0L, long0);
  }

  //Test case number: 10
  /*
   * 15 covered goals:
   * 1 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I31 Branch 17 IF_ICMPNE L306 - true
   * 2 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 3 gnu.trove.impl.hash.TCharLongHash.removeAt(I)V: root-Branch
   * 4 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 5 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 6 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I67 Branch 20 IF_ICMPEQ L317 - false
   * 7 gnu.trove.impl.hash.TCharLongHash.index(C)I: I37 Branch 5 IFNE L228 - true
   * 8 gnu.trove.impl.hash.TCharLongHash.index(C)I: I46 Branch 6 IF_ICMPNE L231 - true
   * 9 gnu.trove.impl.hash.TCharLongHash.index(C)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 10 gnu.trove.impl.hash.TCharLongHash.index(C)I: I51 Branch 7 IF_ICMPNE L231 - false
   * 11 gnu.trove.impl.hash.TCharLongHash.indexRehashed(CIIB)I: I29 Branch 8 IFGE L245 - false
   * 12 gnu.trove.impl.hash.TCharLongHash.indexRehashed(CIIB)I: I46 Branch 9 IFNE L250 - true
   * 13 gnu.trove.impl.hash.TCharLongHash.indexRehashed(CIIB)I: I58 Branch 10 IF_ICMPNE L254 - false
   * 14 gnu.trove.impl.hash.TCharLongHash.indexRehashed(CIIB)I: I61 Branch 11 IF_ICMPEQ L254 - false
   * 15 gnu.trove.impl.hash.TCharLongHash.insertKey(C)I: I50 Branch 14 IF_ICMPNE L286 - true
   */

  @Test
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '+';
      charArray0[2] = 'i';
      long[] longArray0 = new long[12];
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap(charArray0, longArray0);
      tCharLongHashMap0.remove('+');
      tCharLongHashMap0.remove('i');
      long long0 = tCharLongHashMap0.adjustOrPutValue('i', '+', '\u0000');
      assertEquals(2, tCharLongHashMap0.size());
      assertEquals(0L, long0);
  }

  //Test case number: 11
  /*
   * 11 covered goals:
   * 1 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I103 Branch 22 IF_ICMPNE L327 - false
   * 2 gnu.trove.impl.hash.TCharLongHash.<init>(I)V: root-Branch
   * 3 gnu.trove.impl.hash.TCharLongHash.insertKeyAt(IC)V: root-Branch
   * 4 gnu.trove.impl.hash.TCharLongHash.insertKey(C)I: I30 Branch 13 IFNE L279 - false
   * 5 gnu.trove.impl.hash.TCharLongHash.insertKey(C)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 6 gnu.trove.impl.hash.TCharLongHash.insertKey(C)I: I56 Branch 15 IF_ICMPNE L286 - true
   * 7 gnu.trove.impl.hash.TCharLongHash.insertKey(C)I: I56 Branch 15 IF_ICMPNE L286 - false
   * 8 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I62 Branch 19 IFNE L316 - false
   * 9 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 10 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 11 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I103 Branch 22 IF_ICMPNE L327 - true
   */

  @Test
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[2] = 'E';
      charArray0[3] = 'x';
      charArray0[6] = 'x';
      long[] longArray0 = new long[7];
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap(charArray0, longArray0);
      assertEquals(0L, tCharLongHashMap0.getNoEntryValue());
      assertEquals("{x=0, E=0, \u0000=0}", tCharLongHashMap0.toString());
      assertEquals(3, tCharLongHashMap0.size());
  }

  //Test case number: 12
  /*
   * 12 covered goals:
   * 1 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I115 Branch 23 IF_ICMPNE L332 - false
   * 2 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I120 Branch 24 IF_ICMPEQ L336 - true
   * 3 gnu.trove.impl.hash.TCharLongHash.setUp(I)I: root-Branch
   * 4 gnu.trove.impl.hash.TCharLongHash.<init>()V: root-Branch
   * 5 gnu.trove.impl.hash.TCharLongHash.insertKey(C)I: I30 Branch 13 IFNE L279 - true
   * 6 gnu.trove.impl.hash.TCharLongHash.insertKey(C)I: I50 Branch 14 IF_ICMPNE L286 - true
   * 7 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 8 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I45 Branch 18 IFGE L310 - true
   * 9 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I45 Branch 18 IFGE L310 - false
   * 10 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I62 Branch 19 IFNE L316 - true
   * 11 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 12 gnu.trove.impl.hash.TCharLongHash.insertKeyRehash(CIIB)I: I115 Branch 23 IF_ICMPNE L332 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TCharLongHashMap tCharLongHashMap0 = new TCharLongHashMap();
      assertEquals(23, tCharLongHashMap0.capacity());
      
      tCharLongHashMap0.trimToSize();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)66;
      tCharLongHashMap0._states = byteArray0;
      // Undeclared exception!
      try {
        tCharLongHashMap0.adjustOrPutValue('Z', (long) (-627), (long) (-627));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No free or removed slots available. Key set full?!!
         //
      }
  }
}
