/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TFloatFunction;
import gnu.trove.impl.sync.TSynchronizedIntFloatMap;
import gnu.trove.map.TIntFloatMap;
import gnu.trove.map.hash.TIntFloatHashMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedIntFloatMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TIntFloatMap tIntFloatMap0 = null;
      String string0 = "O,M1Z3V,";
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      String string1 = hashMap0.toString();
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap(tIntFloatMap0, (Object) string1);
      int[] intArray0 = new int[3];
      int int0 = (-1917);
      intArray0[0] = int0;
      int int1 = 402;
      intArray0[1] = int1;
      int int2 = 829;
      intArray0[2] = int2;
      // Undeclared exception!
      try {
        tSynchronizedIntFloatMap0.keys(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      tSynchronizedIntFloatMap0.putAll((TIntFloatMap) tIntFloatHashMap0);
      float[] floatArray0 = new float[7];
      float float0 = 1629.6844F;
      floatArray0[0] = float0;
      float float1 = (-1125.2241F);
      floatArray0[1] = float1;
      float float2 = 109.36265F;
      floatArray0[2] = float2;
      float float3 = 0.0F;
      floatArray0[3] = float3;
      float float4 = 1.0F;
      floatArray0[4] = float4;
      float float5 = (-1.0F);
      floatArray0[5] = float5;
      float float6 = (-152.45518F);
      floatArray0[6] = float6;
      float[] floatArray1 = tSynchronizedIntFloatMap0.values(floatArray0);
      assertSame(floatArray1, floatArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 0;
      TIntFloatMap tIntFloatMap0 = null;
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = null;
      try {
        tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap(tIntFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0);
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap((TIntFloatMap) tIntFloatHashMap0);
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap1);
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = null;
      String string0 = locale0.getDisplayVariant(locale1);
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap1 = new TSynchronizedIntFloatMap((TIntFloatMap) tSynchronizedIntFloatMap0, (Object) string0);
      tSynchronizedIntFloatMap1.valueCollection();
      TIntFloatMap tIntFloatMap0 = null;
      int int1 = 236;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int1;
      floatArray0[2] = (float) int1;
      floatArray0[3] = (float) int1;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) int0;
      tSynchronizedIntFloatMap1.values(floatArray0);
      Integer integer0 = new Integer(int1);
      Locale locale2 = Locale.ITALY;
      locale0.getDisplayLanguage(locale2);
      String string1 = integer0.toString();
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap2 = new TSynchronizedIntFloatMap(tIntFloatMap0, (Object) string1);
      Object object0 = null;
      // Undeclared exception!
      try {
        tSynchronizedIntFloatMap2.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = (-1597);
      intArray0[0] = int0;
      int int1 = 1595;
      intArray0[1] = int1;
      int int2 = 1;
      intArray0[2] = int2;
      int int3 = (-657);
      intArray0[3] = int3;
      int int4 = (-1578);
      intArray0[4] = int4;
      int int5 = (-1052);
      intArray0[5] = int5;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) intArray0[4];
      floatArray0[1] = (float) int2;
      floatArray0[2] = (float) int1;
      floatArray0[3] = (float) int4;
      floatArray0[4] = (float) intArray0[1];
      floatArray0[5] = (float) intArray0[3];
      float float0 = Float.POSITIVE_INFINITY;
      floatArray0[6] = float0;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      Object object0 = null;
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0, object0);
      Object object1 = tSynchronizedIntFloatMap0.mutex;
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap1 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0, object1);
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap2 = new TSynchronizedIntFloatMap((TIntFloatMap) tSynchronizedIntFloatMap1);
      // Undeclared exception!
      try {
        tSynchronizedIntFloatMap2.remove(intArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TIntFloatMap tIntFloatMap0 = null;
      int[] intArray0 = new int[10];
      int int0 = (-1663);
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = (-1);
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = 1193;
      intArray0[5] = int5;
      int int6 = 0;
      intArray0[6] = int6;
      int int7 = 197;
      intArray0[7] = int7;
      int int8 = (-1014);
      intArray0[8] = int8;
      int int9 = 22;
      intArray0[9] = int9;
      float[] floatArray0 = new float[2];
      float float0 = 1805.152F;
      floatArray0[0] = float0;
      floatArray0[1] = (float) intArray0[3];
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      tSynchronizedIntFloatMap0.clear();
      Locale locale0 = Locale.UK;
      String string0 = "Yxkb";
      // Undeclared exception!
      try {
        locale0.getUnicodeLocaleType(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: Yxkb
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 1;
      intArray0[0] = int0;
      int int1 = 1547;
      intArray0[1] = int1;
      int int2 = 1902;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = (-920);
      intArray0[4] = int4;
      int int5 = (-961);
      intArray0[5] = int5;
      int int6 = (-1);
      intArray0[6] = int6;
      int int7 = (-894);
      intArray0[7] = int7;
      float[] floatArray0 = new float[5];
      float float0 = 463.92944F;
      floatArray0[0] = float0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int3;
      floatArray0[3] = (float) int2;
      floatArray0[4] = (float) int5;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      assertEquals(5, tSynchronizedIntFloatMap0.size());
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0, int0);
      TIntFloatHashMap tIntFloatHashMap1 = null;
      try {
        tIntFloatHashMap1 = new TIntFloatHashMap((TIntFloatMap) tIntFloatHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-1172);
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0, int0);
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      String string0 = "";
      URI uRI0 = URI.create(string0);
      File file0 = null;
      try {
        file0 = new File(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TIntFloatMap tIntFloatMap0 = null;
      Locale locale0 = Locale.JAPAN;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale1 = Locale.getDefault(locale_Category0);
      locale0.toString();
      String string0 = locale1.getISO3Country();
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap(tIntFloatMap0, (Object) string0);
      int[] intArray0 = new int[10];
      int int0 = 1133;
      intArray0[0] = int0;
      int int1 = (-522);
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      int int6 = 847;
      intArray0[6] = int6;
      int int7 = 1439;
      intArray0[7] = int7;
      int int8 = 4283963;
      intArray0[8] = int8;
      int int9 = (-615);
      intArray0[9] = int9;
      // Undeclared exception!
      try {
        tSynchronizedIntFloatMap0.keys(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TIntFloatMap tIntFloatMap0 = null;
      String string0 = "";
      URI uRI0 = URI.create(string0);
      URI uRI1 = uRI0.normalize();
      String string1 = uRI1.getRawSchemeSpecificPart();
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap(tIntFloatMap0, (Object) string1);
      uRI0.isAbsolute();
      int int0 = 608;
      // Undeclared exception!
      try {
        tSynchronizedIntFloatMap0.get(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-82);
      float float0 = (-1942.7705F);
      int int1 = 1;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0, float0, int1, (float) int0);
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :#
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TIntFloatMap tIntFloatMap0 = null;
      String string0 = "{";
      int int0 = 0;
      String string1 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int0, string1, string0, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: {://%7B@{:0?%7B#
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 122;
      intArray0[0] = int0;
      int int1 = (-344);
      intArray0[1] = int1;
      int int2 = (-1);
      intArray0[2] = int2;
      int int3 = (-1);
      intArray0[3] = int3;
      int int4 = 1360;
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      float[] floatArray0 = new float[2];
      float float0 = (-172.945F);
      floatArray0[0] = float0;
      floatArray0[1] = (float) intArray0[4];
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://#
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 0;
          TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0);
          String string0 = File.pathSeparator;
          File file0 = new File(string0);
          tIntFloatHashMap0.increment(int0);
          File file1 = file0.getAbsoluteFile();
          file1.getPath();
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(file1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/mnt/fastdata/ac1gf/Experiments_Major/apps/trove-3.0.2/:\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:165)
             // java.io.PrintStream.<init>(PrintStream.java:279)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-1127);
      float float0 = (-1.0F);
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0, float0, int0, float0);
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      String string0 = tSynchronizedIntFloatMap0.toString();
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap1 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0, (Object) string0);
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      float float1 = (-1.0F);
      floatArray0[7] = float1;
      floatArray0[8] = float0;
      floatArray0[9] = (float) int0;
      float[] floatArray1 = tSynchronizedIntFloatMap1.values(floatArray0);
      assertSame(floatArray1, floatArray0);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 433;
      int[] intArray0 = new int[3];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) intArray0[1];
      floatArray0[1] = (float) intArray0[1];
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) intArray0[2];
      float float0 = 0.0F;
      floatArray0[4] = float0;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0);
      TFloatFunction tFloatFunction0 = null;
      // Undeclared exception!
      try {
        tSynchronizedIntFloatMap0.transformValues(tFloatFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-1176);
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0);
      Locale locale0 = Locale.KOREA;
      String string0 = locale0.getCountry();
      TSynchronizedIntFloatMap tSynchronizedIntFloatMap0 = new TSynchronizedIntFloatMap((TIntFloatMap) tIntFloatHashMap0, (Object) string0);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: KR://KRKR?KR#KR
         //
      }
  }
}
