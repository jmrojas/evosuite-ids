/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TIntIntMapDecorator;
import gnu.trove.map.TIntIntMap;
import gnu.trove.map.hash.TIntIntHashMap;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntIntMapDecoratorEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 91;
      intArray0[0] = int0;
      int int1 = 1;
      intArray0[1] = int1;
      int int2 = 437;
      intArray0[2] = int2;
      int int3 = (-1310);
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      TIntIntMapDecorator tIntIntMapDecorator0 = new TIntIntMapDecorator((TIntIntMap) tIntIntHashMap0);
      TIntIntHashMap tIntIntHashMap1 = (TIntIntHashMap)tIntIntMapDecorator0.getMap();
      TIntIntMapDecorator tIntIntMapDecorator1 = new TIntIntMapDecorator((TIntIntMap) tIntIntHashMap1);
      TIntIntMapDecorator tIntIntMapDecorator2 = new TIntIntMapDecorator();
      Object object0 = new Object();
      tIntIntMapDecorator0.put((Integer) int1, (Integer) intArray0[3]);
      tIntIntHashMap0.getAutoCompactionFactor();
      String string0 = "1$ 6+)/a<{I";
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(object0, (Object) string0);
      AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry0, string0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tIntIntHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      abstractMap_SimpleEntry1.getKey();
      tIntIntMapDecorator0.keySet();
      assertEquals("{437=437, -1310=-1310, 91=91, 1=-1310, 0=0}", tIntIntHashMap0.toString());
      assertEquals("{437=437, -1310=-1310, 91=91, 1=-1310, null=null}", tIntIntMapDecorator0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      TIntIntMapDecorator tIntIntMapDecorator0 = new TIntIntMapDecorator();
      int int0 = 1;
      Integer integer0 = new Integer(int0);
      // Undeclared exception!
      try {
        tIntIntMapDecorator0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = "index ";
      Locale locale0 = new Locale(string0, string0);
      char char0 = 'm';
      String string1 = locale0.getExtension(char0);
      int int0 = 1;
      int int1 = (-1);
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, (float) char0, (int) char0, int1);
      String string2 = "Could not find insertion index for null key. Key set full!?!!";
      AbstractMap.SimpleImmutableEntry<TIntIntHashMap, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<TIntIntHashMap, String>(tIntIntHashMap0, string2);
      AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<TIntIntHashMap, String>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<TIntIntHashMap, String>>((Object) string1, abstractMap_SimpleImmutableEntry0);
      Object object0 = abstractMap_SimpleEntry0.getKey();
      assertNull(object0);
  }

  @Test
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 797;
      intArray0[0] = int0;
      intArray0[1] = int0;
      int int1 = (-1752);
      int int2 = 1967;
      int int3 = 1554;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int1, int1, int2, int3);
      TIntIntMapDecorator tIntIntMapDecorator0 = new TIntIntMapDecorator((TIntIntMap) tIntIntHashMap0);
      tIntIntMapDecorator0.values();
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      int int4 = 6250537;
      TIntIntMapDecorator tIntIntMapDecorator1 = new TIntIntMapDecorator();
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 235;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = (-901);
      intArray0[2] = int2;
      int int3 = 1607;
      intArray0[3] = int3;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      TIntIntMapDecorator tIntIntMapDecorator0 = new TIntIntMapDecorator((TIntIntMap) tIntIntHashMap0);
      tIntIntMapDecorator0.getMap();
      int int4 = 53;
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(int4, int4);
      TIntIntHashMap tIntIntHashMap2 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap1);
      TIntIntMapDecorator tIntIntMapDecorator1 = new TIntIntMapDecorator((TIntIntMap) tIntIntHashMap2);
      String string0 = "p=U6[Q~Y.[Y$7;";
      try {
        Integer.valueOf(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"p=U6[Q~Y.[Y$7;\"
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TIntIntMapDecorator tIntIntMapDecorator0 = new TIntIntMapDecorator();
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-16);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-77);
      byteArray0[1] = byte1;
      byte byte2 = (byte)89;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-101);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-49);
      byteArray0[4] = byte4;
      byte byte5 = (byte)1;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-44);
      byteArray0[6] = byte6;
      int int0 = 0;
      int int1 = (-250);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, int0, int1);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 119;
      String string0 = "rHE";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: rHE://rHE@rHE:119rHE?rHE#rHE
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.FRENCH;
      Locale locale1 = Locale.CHINA;
      String string0 = locale0.getDisplayScript(locale1);
      File file0 = new File(string0);
      String string1 = file0.getAbsolutePath();
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>((Integer) int0, (Object) string1);
      AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleEntry<Integer, Object>> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleEntry<Integer, Object>>((Object) string0, abstractMap_SimpleEntry0);
      // Undeclared exception!
      try {
        abstractMap_SimpleImmutableEntry0.setValue(abstractMap_SimpleEntry0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TIntIntMapDecorator tIntIntMapDecorator0 = new TIntIntMapDecorator();
      String string0 = "";
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-1);
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(int0, int0);
      TIntIntMapDecorator tIntIntMapDecorator0 = new TIntIntMapDecorator((TIntIntMap) tIntIntHashMap0);
      TIntIntHashMap tIntIntHashMap1 = (TIntIntHashMap)tIntIntMapDecorator0.getMap();
      TIntIntHashMap tIntIntHashMap2 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap1);
      TIntIntMapDecorator tIntIntMapDecorator1 = new TIntIntMapDecorator((TIntIntMap) tIntIntHashMap2);
      tIntIntMapDecorator1.entrySet();
      TIntIntMapDecorator tIntIntMapDecorator2 = new TIntIntMapDecorator();
      // Undeclared exception!
      try {
        tIntIntMapDecorator2.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
