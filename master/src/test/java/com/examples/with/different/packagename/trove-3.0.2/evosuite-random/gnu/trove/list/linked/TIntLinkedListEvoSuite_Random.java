/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.list.linked;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TIntCollection;
import gnu.trove.impl.sync.TSynchronizedIntCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableIntSet;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessIntList;
import gnu.trove.list.TIntList;
import gnu.trove.list.array.TIntArrayList;
import gnu.trove.list.linked.TIntLinkedList;
import gnu.trove.set.TIntSet;
import gnu.trove.set.hash.TIntHashSet;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntLinkedListEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-836);
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList(int0);
      int int1 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = int1;
      boolean boolean0 = tIntLinkedList0.retainAll(intArray0);
      assertEquals(false, boolean0);
      
      // Undeclared exception!
      try {
        tIntLinkedList0.indexOf(int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList();
      int int0 = 0;
      int int1 = tIntLinkedList0.get(int0);
      int[] intArray0 = new int[10];
      intArray0[0] = int0;
      intArray0[0] = int0;
      intArray0[1] = int1;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int1;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = int0;
      intArray0[0] = int1;
      int int2 = 0;
      intArray0[1] = int2;
      intArray0[2] = int1;
      intArray0[3] = int2;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = int2;
      intArray0[8] = int0;
      intArray0[9] = int1;
      intArray0[8] = int1;
      intArray0[9] = int1;
      assertEquals(0, intArray0[9]);
      
      int int3 = Integer.MAX_VALUE;
      intArray0[1] = int3;
      intArray0[2] = int0;
      int int4 = 959;
      // Undeclared exception!
      try {
        tIntLinkedList0.removeAt(int4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no elemenet at 959
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 0;
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList(int0);
      int int1 = tIntLinkedList0.size();
      assertEquals(0, tIntLinkedList0.getNoEntryValue());
      assertEquals(0, int1);
  }

  @Test
  public void test3()  throws Throwable  {
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList();
      int int0 = 0;
      int[] intArray0 = new int[6];
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      intArray0[2] = int0;
      int int2 = 0;
      intArray0[3] = int2;
      intArray0[4] = int0;
      intArray0[5] = int0;
      int int3 = (-439);
      intArray0[0] = int1;
      int int4 = (-656);
      intArray0[1] = int4;
      intArray0[2] = int2;
      intArray0[3] = int3;
      intArray0[4] = int1;
      intArray0[5] = int1;
      // Undeclared exception!
      try {
        tIntLinkedList0.insert(int0, intArray0, intArray0[0], int3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList(int0);
      int int1 = 10;
      // Undeclared exception!
      try {
        tIntLinkedList0.sort(int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // begin index 10 greater than last index 0
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = Integer.MIN_VALUE;
      intArray0[0] = int0;
      int int1 = 10;
      int int2 = 0;
      TIntLinkedList tIntLinkedList0 = TIntLinkedList.link(intArray0, int2, int0);
      assertNotNull(tIntLinkedList0);
      
      int int3 = 1313;
      TSynchronizedIntCollection tSynchronizedIntCollection0 = new TSynchronizedIntCollection((TIntCollection) tIntLinkedList0);
      TIntHashSet tIntHashSet0 = new TIntHashSet((TIntCollection) tSynchronizedIntCollection0);
      TUnmodifiableIntSet tUnmodifiableIntSet0 = new TUnmodifiableIntSet((TIntSet) tIntHashSet0);
      String string0 = tUnmodifiableIntSet0.toString();
      boolean boolean0 = TIntLinkedList.no(string0);
      assertEquals(false, boolean0);
      
      int int4 = 0;
      // Undeclared exception!
      try {
        tIntLinkedList0.indexOf(int3, int4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList();
      int int0 = 1663;
      int[] intArray0 = new int[10];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = int0;
      intArray0[8] = int0;
      intArray0[9] = int0;
      intArray0[0] = int0;
      intArray0[0] = int0;
      intArray0[1] = int0;
      int int1 = 0;
      intArray0[2] = int1;
      intArray0[3] = int0;
      intArray0[4] = int1;
      intArray0[5] = int1;
      int int2 = 0;
      tIntLinkedList0.add(int2);
      intArray0[6] = int0;
      intArray0[7] = int0;
      intArray0[8] = int1;
      intArray0[9] = int1;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      int int3 = tIntLinkedList0.size;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = int0;
      intArray0[8] = int0;
      intArray0[9] = int0;
      tIntLinkedList0.insert(int0, intArray0);
      assertEquals("{0, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663}", tIntLinkedList0.toString());
      assertEquals(11, tIntLinkedList0.size());
  }

  @Test
  public void test7()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 31;
      intArray0[1] = int1;
      int int2 = 1253;
      intArray0[2] = int2;
      int int3 = 828;
      intArray0[3] = int3;
      int int4 = 1561;
      intArray0[4] = int4;
      int int5 = 1690;
      intArray0[5] = int5;
      int int6 = 1571;
      intArray0[6] = int6;
      int int7 = 784;
      intArray0[7] = int7;
      int int8 = Integer.MIN_VALUE;
      intArray0[8] = int8;
      int int9 = 636;
      intArray0[9] = int9;
      int int10 = 6101;
      // Undeclared exception!
      try {
        TIntLinkedList.link(intArray0, int1, int10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 31
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 1435;
      intArray0[0] = int0;
      int int1 = 148;
      intArray0[1] = int1;
      int int2 = 872;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = Integer.MIN_VALUE;
      intArray0[4] = int4;
      int int5 = (-233);
      intArray0[5] = int5;
      int int6 = 6584983;
      intArray0[6] = int6;
      int int7 = 0;
      intArray0[7] = int7;
      int int8 = (-1);
      intArray0[8] = int8;
      int int9 = (-1581);
      int int10 = 0;
      TIntLinkedList tIntLinkedList0 = TIntLinkedList.link(intArray0, int9, int10);
      TIntLinkedList tIntLinkedList1 = new TIntLinkedList();
      tIntLinkedList0.containsAll((TIntCollection) tIntLinkedList1);
      TIntList tIntList0 = null;
      TIntLinkedList tIntLinkedList2 = null;
      try {
        tIntLinkedList2 = new TIntLinkedList(tIntList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = (-1196);
      intArray0[0] = int0;
      int int1 = 587742049;
      intArray0[1] = int1;
      int int2 = (-1290);
      intArray0[2] = int2;
      int int3 = (-277);
      intArray0[3] = int3;
      int int4 = (-171);
      intArray0[4] = int4;
      int int5 = 26339969;
      intArray0[5] = int5;
      int int6 = (-592);
      intArray0[6] = int6;
      TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
      int int7 = 1353;
      // Undeclared exception!
      try {
        tIntArrayList0.subList(intArray0[3], int7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // begin index can not be < 0
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = (-1739);
      intArray0[0] = int0;
      int int1 = 0;
      int int2 = 0;
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList(int2);
      int int3 = (-1752);
      tIntLinkedList0.contains(int3);
      intArray0[1] = int1;
      int int4 = 1366;
      intArray0[2] = int4;
      int int5 = 15;
      intArray0[3] = int5;
      int int6 = (-1);
      int int7 = 521;
      // Undeclared exception!
      try {
        TIntLinkedList.link(intArray0, int6, int7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList();
      int int0 = 1761;
      // Undeclared exception!
      try {
        tIntLinkedList0.reverse(int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = (-1525);
      intArray0[0] = int0;
      int int1 = (-311);
      intArray0[1] = int1;
      int int2 = (-59);
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 23159;
      intArray0[4] = int4;
      int int5 = (-1838);
      intArray0[5] = int5;
      int int6 = (-924);
      intArray0[6] = int6;
      int int7 = (-1309);
      intArray0[7] = int7;
      TIntLinkedList tIntLinkedList0 = TIntLinkedList.link(intArray0, intArray0[0], int0);
      assertNotNull(tIntLinkedList0);
      
      boolean boolean0 = tIntLinkedList0.isEmpty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      TIntList tIntList0 = null;
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = null;
      try {
        tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList(tIntList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TIntList tIntList0 = null;
      TIntLinkedList tIntLinkedList0 = null;
      try {
        tIntLinkedList0 = new TIntLinkedList(tIntList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList(int0);
      int[] intArray0 = new int[6];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      boolean boolean0 = tIntLinkedList0.retainAll(intArray0);
      assertEquals(false, boolean0);
      assertEquals(0, tIntLinkedList0.getNoEntryValue());
  }

  @Test
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TIntLinkedList tIntLinkedList0 = new TIntLinkedList();
          tIntLinkedList0.getNoEntryValue();
          String string0 = "E(WymK!9CiN|_M";
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"E(WymK!9CiN|_M\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
