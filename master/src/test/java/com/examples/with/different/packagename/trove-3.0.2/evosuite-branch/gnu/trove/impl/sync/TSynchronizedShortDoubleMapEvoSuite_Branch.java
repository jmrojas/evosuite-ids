/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TDoubleFunction;
import gnu.trove.impl.sync.TSynchronizedDoubleCollection;
import gnu.trove.impl.sync.TSynchronizedShortDoubleMap;
import gnu.trove.impl.sync.TSynchronizedShortSet;
import gnu.trove.iterator.TShortDoubleIterator;
import gnu.trove.map.TShortDoubleMap;
import gnu.trove.map.hash.TShortDoubleHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.procedure.TShortDoubleProcedure;
import gnu.trove.procedure.TShortProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedShortDoubleMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.equals(Ljava/lang/Object;)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.<init>(Lgnu/trove/map/TShortDoubleMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      boolean boolean0 = tSynchronizedShortDoubleMap0.equals((Object) "jF!=cu}i3");
      assertEquals(false, boolean0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.increment(S)Z: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      boolean boolean0 = tSynchronizedShortDoubleMap0.increment((short)4);
      assertEquals(false, boolean0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.get(S)D: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      double double0 = tSynchronizedShortDoubleMap0.get((short)4);
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((-1028), (float) (-1028), (short)13, (double) (-1028));
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      boolean boolean0 = tSynchronizedShortDoubleMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.values([D)[D: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.values()[D: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      double[] doubleArray0 = tSynchronizedShortDoubleMap0.values();
      double[] doubleArray1 = tSynchronizedShortDoubleMap0.values(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(552);
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      String string0 = tSynchronizedShortDoubleMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.adjustValue(SD)Z: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(14, (float) 14, (short) (-1926), (double) (short) (-1926));
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      boolean boolean0 = tSynchronizedShortDoubleMap0.adjustValue((short) (-1926), (double) 14);
      assertEquals(false, boolean0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.getNoEntryKey()S: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      short short0 = tSynchronizedShortDoubleMap0.getNoEntryKey();
      assertEquals((short)0, short0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.containsValue(D)Z: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      boolean boolean0 = tSynchronizedShortDoubleMap0.containsValue((double) (short)7649);
      assertEquals(false, boolean0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.clear()V: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      tSynchronizedShortDoubleMap0.clear();
      assertEquals(true, tSynchronizedShortDoubleMap0.isEmpty());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.put(SD)D: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      tSynchronizedShortDoubleMap0.put((short)188, (short)188);
      assertEquals("{188=188.0}", tShortDoubleHashMap0.toString());
      assertEquals(1, tShortDoubleHashMap0.size());
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.adjustOrPutValue(SDD)D: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((-1028), (float) (-1028), (short)13, (double) (-1028));
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      double double0 = tSynchronizedShortDoubleMap0.adjustOrPutValue((short)13, (short)13, (short)13);
      assertEquals(false, tShortDoubleHashMap0.isEmpty());
      assertEquals(13.0, double0, 0.01D);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.iterator()Lgnu/trove/iterator/TShortDoubleIterator;: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((-1028), (float) (-1028), (short)13, (double) (-1028));
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      TShortDoubleIterator tShortDoubleIterator0 = tSynchronizedShortDoubleMap0.iterator();
      assertEquals(false, tShortDoubleIterator0.hasNext());
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.retainEntries(Lgnu/trove/procedure/TShortDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      boolean boolean0 = tSynchronizedShortDoubleMap0.retainEntries((TShortDoubleProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.size()I: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((-1028), (float) (-1028), (short)13, (double) (-1028));
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      int int0 = tSynchronizedShortDoubleMap0.size();
      assertEquals(0, int0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.keys([S)[S: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      short[] shortArray0 = tSynchronizedShortDoubleMap0.keys(tShortDoubleHashMap0._set);
      assertNotNull(shortArray0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.containsKey(S)Z: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      boolean boolean0 = tSynchronizedShortDoubleMap0.containsKey((short)7649);
      assertEquals(false, boolean0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.remove(S)D: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(14, (float) 14, (short) (-1926), (double) (short) (-1926));
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      double double0 = tSynchronizedShortDoubleMap0.remove((short) (-1926));
      assertEquals((-1926.0), double0, 0.01D);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.forEachKey(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      boolean boolean0 = tSynchronizedShortDoubleMap0.forEachKey((TShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      tSynchronizedShortDoubleMap0.transformValues((TDoubleFunction) null);
      assertEquals(true, tSynchronizedShortDoubleMap0.isEmpty());
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.forEachEntry(Lgnu/trove/procedure/TShortDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(552);
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      boolean boolean0 = tSynchronizedShortDoubleMap0.forEachEntry((TShortDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.keys()[S: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((-1028), (float) (-1028), (short)13, (double) (-1028));
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      short[] shortArray0 = tSynchronizedShortDoubleMap0.keys();
      assertNotNull(shortArray0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      HashMap<Short, Double> hashMap0 = new HashMap<Short, Double>();
      tSynchronizedShortDoubleMap0.putAll((Map<? extends Short, ? extends Double>) hashMap0);
      assertEquals("{}", tSynchronizedShortDoubleMap0.toString());
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.getNoEntryValue()D: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((-1028), (float) (-1028), (short)13, (double) (-1028));
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      double double0 = tSynchronizedShortDoubleMap0.getNoEntryValue();
      assertEquals((-1028.0), double0, 0.01D);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      boolean boolean0 = tSynchronizedShortDoubleMap0.forEachValue((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 25
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.hashCode()I: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.<init>(Lgnu/trove/map/TShortDoubleMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      short[] shortArray0 = new short[14];
      double[] doubleArray0 = new double[2];
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0, (Object) shortArray0);
      int int0 = tSynchronizedShortDoubleMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.putAll(Lgnu/trove/map/TShortDoubleMap;)V: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      tSynchronizedShortDoubleMap0.putAll((TShortDoubleMap) tShortDoubleHashMap0);
      assertEquals(true, tSynchronizedShortDoubleMap0.isEmpty());
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.putIfAbsent(SD)D: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      tSynchronizedShortDoubleMap0.putIfAbsent((short)7649, (short)7649);
      assertEquals(1, tShortDoubleHashMap0.size());
      assertEquals("{7649=7649.0}", tSynchronizedShortDoubleMap0.toString());
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.<init>(Lgnu/trove/map/TShortDoubleMap;)V: I17 Branch 1 IFNONNULL L59 - false
   */

  @Test
  public void test28()  throws Throwable  {
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = null;
      try {
        tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.keySet()Lgnu/trove/set/TShortSet;: I11 Branch 2 IFNONNULL L107 - true
   * 2 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.keySet()Lgnu/trove/set/TShortSet;: I11 Branch 2 IFNONNULL L107 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      TSynchronizedShortSet tSynchronizedShortSet0 = (TSynchronizedShortSet)tSynchronizedShortDoubleMap0.keySet();
      assertNotNull(tSynchronizedShortSet0);
      
      TSynchronizedShortSet tSynchronizedShortSet1 = (TSynchronizedShortSet)tSynchronizedShortDoubleMap0.keySet();
      assertSame(tSynchronizedShortSet1, tSynchronizedShortSet0);
  }

  //Test case number: 30
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;: I11 Branch 3 IFNONNULL L121 - true
   * 2 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;: I11 Branch 3 IFNONNULL L121 - false
   * 3 gnu.trove.impl.sync.TSynchronizedShortDoubleMap.<init>(Lgnu/trove/map/TShortDoubleMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test30()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap((-1028), (float) (-1028), (short)13, (double) (-1028));
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      TSynchronizedDoubleCollection tSynchronizedDoubleCollection0 = (TSynchronizedDoubleCollection)tSynchronizedShortDoubleMap0.valueCollection();
      assertNotNull(tSynchronizedDoubleCollection0);
      
      TSynchronizedDoubleCollection tSynchronizedDoubleCollection1 = (TSynchronizedDoubleCollection)tSynchronizedShortDoubleMap0.valueCollection();
      assertSame(tSynchronizedDoubleCollection1, tSynchronizedDoubleCollection0);
  }
}
