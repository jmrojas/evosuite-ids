/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.hash.TObjectHash;
import gnu.trove.map.TObjectShortMap;
import gnu.trove.map.custom_hash.TObjectByteCustomHashMap;
import gnu.trove.map.custom_hash.TObjectIntCustomHashMap;
import gnu.trove.map.custom_hash.TObjectLongCustomHashMap;
import gnu.trove.map.custom_hash.TObjectShortCustomHashMap;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.URI;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCustomObjectHashEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      int int0 = (-1533);
      TObjectIntCustomHashMap<Object> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, int0);
      IdentityHashingStrategy<String> identityHashingStrategy1 = new IdentityHashingStrategy<String>();
      int int1 = (-1238);
      float float0 = (-1769.5312F);
      byte byte0 = (byte)111;
      Object object0 = TObjectHash.FREE;
      tObjectIntCustomHashMap0.get(object0);
      TObjectByteCustomHashMap<String> tObjectByteCustomHashMap0 = new TObjectByteCustomHashMap<String>((HashingStrategy<? super String>) identityHashingStrategy1, int1, float0, byte0);
      IdentityHashingStrategy<Integer> identityHashingStrategy2 = new IdentityHashingStrategy<Integer>();
      float float1 = 193.00703F;
      TObjectShortMap<Integer> tObjectShortMap0 = null;
      TObjectShortCustomHashMap<Object> tObjectShortCustomHashMap0 = null;
      try {
        tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, (TObjectShortMap<?>) tObjectShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      IdentityHashingStrategy<String> identityHashingStrategy0 = new IdentityHashingStrategy<String>();
      int int0 = (-1727);
      float float0 = (-1534.0759F);
      IdentityHashingStrategy<Object> identityHashingStrategy1 = new IdentityHashingStrategy<Object>();
      TObjectByteCustomHashMap<Object> tObjectByteCustomHashMap0 = new TObjectByteCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy1);
      String string0 = "";
      File file0 = new File(string0, string0);
      File file1 = file0.getCanonicalFile();
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(file1, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      int int0 = (-195);
      TObjectLongCustomHashMap<Integer> tObjectLongCustomHashMap0 = new TObjectLongCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, int0);
      String string0 = "";
      URI uRI0 = URI.create(string0);
      String string1 = uRI0.toString();
      boolean boolean0 = tObjectLongCustomHashMap0.contains((Object) string1);
      assertEquals(false, boolean0);
  }
}
