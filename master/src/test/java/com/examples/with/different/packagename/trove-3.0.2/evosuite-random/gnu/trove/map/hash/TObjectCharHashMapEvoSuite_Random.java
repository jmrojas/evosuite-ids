/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.hash.TObjectHash;
import gnu.trove.impl.sync.TSynchronizedRandomAccessCharList;
import gnu.trove.list.TCharList;
import gnu.trove.list.array.TCharArrayList;
import gnu.trove.map.custom_hash.TObjectCharCustomHashMap;
import gnu.trove.map.hash.TObjectCharHashMap;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectCharHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 0;
      char char0 = 'f';
      TObjectCharHashMap<Character> tObjectCharHashMap0 = new TObjectCharHashMap<Character>(int0, (float) int0, char0);
      tObjectCharHashMap0.isEmpty();
      TObjectCharHashMap<TObjectCharCustomHashMap<Integer>> tObjectCharHashMap1 = new TObjectCharHashMap<TObjectCharCustomHashMap<Integer>>(int0);
      char[] charArray0 = new char[4];
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = char0;
      charArray0[3] = char0;
      char[] charArray1 = tObjectCharHashMap1.values(charArray0);
      assertNotNull(charArray1);
      
      int int1 = (-1);
      char char1 = 'g';
      TObjectCharHashMap<TObjectCharHashMap<Integer>> tObjectCharHashMap2 = new TObjectCharHashMap<TObjectCharHashMap<Integer>>(int1, (float) int1, char1);
      int int2 = 0;
      TObjectCharHashMap<String> tObjectCharHashMap3 = new TObjectCharHashMap<String>(int2, int2);
      tObjectCharHashMap3.capacity();
      int int3 = 1130;
      TObjectCharHashMap<Integer> tObjectCharHashMap4 = new TObjectCharHashMap<Integer>(int3);
      char char2 = 'D';
      tObjectCharHashMap2.adjustOrPutValue(tObjectCharHashMap4, char2, char1);
      assertEquals(1, tObjectCharHashMap2.size());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) tObjectCharHashMap3;
      Object object0 = TObjectHash.FREE;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) int1;
      objectArray0[3] = (Object) char2;
      objectArray0[4] = (Object) tObjectCharHashMap3;
      Object object1 = TObjectHash.FREE;
      objectArray0[5] = object1;
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(objectArray0);
      tObjectCharHashMap3.forEachKey((TObjectProcedure<? super String>) toObjectArrayProceedure0);
      TObjectCharHashMap<TObjectCharHashMap<Character>> tObjectCharHashMap5 = new TObjectCharHashMap<TObjectCharHashMap<Character>>();
      assertEquals(23, tObjectCharHashMap5.capacity());
  }

  @Test
  public void test1()  throws Throwable  {
      Map.Entry<TObjectCharHashMap<Integer>, Object> map_Entry0 = null;
      int int0 = 688;
      TObjectCharHashMap<Object> tObjectCharHashMap0 = new TObjectCharHashMap<Object>(int0);
      tObjectCharHashMap0.trimToSize();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = null;
      try {
        abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(map_Entry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>();
      tObjectCharHashMap0.toString();
      TCharArrayList tCharArrayList0 = new TCharArrayList();
      TSynchronizedRandomAccessCharList tSynchronizedRandomAccessCharList0 = new TSynchronizedRandomAccessCharList((TCharList) tCharArrayList0);
      tObjectCharHashMap0.values();
      tSynchronizedRandomAccessCharList0.toString();
      int int0 = 182;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      int int1 = 0;
      TObjectCharHashMap<Integer> tObjectCharHashMap1 = new TObjectCharHashMap<Integer>(int1, int0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int2 = (-1039);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>();
      String string0 = "v)[=w'2`,IPn8T0h";
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // v)[=w'2`,IPn8T0h (No such file or directory)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 339;
      TObjectCharHashMap<Object> tObjectCharHashMap0 = new TObjectCharHashMap<Object>(int0);
      int int1 = (-2000);
      TObjectCharHashMap<String> tObjectCharHashMap1 = new TObjectCharHashMap<String>(int1, int0);
      tObjectCharHashMap1.getNoEntryValue();
      tObjectCharHashMap0.ensureCapacity(int0);
      assertEquals('\u0000', tObjectCharHashMap0.getNoEntryValue());
  }

//   @Test
//   public void test5()  throws Throwable  {
//       int int0 = (-1011);
//       float float0 = (-684.65265F);
//       TObjectCharHashMap<Integer> tObjectCharHashMap0 = new TObjectCharHashMap<Integer>(int0, float0);
//       assertEquals((-684.65265F), tObjectCharHashMap0.getAutoCompactionFactor(), 0.01F);
//   }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 1032;
      float float0 = 1761.4586F;
      char char0 = 'U';
      TObjectCharHashMap<Character> tObjectCharHashMap0 = new TObjectCharHashMap<Character>(int0, float0, char0);
      tObjectCharHashMap0.keys();
      TObjectCharHashMap<TObjectCharCustomHashMap<String>> tObjectCharHashMap1 = new TObjectCharHashMap<TObjectCharCustomHashMap<String>>();
      tObjectCharHashMap1.isEmpty();
      int int1 = 1;
      float float1 = 0.0F;
      char char1 = 'c';
      TObjectCharHashMap<AbstractMap.SimpleEntry<Object, Character>> tObjectCharHashMap2 = new TObjectCharHashMap<AbstractMap.SimpleEntry<Object, Character>>(int1, float1, char1);
      String string0 = "k#/Emqo_d(nliVe";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0);
      // Undeclared exception!
      try {
        stringTokenizer0.nextToken(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
