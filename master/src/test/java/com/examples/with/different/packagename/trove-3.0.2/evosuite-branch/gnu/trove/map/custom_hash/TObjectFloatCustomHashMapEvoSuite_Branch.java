/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.custom_hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TFloatCollection;
import gnu.trove.function.TFloatFunction;
import gnu.trove.map.TObjectFloatMap;
import gnu.trove.map.custom_hash.TObjectFloatCustomHashMap;
import gnu.trove.map.hash.TObjectFloatHashMap;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.procedure.TObjectFloatProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectFloatCustomHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 27 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap$1.execute(Ljava/lang/Object;F)Z: root-Branch
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap$1.<init>(Lgnu/trove/map/custom_hash/TObjectFloatCustomHashMap;)V: root-Branch
   * 3 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.put(Ljava/lang/Object;F)F: root-Branch
   * 4 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.putAll(Lgnu/trove/map/TObjectFloatMap;)V: root-Branch
   * 5 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.getNoEntryValue()F: root-Branch
   * 6 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.setUp(I)I: root-Branch
   * 7 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;I)V: root-Branch
   * 8 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;IFF)V: I26 Branch 8 IFEQ L134 - true
   * 9 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;IFF)V: I26 Branch 8 IFEQ L134 - false
   * 10 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;Lgnu/trove/map/TObjectFloatMap;)V: I14 Branch 9 IFEQ L151 - false
   * 11 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;Lgnu/trove/map/TObjectFloatMap;)V: I44 Branch 10 IFEQ L157 - true
   * 12 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.rehash(I)V: I49 Branch 11 IFLE L199 - true
   * 13 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.rehash(I)V: I49 Branch 11 IFLE L199 - false
   * 14 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.rehash(I)V: I60 Branch 12 IF_ACMPEQ L201 - true
   * 15 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.rehash(I)V: I60 Branch 12 IF_ACMPEQ L201 - false
   * 16 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.rehash(I)V: I63 Branch 13 IF_ACMPEQ L201 - false
   * 17 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.rehash(I)V: I73 Branch 14 IFGE L203 - true
   * 18 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.doPut(FI)F: I12 Branch 21 IFGE L268 - true
   * 19 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.doPut(FI)F: I41 Branch 22 IFEQ L276 - false
   * 20 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.putAll(Ljava/util/Map;)V: I13 Branch 24 IFEQ L313 - true
   * 21 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.putAll(Ljava/util/Map;)V: I13 Branch 24 IFEQ L313 - false
   * 22 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I18 Branch 47 IFLE L518 - true
   * 23 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I18 Branch 47 IFLE L518 - false
   * 24 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I25 Branch 48 IF_ACMPEQ L519 - true
   * 25 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I25 Branch 48 IF_ACMPEQ L519 - false
   * 26 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I30 Branch 49 IF_ACMPEQ L519 - false
   * 27 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I39 Branch 50 IFNE L519 - true
   */

  @Test
  public void test0()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectFloatCustomHashMap<Integer> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, (-1100), (float) 0, (float) (-1100));
      float float0 = tObjectFloatCustomHashMap0.put((Integer) (-1100), 735.3605F);
      TObjectFloatCustomHashMap<Object> tObjectFloatCustomHashMap1 = new TObjectFloatCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, 0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      hashMap0.put("{-1100=735.3605}", (Float) float0);
      assertEquals(1, tObjectFloatCustomHashMap0.size());
      
      tObjectFloatCustomHashMap1.putAll((Map<?, ? extends Float>) hashMap0);
      TObjectFloatCustomHashMap<Object> tObjectFloatCustomHashMap2 = new TObjectFloatCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, (TObjectFloatMap<?>) tObjectFloatCustomHashMap1);
      assertEquals(23, tObjectFloatCustomHashMap2.capacity());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.keySet()Ljava/util/Set;: root-Branch
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap$KeyView.<init>(Lgnu/trove/map/custom_hash/TObjectFloatCustomHashMap;)V: root-Branch
   */

//   @Test
//   public void test1()  throws Throwable  {
//       IdentityHashingStrategy<Float> identityHashingStrategy0 = new IdentityHashingStrategy<Float>();
//       TObjectFloatCustomHashMap<Float> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Float>((HashingStrategy<? super Float>) identityHashingStrategy0, 0, (-8.856798F), (float) 0);
//       tObjectFloatCustomHashMap0.keySet();
//       assertEquals(0.0F, tObjectFloatCustomHashMap0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.<init>()V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TObjectFloatCustomHashMap<Float> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Float>();
      Float[] floatArray0 = new Float[6];
      ToObjectArrayProceedure<Float> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Float>(floatArray0);
      boolean boolean0 = tObjectFloatCustomHashMap0.forEachKey((TObjectProcedure<? super Float>) toObjectArrayProceedure0);
      assertEquals(23, tObjectFloatCustomHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.containsKey(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TObjectFloatCustomHashMap<Integer> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Integer>();
      tObjectFloatCustomHashMap0.containsKey((Object) null);
      assertEquals(23, tObjectFloatCustomHashMap0.capacity());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;IF)V: root-Branch
   */

//   @Test
//   public void test4()  throws Throwable  {
//       IdentityHashingStrategy<Float> identityHashingStrategy0 = new IdentityHashingStrategy<Float>();
//       TObjectFloatCustomHashMap<Float> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Float>((HashingStrategy<? super Float>) identityHashingStrategy0, 1907, (-16.115854F));
//       assertEquals(3, tObjectFloatCustomHashMap0.capacity());
//       assertEquals(0.0F, tObjectFloatCustomHashMap0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.clear()V: root-Branch
   */

//   @Test
//   public void test5()  throws Throwable  {
//       IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
//       TObjectFloatCustomHashMap<Object> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, 0, (float) 0, (float) 0);
//       tObjectFloatCustomHashMap0.clear();
//       assertEquals(0.0F, tObjectFloatCustomHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals("{}", tObjectFloatCustomHashMap0.toString());
//   }

  //Test case number: 6
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.valueCollection()Lgnu/trove/TFloatCollection;: root-Branch
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap$TFloatValueCollection.<init>(Lgnu/trove/map/custom_hash/TObjectFloatCustomHashMap;)V: root-Branch
   */

//   @Test
//   public void test6()  throws Throwable  {
//       IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
//       TObjectFloatCustomHashMap<Integer> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, 1792);
//       TFloatCollection tFloatCollection0 = tObjectFloatCustomHashMap0.valueCollection();
//       assertEquals(0.0F, tObjectFloatCustomHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(3821, tObjectFloatCustomHashMap0.capacity());
//       assertEquals(0.0F, tFloatCollection0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 7
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.iterator()Lgnu/trove/iterator/TObjectFloatIterator;: root-Branch
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap$TObjectFloatHashIterator.<init>(Lgnu/trove/map/custom_hash/TObjectFloatCustomHashMap;Lgnu/trove/map/custom_hash/TObjectFloatCustomHashMap;)V: root-Branch
   * 3 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 58 IFNE L588 - true
   * 4 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 59 IF_ICMPEQ L592 - true
   * 5 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 60 IFEQ L597 - true
   */

//   @Test
//   public void test7()  throws Throwable  {
//       IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
//       TObjectFloatCustomHashMap<Object> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, 0, (float) 0, (float) 0);
//       TObjectFloatHashMap<Integer> tObjectFloatHashMap0 = new TObjectFloatHashMap<Integer>(0);
//       boolean boolean0 = tObjectFloatCustomHashMap0.equals((Object) tObjectFloatHashMap0);
//       assertEquals(true, boolean0);
//       assertEquals(0.0F, tObjectFloatCustomHashMap0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 8
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.increment(Ljava/lang/Object;)Z: root-Branch
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.adjustValue(Ljava/lang/Object;F)Z: I9 Branch 40 IFGE L440 - false
   */

//   @Test
//   public void test8()  throws Throwable  {
//       IdentityHashingStrategy<String> identityHashingStrategy0 = new IdentityHashingStrategy<String>();
//       TObjectFloatCustomHashMap<String> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<String>((HashingStrategy<? super String>) identityHashingStrategy0, (-1281));
//       boolean boolean0 = tObjectFloatCustomHashMap0.increment("9");
//       assertEquals(3, tObjectFloatCustomHashMap0.capacity());
//       assertEquals(false, boolean0);
//       assertEquals(0.0F, tObjectFloatCustomHashMap0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 9
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;Lgnu/trove/map/TObjectFloatMap;)V: I14 Branch 9 IFEQ L151 - true
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.putAll(Lgnu/trove/map/TObjectFloatMap;)V: root-Branch
   */

//   @Test
//   public void test9()  throws Throwable  {
//       IdentityHashingStrategy<Float> identityHashingStrategy0 = new IdentityHashingStrategy<Float>();
//       TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>();
//       TObjectFloatCustomHashMap<Float> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Float>((HashingStrategy<? super Float>) identityHashingStrategy0, (TObjectFloatMap<? extends Float>) tObjectFloatHashMap0);
//       assertEquals(0.0F, tObjectFloatCustomHashMap0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 10
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;Lgnu/trove/map/TObjectFloatMap;)V: I44 Branch 10 IFEQ L157 - false
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.getNoEntryValue()F: root-Branch
   * 3 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;Lgnu/trove/map/TObjectFloatMap;)V: I14 Branch 9 IFEQ L151 - false
   */

  @Test
  public void test10()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectFloatCustomHashMap<Float> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Float>((HashingStrategy<? super Float>) identityHashingStrategy0, 0, (float) 0, (-296.69F));
      TObjectFloatCustomHashMap<Object> tObjectFloatCustomHashMap1 = null;
      try {
        tObjectFloatCustomHashMap1 = new TObjectFloatCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, (TObjectFloatMap<?>) tObjectFloatCustomHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  //Test case number: 11
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.containsValue(F)Z: I25 Branch 16 IF_ACMPEQ L232 - false
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.containsValue(F)Z: I30 Branch 17 IF_ACMPEQ L232 - false
   * 3 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.containsValue(F)Z: I36 Branch 18 IFNE L232 - true
   * 4 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.adjustOrPutValue(Ljava/lang/Object;FF)F: I9 Branch 41 IFGE L456 - true
   * 5 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.adjustOrPutValue(Ljava/lang/Object;FF)F: I51 Branch 42 IFEQ L466 - false
   * 6 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.containsValue(F)Z: I18 Branch 15 IFLE L231 - true
   * 7 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.containsValue(F)Z: I25 Branch 16 IF_ACMPEQ L232 - true
   * 8 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.containsValue(F)Z: I18 Branch 15 IFLE L231 - false
   */

  @Test
  public void test11()  throws Throwable  {
      IdentityHashingStrategy<Float> identityHashingStrategy0 = new IdentityHashingStrategy<Float>();
      TObjectFloatCustomHashMap<Float> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Float>((HashingStrategy<? super Float>) identityHashingStrategy0, 0, (-8.856798F), (float) 0);
      tObjectFloatCustomHashMap0.adjustOrPutValue((Float) (-451.8391F), (-451.8391F), (-8.856798F));
      boolean boolean0 = tObjectFloatCustomHashMap0.containsValue(6.6360896E8F);
      assertEquals("{-451.8391=-8.856798}", tObjectFloatCustomHashMap0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 12
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.containsValue(F)Z: I36 Branch 18 IFNE L232 - false
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.containsValue(F)Z: I18 Branch 15 IFLE L231 - false
   * 3 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.containsValue(F)Z: I25 Branch 16 IF_ACMPEQ L232 - false
   * 4 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.containsValue(F)Z: I30 Branch 17 IF_ACMPEQ L232 - false
   */

  @Test
  public void test12()  throws Throwable  {
      IdentityHashingStrategy<Float> identityHashingStrategy0 = new IdentityHashingStrategy<Float>();
      TObjectFloatCustomHashMap<Float> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Float>((HashingStrategy<? super Float>) identityHashingStrategy0, 0, (-8.856798F), (float) 0);
      tObjectFloatCustomHashMap0.adjustOrPutValue((Float) (-8.856798F), (-8.856798F), (-8.856798F));
      boolean boolean0 = tObjectFloatCustomHashMap0.containsValue((-8.856798F));
      assertEquals(1, tObjectFloatCustomHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.get(Ljava/lang/Object;)F: I9 Branch 19 IFGE L243 - false
   */

//   @Test
//   public void test13()  throws Throwable  {
//       IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
//       TObjectFloatCustomHashMap<Integer> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, 0);
//       float float0 = tObjectFloatCustomHashMap0.get((Object) "{}");
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.putIfAbsent(Ljava/lang/Object;F)F: I9 Branch 20 IFGE L259 - false
   */

//   @Test
//   public void test14()  throws Throwable  {
//       IdentityHashingStrategy<Float> identityHashingStrategy0 = new IdentityHashingStrategy<Float>();
//       TObjectFloatCustomHashMap<Float> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Float>((HashingStrategy<? super Float>) identityHashingStrategy0, 0, Float.NEGATIVE_INFINITY, (float) 0);
//       tObjectFloatCustomHashMap0.adjustOrPutValue((Float) Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
//       float float0 = tObjectFloatCustomHashMap0.putIfAbsent((Float) Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
//       assertEquals(false, tObjectFloatCustomHashMap0.isEmpty());
//       assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
//   }

  //Test case number: 15
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.doPut(FI)F: I12 Branch 21 IFGE L268 - false
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.doPut(FI)F: I41 Branch 22 IFEQ L276 - true
   */

//   @Test
//   public void test15()  throws Throwable  {
//       IdentityHashingStrategy<Float> identityHashingStrategy0 = new IdentityHashingStrategy<Float>();
//       TObjectFloatCustomHashMap<Float> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Float>((HashingStrategy<? super Float>) identityHashingStrategy0, 0, (-8.856798F), (float) 0);
//       tObjectFloatCustomHashMap0.adjustOrPutValue((Float) (-8.856798F), (-8.856798F), (-8.856798F));
//       float float0 = tObjectFloatCustomHashMap0.put((Float) (-8.856798F), (-8.856798F));
//       assertEquals(false, tObjectFloatCustomHashMap0.isEmpty());
//       assertEquals((-8.856798F), float0, 0.01F);
//   }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.remove(Ljava/lang/Object;)F: I14 Branch 23 IFLT L287 - true
   */

//   @Test
//   public void test16()  throws Throwable  {
//       IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
//       TObjectFloatCustomHashMap<Integer> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, 0);
//       float float0 = tObjectFloatCustomHashMap0.remove((Object) tObjectFloatCustomHashMap0);
//       assertEquals(0.0F, float0, 0.01F);
//       assertEquals(true, tObjectFloatCustomHashMap0.isEmpty());
//   }

  //Test case number: 17
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.keys()[Ljava/lang/Object;: I30 Branch 26 IF_ACMPEQ L348 - false
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.keys()[Ljava/lang/Object;: I35 Branch 27 IF_ACMPEQ L348 - false
   * 3 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.keys()[Ljava/lang/Object;: I23 Branch 25 IFLE L347 - true
   * 4 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.keys()[Ljava/lang/Object;: I23 Branch 25 IFLE L347 - false
   * 5 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.keys()[Ljava/lang/Object;: I30 Branch 26 IF_ACMPEQ L348 - true
   */

  @Test
  public void test17()  throws Throwable  {
      IdentityHashingStrategy<Float> identityHashingStrategy0 = new IdentityHashingStrategy<Float>();
      TObjectFloatCustomHashMap<Float> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Float>((HashingStrategy<? super Float>) identityHashingStrategy0, 0, (-8.856798F), (float) 0);
      tObjectFloatCustomHashMap0.adjustOrPutValue((Float) (-451.8391F), (-451.8391F), (-8.856798F));
      tObjectFloatCustomHashMap0.keys();
      assertEquals(7, tObjectFloatCustomHashMap0.capacity());
      assertEquals("{-451.8391=-8.856798}", tObjectFloatCustomHashMap0.toString());
  }

  //Test case number: 18
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I44 Branch 30 IF_ACMPEQ L369 - false
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I49 Branch 31 IF_ACMPEQ L369 - false
   * 3 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I10 Branch 28 IF_ICMPGE L360 - true
   * 4 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L368 - true
   * 5 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L368 - false
   * 6 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I44 Branch 30 IF_ACMPEQ L369 - true
   */

  @Test
  public void test18()  throws Throwable  {
      IdentityHashingStrategy<Float> identityHashingStrategy0 = new IdentityHashingStrategy<Float>();
      TObjectFloatCustomHashMap<Float> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Float>((HashingStrategy<? super Float>) identityHashingStrategy0, 0, Float.NEGATIVE_INFINITY, (float) 0);
      tObjectFloatCustomHashMap0.adjustOrPutValue((Float) Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      Float[] floatArray0 = new Float[8];
      tObjectFloatCustomHashMap0.keys(floatArray0);
      assertEquals(false, tObjectFloatCustomHashMap0.isEmpty());
      assertEquals("{-Infinity=-Infinity}", tObjectFloatCustomHashMap0.toString());
  }

  //Test case number: 19
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.values()[F: I34 Branch 33 IF_ACMPEQ L391 - false
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.values()[F: I39 Branch 34 IF_ACMPEQ L391 - false
   * 3 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.values()[F: I27 Branch 32 IFLE L390 - true
   * 4 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.values()[F: I27 Branch 32 IFLE L390 - false
   * 5 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.values()[F: I34 Branch 33 IF_ACMPEQ L391 - true
   */

  @Test
  public void test19()  throws Throwable  {
      IdentityHashingStrategy<Float> identityHashingStrategy0 = new IdentityHashingStrategy<Float>();
      TObjectFloatCustomHashMap<Float> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Float>((HashingStrategy<? super Float>) identityHashingStrategy0, 0, (-8.856798F), (float) 0);
      tObjectFloatCustomHashMap0.adjustOrPutValue((Float) (-451.8391F), (-451.8391F), (-8.856798F));
      tObjectFloatCustomHashMap0.values();
      assertEquals(1, tObjectFloatCustomHashMap0.size());
      assertEquals("{-451.8391=-8.856798}", tObjectFloatCustomHashMap0.toString());
  }

  //Test case number: 20
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.values([F)[F: I10 Branch 35 IF_ICMPGE L402 - true
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.values([F)[F: I37 Branch 36 IFLE L409 - true
   * 3 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.values([F)[F: I37 Branch 36 IFLE L409 - false
   * 4 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.values([F)[F: I44 Branch 37 IF_ACMPEQ L410 - true
   * 5 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.values([F)[F: I65 Branch 39 IF_ICMPLE L414 - false
   * 6 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.<init>()V: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TObjectFloatCustomHashMap<Float> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Float>();
      float[] floatArray0 = new float[8];
      float[] floatArray1 = tObjectFloatCustomHashMap0.values(floatArray0);
      assertEquals(23, tObjectFloatCustomHashMap0.capacity());
      assertNotNull(floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  //Test case number: 21
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.values([F)[F: I10 Branch 35 IF_ICMPGE L402 - false
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.values([F)[F: I44 Branch 37 IF_ACMPEQ L410 - false
   * 3 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.values([F)[F: I49 Branch 38 IF_ACMPEQ L410 - false
   * 4 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.values([F)[F: I65 Branch 39 IF_ICMPLE L414 - true
   * 5 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.values([F)[F: I37 Branch 36 IFLE L409 - true
   * 6 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.values([F)[F: I37 Branch 36 IFLE L409 - false
   * 7 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.values([F)[F: I44 Branch 37 IF_ACMPEQ L410 - true
   * 8 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.values()[F: I27 Branch 32 IFLE L390 - true
   * 9 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.values()[F: I27 Branch 32 IFLE L390 - false
   * 10 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.values()[F: I34 Branch 33 IF_ACMPEQ L391 - true
   */

  @Test
  public void test21()  throws Throwable  {
      IdentityHashingStrategy<Float> identityHashingStrategy0 = new IdentityHashingStrategy<Float>();
      TObjectFloatCustomHashMap<Float> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Float>((HashingStrategy<? super Float>) identityHashingStrategy0, 0, (-8.856798F), (float) 0);
      float[] floatArray0 = tObjectFloatCustomHashMap0.values();
      tObjectFloatCustomHashMap0.adjustOrPutValue((Float) 6.6360896E8F, 6.6360896E8F, (-8.856798F));
      tObjectFloatCustomHashMap0.values(floatArray0);
      assertEquals(1, tObjectFloatCustomHashMap0.size());
      assertEquals("{6.6360896E8=-8.856798}", tObjectFloatCustomHashMap0.toString());
  }

  //Test case number: 22
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.adjustOrPutValue(Ljava/lang/Object;FF)F: I9 Branch 41 IFGE L456 - false
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.adjustOrPutValue(Ljava/lang/Object;FF)F: I51 Branch 42 IFEQ L466 - true
   * 3 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.putIfAbsent(Ljava/lang/Object;F)F: I9 Branch 20 IFGE L259 - true
   */

//   @Test
//   public void test22()  throws Throwable  {
//       IdentityHashingStrategy<Float> identityHashingStrategy0 = new IdentityHashingStrategy<Float>();
//       TObjectFloatCustomHashMap<Float> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Float>((HashingStrategy<? super Float>) identityHashingStrategy0, 0, 0.0F, (float) 0);
//       tObjectFloatCustomHashMap0.putIfAbsent((Float) 0.0F, 0.0F);
//       float float0 = tObjectFloatCustomHashMap0.adjustOrPutValue((Float) 0.0F, 0.0F, 0.0F);
//       assertEquals("{0.0=0.0}", tObjectFloatCustomHashMap0.toString());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 23
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 43 IFLE L496 - true
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 43 IFLE L496 - false
   * 3 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 44 IF_ACMPEQ L497 - true
   */

//   @Test
//   public void test23()  throws Throwable  {
//       IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
//       TObjectFloatCustomHashMap<Object> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, 0);
//       boolean boolean0 = tObjectFloatCustomHashMap0.forEachValue((TFloatProcedure) null);
//       assertEquals(true, boolean0);
//       assertEquals(0.0F, tObjectFloatCustomHashMap0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 24
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I27 Branch 51 IFLE L545 - false
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I34 Branch 52 IF_ACMPEQ L546 - true
   * 3 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I27 Branch 51 IFLE L545 - true
   * 4 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;)V: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectFloatCustomHashMap<String> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<String>((HashingStrategy<? super String>) identityHashingStrategy0);
      boolean boolean0 = tObjectFloatCustomHashMap0.retainEntries((TObjectFloatProcedure<? super String>) null);
      assertEquals(false, boolean0);
      assertEquals(23, tObjectFloatCustomHashMap0.capacity());
  }

  //Test case number: 25
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I34 Branch 52 IF_ACMPEQ L546 - false
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I39 Branch 53 IF_ACMPEQ L546 - false
   * 3 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;)V: root-Branch
   * 4 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I27 Branch 51 IFLE L545 - false
   * 5 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.retainEntries(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I34 Branch 52 IF_ACMPEQ L546 - true
   */

  @Test
  public void test25()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectFloatCustomHashMap<String> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<String>((HashingStrategy<? super String>) identityHashingStrategy0);
      tObjectFloatCustomHashMap0.adjustOrPutValue("{}", (float) 0, (-1.0F));
      // Undeclared exception!
      try {
        tObjectFloatCustomHashMap0.retainEntries((TObjectFloatProcedure<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I18 Branch 55 IFLE L570 - false
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I24 Branch 56 IFNULL L571 - false
   * 3 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: I29 Branch 57 IF_ACMPEQ L571 - false
   */

  @Test
  public void test26()  throws Throwable  {
      IdentityHashingStrategy<String> identityHashingStrategy0 = new IdentityHashingStrategy<String>();
      TObjectFloatCustomHashMap<String> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<String>((HashingStrategy<? super String>) identityHashingStrategy0, 577, (float) 577, (float) 577);
      // Undeclared exception!
      try {
        tObjectFloatCustomHashMap0.transformValues((TFloatFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 58 IFNE L588 - false
   */

//   @Test
//   public void test27()  throws Throwable  {
//       IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
//       TObjectFloatCustomHashMap<Object> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, 0, (float) 0, (float) 0);
//       boolean boolean0 = tObjectFloatCustomHashMap0.equals((Object) ":");
//       assertEquals(0.0F, tObjectFloatCustomHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(false, boolean0);
//   }

  //Test case number: 28
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L626 - false
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.hashCode()I: I34 Branch 67 IF_ACMPEQ L626 - false
   * 3 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.hashCode()I: I45 Branch 68 IFNONNULL L627 - true
   * 4 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;I)V: root-Branch
   * 5 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.putIfAbsent(Ljava/lang/Object;F)F: I9 Branch 20 IFGE L259 - true
   * 6 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.hashCode()I: I22 Branch 65 IFLE L625 - true
   * 7 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.hashCode()I: I22 Branch 65 IFLE L625 - false
   * 8 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L626 - true
   */

  @Test
  public void test28()  throws Throwable  {
      IdentityHashingStrategy<Float> identityHashingStrategy0 = new IdentityHashingStrategy<Float>();
      Float float0 = new Float(134.27429F);
      TObjectFloatCustomHashMap<Float> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Float>((HashingStrategy<? super Float>) identityHashingStrategy0, 0);
      tObjectFloatCustomHashMap0.putIfAbsent(float0, 0.0F);
      int int0 = tObjectFloatCustomHashMap0.hashCode();
      assertEquals("{134.27429=0.0}", tObjectFloatCustomHashMap0.toString());
      assertEquals(1124484664, int0);
  }

  //Test case number: 29
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I51 Branch 71 IF_ACMPEQ L1108 - false
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I37 Branch 69 IFLE L1107 - true
   * 3 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I37 Branch 69 IFLE L1107 - false
   * 4 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I45 Branch 70 IF_ACMPEQ L1108 - false
   * 5 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I51 Branch 71 IF_ACMPEQ L1108 - true
   * 6 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;IFF)V: I26 Branch 8 IFEQ L134 - true
   * 7 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.adjustOrPutValue(Ljava/lang/Object;FF)F: I9 Branch 41 IFGE L456 - true
   * 8 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.adjustOrPutValue(Ljava/lang/Object;FF)F: I51 Branch 42 IFEQ L466 - false
   */

  @Test
  public void test29()  throws Throwable  {
      IdentityHashingStrategy<Float> identityHashingStrategy0 = new IdentityHashingStrategy<Float>();
      TObjectFloatCustomHashMap<Float> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Float>((HashingStrategy<? super Float>) identityHashingStrategy0, 0, (-8.856798F), (float) 0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) dataOutputStream0);
      tObjectFloatCustomHashMap0.adjustOrPutValue((Float) (-451.8391F), (-451.8391F), (-8.856798F));
      tObjectFloatCustomHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals("{-451.8391=-8.856798}", tObjectFloatCustomHashMap0.toString());
      assertEquals(167, dataOutputStream0.size());
  }

  //Test case number: 30
  /*
   * 21 covered goals:
   * 1 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap$2.execute(Ljava/lang/Object;F)Z: I4 Branch 102 IFEQ L1151 - false
   * 2 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap$1.<init>(Lgnu/trove/map/custom_hash/TObjectFloatCustomHashMap;)V: root-Branch
   * 3 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.put(Ljava/lang/Object;F)F: root-Branch
   * 4 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.toString()Ljava/lang/String;: root-Branch
   * 5 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.setUp(I)I: root-Branch
   * 6 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.<init>(Lgnu/trove/strategy/HashingStrategy;IFF)V: I26 Branch 8 IFEQ L134 - false
   * 7 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.rehash(I)V: I49 Branch 11 IFLE L199 - true
   * 8 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.rehash(I)V: I49 Branch 11 IFLE L199 - false
   * 9 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.rehash(I)V: I60 Branch 12 IF_ACMPEQ L201 - true
   * 10 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.rehash(I)V: I60 Branch 12 IF_ACMPEQ L201 - false
   * 11 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.rehash(I)V: I63 Branch 13 IF_ACMPEQ L201 - false
   * 12 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.rehash(I)V: I73 Branch 14 IFGE L203 - true
   * 13 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I18 Branch 47 IFLE L518 - true
   * 14 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I18 Branch 47 IFLE L518 - false
   * 15 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I25 Branch 48 IF_ACMPEQ L519 - true
   * 16 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I25 Branch 48 IF_ACMPEQ L519 - false
   * 17 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I30 Branch 49 IF_ACMPEQ L519 - false
   * 18 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: I39 Branch 50 IFNE L519 - true
   * 19 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.doPut(FI)F: I12 Branch 21 IFGE L268 - true
   * 20 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap.doPut(FI)F: I41 Branch 22 IFEQ L276 - false
   * 21 gnu.trove.map.custom_hash.TObjectFloatCustomHashMap$2.<init>(Lgnu/trove/map/custom_hash/TObjectFloatCustomHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   */

  @Test
  public void test30()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectFloatCustomHashMap<Integer> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, (-1100), (float) 0, (float) (-1100));
      tObjectFloatCustomHashMap0.put((Integer) (-1100), 735.3605F);
      String string0 = tObjectFloatCustomHashMap0.toString();
      assertEquals(false, tObjectFloatCustomHashMap0.isEmpty());
      assertEquals("{-1100=735.3605}", string0);
  }
}
