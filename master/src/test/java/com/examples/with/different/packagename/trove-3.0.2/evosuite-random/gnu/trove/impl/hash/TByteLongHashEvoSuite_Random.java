/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TByteLongMap;
import gnu.trove.map.hash.TByteLongHashMap;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PrintStream;
import java.io.RandomAccessFile;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteLongHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


//   @Test
//   public void test0()  throws Throwable  {
//       int int0 = (-171);
//       int int1 = 0;
//       TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int1, int0);
//       long[] longArray0 = tByteLongHashMap0.values();
//       assertNotNull(longArray0);
//       
//       byte[] byteArray0 = new byte[5];
//       byte byte0 = (byte) (-116);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)10;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte) (-1);
//       byteArray0[2] = byte2;
//       byte byte3 = (byte)123;
//       byteArray0[3] = byte3;
//       byte byte4 = (byte) (-128);
//       byteArray0[4] = byte4;
//       tByteLongHashMap0._states = byteArray0;
//       float float0 = 0.0F;
//       byte byte5 = (byte)0;
//       long long0 = 0L;
//       TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap(int0, float0, byte5, long0);
//       tByteLongHashMap1.getAutoCompactionFactor();
//       TByteLongHashMap tByteLongHashMap2 = new TByteLongHashMap();
//       TByteLongHashMap tByteLongHashMap3 = new TByteLongHashMap((TByteLongMap) tByteLongHashMap2);
//       tByteLongHashMap3.getAutoCompactionFactor();
//       tByteLongHashMap1.toString();
//       assertEquals(0L, tByteLongHashMap1.getNoEntryValue());
//       assertEquals(0, tByteLongHashMap1.getNoEntryKey());
//       
//       int int2 = (-1);
//       float float1 = 361.78967F;
//       boolean boolean0 = tByteLongHashMap2.increment(byte5);
//       assertEquals(false, boolean0);
//       
//       tByteLongHashMap3.tempDisableAutoCompaction();
//       tByteLongHashMap2.valueCollection();
//       byte byte6 = (byte)116;
//       long long1 = 1042L;
//       tByteLongHashMap2.adjustValue(byte6, long1);
//       tByteLongHashMap3.keys(tByteLongHashMap2._set);
//       assertEquals(0, tByteLongHashMap2.getNoEntryKey());
//       assertEquals(0L, tByteLongHashMap2.getNoEntryValue());
//       assertEquals(23, tByteLongHashMap2.capacity());
//       
//       TByteLongHashMap tByteLongHashMap4 = new TByteLongHashMap(int2, float1);
//       assertEquals(0L, tByteLongHashMap4.getNoEntryValue());
//       assertEquals(0, tByteLongHashMap4.getNoEntryKey());
//   }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 1;
          float float0 = (-1536.9036F);
          byte byte0 = (byte)105;
          TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int0, float0, byte0, (long) int0);
          TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap((TByteLongMap) tByteLongHashMap0);
          tByteLongHashMap1.toString();
          int int1 = 1831;
          TByteLongHashMap tByteLongHashMap2 = new TByteLongHashMap(int1);
          String string0 = "nf/ 6q1%T>jB[Vd<u";
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"nf/ 6q1%T>jB[Vd<u\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.GeneratedConstructorAccessor15.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

//   @Test
//   public void test2()  throws Throwable  {
//       int int0 = 158;
//       TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int0, int0);
//       byte[] byteArray0 = tByteLongHashMap0.keys();
//       assertEquals(0, tByteLongHashMap0.getNoEntryKey());
//       assertEquals(0L, tByteLongHashMap0.getNoEntryValue());
//       assertNotNull(byteArray0);
//   }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-86);
      byteArray0[0] = byte0;
      byte byte1 = (byte)96;
      byteArray0[1] = byte1;
      byte byte2 = (byte)111;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-81);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)63;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-56);
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      byteArray0[8] = byte8;
      long[] longArray0 = new long[2];
      long long0 = 24L;
      longArray0[0] = long0;
      longArray0[1] = (long) byte0;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(byteArray0, longArray0);
      assertEquals("{-86=24, 96=-86}", tByteLongHashMap0.toString());
      
      tByteLongHashMap0._set = byteArray0;
      int int0 = (-1350);
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap(int0, int0);
      // Undeclared exception!
      try {
        tByteLongHashMap1.setAutoCompactionFactor((float) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1350.0
         //
      }
  }

//   @Test
//   public void test4()  throws Throwable  {
//       byte[] byteArray0 = new byte[5];
//       byte byte0 = (byte)107;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte) (-75);
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)0;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte)76;
//       byteArray0[3] = byte3;
//       byte byte4 = (byte) (-49);
//       byteArray0[4] = byte4;
//       long[] longArray0 = new long[5];
//       longArray0[0] = (long) byte3;
//       longArray0[1] = (long) byteArray0[1];
//       longArray0[2] = (long) byteArray0[0];
//       longArray0[3] = (long) byte4;
//       longArray0[4] = (long) byte1;
//       TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(byteArray0, longArray0);
//       TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap((TByteLongMap) tByteLongHashMap0);
//       TByteLongHashMap tByteLongHashMap2 = new TByteLongHashMap((TByteLongMap) tByteLongHashMap1);
//       assertEquals("{107=76, -75=-75, 76=-49, -49=-75, 0=107}", tByteLongHashMap2.toString());
//       assertEquals("{76=-49, 107=76, -75=-75, -49=-75, 0=107}", tByteLongHashMap0.toString());
//       
//       int int0 = Integer.MAX_VALUE;
//       TByteLongHashMap tByteLongHashMap3 = new TByteLongHashMap(int0, int0);
//       long long0 = tByteLongHashMap3.getNoEntryValue();
//       assertEquals(0L, long0);
//       assertEquals(0, tByteLongHashMap3.getNoEntryKey());
//   }

//   @Test
//   public void test5()  throws Throwable  {
//       TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap();
//       byte[] byteArray0 = new byte[7];
//       byte byte0 = (byte)95;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)91;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte) (-42);
//       byteArray0[2] = byte2;
//       byte byte3 = (byte)3;
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)5;
//       byteArray0[4] = byte4;
//       byte byte5 = (byte)94;
//       byteArray0[5] = byte5;
//       byte byte6 = (byte) (-12);
//       byteArray0[6] = byte6;
//       byte[] byteArray1 = tByteLongHashMap0.keys(byteArray0);
//       assertNotNull(byteArray1);
//       
//       float float0 = 405.66693F;
//       tByteLongHashMap0.setAutoCompactionFactor(float0);
//       TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap();
//       assertEquals(23, tByteLongHashMap1.capacity());
//       
//       tByteLongHashMap1.trimToSize();
//       assertEquals(0, tByteLongHashMap1.getNoEntryKey());
//   }

//   @Test
//   public void test6()  throws Throwable  {
//       int int0 = 60;
//       TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int0, int0);
//       TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap((TByteLongMap) tByteLongHashMap0);
//       tByteLongHashMap1._set = tByteLongHashMap0._set;
//       assertEquals(0, tByteLongHashMap1.getNoEntryKey());
//       assertEquals(0L, tByteLongHashMap1.getNoEntryValue());
//       assertEquals(0, tByteLongHashMap0.getNoEntryKey());
//   }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      byte byte0 = (byte)42;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int0, float0, byte0, (long) byte0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      byteArray0[6] = byte0;
      byte byte1 = (byte) (-87);
      byteArray0[7] = byte1;
      byteArray0[8] = byte0;
      tByteLongHashMap0._states = byteArray0;
      TByteLongHashMap tByteLongHashMap1 = null;
      try {
        tByteLongHashMap1 = new TByteLongHashMap((TByteLongMap) tByteLongHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

//   @Test
//   public void test8()  throws Throwable  {
//       int int0 = 8567929;
//       float float0 = 0.0F;
//       byte byte0 = (byte)0;
//       long long0 = 1L;
//       byte[] byteArray0 = new byte[10];
//       byteArray0[0] = byte0;
//       byteArray0[1] = byte0;
//       byteArray0[2] = byte0;
//       byteArray0[3] = byte0;
//       byteArray0[4] = byte0;
//       byte byte1 = (byte) (-38);
//       byteArray0[5] = byte1;
//       byteArray0[6] = byte0;
//       byteArray0[7] = byte0;
//       byteArray0[8] = byte0;
//       byteArray0[9] = byte0;
//       long[] longArray0 = new long[9];
//       longArray0[0] = (long) byteArray0[9];
//       longArray0[1] = (long) byte1;
//       longArray0[2] = (long) byteArray0[9];
//       longArray0[3] = (long) byteArray0[4];
//       longArray0[4] = (long) byteArray0[4];
//       longArray0[5] = (long) byteArray0[0];
//       long long1 = 1L;
//       longArray0[6] = long1;
//       longArray0[7] = (long) byteArray0[4];
//       longArray0[8] = (long) byteArray0[0];
//       TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(byteArray0, longArray0);
//       assertEquals("{-38=0, 0=0}", tByteLongHashMap0.toString());
//       assertEquals(2, tByteLongHashMap0.size());
//       assertEquals(23, tByteLongHashMap0.capacity());
//       assertEquals(0L, tByteLongHashMap0.getNoEntryValue());
//       
//       TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap(int0, float0, byte0, long0);
//       assertEquals(1L, tByteLongHashMap1.getNoEntryValue());
//       assertEquals(0, tByteLongHashMap1.getNoEntryKey());
//   }

//   @Test
//   public void test9()  throws Throwable  {
//       int int0 = 1482707;
//       byte byte0 = (byte)111;
//       TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int0, (float) int0, byte0, (long) int0);
//       boolean boolean0 = true;
//       tByteLongHashMap0.reenableAutoCompaction(boolean0);
//       tByteLongHashMap0.valueCollection();
//       tByteLongHashMap0.compact();
//       int int1 = 0;
//       float float0 = 220.11293F;
//       TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap(int0, float0);
//       TByteLongHashMap tByteLongHashMap2 = new TByteLongHashMap(int1, int1);
//       int int2 = 182;
//       float float1 = 10.0F;
//       tByteLongHashMap0.keys();
//       assertEquals(111, tByteLongHashMap0.getNoEntryKey());
//       assertEquals(1482707L, tByteLongHashMap0.getNoEntryValue());
//       
//       TByteLongHashMap tByteLongHashMap3 = new TByteLongHashMap(int2, float1);
//       tByteLongHashMap2.hashCode();
//       assertEquals(0, tByteLongHashMap2.getNoEntryKey());
//       assertEquals(0L, tByteLongHashMap2.getNoEntryValue());
//       
//       TByteLongHashMap tByteLongHashMap4 = new TByteLongHashMap();
//       TByteLongHashMap tByteLongHashMap5 = new TByteLongHashMap((TByteLongMap) tByteLongHashMap4);
//       boolean boolean1 = tByteLongHashMap4.containsKey(byte0);
//       assertEquals(false, boolean1);
//       
//       tByteLongHashMap5.values();
//       assertEquals(0, tByteLongHashMap4.getNoEntryKey());
//       assertEquals(23, tByteLongHashMap4.capacity());
//       assertEquals(0L, tByteLongHashMap4.getNoEntryValue());
//       assertEquals(0L, tByteLongHashMap5.getNoEntryValue());
//   }

//   @Test
//   public void test10()  throws Throwable  {
//       int int0 = 559;
//       TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int0);
//       tByteLongHashMap0.size();
//       assertEquals(0, tByteLongHashMap0.getNoEntryKey());
//       assertEquals(0L, tByteLongHashMap0.getNoEntryValue());
//       assertEquals(1201, tByteLongHashMap0.capacity());
//   }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 1;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap();
      tByteLongHashMap0.containsValue((long) int0);
      String string0 = "80/fmjOJ&%";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 80/fmjOJ&%://80/fmjOJ&%80/fmjOJ&%25#80/fmjOJ&%25
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-1);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-120);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-100);
      byteArray0[3] = byte3;
      byte byte4 = (byte)71;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-112);
      byteArray0[6] = byte6;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) byteArray0[2];
      longArray0[1] = (long) byte5;
      longArray0[2] = (long) byte5;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(byteArray0, longArray0);
      tByteLongHashMap0.size();
      assertEquals("{-120=0, -1=-120, 0=0}", tByteLongHashMap0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-106);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)18;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-102);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      byte byte5 = (byte)1;
      byteArray0[5] = byte5;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) byte2;
      long long0 = 0L;
      longArray0[1] = long0;
      long long1 = 1L;
      longArray0[2] = long1;
      long long2 = 0L;
      longArray0[3] = long2;
      longArray0[4] = (long) byte0;
      longArray0[5] = (long) byte2;
      longArray0[6] = (long) byte3;
      longArray0[7] = (long) byte0;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(byteArray0, longArray0);
      tByteLongHashMap0.tempDisableAutoCompaction();
      byte byte6 = (byte) (-37);
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-62);
      byteArray0[7] = byte7;
      long[] longArray1 = new long[6];
      longArray1[0] = (long) byte0;
      longArray1[1] = (long) byteArray0[3];
      longArray1[2] = (long) byte0;
      longArray1[3] = (long) byte5;
      longArray1[4] = (long) byteArray0[6];
      longArray1[5] = (long) byteArray0[3];
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap(byteArray0, longArray1);
      assertEquals("{1=-102, -102=1, -1=-37, -106=-106, 18=-106}", tByteLongHashMap1.toString());
      assertEquals(0L, tByteLongHashMap1.getNoEntryValue());
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int0);
      byte byte0 = (byte) (-94);
      float float0 = 1370.2747F;
      tByteLongHashMap0.setAutoCompactionFactor(float0);
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap();
      boolean boolean0 = false;
      tByteLongHashMap1.reenableAutoCompaction(boolean0);
      tByteLongHashMap0.adjustValue(byte0, (long) int0);
      tByteLongHashMap0.capacity();
      tByteLongHashMap1.keys(tByteLongHashMap0._states);
      tByteLongHashMap0.hashCode();
      tByteLongHashMap0.tempDisableAutoCompaction();
      tByteLongHashMap1.valueCollection();
      InputStream inputStream0 = null;
      boolean boolean1 = false;
      tByteLongHashMap1.reenableAutoCompaction(boolean1);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap();
      tByteLongHashMap0.clear();
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap((TByteLongMap) tByteLongHashMap0);
      tByteLongHashMap1.isEmpty();
      byte byte0 = (byte) (-10);
      tByteLongHashMap0.iterator();
      long long0 = (-8L);
      tByteLongHashMap0.putIfAbsent(byte0, long0);
      String string0 = "_";
      String string1 = "|*36#8";
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(string0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"|*36#8\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 0;
      TByteLongMap tByteLongMap0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-38);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-36);
      byteArray0[2] = byte2;
      byte byte3 = (byte)40;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-52);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-1);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-22);
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-1);
      byteArray0[7] = byte7;
      byte byte8 = (byte)77;
      byteArray0[8] = byte8;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) byteArray0[8];
      longArray0[1] = (long) int0;
      longArray0[2] = (long) byte3;
      longArray0[3] = (long) byteArray0[2];
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(byteArray0, longArray0);
      byte byte9 = (byte)0;
      tByteLongHashMap0.containsKey(byte9);
      int int1 = 0;
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap(int1);
      TByteLongHashMap tByteLongHashMap2 = new TByteLongHashMap((TByteLongMap) tByteLongHashMap1);
      tByteLongHashMap2.setAutoCompactionFactor((float) int0);
      TByteLongHashMap tByteLongHashMap3 = null;
      try {
        tByteLongHashMap3 = new TByteLongHashMap(tByteLongMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)25;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)69;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) byte4;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) byte3;
      longArray0[3] = (long) byteArray0[1];
      long long0 = (-1L);
      longArray0[4] = long0;
      longArray0[5] = (long) byte3;
      long long1 = 1809L;
      longArray0[6] = long1;
      longArray0[7] = (long) byte2;
      longArray0[8] = (long) byte0;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(byteArray0, longArray0);
      int int1 = tByteLongHashMap0.size();
      assertEquals(3, int1);
      assertEquals("{69=0, 25=0, 0=-1}", tByteLongHashMap0.toString());
      
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap(int0);
      TByteLongHashMap tByteLongHashMap2 = new TByteLongHashMap((TByteLongMap) tByteLongHashMap1);
      byte byte5 = (byte)0;
      boolean boolean0 = tByteLongHashMap2.contains(byte5);
      assertEquals(false, boolean0);
  }
}
