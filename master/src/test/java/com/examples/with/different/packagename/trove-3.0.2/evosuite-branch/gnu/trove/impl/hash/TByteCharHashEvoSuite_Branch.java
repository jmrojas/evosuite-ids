/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TByteCharMap;
import gnu.trove.map.hash.TByteCharHashMap;
import gnu.trove.procedure.TByteProcedure;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteCharHashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TByteCharHash.<init>(IF)V: root-Branch
   * 2 gnu.trove.impl.hash.TByteCharHash.setUp(I)I: root-Branch
   */

//   @Test
//   public void test0()  throws Throwable  {
//       TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap((int) '\u0000', (float) '\u0000');
//       assertEquals(0, tByteCharHashMap0.getNoEntryKey());
//       assertEquals('\u0000', tByteCharHashMap0.getNoEntryValue());
//   }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TByteCharHash.getNoEntryValue()C: root-Branch
   * 2 gnu.trove.impl.hash.TByteCharHash.<init>()V: root-Branch
   */

//   @Test
//   public void test1()  throws Throwable  {
//       TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap();
//       tByteCharHashMap0.equals((Object) tByteCharHashMap0);
//       assertEquals(0, tByteCharHashMap0.getNoEntryKey());
//       assertEquals('\u0000', tByteCharHashMap0.getNoEntryValue());
//       assertEquals(23, tByteCharHashMap0.capacity());
//   }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TByteCharHash.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap();
      PipedInputStream pipedInputStream0 = new PipedInputStream(426);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
      tByteCharHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TByteCharHash.<init>(IFBC)V: root-Branch
   */

//   @Test
//   public void test3()  throws Throwable  {
//       TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap((int) 'W', (float) (byte)43, (byte)31, 'W');
//       assertEquals('W', tByteCharHashMap0.getNoEntryValue());
//       assertEquals(31, tByteCharHashMap0.getNoEntryKey());
//       assertEquals(3, tByteCharHashMap0.capacity());
//   }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TByteCharHash.getNoEntryKey()B: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap();
      byte byte0 = tByteCharHashMap0.getNoEntryKey();
      assertEquals('\u0000', tByteCharHashMap0.getNoEntryValue());
      assertEquals(23, tByteCharHashMap0.capacity());
      assertEquals((byte)0, byte0);
  }

  //Test case number: 5
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.hash.TByteCharHash.contains(B)Z: I5 Branch 1 IFLT L178 - true
   * 2 gnu.trove.impl.hash.TByteCharHash.index(B)I: I37 Branch 5 IFNE L228 - false
   * 3 gnu.trove.impl.hash.TByteCharHash.insertKey(B)I: I30 Branch 13 IFNE L279 - true
   * 4 gnu.trove.impl.hash.TByteCharHash.insertKey(B)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 5 gnu.trove.impl.hash.TByteCharHash.insertKey(B)I: I56 Branch 15 IF_ICMPNE L286 - false
   * 6 gnu.trove.impl.hash.TByteCharHash.<init>(I)V: root-Branch
   * 7 gnu.trove.impl.hash.TByteCharHash.insertKeyAt(IB)V: root-Branch
   * 8 gnu.trove.impl.hash.TByteCharHash.insertKey(B)I: I30 Branch 13 IFNE L279 - false
   */

//   @Test
//   public void test5()  throws Throwable  {
//       byte[] byteArray0 = new byte[3];
//       char[] charArray0 = new char[2];
//       TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
//       boolean boolean0 = tByteCharHashMap0.contains((byte) (-97));
//       assertEquals(1, tByteCharHashMap0.size());
//       assertEquals(false, boolean0);
//       assertEquals('\u0000', tByteCharHashMap0.getNoEntryValue());
//       assertEquals(7, tByteCharHashMap0.capacity());
//       assertEquals(0, tByteCharHashMap0.getNoEntryKey());
//   }

  //Test case number: 6
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TByteCharHash.forEach(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 2 IFLE L192 - true
   * 2 gnu.trove.impl.hash.TByteCharHash.forEach(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TByteCharHash.forEach(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

//   @Test
//   public void test6()  throws Throwable  {
//       TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(1635);
//       boolean boolean0 = tByteCharHashMap0.forEach((TByteProcedure) null);
//       assertEquals(0, tByteCharHashMap0.getNoEntryKey());
//       assertEquals('\u0000', tByteCharHashMap0.getNoEntryValue());
//       assertEquals(true, boolean0);
//       assertEquals(3527, tByteCharHashMap0.capacity());
//   }

  //Test case number: 7
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TByteCharHash.forEach(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - false
   * 2 gnu.trove.impl.hash.TByteCharHash.forEach(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TByteCharHash.forEach(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      char[] charArray0 = new char[7];
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
      // Undeclared exception!
      try {
        tByteCharHashMap0.forEach((TByteProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 8
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.TByteCharHash.index(B)I: I51 Branch 7 IF_ICMPNE L231 - true
   * 2 gnu.trove.impl.hash.TByteCharHash.indexRehashed(BIIB)I: I29 Branch 8 IFGE L245 - true
   * 3 gnu.trove.impl.hash.TByteCharHash.indexRehashed(BIIB)I: I46 Branch 9 IFNE L250 - false
   * 4 gnu.trove.impl.hash.TByteCharHash.contains(B)Z: I5 Branch 1 IFLT L178 - true
   * 5 gnu.trove.impl.hash.TByteCharHash.index(B)I: I37 Branch 5 IFNE L228 - true
   * 6 gnu.trove.impl.hash.TByteCharHash.index(B)I: I46 Branch 6 IF_ICMPNE L231 - false
   */

//   @Test
//   public void test8()  throws Throwable  {
//       byte[] byteArray0 = new byte[3];
//       byteArray0[0] = (byte)31;
//       char[] charArray0 = new char[2];
//       TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
//       boolean boolean0 = tByteCharHashMap0.contains((byte) (-97));
//       assertEquals(2, tByteCharHashMap0.size());
//       assertEquals("{31=\u0000, 0=\u0000}", tByteCharHashMap0.toString());
//       assertEquals(false, boolean0);
//       assertEquals(7, tByteCharHashMap0.capacity());
//       assertEquals(0, tByteCharHashMap0.getNoEntryKey());
//   }

  //Test case number: 9
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.TByteCharHash.indexRehashed(BIIB)I: I46 Branch 9 IFNE L250 - true
   * 2 gnu.trove.impl.hash.TByteCharHash.indexRehashed(BIIB)I: I58 Branch 10 IF_ICMPNE L254 - true
   * 3 gnu.trove.impl.hash.TByteCharHash.indexRehashed(BIIB)I: I70 Branch 12 IF_ICMPNE L256 - true
   * 4 gnu.trove.impl.hash.TByteCharHash.indexRehashed(BIIB)I: I29 Branch 8 IFGE L245 - true
   * 5 gnu.trove.impl.hash.TByteCharHash.index(B)I: I46 Branch 6 IF_ICMPNE L231 - true
   * 6 gnu.trove.impl.hash.TByteCharHash.indexRehashed(BIIB)I: I29 Branch 8 IFGE L245 - false
   */

  @Test
  public void test9()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap();
      tByteCharHashMap0.compact();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)125;
      tByteCharHashMap0._states = byteArray0;
      // Undeclared exception!
      try {
        tByteCharHashMap0.increment((byte)125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 10
  /*
   * 11 covered goals:
   * 1 gnu.trove.impl.hash.TByteCharHash.indexRehashed(BIIB)I: I58 Branch 10 IF_ICMPNE L254 - false
   * 2 gnu.trove.impl.hash.TByteCharHash.indexRehashed(BIIB)I: I61 Branch 11 IF_ICMPEQ L254 - false
   * 3 gnu.trove.impl.hash.TByteCharHash.insertKey(B)I: I56 Branch 15 IF_ICMPNE L286 - true
   * 4 gnu.trove.impl.hash.TByteCharHash.insertKeyRehash(BIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 5 gnu.trove.impl.hash.TByteCharHash.insertKeyRehash(BIIB)I: I45 Branch 18 IFGE L310 - false
   * 6 gnu.trove.impl.hash.TByteCharHash.insertKeyRehash(BIIB)I: I62 Branch 19 IFNE L316 - false
   * 7 gnu.trove.impl.hash.TByteCharHash.insertKeyRehash(BIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 8 gnu.trove.impl.hash.TByteCharHash.indexRehashed(BIIB)I: I29 Branch 8 IFGE L245 - false
   * 9 gnu.trove.impl.hash.TByteCharHash.indexRehashed(BIIB)I: I46 Branch 9 IFNE L250 - true
   * 10 gnu.trove.impl.hash.TByteCharHash.index(B)I: I51 Branch 7 IF_ICMPNE L231 - true
   * 11 gnu.trove.impl.hash.TByteCharHash.contains(B)Z: I5 Branch 1 IFLT L178 - false
   */

//   @Test
//   public void test10()  throws Throwable  {
//       byte[] byteArray0 = new byte[6];
//       byteArray0[0] = (byte)92;
//       char[] charArray0 = new char[3];
//       TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
//       TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap((TByteCharMap) tByteCharHashMap0);
//       boolean boolean0 = tByteCharHashMap1.contains((byte)0);
//       assertEquals(0, tByteCharHashMap0.getNoEntryKey());
//       assertEquals(2, tByteCharHashMap0.size());
//       assertEquals("{0=\u0000, 92=\u0000}", tByteCharHashMap1.toString());
//       assertEquals(true, boolean0);
//   }

  //Test case number: 11
  /*
   * 10 covered goals:
   * 1 gnu.trove.impl.hash.TByteCharHash.insertKey(B)I: I50 Branch 14 IF_ICMPNE L286 - true
   * 2 gnu.trove.impl.hash.TByteCharHash.insertKeyRehash(BIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 3 gnu.trove.impl.hash.TByteCharHash.insertKeyRehash(BIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 4 gnu.trove.impl.hash.TByteCharHash.insertKeyRehash(BIIB)I: I45 Branch 18 IFGE L310 - true
   * 5 gnu.trove.impl.hash.TByteCharHash.insertKeyRehash(BIIB)I: I67 Branch 20 IF_ICMPEQ L317 - false
   * 6 gnu.trove.impl.hash.TByteCharHash.<init>()V: root-Branch
   * 7 gnu.trove.impl.hash.TByteCharHash.removeAt(I)V: root-Branch
   * 8 gnu.trove.impl.hash.TByteCharHash.index(B)I: I37 Branch 5 IFNE L228 - true
   * 9 gnu.trove.impl.hash.TByteCharHash.index(B)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 10 gnu.trove.impl.hash.TByteCharHash.index(B)I: I51 Branch 7 IF_ICMPNE L231 - false
   */

  @Test
  public void test11()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap();
      tByteCharHashMap0.put((byte) (-19), 'X');
      tByteCharHashMap0.remove((byte) (-19));
      char char0 = tByteCharHashMap0.put((byte) (-19), '\u0000');
      assertEquals(false, tByteCharHashMap0.isEmpty());
      assertEquals('\u0000', char0);
  }

  //Test case number: 12
  /*
   * 5 covered goals:
   * 1 gnu.trove.impl.hash.TByteCharHash.insertKeyRehash(BIIB)I: I62 Branch 19 IFNE L316 - true
   * 2 gnu.trove.impl.hash.TByteCharHash.insertKeyRehash(BIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 3 gnu.trove.impl.hash.TByteCharHash.insertKeyRehash(BIIB)I: I103 Branch 22 IF_ICMPNE L327 - true
   * 4 gnu.trove.impl.hash.TByteCharHash.insertKeyRehash(BIIB)I: I115 Branch 23 IF_ICMPNE L332 - true
   * 5 gnu.trove.impl.hash.TByteCharHash.insertKeyRehash(BIIB)I: I45 Branch 18 IFGE L310 - true
   */

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte) (-1);
      char[] charArray0 = new char[8];
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
      assertEquals("{-1=\u0000, 25=\u0000, 0=\u0000}", tByteCharHashMap0.toString());
      assertEquals(3, tByteCharHashMap0.size());
  }

  //Test case number: 13
  /*
   * 15 covered goals:
   * 1 gnu.trove.impl.hash.TByteCharHash.insertKeyRehash(BIIB)I: I103 Branch 22 IF_ICMPNE L327 - false
   * 2 gnu.trove.impl.hash.TByteCharHash.<init>(I)V: root-Branch
   * 3 gnu.trove.impl.hash.TByteCharHash.setUp(I)I: root-Branch
   * 4 gnu.trove.impl.hash.TByteCharHash.insertKeyAt(IB)V: root-Branch
   * 5 gnu.trove.impl.hash.TByteCharHash.insertKeyRehash(BIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 6 gnu.trove.impl.hash.TByteCharHash.insertKeyRehash(BIIB)I: I45 Branch 18 IFGE L310 - false
   * 7 gnu.trove.impl.hash.TByteCharHash.insertKeyRehash(BIIB)I: I62 Branch 19 IFNE L316 - true
   * 8 gnu.trove.impl.hash.TByteCharHash.insertKeyRehash(BIIB)I: I62 Branch 19 IFNE L316 - false
   * 9 gnu.trove.impl.hash.TByteCharHash.insertKeyRehash(BIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 10 gnu.trove.impl.hash.TByteCharHash.insertKeyRehash(BIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 11 gnu.trove.impl.hash.TByteCharHash.insertKey(B)I: I30 Branch 13 IFNE L279 - true
   * 12 gnu.trove.impl.hash.TByteCharHash.insertKey(B)I: I30 Branch 13 IFNE L279 - false
   * 13 gnu.trove.impl.hash.TByteCharHash.insertKey(B)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 14 gnu.trove.impl.hash.TByteCharHash.insertKey(B)I: I56 Branch 15 IF_ICMPNE L286 - true
   * 15 gnu.trove.impl.hash.TByteCharHash.insertKey(B)I: I56 Branch 15 IF_ICMPNE L286 - false
   */

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte) (-74);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      char[] charArray0 = new char[7];
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
      assertEquals("{1=\u0000, -74=\u0000, 0=\u0000}", tByteCharHashMap0.toString());
      assertEquals(3, tByteCharHashMap0.size());
      assertEquals('\u0000', tByteCharHashMap0.getNoEntryValue());
  }
}
