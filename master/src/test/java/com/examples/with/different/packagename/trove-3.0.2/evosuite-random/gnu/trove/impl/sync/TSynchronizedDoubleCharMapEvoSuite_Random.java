/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedCharCollection;
import gnu.trove.impl.sync.TSynchronizedDoubleCharMap;
import gnu.trove.map.TDoubleCharMap;
import gnu.trove.map.hash.TDoubleCharHashMap;
import gnu.trove.procedure.TDoubleCharProcedure;
import gnu.trove.procedure.TDoubleProcedure;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedDoubleCharMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap((TDoubleCharMap) tDoubleCharHashMap0);
      String string0 = "e";
      int int0 = (-869);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: e://e@e:-869e?e#e
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = (-1002.8595172656591);
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 1206.0695726486151;
      doubleArray0[3] = double3;
      double double4 = (-388.9545822570448);
      doubleArray0[4] = double4;
      char[] charArray0 = new char[1];
      char char0 = 'C';
      charArray0[0] = char0;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      TDoubleCharProcedure tDoubleCharProcedure0 = null;
      // Undeclared exception!
      try {
        tSynchronizedDoubleCharMap0.retainEntries(tDoubleCharProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      tDoubleCharHashMap0.values();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      double[] doubleArray0 = new double[8];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      double double1 = 1975.3393622090273;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 728.6117841531003;
      doubleArray0[3] = double3;
      double double4 = 1.0;
      doubleArray0[4] = double4;
      double double5 = 747.5237599330718;
      doubleArray0[5] = double5;
      double double6 = 508.2597755759206;
      doubleArray0[6] = double6;
      double double7 = (-545.5610136786896);
      doubleArray0[7] = double7;
      tSynchronizedDoubleCharMap0.keys(doubleArray0);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap1 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tSynchronizedDoubleCharMap0);
      char[] charArray0 = tSynchronizedDoubleCharMap1.values();
      tSynchronizedDoubleCharMap1.keySet();
      double double8 = (-1258.9450601783622);
      char char0 = '.';
      tSynchronizedDoubleCharMap0.toString();
      TDoubleCharProcedure tDoubleCharProcedure0 = null;
      tSynchronizedDoubleCharMap0.forEachEntry(tDoubleCharProcedure0);
      tSynchronizedDoubleCharMap1.putIfAbsent(double8, char0);
      tSynchronizedDoubleCharMap0.values(charArray0);
      tSynchronizedDoubleCharMap1.valueCollection();
      TDoubleProcedure tDoubleProcedure0 = null;
      // Undeclared exception!
      try {
        tSynchronizedDoubleCharMap0.forEachKey(tDoubleProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      double double0 = 1263.7799903190112;
      int int0 = 1560;
      int int1 = 1;
      tSynchronizedDoubleCharMap0.putAll((TDoubleCharMap) tDoubleCharHashMap0);
      tSynchronizedDoubleCharMap0.putAll((TDoubleCharMap) tDoubleCharHashMap0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tDoubleCharHashMap0._states, int0, int1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream((InputStream) byteArrayInputStream0, (InputStream) byteArrayInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) sequenceInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 947;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      String string0 = "]3eE8pk#]6n`";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 0: ]3eE8pk#]6n`
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1961.3680524104377;
      doubleArray0[0] = double0;
      double double1 = (-927.0090551454044);
      doubleArray0[1] = double1;
      double double2 = 1242.2387166449353;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = 1.0;
      doubleArray0[5] = double5;
      double double6 = Double.POSITIVE_INFINITY;
      doubleArray0[6] = double6;
      double double7 = 2.0;
      doubleArray0[7] = double7;
      double double8 = 2.0;
      doubleArray0[8] = double8;
      char[] charArray0 = new char[3];
      char char0 = '?';
      charArray0[0] = char0;
      char char1 = '?';
      charArray0[1] = char1;
      char char2 = '<';
      charArray0[2] = char2;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      TSynchronizedCharCollection tSynchronizedCharCollection0 = (TSynchronizedCharCollection)tSynchronizedDoubleCharMap0.valueCollection();
      assertEquals("{?, ?, <}", tSynchronizedCharCollection0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 107;
      float float0 = 1945.2632F;
      double double0 = 1.0;
      char char0 = 'G';
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0, float0, double0, char0);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      double double1 = 249.22522652316022;
      char char1 = 'G';
      char char2 = tSynchronizedDoubleCharMap0.put(double1, char1);
      tSynchronizedDoubleCharMap0.valueCollection();
      assertEquals(false, tDoubleCharHashMap0.isEmpty());
      assertTrue(char0 == char2);
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 1011;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0, int0);
      String string0 = Double.toString((double) int0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      double double0 = 0.0;
      doubleArray0[6] = double0;
      tDoubleCharHashMap0._set = doubleArray0;
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0, (Object) string0);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap1 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tSynchronizedDoubleCharMap0);
      double double1 = tSynchronizedDoubleCharMap1.getNoEntryKey();
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test8()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = (-1.0);
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      char[] charArray0 = new char[4];
      char char0 = 'l';
      charArray0[0] = char0;
      char char1 = 'N';
      charArray0[1] = char1;
      char char2 = 'Q';
      charArray0[2] = char2;
      char char3 = ')';
      charArray0[3] = char3;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.ENGLISH;
      String string0 = locale0.getDisplayName(locale1);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0, (Object) string0);
      char[] charArray1 = tSynchronizedDoubleCharMap0.values();
      assertFalse(charArray1.equals(charArray0));
  }

  @Test
  public void test9()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap((TDoubleCharMap) tDoubleCharHashMap0);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap1);
      String string0 = tSynchronizedDoubleCharMap0.toString();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap1 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tSynchronizedDoubleCharMap0, (Object) string0);
      tSynchronizedDoubleCharMap1.isEmpty();
      int int0 = (-494);
      float float0 = (-991.3679F);
      TDoubleCharHashMap tDoubleCharHashMap2 = new TDoubleCharHashMap(int0, float0);
      String string1 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string1, string1, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://#
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      float float0 = 1211.6074F;
      char char0 = ',';
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0, float0, (double) float0, char0);
      Locale locale0 = Locale.getDefault();
      String string0 = locale0.getDisplayScript();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0, (Object) string0);
      assertEquals(',', tSynchronizedDoubleCharMap0.getNoEntryValue());
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 1.0;
      doubleArray0[2] = double2;
      double double3 = 1685.2818228169206;
      doubleArray0[3] = double3;
      char[] charArray0 = new char[2];
      char char0 = 'm';
      charArray0[0] = char0;
      char char1 = 'M';
      charArray0[1] = char1;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      Locale locale0 = Locale.GERMAN;
      String string0 = locale0.getLanguage();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap1 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tSynchronizedDoubleCharMap0, (Object) string0);
      File file0 = new File(string0, string0);
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TDoubleCharMap tDoubleCharMap0 = null;
          Locale.Category locale_Category0 = Locale.Category.FORMAT;
          Locale locale0 = Locale.getDefault(locale_Category0);
          String string0 = locale0.toString();
          Locale locale1 = Locale.SIMPLIFIED_CHINESE;
          locale0.getDisplayName(locale1);
          File file0 = null;
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      String string0 = hashMap0.toString();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0, (Object) string0);
      tSynchronizedDoubleCharMap0.keySet();
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap1 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap1);
      tSynchronizedDoubleCharMap1.toString();
      double double0 = (-1881.780916385715);
      char char0 = '=';
      char char1 = tSynchronizedDoubleCharMap1.getNoEntryValue();
      tSynchronizedDoubleCharMap1.increment((double) char0);
      tSynchronizedDoubleCharMap1.hashCode();
      tSynchronizedDoubleCharMap1.remove((double) char1);
      char char2 = '7';
      String string1 = "";
      int int0 = (-1719);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string1, string1, string1, int0, string1, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://@:-1719?#
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1558;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0);
      Locale locale0 = Locale.ITALY;
      String string0 = locale0.getDisplayCountry();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0, (Object) string0);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap1 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tSynchronizedDoubleCharMap0);
      int int1 = 0;
      int int2 = (-1046);
      char char0 = 'E';
      double double0 = 1602.2160976275861;
      char char1 = 'U';
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap(int1, (float) char0, double0, char1);
      Object object0 = null;
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap2 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap1, object0);
      char char2 = '&';
      // Undeclared exception!
      try {
        tSynchronizedDoubleCharMap2.adjustValue((double) int2, char2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      char[] charArray0 = new char[7];
      char char0 = 'J';
      charArray0[0] = char0;
      char char1 = 'm';
      charArray0[1] = char1;
      char char2 = '\\';
      charArray0[2] = char2;
      char char3 = 'V';
      charArray0[3] = char3;
      char char4 = '_';
      charArray0[4] = char4;
      char char5 = 'A';
      charArray0[5] = char5;
      char char6 = '9';
      charArray0[6] = char6;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      String string0 = "'";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: ':'#'
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap((TDoubleCharMap) tDoubleCharHashMap0);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap1);
      char char0 = tSynchronizedDoubleCharMap0.getNoEntryValue();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap1 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap1);
      TDoubleCharMap tDoubleCharMap0 = null;
      tDoubleCharHashMap1.contains((double) char0);
      char char1 = 'i';
      TDoubleCharHashMap tDoubleCharHashMap2 = null;
      try {
        tDoubleCharHashMap2 = new TDoubleCharHashMap(tDoubleCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      TDoubleCharMap tDoubleCharMap0 = null;
      Object object0 = null;
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap(tDoubleCharMap0, object0);
      double double0 = (-592.3730451100192);
      // Undeclared exception!
      try {
        tSynchronizedDoubleCharMap0.containsKey(double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      char[] charArray0 = new char[9];
      char char0 = '9';
      charArray0[0] = char0;
      char char1 = 'i';
      charArray0[1] = char1;
      char char2 = 'k';
      charArray0[2] = char2;
      char char3 = 'c';
      charArray0[3] = char3;
      char char4 = 't';
      charArray0[4] = char4;
      char char5 = 'c';
      charArray0[5] = char5;
      char char6 = '';
      charArray0[6] = char6;
      char char7 = '-';
      charArray0[7] = char7;
      char char8 = '>';
      charArray0[8] = char8;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      TSynchronizedCharCollection tSynchronizedCharCollection0 = (TSynchronizedCharCollection)tSynchronizedDoubleCharMap0.valueCollection();
      assertNotNull(tSynchronizedCharCollection0);
      
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap(int0);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap1 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap1);
      String string0 = "";
      URI uRI0 = URI.create(string0);
      String string1 = uRI0.getRawQuery();
      tSynchronizedDoubleCharMap1.equals((Object) string1);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap2 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap1);
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap3 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tSynchronizedDoubleCharMap2);
      char char9 = 'w';
      char char10 = 't';
      char char11 = tSynchronizedDoubleCharMap2.adjustOrPutValue((double) int0, char9, char10);
      tSynchronizedDoubleCharMap3.toString();
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap4 = new TSynchronizedDoubleCharMap((TDoubleCharMap) tSynchronizedDoubleCharMap2);
      float float0 = 268.20813F;
      tDoubleCharHashMap1.compact();
      tDoubleCharHashMap1.setAutoCompactionFactor(float0);
      tSynchronizedDoubleCharMap4.isEmpty();
      tSynchronizedDoubleCharMap3.getNoEntryKey();
      tSynchronizedDoubleCharMap2.put((double) char11, char10);
      assertEquals(2, tDoubleCharHashMap1.size());
      assertEquals(7, tDoubleCharHashMap1.capacity());
  }

  @Test
  public void test19()  throws Throwable  {
      TDoubleCharMap tDoubleCharMap0 = null;
      String string0 = "";
      TSynchronizedDoubleCharMap tSynchronizedDoubleCharMap0 = null;
      try {
        tSynchronizedDoubleCharMap0 = new TSynchronizedDoubleCharMap(tDoubleCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
