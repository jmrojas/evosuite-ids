/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TShortCollection;
import gnu.trove.map.TIntShortMap;
import gnu.trove.map.hash.TIntShortHashMap;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InterruptedIOException;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntShortHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 1998;
      int[] intArray0 = new int[5];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      short[] shortArray0 = new short[6];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)2035;
      shortArray0[1] = short1;
      short short2 = (short) (-967);
      shortArray0[2] = short2;
      short short3 = (short)901;
      shortArray0[3] = short3;
      short short4 = (short) (-182);
      shortArray0[4] = short4;
      short short5 = (short) (-1);
      shortArray0[5] = short5;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(intArray0, shortArray0);
      int int1 = (-1170);
      tIntShortHashMap0.put(int1, short2);
      assertEquals(2, tIntShortHashMap0.size());
      
      float float0 = 0.0F;
      float float1 = 0.0F;
      TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap(int0, float1);
      short short6 = tIntShortHashMap1.get(int0);
      tIntShortHashMap1.clear();
      tIntShortHashMap1.getNoEntryKey();
      tIntShortHashMap1.increment((int) short6);
      tIntShortHashMap1.trimToSize();
      TIntShortHashMap tIntShortHashMap2 = new TIntShortHashMap(int0, float0);
      tIntShortHashMap2.tempDisableAutoCompaction();
      int int2 = 47;
      tIntShortHashMap1.tempDisableAutoCompaction();
      TIntShortHashMap tIntShortHashMap3 = new TIntShortHashMap(int2, int2);
      assertFalse(tIntShortHashMap3.equals(tIntShortHashMap0));
  }

//   @Test
//   public void test1()  throws Throwable  {
//       int int0 = 2237;
//       TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
//       int int1 = tIntShortHashMap0.getNoEntryKey();
//       assertEquals(0, int1);
//       
//       TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap();
//       tIntShortHashMap1.hashCode();
//       TIntShortHashMap tIntShortHashMap2 = new TIntShortHashMap(int0);
//       short short0 = tIntShortHashMap2.getNoEntryValue();
//       int int2 = 0;
//       int int3 = (-1546);
//       short short1 = (short) (-91);
//       int int4 = 0;
//       short[] shortArray0 = new short[6];
//       shortArray0[0] = short0;
//       shortArray0[1] = short0;
//       shortArray0[2] = short1;
//       shortArray0[3] = short0;
//       shortArray0[4] = short0;
//       shortArray0[5] = short1;
//       TIntShortHashMap tIntShortHashMap3 = new TIntShortHashMap(tIntShortHashMap1._set, shortArray0);
//       assertEquals("{0=-91}", tIntShortHashMap3.toString());
//       assertEquals(1, tIntShortHashMap3.size());
//       
//       boolean boolean0 = tIntShortHashMap0.adjustValue(int4, short1);
//       assertEquals(false, boolean0);
//       
//       tIntShortHashMap2.trimToSize();
//       assertEquals(0, tIntShortHashMap2.getNoEntryKey());
//       
//       TIntShortHashMap tIntShortHashMap4 = new TIntShortHashMap(int2, (float) int2, int3, short1);
//       TIntShortHashMap tIntShortHashMap5 = new TIntShortHashMap();
//       int int5 = (-1);
//       tIntShortHashMap5.ensureCapacity(int5);
//       boolean boolean1 = false;
//       tIntShortHashMap4.clear();
//       assertEquals(-91, tIntShortHashMap4.getNoEntryValue());
//       assertEquals(-1546, tIntShortHashMap4.getNoEntryKey());
//       
//       tIntShortHashMap5.reenableAutoCompaction(boolean1);
//       assertEquals(0, tIntShortHashMap5.getNoEntryValue());
//       assertTrue(boolean1 == boolean0);
//   }

//   @Test
//   public void test2()  throws Throwable  {
//       int[] intArray0 = new int[5];
//       int int0 = Integer.MAX_VALUE;
//       intArray0[0] = int0;
//       int int1 = 1366;
//       intArray0[1] = int1;
//       int int2 = (-1219);
//       intArray0[2] = int2;
//       int int3 = (-1845);
//       intArray0[3] = int3;
//       int int4 = (-1701);
//       intArray0[4] = int4;
//       short[] shortArray0 = new short[9];
//       short short0 = (short)25221;
//       shortArray0[0] = short0;
//       short short1 = (short) (-1);
//       shortArray0[1] = short1;
//       short short2 = (short)1938;
//       TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap((int) short1);
//       int int5 = (-1634);
//       tIntShortHashMap0.ensureCapacity(int5);
//       shortArray0[2] = short2;
//       short short3 = (short)0;
//       shortArray0[3] = short3;
//       short short4 = (short)0;
//       shortArray0[4] = short4;
//       short short5 = (short) (-1);
//       shortArray0[5] = short5;
//       short short6 = (short)0;
//       shortArray0[6] = short6;
//       short short7 = (short)1;
//       shortArray0[0] = short5;
//       shortArray0[1] = short1;
//       shortArray0[2] = short5;
//       shortArray0[3] = short5;
//       shortArray0[4] = short1;
//       shortArray0[5] = short6;
//       shortArray0[6] = short7;
//       shortArray0[7] = short3;
//       shortArray0[8] = short2;
//       shortArray0[7] = short7;
//       short short8 = (short)0;
//       shortArray0[8] = short8;
//       TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap(intArray0, shortArray0);
//       tIntShortHashMap1.tempDisableAutoCompaction();
//       assertEquals(0, tIntShortHashMap1.getNoEntryKey());
//       assertEquals("{1366=-1, -1701=-1, -1219=-1, 2147483647=-1, -1845=-1}", tIntShortHashMap1.toString());
//       assertEquals(0, tIntShortHashMap1.getNoEntryValue());
//   }

//   @Test
//   public void test3()  throws Throwable  {
//       int[] intArray0 = new int[7];
//       int int0 = 0;
//       intArray0[0] = int0;
//       int int1 = 70;
//       intArray0[1] = int1;
//       int int2 = Integer.MAX_VALUE;
//       intArray0[2] = int2;
//       int int3 = Integer.MAX_VALUE;
//       intArray0[3] = int3;
//       int int4 = 307;
//       intArray0[4] = int4;
//       int int5 = (-1785);
//       intArray0[5] = int5;
//       int int6 = 0;
//       intArray0[6] = int6;
//       short[] shortArray0 = new short[6];
//       short short0 = (short)885;
//       shortArray0[0] = short0;
//       short short1 = (short) (-17851);
//       shortArray0[1] = short1;
//       short short2 = (short)233;
//       shortArray0[2] = short2;
//       short short3 = (short)1704;
//       shortArray0[3] = short3;
//       short short4 = (short)1234;
//       shortArray0[4] = short4;
//       short short5 = (short)1;
//       shortArray0[5] = short5;
//       TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(intArray0, shortArray0);
//       int int7 = tIntShortHashMap0.getNoEntryKey();
//       assertEquals(5, tIntShortHashMap0.size());
//       assertEquals("{-1785=1, 2147483647=1704, 70=-17851, 307=1234, 0=885}", tIntShortHashMap0.toString());
//       assertEquals(0, tIntShortHashMap0.getNoEntryValue());
//       assertEquals(0, int7);
//   }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 977;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0, int0);
      TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap();
      TIntShortHashMap tIntShortHashMap2 = new TIntShortHashMap((TIntShortMap) tIntShortHashMap1);
      TIntShortHashMap tIntShortHashMap3 = new TIntShortHashMap(int0, int0);
      tIntShortHashMap2.values();
      int int1 = (-1);
      float float0 = (-1660.1667F);
      short short0 = (short) (-438);
      int int2 = 531;
      tIntShortHashMap2.put(int2, short0);
      assertEquals(false, tIntShortHashMap2.isEmpty());
      
      TIntShortHashMap tIntShortHashMap4 = new TIntShortHashMap(int1, float0, int1, short0);
      assertEquals(-1, tIntShortHashMap4.getNoEntryKey());
  }

//   @Test
//   public void test5()  throws Throwable  {
//       int[] intArray0 = new int[1];
//       int int0 = 0;
//       intArray0[0] = int0;
//       short[] shortArray0 = new short[9];
//       short short0 = (short)120;
//       shortArray0[0] = short0;
//       short short1 = (short)0;
//       shortArray0[1] = short1;
//       short short2 = (short)0;
//       shortArray0[2] = short2;
//       short short3 = (short)1986;
//       shortArray0[3] = short3;
//       short short4 = (short)0;
//       shortArray0[4] = short4;
//       short short5 = (short)0;
//       shortArray0[5] = short5;
//       short short6 = (short)184;
//       shortArray0[6] = short6;
//       short short7 = (short)8363;
//       shortArray0[7] = short7;
//       short short8 = (short)812;
//       shortArray0[8] = short8;
//       TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(intArray0, shortArray0);
//       tIntShortHashMap0.setAutoCompactionFactor((float) shortArray0[6]);
//       assertEquals("{0=120}", tIntShortHashMap0.toString());
//       assertEquals(0, tIntShortHashMap0.getNoEntryKey());
//       assertEquals(23, tIntShortHashMap0.capacity());
//       assertEquals(0, tIntShortHashMap0.getNoEntryValue());
//       assertEquals(false, tIntShortHashMap0.isEmpty());
//   }

  @Test
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 1179;
      intArray0[0] = int0;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0);
      tIntShortHashMap0.getAutoCompactionFactor();
      short[] shortArray0 = new short[6];
      short short0 = (short)22315;
      shortArray0[0] = short0;
      short short1 = (short)1;
      shortArray0[1] = short1;
      short short2 = (short) (-1171);
      shortArray0[2] = short2;
      tIntShortHashMap0.isEmpty();
      tIntShortHashMap0.iterator();
      short short3 = (short)1617;
      shortArray0[3] = short3;
      short short4 = (short) (-1327);
      int int1 = 1523;
      tIntShortHashMap0.get(int1);
      assertEquals(2411, tIntShortHashMap0.capacity());
      
      shortArray0[4] = short4;
      short short5 = (short)25;
      shortArray0[5] = short5;
      tIntShortHashMap0.trimToSize();
      TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap(intArray0, shortArray0);
      tIntShortHashMap1.compact();
      tIntShortHashMap1._set = intArray0;
      assertEquals("{1179=22315}", tIntShortHashMap1.toString());
  }

//   @Test
//   public void test7()  throws Throwable  {
//       int int0 = 1605;
//       float float0 = 0.0F;
//       int[] intArray0 = new int[2];
//       intArray0[0] = int0;
//       intArray0[1] = int0;
//       short[] shortArray0 = new short[3];
//       short short0 = (short)0;
//       shortArray0[0] = short0;
//       short short1 = (short) (-1683);
//       shortArray0[1] = short1;
//       short short2 = (short)30577;
//       shortArray0[2] = short2;
//       TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(intArray0, shortArray0);
//       TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap(tIntShortHashMap0._set, shortArray0);
//       tIntShortHashMap0.putAll((TIntShortMap) tIntShortHashMap1);
//       assertEquals("{1605=30577, 0=-1683}", tIntShortHashMap0.toString());
//       assertEquals(2, tIntShortHashMap0.size());
//       
//       TIntShortHashMap tIntShortHashMap2 = new TIntShortHashMap(int0, float0);
//       tIntShortHashMap2.keySet();
//       boolean boolean0 = true;
//       Object object0 = null;
//       int[] intArray1 = new int[1];
//       intArray1[0] = int0;
//       tIntShortHashMap2._set = intArray1;
//       tIntShortHashMap2.equals(object0);
//       tIntShortHashMap2.toString();
//       tIntShortHashMap2.reenableAutoCompaction(boolean0);
//       assertEquals(0, tIntShortHashMap2.getNoEntryValue());
//   }

//   @Test
//   public void test8()  throws Throwable  {
//       int int0 = 0;
//       float float0 = 0.0F;
//       int int1 = 0;
//       int int2 = (-944);
//       TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int2);
//       tIntShortHashMap0.getNoEntryValue();
//       short short0 = (short) (-1251);
//       short short1 = tIntShortHashMap0.getNoEntryValue();
//       assertEquals(0, tIntShortHashMap0.getNoEntryKey());
//       assertEquals((short)0, short1);
//       
//       TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap(int1, (float) int1, int0, short0);
//       assertEquals(-1251, tIntShortHashMap1.getNoEntryValue());
//       
//       short short2 = (short)0;
//       TIntShortHashMap tIntShortHashMap2 = new TIntShortHashMap(int0, float0, int0, short2);
//       TIntShortHashMap tIntShortHashMap3 = null;
//       try {
//         tIntShortHashMap3 = new TIntShortHashMap((TIntShortMap) tIntShortHashMap2);
//         fail("Expecting exception: OutOfMemoryError");
//       
//       } catch(OutOfMemoryError e) {
//          //
//          // Java heap space
//          //
//       }
//   }

//   @Test
//   public void test9()  throws Throwable  {
//       int[] intArray0 = new int[6];
//       int int0 = 9677;
//       intArray0[0] = int0;
//       int int1 = 0;
//       intArray0[1] = int1;
//       int int2 = 10;
//       intArray0[2] = int2;
//       int int3 = 1579;
//       intArray0[3] = int3;
//       int int4 = 1221;
//       intArray0[4] = int4;
//       int int5 = 1;
//       intArray0[5] = int5;
//       short[] shortArray0 = new short[1];
//       short short0 = (short)570;
//       shortArray0[0] = short0;
//       TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(intArray0, shortArray0);
//       assertEquals(0, tIntShortHashMap0.getNoEntryKey());
//       assertEquals(17, tIntShortHashMap0.capacity());
//       assertEquals("{9677=570}", tIntShortHashMap0.toString());
//       assertEquals(0, tIntShortHashMap0.getNoEntryValue());
//   }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      float float0 = 0.0F;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int0, float0);
      TIntShortHashMap tIntShortHashMap1 = null;
      try {
        tIntShortHashMap1 = new TIntShortHashMap((TIntShortMap) tIntShortHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 1421;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      short[] shortArray0 = new short[7];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short) (-2045);
      shortArray0[1] = short1;
      short short2 = (short)1305;
      shortArray0[2] = short2;
      short short3 = (short)1422;
      shortArray0[3] = short3;
      short short4 = (short) (-216);
      shortArray0[4] = short4;
      short short5 = (short) (-227);
      shortArray0[5] = short5;
      short short6 = (short)1;
      shortArray0[6] = short6;
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(intArray0, shortArray0);
      assertEquals(17, tIntShortHashMap0.capacity());
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-75);
      byteArray0[0] = byte0;
      byte byte1 = (byte)96;
      byteArray0[1] = byte1;
      byte byte2 = (byte)105;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-36);
      byteArray0[3] = byte3;
      byte byte4 = (byte)126;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      tIntShortHashMap0._states = byteArray0;
      assertEquals(2, tIntShortHashMap0.size());
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int[] intArray0 = new int[3];
          int int0 = 1285;
          intArray0[0] = int0;
          int int1 = 66923;
          intArray0[1] = int1;
          int int2 = 554;
          intArray0[2] = int2;
          short[] shortArray0 = new short[2];
          short short0 = (short) (-199);
          shortArray0[0] = short0;
          short short1 = (short)299;
          shortArray0[0] = short0;
          TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(intArray0, shortArray0);
          TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap();
          tIntShortHashMap0.putAll((TIntShortMap) tIntShortHashMap1);
          shortArray0[1] = short1;
          shortArray0[1] = short1;
          TIntShortHashMap tIntShortHashMap2 = new TIntShortHashMap(intArray0, shortArray0);
          TIntShortHashMap tIntShortHashMap3 = new TIntShortHashMap();
          tIntShortHashMap3.trimToSize();
          shortArray0[0] = short1;
          tIntShortHashMap2.putAll((TIntShortMap) tIntShortHashMap3);
          shortArray0[1] = short1;
          int int3 = Integer.MAX_VALUE;
          tIntShortHashMap3.putIfAbsent(int3, short0);
          tIntShortHashMap2.capacity();
          String string0 = ";{qQ&Eb";
          String string1 = "vXKq<<a;]@KeE$LQ=";
          tIntShortHashMap2.containsKey((int) short1);
          // Undeclared exception!
          try {
            File.createTempFile(string0, string1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

//   @Test
//   public void test13()  throws Throwable  {
//       int[] intArray0 = new int[2];
//       int int0 = 181;
//       intArray0[0] = int0;
//       int int1 = 616;
//       intArray0[1] = int1;
//       short[] shortArray0 = new short[1];
//       short short0 = (short)225;
//       shortArray0[0] = short0;
//       TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(intArray0, shortArray0);
//       String string0 = tIntShortHashMap0.toString();
//       assertNotNull(string0);
//       assertEquals(5, tIntShortHashMap0.capacity());
//       assertEquals(0, tIntShortHashMap0.getNoEntryValue());
//       assertEquals(0, tIntShortHashMap0.getNoEntryKey());
//       assertEquals("{181=225}", string0);
//   }

  @Test
  public void test14()  throws Throwable  {
      TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
      short short0 = tIntShortHashMap0.getNoEntryValue();
      assertEquals((short)0, short0);
      
      int int0 = (-1);
      tIntShortHashMap0.ensureCapacity(int0);
      assertEquals(23, tIntShortHashMap0.capacity());
      assertEquals(0, tIntShortHashMap0.getNoEntryKey());
  }

//   @Test
//   public void test15()  throws Throwable  {
//       TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap();
//       Locale locale0 = Locale.FRANCE;
//       String string0 = locale0.getScript();
//       tIntShortHashMap0.equals((Object) string0);
//       int int0 = (-1640);
//       boolean boolean0 = tIntShortHashMap0.increment(int0);
//       int[] intArray0 = new int[4];
//       intArray0[0] = int0;
//       tIntShortHashMap0.clear();
//       int int1 = 0;
//       intArray0[1] = int1;
//       locale0.clone();
//       tIntShortHashMap0.tempDisableAutoCompaction();
//       intArray0[2] = int0;
//       intArray0[3] = int0;
//       short[] shortArray0 = new short[1];
//       short short0 = (short) (-17287);
//       shortArray0[0] = short0;
//       boolean boolean1 = true;
//       tIntShortHashMap0.reenableAutoCompaction(boolean1);
//       assertEquals(0, tIntShortHashMap0.getNoEntryValue());
//       
//       shortArray0[0] = short0;
//       shortArray0[0] = short0;
//       TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap(intArray0, shortArray0);
//       int int2 = (-1255);
//       intArray0[0] = int2;
//       intArray0[1] = (int) shortArray0[0];
//       int int3 = (-671);
//       intArray0[2] = int3;
//       int int4 = (-102);
//       intArray0[3] = int4;
//       boolean boolean2 = tIntShortHashMap1.contains(int2);
//       assertTrue(boolean2 == boolean0);
//       
//       tIntShortHashMap1.get(intArray0[3]);
//       assertEquals(11, tIntShortHashMap1.capacity());
//       assertEquals("{-1640=-17287}", tIntShortHashMap1.toString());
//       
//       TIntShortHashMap tIntShortHashMap2 = new TIntShortHashMap(int0);
//       short short1 = tIntShortHashMap2.getNoEntryValue();
//       shortArray0[0] = short1;
//       assertEquals((short)0, shortArray0[0]);
//   }

//   @Test
//   public void test16()  throws Throwable  {
//       int int0 = 0;
//       float float0 = (-1351.602F);
//       int int1 = (-114);
//       float float1 = 0.0F;
//       TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int1, float1);
//       int int2 = tIntShortHashMap0.getNoEntryKey();
//       assertEquals(0, int2);
//       assertEquals(0, tIntShortHashMap0.getNoEntryValue());
//       
//       short short0 = (short)0;
//       TIntShortHashMap tIntShortHashMap1 = new TIntShortHashMap(int0, float0, int0, short0);
//       TIntShortHashMap tIntShortHashMap2 = new TIntShortHashMap((TIntShortMap) tIntShortHashMap1);
//       TShortCollection tShortCollection0 = tIntShortHashMap2.valueCollection();
//       assertEquals(0, tIntShortHashMap1.getNoEntryKey());
//       assertEquals(0, tIntShortHashMap1.getNoEntryValue());
//       assertEquals(0, tShortCollection0.getNoEntryValue());
//   }

//   @Test
//   public void test17()  throws Throwable  {
//       int int0 = 1934;
//       float float0 = 0.0F;
//       short short0 = (short) (-1330);
//       int int1 = 1799;
//       TIntShortHashMap tIntShortHashMap0 = new TIntShortHashMap(int1);
//       boolean boolean0 = false;
//       tIntShortHashMap0.reenableAutoCompaction(boolean0);
//       PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
//       PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
//       ObjectInputStream objectInputStream0 = null;
//       try {
//         objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
//         fail("Expecting exception: InterruptedIOException");
//       
//       } catch(InterruptedIOException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }
}
