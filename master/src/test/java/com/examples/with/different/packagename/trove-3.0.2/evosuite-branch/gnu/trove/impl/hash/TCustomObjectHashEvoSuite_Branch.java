/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.custom_hash.TObjectByteCustomHashMap;
import gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap;
import gnu.trove.map.hash.TCustomHashMap;
import gnu.trove.set.hash.TCustomHashSet;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCustomObjectHashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TCustomObjectHash.<init>(Lgnu/trove/strategy/HashingStrategy;)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashMap<Object, String> tCustomHashMap0 = new TCustomHashMap<Object, String>((HashingStrategy<? super Object>) identityHashingStrategy0);
      assertEquals(0, tCustomHashMap0.size());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TCustomObjectHash.hash(Ljava/lang/Object;)I: root-Branch
   * 2 gnu.trove.impl.hash.TCustomObjectHash.<init>(Lgnu/trove/strategy/HashingStrategy;I)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashSet<Object> tCustomHashSet0 = new TCustomHashSet<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, (-29));
      tCustomHashSet0.add((Object) tCustomHashSet0);
      assertEquals(false, tCustomHashSet0.isEmpty());
      assertEquals(1, tCustomHashSet0.size());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TCustomObjectHash.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   * 2 gnu.trove.impl.hash.TCustomObjectHash.<init>(Lgnu/trove/strategy/HashingStrategy;IF)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
      TCustomHashMap<Integer, String> tCustomHashMap0 = new TCustomHashMap<Integer, String>((HashingStrategy<? super Integer>) identityHashingStrategy0, 336, (float) 336);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tCustomHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(77, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\f\u0001\u0000\u0000\u0000C\uFFFD\u0000\u0000C\uFFFD\u0000\u0000sr\u0000*gnu.trove.strategy.IdentityHashingStrategy\uFFFD\uFFFD\uFFFDgQ\uFFFD\uFFFDX\u0002\u0000\u0000xp", byteArrayOutputStream0.toString());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TCustomObjectHash.<init>()V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TObjectDoubleCustomHashMap<Object> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Object>();
      assertEquals(0, tObjectDoubleCustomHashMap0.size());
  }

  //Test case number: 4
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TCustomObjectHash.equals(Ljava/lang/Object;Ljava/lang/Object;)Z: I4 Branch 1 IF_ACMPEQ L100 - false
   * 2 gnu.trove.impl.hash.TCustomObjectHash.equals(Ljava/lang/Object;Ljava/lang/Object;)Z: I10 Branch 2 IFEQ L100 - true
   * 3 gnu.trove.impl.hash.TCustomObjectHash.hash(Ljava/lang/Object;)I: root-Branch
   * 4 gnu.trove.impl.hash.TCustomObjectHash.<init>(Lgnu/trove/strategy/HashingStrategy;IF)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectByteCustomHashMap<String> tObjectByteCustomHashMap0 = new TObjectByteCustomHashMap<String>((HashingStrategy<? super String>) identityHashingStrategy0, 898, (float) 898);
      tObjectByteCustomHashMap0.putIfAbsent(" >", (byte) (-127));
      assertEquals(1, tObjectByteCustomHashMap0.size());
      
      byte byte0 = tObjectByteCustomHashMap0.get((Object) "/");
      assertEquals((byte)0, byte0);
  }
}
