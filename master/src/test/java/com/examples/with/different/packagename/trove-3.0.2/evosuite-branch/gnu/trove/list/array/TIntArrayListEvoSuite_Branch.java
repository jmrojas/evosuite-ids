/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.list.array;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TIntCollection;
import gnu.trove.function.TIntFunction;
import gnu.trove.impl.sync.TSynchronizedIntCollection;
import gnu.trove.impl.sync.TSynchronizedRandomAccessIntList;
import gnu.trove.impl.unmodifiable.TUnmodifiableIntList;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessIntList;
import gnu.trove.list.TIntList;
import gnu.trove.list.array.TIntArrayList;
import gnu.trove.procedure.TIntProcedure;
import gnu.trove.set.hash.TIntHashSet;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Random;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntArrayListEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.wrap([I)Lgnu/trove/list/array/TIntArrayList;: root-Branch
   * 2 gnu.trove.list.array.TIntArrayList.<init>([IIZ)V: I18 Branch 3 IFNONNULL L126 - false
   * 3 gnu.trove.list.array.TIntArrayList.wrap([II)Lgnu/trove/list/array/TIntArrayList;: root-Branch
   * 4 gnu.trove.list.array.TIntArrayList.<init>([IIZ)V: I7 Branch 2 IFNE L123 - true
   */

  @Test
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try {
        TIntArrayList.wrap((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // values can not be null
         //
      }
  }

  //Test case number: 1
  /*
   * 7 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.fill(I)V: root-Branch
   * 2 gnu.trove.list.array.TIntArrayList.add([I)V: root-Branch
   * 3 gnu.trove.list.array.TIntArrayList.<init>(I)V: root-Branch
   * 4 gnu.trove.list.array.TIntArrayList.add([III)V: root-Branch
   * 5 gnu.trove.list.array.TIntArrayList.<init>([I)V: root-Branch
   * 6 gnu.trove.list.array.TIntArrayList.<init>(II)V: root-Branch
   * 7 gnu.trove.list.array.TIntArrayList.ensureCapacity(I)V: I6 Branch 4 IF_ICMPLE L184 - true
   */

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[10];
      TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
      tIntArrayList0.fill(0);
      assertEquals(10, tIntArrayList0.size());
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals("{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}", tIntArrayList0.toString());
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.indexOf(I)I: root-Branch
   * 2 gnu.trove.list.array.TIntArrayList.indexOf(II)I: I8 Branch 82 IF_ICMPGE L870 - true
   * 3 gnu.trove.list.array.TIntArrayList.<init>()V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      int int0 = tIntArrayList0.indexOf(770);
      assertEquals((-1), int0);
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals(true, tIntArrayList0.isEmpty());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.setQuick(II)V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      tIntArrayList0.setQuick(0, 91);
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals(true, tIntArrayList0.isEmpty());
  }

  //Test case number: 4
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.toArray()[I: root-Branch
   * 2 gnu.trove.list.array.TIntArrayList.toArray(II)[I: root-Branch
   * 3 gnu.trove.list.array.TIntArrayList.toArray([III)[I: I3 Branch 60 IFNE L709 - false
   */

  @Test
  public void test4()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList(920);
      int[] intArray0 = tIntArrayList0.toArray();
      assertNotNull(intArray0);
      assertEquals("{}", tIntArrayList0.toString());
      assertEquals(0, tIntArrayList0.getNoEntryValue());
  }

  //Test case number: 5
  /*
   * 4 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.clear(I)V: root-Branch
   * 2 gnu.trove.list.array.TIntArrayList.clear()V: root-Branch
   * 3 gnu.trove.list.array.TIntArrayList$1.<init>([IIZ)V: root-Branch
   * 4 gnu.trove.list.array.TIntArrayList.<init>([IIZ)V: I18 Branch 3 IFNONNULL L126 - true
   */

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[2];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0);
      assertNotNull(tIntArrayList0);
      
      tIntArrayList0.clear();
      assertEquals(0, tIntArrayList0.size());
      assertEquals(true, tIntArrayList0.isEmpty());
  }

  //Test case number: 6
  /*
   * 6 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.binarySearch(I)I: root-Branch
   * 2 gnu.trove.list.array.TIntArrayList.binarySearch(III)I: I3 Branch 77 IFGE L834 - true
   * 3 gnu.trove.list.array.TIntArrayList.binarySearch(III)I: I16 Branch 78 IF_ICMPLE L837 - true
   * 4 gnu.trove.list.array.TIntArrayList.binarySearch(III)I: I38 Branch 79 IF_ICMPGT L844 - false
   * 5 gnu.trove.list.array.TIntArrayList.binarySearch(III)I: I58 Branch 80 IF_ICMPGE L848 - true
   * 6 gnu.trove.list.array.TIntArrayList.binarySearch(III)I: I70 Branch 81 IF_ICMPLE L851 - true
   */

  @Test
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[10];
      TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
      int int0 = tIntArrayList0.binarySearch(0);
      assertEquals(4, int0);
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals(10, tIntArrayList0.size());
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.set(I[I)V: root-Branch
   * 2 gnu.trove.list.array.TIntArrayList.set(I[III)V: I3 Branch 12 IFLT L326 - true
   */

  @Test
  public void test7()  throws Throwable  {
      int[] intArray0 = new int[2];
      TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
      int[] intArray1 = new int[3];
      // Undeclared exception!
      try {
        tIntArrayList0.set((-1208), intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -1208
         //
      }
  }

  //Test case number: 8
  /*
   * 6 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.swap(II)V: root-Branch
   * 2 gnu.trove.list.array.TIntArrayList.reverse()V: root-Branch
   * 3 gnu.trove.list.array.TIntArrayList.reverse(II)V: I4 Branch 51 IF_ICMPNE L626 - true
   * 4 gnu.trove.list.array.TIntArrayList.reverse(II)V: I12 Branch 52 IF_ICMPLE L629 - true
   * 5 gnu.trove.list.array.TIntArrayList.reverse(II)V: I32 Branch 53 IF_ICMPGE L632 - true
   * 6 gnu.trove.list.array.TIntArrayList.reverse(II)V: I32 Branch 53 IF_ICMPGE L632 - false
   */

  @Test
  public void test8()  throws Throwable  {
      int[] intArray0 = new int[7];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0);
      assertNotNull(tIntArrayList0);
      
      tIntArrayList0.reverse();
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals("{0, 0, 0, 0, 0, 0, 0}", tIntArrayList0.toString());
      assertEquals(0, tIntArrayList0.max());
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.sort(II)V: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      int[] intArray0 = new int[3];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0, 744);
      assertNotNull(tIntArrayList0);
      
      // Undeclared exception!
      try {
        tIntArrayList0.sort((-4), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -4
         //
      }
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.reset()V: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[3];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0, 744);
      assertNotNull(tIntArrayList0);
      
      tIntArrayList0.reset();
      assertEquals(true, tIntArrayList0.isEmpty());
      assertEquals(744, tIntArrayList0.getNoEntryValue());
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.sort()V: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      tIntArrayList0.sort();
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals(true, tIntArrayList0.isEmpty());
  }

  //Test case number: 12
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.getNoEntryValue()I: root-Branch
   * 2 gnu.trove.list.array.TIntArrayList.<init>(Lgnu/trove/TIntCollection;)V: root-Branch
   * 3 gnu.trove.list.array.TIntArrayList.addAll(Lgnu/trove/TIntCollection;)Z: I13 Branch 31 IFEQ L495 - true
   */

  @Test
  public void test12()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      TIntHashSet tIntHashSet0 = new TIntHashSet((Collection<? extends Integer>) linkedList0);
      TIntArrayList tIntArrayList0 = new TIntArrayList((TIntCollection) tIntHashSet0);
      int int0 = tIntArrayList0.getNoEntryValue();
      assertEquals(0, int0);
      assertEquals(0, tIntArrayList0.size());
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.getQuick(I)I: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList(0);
      // Undeclared exception!
      try {
        tIntArrayList0.getQuick(Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
      }
  }

  //Test case number: 14
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList$1.ensureCapacity(I)V: I6 Branch 1 IF_ICMPLE L164 - true
   * 2 gnu.trove.list.array.TIntArrayList.insert(I[III)V: I5 Branch 8 IF_ICMPNE L264 - true
   */

  @Test
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[18];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0, 0);
      assertNotNull(tIntArrayList0);
      
      tIntArrayList0.insert(0, intArray0, 0, 0);
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals(18, tIntArrayList0.size());
      assertEquals(0, tIntArrayList0.min());
  }

  //Test case number: 15
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList$1.ensureCapacity(I)V: I6 Branch 1 IF_ICMPLE L164 - false
   * 2 gnu.trove.list.array.TIntArrayList.insert(II)V: I5 Branch 7 IF_ICMPNE L243 - true
   */

  @Test
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[10];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0);
      assertNotNull(tIntArrayList0);
      
      // Undeclared exception!
      try {
        tIntArrayList0.insert(Integer.MIN_VALUE, 699);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not grow ArrayList wrapped external array
         //
      }
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.isEmpty()Z: I4 Branch 5 IFNE L201 - true
   */

  @Test
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[10];
      TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
      boolean boolean0 = tIntArrayList0.isEmpty();
      assertEquals(10, tIntArrayList0.size());
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals(false, boolean0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.isEmpty()Z: I4 Branch 5 IFNE L201 - false
   */

  @Test
  public void test17()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList(0);
      boolean boolean0 = tIntArrayList0.isEmpty();
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals(true, boolean0);
  }

  //Test case number: 18
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.trimToSize()V: I7 Branch 6 IF_ICMPLE L209 - true
   * 2 gnu.trove.list.array.TIntArrayList.size()I: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList(0, 0);
      tIntArrayList0.trimToSize();
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals(0, tIntArrayList0.size());
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.trimToSize()V: I7 Branch 6 IF_ICMPLE L209 - false
   */

  @Test
  public void test19()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      tIntArrayList0.trimToSize();
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals(0, tIntArrayList0.size());
  }

  //Test case number: 20
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.insert(II)V: I5 Branch 7 IF_ICMPNE L243 - false
   * 2 gnu.trove.list.array.TIntArrayList.add(I)Z: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      tIntArrayList0.insert(0, 0);
      assertEquals(1, tIntArrayList0.size());
      assertEquals(0, tIntArrayList0.sum());
  }

  //Test case number: 21
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.get(I)I: I5 Branch 9 IF_ICMPLT L280 - false
   * 2 gnu.trove.list.array.TIntArrayList.removeAt(I)I: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      // Undeclared exception!
      try {
        tIntArrayList0.removeAt(1864);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1864
         //
      }
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.set(II)I: I5 Branch 10 IF_ICMPLT L297 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList(1620, 1620);
      // Undeclared exception!
      try {
        tIntArrayList0.set((-2027), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2027
         //
      }
  }

  //Test case number: 23
  /*
   * 7 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.set(II)I: I5 Branch 10 IF_ICMPLT L297 - false
   * 2 gnu.trove.list.array.TIntArrayList.removeAt(I)I: root-Branch
   * 3 gnu.trove.list.array.TIntArrayList.remove(II)V: I3 Branch 16 IFNE L403 - true
   * 4 gnu.trove.list.array.TIntArrayList.remove(II)V: I8 Branch 17 IFLT L404 - false
   * 5 gnu.trove.list.array.TIntArrayList.remove(II)V: I12 Branch 18 IF_ICMPLT L404 - true
   * 6 gnu.trove.list.array.TIntArrayList.remove(II)V: I23 Branch 19 IFNE L408 - false
   * 7 gnu.trove.list.array.TIntArrayList.get(I)I: I5 Branch 9 IF_ICMPLT L280 - true
   */

  @Test
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[1];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0, 747);
      assertNotNull(tIntArrayList0);
      
      tIntArrayList0.removeAt(0);
      // Undeclared exception!
      try {
        tIntArrayList0.set(0, 747);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
      }
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.replace(II)I: I5 Branch 11 IF_ICMPLT L309 - true
   */

  @Test
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[6];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0, (-1623));
      assertNotNull(tIntArrayList0);
      
      int int0 = tIntArrayList0.replace(0, Integer.MAX_VALUE);
      assertEquals("{2147483647, 0, 0, 0, 0, 0}", tIntArrayList0.toString());
      assertEquals(0, int0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.replace(II)I: I5 Branch 11 IF_ICMPLT L309 - false
   */

  @Test
  public void test25()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList(10, 10);
      // Undeclared exception!
      try {
        tIntArrayList0.replace(10, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 10
         //
      }
  }

  //Test case number: 26
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.set(I[III)V: I3 Branch 12 IFLT L326 - false
   * 2 gnu.trove.list.array.TIntArrayList.set(I[III)V: I9 Branch 13 IF_ICMPLE L326 - false
   */

  @Test
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[10];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0);
      assertNotNull(tIntArrayList0);
      
      // Undeclared exception!
      try {
        tIntArrayList0.set(210, intArray0, 1175, 221);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 210
         //
      }
  }

  //Test case number: 27
  /*
   * 5 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.set(I[III)V: I9 Branch 13 IF_ICMPLE L326 - true
   * 2 gnu.trove.list.array.TIntArrayList.fill(III)V: I5 Branch 76 IF_ICMPLE L816 - false
   * 3 gnu.trove.list.array.TIntArrayList.set(I[I)V: root-Branch
   * 4 gnu.trove.list.array.TIntArrayList.set(I[III)V: I3 Branch 12 IFLT L326 - false
   * 5 gnu.trove.list.array.TIntArrayList.ensureCapacity(I)V: I6 Branch 4 IF_ICMPLE L184 - false
   */

  @Test
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[6];
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      tIntArrayList0.fill(1, 1436, 0);
      tIntArrayList0.set(225, intArray0);
      assertEquals("{}", tIntArrayList0.toString());
      assertEquals(1436, tIntArrayList0.size());
  }

  //Test case number: 28
  /*
   * 4 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.remove(I)Z: I8 Branch 14 IF_ICMPGE L383 - true
   * 2 gnu.trove.list.array.TIntArrayList.removeAll([I)Z: I12 Branch 48 IFLE L601 - true
   * 3 gnu.trove.list.array.TIntArrayList.removeAll([I)Z: I12 Branch 48 IFLE L601 - false
   * 4 gnu.trove.list.array.TIntArrayList.removeAll([I)Z: I20 Branch 49 IFEQ L602 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      int[] intArray0 = new int[1];
      boolean boolean0 = tIntArrayList0.removeAll(intArray0);
      assertEquals(false, boolean0);
      assertEquals(0, tIntArrayList0.getNoEntryValue());
  }

  //Test case number: 29
  /*
   * 13 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.remove(I)Z: I16 Branch 15 IF_ICMPNE L384 - true
   * 2 gnu.trove.list.array.TIntArrayList.removeAll(Lgnu/trove/TIntCollection;)Z: I4 Branch 45 IF_ACMPNE L582 - true
   * 3 gnu.trove.list.array.TIntArrayList.removeAll(Lgnu/trove/TIntCollection;)Z: I37 Branch 47 IFEQ L590 - true
   * 4 gnu.trove.list.array.TIntArrayList.iterator()Lgnu/trove/iterator/TIntIterator;: root-Branch
   * 5 gnu.trove.list.array.TIntArrayList.removeAll(Lgnu/trove/TIntCollection;)Z: I26 Branch 46 IFEQ L588 - true
   * 6 gnu.trove.list.array.TIntArrayList.removeAll(Lgnu/trove/TIntCollection;)Z: I26 Branch 46 IFEQ L588 - false
   * 7 gnu.trove.list.array.TIntArrayList.removeAll(Lgnu/trove/TIntCollection;)Z: I37 Branch 47 IFEQ L590 - false
   * 8 gnu.trove.list.array.TIntArrayList.remove(I)Z: I8 Branch 14 IF_ICMPGE L383 - false
   * 9 gnu.trove.list.array.TIntArrayList.remove(I)Z: I16 Branch 15 IF_ICMPNE L384 - false
   * 10 gnu.trove.list.array.TIntArrayList$TIntArrayIterator.next()I: root-Branch
   * 11 gnu.trove.list.array.TIntArrayList$TIntArrayIterator.<init>(Lgnu/trove/list/array/TIntArrayList;I)V: root-Branch
   * 12 gnu.trove.list.array.TIntArrayList$TIntArrayIterator.hasNext()Z: I7 Branch 102 IF_ICMPGE L1005 - true
   * 13 gnu.trove.list.array.TIntArrayList$TIntArrayIterator.hasNext()Z: I7 Branch 102 IF_ICMPGE L1005 - false
   */

  @Test
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[10];
      TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
      intArray0[2] = Integer.MIN_VALUE;
      TIntArrayList tIntArrayList1 = TIntArrayList.wrap(intArray0);
      boolean boolean0 = tIntArrayList0.removeAll((TIntCollection) tIntArrayList1);
      assertEquals(1, tIntArrayList0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.remove(II)V: I3 Branch 16 IFNE L403 - false
   */

  @Test
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[1];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0);
      assertNotNull(tIntArrayList0);
      
      tIntArrayList0.remove((-1366), 0);
      assertEquals(0, tIntArrayList0.getNoEntryValue());
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.remove(II)V: I8 Branch 17 IFLT L404 - true
   */

  @Test
  public void test31()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      // Undeclared exception!
      try {
        tIntArrayList0.remove((-2147479168), Integer.MIN_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -2147479168
         //
      }
  }

  //Test case number: 32
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.remove(II)V: I12 Branch 18 IF_ICMPLT L404 - false
   * 2 gnu.trove.list.array.TIntArrayList.retainAll([I)Z: I21 Branch 40 IFLE L555 - false
   * 3 gnu.trove.list.array.TIntArrayList.retainAll([I)Z: I29 Branch 41 IFGE L556 - false
   */

  @Test
  public void test32()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList(1608, (-921));
      int[] intArray0 = new int[8];
      intArray0[0] = 1896;
      intArray0[1] = 1608;
      intArray0[2] = (-884);
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1608;
      intArray0[6] = 1608;
      intArray0[7] = 1608;
      // Undeclared exception!
      try {
        tIntArrayList0.retainAll(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1607
         //
      }
  }

  //Test case number: 33
  /*
   * 6 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.remove(II)V: I23 Branch 19 IFNE L408 - true
   * 2 gnu.trove.list.array.TIntArrayList.remove(II)V: I45 Branch 20 IF_ICMPNE L412 - true
   * 3 gnu.trove.list.array.TIntArrayList.removeAll(Lgnu/trove/TIntCollection;)Z: I4 Branch 45 IF_ACMPNE L582 - false
   * 4 gnu.trove.list.array.TIntArrayList.removeAll(Lgnu/trove/TIntCollection;)Z: I26 Branch 46 IFEQ L588 - true
   * 5 gnu.trove.list.array.TIntArrayList.removeAll(Lgnu/trove/TIntCollection;)Z: I26 Branch 46 IFEQ L588 - false
   * 6 gnu.trove.list.array.TIntArrayList.removeAll(Lgnu/trove/TIntCollection;)Z: I37 Branch 47 IFEQ L590 - false
   */

  @Test
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[1] = 1797;
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0, 0);
      assertNotNull(tIntArrayList0);
      
      TUnmodifiableIntList tUnmodifiableIntList0 = new TUnmodifiableIntList((TIntList) tIntArrayList0);
      boolean boolean0 = tIntArrayList0.removeAll((TIntCollection) tUnmodifiableIntList0);
      assertEquals(5, tIntArrayList0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 34
  /*
   * 6 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.remove(II)V: I45 Branch 20 IF_ICMPNE L412 - false
   * 2 gnu.trove.list.array.TIntArrayList.removeAll([I)Z: I20 Branch 49 IFEQ L602 - false
   * 3 gnu.trove.list.array.TIntArrayList.removeAll([I)Z: I12 Branch 48 IFLE L601 - true
   * 4 gnu.trove.list.array.TIntArrayList.removeAll([I)Z: I12 Branch 48 IFLE L601 - false
   * 5 gnu.trove.list.array.TIntArrayList.remove(II)V: I23 Branch 19 IFNE L408 - true
   * 6 gnu.trove.list.array.TIntArrayList.remove(I)Z: I16 Branch 15 IF_ICMPNE L384 - true
   */

  @Test
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[7];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0);
      assertNotNull(tIntArrayList0);
      
      intArray0[6] = 1267;
      boolean boolean0 = tIntArrayList0.removeAll(intArray0);
      assertEquals(true, tIntArrayList0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 35
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.containsAll(Ljava/util/Collection;)Z: I16 Branch 22 IFEQ L437 - true
   * 2 gnu.trove.list.array.TIntArrayList.containsAll(Ljava/util/Collection;)Z: I8 Branch 21 IFEQ L436 - false
   */

  @Test
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[4];
      TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "{}");
      boolean boolean0 = tIntArrayList0.containsAll((Collection<?>) linkedList0);
      assertEquals(4, tIntArrayList0.size());
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals(false, boolean0);
  }

  //Test case number: 36
  /*
   * 6 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.containsAll(Lgnu/trove/TIntCollection;)Z: I4 Branch 24 IF_ACMPNE L453 - true
   * 2 gnu.trove.list.array.TIntArrayList.containsAll(Lgnu/trove/TIntCollection;)Z: I18 Branch 25 IFEQ L457 - false
   * 3 gnu.trove.list.array.TIntArrayList.containsAll(Lgnu/trove/TIntCollection;)Z: I29 Branch 26 IFNE L459 - false
   * 4 gnu.trove.list.array.TIntArrayList.lastIndexOf(II)I: I7 Branch 84 IFLE L887 - true
   * 5 gnu.trove.list.array.TIntArrayList.contains(I)Z: I5 Branch 86 IFLT L898 - true
   * 6 gnu.trove.list.array.TIntArrayList.lastIndexOf(I)I: root-Branch
   */

  @Test
  public void test36()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList(1556, 1556);
      int[] intArray0 = new int[9];
      TIntHashSet tIntHashSet0 = new TIntHashSet(intArray0);
      boolean boolean0 = tIntArrayList0.containsAll((TIntCollection) tIntHashSet0);
      assertEquals(false, boolean0);
      assertEquals(1556, tIntArrayList0.getNoEntryValue());
  }

  //Test case number: 37
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.containsAll(Lgnu/trove/TIntCollection;)Z: I4 Branch 24 IF_ACMPNE L453 - false
   */

  @Test
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[2];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0);
      assertNotNull(tIntArrayList0);
      
      boolean boolean0 = tIntArrayList0.containsAll((TIntCollection) tIntArrayList0);
      assertEquals(true, boolean0);
      assertEquals(0, tIntArrayList0.getNoEntryValue());
  }

  //Test case number: 38
  /*
   * 7 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.containsAll(Lgnu/trove/TIntCollection;)Z: I18 Branch 25 IFEQ L457 - true
   * 2 gnu.trove.list.array.TIntArrayList.containsAll(Lgnu/trove/TIntCollection;)Z: I29 Branch 26 IFNE L459 - true
   * 3 gnu.trove.list.array.TIntArrayList.containsAll(Lgnu/trove/TIntCollection;)Z: I4 Branch 24 IF_ACMPNE L453 - true
   * 4 gnu.trove.list.array.TIntArrayList.containsAll(Lgnu/trove/TIntCollection;)Z: I18 Branch 25 IFEQ L457 - false
   * 5 gnu.trove.list.array.TIntArrayList.lastIndexOf(II)I: I7 Branch 84 IFLE L887 - false
   * 6 gnu.trove.list.array.TIntArrayList.lastIndexOf(II)I: I15 Branch 85 IF_ICMPNE L888 - false
   * 7 gnu.trove.list.array.TIntArrayList.contains(I)Z: I5 Branch 86 IFLT L898 - false
   */

  @Test
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[4];
      TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
      TSynchronizedIntCollection tSynchronizedIntCollection0 = new TSynchronizedIntCollection((TIntCollection) tIntArrayList0);
      boolean boolean0 = tIntArrayList0.containsAll((TIntCollection) tSynchronizedIntCollection0);
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals(4, tIntArrayList0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 39
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.containsAll([I)Z: I8 Branch 27 IFLE L469 - true
   * 2 gnu.trove.list.array.TIntArrayList.containsAll([I)Z: I8 Branch 27 IFLE L469 - false
   * 3 gnu.trove.list.array.TIntArrayList.containsAll([I)Z: I16 Branch 28 IFNE L470 - true
   */

  @Test
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[6];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0, (-1623));
      assertNotNull(tIntArrayList0);
      
      boolean boolean0 = tIntArrayList0.containsAll(intArray0);
      assertEquals(-1623, tIntArrayList0.getNoEntryValue());
      assertEquals(true, boolean0);
  }

  //Test case number: 40
  /*
   * 4 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.containsAll([I)Z: I16 Branch 28 IFNE L470 - false
   * 2 gnu.trove.list.array.TIntArrayList.lastIndexOf(II)I: I7 Branch 84 IFLE L887 - true
   * 3 gnu.trove.list.array.TIntArrayList.contains(I)Z: I5 Branch 86 IFLT L898 - true
   * 4 gnu.trove.list.array.TIntArrayList.containsAll([I)Z: I8 Branch 27 IFLE L469 - false
   */

  @Test
  public void test40()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      TIntHashSet tIntHashSet0 = new TIntHashSet(0);
      boolean boolean0 = tIntArrayList0.containsAll(tIntHashSet0._set);
      assertEquals(false, boolean0);
      assertEquals(0, tIntArrayList0.getNoEntryValue());
  }

  //Test case number: 41
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.addAll(Ljava/util/Collection;)Z: I12 Branch 29 IFEQ L481 - false
   * 2 gnu.trove.list.array.TIntArrayList.addAll(Ljava/util/Collection;)Z: I27 Branch 30 IFEQ L483 - false
   * 3 gnu.trove.list.array.TIntArrayList.addAll(Ljava/util/Collection;)Z: I12 Branch 29 IFEQ L481 - true
   */

  @Test
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[4];
      TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) 0);
      TSynchronizedIntCollection tSynchronizedIntCollection0 = new TSynchronizedIntCollection((TIntCollection) tIntArrayList0);
      boolean boolean0 = tSynchronizedIntCollection0.addAll((Collection<? extends Integer>) linkedList0);
      assertEquals(5, tSynchronizedIntCollection0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 42
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.addAll([I)Z: I18 Branch 33 IF_ICMPGE L508 - true
   * 2 gnu.trove.list.array.TIntArrayList.addAll([I)Z: I18 Branch 33 IF_ICMPGE L508 - false
   * 3 gnu.trove.list.array.TIntArrayList.addAll([I)Z: I28 Branch 34 IFEQ L509 - false
   */

  @Test
  public void test42()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList(0, 0);
      int[] intArray0 = new int[10];
      boolean boolean0 = tIntArrayList0.addAll(intArray0);
      assertEquals("{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}", tIntArrayList0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 43
  /*
   * 5 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.retainAll(Ljava/util/Collection;)Z: I13 Branch 35 IFEQ L522 - true
   * 2 gnu.trove.list.array.TIntArrayList.retainAll(Ljava/util/Collection;)Z: I13 Branch 35 IFEQ L522 - false
   * 3 gnu.trove.list.array.TIntArrayList.retainAll(Ljava/util/Collection;)Z: I21 Branch 36 IFGT L523 - false
   * 4 gnu.trove.list.array.TIntArrayList$TIntArrayIterator.remove()V: I5 Branch 103 IF_ICMPNE L1023 - true
   * 5 gnu.trove.list.array.TIntArrayList$TIntArrayIterator.remove()V: I26 Branch 104 IF_ICMPGE L1028 - false
   */

  @Test
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[4];
      TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = tIntArrayList0.retainAll((Collection<?>) linkedList0);
      assertEquals(true, boolean0);
      assertEquals(true, tIntArrayList0.isEmpty());
  }

  //Test case number: 44
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.retainAll(Ljava/util/Collection;)Z: I21 Branch 36 IFGT L523 - true
   * 2 gnu.trove.list.array.TIntArrayList.retainAll(Ljava/util/Collection;)Z: I13 Branch 35 IFEQ L522 - true
   * 3 gnu.trove.list.array.TIntArrayList.retainAll(Ljava/util/Collection;)Z: I13 Branch 35 IFEQ L522 - false
   */

  @Test
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[4];
      TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) 0);
      TSynchronizedIntCollection tSynchronizedIntCollection0 = new TSynchronizedIntCollection((TIntCollection) tIntArrayList0);
      boolean boolean0 = tSynchronizedIntCollection0.retainAll((Collection<?>) linkedList0);
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals(false, boolean0);
      assertEquals(4, tIntArrayList0.size());
  }

  //Test case number: 45
  /*
   * 4 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.retainAll(Lgnu/trove/TIntCollection;)Z: I22 Branch 38 IFEQ L539 - false
   * 2 gnu.trove.list.array.TIntArrayList.retainAll(Lgnu/trove/TIntCollection;)Z: I29 Branch 39 IFNE L540 - true
   * 3 gnu.trove.list.array.TIntArrayList.retainAll(Lgnu/trove/TIntCollection;)Z: I4 Branch 37 IF_ACMPNE L534 - false
   * 4 gnu.trove.list.array.TIntArrayList.retainAll(Lgnu/trove/TIntCollection;)Z: I22 Branch 38 IFEQ L539 - true
   */

  @Test
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[10];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0);
      assertNotNull(tIntArrayList0);
      
      TIntArrayList tIntArrayList1 = TIntArrayList.wrap(intArray0);
      boolean boolean0 = tIntArrayList0.retainAll((TIntCollection) tIntArrayList1);
      assertEquals(false, boolean0);
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals(10, tIntArrayList0.size());
  }

  //Test case number: 46
  /*
   * 6 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.retainAll(Lgnu/trove/TIntCollection;)Z: I29 Branch 39 IFNE L540 - false
   * 2 gnu.trove.list.array.TIntArrayList.retainAll(Lgnu/trove/TIntCollection;)Z: I4 Branch 37 IF_ACMPNE L534 - true
   * 3 gnu.trove.list.array.TIntArrayList.retainAll(Lgnu/trove/TIntCollection;)Z: I22 Branch 38 IFEQ L539 - true
   * 4 gnu.trove.list.array.TIntArrayList.retainAll(Lgnu/trove/TIntCollection;)Z: I22 Branch 38 IFEQ L539 - false
   * 5 gnu.trove.list.array.TIntArrayList$TIntArrayIterator.remove()V: I5 Branch 103 IF_ICMPNE L1023 - true
   * 6 gnu.trove.list.array.TIntArrayList$TIntArrayIterator.remove()V: I26 Branch 104 IF_ICMPGE L1028 - false
   */

  @Test
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[6];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0, (-1623));
      assertNotNull(tIntArrayList0);
      
      TIntHashSet tIntHashSet0 = new TIntHashSet(0);
      boolean boolean0 = tIntArrayList0.retainAll((TIntCollection) tIntHashSet0);
      assertEquals("{}", tIntArrayList0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 47
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.retainAll([I)Z: I21 Branch 40 IFLE L555 - true
   * 2 gnu.trove.list.array.TIntArrayList.retainAll([I)Z: I29 Branch 41 IFGE L556 - true
   * 3 gnu.trove.list.array.TIntArrayList.retainAll([I)Z: I21 Branch 40 IFLE L555 - false
   */

  @Test
  public void test47()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList(920);
      int[] intArray0 = new int[10];
      boolean boolean0 = tIntArrayList0.retainAll(intArray0);
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals(false, boolean0);
      assertEquals(0, tIntArrayList0.size());
  }

  //Test case number: 48
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.removeAll(Ljava/util/Collection;)Z: I12 Branch 42 IFEQ L568 - false
   * 2 gnu.trove.list.array.TIntArrayList.removeAll(Ljava/util/Collection;)Z: I20 Branch 43 IFEQ L569 - true
   * 3 gnu.trove.list.array.TIntArrayList.removeAll(Ljava/util/Collection;)Z: I12 Branch 42 IFEQ L568 - true
   */

  @Test
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[1];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0, 747);
      assertNotNull(tIntArrayList0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      boolean boolean0 = tIntArrayList0.removeAll((Collection<?>) linkedList0);
      assertEquals(false, boolean0);
      assertEquals(747, tIntArrayList0.getNoEntryValue());
  }

  //Test case number: 49
  /*
   * 8 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.removeAll(Ljava/util/Collection;)Z: I20 Branch 43 IFEQ L569 - false
   * 2 gnu.trove.list.array.TIntArrayList.removeAll(Ljava/util/Collection;)Z: I32 Branch 44 IFEQ L571 - false
   * 3 gnu.trove.list.array.TIntArrayList.remove(II)V: I3 Branch 16 IFNE L403 - true
   * 4 gnu.trove.list.array.TIntArrayList.remove(II)V: I8 Branch 17 IFLT L404 - false
   * 5 gnu.trove.list.array.TIntArrayList.remove(II)V: I12 Branch 18 IF_ICMPLT L404 - true
   * 6 gnu.trove.list.array.TIntArrayList.remove(II)V: I23 Branch 19 IFNE L408 - false
   * 7 gnu.trove.list.array.TIntArrayList.remove(I)Z: I8 Branch 14 IF_ICMPGE L383 - false
   * 8 gnu.trove.list.array.TIntArrayList.remove(I)Z: I16 Branch 15 IF_ICMPNE L384 - false
   */

  @Test
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[4];
      TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) 0);
      boolean boolean0 = tIntArrayList0.removeAll((Collection<?>) linkedList0);
      assertEquals(3, tIntArrayList0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 50
  /*
   * 6 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.removeAll(Ljava/util/Collection;)Z: I32 Branch 44 IFEQ L571 - true
   * 2 gnu.trove.list.array.TIntArrayList.resetQuick()V: root-Branch
   * 3 gnu.trove.list.array.TIntArrayList.removeAll(Ljava/util/Collection;)Z: I12 Branch 42 IFEQ L568 - true
   * 4 gnu.trove.list.array.TIntArrayList.removeAll(Ljava/util/Collection;)Z: I12 Branch 42 IFEQ L568 - false
   * 5 gnu.trove.list.array.TIntArrayList.removeAll(Ljava/util/Collection;)Z: I20 Branch 43 IFEQ L569 - false
   * 6 gnu.trove.list.array.TIntArrayList.remove(I)Z: I8 Branch 14 IF_ICMPGE L383 - true
   */

  @Test
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[4];
      TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
      assertEquals(false, tIntArrayList0.isEmpty());
      
      tIntArrayList0.resetQuick();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) 0);
      boolean boolean0 = tIntArrayList0.removeAll((Collection<?>) linkedList0);
      assertEquals(false, boolean0);
  }

  //Test case number: 51
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.transformValues(Lgnu/trove/function/TIntFunction;)V: I8 Branch 50 IFLE L612 - true
   */

  @Test
  public void test51()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList(0);
      tIntArrayList0.transformValues((TIntFunction) null);
      assertEquals(0, tIntArrayList0.size());
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals(true, tIntArrayList0.isEmpty());
  }

  //Test case number: 52
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.transformValues(Lgnu/trove/function/TIntFunction;)V: I8 Branch 50 IFLE L612 - false
   */

  @Test
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[3];
      TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
      // Undeclared exception!
      try {
        tIntArrayList0.transformValues((TIntFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 53
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.reverse(II)V: I4 Branch 51 IF_ICMPNE L626 - false
   * 2 gnu.trove.list.array.TIntArrayList.reverse()V: root-Branch
   */

  @Test
  public void test53()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      tIntArrayList0.reverse();
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals(true, tIntArrayList0.isEmpty());
  }

  //Test case number: 54
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.reverse(II)V: I12 Branch 52 IF_ICMPLE L629 - false
   * 2 gnu.trove.list.array.TIntArrayList.reverse(II)V: I4 Branch 51 IF_ICMPNE L626 - true
   */

  @Test
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[6];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0);
      assertNotNull(tIntArrayList0);
      
      // Undeclared exception!
      try {
        tIntArrayList0.reverse(647, (-42));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // from cannot be greater than to
         //
      }
  }

  //Test case number: 55
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.shuffle(Ljava/util/Random;)V: I9 Branch 54 IF_ICMPLE L640 - true
   * 2 gnu.trove.list.array.TIntArrayList.shuffle(Ljava/util/Random;)V: I9 Branch 54 IF_ICMPLE L640 - false
   * 3 gnu.trove.list.array.TIntArrayList.swap(II)V: root-Branch
   */

//   @Test
//   public void test55()  throws Throwable  {
//       int[] intArray0 = new int[7];
//       TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
//       Random random0 = new Random();
//       tIntArrayList0.shuffle(random0);
//       assertEquals(0.9589795619386362, random0.nextDouble(), 0.01D);
//       assertEquals(true, random0.nextBoolean());
//   }

  //Test case number: 56
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.subList(II)Lgnu/trove/list/TIntList;: I4 Branch 55 IF_ICMPGE L663 - false
   */

  @Test
  public void test56()  throws Throwable  {
      int[] intArray0 = new int[1];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0);
      assertNotNull(tIntArrayList0);
      
      // Undeclared exception!
      try {
        tIntArrayList0.subList(Integer.MAX_VALUE, 1096696463);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // end index 1096696463 greater than begin index 2147483647
         //
      }
  }

  //Test case number: 57
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.subList(II)Lgnu/trove/list/TIntList;: I26 Branch 56 IFGE L667 - false
   * 2 gnu.trove.list.array.TIntArrayList.subList(II)Lgnu/trove/list/TIntList;: I4 Branch 55 IF_ICMPGE L663 - true
   */

  @Test
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[9];
      TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
      // Undeclared exception!
      try {
        tIntArrayList0.subList((-1262), 542);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // begin index can not be < 0
         //
      }
  }

  //Test case number: 58
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.subList(II)Lgnu/trove/list/TIntList;: I40 Branch 57 IF_ICMPLE L670 - false
   * 2 gnu.trove.list.array.TIntArrayList.subList(II)Lgnu/trove/list/TIntList;: I26 Branch 56 IFGE L667 - true
   */

  @Test
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[3];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0);
      assertNotNull(tIntArrayList0);
      
      // Undeclared exception!
      try {
        tIntArrayList0.subList(66, 96);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // end index < 3
         //
      }
  }

  //Test case number: 59
  /*
   * 5 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.subList(II)Lgnu/trove/list/TIntList;: I73 Branch 58 IF_ICMPGE L674 - false
   * 2 gnu.trove.list.array.TIntArrayList.subList(II)Lgnu/trove/list/TIntList;: I4 Branch 55 IF_ICMPGE L663 - true
   * 3 gnu.trove.list.array.TIntArrayList.subList(II)Lgnu/trove/list/TIntList;: I26 Branch 56 IFGE L667 - true
   * 4 gnu.trove.list.array.TIntArrayList.subList(II)Lgnu/trove/list/TIntList;: I40 Branch 57 IF_ICMPLE L670 - true
   * 5 gnu.trove.list.array.TIntArrayList.subList(II)Lgnu/trove/list/TIntList;: I73 Branch 58 IF_ICMPGE L674 - true
   */

  @Test
  public void test59()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList(1683);
      TIntArrayList tIntArrayList1 = (TIntArrayList)tIntArrayList0.subList(0, 1683);
      assertEquals(0, tIntArrayList1.getNoEntryValue());
      assertEquals("{}", tIntArrayList1.toString());
      assertNotNull(tIntArrayList1);
  }

  //Test case number: 60
  /*
   * 4 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.toArray([I)[I: I11 Branch 59 IF_ICMPLE L698 - true
   * 2 gnu.trove.list.array.TIntArrayList.toArray([III)[I: I3 Branch 60 IFNE L709 - true
   * 3 gnu.trove.list.array.TIntArrayList.toArray([III)[I: I11 Branch 61 IFLT L712 - false
   * 4 gnu.trove.list.array.TIntArrayList.toArray([III)[I: I15 Branch 62 IF_ICMPLT L712 - true
   */

  @Test
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[1];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0, 747);
      assertNotNull(tIntArrayList0);
      
      int[] intArray1 = tIntArrayList0.toArray(intArray0);
      assertNotNull(intArray1);
      assertEquals(747, tIntArrayList0.getNoEntryValue());
  }

  //Test case number: 61
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.toArray([I)[I: I11 Branch 59 IF_ICMPLE L698 - false
   * 2 gnu.trove.list.array.TIntArrayList.toArray([III)[I: I3 Branch 60 IFNE L709 - false
   */

  @Test
  public void test61()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      int[] intArray0 = new int[1];
      int[] intArray1 = tIntArrayList0.toArray(intArray0);
      assertNotNull(intArray1);
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals("{}", tIntArrayList0.toString());
  }

  //Test case number: 62
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.toArray([III)[I: I11 Branch 61 IFLT L712 - true
   */

  @Test
  public void test62()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList(1683);
      int[] intArray0 = new int[24];
      // Undeclared exception!
      try {
        tIntArrayList0.toArray(intArray0, (-726), 1683);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -726
         //
      }
  }

  //Test case number: 63
  /*
   * 4 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.toArray([III)[I: I15 Branch 62 IF_ICMPLT L712 - false
   * 2 gnu.trove.list.array.TIntArrayList.toArray(II)[I: root-Branch
   * 3 gnu.trove.list.array.TIntArrayList.toArray([III)[I: I3 Branch 60 IFNE L709 - true
   * 4 gnu.trove.list.array.TIntArrayList.toArray([III)[I: I11 Branch 61 IFLT L712 - false
   */

  @Test
  public void test63()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      // Undeclared exception!
      try {
        tIntArrayList0.toArray(1224, 276);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1224
         //
      }
  }

  //Test case number: 64
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.toArray([IIII)[I: I3 Branch 63 IFNE L722 - true
   * 2 gnu.trove.list.array.TIntArrayList.toArray([IIII)[I: I11 Branch 64 IFLT L725 - false
   * 3 gnu.trove.list.array.TIntArrayList.toArray([IIII)[I: I15 Branch 65 IF_ICMPLT L725 - false
   */

  @Test
  public void test64()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try {
        tIntArrayList0.toArray(intArray0, 395, 395, 395);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 395
         //
      }
  }

  //Test case number: 65
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.toArray([IIII)[I: I3 Branch 63 IFNE L722 - false
   */

  @Test
  public void test65()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      int[] intArray0 = new int[4];
      int[] intArray1 = tIntArrayList0.toArray(intArray0, Integer.MAX_VALUE, 1801, 0);
      assertNotNull(intArray1);
      assertEquals(0, tIntArrayList0.size());
      assertEquals(0, tIntArrayList0.getNoEntryValue());
  }

  //Test case number: 66
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.toArray([IIII)[I: I11 Branch 64 IFLT L725 - true
   */

  @Test
  public void test66()  throws Throwable  {
      int[] intArray0 = new int[2];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0);
      assertNotNull(tIntArrayList0);
      
      TIntHashSet tIntHashSet0 = new TIntHashSet(2, 2);
      // Undeclared exception!
      try {
        tIntArrayList0.toArray(tIntHashSet0._set, (-748), (-748), (-1933));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -748
         //
      }
  }

  //Test case number: 67
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.toArray([IIII)[I: I15 Branch 65 IF_ICMPLT L725 - true
   * 2 gnu.trove.list.array.TIntArrayList.toArray([IIII)[I: I3 Branch 63 IFNE L722 - true
   * 3 gnu.trove.list.array.TIntArrayList.toArray([IIII)[I: I11 Branch 64 IFLT L725 - false
   */

  @Test
  public void test67()  throws Throwable  {
      int[] intArray0 = new int[10];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0, 0);
      assertNotNull(tIntArrayList0);
      
      // Undeclared exception!
      try {
        tIntArrayList0.toArray(intArray0, 0, 1433, 873);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 68
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.equals(Ljava/lang/Object;)Z: I4 Branch 66 IF_ACMPNE L738 - true
   * 2 gnu.trove.list.array.TIntArrayList.equals(Ljava/lang/Object;)Z: I13 Branch 67 IFEQ L741 - false
   * 3 gnu.trove.list.array.TIntArrayList.equals(Ljava/lang/Object;)Z: I25 Branch 68 IF_ICMPEQ L743 - false
   */

  @Test
  public void test68()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      int[] intArray0 = new int[3];
      TIntArrayList tIntArrayList1 = TIntArrayList.wrap(intArray0, 12853);
      assertNotNull(tIntArrayList1);
      
      boolean boolean0 = tIntArrayList0.equals((Object) tIntArrayList1);
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals(3, tIntArrayList1.size());
      assertEquals(12853, tIntArrayList1.getNoEntryValue());
      assertEquals("{}", tIntArrayList0.toString());
      assertFalse(tIntArrayList1.equals(tIntArrayList0));
      assertEquals(false, boolean0);
  }

  //Test case number: 69
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.equals(Ljava/lang/Object;)Z: I13 Branch 67 IFEQ L741 - true
   * 2 gnu.trove.list.array.TIntArrayList.equals(Ljava/lang/Object;)Z: I4 Branch 66 IF_ACMPNE L738 - true
   */

  @Test
  public void test69()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      boolean boolean0 = tIntArrayList0.equals((Object) "{}");
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals("{}", tIntArrayList0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 70
  /*
   * 14 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.equals(Ljava/lang/Object;)Z: I25 Branch 68 IF_ICMPEQ L743 - true
   * 2 gnu.trove.list.array.TIntArrayList.equals(Ljava/lang/Object;)Z: I36 Branch 69 IFLE L745 - true
   * 3 gnu.trove.list.array.TIntArrayList.equals(Ljava/lang/Object;)Z: I36 Branch 69 IFLE L745 - false
   * 4 gnu.trove.list.array.TIntArrayList.equals(Ljava/lang/Object;)Z: I47 Branch 70 IF_ICMPEQ L746 - true
   * 5 gnu.trove.list.array.TIntArrayList.iterator()Lgnu/trove/iterator/TIntIterator;: root-Branch
   * 6 gnu.trove.list.array.TIntArrayList.equals(Ljava/lang/Object;)Z: I4 Branch 66 IF_ACMPNE L738 - false
   * 7 gnu.trove.list.array.TIntArrayList.equals(Ljava/lang/Object;)Z: I13 Branch 67 IFEQ L741 - false
   * 8 gnu.trove.list.array.TIntArrayList.get(I)I: I5 Branch 9 IF_ICMPLT L280 - true
   * 9 gnu.trove.list.array.TIntArrayList$TIntArrayIterator.next()I: root-Branch
   * 10 gnu.trove.list.array.TIntArrayList$TIntArrayIterator.<init>(Lgnu/trove/list/array/TIntArrayList;I)V: root-Branch
   * 11 gnu.trove.list.array.TIntArrayList$TIntArrayIterator.hasNext()Z: I7 Branch 102 IF_ICMPGE L1005 - true
   * 12 gnu.trove.list.array.TIntArrayList$TIntArrayIterator.hasNext()Z: I7 Branch 102 IF_ICMPGE L1005 - false
   * 13 gnu.trove.list.array.TIntArrayList.addAll(Lgnu/trove/TIntCollection;)Z: I13 Branch 31 IFEQ L495 - false
   * 14 gnu.trove.list.array.TIntArrayList.addAll(Lgnu/trove/TIntCollection;)Z: I24 Branch 32 IFEQ L497 - false
   */

  @Test
  public void test70()  throws Throwable  {
      int[] intArray0 = new int[8];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0, Integer.MAX_VALUE);
      assertNotNull(tIntArrayList0);
      
      TIntArrayList tIntArrayList1 = new TIntArrayList((TIntCollection) tIntArrayList0);
      boolean boolean0 = tIntArrayList0.equals((Object) tIntArrayList1);
      assertEquals(0, tIntArrayList1.getNoEntryValue());
      assertEquals("{0, 0, 0, 0, 0, 0, 0, 0}", tIntArrayList0.toString());
      assertEquals(true, boolean0);
      assertEquals(2147483647, tIntArrayList0.getNoEntryValue());
  }

  //Test case number: 71
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.hashCode()I: I12 Branch 71 IFLE L761 - false
   * 2 gnu.trove.list.array.TIntArrayList.hashCode()I: I12 Branch 71 IFLE L761 - true
   */

  @Test
  public void test71()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      tIntArrayList0.add(0);
      int int0 = tIntArrayList0.hashCode();
      assertEquals(1, tIntArrayList0.size());
      assertEquals(0, int0);
  }

  //Test case number: 72
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.forEach(Lgnu/trove/procedure/TIntProcedure;)Z: I8 Branch 72 IF_ICMPGE L772 - true
   */

  @Test
  public void test72()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      boolean boolean0 = tIntArrayList0.forEach((TIntProcedure) null);
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals(true, boolean0);
      assertEquals("{}", tIntArrayList0.toString());
  }

  //Test case number: 73
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.forEach(Lgnu/trove/procedure/TIntProcedure;)Z: I8 Branch 72 IF_ICMPGE L772 - false
   */

  @Test
  public void test73()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      tIntArrayList0.add(0);
      // Undeclared exception!
      try {
        tIntArrayList0.forEach((TIntProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 74
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.forEachDescending(Lgnu/trove/procedure/TIntProcedure;)Z: I8 Branch 74 IFLE L783 - true
   */

  @Test
  public void test74()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList(920);
      boolean boolean0 = tIntArrayList0.forEachDescending((TIntProcedure) null);
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals(0, tIntArrayList0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 75
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.forEachDescending(Lgnu/trove/procedure/TIntProcedure;)Z: I8 Branch 74 IFLE L783 - false
   */

  @Test
  public void test75()  throws Throwable  {
      int[] intArray0 = new int[5];
      TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
      // Undeclared exception!
      try {
        tIntArrayList0.forEachDescending((TIntProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 76
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.fill(III)V: I5 Branch 76 IF_ICMPLE L816 - true
   */

  @Test
  public void test76()  throws Throwable  {
      int[] intArray0 = new int[10];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0);
      assertNotNull(tIntArrayList0);
      
      // Undeclared exception!
      try {
        tIntArrayList0.fill((-14), (-14), 1215);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -14
         //
      }
  }

  //Test case number: 77
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.binarySearch(III)I: I3 Branch 77 IFGE L834 - false
   */

  @Test
  public void test77()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      // Undeclared exception!
      try {
        tIntArrayList0.binarySearch((-1389), (-85), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -85
         //
      }
  }

  //Test case number: 78
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.binarySearch(III)I: I16 Branch 78 IF_ICMPLE L837 - false
   */

  @Test
  public void test78()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList(0);
      // Undeclared exception!
      try {
        tIntArrayList0.binarySearch(0, 0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1
         //
      }
  }

  //Test case number: 79
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.binarySearch(III)I: I58 Branch 80 IF_ICMPGE L848 - false
   * 2 gnu.trove.list.array.TIntArrayList.binarySearch(III)I: I38 Branch 79 IF_ICMPGT L844 - true
   */

  @Test
  public void test79()  throws Throwable  {
      int[] intArray0 = new int[3];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0, 744);
      assertNotNull(tIntArrayList0);
      
      int int0 = tIntArrayList0.binarySearch(1161);
      assertEquals((-4), int0);
      assertEquals(744, tIntArrayList0.getNoEntryValue());
  }

  //Test case number: 80
  /*
   * 7 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.binarySearch(III)I: I70 Branch 81 IF_ICMPLE L851 - false
   * 2 gnu.trove.list.array.TIntArrayList.binarySearch(I)I: root-Branch
   * 3 gnu.trove.list.array.TIntArrayList.binarySearch(III)I: I3 Branch 77 IFGE L834 - true
   * 4 gnu.trove.list.array.TIntArrayList.binarySearch(III)I: I16 Branch 78 IF_ICMPLE L837 - true
   * 5 gnu.trove.list.array.TIntArrayList.binarySearch(III)I: I38 Branch 79 IF_ICMPGT L844 - true
   * 6 gnu.trove.list.array.TIntArrayList.binarySearch(III)I: I38 Branch 79 IF_ICMPGT L844 - false
   * 7 gnu.trove.list.array.TIntArrayList.binarySearch(III)I: I58 Branch 80 IF_ICMPGE L848 - true
   */

  @Test
  public void test80()  throws Throwable  {
      int[] intArray0 = new int[1];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0);
      assertNotNull(tIntArrayList0);
      
      int int0 = tIntArrayList0.binarySearch((-351));
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals((-1), int0);
  }

  //Test case number: 81
  /*
   * 4 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.indexOf(II)I: I16 Branch 83 IF_ICMPNE L871 - true
   * 2 gnu.trove.list.array.TIntArrayList.indexOf(I)I: root-Branch
   * 3 gnu.trove.list.array.TIntArrayList.indexOf(II)I: I8 Branch 82 IF_ICMPGE L870 - false
   * 4 gnu.trove.list.array.TIntArrayList.indexOf(II)I: I16 Branch 83 IF_ICMPNE L871 - false
   */

  @Test
  public void test81()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = 1497;
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0, 0);
      assertNotNull(tIntArrayList0);
      
      int int0 = tIntArrayList0.indexOf(0);
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals(1, int0);
  }

  //Test case number: 82
  /*
   * 14 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.lastIndexOf(II)I: I15 Branch 85 IF_ICMPNE L888 - true
   * 2 gnu.trove.list.array.TIntArrayList.<init>(Lgnu/trove/TIntCollection;)V: root-Branch
   * 3 gnu.trove.list.array.TIntArrayList.add(I)Z: root-Branch
   * 4 gnu.trove.list.array.TIntArrayList.lastIndexOf(I)I: root-Branch
   * 5 gnu.trove.list.array.TIntArrayList.lastIndexOf(II)I: I7 Branch 84 IFLE L887 - false
   * 6 gnu.trove.list.array.TIntArrayList.lastIndexOf(II)I: I15 Branch 85 IF_ICMPNE L888 - false
   * 7 gnu.trove.list.array.TIntArrayList.contains(I)Z: I5 Branch 86 IFLT L898 - false
   * 8 gnu.trove.list.array.TIntArrayList.addAll(Lgnu/trove/TIntCollection;)Z: I13 Branch 31 IFEQ L495 - true
   * 9 gnu.trove.list.array.TIntArrayList.addAll(Lgnu/trove/TIntCollection;)Z: I13 Branch 31 IFEQ L495 - false
   * 10 gnu.trove.list.array.TIntArrayList.addAll(Lgnu/trove/TIntCollection;)Z: I24 Branch 32 IFEQ L497 - false
   * 11 gnu.trove.list.array.TIntArrayList.containsAll(Ljava/util/Collection;)Z: I8 Branch 21 IFEQ L436 - true
   * 12 gnu.trove.list.array.TIntArrayList.containsAll(Ljava/util/Collection;)Z: I8 Branch 21 IFEQ L436 - false
   * 13 gnu.trove.list.array.TIntArrayList.containsAll(Ljava/util/Collection;)Z: I16 Branch 22 IFEQ L437 - false
   * 14 gnu.trove.list.array.TIntArrayList.containsAll(Ljava/util/Collection;)Z: I28 Branch 23 IFNE L439 - true
   */

  @Test
  public void test82()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) Integer.MIN_VALUE);
      linkedList0.add((Integer) 877);
      TIntHashSet tIntHashSet0 = new TIntHashSet((Collection<? extends Integer>) linkedList0);
      TIntArrayList tIntArrayList0 = new TIntArrayList((TIntCollection) tIntHashSet0);
      boolean boolean0 = tIntArrayList0.containsAll((Collection<?>) linkedList0);
      assertEquals(2, tIntArrayList0.size());
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals(true, boolean0);
  }

  //Test case number: 83
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.grep(Lgnu/trove/procedure/TIntProcedure;)Lgnu/trove/list/TIntList;: I14 Branch 87 IF_ICMPGE L905 - true
   */

  @Test
  public void test83()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      TSynchronizedRandomAccessIntList tSynchronizedRandomAccessIntList0 = new TSynchronizedRandomAccessIntList((TIntList) tIntArrayList0);
      TIntArrayList tIntArrayList1 = (TIntArrayList)tSynchronizedRandomAccessIntList0.grep((TIntProcedure) null);
      assertNotSame(tIntArrayList1, tIntArrayList0);
      assertNotNull(tIntArrayList1);
      assertEquals(0, tIntArrayList1.getNoEntryValue());
  }

  //Test case number: 84
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.grep(Lgnu/trove/procedure/TIntProcedure;)Lgnu/trove/list/TIntList;: I14 Branch 87 IF_ICMPGE L905 - false
   */

  @Test
  public void test84()  throws Throwable  {
      int[] intArray0 = new int[1];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0);
      assertNotNull(tIntArrayList0);
      
      // Undeclared exception!
      try {
        tIntArrayList0.grep((TIntProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 85
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.inverseGrep(Lgnu/trove/procedure/TIntProcedure;)Lgnu/trove/list/TIntList;: I14 Branch 89 IF_ICMPGE L917 - true
   */

  @Test
  public void test85()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      TIntArrayList tIntArrayList1 = (TIntArrayList)tIntArrayList0.inverseGrep((TIntProcedure) null);
      assertEquals(0, tIntArrayList1.getNoEntryValue());
      assertNotSame(tIntArrayList1, tIntArrayList0);
      assertNotNull(tIntArrayList1);
  }

  //Test case number: 86
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.inverseGrep(Lgnu/trove/procedure/TIntProcedure;)Lgnu/trove/list/TIntList;: I14 Branch 89 IF_ICMPGE L917 - false
   */

  @Test
  public void test86()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList(920);
      int[] intArray0 = new int[2];
      tIntArrayList0.add(intArray0);
      // Undeclared exception!
      try {
        tIntArrayList0.inverseGrep((TIntProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 87
  /*
   * 8 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.max()I: I4 Branch 91 IFNE L928 - true
   * 2 gnu.trove.list.array.TIntArrayList.max()I: I24 Branch 92 IF_ICMPGE L932 - true
   * 3 gnu.trove.list.array.TIntArrayList.max()I: I24 Branch 92 IF_ICMPGE L932 - false
   * 4 gnu.trove.list.array.TIntArrayList.max()I: I32 Branch 93 IF_ICMPLE L933 - true
   * 5 gnu.trove.list.array.TIntArrayList.max()I: I32 Branch 93 IF_ICMPLE L933 - false
   * 6 gnu.trove.list.array.TIntArrayList.insert(I[I)V: root-Branch
   * 7 gnu.trove.list.array.TIntArrayList.ensureCapacity(I)V: I6 Branch 4 IF_ICMPLE L184 - false
   * 8 gnu.trove.list.array.TIntArrayList.insert(I[III)V: I5 Branch 8 IF_ICMPNE L264 - false
   */

  @Test
  public void test87()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList(0, 0);
      int[] intArray0 = new int[2];
      tIntArrayList0.insert(0, intArray0);
      int int0 = tIntArrayList0.max();
      assertEquals("{0, 0}", tIntArrayList0.toString());
      assertEquals(0, int0);
  }

  //Test case number: 88
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.max()I: I4 Branch 91 IFNE L928 - false
   */

  @Test
  public void test88()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      // Undeclared exception!
      try {
        tIntArrayList0.max();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot find maximum of an empty list
         //
      }
  }

  //Test case number: 89
  /*
   * 6 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.min()I: I4 Branch 94 IFNE L943 - true
   * 2 gnu.trove.list.array.TIntArrayList.min()I: I24 Branch 95 IF_ICMPGE L947 - true
   * 3 gnu.trove.list.array.TIntArrayList.min()I: I24 Branch 95 IF_ICMPGE L947 - false
   * 4 gnu.trove.list.array.TIntArrayList.min()I: I32 Branch 96 IF_ICMPGE L948 - true
   * 5 gnu.trove.list.array.TIntArrayList.min()I: I32 Branch 96 IF_ICMPGE L948 - false
   * 6 gnu.trove.list.array.TIntArrayList.<init>([I)V: root-Branch
   */

  @Test
  public void test89()  throws Throwable  {
      int[] intArray0 = new int[10];
      TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
      int int0 = tIntArrayList0.min();
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertEquals(0, int0);
      assertEquals(10, tIntArrayList0.size());
  }

  //Test case number: 90
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TIntArrayList.min()I: I4 Branch 94 IFNE L943 - false
   */

  @Test
  public void test90()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList(2006);
      // Undeclared exception!
      try {
        tIntArrayList0.min();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot find minimum of an empty list
         //
      }
  }

  //Test case number: 91
  /*
   * 6 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.sum()I: I12 Branch 97 IF_ICMPGE L959 - false
   * 2 gnu.trove.list.array.TIntArrayList.add([I)V: root-Branch
   * 3 gnu.trove.list.array.TIntArrayList.<init>(I)V: root-Branch
   * 4 gnu.trove.list.array.TIntArrayList.add([III)V: root-Branch
   * 5 gnu.trove.list.array.TIntArrayList.ensureCapacity(I)V: I6 Branch 4 IF_ICMPLE L184 - true
   * 6 gnu.trove.list.array.TIntArrayList.sum()I: I12 Branch 97 IF_ICMPGE L959 - true
   */

  @Test
  public void test91()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList(920);
      int[] intArray0 = new int[2];
      tIntArrayList0.add(intArray0);
      int int0 = tIntArrayList0.sum();
      assertEquals("{0, 0}", tIntArrayList0.toString());
      assertEquals(0, int0);
  }

  //Test case number: 92
  /*
   * 4 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.toString()Ljava/lang/String;: I20 Branch 98 IF_ICMPGE L972 - true
   * 2 gnu.trove.list.array.TIntArrayList.toString()Ljava/lang/String;: I44 Branch 99 IFLE L976 - true
   * 3 gnu.trove.list.array.TIntArrayList.<init>()V: root-Branch
   * 4 gnu.trove.list.array.TIntArrayList.<init>(II)V: root-Branch
   */

  @Test
  public void test92()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList((TIntList) tIntArrayList0);
      String string0 = tUnmodifiableRandomAccessIntList0.toString();
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(0, tIntArrayList0.size());
  }

  //Test case number: 93
  /*
   * 4 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.toString()Ljava/lang/String;: I20 Branch 98 IF_ICMPGE L972 - false
   * 2 gnu.trove.list.array.TIntArrayList.toString()Ljava/lang/String;: I44 Branch 99 IFLE L976 - false
   * 3 gnu.trove.list.array.TIntArrayList.size()I: root-Branch
   * 4 gnu.trove.list.array.TIntArrayList.toString()Ljava/lang/String;: I20 Branch 98 IF_ICMPGE L972 - true
   */

  @Test
  public void test93()  throws Throwable  {
      int[] intArray0 = new int[6];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0, (-1623));
      assertNotNull(tIntArrayList0);
      
      String string0 = tIntArrayList0.toString();
      assertEquals(-1623, tIntArrayList0.getNoEntryValue());
      assertEquals(6, tIntArrayList0.size());
      assertEquals("{0, 0, 0, 0, 0, 0}", string0);
      assertNotNull(string0);
  }

  //Test case number: 94
  /*
   * 7 covered goals:
   * 1 gnu.trove.list.array.TIntArrayList.writeExternal(Ljava/io/ObjectOutput;)V: I35 Branch 100 IF_ICMPGE L1051 - true
   * 2 gnu.trove.list.array.TIntArrayList.writeExternal(Ljava/io/ObjectOutput;)V: I35 Branch 100 IF_ICMPGE L1051 - false
   * 3 gnu.trove.list.array.TIntArrayList$1.<init>([IIZ)V: root-Branch
   * 4 gnu.trove.list.array.TIntArrayList.wrap([I)Lgnu/trove/list/array/TIntArrayList;: root-Branch
   * 5 gnu.trove.list.array.TIntArrayList.wrap([II)Lgnu/trove/list/array/TIntArrayList;: root-Branch
   * 6 gnu.trove.list.array.TIntArrayList.<init>([IIZ)V: I7 Branch 2 IFNE L123 - true
   * 7 gnu.trove.list.array.TIntArrayList.<init>([IIZ)V: I18 Branch 3 IFNONNULL L126 - true
   */

  @Test
  public void test94()  throws Throwable  {
      int[] intArray0 = new int[7];
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tIntArrayList0.writeExternal((ObjectOutput) objectOutputStream0);
  }
}
