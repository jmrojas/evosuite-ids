/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedFloatList;
import gnu.trove.impl.sync.TSynchronizedRandomAccessFloatList;
import gnu.trove.list.TFloatList;
import gnu.trove.list.array.TFloatArrayList;
import gnu.trove.list.linked.TFloatLinkedList;
import gnu.trove.procedure.TFloatProcedure;
import java.util.Random;
import java.util.Vector;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedFloatListEvoSuite_StrongMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 7 covered goals:
   * 1 Strong Mutation 3: gnu.trove.impl.sync.TSynchronizedFloatList.equals(Ljava/lang/Object;)Z:69 - DeleteField: listLgnu/trove/list/TFloatList;
   * 2 Strong Mutation 2: gnu.trove.impl.sync.TSynchronizedFloatList.equals(Ljava/lang/Object;)Z:69 - DeleteField: mutexLjava/lang/Object;
   * 3 Strong Mutation 0: gnu.trove.impl.sync.TSynchronizedFloatList.<init>(Lgnu/trove/list/TFloatList;)V:61 - ReplaceVariable list -> list
   * 4 Strong Mutation 2: gnu.trove.impl.sync.TSynchronizedFloatList.equals(Ljava/lang/Object;)Z:69 - DeleteField: mutexLjava/lang/Object;
   * 5 Strong Mutation 3: gnu.trove.impl.sync.TSynchronizedFloatList.equals(Ljava/lang/Object;)Z:69 - DeleteField: listLgnu/trove/list/TFloatList;
   * 6 gnu.trove.impl.sync.TSynchronizedFloatList.equals(Ljava/lang/Object;)Z: root-Branch
   * 7 gnu.trove.impl.sync.TSynchronizedFloatList.<init>(Lgnu/trove/list/TFloatList;)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(0);
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
      float[] floatArray0 = new float[8];
      floatArray0[5] = (float) 0;
      tSynchronizedFloatList0.equals((Object) "");
      floatArray0[5] = (-1489.7743F);
  }

  //Test case number: 1
  /*
   * 5 covered goals:
   * 1 Strong Mutation 7: gnu.trove.impl.sync.TSynchronizedFloatList.hashCode()I:72 - DeleteField: listLgnu/trove/list/TFloatList;
   * 2 Strong Mutation 6: gnu.trove.impl.sync.TSynchronizedFloatList.hashCode()I:72 - DeleteField: mutexLjava/lang/Object;
   * 3 Strong Mutation 6: gnu.trove.impl.sync.TSynchronizedFloatList.hashCode()I:72 - DeleteField: mutexLjava/lang/Object;
   * 4 Strong Mutation 7: gnu.trove.impl.sync.TSynchronizedFloatList.hashCode()I:72 - DeleteField: listLgnu/trove/list/TFloatList;
   * 5 gnu.trove.impl.sync.TSynchronizedFloatList.hashCode()I: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(0);
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
      float[] floatArray0 = new float[8];
      floatArray0[5] = (float) 0;
      tSynchronizedFloatList0.hashCode();
      floatArray0[5] = (-1489.7743F);
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 Strong Mutation 8: gnu.trove.impl.sync.TSynchronizedFloatList.hashCode()I:72 - DeleteStatement: hashCode()I
   * 2 Strong Mutation 8: gnu.trove.impl.sync.TSynchronizedFloatList.hashCode()I:72 - DeleteStatement: hashCode()I
   * 3 gnu.trove.impl.sync.TSynchronizedFloatList.<init>(Lgnu/trove/list/TFloatList;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1981.8247F;
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, 0.0F);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0, (Object) "/");
      int int0 = tSynchronizedRandomAccessFloatList0.hashCode();
      assertEquals(1402542777, int0);
  }

  //Test case number: 3
  /*
   * 5 covered goals:
   * 1 Strong Mutation 10: gnu.trove.impl.sync.TSynchronizedFloatList.get(I)F:76 - DeleteField: listLgnu/trove/list/TFloatList;
   * 2 Strong Mutation 9: gnu.trove.impl.sync.TSynchronizedFloatList.get(I)F:76 - DeleteField: mutexLjava/lang/Object;
   * 3 Strong Mutation 9: gnu.trove.impl.sync.TSynchronizedFloatList.get(I)F:76 - DeleteField: mutexLjava/lang/Object;
   * 4 Strong Mutation 10: gnu.trove.impl.sync.TSynchronizedFloatList.get(I)F:76 - DeleteField: listLgnu/trove/list/TFloatList;
   * 5 gnu.trove.impl.sync.TSynchronizedFloatList.get(I)F: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      float[] floatArray0 = new float[4];
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0);
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList((TFloatList) tFloatArrayList0);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatLinkedList0);
      floatArray0[1] = (float) 485;
      tSynchronizedRandomAccessFloatList0.get((-750));
      floatArray0[1] = (float) (-750);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 Strong Mutation 12: gnu.trove.impl.sync.TSynchronizedFloatList.get(I)F:76 - InsertUnaryOp IINC 1 index
   * 2 Strong Mutation 12: gnu.trove.impl.sync.TSynchronizedFloatList.get(I)F:76 - InsertUnaryOp IINC 1 index
   */

//   @Test
//   public void test4()  throws Throwable  {
//       float[] floatArray0 = new float[3];
//       floatArray0[0] = (-1984.9056F);
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
//       TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0);
//       float float0 = tSynchronizedRandomAccessFloatList0.get(0);
//       assertEquals((-1984.9056F), float0, 0.01F);
//   }

  //Test case number: 5
  /*
   * 13 covered goals:
   * 1 Strong Mutation 20: gnu.trove.impl.sync.TSynchronizedFloatList.set(IF)F:79 - InsertUnaryOp Negation of element
   * 2 Strong Mutation 15: gnu.trove.impl.sync.TSynchronizedFloatList.set(IF)F:79 - DeleteField: mutexLjava/lang/Object;
   * 3 Strong Mutation 17: gnu.trove.impl.sync.TSynchronizedFloatList.set(IF)F:79 - InsertUnaryOp Negation of index
   * 4 Strong Mutation 16: gnu.trove.impl.sync.TSynchronizedFloatList.set(IF)F:79 - DeleteField: listLgnu/trove/list/TFloatList;
   * 5 Strong Mutation 19: gnu.trove.impl.sync.TSynchronizedFloatList.set(IF)F:79 - InsertUnaryOp IINC -1 index
   * 6 Strong Mutation 18: gnu.trove.impl.sync.TSynchronizedFloatList.set(IF)F:79 - InsertUnaryOp IINC 1 index
   * 7 Strong Mutation 15: gnu.trove.impl.sync.TSynchronizedFloatList.set(IF)F:79 - DeleteField: mutexLjava/lang/Object;
   * 8 Strong Mutation 17: gnu.trove.impl.sync.TSynchronizedFloatList.set(IF)F:79 - InsertUnaryOp Negation of index
   * 9 Strong Mutation 16: gnu.trove.impl.sync.TSynchronizedFloatList.set(IF)F:79 - DeleteField: listLgnu/trove/list/TFloatList;
   * 10 Strong Mutation 19: gnu.trove.impl.sync.TSynchronizedFloatList.set(IF)F:79 - InsertUnaryOp IINC -1 index
   * 11 Strong Mutation 18: gnu.trove.impl.sync.TSynchronizedFloatList.set(IF)F:79 - InsertUnaryOp IINC 1 index
   * 12 Strong Mutation 20: gnu.trove.impl.sync.TSynchronizedFloatList.set(IF)F:79 - InsertUnaryOp Negation of element
   * 13 gnu.trove.impl.sync.TSynchronizedFloatList.set(IF)F: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      float[] floatArray0 = new float[15];
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0);
      tSynchronizedRandomAccessFloatList0.set(10, 10);
      assertEquals("{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 0.0, 0.0, 0.0, 0.0}", tFloatArrayList0.toString());
      assertEquals("{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 0.0, 0.0, 0.0, 0.0}", tSynchronizedRandomAccessFloatList0.toString());
  }

  //Test case number: 6
  /*
   * 11 covered goals:
   * 1 Strong Mutation 26: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[F)V:82 - InsertUnaryOp IINC -1 offset
   * 2 Strong Mutation 23: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[F)V:82 - DeleteField: listLgnu/trove/list/TFloatList;
   * 3 Strong Mutation 22: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[F)V:82 - DeleteField: mutexLjava/lang/Object;
   * 4 Strong Mutation 25: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[F)V:82 - InsertUnaryOp IINC 1 offset
   * 5 Strong Mutation 24: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[F)V:82 - InsertUnaryOp Negation of offset
   * 6 Strong Mutation 23: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[F)V:82 - DeleteField: listLgnu/trove/list/TFloatList;
   * 7 Strong Mutation 22: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[F)V:82 - DeleteField: mutexLjava/lang/Object;
   * 8 Strong Mutation 25: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[F)V:82 - InsertUnaryOp IINC 1 offset
   * 9 Strong Mutation 24: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[F)V:82 - InsertUnaryOp Negation of offset
   * 10 Strong Mutation 26: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[F)V:82 - InsertUnaryOp IINC -1 offset
   * 11 gnu.trove.impl.sync.TSynchronizedFloatList.set(I[F)V: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      float[] floatArray0 = new float[3];
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0);
      Random random0 = new Random();
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessFloatList0.set((-2062), floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -2062
         //
      }
  }

  //Test case number: 7
  /*
   * 4 covered goals:
   * 1 Strong Mutation 43: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[FII)V:85 - InsertUnaryOp IINC 1 length
   * 2 Strong Mutation 38: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[FII)V:85 - InsertUnaryOp IINC 1 valOffset
   * 3 Strong Mutation 43: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[FII)V:85 - InsertUnaryOp IINC 1 length
   * 4 gnu.trove.impl.sync.TSynchronizedFloatList.set(I[FII)V: root-Branch
   */

//   @Test
//   public void test7()  throws Throwable  {
//       float[] floatArray0 = new float[22];
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
//       floatArray0[20] = (float) 155027;
//       TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0);
//       tSynchronizedRandomAccessFloatList0.set(10, floatArray0, 10, 10);
//       assertEquals("{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}", tSynchronizedRandomAccessFloatList0.toString());
//       assertEquals(0.0F, tFloatArrayList0.max(), 0.01F);
//   }

  //Test case number: 8
  /*
   * 17 covered goals:
   * 1 Strong Mutation 44: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[FII)V:85 - InsertUnaryOp IINC -1 length
   * 2 Strong Mutation 29: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[FII)V:85 - DeleteField: listLgnu/trove/list/TFloatList;
   * 3 Strong Mutation 28: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[FII)V:85 - DeleteField: mutexLjava/lang/Object;
   * 4 Strong Mutation 34: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[FII)V:85 - InsertUnaryOp IINC -1 offset
   * 5 Strong Mutation 32: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[FII)V:85 - InsertUnaryOp Negation of offset
   * 6 Strong Mutation 33: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[FII)V:85 - InsertUnaryOp IINC 1 offset
   * 7 Strong Mutation 38: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[FII)V:85 - InsertUnaryOp IINC 1 valOffset
   * 8 Strong Mutation 39: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[FII)V:85 - InsertUnaryOp IINC -1 valOffset
   * 9 Strong Mutation 37: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[FII)V:85 - InsertUnaryOp Negation of valOffset
   * 10 Strong Mutation 29: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[FII)V:85 - DeleteField: listLgnu/trove/list/TFloatList;
   * 11 Strong Mutation 28: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[FII)V:85 - DeleteField: mutexLjava/lang/Object;
   * 12 Strong Mutation 34: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[FII)V:85 - InsertUnaryOp IINC -1 offset
   * 13 Strong Mutation 32: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[FII)V:85 - InsertUnaryOp Negation of offset
   * 14 Strong Mutation 33: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[FII)V:85 - InsertUnaryOp IINC 1 offset
   * 15 Strong Mutation 39: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[FII)V:85 - InsertUnaryOp IINC -1 valOffset
   * 16 Strong Mutation 37: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[FII)V:85 - InsertUnaryOp Negation of valOffset
   * 17 Strong Mutation 44: gnu.trove.impl.sync.TSynchronizedFloatList.set(I[FII)V:85 - InsertUnaryOp IINC -1 length
   */

//   @Test
//   public void test8()  throws Throwable  {
//       float[] floatArray0 = new float[22];
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
//       floatArray0[19] = (float) 155027;
//       TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0);
//       tSynchronizedRandomAccessFloatList0.set(10, floatArray0, 10, 10);
//       assertEquals(155027.0F, tFloatArrayList0.sum(), 0.01F);
//       assertEquals("{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 155027.0, 0.0, 0.0}", tSynchronizedRandomAccessFloatList0.toString());
//   }

  //Test case number: 9
  /*
   * 12 covered goals:
   * 1 Strong Mutation 52: gnu.trove.impl.sync.TSynchronizedFloatList.replace(IF)F:89 - DeleteStatement: replace(IF)F
   * 2 Strong Mutation 46: gnu.trove.impl.sync.TSynchronizedFloatList.replace(IF)F:89 - DeleteField: mutexLjava/lang/Object;
   * 3 Strong Mutation 47: gnu.trove.impl.sync.TSynchronizedFloatList.replace(IF)F:89 - DeleteField: listLgnu/trove/list/TFloatList;
   * 4 Strong Mutation 51: gnu.trove.impl.sync.TSynchronizedFloatList.replace(IF)F:89 - InsertUnaryOp Negation of val
   * 5 Strong Mutation 50: gnu.trove.impl.sync.TSynchronizedFloatList.replace(IF)F:89 - InsertUnaryOp IINC -1 offset
   * 6 Strong Mutation 49: gnu.trove.impl.sync.TSynchronizedFloatList.replace(IF)F:89 - InsertUnaryOp IINC 1 offset
   * 7 Strong Mutation 46: gnu.trove.impl.sync.TSynchronizedFloatList.replace(IF)F:89 - DeleteField: mutexLjava/lang/Object;
   * 8 Strong Mutation 47: gnu.trove.impl.sync.TSynchronizedFloatList.replace(IF)F:89 - DeleteField: listLgnu/trove/list/TFloatList;
   * 9 Strong Mutation 51: gnu.trove.impl.sync.TSynchronizedFloatList.replace(IF)F:89 - InsertUnaryOp Negation of val
   * 10 Strong Mutation 50: gnu.trove.impl.sync.TSynchronizedFloatList.replace(IF)F:89 - InsertUnaryOp IINC -1 offset
   * 11 Strong Mutation 49: gnu.trove.impl.sync.TSynchronizedFloatList.replace(IF)F:89 - InsertUnaryOp IINC 1 offset
   * 12 gnu.trove.impl.sync.TSynchronizedFloatList.replace(IF)F: root-Branch
   */

//   @Test
//   public void test9()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(0);
//       TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
//       tFloatArrayList0.insert(0, (-1.0F));
//       float float0 = tSynchronizedFloatList0.replace(0, (-1490.2509F));
//       assertEquals("{-1490.2509}", tFloatArrayList0.toString());
//       assertEquals((-1.0F), float0, 0.01F);
//   }

  //Test case number: 10
  /*
   * 10 covered goals:
   * 1 Strong Mutation 67: gnu.trove.impl.sync.TSynchronizedFloatList.removeAt(I)F:95 - InsertUnaryOp IINC 1 offset
   * 2 Strong Mutation 68: gnu.trove.impl.sync.TSynchronizedFloatList.removeAt(I)F:95 - InsertUnaryOp IINC -1 offset
   * 3 Strong Mutation 64: gnu.trove.impl.sync.TSynchronizedFloatList.removeAt(I)F:95 - DeleteField: mutexLjava/lang/Object;
   * 4 Strong Mutation 65: gnu.trove.impl.sync.TSynchronizedFloatList.removeAt(I)F:95 - DeleteField: listLgnu/trove/list/TFloatList;
   * 5 Strong Mutation 1: gnu.trove.impl.sync.TSynchronizedFloatList.<init>(Lgnu/trove/list/TFloatList;Ljava/lang/Object;)V:65 - ReplaceVariable list -> list
   * 6 Strong Mutation 68: gnu.trove.impl.sync.TSynchronizedFloatList.removeAt(I)F:95 - InsertUnaryOp IINC -1 offset
   * 7 Strong Mutation 64: gnu.trove.impl.sync.TSynchronizedFloatList.removeAt(I)F:95 - DeleteField: mutexLjava/lang/Object;
   * 8 Strong Mutation 65: gnu.trove.impl.sync.TSynchronizedFloatList.removeAt(I)F:95 - DeleteField: listLgnu/trove/list/TFloatList;
   * 9 Strong Mutation 67: gnu.trove.impl.sync.TSynchronizedFloatList.removeAt(I)F:95 - InsertUnaryOp IINC 1 offset
   * 10 gnu.trove.impl.sync.TSynchronizedFloatList.removeAt(I)F: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      float[] floatArray0 = new float[1];
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
      Vector<Object> vector0 = new Vector<Object>();
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0, (Object) vector0);
      tSynchronizedFloatList0.removeAt(0);
      assertEquals(true, tFloatArrayList0.isEmpty());
      assertEquals("{}", tSynchronizedFloatList0.toString());
  }

  //Test case number: 11
  /*
   * 5 covered goals:
   * 1 Strong Mutation 77: gnu.trove.impl.sync.TSynchronizedFloatList.add([FII)V:102 - InsertUnaryOp IINC 1 offset
   * 2 Strong Mutation 76: gnu.trove.impl.sync.TSynchronizedFloatList.add([FII)V:102 - InsertUnaryOp Negation of offset
   * 3 Strong Mutation 76: gnu.trove.impl.sync.TSynchronizedFloatList.add([FII)V:102 - InsertUnaryOp Negation of offset
   * 4 Strong Mutation 77: gnu.trove.impl.sync.TSynchronizedFloatList.add([FII)V:102 - InsertUnaryOp IINC 1 offset
   * 5 gnu.trove.impl.sync.TSynchronizedFloatList.add([FII)V: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList();
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatLinkedList0);
      float[] floatArray0 = new float[10];
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessFloatList0.add(floatArray0, (-1), 583);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  //Test case number: 12
  /*
   * 12 covered goals:
   * 1 Strong Mutation 82: gnu.trove.impl.sync.TSynchronizedFloatList.add([FII)V:102 - InsertUnaryOp IINC -1 length
   * 2 Strong Mutation 78: gnu.trove.impl.sync.TSynchronizedFloatList.add([FII)V:102 - InsertUnaryOp IINC -1 offset
   * 3 Strong Mutation 79: gnu.trove.impl.sync.TSynchronizedFloatList.add([FII)V:102 - ReplaceVariable length -> offset
   * 4 Strong Mutation 73: gnu.trove.impl.sync.TSynchronizedFloatList.add([FII)V:102 - DeleteField: mutexLjava/lang/Object;
   * 5 Strong Mutation 74: gnu.trove.impl.sync.TSynchronizedFloatList.add([FII)V:102 - DeleteField: listLgnu/trove/list/TFloatList;
   * 6 Strong Mutation 81: gnu.trove.impl.sync.TSynchronizedFloatList.add([FII)V:102 - InsertUnaryOp IINC 1 length
   * 7 Strong Mutation 80: gnu.trove.impl.sync.TSynchronizedFloatList.add([FII)V:102 - InsertUnaryOp Negation of length
   * 8 Strong Mutation 78: gnu.trove.impl.sync.TSynchronizedFloatList.add([FII)V:102 - InsertUnaryOp IINC -1 offset
   * 9 Strong Mutation 73: gnu.trove.impl.sync.TSynchronizedFloatList.add([FII)V:102 - DeleteField: mutexLjava/lang/Object;
   * 10 Strong Mutation 74: gnu.trove.impl.sync.TSynchronizedFloatList.add([FII)V:102 - DeleteField: listLgnu/trove/list/TFloatList;
   * 11 Strong Mutation 81: gnu.trove.impl.sync.TSynchronizedFloatList.add([FII)V:102 - InsertUnaryOp IINC 1 length
   * 12 Strong Mutation 82: gnu.trove.impl.sync.TSynchronizedFloatList.add([FII)V:102 - InsertUnaryOp IINC -1 length
   */

  @Test
  public void test12()  throws Throwable  {
      float[] floatArray0 = new float[3];
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0, (Object) "");
      tSynchronizedFloatList0.add(floatArray0, 0, 1);
      assertEquals(4, tFloatArrayList0.size());
      assertEquals("{0.0, 0.0, 0.0, 0.0}", tSynchronizedFloatList0.toString());
  }

  //Test case number: 13
  /*
   * 8 covered goals:
   * 1 Strong Mutation 86: gnu.trove.impl.sync.TSynchronizedFloatList.insert(IF)V:106 - InsertUnaryOp Negation of offset
   * 2 Strong Mutation 85: gnu.trove.impl.sync.TSynchronizedFloatList.insert(IF)V:106 - DeleteField: listLgnu/trove/list/TFloatList;
   * 3 Strong Mutation 84: gnu.trove.impl.sync.TSynchronizedFloatList.insert(IF)V:106 - DeleteField: mutexLjava/lang/Object;
   * 4 Strong Mutation 87: gnu.trove.impl.sync.TSynchronizedFloatList.insert(IF)V:106 - InsertUnaryOp IINC 1 offset
   * 5 Strong Mutation 86: gnu.trove.impl.sync.TSynchronizedFloatList.insert(IF)V:106 - InsertUnaryOp Negation of offset
   * 6 Strong Mutation 89: gnu.trove.impl.sync.TSynchronizedFloatList.insert(IF)V:106 - InsertUnaryOp Negation of value
   * 7 Strong Mutation 88: gnu.trove.impl.sync.TSynchronizedFloatList.insert(IF)V:106 - InsertUnaryOp IINC -1 offset
   * 8 gnu.trove.impl.sync.TSynchronizedFloatList.insert(IF)V: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      float[] floatArray0 = new float[3];
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0);
      tSynchronizedRandomAccessFloatList0.insert(3, 646.9692F);
      assertEquals("{0.0, 0.0, 0.0, 646.9692}", tSynchronizedRandomAccessFloatList0.toString());
      assertEquals(4, tFloatArrayList0.size());
  }

  //Test case number: 14
  /*
   * 5 covered goals:
   * 1 Strong Mutation 88: gnu.trove.impl.sync.TSynchronizedFloatList.insert(IF)V:106 - InsertUnaryOp IINC -1 offset
   * 2 Strong Mutation 85: gnu.trove.impl.sync.TSynchronizedFloatList.insert(IF)V:106 - DeleteField: listLgnu/trove/list/TFloatList;
   * 3 Strong Mutation 84: gnu.trove.impl.sync.TSynchronizedFloatList.insert(IF)V:106 - DeleteField: mutexLjava/lang/Object;
   * 4 Strong Mutation 87: gnu.trove.impl.sync.TSynchronizedFloatList.insert(IF)V:106 - InsertUnaryOp IINC 1 offset
   * 5 Strong Mutation 89: gnu.trove.impl.sync.TSynchronizedFloatList.insert(IF)V:106 - InsertUnaryOp Negation of value
   */

//   @Test
//   public void test14()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
//       TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0, (Object) "");
//       tSynchronizedRandomAccessFloatList0.insert(0, 124.22656F);
//       assertEquals(1, tSynchronizedRandomAccessFloatList0.size());
//       assertEquals(124.22656F, tFloatArrayList0.sum(), 0.01F);
//   }

  //Test case number: 15
  /*
   * 5 covered goals:
   * 1 Strong Mutation 91: gnu.trove.impl.sync.TSynchronizedFloatList.insert(I[F)V:109 - DeleteField: mutexLjava/lang/Object;
   * 2 Strong Mutation 92: gnu.trove.impl.sync.TSynchronizedFloatList.insert(I[F)V:109 - DeleteField: listLgnu/trove/list/TFloatList;
   * 3 Strong Mutation 92: gnu.trove.impl.sync.TSynchronizedFloatList.insert(I[F)V:109 - DeleteField: listLgnu/trove/list/TFloatList;
   * 4 Strong Mutation 91: gnu.trove.impl.sync.TSynchronizedFloatList.insert(I[F)V:109 - DeleteField: mutexLjava/lang/Object;
   * 5 gnu.trove.impl.sync.TSynchronizedFloatList.insert(I[F)V: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList();
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatLinkedList0);
      float[] floatArray0 = new float[4];
      // Undeclared exception!
      try {
        tSynchronizedFloatList0.insert(0, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 16
  /*
   * 10 covered goals:
   * 1 Strong Mutation 102: gnu.trove.impl.sync.TSynchronizedFloatList.insert(I[FII)V:112 - InsertUnaryOp IINC 1 offset
   * 2 gnu.trove.impl.sync.TSynchronizedFloatList.insert(I[FII)V: root-Branch
   * 3 Strong Mutation 70: gnu.trove.impl.sync.TSynchronizedFloatList.add([F)V:99 - DeleteField: mutexLjava/lang/Object;
   * 4 Strong Mutation 71: gnu.trove.impl.sync.TSynchronizedFloatList.add([F)V:99 - DeleteField: listLgnu/trove/list/TFloatList;
   * 5 Strong Mutation 72: gnu.trove.impl.sync.TSynchronizedFloatList.add([F)V:99 - DeleteStatement: add([F)V
   * 6 Strong Mutation 70: gnu.trove.impl.sync.TSynchronizedFloatList.add([F)V:99 - DeleteField: mutexLjava/lang/Object;
   * 7 Strong Mutation 71: gnu.trove.impl.sync.TSynchronizedFloatList.add([F)V:99 - DeleteField: listLgnu/trove/list/TFloatList;
   * 8 Strong Mutation 72: gnu.trove.impl.sync.TSynchronizedFloatList.add([F)V:99 - DeleteStatement: add([F)V
   * 9 Strong Mutation 102: gnu.trove.impl.sync.TSynchronizedFloatList.insert(I[FII)V:112 - InsertUnaryOp IINC 1 offset
   * 10 gnu.trove.impl.sync.TSynchronizedFloatList.add([F)V: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList();
      float[] floatArray0 = new float[2];
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatLinkedList0, (Object) "");
      tSynchronizedRandomAccessFloatList0.add(floatArray0);
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessFloatList0.insert(0, floatArray0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * 1 Strong Mutation 111: gnu.trove.impl.sync.TSynchronizedFloatList.insert(I[FII)V:112 - InsertUnaryOp Negation of len
   * 2 Strong Mutation 111: gnu.trove.impl.sync.TSynchronizedFloatList.insert(I[FII)V:112 - InsertUnaryOp Negation of len
   */

  @Test
  public void test17()  throws Throwable  {
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList();
      float[] floatArray0 = new float[2];
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatLinkedList0);
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessFloatList0.insert((-1), floatArray0, 0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 18
  /*
   * 3 covered goals:
   * 1 Strong Mutation 118: gnu.trove.impl.sync.TSynchronizedFloatList.indexOf(F)I:116 - DeleteStatement: indexOf(F)I
   * 2 gnu.trove.impl.sync.TSynchronizedFloatList.indexOf(F)I: root-Branch
   * 3 Strong Mutation 118: gnu.trove.impl.sync.TSynchronizedFloatList.indexOf(F)I:116 - DeleteStatement: indexOf(F)I
   */

  @Test
  public void test18()  throws Throwable  {
      float[] floatArray0 = new float[15];
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0);
      int int0 = tSynchronizedRandomAccessFloatList0.indexOf((-241.48396F));
      assertEquals((-1), int0);
  }

  //Test case number: 19
  /*
   * 3 covered goals:
   * 1 Strong Mutation 122: gnu.trove.impl.sync.TSynchronizedFloatList.lastIndexOf(F)I:119 - DeleteStatement: lastIndexOf(F)I
   * 2 gnu.trove.impl.sync.TSynchronizedFloatList.lastIndexOf(F)I: root-Branch
   * 3 Strong Mutation 122: gnu.trove.impl.sync.TSynchronizedFloatList.lastIndexOf(F)I:119 - DeleteStatement: lastIndexOf(F)I
   */

  @Test
  public void test19()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(1220);
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0, (Object) "{}");
      int int0 = tSynchronizedFloatList0.lastIndexOf((float) 1220);
      assertEquals((-1), int0);
  }

  //Test case number: 20
  /*
   * 10 covered goals:
   * 1 Strong Mutation 129: gnu.trove.impl.sync.TSynchronizedFloatList.subList(II)Lgnu/trove/list/TFloatList;:132 - ReplaceVariable toIndex -> fromIndex
   * 2 Strong Mutation 127: gnu.trove.impl.sync.TSynchronizedFloatList.subList(II)Lgnu/trove/list/TFloatList;:132 - InsertUnaryOp IINC 1 fromIndex
   * 3 Strong Mutation 124: gnu.trove.impl.sync.TSynchronizedFloatList.subList(II)Lgnu/trove/list/TFloatList;:132 - DeleteField: listLgnu/trove/list/TFloatList;
   * 4 Strong Mutation 123: gnu.trove.impl.sync.TSynchronizedFloatList.subList(II)Lgnu/trove/list/TFloatList;:131 - DeleteField: mutexLjava/lang/Object;
   * 5 Strong Mutation 129: gnu.trove.impl.sync.TSynchronizedFloatList.subList(II)Lgnu/trove/list/TFloatList;:132 - ReplaceVariable toIndex -> fromIndex
   * 6 Strong Mutation 128: gnu.trove.impl.sync.TSynchronizedFloatList.subList(II)Lgnu/trove/list/TFloatList;:132 - InsertUnaryOp IINC -1 fromIndex
   * 7 Strong Mutation 131: gnu.trove.impl.sync.TSynchronizedFloatList.subList(II)Lgnu/trove/list/TFloatList;:132 - InsertUnaryOp IINC 1 toIndex
   * 8 Strong Mutation 130: gnu.trove.impl.sync.TSynchronizedFloatList.subList(II)Lgnu/trove/list/TFloatList;:132 - InsertUnaryOp Negation of toIndex
   * 9 Strong Mutation 132: gnu.trove.impl.sync.TSynchronizedFloatList.subList(II)Lgnu/trove/list/TFloatList;:132 - InsertUnaryOp IINC -1 toIndex
   * 10 gnu.trove.impl.sync.TSynchronizedFloatList.subList(II)Lgnu/trove/list/TFloatList;: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      float[] floatArray0 = new float[4];
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0, (Object) "");
      TSynchronizedFloatList tSynchronizedFloatList1 = (TSynchronizedFloatList)tSynchronizedFloatList0.subList(0, 1);
      assertNotNull(tSynchronizedFloatList1);
      assertEquals(1, tSynchronizedFloatList1.size());
  }

  //Test case number: 21
  /*
   * 12 covered goals:
   * 1 Strong Mutation 134: gnu.trove.impl.sync.TSynchronizedFloatList.subList(II)Lgnu/trove/list/TFloatList;:132 - DeleteField: mutexLjava/lang/Object;
   * 2 Strong Mutation 127: gnu.trove.impl.sync.TSynchronizedFloatList.subList(II)Lgnu/trove/list/TFloatList;:132 - InsertUnaryOp IINC 1 fromIndex
   * 3 Strong Mutation 126: gnu.trove.impl.sync.TSynchronizedFloatList.subList(II)Lgnu/trove/list/TFloatList;:132 - InsertUnaryOp Negation of fromIndex
   * 4 Strong Mutation 124: gnu.trove.impl.sync.TSynchronizedFloatList.subList(II)Lgnu/trove/list/TFloatList;:132 - DeleteField: listLgnu/trove/list/TFloatList;
   * 5 Strong Mutation 123: gnu.trove.impl.sync.TSynchronizedFloatList.subList(II)Lgnu/trove/list/TFloatList;:131 - DeleteField: mutexLjava/lang/Object;
   * 6 Strong Mutation 128: gnu.trove.impl.sync.TSynchronizedFloatList.subList(II)Lgnu/trove/list/TFloatList;:132 - InsertUnaryOp IINC -1 fromIndex
   * 7 Strong Mutation 131: gnu.trove.impl.sync.TSynchronizedFloatList.subList(II)Lgnu/trove/list/TFloatList;:132 - InsertUnaryOp IINC 1 toIndex
   * 8 Strong Mutation 130: gnu.trove.impl.sync.TSynchronizedFloatList.subList(II)Lgnu/trove/list/TFloatList;:132 - InsertUnaryOp Negation of toIndex
   * 9 Strong Mutation 133: gnu.trove.impl.sync.TSynchronizedFloatList.subList(II)Lgnu/trove/list/TFloatList;:132 - DeleteStatement: subList(II)Lgnu/trove/list/TFloatList;
   * 10 Strong Mutation 132: gnu.trove.impl.sync.TSynchronizedFloatList.subList(II)Lgnu/trove/list/TFloatList;:132 - InsertUnaryOp IINC -1 toIndex
   * 11 Strong Mutation 126: gnu.trove.impl.sync.TSynchronizedFloatList.subList(II)Lgnu/trove/list/TFloatList;:132 - InsertUnaryOp Negation of fromIndex
   * 12 Strong Mutation 134: gnu.trove.impl.sync.TSynchronizedFloatList.subList(II)Lgnu/trove/list/TFloatList;:132 - DeleteField: mutexLjava/lang/Object;
   */

//   @Test
//   public void test21()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(840, 282.93634F);
//       Vector<Integer> vector0 = new Vector<Integer>();
//       Random random0 = new Random();
//       assertEquals(89462495, random0.nextInt());
//       
//       TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0, (Object) vector0);
//       TSynchronizedFloatList tSynchronizedFloatList1 = (TSynchronizedFloatList)tSynchronizedFloatList0.subList(0, 0);
//       assertEquals("{}", tSynchronizedFloatList1.toString());
//   }

  //Test case number: 22
  /*
   * 9 covered goals:
   * 1 Strong Mutation 144: gnu.trove.impl.sync.TSynchronizedFloatList.toArray(II)[F:138 - InsertUnaryOp IINC -1 len
   * 2 Strong Mutation 136: gnu.trove.impl.sync.TSynchronizedFloatList.toArray(II)[F:138 - DeleteField: listLgnu/trove/list/TFloatList;
   * 3 Strong Mutation 143: gnu.trove.impl.sync.TSynchronizedFloatList.toArray(II)[F:138 - InsertUnaryOp IINC 1 len
   * 4 Strong Mutation 135: gnu.trove.impl.sync.TSynchronizedFloatList.toArray(II)[F:138 - DeleteField: mutexLjava/lang/Object;
   * 5 Strong Mutation 136: gnu.trove.impl.sync.TSynchronizedFloatList.toArray(II)[F:138 - DeleteField: listLgnu/trove/list/TFloatList;
   * 6 Strong Mutation 143: gnu.trove.impl.sync.TSynchronizedFloatList.toArray(II)[F:138 - InsertUnaryOp IINC 1 len
   * 7 Strong Mutation 135: gnu.trove.impl.sync.TSynchronizedFloatList.toArray(II)[F:138 - DeleteField: mutexLjava/lang/Object;
   * 8 Strong Mutation 144: gnu.trove.impl.sync.TSynchronizedFloatList.toArray(II)[F:138 - InsertUnaryOp IINC -1 len
   * 9 gnu.trove.impl.sync.TSynchronizedFloatList.toArray(II)[F: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList();
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatLinkedList0, (Object) "");
      float[] floatArray0 = tSynchronizedRandomAccessFloatList0.toArray(0, 0);
      assertNotNull(floatArray0);
  }

  //Test case number: 23
  /*
   * 21 covered goals:
   * 1 Strong Mutation 151: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FII)[F:141 - InsertUnaryOp IINC -1 offset
   * 2 Strong Mutation 152: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FII)[F:141 - ReplaceVariable len -> offset
   * 3 Strong Mutation 153: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FII)[F:141 - InsertUnaryOp Negation of len
   * 4 Strong Mutation 154: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FII)[F:141 - InsertUnaryOp IINC 1 len
   * 5 Strong Mutation 155: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FII)[F:141 - InsertUnaryOp IINC -1 len
   * 6 Strong Mutation 156: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FII)[F:141 - DeleteStatement: toArray([FII)[F
   * 7 Strong Mutation 146: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FII)[F:141 - DeleteField: mutexLjava/lang/Object;
   * 8 Strong Mutation 147: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FII)[F:141 - DeleteField: listLgnu/trove/list/TFloatList;
   * 9 Strong Mutation 148: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FII)[F:141 - ReplaceVariable offset -> len
   * 10 Strong Mutation 149: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FII)[F:141 - InsertUnaryOp Negation of offset
   * 11 Strong Mutation 150: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FII)[F:141 - InsertUnaryOp IINC 1 offset
   * 12 Strong Mutation 153: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FII)[F:141 - InsertUnaryOp Negation of len
   * 13 Strong Mutation 154: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FII)[F:141 - InsertUnaryOp IINC 1 len
   * 14 Strong Mutation 155: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FII)[F:141 - InsertUnaryOp IINC -1 len
   * 15 Strong Mutation 146: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FII)[F:141 - DeleteField: mutexLjava/lang/Object;
   * 16 Strong Mutation 147: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FII)[F:141 - DeleteField: listLgnu/trove/list/TFloatList;
   * 17 Strong Mutation 148: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FII)[F:141 - ReplaceVariable offset -> len
   * 18 Strong Mutation 149: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FII)[F:141 - InsertUnaryOp Negation of offset
   * 19 Strong Mutation 150: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FII)[F:141 - InsertUnaryOp IINC 1 offset
   * 20 Strong Mutation 151: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FII)[F:141 - InsertUnaryOp IINC -1 offset
   * 21 gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FII)[F: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList();
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatLinkedList0);
      Random random0 = new Random();
      float[] floatArray0 = new float[6];
      // Undeclared exception!
      try {
        tSynchronizedFloatList0.toArray(floatArray0, 0, 1929);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
      }
  }

  //Test case number: 24
  /*
   * 7 covered goals:
   * 1 Strong Mutation 173: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FIII)[F:144 - InsertUnaryOp IINC -1 len
   * 2 Strong Mutation 157: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FIII)[F:144 - DeleteField: mutexLjava/lang/Object;
   * 3 Strong Mutation 158: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FIII)[F:144 - DeleteField: listLgnu/trove/list/TFloatList;
   * 4 Strong Mutation 157: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FIII)[F:144 - DeleteField: mutexLjava/lang/Object;
   * 5 Strong Mutation 158: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FIII)[F:144 - DeleteField: listLgnu/trove/list/TFloatList;
   * 6 Strong Mutation 173: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FIII)[F:144 - InsertUnaryOp IINC -1 len
   * 7 gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FIII)[F: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(0);
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
      float[] floatArray0 = new float[3];
      float[] floatArray1 = tSynchronizedFloatList0.toArray(floatArray0, 0, 0, 0);
      assertSame(floatArray0, floatArray1);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 Strong Mutation 172: gnu.trove.impl.sync.TSynchronizedFloatList.toArray([FIII)[F:144 - InsertUnaryOp IINC 1 len
   */

  @Test
  public void test25()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0, (Object) "end index ");
      float[] floatArray0 = new float[6];
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessFloatList0.toArray(floatArray0, 0, (-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
      }
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * 1 Strong Mutation 178: gnu.trove.impl.sync.TSynchronizedFloatList.indexOf(IF)I:148 - InsertUnaryOp IINC 1 offset
   * 2 gnu.trove.impl.sync.TSynchronizedFloatList.indexOf(IF)I: root-Branch
   * 3 Strong Mutation 178: gnu.trove.impl.sync.TSynchronizedFloatList.indexOf(IF)I:148 - InsertUnaryOp IINC 1 offset
   */

  @Test
  public void test26()  throws Throwable  {
      float[] floatArray0 = new float[3];
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0);
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
      int int0 = tSynchronizedFloatList0.indexOf(0, 0.0F);
      assertEquals(0, int0);
  }

  //Test case number: 27
  /*
   * 2 covered goals:
   * 1 Strong Mutation 181: gnu.trove.impl.sync.TSynchronizedFloatList.indexOf(IF)I:148 - DeleteStatement: indexOf(IF)I
   * 2 Strong Mutation 181: gnu.trove.impl.sync.TSynchronizedFloatList.indexOf(IF)I:148 - DeleteStatement: indexOf(IF)I
   */

  @Test
  public void test27()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0, (Object) "");
      int int0 = tSynchronizedRandomAccessFloatList0.indexOf(1431, 1431);
      assertEquals((-1), int0);
  }

  //Test case number: 28
  /*
   * 3 covered goals:
   * 1 Strong Mutation 188: gnu.trove.impl.sync.TSynchronizedFloatList.lastIndexOf(IF)I:151 - DeleteStatement: lastIndexOf(IF)I
   * 2 gnu.trove.impl.sync.TSynchronizedFloatList.lastIndexOf(IF)I: root-Branch
   * 3 Strong Mutation 188: gnu.trove.impl.sync.TSynchronizedFloatList.lastIndexOf(IF)I:151 - DeleteStatement: lastIndexOf(IF)I
   */

  @Test
  public void test28()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0);
      int int0 = tSynchronizedRandomAccessFloatList0.lastIndexOf((-637), 1550.1415F);
      assertEquals((-1), int0);
  }

  //Test case number: 29
  /*
   * 9 covered goals:
   * 1 Strong Mutation 192: gnu.trove.impl.sync.TSynchronizedFloatList.fill(F)V:155 - DeleteStatement: fill(F)V
   * 2 Strong Mutation 190: gnu.trove.impl.sync.TSynchronizedFloatList.fill(F)V:155 - DeleteField: listLgnu/trove/list/TFloatList;
   * 3 Strong Mutation 191: gnu.trove.impl.sync.TSynchronizedFloatList.fill(F)V:155 - InsertUnaryOp Negation of val
   * 4 Strong Mutation 189: gnu.trove.impl.sync.TSynchronizedFloatList.fill(F)V:155 - DeleteField: mutexLjava/lang/Object;
   * 5 Strong Mutation 190: gnu.trove.impl.sync.TSynchronizedFloatList.fill(F)V:155 - DeleteField: listLgnu/trove/list/TFloatList;
   * 6 Strong Mutation 191: gnu.trove.impl.sync.TSynchronizedFloatList.fill(F)V:155 - InsertUnaryOp Negation of val
   * 7 Strong Mutation 189: gnu.trove.impl.sync.TSynchronizedFloatList.fill(F)V:155 - DeleteField: mutexLjava/lang/Object;
   * 8 Strong Mutation 192: gnu.trove.impl.sync.TSynchronizedFloatList.fill(F)V:155 - DeleteStatement: fill(F)V
   * 9 gnu.trove.impl.sync.TSynchronizedFloatList.fill(F)V: root-Branch
   */

  @Test
  public void test29()  throws Throwable  {
      float[] floatArray0 = new float[15];
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0);
      tSynchronizedRandomAccessFloatList0.fill((float) 25);
      assertEquals("{25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0}", tFloatArrayList0.toString());
      assertEquals("{25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0}", tSynchronizedRandomAccessFloatList0.toString());
  }

  //Test case number: 30
  /*
   * 8 covered goals:
   * 1 Strong Mutation 196: gnu.trove.impl.sync.TSynchronizedFloatList.fill(IIF)V:158 - InsertUnaryOp Negation of fromIndex
   * 2 Strong Mutation 201: gnu.trove.impl.sync.TSynchronizedFloatList.fill(IIF)V:158 - InsertUnaryOp IINC 1 toIndex
   * 3 Strong Mutation 200: gnu.trove.impl.sync.TSynchronizedFloatList.fill(IIF)V:158 - InsertUnaryOp Negation of toIndex
   * 4 Strong Mutation 202: gnu.trove.impl.sync.TSynchronizedFloatList.fill(IIF)V:158 - InsertUnaryOp IINC -1 toIndex
   * 5 Strong Mutation 199: gnu.trove.impl.sync.TSynchronizedFloatList.fill(IIF)V:158 - ReplaceVariable toIndex -> fromIndex
   * 6 Strong Mutation 193: gnu.trove.impl.sync.TSynchronizedFloatList.fill(IIF)V:158 - DeleteField: mutexLjava/lang/Object;
   * 7 Strong Mutation 194: gnu.trove.impl.sync.TSynchronizedFloatList.fill(IIF)V:158 - DeleteField: listLgnu/trove/list/TFloatList;
   * 8 gnu.trove.impl.sync.TSynchronizedFloatList.fill(IIF)V: root-Branch
   */

  @Test
  public void test30()  throws Throwable  {
      float[] floatArray0 = new float[1];
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
      Vector<Object> vector0 = new Vector<Object>();
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0, (Object) vector0);
      // Undeclared exception!
      try {
        tSynchronizedFloatList0.fill((-1), 6, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -1
         //
      }
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * 1 Strong Mutation 198: gnu.trove.impl.sync.TSynchronizedFloatList.fill(IIF)V:158 - InsertUnaryOp IINC -1 fromIndex
   * 2 Strong Mutation 197: gnu.trove.impl.sync.TSynchronizedFloatList.fill(IIF)V:158 - InsertUnaryOp IINC 1 fromIndex
   * 3 Strong Mutation 198: gnu.trove.impl.sync.TSynchronizedFloatList.fill(IIF)V:158 - InsertUnaryOp IINC -1 fromIndex
   */

  @Test
  public void test31()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1984.9056F);
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0);
      tSynchronizedRandomAccessFloatList0.fill(0, 0, 3.4028235E38F);
      floatArray0[0] = 2009.6372F;
  }

  //Test case number: 32
  /*
   * 6 covered goals:
   * 1 Strong Mutation 194: gnu.trove.impl.sync.TSynchronizedFloatList.fill(IIF)V:158 - DeleteField: listLgnu/trove/list/TFloatList;
   * 2 Strong Mutation 201: gnu.trove.impl.sync.TSynchronizedFloatList.fill(IIF)V:158 - InsertUnaryOp IINC 1 toIndex
   * 3 Strong Mutation 200: gnu.trove.impl.sync.TSynchronizedFloatList.fill(IIF)V:158 - InsertUnaryOp Negation of toIndex
   * 4 Strong Mutation 202: gnu.trove.impl.sync.TSynchronizedFloatList.fill(IIF)V:158 - InsertUnaryOp IINC -1 toIndex
   * 5 Strong Mutation 199: gnu.trove.impl.sync.TSynchronizedFloatList.fill(IIF)V:158 - ReplaceVariable toIndex -> fromIndex
   * 6 Strong Mutation 193: gnu.trove.impl.sync.TSynchronizedFloatList.fill(IIF)V:158 - DeleteField: mutexLjava/lang/Object;
   */

  @Test
  public void test32()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(0);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0);
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessFloatList0.fill((-423), 31, (-423));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -423
         //
      }
  }

  //Test case number: 33
  /*
   * 8 covered goals:
   * 1 Strong Mutation 206: gnu.trove.impl.sync.TSynchronizedFloatList.reverse()V:162 - DeleteField: listLgnu/trove/list/TFloatList;
   * 2 Strong Mutation 1: gnu.trove.impl.sync.TSynchronizedFloatList.<init>(Lgnu/trove/list/TFloatList;Ljava/lang/Object;)V:65 - ReplaceVariable list -> list
   * 3 Strong Mutation 205: gnu.trove.impl.sync.TSynchronizedFloatList.reverse()V:162 - DeleteField: mutexLjava/lang/Object;
   * 4 Strong Mutation 207: gnu.trove.impl.sync.TSynchronizedFloatList.reverse()V:162 - DeleteStatement: reverse()V
   * 5 Strong Mutation 205: gnu.trove.impl.sync.TSynchronizedFloatList.reverse()V:162 - DeleteField: mutexLjava/lang/Object;
   * 6 Strong Mutation 207: gnu.trove.impl.sync.TSynchronizedFloatList.reverse()V:162 - DeleteStatement: reverse()V
   * 7 Strong Mutation 206: gnu.trove.impl.sync.TSynchronizedFloatList.reverse()V:162 - DeleteField: listLgnu/trove/list/TFloatList;
   * 8 gnu.trove.impl.sync.TSynchronizedFloatList.reverse()V: root-Branch
   */

  @Test
  public void test33()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(840, 282.93634F);
      Vector<Integer> vector0 = new Vector<Integer>();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 840;
      tFloatArrayList0.addAll(floatArray0);
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0, (Object) vector0);
      tSynchronizedFloatList0.reverse();
      assertEquals("{0.0, 0.0, 0.0, 840.0}", tFloatArrayList0.toString());
      assertEquals("{0.0, 0.0, 0.0, 840.0}", tSynchronizedFloatList0.toString());
  }

  //Test case number: 34
  /*
   * 7 covered goals:
   * 1 Strong Mutation 219: gnu.trove.impl.sync.TSynchronizedFloatList.shuffle(Ljava/util/Random;)V:169 - DeleteField: mutexLjava/lang/Object;
   * 2 Strong Mutation 220: gnu.trove.impl.sync.TSynchronizedFloatList.shuffle(Ljava/util/Random;)V:169 - DeleteField: listLgnu/trove/list/TFloatList;
   * 3 Strong Mutation 221: gnu.trove.impl.sync.TSynchronizedFloatList.shuffle(Ljava/util/Random;)V:169 - DeleteStatement: shuffle(Ljava/util/Random;)V
   * 4 Strong Mutation 220: gnu.trove.impl.sync.TSynchronizedFloatList.shuffle(Ljava/util/Random;)V:169 - DeleteField: listLgnu/trove/list/TFloatList;
   * 5 Strong Mutation 221: gnu.trove.impl.sync.TSynchronizedFloatList.shuffle(Ljava/util/Random;)V:169 - DeleteStatement: shuffle(Ljava/util/Random;)V
   * 6 Strong Mutation 219: gnu.trove.impl.sync.TSynchronizedFloatList.shuffle(Ljava/util/Random;)V:169 - DeleteField: mutexLjava/lang/Object;
   * 7 gnu.trove.impl.sync.TSynchronizedFloatList.shuffle(Ljava/util/Random;)V: root-Branch
   */

//   @Test
//   public void test34()  throws Throwable  {
//       float[] floatArray0 = new float[3];
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
//       TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0);
//       Random random0 = new Random();
//       tSynchronizedRandomAccessFloatList0.shuffle(random0);
//       assertEquals(0.31700522883387017, random0.nextDouble(), 0.01D);
//       assertEquals((-6857724463078806158L), random0.nextLong());
//   }

  //Test case number: 35
  /*
   * 7 covered goals:
   * 1 Strong Mutation 224: gnu.trove.impl.sync.TSynchronizedFloatList.sort()V:173 - DeleteStatement: sort()V
   * 2 Strong Mutation 222: gnu.trove.impl.sync.TSynchronizedFloatList.sort()V:173 - DeleteField: mutexLjava/lang/Object;
   * 3 Strong Mutation 223: gnu.trove.impl.sync.TSynchronizedFloatList.sort()V:173 - DeleteField: listLgnu/trove/list/TFloatList;
   * 4 Strong Mutation 222: gnu.trove.impl.sync.TSynchronizedFloatList.sort()V:173 - DeleteField: mutexLjava/lang/Object;
   * 5 Strong Mutation 223: gnu.trove.impl.sync.TSynchronizedFloatList.sort()V:173 - DeleteField: listLgnu/trove/list/TFloatList;
   * 6 Strong Mutation 224: gnu.trove.impl.sync.TSynchronizedFloatList.sort()V:173 - DeleteStatement: sort()V
   * 7 gnu.trove.impl.sync.TSynchronizedFloatList.sort()V: root-Branch
   */

  @Test
  public void test35()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (-750);
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0);
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList((TFloatList) tFloatArrayList0);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatLinkedList0);
      tSynchronizedRandomAccessFloatList0.sort();
      assertEquals("{-750.0, 0.0, 0.0, 0.0}", tSynchronizedRandomAccessFloatList0.toString());
      assertEquals("{-750.0, 0.0, 0.0, 0.0}", tFloatLinkedList0.toString());
  }

  //Test case number: 36
  /*
   * 3 covered goals:
   * 1 Strong Mutation 239: gnu.trove.impl.sync.TSynchronizedFloatList.binarySearch(F)I:180 - DeleteStatement: binarySearch(F)I
   * 2 gnu.trove.impl.sync.TSynchronizedFloatList.binarySearch(F)I: root-Branch
   * 3 Strong Mutation 239: gnu.trove.impl.sync.TSynchronizedFloatList.binarySearch(F)I:180 - DeleteStatement: binarySearch(F)I
   */

  @Test
  public void test36()  throws Throwable  {
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList();
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatLinkedList0);
      int int0 = tSynchronizedFloatList0.binarySearch(1.0F);
      assertEquals((-1), int0);
  }

  //Test case number: 37
  /*
   * 3 covered goals:
   * 1 Strong Mutation 245: gnu.trove.impl.sync.TSynchronizedFloatList.binarySearch(FII)I:183 - InsertUnaryOp IINC 1 fromIndex
   * 2 gnu.trove.impl.sync.TSynchronizedFloatList.binarySearch(FII)I: root-Branch
   * 3 Strong Mutation 245: gnu.trove.impl.sync.TSynchronizedFloatList.binarySearch(FII)I:183 - InsertUnaryOp IINC 1 fromIndex
   */

  @Test
  public void test37()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(0);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0);
      int int0 = tSynchronizedRandomAccessFloatList0.binarySearch((float) 0, 0, 0);
      assertEquals((-1), int0);
  }

  //Test case number: 38
  /*
   * 7 covered goals:
   * 1 Strong Mutation 253: gnu.trove.impl.sync.TSynchronizedFloatList.grep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;:187 - DeleteField: listLgnu/trove/list/TFloatList;
   * 2 Strong Mutation 254: gnu.trove.impl.sync.TSynchronizedFloatList.grep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;:187 - DeleteStatement: grep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;
   * 3 Strong Mutation 252: gnu.trove.impl.sync.TSynchronizedFloatList.grep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;:187 - DeleteField: mutexLjava/lang/Object;
   * 4 Strong Mutation 254: gnu.trove.impl.sync.TSynchronizedFloatList.grep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;:187 - DeleteStatement: grep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;
   * 5 Strong Mutation 252: gnu.trove.impl.sync.TSynchronizedFloatList.grep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;:187 - DeleteField: mutexLjava/lang/Object;
   * 6 Strong Mutation 253: gnu.trove.impl.sync.TSynchronizedFloatList.grep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;:187 - DeleteField: listLgnu/trove/list/TFloatList;
   * 7 gnu.trove.impl.sync.TSynchronizedFloatList.grep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;: root-Branch
   */

//   @Test
//   public void test38()  throws Throwable  {
//       TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList((-1.0F));
//       TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatLinkedList0);
//       TFloatLinkedList tFloatLinkedList1 = (TFloatLinkedList)tSynchronizedFloatList0.grep((TFloatProcedure) null);
//       assertEquals(0.0F, tFloatLinkedList1.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 39
  /*
   * 7 covered goals:
   * 1 Strong Mutation 257: gnu.trove.impl.sync.TSynchronizedFloatList.inverseGrep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;:190 - DeleteStatement: inverseGrep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;
   * 2 Strong Mutation 255: gnu.trove.impl.sync.TSynchronizedFloatList.inverseGrep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;:190 - DeleteField: mutexLjava/lang/Object;
   * 3 Strong Mutation 256: gnu.trove.impl.sync.TSynchronizedFloatList.inverseGrep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;:190 - DeleteField: listLgnu/trove/list/TFloatList;
   * 4 Strong Mutation 255: gnu.trove.impl.sync.TSynchronizedFloatList.inverseGrep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;:190 - DeleteField: mutexLjava/lang/Object;
   * 5 Strong Mutation 256: gnu.trove.impl.sync.TSynchronizedFloatList.inverseGrep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;:190 - DeleteField: listLgnu/trove/list/TFloatList;
   * 6 Strong Mutation 257: gnu.trove.impl.sync.TSynchronizedFloatList.inverseGrep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;:190 - DeleteStatement: inverseGrep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;
   * 7 gnu.trove.impl.sync.TSynchronizedFloatList.inverseGrep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;: root-Branch
   */

//   @Test
//   public void test39()  throws Throwable  {
//       TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList();
//       TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatLinkedList0);
//       TFloatLinkedList tFloatLinkedList1 = (TFloatLinkedList)tSynchronizedRandomAccessFloatList0.inverseGrep((TFloatProcedure) null);
//       assertEquals(0.0F, tFloatLinkedList1.sum(), 0.01F);
//   }

  //Test case number: 40
  /*
   * 2 covered goals:
   * 1 Strong Mutation 260: gnu.trove.impl.sync.TSynchronizedFloatList.max()F:193 - DeleteStatement: max()F
   * 2 gnu.trove.impl.sync.TSynchronizedFloatList.max()F: root-Branch
   */

//   @Test
//   public void test40()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(0);
//       TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
//       tFloatArrayList0.insert(0, (-1.0F));
//       float float0 = tSynchronizedFloatList0.max();
//       assertEquals((-1.0F), float0, 0.01F);
//   }

  //Test case number: 41
  /*
   * 3 covered goals:
   * 1 Strong Mutation 263: gnu.trove.impl.sync.TSynchronizedFloatList.min()F:194 - DeleteStatement: min()F
   * 2 gnu.trove.impl.sync.TSynchronizedFloatList.min()F: root-Branch
   * 3 Strong Mutation 263: gnu.trove.impl.sync.TSynchronizedFloatList.min()F:194 - DeleteStatement: min()F
   */

//   @Test
//   public void test41()  throws Throwable  {
//       float[] floatArray0 = new float[9];
//       floatArray0[3] = (-802.6813F);
//       TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, 0.0F);
//       TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
//       float float0 = tSynchronizedFloatList0.min();
//       assertEquals((-802.6813F), float0, 0.01F);
//   }

  //Test case number: 42
  /*
   * 6 covered goals:
   * 1 Strong Mutation 265: gnu.trove.impl.sync.TSynchronizedFloatList.sum()F:195 - DeleteField: listLgnu/trove/list/TFloatList;
   * 2 Strong Mutation 0: gnu.trove.impl.sync.TSynchronizedFloatList.<init>(Lgnu/trove/list/TFloatList;)V:61 - ReplaceVariable list -> list
   * 3 Strong Mutation 264: gnu.trove.impl.sync.TSynchronizedFloatList.sum()F:195 - DeleteField: mutexLjava/lang/Object;
   * 4 Strong Mutation 264: gnu.trove.impl.sync.TSynchronizedFloatList.sum()F:195 - DeleteField: mutexLjava/lang/Object;
   * 5 Strong Mutation 265: gnu.trove.impl.sync.TSynchronizedFloatList.sum()F:195 - DeleteField: listLgnu/trove/list/TFloatList;
   * 6 gnu.trove.impl.sync.TSynchronizedFloatList.sum()F: root-Branch
   */

  @Test
  public void test42()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (-750);
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0);
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList((TFloatList) tFloatArrayList0);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatLinkedList0);
      tSynchronizedRandomAccessFloatList0.sum();
      floatArray0[1] = 0.0F;
  }

  //Test case number: 43
  /*
   * 3 covered goals:
   * 1 Strong Mutation 269: gnu.trove.impl.sync.TSynchronizedFloatList.forEachDescending(Lgnu/trove/procedure/TFloatProcedure;)Z:198 - DeleteStatement: forEachDescending(Lgnu/trove/procedure/TFloatProcedure;)Z
   * 2 gnu.trove.impl.sync.TSynchronizedFloatList.forEachDescending(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   * 3 Strong Mutation 269: gnu.trove.impl.sync.TSynchronizedFloatList.forEachDescending(Lgnu/trove/procedure/TFloatProcedure;)Z:198 - DeleteStatement: forEachDescending(Lgnu/trove/procedure/TFloatProcedure;)Z
   */

  @Test
  public void test43()  throws Throwable  {
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList();
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatLinkedList0, (Object) "CN");
      boolean boolean0 = tSynchronizedRandomAccessFloatList0.forEachDescending((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }
}
