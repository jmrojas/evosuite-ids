/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TDoubleFunction;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap;
import gnu.trove.iterator.TObjectDoubleIterator;
import gnu.trove.map.TObjectDoubleMap;
import gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap;
import gnu.trove.map.hash.TObjectDoubleHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.procedure.TObjectDoubleProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableObjectDoubleMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.adjustOrPutValue(Ljava/lang/Object;DD)D: root-Branch
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V: I17 Branch 1 IFNONNULL L53 - true
   */

  @Test
  public void test0()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectDoubleCustomHashMap<Object> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, 142);
      TUnmodifiableObjectDoubleMap<Object> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Object>((TObjectDoubleMap<Object>) tObjectDoubleCustomHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableObjectDoubleMap0.adjustOrPutValue((Object) "", (double) 142, (double) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.putIfAbsent(Ljava/lang/Object;D)D: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Object>((-1758), (-1758));
      TUnmodifiableObjectDoubleMap<Object> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Object>((TObjectDoubleMap<Object>) tObjectDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableObjectDoubleMap0.putIfAbsent((Object) "it", (double) (-1758));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(198);
      TUnmodifiableObjectDoubleMap<Double> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Double>((TObjectDoubleMap<Double>) tObjectDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableObjectDoubleMap0.transformValues((TDoubleFunction) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.clear()V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) (-854);
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Object>((int) integerArray0[0]);
      TUnmodifiableObjectDoubleMap<Object> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Object>((TObjectDoubleMap<Object>) tObjectDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableObjectDoubleMap0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.put(Ljava/lang/Object;D)D: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>((-352));
      TUnmodifiableObjectDoubleMap<Double> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Double>((TObjectDoubleMap<Double>) tObjectDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableObjectDoubleMap0.put((Double) null, (double) (-352));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Object>(165, 165, 165);
      TUnmodifiableObjectDoubleMap<Object> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Object>((TObjectDoubleMap<Object>) tObjectDoubleHashMap0);
      boolean boolean0 = tUnmodifiableObjectDoubleMap0.forEachValue((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.hashCode()I: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectDoubleCustomHashMap<Integer> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, 142, (float) 142);
      TUnmodifiableObjectDoubleMap<Integer> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Integer>((TObjectDoubleMap<Integer>) tObjectDoubleCustomHashMap0);
      int int0 = tUnmodifiableObjectDoubleMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 7
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.size()I: root-Branch
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.forEachEntry(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: root-Branch
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.getNoEntryValue()D: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectDoubleCustomHashMap<Integer> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, 142, (float) 142);
      TUnmodifiableObjectDoubleMap<Integer> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Integer>((TObjectDoubleMap<Integer>) tObjectDoubleCustomHashMap0);
      TObjectDoubleCustomHashMap<Object> tObjectDoubleCustomHashMap1 = new TObjectDoubleCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, (TObjectDoubleMap<?>) tUnmodifiableObjectDoubleMap0);
      assertEquals(3, tObjectDoubleCustomHashMap1.capacity());
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keys()[Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TObjectDoubleCustomHashMap<Integer> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Integer>((HashingStrategy<? super Integer>) null, 38, (float) 38, (double) 38);
      TUnmodifiableObjectDoubleMap<Integer> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Integer>((TObjectDoubleMap<Integer>) tObjectDoubleCustomHashMap0);
      Object[] objectArray0 = tUnmodifiableObjectDoubleMap0.keys();
      assertNotNull(objectArray0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TObjectDoubleCustomHashMap<Double> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Double>((HashingStrategy<? super Double>) null, 38, (float) 38, (double) 38);
      TUnmodifiableObjectDoubleMap<Double> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Double>((TObjectDoubleMap<Double>) tObjectDoubleCustomHashMap0);
      boolean boolean0 = tUnmodifiableObjectDoubleMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.adjustValue(Ljava/lang/Object;D)Z: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TObjectDoubleCustomHashMap<Integer> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Integer>((HashingStrategy<? super Integer>) null, 38, (float) 38, (double) 38);
      TObjectDoubleCustomHashMap<Object> tObjectDoubleCustomHashMap1 = new TObjectDoubleCustomHashMap<Object>((HashingStrategy<? super Object>) null, (TObjectDoubleMap<?>) tObjectDoubleCustomHashMap0);
      TUnmodifiableObjectDoubleMap<Object> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Object>((TObjectDoubleMap<Object>) tObjectDoubleCustomHashMap1);
      // Undeclared exception!
      try {
        tUnmodifiableObjectDoubleMap0.adjustValue((Object) "", (double) 38);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>((-1819));
      TUnmodifiableObjectDoubleMap<Double> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Double>((TObjectDoubleMap<Double>) tObjectDoubleHashMap0);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      // Undeclared exception!
      try {
        tUnmodifiableObjectDoubleMap0.putAll((Map<? extends Double, ? extends Double>) hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.increment(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>();
      TUnmodifiableObjectDoubleMap<Integer> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Integer>((TObjectDoubleMap<Integer>) tObjectDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableObjectDoubleMap0.increment((Integer) (-1606));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.remove(Ljava/lang/Object;)D: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(385, 385);
      TUnmodifiableObjectDoubleMap<Integer> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Integer>((TObjectDoubleMap<Integer>) tObjectDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableObjectDoubleMap0.remove((Object) 385);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.putAll(Lgnu/trove/map/TObjectDoubleMap;)V: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(17);
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap1 = new TObjectDoubleHashMap<Object>((TObjectDoubleMap<?>) tObjectDoubleHashMap0);
      TUnmodifiableObjectDoubleMap<Object> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Object>((TObjectDoubleMap<Object>) tObjectDoubleHashMap1);
      // Undeclared exception!
      try {
        tUnmodifiableObjectDoubleMap0.putAll((TObjectDoubleMap<?>) tObjectDoubleHashMap1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.retainEntries(Lgnu/trove/procedure/TObjectDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TObjectDoubleCustomHashMap<Object> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Object>();
      TUnmodifiableObjectDoubleMap<Object> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Object>((TObjectDoubleMap<Object>) tObjectDoubleCustomHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableObjectDoubleMap0.retainEntries((TObjectDoubleProcedure<? super Object>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.values()[D: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TObjectDoubleCustomHashMap<Double> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Double>((HashingStrategy<? super Double>) null, 38, (float) 38, (double) 38);
      TUnmodifiableObjectDoubleMap<Double> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Double>((TObjectDoubleMap<Double>) tObjectDoubleCustomHashMap0);
      double[] doubleArray0 = tUnmodifiableObjectDoubleMap0.values();
      assertNotNull(doubleArray0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TObjectDoubleCustomHashMap<Double> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Double>((HashingStrategy<? super Double>) null, 38, (float) 38, (double) 38);
      TUnmodifiableObjectDoubleMap<Double> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Double>((TObjectDoubleMap<Double>) tObjectDoubleCustomHashMap0);
      Double[] doubleArray0 = new Double[6];
      ToObjectArrayProceedure<Double> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Double>(doubleArray0);
      boolean boolean0 = tUnmodifiableObjectDoubleMap0.forEachKey((TObjectProcedure<? super Double>) toObjectArrayProceedure0);
      assertEquals(true, boolean0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.get(Ljava/lang/Object;)D: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>((-854));
      Integer[] integerArray0 = new Integer[6];
      integerArray0[3] = (Integer) (-854);
      integerArray0[5] = (Integer) (-854);
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap1 = new TObjectDoubleHashMap<Double>((int) integerArray0[5], (float) integerArray0[3]);
      TUnmodifiableObjectDoubleMap<Double> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Double>((TObjectDoubleMap<Double>) tObjectDoubleHashMap1);
      double double0 = tUnmodifiableObjectDoubleMap0.get((Object) tObjectDoubleHashMap0);
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.containsKey(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>((-1606), (-1606), (-1606));
      TUnmodifiableObjectDoubleMap<Double> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Double>((TObjectDoubleMap<Double>) tObjectDoubleHashMap0);
      boolean boolean0 = tUnmodifiableObjectDoubleMap0.containsKey((Object) (-1606));
      assertEquals(false, boolean0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(385, 385);
      TUnmodifiableObjectDoubleMap<Integer> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Integer>((TObjectDoubleMap<Integer>) tObjectDoubleHashMap0);
      String string0 = tUnmodifiableObjectDoubleMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 21
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.iterator()Lgnu/trove/iterator/TObjectDoubleIterator;: root-Branch
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap$1.<init>(Lgnu/trove/impl/unmodifiable/TUnmodifiableObjectDoubleMap;)V: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectDoubleCustomHashMap<Object> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, 142);
      TUnmodifiableObjectDoubleMap<Object> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Object>((TObjectDoubleMap<Object>) tObjectDoubleCustomHashMap0);
      TObjectDoubleIterator<Object> tObjectDoubleIterator0 = tUnmodifiableObjectDoubleMap0.iterator();
      assertEquals(false, tObjectDoubleIterator0.hasNext());
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.values([D)[D: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>((-854));
      TUnmodifiableObjectDoubleMap<Integer> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Integer>((TObjectDoubleMap<Integer>) tObjectDoubleHashMap0);
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = tUnmodifiableObjectDoubleMap0.values(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.containsValue(D)Z: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(385, 385);
      TUnmodifiableObjectDoubleMap<Integer> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Integer>((TObjectDoubleMap<Integer>) tObjectDoubleHashMap0);
      boolean boolean0 = tUnmodifiableObjectDoubleMap0.containsValue((double) 385);
      assertEquals(false, boolean0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>((-854));
      TUnmodifiableObjectDoubleMap<Integer> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Integer>((TObjectDoubleMap<Integer>) tObjectDoubleHashMap0);
      Integer[] integerArray0 = new Integer[6];
      Integer[] integerArray1 = tUnmodifiableObjectDoubleMap0.keys(integerArray0);
      assertSame(integerArray1, integerArray0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V: I17 Branch 1 IFNONNULL L53 - false
   */

  @Test
  public void test25()  throws Throwable  {
      TUnmodifiableObjectDoubleMap<Object> tUnmodifiableObjectDoubleMap0 = null;
      try {
        tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Object>((TObjectDoubleMap<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keySet()Ljava/util/Set;: I4 Branch 2 IFNONNULL L74 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.keySet()Ljava/util/Set;: I4 Branch 2 IFNONNULL L74 - false
   */

  @Test
  public void test26()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>((-854));
      TUnmodifiableObjectDoubleMap<Integer> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Integer>((TObjectDoubleMap<Integer>) tObjectDoubleHashMap0);
      Set<Integer> set0 = tUnmodifiableObjectDoubleMap0.keySet();
      assertNotNull(set0);
      
      Set<Integer> set1 = tUnmodifiableObjectDoubleMap0.keySet();
      assertSame(set1, set0);
  }

  //Test case number: 27
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;: I4 Branch 3 IFNONNULL L82 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;: I4 Branch 3 IFNONNULL L82 - false
   */

  @Test
  public void test27()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectDoubleCustomHashMap<Integer> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, 142, (float) 142);
      TUnmodifiableObjectDoubleMap<Integer> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Integer>((TObjectDoubleMap<Integer>) tObjectDoubleCustomHashMap0);
      TUnmodifiableDoubleCollection tUnmodifiableDoubleCollection0 = (TUnmodifiableDoubleCollection)tUnmodifiableObjectDoubleMap0.valueCollection();
      assertNotNull(tUnmodifiableDoubleCollection0);
      
      TUnmodifiableDoubleCollection tUnmodifiableDoubleCollection1 = (TUnmodifiableDoubleCollection)tUnmodifiableObjectDoubleMap0.valueCollection();
      assertSame(tUnmodifiableDoubleCollection1, tUnmodifiableDoubleCollection0);
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - false
   */

  @Test
  public void test28()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(17);
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap1 = new TObjectDoubleHashMap<Object>((TObjectDoubleMap<?>) tObjectDoubleHashMap0);
      TUnmodifiableObjectDoubleMap<Object> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Object>((TObjectDoubleMap<Object>) tObjectDoubleHashMap1);
      boolean boolean0 = tUnmodifiableObjectDoubleMap0.equals((Object) tObjectDoubleHashMap0);
      assertEquals(true, boolean0);
  }

  //Test case number: 29
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - false
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - true
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap.<init>(Lgnu/trove/map/TObjectDoubleMap;)V: I17 Branch 1 IFNONNULL L53 - true
   */

  @Test
  public void test29()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) (-854);
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Object>((int) integerArray0[0]);
      TUnmodifiableObjectDoubleMap<Object> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Object>((TObjectDoubleMap<Object>) tObjectDoubleHashMap0);
      boolean boolean0 = tUnmodifiableObjectDoubleMap0.equals((Object) integerArray0);
      assertEquals(false, boolean0);
  }
}
