/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TDoubleCollection;
import gnu.trove.impl.sync.TSynchronizedDoubleList;
import gnu.trove.impl.sync.TSynchronizedRandomAccessDoubleList;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessDoubleList;
import gnu.trove.list.TDoubleList;
import gnu.trove.list.array.TDoubleArrayList;
import gnu.trove.list.linked.TDoubleLinkedList;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.LinkedList;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedRandomAccessDoubleListEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1632.7151638647624);
      doubleArray0[0] = double0;
      double double1 = (-349.8769860067298);
      doubleArray0[1] = double1;
      double double2 = 0.0;
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0, double2);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      int int0 = 962;
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessDoubleList0.subList(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // end index < 2
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 58.28222133144249;
      doubleArray0[1] = double1;
      double double2 = 858.7502869694806;
      doubleArray0[2] = double2;
      double double3 = (-373.6887042552495);
      doubleArray0[3] = double3;
      double double4 = (-1.0);
      doubleArray0[4] = double4;
      double double5 = 1221.1310320526618;
      doubleArray0[5] = double5;
      double double6 = (-1748.904770695259);
      doubleArray0[6] = double6;
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(doubleArray0);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      int int0 = 275;
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessDoubleList0.subList(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // end index < 7
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      int int0 = 1;
      int int1 = 1083;
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessDoubleList0.subList(int0, int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // end index < 10
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      Locale locale0 = Locale.KOREAN;
      double[] doubleArray0 = new double[9];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = (-1.0);
      doubleArray0[1] = double1;
      double double2 = 1.0;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = (-1201.291106275877);
      doubleArray0[4] = double4;
      double double5 = (-1921.4726860511714);
      doubleArray0[5] = double5;
      double double6 = (-542.6470069725314);
      doubleArray0[6] = double6;
      double double7 = 0.0;
      doubleArray0[7] = double7;
      double double8 = 2019.7134558237647;
      doubleArray0[8] = double8;
      int int0 = 0;
      int int1 = 266;
      int int2 = 1837;
      // Undeclared exception!
      try {
        tDoubleArrayList0.toArray(doubleArray0, int0, int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TDoubleList tDoubleList0 = null;
          String string0 = "index ";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 10;
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(int0, int0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayScript();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0, (Object) string0);
      tSynchronizedRandomAccessDoubleList0.clear();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      double double0 = 0.0;
      doubleArray0[4] = double0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      double double1 = 0.0;
      TDoubleArrayList tDoubleArrayList1 = TDoubleArrayList.wrap(doubleArray0, double1);
      assertEquals(0.0, tDoubleArrayList1.min(), 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      TDoubleList tDoubleList0 = null;
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://?#
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TDoubleList tDoubleList0 = null;
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = null;
      try {
        tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList(tDoubleList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TDoubleList tDoubleList0 = null;
      TDoubleLinkedList tDoubleLinkedList0 = null;
      try {
        tDoubleLinkedList0 = new TDoubleLinkedList(tDoubleList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      int int0 = (-1748);
      // Undeclared exception!
      try {
        tDoubleLinkedList0.subList(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // begin index can not be < 0
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TDoubleList tDoubleList0 = null;
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = null;
      try {
        tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList(tDoubleList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      int int0 = (-202);
      tDoubleArrayList0.ensureCapacity(int0);
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleArrayList0);
      TDoubleArrayList tDoubleArrayList1 = (TDoubleArrayList)tSynchronizedDoubleList0.list;
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tDoubleArrayList1);
      String string0 = "";
      File file0 = new File(string0);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      double double0 = 1.0;
      doubleArray0[4] = double0;
      doubleArray0[5] = (double) int0;
      tSynchronizedRandomAccessDoubleList0.add(doubleArray0);
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TDoubleList tDoubleList0 = null;
      String string0 = "0ddSW7niY=C ";
      String string1 = "/Ad";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string1, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: 0ddSW7niY=C :///Ad/Ad#/Ad
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = double0;
      double double1 = 206.13256495232616;
      doubleArray0[1] = double1;
      double double2 = (-536.3158313637155);
      doubleArray0[2] = double2;
      double double3 = 450.96938535054494;
      doubleArray0[3] = double3;
      double double4 = (-993.874050287455);
      double double5 = (-1091.221208257454);
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList(double5);
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleLinkedList0);
      int int0 = 0;
      int int1 = 0;
      tSynchronizedDoubleList0.subList(int0, int1);
      String string0 = "{";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TDoubleList tDoubleList0 = null;
      String string0 = "";
      int int0 = (-718);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://@:-718?#
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 1363;
      double double0 = 0.0;
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(int0, double0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = linkedList0.toString();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0, (Object) string0);
      TDoubleArrayList tDoubleArrayList1 = (TDoubleArrayList)tSynchronizedRandomAccessDoubleList0.list;
      Object object0 = null;
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleArrayList1, object0);
      int int1 = 1;
      // Undeclared exception!
      try {
        tSynchronizedDoubleList0.subList(int0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = (-515);
      TDoubleArrayList tDoubleArrayList0 = null;
      try {
        tDoubleArrayList0 = new TDoubleArrayList(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      double double0 = 1942.5039965716983;
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList(double0);
      int int0 = (-922);
      int int1 = 0;
      // Undeclared exception!
      try {
        tDoubleLinkedList0.subList(int0, int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // begin index can not be < 0
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      int int0 = (-1685);
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1685
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      TDoubleList tDoubleList0 = null;
      Object object0 = null;
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList(tDoubleList0, object0);
      TDoubleCollection tDoubleCollection0 = tSynchronizedDoubleList0.c;
      TDoubleArrayList tDoubleArrayList0 = null;
      try {
        tDoubleArrayList0 = new TDoubleArrayList(tDoubleCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
