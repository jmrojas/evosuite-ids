/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedShortCollection;
import gnu.trove.impl.sync.TSynchronizedShortShortMap;
import gnu.trove.map.TShortShortMap;
import gnu.trove.map.hash.TShortShortHashMap;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.RandomAccessFile;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedShortShortMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 31;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0);
      String string0 = " exceeds size ";
      String string1 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0:  exceeds size :%20exceeds%20size%20#
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 1161;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0);
      short short0 = (short)153;
      short short1 = (short)1431;
      tShortShortHashMap0.put(short0, short1);
      Locale locale0 = Locale.CANADA;
      String string0 = locale0.getISO3Language();
      tShortShortHashMap0.keySet();
      TSynchronizedShortShortMap tSynchronizedShortShortMap0 = new TSynchronizedShortShortMap((TShortShortMap) tShortShortHashMap0, (Object) string0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale1 = Locale.getDefault(locale_Category0);
      Locale.setDefault(locale_Category0, locale1);
      TSynchronizedShortShortMap tSynchronizedShortShortMap1 = new TSynchronizedShortShortMap((TShortShortMap) tSynchronizedShortShortMap0);
      tSynchronizedShortShortMap1.values(tShortShortHashMap0._set);
      int int1 = 876;
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap(int1, int1);
      String string1 = "";
      tShortShortHashMap1.getNoEntryValue();
      String string2 = "";
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(string1, string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 1307;
      float float0 = 492.56155F;
      int int1 = 1;
      float float1 = 1812.0773F;
      short short0 = (short) (-1983);
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int1, float1, short0, short0);
      TSynchronizedShortShortMap tSynchronizedShortShortMap0 = new TSynchronizedShortShortMap((TShortShortMap) tShortShortHashMap0);
      tSynchronizedShortShortMap0.values();
      short short1 = (short)0;
      short short2 = (short)787;
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap(int0, float0, short1, short2);
      String string0 = "{";
      File file0 = new File(string0);
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = (short)241;
      shortArray0[0] = short0;
      short short1 = (short)455;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(shortArray0, shortArray0);
      TSynchronizedShortShortMap tSynchronizedShortShortMap0 = new TSynchronizedShortShortMap((TShortShortMap) tShortShortHashMap0);
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap((TShortShortMap) tSynchronizedShortShortMap0);
      TSynchronizedShortShortMap tSynchronizedShortShortMap1 = new TSynchronizedShortShortMap((TShortShortMap) tShortShortHashMap1);
      tSynchronizedShortShortMap1.putAll((TShortShortMap) tSynchronizedShortShortMap0);
      assertEquals(17, tShortShortHashMap1.capacity());
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-274);
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0);
      int int1 = 1513;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int1);
      String string0 = byteArrayOutputStream0.toString();
      TSynchronizedShortShortMap tSynchronizedShortShortMap0 = new TSynchronizedShortShortMap((TShortShortMap) tShortShortHashMap0, (Object) string0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      short short0 = (short)0;
      short short1 = (short)0;
      tSynchronizedShortShortMap0.adjustOrPutValue(short0, short0, short1);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 0;
          short short0 = (short) (-1292);
          TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
          String string0 = ";\"Z`>V0xCE";
          File file0 = new File(string0);
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \";\"Z`>V0xCE/;\"Z`>V0xCE1824683342425428146;\"Z`>V0xCE\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.File.createTempFile(File.java:1871)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:601)
             // org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:264)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
      TShortShortMap tShortShortMap0 = null;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string0 = locale0.getDisplayCountry();
      TSynchronizedShortShortMap tSynchronizedShortShortMap0 = new TSynchronizedShortShortMap(tShortShortMap0, (Object) string0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)111;
      byteArray0[1] = byte1;
      byte byte2 = (byte)84;
      byteArray0[2] = byte2;
      byte byte3 = (byte)81;
      byteArray0[3] = byte3;
      byte byte4 = (byte)15;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      int int0 = 374;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, int0, (int) byteArray0[4]);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)139;
      shortArray0[0] = short0;
      short short1 = (short) (-1368);
      shortArray0[1] = short1;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(shortArray0, shortArray0);
      TSynchronizedShortShortMap tSynchronizedShortShortMap0 = new TSynchronizedShortShortMap((TShortShortMap) tShortShortHashMap0);
      String string0 = "";
      File file0 = new File(string0);
      String string1 = file0.getPath();
      boolean boolean0 = tSynchronizedShortShortMap0.equals((Object) string1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 132;
      int int1 = 0;
      float float0 = 0.0F;
      short short0 = (short)0;
      int int2 = 0;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int2);
      String string0 = "H:= }$(UE*| Oz~";
      int int3 = 1;
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int3, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: H:= }$(UE*| Oz~://H:=%20%7D$(UE*%7C%20O%7Fz~@[H:= }$(UE*| Oz~]:1H:=%20%7D$(UE*%7C%20O%7Fz~?H:=%20%7D$(UE*%7C%20O%7Fz~#H:=%20%7D$(UE*%7C%20O%7Fz~
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)6421;
      shortArray0[1] = short1;
      short short2 = (short)1653;
      shortArray0[2] = short2;
      short short3 = (short)823;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)825;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap((int) short2, (float) short3, short4, short1);
      TSynchronizedShortShortMap tSynchronizedShortShortMap0 = new TSynchronizedShortShortMap((TShortShortMap) tShortShortHashMap0);
      TSynchronizedShortShortMap tSynchronizedShortShortMap1 = new TSynchronizedShortShortMap((TShortShortMap) tSynchronizedShortShortMap0);
      short short6 = (short) (-23057);
      tSynchronizedShortShortMap1.increment(shortArray0[0]);
      short short7 = (short)1147;
      tSynchronizedShortShortMap1.adjustValue(short6, short7);
      shortArray0[5] = short5;
      short short8 = (short) (-1);
      shortArray0[6] = short8;
      short short9 = (short)0;
      shortArray0[7] = short9;
      TShortShortMap tShortShortMap0 = null;
      TSynchronizedShortShortMap tSynchronizedShortShortMap2 = null;
      try {
        tSynchronizedShortShortMap2 = new TSynchronizedShortShortMap(tShortShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-2022);
      float float0 = 0.0F;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0, float0);
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.UK;
      String string0 = locale0.getDisplayVariant(locale1);
      // Undeclared exception!
      try {
        locale0.getUnicodeLocaleType(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short)882;
      shortArray0[0] = short0;
      shortArray0[0] = short0;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap((int) short0);
      TSynchronizedShortShortMap tSynchronizedShortShortMap0 = new TSynchronizedShortShortMap((TShortShortMap) tShortShortHashMap0);
      short[] shortArray1 = tSynchronizedShortShortMap0.values();
      assertNotNull(shortArray1);
      
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap(shortArray0, shortArray0);
      TSynchronizedShortShortMap tSynchronizedShortShortMap1 = new TSynchronizedShortShortMap((TShortShortMap) tShortShortHashMap1);
      short short1 = (short)31;
      tSynchronizedShortShortMap1.putIfAbsent(shortArray0[0], short1);
      tSynchronizedShortShortMap1.putAll((TShortShortMap) tShortShortHashMap1);
      assertEquals(5, tShortShortHashMap1.capacity());
      assertEquals(1, tSynchronizedShortShortMap1.size());
  }

  @Test
  public void test12()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      TSynchronizedShortShortMap tSynchronizedShortShortMap0 = new TSynchronizedShortShortMap((TShortShortMap) tShortShortHashMap0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)58;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)25;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-76);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-119);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-18);
      byteArray0[5] = byte5;
      byte byte6 = (byte)122;
      byteArray0[6] = byte6;
      byte byte7 = (byte)44;
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      byteArray0[8] = byte8;
      tShortShortHashMap0._states = byteArray0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = true;
      int int0 = 897;
      PipedInputStream pipedInputStream0 = new PipedInputStream(int0);
      pipedOutputStream0.connect(pipedInputStream0);
      PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0, boolean0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      tShortShortHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      short short0 = (short) (-1598);
      tShortShortHashMap0.remove(short0);
      // Undeclared exception!
      try {
        tSynchronizedShortShortMap0.keys(tShortShortHashMap0._set);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :#
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 567;
      float float0 = (-1.0F);
      int int1 = 5471;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int1, int0);
      TSynchronizedShortShortMap tSynchronizedShortShortMap0 = new TSynchronizedShortShortMap((TShortShortMap) tShortShortHashMap0);
      short short0 = (short) (-172);
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap(int0, float0, short0, short0);
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = locale0.toLanguageTag();
      TSynchronizedShortShortMap tSynchronizedShortShortMap1 = new TSynchronizedShortShortMap((TShortShortMap) tShortShortHashMap1, (Object) string0);
      short short1 = (short)0;
      short short2 = (short) (-1337);
      short short3 = tSynchronizedShortShortMap1.adjustOrPutValue(short1, short2, short2);
      assertEquals(7, tShortShortHashMap1.capacity());
      assertEquals((short) (-1337), short3);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-1);
      short short0 = (short)0;
      short short1 = (short) (-1213);
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0, (float) int0, short0, short1);
      TSynchronizedShortShortMap tSynchronizedShortShortMap0 = new TSynchronizedShortShortMap((TShortShortMap) tShortShortHashMap0);
      OutputStream outputStream0 = null;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(outputStream0);
      PrintStream printStream0 = new PrintStream((OutputStream) filterOutputStream0);
      Locale locale0 = Locale.UK;
      String string0 = "(5[`8";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) outputStream0;
      TSynchronizedShortShortMap tSynchronizedShortShortMap1 = (TSynchronizedShortShortMap)tSynchronizedShortShortMap0.mutex;
      objectArray0[2] = (Object) tSynchronizedShortShortMap1;
      objectArray0[3] = (Object) int0;
      objectArray0[4] = (Object) locale0;
      // Undeclared exception!
      try {
        printStream0.format(locale0, string0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = (-491);
      short short0 = (short)0;
      short short1 = (short) (-1113);
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0, (float) int0, short0, short1);
      Locale locale0 = Locale.KOREAN;
      String string0 = locale0.getDisplayName();
      TSynchronizedShortShortMap tSynchronizedShortShortMap0 = new TSynchronizedShortShortMap((TShortShortMap) tShortShortHashMap0, (Object) string0);
      TSynchronizedShortShortMap tSynchronizedShortShortMap1 = new TSynchronizedShortShortMap((TShortShortMap) tSynchronizedShortShortMap0);
      assertNotSame(tSynchronizedShortShortMap0, tSynchronizedShortShortMap1);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 1176;
      float float0 = 492.313F;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0, float0);
      TSynchronizedShortShortMap tSynchronizedShortShortMap0 = new TSynchronizedShortShortMap((TShortShortMap) tShortShortHashMap0);
      Locale locale0 = Locale.US;
      tSynchronizedShortShortMap0.getNoEntryKey();
      String string0 = locale0.toString();
      TSynchronizedShortShortMap tSynchronizedShortShortMap1 = new TSynchronizedShortShortMap((TShortShortMap) tSynchronizedShortShortMap0, (Object) string0);
      TSynchronizedShortCollection tSynchronizedShortCollection0 = (TSynchronizedShortCollection)tSynchronizedShortShortMap1.valueCollection();
      assertEquals(true, tSynchronizedShortCollection0.isEmpty());
  }

  @Test
  public void test18()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short) (-648);
      shortArray0[0] = short0;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(shortArray0, shortArray0);
      TSynchronizedShortShortMap tSynchronizedShortShortMap0 = new TSynchronizedShortShortMap((TShortShortMap) tShortShortHashMap0);
      tSynchronizedShortShortMap0.remove(short0);
      TSynchronizedShortShortMap tSynchronizedShortShortMap1 = new TSynchronizedShortShortMap((TShortShortMap) tShortShortHashMap0);
      Object object0 = new Object();
      TSynchronizedShortShortMap tSynchronizedShortShortMap2 = new TSynchronizedShortShortMap((TShortShortMap) tSynchronizedShortShortMap1, object0);
      assertEquals(0, tShortShortHashMap0.size());
      
      tSynchronizedShortShortMap2.adjustOrPutValue(shortArray0[0], short0, short0);
      int int0 = 63;
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap();
      TSynchronizedShortShortMap tSynchronizedShortShortMap3 = new TSynchronizedShortShortMap((TShortShortMap) tShortShortHashMap1);
      tSynchronizedShortShortMap3.valueCollection();
      float float0 = 593.8937F;
      short short1 = (short)227;
      short short2 = (short)0;
      shortArray0[0] = short2;
      tSynchronizedShortShortMap2.size();
      tSynchronizedShortShortMap3.keys();
      TSynchronizedShortShortMap tSynchronizedShortShortMap4 = new TSynchronizedShortShortMap((TShortShortMap) tShortShortHashMap1, object0);
      TShortShortHashMap tShortShortHashMap2 = new TShortShortHashMap(int0, float0, short1, short1);
      Object object1 = null;
      TSynchronizedShortShortMap tSynchronizedShortShortMap5 = new TSynchronizedShortShortMap((TShortShortMap) tShortShortHashMap1, object1);
      Locale locale0 = Locale.GERMANY;
      TSynchronizedShortShortMap tSynchronizedShortShortMap6 = new TSynchronizedShortShortMap((TShortShortMap) tShortShortHashMap2);
      tSynchronizedShortShortMap6.iterator();
      String string0 = locale0.getISO3Country();
      TSynchronizedShortShortMap tSynchronizedShortShortMap7 = new TSynchronizedShortShortMap((TShortShortMap) tShortShortHashMap2, (Object) string0);
      short short3 = tSynchronizedShortShortMap7.getNoEntryValue();
      assertEquals((short)227, short3);
  }
}
