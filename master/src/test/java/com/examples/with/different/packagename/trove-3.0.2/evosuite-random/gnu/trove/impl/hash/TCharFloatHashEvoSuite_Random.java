/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TCharFloatMap;
import gnu.trove.map.hash.TCharFloatHashMap;
import gnu.trove.procedure.TCharFloatProcedure;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharFloatHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap();
      int int0 = 842879579;
      // Undeclared exception!
      try {
        tCharFloatHashMap0.ensureCapacity(int0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

//   @Test
//   public void test1()  throws Throwable  {
//       char[] charArray0 = new char[10];
//       char char0 = '5';
//       charArray0[0] = char0;
//       char char1 = 'N';
//       charArray0[1] = char1;
//       char char2 = 'U';
//       charArray0[2] = char2;
//       char char3 = '|';
//       charArray0[3] = char3;
//       char char4 = 'M';
//       charArray0[4] = char4;
//       char char5 = '&';
//       charArray0[5] = char5;
//       char char6 = '~';
//       charArray0[6] = char6;
//       char char7 = '|';
//       charArray0[7] = char7;
//       char char8 = 'N';
//       charArray0[8] = char8;
//       char char9 = 'L';
//       charArray0[9] = char9;
//       float[] floatArray0 = new float[9];
//       floatArray0[0] = (float) char4;
//       floatArray0[1] = (float) charArray0[0];
//       floatArray0[2] = (float) charArray0[2];
//       floatArray0[3] = (float) charArray0[0];
//       floatArray0[4] = (float) char6;
//       floatArray0[5] = (float) char2;
//       floatArray0[6] = (float) charArray0[4];
//       floatArray0[7] = (float) charArray0[0];
//       floatArray0[8] = (float) charArray0[4];
//       TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(charArray0, floatArray0);
//       assertEquals("{U=85.0, &=85.0, |=53.0, ~=77.0, N=77.0, M=126.0, 5=77.0}", tCharFloatHashMap0.toString());
//       
//       int int0 = 0;
//       TCharFloatHashMap tCharFloatHashMap1 = new TCharFloatHashMap(int0);
//       assertEquals(0.0F, tCharFloatHashMap1.getNoEntryValue(), 0.01F);
//   }

//   @Test
//   public void test2()  throws Throwable  {
//       TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap();
//       char char0 = ':';
//       float float0 = tCharFloatHashMap0.remove(char0);
//       assertEquals('\u0000', tCharFloatHashMap0.getNoEntryKey());
//       assertEquals(0, tCharFloatHashMap0.size());
//       assertEquals(0.0F, float0, 0.01F);
//       assertEquals(23, tCharFloatHashMap0.capacity());
//   }

//   @Test
//   public void test3()  throws Throwable  {
//       char[] charArray0 = new char[7];
//       char char0 = 'Q';
//       charArray0[0] = char0;
//       char char1 = '=';
//       charArray0[1] = char1;
//       char char2 = '~';
//       charArray0[2] = char2;
//       char char3 = ']';
//       charArray0[3] = char3;
//       char char4 = '3';
//       charArray0[4] = char4;
//       char char5 = 'D';
//       charArray0[5] = char5;
//       char char6 = 'A';
//       charArray0[6] = char6;
//       float[] floatArray0 = new float[1];
//       floatArray0[0] = (float) charArray0[6];
//       TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(charArray0, floatArray0);
//       float float0 = tCharFloatHashMap0.get(charArray0[1]);
//       assertEquals(17, tCharFloatHashMap0.capacity());
//       assertEquals(0.0F, float0, 0.01F);
//       assertEquals("{Q=65.0}", tCharFloatHashMap0.toString());
//   }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          char[] charArray0 = new char[8];
          char char0 = '8';
          charArray0[0] = char0;
          char char1 = '$';
          charArray0[1] = char1;
          char char2 = 'O';
          charArray0[2] = char2;
          char char3 = 'K';
          charArray0[3] = char3;
          char char4 = '>';
          charArray0[4] = char4;
          char char5 = 'R';
          charArray0[5] = char5;
          char char6 = 'g';
          charArray0[6] = char6;
          char char7 = '0';
          charArray0[7] = char7;
          float[] floatArray0 = new float[3];
          floatArray0[0] = (float) charArray0[7];
          floatArray0[1] = (float) char0;
          floatArray0[2] = (float) charArray0[4];
          TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(charArray0, floatArray0);
          String string0 = "";
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // sun.reflect.GeneratedConstructorAccessor11.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

//   @Test
//   public void test5()  throws Throwable  {
//       char[] charArray0 = new char[8];
//       char char0 = 's';
//       charArray0[0] = char0;
//       char char1 = '_';
//       charArray0[1] = char1;
//       char char2 = '@';
//       charArray0[2] = char2;
//       char char3 = 'F';
//       charArray0[3] = char3;
//       char char4 = '3';
//       charArray0[4] = char4;
//       char char5 = 'g';
//       charArray0[5] = char5;
//       char char6 = '<';
//       charArray0[6] = char6;
//       char char7 = '?';
//       charArray0[7] = char7;
//       float[] floatArray0 = new float[6];
//       floatArray0[0] = (float) char4;
//       float float0 = (-380.1542F);
//       floatArray0[1] = float0;
//       floatArray0[2] = (float) charArray0[3];
//       floatArray0[3] = (float) charArray0[6];
//       floatArray0[4] = (float) char2;
//       floatArray0[5] = (float) charArray0[2];
//       TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(charArray0, floatArray0);
//       float float1 = Float.POSITIVE_INFINITY;
//       float float2 = (-1004.4185F);
//       float float3 = tCharFloatHashMap0.adjustOrPutValue(char1, float1, float2);
//       assertEquals("{s=51.0, _=Infinity, @=70.0, F=60.0, g=64.0, 3=64.0}", tCharFloatHashMap0.toString());
//       assertEquals(Float.POSITIVE_INFINITY, float3, 0.01F);
//   }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 60;
      int int1 = 93;
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(int1);
      tCharFloatHashMap0.size();
      TCharFloatHashMap tCharFloatHashMap1 = new TCharFloatHashMap(int0);
      float[] floatArray0 = new float[4];
      char char0 = '}';
      boolean boolean0 = tCharFloatHashMap1.adjustValue(char0, (float) int1);
      float float0 = 0.0F;
      floatArray0[0] = float0;
      tCharFloatHashMap0.reenableAutoCompaction(boolean0);
      float float1 = (-21.121365F);
      floatArray0[1] = float1;
      floatArray0[2] = (float) int0;
      tCharFloatHashMap1.isEmpty();
      floatArray0[3] = (float) int0;
      TCharFloatHashMap tCharFloatHashMap2 = new TCharFloatHashMap(tCharFloatHashMap1._set, floatArray0);
      tCharFloatHashMap1.keys();
      char char1 = 'K';
      tCharFloatHashMap2.increment(char1);
      int int2 = 1408;
      tCharFloatHashMap1.compact();
      TCharFloatHashMap tCharFloatHashMap3 = new TCharFloatHashMap(int2);
      String string0 = "~mkF~&`ikL'HV^i";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // ~mkF~&`ikL'HV^i
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-1736);
      char char0 = 'n';
      float float0 = (-1.0F);
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(int0, (float) int0, char0, float0);
      float float1 = 0.0F;
      char[] charArray0 = new char[8];
      charArray0[0] = char0;
      char char1 = 'Z';
      charArray0[1] = char1;
      charArray0[2] = char0;
      charArray0[3] = char0;
      charArray0[4] = char0;
      charArray0[5] = char0;
      charArray0[6] = char0;
      charArray0[7] = char0;
      tCharFloatHashMap0._set = charArray0;
      tCharFloatHashMap0.containsValue(float1);
      TCharFloatHashMap tCharFloatHashMap1 = new TCharFloatHashMap((TCharFloatMap) tCharFloatHashMap0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = float0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) char0;
      floatArray0[3] = (float) char0;
      tCharFloatHashMap0.values(floatArray0);
      // Undeclared exception!
      try {
        tCharFloatHashMap1.setAutoCompactionFactor(float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1.0
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 517;
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap();
      boolean boolean0 = true;
      TCharFloatHashMap tCharFloatHashMap1 = new TCharFloatHashMap((TCharFloatMap) tCharFloatHashMap0);
      tCharFloatHashMap0.reenableAutoCompaction(boolean0);
      float float0 = 684.46893F;
      int int1 = 822;
      tCharFloatHashMap0.tempDisableAutoCompaction();
      char char0 = '+';
      tCharFloatHashMap0.get(char0);
      float float1 = (-328.9002F);
      tCharFloatHashMap0.tempDisableAutoCompaction();
      TCharFloatProcedure tCharFloatProcedure0 = null;
      tCharFloatHashMap0.retainEntries(tCharFloatProcedure0);
      TCharFloatHashMap tCharFloatHashMap2 = new TCharFloatHashMap(int1, (float) int1, char0, float1);
      char char1 = '3';
      float float2 = (-396.16144F);
      TCharFloatHashMap tCharFloatHashMap3 = new TCharFloatHashMap();
      boolean boolean1 = tCharFloatHashMap3.adjustValue(char1, char1);
      FileDescriptor fileDescriptor0 = FileDescriptor.out;
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      tCharFloatHashMap2.reenableAutoCompaction(boolean1);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) fileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Bad file descriptor
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 672196673;
      float float0 = 0.0F;
      int int1 = 0;
      float float1 = 844.45294F;
      char char0 = '@';
      float float2 = (-952.91113F);
      int int2 = Integer.MAX_VALUE;
      float float3 = 0.0F;
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(int2, float3, char0, float2);
      float float4 = 0.0F;
      tCharFloatHashMap0.setAutoCompactionFactor(float4);
      TCharFloatHashMap tCharFloatHashMap1 = new TCharFloatHashMap(int1, float1, char0, float2);
      char char1 = 'h';
      tCharFloatHashMap1.get(char1);
      TCharFloatHashMap tCharFloatHashMap2 = new TCharFloatHashMap(int0, float0);
      char char2 = 'i';
      tCharFloatHashMap2.compact();
      float float5 = (-265.39587F);
      char char3 = '|';
      TCharFloatHashMap tCharFloatHashMap3 = new TCharFloatHashMap((int) char2, float5, char3, (float) char2);
      tCharFloatHashMap2.getNoEntryKey();
      tCharFloatHashMap2.adjustOrPutValue(char2, float0, (float) int0);
      assertEquals(false, tCharFloatHashMap2.isEmpty());
      assertEquals("{i=6.7219667E8}", tCharFloatHashMap2.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-1579);
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(int0);
      String string0 = "No free or removed slots available. Key set full?!!";
      tCharFloatHashMap0.getNoEntryValue();
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-57);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-51);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)108;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)1;
      byteArray0[6] = byte6;
      byte byte7 = (byte)103;
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      byteArray0[8] = byte8;
      tCharFloatHashMap0._states = byteArray0;
      tCharFloatHashMap0.ensureCapacity(int0);
      String string1 = "";
      int int1 = 91;
      tCharFloatHashMap0.ensureCapacity(int1);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: No free or removed slots available. Key set full?!!://No%20free%20or%20removed%20slots%20available.%20Key%20set%20full%3F!!No%20free%20or%20removed%20slots%20available.%20Key%20set%20full%3F!!?No%20free%20or%20removed%20slots%20available.%20Key%20set%20full?!!#
         //
      }
  }

//   @Test
//   public void test11()  throws Throwable  {
//       char[] charArray0 = new char[4];
//       char char0 = '.';
//       charArray0[0] = char0;
//       char char1 = 'E';
//       charArray0[1] = char1;
//       char char2 = '6';
//       charArray0[2] = char2;
//       char char3 = 'W';
//       charArray0[3] = char3;
//       float[] floatArray0 = new float[4];
//       floatArray0[0] = (float) charArray0[3];
//       float float0 = 0.5F;
//       floatArray0[1] = float0;
//       floatArray0[2] = (float) char3;
//       floatArray0[3] = (float) charArray0[3];
//       TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(charArray0, floatArray0);
//       TCharFloatHashMap tCharFloatHashMap1 = new TCharFloatHashMap((TCharFloatMap) tCharFloatHashMap0);
//       int int0 = tCharFloatHashMap1.size();
//       assertEquals("{W=87.0, .=87.0, 6=87.0, E=0.5}", tCharFloatHashMap1.toString());
//       assertEquals("{6=87.0, W=87.0, E=0.5, .=87.0}", tCharFloatHashMap0.toString());
//       assertEquals(0.0F, tCharFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(4, int0);
//   }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-950);
      char[] charArray0 = new char[7];
      char char0 = '\'';
      charArray0[0] = char0;
      char char1 = '!';
      charArray0[1] = char1;
      char char2 = 'f';
      charArray0[2] = char2;
      char char3 = '=';
      charArray0[3] = char3;
      char char4 = '7';
      charArray0[4] = char4;
      char char5 = 'H';
      charArray0[5] = char5;
      char char6 = '0';
      charArray0[6] = char6;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) charArray0[5];
      floatArray0[2] = (float) charArray0[5];
      floatArray0[3] = (float) charArray0[3];
      floatArray0[4] = (float) charArray0[4];
      floatArray0[5] = (float) char4;
      floatArray0[6] = (float) char6;
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(charArray0, floatArray0);
      assertEquals("{!=72.0, 0=48.0, ==61.0, H=55.0, '=-950.0, 7=55.0, f=72.0}", tCharFloatHashMap0.toString());
      
      tCharFloatHashMap0.clear();
      TCharFloatHashMap tCharFloatHashMap1 = new TCharFloatHashMap(int0);
      TCharFloatHashMap tCharFloatHashMap2 = new TCharFloatHashMap((TCharFloatMap) tCharFloatHashMap1);
      assertEquals('\u0000', tCharFloatHashMap2.getNoEntryKey());
  }

//   @Test
//   public void test13()  throws Throwable  {
//       char[] charArray0 = new char[9];
//       char char0 = 'F';
//       charArray0[0] = char0;
//       char char1 = '?';
//       charArray0[1] = char1;
//       char char2 = 'd';
//       charArray0[2] = char2;
//       char char3 = 'X';
//       charArray0[3] = char3;
//       char char4 = 'V';
//       charArray0[4] = char4;
//       char char5 = 'v';
//       charArray0[5] = char5;
//       char char6 = '';
//       charArray0[6] = char6;
//       char char7 = 'R';
//       charArray0[7] = char7;
//       char char8 = '.';
//       charArray0[8] = char8;
//       float[] floatArray0 = new float[5];
//       floatArray0[0] = (float) char7;
//       float float0 = Float.POSITIVE_INFINITY;
//       floatArray0[1] = float0;
//       floatArray0[2] = (float) char7;
//       floatArray0[3] = (float) char3;
//       floatArray0[4] = (float) charArray0[3];
//       TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(charArray0, floatArray0);
//       boolean boolean0 = tCharFloatHashMap0.contains(charArray0[6]);
//       assertEquals(0.0F, tCharFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(false, boolean0);
//       assertEquals("{X=88.0, ?=Infinity, V=88.0, d=82.0, F=82.0}", tCharFloatHashMap0.toString());
//   }

//   @Test
//   public void test14()  throws Throwable  {
//       int int0 = 0;
//       TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(int0);
//       tCharFloatHashMap0.tempDisableAutoCompaction();
//       tCharFloatHashMap0.tempDisableAutoCompaction();
//       tCharFloatHashMap0.iterator();
//       TCharFloatHashMap tCharFloatHashMap1 = new TCharFloatHashMap();
//       tCharFloatHashMap0.hashCode();
//       int int1 = 1965;
//       float float0 = 0.0F;
//       tCharFloatHashMap0.clear();
//       tCharFloatHashMap0.capacity();
//       assertEquals(0.0F, tCharFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals('\u0000', tCharFloatHashMap0.getNoEntryKey());
//       
//       float[] floatArray0 = new float[3];
//       floatArray0[0] = (float) int0;
//       float float1 = (-1.0F);
//       floatArray0[1] = float1;
//       floatArray0[2] = (float) int0;
//       tCharFloatHashMap1.values(floatArray0);
//       assertEquals(0.0F, tCharFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals('\u0000', tCharFloatHashMap1.getNoEntryKey());
//       assertEquals(23, tCharFloatHashMap1.capacity());
//       
//       TCharFloatHashMap tCharFloatHashMap2 = new TCharFloatHashMap(int1, float0);
//       float float2 = tCharFloatHashMap2.getNoEntryValue();
//       assertEquals('\u0000', tCharFloatHashMap2.getNoEntryKey());
//       assertEquals(0.0F, float2, 0.01F);
//   }

//   @Test
//   public void test15()  throws Throwable  {
//       int int0 = 1469;
//       char char0 = 'B';
//       TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(int0, (float) int0, char0, (float) char0);
//       TCharFloatHashMap tCharFloatHashMap1 = new TCharFloatHashMap((TCharFloatMap) tCharFloatHashMap0);
//       float float0 = tCharFloatHashMap1.getNoEntryValue();
//       assertEquals(66.0F, float0, 0.01F);
//       assertEquals('B', tCharFloatHashMap1.getNoEntryKey());
//   }
}
