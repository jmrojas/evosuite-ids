/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TDoubleFunction;
import gnu.trove.map.TCharDoubleMap;
import gnu.trove.map.hash.TCharDoubleHashMap;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInput;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharDoubleHashEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 1504;
      float float0 = 1.0F;
      char char0 = 'B';
      int int1 = (-1740);
      float float1 = 0.0F;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int1, float1, char0, (double) float0);
      boolean boolean0 = false;
      tCharDoubleHashMap0.reenableAutoCompaction(boolean0);
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap(int0, float0, char0, (double) float0);
      boolean boolean1 = tCharDoubleHashMap1.increment(char0);
      assertEquals(1.0, tCharDoubleHashMap1.getNoEntryValue(), 0.01D);
      assertEquals(1523, tCharDoubleHashMap1.capacity());
      assertEquals('B', tCharDoubleHashMap1.getNoEntryKey());
      assertEquals(false, boolean1);
      
      int int2 = 31;
      float float2 = 469.30954F;
      TCharDoubleHashMap tCharDoubleHashMap2 = new TCharDoubleHashMap(int2, float2);
      TCharDoubleHashMap tCharDoubleHashMap3 = new TCharDoubleHashMap((TCharDoubleMap) tCharDoubleHashMap2);
      assertEquals('\u0000', tCharDoubleHashMap2.getNoEntryKey());
      assertEquals(0.0, tCharDoubleHashMap2.getNoEntryValue(), 0.01D);
      assertEquals('\u0000', tCharDoubleHashMap3.getNoEntryKey());
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-975);
      float float0 = 0.0F;
      char char0 = 'd';
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int0, float0, char0, (double) int0);
      char char1 = tCharDoubleHashMap0.getNoEntryKey();
      assertEquals((-975.0), tCharDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals('d', char1);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 414;
      float float0 = (-1.0F);
      char char0 = 'W';
      double double0 = (-597.0158976731447);
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int0, float0, char0, double0);
      char[] charArray0 = new char[7];
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = char0;
      charArray0[3] = char0;
      charArray0[4] = char0;
      charArray0[5] = char0;
      charArray0[6] = char0;
      char[] charArray1 = tCharDoubleHashMap0.keys(charArray0);
      assertNotNull(charArray1);
      assertEquals('W', tCharDoubleHashMap0.getNoEntryKey());
      assertEquals(3, tCharDoubleHashMap0.capacity());
      assertEquals((-597.0158976731447), tCharDoubleHashMap0.getNoEntryValue(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 465;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int0, int0);
      tCharDoubleHashMap0.clear();
      assertEquals('\u0000', tCharDoubleHashMap0.getNoEntryKey());
      assertEquals(0.0, tCharDoubleHashMap0.getNoEntryValue(), 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 1450;
      int int1 = 0;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int1, int0);
      ObjectInput objectInput0 = null;
      // Undeclared exception!
      try {
        tCharDoubleHashMap0.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-345);
      float float0 = 169.86049F;
      char char0 = '1';
      double double0 = Double.NEGATIVE_INFINITY;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int0, float0, char0, double0);
      char[] charArray0 = new char[8];
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = char0;
      charArray0[3] = char0;
      charArray0[4] = char0;
      charArray0[5] = char0;
      charArray0[6] = char0;
      charArray0[7] = char0;
      tCharDoubleHashMap0.keys(charArray0);
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap();
      int int1 = (-594);
      float float1 = (-678.44836F);
      TCharDoubleHashMap tCharDoubleHashMap2 = new TCharDoubleHashMap(int1, float1);
      tCharDoubleHashMap1.putAll((TCharDoubleMap) tCharDoubleHashMap2);
      FileDescriptor fileDescriptor0 = null;
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(fileDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-1619);
      float float0 = 6.6360896E8F;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int0, float0);
      char[] charArray0 = new char[2];
      char char0 = '';
      charArray0[0] = char0;
      char char1 = 'z';
      charArray0[1] = char1;
      tCharDoubleHashMap0._set = charArray0;
      assertEquals('\u0000', tCharDoubleHashMap0.getNoEntryKey());
      assertEquals(0.0, tCharDoubleHashMap0.getNoEntryValue(), 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int0, int0);
      TCharDoubleHashMap tCharDoubleHashMap1 = null;
      try {
        tCharDoubleHashMap1 = new TCharDoubleHashMap((TCharDoubleMap) tCharDoubleHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-682);
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap();
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-98);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-50);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-52);
      byteArray0[4] = byte4;
      byte byte5 = (byte)63;
      byteArray0[5] = byte5;
      byte byte6 = (byte)25;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-80);
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      tCharDoubleHashMap0.size();
      tCharDoubleHashMap0.isEmpty();
      assertEquals(23, tCharDoubleHashMap0.capacity());
      
      byteArray0[8] = byte8;
      tCharDoubleHashMap0._states = byteArray0;
      char char0 = 'o';
      double double0 = (-1475.1180918990174);
      float float0 = (-1.0F);
      TCharDoubleMap tCharDoubleMap0 = null;
      // Undeclared exception!
      try {
        tCharDoubleHashMap0.hashCode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-1931);
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int0, int0);
      char char0 = '0';
      boolean boolean0 = tCharDoubleHashMap0.contains(char0);
      assertEquals(false, boolean0);
      assertEquals('\u0000', tCharDoubleHashMap0.getNoEntryKey());
      assertEquals(0.0, tCharDoubleHashMap0.getNoEntryValue(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 'U';
      TCharDoubleMap tCharDoubleMap0 = null;
      TCharDoubleHashMap tCharDoubleHashMap0 = null;
      try {
        tCharDoubleHashMap0 = new TCharDoubleHashMap(tCharDoubleMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 388;
      char[] charArray0 = new char[8];
      char char0 = 't';
      charArray0[0] = char0;
      char char1 = 'q';
      charArray0[1] = char1;
      char char2 = '0';
      charArray0[2] = char2;
      char char3 = '^';
      charArray0[3] = char3;
      char char4 = 'm';
      charArray0[4] = char4;
      char char5 = 'J';
      charArray0[5] = char5;
      char char6 = 'f';
      charArray0[6] = char6;
      char char7 = 'R';
      charArray0[7] = char7;
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) char2;
      doubleArray0[1] = (double) charArray0[2];
      doubleArray0[2] = (double) char5;
      doubleArray0[3] = (double) charArray0[0];
      doubleArray0[4] = (double) char2;
      doubleArray0[5] = (double) charArray0[0];
      doubleArray0[6] = (double) char4;
      doubleArray0[7] = (double) charArray0[4];
      doubleArray0[8] = (double) char3;
      doubleArray0[9] = (double) charArray0[5];
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      char char8 = '2';
      int int1 = 279;
      float float0 = 0.0F;
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap(int1, float0);
      tCharDoubleHashMap1.tempDisableAutoCompaction();
      TCharDoubleHashMap tCharDoubleHashMap2 = new TCharDoubleHashMap(int0, (float) int0, char8, (double) int0);
      double double0 = tCharDoubleHashMap2.put(char8, char8);
      assertEquals(false, tCharDoubleHashMap2.isEmpty());
      assertEquals(388.0, double0, 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 0;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int0, int0);
      char[] charArray0 = tCharDoubleHashMap0._set;
      char[] charArray1 = new char[2];
      char char0 = 'p';
      charArray1[0] = char0;
      char char1 = '^';
      charArray1[1] = char1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) char1;
      doubleArray0[1] = (double) charArray1[0];
      doubleArray0[2] = (double) char1;
      doubleArray0[3] = (double) char1;
      doubleArray0[4] = (double) char1;
      doubleArray0[5] = (double) char0;
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap(charArray1, doubleArray0);
      double[] doubleArray1 = tCharDoubleHashMap1.values();
      assertNotNull(doubleArray1);
      assertEquals("{p=94.0, ^=112.0}", tCharDoubleHashMap1.toString());
      
      tCharDoubleHashMap1._set = charArray1;
      tCharDoubleHashMap1.getNoEntryValue();
      TCharDoubleHashMap tCharDoubleHashMap2 = new TCharDoubleHashMap();
      char char2 = 'I';
      double double0 = tCharDoubleHashMap2.remove(char2);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1837;
      char[] charArray0 = new char[8];
      char char0 = 'N';
      charArray0[0] = char0;
      char char1 = 'F';
      charArray0[1] = char1;
      char char2 = 'F';
      charArray0[2] = char2;
      char char3 = 'j';
      charArray0[3] = char3;
      char char4 = 'm';
      charArray0[4] = char4;
      char char5 = 'Z';
      charArray0[5] = char5;
      char char6 = '=';
      charArray0[6] = char6;
      char char7 = '}';
      charArray0[7] = char7;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      double double0 = 0.0;
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) charArray0[5];
      doubleArray0[3] = (double) charArray0[4];
      doubleArray0[4] = (double) char7;
      doubleArray0[5] = (double) char6;
      doubleArray0[6] = (double) char4;
      double double1 = 0.0;
      doubleArray0[7] = double1;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      assertEquals("{N=1837.0, ==109.0, m=125.0, }=0.0, Z=61.0, j=109.0, F=90.0}", tCharDoubleHashMap0.toString());
      
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap(int0);
      assertEquals(0.0, tCharDoubleHashMap1.getNoEntryValue(), 0.01D);
      
      TCharDoubleHashMap tCharDoubleHashMap2 = new TCharDoubleHashMap();
      String string0 = tCharDoubleHashMap2.toString();
      assertEquals('\u0000', tCharDoubleHashMap2.getNoEntryKey());
      assertNotNull(string0);
      assertEquals(0.0, tCharDoubleHashMap2.getNoEntryValue(), 0.01D);
      assertEquals(23, tCharDoubleHashMap2.capacity());
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 980;
      float float0 = 1389.9196F;
      char char0 = '%';
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int0, float0, char0, (double) float0);
      TDoubleFunction tDoubleFunction0 = null;
      tCharDoubleHashMap0.transformValues(tDoubleFunction0);
      char[] charArray0 = new char[6];
      char char1 = 'N';
      charArray0[0] = char1;
      char char2 = '/';
      charArray0[1] = char2;
      char char3 = ':';
      charArray0[2] = char3;
      charArray0[0] = char3;
      charArray0[1] = char1;
      charArray0[2] = char3;
      charArray0[3] = char0;
      charArray0[0] = char3;
      charArray0[1] = char3;
      charArray0[2] = char0;
      charArray0[3] = char3;
      charArray0[4] = char3;
      charArray0[5] = char0;
      charArray0[4] = char1;
      charArray0[5] = char2;
      char char4 = '/';
      charArray0[3] = char4;
      char char5 = 'F';
      charArray0[4] = char5;
      char char6 = ')';
      charArray0[5] = char6;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) charArray0[1];
      double double0 = tCharDoubleHashMap0.remove(char6);
      assertEquals(1389.9195556640625, double0, 0.01D);
      assertEquals('%', tCharDoubleHashMap0.getNoEntryKey());
      
      doubleArray0[0] = (double) charArray0[1];
      doubleArray0[1] = (double) char3;
      doubleArray0[1] = (double) charArray0[5];
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap(charArray0, doubleArray0);
      assertEquals('\u0000', tCharDoubleHashMap1.getNoEntryKey());
      assertEquals(0.0, tCharDoubleHashMap1.getNoEntryValue(), 0.01D);
      assertEquals("{:=41.0}", tCharDoubleHashMap1.toString());
      assertEquals(17, tCharDoubleHashMap1.capacity());
      assertEquals(1, tCharDoubleHashMap1.size());
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 1053;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int0);
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap((TCharDoubleMap) tCharDoubleHashMap0);
      int int1 = tCharDoubleHashMap1.size();
      TCharDoubleHashMap tCharDoubleHashMap2 = new TCharDoubleHashMap();
      TCharDoubleHashMap tCharDoubleHashMap3 = new TCharDoubleHashMap((TCharDoubleMap) tCharDoubleHashMap2);
      char char0 = 'D';
      char char1 = '-';
      tCharDoubleHashMap2.put(char1, (double) int1);
      double double0 = 1930.994686606291;
      double double1 = tCharDoubleHashMap3.putIfAbsent(char0, double0);
      assertEquals(false, tCharDoubleHashMap2.isEmpty());
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = (-1691);
      float float0 = 0.0F;
      float float1 = (-1993.2046F);
      char char0 = '_';
      float float2 = 1.0F;
      char char1 = 'a';
      double double0 = 464.7296844049876;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int0, float2, char1, double0);
      tCharDoubleHashMap0.ensureCapacity((int) char0);
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap(int0, float1, char0, (double) float0);
      TCharDoubleHashMap tCharDoubleHashMap2 = new TCharDoubleHashMap((TCharDoubleMap) tCharDoubleHashMap1);
      assertEquals(0.0, tCharDoubleHashMap2.getNoEntryValue(), 0.01D);
      assertEquals('_', tCharDoubleHashMap2.getNoEntryKey());
      
      TCharDoubleHashMap tCharDoubleHashMap3 = new TCharDoubleHashMap(int0, float0);
      TCharDoubleHashMap tCharDoubleHashMap4 = null;
      try {
        tCharDoubleHashMap4 = new TCharDoubleHashMap((TCharDoubleMap) tCharDoubleHashMap3);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 637;
      float float0 = 6.6360896E8F;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap();
      char[] charArray0 = new char[3];
      char char0 = 'd';
      charArray0[0] = char0;
      char char1 = 'v';
      charArray0[1] = char1;
      char char2 = 'S';
      charArray0[2] = char2;
      char[] charArray1 = tCharDoubleHashMap0.keys(charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = new char[1];
      char char3 = 'G';
      charArray2[0] = char3;
      tCharDoubleHashMap0._set = charArray2;
      char char4 = ')';
      tCharDoubleHashMap0.size();
      assertEquals('\u0000', tCharDoubleHashMap0.getNoEntryKey());
      assertEquals(0.0, tCharDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals(23, tCharDoubleHashMap0.capacity());
      
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap(int0, float0, char4, (double) float0);
      tCharDoubleHashMap1.iterator();
      assertEquals(6.6360896E8, tCharDoubleHashMap1.getNoEntryValue(), 0.01D);
      assertEquals(')', tCharDoubleHashMap1.getNoEntryKey());
      
      int int1 = 0;
      TCharDoubleHashMap tCharDoubleHashMap2 = new TCharDoubleHashMap(int1);
      tCharDoubleHashMap2.setAutoCompactionFactor((float) int1);
      char char5 = '#';
      boolean boolean0 = tCharDoubleHashMap2.increment(char5);
      assertEquals(0.0, tCharDoubleHashMap2.getNoEntryValue(), 0.01D);
      assertEquals(false, boolean0);
      assertEquals('\u0000', tCharDoubleHashMap2.getNoEntryKey());
      
      int int2 = 0;
      TCharDoubleHashMap tCharDoubleHashMap3 = new TCharDoubleHashMap(int2, int2);
      float float1 = (-843.3702F);
      // Undeclared exception!
      try {
        tCharDoubleHashMap3.setAutoCompactionFactor(float1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -843.3702
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = 'W';
      charArray0[0] = char0;
      char char1 = 'P';
      charArray0[1] = char1;
      char char2 = 'G';
      charArray0[2] = char2;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) char2;
      doubleArray0[1] = (double) charArray0[1];
      doubleArray0[2] = (double) charArray0[1];
      doubleArray0[3] = (double) char0;
      doubleArray0[4] = (double) charArray0[1];
      int int0 = (-1771);
      float float0 = 0.0F;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int0, float0);
      String string0 = tCharDoubleHashMap0.toString();
      assertNotNull(string0);
      
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap(charArray0, doubleArray0);
      TCharDoubleHashMap tCharDoubleHashMap2 = new TCharDoubleHashMap((TCharDoubleMap) tCharDoubleHashMap1);
      tCharDoubleHashMap2.trimToSize();
      assertEquals(7, tCharDoubleHashMap2.capacity());
      assertEquals("{W=71.0, P=80.0, G=80.0}", tCharDoubleHashMap2.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = (-639);
      char char0 = '\\';
      double double0 = (-1927.4536782919736);
      char[] charArray0 = new char[7];
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = char0;
      charArray0[3] = char0;
      charArray0[4] = char0;
      charArray0[5] = char0;
      charArray0[6] = char0;
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) charArray0[4];
      doubleArray0[1] = (double) charArray0[6];
      doubleArray0[2] = (double) charArray0[2];
      doubleArray0[3] = (double) charArray0[0];
      doubleArray0[4] = double0;
      doubleArray0[5] = (double) charArray0[3];
      doubleArray0[6] = (double) charArray0[1];
      double double1 = 179.13690066636138;
      doubleArray0[7] = double1;
      double double2 = 1768.9934097985645;
      doubleArray0[8] = double2;
      doubleArray0[9] = (double) charArray0[4];
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      int int1 = tCharDoubleHashMap0.hashCode();
      assertEquals(1079443548, int1);
      assertEquals(23, tCharDoubleHashMap0.capacity());
      assertEquals(0.0, tCharDoubleHashMap0.getNoEntryValue(), 0.01D);
      assertEquals('\u0000', tCharDoubleHashMap0.getNoEntryKey());
      assertEquals(1, tCharDoubleHashMap0.size());
      
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap(int0, (float) int0, char0, double0);
      tCharDoubleHashMap1.compact();
      assertEquals('\\', tCharDoubleHashMap1.getNoEntryKey());
      assertEquals((-1927.4536782919736), tCharDoubleHashMap1.getNoEntryValue(), 0.01D);
      assertFalse(tCharDoubleHashMap1.equals(tCharDoubleHashMap0));
  }
}
