/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TDoubleIntMap;
import gnu.trove.map.hash.TDoubleIntHashMap;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InterruptedIOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleIntHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-406);
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-111);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-115);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-51);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-4);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-105);
      byteArray0[7] = byte7;
      byte byte8 = (byte)114;
      byteArray0[8] = byte8;
      tDoubleIntHashMap0._states = byteArray0;
      assertEquals(0.0, tDoubleIntHashMap0.getNoEntryKey(), 0.01D);
      assertEquals(0, tDoubleIntHashMap0.getNoEntryValue());
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 2002;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap();
      tDoubleIntHashMap0.setAutoCompactionFactor((float) int0);
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap((TDoubleIntMap) tDoubleIntHashMap0);
      tDoubleIntHashMap0.put((double) int0, int0);
      tDoubleIntHashMap0.compact();
      double double0 = 0.0;
      tDoubleIntHashMap0.get(double0);
      assertEquals("{2002.0=2002}", tDoubleIntHashMap0.toString());
      
      int int1 = 2004663929;
      tDoubleIntHashMap0.clear();
      double double1 = 1190.5475746968834;
      tDoubleIntHashMap0.containsKey(double1);
      float float0 = 0.0F;
      double[] doubleArray0 = tDoubleIntHashMap0._set;
      int int2 = 103;
      TDoubleIntHashMap tDoubleIntHashMap2 = new TDoubleIntHashMap(int1, float0, (double) float0, int2);
      double double2 = 1.0;
      tDoubleIntHashMap2.contains(double2);
      TDoubleIntHashMap tDoubleIntHashMap3 = null;
      try {
        tDoubleIntHashMap3 = new TDoubleIntHashMap((TDoubleIntMap) tDoubleIntHashMap2);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TDoubleIntMap tDoubleIntMap0 = null;
      TDoubleIntHashMap tDoubleIntHashMap0 = null;
      try {
        tDoubleIntHashMap0 = new TDoubleIntHashMap(tDoubleIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TDoubleIntMap tDoubleIntMap0 = null;
      TDoubleIntHashMap tDoubleIntHashMap0 = null;
      try {
        tDoubleIntHashMap0 = new TDoubleIntHashMap(tDoubleIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 244703;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)60;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-105);
      tDoubleIntHashMap0.clear();
      assertEquals(489407, tDoubleIntHashMap0.capacity());
      
      byteArray0[2] = byte2;
      tDoubleIntHashMap0._states = byteArray0;
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap();
      assertEquals(23, tDoubleIntHashMap1.capacity());
  }

  @Test
  public void test5()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap();
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap((TDoubleIntMap) tDoubleIntHashMap0);
      TDoubleIntHashMap tDoubleIntHashMap2 = new TDoubleIntHashMap((TDoubleIntMap) tDoubleIntHashMap1);
      int int0 = 389;
      TDoubleIntHashMap tDoubleIntHashMap3 = new TDoubleIntHashMap(int0, int0);
      TDoubleIntHashMap tDoubleIntHashMap4 = new TDoubleIntHashMap((TDoubleIntMap) tDoubleIntHashMap3);
      tDoubleIntHashMap4.getNoEntryValue();
      TDoubleIntHashMap tDoubleIntHashMap5 = new TDoubleIntHashMap();
      double double0 = 0.0;
      int int1 = (-1894);
      tDoubleIntHashMap1.clear();
      double double1 = 0.0;
      int int2 = (-553);
      TDoubleIntHashMap tDoubleIntHashMap6 = new TDoubleIntHashMap(int1, (float) int1, double1, int2);
      TDoubleIntMap tDoubleIntMap0 = null;
      TDoubleIntHashMap tDoubleIntHashMap7 = null;
      try {
        tDoubleIntHashMap7 = new TDoubleIntHashMap(tDoubleIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 1447.127734068715;
      doubleArray0[0] = double0;
      int[] intArray0 = new int[7];
      int int0 = 1404;
      intArray0[0] = int0;
      int int1 = 1796;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = (-305);
      intArray0[4] = int4;
      int int5 = 1064;
      intArray0[0] = int5;
      intArray0[1] = int5;
      intArray0[2] = int1;
      intArray0[3] = int3;
      intArray0[4] = int3;
      intArray0[5] = int5;
      intArray0[6] = int0;
      int int6 = 0;
      intArray0[5] = int6;
      int int7 = 11;
      double double1 = 0.0;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(intArray0[1], (float) int1, double1, intArray0[3]);
      tDoubleIntHashMap0.tempDisableAutoCompaction();
      assertEquals(0.0, tDoubleIntHashMap0.getNoEntryKey(), 0.01D);
      assertEquals(0, tDoubleIntHashMap0.getNoEntryValue());
      
      intArray0[6] = int7;
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap(doubleArray0, intArray0);
      boolean boolean0 = tDoubleIntHashMap1.contains((double) int7);
      assertEquals("{1447.127734068715=1064}", tDoubleIntHashMap1.toString());
      assertEquals(0.0, tDoubleIntHashMap1.getNoEntryKey(), 0.01D);
      assertEquals(17, tDoubleIntHashMap1.capacity());
      assertEquals(false, boolean0);
      assertEquals(0, tDoubleIntHashMap1.getNoEntryValue());
  }

//   @Test
//   public void test7()  throws Throwable  {
//       int int0 = 387;
//       int int1 = 384;
//       float float0 = (-1.0F);
//       int int2 = 545;
//       TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int1, float0, (double) int0, int2);
//       double[] doubleArray0 = new double[10];
//       doubleArray0[0] = (double) int0;
//       doubleArray0[1] = (double) int1;
//       double double0 = (-1.0);
//       doubleArray0[2] = double0;
//       doubleArray0[3] = (double) float0;
//       doubleArray0[4] = (double) int1;
//       doubleArray0[5] = (double) int2;
//       double double1 = 0.0;
//       doubleArray0[6] = double1;
//       doubleArray0[7] = (double) int1;
//       doubleArray0[8] = (double) float0;
//       doubleArray0[9] = (double) int2;
//       tDoubleIntHashMap0.keys(doubleArray0);
//       TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap(int0);
//       TDoubleIntHashMap tDoubleIntHashMap2 = new TDoubleIntHashMap((TDoubleIntMap) tDoubleIntHashMap1);
//       TDoubleIntHashMap tDoubleIntHashMap3 = new TDoubleIntHashMap((TDoubleIntMap) tDoubleIntHashMap2);
//       double double2 = (-1685.8661937002064);
//       tDoubleIntHashMap2.adjustOrPutValue(double2, int0, int0);
//       PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
//       PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
//       DataInputStream dataInputStream0 = new DataInputStream((InputStream) pipedInputStream0);
//       ObjectInputStream objectInputStream0 = null;
//       try {
//         objectInputStream0 = new ObjectInputStream((InputStream) dataInputStream0);
//         fail("Expecting exception: InterruptedIOException");
//       
//       } catch(InterruptedIOException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test8()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
      tDoubleIntHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap();
      tDoubleIntHashMap1.iterator();
      tDoubleIntHashMap1.getNoEntryValue();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)62;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-11);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-109);
      byteArray0[3] = byte3;
      byte byte4 = (byte)38;
      byteArray0[4] = byte4;
      byte byte5 = (byte)104;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-27);
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      int int0 = 1;
      // Undeclared exception!
      try {
        pipedInputStream0.read(byteArray0, (int) byteArray0[4], int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TDoubleIntMap tDoubleIntMap0 = null;
      int int0 = 1800;
      float float0 = 347.83517F;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0, float0);
      boolean boolean0 = true;
      tDoubleIntHashMap0.reenableAutoCompaction(boolean0);
      int int1 = 832;
      double double0 = 149.5381980187573;
      int int2 = 1;
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap(int1, (float) int1, double0, int2);
      int int3 = (-63);
      tDoubleIntHashMap1.ensureCapacity(int3);
      tDoubleIntHashMap1.iterator();
      TDoubleIntHashMap tDoubleIntHashMap2 = null;
      try {
        tDoubleIntHashMap2 = new TDoubleIntHashMap(tDoubleIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = (-1705.447817088549);
      doubleArray0[1] = double1;
      double double2 = 636.153608339532;
      doubleArray0[2] = double2;
      double double3 = Double.POSITIVE_INFINITY;
      doubleArray0[3] = double3;
      double double4 = (-1269.4735902137875);
      doubleArray0[4] = double4;
      double double5 = 1.0;
      doubleArray0[5] = double5;
      int[] intArray0 = new int[3];
      int int0 = (-1643);
      intArray0[0] = int0;
      int int1 = (-285);
      intArray0[1] = int1;
      int int2 = (-1115);
      intArray0[2] = int2;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(doubleArray0, intArray0);
      tDoubleIntHashMap0.keySet();
      assertEquals(0, tDoubleIntHashMap0.getNoEntryValue());
      assertEquals(17, tDoubleIntHashMap0.capacity());
      assertEquals(0.0, tDoubleIntHashMap0.getNoEntryKey(), 0.01D);
      assertEquals("{-1705.447817088549=-285, 636.153608339532=-1115, 0.0=-1643}", tDoubleIntHashMap0.toString());
      
      int int3 = (-489);
      float float0 = 10.0F;
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap(int3, float0);
      int[] intArray1 = new int[5];
      intArray1[0] = int3;
      intArray1[1] = int3;
      intArray1[2] = int3;
      int int4 = (-822);
      intArray1[3] = int4;
      intArray1[4] = int3;
      int[] intArray2 = tDoubleIntHashMap1.values(intArray1);
      assertNotNull(intArray2);
      
      double double6 = tDoubleIntHashMap1.getNoEntryKey();
      assertEquals(0, tDoubleIntHashMap1.getNoEntryValue());
      assertEquals(0.0, double6, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      double double0 = (-793.2953882952999);
      int int1 = 1;
      double[] doubleArray0 = new double[8];
      double double1 = 1373.7322547548174;
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) float0;
      doubleArray0[3] = (double) float0;
      doubleArray0[4] = (double) int1;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int1;
      doubleArray0[7] = (double) float0;
      int[] intArray0 = new int[2];
      intArray0[0] = int0;
      intArray0[1] = int1;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(doubleArray0, intArray0);
      int[] intArray1 = tDoubleIntHashMap0.values(intArray0);
      assertNotNull(intArray1);
      
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap();
      double double2 = (-1.0);
      int int2 = 0;
      tDoubleIntHashMap1.put(double2, int2);
      assertEquals(false, tDoubleIntHashMap1.isEmpty());
      
      int int3 = 0;
      float float1 = 177.30301F;
      TDoubleIntHashMap tDoubleIntHashMap2 = new TDoubleIntHashMap(int3, float1);
      TDoubleIntHashMap tDoubleIntHashMap3 = new TDoubleIntHashMap();
      TDoubleIntHashMap tDoubleIntHashMap4 = new TDoubleIntHashMap((TDoubleIntMap) tDoubleIntHashMap3);
      TDoubleIntHashMap tDoubleIntHashMap5 = new TDoubleIntHashMap(int0, float0, double0, int1);
      assertFalse(tDoubleIntHashMap5.equals(tDoubleIntHashMap1));
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 8.883085525049177;
      doubleArray0[0] = double0;
      double double1 = (-1.0);
      doubleArray0[1] = double1;
      double double2 = (-1.0);
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = 1.0;
      doubleArray0[4] = double4;
      double double5 = (-76.53584240632203);
      doubleArray0[5] = double5;
      double double6 = 2009.3772500964549;
      doubleArray0[6] = double6;
      double double7 = 1156.8236059900491;
      doubleArray0[7] = double7;
      int[] intArray0 = new int[5];
      int int0 = 236;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = (-1148);
      intArray0[2] = int2;
      int int3 = (-1778);
      intArray0[3] = int3;
      int int4 = (-1);
      intArray0[4] = int4;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(doubleArray0, intArray0);
      tDoubleIntHashMap0.keySet();
      assertEquals(0, tDoubleIntHashMap0.getNoEntryValue());
      assertEquals("{8.883085525049177=236, -1.0=-1148, 1.0=-1, 0.0=-1778}", tDoubleIntHashMap0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      float float0 = (-1.0F);
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0, float0);
      double double0 = 2042.4102707747813;
      tDoubleIntHashMap0.remove(double0);
      tDoubleIntHashMap0.clear();
      tDoubleIntHashMap0.valueCollection();
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap();
      double double1 = (-113.78544645163021);
      boolean boolean0 = tDoubleIntHashMap1.increment(double1);
      assertEquals(23, tDoubleIntHashMap1.capacity());
      
      int int1 = 538;
      TDoubleIntHashMap tDoubleIntHashMap2 = new TDoubleIntHashMap();
      tDoubleIntHashMap1.trimToSize();
      int int2 = (-913);
      TDoubleIntHashMap tDoubleIntHashMap3 = new TDoubleIntHashMap(int2);
      double double2 = 1331.269704005644;
      int int3 = (-484);
      tDoubleIntHashMap1.reenableAutoCompaction(boolean0);
      int int4 = 0;
      TDoubleIntHashMap tDoubleIntHashMap4 = new TDoubleIntHashMap(int4, int4, int3, int4);
      tDoubleIntHashMap4.setAutoCompactionFactor((float) int1);
      tDoubleIntHashMap4.getNoEntryValue();
      TDoubleIntHashMap tDoubleIntHashMap5 = new TDoubleIntHashMap(int1, (float) int1, double2, int3);
      tDoubleIntHashMap5.hashCode();
      assertEquals(-484, tDoubleIntHashMap5.getNoEntryValue());
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0);
      double double0 = 451.27484040796406;
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap(int0, (float) int0, double0, int0);
      tDoubleIntHashMap0.trimToSize();
      int int1 = (-441);
      float float0 = 0.0F;
      TDoubleIntHashMap tDoubleIntHashMap2 = new TDoubleIntHashMap(int1, float0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) float0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      int[] intArray0 = new int[8];
      intArray0[0] = int0;
      int int2 = (-146);
      intArray0[1] = int2;
      intArray0[2] = int1;
      intArray0[3] = int1;
      intArray0[4] = int1;
      intArray0[5] = int1;
      int int3 = (-1478);
      intArray0[6] = int3;
      intArray0[7] = int0;
      TDoubleIntHashMap tDoubleIntHashMap3 = new TDoubleIntHashMap(doubleArray0, intArray0);
      tDoubleIntHashMap1.putAll((TDoubleIntMap) tDoubleIntHashMap3);
      tDoubleIntHashMap0.iterator();
      int int4 = 174;
      tDoubleIntHashMap0.adjustOrPutValue((double) int1, int4, int4);
      assertEquals("{-441.0=174}", tDoubleIntHashMap0.toString());
      
      boolean boolean0 = false;
      tDoubleIntHashMap2.reenableAutoCompaction(boolean0);
      assertEquals(0, tDoubleIntHashMap2.getNoEntryValue());
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      int int1 = 628;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int1;
      doubleArray0[5] = (double) int1;
      doubleArray0[6] = (double) int0;
      int[] intArray0 = new int[3];
      intArray0[0] = int0;
      intArray0[1] = int1;
      intArray0[2] = int1;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(doubleArray0, intArray0);
      tDoubleIntHashMap0.clear();
      float float0 = 1501.5227F;
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap(int1, float0);
      tDoubleIntHashMap1.compact();
      int int2 = (-12);
      TDoubleIntHashMap tDoubleIntHashMap2 = new TDoubleIntHashMap(int0);
      double double0 = 0.0;
      tDoubleIntHashMap2.increment(double0);
      TDoubleIntHashMap tDoubleIntHashMap3 = new TDoubleIntHashMap(int2);
      TDoubleIntHashMap tDoubleIntHashMap4 = new TDoubleIntHashMap((TDoubleIntMap) tDoubleIntHashMap3);
      tDoubleIntHashMap4.isEmpty();
      int int3 = 0;
      TDoubleIntMap tDoubleIntMap0 = null;
      TDoubleIntHashMap tDoubleIntHashMap5 = null;
      try {
        tDoubleIntHashMap5 = new TDoubleIntHashMap(tDoubleIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 1533;
      float float0 = (-1.0F);
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0, float0);
      boolean boolean0 = tDoubleIntHashMap0.containsKey((double) int0);
      assertEquals(false, boolean0);
      assertEquals(0, tDoubleIntHashMap0.getNoEntryValue());
      assertEquals(3, tDoubleIntHashMap0.capacity());
      assertEquals(0.0, tDoubleIntHashMap0.getNoEntryKey(), 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tDoubleIntHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(0, tDoubleIntHashMap0.getNoEntryValue());
      assertEquals(0.0, tDoubleIntHashMap0.getNoEntryKey(), 0.01D);
      
      int int1 = (-1784);
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap(int1, int1);
      tDoubleIntHashMap1.getAutoCompactionFactor();
      assertEquals(0.0, tDoubleIntHashMap1.getNoEntryKey(), 0.01D);
      assertEquals(0, tDoubleIntHashMap1.getNoEntryValue());
  }

  @Test
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = (-1);
          float float0 = (-1582.9318F);
          int int1 = 1646237;
          double[] doubleArray0 = new double[7];
          double double0 = (-288.6693822857332);
          doubleArray0[0] = double0;
          double double1 = 674.24026703993;
          doubleArray0[1] = double1;
          doubleArray0[2] = (double) float0;
          doubleArray0[3] = (double) int1;
          doubleArray0[4] = (double) int0;
          doubleArray0[5] = (double) float0;
          doubleArray0[6] = (double) int0;
          int[] intArray0 = new int[7];
          intArray0[0] = int0;
          intArray0[1] = int1;
          intArray0[2] = int0;
          intArray0[3] = int1;
          intArray0[4] = int0;
          intArray0[5] = int0;
          intArray0[6] = int1;
          TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(doubleArray0, intArray0);
          String string0 = "";
          boolean boolean0 = false;
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0, boolean0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:136)
             // sun.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
