/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap;
import gnu.trove.map.TShortShortMap;
import gnu.trove.map.hash.TShortShortHashMap;
import java.net.URI;
import java.net.URISyntaxException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableShortShortMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 0;
      float float0 = 1.0F;
      int int1 = 1;
      int int2 = 32767;
      float float1 = 10.0F;
      TShortShortMap tShortShortMap0 = null;
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = null;
      try {
        tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap(tShortShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short) (-1019);
      shortArray0[1] = short1;
      short short2 = (short)31;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)1;
      shortArray0[4] = short4;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(shortArray0, shortArray0);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      tUnmodifiableShortShortMap0.hashCode();
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap();
      tShortShortHashMap1.clear();
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap1 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap1);
      short short5 = (short)2016;
      short short6 = (short)0;
      // Undeclared exception!
      try {
        tUnmodifiableShortShortMap1.putIfAbsent(short6, short6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 2034;
      short short0 = (short)12221;
      short short1 = (short) (-1860);
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0, (float) int0, short0, short1);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      tUnmodifiableShortShortMap0.iterator();
      int int1 = (-1341);
      float float0 = (-542.8847F);
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap(int1, float0);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap1 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap1);
      short short2 = (short) (-1549);
      short short3 = (short) (-1923);
      short short4 = (short)1;
      // Undeclared exception!
      try {
        tUnmodifiableShortShortMap1.adjustOrPutValue(short2, short3, short4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short)331;
      shortArray0[0] = short0;
      short short1 = (short) (-771);
      shortArray0[1] = short1;
      short short2 = (short)920;
      shortArray0[2] = short2;
      short short3 = (short)895;
      shortArray0[3] = short3;
      short short4 = (short)5779;
      shortArray0[4] = short4;
      short short5 = (short) (-1701);
      shortArray0[5] = short5;
      short short6 = (short) (-1293);
      shortArray0[6] = short6;
      short short7 = (short)147;
      shortArray0[7] = short7;
      short short8 = (short)229;
      shortArray0[8] = short8;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(shortArray0, shortArray0);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      boolean boolean0 = tUnmodifiableShortShortMap0.isEmpty();
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap((TShortShortMap) tShortShortHashMap0);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap1);
      short[] shortArray0 = tUnmodifiableShortShortMap0.keys(tShortShortHashMap1._set);
      assertNotNull(shortArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 0;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0);
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap((TShortShortMap) tShortShortHashMap0);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap1);
      tUnmodifiableShortShortMap0.size();
      TShortShortHashMap tShortShortHashMap2 = new TShortShortHashMap();
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap1 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap2);
      int int1 = 133853;
      short short0 = (short)522;
      short short1 = (short)225;
      TShortShortHashMap tShortShortHashMap3 = new TShortShortHashMap(int1, (float) int1, short0, short1);
      short short2 = (short) (-945);
      // Undeclared exception!
      try {
        tUnmodifiableShortShortMap0.adjustOrPutValue(short1, short0, short2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableShortShortMap0.putAll((TShortShortMap) tShortShortHashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :#
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)200;
      shortArray0[0] = short0;
      short short1 = (short)1106;
      shortArray0[1] = short1;
      short short2 = (short)152;
      shortArray0[2] = short2;
      short short3 = (short)55;
      shortArray0[3] = short3;
      short short4 = (short)182;
      shortArray0[4] = short4;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(shortArray0, shortArray0);
      tShortShortHashMap0.ensureCapacity((int) short2);
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap((TShortShortMap) tShortShortHashMap0);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap1);
      tUnmodifiableShortShortMap0.iterator();
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap1 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap1);
      TShortShortMap tShortShortMap0 = null;
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap2 = null;
      try {
        tUnmodifiableShortShortMap2 = new TUnmodifiableShortShortMap(tShortShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-1);
      float float0 = 643.55426F;
      short short0 = (short)0;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      short short1 = (short) (-1978);
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap(int0, float0, short0, short1);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap1 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap1);
      short short2 = (short) (-1646);
      // Undeclared exception!
      try {
        tUnmodifiableShortShortMap1.putIfAbsent(short2, short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-730);
      short[] shortArray0 = new short[1];
      short short0 = (short)0;
      shortArray0[0] = short0;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(shortArray0, shortArray0);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      short short1 = (short) (-663);
      short short2 = (short)0;
      // Undeclared exception!
      try {
        tUnmodifiableShortShortMap0.adjustValue(short1, short2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TShortShortMap tShortShortMap0 = null;
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = null;
      try {
        tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap(tShortShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-1);
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      short short0 = (short)0;
      // Undeclared exception!
      try {
        tUnmodifiableShortShortMap0.increment(short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = (-1817);
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int2);
      short short0 = (short) (-1881);
      tShortShortHashMap0.containsKey(short0);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      tUnmodifiableShortShortMap0.values();
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap((TShortShortMap) tShortShortHashMap0);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap1 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap1);
      tUnmodifiableShortShortMap1.getNoEntryKey();
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap2 = new TUnmodifiableShortShortMap((TShortShortMap) tUnmodifiableShortShortMap1);
      tUnmodifiableShortShortMap1.iterator();
      tUnmodifiableShortShortMap2.iterator();
      TShortShortHashMap tShortShortHashMap2 = new TShortShortHashMap(int1);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap3 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap2);
      // Undeclared exception!
      try {
        tUnmodifiableShortShortMap3.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 16;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap0);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap1 = new TUnmodifiableShortShortMap((TShortShortMap) tUnmodifiableShortShortMap0);
      short short0 = (short)1777;
      tUnmodifiableShortShortMap1.containsValue(short0);
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap(int0);
      tShortShortHashMap1.size();
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap2 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap1);
      short[] shortArray0 = new short[1];
      TShortShortHashMap tShortShortHashMap2 = new TShortShortHashMap();
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap3 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap2);
      TShortShortHashMap tShortShortHashMap3 = new TShortShortHashMap((TShortShortMap) tUnmodifiableShortShortMap3);
      tUnmodifiableShortShortMap0.hashCode();
      tUnmodifiableShortShortMap3.values(tShortShortHashMap2._set);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap4 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap3);
      tUnmodifiableShortShortMap4.hashCode();
      short short1 = (short)0;
      // Undeclared exception!
      try {
        tUnmodifiableShortShortMap0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 1;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0, int0);
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap((TShortShortMap) tShortShortHashMap0);
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap((TShortShortMap) tShortShortHashMap1);
      short short0 = (short)1102;
      // Undeclared exception!
      try {
        tUnmodifiableShortShortMap0.adjustValue(short0, short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      TShortShortMap tShortShortMap0 = null;
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = null;
      try {
        tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap(tShortShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 0;
      float float0 = 1391.2863F;
      int int1 = (-1666);
      TShortShortMap tShortShortMap0 = null;
      TUnmodifiableShortShortMap tUnmodifiableShortShortMap0 = null;
      try {
        tUnmodifiableShortShortMap0 = new TUnmodifiableShortShortMap(tShortShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
