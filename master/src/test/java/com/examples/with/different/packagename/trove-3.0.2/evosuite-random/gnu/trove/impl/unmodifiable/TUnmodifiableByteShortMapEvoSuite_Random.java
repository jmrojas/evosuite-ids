/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableByteShortMap;
import gnu.trove.map.TByteShortMap;
import gnu.trove.map.hash.TByteShortHashMap;
import gnu.trove.procedure.TByteProcedure;
import gnu.trove.procedure.TShortProcedure;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableByteShortMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap0 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap0);
      byte byte0 = (byte)0;
      tByteShortHashMap0.adjustValue(byte0, byte0);
      String string0 = " greater than end index ";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI:  greater than end index :// greater than end index %20greater%20than%20end%20index%20#%20greater%20than%20end%20index%20
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap0 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap0);
      byte byte0 = (byte) (-87);
      tUnmodifiableByteShortMap0.containsKey(byte0);
      byte byte1 = (byte)24;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte1;
      shortArray0[3] = (short) byte1;
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) byte1;
      shortArray0[6] = (short) byte0;
      shortArray0[7] = (short) byte1;
      shortArray0[8] = (short) byte0;
      tUnmodifiableByteShortMap0.values(shortArray0);
      byteArray0[0] = byte1;
      short[] shortArray1 = new short[2];
      shortArray1[0] = (short) byteArray0[0];
      shortArray1[1] = (short) byteArray0[0];
      shortArray0[0] = (short) byteArray0[0];
      short short0 = (short)1017;
      shortArray0[1] = short0;
      shortArray0[2] = (short) byteArray0[0];
      shortArray0[3] = (short) byteArray0[0];
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) byte1;
      shortArray0[6] = (short) byteArray0[0];
      shortArray0[7] = short0;
      shortArray0[8] = (short) byteArray0[0];
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap(byteArray0, shortArray1);
      TShortProcedure tShortProcedure0 = null;
      tUnmodifiableByteShortMap0.forEachValue(tShortProcedure0);
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap1 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap1);
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap2 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap1);
      byte[] byteArray1 = tUnmodifiableByteShortMap2.keys();
      assertFalse(byteArray0.equals(byteArray1));
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 86;
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)68;
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)26;
      byteArray0[2] = byte2;
      byte byte3 = (byte)93;
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      byteArray0[8] = byte8;
      byte byte9 = (byte)0;
      byteArray0[9] = byte9;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte3;
      short short0 = (short) (-547);
      shortArray0[3] = short0;
      shortArray0[4] = (short) byteArray0[2];
      shortArray0[5] = (short) byteArray0[6];
      shortArray0[6] = (short) byteArray0[7];
      shortArray0[7] = (short) byte7;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap0 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap0);
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap1 = new TUnmodifiableByteShortMap((TByteShortMap) tUnmodifiableByteShortMap0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.toLanguageTag();
      tUnmodifiableByteShortMap1.equals((Object) string0);
      assertTrue(tUnmodifiableByteShortMap0.equals(tUnmodifiableByteShortMap1));
      
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap(int0);
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap2 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap1);
      // Undeclared exception!
      try {
        tUnmodifiableByteShortMap2.putAll((TByteShortMap) tByteShortHashMap1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TByteShortMap tByteShortMap0 = null;
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap0 = null;
      try {
        tUnmodifiableByteShortMap0 = new TUnmodifiableByteShortMap(tByteShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap0 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap0);
      short short0 = (short)1;
      tUnmodifiableByteShortMap0.containsValue(short0);
      int int0 = 1;
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap(int0);
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap1 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap1);
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap2 = new TUnmodifiableByteShortMap((TByteShortMap) tUnmodifiableByteShortMap1);
      byte byte0 = (byte)0;
      short short1 = (short) (-578);
      // Undeclared exception!
      try {
        tUnmodifiableByteShortMap2.putIfAbsent(byte0, short1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 3049;
      float float0 = 0.0F;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0, float0);
      TByteProcedure tByteProcedure0 = null;
      tByteShortHashMap0.forEachKey(tByteProcedure0);
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap0 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap0);
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap1 = new TUnmodifiableByteShortMap((TByteShortMap) tUnmodifiableByteShortMap0);
      tUnmodifiableByteShortMap1.iterator();
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap();
      tUnmodifiableByteShortMap1.isEmpty();
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap2 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap1);
      boolean boolean0 = tUnmodifiableByteShortMap2.isEmpty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)112;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-99);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-119);
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) byteArray0[3];
      shortArray0[1] = (short) byte6;
      shortArray0[2] = (short) byteArray0[3];
      shortArray0[3] = (short) byte6;
      shortArray0[4] = (short) byte1;
      shortArray0[5] = (short) byte3;
      shortArray0[6] = (short) byteArray0[6];
      shortArray0[7] = (short) byteArray0[1];
      shortArray0[8] = (short) byte5;
      shortArray0[9] = (short) byteArray0[4];
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap0 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap0);
      String string0 = "t{sNd[A]";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 1: t{sNd[A]
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap0 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap0);
      tByteShortHashMap0.getAutoCompactionFactor();
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap1 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap0);
      byte byte0 = (byte)30;
      short short0 = (short)0;
      byte byte1 = (byte)32;
      tUnmodifiableByteShortMap1.get(byte1);
      // Undeclared exception!
      try {
        tUnmodifiableByteShortMap1.adjustValue(byte0, short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)80;
      byteArray0[0] = byte0;
      byte byte1 = (byte)99;
      byteArray0[1] = byte1;
      byte byte2 = (byte)1;
      byteArray0[2] = byte2;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) byte1;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap0 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap0);
      tUnmodifiableByteShortMap0.isEmpty();
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap();
      String string0 = "&s)Kg%x3@N";
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // &s)Kg%x3@N (No such file or directory)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)76;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-84);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) byte5;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap0 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap0);
      boolean boolean0 = tUnmodifiableByteShortMap0.isEmpty();
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0);
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap0 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap0);
      TShortProcedure tShortProcedure0 = null;
      boolean boolean0 = tUnmodifiableByteShortMap0.forEachValue(tShortProcedure0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-665);
      float float0 = (-77.833565F);
      float float1 = 780.94104F;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-79);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-15);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      byte byte5 = (byte)85;
      byteArray0[5] = byte5;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) byteArray0[0];
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(byteArray0, shortArray0);
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap0 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap0);
      tUnmodifiableByteShortMap0.isEmpty();
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap(int0, float1);
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap1 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap1);
      short[] shortArray1 = new short[2];
      short short0 = (short)217;
      tUnmodifiableByteShortMap1.hashCode();
      shortArray1[0] = short0;
      short short1 = (short)0;
      shortArray1[1] = short1;
      short[] shortArray2 = tUnmodifiableByteShortMap1.values(shortArray1);
      assertNotNull(shortArray2);
      
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap2 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap1);
      // Undeclared exception!
      try {
        tUnmodifiableByteShortMap2.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      tByteShortHashMap0.size();
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap0 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap0);
      tUnmodifiableByteShortMap0.hashCode();
      tUnmodifiableByteShortMap0.keySet();
      // Undeclared exception!
      try {
        tUnmodifiableByteShortMap0.putAll((TByteShortMap) tByteShortHashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap0 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap0);
      tUnmodifiableByteShortMap0.values();
      tUnmodifiableByteShortMap0.keys(tByteShortHashMap0._set);
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap((TByteShortMap) tByteShortHashMap0);
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap1 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap1);
      tUnmodifiableByteShortMap1.toString();
      tUnmodifiableByteShortMap0.toString();
      short[] shortArray0 = new short[8];
      short short0 = (short)673;
      shortArray0[0] = short0;
      short short1 = (short)0;
      tUnmodifiableByteShortMap1.keys(tByteShortHashMap0._states);
      shortArray0[1] = short1;
      short short2 = (short)786;
      shortArray0[2] = short2;
      short short3 = (short)541;
      tUnmodifiableByteShortMap0.values(shortArray0);
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)0;
      tUnmodifiableByteShortMap1.keys(tByteShortHashMap1._states);
      shortArray0[5] = short5;
      short short6 = (short) (-1354);
      shortArray0[6] = short6;
      short short7 = (short)0;
      shortArray0[7] = short7;
      tUnmodifiableByteShortMap0.values(shortArray0);
      int int0 = tUnmodifiableByteShortMap1.hashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-738);
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0, int0);
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap0 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap0);
      boolean boolean0 = tUnmodifiableByteShortMap0.isEmpty();
      assertEquals(true, boolean0);
      
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap();
      short[] shortArray0 = new short[6];
      short short0 = (short)141;
      shortArray0[0] = short0;
      short short1 = (short) (-223);
      shortArray0[1] = short1;
      short short2 = (short) (-66);
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short) (-1);
      shortArray0[4] = short4;
      short short5 = (short) (-1797);
      shortArray0[5] = short5;
      short[] shortArray1 = tUnmodifiableByteShortMap0.values(shortArray0);
      assertNotNull(shortArray1);
      
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap1 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap1);
      byte byte0 = (byte) (-30);
      // Undeclared exception!
      try {
        tUnmodifiableByteShortMap1.adjustOrPutValue(byte0, byte0, byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      int int0 = 0;
      byte byte2 = (byte) (-70);
      short short0 = (short) (-1947);
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap();
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap0 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap0);
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap1 = new TUnmodifiableByteShortMap((TByteShortMap) tUnmodifiableByteShortMap0);
      byte byte3 = (byte)0;
      // Undeclared exception!
      try {
        tUnmodifiableByteShortMap1.remove(byte3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = (-1175);
      TByteShortHashMap tByteShortHashMap0 = new TByteShortHashMap(int0);
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap0 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap0);
      TByteShortHashMap tByteShortHashMap1 = new TByteShortHashMap((TByteShortMap) tUnmodifiableByteShortMap0);
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap1 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap1);
      byte byte0 = (byte)64;
      tUnmodifiableByteShortMap0.containsKey(byte0);
      int int1 = 0;
      TUnmodifiableByteShortMap tUnmodifiableByteShortMap2 = new TUnmodifiableByteShortMap((TByteShortMap) tByteShortHashMap1);
      TByteShortHashMap tByteShortHashMap2 = new TByteShortHashMap();
      TByteShortHashMap tByteShortHashMap3 = new TByteShortHashMap((TByteShortMap) tByteShortHashMap2);
      byte byte1 = (byte) (-86);
      tByteShortHashMap0.get(byte0);
      // Undeclared exception!
      try {
        tUnmodifiableByteShortMap2.put(byte1, byte1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
