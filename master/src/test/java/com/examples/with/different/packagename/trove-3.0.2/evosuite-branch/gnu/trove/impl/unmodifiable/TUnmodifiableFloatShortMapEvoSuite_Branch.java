/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TShortFunction;
import gnu.trove.impl.unmodifiable.TUnmodifiableFloatSet;
import gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection;
import gnu.trove.map.TFloatShortMap;
import gnu.trove.map.hash.TFloatShortHashMap;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.procedure.TFloatShortProcedure;
import gnu.trove.procedure.TShortProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableFloatShortMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap$1.value()S: root-Branch
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap$1.<init>(Lgnu/trove/impl/unmodifiable/TUnmodifiableFloatShortMap;)V: root-Branch
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap$1.advance()V: root-Branch
   * 4 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap$1.hasNext()Z: root-Branch
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap$1.key()F: root-Branch
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.size()I: root-Branch
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.iterator()Lgnu/trove/iterator/TFloatShortIterator;: root-Branch
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.<init>(Lgnu/trove/map/TFloatShortMap;)V: I17 Branch 1 IFNONNULL L58 - true
   */

  @Test
  public void test0()  throws Throwable  {
      float[] floatArray0 = new float[19];
      short[] shortArray0 = new short[10];
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap((TFloatShortMap) tUnmodifiableFloatShortMap0);
      assertEquals(1, tUnmodifiableFloatShortMap0.size());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      boolean boolean0 = tUnmodifiableFloatShortMap0.forEachKey((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.putIfAbsent(FS)S: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap0.putIfAbsent(1793.0284F, (short)157);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.getNoEntryKey()F: root-Branch
   */

//   @Test
//   public void test3()  throws Throwable  {
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1553), (float) (-1553), (float) (-1553), (short)0);
//       TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
//       float float0 = tUnmodifiableFloatShortMap0.getNoEntryKey();
//       assertEquals((-1553.0F), float0, 0.01F);
//   }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      float[] floatArray0 = new float[15];
      short[] shortArray0 = new short[6];
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap0.putAll((Map<? extends Float, ? extends Short>) hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.retainEntries(Lgnu/trove/procedure/TFloatShortProcedure;)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1183), (-1183));
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap0.retainEntries((TFloatShortProcedure) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.containsValue(S)Z: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      boolean boolean0 = tUnmodifiableFloatShortMap0.containsValue((short)816);
      assertEquals(false, boolean0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.forEachValue(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      boolean boolean0 = tUnmodifiableFloatShortMap0.forEachValue((TShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.adjustValue(FS)Z: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      float[] floatArray0 = new float[19];
      short[] shortArray0 = new short[10];
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap0.adjustValue((float) (short)0, (short)0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.increment(F)Z: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(1979, 1979);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap0.increment((float) 1979);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-365), (-365));
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      String string0 = tUnmodifiableFloatShortMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.keys([F)[F: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1954));
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      float[] floatArray0 = tUnmodifiableFloatShortMap0.keys(tFloatShortHashMap0._set);
      assertNotNull(floatArray0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.transformValues(Lgnu/trove/function/TShortFunction;)V: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap0.transformValues((TShortFunction) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.get(F)S: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1553), (float) (-1553), (float) (-1553), (short)0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      short short0 = tUnmodifiableFloatShortMap0.get((float) (-1553));
      assertEquals((short)0, short0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.adjustOrPutValue(FSS)S: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1553), (float) (-1553), (float) (-1553), (short)0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap0.adjustOrPutValue((float) (-1553), (short)0, (short)0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.hashCode()I: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-365), (-365));
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      int int0 = tUnmodifiableFloatShortMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.containsKey(F)Z: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1553), (float) (-1553), (float) (-1553), (short)0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      boolean boolean0 = tUnmodifiableFloatShortMap0.containsKey((float) (-1553));
      assertEquals(false, boolean0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.values([S)[S: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1553), (float) (-1553), (float) (-1553), (short)0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      short[] shortArray0 = new short[5];
      short[] shortArray1 = tUnmodifiableFloatShortMap0.values(shortArray0);
      assertSame(shortArray0, shortArray1);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.getNoEntryValue()S: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(1979, 1979);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      short short0 = tUnmodifiableFloatShortMap0.getNoEntryValue();
      assertEquals((short)0, short0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.putAll(Lgnu/trove/map/TFloatShortMap;)V: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1954));
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap0.putAll((TFloatShortMap) tFloatShortHashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.put(FS)S: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap0.put((float) (short)1815, (short)1815);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      boolean boolean0 = tUnmodifiableFloatShortMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.keys()[F: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1954));
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      float[] floatArray0 = tUnmodifiableFloatShortMap0.keys();
      assertNotNull(floatArray0);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.forEachEntry(Lgnu/trove/procedure/TFloatShortProcedure;)Z: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1183), (-1183));
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      boolean boolean0 = tUnmodifiableFloatShortMap0.forEachEntry((TFloatShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.remove(F)S: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-365), (-365));
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap0.remove((float) (short)14);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.values()[S: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      short[] shortArray0 = tUnmodifiableFloatShortMap0.values();
      assertNotNull(shortArray0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.clear()V: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.<init>(Lgnu/trove/map/TFloatShortMap;)V: I17 Branch 1 IFNONNULL L58 - false
   */

  @Test
  public void test27()  throws Throwable  {
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = null;
      try {
        tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.keySet()Lgnu/trove/set/TFloatSet;: I4 Branch 2 IFNONNULL L79 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.keySet()Lgnu/trove/set/TFloatSet;: I4 Branch 2 IFNONNULL L79 - false
   */

  @Test
  public void test28()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      TUnmodifiableFloatSet tUnmodifiableFloatSet0 = (TUnmodifiableFloatSet)tUnmodifiableFloatShortMap0.keySet();
      assertNotNull(tUnmodifiableFloatSet0);
      
      TUnmodifiableFloatSet tUnmodifiableFloatSet1 = (TUnmodifiableFloatSet)tUnmodifiableFloatShortMap0.keySet();
      assertSame(tUnmodifiableFloatSet1, tUnmodifiableFloatSet0);
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.valueCollection()Lgnu/trove/TShortCollection;: I4 Branch 3 IFNONNULL L87 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.valueCollection()Lgnu/trove/TShortCollection;: I4 Branch 3 IFNONNULL L87 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1954));
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      TUnmodifiableShortCollection tUnmodifiableShortCollection0 = (TUnmodifiableShortCollection)tUnmodifiableFloatShortMap0.valueCollection();
      assertNotNull(tUnmodifiableShortCollection0);
      
      TUnmodifiableShortCollection tUnmodifiableShortCollection1 = (TUnmodifiableShortCollection)tUnmodifiableFloatShortMap0.valueCollection();
      assertSame(tUnmodifiableShortCollection1, tUnmodifiableShortCollection0);
  }

  //Test case number: 30
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L94 - false
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L94 - true
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap.<init>(Lgnu/trove/map/TFloatShortMap;)V: I17 Branch 1 IFNONNULL L58 - true
   */

  @Test
  public void test30()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      boolean boolean0 = tUnmodifiableFloatShortMap0.equals((Object) "/");
      assertEquals(false, boolean0);
  }
}
