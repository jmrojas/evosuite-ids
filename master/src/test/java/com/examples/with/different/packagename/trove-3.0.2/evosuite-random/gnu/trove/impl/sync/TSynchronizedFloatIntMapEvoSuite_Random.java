/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TIntFunction;
import gnu.trove.impl.sync.TSynchronizedFloatIntMap;
import gnu.trove.map.TFloatIntMap;
import gnu.trove.map.hash.TFloatIntHashMap;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedFloatIntMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TFloatIntMap tFloatIntMap0 = null;
      String string0 = "!s8h$a=4PQ";
      int int0 = (-2024);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: !s8h$a=4PQ://!s8h$a=%7F4PQ@!s8h$a=4PQ:-2024!s8h$a=%7F4PQ?!s8h$a=%7F4PQ#!s8h$a=%7F4PQ
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = (-97);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      float float0 = 543.43274F;
      floatArray0[3] = float0;
      floatArray0[4] = (float) int1;
      int[] intArray0 = new int[9];
      intArray0[0] = int2;
      intArray0[1] = int2;
      int int3 = 740;
      intArray0[2] = int3;
      intArray0[3] = int2;
      intArray0[4] = int0;
      intArray0[5] = int2;
      intArray0[6] = int0;
      intArray0[7] = int0;
      intArray0[8] = int0;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap((TFloatIntMap) tFloatIntHashMap0);
      tFloatIntHashMap0.keys(tFloatIntHashMap1._set);
      TSynchronizedFloatIntMap tSynchronizedFloatIntMap0 = new TSynchronizedFloatIntMap((TFloatIntMap) tFloatIntHashMap1);
      TFloatIntHashMap tFloatIntHashMap2 = new TFloatIntHashMap(int1, int1, int1, int2);
      TSynchronizedFloatIntMap tSynchronizedFloatIntMap1 = new TSynchronizedFloatIntMap((TFloatIntMap) tFloatIntHashMap2);
      float float1 = 0.5F;
      float float2 = 0.0F;
      TFloatIntHashMap tFloatIntHashMap3 = new TFloatIntHashMap(int0, float1, float2, int0);
      String string0 = "";
      TSynchronizedFloatIntMap tSynchronizedFloatIntMap2 = new TSynchronizedFloatIntMap((TFloatIntMap) tFloatIntHashMap3);
      URI uRI0 = new URI(string0);
      tSynchronizedFloatIntMap1.keys(tFloatIntHashMap3._set);
      URI uRI1 = null;
      // Undeclared exception!
      try {
        uRI0.relativize(uRI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-77);
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(int0);
      String string0 = ".Em{\"d1-i4~S?f5wgE";
      File file0 = new File(string0, string0);
      File file1 = file0.getCanonicalFile();
      URI uRI0 = file1.toURI();
      String string1 = uRI0.getHost();
      TSynchronizedFloatIntMap tSynchronizedFloatIntMap0 = new TSynchronizedFloatIntMap((TFloatIntMap) tFloatIntHashMap0, (Object) string1);
      int int1 = (-1561);
      TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap(int1, int1);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)15;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)91;
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      byteArray0[4] = byte4;
      byte byte5 = (byte)25;
      byteArray0[5] = byte5;
      byte byte6 = (byte)17;
      byteArray0[6] = byte6;
      byte byte7 = (byte)113;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-83);
      byteArray0[8] = byte8;
      tFloatIntHashMap1._states = byteArray0;
      tFloatIntHashMap1.capacity();
      Locale locale0 = Locale.ENGLISH;
      String string2 = locale0.getDisplayLanguage();
      TSynchronizedFloatIntMap tSynchronizedFloatIntMap1 = new TSynchronizedFloatIntMap((TFloatIntMap) tFloatIntHashMap1, (Object) string2);
      float float0 = 1688.5018F;
      int int2 = 0;
      tSynchronizedFloatIntMap1.hashCode();
      tSynchronizedFloatIntMap1.putIfAbsent(float0, int2);
      assertEquals(false, tFloatIntHashMap1.isEmpty());
      assertFalse(tFloatIntHashMap1.equals(tFloatIntHashMap0));
  }

  @Test
  public void test3()  throws Throwable  {
      TFloatIntMap tFloatIntMap0 = null;
      TFloatIntHashMap tFloatIntHashMap0 = null;
      try {
        tFloatIntHashMap0 = new TFloatIntHashMap(tFloatIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 167;
      int int1 = (-25);
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(int1, int1);
      TSynchronizedFloatIntMap tSynchronizedFloatIntMap0 = new TSynchronizedFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -25
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 730;
      float float0 = 0.0F;
      int int1 = (-1129);
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(int0, float0, (float) int0, int1);
      Locale locale0 = Locale.getDefault();
      String string0 = locale0.toString();
      TSynchronizedFloatIntMap tSynchronizedFloatIntMap0 = new TSynchronizedFloatIntMap((TFloatIntMap) tFloatIntHashMap0, (Object) string0);
      int[] intArray0 = new int[3];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      int[] intArray1 = tSynchronizedFloatIntMap0.values(intArray0);
      assertSame(intArray1, intArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = 47.680622F;
      floatArray0[0] = float0;
      float float1 = (-1.0F);
      floatArray0[1] = float1;
      float float2 = 811.3948F;
      floatArray0[2] = float2;
      float float3 = 553.3596F;
      floatArray0[3] = float3;
      float float4 = 0.0F;
      floatArray0[4] = float4;
      float float5 = 0.0F;
      floatArray0[5] = float5;
      float float6 = (-1824.6106F);
      floatArray0[6] = float6;
      float float7 = 1156.099F;
      floatArray0[7] = float7;
      int[] intArray0 = new int[3];
      int int0 = 175;
      intArray0[0] = int0;
      int int1 = 1;
      intArray0[1] = int1;
      int int2 = (-1344);
      intArray0[2] = int2;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap((TFloatIntMap) tFloatIntHashMap0);
      String string0 = "Equal objects must have equal hashcodes. During rehashing, Trove discovered that the following two objects claim to be equal (as in java.lang.Object.equals()) but their hashCodes (or those calculated by your TObjectHashingStrategy) are not equal.This violates the general contract of java.lang.Object.hashCode().  See bullet point two in that method's documentation. object #1 =";
      File file0 = new File(string0);
      String string1 = file0.getCanonicalPath();
      TSynchronizedFloatIntMap tSynchronizedFloatIntMap0 = new TSynchronizedFloatIntMap((TFloatIntMap) tFloatIntHashMap1, (Object) string1);
      boolean boolean0 = tSynchronizedFloatIntMap0.isEmpty();
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float float0 = (-276.55374F);
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      float float2 = 0.0F;
      floatArray0[2] = float2;
      int[] intArray0 = new int[1];
      int int0 = 237;
      intArray0[0] = int0;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      TSynchronizedFloatIntMap tSynchronizedFloatIntMap0 = new TSynchronizedFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      int[] intArray1 = tSynchronizedFloatIntMap0.values();
      assertFalse(intArray1.equals(intArray0));
  }

  @Test
  public void test8()  throws Throwable  {
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap();
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)81;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-29);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)111;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-87);
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-54);
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      byteArray0[8] = byte8;
      byte byte9 = (byte)0;
      TSynchronizedFloatIntMap tSynchronizedFloatIntMap0 = new TSynchronizedFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      byteArray0[9] = byte9;
      tFloatIntHashMap0._states = byteArray0;
      TSynchronizedFloatIntMap tSynchronizedFloatIntMap1 = new TSynchronizedFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      float float0 = (-1165.9297F);
      // Undeclared exception!
      try {
        tSynchronizedFloatIntMap1.remove(float0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 102;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) int0;
      floatArray0[6] = (float) int0;
      floatArray0[7] = (float) int0;
      int[] intArray0 = new int[1];
      intArray0[0] = int0;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      TSynchronizedFloatIntMap tSynchronizedFloatIntMap0 = new TSynchronizedFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      tSynchronizedFloatIntMap0.remove(floatArray0[1]);
      assertEquals("{}", tFloatIntHashMap0.toString());
      
      float float0 = (-735.4709F);
      TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap(int0, float0);
      String string0 = File.pathSeparator;
      TSynchronizedFloatIntMap tSynchronizedFloatIntMap1 = new TSynchronizedFloatIntMap((TFloatIntMap) tFloatIntHashMap1, (Object) string0);
      TIntFunction tIntFunction0 = null;
      tSynchronizedFloatIntMap1.transformValues(tIntFunction0);
      assertTrue(tFloatIntHashMap1.equals(tFloatIntHashMap0));
  }

  @Test
  public void test10()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = (-1.0F);
      floatArray0[1] = float1;
      float float2 = 0.0F;
      floatArray0[2] = float2;
      float float3 = (-1.0F);
      floatArray0[3] = float3;
      float float4 = (-1196.2935F);
      floatArray0[4] = float4;
      int[] intArray0 = new int[2];
      int int0 = 1069;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      TSynchronizedFloatIntMap tSynchronizedFloatIntMap0 = new TSynchronizedFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      float float5 = (-564.09015F);
      int int2 = tSynchronizedFloatIntMap0.get(float5);
      assertTrue(int2 == int1);
  }

  @Test
  public void test11()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = 1810.2712F;
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      float float2 = Float.POSITIVE_INFINITY;
      floatArray0[2] = float2;
      float float3 = 758.1043F;
      floatArray0[3] = float3;
      float float4 = (-1.0F);
      floatArray0[4] = float4;
      float float5 = 1340.6827F;
      floatArray0[5] = float5;
      float float6 = Float.POSITIVE_INFINITY;
      floatArray0[6] = float6;
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = (-167);
      intArray0[1] = int1;
      int int2 = (-1);
      intArray0[2] = int2;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      float float7 = (-1885.0828F);
      String string0 = Float.toString(float7);
      TSynchronizedFloatIntMap tSynchronizedFloatIntMap0 = new TSynchronizedFloatIntMap((TFloatIntMap) tFloatIntHashMap0, (Object) string0);
      float[] floatArray1 = tSynchronizedFloatIntMap0.keys();
      assertFalse(floatArray0.equals(floatArray1));
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1;
      float float0 = (-288.48877F);
      TFloatIntMap tFloatIntMap0 = null;
      TSynchronizedFloatIntMap tSynchronizedFloatIntMap0 = null;
      try {
        tSynchronizedFloatIntMap0 = new TSynchronizedFloatIntMap(tFloatIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = (-1.0F);
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      float float2 = (-2026.9587F);
      floatArray0[2] = float2;
      float float3 = Float.NEGATIVE_INFINITY;
      floatArray0[3] = float3;
      float float4 = (-1.0F);
      floatArray0[4] = float4;
      float float5 = 731.89124F;
      floatArray0[5] = float5;
      float float6 = (-1108.2568F);
      floatArray0[6] = float6;
      float float7 = 446.96396F;
      floatArray0[7] = float7;
      float float8 = 0.0F;
      floatArray0[8] = float8;
      float float9 = 341.83282F;
      floatArray0[9] = float9;
      int[] intArray0 = new int[6];
      int int0 = (-471);
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 496;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      Locale locale0 = Locale.CHINESE;
      String string0 = locale0.getDisplayName();
      TSynchronizedFloatIntMap tSynchronizedFloatIntMap0 = new TSynchronizedFloatIntMap((TFloatIntMap) tFloatIntHashMap0, (Object) string0);
      tSynchronizedFloatIntMap0.toString();
      TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap();
      String string1 = "I&S5x_Hyp@j#K";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string1, string1, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: I&S5x_Hyp@j#K://I&S5x_Hyp@j#KI&S5x_Hyp@j%23K#I&S5x_Hyp@j%23K
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-843);
      float float0 = 0.0F;
      int int1 = 21911;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap();
      Object object0 = null;
      TSynchronizedFloatIntMap tSynchronizedFloatIntMap0 = new TSynchronizedFloatIntMap((TFloatIntMap) tFloatIntHashMap0, object0);
      // Undeclared exception!
      try {
        tSynchronizedFloatIntMap0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TFloatIntMap tFloatIntMap0 = null;
      Locale locale0 = Locale.ITALY;
      String string0 = locale0.toLanguageTag();
      TSynchronizedFloatIntMap tSynchronizedFloatIntMap0 = new TSynchronizedFloatIntMap(tFloatIntMap0, (Object) string0);
      TSynchronizedFloatIntMap tSynchronizedFloatIntMap1 = null;
      try {
        tSynchronizedFloatIntMap1 = new TSynchronizedFloatIntMap(tFloatIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 6421;
      TFloatIntMap tFloatIntMap0 = null;
      String string0 = "d1";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0);
      // Undeclared exception!
      try {
        stringTokenizer0.nextToken(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap();
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      tFloatIntHashMap0.putAll((Map<? extends Float, ? extends Integer>) hashMap0);
      hashMap0.clear();
      TSynchronizedFloatIntMap tSynchronizedFloatIntMap0 = new TSynchronizedFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      tSynchronizedFloatIntMap0.iterator();
      float float0 = 70.87451F;
      tSynchronizedFloatIntMap0.hashCode();
      Float float1 = new Float(float0);
      String string0 = " greater than end index ";
      try {
        Integer.decode(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" greater than end index \"
         //
      }
  }
}
