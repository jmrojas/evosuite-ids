/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TCharCharMap;
import gnu.trove.map.hash.TCharCharHashMap;
import gnu.trove.set.TCharSet;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharCharHashMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-557);
      float float0 = 0.0F;
      char char0 = 'S';
      int int1 = 122347;
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(int1, float0, char0, char0);
      AbstractMap.SimpleImmutableEntry<Integer, TCharCharHashMap> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, TCharCharHashMap>((Integer) int0, tCharCharHashMap0);
      abstractMap_SimpleImmutableEntry0.getValue();
      float float1 = (-1410.5027F);
      char char1 = 'o';
      char char2 = 'Q';
      TCharCharHashMap tCharCharHashMap1 = new TCharCharHashMap((int) char0, float1, char1, char2);
      tCharCharHashMap1.adjustOrPutValue(char0, char2, char0);
      assertEquals(7, tCharCharHashMap1.capacity());
      
      TCharCharHashMap tCharCharHashMap2 = new TCharCharHashMap(int0, float0, char0, char0);
      char[] charArray0 = new char[2];
      char char3 = '%';
      charArray0[0] = char3;
      charArray0[1] = char3;
      char char4 = 'U';
      tCharCharHashMap2.get(char4);
      charArray0[0] = char4;
      char char5 = 'H';
      charArray0[1] = char5;
      TCharCharHashMap tCharCharHashMap3 = new TCharCharHashMap(charArray0, charArray0);
      int int2 = 645;
      char char6 = '^';
      tCharCharHashMap2.keys();
      tCharCharHashMap0.iterator();
      int int3 = 746;
      TCharCharHashMap tCharCharHashMap4 = new TCharCharHashMap(int3, int3);
      char char7 = '';
      tCharCharHashMap4.increment(char7);
      TCharCharHashMap tCharCharHashMap5 = new TCharCharHashMap(int2, (float) int2, char6, char6);
      tCharCharHashMap5.tempDisableAutoCompaction();
      assertFalse(tCharCharHashMap5.equals(tCharCharHashMap3));
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 9;
      char[] charArray0 = new char[4];
      char char0 = 'H';
      charArray0[0] = char0;
      char char1 = '\"';
      TCharCharMap tCharCharMap0 = null;
      charArray0[0] = char0;
      charArray0[1] = char1;
      charArray0[2] = char0;
      char char2 = '_';
      charArray0[3] = char2;
      int int1 = (-1506);
      char char3 = 'O';
      char char4 = 'U';
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(int1, (float) charArray0[1], char3, char4);
      tCharCharHashMap0.increment(charArray0[3]);
      TCharCharHashMap tCharCharHashMap1 = null;
      try {
        tCharCharHashMap1 = new TCharCharHashMap(tCharCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 927292699;
      TCharCharHashMap tCharCharHashMap0 = null;
      try {
        tCharCharHashMap0 = new TCharCharHashMap(int0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      char[] charArray0 = new char[5];
      char char0 = '+';
      charArray0[0] = char0;
      char char1 = 'l';
      charArray0[1] = char1;
      char char2 = 'b';
      charArray0[2] = char2;
      char char3 = 'z';
      charArray0[3] = char3;
      char char4 = 'a';
      charArray0[4] = char4;
      char[] charArray1 = new char[3];
      charArray1[0] = char3;
      charArray1[1] = char4;
      charArray1[2] = char4;
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(charArray0, charArray1);
      char[] charArray2 = tCharCharHashMap0.keys(charArray0);
      assertNotNull(charArray2);
      assertEquals("{+=z, l=a, b=a}", tCharCharHashMap0.toString());
      assertSame(charArray2, charArray0);
      
      TCharCharHashMap tCharCharHashMap1 = new TCharCharHashMap(int0, float0);
      char[] charArray3 = new char[7];
      char char5 = ':';
      charArray3[0] = char5;
      char char6 = 'H';
      charArray3[1] = char6;
      char char7 = 'A';
      charArray3[2] = char7;
      char char8 = 'e';
      charArray3[3] = char8;
      char char9 = 'S';
      charArray3[4] = char9;
      char char10 = '0';
      charArray3[5] = char10;
      char char11 = '[';
      charArray3[6] = char11;
      char[] charArray4 = tCharCharHashMap1.values(charArray3);
      assertSame(charArray4, charArray3);
      assertNotNull(charArray4);
      
      tCharCharHashMap1.keySet();
      assertFalse(tCharCharHashMap1.equals(tCharCharHashMap0));
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Character, TCharCharHashMap>> map_Entry0 = null;
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = null;
      try {
        abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(map_Entry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 0;
      TCharCharMap tCharCharMap0 = null;
      TCharCharHashMap tCharCharHashMap0 = null;
      try {
        tCharCharHashMap0 = new TCharCharHashMap(tCharCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      char[] charArray0 = new char[8];
      char char0 = 'd';
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap((int) char0, (float) char0);
      char[] charArray1 = tCharCharHashMap0.keys();
      assertNotNull(charArray1);
      
      charArray0[0] = char0;
      char char1 = 'f';
      charArray0[1] = char1;
      TCharCharHashMap tCharCharHashMap1 = new TCharCharHashMap(charArray0, charArray0);
      tCharCharHashMap1.ensureCapacity((int) char1);
      char char2 = '&';
      charArray0[2] = char2;
      char char3 = 'h';
      charArray0[3] = char3;
      char char4 = 'u';
      charArray0[4] = char4;
      char char5 = 'v';
      charArray0[5] = char5;
      char char6 = 'e';
      charArray0[6] = char6;
      char char7 = '@';
      charArray0[7] = char7;
      TCharCharHashMap tCharCharHashMap2 = new TCharCharHashMap(charArray0, charArray0);
      TCharCharHashMap tCharCharHashMap3 = new TCharCharHashMap((TCharCharMap) tCharCharHashMap2);
      tCharCharHashMap3.values();
      int int0 = 0;
      char char8 = 'j';
      TCharCharHashMap tCharCharHashMap4 = new TCharCharHashMap(int0, (float) int0, char8, char8);
      tCharCharHashMap4.size();
      tCharCharHashMap1.values(tCharCharHashMap3._set);
      assertEquals("{f=f, d=d, \u0000=\u0000}", tCharCharHashMap1.toString());
      assertEquals("{@=@, &=&, h=h, f=f, e=e, d=d, v=v, \u0000=u}", tCharCharHashMap3.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      float float0 = (-1909.5237F);
      char char0 = 'h';
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(int0, float0, char0, char0);
      tCharCharHashMap0.clear();
      assertEquals("{}", tCharCharHashMap0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      char[] charArray0 = new char[8];
      char char0 = 'a';
      charArray0[0] = char0;
      char char1 = 'o';
      charArray0[1] = char1;
      char char2 = '~';
      charArray0[2] = char2;
      char char3 = 'O';
      charArray0[3] = char3;
      char char4 = 'y';
      charArray0[4] = char4;
      char char5 = '1';
      charArray0[5] = char5;
      char char6 = '!';
      charArray0[6] = char6;
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap();
      TCharCharHashMap tCharCharHashMap1 = new TCharCharHashMap((TCharCharMap) tCharCharHashMap0);
      boolean boolean0 = tCharCharHashMap1.adjustValue(charArray0[6], char4);
      assertEquals(false, boolean0);
      assertEquals(23, tCharCharHashMap1.capacity());
      
      char char7 = 'C';
      charArray0[7] = char7;
      TCharCharHashMap tCharCharHashMap2 = new TCharCharHashMap(charArray0, charArray0);
      int int0 = 28;
      TCharSet tCharSet0 = tCharCharHashMap2.keySet();
      assertEquals("{!=!, 1=1, a=a, O=O, o=o, C=C, ~=~, y=y}", tCharCharHashMap2.toString());
      
      TCharCharHashMap tCharCharHashMap3 = new TCharCharHashMap();
      TCharCharHashMap tCharCharHashMap4 = new TCharCharHashMap(int0);
      TCharCharHashMap tCharCharHashMap5 = new TCharCharHashMap(int0);
      tCharCharHashMap4.putAll((TCharCharMap) tCharCharHashMap5);
      TCharCharHashMap tCharCharHashMap6 = new TCharCharHashMap(int0);
      TCharSet tCharSet1 = tCharCharHashMap6.keySet();
      assertFalse(tCharSet1.equals(tCharSet0));
  }

  @Test
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap();
          int int0 = 0;
          TCharCharHashMap tCharCharHashMap1 = new TCharCharHashMap((TCharCharMap) tCharCharHashMap0);
          char char0 = 'U';
          tCharCharHashMap0.containsKey(char0);
          TCharCharHashMap tCharCharHashMap2 = new TCharCharHashMap(int0);
          float float0 = (-933.4985F);
          String string0 = "zo[>Rj0*)6/GI";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test10()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap();
      assertEquals(23, tCharCharHashMap0.capacity());
      
      char[] charArray0 = new char[3];
      char char0 = 'H';
      charArray0[0] = char0;
      tCharCharHashMap0.trimToSize();
      char char1 = 'N';
      charArray0[1] = char1;
      char char2 = 'Z';
      charArray0[2] = char2;
      char[] charArray1 = tCharCharHashMap0.values(charArray0);
      assertEquals(3, tCharCharHashMap0.capacity());
      assertSame(charArray0, charArray1);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 680;
      float float0 = 1973.9117F;
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(int0, float0);
      char char0 = '5';
      float float1 = 10.0F;
      char char1 = 'j';
      TCharCharHashMap tCharCharHashMap1 = new TCharCharHashMap((int) char0, float1, char1, char0);
      TCharCharHashMap tCharCharHashMap2 = new TCharCharHashMap((TCharCharMap) tCharCharHashMap0);
      AbstractMap.SimpleImmutableEntry<TCharCharHashMap, TCharCharHashMap> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<TCharCharHashMap, TCharCharHashMap>(tCharCharHashMap1, tCharCharHashMap2);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>((Map.Entry<?, ?>) abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Object>((Integer) int0, (Object) abstractMap_SimpleEntry0);
      String string0 = "'X51HM1%$3)";
      tCharCharHashMap2.keys(tCharCharHashMap0._set);
      tCharCharHashMap1.size();
      boolean boolean0 = false;
      tCharCharHashMap0.reenableAutoCompaction(boolean0);
      int int1 = 173;
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int1, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 'X51HM1%$3)://'X51HM1%25$3)@'X51HM1%$3):173'X51HM1%25$3)?'X51HM1%25$3)#'X51HM1%25$3)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TCharCharMap tCharCharMap0 = null;
      int int0 = 14488931;
      float float0 = (-1581.941F);
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(int0, float0);
      char char0 = ':';
      char char1 = '7';
      tCharCharHashMap0.adjustOrPutValue(char0, char0, char1);
      TCharCharHashMap tCharCharHashMap1 = null;
      try {
        tCharCharHashMap1 = new TCharCharHashMap(tCharCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[8];
      char char0 = 'z';
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = char0;
      charArray0[3] = char0;
      charArray0[4] = char0;
      charArray0[5] = char0;
      char char1 = 'd';
      charArray0[6] = char1;
      charArray0[7] = char1;
      char char2 = '-';
      charArray0[0] = char2;
      char char3 = 'D';
      float float0 = 0.0F;
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap((int) char2, float0);
      charArray0[1] = char3;
      char char4 = 'i';
      charArray0[2] = char4;
      char char5 = 'z';
      float float1 = 6.6360896E8F;
      TCharCharHashMap tCharCharHashMap1 = new TCharCharHashMap((int) char4, float1);
      charArray0[3] = char5;
      char char6 = '^';
      TCharCharHashMap tCharCharHashMap2 = new TCharCharHashMap((int) charArray0[1]);
      charArray0[4] = char6;
      char char7 = 'L';
      charArray0[5] = char7;
      char char8 = 'E';
      charArray0[6] = char8;
      char char9 = 'a';
      charArray0[7] = char9;
      TCharCharHashMap tCharCharHashMap3 = new TCharCharHashMap(charArray0, charArray0);
      tCharCharHashMap3.ensureCapacity((int) charArray0[0]);
      assertEquals(137, tCharCharHashMap3.capacity());
      
      TCharCharHashMap tCharCharHashMap4 = new TCharCharHashMap();
      float float2 = (-1556.5076F);
      // Undeclared exception!
      try {
        tCharCharHashMap4.setAutoCompactionFactor(float2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1556.5076
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-1094);
      float float0 = 0.5F;
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(int0, float0);
      tCharCharHashMap0.ensureCapacity(int0);
      assertEquals("{}", tCharCharHashMap0.toString());
  }
}
