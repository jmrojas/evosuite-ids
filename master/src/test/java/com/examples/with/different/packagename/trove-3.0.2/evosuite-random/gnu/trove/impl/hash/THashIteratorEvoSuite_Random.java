/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.hash.TObjectHash;
import gnu.trove.iterator.hash.TObjectHashIterator;
import gnu.trove.map.custom_hash.TObjectCharCustomHashMap;
import gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap;
import gnu.trove.map.custom_hash.TObjectLongCustomHashMap;
import gnu.trove.map.hash.THashMap;
import gnu.trove.map.hash.TObjectByteHashMap;
import gnu.trove.map.hash.TObjectDoubleHashMap;
import gnu.trove.map.hash.TObjectIntHashMap;
import gnu.trove.set.hash.TCustomHashSet;
import gnu.trove.set.hash.THashSet;
import gnu.trove.set.hash.TLinkedHashSet;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.util.Collection;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class THashIteratorEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      THashSet<Object> tHashSet0 = new THashSet<Object>();
      TObjectHashIterator<Object> tObjectHashIterator0 = new TObjectHashIterator<Object>((TObjectHash<Object>) tHashSet0);
      boolean boolean0 = tObjectHashIterator0.hasNext();
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      TCustomHashSet<Object> tCustomHashSet0 = new TCustomHashSet<Object>();
      tCustomHashSet0.toArray();
      TObjectHashIterator<Object> tObjectHashIterator0 = tCustomHashSet0.iterator();
      assertNotNull(tObjectHashIterator0);
      
      // Undeclared exception!
      try {
        tObjectHashIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TObjectHash<Object> tObjectHash0 = null;
      TObjectHashIterator<Object> tObjectHashIterator0 = null;
      try {
        tObjectHashIterator0 = new TObjectHashIterator<Object>(tObjectHash0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      THashSet<Object> tHashSet0 = new THashSet<Object>();
      TLinkedHashSet<Integer> tLinkedHashSet0 = new TLinkedHashSet<Integer>();
      String string0 = tLinkedHashSet0.toString();
      tHashSet0.add((Object) string0);
      TObjectHashIterator<Object> tObjectHashIterator0 = tHashSet0.iterator();
      int int0 = 1;
      tObjectHashIterator0.next();
      TLinkedHashSet<Integer> tLinkedHashSet1 = new TLinkedHashSet<Integer>(int0);
      TObjectHashIterator<Integer> tObjectHashIterator1 = tLinkedHashSet1.iterator();
      // Undeclared exception!
      try {
        tObjectHashIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-1758);
      byte byte0 = (byte)75;
      TObjectByteHashMap<Integer> tObjectByteHashMap0 = new TObjectByteHashMap<Integer>(int0, (float) int0, byte0);
      TObjectHashIterator<Integer> tObjectHashIterator0 = new TObjectHashIterator<Integer>((TObjectHash<Integer>) tObjectByteHashMap0);
      // Undeclared exception!
      try {
        tObjectHashIterator0.remove();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TLinkedHashSet<String> tLinkedHashSet0 = new TLinkedHashSet<String>();
      TObjectHashIterator<String> tObjectHashIterator0 = tLinkedHashSet0.iterator();
      assertNotNull(tObjectHashIterator0);
      
      TLinkedHashSet<Object> tLinkedHashSet1 = new TLinkedHashSet<Object>((Collection<?>) tLinkedHashSet0);
      TObjectHashIterator<Object> tObjectHashIterator1 = new TObjectHashIterator<Object>((TObjectHash<Object>) tLinkedHashSet1);
      // Undeclared exception!
      try {
        tObjectHashIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 1451;
      TObjectIntHashMap<Object> tObjectIntHashMap0 = new TObjectIntHashMap<Object>();
      TObjectHashIterator<Object> tObjectHashIterator0 = new TObjectHashIterator<Object>((TObjectHash<Object>) tObjectIntHashMap0);
      tObjectHashIterator0.hasNext();
      TLinkedHashSet<Integer> tLinkedHashSet0 = new TLinkedHashSet<Integer>();
      TObjectHashIterator<Integer> tObjectHashIterator1 = tLinkedHashSet0.iterator();
      // Undeclared exception!
      try {
        tObjectHashIterator1.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Object>();
      IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
      int int0 = (-58);
      float float0 = 0.0F;
      TObjectLongCustomHashMap<Integer> tObjectLongCustomHashMap0 = new TObjectLongCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, int0, float0);
      TObjectHashIterator<Integer> tObjectHashIterator0 = new TObjectHashIterator<Integer>((TObjectHash<Integer>) tObjectLongCustomHashMap0);
      // Undeclared exception!
      try {
        tObjectHashIterator0.remove();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 644;
      TLinkedHashSet<Object> tLinkedHashSet0 = new TLinkedHashSet<Object>(int0, int0);
      TObjectHashIterator<Object> tObjectHashIterator0 = tLinkedHashSet0.iterator();
      int int1 = 0;
      THashMap<String, String> tHashMap0 = new THashMap<String, String>(int1, int0);
      TObjectHashIterator<String> tObjectHashIterator1 = new TObjectHashIterator<String>((TObjectHash<String>) tHashMap0);
      // Undeclared exception!
      try {
        tObjectHashIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-1957);
      TLinkedHashSet<String> tLinkedHashSet0 = null;
      try {
        tLinkedHashSet0 = new TLinkedHashSet<String>(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 1535;
      TObjectDoubleCustomHashMap<String> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<String>();
      TObjectHashIterator<String> tObjectHashIterator0 = new TObjectHashIterator<String>((TObjectHash<String>) tObjectDoubleCustomHashMap0);
      float float0 = Float.NEGATIVE_INFINITY;
      TLinkedHashSet<Object> tLinkedHashSet0 = new TLinkedHashSet<Object>(int0, float0);
      TObjectHashIterator<Object> tObjectHashIterator1 = tLinkedHashSet0.iterator();
      tObjectHashIterator1.hasNext();
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TCustomHashSet<Integer> tCustomHashSet0 = new TCustomHashSet<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0);
      TObjectHashIterator<Integer> tObjectHashIterator2 = tCustomHashSet0.iterator();
      // Undeclared exception!
      try {
        tObjectHashIterator2.remove();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 23
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 1706;
      TLinkedHashSet<String> tLinkedHashSet0 = new TLinkedHashSet<String>(int0);
      TObjectHashIterator<String> tObjectHashIterator0 = new TObjectHashIterator<String>((TObjectHash<String>) tLinkedHashSet0);
      // Undeclared exception!
      try {
        tObjectHashIterator0.remove();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3527
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
      IdentityHashingStrategy<Object> identityHashingStrategy1 = new IdentityHashingStrategy<Object>();
      int int0 = 0;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale1 = Locale.getDefault(locale_Category0);
      String string0 = locale0.getDisplayCountry(locale1);
      Object object0 = null;
      identityHashingStrategy1.equals((Object) string0, object0);
      TObjectDoubleCustomHashMap<String> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<String>((HashingStrategy<? super String>) identityHashingStrategy1);
      TObjectHashIterator<String> tObjectHashIterator0 = new TObjectHashIterator<String>((TObjectHash<String>) tObjectDoubleCustomHashMap0);
      boolean boolean0 = tObjectHashIterator0.hasNext();
      assertEquals(false, boolean0);
      
      // Undeclared exception!
      try {
        tObjectHashIterator0.remove();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 23
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
          String string0 = "";
          File file0 = new File(string0);
          File file1 = file0.getCanonicalFile();
          URI uRI0 = file1.toURI();
          String string1 = uRI0.getRawAuthority();
          TObjectCharCustomHashMap<String> tObjectCharCustomHashMap0 = new TObjectCharCustomHashMap<String>();
          String string2 = tObjectCharCustomHashMap0.toString();
          identityHashingStrategy0.equals((Object) string1, (Object) string2);
          int int0 = (-1);
          String string3 = "lb_";
          // Undeclared exception!
          try {
            File.createTempFile(string3, string3);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
