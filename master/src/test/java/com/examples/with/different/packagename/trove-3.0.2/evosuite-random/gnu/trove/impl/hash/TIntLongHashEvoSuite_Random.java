/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TIntLongMap;
import gnu.trove.map.hash.TIntLongHashMap;
import gnu.trove.procedure.TIntLongProcedure;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntLongHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = Integer.MAX_VALUE;
      intArray0[0] = int0;
      int int1 = (-1814);
      intArray0[1] = int1;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) intArray0[1];
      longArray0[1] = (long) intArray0[0];
      longArray0[2] = (long) int0;
      longArray0[3] = (long) intArray0[0];
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      long long0 = (-1333L);
      longArray0[6] = long0;
      longArray0[7] = (long) int0;
      longArray0[8] = (long) intArray0[0];
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(intArray0, longArray0);
      assertEquals(23, tIntLongHashMap0.capacity());
      assertEquals("{-1814=2147483647, 2147483647=-1814}", tIntLongHashMap0.toString());
      
      int int2 = 0;
      TIntLongHashMap tIntLongHashMap1 = new TIntLongHashMap(int2);
      assertEquals(0L, tIntLongHashMap1.getNoEntryValue());
      assertEquals(0, tIntLongHashMap1.getNoEntryKey());
  }

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 1212;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = Integer.MAX_VALUE;
      intArray0[2] = int2;
      int int3 = 1764;
      intArray0[3] = int3;
      int int4 = (-371);
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      int int6 = 31;
      intArray0[6] = int6;
      int int7 = 92;
      intArray0[7] = int7;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) int3;
      longArray0[1] = (long) intArray0[6];
      long long0 = 952L;
      longArray0[2] = long0;
      longArray0[3] = (long) int2;
      longArray0[4] = (long) intArray0[5];
      long long1 = 1L;
      longArray0[5] = long1;
      longArray0[6] = (long) intArray0[4];
      longArray0[7] = (long) intArray0[4];
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(intArray0, longArray0);
      assertEquals("{31=-371, 1764=2147483647, -371=0, 2147483647=952, 92=-371, 1212=1764, 0=1}", tIntLongHashMap0.toString());
      
      tIntLongHashMap0._set = intArray0;
      assertEquals(7, tIntLongHashMap0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-1855);
      intArray0[0] = int0;
      int int1 = (-1862);
      intArray0[1] = int1;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) int1;
      longArray0[1] = (long) int1;
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(intArray0, longArray0);
      long long0 = (-1L);
      long long1 = tIntLongHashMap0.putIfAbsent(intArray0[0], long0);
      assertEquals("{-1855=-1862, -1862=-1862}", tIntLongHashMap0.toString());
      assertEquals(0L, tIntLongHashMap0.getNoEntryValue());
      assertEquals((-1862L), long1);
      assertEquals(0, tIntLongHashMap0.getNoEntryKey());
      assertEquals(5, tIntLongHashMap0.capacity());
  }

  @Test
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = (-520);
      intArray0[0] = int0;
      int int1 = (-522);
      intArray0[1] = int1;
      int int2 = (-436);
      intArray0[2] = int2;
      int int3 = (-340);
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      int int6 = 1;
      intArray0[6] = int6;
      int int7 = 0;
      intArray0[7] = int7;
      int int8 = (-1656);
      intArray0[8] = int8;
      long[] longArray0 = new long[10];
      longArray0[0] = (long) intArray0[8];
      longArray0[1] = (long) intArray0[5];
      longArray0[2] = (long) intArray0[1];
      longArray0[3] = (long) intArray0[2];
      longArray0[4] = (long) intArray0[7];
      longArray0[5] = (long) intArray0[0];
      longArray0[6] = (long) int6;
      longArray0[7] = (long) int7;
      longArray0[8] = (long) int6;
      longArray0[9] = (long) intArray0[4];
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(intArray0, longArray0);
      int int9 = 0;
      tIntLongHashMap0.ensureCapacity(int9);
      int int10 = 0;
      TIntLongHashMap tIntLongHashMap1 = new TIntLongHashMap();
      tIntLongHashMap1.increment(int10);
      int int11 = (-1189);
      OutputStream outputStream0 = null;
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 365;
      intArray0[0] = int0;
      int int1 = (-972);
      intArray0[1] = int1;
      int int2 = 1803;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 325;
      intArray0[4] = int4;
      int int5 = (-306);
      intArray0[5] = int5;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) int1;
      longArray0[1] = (long) intArray0[5];
      longArray0[2] = (long) intArray0[3];
      longArray0[3] = (long) int0;
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(intArray0, longArray0);
      tIntLongHashMap0.getNoEntryValue();
      assertEquals("{365=-972, -972=-306, 1803=0, 0=365}", tIntLongHashMap0.toString());
      
      TIntLongHashMap tIntLongHashMap1 = new TIntLongHashMap();
      assertEquals(0L, tIntLongHashMap1.getNoEntryValue());
      assertEquals(0, tIntLongHashMap1.getNoEntryKey());
      
      int int6 = 120;
      float float0 = (-1374.0991F);
      TIntLongHashMap tIntLongHashMap2 = new TIntLongHashMap(int6, float0);
      assertEquals(0, tIntLongHashMap2.getNoEntryKey());
      assertEquals(0L, tIntLongHashMap2.getNoEntryValue());
      
      TIntLongHashMap tIntLongHashMap3 = new TIntLongHashMap(int6);
      String string0 = tIntLongHashMap3.toString();
      assertNotNull(string0);
      
      long long0 = tIntLongHashMap3.getNoEntryValue();
      assertEquals(277, tIntLongHashMap3.capacity());
      assertEquals(0, tIntLongHashMap3.getNoEntryKey());
      assertEquals(0L, long0);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-1669);
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap();
      tIntLongHashMap0.tempDisableAutoCompaction();
      float float0 = (-1.0F);
      int int1 = (-2011);
      int int2 = 0;
      int int3 = tIntLongHashMap0.getNoEntryKey();
      TIntLongHashMap tIntLongHashMap1 = new TIntLongHashMap(int2, int2);
      int int4 = tIntLongHashMap1.hashCode();
      tIntLongHashMap1.keySet();
      tIntLongHashMap1.isEmpty();
      TIntLongHashMap tIntLongHashMap2 = new TIntLongHashMap(int0, float0, int1, (long) int1);
      int[] intArray0 = new int[4];
      tIntLongHashMap2.getAutoCompactionFactor();
      tIntLongHashMap2.keySet();
      intArray0[0] = int3;
      int int5 = 33;
      intArray0[0] = int5;
      intArray0[1] = int5;
      intArray0[2] = int5;
      int int6 = 0;
      intArray0[3] = int6;
      intArray0[1] = int3;
      intArray0[2] = int2;
      int int7 = (-1437);
      long long0 = 1063L;
      tIntLongHashMap2.putIfAbsent(int7, long0);
      intArray0[3] = int4;
      intArray0[0] = int0;
      intArray0[1] = int0;
      tIntLongHashMap2.values();
      intArray0[2] = int1;
      intArray0[3] = int1;
      tIntLongHashMap2.keys(intArray0);
      tIntLongHashMap2.ensureCapacity(int0);
      assertEquals("{-1437=1063}", tIntLongHashMap2.toString());
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 0;
          float float0 = 1684.3816F;
          int int1 = 1781;
          TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(int0, float0, int1, (long) int1);
          String string0 = "GPc+bsp;?]";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 986;
      int int1 = 0;
      float float0 = 987.43256F;
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(int1, float0);
      String string0 = "\nhashCode() and/or equals() have inconsistent implementation";
      File file0 = new File(string0);
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(file0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // 
         // hashCode() and/or equals() have inconsistent implementation
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-1583);
      float float0 = 880.45807F;
      int int1 = (-2016);
      long long0 = (-1L);
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(int0, float0, int1, long0);
      long long1 = tIntLongHashMap0.getNoEntryValue();
      assertEquals((-1L), long1);
      assertEquals(-2016, tIntLongHashMap0.getNoEntryKey());
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 1439;
      float float0 = (-1776.1654F);
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(int0, float0);
      int[] intArray0 = new int[1];
      intArray0[0] = int0;
      int[] intArray1 = tIntLongHashMap0.keys(intArray0);
      assertNotNull(intArray1);
      
      int int1 = (-932);
      TIntLongHashMap tIntLongHashMap1 = new TIntLongHashMap(int1);
      tIntLongHashMap1.compact();
      boolean boolean0 = false;
      tIntLongHashMap1.reenableAutoCompaction(boolean0);
      assertEquals(0, tIntLongHashMap1.getNoEntryKey());
      assertEquals(0L, tIntLongHashMap1.getNoEntryValue());
      
      float float1 = 0.0F;
      TIntLongHashMap tIntLongHashMap2 = new TIntLongHashMap(int1, float1);
      long long0 = tIntLongHashMap2.getNoEntryValue();
      assertEquals(0, tIntLongHashMap2.getNoEntryKey());
      assertEquals(0L, long0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(int0);
      tIntLongHashMap0.isEmpty();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) int0;
      long[] longArray1 = tIntLongHashMap0.values(longArray0);
      assertEquals(0, tIntLongHashMap0.getNoEntryKey());
      assertNotNull(longArray1);
      assertEquals(0L, tIntLongHashMap0.getNoEntryValue());
  }

  @Test
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 67;
      intArray0[0] = int0;
      int int1 = 1884;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 1;
      intArray0[3] = int3;
      int int4 = 1817;
      intArray0[4] = int4;
      int int5 = 436;
      intArray0[5] = int5;
      int int6 = (-1);
      intArray0[6] = int6;
      int int7 = Integer.MAX_VALUE;
      intArray0[7] = int7;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) intArray0[7];
      longArray0[2] = (long) intArray0[5];
      longArray0[3] = (long) intArray0[2];
      longArray0[4] = (long) int1;
      longArray0[5] = (long) int5;
      longArray0[6] = (long) int2;
      longArray0[7] = (long) int3;
      longArray0[8] = (long) intArray0[3];
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(intArray0, longArray0);
      tIntLongHashMap0.getNoEntryKey();
      TIntLongMap tIntLongMap0 = null;
      int int8 = 180;
      TIntLongHashMap tIntLongHashMap1 = new TIntLongHashMap(int8);
      Locale locale0 = Locale.JAPANESE;
      tIntLongHashMap1.increment(int8);
      String string0 = locale0.getLanguage();
      tIntLongHashMap1.equals((Object) string0);
      TIntLongHashMap tIntLongHashMap2 = null;
      try {
        tIntLongHashMap2 = new TIntLongHashMap(tIntLongMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[9];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = int0;
      intArray0[8] = int0;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) intArray0[1];
      longArray0[1] = (long) intArray0[1];
      longArray0[2] = (long) intArray0[4];
      longArray0[0] = (long) intArray0[3];
      long long0 = 541L;
      longArray0[1] = long0;
      longArray0[2] = (long) intArray0[6];
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(intArray0, longArray0);
      assertEquals(23, tIntLongHashMap0.capacity());
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      tIntLongHashMap0._states = byteArray0;
      TIntLongHashMap tIntLongHashMap1 = new TIntLongHashMap(int0);
      TIntLongProcedure tIntLongProcedure0 = null;
      tIntLongHashMap1.increment(int0);
      tIntLongHashMap1.keySet();
      tIntLongHashMap1.forEachEntry(tIntLongProcedure0);
      assertEquals(0L, tIntLongHashMap1.getNoEntryValue());
  }

  @Test
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 25;
      intArray0[0] = int0;
      int int1 = 1;
      intArray0[1] = int1;
      int int2 = (-1073);
      intArray0[2] = int2;
      int int3 = 0;
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(int3, int1);
      String string0 = tIntLongHashMap0.toString();
      assertEquals(0L, tIntLongHashMap0.getNoEntryValue());
      assertEquals(0, tIntLongHashMap0.getNoEntryKey());
      assertNotNull(string0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) intArray0[1];
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int2;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) intArray0[1];
      long long0 = 0L;
      longArray0[6] = long0;
      longArray0[7] = (long) int0;
      longArray0[8] = (long) intArray0[0];
      TIntLongHashMap tIntLongHashMap1 = new TIntLongHashMap(intArray0, longArray0);
      TIntLongHashMap tIntLongHashMap2 = new TIntLongHashMap((TIntLongMap) tIntLongHashMap1);
      int int4 = tIntLongHashMap2.capacity();
      assertEquals("{-1073=25, 25=25, 1=1}", tIntLongHashMap1.toString());
      assertEquals(0, tIntLongHashMap1.getNoEntryKey());
      assertEquals(0L, tIntLongHashMap1.getNoEntryValue());
      assertEquals(23, int4);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1;
      float float0 = 1.0F;
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(int0, float0);
      tIntLongHashMap0.getAutoCompactionFactor();
      assertEquals(0L, tIntLongHashMap0.getNoEntryValue());
      assertEquals(0, tIntLongHashMap0.getNoEntryKey());
  }

  @Test
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 763;
      intArray0[0] = int0;
      int int1 = (-932);
      intArray0[1] = int1;
      int int2 = (-1801);
      intArray0[2] = int2;
      int int3 = 1333;
      intArray0[3] = int3;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) int3;
      longArray0[1] = (long) intArray0[3];
      longArray0[2] = (long) int0;
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(intArray0, longArray0);
      tIntLongHashMap0.containsValue((long) intArray0[3]);
      assertEquals("{-932=1333, 763=1333, -1801=763}", tIntLongHashMap0.toString());
      assertEquals(0L, tIntLongHashMap0.getNoEntryValue());
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 1332;
      int int1 = 361;
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(int1);
      TIntLongHashMap tIntLongHashMap1 = new TIntLongHashMap((TIntLongMap) tIntLongHashMap0);
      TIntLongHashMap tIntLongHashMap2 = new TIntLongHashMap((TIntLongMap) tIntLongHashMap1);
      tIntLongHashMap2._states = tIntLongHashMap0._states;
      assertEquals(761, tIntLongHashMap2.capacity());
      
      TIntLongHashMap tIntLongHashMap3 = new TIntLongHashMap(int1, int1);
      tIntLongHashMap3.keySet();
      tIntLongHashMap3.containsValue((long) int0);
      float float0 = 1.0F;
      TIntLongHashMap tIntLongHashMap4 = new TIntLongHashMap(int0, float0, int0, (long) int0);
      TIntLongHashMap tIntLongHashMap5 = new TIntLongHashMap((TIntLongMap) tIntLongHashMap4);
      long long0 = (-827L);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      long long1 = 0L;
      longArray0[2] = long1;
      longArray0[3] = long0;
      long long2 = 0L;
      longArray0[4] = long2;
      TIntLongHashMap tIntLongHashMap6 = new TIntLongHashMap(tIntLongHashMap5._set, longArray0);
      long long3 = tIntLongHashMap5.adjustOrPutValue(int0, long0, (long) int0);
      assertEquals(1332L, long3);
  }
}
