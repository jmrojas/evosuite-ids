/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TCharShortMap;
import gnu.trove.map.hash.TCharShortHashMap;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharShortHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap();
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap((TCharShortMap) tCharShortHashMap0);
      String string0 = "v-|=)A!^P";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // v-|=)A!^P
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 1774;
      float float0 = 0.0F;
      char[] charArray0 = new char[7];
      char char0 = 'N';
      charArray0[0] = char0;
      char char1 = 'k';
      charArray0[1] = char1;
      char char2 = 'F';
      charArray0[2] = char2;
      char char3 = '.';
      charArray0[3] = char3;
      char char4 = '@';
      charArray0[4] = char4;
      char char5 = '~';
      charArray0[5] = char5;
      char char6 = '&';
      charArray0[6] = char6;
      short[] shortArray0 = new short[9];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)1640;
      shortArray0[1] = short1;
      short short2 = (short) (-1);
      shortArray0[2] = short2;
      short short3 = (short) (-1);
      shortArray0[3] = short3;
      short short4 = (short)251;
      shortArray0[4] = short4;
      short short5 = (short)1;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)144;
      shortArray0[7] = short7;
      short short8 = (short) (-210);
      shortArray0[8] = short8;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(charArray0, shortArray0);
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap((TCharShortMap) tCharShortHashMap0);
      tCharShortHashMap1.compact();
      assertEquals(17, tCharShortHashMap1.capacity());
      
      char char7 = 'X';
      short short9 = (short)3705;
      TCharShortHashMap tCharShortHashMap2 = new TCharShortHashMap(int0, float0, char7, short9);
      tCharShortHashMap2.capacity();
      assertFalse(tCharShortHashMap2.equals(tCharShortHashMap1));
  }

//   @Test
//   public void test2()  throws Throwable  {
//       char[] charArray0 = new char[3];
//       char char0 = '_';
//       charArray0[0] = char0;
//       char char1 = 't';
//       charArray0[1] = char1;
//       char char2 = '[';
//       charArray0[2] = char2;
//       short[] shortArray0 = new short[6];
//       short short0 = (short) (-1711);
//       shortArray0[0] = short0;
//       short short1 = (short)0;
//       shortArray0[1] = short1;
//       short short2 = (short)1;
//       shortArray0[2] = short2;
//       short short3 = (short)66;
//       shortArray0[3] = short3;
//       short short4 = (short)12411;
//       shortArray0[4] = short4;
//       short short5 = (short)1;
//       float float0 = (-156.60292F);
//       char char3 = '/';
//       TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap((int) charArray0[1], float0, char3, short1);
//       tCharShortHashMap0.compact();
//       assertEquals(0, tCharShortHashMap0.getNoEntryValue());
//       assertEquals('/', tCharShortHashMap0.getNoEntryKey());
//       
//       TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap(charArray0, shortArray0);
//       TCharShortHashMap tCharShortHashMap2 = new TCharShortHashMap((TCharShortMap) tCharShortHashMap1);
//       tCharShortHashMap2.ensureCapacity((int) short0);
//       assertEquals("{t=0, _=-1711, [=1}", tCharShortHashMap1.toString());
//       
//       shortArray0[5] = short5;
//       TCharShortHashMap tCharShortHashMap3 = new TCharShortHashMap(charArray0, shortArray0);
//       TCharShortHashMap tCharShortHashMap4 = new TCharShortHashMap((TCharShortMap) tCharShortHashMap3);
//       assertEquals('\u0000', tCharShortHashMap3.getNoEntryKey());
//       assertEquals(0, tCharShortHashMap3.getNoEntryValue());
//       assertEquals("{[=1, _=-1711, t=0}", tCharShortHashMap4.toString());
//       
//       int int0 = 411527;
//       float float1 = 290.62643F;
//       TCharShortHashMap tCharShortHashMap5 = new TCharShortHashMap(int0, float1);
//       tCharShortHashMap5.hashCode();
//       assertEquals('\u0000', tCharShortHashMap5.getNoEntryKey());
//       assertEquals(0, tCharShortHashMap5.getNoEntryValue());
//       assertFalse(tCharShortHashMap5.equals(tCharShortHashMap2));
//   }

  @Test
  public void test3()  throws Throwable  {
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap();
      char char0 = 'J';
      short short0 = (short)0;
      tCharShortHashMap0.putIfAbsent(char0, short0);
      assertEquals(false, tCharShortHashMap0.isEmpty());
      
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap();
      float float0 = (-1470.4111F);
      // Undeclared exception!
      try {
        tCharShortHashMap1.setAutoCompactionFactor(float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1470.4111
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = 'd';
      charArray0[0] = char0;
      char char1 = 'G';
      charArray0[1] = char1;
      char char2 = 'W';
      charArray0[2] = char2;
      char char3 = '+';
      charArray0[3] = char3;
      char char4 = 'k';
      charArray0[4] = char4;
      char char5 = '*';
      charArray0[5] = char5;
      char char6 = '|';
      charArray0[6] = char6;
      char char7 = 'N';
      charArray0[7] = char7;
      char char8 = '#';
      charArray0[8] = char8;
      short[] shortArray0 = new short[5];
      short short0 = (short) (-3399);
      shortArray0[0] = short0;
      short short1 = (short)1278;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)1969;
      shortArray0[3] = short3;
      short short4 = (short) (-590);
      shortArray0[4] = short4;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(charArray0, shortArray0);
      boolean boolean0 = tCharShortHashMap0.adjustValue(char1, short1);
      assertEquals("{+=1969, W=0, k=-590, d=-3399, G=2556}", tCharShortHashMap0.toString());
      assertEquals(true, boolean0);
  }

//   @Test
//   public void test5()  throws Throwable  {
//       int int0 = Integer.MAX_VALUE;
//       TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(int0);
//       TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap();
//       assertEquals(23, tCharShortHashMap1.capacity());
//       assertEquals('\u0000', tCharShortHashMap1.getNoEntryKey());
//       assertEquals(0, tCharShortHashMap1.getNoEntryValue());
//       
//       boolean boolean0 = false;
//       char[] charArray0 = tCharShortHashMap0._set;
//       tCharShortHashMap0.compact();
//       tCharShortHashMap0.reenableAutoCompaction(boolean0);
//       assertEquals(0, tCharShortHashMap0.getNoEntryValue());
//       assertEquals('\u0000', tCharShortHashMap0.getNoEntryKey());
//   }

  @Test
  public void test6()  throws Throwable  {
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap();
      String string0 = "";
      String string1 = "";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string1);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // 
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-1494);
      int int1 = 0;
      float float0 = 0.0F;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(int1, float0);
      TCharShortHashMap tCharShortHashMap1 = null;
      try {
        tCharShortHashMap1 = new TCharShortHashMap((TCharShortMap) tCharShortHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

//   @Test
//   public void test8()  throws Throwable  {
//       TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap();
//       short[] shortArray0 = new short[9];
//       short short0 = (short)146;
//       shortArray0[0] = short0;
//       short short1 = (short) (-545);
//       shortArray0[1] = short1;
//       short short2 = (short) (-865);
//       shortArray0[2] = short2;
//       short short3 = (short)0;
//       shortArray0[3] = short3;
//       short short4 = (short)1386;
//       shortArray0[4] = short4;
//       tCharShortHashMap0.getAutoCompactionFactor();
//       short short5 = (short)541;
//       shortArray0[5] = short5;
//       short short6 = (short) (-1);
//       char[] charArray0 = new char[2];
//       char char0 = ';';
//       charArray0[0] = char0;
//       char char1 = 'F';
//       charArray0[1] = char1;
//       char[] charArray1 = tCharShortHashMap0.keys(charArray0);
//       assertNotNull(charArray1);
//       
//       shortArray0[6] = short6;
//       short short7 = (short)0;
//       char char2 = 'U';
//       boolean boolean0 = tCharShortHashMap0.containsKey(char2);
//       assertEquals(false, boolean0);
//       
//       tCharShortHashMap0.keys();
//       shortArray0[7] = short7;
//       short short8 = (short)0;
//       tCharShortHashMap0.iterator();
//       tCharShortHashMap0.capacity();
//       shortArray0[8] = short8;
//       int int0 = tCharShortHashMap0.capacity();
//       assertEquals(23, int0);
//       
//       tCharShortHashMap0.tempDisableAutoCompaction();
//       charArray0[0] = char2;
//       charArray0[1] = char0;
//       short[] shortArray1 = tCharShortHashMap0.values(shortArray0);
//       assertEquals(0, tCharShortHashMap0.getNoEntryValue());
//       assertEquals('\u0000', tCharShortHashMap0.getNoEntryKey());
//       assertNotNull(shortArray1);
//   }

//   @Test
//   public void test9()  throws Throwable  {
//       int int0 = (-1837);
//       char char0 = 'p';
//       short short0 = (short) (-1825);
//       TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap();
//       char[] charArray0 = new char[3];
//       char char1 = '#';
//       charArray0[0] = char1;
//       charArray0[1] = char0;
//       charArray0[2] = char0;
//       char[] charArray1 = tCharShortHashMap0.keys(charArray0);
//       assertEquals('\u0000', tCharShortHashMap0.getNoEntryKey());
//       assertEquals(23, tCharShortHashMap0.capacity());
//       assertNotNull(charArray1);
//       assertEquals(0, tCharShortHashMap0.getNoEntryValue());
//       
//       TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap(int0, (float) int0, char0, short0);
//       boolean boolean0 = false;
//       tCharShortHashMap1.reenableAutoCompaction(boolean0);
//       assertEquals('p', tCharShortHashMap1.getNoEntryKey());
//       assertEquals(-1825, tCharShortHashMap1.getNoEntryValue());
//   }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 2018;
      char char0 = 'w';
      short short0 = (short)0;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(int0, (float) int0, char0, short0);
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap((TCharShortMap) tCharShortHashMap0);
      tCharShortHashMap1.isEmpty();
      TCharShortHashMap tCharShortHashMap2 = new TCharShortHashMap();
      TCharShortHashMap tCharShortHashMap3 = new TCharShortHashMap((TCharShortMap) tCharShortHashMap2);
      boolean boolean0 = true;
      tCharShortHashMap0.values();
      String string0 = "";
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         //  (No such file or directory)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = 'u';
      charArray0[0] = char0;
      char char1 = '9';
      charArray0[1] = char1;
      char char2 = '$';
      charArray0[2] = char2;
      char char3 = 'Z';
      charArray0[3] = char3;
      char char4 = '+';
      charArray0[4] = char4;
      char char5 = 'L';
      charArray0[5] = char5;
      char char6 = '/';
      charArray0[6] = char6;
      char char7 = '-';
      charArray0[7] = char7;
      char char8 = 'E';
      charArray0[8] = char8;
      short[] shortArray0 = new short[3];
      short short0 = (short) (-545);
      shortArray0[0] = short0;
      short short1 = (short) (-1);
      shortArray0[1] = short1;
      short short2 = (short) (-1);
      shortArray0[2] = short2;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(charArray0, shortArray0);
      tCharShortHashMap0.compact();
      assertEquals("{9=-1, u=-545, $=-1}", tCharShortHashMap0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          char[] charArray0 = new char[2];
          char char0 = 'U';
          charArray0[0] = char0;
          char char1 = '#';
          charArray0[1] = char1;
          short[] shortArray0 = new short[3];
          short short0 = (short)1364;
          shortArray0[0] = short0;
          short short1 = (short)0;
          shortArray0[1] = short1;
          short short2 = (short) (-1855);
          shortArray0[2] = short2;
          TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(charArray0, shortArray0);
          TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap();
          String string0 = "p:OfV`bIPfHYB";
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"p:OfV`bIPfHYB\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // sun.reflect.GeneratedConstructorAccessor18.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

//   @Test
//   public void test13()  throws Throwable  {
//       int int0 = 1281;
//       float float0 = 0.0F;
//       char char0 = 'w';
//       short short0 = (short) (-612);
//       TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(int0, float0, char0, short0);
//       tCharShortHashMap0.isEmpty();
//       assertEquals('w', tCharShortHashMap0.getNoEntryKey());
//       assertEquals(-612, tCharShortHashMap0.getNoEntryValue());
//   }

//   @Test
//   public void test14()  throws Throwable  {
//       int int0 = (-1988);
//       TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(int0);
//       short[] shortArray0 = new short[10];
//       short short0 = (short)0;
//       shortArray0[0] = short0;
//       short short1 = (short)1364;
//       shortArray0[1] = short1;
//       short short2 = (short) (-481);
//       shortArray0[2] = short2;
//       short short3 = (short)385;
//       shortArray0[3] = short3;
//       short short4 = (short) (-1012);
//       shortArray0[4] = short4;
//       short short5 = (short)631;
//       shortArray0[5] = short5;
//       short short6 = (short)0;
//       shortArray0[6] = short6;
//       short short7 = (short)1471;
//       shortArray0[7] = short7;
//       short short8 = (short)28;
//       shortArray0[8] = short8;
//       short short9 = (short) (-280);
//       shortArray0[9] = short9;
//       short[] shortArray1 = tCharShortHashMap0.values(shortArray0);
//       assertEquals('\u0000', tCharShortHashMap0.getNoEntryKey());
//       assertNotNull(shortArray1);
//       assertEquals(0, tCharShortHashMap0.getNoEntryValue());
//       
//       int int1 = 336098327;
//       float float0 = 1438.7706F;
//       TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap(int1, float0);
//       TCharShortHashMap tCharShortHashMap2 = new TCharShortHashMap((TCharShortMap) tCharShortHashMap1);
//       TCharShortHashMap tCharShortHashMap3 = new TCharShortHashMap((TCharShortMap) tCharShortHashMap2);
//       boolean boolean0 = true;
//       tCharShortHashMap3.reenableAutoCompaction(boolean0);
//       assertEquals('\u0000', tCharShortHashMap2.getNoEntryKey());
//       assertEquals(0, tCharShortHashMap2.getNoEntryValue());
//       assertEquals(244703, tCharShortHashMap1.capacity());
//   }

  @Test
  public void test15()  throws Throwable  {
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap();
      short short0 = tCharShortHashMap0.getNoEntryValue();
      assertEquals((short)0, short0);
      
      char char0 = 'p';
      short short1 = (short)0;
      boolean boolean0 = tCharShortHashMap0.adjustValue(char0, short1);
      assertEquals('\u0000', tCharShortHashMap0.getNoEntryKey());
      assertEquals(23, tCharShortHashMap0.capacity());
      assertEquals(false, boolean0);
  }
}
