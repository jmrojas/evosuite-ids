/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TByteCharMap;
import gnu.trove.map.hash.TByteCharHashMap;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteCharHashEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


//   @Test
//   public void test0()  throws Throwable  {
//       int int0 = 0;
//       TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(int0);
//       byte[] byteArray0 = new byte[2];
//       byte byte0 = (byte) (-18);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)111;
//       byteArray0[1] = byte1;
//       tByteCharHashMap0._set = byteArray0;
//       assertEquals(0, tByteCharHashMap0.getNoEntryKey());
//       assertEquals('\u0000', tByteCharHashMap0.getNoEntryValue());
//   }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 145;
      byte byte0 = (byte) (-57);
      char char0 = 'U';
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(int0, (float) int0, byte0, char0);
      boolean boolean0 = true;
      tByteCharHashMap0.reenableAutoCompaction(boolean0);
      byte byte1 = (byte) (-79);
      char char1 = '\'';
      TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap(int0, (float) int0, byte1, char1);
      String string0 = tByteCharHashMap1.toString();
      assertNotNull(string0);
      
      int int1 = (-1);
      TByteCharHashMap tByteCharHashMap2 = new TByteCharHashMap(int1, int1);
      tByteCharHashMap2.iterator();
      byte byte2 = (byte)79;
      char char2 = 'O';
      tByteCharHashMap2.adjustOrPutValue(byte2, char2, char2);
      assertEquals(1, tByteCharHashMap2.size());
      
      TByteCharHashMap tByteCharHashMap3 = new TByteCharHashMap();
      assertEquals('\u0000', tByteCharHashMap3.getNoEntryValue());
  }

//   @Test
//   public void test2()  throws Throwable  {
//       int int0 = 1755;
//       TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(int0, int0);
//       tByteCharHashMap0.getAutoCompactionFactor();
//       int int1 = 0;
//       float float0 = 1.0F;
//       byte byte0 = (byte) (-1);
//       char char0 = 'n';
//       TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap(int0, float0, byte0, char0);
//       byte byte1 = tByteCharHashMap1.getNoEntryKey();
//       assertEquals((byte) (-1), byte1);
//       
//       TByteCharMap tByteCharMap0 = null;
//       tByteCharHashMap0.compact();
//       assertEquals(0, tByteCharHashMap0.getNoEntryKey());
//       assertEquals('\u0000', tByteCharHashMap0.getNoEntryValue());
//       
//       tByteCharHashMap1.getAutoCompactionFactor();
//       byte byte2 = (byte)40;
//       char char1 = tByteCharHashMap1.remove(byte2);
//       assertEquals('n', char1);
//       
//       tByteCharHashMap1.keys();
//       // Undeclared exception!
//       try {
//         tByteCharHashMap1.putAll(tByteCharMap0);
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

//   @Test
//   public void test3()  throws Throwable  {
//       int int0 = (-1);
//       byte byte0 = (byte)31;
//       char char0 = ';';
//       TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(int0, (float) int0, byte0, char0);
//       tByteCharHashMap0.contains(byte0);
//       byte byte1 = (byte) (-55);
//       char char1 = 'x';
//       int int1 = (-108);
//       TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap(int1, int1);
//       boolean boolean0 = false;
//       tByteCharHashMap1.reenableAutoCompaction(boolean0);
//       byte byte2 = (byte)0;
//       boolean boolean1 = tByteCharHashMap1.increment(byte2);
//       assertEquals(false, boolean1);
//       assertEquals('\u0000', tByteCharHashMap1.getNoEntryValue());
//       assertEquals(0, tByteCharHashMap1.getNoEntryKey());
//       
//       TByteCharHashMap tByteCharHashMap2 = new TByteCharHashMap(int0, (float) int0, byte1, char1);
//       byte byte3 = (byte)15;
//       boolean boolean2 = tByteCharHashMap2.containsKey(byte3);
//       assertEquals(-55, tByteCharHashMap2.getNoEntryKey());
//       assertEquals(false, boolean2);
//       assertEquals('x', tByteCharHashMap2.getNoEntryValue());
//   }

  @Test
  public void test4()  throws Throwable  {
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap();
      byte byte0 = (byte)29;
      tByteCharHashMap0.get(byte0);
      int int0 = (-949);
      TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap(int0);
      tByteCharHashMap1.keySet();
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -949
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 548348231;
      float float0 = (-1.0F);
      byte byte0 = (byte) (-47);
      byte[] byteArray0 = new byte[7];
      byte byte1 = (byte)31;
      byteArray0[0] = byte1;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      byteArray0[6] = byte0;
      char[] charArray0 = new char[2];
      char char0 = 'J';
      charArray0[0] = char0;
      char char1 = '#';
      charArray0[1] = char1;
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
      OutputStream outputStream0 = null;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(outputStream0);
      int int1 = 983;
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream((OutputStream) bufferedOutputStream0, int1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) bufferedOutputStream1);
      tByteCharHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      char char2 = '';
      TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap(int0, float0, byte0, char2);
      tByteCharHashMap1.adjustOrPutValue(byte0, char2, char2);
      tByteCharHashMap1.keySet();
      int int2 = 0;
      tByteCharHashMap1.iterator();
      tByteCharHashMap1.ensureCapacity(int2);
      TByteCharHashMap tByteCharHashMap2 = new TByteCharHashMap();
      tByteCharHashMap2.trimToSize();
      TByteCharHashMap tByteCharHashMap3 = null;
      try {
        tByteCharHashMap3 = new TByteCharHashMap(int0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

//   @Test
//   public void test6()  throws Throwable  {
//       int int0 = 26;
//       TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(int0);
//       tByteCharHashMap0.size();
//       assertEquals(0, tByteCharHashMap0.getNoEntryKey());
//       assertEquals('\u0000', tByteCharHashMap0.getNoEntryValue());
//       assertEquals(67, tByteCharHashMap0.capacity());
//   }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 1557;
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(int0);
      byte byte0 = (byte)0;
      tByteCharHashMap0.remove(byte0);
      int int1 = (-1089);
      TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap(int1);
      tByteCharHashMap1.keySet();
      tByteCharHashMap1.valueCollection();
      int int2 = 0;
      int int3 = 564;
      TByteCharHashMap tByteCharHashMap2 = new TByteCharHashMap(int3);
      tByteCharHashMap2.tempDisableAutoCompaction();
      byte byte1 = (byte) (-1);
      char char0 = 'o';
      tByteCharHashMap0.getNoEntryKey();
      tByteCharHashMap2.put(byte1, char0);
      assertEquals(false, tByteCharHashMap2.isEmpty());
      
      byte byte2 = (byte)0;
      tByteCharHashMap1.containsKey(byte2);
      tByteCharHashMap1.isEmpty();
      TByteCharHashMap tByteCharHashMap3 = new TByteCharHashMap(int2, int2);
      tByteCharHashMap3.compact();
      tByteCharHashMap0.trimToSize();
      assertTrue(tByteCharHashMap0.equals(tByteCharHashMap1));
  }

//   @Test
//   public void test8()  throws Throwable  {
//       int int0 = 0;
//       byte byte0 = (byte) (-55);
//       char char0 = 'U';
//       TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(int0, (float) int0, byte0, char0);
//       boolean boolean0 = false;
//       byte[] byteArray0 = new byte[4];
//       byteArray0[0] = byte0;
//       byteArray0[1] = byte0;
//       byteArray0[2] = byte0;
//       byteArray0[3] = byte0;
//       tByteCharHashMap0._set = byteArray0;
//       tByteCharHashMap0.tempDisableAutoCompaction();
//       tByteCharHashMap0.reenableAutoCompaction(boolean0);
//       tByteCharHashMap0.valueCollection();
//       TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap(int0, int0);
//       int int1 = 0;
//       TByteCharHashMap tByteCharHashMap2 = new TByteCharHashMap();
//       tByteCharHashMap0.size();
//       assertEquals('U', tByteCharHashMap0.getNoEntryValue());
//       assertEquals(-55, tByteCharHashMap0.getNoEntryKey());
//       
//       byte[] byteArray1 = tByteCharHashMap2._set;
//       byte byte1 = (byte)0;
//       boolean boolean1 = tByteCharHashMap2.increment(byte1);
//       assertEquals(false, boolean1);
//       
//       float float0 = (-1.0F);
//       TByteCharHashMap tByteCharHashMap3 = new TByteCharHashMap(int1, float0);
//       tByteCharHashMap2.containsValue(char0);
//       assertEquals(23, tByteCharHashMap2.capacity());
//       assertEquals('\u0000', tByteCharHashMap2.getNoEntryValue());
//       assertEquals(0, tByteCharHashMap2.getNoEntryKey());
//       
//       byte byte2 = (byte)0;
//       tByteCharHashMap3.remove(byte2);
//       byte byte3 = (byte)77;
//       char char1 = tByteCharHashMap3.remove(byte3);
//       assertEquals(0, tByteCharHashMap3.getNoEntryKey());
//       assertEquals('\u0000', char1);
//   }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-294);
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(int0);
      byte byte0 = (byte)75;
      tByteCharHashMap0.contains(byte0);
      Locale locale0 = Locale.UK;
      char char0 = '>';
      // Undeclared exception!
      try {
        locale0.getExtension(char0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed extension key: >
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte) (-111);
      byteArray0[0] = byte0;
      byte byte1 = (byte)60;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-127);
      byteArray0[2] = byte2;
      byte byte3 = (byte)46;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-81);
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-127);
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      byteArray0[8] = byte8;
      byte byte9 = (byte)98;
      byteArray0[9] = byte9;
      char[] charArray0 = new char[3];
      char char0 = 'V';
      charArray0[0] = char0;
      char char1 = '%';
      charArray0[1] = char1;
      char char2 = '!';
      charArray0[2] = char2;
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
      TByteCharMap tByteCharMap0 = null;
      TByteCharHashMap tByteCharHashMap1 = null;
      try {
        tByteCharHashMap1 = new TByteCharHashMap(tByteCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test11()  throws Throwable  {
//       int int0 = (-1762);
//       int int1 = 0;
//       float float0 = 0.0F;
//       byte byte0 = (byte)107;
//       char char0 = '\"';
//       TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(int1, float0, byte0, char0);
//       tByteCharHashMap0.capacity();
//       byte byte1 = (byte) (-1);
//       TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap();
//       tByteCharHashMap0.putAll((TByteCharMap) tByteCharHashMap1);
//       char[] charArray0 = new char[5];
//       charArray0[0] = char0;
//       charArray0[1] = char0;
//       charArray0[2] = char0;
//       charArray0[3] = char0;
//       tByteCharHashMap0.compact();
//       tByteCharHashMap1.getAutoCompactionFactor();
//       assertEquals('\u0000', tByteCharHashMap1.getNoEntryValue());
//       assertEquals(23, tByteCharHashMap1.capacity());
//       assertEquals(0, tByteCharHashMap1.getNoEntryKey());
//       
//       charArray0[4] = char0;
//       tByteCharHashMap0.values(charArray0);
//       char char1 = tByteCharHashMap0.remove(byte1);
//       assertEquals('\"', char1);
//       
//       byte byte2 = (byte) (-70);
//       TByteCharHashMap tByteCharHashMap2 = new TByteCharHashMap((int) byte2);
//       assertEquals('\u0000', tByteCharHashMap2.getNoEntryValue());
//       assertEquals(0, tByteCharHashMap2.getNoEntryKey());
//       
//       char char2 = 'G';
//       TByteCharHashMap tByteCharHashMap3 = new TByteCharHashMap(int0, (float) int0, byte2, char2);
//       tByteCharHashMap3.tempDisableAutoCompaction();
//       assertEquals(-70, tByteCharHashMap3.getNoEntryKey());
//       assertTrue(tByteCharHashMap3.equals(tByteCharHashMap0));
//   }

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-115);
      byteArray0[0] = byte0;
      char[] charArray0 = new char[6];
      char char0 = 'u';
      charArray0[0] = char0;
      char char1 = 'c';
      charArray0[1] = char1;
      char char2 = '`';
      charArray0[2] = char2;
      char char3 = 'q';
      charArray0[3] = char3;
      char char4 = 'C';
      charArray0[4] = char4;
      char char5 = 'i';
      charArray0[5] = char5;
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
      assertEquals(17, tByteCharHashMap0.capacity());
      
      byte[] byteArray1 = new byte[5];
      byte byte1 = (byte)1;
      byteArray1[0] = byte1;
      byteArray1[1] = byte0;
      byteArray1[2] = byte0;
      byteArray1[3] = byte0;
      byteArray1[4] = byte0;
      tByteCharHashMap0._states = byteArray1;
      boolean boolean0 = tByteCharHashMap0.isEmpty();
      assertEquals(false, boolean0);
  }

//   @Test
//   public void test13()  throws Throwable  {
//       int int0 = (-240);
//       TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap();
//       byte byte0 = (byte)68;
//       tByteCharHashMap0.contains(byte0);
//       TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap(int0);
//       byte byte1 = (byte)78;
//       tByteCharHashMap1.increment(byte1);
//       float float0 = 1.0F;
//       TByteCharHashMap tByteCharHashMap2 = new TByteCharHashMap(int0, float0);
//       tByteCharHashMap2.compact();
//       byte byte2 = (byte) (-39);
//       char char0 = '1';
//       tByteCharHashMap1.adjustOrPutValue(byte2, char0, char0);
//       assertEquals(false, tByteCharHashMap1.isEmpty());
//       
//       tByteCharHashMap2.getNoEntryKey();
//       tByteCharHashMap2.trimToSize();
//       int int1 = (-883);
//       TByteCharHashMap tByteCharHashMap3 = new TByteCharHashMap(int1, int1);
//       assertEquals(0, tByteCharHashMap3.getNoEntryKey());
//   }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)99;
      byteArray0[0] = byte0;
      char[] charArray0 = new char[3];
      char char0 = 'k';
      charArray0[0] = char0;
      char char1 = 'S';
      charArray0[1] = char1;
      char char2 = 'L';
      charArray0[2] = char2;
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
      assertEquals(7, tByteCharHashMap0.capacity());
      
      tByteCharHashMap0.trimToSize();
      TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap(int0, int0);
      tByteCharHashMap1.compact();
      byte byte1 = (byte)0;
      char char3 = 'l';
      int int1 = (-142);
      TByteCharHashMap tByteCharHashMap2 = new TByteCharHashMap(int1);
      tByteCharHashMap2.getAutoCompactionFactor();
      tByteCharHashMap2.getAutoCompactionFactor();
      TByteCharHashMap tByteCharHashMap3 = new TByteCharHashMap(int0, (float) int0, byte1, char3);
      byte[] byteArray1 = tByteCharHashMap3._states;
      assertEquals('l', tByteCharHashMap3.getNoEntryValue());
  }

//   @Test
//   public void test15()  throws Throwable  {
//       TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap();
//       char[] charArray0 = new char[3];
//       char char0 = '/';
//       tByteCharHashMap0.containsValue(char0);
//       char char1 = '%';
//       charArray0[0] = char1;
//       TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap((TByteCharMap) tByteCharHashMap0);
//       char char2 = 'A';
//       charArray0[1] = char2;
//       char char3 = 'P';
//       charArray0[2] = char3;
//       tByteCharHashMap0.values(charArray0);
//       byte byte0 = (byte)73;
//       char char4 = tByteCharHashMap1.remove(byte0);
//       assertEquals(23, tByteCharHashMap0.capacity());
//       assertEquals(0, tByteCharHashMap0.getNoEntryKey());
//       assertEquals(0, tByteCharHashMap1.size());
//       assertEquals('\u0000', char4);
//   }

  @Test
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-27);
      byteArray0[5] = byte5;
      byte byte6 = (byte)123;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-72);
      byteArray0[7] = byte7;
      char[] charArray0 = new char[6];
      char char0 = 'Q';
      charArray0[0] = char0;
      char char1 = ']';
      charArray0[1] = char1;
      char char2 = '';
      charArray0[2] = char2;
      char char3 = 'V';
      charArray0[3] = char3;
      char char4 = 'U';
      charArray0[4] = char4;
      char char5 = 'r';
      charArray0[5] = char5;
      TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
      TByteCharMap tByteCharMap0 = null;
      // Undeclared exception!
      try {
        tByteCharHashMap0.putAll(tByteCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test17()  throws Throwable  {
//       TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap();
//       byte byte0 = (byte) (-77);
//       boolean boolean0 = tByteCharHashMap0.increment(byte0);
//       assertEquals(false, boolean0);
//       
//       char[] charArray0 = tByteCharHashMap0.values();
//       assertNotNull(charArray0);
//       
//       char char0 = tByteCharHashMap0.getNoEntryValue();
//       assertEquals('\u0000', char0);
//       
//       int int0 = 1666;
//       byte byte1 = (byte) (-37);
//       TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap(int0, int0);
//       tByteCharHashMap1.getAutoCompactionFactor();
//       char char1 = 'F';
//       byte byte2 = tByteCharHashMap0.getNoEntryKey();
//       assertEquals(23, tByteCharHashMap0.capacity());
//       
//       byte[] byteArray0 = tByteCharHashMap1.keys();
//       byte byte3 = tByteCharHashMap1.getNoEntryKey();
//       assertTrue(byte3 == byte2);
//       
//       TByteCharHashMap tByteCharHashMap2 = new TByteCharHashMap(int0, (float) int0, byte1, char1);
//       tByteCharHashMap1.keys(byteArray0);
//       assertEquals('\u0000', tByteCharHashMap1.getNoEntryValue());
//       
//       tByteCharHashMap2.tempDisableAutoCompaction();
//       tByteCharHashMap2.containsValue(char1);
//       assertEquals('F', tByteCharHashMap2.getNoEntryValue());
//       assertEquals(-37, tByteCharHashMap2.getNoEntryKey());
//   }

//   @Test
//   public void test18()  throws Throwable  {
//       byte[] byteArray0 = new byte[3];
//       byte byte0 = (byte)0;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)1;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte) (-42);
//       byteArray0[2] = byte2;
//       char[] charArray0 = new char[10];
//       char char0 = 'I';
//       charArray0[0] = char0;
//       char char1 = '[';
//       charArray0[1] = char1;
//       char char2 = 'l';
//       charArray0[2] = char2;
//       char char3 = '{';
//       charArray0[3] = char3;
//       char char4 = 'a';
//       charArray0[4] = char4;
//       char char5 = 'g';
//       charArray0[5] = char5;
//       char char6 = 'u';
//       charArray0[6] = char6;
//       char char7 = '_';
//       charArray0[7] = char7;
//       char char8 = 'P';
//       charArray0[8] = char8;
//       char char9 = 'h';
//       charArray0[9] = char9;
//       TByteCharHashMap tByteCharHashMap0 = new TByteCharHashMap(byteArray0, charArray0);
//       tByteCharHashMap0.keySet();
//       assertEquals('\u0000', tByteCharHashMap0.getNoEntryValue());
//       assertEquals("{-42=l, 1=[, 0=I}", tByteCharHashMap0.toString());
//       assertEquals(23, tByteCharHashMap0.capacity());
//       assertEquals(0, tByteCharHashMap0.getNoEntryKey());
//       
//       int int0 = 0;
//       byte byte3 = (byte) (-85);
//       char char10 = 'Q';
//       TByteCharHashMap tByteCharHashMap1 = new TByteCharHashMap(int0, (float) int0, byte3, char10);
//       tByteCharHashMap1.capacity();
//       assertEquals(-85, tByteCharHashMap1.getNoEntryKey());
//       assertEquals('Q', tByteCharHashMap1.getNoEntryValue());
//   }
}
