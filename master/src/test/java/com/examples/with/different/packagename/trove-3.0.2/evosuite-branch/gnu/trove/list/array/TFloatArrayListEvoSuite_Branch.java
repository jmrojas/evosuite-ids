/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.list.array;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TFloatCollection;
import gnu.trove.function.TFloatFunction;
import gnu.trove.impl.sync.TSynchronizedFloatCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableFloatCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessFloatList;
import gnu.trove.list.TFloatList;
import gnu.trove.list.array.TFloatArrayList;
import gnu.trove.list.linked.TFloatLinkedList;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.set.hash.TFloatHashSet;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Random;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatArrayListEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 6 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.removeAt(I)F: root-Branch
   * 2 gnu.trove.list.array.TFloatArrayList.<init>(Lgnu/trove/TFloatCollection;)V: root-Branch
   * 3 gnu.trove.list.array.TFloatArrayList.get(I)F: I5 Branch 9 IF_ICMPLT L280 - false
   * 4 gnu.trove.list.array.TFloatArrayList.addAll(Lgnu/trove/TFloatCollection;)Z: I13 Branch 31 IFEQ L495 - true
   * 5 gnu.trove.list.array.TFloatArrayList.<init>(IF)V: root-Branch
   * 6 gnu.trove.list.array.TFloatArrayList.<init>(I)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList(10.0F);
      TUnmodifiableFloatCollection tUnmodifiableFloatCollection0 = new TUnmodifiableFloatCollection((TFloatCollection) tFloatLinkedList0);
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList((TFloatCollection) tUnmodifiableFloatCollection0);
      // Undeclared exception!
      try {
        tFloatArrayList0.removeAt(1728);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1728
         //
      }
  }

  //Test case number: 1
  /*
   * 5 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.setQuick(IF)V: root-Branch
   * 2 gnu.trove.list.array.TFloatArrayList.add([F)V: root-Branch
   * 3 gnu.trove.list.array.TFloatArrayList.add([FII)V: root-Branch
   * 4 gnu.trove.list.array.TFloatArrayList.<init>([F)V: root-Branch
   * 5 gnu.trove.list.array.TFloatArrayList.ensureCapacity(I)V: I6 Branch 4 IF_ICMPLE L184 - true
   */

//   @Test
//   public void test1()  throws Throwable  {
//       float[] floatArray0 = new float[2];
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
//       tFloatArrayList0.setQuick(1, 0.0F);
//       assertEquals(2, tFloatArrayList0.size());
//       assertEquals("{0.0, 0.0}", tFloatArrayList0.toString());
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 2
  /*
   * 11 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.swap(II)V: root-Branch
   * 2 gnu.trove.list.array.TFloatArrayList.reverse()V: root-Branch
   * 3 gnu.trove.list.array.TFloatArrayList.reverse(II)V: I4 Branch 51 IF_ICMPNE L626 - true
   * 4 gnu.trove.list.array.TFloatArrayList.reverse(II)V: I12 Branch 52 IF_ICMPLE L629 - true
   * 5 gnu.trove.list.array.TFloatArrayList.reverse(II)V: I32 Branch 53 IF_ICMPGE L632 - true
   * 6 gnu.trove.list.array.TFloatArrayList.reverse(II)V: I32 Branch 53 IF_ICMPGE L632 - false
   * 7 gnu.trove.list.array.TFloatArrayList$1.<init>([FFZ)V: root-Branch
   * 8 gnu.trove.list.array.TFloatArrayList.wrap([FF)Lgnu/trove/list/array/TFloatArrayList;: root-Branch
   * 9 gnu.trove.list.array.TFloatArrayList.wrap([F)Lgnu/trove/list/array/TFloatArrayList;: root-Branch
   * 10 gnu.trove.list.array.TFloatArrayList.<init>([FFZ)V: I7 Branch 2 IFNE L123 - true
   * 11 gnu.trove.list.array.TFloatArrayList.<init>([FFZ)V: I18 Branch 3 IFNONNULL L126 - true
   */

//   @Test
//   public void test2()  throws Throwable  {
//       float[] floatArray0 = new float[4];
//       TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0);
//       assertNotNull(tFloatArrayList0);
//       
//       tFloatArrayList0.reverse();
//       assertEquals("{0.0, 0.0, 0.0, 0.0}", tFloatArrayList0.toString());
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.sort(II)V: root-Branch
   */

//   @Test
//   public void test3()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(930);
//       tFloatArrayList0.sort(930, 930);
//       assertEquals(true, tFloatArrayList0.isEmpty());
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.getQuick(I)F: root-Branch
   */

//   @Test
//   public void test4()  throws Throwable  {
//       float[] floatArray0 = new float[2];
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
//       tFloatArrayList0.getQuick(1);
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//       assertEquals(2, tFloatArrayList0.size());
//       assertEquals(false, tFloatArrayList0.isEmpty());
//   }

  //Test case number: 5
  /*
   * 13 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.lastIndexOf(F)I: root-Branch
   * 2 gnu.trove.list.array.TFloatArrayList.size()I: root-Branch
   * 3 gnu.trove.list.array.TFloatArrayList.iterator()Lgnu/trove/iterator/TFloatIterator;: root-Branch
   * 4 gnu.trove.list.array.TFloatArrayList$TFloatArrayIterator.next()F: root-Branch
   * 5 gnu.trove.list.array.TFloatArrayList$TFloatArrayIterator.<init>(Lgnu/trove/list/array/TFloatArrayList;I)V: root-Branch
   * 6 gnu.trove.list.array.TFloatArrayList.get(I)F: I5 Branch 9 IF_ICMPLT L280 - true
   * 7 gnu.trove.list.array.TFloatArrayList.containsAll(Lgnu/trove/TFloatCollection;)Z: I4 Branch 24 IF_ACMPNE L453 - true
   * 8 gnu.trove.list.array.TFloatArrayList.containsAll(Lgnu/trove/TFloatCollection;)Z: I18 Branch 25 IFEQ L457 - false
   * 9 gnu.trove.list.array.TFloatArrayList.containsAll(Lgnu/trove/TFloatCollection;)Z: I29 Branch 26 IFNE L459 - false
   * 10 gnu.trove.list.array.TFloatArrayList.lastIndexOf(IF)I: I7 Branch 84 IFLE L887 - true
   * 11 gnu.trove.list.array.TFloatArrayList.contains(F)Z: I5 Branch 86 IFLT L898 - true
   * 12 gnu.trove.list.array.TFloatArrayList$TFloatArrayIterator.hasNext()Z: I7 Branch 102 IF_ICMPGE L1005 - false
   * 13 gnu.trove.list.array.TFloatArrayList.<init>()V: root-Branch
   */

//   @Test
//   public void test5()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
//       float[] floatArray0 = new float[4];
//       TFloatArrayList tFloatArrayList1 = TFloatArrayList.wrap(floatArray0);
//       assertNotNull(tFloatArrayList1);
//       
//       boolean boolean0 = tFloatArrayList0.containsAll((TFloatCollection) tFloatArrayList1);
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//       assertEquals(false, boolean0);
//       assertEquals(0.0F, tFloatArrayList1.getNoEntryValue(), 0.01F);
//       assertEquals(4, tFloatArrayList1.size());
//   }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.reset()V: root-Branch
   */

//   @Test
//   public void test6()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(1585, 1585);
//       tFloatArrayList0.reset();
//       assertEquals(1585.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//       assertEquals("{}", tFloatArrayList0.toString());
//   }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.sort()V: root-Branch
   */

//   @Test
//   public void test7()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
//       tFloatArrayList0.sort();
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//       assertEquals(true, tFloatArrayList0.isEmpty());
//   }

  //Test case number: 8
  /*
   * 4 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.indexOf(F)I: root-Branch
   * 2 gnu.trove.list.array.TFloatArrayList.indexOf(IF)I: I8 Branch 82 IF_ICMPGE L870 - true
   * 3 gnu.trove.list.array.TFloatArrayList.indexOf(IF)I: I8 Branch 82 IF_ICMPGE L870 - false
   * 4 gnu.trove.list.array.TFloatArrayList.indexOf(IF)I: I17 Branch 83 IFNE L871 - true
   */

//   @Test
//   public void test8()  throws Throwable  {
//       float[] floatArray0 = new float[5];
//       TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, 331.8344F);
//       assertNotNull(tFloatArrayList0);
//       
//       int int0 = tFloatArrayList0.indexOf(1431.3674F);
//       assertEquals(331.8344F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//       assertEquals((-1), int0);
//   }

  //Test case number: 9
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.clear()V: root-Branch
   * 2 gnu.trove.list.array.TFloatArrayList.clear(I)V: root-Branch
   * 3 gnu.trove.list.array.TFloatArrayList.removeAll(Lgnu/trove/TFloatCollection;)Z: I4 Branch 45 IF_ACMPNE L582 - false
   */

//   @Test
//   public void test9()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
//       boolean boolean0 = tFloatArrayList0.removeAll((TFloatCollection) tFloatArrayList0);
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//       assertEquals(true, boolean0);
//       assertEquals("{}", tFloatArrayList0.toString());
//   }

  //Test case number: 10
  /*
   * 5 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.toArray(II)[F: root-Branch
   * 2 gnu.trove.list.array.TFloatArrayList.toArray()[F: root-Branch
   * 3 gnu.trove.list.array.TFloatArrayList.toArray([FII)[F: I3 Branch 60 IFNE L709 - true
   * 4 gnu.trove.list.array.TFloatArrayList.toArray([FII)[F: I11 Branch 61 IFLT L712 - false
   * 5 gnu.trove.list.array.TFloatArrayList.toArray([FII)[F: I15 Branch 62 IF_ICMPLT L712 - true
   */

//   @Test
//   public void test10()  throws Throwable  {
//       float[] floatArray0 = new float[2];
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
//       float[] floatArray1 = tFloatArrayList0.toArray();
//       assertEquals(2, tFloatArrayList0.size());
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//       assertNotNull(floatArray1);
//       assertEquals(false, tFloatArrayList0.isEmpty());
//   }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.getNoEntryValue()F: root-Branch
   */

//   @Test
//   public void test11()  throws Throwable  {
//       float[] floatArray0 = new float[2];
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
//       float float0 = tFloatArrayList0.getNoEntryValue();
//       assertEquals(2, tFloatArrayList0.size());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 12
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.set(I[F)V: root-Branch
   * 2 gnu.trove.list.array.TFloatArrayList.set(I[FII)V: I3 Branch 12 IFLT L326 - false
   * 3 gnu.trove.list.array.TFloatArrayList.set(I[FII)V: I9 Branch 13 IF_ICMPLE L326 - false
   */

  @Test
  public void test12()  throws Throwable  {
      float[] floatArray0 = new float[1];
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, 0.0F);
      assertNotNull(tFloatArrayList0);
      
      float[] floatArray1 = new float[5];
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(floatArray1);
      // Undeclared exception!
      try {
        tFloatArrayList0.set(0, tFloatHashSet0._set);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
      }
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.resetQuick()V: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      float[] floatArray0 = new float[2];
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
      assertEquals(2, tFloatArrayList0.size());
      
      tFloatArrayList0.resetQuick();
      assertEquals(0, tFloatArrayList0.size());
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.fill(F)V: root-Branch
   */

//   @Test
//   public void test14()  throws Throwable  {
//       float[] floatArray0 = new float[5];
//       TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, 331.8344F);
//       assertNotNull(tFloatArrayList0);
//       
//       tFloatArrayList0.fill((-157.14377F));
//       assertEquals("{-157.14377, -157.14377, -157.14377, -157.14377, -157.14377}", tFloatArrayList0.toString());
//       assertEquals((-785.7189F), tFloatArrayList0.sum(), 0.01F);
//   }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList$1.ensureCapacity(I)V: I6 Branch 1 IF_ICMPLE L164 - true
   */

//   @Test
//   public void test15()  throws Throwable  {
//       float[] floatArray0 = new float[4];
//       TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0);
//       assertNotNull(tFloatArrayList0);
//       
//       tFloatArrayList0.ensureCapacity((-1946));
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 16
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList$1.ensureCapacity(I)V: I6 Branch 1 IF_ICMPLE L164 - false
   * 2 gnu.trove.list.array.TFloatArrayList.insert(IF)V: I5 Branch 7 IF_ICMPNE L243 - true
   */

  @Test
  public void test16()  throws Throwable  {
      float[] floatArray0 = new float[8];
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, 0.0F);
      assertNotNull(tFloatArrayList0);
      
      // Undeclared exception!
      try {
        tFloatArrayList0.insert(547, 0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not grow ArrayList wrapped external array
         //
      }
  }

  //Test case number: 17
  /*
   * 7 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.ensureCapacity(I)V: I6 Branch 4 IF_ICMPLE L184 - false
   * 2 gnu.trove.list.array.TFloatArrayList.trimToSize()V: I7 Branch 6 IF_ICMPLE L209 - false
   * 3 gnu.trove.list.array.TFloatArrayList.toArray([FII)[F: I3 Branch 60 IFNE L709 - false
   * 4 gnu.trove.list.array.TFloatArrayList.addAll(Ljava/util/Collection;)Z: I12 Branch 29 IFEQ L481 - true
   * 5 gnu.trove.list.array.TFloatArrayList.addAll(Ljava/util/Collection;)Z: I12 Branch 29 IFEQ L481 - false
   * 6 gnu.trove.list.array.TFloatArrayList.addAll(Ljava/util/Collection;)Z: I27 Branch 30 IFEQ L483 - false
   * 7 gnu.trove.list.array.TFloatArrayList.add(F)Z: root-Branch
   */

//   @Test
//   public void test17()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(711);
//       tFloatArrayList0.trimToSize();
//       LinkedList<Float> linkedList0 = new LinkedList<Float>();
//       Float float0 = new Float((-1764.4929F));
//       linkedList0.add(float0);
//       boolean boolean0 = tFloatArrayList0.addAll((Collection<? extends Float>) linkedList0);
//       assertEquals((-1764.4929F), tFloatArrayList0.sum(), 0.01F);
//       assertEquals(true, boolean0);
//   }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.isEmpty()Z: I4 Branch 5 IFNE L201 - true
   */

//   @Test
//   public void test18()  throws Throwable  {
//       float[] floatArray0 = new float[4];
//       TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0);
//       assertNotNull(tFloatArrayList0);
//       
//       boolean boolean0 = tFloatArrayList0.isEmpty();
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//       assertEquals(false, boolean0);
//   }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.isEmpty()Z: I4 Branch 5 IFNE L201 - false
   */

//   @Test
//   public void test19()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
//       boolean boolean0 = tFloatArrayList0.isEmpty();
//       assertEquals(true, boolean0);
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 20
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.trimToSize()V: I7 Branch 6 IF_ICMPLE L209 - true
   * 2 gnu.trove.list.array.TFloatArrayList.trimToSize()V: I7 Branch 6 IF_ICMPLE L209 - false
   */

//   @Test
//   public void test20()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
//       tFloatArrayList0.trimToSize();
//       tFloatArrayList0.trimToSize();
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//       assertEquals(0, tFloatArrayList0.size());
//   }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.insert(IF)V: I5 Branch 7 IF_ICMPNE L243 - false
   */

//   @Test
//   public void test21()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(930);
//       tFloatArrayList0.insert(0, 10.0F);
//       assertEquals("{10.0}", tFloatArrayList0.toString());
//       assertEquals(10.0F, tFloatArrayList0.sum(), 0.01F);
//   }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.insert(I[FII)V: I5 Branch 8 IF_ICMPNE L264 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(930);
      float[] floatArray0 = new float[10];
      // Undeclared exception!
      try {
        tFloatArrayList0.insert(930, floatArray0, (-1), 1522);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.set(IF)F: I5 Branch 10 IF_ICMPLT L297 - true
   */

  @Test
  public void test23()  throws Throwable  {
      float[] floatArray0 = new float[5];
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
      // Undeclared exception!
      try {
        tFloatArrayList0.set((-1), 103);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.set(IF)F: I5 Branch 10 IF_ICMPLT L297 - false
   */

  @Test
  public void test24()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
      // Undeclared exception!
      try {
        tFloatArrayList0.set(0, (-1.0F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
      }
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.replace(IF)F: I5 Branch 11 IF_ICMPLT L309 - true
   */

  @Test
  public void test25()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
      // Undeclared exception!
      try {
        tFloatArrayList0.replace((-1871), (-1871));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1871
         //
      }
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.replace(IF)F: I5 Branch 11 IF_ICMPLT L309 - false
   */

  @Test
  public void test26()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(1055);
      // Undeclared exception!
      try {
        tFloatArrayList0.replace(1055, 1055);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1055
         //
      }
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.set(I[FII)V: I3 Branch 12 IFLT L326 - true
   */

  @Test
  public void test27()  throws Throwable  {
      float[] floatArray0 = new float[9];
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, 300.60587F);
      assertNotNull(tFloatArrayList0);
      
      // Undeclared exception!
      try {
        tFloatArrayList0.set((-1784), (float[]) null, (-1784), (-1784));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -1784
         //
      }
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.set(I[FII)V: I9 Branch 13 IF_ICMPLE L326 - true
   * 2 gnu.trove.list.array.TFloatArrayList.set(I[FII)V: I3 Branch 12 IFLT L326 - false
   */

  @Test
  public void test28()  throws Throwable  {
      float[] floatArray0 = new float[9];
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0);
      assertNotNull(tFloatArrayList0);
      
      // Undeclared exception!
      try {
        tFloatArrayList0.set(0, floatArray0, (-1572), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 29
  /*
   * 16 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.remove(F)Z: I8 Branch 14 IF_ICMPGE L383 - true
   * 2 gnu.trove.list.array.TFloatArrayList.remove(F)Z: I8 Branch 14 IF_ICMPGE L383 - false
   * 3 gnu.trove.list.array.TFloatArrayList.remove(F)Z: I17 Branch 15 IFNE L384 - false
   * 4 gnu.trove.list.array.TFloatArrayList.remove(II)V: I3 Branch 16 IFNE L403 - true
   * 5 gnu.trove.list.array.TFloatArrayList.remove(II)V: I8 Branch 17 IFLT L404 - false
   * 6 gnu.trove.list.array.TFloatArrayList.remove(II)V: I12 Branch 18 IF_ICMPLT L404 - true
   * 7 gnu.trove.list.array.TFloatArrayList.remove(II)V: I23 Branch 19 IFNE L408 - false
   * 8 gnu.trove.list.array.TFloatArrayList.removeAll(Lgnu/trove/TFloatCollection;)Z: I4 Branch 45 IF_ACMPNE L582 - true
   * 9 gnu.trove.list.array.TFloatArrayList.removeAll(Lgnu/trove/TFloatCollection;)Z: I26 Branch 46 IFEQ L588 - true
   * 10 gnu.trove.list.array.TFloatArrayList.removeAll(Lgnu/trove/TFloatCollection;)Z: I26 Branch 46 IFEQ L588 - false
   * 11 gnu.trove.list.array.TFloatArrayList.removeAll(Lgnu/trove/TFloatCollection;)Z: I37 Branch 47 IFEQ L590 - false
   * 12 gnu.trove.list.array.TFloatArrayList.removeAll([F)Z: I12 Branch 48 IFLE L601 - true
   * 13 gnu.trove.list.array.TFloatArrayList.removeAll([F)Z: I12 Branch 48 IFLE L601 - false
   * 14 gnu.trove.list.array.TFloatArrayList.removeAll([F)Z: I20 Branch 49 IFEQ L602 - true
   * 15 gnu.trove.list.array.TFloatArrayList.removeAll([F)Z: I20 Branch 49 IFEQ L602 - false
   * 16 gnu.trove.list.array.TFloatArrayList$TFloatArrayIterator.hasNext()Z: I7 Branch 102 IF_ICMPGE L1005 - true
   */

  @Test
  public void test29()  throws Throwable  {
      float[] floatArray0 = new float[17];
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, 6.6360896E8F);
      assertNotNull(tFloatArrayList0);
      
      TSynchronizedFloatCollection tSynchronizedFloatCollection0 = new TSynchronizedFloatCollection((TFloatCollection) tFloatArrayList0, (Object) "{-543.0, -543.0, 6.6360896E8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}");
      tFloatArrayList0.removeAll((TFloatCollection) tSynchronizedFloatCollection0);
      boolean boolean0 = tFloatArrayList0.removeAll(floatArray0);
      assertEquals("{}", tFloatArrayList0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.remove(II)V: I3 Branch 16 IFNE L403 - false
   */

//   @Test
//   public void test30()  throws Throwable  {
//       float[] floatArray0 = new float[4];
//       TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0);
//       assertNotNull(tFloatArrayList0);
//       
//       tFloatArrayList0.remove(0, 0);
//       assertEquals(4, tFloatArrayList0.size());
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//       assertEquals("{0.0, 0.0, 0.0, 0.0}", tFloatArrayList0.toString());
//   }

  //Test case number: 31
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.remove(II)V: I8 Branch 17 IFLT L404 - true
   */

  @Test
  public void test31()  throws Throwable  {
      float[] floatArray0 = new float[7];
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
      // Undeclared exception!
      try {
        tFloatArrayList0.remove((-1983), 79);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -1983
         //
      }
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.remove(II)V: I12 Branch 18 IF_ICMPLT L404 - false
   */

  @Test
  public void test32()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
      // Undeclared exception!
      try {
        tFloatArrayList0.remove(15, 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 15
         //
      }
  }

  //Test case number: 33
  /*
   * 7 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.remove(II)V: I45 Branch 20 IF_ICMPNE L412 - false
   * 2 gnu.trove.list.array.TFloatArrayList.removeAll([F)Z: I12 Branch 48 IFLE L601 - true
   * 3 gnu.trove.list.array.TFloatArrayList.removeAll([F)Z: I12 Branch 48 IFLE L601 - false
   * 4 gnu.trove.list.array.TFloatArrayList.removeAll([F)Z: I20 Branch 49 IFEQ L602 - false
   * 5 gnu.trove.list.array.TFloatArrayList.remove(II)V: I23 Branch 19 IFNE L408 - true
   * 6 gnu.trove.list.array.TFloatArrayList.remove(II)V: I45 Branch 20 IF_ICMPNE L412 - true
   * 7 gnu.trove.list.array.TFloatArrayList.remove(F)Z: I17 Branch 15 IFNE L384 - true
   */

  @Test
  public void test33()  throws Throwable  {
      float[] floatArray0 = new float[17];
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, 6.6360896E8F);
      assertNotNull(tFloatArrayList0);
      
      floatArray0[1] = (float) (-543);
      boolean boolean0 = tFloatArrayList0.removeAll(floatArray0);
      assertEquals("{}", tFloatArrayList0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 34
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.containsAll(Ljava/util/Collection;)Z: I8 Branch 21 IFEQ L436 - true
   */

//   @Test
//   public void test34()  throws Throwable  {
//       float[] floatArray0 = new float[2];
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
//       LinkedList<Object> linkedList0 = new LinkedList<Object>();
//       boolean boolean0 = tFloatArrayList0.containsAll((Collection<?>) linkedList0);
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//       assertEquals(2, tFloatArrayList0.size());
//       assertEquals(true, boolean0);
//   }

  //Test case number: 35
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.containsAll(Ljava/util/Collection;)Z: I8 Branch 21 IFEQ L436 - false
   * 2 gnu.trove.list.array.TFloatArrayList.containsAll(Ljava/util/Collection;)Z: I16 Branch 22 IFEQ L437 - true
   */

//   @Test
//   public void test35()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(1585, 1585);
//       LinkedList<Object> linkedList0 = new LinkedList<Object>();
//       linkedList0.add((Object) "eng");
//       boolean boolean0 = tFloatArrayList0.containsAll((Collection<?>) linkedList0);
//       assertEquals(true, tFloatArrayList0.isEmpty());
//       assertEquals(false, boolean0);
//       assertEquals(1585.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 36
  /*
   * 7 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.containsAll(Lgnu/trove/TFloatCollection;)Z: I18 Branch 25 IFEQ L457 - true
   * 2 gnu.trove.list.array.TFloatArrayList.containsAll(Lgnu/trove/TFloatCollection;)Z: I29 Branch 26 IFNE L459 - true
   * 3 gnu.trove.list.array.TFloatArrayList.lastIndexOf(IF)I: I7 Branch 84 IFLE L887 - false
   * 4 gnu.trove.list.array.TFloatArrayList.lastIndexOf(IF)I: I16 Branch 85 IFNE L888 - false
   * 5 gnu.trove.list.array.TFloatArrayList.contains(F)Z: I5 Branch 86 IFLT L898 - false
   * 6 gnu.trove.list.array.TFloatArrayList.containsAll(Lgnu/trove/TFloatCollection;)Z: I4 Branch 24 IF_ACMPNE L453 - false
   * 7 gnu.trove.list.array.TFloatArrayList.containsAll(Lgnu/trove/TFloatCollection;)Z: I18 Branch 25 IFEQ L457 - false
   */

//   @Test
//   public void test36()  throws Throwable  {
//       float[] floatArray0 = new float[5];
//       TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, 331.8344F);
//       assertNotNull(tFloatArrayList0);
//       
//       TFloatArrayList tFloatArrayList1 = TFloatArrayList.wrap(floatArray0);
//       assertNotNull(tFloatArrayList1);
//       
//       boolean boolean0 = tFloatArrayList1.containsAll((TFloatCollection) tFloatArrayList0);
//       assertEquals(5, tFloatArrayList0.size());
//       assertEquals(0.0F, tFloatArrayList1.getNoEntryValue(), 0.01F);
//       assertEquals(true, boolean0);
//   }

  //Test case number: 37
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.containsAll([F)Z: I8 Branch 27 IFLE L469 - true
   * 2 gnu.trove.list.array.TFloatArrayList.containsAll([F)Z: I8 Branch 27 IFLE L469 - false
   * 3 gnu.trove.list.array.TFloatArrayList.containsAll([F)Z: I16 Branch 28 IFNE L470 - true
   */

//   @Test
//   public void test37()  throws Throwable  {
//       float[] floatArray0 = new float[5];
//       TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, 331.8344F);
//       assertNotNull(tFloatArrayList0);
//       
//       boolean boolean0 = tFloatArrayList0.containsAll(floatArray0);
//       assertEquals(true, boolean0);
//       assertEquals(331.8344F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 38
  /*
   * 6 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.containsAll([F)Z: I16 Branch 28 IFNE L470 - false
   * 2 gnu.trove.list.array.TFloatArrayList.lastIndexOf(IF)I: I16 Branch 85 IFNE L888 - true
   * 3 gnu.trove.list.array.TFloatArrayList.lastIndexOf(IF)I: I7 Branch 84 IFLE L887 - true
   * 4 gnu.trove.list.array.TFloatArrayList.contains(F)Z: I5 Branch 86 IFLT L898 - true
   * 5 gnu.trove.list.array.TFloatArrayList.containsAll([F)Z: I8 Branch 27 IFLE L469 - false
   * 6 gnu.trove.list.array.TFloatArrayList.containsAll([F)Z: I16 Branch 28 IFNE L470 - true
   */

//   @Test
//   public void test38()  throws Throwable  {
//       float[] floatArray0 = new float[1];
//       TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, 0.0F);
//       assertNotNull(tFloatArrayList0);
//       
//       float[] floatArray1 = new float[5];
//       floatArray1[0] = 508.99103F;
//       TFloatHashSet tFloatHashSet0 = new TFloatHashSet(floatArray1);
//       boolean boolean0 = tFloatArrayList0.containsAll(tFloatHashSet0._set);
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//       assertEquals(false, boolean0);
//   }

  //Test case number: 39
  /*
   * 4 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.addAll([F)Z: I18 Branch 33 IF_ICMPGE L508 - true
   * 2 gnu.trove.list.array.TFloatArrayList.addAll([F)Z: I18 Branch 33 IF_ICMPGE L508 - false
   * 3 gnu.trove.list.array.TFloatArrayList.addAll([F)Z: I28 Branch 34 IFEQ L509 - false
   * 4 gnu.trove.list.array.TFloatArrayList.ensureCapacity(I)V: I6 Branch 4 IF_ICMPLE L184 - false
   */

  @Test
  public void test39()  throws Throwable  {
      float[] floatArray0 = new float[7];
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
      boolean boolean0 = tFloatArrayList0.addAll(floatArray0);
      assertEquals("{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}", tFloatArrayList0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 40
  /*
   * 5 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.retainAll(Ljava/util/Collection;)Z: I13 Branch 35 IFEQ L522 - true
   * 2 gnu.trove.list.array.TFloatArrayList.retainAll(Ljava/util/Collection;)Z: I13 Branch 35 IFEQ L522 - false
   * 3 gnu.trove.list.array.TFloatArrayList.retainAll(Ljava/util/Collection;)Z: I21 Branch 36 IFGT L523 - false
   * 4 gnu.trove.list.array.TFloatArrayList$TFloatArrayIterator.remove()V: I5 Branch 103 IF_ICMPNE L1023 - true
   * 5 gnu.trove.list.array.TFloatArrayList$TFloatArrayIterator.remove()V: I26 Branch 104 IF_ICMPGE L1028 - false
   */

  @Test
  public void test40()  throws Throwable  {
      float[] floatArray0 = new float[4];
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0);
      assertNotNull(tFloatArrayList0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = tFloatArrayList0.retainAll((Collection<?>) linkedList0);
      assertEquals(true, tFloatArrayList0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 41
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.retainAll(Lgnu/trove/TFloatCollection;)Z: I4 Branch 37 IF_ACMPNE L534 - false
   */

//   @Test
//   public void test41()  throws Throwable  {
//       float[] floatArray0 = new float[1];
//       TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, 0.0F);
//       assertNotNull(tFloatArrayList0);
//       
//       boolean boolean0 = tFloatArrayList0.retainAll((TFloatCollection) tFloatArrayList0);
//       assertEquals(false, boolean0);
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 42
  /*
   * 10 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.retainAll(Lgnu/trove/TFloatCollection;)Z: I22 Branch 38 IFEQ L539 - false
   * 2 gnu.trove.list.array.TFloatArrayList.retainAll(Lgnu/trove/TFloatCollection;)Z: I29 Branch 39 IFNE L540 - true
   * 3 gnu.trove.list.array.TFloatArrayList.lastIndexOf(F)I: root-Branch
   * 4 gnu.trove.list.array.TFloatArrayList.insert(I[F)V: root-Branch
   * 5 gnu.trove.list.array.TFloatArrayList.insert(I[FII)V: I5 Branch 8 IF_ICMPNE L264 - false
   * 6 gnu.trove.list.array.TFloatArrayList.lastIndexOf(IF)I: I7 Branch 84 IFLE L887 - false
   * 7 gnu.trove.list.array.TFloatArrayList.lastIndexOf(IF)I: I16 Branch 85 IFNE L888 - false
   * 8 gnu.trove.list.array.TFloatArrayList.contains(F)Z: I5 Branch 86 IFLT L898 - false
   * 9 gnu.trove.list.array.TFloatArrayList.retainAll(Lgnu/trove/TFloatCollection;)Z: I4 Branch 37 IF_ACMPNE L534 - true
   * 10 gnu.trove.list.array.TFloatArrayList.retainAll(Lgnu/trove/TFloatCollection;)Z: I22 Branch 38 IFEQ L539 - true
   */

  @Test
  public void test42()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(1507, 1507);
      TUnmodifiableRandomAccessFloatList tUnmodifiableRandomAccessFloatList0 = new TUnmodifiableRandomAccessFloatList((TFloatList) tFloatArrayList0);
      float[] floatArray0 = new float[9];
      tFloatArrayList0.insert(0, floatArray0);
      boolean boolean0 = tFloatArrayList0.retainAll((TFloatCollection) tUnmodifiableRandomAccessFloatList0);
      assertEquals(9, tFloatArrayList0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 43
  /*
   * 6 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.retainAll(Lgnu/trove/TFloatCollection;)Z: I29 Branch 39 IFNE L540 - false
   * 2 gnu.trove.list.array.TFloatArrayList.retainAll(Lgnu/trove/TFloatCollection;)Z: I4 Branch 37 IF_ACMPNE L534 - true
   * 3 gnu.trove.list.array.TFloatArrayList.retainAll(Lgnu/trove/TFloatCollection;)Z: I22 Branch 38 IFEQ L539 - true
   * 4 gnu.trove.list.array.TFloatArrayList.retainAll(Lgnu/trove/TFloatCollection;)Z: I22 Branch 38 IFEQ L539 - false
   * 5 gnu.trove.list.array.TFloatArrayList$TFloatArrayIterator.remove()V: I5 Branch 103 IF_ICMPNE L1023 - true
   * 6 gnu.trove.list.array.TFloatArrayList$TFloatArrayIterator.remove()V: I26 Branch 104 IF_ICMPGE L1028 - false
   */

  @Test
  public void test43()  throws Throwable  {
      float[] floatArray0 = new float[10];
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0);
      assertNotNull(tFloatArrayList0);
      
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet();
      boolean boolean0 = tFloatArrayList0.retainAll((TFloatCollection) tFloatHashSet0);
      assertEquals("{}", tFloatArrayList0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 44
  /*
   * 6 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.retainAll([F)Z: I29 Branch 41 IFGE L556 - false
   * 2 gnu.trove.list.array.TFloatArrayList.retainAll([F)Z: I21 Branch 40 IFLE L555 - true
   * 3 gnu.trove.list.array.TFloatArrayList.retainAll([F)Z: I21 Branch 40 IFLE L555 - false
   * 4 gnu.trove.list.array.TFloatArrayList.retainAll([F)Z: I29 Branch 41 IFGE L556 - true
   * 5 gnu.trove.list.array.TFloatArrayList.remove(II)V: I23 Branch 19 IFNE L408 - true
   * 6 gnu.trove.list.array.TFloatArrayList.remove(II)V: I45 Branch 20 IF_ICMPNE L412 - true
   */

//   @Test
//   public void test44()  throws Throwable  {
//       float[] floatArray0 = new float[5];
//       floatArray0[2] = 1656.4231F;
//       TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, 331.8344F);
//       assertNotNull(tFloatArrayList0);
//       
//       float[] floatArray1 = new float[1];
//       boolean boolean0 = tFloatArrayList0.retainAll(floatArray1);
//       assertEquals(0.0F, tFloatArrayList0.sum(), 0.01F);
//       assertEquals(true, boolean0);
//   }

  //Test case number: 45
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.removeAll(Ljava/util/Collection;)Z: I12 Branch 42 IFEQ L568 - false
   * 2 gnu.trove.list.array.TFloatArrayList.removeAll(Ljava/util/Collection;)Z: I20 Branch 43 IFEQ L569 - true
   * 3 gnu.trove.list.array.TFloatArrayList.removeAll(Ljava/util/Collection;)Z: I12 Branch 42 IFEQ L568 - true
   */

//   @Test
//   public void test45()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
//       LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//       linkedList0.add((Integer) (-412));
//       boolean boolean0 = tFloatArrayList0.removeAll((Collection<?>) linkedList0);
//       assertEquals(false, boolean0);
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//       assertEquals("{}", tFloatArrayList0.toString());
//   }

  //Test case number: 46
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.removeAll(Lgnu/trove/TFloatCollection;)Z: I37 Branch 47 IFEQ L590 - true
   * 2 gnu.trove.list.array.TFloatArrayList.remove(F)Z: I8 Branch 14 IF_ICMPGE L383 - true
   * 3 gnu.trove.list.array.TFloatArrayList.remove(F)Z: I17 Branch 15 IFNE L384 - true
   */

  @Test
  public void test46()  throws Throwable  {
      float[] floatArray0 = new float[1];
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, 0.0F);
      assertNotNull(tFloatArrayList0);
      
      float[] floatArray1 = new float[5];
      floatArray1[0] = 508.99103F;
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(floatArray1);
      boolean boolean0 = tFloatArrayList0.removeAll((TFloatCollection) tFloatHashSet0);
      assertEquals("{}", tFloatArrayList0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 47
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.transformValues(Lgnu/trove/function/TFloatFunction;)V: I8 Branch 50 IFLE L612 - true
   */

//   @Test
//   public void test47()  throws Throwable  {
//       TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList(1217.2847F);
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList((TFloatCollection) tFloatLinkedList0);
//       tFloatArrayList0.transformValues((TFloatFunction) null);
//       assertEquals(0, tFloatArrayList0.size());
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//       assertEquals(true, tFloatArrayList0.isEmpty());
//   }

  //Test case number: 48
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.transformValues(Lgnu/trove/function/TFloatFunction;)V: I8 Branch 50 IFLE L612 - false
   * 2 gnu.trove.list.array.TFloatArrayList.addAll(Lgnu/trove/TFloatCollection;)Z: I13 Branch 31 IFEQ L495 - false
   * 3 gnu.trove.list.array.TFloatArrayList.addAll(Lgnu/trove/TFloatCollection;)Z: I24 Branch 32 IFEQ L497 - false
   */

  @Test
  public void test48()  throws Throwable  {
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList(1217.2847F);
      float[] floatArray0 = new float[7];
      tFloatLinkedList0.addAll(floatArray0);
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList((TFloatCollection) tFloatLinkedList0);
      // Undeclared exception!
      try {
        tFloatArrayList0.transformValues((TFloatFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 49
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.reverse(II)V: I4 Branch 51 IF_ICMPNE L626 - false
   * 2 gnu.trove.list.array.TFloatArrayList.reverse()V: root-Branch
   */

//   @Test
//   public void test49()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(1, 1);
//       tFloatArrayList0.reverse();
//       assertEquals("{}", tFloatArrayList0.toString());
//       assertEquals(1.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//       assertEquals(0, tFloatArrayList0.size());
//   }

  //Test case number: 50
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.reverse(II)V: I12 Branch 52 IF_ICMPLE L629 - false
   * 2 gnu.trove.list.array.TFloatArrayList.reverse(II)V: I4 Branch 51 IF_ICMPNE L626 - true
   */

  @Test
  public void test50()  throws Throwable  {
      float[] floatArray0 = new float[2];
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
      // Undeclared exception!
      try {
        tFloatArrayList0.reverse(1, (-1192));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // from cannot be greater than to
         //
      }
  }

  //Test case number: 51
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.shuffle(Ljava/util/Random;)V: I9 Branch 54 IF_ICMPLE L640 - false
   * 2 gnu.trove.list.array.TFloatArrayList.swap(II)V: root-Branch
   * 3 gnu.trove.list.array.TFloatArrayList.shuffle(Ljava/util/Random;)V: I9 Branch 54 IF_ICMPLE L640 - true
   */

//   @Test
//   public void test51()  throws Throwable  {
//       float[] floatArray0 = new float[9];
//       TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0);
//       assertNotNull(tFloatArrayList0);
//       
//       Random random0 = new Random();
//       tFloatArrayList0.shuffle(random0);
//       assertEquals(0.5147197959899784, random0.nextDouble(), 0.01D);
//       assertEquals(0.96490973F, random0.nextFloat(), 0.01F);
//   }

  //Test case number: 52
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.subList(II)Lgnu/trove/list/TFloatList;: I4 Branch 55 IF_ICMPGE L663 - true
   * 2 gnu.trove.list.array.TFloatArrayList.subList(II)Lgnu/trove/list/TFloatList;: I26 Branch 56 IFGE L667 - true
   * 3 gnu.trove.list.array.TFloatArrayList.subList(II)Lgnu/trove/list/TFloatList;: I40 Branch 57 IF_ICMPLE L670 - false
   */

  @Test
  public void test52()  throws Throwable  {
      float[] floatArray0 = new float[6];
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0);
      assertNotNull(tFloatArrayList0);
      
      // Undeclared exception!
      try {
        tFloatArrayList0.subList(1665, 1665);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // end index < 6
         //
      }
  }

  //Test case number: 53
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.subList(II)Lgnu/trove/list/TFloatList;: I4 Branch 55 IF_ICMPGE L663 - false
   */

  @Test
  public void test53()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
      // Undeclared exception!
      try {
        tFloatArrayList0.subList(1725, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // end index 0 greater than begin index 1725
         //
      }
  }

  //Test case number: 54
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.subList(II)Lgnu/trove/list/TFloatList;: I26 Branch 56 IFGE L667 - false
   */

  @Test
  public void test54()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
      // Undeclared exception!
      try {
        tFloatArrayList0.subList((-412), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // begin index can not be < 0
         //
      }
  }

  //Test case number: 55
  /*
   * 5 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.subList(II)Lgnu/trove/list/TFloatList;: I73 Branch 58 IF_ICMPGE L674 - false
   * 2 gnu.trove.list.array.TFloatArrayList.subList(II)Lgnu/trove/list/TFloatList;: I4 Branch 55 IF_ICMPGE L663 - true
   * 3 gnu.trove.list.array.TFloatArrayList.subList(II)Lgnu/trove/list/TFloatList;: I26 Branch 56 IFGE L667 - true
   * 4 gnu.trove.list.array.TFloatArrayList.subList(II)Lgnu/trove/list/TFloatList;: I40 Branch 57 IF_ICMPLE L670 - true
   * 5 gnu.trove.list.array.TFloatArrayList.subList(II)Lgnu/trove/list/TFloatList;: I73 Branch 58 IF_ICMPGE L674 - true
   */

//   @Test
//   public void test55()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
//       TFloatArrayList tFloatArrayList1 = (TFloatArrayList)tFloatArrayList0.subList(1, 10);
//       assertEquals("{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}", tFloatArrayList1.toString());
//       assertEquals(0.0F, tFloatArrayList1.getNoEntryValue(), 0.01F);
//       assertNotNull(tFloatArrayList1);
//   }

  //Test case number: 56
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.toArray([F)[F: I11 Branch 59 IF_ICMPLE L698 - true
   * 2 gnu.trove.list.array.TFloatArrayList.toArray([FII)[F: I15 Branch 62 IF_ICMPLT L712 - true
   */

//   @Test
//   public void test56()  throws Throwable  {
//       float[] floatArray0 = new float[7];
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
//       float[] floatArray1 = tFloatArrayList0.toArray(floatArray0);
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//       assertEquals(7, tFloatArrayList0.size());
//       assertNotNull(floatArray1);
//   }

  //Test case number: 57
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.toArray([F)[F: I11 Branch 59 IF_ICMPLE L698 - false
   * 2 gnu.trove.list.array.TFloatArrayList.toArray([FII)[F: I3 Branch 60 IFNE L709 - false
   */

//   @Test
//   public void test57()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(711);
//       float[] floatArray0 = new float[10];
//       float[] floatArray1 = tFloatArrayList0.toArray(floatArray0);
//       assertNotNull(floatArray1);
//       assertEquals(true, tFloatArrayList0.isEmpty());
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 58
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.toArray([FII)[F: I11 Branch 61 IFLT L712 - true
   */

  @Test
  public void test58()  throws Throwable  {
      float[] floatArray0 = new float[8];
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
      // Undeclared exception!
      try {
        tFloatArrayList0.toArray(floatArray0, (-36), 4831);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -36
         //
      }
  }

  //Test case number: 59
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.toArray([FII)[F: I15 Branch 62 IF_ICMPLT L712 - false
   * 2 gnu.trove.list.array.TFloatArrayList.toArray([FII)[F: I3 Branch 60 IFNE L709 - true
   * 3 gnu.trove.list.array.TFloatArrayList.toArray([FII)[F: I11 Branch 61 IFLT L712 - false
   */

  @Test
  public void test59()  throws Throwable  {
      float[] floatArray0 = new float[10];
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(1, (-450.63138F));
      // Undeclared exception!
      try {
        tFloatArrayList0.toArray(floatArray0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1
         //
      }
  }

  //Test case number: 60
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.toArray([FIII)[F: I3 Branch 63 IFNE L722 - true
   * 2 gnu.trove.list.array.TFloatArrayList.toArray([FIII)[F: I11 Branch 64 IFLT L725 - true
   */

  @Test
  public void test60()  throws Throwable  {
      float[] floatArray0 = new float[10];
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
      // Undeclared exception!
      try {
        tFloatArrayList0.toArray(floatArray0, (-746), (-16), (-746));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -746
         //
      }
  }

  //Test case number: 61
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.toArray([FIII)[F: I3 Branch 63 IFNE L722 - false
   */

//   @Test
//   public void test61()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(150, 150);
//       float[] floatArray0 = new float[3];
//       float[] floatArray1 = tFloatArrayList0.toArray(floatArray0, 150, 150, 0);
//       assertEquals(150.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//       assertNotNull(floatArray1);
//       assertEquals("{}", tFloatArrayList0.toString());
//       assertEquals(0, tFloatArrayList0.size());
//   }

  //Test case number: 62
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.toArray([FIII)[F: I11 Branch 64 IFLT L725 - false
   * 2 gnu.trove.list.array.TFloatArrayList.toArray([FIII)[F: I15 Branch 65 IF_ICMPLT L725 - false
   */

  @Test
  public void test62()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
      float[] floatArray0 = new float[6];
      // Undeclared exception!
      try {
        tFloatArrayList0.toArray(floatArray0, 0, 0, 3821);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
      }
  }

  //Test case number: 63
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.toArray([FIII)[F: I15 Branch 65 IF_ICMPLT L725 - true
   * 2 gnu.trove.list.array.TFloatArrayList.toArray([FIII)[F: I3 Branch 63 IFNE L722 - true
   * 3 gnu.trove.list.array.TFloatArrayList.toArray([FIII)[F: I11 Branch 64 IFLT L725 - false
   */

  @Test
  public void test63()  throws Throwable  {
      float[] floatArray0 = new float[6];
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, (-1730.8F));
      assertNotNull(tFloatArrayList0);
      
      // Undeclared exception!
      try {
        tFloatArrayList0.toArray(floatArray0, 1, 2045, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 64
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.equals(Ljava/lang/Object;)Z: I4 Branch 66 IF_ACMPNE L738 - true
   * 2 gnu.trove.list.array.TFloatArrayList.equals(Ljava/lang/Object;)Z: I13 Branch 67 IFEQ L741 - true
   */

//   @Test
//   public void test64()  throws Throwable  {
//       float[] floatArray0 = new float[9];
//       TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, 0.0F);
//       assertNotNull(tFloatArrayList0);
//       
//       boolean boolean0 = tFloatArrayList0.equals((Object) 2003.836F);
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//       assertEquals(false, boolean0);
//   }

  //Test case number: 65
  /*
   * 17 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.equals(Ljava/lang/Object;)Z: I13 Branch 67 IFEQ L741 - false
   * 2 gnu.trove.list.array.TFloatArrayList.equals(Ljava/lang/Object;)Z: I25 Branch 68 IF_ICMPEQ L743 - true
   * 3 gnu.trove.list.array.TFloatArrayList.equals(Ljava/lang/Object;)Z: I36 Branch 69 IFLE L745 - true
   * 4 gnu.trove.list.array.TFloatArrayList.equals(Ljava/lang/Object;)Z: I36 Branch 69 IFLE L745 - false
   * 5 gnu.trove.list.array.TFloatArrayList.equals(Ljava/lang/Object;)Z: I48 Branch 70 IFEQ L746 - true
   * 6 gnu.trove.list.array.TFloatArrayList.add(F)Z: root-Branch
   * 7 gnu.trove.list.array.TFloatArrayList.<init>(Lgnu/trove/TFloatCollection;)V: root-Branch
   * 8 gnu.trove.list.array.TFloatArrayList.iterator()Lgnu/trove/iterator/TFloatIterator;: root-Branch
   * 9 gnu.trove.list.array.TFloatArrayList.equals(Ljava/lang/Object;)Z: I4 Branch 66 IF_ACMPNE L738 - false
   * 10 gnu.trove.list.array.TFloatArrayList.addAll(Lgnu/trove/TFloatCollection;)Z: I13 Branch 31 IFEQ L495 - true
   * 11 gnu.trove.list.array.TFloatArrayList.addAll(Lgnu/trove/TFloatCollection;)Z: I13 Branch 31 IFEQ L495 - false
   * 12 gnu.trove.list.array.TFloatArrayList.addAll(Lgnu/trove/TFloatCollection;)Z: I24 Branch 32 IFEQ L497 - false
   * 13 gnu.trove.list.array.TFloatArrayList.get(I)F: I5 Branch 9 IF_ICMPLT L280 - true
   * 14 gnu.trove.list.array.TFloatArrayList$TFloatArrayIterator.next()F: root-Branch
   * 15 gnu.trove.list.array.TFloatArrayList$TFloatArrayIterator.<init>(Lgnu/trove/list/array/TFloatArrayList;I)V: root-Branch
   * 16 gnu.trove.list.array.TFloatArrayList$TFloatArrayIterator.hasNext()Z: I7 Branch 102 IF_ICMPGE L1005 - true
   * 17 gnu.trove.list.array.TFloatArrayList$TFloatArrayIterator.hasNext()Z: I7 Branch 102 IF_ICMPGE L1005 - false
   */

//   @Test
//   public void test65()  throws Throwable  {
//       float[] floatArray0 = new float[3];
//       TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0);
//       assertNotNull(tFloatArrayList0);
//       
//       TFloatArrayList tFloatArrayList1 = new TFloatArrayList((TFloatCollection) tFloatArrayList0);
//       boolean boolean0 = tFloatArrayList1.equals((Object) tFloatArrayList0);
//       assertEquals(true, boolean0);
//       assertEquals("{0.0, 0.0, 0.0}", tFloatArrayList1.toString());
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//       assertEquals(0.0F, tFloatArrayList1.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 66
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.equals(Ljava/lang/Object;)Z: I25 Branch 68 IF_ICMPEQ L743 - false
   * 2 gnu.trove.list.array.TFloatArrayList.equals(Ljava/lang/Object;)Z: I4 Branch 66 IF_ACMPNE L738 - true
   * 3 gnu.trove.list.array.TFloatArrayList.equals(Ljava/lang/Object;)Z: I13 Branch 67 IFEQ L741 - false
   */

//   @Test
//   public void test66()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(930);
//       float[] floatArray0 = new float[10];
//       TFloatArrayList tFloatArrayList1 = new TFloatArrayList(floatArray0);
//       boolean boolean0 = tFloatArrayList0.equals((Object) tFloatArrayList1);
//       assertEquals(10, tFloatArrayList1.size());
//       assertEquals(0.0F, tFloatArrayList1.getNoEntryValue(), 0.01F);
//       assertEquals(false, boolean0);
//       assertFalse(tFloatArrayList1.equals(tFloatArrayList0));
//   }

  //Test case number: 67
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.hashCode()I: I12 Branch 71 IFLE L761 - false
   * 2 gnu.trove.list.array.TFloatArrayList.hashCode()I: I12 Branch 71 IFLE L761 - true
   */

//   @Test
//   public void test67()  throws Throwable  {
//       float[] floatArray0 = new float[7];
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
//       int int0 = tFloatArrayList0.hashCode();
//       assertEquals(0, int0);
//       assertEquals(7, tFloatArrayList0.size());
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 68
  /*
   * 11 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.forEach(Lgnu/trove/procedure/TFloatProcedure;)Z: I8 Branch 72 IF_ICMPGE L772 - true
   * 2 gnu.trove.list.array.TFloatArrayList.remove(II)V: I3 Branch 16 IFNE L403 - true
   * 3 gnu.trove.list.array.TFloatArrayList.remove(II)V: I8 Branch 17 IFLT L404 - false
   * 4 gnu.trove.list.array.TFloatArrayList.remove(II)V: I12 Branch 18 IF_ICMPLT L404 - true
   * 5 gnu.trove.list.array.TFloatArrayList.remove(II)V: I23 Branch 19 IFNE L408 - false
   * 6 gnu.trove.list.array.TFloatArrayList.removeAll(Lgnu/trove/TFloatCollection;)Z: I4 Branch 45 IF_ACMPNE L582 - true
   * 7 gnu.trove.list.array.TFloatArrayList.removeAll(Lgnu/trove/TFloatCollection;)Z: I26 Branch 46 IFEQ L588 - true
   * 8 gnu.trove.list.array.TFloatArrayList.removeAll(Lgnu/trove/TFloatCollection;)Z: I26 Branch 46 IFEQ L588 - false
   * 9 gnu.trove.list.array.TFloatArrayList.removeAll(Lgnu/trove/TFloatCollection;)Z: I37 Branch 47 IFEQ L590 - false
   * 10 gnu.trove.list.array.TFloatArrayList.remove(F)Z: I8 Branch 14 IF_ICMPGE L383 - false
   * 11 gnu.trove.list.array.TFloatArrayList.remove(F)Z: I17 Branch 15 IFNE L384 - false
   */

  @Test
  public void test68()  throws Throwable  {
      float[] floatArray0 = new float[1];
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, 0.0F);
      assertNotNull(tFloatArrayList0);
      
      float[] floatArray1 = new float[5];
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(floatArray1);
      tFloatArrayList0.removeAll((TFloatCollection) tFloatHashSet0);
      boolean boolean0 = tFloatArrayList0.forEach((TFloatProcedure) null);
      assertEquals("{}", tFloatArrayList0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 69
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.forEach(Lgnu/trove/procedure/TFloatProcedure;)Z: I8 Branch 72 IF_ICMPGE L772 - false
   */

  @Test
  public void test69()  throws Throwable  {
      float[] floatArray0 = new float[9];
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, 1.0F);
      assertNotNull(tFloatArrayList0);
      
      // Undeclared exception!
      try {
        tFloatArrayList0.forEach((TFloatProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 70
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.forEachDescending(Lgnu/trove/procedure/TFloatProcedure;)Z: I8 Branch 74 IFLE L783 - true
   */

//   @Test
//   public void test70()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(1507, 1507);
//       boolean boolean0 = tFloatArrayList0.forEachDescending((TFloatProcedure) null);
//       assertEquals(true, boolean0);
//       assertEquals(true, tFloatArrayList0.isEmpty());
//       assertEquals(1507.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 71
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.forEachDescending(Lgnu/trove/procedure/TFloatProcedure;)Z: I8 Branch 74 IFLE L783 - false
   */

  @Test
  public void test71()  throws Throwable  {
      float[] floatArray0 = new float[13];
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
      // Undeclared exception!
      try {
        tFloatArrayList0.forEachDescending((TFloatProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 72
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.fill(IIF)V: I5 Branch 76 IF_ICMPLE L816 - true
   */

//   @Test
//   public void test72()  throws Throwable  {
//       float[] floatArray0 = new float[9];
//       TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0);
//       assertNotNull(tFloatArrayList0);
//       
//       tFloatArrayList0.fill(0, 0, (-1238.8418F));
//       assertEquals("{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}", tFloatArrayList0.toString());
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 73
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.binarySearch(FII)I: I3 Branch 77 IFGE L834 - false
   */

  @Test
  public void test73()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
      // Undeclared exception!
      try {
        tFloatArrayList0.binarySearch((float) (-1562), (-1562), (-1562));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -1562
         //
      }
  }

  //Test case number: 74
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.binarySearch(FII)I: I16 Branch 78 IF_ICMPLE L837 - false
   * 2 gnu.trove.list.array.TFloatArrayList.binarySearch(FII)I: I3 Branch 77 IFGE L834 - true
   */

  @Test
  public void test74()  throws Throwable  {
      float[] floatArray0 = new float[3];
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0);
      assertNotNull(tFloatArrayList0);
      
      // Undeclared exception!
      try {
        tFloatArrayList0.binarySearch((float) (-363), 1391, 1391);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1391
         //
      }
  }

  //Test case number: 75
  /*
   * 6 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.binarySearch(FII)I: I38 Branch 79 IF_ICMPGT L844 - false
   * 2 gnu.trove.list.array.TFloatArrayList.binarySearch(FII)I: I59 Branch 80 IFGE L848 - false
   * 3 gnu.trove.list.array.TFloatArrayList.fill(IIF)V: I5 Branch 76 IF_ICMPLE L816 - false
   * 4 gnu.trove.list.array.TFloatArrayList.binarySearch(FII)I: I38 Branch 79 IF_ICMPGT L844 - true
   * 5 gnu.trove.list.array.TFloatArrayList.binarySearch(F)I: root-Branch
   * 6 gnu.trove.list.array.TFloatArrayList.binarySearch(FII)I: I16 Branch 78 IF_ICMPLE L837 - true
   */

//   @Test
//   public void test75()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
//       tFloatArrayList0.fill(0, 1, 1);
//       int int0 = tFloatArrayList0.binarySearch(957.1707F);
//       assertEquals(1.0F, tFloatArrayList0.sum(), 0.01F);
//       assertEquals((-2), int0);
//   }

  //Test case number: 76
  /*
   * 7 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.binarySearch(FII)I: I72 Branch 81 IFLE L851 - false
   * 2 gnu.trove.list.array.TFloatArrayList.binarySearch(F)I: root-Branch
   * 3 gnu.trove.list.array.TFloatArrayList.binarySearch(FII)I: I3 Branch 77 IFGE L834 - true
   * 4 gnu.trove.list.array.TFloatArrayList.binarySearch(FII)I: I16 Branch 78 IF_ICMPLE L837 - true
   * 5 gnu.trove.list.array.TFloatArrayList.binarySearch(FII)I: I38 Branch 79 IF_ICMPGT L844 - false
   * 6 gnu.trove.list.array.TFloatArrayList.binarySearch(FII)I: I59 Branch 80 IFGE L848 - true
   * 7 gnu.trove.list.array.TFloatArrayList.binarySearch(FII)I: I72 Branch 81 IFLE L851 - true
   */

//   @Test
//   public void test76()  throws Throwable  {
//       float[] floatArray0 = new float[9];
//       TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, 0.0F);
//       assertNotNull(tFloatArrayList0);
//       
//       floatArray0[4] = 2003.836F;
//       int int0 = tFloatArrayList0.binarySearch(0.0F);
//       assertEquals(1, int0);
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 77
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.indexOf(IF)I: I17 Branch 83 IFNE L871 - false
   * 2 gnu.trove.list.array.TFloatArrayList.indexOf(IF)I: I8 Branch 82 IF_ICMPGE L870 - false
   */

//   @Test
//   public void test77()  throws Throwable  {
//       float[] floatArray0 = new float[7];
//       floatArray0[0] = (-645.83813F);
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
//       int int0 = tFloatArrayList0.indexOf(0, (-645.83813F));
//       assertEquals(0, int0);
//       assertEquals(7, tFloatArrayList0.size());
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 78
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.grep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;: I14 Branch 87 IF_ICMPGE L905 - true
   */

//   @Test
//   public void test78()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(1507, 1507);
//       TUnmodifiableRandomAccessFloatList tUnmodifiableRandomAccessFloatList0 = new TUnmodifiableRandomAccessFloatList((TFloatList) tFloatArrayList0);
//       TFloatArrayList tFloatArrayList1 = (TFloatArrayList)tUnmodifiableRandomAccessFloatList0.grep((TFloatProcedure) null);
//       assertEquals(0.0F, tFloatArrayList1.getNoEntryValue(), 0.01F);
//       assertNotNull(tFloatArrayList1);
//   }

  //Test case number: 79
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.grep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;: I14 Branch 87 IF_ICMPGE L905 - false
   */

  @Test
  public void test79()  throws Throwable  {
      float[] floatArray0 = new float[9];
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, 0.0F);
      assertNotNull(tFloatArrayList0);
      
      // Undeclared exception!
      try {
        tFloatArrayList0.grep((TFloatProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 80
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.inverseGrep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;: I14 Branch 89 IF_ICMPGE L917 - true
   */

//   @Test
//   public void test80()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
//       TUnmodifiableRandomAccessFloatList tUnmodifiableRandomAccessFloatList0 = new TUnmodifiableRandomAccessFloatList((TFloatList) tFloatArrayList0);
//       TFloatArrayList tFloatArrayList1 = (TFloatArrayList)tUnmodifiableRandomAccessFloatList0.inverseGrep((TFloatProcedure) null);
//       assertNotNull(tFloatArrayList1);
//       assertNotSame(tFloatArrayList0, tFloatArrayList1);
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 81
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.inverseGrep(Lgnu/trove/procedure/TFloatProcedure;)Lgnu/trove/list/TFloatList;: I14 Branch 89 IF_ICMPGE L917 - false
   */

  @Test
  public void test81()  throws Throwable  {
      float[] floatArray0 = new float[3];
      TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, 0.0F);
      assertNotNull(tFloatArrayList0);
      
      // Undeclared exception!
      try {
        tFloatArrayList0.inverseGrep((TFloatProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 82
  /*
   * 9 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.max()F: I4 Branch 91 IFNE L928 - true
   * 2 gnu.trove.list.array.TFloatArrayList.max()F: I24 Branch 92 IF_ICMPGE L932 - true
   * 3 gnu.trove.list.array.TFloatArrayList.max()F: I24 Branch 92 IF_ICMPGE L932 - false
   * 4 gnu.trove.list.array.TFloatArrayList.max()F: I33 Branch 93 IFLE L933 - true
   * 5 gnu.trove.list.array.TFloatArrayList.add([F)V: root-Branch
   * 6 gnu.trove.list.array.TFloatArrayList.add([FII)V: root-Branch
   * 7 gnu.trove.list.array.TFloatArrayList.<init>([F)V: root-Branch
   * 8 gnu.trove.list.array.TFloatArrayList.<init>(I)V: root-Branch
   * 9 gnu.trove.list.array.TFloatArrayList.ensureCapacity(I)V: I6 Branch 4 IF_ICMPLE L184 - true
   */

//   @Test
//   public void test82()  throws Throwable  {
//       float[] floatArray0 = new float[2];
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList(floatArray0);
//       float float0 = tFloatArrayList0.max();
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//       assertEquals(2, tFloatArrayList0.size());
//       assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
//   }

  //Test case number: 83
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.max()F: I4 Branch 91 IFNE L928 - false
   */

  @Test
  public void test83()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(1824, 46.814243F);
      // Undeclared exception!
      try {
        tFloatArrayList0.max();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot find maximum of an empty list
         //
      }
  }

  //Test case number: 84
  /*
   * 4 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.min()F: I4 Branch 94 IFNE L943 - true
   * 2 gnu.trove.list.array.TFloatArrayList.min()F: I24 Branch 95 IF_ICMPGE L947 - true
   * 3 gnu.trove.list.array.TFloatArrayList.min()F: I24 Branch 95 IF_ICMPGE L947 - false
   * 4 gnu.trove.list.array.TFloatArrayList.min()F: I33 Branch 96 IFGE L948 - true
   */

//   @Test
//   public void test84()  throws Throwable  {
//       float[] floatArray0 = new float[10];
//       TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0);
//       assertNotNull(tFloatArrayList0);
//       
//       float float0 = tFloatArrayList0.min();
//       assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
//       assertEquals(10, tFloatArrayList0.size());
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 85
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TFloatArrayList.min()F: I4 Branch 94 IFNE L943 - false
   */

  @Test
  public void test85()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
      // Undeclared exception!
      try {
        tFloatArrayList0.min();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot find minimum of an empty list
         //
      }
  }

  //Test case number: 86
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.sum()F: I12 Branch 97 IF_ICMPGE L959 - false
   * 2 gnu.trove.list.array.TFloatArrayList.sum()F: I12 Branch 97 IF_ICMPGE L959 - true
   */

//   @Test
//   public void test86()  throws Throwable  {
//       float[] floatArray0 = new float[5];
//       TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, 331.8344F);
//       assertNotNull(tFloatArrayList0);
//       
//       float float0 = tFloatArrayList0.sum();
//       assertEquals(331.8344F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 87
  /*
   * 4 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.toString()Ljava/lang/String;: I20 Branch 98 IF_ICMPGE L972 - true
   * 2 gnu.trove.list.array.TFloatArrayList.toString()Ljava/lang/String;: I44 Branch 99 IFLE L976 - true
   * 3 gnu.trove.list.array.TFloatArrayList.<init>()V: root-Branch
   * 4 gnu.trove.list.array.TFloatArrayList.<init>(IF)V: root-Branch
   */

//   @Test
//   public void test87()  throws Throwable  {
//       TFloatArrayList tFloatArrayList0 = new TFloatArrayList();
//       String string0 = tFloatArrayList0.toString();
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//       assertNotNull(string0);
//       assertEquals(0, tFloatArrayList0.size());
//       assertEquals("{}", string0);
//   }

  //Test case number: 88
  /*
   * 4 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.toString()Ljava/lang/String;: I20 Branch 98 IF_ICMPGE L972 - false
   * 2 gnu.trove.list.array.TFloatArrayList.toString()Ljava/lang/String;: I44 Branch 99 IFLE L976 - false
   * 3 gnu.trove.list.array.TFloatArrayList.size()I: root-Branch
   * 4 gnu.trove.list.array.TFloatArrayList.toString()Ljava/lang/String;: I20 Branch 98 IF_ICMPGE L972 - true
   */

//   @Test
//   public void test88()  throws Throwable  {
//       float[] floatArray0 = new float[17];
//       TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0, 6.6360896E8F);
//       assertNotNull(tFloatArrayList0);
//       
//       TUnmodifiableRandomAccessFloatList tUnmodifiableRandomAccessFloatList0 = new TUnmodifiableRandomAccessFloatList((TFloatList) tFloatArrayList0);
//       String string0 = tUnmodifiableRandomAccessFloatList0.toString();
//       assertEquals(17, tFloatArrayList0.size());
//       assertEquals("{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}", string0);
//       assertNotNull(string0);
//       assertEquals(6.6360896E8F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 89
  /*
   * 7 covered goals:
   * 1 gnu.trove.list.array.TFloatArrayList.writeExternal(Ljava/io/ObjectOutput;)V: I35 Branch 100 IF_ICMPGE L1051 - true
   * 2 gnu.trove.list.array.TFloatArrayList.writeExternal(Ljava/io/ObjectOutput;)V: I35 Branch 100 IF_ICMPGE L1051 - false
   * 3 gnu.trove.list.array.TFloatArrayList$1.<init>([FFZ)V: root-Branch
   * 4 gnu.trove.list.array.TFloatArrayList.wrap([FF)Lgnu/trove/list/array/TFloatArrayList;: root-Branch
   * 5 gnu.trove.list.array.TFloatArrayList.wrap([F)Lgnu/trove/list/array/TFloatArrayList;: root-Branch
   * 6 gnu.trove.list.array.TFloatArrayList.<init>([FFZ)V: I7 Branch 2 IFNE L123 - true
   * 7 gnu.trove.list.array.TFloatArrayList.<init>([FFZ)V: I18 Branch 3 IFNONNULL L126 - true
   */

//   @Test
//   public void test89()  throws Throwable  {
//       float[] floatArray0 = new float[8];
//       TFloatArrayList tFloatArrayList0 = TFloatArrayList.wrap(floatArray0);
//       assertNotNull(tFloatArrayList0);
//       
//       ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(104);
//       PrintStream printStream0 = new PrintStream((OutputStream) byteArrayOutputStream0);
//       ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
//       tFloatArrayList0.writeExternal((ObjectOutput) objectOutputStream0);
//       assertEquals(0.0F, tFloatArrayList0.getNoEntryValue(), 0.01F);
//   }
}
