/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TCharFunction;
import gnu.trove.impl.sync.TSynchronizedCharCollection;
import gnu.trove.impl.sync.TSynchronizedShortCharMap;
import gnu.trove.impl.sync.TSynchronizedShortSet;
import gnu.trove.map.TShortCharMap;
import gnu.trove.map.hash.TShortCharHashMap;
import gnu.trove.procedure.TCharProcedure;
import gnu.trove.procedure.TShortCharProcedure;
import gnu.trove.procedure.TShortProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedShortCharMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.putIfAbsent(SC)C: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedShortCharMap.<init>(Lgnu/trove/map/TShortCharMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
      tSynchronizedShortCharMap0.putIfAbsent((short)5, 'E');
      assertEquals(false, tShortCharHashMap0.isEmpty());
      assertEquals("{5=E}", tShortCharHashMap0.toString());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.containsValue(C)Z: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
      boolean boolean0 = tSynchronizedShortCharMap0.containsValue(']');
      assertEquals(false, boolean0);
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.clear()V: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedShortCharMap.<init>(Lgnu/trove/map/TShortCharMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0, (Object) "8511");
      tSynchronizedShortCharMap0.clear();
      assertEquals(true, tSynchronizedShortCharMap0.isEmpty());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(9, 9);
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
      String string0 = tSynchronizedShortCharMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.containsKey(S)Z: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      short[] shortArray0 = new short[3];
      char[] charArray0 = new char[5];
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0, (Object) "{}");
      boolean boolean0 = tSynchronizedShortCharMap0.containsKey((short)725);
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.adjustValue(SC)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(9, 9);
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
      boolean boolean0 = tSynchronizedShortCharMap0.adjustValue((short) (-17), '\u0000');
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.forEachEntry(Lgnu/trove/procedure/TShortCharProcedure;)Z: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(32750, 32750);
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0, (Object) "{}");
      boolean boolean0 = tSynchronizedShortCharMap0.forEachEntry((TShortCharProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap((int) (short) (-859), (float) '/', (short) (-859), '/');
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0, (Object) (short) (-859));
      boolean boolean0 = tSynchronizedShortCharMap0.forEachValue((TCharProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.values([C)[C: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(31);
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
      // Undeclared exception!
      try {
        tSynchronizedShortCharMap0.values((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.transformValues(Lgnu/trove/function/TCharFunction;)V: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0, (Object) "");
      tSynchronizedShortCharMap0.transformValues((TCharFunction) null);
      assertEquals(0, tSynchronizedShortCharMap0.size());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.adjustOrPutValue(SCC)C: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
      char char0 = tSynchronizedShortCharMap0.adjustOrPutValue((short)32755, ']', ']');
      assertEquals(1, tShortCharHashMap0.size());
      assertEquals(']', char0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.equals(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(31);
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
      boolean boolean0 = tSynchronizedShortCharMap0.equals((Object) "");
      assertEquals(false, boolean0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.get(S)C: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(9, 9);
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
      char char0 = tSynchronizedShortCharMap0.get((short) (-17));
      assertEquals('\u0000', char0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.increment(S)Z: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(9, 9);
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
      boolean boolean0 = tSynchronizedShortCharMap0.increment((short) (-17));
      assertEquals(false, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      short[] shortArray0 = new short[3];
      char[] charArray0 = new char[5];
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0, (Object) "{}");
      boolean boolean0 = tSynchronizedShortCharMap0.isEmpty();
      assertEquals(false, boolean0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.getNoEntryKey()S: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(31);
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
      short short0 = tSynchronizedShortCharMap0.getNoEntryKey();
      assertEquals((short)0, short0);
  }

  //Test case number: 16
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.iterator()Lgnu/trove/iterator/TShortCharIterator;: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedShortCharMap.size()I: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(32750, 32750);
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0, (Object) "{}");
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap((TShortCharMap) tSynchronizedShortCharMap0);
      assertEquals(0, tShortCharHashMap1.size());
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.put(SC)C: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
      tSynchronizedShortCharMap0.put((short)32755, ']');
      assertEquals(false, tShortCharHashMap0.isEmpty());
      assertEquals("{32755=]}", tShortCharHashMap0.toString());
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.putAll(Ljava/util/Map;)V: root-Branch
   */

//   @Test
//   public void test18()  throws Throwable  {
//       TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(31);
//       TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
//       HashMap<Short, Character> hashMap0 = new HashMap<Short, Character>();
//       tSynchronizedShortCharMap0.putAll((Map<? extends Short, ? extends Character>) hashMap0);
//       assertEquals(0, tSynchronizedShortCharMap0.getNoEntryKey());
//   }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.values()[C: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
      char[] charArray0 = tSynchronizedShortCharMap0.values();
      assertNotNull(charArray0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.getNoEntryValue()C: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(32750, 32750);
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0, (Object) "{}");
      char char0 = tSynchronizedShortCharMap0.getNoEntryValue();
      assertEquals('\u0000', char0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.forEachKey(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0, (Object) "8511");
      boolean boolean0 = tSynchronizedShortCharMap0.forEachKey((TShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.putAll(Lgnu/trove/map/TShortCharMap;)V: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
      tSynchronizedShortCharMap0.putAll((TShortCharMap) tShortCharHashMap0);
      assertEquals(true, tShortCharHashMap0.isEmpty());
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.keys([S)[S: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      short[] shortArray0 = new short[3];
      char[] charArray0 = new char[5];
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0, (Object) "{}");
      short[] shortArray1 = tSynchronizedShortCharMap0.keys(shortArray0);
      assertSame(shortArray1, shortArray0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.retainEntries(Lgnu/trove/procedure/TShortCharProcedure;)Z: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0, (Object) "8511");
      boolean boolean0 = tSynchronizedShortCharMap0.retainEntries((TShortCharProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.keys()[S: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      short[] shortArray0 = new short[3];
      char[] charArray0 = new char[5];
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0, (Object) "{}");
      short[] shortArray1 = tSynchronizedShortCharMap0.keys();
      assertNotSame(shortArray1, shortArray0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.hashCode()I: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0, (Object) "Y");
      int int0 = tSynchronizedShortCharMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.remove(S)C: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0, (Object) "Y");
      char char0 = tSynchronizedShortCharMap0.remove((short)2729);
      assertEquals('\u0000', char0);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.<init>(Lgnu/trove/map/TShortCharMap;)V: I17 Branch 1 IFNONNULL L59 - false
   */

  @Test
  public void test28()  throws Throwable  {
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = null;
      try {
        tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 29
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.keySet()Lgnu/trove/set/TShortSet;: I11 Branch 2 IFNONNULL L107 - true
   * 2 gnu.trove.impl.sync.TSynchronizedShortCharMap.keySet()Lgnu/trove/set/TShortSet;: I11 Branch 2 IFNONNULL L107 - false
   * 3 gnu.trove.impl.sync.TSynchronizedShortCharMap.<init>(Lgnu/trove/map/TShortCharMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test29()  throws Throwable  {
      short[] shortArray0 = new short[3];
      char[] charArray0 = new char[5];
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0, (Object) "{}");
      TSynchronizedShortSet tSynchronizedShortSet0 = (TSynchronizedShortSet)tSynchronizedShortCharMap0.keySet();
      assertNotNull(tSynchronizedShortSet0);
      
      TSynchronizedShortSet tSynchronizedShortSet1 = (TSynchronizedShortSet)tSynchronizedShortCharMap0.keySet();
      assertSame(tSynchronizedShortSet1, tSynchronizedShortSet0);
  }

  //Test case number: 30
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortCharMap.valueCollection()Lgnu/trove/TCharCollection;: I11 Branch 3 IFNONNULL L121 - true
   * 2 gnu.trove.impl.sync.TSynchronizedShortCharMap.valueCollection()Lgnu/trove/TCharCollection;: I11 Branch 3 IFNONNULL L121 - false
   * 3 gnu.trove.impl.sync.TSynchronizedShortCharMap.<init>(Lgnu/trove/map/TShortCharMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test30()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      TSynchronizedShortCharMap tSynchronizedShortCharMap0 = new TSynchronizedShortCharMap((TShortCharMap) tShortCharHashMap0);
      TSynchronizedCharCollection tSynchronizedCharCollection0 = (TSynchronizedCharCollection)tSynchronizedShortCharMap0.valueCollection();
      assertNotNull(tSynchronizedCharCollection0);
      
      TSynchronizedCharCollection tSynchronizedCharCollection1 = (TSynchronizedCharCollection)tSynchronizedShortCharMap0.valueCollection();
      assertSame(tSynchronizedCharCollection1, tSynchronizedCharCollection0);
  }
}
