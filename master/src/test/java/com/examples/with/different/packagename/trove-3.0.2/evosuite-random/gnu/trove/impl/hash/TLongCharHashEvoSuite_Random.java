/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TCharCollection;
import gnu.trove.map.TLongCharMap;
import gnu.trove.map.hash.TLongCharHashMap;
import gnu.trove.procedure.TLongProcedure;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TLongCharHashEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      long[] longArray0 = new long[7];
      long long0 = 0L;
      longArray0[0] = long0;
      long long1 = (-1677L);
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = (-9223372036854775808L);
      longArray0[3] = long3;
      long long4 = 1L;
      longArray0[4] = long4;
      long long5 = 0L;
      longArray0[5] = long5;
      long long6 = 0L;
      longArray0[6] = long6;
      char[] charArray0 = new char[10];
      char char0 = 'S';
      charArray0[0] = char0;
      char char1 = '=';
      charArray0[1] = char1;
      char char2 = 'X';
      charArray0[2] = char2;
      char char3 = 'o';
      charArray0[3] = char3;
      char char4 = '!';
      charArray0[4] = char4;
      char char5 = 'f';
      charArray0[5] = char5;
      char char6 = '3';
      charArray0[6] = char6;
      char char7 = 'd';
      charArray0[7] = char7;
      char char8 = 'i';
      charArray0[8] = char8;
      char char9 = '1';
      charArray0[9] = char9;
      TLongCharHashMap tLongCharHashMap0 = new TLongCharHashMap(longArray0, charArray0);
      assertEquals('\u0000', tLongCharHashMap0.getNoEntryValue());
      assertEquals(4, tLongCharHashMap0.size());
      assertEquals("{-9223372036854775808=o, -1677==, 1=!, 0=3}", tLongCharHashMap0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = 0L;
      longArray0[0] = long0;
      long long1 = 1179L;
      longArray0[1] = long1;
      long long2 = (-240L);
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      long long4 = 0L;
      longArray0[4] = long4;
      long long5 = 0L;
      longArray0[5] = long5;
      long long6 = (-802L);
      longArray0[6] = long6;
      long long7 = 0L;
      longArray0[7] = long7;
      char[] charArray0 = new char[4];
      char char0 = '+';
      charArray0[0] = char0;
      char char1 = '$';
      charArray0[1] = char1;
      char char2 = '{';
      charArray0[2] = char2;
      char char3 = 'K';
      charArray0[3] = char3;
      TLongCharHashMap tLongCharHashMap0 = new TLongCharHashMap(longArray0, charArray0);
      char[] charArray1 = tLongCharHashMap0.values(charArray0);
      assertEquals('\u0000', tLongCharHashMap0.getNoEntryValue());
      assertEquals(3, tLongCharHashMap0.size());
      assertEquals("{1179=$, -240={, 0=K}", tLongCharHashMap0.toString());
      assertNotNull(charArray1);
      assertEquals(17, tLongCharHashMap0.capacity());
      assertEquals(0L, tLongCharHashMap0.getNoEntryKey());
      
      int int0 = (-25);
      long long8 = (-1777L);
      char char4 = '%';
      TLongCharHashMap tLongCharHashMap1 = new TLongCharHashMap(int0, (float) int0, long8, char4);
      TCharCollection tCharCollection0 = tLongCharHashMap1.valueCollection();
      assertEquals((-1777L), tLongCharHashMap1.getNoEntryKey());
      assertEquals('%', tCharCollection0.getNoEntryValue());
  }

  @Test
  public void test2()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = 2L;
      longArray0[0] = long0;
      long long1 = 0L;
      longArray0[1] = long1;
      long long2 = (-1661L);
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      long long4 = 1L;
      longArray0[4] = long4;
      long long5 = 13L;
      longArray0[5] = long5;
      long long6 = (-1688L);
      longArray0[6] = long6;
      long long7 = 0L;
      longArray0[7] = long7;
      long long8 = (-1L);
      longArray0[8] = long8;
      char[] charArray0 = new char[4];
      char char0 = '9';
      charArray0[0] = char0;
      char char1 = 'Y';
      charArray0[1] = char1;
      char char2 = '7';
      charArray0[2] = char2;
      char char3 = 'q';
      charArray0[3] = char3;
      TLongCharHashMap tLongCharHashMap0 = new TLongCharHashMap(longArray0, charArray0);
      tLongCharHashMap0.getAutoCompactionFactor();
      assertEquals("{-1661=7, 2=9, 0=q}", tLongCharHashMap0.toString());
      assertEquals(3, tLongCharHashMap0.size());
      assertEquals(23, tLongCharHashMap0.capacity());
      
      int int0 = 0;
      float float0 = (-998.9925F);
      TLongCharHashMap tLongCharHashMap1 = new TLongCharHashMap(int0);
      assertEquals(0L, tLongCharHashMap1.getNoEntryKey());
      
      TLongCharHashMap tLongCharHashMap2 = new TLongCharHashMap(int0, float0);
      TLongCharHashMap tLongCharHashMap3 = new TLongCharHashMap((TLongCharMap) tLongCharHashMap2);
      boolean boolean0 = true;
      char char4 = 'P';
      tLongCharHashMap3.containsValue(char4);
      boolean boolean1 = tLongCharHashMap2.contains((long) char4);
      assertEquals(false, boolean1);
      
      tLongCharHashMap3.reenableAutoCompaction(boolean0);
      assertEquals(0L, tLongCharHashMap2.getNoEntryKey());
      assertEquals('\u0000', tLongCharHashMap2.getNoEntryValue());
      assertEquals(0L, tLongCharHashMap3.getNoEntryKey());
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      long[] longArray0 = new long[5];
      long long0 = (-1738L);
      longArray0[0] = long0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      long long1 = 1379L;
      longArray0[3] = long1;
      longArray0[4] = (long) int0;
      char[] charArray0 = new char[7];
      char char0 = '2';
      charArray0[0] = char0;
      char char1 = '/';
      charArray0[1] = char1;
      char char2 = 'B';
      charArray0[2] = char2;
      char char3 = 'g';
      charArray0[3] = char3;
      char char4 = 'Y';
      charArray0[4] = char4;
      char char5 = 'o';
      charArray0[5] = char5;
      char char6 = '_';
      charArray0[6] = char6;
      TLongCharHashMap tLongCharHashMap0 = new TLongCharHashMap(longArray0, charArray0);
      TLongCharHashMap tLongCharHashMap1 = new TLongCharHashMap((TLongCharMap) tLongCharHashMap0);
      TLongCharHashMap tLongCharHashMap2 = new TLongCharHashMap((TLongCharMap) tLongCharHashMap1);
      tLongCharHashMap2.iterator();
      assertEquals("{-1738=2, 1379=g, 0=Y}", tLongCharHashMap0.toString());
      assertEquals("{1379=g, -1738=2, 0=Y}", tLongCharHashMap2.toString());
      assertEquals(3, tLongCharHashMap0.size());
      
      TLongCharHashMap tLongCharHashMap3 = new TLongCharHashMap();
      TLongCharHashMap tLongCharHashMap4 = new TLongCharHashMap((TLongCharMap) tLongCharHashMap3);
      tLongCharHashMap4.isEmpty();
      TLongCharHashMap tLongCharHashMap5 = new TLongCharHashMap(int0);
      long[] longArray1 = tLongCharHashMap3.keys(tLongCharHashMap5._set);
      assertEquals(0L, tLongCharHashMap3.getNoEntryKey());
      assertEquals('\u0000', tLongCharHashMap3.getNoEntryValue());
      assertNotNull(longArray1);
      
      tLongCharHashMap5.getAutoCompactionFactor();
      assertEquals('\u0000', tLongCharHashMap5.getNoEntryValue());
      assertEquals(0L, tLongCharHashMap5.getNoEntryKey());
      assertFalse(tLongCharHashMap5.equals(tLongCharHashMap2));
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.5F;
      TLongCharHashMap tLongCharHashMap0 = new TLongCharHashMap(int0, float0);
      tLongCharHashMap0.getAutoCompactionFactor();
      assertEquals(0L, tLongCharHashMap0.getNoEntryKey());
      assertEquals('\u0000', tLongCharHashMap0.getNoEntryValue());
      
      TLongCharHashMap tLongCharHashMap1 = new TLongCharHashMap();
      tLongCharHashMap1.tempDisableAutoCompaction();
      assertEquals(0L, tLongCharHashMap1.getNoEntryKey());
      assertEquals('\u0000', tLongCharHashMap1.getNoEntryValue());
      assertEquals(23, tLongCharHashMap1.capacity());
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 149;
      long long0 = (-1353L);
      int int1 = 0;
      int int2 = 0;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) int2;
      longArray0[1] = (long) int0;
      long long1 = 0L;
      longArray0[2] = long1;
      longArray0[3] = (long) int1;
      long long2 = 0L;
      longArray0[4] = long2;
      longArray0[5] = (long) int2;
      char[] charArray0 = new char[2];
      char char0 = '!';
      charArray0[0] = char0;
      char char1 = 'k';
      charArray0[1] = char1;
      TLongCharHashMap tLongCharHashMap0 = new TLongCharHashMap(longArray0, charArray0);
      tLongCharHashMap0.toString();
      char char2 = 'F';
      TLongCharHashMap tLongCharHashMap1 = new TLongCharHashMap(int2, (float) int0, (long) int2, char2);
      String string0 = "No free or removed slots available. Key set full?!!";
      tLongCharHashMap1.keySet();
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // No free or removed slots available. Key set full?!! (No such file or directory)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = (-1L);
      longArray0[0] = long0;
      TLongCharHashMap tLongCharHashMap0 = new TLongCharHashMap();
      tLongCharHashMap0.clear();
      long long1 = 0L;
      longArray0[1] = long1;
      char[] charArray0 = new char[5];
      char char0 = 'f';
      charArray0[0] = char0;
      char char1 = 'B';
      charArray0[1] = char1;
      char char2 = '=';
      charArray0[2] = char2;
      char char3 = '_';
      charArray0[3] = char3;
      char char4 = '8';
      long long2 = (-1L);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.KOREAN;
      String string0 = locale0.getDisplayCountry(locale1);
      tLongCharHashMap0.equals((Object) string0);
      assertEquals('\u0000', tLongCharHashMap0.getNoEntryValue());
      assertEquals(0L, tLongCharHashMap0.getNoEntryKey());
      
      char char5 = '|';
      TLongCharHashMap tLongCharHashMap1 = new TLongCharHashMap((int) charArray0[3], (float) char0, long2, char5);
      tLongCharHashMap1.clear();
      charArray0[4] = char4;
      TLongCharHashMap tLongCharHashMap2 = new TLongCharHashMap((int) charArray0[2], (float) long1, (long) char1, char1);
      TLongCharHashMap tLongCharHashMap3 = null;
      try {
        tLongCharHashMap3 = new TLongCharHashMap((TLongCharMap) tLongCharHashMap2);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TLongCharHashMap tLongCharHashMap0 = new TLongCharHashMap();
      long long0 = 0L;
      tLongCharHashMap0.contains(long0);
      assertEquals(23, tLongCharHashMap0.capacity());
      
      tLongCharHashMap0.compact();
      int int0 = 143;
      long long1 = 2035L;
      TLongCharHashMap tLongCharHashMap1 = new TLongCharHashMap(int0, (float) long1);
      char char0 = '^';
      tLongCharHashMap1.containsValue(char0);
      char char1 = 'l';
      TLongCharHashMap tLongCharHashMap2 = new TLongCharHashMap(int0, (float) int0, long1, char1);
      tLongCharHashMap2.isEmpty();
      assertEquals('l', tLongCharHashMap2.getNoEntryValue());
  }

  @Test
  public void test8()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = 0L;
      longArray0[0] = long0;
      long long1 = 1754L;
      longArray0[1] = long1;
      long long2 = 987L;
      longArray0[2] = long2;
      long long3 = (-1645L);
      longArray0[3] = long3;
      char[] charArray0 = new char[7];
      char char0 = 'S';
      charArray0[0] = char0;
      char char1 = 'K';
      charArray0[1] = char1;
      char char2 = 'R';
      charArray0[2] = char2;
      char char3 = 'a';
      charArray0[3] = char3;
      char char4 = 'C';
      charArray0[4] = char4;
      char char5 = 'S';
      charArray0[5] = char5;
      char char6 = '[';
      charArray0[6] = char6;
      TLongCharHashMap tLongCharHashMap0 = new TLongCharHashMap(longArray0, charArray0);
      tLongCharHashMap0.capacity();
      int int0 = 0;
      float float0 = 0.0F;
      TLongCharHashMap tLongCharHashMap1 = new TLongCharHashMap(int0, float0);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)10;
      byteArray0[0] = byte0;
      byte byte1 = (byte)62;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      long[] longArray1 = tLongCharHashMap1._set;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-101);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-75);
      byteArray0[4] = byte4;
      File file0 = null;
      FileOutputStream fileOutputStream0 = null;
      try {
        fileOutputStream0 = new FileOutputStream(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name can't be null
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = (-1828L);
      longArray0[0] = long0;
      long long1 = 9223372036854775807L;
      longArray0[1] = long1;
      long long2 = (-1210L);
      longArray0[2] = long2;
      long long3 = 59L;
      longArray0[3] = long3;
      long long4 = 0L;
      longArray0[4] = long4;
      long long5 = 544L;
      longArray0[5] = long5;
      long long6 = 1216L;
      longArray0[6] = long6;
      long long7 = (-749L);
      longArray0[7] = long7;
      char[] charArray0 = new char[7];
      char char0 = 'N';
      charArray0[0] = char0;
      char char1 = '(';
      charArray0[1] = char1;
      char char2 = 'g';
      charArray0[2] = char2;
      char char3 = '=';
      charArray0[3] = char3;
      char char4 = 'j';
      charArray0[4] = char4;
      char char5 = '-';
      charArray0[5] = char5;
      char char6 = '/';
      charArray0[6] = char6;
      TLongCharHashMap tLongCharHashMap0 = new TLongCharHashMap(longArray0, charArray0);
      boolean boolean0 = false;
      tLongCharHashMap0.reenableAutoCompaction(boolean0);
      assertEquals("{0=j, 544=-, 59==, 1216=/, -1828=N, -1210=g, 9223372036854775807=(}", tLongCharHashMap0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[10];
      long long0 = 316L;
      longArray0[0] = long0;
      long long1 = (-1998L);
      longArray0[1] = long1;
      long long2 = 732L;
      longArray0[2] = long2;
      long long3 = (-9223372036854775808L);
      longArray0[3] = long3;
      long long4 = 1L;
      longArray0[4] = long4;
      long long5 = 0L;
      longArray0[5] = long5;
      long long6 = 0L;
      longArray0[6] = long6;
      long long7 = (-731L);
      longArray0[7] = long7;
      long long8 = (-1049L);
      longArray0[8] = long8;
      long long9 = (-6L);
      longArray0[9] = long9;
      char[] charArray0 = new char[2];
      char char0 = 'h';
      charArray0[0] = char0;
      char char1 = '%';
      charArray0[1] = char1;
      TLongCharHashMap tLongCharHashMap0 = new TLongCharHashMap(longArray0, charArray0);
      long[] longArray1 = tLongCharHashMap0._set;
      assertEquals('\u0000', tLongCharHashMap0.getNoEntryValue());
      assertEquals(0L, tLongCharHashMap0.getNoEntryKey());
      assertEquals(23, tLongCharHashMap0.capacity());
      assertEquals("{-1998=%, 316=h}", tLongCharHashMap0.toString());
      assertEquals(false, tLongCharHashMap0.isEmpty());
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-1);
      int int1 = 1324;
      float float0 = 0.0F;
      TLongCharHashMap tLongCharHashMap0 = new TLongCharHashMap(int1, float0);
      boolean boolean0 = false;
      tLongCharHashMap0.reenableAutoCompaction(boolean0);
      int int2 = (-435);
      long long0 = 0L;
      int int3 = 0;
      TLongCharHashMap tLongCharHashMap1 = new TLongCharHashMap(int3);
      tLongCharHashMap1.size();
      TLongCharMap tLongCharMap0 = null;
      TLongCharHashMap tLongCharHashMap2 = null;
      try {
        tLongCharHashMap2 = new TLongCharHashMap(tLongCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TLongCharHashMap tLongCharHashMap0 = new TLongCharHashMap();
      long long0 = 0L;
      tLongCharHashMap0.capacity();
      tLongCharHashMap0.tempDisableAutoCompaction();
      long long1 = 0L;
      tLongCharHashMap0.increment(long1);
      long long2 = 0L;
      TLongProcedure tLongProcedure0 = null;
      tLongCharHashMap0.forEachKey(tLongProcedure0);
      tLongCharHashMap0.remove(long2);
      char char0 = 'G';
      tLongCharHashMap0.forEach(tLongProcedure0);
      tLongCharHashMap0.adjustValue(long0, char0);
      tLongCharHashMap0.capacity();
      TLongCharHashMap tLongCharHashMap1 = new TLongCharHashMap((TLongCharMap) tLongCharHashMap0);
      char char1 = 'o';
      tLongCharHashMap0.clear();
      float float0 = 781.15424F;
      tLongCharHashMap0.setAutoCompactionFactor((float) long0);
      TLongCharHashMap tLongCharHashMap2 = new TLongCharHashMap((int) char1, float0);
      tLongCharHashMap0.capacity();
      tLongCharHashMap0.adjustOrPutValue(long0, char1, char1);
      assertEquals(false, tLongCharHashMap0.isEmpty());
      
      File file0 = null;
      boolean boolean0 = false;
      FileOutputStream fileOutputStream0 = null;
      try {
        fileOutputStream0 = new FileOutputStream(file0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name can't be null
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TLongCharHashMap tLongCharHashMap0 = new TLongCharHashMap();
      long[] longArray0 = new long[4];
      long long0 = 0L;
      longArray0[0] = long0;
      long long1 = 1466L;
      longArray0[1] = long1;
      long long2 = 1L;
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      long[] longArray1 = tLongCharHashMap0.keys(longArray0);
      assertNotNull(longArray1);
      
      boolean boolean0 = false;
      tLongCharHashMap0.reenableAutoCompaction(boolean0);
      char char0 = tLongCharHashMap0.getNoEntryValue();
      assertEquals('\u0000', char0);
      
      char char1 = 'd';
      tLongCharHashMap0.containsValue(char1);
      assertEquals(23, tLongCharHashMap0.capacity());
      assertEquals(0L, tLongCharHashMap0.getNoEntryKey());
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      float float0 = (-584.74097F);
      int int1 = 1467;
      TLongCharHashMap tLongCharHashMap0 = new TLongCharHashMap(int1, int0);
      TLongCharHashMap tLongCharHashMap1 = new TLongCharHashMap(int0, float0);
      char[] charArray0 = new char[10];
      char char0 = '?';
      charArray0[0] = char0;
      char char1 = 'u';
      charArray0[1] = char1;
      char char2 = '%';
      charArray0[2] = char2;
      char char3 = '0';
      charArray0[3] = char3;
      char char4 = 'B';
      charArray0[4] = char4;
      char char5 = '/';
      charArray0[5] = char5;
      char char6 = 'd';
      charArray0[6] = char6;
      char char7 = '}';
      charArray0[7] = char7;
      char char8 = '';
      charArray0[8] = char8;
      char char9 = '4';
      charArray0[9] = char9;
      char[] charArray1 = tLongCharHashMap0.values(charArray0);
      assertNotNull(charArray1);
      
      TLongCharHashMap tLongCharHashMap2 = new TLongCharHashMap((TLongCharMap) tLongCharHashMap1);
      TLongCharHashMap tLongCharHashMap3 = new TLongCharHashMap((TLongCharMap) tLongCharHashMap2);
      long long0 = tLongCharHashMap3.getNoEntryKey();
      assertEquals('\u0000', tLongCharHashMap2.getNoEntryValue());
      assertEquals(0L, long0);
  }

  @Test
  public void test15()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = 0L;
      longArray0[0] = long0;
      long long1 = (-5L);
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = (-1L);
      longArray0[3] = long3;
      long long4 = (-571L);
      longArray0[4] = long4;
      long long5 = (-77L);
      longArray0[5] = long5;
      long long6 = 0L;
      longArray0[6] = long6;
      long long7 = 0L;
      longArray0[7] = long7;
      char[] charArray0 = new char[4];
      char char0 = 't';
      charArray0[0] = char0;
      char char1 = '\"';
      charArray0[1] = char1;
      char char2 = ')';
      charArray0[2] = char2;
      char char3 = '7';
      charArray0[3] = char3;
      TLongCharHashMap tLongCharHashMap0 = new TLongCharHashMap(longArray0, charArray0);
      Locale locale0 = Locale.KOREA;
      String string0 = locale0.getDisplayName();
      tLongCharHashMap0.equals((Object) string0);
      assertEquals(0L, tLongCharHashMap0.getNoEntryKey());
      assertEquals(3, tLongCharHashMap0.size());
      assertEquals("{-1=7, -5=\", 0=)}", tLongCharHashMap0.toString());
      assertEquals('\u0000', tLongCharHashMap0.getNoEntryValue());
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = (-263);
      float float0 = 0.0F;
      TLongCharHashMap tLongCharHashMap0 = new TLongCharHashMap(int0, float0);
      char[] charArray0 = new char[7];
      char char0 = 'm';
      TLongCharHashMap tLongCharHashMap1 = null;
      try {
        tLongCharHashMap1 = new TLongCharHashMap((TLongCharMap) tLongCharHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }
}
