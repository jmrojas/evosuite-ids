/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TByteCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableByteCollection;
import gnu.trove.list.array.TByteArrayList;
import gnu.trove.map.hash.TByteObjectHashMap;
import gnu.trove.procedure.TByteProcedure;
import gnu.trove.set.hash.TByteHashSet;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteHashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TByteHash.getNoEntryValue()B: root-Branch
   * 2 gnu.trove.impl.hash.TByteHash.<init>(IFB)V: I14 Branch 4 IFEQ L122 - true
   * 3 gnu.trove.impl.hash.TByteHash.setUp(I)I: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet((-2009), (float) (byte)0, (byte)0);
      byte byte0 = tByteHashSet0.getNoEntryValue();
      assertEquals((byte)0, byte0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TByteHash.<init>(IFB)V: I14 Branch 4 IFEQ L122 - false
   */

//   @Test
//   public void test1()  throws Throwable  {
//       TByteHashSet tByteHashSet0 = new TByteHashSet(Integer.MAX_VALUE, (float) Integer.MAX_VALUE, (byte)109);
//       assertEquals(109, tByteHashSet0.getNoEntryValue());
//   }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TByteHash.contains(B)Z: I5 Branch 5 IFLT L163 - true
   * 2 gnu.trove.impl.hash.TByteHash.index(B)I: I37 Branch 9 IFNE L213 - false
   * 3 gnu.trove.impl.hash.TByteHash.<init>(IF)V: I15 Branch 3 IFEQ L103 - true
   */

  @Test
  public void test2()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet((int) (byte) (-2), 92.96667F);
      boolean boolean0 = tByteHashSet0.contains((byte) (-43));
      assertEquals(false, boolean0);
  }

  //Test case number: 3
  /*
   * 16 covered goals:
   * 1 gnu.trove.impl.hash.TByteHash.contains(B)Z: I5 Branch 5 IFLT L163 - false
   * 2 gnu.trove.impl.hash.TByteHash.insertKey(B)I: I56 Branch 19 IF_ICMPNE L270 - true
   * 3 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I28 Branch 20 IF_ICMPNE L290 - true
   * 4 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I45 Branch 22 IFGE L294 - false
   * 5 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I62 Branch 23 IFNE L300 - true
   * 6 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I62 Branch 23 IFNE L300 - false
   * 7 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I67 Branch 24 IF_ICMPEQ L301 - true
   * 8 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I97 Branch 25 IF_ICMPNE L311 - false
   * 9 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I103 Branch 26 IF_ICMPNE L311 - false
   * 10 gnu.trove.impl.hash.TByteHash.insertKeyAt(IB)V: root-Branch
   * 11 gnu.trove.impl.hash.TByteHash.index(B)I: I37 Branch 9 IFNE L213 - true
   * 12 gnu.trove.impl.hash.TByteHash.index(B)I: I46 Branch 10 IF_ICMPNE L216 - false
   * 13 gnu.trove.impl.hash.TByteHash.index(B)I: I51 Branch 11 IF_ICMPNE L216 - false
   * 14 gnu.trove.impl.hash.TByteHash.insertKey(B)I: I30 Branch 17 IFNE L263 - true
   * 15 gnu.trove.impl.hash.TByteHash.insertKey(B)I: I30 Branch 17 IFNE L263 - false
   * 16 gnu.trove.impl.hash.TByteHash.insertKey(B)I: I50 Branch 18 IF_ICMPNE L270 - false
   */

  @Test
  public void test3()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet((int) (byte) (-2), 92.96667F);
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-2);
      tByteHashSet0.addAll(byteArray0);
      boolean boolean0 = tByteHashSet0.contains((byte) (-2));
      assertEquals(2, tByteHashSet0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 4
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TByteHash.forEach(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 6 IFLE L177 - true
   * 2 gnu.trove.impl.hash.TByteHash.forEach(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 6 IFLE L177 - false
   * 3 gnu.trove.impl.hash.TByteHash.forEach(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 7 IF_ICMPNE L178 - true
   * 4 gnu.trove.impl.hash.TByteHash.<init>()V: I13 Branch 1 IFEQ L68 - true
   */

  @Test
  public void test4()  throws Throwable  {
      TByteObjectHashMap<Object> tByteObjectHashMap0 = new TByteObjectHashMap<Object>();
      boolean boolean0 = tByteObjectHashMap0.forEachKey((TByteProcedure) null);
      assertEquals(true, boolean0);
      assertEquals(23, tByteObjectHashMap0.capacity());
  }

  //Test case number: 5
  /*
   * 5 covered goals:
   * 1 gnu.trove.impl.hash.TByteHash.forEach(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 7 IF_ICMPNE L178 - false
   * 2 gnu.trove.impl.hash.TByteHash.forEach(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 6 IFLE L177 - false
   * 3 gnu.trove.impl.hash.TByteHash.forEach(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 7 IF_ICMPNE L178 - true
   * 4 gnu.trove.impl.hash.TByteHash.<init>(I)V: I14 Branch 2 IFEQ L85 - true
   * 5 gnu.trove.impl.hash.TByteHash.insertKey(B)I: I56 Branch 19 IF_ICMPNE L270 - false
   */

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      TByteArrayList tByteArrayList0 = TByteArrayList.wrap(byteArray0);
      TUnmodifiableByteCollection tUnmodifiableByteCollection0 = new TUnmodifiableByteCollection((TByteCollection) tByteArrayList0);
      TByteHashSet tByteHashSet0 = new TByteHashSet((TByteCollection) tUnmodifiableByteCollection0);
      // Undeclared exception!
      try {
        tByteHashSet0.forEach((TByteProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 6
  /*
   * 11 covered goals:
   * 1 gnu.trove.impl.hash.TByteHash.index(B)I: I51 Branch 11 IF_ICMPNE L216 - true
   * 2 gnu.trove.impl.hash.TByteHash.indexRehashed(BIIB)I: I29 Branch 12 IFGE L230 - true
   * 3 gnu.trove.impl.hash.TByteHash.indexRehashed(BIIB)I: I46 Branch 13 IFNE L235 - true
   * 4 gnu.trove.impl.hash.TByteHash.indexRehashed(BIIB)I: I58 Branch 14 IF_ICMPNE L239 - true
   * 5 gnu.trove.impl.hash.TByteHash.indexRehashed(BIIB)I: I70 Branch 16 IF_ICMPNE L241 - true
   * 6 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I45 Branch 22 IFGE L294 - true
   * 7 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I103 Branch 26 IF_ICMPNE L311 - true
   * 8 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I115 Branch 27 IF_ICMPNE L316 - true
   * 9 gnu.trove.impl.hash.TByteHash.contains(B)Z: I5 Branch 5 IFLT L163 - true
   * 10 gnu.trove.impl.hash.TByteHash.indexRehashed(BIIB)I: I29 Branch 12 IFGE L230 - false
   * 11 gnu.trove.impl.hash.TByteHash.indexRehashed(BIIB)I: I46 Branch 13 IFNE L235 - false
   */

  @Test
  public void test6()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet((int) (byte) (-2), 92.96667F);
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-2);
      byteArray0[6] = (byte) (-99);
      tByteHashSet0.addAll(byteArray0);
      boolean boolean0 = tByteHashSet0.contains((byte) (-43));
      assertEquals(3, tByteHashSet0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 7
  /*
   * 5 covered goals:
   * 1 gnu.trove.impl.hash.TByteHash.indexRehashed(BIIB)I: I58 Branch 14 IF_ICMPNE L239 - false
   * 2 gnu.trove.impl.hash.TByteHash.indexRehashed(BIIB)I: I61 Branch 15 IF_ICMPEQ L239 - false
   * 3 gnu.trove.impl.hash.TByteHash.index(B)I: I51 Branch 11 IF_ICMPNE L216 - true
   * 4 gnu.trove.impl.hash.TByteHash.contains(B)Z: I5 Branch 5 IFLT L163 - false
   * 5 gnu.trove.impl.hash.TByteHash.insertKey(B)I: I56 Branch 19 IF_ICMPNE L270 - true
   */

  @Test
  public void test7()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet((int) (byte) (-2), 92.96667F);
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-2);
      byteArray0[6] = (byte) (-99);
      tByteHashSet0.addAll(byteArray0);
      boolean boolean0 = tByteHashSet0.contains((byte) (-2));
      assertEquals(3, tByteHashSet0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 8
  /*
   * 9 covered goals:
   * 1 gnu.trove.impl.hash.TByteHash.insertKey(B)I: I50 Branch 18 IF_ICMPNE L270 - true
   * 2 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I97 Branch 25 IF_ICMPNE L311 - true
   * 3 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I115 Branch 27 IF_ICMPNE L316 - false
   * 4 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I120 Branch 28 IF_ICMPEQ L320 - true
   * 5 gnu.trove.impl.hash.TByteHash.<init>(IF)V: I15 Branch 3 IFEQ L103 - true
   * 6 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I28 Branch 20 IF_ICMPNE L290 - true
   * 7 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I67 Branch 24 IF_ICMPEQ L301 - true
   * 8 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I97 Branch 25 IF_ICMPNE L311 - false
   * 9 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I103 Branch 26 IF_ICMPNE L311 - true
   */

  @Test
  public void test8()  throws Throwable  {
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>(Integer.MAX_VALUE, Integer.MAX_VALUE);
      tByteObjectHashMap0.putIfAbsent((byte)109, "");
      assertEquals(false, tByteObjectHashMap0.isEmpty());
      
      TByteHashSet tByteHashSet0 = new TByteHashSet(Integer.MAX_VALUE, Integer.MAX_VALUE);
      tByteHashSet0._states = tByteObjectHashMap0._set;
      // Undeclared exception!
      try {
        tByteHashSet0.addAll(tByteHashSet0._states);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No free or removed slots available. Key set full?!!
         //
      }
  }

  //Test case number: 9
  /*
   * 31 covered goals:
   * 1 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I31 Branch 21 IF_ICMPNE L290 - true
   * 2 gnu.trove.impl.hash.TByteHash.removeAt(I)V: root-Branch
   * 3 gnu.trove.impl.hash.TByteHash.insertKeyAt(IB)V: root-Branch
   * 4 gnu.trove.impl.hash.TByteHash.setUp(I)I: root-Branch
   * 5 gnu.trove.impl.hash.TByteHash.<init>(I)V: I14 Branch 2 IFEQ L85 - true
   * 6 gnu.trove.impl.hash.TByteHash.indexRehashed(BIIB)I: I29 Branch 12 IFGE L230 - true
   * 7 gnu.trove.impl.hash.TByteHash.indexRehashed(BIIB)I: I29 Branch 12 IFGE L230 - false
   * 8 gnu.trove.impl.hash.TByteHash.indexRehashed(BIIB)I: I46 Branch 13 IFNE L235 - true
   * 9 gnu.trove.impl.hash.TByteHash.indexRehashed(BIIB)I: I46 Branch 13 IFNE L235 - false
   * 10 gnu.trove.impl.hash.TByteHash.indexRehashed(BIIB)I: I58 Branch 14 IF_ICMPNE L239 - true
   * 11 gnu.trove.impl.hash.TByteHash.indexRehashed(BIIB)I: I58 Branch 14 IF_ICMPNE L239 - false
   * 12 gnu.trove.impl.hash.TByteHash.indexRehashed(BIIB)I: I61 Branch 15 IF_ICMPEQ L239 - true
   * 13 gnu.trove.impl.hash.TByteHash.indexRehashed(BIIB)I: I70 Branch 16 IF_ICMPNE L241 - true
   * 14 gnu.trove.impl.hash.TByteHash.index(B)I: I37 Branch 9 IFNE L213 - true
   * 15 gnu.trove.impl.hash.TByteHash.index(B)I: I46 Branch 10 IF_ICMPNE L216 - true
   * 16 gnu.trove.impl.hash.TByteHash.index(B)I: I46 Branch 10 IF_ICMPNE L216 - false
   * 17 gnu.trove.impl.hash.TByteHash.index(B)I: I51 Branch 11 IF_ICMPNE L216 - false
   * 18 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I28 Branch 20 IF_ICMPNE L290 - false
   * 19 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I31 Branch 21 IF_ICMPNE L290 - false
   * 20 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I45 Branch 22 IFGE L294 - true
   * 21 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I45 Branch 22 IFGE L294 - false
   * 22 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I62 Branch 23 IFNE L300 - true
   * 23 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I62 Branch 23 IFNE L300 - false
   * 24 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I67 Branch 24 IF_ICMPEQ L301 - false
   * 25 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I97 Branch 25 IF_ICMPNE L311 - true
   * 26 gnu.trove.impl.hash.TByteHash.insertKeyRehash(BIIB)I: I115 Branch 27 IF_ICMPNE L316 - true
   * 27 gnu.trove.impl.hash.TByteHash.insertKey(B)I: I30 Branch 17 IFNE L263 - true
   * 28 gnu.trove.impl.hash.TByteHash.insertKey(B)I: I30 Branch 17 IFNE L263 - false
   * 29 gnu.trove.impl.hash.TByteHash.insertKey(B)I: I50 Branch 18 IF_ICMPNE L270 - true
   * 30 gnu.trove.impl.hash.TByteHash.insertKey(B)I: I50 Branch 18 IF_ICMPNE L270 - false
   * 31 gnu.trove.impl.hash.TByteHash.insertKey(B)I: I56 Branch 19 IF_ICMPNE L270 - false
   */

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)114;
      TByteHashSet tByteHashSet0 = new TByteHashSet(byteArray0);
      tByteHashSet0.removeAll(byteArray0);
      assertEquals("{}", tByteHashSet0.toString());
      
      boolean boolean0 = tByteHashSet0.addAll(byteArray0);
      assertEquals(true, boolean0);
  }
}
