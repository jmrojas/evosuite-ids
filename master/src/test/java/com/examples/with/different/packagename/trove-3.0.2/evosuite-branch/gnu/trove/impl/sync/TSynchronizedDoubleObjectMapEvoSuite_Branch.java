/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TObjectFunction;
import gnu.trove.impl.sync.TSynchronizedDoubleObjectMap;
import gnu.trove.impl.sync.TSynchronizedDoubleSet;
import gnu.trove.iterator.TDoubleObjectIterator;
import gnu.trove.map.TDoubleObjectMap;
import gnu.trove.map.hash.TDoubleObjectHashMap;
import gnu.trove.procedure.TDoubleObjectProcedure;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedDoubleObjectMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.get(D)Ljava/lang/Object;: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.<init>(Lgnu/trove/map/TDoubleObjectMap;)V: I17 Branch 1 IFNONNULL L61 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>(0);
      TSynchronizedDoubleObjectMap<Object> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      Object object0 = tSynchronizedDoubleObjectMap0.get((double) 0);
      assertNull(object0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.containsKey(D)Z: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>((int) 'J');
      TSynchronizedDoubleObjectMap<Double> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      boolean boolean0 = tSynchronizedDoubleObjectMap0.containsKey((double) 'J');
      assertEquals(false, boolean0);
  }

  //Test case number: 2
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.forEachEntry(Lgnu/trove/procedure/TDoubleObjectProcedure;)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.size()I: root-Branch
   * 3 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.<init>(Lgnu/trove/map/TDoubleObjectMap;Ljava/lang/Object;)V: root-Branch
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.getNoEntryKey()D: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>((-1109), (-1109));
      TSynchronizedDoubleObjectMap<Integer> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap0, (Object) ":");
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Integer>((TDoubleObjectMap<? extends Integer>) tSynchronizedDoubleObjectMap0);
      assertNotSame(tDoubleObjectHashMap1, tDoubleObjectHashMap0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.clear()V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>(37);
      TSynchronizedDoubleObjectMap<Double> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      tSynchronizedDoubleObjectMap0.clear();
      assertEquals("{}", tSynchronizedDoubleObjectMap0.toString());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.containsValue(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>();
      TSynchronizedDoubleObjectMap<Object> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      boolean boolean0 = tSynchronizedDoubleObjectMap0.containsValue((Object) tDoubleObjectHashMap0);
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>();
      TSynchronizedDoubleObjectMap<Double> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0, (Object) "\u4E2D\u56FD");
      boolean boolean0 = tSynchronizedDoubleObjectMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.remove(D)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>((int) 'J');
      TSynchronizedDoubleObjectMap<Object> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      Object object0 = tSynchronizedDoubleObjectMap0.remove((double) 'J');
      assertNull(object0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.retainEntries(Lgnu/trove/procedure/TDoubleObjectProcedure;)Z: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TDoubleObjectHashMap<String> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<String>();
      TSynchronizedDoubleObjectMap<String> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<String>((TDoubleObjectMap<String>) tDoubleObjectHashMap0);
      boolean boolean0 = tSynchronizedDoubleObjectMap0.retainEntries((TDoubleObjectProcedure<? super String>) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.equals(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>(0);
      TSynchronizedDoubleObjectMap<Object> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0, (Object) "\u4E2D\u56FD");
      boolean boolean0 = tSynchronizedDoubleObjectMap0.equals((Object) "\u4E2D\u56FD");
      assertEquals(false, boolean0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>((-1109), (-1109));
      TSynchronizedDoubleObjectMap<Integer> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap0, (Object) ":");
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      tSynchronizedDoubleObjectMap0.putAll((Map<? extends Double, ? extends Integer>) hashMap0);
      assertEquals(true, tSynchronizedDoubleObjectMap0.isEmpty());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.put(DLjava/lang/Object;)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>(37);
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Integer>();
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap2 = new TDoubleObjectHashMap<Object>(37, 37, 37);
      TSynchronizedDoubleObjectMap<Object> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap2, (Object) tDoubleObjectHashMap1);
      tSynchronizedDoubleObjectMap0.put((double) 37, (Object) tDoubleObjectHashMap0);
      assertEquals(1, tDoubleObjectHashMap2.size());
      assertEquals("{37.0={}}", tDoubleObjectHashMap2.toString());
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.putAll(Lgnu/trove/map/TDoubleObjectMap;)V: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>(37);
      TSynchronizedDoubleObjectMap<Double> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      tSynchronizedDoubleObjectMap0.putAll((TDoubleObjectMap<? extends Double>) tDoubleObjectHashMap0);
      assertEquals("{}", tSynchronizedDoubleObjectMap0.toString());
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>((-1109), (-1109));
      TSynchronizedDoubleObjectMap<Integer> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap0, (Object) ":");
      Object[] objectArray0 = new Object[6];
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(objectArray0);
      boolean boolean0 = tSynchronizedDoubleObjectMap0.forEachValue((TObjectProcedure<? super Integer>) toObjectArrayProceedure0);
      assertEquals(true, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>(0, 0.5F, (double) 0.5F);
      TSynchronizedDoubleObjectMap<Double> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      Double[] doubleArray0 = new Double[9];
      Double[] doubleArray1 = tSynchronizedDoubleObjectMap0.values(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.keys([D)[D: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TDoubleObjectHashMap<String> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<String>();
      TSynchronizedDoubleObjectMap<String> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<String>((TDoubleObjectMap<String>) tDoubleObjectHashMap0);
      double[] doubleArray0 = tSynchronizedDoubleObjectMap0.keys(tDoubleObjectHashMap0._set);
      assertNotNull(doubleArray0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>();
      TSynchronizedDoubleObjectMap<Integer> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap0);
      boolean boolean0 = tSynchronizedDoubleObjectMap0.forEachKey((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.putIfAbsent(DLjava/lang/Object;)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>();
      TSynchronizedDoubleObjectMap<Double> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0, (Object) "\u4E2D\u56FD");
      tSynchronizedDoubleObjectMap0.putIfAbsent((-290.31149318424616), (Double) (-290.31149318424616));
      assertEquals(false, tDoubleObjectHashMap0.isEmpty());
      assertEquals("{-290.31149318424616=-290.31149318424616}", tSynchronizedDoubleObjectMap0.toString());
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.values()[Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>(0);
      TSynchronizedDoubleObjectMap<Object> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0, (Object) "\u4E2D\u56FD");
      Object[] objectArray0 = tSynchronizedDoubleObjectMap0.values();
      assertNotNull(objectArray0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TDoubleObjectHashMap<String> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<String>();
      TSynchronizedDoubleObjectMap<String> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<String>((TDoubleObjectMap<String>) tDoubleObjectHashMap0);
      String string0 = tSynchronizedDoubleObjectMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.keys()[D: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>((-1109), (-1109));
      TSynchronizedDoubleObjectMap<Integer> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap0, (Object) ":");
      double[] doubleArray0 = tSynchronizedDoubleObjectMap0.keys();
      assertNotNull(doubleArray0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.iterator()Lgnu/trove/iterator/TDoubleObjectIterator;: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>((int) 'J');
      TSynchronizedDoubleObjectMap<Double> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      TDoubleObjectIterator<Double> tDoubleObjectIterator0 = tSynchronizedDoubleObjectMap0.iterator();
      assertEquals(false, tDoubleObjectIterator0.hasNext());
  }

  //Test case number: 21
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.<init>(Lgnu/trove/map/TDoubleObjectMap;)V: I17 Branch 1 IFNONNULL L61 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>((-11));
      TSynchronizedDoubleObjectMap<Double> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      tSynchronizedDoubleObjectMap0.transformValues((TObjectFunction<Double, Double>) null);
      assertEquals(0.0, tSynchronizedDoubleObjectMap0.getNoEntryKey(), 0.01D);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.hashCode()I: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>(0);
      TSynchronizedDoubleObjectMap<Object> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0, (Object) "\u4E2D\u56FD");
      int int0 = tSynchronizedDoubleObjectMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.<init>(Lgnu/trove/map/TDoubleObjectMap;)V: I17 Branch 1 IFNONNULL L61 - false
   */

  @Test
  public void test23()  throws Throwable  {
      TSynchronizedDoubleObjectMap<String> tSynchronizedDoubleObjectMap0 = null;
      try {
        tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<String>((TDoubleObjectMap<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 24
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;: I11 Branch 2 IFNONNULL L109 - true
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;: I11 Branch 2 IFNONNULL L109 - false
   */

  @Test
  public void test24()  throws Throwable  {
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>(0, 0);
      TSynchronizedDoubleObjectMap<Integer> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap0, (Object) "\u4E2D\u56FD");
      TSynchronizedDoubleSet tSynchronizedDoubleSet0 = (TSynchronizedDoubleSet)tSynchronizedDoubleObjectMap0.keySet();
      assertNotNull(tSynchronizedDoubleSet0);
      
      TSynchronizedDoubleSet tSynchronizedDoubleSet1 = (TSynchronizedDoubleSet)tSynchronizedDoubleObjectMap0.keySet();
      assertSame(tSynchronizedDoubleSet1, tSynchronizedDoubleSet0);
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.valueCollection()Ljava/util/Collection;: I11 Branch 3 IFNONNULL L123 - true
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.valueCollection()Ljava/util/Collection;: I11 Branch 3 IFNONNULL L123 - false
   * 3 gnu.trove.impl.sync.TSynchronizedDoubleObjectMap.<init>(Lgnu/trove/map/TDoubleObjectMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>();
      TSynchronizedDoubleObjectMap<Double> tSynchronizedDoubleObjectMap0 = new TSynchronizedDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0, (Object) "\u4E2D\u56FD");
      Collection<Double> collection0 = tSynchronizedDoubleObjectMap0.valueCollection();
      assertNotNull(collection0);
      
      Collection<Double> collection1 = tSynchronizedDoubleObjectMap0.valueCollection();
      assertSame(collection1, collection0);
  }
}
