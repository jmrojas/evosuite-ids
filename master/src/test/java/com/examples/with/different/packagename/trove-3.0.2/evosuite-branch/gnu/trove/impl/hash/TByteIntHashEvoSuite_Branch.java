/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.hash.TByteIntHashMap;
import gnu.trove.procedure.TByteProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteIntHashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TByteIntHash.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   * 2 gnu.trove.impl.hash.TByteIntHash.setUp(I)I: root-Branch
   * 3 gnu.trove.impl.hash.TByteIntHash.<init>(IFBI)V: root-Branch
   */

//   @Test
//   public void test0()  throws Throwable  {
//       TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(124, (float) 124, (byte) (-67), 124);
//       ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
//       ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
//       tByteIntHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
//       assertEquals(-67, tByteIntHashMap0.getNoEntryKey());
//       assertEquals(124, tByteIntHashMap0.getNoEntryValue());
//   }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TByteIntHash.<init>(IF)V: root-Branch
   */

//   @Test
//   public void test1()  throws Throwable  {
//       TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap((-1462), (-1462));
//       assertEquals(0, tByteIntHashMap0.getNoEntryKey());
//       assertEquals(0, tByteIntHashMap0.getNoEntryValue());
//   }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TByteIntHash.getNoEntryValue()I: root-Branch
   * 2 gnu.trove.impl.hash.TByteIntHash.<init>(I)V: root-Branch
   */

//   @Test
//   public void test2()  throws Throwable  {
//       TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap((-2024));
//       int int0 = tByteIntHashMap0.getNoEntryValue();
//       assertEquals(0, tByteIntHashMap0.getNoEntryKey());
//       assertEquals(0, int0);
//   }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TByteIntHash.getNoEntryKey()B: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap((-1462));
      byte byte0 = tByteIntHashMap0.getNoEntryKey();
      assertEquals(0, tByteIntHashMap0.getNoEntryValue());
      assertEquals((byte)0, byte0);
  }

  //Test case number: 4
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.TByteIntHash.removeAt(I)V: root-Branch
   * 2 gnu.trove.impl.hash.TByteIntHash.index(B)I: I37 Branch 5 IFNE L228 - true
   * 3 gnu.trove.impl.hash.TByteIntHash.index(B)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 4 gnu.trove.impl.hash.TByteIntHash.index(B)I: I51 Branch 7 IF_ICMPNE L231 - false
   * 5 gnu.trove.impl.hash.TByteIntHash.insertKeyAt(IB)V: root-Branch
   * 6 gnu.trove.impl.hash.TByteIntHash.insertKey(B)I: I30 Branch 13 IFNE L279 - false
   */

  @Test
  public void test4()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap((-1462));
      tByteIntHashMap0.putIfAbsent((byte) (-112), (-1462));
      assertEquals(1, tByteIntHashMap0.size());
      
      int int0 = tByteIntHashMap0.remove((byte) (-112));
      assertEquals((-1462), int0);
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TByteIntHash.contains(B)Z: I5 Branch 1 IFLT L178 - true
   * 2 gnu.trove.impl.hash.TByteIntHash.index(B)I: I37 Branch 5 IFNE L228 - false
   * 3 gnu.trove.impl.hash.TByteIntHash.<init>()V: root-Branch
   */

//   @Test
//   public void test5()  throws Throwable  {
//       TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap();
//       boolean boolean0 = tByteIntHashMap0.contains((byte)46);
//       assertEquals(0, tByteIntHashMap0.getNoEntryKey());
//       assertEquals(23, tByteIntHashMap0.capacity());
//       assertEquals(0, tByteIntHashMap0.getNoEntryValue());
//       assertEquals(false, boolean0);
//   }

  //Test case number: 6
  /*
   * 5 covered goals:
   * 1 gnu.trove.impl.hash.TByteIntHash.contains(B)Z: I5 Branch 1 IFLT L178 - false
   * 2 gnu.trove.impl.hash.TByteIntHash.insertKey(B)I: I30 Branch 13 IFNE L279 - true
   * 3 gnu.trove.impl.hash.TByteIntHash.insertKey(B)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 4 gnu.trove.impl.hash.TByteIntHash.insertKey(B)I: I56 Branch 15 IF_ICMPNE L286 - false
   * 5 gnu.trove.impl.hash.TByteIntHash.index(B)I: I51 Branch 7 IF_ICMPNE L231 - false
   */

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      int[] intArray0 = new int[10];
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(byteArray0, intArray0);
      boolean boolean0 = tByteIntHashMap0.contains((byte)0);
      assertEquals(true, boolean0);
      assertEquals(23, tByteIntHashMap0.capacity());
      assertEquals(0, tByteIntHashMap0.getNoEntryValue());
      assertEquals(1, tByteIntHashMap0.size());
  }

  //Test case number: 7
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TByteIntHash.forEach(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 2 IFLE L192 - true
   * 2 gnu.trove.impl.hash.TByteIntHash.forEach(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TByteIntHash.forEach(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

//   @Test
//   public void test7()  throws Throwable  {
//       TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap();
//       boolean boolean0 = tByteIntHashMap0.forEach((TByteProcedure) null);
//       assertEquals(true, boolean0);
//       assertEquals(23, tByteIntHashMap0.capacity());
//       assertEquals(0, tByteIntHashMap0.getNoEntryValue());
//       assertEquals(0, tByteIntHashMap0.getNoEntryKey());
//   }

  //Test case number: 8
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TByteIntHash.forEach(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - false
   * 2 gnu.trove.impl.hash.TByteIntHash.<init>()V: root-Branch
   * 3 gnu.trove.impl.hash.TByteIntHash.forEach(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 4 gnu.trove.impl.hash.TByteIntHash.forEach(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

  @Test
  public void test8()  throws Throwable  {
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap();
      tByteIntHashMap0.adjustOrPutValue((byte)29, (byte)29, (byte)29);
      // Undeclared exception!
      try {
        tByteIntHashMap0.forEach((TByteProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 16 covered goals:
   * 1 gnu.trove.impl.hash.TByteIntHash.index(B)I: I51 Branch 7 IF_ICMPNE L231 - true
   * 2 gnu.trove.impl.hash.TByteIntHash.indexRehashed(BIIB)I: I46 Branch 9 IFNE L250 - true
   * 3 gnu.trove.impl.hash.TByteIntHash.indexRehashed(BIIB)I: I58 Branch 10 IF_ICMPNE L254 - false
   * 4 gnu.trove.impl.hash.TByteIntHash.indexRehashed(BIIB)I: I61 Branch 11 IF_ICMPEQ L254 - false
   * 5 gnu.trove.impl.hash.TByteIntHash.insertKey(B)I: I56 Branch 15 IF_ICMPNE L286 - true
   * 6 gnu.trove.impl.hash.TByteIntHash.insertKeyRehash(BIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 7 gnu.trove.impl.hash.TByteIntHash.insertKeyRehash(BIIB)I: I45 Branch 18 IFGE L310 - false
   * 8 gnu.trove.impl.hash.TByteIntHash.insertKeyRehash(BIIB)I: I62 Branch 19 IFNE L316 - true
   * 9 gnu.trove.impl.hash.TByteIntHash.insertKeyRehash(BIIB)I: I62 Branch 19 IFNE L316 - false
   * 10 gnu.trove.impl.hash.TByteIntHash.insertKeyRehash(BIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 11 gnu.trove.impl.hash.TByteIntHash.insertKeyRehash(BIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 12 gnu.trove.impl.hash.TByteIntHash.insertKeyRehash(BIIB)I: I103 Branch 22 IF_ICMPNE L327 - false
   * 13 gnu.trove.impl.hash.TByteIntHash.index(B)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 14 gnu.trove.impl.hash.TByteIntHash.contains(B)Z: I5 Branch 1 IFLT L178 - false
   * 15 gnu.trove.impl.hash.TByteIntHash.insertKey(B)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 16 gnu.trove.impl.hash.TByteIntHash.indexRehashed(BIIB)I: I29 Branch 8 IFGE L245 - false
   */

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)46;
      int[] intArray0 = new int[10];
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap(byteArray0, intArray0);
      boolean boolean0 = tByteIntHashMap0.contains((byte)0);
      assertEquals("{0=0, 46=0}", tByteIntHashMap0.toString());
      assertEquals(true, boolean0);
      assertEquals(2, tByteIntHashMap0.size());
  }

  //Test case number: 10
  /*
   * 5 covered goals:
   * 1 gnu.trove.impl.hash.TByteIntHash.indexRehashed(BIIB)I: I29 Branch 8 IFGE L245 - true
   * 2 gnu.trove.impl.hash.TByteIntHash.indexRehashed(BIIB)I: I58 Branch 10 IF_ICMPNE L254 - true
   * 3 gnu.trove.impl.hash.TByteIntHash.indexRehashed(BIIB)I: I70 Branch 12 IF_ICMPNE L256 - true
   * 4 gnu.trove.impl.hash.TByteIntHash.indexRehashed(BIIB)I: I46 Branch 9 IFNE L250 - false
   * 5 gnu.trove.impl.hash.TByteIntHash.index(B)I: I46 Branch 6 IF_ICMPNE L231 - true
   */

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-114);
      byteArray0[2] = (byte) (-114);
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap((-2024));
      tByteIntHashMap0._states = byteArray0;
      boolean boolean0 = tByteIntHashMap0.increment((byte)60);
      assertEquals(false, boolean0);
  }

  //Test case number: 11
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.hash.TByteIntHash.indexRehashed(BIIB)I: I70 Branch 12 IF_ICMPNE L256 - false
   * 2 gnu.trove.impl.hash.TByteIntHash.indexRehashed(BIIB)I: I29 Branch 8 IFGE L245 - true
   * 3 gnu.trove.impl.hash.TByteIntHash.indexRehashed(BIIB)I: I29 Branch 8 IFGE L245 - false
   * 4 gnu.trove.impl.hash.TByteIntHash.indexRehashed(BIIB)I: I46 Branch 9 IFNE L250 - true
   * 5 gnu.trove.impl.hash.TByteIntHash.indexRehashed(BIIB)I: I58 Branch 10 IF_ICMPNE L254 - true
   * 6 gnu.trove.impl.hash.TByteIntHash.indexRehashed(BIIB)I: I70 Branch 12 IF_ICMPNE L256 - true
   * 7 gnu.trove.impl.hash.TByteIntHash.index(B)I: I37 Branch 5 IFNE L228 - true
   * 8 gnu.trove.impl.hash.TByteIntHash.index(B)I: I46 Branch 6 IF_ICMPNE L231 - true
   */

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-114);
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap((-2024));
      tByteIntHashMap0._states = byteArray0;
      boolean boolean0 = tByteIntHashMap0.increment((byte)60);
      assertEquals(0, tByteIntHashMap0.getNoEntryValue());
      assertEquals(false, boolean0);
  }

  //Test case number: 12
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.TByteIntHash.insertKeyRehash(BIIB)I: I103 Branch 22 IF_ICMPNE L327 - true
   * 2 gnu.trove.impl.hash.TByteIntHash.insertKey(B)I: I30 Branch 13 IFNE L279 - false
   * 3 gnu.trove.impl.hash.TByteIntHash.insertKeyRehash(BIIB)I: I45 Branch 18 IFGE L310 - true
   * 4 gnu.trove.impl.hash.TByteIntHash.insertKeyRehash(BIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 5 gnu.trove.impl.hash.TByteIntHash.insertKeyRehash(BIIB)I: I115 Branch 23 IF_ICMPNE L332 - true
   * 6 gnu.trove.impl.hash.TByteIntHash.insertKey(B)I: I50 Branch 14 IF_ICMPNE L286 - true
   */

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-114);
      byteArray0[3] = (byte) (-114);
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap((-2024));
      tByteIntHashMap0._states = byteArray0;
      byteArray0[4] = (byte)60;
      tByteIntHashMap0.putIfAbsent((byte)10, (byte)10);
      tByteIntHashMap0.put((byte)24, (byte)24);
      assertEquals(2, tByteIntHashMap0.size());
      assertEquals(17, tByteIntHashMap0.capacity());
  }

  //Test case number: 13
  /*
   * 17 covered goals:
   * 1 gnu.trove.impl.hash.TByteIntHash.insertKeyRehash(BIIB)I: I115 Branch 23 IF_ICMPNE L332 - false
   * 2 gnu.trove.impl.hash.TByteIntHash.insertKeyRehash(BIIB)I: I120 Branch 24 IF_ICMPEQ L336 - true
   * 3 gnu.trove.impl.hash.TByteIntHash.setUp(I)I: root-Branch
   * 4 gnu.trove.impl.hash.TByteIntHash.insertKeyAt(IB)V: root-Branch
   * 5 gnu.trove.impl.hash.TByteIntHash.<init>(I)V: root-Branch
   * 6 gnu.trove.impl.hash.TByteIntHash.insertKeyRehash(BIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 7 gnu.trove.impl.hash.TByteIntHash.insertKeyRehash(BIIB)I: I45 Branch 18 IFGE L310 - true
   * 8 gnu.trove.impl.hash.TByteIntHash.insertKeyRehash(BIIB)I: I45 Branch 18 IFGE L310 - false
   * 9 gnu.trove.impl.hash.TByteIntHash.insertKeyRehash(BIIB)I: I62 Branch 19 IFNE L316 - true
   * 10 gnu.trove.impl.hash.TByteIntHash.insertKeyRehash(BIIB)I: I62 Branch 19 IFNE L316 - false
   * 11 gnu.trove.impl.hash.TByteIntHash.insertKeyRehash(BIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 12 gnu.trove.impl.hash.TByteIntHash.insertKeyRehash(BIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 13 gnu.trove.impl.hash.TByteIntHash.insertKeyRehash(BIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 14 gnu.trove.impl.hash.TByteIntHash.insertKeyRehash(BIIB)I: I103 Branch 22 IF_ICMPNE L327 - true
   * 15 gnu.trove.impl.hash.TByteIntHash.insertKeyRehash(BIIB)I: I115 Branch 23 IF_ICMPNE L332 - true
   * 16 gnu.trove.impl.hash.TByteIntHash.insertKey(B)I: I30 Branch 13 IFNE L279 - true
   * 17 gnu.trove.impl.hash.TByteIntHash.insertKey(B)I: I50 Branch 14 IF_ICMPNE L286 - true
   */

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)60;
      byteArray0[3] = (byte) (-114);
      TByteIntHashMap tByteIntHashMap0 = new TByteIntHashMap((-2024));
      tByteIntHashMap0._states = byteArray0;
      byteArray0[4] = (byte)60;
      tByteIntHashMap0.putIfAbsent((byte)10, (byte)10);
      // Undeclared exception!
      try {
        tByteIntHashMap0.put((byte)24, (byte)24);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No free or removed slots available. Key set full?!!
         //
      }
  }
}
