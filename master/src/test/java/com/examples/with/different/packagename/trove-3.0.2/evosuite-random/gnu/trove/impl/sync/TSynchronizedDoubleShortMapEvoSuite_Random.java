/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedDoubleShortMap;
import gnu.trove.map.TDoubleShortMap;
import gnu.trove.map.hash.TDoubleShortHashMap;
import gnu.trove.procedure.TShortProcedure;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedDoubleShortMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://?#
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-1478);
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0);
      Locale locale0 = Locale.GERMAN;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      tDoubleShortHashMap0.isEmpty();
      String string0 = "AST@7>xjH>kZtCcDb";
      File file0 = new File(string0);
      String string1 = file0.getPath();
      String string2 = tDoubleShortHashMap0.toString();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0, (Object) string2);
      short[] shortArray0 = new short[9];
      short short0 = (short) (-918);
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)929;
      shortArray0[2] = short2;
      short short3 = (short) (-1);
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short) (-1635);
      shortArray0[5] = short5;
      short short6 = (short)379;
      shortArray0[6] = short6;
      short short7 = (short)0;
      shortArray0[7] = short7;
      short short8 = (short)0;
      shortArray0[8] = short8;
      tSynchronizedDoubleShortMap0.values(shortArray0);
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap1 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0, (Object) string1);
      double double0 = 299.69043898461524;
      short short9 = (short)1471;
      tSynchronizedDoubleShortMap1.put(double0, short9);
      Locale locale1 = null;
      tDoubleShortHashMap0.containsKey((double) int0);
      // Undeclared exception!
      try {
        Locale.setDefault(locale_Category0, locale1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can't set default locale to NULL
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-38);
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0, int0);
      String string0 = "-AZrPjo/;4+!9";
      URI uRI0 = new URI(string0);
      String string1 = uRI0.getHost();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0, (Object) string1);
      short short0 = tSynchronizedDoubleShortMap0.getNoEntryValue();
      assertEquals((short)0, short0);
  }

  @Test
  public void test3()  throws Throwable  {
      TDoubleShortMap tDoubleShortMap0 = null;
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = null;
      try {
        tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap(tDoubleShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 439.3319037235683;
      doubleArray0[2] = double2;
      short[] shortArray0 = new short[7];
      short short0 = (short) (-1028);
      shortArray0[0] = short0;
      short short1 = (short)36;
      shortArray0[1] = short1;
      short short2 = (short)5471;
      shortArray0[2] = short2;
      short short3 = (short)493;
      shortArray0[3] = short3;
      short short4 = (short)1183;
      shortArray0[4] = short4;
      short short5 = (short)64;
      shortArray0[5] = short5;
      short short6 = (short)2045;
      shortArray0[6] = short6;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      tSynchronizedDoubleShortMap0.putAll((TDoubleShortMap) tDoubleShortHashMap0);
      int int0 = (-695);
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap(int0);
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap1 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap1);
      assertEquals(true, tSynchronizedDoubleShortMap1.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 1441;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      String string0 = File.pathSeparator;
      double double0 = Double.POSITIVE_INFINITY;
      Double double1 = new Double(double0);
      hashMap0.put((Object) string0, double1);
      Locale locale0 = Locale.US;
      char char0 = 'a';
      String string1 = locale0.getExtension(char0);
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0, (Object) string1);
      // Undeclared exception!
      try {
        tSynchronizedDoubleShortMap0.keys(tDoubleShortHashMap0._set);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-1969);
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0);
      String string0 = "at offset ";
      Locale locale0 = Locale.forLanguageTag(string0);
      Locale locale1 = Locale.CHINESE;
      String string1 = locale0.getDisplayLanguage(locale1);
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0, (Object) string1);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 2: at offset :#
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      float float0 = (-1394.5542F);
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      tSynchronizedDoubleShortMap0.iterator();
      double double0 = 492.08929273382887;
      short short0 = (short) (-1463);
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap(int0, float0, double0, short0);
      Locale locale0 = Locale.KOREAN;
      String string0 = locale0.getDisplayScript();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap1 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap1, (Object) string0);
      // Undeclared exception!
      try {
        locale0.getUnicodeLocaleType(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 116;
      float float0 = (-1110.2795F);
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0, float0);
      String string0 = ">";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      float float0 = 1247.028F;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int0;
      double double0 = 1953.5142204799847;
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) float0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) float0;
      short[] shortArray0 = new short[8];
      short short0 = (short)50;
      shortArray0[0] = short0;
      short short1 = (short)1394;
      shortArray0[1] = short1;
      short short2 = (short)155;
      shortArray0[2] = short2;
      short short3 = (short)1730;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short) (-1);
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short) (-1);
      shortArray0[7] = short7;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      tSynchronizedDoubleShortMap0.containsValue(shortArray0[5]);
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap(int0, float0);
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap1 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap1);
      tDoubleShortHashMap1.capacity();
      tSynchronizedDoubleShortMap1.clear();
      tSynchronizedDoubleShortMap1.keySet();
      double double1 = tSynchronizedDoubleShortMap1.getNoEntryKey();
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      double double1 = 0.0;
      doubleArray0[0] = double1;
      double double2 = 0.0;
      doubleArray0[1] = double2;
      double double3 = (-792.0736944998603);
      doubleArray0[2] = double3;
      double double4 = (-840.5002293978907);
      doubleArray0[3] = double4;
      double double5 = 0.0;
      doubleArray0[4] = double5;
      double double6 = 1135.2411960458978;
      doubleArray0[5] = double6;
      short[] shortArray0 = new short[3];
      short short0 = (short)226;
      shortArray0[0] = short0;
      short short1 = (short)3821;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap((int) short2);
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string0 = locale0.getLanguage();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap1 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap1, (Object) string0);
      TShortProcedure tShortProcedure0 = null;
      // Undeclared exception!
      try {
        tSynchronizedDoubleShortMap1.forEachValue(tShortProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TDoubleShortMap tDoubleShortMap0 = null;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale0 = Locale.getDefault(locale_Category0);
      String string0 = locale0.getDisplayScript();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap(tDoubleShortMap0, (Object) string0);
      double double0 = 1657.2333352523378;
      // Undeclared exception!
      try {
        tSynchronizedDoubleShortMap0.remove(double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1952;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0, int0);
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap((TDoubleShortMap) tDoubleShortHashMap0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getVariant();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap1, (Object) string0);
      tSynchronizedDoubleShortMap0.putAll((TDoubleShortMap) tDoubleShortHashMap0);
      assertEquals(true, tDoubleShortHashMap0.isEmpty());
  }

  @Test
  public void test13()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap((TDoubleShortMap) tDoubleShortHashMap0);
      String string0 = " greater than end index ";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 0:  greater than end index 
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      Object object0 = null;
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0, object0);
      // Undeclared exception!
      try {
        tSynchronizedDoubleShortMap0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = (-1.0);
      doubleArray0[1] = double1;
      double double2 = (-1503.330194651479);
      doubleArray0[2] = double2;
      double double3 = (-130.0458410116466);
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = (-1177.6329145401382);
      doubleArray0[5] = double5;
      double double6 = 836.3716003632381;
      doubleArray0[6] = double6;
      double double7 = 0.0;
      doubleArray0[7] = double7;
      double double8 = 0.0;
      doubleArray0[8] = double8;
      double double9 = Double.POSITIVE_INFINITY;
      doubleArray0[9] = double9;
      short[] shortArray0 = new short[10];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)92;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)465;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)0;
      shortArray0[7] = short7;
      short short8 = (short) (-1401);
      shortArray0[8] = short8;
      short short9 = (short)81;
      shortArray0[9] = short9;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap((TDoubleShortMap) tDoubleShortHashMap0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = byteArrayOutputStream0.toString();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap1, (Object) string0);
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap1 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tSynchronizedDoubleShortMap0);
      double[] doubleArray1 = tSynchronizedDoubleShortMap1.keys(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 495;
      float float0 = (-1.0F);
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0, float0);
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap((TDoubleShortMap) tDoubleShortHashMap0);
      String string0 = "";
      Locale locale0 = Locale.forLanguageTag(string0);
      String string1 = locale0.toLanguageTag();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap1, (Object) string1);
      assertEquals(0.0, tSynchronizedDoubleShortMap0.getNoEntryKey(), 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1782.2871533156788);
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      short[] shortArray0 = new short[4];
      short short0 = (short)10951;
      shortArray0[0] = short0;
      short short1 = (short) (-992);
      int int0 = (-1);
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0);
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      tSynchronizedDoubleShortMap0.clear();
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short) (-705);
      shortArray0[3] = short3;
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://?#
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 0;
      short short0 = (short) (-1101);
      float float0 = 0.0F;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap((int) short0, float0, (double) int0, short0);
      String string0 = "a2%;f>\\bG";
      File file0 = new File(string0, string0);
      URI uRI0 = file0.toURI();
      File file1 = new File(uRI0);
      String string1 = file1.getPath();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0, (Object) string1);
      short short1 = (short)187;
      String string2 = Short.toString(short1);
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap1 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tSynchronizedDoubleShortMap0, (Object) string2);
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap(int0, (float) int0, (double) int0, short0);
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap2 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap1);
      tSynchronizedDoubleShortMap2.containsValue(short0);
      TDoubleShortHashMap tDoubleShortHashMap2 = new TDoubleShortHashMap(int0);
      Object object0 = null;
      tSynchronizedDoubleShortMap2.size();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap3 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap2, object0);
      // Undeclared exception!
      try {
        tSynchronizedDoubleShortMap3.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TDoubleShortMap tDoubleShortMap0 = null;
          String string0 = "T7`RJl+{qz-";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
