/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TShortCollection;
import gnu.trove.map.TLongShortMap;
import gnu.trove.map.hash.TLongShortHashMap;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.StreamCorruptedException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TLongShortHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-1);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      long long0 = 209L;
      longArray0[2] = long0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      short[] shortArray0 = new short[5];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)1934;
      shortArray0[2] = short2;
      short short3 = (short)1;
      shortArray0[3] = short3;
      short short4 = (short)10;
      shortArray0[4] = short4;
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(longArray0, shortArray0);
      TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap((TLongShortMap) tLongShortHashMap0);
      long long1 = 0L;
      tLongShortHashMap1.remove(long1);
      long[] longArray1 = new long[2];
      longArray1[0] = (long) int0;
      longArray1[1] = (long) int0;
      short[] shortArray1 = new short[1];
      short short5 = (short) (-1);
      shortArray1[0] = short5;
      TLongShortHashMap tLongShortHashMap2 = new TLongShortHashMap(longArray1, shortArray1);
      short short6 = (short) (-1440);
      tLongShortHashMap2.putIfAbsent(longArray1[0], short6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tLongShortHashMap2._states);
      assertEquals(5, byteArrayInputStream0.available());
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 01000000
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 14488931;
      float float0 = 162.5946F;
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(int0, float0);
      tLongShortHashMap0.toString();
      tLongShortHashMap0.keys();
      TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap((TLongShortMap) tLongShortHashMap0);
      short short0 = (short)1039;
      tLongShortHashMap0.adjustOrPutValue((long) int0, short0, short0);
      tLongShortHashMap1.compact();
      Locale locale0 = Locale.JAPAN;
      long long0 = 211L;
      tLongShortHashMap1.remove(long0);
      String string0 = locale0.getScript();
      tLongShortHashMap0.getNoEntryValue();
      AbstractMap.SimpleEntry<Object, TLongShortHashMap> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, TLongShortHashMap>((Object) string0, tLongShortHashMap0);
      abstractMap_SimpleEntry0.getValue();
      URI uRI0 = new URI(string0);
      File file0 = null;
      try {
        file0 = new File(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 619;
      short short0 = (short) (-759);
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(int0, (float) int0, (long) int0, short0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)111;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-44);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-117);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-2);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      tLongShortHashMap0._states = byteArray0;
      TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap();
      tLongShortHashMap1.getAutoCompactionFactor();
      long long0 = (-1L);
      tLongShortHashMap1.get(long0);
      tLongShortHashMap1.keySet();
      String string0 = tLongShortHashMap1.toString();
      assertNotNull(string0);
      assertEquals(23, tLongShortHashMap1.capacity());
      assertEquals("{}", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      long[] longArray0 = new long[10];
      long long0 = (-1127L);
      longArray0[0] = long0;
      long long1 = 686L;
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      long long4 = (-463L);
      longArray0[4] = long4;
      long long5 = 0L;
      longArray0[5] = long5;
      long long6 = 0L;
      longArray0[6] = long6;
      long long7 = 1868L;
      longArray0[7] = long7;
      long long8 = (-704L);
      longArray0[8] = long8;
      long long9 = (-595L);
      longArray0[9] = long9;
      short[] shortArray0 = new short[9];
      short short0 = (short)1;
      shortArray0[0] = short0;
      short short1 = (short) (-536);
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)1910;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short) (-1585);
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)1261;
      shortArray0[7] = short7;
      short short8 = (short)1;
      shortArray0[8] = short8;
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(longArray0, shortArray0);
      long long10 = (-1475L);
      tLongShortHashMap0.get(long10);
      assertEquals(6, tLongShortHashMap0.size());
      assertEquals("{-1127=1, 686=-536, -704=1, 1868=1261, -463=0, 0=0}", tLongShortHashMap0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-1486);
      float float0 = 808.5167F;
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(int0, float0);
      TShortCollection tShortCollection0 = tLongShortHashMap0.valueCollection();
      assertEquals(true, tShortCollection0.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = 0L;
      longArray0[0] = long0;
      long long1 = (-441L);
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = (-1L);
      longArray0[3] = long3;
      short[] shortArray0 = new short[8];
      short short0 = (short)1569;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short) (-1);
      shortArray0[2] = short2;
      short short3 = (short)1277;
      shortArray0[3] = short3;
      short short4 = (short)125;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)139;
      shortArray0[7] = short7;
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(longArray0, shortArray0);
      tLongShortHashMap0.size();
      int int0 = 1;
      TLongShortMap tLongShortMap0 = null;
      TLongShortHashMap tLongShortHashMap1 = null;
      try {
        tLongShortHashMap1 = new TLongShortHashMap(tLongShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 294;
      float float0 = 0.0F;
      long[] longArray0 = new long[10];
      long long0 = 933L;
      longArray0[0] = long0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      longArray0[6] = (long) int0;
      longArray0[7] = (long) int0;
      longArray0[8] = (long) int0;
      longArray0[9] = (long) int0;
      short[] shortArray0 = new short[7];
      short short0 = (short) (-890);
      shortArray0[0] = short0;
      short short1 = (short) (-740);
      shortArray0[1] = short1;
      short short2 = (short)13;
      shortArray0[2] = short2;
      short short3 = (short)1366;
      shortArray0[3] = short3;
      short short4 = (short) (-833);
      shortArray0[4] = short4;
      short short5 = (short)714;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(longArray0, shortArray0);
      tLongShortHashMap0.getAutoCompactionFactor();
      assertEquals(2, tLongShortHashMap0.size());
      assertEquals("{294=0, 933=-890}", tLongShortHashMap0.toString());
      
      long long1 = 0L;
      short short7 = (short)861;
      TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap(int0, float0, long1, short7);
      short short8 = tLongShortHashMap1.get((long) short7);
      assertEquals((short)861, short8);
  }

  @Test
  public void test7()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = 0L;
      longArray0[0] = long0;
      long long1 = 1L;
      longArray0[1] = long1;
      long long2 = (-4L);
      longArray0[2] = long2;
      short[] shortArray0 = new short[5];
      short short0 = (short) (-1017);
      shortArray0[0] = short0;
      short short1 = (short)1857;
      shortArray0[1] = short1;
      short short2 = (short) (-1);
      shortArray0[2] = short2;
      short short3 = (short)174;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(longArray0, shortArray0);
      boolean boolean0 = tLongShortHashMap0.containsKey(longArray0[0]);
      assertEquals(11, tLongShortHashMap0.capacity());
      assertEquals(true, boolean0);
      assertEquals(false, tLongShortHashMap0.isEmpty());
      assertEquals("{-4=-1, 1=1857, 0=-1017}", tLongShortHashMap0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      short short0 = (short)0;
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(int0, (float) int0, (long) int0, short0);
      long long0 = 0L;
      tLongShortHashMap0.remove(long0);
      long long1 = 0L;
      short short1 = (short)616;
      short short2 = tLongShortHashMap0.putIfAbsent(long1, short1);
      assertEquals(false, tLongShortHashMap0.isEmpty());
      assertEquals((short)0, short2);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-1445);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      short[] shortArray0 = new short[9];
      short short0 = (short)1;
      shortArray0[0] = short0;
      short short1 = (short) (-544);
      shortArray0[1] = short1;
      short short2 = (short)197;
      shortArray0[2] = short2;
      short short3 = (short) (-17441);
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)500;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short) (-1741);
      shortArray0[7] = short7;
      short short8 = (short)199;
      shortArray0[8] = short8;
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(longArray0, shortArray0);
      tLongShortHashMap0.compact();
      assertEquals(3, tLongShortHashMap0.capacity());
      
      float float0 = 0.0F;
      short short9 = (short) (-1838);
      TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap(int0, float0, (long) int0, short9);
      tLongShortHashMap1.getAutoCompactionFactor();
      long long0 = 0L;
      short short10 = (short)0;
      boolean boolean0 = tLongShortHashMap1.adjustValue(long0, short10);
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-1251);
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(int0);
      TLongShortHashMap tLongShortHashMap1 = new TLongShortHashMap((TLongShortMap) tLongShortHashMap0);
      tLongShortHashMap0.putAll((TLongShortMap) tLongShortHashMap1);
      assertEquals(23, tLongShortHashMap1.capacity());
      assertEquals(0L, tLongShortHashMap1.getNoEntryKey());
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 338;
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(int0);
      long[] longArray0 = new long[10];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      longArray0[6] = (long) int0;
      longArray0[7] = (long) int0;
      longArray0[8] = (long) int0;
      longArray0[9] = (long) int0;
      tLongShortHashMap0._set = longArray0;
      assertEquals(719, tLongShortHashMap0.capacity());
  }
}
