/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TShortDoubleMapDecorator;
import gnu.trove.map.TShortDoubleMap;
import gnu.trove.map.hash.TShortDoubleHashMap;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortDoubleMapDecoratorEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TShortDoubleMapDecorator tShortDoubleMapDecorator0 = new TShortDoubleMapDecorator();
      short short0 = (short) (-1);
      Short short1 = new Short(short0);
      double double0 = 0.0;
      Double double1 = new Double(double0);
      // Undeclared exception!
      try {
        tShortDoubleMapDecorator0.put(short1, double1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TShortDoubleMapDecorator tShortDoubleMapDecorator0 = new TShortDoubleMapDecorator();
      TShortDoubleMap tShortDoubleMap0 = tShortDoubleMapDecorator0.getMap();
      TShortDoubleMapDecorator tShortDoubleMapDecorator1 = new TShortDoubleMapDecorator(tShortDoubleMap0);
      // Undeclared exception!
      try {
        tShortDoubleMapDecorator1.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TShortDoubleMapDecorator tShortDoubleMapDecorator0 = new TShortDoubleMapDecorator();
      String string0 = "";
      File file0 = new File(string0);
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         //  (No such file or directory)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 0;
      float float0 = (-1986.5789F);
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0, float0);
      AbstractMap.SimpleEntry<Object, TShortDoubleHashMap> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, TShortDoubleHashMap>(object0, tShortDoubleHashMap0);
      boolean boolean0 = abstractMap_SimpleEntry0.equals(object0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      String string0 = "}";
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(string0, (Object) tShortDoubleHashMap0);
      Locale locale0 = Locale.ITALIAN;
      Locale locale1 = Locale.ITALIAN;
      String string1 = locale0.getDisplayScript(locale1);
      abstractMap_SimpleEntry0.equals((Object) string1);
      TShortDoubleMapDecorator tShortDoubleMapDecorator0 = new TShortDoubleMapDecorator();
      tShortDoubleMapDecorator0.entrySet();
      TShortDoubleMap tShortDoubleMap0 = null;
      TShortDoubleMapDecorator tShortDoubleMapDecorator1 = new TShortDoubleMapDecorator(tShortDoubleMap0);
      short short0 = (short) (-1307);
      Short short1 = new Short(short0);
      // Undeclared exception!
      try {
        tShortDoubleMapDecorator0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TShortDoubleMapDecorator tShortDoubleMapDecorator0 = new TShortDoubleMapDecorator();
      // Undeclared exception!
      try {
        tShortDoubleMapDecorator0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TShortDoubleMapDecorator tShortDoubleMapDecorator0 = new TShortDoubleMapDecorator();
      Locale locale0 = Locale.KOREA;
      String string0 = locale0.toLanguageTag();
      boolean boolean0 = tShortDoubleMapDecorator0.containsKey((Object) string0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      double double0 = 1239.3271440620465;
      Double double1 = new Double(double0);
      String string0 = "{";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: {:%7B#%7B
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-1957);
      float float0 = 0.0F;
      Short short0 = null;
      TShortDoubleMapDecorator tShortDoubleMapDecorator0 = new TShortDoubleMapDecorator();
      // Undeclared exception!
      try {
        tShortDoubleMapDecorator0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TShortDoubleMapDecorator tShortDoubleMapDecorator0 = new TShortDoubleMapDecorator();
      String string0 = "";
      try {
        Short.valueOf(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      int int0 = 0;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0);
      TShortDoubleMapDecorator tShortDoubleMapDecorator0 = new TShortDoubleMapDecorator((TShortDoubleMap) tShortDoubleHashMap0);
      String string0 = "";
      try {
        Short.valueOf(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TShortDoubleMapDecorator tShortDoubleMapDecorator0 = new TShortDoubleMapDecorator();
      // Undeclared exception!
      try {
        tShortDoubleMapDecorator0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TShortDoubleMapDecorator tShortDoubleMapDecorator0 = new TShortDoubleMapDecorator();
      short short0 = (short)0;
      tShortDoubleMapDecorator0.getMap();
      Short short1 = new Short(short0);
      double double0 = (-1.0);
      Double double1 = new Double(double0);
      // Undeclared exception!
      try {
        tShortDoubleMapDecorator0.put(short1, double1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      short short0 = (short)1464;
      Short short1 = new Short(short0);
      short[] shortArray0 = new short[6];
      shortArray0[0] = short0;
      shortArray0[1] = (short) short1;
      shortArray0[2] = (short) short1;
      shortArray0[3] = (short) short1;
      shortArray0[4] = short0;
      shortArray0[5] = (short) short1;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) shortArray0[0];
      doubleArray0[1] = (double) shortArray0[5];
      doubleArray0[2] = (double) shortArray0[4];
      doubleArray0[3] = (double) short0;
      double double0 = 1.0;
      doubleArray0[4] = double0;
      doubleArray0[5] = (double) short1;
      doubleArray0[6] = (double) shortArray0[0];
      doubleArray0[7] = (double) shortArray0[1];
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      TShortDoubleMapDecorator tShortDoubleMapDecorator0 = new TShortDoubleMapDecorator((TShortDoubleMap) tShortDoubleHashMap0);
      tShortDoubleMapDecorator0.getMap();
      short1.longValue();
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap();
      AbstractMap.SimpleImmutableEntry<Short, TShortDoubleHashMap> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Short, TShortDoubleHashMap>(short1, tShortDoubleHashMap1);
      TShortDoubleMapDecorator tShortDoubleMapDecorator1 = new TShortDoubleMapDecorator((TShortDoubleMap) tShortDoubleHashMap1);
      tShortDoubleMapDecorator1.isEmpty();
      int int0 = abstractMap_SimpleImmutableEntry0.hashCode();
      assertEquals(1464, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      Object object0 = null;
      AbstractMap.SimpleImmutableEntry<Integer, Double> abstractMap_SimpleImmutableEntry0 = null;
      TShortDoubleMap tShortDoubleMap0 = null;
      TShortDoubleMapDecorator tShortDoubleMapDecorator0 = new TShortDoubleMapDecorator(tShortDoubleMap0);
      short short0 = (short)299;
      Short short1 = new Short(short0);
      Double double0 = new Double((double) short1);
      // Undeclared exception!
      try {
        tShortDoubleMapDecorator0.put(short1, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = null;
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap();
      TShortDoubleMapDecorator tShortDoubleMapDecorator0 = new TShortDoubleMapDecorator((TShortDoubleMap) tShortDoubleHashMap1);
      TShortDoubleMapDecorator tShortDoubleMapDecorator1 = new TShortDoubleMapDecorator();
      String string0 = "begin index ";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 5: begin index :begin%20index%20#begin%20index%20
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      TShortDoubleMapDecorator tShortDoubleMapDecorator0 = new TShortDoubleMapDecorator();
      short short0 = (short)1;
      Short short1 = new Short(short0);
      double double0 = 0.0;
      Double double1 = new Double(double0);
      // Undeclared exception!
      try {
        tShortDoubleMapDecorator0.put(short1, double1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short) (-60);
      shortArray0[1] = short1;
      short short2 = (short) (-1208);
      shortArray0[2] = short2;
      short short3 = (short)244;
      shortArray0[3] = short3;
      short short4 = (short) (-21);
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)797;
      shortArray0[7] = short7;
      short short8 = (short)55;
      shortArray0[8] = short8;
      short short9 = (short)0;
      shortArray0[9] = short9;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) shortArray0[1];
      doubleArray0[1] = (double) shortArray0[8];
      doubleArray0[2] = (double) shortArray0[9];
      doubleArray0[3] = (double) shortArray0[4];
      doubleArray0[4] = (double) short1;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap((TShortDoubleMap) tShortDoubleHashMap0);
      TShortDoubleMapDecorator tShortDoubleMapDecorator0 = new TShortDoubleMapDecorator((TShortDoubleMap) tShortDoubleHashMap1);
      String string0 = tShortDoubleMapDecorator0.toString();
      assertEquals("{-1208=null, -60=55.0, 244=-21.0, -21=-60.0, null=-60.0}", string0);
  }
}
