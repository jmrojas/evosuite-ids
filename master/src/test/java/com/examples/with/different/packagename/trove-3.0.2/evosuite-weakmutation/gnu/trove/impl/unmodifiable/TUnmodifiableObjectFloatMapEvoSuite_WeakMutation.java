/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableFloatCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap;
import gnu.trove.map.TObjectFloatMap;
import gnu.trove.map.custom_hash.TObjectFloatCustomHashMap;
import gnu.trove.map.hash.TObjectFloatHashMap;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.util.Set;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableObjectFloatMapEvoSuite_WeakMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 17 covered goals:
   * 1 Weak Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.size()I:58 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 2 Weak Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.size()I:58 - DeleteStatement: size()I
   * 3 Weak Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.getNoEntryValue()F:92 - DeleteStatement: getNoEntryValue()F
   * 4 Weak Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.getNoEntryValue()F:92 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 5 Weak Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z:101 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z
   * 6 Weak Mutation 56: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z:101 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z: root-Branch
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.size()I: root-Branch
   * 9 gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.getNoEntryValue()F: root-Branch
   * 10 Weak Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.<init>(Lgnu/trove/map/TObjectFloatMap;)V:53 - ReplaceComparisonOperator != null -> = null
   * 11 Weak Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.size()I:58 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 12 Weak Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.size()I:58 - DeleteStatement: size()I
   * 13 Weak Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.getNoEntryValue()F:92 - DeleteStatement: getNoEntryValue()F
   * 14 Weak Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.getNoEntryValue()F:92 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 15 Weak Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z:101 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z
   * 16 Weak Mutation 56: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.forEachEntry(Lgnu/trove/procedure/TObjectFloatProcedure;)Z:101 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 17 gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.<init>(Lgnu/trove/map/TObjectFloatMap;)V: I17 Branch 1 IFNONNULL L53 - true
   */

//   @Test
//   public void test0()  throws Throwable  {
//       IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
//       TObjectFloatCustomHashMap<Float> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Float>((HashingStrategy<? super Float>) identityHashingStrategy0, (-1539), (float) (-1539));
//       TUnmodifiableObjectFloatMap<Float> tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Float>((TObjectFloatMap<Float>) tObjectFloatCustomHashMap0);
//       TObjectFloatCustomHashMap<Object> tObjectFloatCustomHashMap1 = new TObjectFloatCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, (TObjectFloatMap<?>) tUnmodifiableObjectFloatMap0);
//       assertEquals(0.5F, tObjectFloatCustomHashMap1.getAutoCompactionFactor(), 0.01F);
//   }

  //Test case number: 1
  /*
   * 5 covered goals:
   * 1 Weak Mutation 11: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.isEmpty()Z:59 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 2 Weak Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.isEmpty()Z:59 - DeleteStatement: isEmpty()Z
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.isEmpty()Z: root-Branch
   * 4 Weak Mutation 11: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.isEmpty()Z:59 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 5 Weak Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.isEmpty()Z:59 - DeleteStatement: isEmpty()Z
   */

  @Test
  public void test1()  throws Throwable  {
      TObjectFloatHashMap<Object> tObjectFloatHashMap0 = new TObjectFloatHashMap<Object>(17);
      TUnmodifiableObjectFloatMap<Object> tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Object>((TObjectFloatMap<Object>) tObjectFloatHashMap0);
      boolean boolean0 = tUnmodifiableObjectFloatMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 5 covered goals:
   * 1 Weak Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.containsKey(Ljava/lang/Object;)Z:60 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 2 Weak Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.containsKey(Ljava/lang/Object;)Z:60 - DeleteStatement: containsKey(Ljava/lang/Object;)Z
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.containsKey(Ljava/lang/Object;)Z: root-Branch
   * 4 Weak Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.containsKey(Ljava/lang/Object;)Z:60 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 5 Weak Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.containsKey(Ljava/lang/Object;)Z:60 - DeleteStatement: containsKey(Ljava/lang/Object;)Z
   */

  @Test
  public void test2()  throws Throwable  {
      TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>(29, 29, 29);
      TUnmodifiableObjectFloatMap<Float> tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Float>((TObjectFloatMap<Float>) tObjectFloatHashMap0);
      boolean boolean0 = tUnmodifiableObjectFloatMap0.containsKey((Object) "\u4E2D\u6587 (\u4E2D\u56FD)");
      assertEquals(false, boolean0);
  }

  //Test case number: 3
  /*
   * 7 covered goals:
   * 1 Weak Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.containsValue(F)Z:61 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 2 Weak Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.containsValue(F)Z:61 - DeleteStatement: containsValue(F)Z
   * 3 Weak Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.containsValue(F)Z:61 - InsertUnaryOp Negation of val
   * 4 gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.containsValue(F)Z: root-Branch
   * 5 Weak Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.containsValue(F)Z:61 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 6 Weak Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.containsValue(F)Z:61 - DeleteStatement: containsValue(F)Z
   * 7 Weak Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.containsValue(F)Z:61 - InsertUnaryOp Negation of val
   */

  @Test
  public void test3()  throws Throwable  {
      TObjectFloatHashMap<Integer> tObjectFloatHashMap0 = new TObjectFloatHashMap<Integer>(17);
      TUnmodifiableObjectFloatMap<Integer> tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Integer>((TObjectFloatMap<Integer>) tObjectFloatHashMap0);
      boolean boolean0 = tUnmodifiableObjectFloatMap0.containsValue((float) 17);
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 5 covered goals:
   * 1 Weak Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.get(Ljava/lang/Object;)F:62 - DeleteStatement: get(Ljava/lang/Object;)F
   * 2 Weak Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.get(Ljava/lang/Object;)F:62 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.get(Ljava/lang/Object;)F: root-Branch
   * 4 Weak Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.get(Ljava/lang/Object;)F:62 - DeleteStatement: get(Ljava/lang/Object;)F
   * 5 Weak Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.get(Ljava/lang/Object;)F:62 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   */

//   @Test
//   public void test4()  throws Throwable  {
//       IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
//       TObjectFloatCustomHashMap<Integer> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, (-1377), (float) (-1377));
//       TUnmodifiableObjectFloatMap<Integer> tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Integer>((TObjectFloatMap<Integer>) tObjectFloatCustomHashMap0);
//       float float0 = tUnmodifiableObjectFloatMap0.get((Object) "");
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 5
  /*
   * 11 covered goals:
   * 1 Weak Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.keySet()Ljava/util/Set;:74 - ReplaceComparisonOperator != null -> = null
   * 2 Weak Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.keySet()Ljava/util/Set;:75 - DeleteStatement: keySet()Ljava/util/Set;
   * 3 Weak Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.keySet()Ljava/util/Set;:75 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 4 Weak Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.keySet()Ljava/util/Set;:75 - DeleteStatement: unmodifiableSet(Ljava/util/Set;)Ljava/util/Set;
   * 5 Weak Mutation 25: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.keySet()Ljava/util/Set;:76 - DeleteField: keySetLjava/util/Set;
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.keySet()Ljava/util/Set;: I4 Branch 2 IFNONNULL L74 - false
   * 7 Weak Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.keySet()Ljava/util/Set;:74 - ReplaceComparisonOperator != null -> = null
   * 8 Weak Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.keySet()Ljava/util/Set;:75 - DeleteStatement: keySet()Ljava/util/Set;
   * 9 Weak Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.keySet()Ljava/util/Set;:75 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 10 Weak Mutation 25: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.keySet()Ljava/util/Set;:76 - DeleteField: keySetLjava/util/Set;
   * 11 Weak Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.keySet()Ljava/util/Set;:75 - DeleteStatement: unmodifiableSet(Ljava/util/Set;)Ljava/util/Set;
   */

  @Test
  public void test5()  throws Throwable  {
      TObjectFloatCustomHashMap<Object> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Object>();
      TUnmodifiableObjectFloatMap<Object> tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Object>((TObjectFloatMap<Object>) tObjectFloatCustomHashMap0);
      Set<Object> set0 = tUnmodifiableObjectFloatMap0.keySet();
      assertEquals(true, set0.isEmpty());
  }

  //Test case number: 6
  /*
   * 5 covered goals:
   * 1 Weak Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.keys()[Ljava/lang/Object;:78 - DeleteStatement: keys()[Ljava/lang/Object;
   * 2 Weak Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.keys()[Ljava/lang/Object;:78 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.keys()[Ljava/lang/Object;: root-Branch
   * 4 Weak Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.keys()[Ljava/lang/Object;:78 - DeleteStatement: keys()[Ljava/lang/Object;
   * 5 Weak Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.keys()[Ljava/lang/Object;:78 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   */

  @Test
  public void test6()  throws Throwable  {
      IdentityHashingStrategy<String> identityHashingStrategy0 = new IdentityHashingStrategy<String>();
      TObjectFloatCustomHashMap<String> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<String>((HashingStrategy<? super String>) identityHashingStrategy0);
      TUnmodifiableObjectFloatMap<String> tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<String>((TObjectFloatMap<String>) tObjectFloatCustomHashMap0);
      Object[] objectArray0 = tUnmodifiableObjectFloatMap0.keys();
      assertNotNull(objectArray0);
  }

  //Test case number: 7
  /*
   * 5 covered goals:
   * 1 Weak Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:79 - DeleteStatement: keys([Ljava/lang/Object;)[Ljava/lang/Object;
   * 2 Weak Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:79 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: root-Branch
   * 4 Weak Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:79 - DeleteStatement: keys([Ljava/lang/Object;)[Ljava/lang/Object;
   * 5 Weak Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;:79 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   */

  @Test
  public void test7()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectFloatCustomHashMap<String> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<String>((HashingStrategy<? super String>) identityHashingStrategy0, 17);
      TObjectFloatHashMap<Object> tObjectFloatHashMap0 = new TObjectFloatHashMap<Object>(17);
      TUnmodifiableObjectFloatMap<Object> tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Object>((TObjectFloatMap<Object>) tObjectFloatHashMap0);
      Object[] objectArray0 = tUnmodifiableObjectFloatMap0.keys(tObjectFloatCustomHashMap0._set);
      assertNotNull(objectArray0);
  }

  //Test case number: 8
  /*
   * 14 covered goals:
   * 1 Weak Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:82 - DeleteField: valuesLgnu/trove/TFloatCollection;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.valueCollection()Lgnu/trove/TFloatCollection;: I4 Branch 3 IFNONNULL L82 - true
   * 3 Weak Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:82 - ReplaceComparisonOperator != null -> = null
   * 4 Weak Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:83 - DeleteStatement: unmodifiableCollection(Lgnu/trove/TFloatCollection;)Lgnu/trove/TFloatCollection;
   * 5 Weak Mutation 35: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:84 - DeleteField: valuesLgnu/trove/TFloatCollection;
   * 6 Weak Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:83 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 7 Weak Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:83 - DeleteStatement: valueCollection()Lgnu/trove/TFloatCollection;
   * 8 Weak Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:82 - ReplaceComparisonOperator != null -> = null
   * 9 Weak Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:82 - DeleteField: valuesLgnu/trove/TFloatCollection;
   * 10 Weak Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:83 - DeleteStatement: unmodifiableCollection(Lgnu/trove/TFloatCollection;)Lgnu/trove/TFloatCollection;
   * 11 Weak Mutation 35: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:84 - DeleteField: valuesLgnu/trove/TFloatCollection;
   * 12 Weak Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:83 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 13 Weak Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:83 - DeleteStatement: valueCollection()Lgnu/trove/TFloatCollection;
   * 14 gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.valueCollection()Lgnu/trove/TFloatCollection;: I4 Branch 3 IFNONNULL L82 - false
   */

  @Test
  public void test8()  throws Throwable  {
      TObjectFloatCustomHashMap<Float> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Float>();
      TUnmodifiableObjectFloatMap<Float> tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Float>((TObjectFloatMap<Float>) tObjectFloatCustomHashMap0);
      TUnmodifiableFloatCollection tUnmodifiableFloatCollection0 = (TUnmodifiableFloatCollection)tUnmodifiableObjectFloatMap0.valueCollection();
      assertNotNull(tUnmodifiableFloatCollection0);
      
      TUnmodifiableFloatCollection tUnmodifiableFloatCollection1 = (TUnmodifiableFloatCollection)tUnmodifiableObjectFloatMap0.valueCollection();
      assertSame(tUnmodifiableFloatCollection1, tUnmodifiableFloatCollection0);
  }

  //Test case number: 9
  /*
   * 5 covered goals:
   * 1 Weak Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.values()[F:86 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 2 Weak Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.values()[F:86 - DeleteStatement: values()[F
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.values()[F: root-Branch
   * 4 Weak Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.values()[F:86 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 5 Weak Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.values()[F:86 - DeleteStatement: values()[F
   */

  @Test
  public void test9()  throws Throwable  {
      TObjectFloatCustomHashMap<Integer> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Integer>();
      TUnmodifiableObjectFloatMap<Integer> tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Integer>((TObjectFloatMap<Integer>) tObjectFloatCustomHashMap0);
      float[] floatArray0 = tUnmodifiableObjectFloatMap0.values();
      assertNotNull(floatArray0);
  }

  //Test case number: 10
  /*
   * 5 covered goals:
   * 1 Weak Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.values([F)[F:87 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 2 Weak Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.values([F)[F:87 - DeleteStatement: values([F)[F
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.values([F)[F: root-Branch
   * 4 Weak Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.values([F)[F:87 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 5 Weak Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.values([F)[F:87 - DeleteStatement: values([F)[F
   */

  @Test
  public void test10()  throws Throwable  {
      TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>((-1691), (-1691));
      TUnmodifiableObjectFloatMap<Float> tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Float>((TObjectFloatMap<Float>) tObjectFloatHashMap0);
      float[] floatArray0 = new float[3];
      float[] floatArray1 = tUnmodifiableObjectFloatMap0.values(floatArray0);
      assertSame(floatArray0, floatArray1);
  }

  //Test case number: 11
  /*
   * 12 covered goals:
   * 1 Weak Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.equals(Ljava/lang/Object;)Z:89 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 2 Weak Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 3 Weak Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 4 Weak Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.equals(Ljava/lang/Object;)Z:89 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 5 Weak Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 0 -> 1
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - false
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - true
   * 8 Weak Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.equals(Ljava/lang/Object;)Z:89 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 9 Weak Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 10 Weak Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 11 Weak Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.equals(Ljava/lang/Object;)Z:89 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 12 Weak Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 0 -> 1
   */

  @Test
  public void test11()  throws Throwable  {
      IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
      TObjectFloatCustomHashMap<Integer> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, (-1377), (float) (-1377));
      TUnmodifiableObjectFloatMap<Integer> tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Integer>((TObjectFloatMap<Integer>) tObjectFloatCustomHashMap0);
      boolean boolean0 = tUnmodifiableObjectFloatMap0.equals((Object) "");
      assertEquals(false, boolean0);
  }

  //Test case number: 12
  /*
   * 5 covered goals:
   * 1 Weak Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.hashCode()I:90 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 2 Weak Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.hashCode()I:90 - DeleteStatement: hashCode()I
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.hashCode()I: root-Branch
   * 4 Weak Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.hashCode()I:90 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 5 Weak Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.hashCode()I:90 - DeleteStatement: hashCode()I
   */

  @Test
  public void test12()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectFloatCustomHashMap<Object> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, (-1), (float) (-1), (float) (-1));
      TUnmodifiableObjectFloatMap<Object> tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Object>((TObjectFloatMap<Object>) tObjectFloatCustomHashMap0);
      int int0 = tUnmodifiableObjectFloatMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 13
  /*
   * 5 covered goals:
   * 1 Weak Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.toString()Ljava/lang/String;:91 - DeleteStatement: toString()Ljava/lang/String;
   * 2 Weak Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.toString()Ljava/lang/String;:91 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.toString()Ljava/lang/String;: root-Branch
   * 4 Weak Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.toString()Ljava/lang/String;:91 - DeleteStatement: toString()Ljava/lang/String;
   * 5 Weak Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.toString()Ljava/lang/String;:91 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   */

  @Test
  public void test13()  throws Throwable  {
      TObjectFloatCustomHashMap<Integer> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Integer>();
      TUnmodifiableObjectFloatMap<Integer> tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Integer>((TObjectFloatMap<Integer>) tObjectFloatCustomHashMap0);
      String string0 = tUnmodifiableObjectFloatMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 14
  /*
   * 5 covered goals:
   * 1 Weak Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z:95 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z
   * 2 Weak Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z:95 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   * 4 Weak Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z:95 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z
   * 5 Weak Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z:95 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   */

  @Test
  public void test14()  throws Throwable  {
      TObjectFloatHashMap<Integer> tObjectFloatHashMap0 = new TObjectFloatHashMap<Integer>(17);
      TUnmodifiableObjectFloatMap<Integer> tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Integer>((TObjectFloatMap<Integer>) tObjectFloatHashMap0);
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tObjectFloatHashMap0._set);
      boolean boolean0 = tUnmodifiableObjectFloatMap0.forEachKey((TObjectProcedure<? super Integer>) toObjectArrayProceedure0);
      assertEquals(true, boolean0);
  }

  //Test case number: 15
  /*
   * 5 covered goals:
   * 1 Weak Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z:98 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z
   * 2 Weak Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z:98 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   * 4 Weak Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z:98 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z
   * 5 Weak Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z:98 - DeleteField: mLgnu/trove/map/TObjectFloatMap;
   */

  @Test
  public void test15()  throws Throwable  {
      IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
      TObjectFloatCustomHashMap<Integer> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0);
      TUnmodifiableObjectFloatMap<Integer> tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Integer>((TObjectFloatMap<Integer>) tObjectFloatCustomHashMap0);
      boolean boolean0 = tUnmodifiableObjectFloatMap0.forEachValue((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 16
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.<init>(Lgnu/trove/map/TObjectFloatMap;)V: I17 Branch 1 IFNONNULL L53 - false
   * 2 Weak Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap.<init>(Lgnu/trove/map/TObjectFloatMap;)V:53 - ReplaceComparisonOperator != null -> = null
   */

  @Test
  public void test16()  throws Throwable  {
      TUnmodifiableObjectFloatMap<Integer> tUnmodifiableObjectFloatMap0 = null;
      try {
        tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Integer>((TObjectFloatMap<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
