/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TCharFloatMapDecorator;
import gnu.trove.map.TCharFloatMap;
import gnu.trove.map.hash.TCharFloatHashMap;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharFloatMapDecoratorEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap();
      TCharFloatMapDecorator tCharFloatMapDecorator0 = new TCharFloatMapDecorator((TCharFloatMap) tCharFloatHashMap0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 0;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TCharFloatMapDecorator tCharFloatMapDecorator0 = new TCharFloatMapDecorator();
          String string0 = "er";
          File file0 = new File(string0, string0);
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"er/er\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:165)
             // java.io.PrintStream.<init>(PrintStream.java:279)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      TCharFloatMap tCharFloatMap0 = null;
      TCharFloatMapDecorator tCharFloatMapDecorator0 = new TCharFloatMapDecorator();
      TCharFloatHashMap tCharFloatHashMap0 = null;
      try {
        tCharFloatHashMap0 = new TCharFloatHashMap(tCharFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = 'n';
      charArray0[0] = char0;
      char char1 = 'K';
      charArray0[1] = char1;
      char char2 = 'l';
      charArray0[2] = char2;
      char char3 = 'p';
      charArray0[3] = char3;
      char char4 = 'D';
      charArray0[4] = char4;
      char char5 = ' ';
      charArray0[5] = char5;
      char char6 = ',';
      charArray0[6] = char6;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) charArray0[4];
      floatArray0[1] = (float) charArray0[3];
      floatArray0[2] = (float) charArray0[4];
      floatArray0[3] = (float) charArray0[2];
      floatArray0[4] = (float) char3;
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(charArray0, floatArray0);
      TCharFloatMapDecorator tCharFloatMapDecorator0 = new TCharFloatMapDecorator((TCharFloatMap) tCharFloatHashMap0);
      assertEquals(5, tCharFloatMapDecorator0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap();
      TCharFloatMapDecorator tCharFloatMapDecorator0 = new TCharFloatMapDecorator((TCharFloatMap) tCharFloatHashMap0);
      int int0 = (-325);
      int int1 = 788;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tCharFloatHashMap0._states, int0, int1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) byteArrayInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pushbackInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 0;
      TCharFloatMapDecorator tCharFloatMapDecorator0 = new TCharFloatMapDecorator();
      // Undeclared exception!
      try {
        tCharFloatMapDecorator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TCharFloatMap tCharFloatMap0 = null;
      TCharFloatMapDecorator tCharFloatMapDecorator0 = new TCharFloatMapDecorator(tCharFloatMap0);
      String string0 = "";
      String string1 = "l=',y";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string1, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://l=',y?l=',y#l=',y
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TCharFloatMapDecorator tCharFloatMapDecorator0 = new TCharFloatMapDecorator();
      // Undeclared exception!
      try {
        tCharFloatMapDecorator0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap();
      TCharFloatMapDecorator tCharFloatMapDecorator0 = new TCharFloatMapDecorator((TCharFloatMap) tCharFloatHashMap0);
      tCharFloatMapDecorator0.clear();
      assertEquals(0, tCharFloatMapDecorator0.size());
  }

//   @Test
//   public void test9()  throws Throwable  {
//       char[] charArray0 = new char[3];
//       char char0 = 'E';
//       charArray0[0] = char0;
//       char char1 = 'D';
//       charArray0[1] = char1;
//       char char2 = '-';
//       charArray0[2] = char2;
//       float[] floatArray0 = new float[5];
//       floatArray0[0] = (float) charArray0[1];
//       float float0 = 1.0F;
//       floatArray0[1] = float0;
//       floatArray0[2] = (float) charArray0[1];
//       floatArray0[3] = (float) charArray0[0];
//       floatArray0[4] = (float) charArray0[2];
//       TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(charArray0, floatArray0);
//       TCharFloatMapDecorator tCharFloatMapDecorator0 = new TCharFloatMapDecorator((TCharFloatMap) tCharFloatHashMap0);
//       TCharFloatHashMap tCharFloatHashMap1 = (TCharFloatHashMap)tCharFloatMapDecorator0.getMap();
//       assertEquals(0.0F, tCharFloatHashMap1.getNoEntryValue(), 0.01F);
//   }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      TCharFloatMap tCharFloatMap0 = null;
      TCharFloatMapDecorator tCharFloatMapDecorator0 = new TCharFloatMapDecorator(tCharFloatMap0);
      tCharFloatMapDecorator0.entrySet();
      float float0 = 1030.6084F;
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(int0, float0);
      TCharFloatMapDecorator tCharFloatMapDecorator1 = new TCharFloatMapDecorator((TCharFloatMap) tCharFloatHashMap0);
      HashMap<Character, Object> hashMap0 = new HashMap<Character, Object>();
      char char0 = '';
      Character character0 = Character.valueOf(char0);
      // Undeclared exception!
      try {
        tCharFloatMapDecorator0.put(character0, (Float) float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TCharFloatMapDecorator tCharFloatMapDecorator0 = new TCharFloatMapDecorator();
      // Undeclared exception!
      try {
        tCharFloatMapDecorator0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TCharFloatMapDecorator tCharFloatMapDecorator0 = new TCharFloatMapDecorator();
          char char0 = 'a';
          String string0 = "-G'nb";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
      TCharFloatMap tCharFloatMap0 = null;
      TCharFloatMapDecorator tCharFloatMapDecorator0 = new TCharFloatMapDecorator(tCharFloatMap0);
      TCharFloatMap tCharFloatMap1 = tCharFloatMapDecorator0.getMap();
      TCharFloatMapDecorator tCharFloatMapDecorator1 = new TCharFloatMapDecorator(tCharFloatMap1);
      Locale locale0 = Locale.ROOT;
      String string0 = "";
      // Undeclared exception!
      try {
        locale0.getUnicodeLocaleType(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TCharFloatMapDecorator tCharFloatMapDecorator0 = new TCharFloatMapDecorator();
      // Undeclared exception!
      try {
        tCharFloatMapDecorator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      double double0 = 1640.889002748014;
      Float float0 = new Float(double0);
      String string0 = "%l{B5+#T";
      AbstractMap.SimpleImmutableEntry<String, Float> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Float>(string0, float0);
      abstractMap_SimpleImmutableEntry0.getValue();
      char char0 = '{';
      Character character0 = new Character(char0);
      AbstractMap.SimpleImmutableEntry<Float, Character> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Float, Character>(float0, character0);
      int int0 = 673;
      float float1 = 44.881084F;
      TCharFloatHashMap tCharFloatHashMap0 = new TCharFloatHashMap(int0, float1);
      TCharFloatMapDecorator tCharFloatMapDecorator0 = new TCharFloatMapDecorator((TCharFloatMap) tCharFloatHashMap0);
      tCharFloatMapDecorator0.toString();
      TCharFloatMapDecorator tCharFloatMapDecorator1 = new TCharFloatMapDecorator();
      // Undeclared exception!
      try {
        tCharFloatMapDecorator1.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      TCharFloatMapDecorator tCharFloatMapDecorator0 = new TCharFloatMapDecorator();
      float float0 = 0.0F;
      String string0 = Float.toString(float0);
      boolean boolean0 = tCharFloatMapDecorator0.containsKey((Object) string0);
      assertEquals(false, boolean0);
  }
}
