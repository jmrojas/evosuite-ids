/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TIntFloatMap;
import gnu.trove.map.hash.TIntFloatHashMap;
import gnu.trove.procedure.TIntProcedure;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntFloatHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


//   @Test
//   public void test0()  throws Throwable  {
//       int int0 = 0;
//       float float0 = (-118.97264F);
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0, (float) int0, int0, float0);
//       int[] intArray0 = new int[10];
//       float float1 = 226.43947F;
//       tIntFloatHashMap0.setAutoCompactionFactor(float1);
//       intArray0[0] = int0;
//       intArray0[1] = int0;
//       intArray0[2] = int0;
//       intArray0[3] = int0;
//       intArray0[4] = int0;
//       intArray0[5] = int0;
//       intArray0[6] = int0;
//       int int1 = 0;
//       intArray0[7] = int1;
//       intArray0[8] = int0;
//       intArray0[9] = int0;
//       tIntFloatHashMap0._set = intArray0;
//       assertEquals(0, tIntFloatHashMap0.getNoEntryKey());
//       assertEquals((-118.97264F), tIntFloatHashMap0.getNoEntryValue(), 0.01F);
//   }

//   @Test
//   public void test1()  throws Throwable  {
//       int int0 = 105;
//       float float0 = (-1.0F);
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0, float0);
//       float float1 = 1.0F;
//       tIntFloatHashMap0.containsValue(float1);
//       assertEquals(3, tIntFloatHashMap0.capacity());
//       
//       int int1 = 0;
//       float float2 = 228.34009F;
//       TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(int1, float2);
//       assertEquals(0, tIntFloatHashMap1.getNoEntryKey());
//       assertEquals(0.0F, tIntFloatHashMap1.getNoEntryValue(), 0.01F);
//   }

//   @Test
//   public void test2()  throws Throwable  {
//       int int0 = 1;
//       int int1 = (-1314);
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int1);
//       tIntFloatHashMap0.isEmpty();
//       float float0 = 1230.7625F;
//       int[] intArray0 = new int[6];
//       intArray0[0] = int0;
//       intArray0[1] = int0;
//       intArray0[2] = int0;
//       intArray0[3] = int0;
//       intArray0[4] = int0;
//       intArray0[5] = int0;
//       float[] floatArray0 = new float[1];
//       floatArray0[0] = (float) intArray0[5];
//       TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(intArray0, floatArray0);
//       TIntFloatHashMap tIntFloatHashMap2 = new TIntFloatHashMap((TIntFloatMap) tIntFloatHashMap1);
//       tIntFloatHashMap2.remove(intArray0[0]);
//       assertEquals("{1=1.0}", tIntFloatHashMap1.toString());
//       assertEquals(true, tIntFloatHashMap2.isEmpty());
//       
//       int int2 = 1;
//       float float1 = (-972.434F);
//       TIntFloatHashMap tIntFloatHashMap3 = new TIntFloatHashMap(int0, float0, int2, float1);
//       float float2 = tIntFloatHashMap3.remove(int0);
//       assertEquals((-972.434F), float2, 0.01F);
//   }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 519;
          float float0 = 0.0F;
          int int1 = (-974);
          float float1 = 6.6360896E8F;
          int int2 = 0;
          TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int1, float1, int2, (float) int2);
          TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap((TIntFloatMap) tIntFloatHashMap0);
          int int3 = tIntFloatHashMap1.size();
          tIntFloatHashMap0.putIfAbsent(int2, int2);
          int int4 = 0;
          float float2 = (-89.94012F);
          TIntFloatHashMap tIntFloatHashMap2 = new TIntFloatHashMap(int4, float2);
          tIntFloatHashMap2.getNoEntryValue();
          TIntFloatHashMap tIntFloatHashMap3 = new TIntFloatHashMap(int3, float0);
          tIntFloatHashMap2.isEmpty();
          boolean boolean0 = true;
          tIntFloatHashMap0.reenableAutoCompaction(boolean0);
          tIntFloatHashMap2.capacity();
          TIntFloatHashMap tIntFloatHashMap4 = new TIntFloatHashMap(int0, float0);
          String string0 = "R7{#bhQ5f";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 1665;
      intArray0[0] = int0;
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) intArray0[0];
      float float0 = 1263.7222F;
      floatArray0[1] = float0;
      floatArray0[2] = (float) intArray0[0];
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) int0;
      floatArray0[6] = (float) intArray0[0];
      floatArray0[7] = (float) intArray0[0];
      floatArray0[8] = (float) intArray0[0];
      floatArray0[9] = (float) intArray0[0];
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      assertEquals(23, tIntFloatHashMap0.capacity());
      
      tIntFloatHashMap0.trimToSize();
      int int1 = 19;
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(int1);
      tIntFloatHashMap1.capacity();
      int int2 = 610;
      TIntFloatHashMap tIntFloatHashMap2 = new TIntFloatHashMap();
      int int3 = 1855;
      tIntFloatHashMap2.size();
      tIntFloatHashMap2.increment(int3);
      tIntFloatHashMap2.size();
      int int4 = (-2002);
      tIntFloatHashMap2.ensureCapacity(int4);
      tIntFloatHashMap2.ensureCapacity(int4);
      tIntFloatHashMap1.keys(tIntFloatHashMap2._set);
      TIntFloatHashMap tIntFloatHashMap3 = new TIntFloatHashMap();
      tIntFloatHashMap3.clear();
      float float1 = 129.60887F;
      int int5 = (-51);
      TIntFloatHashMap tIntFloatHashMap4 = new TIntFloatHashMap(int2, float1, int5, (float) int2);
      tIntFloatHashMap1.containsKey(int5);
      int int6 = (-519);
      tIntFloatHashMap2.capacity();
      tIntFloatHashMap2.compact();
      float float2 = 135.24947F;
      tIntFloatHashMap4.iterator();
      tIntFloatHashMap4.putIfAbsent(int6, float2);
      int int7 = tIntFloatHashMap1.capacity();
      assertEquals(43, int7);
  }

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = int0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) intArray0[0];
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      int int1 = 0;
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(int1, int1);
      tIntFloatHashMap1.setAutoCompactionFactor((float) int1);
      int int2 = tIntFloatHashMap1.capacity();
      boolean boolean0 = false;
      float[] floatArray1 = new float[6];
      floatArray1[0] = (float) int2;
      float float0 = (-800.2537F);
      floatArray1[1] = float0;
      floatArray1[2] = (float) int2;
      int int3 = (-552);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

//   @Test
//   public void test6()  throws Throwable  {
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
//       tIntFloatHashMap0.tempDisableAutoCompaction();
//       assertEquals(0, tIntFloatHashMap0.getNoEntryKey());
//       assertEquals(23, tIntFloatHashMap0.capacity());
//       assertEquals(0.0F, tIntFloatHashMap0.getNoEntryValue(), 0.01F);
//       
//       int int0 = 626;
//       float float0 = (-761.43854F);
//       TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(int0, float0);
//       float float1 = (-1452.5199F);
//       // Undeclared exception!
//       try {
//         tIntFloatHashMap1.setAutoCompactionFactor(float1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Factor must be >= 0: -1452.5199
//          //
//       }
//   }

//   @Test
//   public void test7()  throws Throwable  {
//       int[] intArray0 = new int[1];
//       int int0 = (-1);
//       intArray0[0] = int0;
//       float[] floatArray0 = new float[6];
//       floatArray0[0] = (float) int0;
//       floatArray0[1] = (float) intArray0[0];
//       floatArray0[2] = (float) int0;
//       floatArray0[3] = (float) int0;
//       floatArray0[4] = (float) intArray0[0];
//       floatArray0[5] = (float) int0;
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
//       TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap((TIntFloatMap) tIntFloatHashMap0);
//       TIntFloatHashMap tIntFloatHashMap2 = new TIntFloatHashMap((TIntFloatMap) tIntFloatHashMap1);
//       assertEquals(17, tIntFloatHashMap0.capacity());
//       assertEquals("{-1=-1.0}", tIntFloatHashMap0.toString());
//       assertEquals(0, tIntFloatHashMap1.getNoEntryKey());
//       assertEquals(0.0F, tIntFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals(false, tIntFloatHashMap0.isEmpty());
//   }

//   @Test
//   public void test8()  throws Throwable  {
//       int[] intArray0 = new int[8];
//       int int0 = (-1469);
//       intArray0[0] = int0;
//       int int1 = (-1754);
//       intArray0[1] = int1;
//       int int2 = 1802;
//       intArray0[2] = int2;
//       int int3 = 2013;
//       intArray0[3] = int3;
//       float[] floatArray0 = new float[4];
//       floatArray0[0] = (float) int2;
//       floatArray0[1] = (float) int3;
//       floatArray0[2] = (float) intArray0[3];
//       floatArray0[3] = (float) int0;
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
//       float float0 = 1599.1659F;
//       tIntFloatHashMap0.containsValue(float0);
//       int int4 = 1171;
//       intArray0[4] = int4;
//       int int5 = (-680);
//       intArray0[5] = int5;
//       int int6 = (-424);
//       intArray0[6] = int6;
//       int int7 = 0;
//       intArray0[7] = int7;
//       float[] floatArray1 = new float[4];
//       floatArray1[0] = (float) intArray0[7];
//       floatArray1[1] = (float) int1;
//       floatArray1[2] = (float) int6;
//       floatArray1[3] = (float) int7;
//       TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(intArray0, floatArray1);
//       TIntFloatHashMap tIntFloatHashMap2 = new TIntFloatHashMap((TIntFloatMap) tIntFloatHashMap1);
//       tIntFloatHashMap2.putAll((TIntFloatMap) tIntFloatHashMap1);
//       assertFalse(tIntFloatHashMap1.equals(tIntFloatHashMap0));
//       assertEquals("{2013=0.0, -1469=0.0, 1802=-424.0, -1754=-1754.0}", tIntFloatHashMap2.toString());
//       assertEquals(0, tIntFloatHashMap1.getNoEntryKey());
//       assertEquals(4, tIntFloatHashMap2.size());
//       assertEquals(0.0F, tIntFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertTrue(tIntFloatHashMap2.equals(tIntFloatHashMap1));
//   }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 1;
      float float0 = 0.0F;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0, float0, int0, (float) int0);
      tIntFloatHashMap0.values();
      int int1 = 223;
      float float1 = (-614.2699F);
      int int2 = 851;
      int int3 = 150;
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(int3, int2);
      tIntFloatHashMap1.tempDisableAutoCompaction();
      int int4 = 381;
      float float2 = 0.0F;
      TIntFloatHashMap tIntFloatHashMap2 = new TIntFloatHashMap(int2, (float) int2, int4, float2);
      tIntFloatHashMap2.getNoEntryValue();
      int int5 = 1517;
      TIntFloatHashMap tIntFloatHashMap3 = new TIntFloatHashMap(int5);
      tIntFloatHashMap3.getNoEntryValue();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

//   @Test
//   public void test10()  throws Throwable  {
//       int int0 = 0;
//       float float0 = (-1.0F);
//       int[] intArray0 = new int[7];
//       intArray0[0] = int0;
//       intArray0[1] = int0;
//       intArray0[2] = int0;
//       intArray0[3] = int0;
//       int int1 = (-2045);
//       intArray0[4] = int1;
//       intArray0[5] = int0;
//       intArray0[6] = int0;
//       float[] floatArray0 = new float[10];
//       float float1 = 1651.9053F;
//       floatArray0[0] = float1;
//       floatArray0[1] = (float) int1;
//       floatArray0[2] = (float) intArray0[4];
//       floatArray0[3] = (float) intArray0[3];
//       floatArray0[4] = (float) intArray0[0];
//       floatArray0[5] = (float) intArray0[1];
//       floatArray0[6] = (float) intArray0[1];
//       floatArray0[7] = (float) intArray0[4];
//       floatArray0[8] = (float) intArray0[1];
//       floatArray0[9] = (float) intArray0[3];
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
//       tIntFloatHashMap0.tempDisableAutoCompaction();
//       assertEquals(0.0F, tIntFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals("{-2045=0.0, 0=0.0}", tIntFloatHashMap0.toString());
//       assertEquals(2, tIntFloatHashMap0.size());
//       
//       TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(int0, float0, int0, (float) int0);
//       float[] floatArray1 = new float[1];
//       floatArray1[0] = (float) int0;
//       float[] floatArray2 = tIntFloatHashMap1.values(floatArray1);
//       assertEquals(0, tIntFloatHashMap1.getNoEntryKey());
//       assertEquals(0.0F, tIntFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertNotNull(floatArray2);
//       
//       TIntFloatHashMap tIntFloatHashMap2 = new TIntFloatHashMap();
//       tIntFloatHashMap2.tempDisableAutoCompaction();
//       assertEquals(0, tIntFloatHashMap2.getNoEntryKey());
//       assertEquals(0.0F, tIntFloatHashMap2.getNoEntryValue(), 0.01F);
//   }

//   @Test
//   public void test11()  throws Throwable  {
//       int int0 = Integer.MAX_VALUE;
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0, int0, int0, int0);
//       byte[] byteArray0 = tIntFloatHashMap0._states;
//       assertEquals(2.14748365E9F, tIntFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(2147483647, tIntFloatHashMap0.getNoEntryKey());
//   }

//   @Test
//   public void test12()  throws Throwable  {
//       int[] intArray0 = new int[5];
//       int int0 = Integer.MAX_VALUE;
//       intArray0[0] = int0;
//       int int1 = 1;
//       intArray0[1] = int1;
//       int int2 = 0;
//       intArray0[2] = int2;
//       int int3 = (-1233);
//       intArray0[3] = int3;
//       int int4 = (-1);
//       intArray0[4] = int4;
//       float[] floatArray0 = new float[9];
//       floatArray0[0] = (float) int2;
//       floatArray0[1] = (float) int2;
//       floatArray0[2] = (float) int1;
//       floatArray0[3] = (float) intArray0[4];
//       floatArray0[4] = (float) intArray0[4];
//       floatArray0[5] = (float) intArray0[0];
//       floatArray0[6] = (float) intArray0[4];
//       floatArray0[7] = (float) int4;
//       float float0 = 0.0F;
//       floatArray0[8] = float0;
//       floatArray0[0] = (float) intArray0[4];
//       floatArray0[1] = (float) int4;
//       floatArray0[2] = (float) intArray0[4];
//       float float1 = 1691.0123F;
//       floatArray0[3] = float1;
//       floatArray0[4] = (float) int3;
//       floatArray0[5] = (float) intArray0[1];
//       floatArray0[6] = (float) intArray0[2];
//       floatArray0[7] = (float) int3;
//       floatArray0[8] = float1;
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
//       float[] floatArray1 = tIntFloatHashMap0.values();
//       assertEquals("{-1233=1691.0123, 2147483647=-1.0, -1=-1233.0, 1=-1.0, 0=-1.0}", tIntFloatHashMap0.toString());
//       assertNotNull(floatArray1);
//       
//       TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap();
//       int int5 = (-1);
//       float float2 = tIntFloatHashMap1.get(int5);
//       assertEquals(0.0F, float2, 0.01F);
//   }

  @Test
  public void test13()  throws Throwable  {
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap();
      int int0 = 1262;
      tIntFloatHashMap0.ensureCapacity(int0);
      int int1 = tIntFloatHashMap0.getNoEntryKey();
      int int2 = 0;
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(int2);
      int int3 = 0;
      tIntFloatHashMap1.adjustOrPutValue(int3, int2, int3);
      tIntFloatHashMap1.putAll((TIntFloatMap) tIntFloatHashMap0);
      tIntFloatHashMap0.clear();
      tIntFloatHashMap1.getNoEntryValue();
      TIntProcedure tIntProcedure0 = null;
      tIntFloatHashMap1.ensureCapacity(int3);
      int int4 = 1182;
      float float0 = tIntFloatHashMap1.put(int4, int2);
      int int5 = 768;
      tIntFloatHashMap1.put(int5, int0);
      tIntFloatHashMap0.keySet();
      float[] floatArray0 = new float[5];
      float float1 = (-1721.9076F);
      tIntFloatHashMap1.adjustValue(int3, float1);
      tIntFloatHashMap1.containsValue((float) int0);
      float float2 = 0.0F;
      floatArray0[0] = float2;
      floatArray0[1] = float0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int1;
      tIntFloatHashMap1.isEmpty();
      floatArray0[4] = (float) int4;
      tIntFloatHashMap0.values(floatArray0);
      // Undeclared exception!
      try {
        tIntFloatHashMap1.forEachKey(tIntProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 613;
          int[] intArray0 = new int[9];
          intArray0[0] = int0;
          intArray0[1] = int0;
          intArray0[2] = int0;
          intArray0[3] = int0;
          intArray0[4] = int0;
          intArray0[5] = int0;
          intArray0[6] = int0;
          intArray0[7] = int0;
          intArray0[8] = int0;
          float[] floatArray0 = new float[10];
          floatArray0[0] = (float) intArray0[2];
          floatArray0[1] = (float) intArray0[4];
          floatArray0[2] = (float) intArray0[4];
          floatArray0[3] = (float) int0;
          floatArray0[4] = (float) intArray0[5];
          floatArray0[5] = (float) intArray0[6];
          floatArray0[6] = (float) intArray0[0];
          float float0 = 0.0F;
          floatArray0[7] = float0;
          floatArray0[8] = (float) intArray0[5];
          float float1 = (-109.0327F);
          floatArray0[9] = float1;
          TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
          String string0 = "No free or removed slots available. Key set full?!!";
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"No free or removed slots available. Key set full?!!\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // sun.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

//   @Test
//   public void test15()  throws Throwable  {
//       int int0 = (-1813);
//       TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(int0);
//       TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap();
//       int[] intArray0 = tIntFloatHashMap1._set;
//       assertEquals(0, tIntFloatHashMap1.getNoEntryKey());
//       assertEquals(0.0F, tIntFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals(23, tIntFloatHashMap1.capacity());
//       
//       float[] floatArray0 = new float[2];
//       floatArray0[0] = (float) int0;
//       floatArray0[1] = (float) int0;
//       float[] floatArray1 = tIntFloatHashMap0.values(floatArray0);
//       assertNotNull(floatArray1);
//       assertEquals(0, tIntFloatHashMap0.getNoEntryKey());
//       assertEquals(0.0F, tIntFloatHashMap0.getNoEntryValue(), 0.01F);
//       
//       TIntFloatHashMap tIntFloatHashMap2 = new TIntFloatHashMap(int0, int0, int0, int0);
//       assertEquals(-1813, tIntFloatHashMap2.getNoEntryKey());
//       assertEquals((-1813.0F), tIntFloatHashMap2.getNoEntryValue(), 0.01F);
//   }

  @Test
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) intArray0[0];
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) intArray0[0];
      floatArray0[3] = (float) int1;
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      Locale locale0 = Locale.CHINA;
      String string0 = locale0.getDisplayCountry();
      tIntFloatHashMap0.equals((Object) string0);
      int int3 = 0;
      float float0 = (-466.7951F);
      int int4 = (-1);
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(int3, float0, int4, (float) int3);
      int int5 = (-1063);
      int int6 = (-632);
      tIntFloatHashMap1.adjustOrPutValue(int6, int4, int5);
      TIntFloatHashMap tIntFloatHashMap2 = new TIntFloatHashMap(int5, int5);
      tIntFloatHashMap1.putAll((TIntFloatMap) tIntFloatHashMap2);
      assertEquals(1, tIntFloatHashMap1.size());
      
      tIntFloatHashMap2.iterator();
      assertEquals(0, tIntFloatHashMap2.getNoEntryKey());
  }

  @Test
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = int0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) int0;
      intArray0[0] = int0;
      float float0 = 0.0F;
      floatArray0[0] = (float) int0;
      floatArray0[1] = float0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) intArray0[0];
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0[0], int0);
      boolean boolean0 = true;
      tIntFloatHashMap0.reenableAutoCompaction(boolean0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-11);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-65);
      byteArray0[1] = byte1;
      byte byte2 = (byte)8;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      tIntFloatHashMap0._states = byteArray0;
      int int1 = 1521;
      float float1 = 0.0F;
      // Undeclared exception!
      try {
        tIntFloatHashMap0.adjustOrPutValue(int1, floatArray0[3], float1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No free or removed slots available. Key set full?!!
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = (-171);
      intArray0[0] = int0;
      int int1 = (-1155);
      intArray0[1] = int1;
      int int2 = 1320;
      intArray0[2] = int2;
      int int3 = Integer.MAX_VALUE;
      intArray0[3] = int3;
      int int4 = (-1270);
      intArray0[4] = int4;
      int int5 = 1;
      intArray0[5] = int5;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) intArray0[2];
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap((TIntFloatMap) tIntFloatHashMap0);
      int int6 = 0;
      float float0 = (-455.41837F);
      TIntFloatMap tIntFloatMap0 = null;
      TIntFloatHashMap tIntFloatHashMap2 = null;
      try {
        tIntFloatHashMap2 = new TIntFloatHashMap(tIntFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 1911;
      int[] intArray0 = new int[8];
      intArray0[0] = int0;
      int int1 = 71;
      intArray0[1] = int1;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = int0;
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) int1;
      float float0 = 0.0F;
      floatArray0[1] = float0;
      floatArray0[2] = (float) intArray0[1];
      floatArray0[3] = (float) intArray0[5];
      floatArray0[4] = (float) intArray0[4];
      intArray0[0] = int1;
      intArray0[1] = int1;
      intArray0[2] = int0;
      int int2 = 0;
      intArray0[3] = int2;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int2;
      intArray0[7] = int0;
      float float1 = 0.0F;
      floatArray0[5] = float1;
      floatArray0[6] = (float) intArray0[1];
      floatArray0[7] = (float) intArray0[7];
      floatArray0[8] = (float) intArray0[4];
      floatArray0[9] = (float) intArray0[1];
      TIntFloatHashMap tIntFloatHashMap0 = new TIntFloatHashMap(intArray0, floatArray0);
      tIntFloatHashMap0.compact();
      assertEquals(7, tIntFloatHashMap0.capacity());
      
      TIntFloatHashMap tIntFloatHashMap1 = new TIntFloatHashMap(int0);
      int int3 = 1073;
      tIntFloatHashMap1.adjustValue(int3, int3);
      tIntFloatHashMap1.increment(int0);
      int int4 = Integer.MAX_VALUE;
      float float2 = 0.0F;
      TIntFloatHashMap tIntFloatHashMap2 = new TIntFloatHashMap(int4, (float) int4, int4, float2);
      int int5 = 911;
      tIntFloatHashMap2.putIfAbsent(int5, float2);
      assertFalse(tIntFloatHashMap2.equals(tIntFloatHashMap1));
  }
}
