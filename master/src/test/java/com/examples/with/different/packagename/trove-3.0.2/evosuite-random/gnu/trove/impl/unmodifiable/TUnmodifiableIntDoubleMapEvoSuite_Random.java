/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap;
import gnu.trove.map.TIntDoubleMap;
import gnu.trove.map.hash.TIntDoubleHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableIntDoubleMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      tUnmodifiableIntDoubleMap0.keySet();
      int int0 = 1;
      tUnmodifiableIntDoubleMap0.containsKey(int0);
      tUnmodifiableIntDoubleMap0.keys(tIntDoubleHashMap0._set);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap1 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      int int1 = 0;
      tIntDoubleHashMap0.ensureCapacity(int1);
      // Undeclared exception!
      try {
        tUnmodifiableIntDoubleMap1.putAll((TIntDoubleMap) tUnmodifiableIntDoubleMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 23723597;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableIntDoubleMap0.remove(int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TIntDoubleMap tIntDoubleMap0 = null;
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = null;
      try {
        tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap(tIntDoubleMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = (-1673);
      intArray0[0] = int0;
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) intArray0[0];
      doubleArray0[2] = (double) intArray0[0];
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) intArray0[0];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      assertEquals(1, tUnmodifiableIntDoubleMap0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 1012;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableIntDoubleMap0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 1657;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 1747;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = 987;
      intArray0[5] = int5;
      int int6 = 129;
      intArray0[6] = int6;
      int int7 = 666;
      intArray0[7] = int7;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int5;
      double double0 = 0.0;
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) int7;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      assertEquals(2, tUnmodifiableIntDoubleMap0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 1699;
      int int1 = 1;
      int int2 = 216;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int2, int0);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      tUnmodifiableIntDoubleMap0.containsKey(int2);
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int0, int0, int1, int1);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap1 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      double[] doubleArray1 = tUnmodifiableIntDoubleMap1.values(doubleArray0);
      assertNotNull(doubleArray1);
      
      int int3 = tUnmodifiableIntDoubleMap1.getNoEntryKey();
      assertEquals(1, int3);
      
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap2 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap1);
      tUnmodifiableIntDoubleMap0.getNoEntryKey();
      tUnmodifiableIntDoubleMap2.containsValue((double) int0);
      assertTrue(int1 == int3);
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 1829;
      float float0 = (-1752.3004F);
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0, float0);
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap((TIntDoubleMap) tIntDoubleHashMap0);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap1);
      // Undeclared exception!
      try {
        tUnmodifiableIntDoubleMap0.put(int0, int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 179;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0, int0);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      TDoubleProcedure tDoubleProcedure0 = null;
      boolean boolean0 = tUnmodifiableIntDoubleMap0.forEachValue(tDoubleProcedure0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0, float0);
      TIntDoubleHashMap tIntDoubleHashMap1 = null;
      try {
        tIntDoubleHashMap1 = new TIntDoubleHashMap((TIntDoubleMap) tIntDoubleHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 190;
      int[] intArray0 = new int[8];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = int0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) intArray0[7];
      doubleArray0[1] = (double) intArray0[4];
      doubleArray0[2] = (double) intArray0[4];
      doubleArray0[3] = (double) intArray0[1];
      doubleArray0[4] = (double) intArray0[6];
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) intArray0[7];
      doubleArray0[8] = (double) intArray0[3];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      tUnmodifiableIntDoubleMap0.keys();
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int0);
      TIntDoubleHashMap tIntDoubleHashMap2 = new TIntDoubleHashMap((TIntDoubleMap) tIntDoubleHashMap1);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap1 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap2);
      assertEquals(0, tUnmodifiableIntDoubleMap1.size());
  }

  @Test
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = (-385);
      intArray0[0] = int0;
      int int1 = 1880;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 507;
      intArray0[3] = int3;
      int int4 = (-745);
      intArray0[4] = int4;
      int int5 = (-572);
      intArray0[5] = int5;
      int int6 = 0;
      intArray0[6] = int6;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) intArray0[0];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap1 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tUnmodifiableIntDoubleMap0);
      int int7 = 129;
      // Undeclared exception!
      try {
        tUnmodifiableIntDoubleMap1.remove(int7);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 0;
      float float0 = (-1525.2747F);
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0, float0);
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap((TIntDoubleMap) tIntDoubleHashMap0);
      tIntDoubleHashMap0.increment(int0);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap1);
      double double0 = 1852.516256536644;
      // Undeclared exception!
      try {
        tUnmodifiableIntDoubleMap0.adjustOrPutValue(int0, (double) int0, double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 208;
      int int1 = 29;
      intArray0[0] = int1;
      intArray0[1] = int1;
      intArray0[2] = int1;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int0);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap1 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap1);
      tIntDoubleHashMap1.getNoEntryValue();
      TIntDoubleMap tIntDoubleMap0 = null;
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap2 = null;
      try {
        tUnmodifiableIntDoubleMap2 = new TUnmodifiableIntDoubleMap(tIntDoubleMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 106;
      intArray0[1] = int1;
      int int2 = 30;
      intArray0[2] = int2;
      int int3 = 1314;
      intArray0[3] = int3;
      int int4 = 88;
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      double[] doubleArray0 = new double[10];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 492.7988381295648;
      doubleArray0[1] = double1;
      doubleArray0[2] = (double) intArray0[2];
      doubleArray0[3] = (double) int5;
      doubleArray0[4] = (double) int0;
      double double2 = 1.0;
      doubleArray0[5] = double2;
      doubleArray0[6] = (double) int4;
      doubleArray0[7] = (double) int1;
      doubleArray0[8] = (double) intArray0[2];
      doubleArray0[9] = (double) intArray0[5];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      int int6 = 1574;
      float float0 = 832.6451F;
      int int7 = 0;
      double double3 = (-1216.4740339402686);
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap(int6, float0, int7, double3);
      tIntDoubleHashMap1.adjustValue(int6, int7);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap1 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap1);
      double[] doubleArray1 = tUnmodifiableIntDoubleMap1.values();
      assertFalse(doubleArray1.equals(doubleArray0));
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 921;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0, int0, int0, int0);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap1 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tUnmodifiableIntDoubleMap0);
      TUnmodifiableDoubleCollection tUnmodifiableDoubleCollection0 = (TUnmodifiableDoubleCollection)tUnmodifiableIntDoubleMap1.valueCollection();
      assertEquals(921.0, tUnmodifiableDoubleCollection0.getNoEntryValue(), 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 0;
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0);
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap((TIntDoubleMap) tIntDoubleHashMap0);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap1);
      tUnmodifiableIntDoubleMap0.get(int0);
      TIntDoubleHashMap tIntDoubleHashMap2 = new TIntDoubleHashMap();
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap1 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap2);
      assertEquals(0.0, tUnmodifiableIntDoubleMap1.getNoEntryValue(), 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-1169);
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0);
      tIntDoubleHashMap0.keySet();
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap((TIntDoubleMap) tIntDoubleHashMap0);
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)117;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)51;
      byteArray0[2] = byte2;
      byte byte3 = (byte)4;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-34);
      byteArray0[5] = byte5;
      byte byte6 = (byte)82;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-105);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-64);
      byteArray0[8] = byte8;
      byte byte9 = (byte)0;
      byteArray0[9] = byte9;
      tIntDoubleHashMap0._states = byteArray0;
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap1);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap1 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tUnmodifiableIntDoubleMap0);
      // Undeclared exception!
      try {
        tUnmodifiableIntDoubleMap1.putAll((TIntDoubleMap) tUnmodifiableIntDoubleMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = (-330);
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0, int0, int0, int0);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap1 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tUnmodifiableIntDoubleMap0);
      int int1 = 70;
      // Undeclared exception!
      try {
        tUnmodifiableIntDoubleMap1.increment(int1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = (-904);
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(int0);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      int int1 = (-605);
      // Undeclared exception!
      try {
        tUnmodifiableIntDoubleMap0.remove(int1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
