/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TLongByteMap;
import gnu.trove.map.hash.TLongByteHashMap;
import gnu.trove.procedure.TLongProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TLongByteHashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.hash.TLongByteHash.removeAt(I)V: root-Branch
   * 2 gnu.trove.impl.hash.TLongByteHash.setUp(I)I: root-Branch
   * 3 gnu.trove.impl.hash.TLongByteHash.<init>()V: root-Branch
   * 4 gnu.trove.impl.hash.TLongByteHash.insertKeyAt(IJ)V: root-Branch
   * 5 gnu.trove.impl.hash.TLongByteHash.index(J)I: I37 Branch 5 IFNE L228 - true
   * 6 gnu.trove.impl.hash.TLongByteHash.index(J)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 7 gnu.trove.impl.hash.TLongByteHash.index(J)I: I52 Branch 7 IFNE L231 - false
   * 8 gnu.trove.impl.hash.TLongByteHash.insertKey(J)I: I30 Branch 13 IFNE L279 - false
   */

  @Test
  public void test0()  throws Throwable  {
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap();
      tLongByteHashMap0.adjustOrPutValue(0L, (byte)0, (byte)0);
      assertEquals(false, tLongByteHashMap0.isEmpty());
      
      tLongByteHashMap0.remove(0L);
      assertEquals(0, tLongByteHashMap0.size());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TLongByteHash.getNoEntryKey()J: root-Branch
   * 2 gnu.trove.impl.hash.TLongByteHash.<init>(IF)V: root-Branch
   */

//   @Test
//   public void test1()  throws Throwable  {
//       TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap((-1), (-1));
//       long long0 = tLongByteHashMap0.getNoEntryKey();
//       assertEquals(0, tLongByteHashMap0.getNoEntryValue());
//       assertEquals(0L, long0);
//   }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TLongByteHash.<init>(IFJB)V: root-Branch
   */

//   @Test
//   public void test2()  throws Throwable  {
//       TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap((int) (byte)7, (float) (byte)0, (-116L), (byte) (-18));
//       assertEquals((-116L), tLongByteHashMap0.getNoEntryKey());
//       assertEquals(-18, tLongByteHashMap0.getNoEntryValue());
//   }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TLongByteHash.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   */

//   @Test
//   public void test3()  throws Throwable  {
//       TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap();
//       ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
//       ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
//       tLongByteHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
//       assertEquals(23, tLongByteHashMap0.capacity());
//       assertEquals(0L, tLongByteHashMap0.getNoEntryKey());
//       assertEquals(0, tLongByteHashMap0.getNoEntryValue());
//   }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TLongByteHash.getNoEntryValue()B: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap();
      byte byte0 = tLongByteHashMap0.getNoEntryValue();
      assertEquals((byte)0, byte0);
      assertEquals(23, tLongByteHashMap0.capacity());
      assertEquals(0L, tLongByteHashMap0.getNoEntryKey());
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TLongByteHash.contains(J)Z: I5 Branch 1 IFLT L178 - true
   * 2 gnu.trove.impl.hash.TLongByteHash.index(J)I: I37 Branch 5 IFNE L228 - false
   */

//   @Test
//   public void test5()  throws Throwable  {
//       TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap((-1), (-1));
//       boolean boolean0 = tLongByteHashMap0.containsKey((long) (byte) (-99));
//       assertEquals(0, tLongByteHashMap0.getNoEntryValue());
//       assertEquals(false, boolean0);
//       assertEquals(0L, tLongByteHashMap0.getNoEntryKey());
//   }

  //Test case number: 6
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.TLongByteHash.contains(J)Z: I5 Branch 1 IFLT L178 - false
   * 2 gnu.trove.impl.hash.TLongByteHash.insertKey(J)I: I30 Branch 13 IFNE L279 - true
   * 3 gnu.trove.impl.hash.TLongByteHash.insertKey(J)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 4 gnu.trove.impl.hash.TLongByteHash.insertKey(J)I: I57 Branch 15 IFNE L286 - false
   * 5 gnu.trove.impl.hash.TLongByteHash.index(J)I: I52 Branch 7 IFNE L231 - false
   * 6 gnu.trove.impl.hash.TLongByteHash.<init>(I)V: root-Branch
   */

//   @Test
//   public void test6()  throws Throwable  {
//       long[] longArray0 = new long[7];
//       byte[] byteArray0 = new byte[9];
//       TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(longArray0, byteArray0);
//       boolean boolean0 = tLongByteHashMap0.contains((long) (byte)0);
//       assertEquals(23, tLongByteHashMap0.capacity());
//       assertEquals(0, tLongByteHashMap0.getNoEntryValue());
//       assertEquals(1, tLongByteHashMap0.size());
//       assertEquals(true, boolean0);
//   }

  //Test case number: 7
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TLongByteHash.forEach(Lgnu/trove/procedure/TLongProcedure;)Z: I18 Branch 2 IFLE L192 - true
   * 2 gnu.trove.impl.hash.TLongByteHash.forEach(Lgnu/trove/procedure/TLongProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TLongByteHash.forEach(Lgnu/trove/procedure/TLongProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   * 4 gnu.trove.impl.hash.TLongByteHash.<init>()V: root-Branch
   */

//   @Test
//   public void test7()  throws Throwable  {
//       TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap();
//       boolean boolean0 = tLongByteHashMap0.forEach((TLongProcedure) null);
//       assertEquals(23, tLongByteHashMap0.capacity());
//       assertEquals(true, boolean0);
//       assertEquals(0L, tLongByteHashMap0.getNoEntryKey());
//       assertEquals(0, tLongByteHashMap0.getNoEntryValue());
//   }

  //Test case number: 8
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TLongByteHash.forEach(Lgnu/trove/procedure/TLongProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - false
   * 2 gnu.trove.impl.hash.TLongByteHash.forEach(Lgnu/trove/procedure/TLongProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TLongByteHash.forEach(Lgnu/trove/procedure/TLongProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

  @Test
  public void test8()  throws Throwable  {
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap((-1), (-1));
      tLongByteHashMap0.putIfAbsent((long) 137087021, (byte) (-99));
      // Undeclared exception!
      try {
        tLongByteHashMap0.forEachKey((TLongProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TLongByteHash.index(J)I: I52 Branch 7 IFNE L231 - true
   * 2 gnu.trove.impl.hash.TLongByteHash.indexRehashed(JIIB)I: I29 Branch 8 IFGE L245 - true
   * 3 gnu.trove.impl.hash.TLongByteHash.insertKey(J)I: I57 Branch 15 IFNE L286 - false
   * 4 gnu.trove.impl.hash.TLongByteHash.indexRehashed(JIIB)I: I46 Branch 9 IFNE L250 - false
   */

//   @Test
//   public void test9()  throws Throwable  {
//       long[] longArray0 = new long[4];
//       byte[] byteArray0 = new byte[8];
//       longArray0[1] = (long) (byte)92;
//       TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(longArray0, byteArray0);
//       boolean boolean0 = tLongByteHashMap0.adjustValue(755L, (byte)0);
//       assertEquals(false, boolean0);
//       assertEquals("{92=0, 0=0}", tLongByteHashMap0.toString());
//       assertEquals(0, tLongByteHashMap0.getNoEntryValue());
//       assertEquals(2, tLongByteHashMap0.size());
//   }

  //Test case number: 10
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.TLongByteHash.indexRehashed(JIIB)I: I46 Branch 9 IFNE L250 - true
   * 2 gnu.trove.impl.hash.TLongByteHash.indexRehashed(JIIB)I: I59 Branch 10 IFNE L254 - true
   * 3 gnu.trove.impl.hash.TLongByteHash.indexRehashed(JIIB)I: I71 Branch 12 IF_ICMPNE L256 - true
   * 4 gnu.trove.impl.hash.TLongByteHash.indexRehashed(JIIB)I: I46 Branch 9 IFNE L250 - false
   * 5 gnu.trove.impl.hash.TLongByteHash.index(J)I: I46 Branch 6 IF_ICMPNE L231 - true
   * 6 gnu.trove.impl.hash.TLongByteHash.indexRehashed(JIIB)I: I29 Branch 8 IFGE L245 - false
   */

//   @Test
//   public void test10()  throws Throwable  {
//       TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap((-1), (-1));
//       TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap((TLongByteMap) tLongByteHashMap0);
//       byte[] byteArray0 = new byte[7];
//       byteArray0[0] = (byte) (-99);
//       byteArray0[2] = (byte) (-99);
//       tLongByteHashMap1._states = byteArray0;
//       boolean boolean0 = tLongByteHashMap1.containsKey((long) (byte) (-99));
//       assertEquals(0, tLongByteHashMap1.getNoEntryValue());
//       assertEquals(false, boolean0);
//   }

  //Test case number: 11
  /*
   * 13 covered goals:
   * 1 gnu.trove.impl.hash.TLongByteHash.indexRehashed(JIIB)I: I59 Branch 10 IFNE L254 - false
   * 2 gnu.trove.impl.hash.TLongByteHash.indexRehashed(JIIB)I: I62 Branch 11 IF_ICMPEQ L254 - false
   * 3 gnu.trove.impl.hash.TLongByteHash.insertKey(J)I: I57 Branch 15 IFNE L286 - true
   * 4 gnu.trove.impl.hash.TLongByteHash.insertKeyRehash(JIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 5 gnu.trove.impl.hash.TLongByteHash.insertKeyRehash(JIIB)I: I45 Branch 18 IFGE L310 - false
   * 6 gnu.trove.impl.hash.TLongByteHash.insertKeyRehash(JIIB)I: I62 Branch 19 IFNE L316 - true
   * 7 gnu.trove.impl.hash.TLongByteHash.insertKeyRehash(JIIB)I: I62 Branch 19 IFNE L316 - false
   * 8 gnu.trove.impl.hash.TLongByteHash.insertKeyRehash(JIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 9 gnu.trove.impl.hash.TLongByteHash.insertKeyRehash(JIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 10 gnu.trove.impl.hash.TLongByteHash.insertKeyRehash(JIIB)I: I104 Branch 22 IFNE L327 - false
   * 11 gnu.trove.impl.hash.TLongByteHash.contains(J)Z: I5 Branch 1 IFLT L178 - false
   * 12 gnu.trove.impl.hash.TLongByteHash.index(J)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 13 gnu.trove.impl.hash.TLongByteHash.index(J)I: I52 Branch 7 IFNE L231 - true
   */

  @Test
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-1128L);
      byte[] byteArray0 = new byte[9];
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(longArray0, byteArray0);
      boolean boolean0 = tLongByteHashMap0.contains((long) (byte)0);
      assertEquals("{0=0, -1128=0}", tLongByteHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 9 covered goals:
   * 1 gnu.trove.impl.hash.TLongByteHash.indexRehashed(JIIB)I: I71 Branch 12 IF_ICMPNE L256 - false
   * 2 gnu.trove.impl.hash.TLongByteHash.contains(J)Z: I5 Branch 1 IFLT L178 - true
   * 3 gnu.trove.impl.hash.TLongByteHash.index(J)I: I37 Branch 5 IFNE L228 - true
   * 4 gnu.trove.impl.hash.TLongByteHash.index(J)I: I46 Branch 6 IF_ICMPNE L231 - true
   * 5 gnu.trove.impl.hash.TLongByteHash.indexRehashed(JIIB)I: I29 Branch 8 IFGE L245 - true
   * 6 gnu.trove.impl.hash.TLongByteHash.indexRehashed(JIIB)I: I29 Branch 8 IFGE L245 - false
   * 7 gnu.trove.impl.hash.TLongByteHash.indexRehashed(JIIB)I: I46 Branch 9 IFNE L250 - true
   * 8 gnu.trove.impl.hash.TLongByteHash.indexRehashed(JIIB)I: I59 Branch 10 IFNE L254 - true
   * 9 gnu.trove.impl.hash.TLongByteHash.indexRehashed(JIIB)I: I71 Branch 12 IF_ICMPNE L256 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap((-1), (-1));
      TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap((TLongByteMap) tLongByteHashMap0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-99);
      tLongByteHashMap1._states = byteArray0;
      boolean boolean0 = tLongByteHashMap1.containsKey((long) (byte) (-99));
      assertEquals(0L, tLongByteHashMap1.getNoEntryKey());
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 10 covered goals:
   * 1 gnu.trove.impl.hash.TLongByteHash.insertKeyRehash(JIIB)I: I104 Branch 22 IFNE L327 - true
   * 2 gnu.trove.impl.hash.TLongByteHash.insertKeyAt(IJ)V: root-Branch
   * 3 gnu.trove.impl.hash.TLongByteHash.insertKey(J)I: I30 Branch 13 IFNE L279 - false
   * 4 gnu.trove.impl.hash.TLongByteHash.insertKey(J)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 5 gnu.trove.impl.hash.TLongByteHash.insertKey(J)I: I57 Branch 15 IFNE L286 - true
   * 6 gnu.trove.impl.hash.TLongByteHash.insertKeyRehash(JIIB)I: I62 Branch 19 IFNE L316 - false
   * 7 gnu.trove.impl.hash.TLongByteHash.insertKeyRehash(JIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 8 gnu.trove.impl.hash.TLongByteHash.insertKeyRehash(JIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 9 gnu.trove.impl.hash.TLongByteHash.insertKeyRehash(JIIB)I: I45 Branch 18 IFGE L310 - true
   * 10 gnu.trove.impl.hash.TLongByteHash.insertKeyRehash(JIIB)I: I116 Branch 23 IF_ICMPNE L332 - true
   */

  @Test
  public void test13()  throws Throwable  {
      long[] longArray0 = new long[4];
      byte[] byteArray0 = new byte[8];
      longArray0[0] = (long) (byte) (-64);
      longArray0[1] = (long) (byte)92;
      longArray0[3] = (-1266L);
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap(longArray0, byteArray0);
      TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap((TLongByteMap) tLongByteHashMap0);
      assertEquals("{0=0, -64=0, -1266=0, 92=0}", tLongByteHashMap1.toString());
      assertEquals(0L, tLongByteHashMap0.getNoEntryKey());
  }

  //Test case number: 14
  /*
   * 13 covered goals:
   * 1 gnu.trove.impl.hash.TLongByteHash.insertKeyRehash(JIIB)I: I116 Branch 23 IF_ICMPNE L332 - false
   * 2 gnu.trove.impl.hash.TLongByteHash.insertKeyRehash(JIIB)I: I121 Branch 24 IF_ICMPEQ L336 - true
   * 3 gnu.trove.impl.hash.TLongByteHash.setUp(I)I: root-Branch
   * 4 gnu.trove.impl.hash.TLongByteHash.<init>(I)V: root-Branch
   * 5 gnu.trove.impl.hash.TLongByteHash.<init>(IF)V: root-Branch
   * 6 gnu.trove.impl.hash.TLongByteHash.insertKey(J)I: I30 Branch 13 IFNE L279 - true
   * 7 gnu.trove.impl.hash.TLongByteHash.insertKey(J)I: I50 Branch 14 IF_ICMPNE L286 - true
   * 8 gnu.trove.impl.hash.TLongByteHash.insertKeyRehash(JIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 9 gnu.trove.impl.hash.TLongByteHash.insertKeyRehash(JIIB)I: I45 Branch 18 IFGE L310 - true
   * 10 gnu.trove.impl.hash.TLongByteHash.insertKeyRehash(JIIB)I: I45 Branch 18 IFGE L310 - false
   * 11 gnu.trove.impl.hash.TLongByteHash.insertKeyRehash(JIIB)I: I62 Branch 19 IFNE L316 - true
   * 12 gnu.trove.impl.hash.TLongByteHash.insertKeyRehash(JIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 13 gnu.trove.impl.hash.TLongByteHash.insertKeyRehash(JIIB)I: I116 Branch 23 IF_ICMPNE L332 - true
   */

  @Test
  public void test14()  throws Throwable  {
      TLongByteHashMap tLongByteHashMap0 = new TLongByteHashMap((-1), (-1));
      TLongByteHashMap tLongByteHashMap1 = new TLongByteHashMap((TLongByteMap) tLongByteHashMap0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-99);
      tLongByteHashMap1._states = byteArray0;
      // Undeclared exception!
      try {
        tLongByteHashMap1.putIfAbsent((long) (byte) (-99), (byte) (-99));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No free or removed slots available. Key set full?!!
         //
      }
  }
}
