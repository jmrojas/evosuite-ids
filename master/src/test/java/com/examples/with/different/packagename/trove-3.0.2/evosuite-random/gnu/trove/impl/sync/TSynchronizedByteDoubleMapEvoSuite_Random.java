/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedByteDoubleMap;
import gnu.trove.map.TByteDoubleMap;
import gnu.trove.map.hash.TByteDoubleHashMap;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Locale;
import java.util.MissingResourceException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedByteDoubleMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-598);
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int0);
      tByteDoubleHashMap0.tempDisableAutoCompaction();
      TSynchronizedByteDoubleMap tSynchronizedByteDoubleMap0 = new TSynchronizedByteDoubleMap((TByteDoubleMap) tByteDoubleHashMap0);
      byte byte0 = (byte)117;
      tSynchronizedByteDoubleMap0.increment(byte0);
      tSynchronizedByteDoubleMap0.putAll((TByteDoubleMap) tByteDoubleHashMap0);
      byte byte1 = (byte)38;
      double double0 = 1944.4578007374748;
      tSynchronizedByteDoubleMap0.hashCode();
      tSynchronizedByteDoubleMap0.put(byte1, double0);
      assertEquals(false, tByteDoubleHashMap0.isEmpty());
      assertEquals(1, tSynchronizedByteDoubleMap0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 333;
      float float0 = 1588.4745F;
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap();
      TSynchronizedByteDoubleMap tSynchronizedByteDoubleMap0 = new TSynchronizedByteDoubleMap((TByteDoubleMap) tByteDoubleHashMap0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)99;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)16;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-1);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte)39;
      byteArray0[7] = byte7;
      byte byte8 = (byte)18;
      byteArray0[8] = byte8;
      tSynchronizedByteDoubleMap0.keys(byteArray0);
      tSynchronizedByteDoubleMap0.size();
      byte byte9 = (byte)95;
      TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap(int0, float0, byte9, (double) float0);
      String string0 = "AA**Oc]{!R";
      tSynchronizedByteDoubleMap0.iterator();
      // Undeclared exception!
      try {
        URI.create(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 6: AA**Oc]{!R
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 0;
      float float0 = (-849.0039F);
      float float1 = (-964.72455F);
      byte byte0 = (byte)0;
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int0, float1, byte0, (double) int0);
      TSynchronizedByteDoubleMap tSynchronizedByteDoubleMap0 = new TSynchronizedByteDoubleMap((TByteDoubleMap) tByteDoubleHashMap0);
      byte byte1 = (byte)75;
      double double0 = 0.0;
      tSynchronizedByteDoubleMap0.adjustOrPutValue(byte1, (double) float1, double0);
      assertEquals(7, tByteDoubleHashMap0.capacity());
      
      TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap(int0, float0);
      TSynchronizedByteDoubleMap tSynchronizedByteDoubleMap1 = new TSynchronizedByteDoubleMap((TByteDoubleMap) tByteDoubleHashMap1);
      tSynchronizedByteDoubleMap1.hashCode();
      assertFalse(tSynchronizedByteDoubleMap1.equals(tSynchronizedByteDoubleMap0));
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 471;
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int0, int0);
      byte byte0 = (byte)114;
      tByteDoubleHashMap0.contains(byte0);
      String string0 = "PP}d<";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 2: PP}d<:PP%7Dd%3C#PP%7Dd%3C
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 1842;
      byte byte0 = (byte) (-1);
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int0, (float) int0, byte0, (double) int0);
      Locale locale0 = Locale.ROOT;
      String string0 = locale0.getISO3Country();
      TSynchronizedByteDoubleMap tSynchronizedByteDoubleMap0 = new TSynchronizedByteDoubleMap((TByteDoubleMap) tByteDoubleHashMap0, (Object) string0);
      int int1 = tSynchronizedByteDoubleMap0.hashCode();
      assertFalse(int0 == int1);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 0;
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int0);
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://@:0?#
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TByteDoubleMap tByteDoubleMap0 = null;
      TByteDoubleHashMap tByteDoubleHashMap0 = null;
      try {
        tByteDoubleHashMap0 = new TByteDoubleHashMap(tByteDoubleMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      float float0 = 1518.4946F;
      int int2 = 177;
      float float1 = 641.3937F;
      byte byte0 = (byte) (-127);
      double double0 = 0.0;
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int2, float1, byte0, double0);
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :#
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-696);
      byte byte0 = (byte) (-17);
      double double0 = (-753.8501811092908);
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int0, (float) int0, byte0, double0);
      TSynchronizedByteDoubleMap tSynchronizedByteDoubleMap0 = new TSynchronizedByteDoubleMap((TByteDoubleMap) tByteDoubleHashMap0);
      TSynchronizedByteDoubleMap tSynchronizedByteDoubleMap1 = new TSynchronizedByteDoubleMap((TByteDoubleMap) tSynchronizedByteDoubleMap0);
      int int1 = 1830;
      TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap(int1);
      TSynchronizedByteDoubleMap tSynchronizedByteDoubleMap2 = new TSynchronizedByteDoubleMap((TByteDoubleMap) tByteDoubleHashMap1);
      tSynchronizedByteDoubleMap2.putAll((TByteDoubleMap) tByteDoubleHashMap1);
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.ENGLISH;
      tSynchronizedByteDoubleMap2.putAll((TByteDoubleMap) tByteDoubleHashMap1);
      String string0 = locale0.getDisplayScript(locale1);
      boolean boolean0 = tSynchronizedByteDoubleMap2.isEmpty();
      boolean boolean1 = tSynchronizedByteDoubleMap2.equals((Object) string0);
      assertFalse(boolean1 == boolean0);
      
      byte byte1 = (byte) (-111);
      tSynchronizedByteDoubleMap2.increment(byte1);
      tSynchronizedByteDoubleMap2.clear();
      assertTrue(tSynchronizedByteDoubleMap2.equals(tSynchronizedByteDoubleMap1));
      assertEquals(true, tSynchronizedByteDoubleMap2.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap();
      String string0 = "oD2Qv2J";
      Locale locale0 = new Locale(string0);
      String string1 = locale0.getDisplayVariant();
      TSynchronizedByteDoubleMap tSynchronizedByteDoubleMap0 = new TSynchronizedByteDoubleMap((TByteDoubleMap) tByteDoubleHashMap0, (Object) string1);
      TSynchronizedByteDoubleMap tSynchronizedByteDoubleMap1 = new TSynchronizedByteDoubleMap((TByteDoubleMap) tSynchronizedByteDoubleMap0);
      byte[] byteArray0 = tSynchronizedByteDoubleMap1.keys();
      assertNotNull(byteArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-548);
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int0);
      TSynchronizedByteDoubleMap tSynchronizedByteDoubleMap0 = new TSynchronizedByteDoubleMap((TByteDoubleMap) tByteDoubleHashMap0);
      int int1 = 1876;
      TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap(int1);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale0 = Locale.getDefault(locale_Category0);
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      String string0 = locale0.getDisplayVariant(locale1);
      TByteDoubleHashMap tByteDoubleHashMap2 = new TByteDoubleHashMap(int1, int1);
      double double0 = 1.0;
      tSynchronizedByteDoubleMap0.containsValue(double0);
      String string1 = locale1.toString();
      TSynchronizedByteDoubleMap tSynchronizedByteDoubleMap1 = new TSynchronizedByteDoubleMap((TByteDoubleMap) tByteDoubleHashMap1, (Object) string1);
      TSynchronizedByteDoubleMap tSynchronizedByteDoubleMap2 = new TSynchronizedByteDoubleMap((TByteDoubleMap) tByteDoubleHashMap2);
      byte byte0 = (byte) (-1);
      double double1 = 1.0;
      double double2 = tSynchronizedByteDoubleMap2.putIfAbsent(byte0, double1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = double2;
      tSynchronizedByteDoubleMap2.values(doubleArray0);
      tSynchronizedByteDoubleMap0.keySet();
      byte byte1 = (byte) (-48);
      tSynchronizedByteDoubleMap2.remove(byte1);
      assertEquals(1, tByteDoubleHashMap2.size());
      
      Locale.setDefault(locale_Category0, locale1);
      TSynchronizedByteDoubleMap tSynchronizedByteDoubleMap3 = new TSynchronizedByteDoubleMap((TByteDoubleMap) tByteDoubleHashMap1, (Object) string0);
      double double3 = 892.033466219989;
      tSynchronizedByteDoubleMap3.adjustValue(byte1, double3);
      TSynchronizedByteDoubleMap tSynchronizedByteDoubleMap4 = new TSynchronizedByteDoubleMap((TByteDoubleMap) tSynchronizedByteDoubleMap3);
      assertFalse(tSynchronizedByteDoubleMap3.equals(tSynchronizedByteDoubleMap2));
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-1);
      byte byte0 = (byte) (-113);
      double double0 = (-543.3285570370605);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      byteArray0[6] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[7] = byte1;
      byteArray0[8] = byte0;
      byteArray0[9] = byte0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) byteArray0[7];
      doubleArray0[1] = (double) byteArray0[0];
      double double1 = 321.5290167007499;
      doubleArray0[2] = double1;
      doubleArray0[3] = (double) byteArray0[1];
      doubleArray0[4] = double0;
      doubleArray0[5] = (double) byteArray0[4];
      doubleArray0[6] = (double) byteArray0[1];
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(byteArray0, doubleArray0);
      TSynchronizedByteDoubleMap tSynchronizedByteDoubleMap0 = new TSynchronizedByteDoubleMap((TByteDoubleMap) tByteDoubleHashMap0);
      TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap(int0, (float) int0, byte0, double0);
      TSynchronizedByteDoubleMap tSynchronizedByteDoubleMap1 = new TSynchronizedByteDoubleMap((TByteDoubleMap) tByteDoubleHashMap1);
      boolean boolean0 = tSynchronizedByteDoubleMap1.increment(byte0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      TByteDoubleMap tByteDoubleMap0 = null;
      TSynchronizedByteDoubleMap tSynchronizedByteDoubleMap0 = null;
      try {
        tSynchronizedByteDoubleMap0 = new TSynchronizedByteDoubleMap(tByteDoubleMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-29);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)89;
      byteArray0[3] = byte3;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) byteArray0[2];
      doubleArray0[1] = (double) byteArray0[0];
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(byteArray0, doubleArray0);
      TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap((TByteDoubleMap) tByteDoubleHashMap0);
      TSynchronizedByteDoubleMap tSynchronizedByteDoubleMap0 = new TSynchronizedByteDoubleMap((TByteDoubleMap) tByteDoubleHashMap1);
      assertEquals(false, tSynchronizedByteDoubleMap0.isEmpty());
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1134;
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int0);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      String string0 = hashMap0.toString();
      TSynchronizedByteDoubleMap tSynchronizedByteDoubleMap0 = new TSynchronizedByteDoubleMap((TByteDoubleMap) tByteDoubleHashMap0, (Object) string0);
      double[] doubleArray0 = tSynchronizedByteDoubleMap0.values();
      assertNotNull(doubleArray0);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-1);
      float float0 = (-1017.8918F);
      byte byte0 = (byte) (-100);
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int0, float0, byte0, (double) int0);
      Object object0 = new Object();
      TSynchronizedByteDoubleMap tSynchronizedByteDoubleMap0 = new TSynchronizedByteDoubleMap((TByteDoubleMap) tByteDoubleHashMap0, object0);
      assertEquals((-1.0), tSynchronizedByteDoubleMap0.getNoEntryValue(), 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 103;
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int0);
      String string0 = "";
      URI.create(string0);
      String string1 = "(o;Y|OoY:,X>^Sa^f";
      // Undeclared exception!
      try {
        URI.create(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in scheme name at index 0: (o;Y|OoY:,X>^Sa^f
         //
      }
  }
}
