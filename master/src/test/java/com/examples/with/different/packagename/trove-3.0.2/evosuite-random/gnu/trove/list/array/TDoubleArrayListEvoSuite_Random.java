/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.list.array;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TDoubleCollection;
import gnu.trove.list.array.TDoubleArrayList;
import gnu.trove.list.linked.TDoubleLinkedList;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleArrayListEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = (-1916.5427995360417);
      doubleArray0[1] = double1;
      double double2 = 1.0;
      doubleArray0[2] = double2;
      double double3 = (-126.42745408465953);
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = 0.0;
      doubleArray0[5] = double5;
      double double6 = 0.0;
      doubleArray0[6] = double6;
      double double7 = (-1560.8569261657278);
      doubleArray0[7] = double7;
      double double8 = 730.4669533662069;
      doubleArray0[8] = double8;
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(doubleArray0);
      int int0 = 0;
      double[] doubleArray1 = tDoubleArrayList0.toArray(doubleArray0, int0, int0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[5];
      double double9 = (-1.0);
      doubleArray2[0] = double9;
      double double10 = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = double10;
      double double11 = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = double11;
      double double12 = 0.0;
      doubleArray2[3] = double12;
      double double13 = 0.0;
      doubleArray2[4] = double13;
      TDoubleArrayList tDoubleArrayList1 = new TDoubleArrayList(doubleArray2);
      int int1 = (-839);
      // Undeclared exception!
      try {
        tDoubleArrayList1.removeAt(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -839
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TDoubleCollection tDoubleCollection0 = null;
      TDoubleArrayList tDoubleArrayList0 = null;
      try {
        tDoubleArrayList0 = new TDoubleArrayList(tDoubleCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      int int0 = (-1);
      int int1 = 1;
      // Undeclared exception!
      try {
        tDoubleLinkedList0.subList(int0, int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // begin index can not be < 0
         //
      }
  }

//   @Test
//   public void test3()  throws Throwable  {
//       double[] doubleArray0 = new double[3];
//       double double0 = 0.0;
//       doubleArray0[0] = double0;
//       double double1 = (-1776.0504103491883);
//       TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(doubleArray0);
//       double double2 = tDoubleArrayList0.min();
//       assertEquals(0.0, tDoubleArrayList0.getNoEntryValue(), 0.01D);
//       assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
//       assertEquals(3, tDoubleArrayList0.size());
//       
//       doubleArray0[1] = double1;
//       double double3 = 1033.8362489872625;
//       doubleArray0[2] = double3;
//       double double4 = 1.0;
//       TDoubleArrayList tDoubleArrayList1 = TDoubleArrayList.wrap(doubleArray0, double4);
//       assertNotNull(tDoubleArrayList1);
//       
//       double double5 = 1702.3703639966761;
//       int int0 = tDoubleArrayList1.indexOf(double5);
//       assertEquals((-1), int0);
//       assertEquals(1.0, tDoubleArrayList1.getNoEntryValue(), 0.01D);
//   }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-929);
      TDoubleArrayList tDoubleArrayList0 = null;
      try {
        tDoubleArrayList0 = new TDoubleArrayList(int0, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 1.0;
      doubleArray0[2] = double2;
      double double3 = (-1.0);
      doubleArray0[3] = double3;
      double double4 = Double.POSITIVE_INFINITY;
      doubleArray0[4] = double4;
      double double5 = (-2040.5980973015232);
      doubleArray0[5] = double5;
      double double6 = 1173.6446281685937;
      doubleArray0[6] = double6;
      double double7 = 121.3670094015724;
      doubleArray0[7] = double7;
      double double8 = (-787.3073024912813);
      doubleArray0[8] = double8;
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0, double4);
      assertEquals(Double.POSITIVE_INFINITY, tDoubleArrayList0.getNoEntryValue(), 0.01D);
      assertNotNull(tDoubleArrayList0);
      
      int int0 = 31;
      TDoubleArrayList tDoubleArrayList1 = new TDoubleArrayList(int0);
      int int1 = (-744);
      // Undeclared exception!
      try {
        tDoubleArrayList1.setQuick(int1, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -744
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0, doubleArray0[0]);
      tDoubleArrayList0.iterator();
      int int0 = (-1967);
      TDoubleArrayList tDoubleArrayList1 = null;
      try {
        tDoubleArrayList1 = new TDoubleArrayList(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = (-996.4967225844199);
      doubleArray0[1] = double1;
      double double2 = (-1156.517112417471);
      doubleArray0[2] = double2;
      double double3 = 1.0;
      doubleArray0[3] = double3;
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(doubleArray0);
      assertEquals(0.0, tDoubleArrayList0.getNoEntryValue(), 0.01D);
      assertEquals("{0.0, -996.4967225844199, -1156.517112417471, 1.0}", tDoubleArrayList0.toString());
      assertEquals(4, tDoubleArrayList0.size());
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          double[] doubleArray0 = new double[7];
          double double0 = 1362.3061232385191;
          doubleArray0[0] = double0;
          double double1 = (-363.5139193453672);
          doubleArray0[1] = double1;
          double double2 = Double.NEGATIVE_INFINITY;
          doubleArray0[2] = double2;
          double double3 = Double.NEGATIVE_INFINITY;
          doubleArray0[3] = double3;
          double double4 = (-200.9135851075337);
          doubleArray0[4] = double4;
          double double5 = (-266.2648470479146);
          doubleArray0[5] = double5;
          double double6 = 0.0;
          doubleArray0[6] = double6;
          double double7 = (-1.0);
          TDoubleArrayList.wrap(doubleArray0, double7);
          String string0 = "end index < ";
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"end index < \" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(int0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      double double0 = (-1916.576620186614);
      doubleArray0[7] = double0;
      tDoubleArrayList0.addAll(doubleArray0);
      assertEquals(8, tDoubleArrayList0.size());
      
      int int1 = 0;
      TDoubleArrayList tDoubleArrayList1 = new TDoubleArrayList(int1, int1);
      int int2 = tDoubleArrayList1.lastIndexOf(int1, int1);
      assertEquals((-1), int2);
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = (-1.0);
      doubleArray0[1] = double1;
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0);
      assertNotNull(tDoubleArrayList0);
      
      int int0 = 1872;
      int int1 = (-526);
      // Undeclared exception!
      try {
        tDoubleArrayList0.set(int0, doubleArray0, int1, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1872
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      assertEquals(0.0, tDoubleArrayList0.getNoEntryValue(), 0.01D);
      assertEquals(true, tDoubleArrayList0.isEmpty());
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      double double1 = 319.24492691463763;
      doubleArray0[1] = double1;
      double double2 = 64.85073354992076;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = (-1843.0836026207276);
      doubleArray0[4] = double4;
      double double5 = (-1.0);
      doubleArray0[5] = double5;
      double double6 = (-382.7618000784556);
      doubleArray0[6] = double6;
      double double7 = 0.0;
      doubleArray0[7] = double7;
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(doubleArray0);
      int int0 = 844;
      double double8 = 0.0;
      // Undeclared exception!
      try {
        tDoubleArrayList0.setQuick(int0, double8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 844
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      // Undeclared exception!
      try {
        tDoubleArrayList0.min();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot find minimum of an empty list
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = double0;
      double double1 = 1.0;
      doubleArray0[1] = double1;
      double double2 = (-1804.8517417443359);
      doubleArray0[2] = double2;
      double double3 = 0.0;
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0, double3);
      tDoubleArrayList0.clear();
      TDoubleCollection tDoubleCollection0 = null;
      int int0 = 1;
      TDoubleArrayList tDoubleArrayList1 = new TDoubleArrayList(int0, int0);
      TDoubleArrayList tDoubleArrayList2 = null;
      try {
        tDoubleArrayList2 = new TDoubleArrayList(tDoubleCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 1995.139168556592;
      doubleArray0[0] = double0;
      double double1 = 1020.9709406294996;
      doubleArray0[1] = double1;
      double double2 = 1927.079331312893;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      doubleArray0[0] = double3;
      doubleArray0[1] = double2;
      doubleArray0[2] = double3;
      double double4 = (-1653.2123269489641);
      doubleArray0[3] = double4;
      doubleArray0[4] = double3;
      doubleArray0[5] = double4;
      double double5 = (-1530.064121992174);
      doubleArray0[4] = double5;
      double double6 = 2000.8616648947277;
      doubleArray0[5] = double6;
      double double7 = 0.0;
      TDoubleArrayList.wrap(doubleArray0, double7);
      int int0 = (-1884);
      TDoubleArrayList tDoubleArrayList0 = null;
      try {
        tDoubleArrayList0 = new TDoubleArrayList(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-1831.8869767005456);
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0);
      assertNotNull(tDoubleArrayList0);
      assertEquals(0.0, tDoubleArrayList0.getNoEntryValue(), 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      double[] doubleArray0 = new double[9];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = (-154.6624056523552);
      doubleArray0[1] = double1;
      double double2 = 302.33168557911915;
      doubleArray0[2] = double2;
      double double3 = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = double3;
      double double4 = (-1.0);
      doubleArray0[4] = double4;
      double double5 = (-1760.8276089343997);
      doubleArray0[5] = double5;
      double double6 = (-753.4218873097279);
      doubleArray0[6] = double6;
      double double7 = (-107.08168490912867);
      doubleArray0[7] = double7;
      double double8 = 462.87788934305604;
      doubleArray0[8] = double8;
      TDoubleArrayList tDoubleArrayList1 = TDoubleArrayList.wrap(doubleArray0, doubleArray0[6]);
      assertEquals((-753.4218873097279), tDoubleArrayList1.getNoEntryValue(), 0.01D);
      assertNotNull(tDoubleArrayList1);
      
      int int0 = 1921;
      tDoubleArrayList0.reverse();
      // Undeclared exception!
      try {
        tDoubleArrayList0.subList(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // end index < 10
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      int int0 = (-1844);
      int int1 = 0;
      double double0 = (-1733.1945284735814);
      // Undeclared exception!
      try {
        tDoubleArrayList0.fill(int0, int1, double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -1844
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-119.95609180973733);
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 1.0;
      doubleArray0[3] = double3;
      double double4 = (-1.0);
      doubleArray0[4] = double4;
      double double5 = 0.0;
      doubleArray0[5] = double5;
      double double6 = 0.0;
      doubleArray0[6] = double6;
      double double7 = 1289.7018029541882;
      doubleArray0[7] = double7;
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0);
      assertNotNull(tDoubleArrayList0);
      
      boolean boolean0 = tDoubleArrayList0.contains(double3);
      assertEquals(0.0, tDoubleArrayList0.getNoEntryValue(), 0.01D);
      assertEquals(true, boolean0);
  }
}
