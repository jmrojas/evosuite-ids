/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TDoubleIntMap;
import gnu.trove.map.hash.TDoubleIntHashMap;
import gnu.trove.procedure.TDoubleIntProcedure;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleIntHashMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = (-1961.4015249050037);
      doubleArray0[1] = double1;
      double double2 = (-1.0);
      doubleArray0[2] = double2;
      double double3 = 1304.4657536708692;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      int[] intArray0 = new int[9];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 1656;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 901;
      intArray0[3] = int3;
      int int4 = 31;
      intArray0[4] = int4;
      int int5 = (-1);
      intArray0[5] = int5;
      int int6 = (-1734);
      intArray0[6] = int6;
      int int7 = (-1);
      intArray0[7] = int7;
      int int8 = 75;
      intArray0[8] = int8;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(doubleArray0, intArray0);
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap((TDoubleIntMap) tDoubleIntHashMap0);
      float float0 = 1778.5884F;
      tDoubleIntHashMap1.setAutoCompactionFactor(float0);
      assertEquals(false, tDoubleIntHashMap1.isEmpty());
      assertEquals(0, tDoubleIntHashMap1.getNoEntryValue());
      assertEquals("{-1.0=0, 1304.4657536708692=901, -1961.4015249050037=1656, 0.0=31}", tDoubleIntHashMap0.toString());
      assertEquals("{-1.0=0, 1304.4657536708692=901, -1961.4015249050037=1656, 0.0=31}", tDoubleIntHashMap1.toString());
      assertEquals(23, tDoubleIntHashMap1.capacity());
      assertEquals(0.0, tDoubleIntHashMap1.getNoEntryKey(), 0.01D);
      assertTrue(tDoubleIntHashMap1.equals(tDoubleIntHashMap0));
  }

  @Test
  public void test1()  throws Throwable  {
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap();
      double double0 = (-1132.8018939615997);
      int[] intArray0 = new int[7];
      int int0 = 877;
      intArray0[0] = int0;
      int int1 = 761;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = 149;
      intArray0[3] = int3;
      int int4 = (-1115);
      intArray0[4] = int4;
      int int5 = (-1607);
      intArray0[5] = int5;
      int int6 = 0;
      intArray0[6] = int6;
      tDoubleIntHashMap0.values(intArray0);
      tDoubleIntHashMap0.isEmpty();
      tDoubleIntHashMap0.values();
      tDoubleIntHashMap0.get(double0);
      int int7 = 773;
      tDoubleIntHashMap0.put(double0, int7);
      int int8 = 0;
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap(int8);
      double double1 = Double.NEGATIVE_INFINITY;
      tDoubleIntHashMap0.get(double1);
      assertEquals(1, tDoubleIntHashMap0.size());
      
      tDoubleIntHashMap1.getNoEntryKey();
      assertEquals(true, tDoubleIntHashMap1.isEmpty());
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-1172);
      double double0 = 0.0;
      int int1 = (-1);
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0, (float) int0, double0, int1);
      int[] intArray0 = new int[6];
      intArray0[0] = int1;
      intArray0[1] = int0;
      intArray0[2] = int0;
      int int2 = 0;
      intArray0[3] = int2;
      intArray0[4] = int1;
      intArray0[5] = int1;
      int[] intArray1 = tDoubleIntHashMap0.values(intArray0);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      int int3 = (-1);
      float float0 = 1740.114F;
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap(int3, float0, (double) int3, int3);
      boolean boolean0 = tDoubleIntHashMap1.isEmpty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      float float0 = 535.83325F;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0, float0);
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte) (-12);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-57);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      byte byte4 = (byte)68;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-30);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-40);
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-112);
      byteArray0[8] = byte8;
      byte byte9 = (byte)1;
      byteArray0[9] = byte9;
      tDoubleIntHashMap0._states = byteArray0;
      assertSame(tDoubleIntHashMap0._states, byteArray0);
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = (-1599);
          double[] doubleArray0 = new double[1];
          doubleArray0[0] = (double) int0;
          int[] intArray0 = new int[4];
          intArray0[0] = int0;
          float float0 = 489.57944F;
          double double0 = 0.0;
          int int1 = 0;
          TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(intArray0[0], float0, double0, int1);
          intArray0[0] = int0;
          intArray0[1] = int1;
          int int2 = (-1642);
          intArray0[2] = int2;
          TDoubleIntProcedure tDoubleIntProcedure0 = null;
          tDoubleIntHashMap0.retainEntries(tDoubleIntProcedure0);
          intArray0[3] = int0;
          intArray0[1] = int0;
          intArray0[2] = int0;
          intArray0[3] = int0;
          TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap(doubleArray0, intArray0);
          String string0 = "\"ZT_'zkF,f5o,/<'";
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\"ZT_'zkF,f5o,/<'\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // sun.reflect.GeneratedConstructorAccessor10.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 1380;
      float float0 = 0.0F;
      String string0 = "$z i)<oDt";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: $z i)<oDt:$z%20i)%3CoDt#$z%20i)%3CoDt
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          double double0 = 96.02573507329592;
          int int0 = 521;
          double double1 = 1.0;
          TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0, (float) int0, double1, int0);
          int int1 = (-836);
          tDoubleIntHashMap0.ensureCapacity(int1);
          TDoubleIntProcedure tDoubleIntProcedure0 = null;
          tDoubleIntHashMap0.retainEntries(tDoubleIntProcedure0);
          tDoubleIntHashMap0.getNoEntryKey();
          Double double2 = new Double(double0);
          String string0 = "APcnsD#.sz^lVx]}";
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"APcnsD#.sz^lVx]}\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // sun.reflect.GeneratedConstructorAccessor10.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0);
      tDoubleIntHashMap0.valueCollection();
      String string0 = "ciCsd]lnDpOmH\"ew /";
      tDoubleIntHashMap0.keySet();
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 5: ciCsd]lnDpOmH\"ew /:ciCsd]lnDpOmH%22ew%20/#ciCsd]lnDpOmH%22ew%20/
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 2.0;
      doubleArray0[0] = double0;
      double double1 = 1.0;
      doubleArray0[1] = double1;
      double double2 = (-1281.6416658792461);
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = 1732.490871917077;
      doubleArray0[4] = double4;
      double double5 = 0.0;
      doubleArray0[5] = double5;
      double double6 = 0.0;
      doubleArray0[6] = double6;
      double double7 = 0.0;
      doubleArray0[7] = double7;
      double double8 = (-588.0789908957428);
      doubleArray0[8] = double8;
      double double9 = (-208.05085967032758);
      doubleArray0[9] = double9;
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 1071;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = (-676);
      intArray0[4] = int4;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(doubleArray0, intArray0);
      tDoubleIntHashMap0.ensureCapacity(intArray0[0]);
      assertEquals("{1.0=0, 1732.490871917077=-676, -1281.6416658792461=1071, 2.0=0, 0.0=0}", tDoubleIntHashMap0.toString());
      
      int int5 = 1464;
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap(int5);
      double double10 = 0.0;
      int int6 = 1;
      tDoubleIntHashMap1.keySet();
      TDoubleIntHashMap tDoubleIntHashMap2 = new TDoubleIntHashMap();
      boolean boolean0 = tDoubleIntHashMap1.adjustValue(double10, int6);
      assertEquals(false, boolean0);
      
      TDoubleIntHashMap tDoubleIntHashMap3 = new TDoubleIntHashMap();
      assertFalse(tDoubleIntHashMap3.equals(tDoubleIntHashMap0));
  }

//   @Test
//   public void test9()  throws Throwable  {
//       double double0 = 1842.69285679397;
//       Double double1 = new Double(double0);
//       double[] doubleArray0 = new double[8];
//       doubleArray0[0] = double0;
//       doubleArray0[1] = double0;
//       doubleArray0[2] = double0;
//       doubleArray0[3] = double0;
//       doubleArray0[4] = double0;
//       doubleArray0[5] = (double) double1;
//       doubleArray0[6] = (double) double1;
//       doubleArray0[7] = double0;
//       int[] intArray0 = new int[5];
//       int int0 = 0;
//       intArray0[0] = int0;
//       intArray0[1] = int0;
//       int int1 = (-1);
//       intArray0[2] = int1;
//       intArray0[3] = int1;
//       intArray0[4] = int0;
//       int int2 = 0;
//       intArray0[0] = int2;
//       int int3 = 866;
//       intArray0[1] = int3;
//       int int4 = 0;
//       intArray0[2] = int4;
//       int int5 = 0;
//       intArray0[3] = int5;
//       int int6 = 1340;
//       intArray0[4] = int6;
//       TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(doubleArray0, intArray0);
//       TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap((TDoubleIntMap) tDoubleIntHashMap0);
//       tDoubleIntHashMap1.values(intArray0);
//       int int7 = 0;
//       Integer integer0 = new Integer(int7);
//       AbstractMap.SimpleImmutableEntry<TDoubleIntHashMap, Double> abstractMap_SimpleImmutableEntry0 = null;
//       AbstractMap.SimpleImmutableEntry<Integer, AbstractMap.SimpleImmutableEntry<TDoubleIntHashMap, Double>> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, AbstractMap.SimpleImmutableEntry<TDoubleIntHashMap, Double>>(integer0, abstractMap_SimpleImmutableEntry0);
//       abstractMap_SimpleImmutableEntry1.hashCode();
//       int int8 = 686;
//       Integer integer1 = new Integer(int8);
//       AbstractMap.SimpleImmutableEntry<Double, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Double, Integer>(double1, integer1);
//       abstractMap_SimpleImmutableEntry2.hashCode();
//       float float0 = integer1.floatValue();
//       assertEquals(686.0F, float0, 0.01F);
//   }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = Double.POSITIVE_INFINITY;
      doubleArray0[1] = double1;
      double double2 = 2.0;
      doubleArray0[2] = double2;
      double double3 = 675.3708502061924;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = (-851.1326952495981);
      doubleArray0[5] = double5;
      int[] intArray0 = new int[1];
      int int0 = (-777);
      intArray0[0] = int0;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(doubleArray0, intArray0);
      double double6 = 0.0;
      boolean boolean0 = tDoubleIntHashMap0.increment(double6);
      assertEquals("{0.0=-776}", tDoubleIntHashMap0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-444);
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(int0);
      TDoubleIntMap tDoubleIntMap0 = null;
      // Undeclared exception!
      try {
        tDoubleIntHashMap0.putAll(tDoubleIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      String string0 = locale0.getDisplayName();
      // Undeclared exception!
      try {
        locale0.getUnicodeLocaleType(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: French
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "U}Al`dlx";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 1: U}Al`dlx
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      double double1 = (-973.2864346547068);
      doubleArray0[4] = double1;
      doubleArray0[5] = double1;
      doubleArray0[0] = double0;
      double double2 = 0.0;
      doubleArray0[1] = double2;
      double double3 = 0.0;
      doubleArray0[2] = double3;
      double double4 = 2.0;
      doubleArray0[3] = double4;
      double double5 = 1.0;
      doubleArray0[4] = double5;
      double double6 = (-1959.6512023466944);
      doubleArray0[5] = double6;
      int[] intArray0 = new int[3];
      int int0 = 171;
      intArray0[0] = int0;
      int int1 = 722;
      intArray0[1] = int1;
      int int2 = 397;
      intArray0[2] = int2;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(doubleArray0, intArray0);
      tDoubleIntHashMap0.contains(doubleArray0[5]);
      assertEquals(17, tDoubleIntHashMap0.capacity());
      assertEquals(2, tDoubleIntHashMap0.size());
      assertEquals("{-Infinity=171, 0.0=397}", tDoubleIntHashMap0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-470.70656002496673);
      doubleArray0[0] = double0;
      int[] intArray0 = new int[7];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 113189;
      intArray0[1] = int1;
      int int2 = 111;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = (-115);
      intArray0[5] = int5;
      int int6 = 703;
      intArray0[6] = int6;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(doubleArray0, intArray0);
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap((TDoubleIntMap) tDoubleIntHashMap0);
      tDoubleIntHashMap1.putAll((TDoubleIntMap) tDoubleIntHashMap0);
      assertEquals(0, tDoubleIntHashMap1.getNoEntryValue());
      assertEquals("{-470.70656002496673=0}", tDoubleIntHashMap0.toString());
      assertEquals(23, tDoubleIntHashMap1.capacity());
      assertEquals("{-470.70656002496673=0}", tDoubleIntHashMap1.toString());
      assertEquals(1, tDoubleIntHashMap1.size());
      assertEquals(false, tDoubleIntHashMap1.isEmpty());
  }

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 1895.484979698548;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = double2;
      double double3 = (-1763.8542993774406);
      doubleArray0[3] = double3;
      double double4 = 120.89187141284276;
      doubleArray0[4] = double4;
      double double5 = (-817.7453027677145);
      doubleArray0[5] = double5;
      double double6 = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = double6;
      double double7 = 0.0;
      doubleArray0[7] = double7;
      int[] intArray0 = new int[1];
      int int0 = 111;
      intArray0[0] = int0;
      TDoubleIntHashMap tDoubleIntHashMap0 = new TDoubleIntHashMap(doubleArray0, intArray0);
      assertEquals("{1895.484979698548=111}", tDoubleIntHashMap0.toString());
      
      int int1 = 1815;
      TDoubleIntHashMap tDoubleIntHashMap1 = new TDoubleIntHashMap(int1);
      double double8 = 766.344834296307;
      tDoubleIntHashMap1.contains(double8);
      int int2 = 0;
      float float0 = (-421.89154F);
      TDoubleIntHashMap tDoubleIntHashMap2 = new TDoubleIntHashMap();
      TDoubleIntHashMap tDoubleIntHashMap3 = new TDoubleIntHashMap(int2, float0);
      TDoubleIntHashMap tDoubleIntHashMap4 = new TDoubleIntHashMap((TDoubleIntMap) tDoubleIntHashMap3);
      assertEquals(0, tDoubleIntHashMap4.getNoEntryValue());
      assertEquals(3, tDoubleIntHashMap4.capacity());
      
      tDoubleIntHashMap3.getNoEntryKey();
      double[] doubleArray1 = tDoubleIntHashMap3.keys();
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try {
        tDoubleIntHashMap3.setAutoCompactionFactor(float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -421.89154
         //
      }
  }
}
