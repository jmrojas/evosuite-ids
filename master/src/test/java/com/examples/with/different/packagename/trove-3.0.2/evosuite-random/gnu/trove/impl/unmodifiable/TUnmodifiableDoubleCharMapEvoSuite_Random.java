/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCharMap;
import gnu.trove.map.TDoubleCharMap;
import gnu.trove.map.hash.TDoubleCharHashMap;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableDoubleCharMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 1852;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0, int0);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap0 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      double double0 = 0.0;
      tUnmodifiableDoubleCharMap0.get(double0);
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap(int0);
      TDoubleCharHashMap tDoubleCharHashMap2 = new TDoubleCharHashMap((TDoubleCharMap) tDoubleCharHashMap1);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap1 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap2);
      double double1 = 1132.6600120725116;
      char char0 = tDoubleCharHashMap2.get(double1);
      char char1 = '`';
      // Undeclared exception!
      try {
        tUnmodifiableDoubleCharMap1.adjustValue((double) char0, char1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 115;
      float float0 = 0.0F;
      double double0 = 0.0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) float0;
      doubleArray0[3] = (double) int0;
      char[] charArray0 = new char[2];
      char char0 = '[';
      charArray0[0] = char0;
      char char1 = 'D';
      charArray0[1] = char1;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap((TDoubleCharMap) tDoubleCharHashMap0);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap0 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap1);
      tUnmodifiableDoubleCharMap0.iterator();
      char char2 = '\"';
      TDoubleCharHashMap tDoubleCharHashMap2 = new TDoubleCharHashMap(int0, float0, double0, char2);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap1 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap2);
      tUnmodifiableDoubleCharMap1.keys();
      int int1 = 501165979;
      TDoubleCharHashMap tDoubleCharHashMap3 = null;
      try {
        tDoubleCharHashMap3 = new TDoubleCharHashMap(int1);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 0;
      char char0 = '_';
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0, (float) int0, (double) int0, char0);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap0 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      TDoubleCharMap tDoubleCharMap0 = null;
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap1 = null;
      try {
        tUnmodifiableDoubleCharMap1 = new TUnmodifiableDoubleCharMap(tDoubleCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 141.93013380026366;
      doubleArray0[0] = double0;
      double double1 = (-1423.2312951089707);
      doubleArray0[1] = double1;
      double double2 = (-489.7042934473461);
      doubleArray0[2] = double2;
      double double3 = (-58.60407346986289);
      doubleArray0[3] = double3;
      double double4 = (-1824.8970985571966);
      doubleArray0[4] = double4;
      char[] charArray0 = new char[8];
      char char0 = '7';
      charArray0[0] = char0;
      char char1 = '}';
      charArray0[1] = char1;
      char char2 = 'O';
      charArray0[2] = char2;
      char char3 = 'd';
      charArray0[3] = char3;
      char char4 = 'G';
      charArray0[4] = char4;
      char char5 = 'O';
      charArray0[5] = char5;
      char char6 = '0';
      charArray0[6] = char6;
      char char7 = ';';
      charArray0[7] = char7;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap0 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      double double5 = 0.0;
      // Undeclared exception!
      try {
        tUnmodifiableDoubleCharMap0.adjustValue(double5, char3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap0 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap1 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tUnmodifiableDoubleCharMap0);
      char[] charArray0 = new char[2];
      char char0 = 'v';
      charArray0[0] = char0;
      char char1 = 'G';
      charArray0[1] = char1;
      char[] charArray1 = tUnmodifiableDoubleCharMap1.values(charArray0);
      assertSame(charArray1, charArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 806;
      double double0 = 1.0;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap0 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap1 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tUnmodifiableDoubleCharMap0);
      tUnmodifiableDoubleCharMap1.getNoEntryKey();
      char char0 = 'r';
      int int1 = (-1651);
      float float0 = 0.0F;
      char char1 = '[';
      double double1 = 0.0;
      tDoubleCharHashMap0.get(double1);
      String string0 = "";
      String string1 = "begin index can not be < 0";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://?#begin%20index%20can%20not%20be%20%3C%200
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 0;
          float float0 = 1790.2701F;
          TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0, float0);
          TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap((TDoubleCharMap) tDoubleCharHashMap0);
          TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap0 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap1);
          tUnmodifiableDoubleCharMap0.isEmpty();
          TDoubleCharHashMap tDoubleCharHashMap2 = new TDoubleCharHashMap(int0, float0);
          TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap1 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap2);
          tUnmodifiableDoubleCharMap1.getNoEntryValue();
          int int1 = 345;
          TDoubleCharHashMap tDoubleCharHashMap3 = new TDoubleCharHashMap(int1);
          TDoubleCharHashMap tDoubleCharHashMap4 = new TDoubleCharHashMap((TDoubleCharMap) tDoubleCharHashMap3);
          TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap2 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap4);
          double double0 = (-1956.4771590766686);
          tDoubleCharHashMap3.contains(double0);
          String string0 = "O1SwkF+o(n,s g";
          File file0 = null;
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      double double0 = Double.NEGATIVE_INFINITY;
      int int0 = (-637);
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap(int0);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap0 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap1);
      char[] charArray0 = new char[10];
      char char0 = 'h';
      charArray0[0] = char0;
      char char1 = 'H';
      charArray0[1] = char1;
      char char2 = '_';
      charArray0[2] = char2;
      char char3 = 'S';
      charArray0[3] = char3;
      tUnmodifiableDoubleCharMap0.valueCollection();
      char char4 = 'H';
      charArray0[4] = char4;
      char char5 = 'W';
      charArray0[5] = char5;
      char char6 = 'P';
      charArray0[6] = char6;
      char char7 = 'y';
      charArray0[7] = char7;
      char char8 = 'h';
      charArray0[8] = char8;
      char char9 = 'M';
      charArray0[9] = char9;
      tUnmodifiableDoubleCharMap0.values(charArray0);
      tDoubleCharHashMap0.get(double0);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap1 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      char char10 = tUnmodifiableDoubleCharMap1.getNoEntryValue();
      assertFalse(char10 == char4);
  }

  @Test
  public void test8()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap0 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      tUnmodifiableDoubleCharMap0.keys();
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap1 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap2 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tUnmodifiableDoubleCharMap1);
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap();
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap3 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap1);
      double double0 = 0.0;
      char char0 = '>';
      char char1 = '/';
      // Undeclared exception!
      try {
        tUnmodifiableDoubleCharMap3.adjustOrPutValue(double0, char0, char1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 924;
      float float0 = 0.0F;
      double double0 = (-139.2976415201632);
      char char0 = '}';
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0, float0, double0, char0);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap0 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleCharMap0.increment((double) float0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 366;
      double double0 = (-682.619837385279);
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0);
      char char0 = '#';
      tDoubleCharHashMap0.putIfAbsent((double) int0, char0);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap0 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      double double1 = 1.0;
      char char1 = 'C';
      // Undeclared exception!
      try {
        tUnmodifiableDoubleCharMap0.adjustValue(double1, char1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap0 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      char[] charArray0 = new char[6];
      char char0 = 'v';
      charArray0[0] = char0;
      char char1 = 'D';
      charArray0[1] = char1;
      char char2 = 'i';
      charArray0[2] = char2;
      char char3 = 'z';
      charArray0[3] = char3;
      char char4 = '0';
      charArray0[4] = char4;
      char char5 = 'J';
      charArray0[5] = char5;
      tUnmodifiableDoubleCharMap0.values(charArray0);
      TDoubleCharMap tDoubleCharMap0 = null;
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap1 = null;
      try {
        tUnmodifiableDoubleCharMap1 = new TUnmodifiableDoubleCharMap(tDoubleCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 1066.113630268307;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = (-104.53798684345519);
      doubleArray0[2] = double2;
      double double3 = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = double3;
      double double4 = (-1809.2847966351758);
      doubleArray0[4] = double4;
      double double5 = (-1.0);
      doubleArray0[5] = double5;
      double double6 = 0.0;
      doubleArray0[6] = double6;
      double double7 = (-1.0);
      doubleArray0[7] = double7;
      char[] charArray0 = new char[3];
      char char0 = 'b';
      charArray0[0] = char0;
      char char1 = 'J';
      charArray0[1] = char1;
      char char2 = '&';
      charArray0[2] = char2;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap0 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      tUnmodifiableDoubleCharMap0.hashCode();
      double[] doubleArray1 = new double[4];
      double double8 = (-1632.602294653616);
      doubleArray1[0] = double8;
      double double9 = (-502.6562560899111);
      doubleArray1[1] = double9;
      double double10 = 1.0;
      doubleArray1[2] = double10;
      double double11 = 1043.1228256998827;
      doubleArray1[3] = double11;
      char[] charArray1 = new char[4];
      char char3 = 'u';
      charArray1[0] = char3;
      char char4 = ':';
      charArray1[1] = char4;
      char char5 = '3';
      charArray1[2] = char5;
      char char6 = 'r';
      charArray1[3] = char6;
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap(doubleArray1, charArray1);
      TDoubleCharHashMap tDoubleCharHashMap2 = new TDoubleCharHashMap((TDoubleCharMap) tDoubleCharHashMap1);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap1 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap2);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap2 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tUnmodifiableDoubleCharMap1);
      double double12 = tUnmodifiableDoubleCharMap2.getNoEntryKey();
      assertFalse(double12 == double7);
  }

  @Test
  public void test13()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap((TDoubleCharMap) tDoubleCharHashMap0);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap0 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap1);
      double double0 = 0.0;
      char char0 = 'U';
      // Undeclared exception!
      try {
        tUnmodifiableDoubleCharMap0.adjustValue(double0, char0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-1743);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      char[] charArray0 = new char[4];
      char char0 = 'x';
      charArray0[0] = char0;
      char char1 = 'g';
      charArray0[1] = char1;
      char char2 = '2';
      charArray0[2] = char2;
      char char3 = 'L';
      charArray0[3] = char3;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap0 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      tUnmodifiableDoubleCharMap0.getNoEntryKey();
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap(int0, int0);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap1 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap1);
      char char4 = '{';
      // Undeclared exception!
      try {
        tUnmodifiableDoubleCharMap1.put((double) int0, char4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-1618);
      char char0 = '~';
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0, (float) int0, (double) int0, char0);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap0 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap1 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tUnmodifiableDoubleCharMap0);
      double double0 = tUnmodifiableDoubleCharMap1.getNoEntryKey();
      assertEquals((-1618.0), double0, 0.01D);
      
      double double1 = 1854.954921355731;
      char char1 = '\'';
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap(int0, (float) int0, double1, char1);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap2 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap1);
      tUnmodifiableDoubleCharMap2.containsValue(char1);
      assertEquals(1854.954921355731, tUnmodifiableDoubleCharMap2.getNoEntryKey(), 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = (-1832);
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0, int0);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap0 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.JAPAN;
      String string0 = locale0.getDisplayScript(locale1);
      boolean boolean0 = tUnmodifiableDoubleCharMap0.equals((Object) string0);
      assertEquals(false, boolean0);
      
      tDoubleCharHashMap0.remove((double) int0);
      TUnmodifiableDoubleCharMap tUnmodifiableDoubleCharMap1 = new TUnmodifiableDoubleCharMap((TDoubleCharMap) tDoubleCharHashMap0);
      char char0 = 'W';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) char0;
      doubleArray0[1] = (double) int0;
      tDoubleCharHashMap0.keys(doubleArray0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleCharMap1.adjustValue((double) int0, char0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
