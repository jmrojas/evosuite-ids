/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedCharSet;
import gnu.trove.impl.sync.TSynchronizedCharShortMap;
import gnu.trove.impl.sync.TSynchronizedShortCollection;
import gnu.trove.map.TCharShortMap;
import gnu.trove.map.hash.TCharShortHashMap;
import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedCharShortMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = '<';
      charArray0[0] = char0;
      char char1 = 'G';
      charArray0[1] = char1;
      char char2 = '<';
      charArray0[2] = char2;
      char char3 = '\\';
      charArray0[3] = char3;
      char char4 = '^';
      charArray0[4] = char4;
      char char5 = '>';
      charArray0[5] = char5;
      char char6 = '~';
      charArray0[6] = char6;
      char char7 = '1';
      charArray0[7] = char7;
      char char8 = '.';
      charArray0[8] = char8;
      short[] shortArray0 = new short[5];
      short short0 = (short) (-1006);
      shortArray0[0] = short0;
      short short1 = (short)918;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)233;
      shortArray0[3] = short3;
      short short4 = (short)213;
      shortArray0[4] = short4;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(charArray0, shortArray0);
      String string0 = "";
      String string1 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string1, string1, (int) shortArray0[0], string1, string0, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://@:-1006?#
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(int0);
      TSynchronizedCharShortMap tSynchronizedCharShortMap0 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap0);
      char char0 = '\\';
      short short0 = (short)0;
      short short1 = (short)0;
      short short2 = tSynchronizedCharShortMap0.adjustOrPutValue(char0, short0, short1);
      assertEquals(false, tCharShortHashMap0.isEmpty());
      assertEquals((short)0, short2);
  }

  @Test
  public void test2()  throws Throwable  {
      TCharShortMap tCharShortMap0 = null;
      TSynchronizedCharShortMap tSynchronizedCharShortMap0 = null;
      try {
        tSynchronizedCharShortMap0 = new TSynchronizedCharShortMap(tCharShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap();
      TSynchronizedCharShortMap tSynchronizedCharShortMap0 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap0);
      TSynchronizedCharShortMap tSynchronizedCharShortMap1 = new TSynchronizedCharShortMap((TCharShortMap) tSynchronizedCharShortMap0);
      TSynchronizedShortCollection tSynchronizedShortCollection0 = (TSynchronizedShortCollection)tSynchronizedCharShortMap1.valueCollection();
      assertNotNull(tSynchronizedShortCollection0);
      
      int int0 = 1760;
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap(int0, int0);
      tCharShortHashMap1.capacity();
      tCharShortHashMap1.keys();
      TSynchronizedCharShortMap tSynchronizedCharShortMap2 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap1);
      tSynchronizedCharShortMap2.size();
      TSynchronizedCharShortMap tSynchronizedCharShortMap3 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap1);
      char char0 = '1';
      tSynchronizedCharShortMap3.containsKey(char0);
      char char1 = 'O';
      short short0 = (short)735;
      short short1 = (short) (-1732);
      tSynchronizedCharShortMap3.adjustOrPutValue(char1, short0, short1);
      short[] shortArray0 = tSynchronizedCharShortMap3.values();
      tSynchronizedCharShortMap3.size();
      char char2 = 'C';
      short short2 = (short) (-1);
      tSynchronizedCharShortMap0.keys();
      short short3 = (short) (-1);
      char char3 = 'T';
      tSynchronizedCharShortMap2.increment(char3);
      tCharShortHashMap1.adjustOrPutValue(char2, short2, short3);
      tSynchronizedCharShortMap3.values(shortArray0);
      assertEquals(2, tCharShortHashMap1.size());
      assertEquals("{O=-1732, C=-1}", tSynchronizedCharShortMap3.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      char[] charArray0 = new char[10];
      char char0 = '5';
      charArray0[0] = char0;
      char char1 = 'o';
      charArray0[1] = char1;
      char char2 = '[';
      charArray0[2] = char2;
      char char3 = 'T';
      charArray0[3] = char3;
      char char4 = 'O';
      charArray0[4] = char4;
      char char5 = 'U';
      charArray0[5] = char5;
      char char6 = 'W';
      charArray0[6] = char6;
      char char7 = '(';
      charArray0[7] = char7;
      char char8 = 'p';
      charArray0[8] = char8;
      char char9 = 'j';
      charArray0[9] = char9;
      short[] shortArray0 = new short[3];
      short short0 = (short)976;
      shortArray0[0] = short0;
      short short1 = (short)774;
      shortArray0[1] = short1;
      short short2 = (short)119;
      shortArray0[2] = short2;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(charArray0, shortArray0);
      Locale locale0 = Locale.US;
      String string0 = locale0.getDisplayLanguage();
      TSynchronizedCharShortMap tSynchronizedCharShortMap0 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap0, (Object) string0);
      TSynchronizedCharShortMap tSynchronizedCharShortMap1 = new TSynchronizedCharShortMap((TCharShortMap) tSynchronizedCharShortMap0);
      char char10 = tSynchronizedCharShortMap1.getNoEntryKey();
      assertFalse(char10 == char6);
  }

  @Test
  public void test5()  throws Throwable  {
      char[] charArray0 = new char[8];
      char char0 = '2';
      charArray0[0] = char0;
      char char1 = ',';
      charArray0[1] = char1;
      char char2 = ' ';
      charArray0[2] = char2;
      char char3 = '=';
      charArray0[3] = char3;
      char char4 = 'M';
      charArray0[4] = char4;
      char char5 = 'x';
      charArray0[5] = char5;
      char char6 = 'S';
      charArray0[6] = char6;
      char char7 = 'V';
      charArray0[7] = char7;
      short[] shortArray0 = new short[6];
      short short0 = (short)1358;
      shortArray0[0] = short0;
      short short1 = (short)1;
      shortArray0[1] = short1;
      short short2 = (short)671;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(charArray0, shortArray0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = locale0.getDisplayVariant();
      TSynchronizedCharShortMap tSynchronizedCharShortMap0 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap0, (Object) string0);
      TSynchronizedCharShortMap tSynchronizedCharShortMap1 = new TSynchronizedCharShortMap((TCharShortMap) tSynchronizedCharShortMap0);
      TSynchronizedCharShortMap tSynchronizedCharShortMap2 = new TSynchronizedCharShortMap((TCharShortMap) tSynchronizedCharShortMap1);
      tSynchronizedCharShortMap2.keySet();
      int int0 = 1;
      float float0 = 1.0F;
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap(int0, float0);
      char char8 = 'I';
      Character character0 = Character.valueOf(char8);
      String string1 = character0.toString();
      TSynchronizedCharShortMap tSynchronizedCharShortMap3 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap1, (Object) string1);
      boolean boolean0 = tSynchronizedCharShortMap3.containsKey(char8);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap();
      TSynchronizedCharShortMap tSynchronizedCharShortMap0 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap0);
      short short0 = (short) (-8725);
      String string0 = Short.toString(short0);
      boolean boolean0 = tSynchronizedCharShortMap0.equals((Object) string0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 541;
      int int1 = 535481;
      char char0 = ':';
      short short0 = (short) (-180);
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(int1, (float) int1, char0, short0);
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap((TCharShortMap) tCharShortHashMap0);
      Object object0 = null;
      TSynchronizedCharShortMap tSynchronizedCharShortMap0 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap1, object0);
      // Undeclared exception!
      try {
        tSynchronizedCharShortMap0.keys(tCharShortHashMap0._set);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TCharShortMap tCharShortMap0 = null;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap();
      String string0 = "w+tz$(q~.v7&Mc";
      URI uRI0 = new URI(string0);
      File file0 = null;
      try {
        file0 = new File(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = 'v';
      charArray0[0] = char0;
      char char1 = 'k';
      charArray0[1] = char1;
      char char2 = 'G';
      charArray0[2] = char2;
      char char3 = 'a';
      charArray0[3] = char3;
      char char4 = 'S';
      charArray0[4] = char4;
      char char5 = 'I';
      charArray0[5] = char5;
      char char6 = 'm';
      charArray0[6] = char6;
      short[] shortArray0 = new short[2];
      short short0 = (short)1;
      shortArray0[0] = short0;
      short short1 = (short)413;
      shortArray0[1] = short1;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(charArray0, shortArray0);
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.getDisplayCountry();
      TSynchronizedCharShortMap tSynchronizedCharShortMap0 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap0, (Object) string0);
      int int0 = tSynchronizedCharShortMap0.size();
      assertEquals(2, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap();
      char char0 = '#';
      Character.valueOf(char0);
      tCharShortHashMap0.keys();
      Character.isJavaIdentifierPart(char0);
      Character.isLetter((int) char0);
      String string0 = "";
      boolean boolean0 = true;
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0, boolean0);
      // Undeclared exception!
      try {
        stringTokenizer0.nextToken(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = ' ';
      int int0 = (-1);
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(int0);
      TSynchronizedCharShortMap tSynchronizedCharShortMap0 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap0);
      tSynchronizedCharShortMap0.valueCollection();
      charArray0[0] = char0;
      char char1 = 'n';
      charArray0[1] = char1;
      char char2 = 'y';
      charArray0[2] = char2;
      char char3 = '4';
      charArray0[3] = char3;
      char char4 = 'r';
      charArray0[4] = char4;
      short[] shortArray0 = new short[5];
      short short0 = (short) (-835);
      tSynchronizedCharShortMap0.valueCollection();
      shortArray0[0] = short0;
      short short1 = (short) (-1315);
      shortArray0[1] = short1;
      short short2 = (short)26;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap(charArray0, shortArray0);
      TCharShortHashMap tCharShortHashMap2 = new TCharShortHashMap((TCharShortMap) tCharShortHashMap1);
      String string0 = "";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0);
      // Undeclared exception!
      try {
        stringTokenizer0.nextToken(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1883;
      char char0 = 'A';
      short short0 = (short)0;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(int0, (float) int0, char0, short0);
      Locale locale0 = Locale.getDefault();
      Locale locale1 = Locale.ROOT;
      String string0 = locale0.getDisplayLanguage(locale1);
      TSynchronizedCharShortMap tSynchronizedCharShortMap0 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap0, (Object) string0);
      tSynchronizedCharShortMap0.clear();
      assertEquals('A', tSynchronizedCharShortMap0.getNoEntryKey());
  }

  @Test
  public void test13()  throws Throwable  {
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap();
      int int0 = 179669557;
      short short0 = (short)0;
      String string0 = Short.toString(short0);
      URI uRI0 = new URI(string0);
      URI uRI1 = uRI0.resolve(string0);
      URI uRI2 = uRI1.parseServerAuthority();
      String string1 = uRI2.toString();
      TSynchronizedCharShortMap tSynchronizedCharShortMap0 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap0, (Object) string1);
      TSynchronizedCharShortMap tSynchronizedCharShortMap1 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap0, (Object) string0);
      char[] charArray0 = tSynchronizedCharShortMap1.keys(tCharShortHashMap0._set);
      assertNotNull(charArray0);
      
      char char0 = '?';
      short short1 = (short)6;
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap(int0, (float) int0, char0, short1);
      TSynchronizedCharShortMap tSynchronizedCharShortMap2 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap1);
      String string2 = tSynchronizedCharShortMap2.toString();
      TSynchronizedCharShortMap tSynchronizedCharShortMap3 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap0, (Object) string2);
      char char1 = '!';
      tSynchronizedCharShortMap2.adjustOrPutValue(char1, short1, short1);
      int int1 = 1;
      TCharShortHashMap tCharShortHashMap2 = new TCharShortHashMap(int1);
      tSynchronizedCharShortMap3.keys();
      TSynchronizedCharShortMap tSynchronizedCharShortMap4 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap2);
      char char2 = '~';
      short short2 = (short)285;
      tCharShortHashMap2.putIfAbsent(char2, short2);
      short[] shortArray0 = new short[1];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale0 = Locale.getDefault(locale_Category0);
      String string3 = locale0.getISO3Country();
      tSynchronizedCharShortMap2.equals((Object) string3);
      short short3 = (short)955;
      tSynchronizedCharShortMap2.values();
      assertEquals(1, tCharShortHashMap1.size());
      
      shortArray0[0] = short3;
      tSynchronizedCharShortMap4.values(shortArray0);
      assertTrue(tSynchronizedCharShortMap4.equals(tSynchronizedCharShortMap2));
  }

  @Test
  public void test14()  throws Throwable  {
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap();
      Object object0 = null;
      TSynchronizedCharShortMap tSynchronizedCharShortMap0 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap0, object0);
      TSynchronizedCharShortMap tSynchronizedCharShortMap1 = new TSynchronizedCharShortMap((TCharShortMap) tSynchronizedCharShortMap0);
      tSynchronizedCharShortMap1.getNoEntryKey();
      TCharShortMap tCharShortMap0 = null;
      TSynchronizedCharShortMap tSynchronizedCharShortMap2 = null;
      try {
        tSynchronizedCharShortMap2 = new TSynchronizedCharShortMap(tCharShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale0 = Locale.getDefault(locale_Category0);
      String string0 = " exceeds size ";
      Locale locale1 = new Locale(string0);
      String string1 = locale0.getDisplayScript(locale1);
      TSynchronizedCharShortMap tSynchronizedCharShortMap0 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap0, (Object) string1);
      TSynchronizedCharSet tSynchronizedCharSet0 = (TSynchronizedCharSet)tSynchronizedCharShortMap0.keySet();
      assertEquals(0, tSynchronizedCharSet0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      TCharShortMap tCharShortMap0 = null;
      String string0 = "";
      Locale locale0 = Locale.forLanguageTag(string0);
      Locale locale1 = Locale.CHINESE;
      locale0.getDisplayName(locale1);
      String string1 = locale0.getScript();
      TSynchronizedCharShortMap tSynchronizedCharShortMap0 = new TSynchronizedCharShortMap(tCharShortMap0, (Object) string1);
      // Undeclared exception!
      try {
        tSynchronizedCharShortMap0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = 'o';
      charArray0[0] = char0;
      char char1 = '/';
      charArray0[1] = char1;
      char char2 = '+';
      charArray0[2] = char2;
      char char3 = 'l';
      charArray0[3] = char3;
      char char4 = 'J';
      charArray0[4] = char4;
      short[] shortArray0 = new short[4];
      short short0 = (short) (-1807);
      shortArray0[0] = short0;
      short short1 = (short)1262;
      shortArray0[1] = short1;
      short short2 = (short) (-703);
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(charArray0, shortArray0);
      String string0 = "";
      File file0 = new File(string0, string0);
      File file1 = new File(file0, string0);
      String string1 = file1.toString();
      TSynchronizedCharShortMap tSynchronizedCharShortMap0 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap0, (Object) string1);
      short short4 = tSynchronizedCharShortMap0.get(char3);
      assertFalse(short4 == short0);
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 811;
      char[] charArray0 = new char[5];
      char char0 = '/';
      charArray0[0] = char0;
      char char1 = 'i';
      charArray0[1] = char1;
      char char2 = 'W';
      charArray0[2] = char2;
      char char3 = 'A';
      charArray0[3] = char3;
      char char4 = '`';
      charArray0[4] = char4;
      short[] shortArray0 = new short[2];
      short short0 = (short)362;
      shortArray0[0] = short0;
      short short1 = (short)27;
      shortArray0[1] = short1;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(charArray0, shortArray0);
      TSynchronizedCharShortMap tSynchronizedCharShortMap0 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap0);
      tSynchronizedCharShortMap0.putAll((TCharShortMap) tCharShortHashMap0);
      float float0 = (-1434.2002F);
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap();
      char char5 = 'R';
      short short2 = (short)378;
      TSynchronizedCharShortMap tSynchronizedCharShortMap1 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap1);
      tCharShortHashMap1.adjustOrPutValue(char5, short2, short2);
      String string0 = "wp'w=1J";
      File file0 = new File(string0);
      String string1 = file0.toString();
      TSynchronizedCharShortMap tSynchronizedCharShortMap2 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap1, (Object) string1);
      file0.getAbsoluteFile();
      tSynchronizedCharShortMap2.isEmpty();
      TCharShortHashMap tCharShortHashMap2 = new TCharShortHashMap(int0, float0);
      TCharShortHashMap tCharShortHashMap3 = new TCharShortHashMap((TCharShortMap) tCharShortHashMap2);
      TSynchronizedCharShortMap tSynchronizedCharShortMap3 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap3);
      char char6 = '3';
      short short3 = (short)1079;
      tSynchronizedCharShortMap3.putIfAbsent(char6, short3);
      assertEquals("{3=1079}", tSynchronizedCharShortMap3.toString());
      
      int int1 = 0;
      TCharShortHashMap tCharShortHashMap4 = new TCharShortHashMap(int1);
      TSynchronizedCharShortMap tSynchronizedCharShortMap4 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap4);
      tSynchronizedCharShortMap4.iterator();
      assertFalse(tSynchronizedCharShortMap4.equals(tSynchronizedCharShortMap3));
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 0;
      float float0 = 82.316795F;
      TCharShortHashMap tCharShortHashMap0 = new TCharShortHashMap(int0, float0);
      TSynchronizedCharShortMap tSynchronizedCharShortMap0 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap0);
      TCharShortHashMap tCharShortHashMap1 = new TCharShortHashMap((TCharShortMap) tSynchronizedCharShortMap0);
      Locale locale0 = Locale.getDefault();
      String string0 = locale0.getDisplayVariant();
      TSynchronizedCharShortMap tSynchronizedCharShortMap1 = new TSynchronizedCharShortMap((TCharShortMap) tCharShortHashMap1, (Object) string0);
      char char0 = 'A';
      short short0 = (short) (-1983);
      short short1 = (short)1;
      tSynchronizedCharShortMap1.adjustOrPutValue(char0, short0, short1);
      assertEquals(1, tCharShortHashMap1.size());
      
      TCharShortHashMap tCharShortHashMap2 = new TCharShortHashMap();
      float float1 = (-382.584F);
      // Undeclared exception!
      try {
        tCharShortHashMap2.setAutoCompactionFactor(float1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -382.584
         //
      }
  }
}
