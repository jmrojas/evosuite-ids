/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TDoubleFunction;
import gnu.trove.impl.sync.TSynchronizedDoubleCollection;
import gnu.trove.impl.sync.TSynchronizedFloatDoubleMap;
import gnu.trove.impl.sync.TSynchronizedFloatSet;
import gnu.trove.map.TFloatDoubleMap;
import gnu.trove.map.hash.TFloatDoubleHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.procedure.TFloatDoubleProcedure;
import gnu.trove.procedure.TFloatProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedFloatDoubleMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.putAll(Lgnu/trove/map/TFloatDoubleMap;)V: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.size()I: root-Branch
   * 3 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.iterator()Lgnu/trove/iterator/TFloatDoubleIterator;: root-Branch
   * 4 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.<init>(Lgnu/trove/map/TFloatDoubleMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      tSynchronizedFloatDoubleMap0.putAll((TFloatDoubleMap) tSynchronizedFloatDoubleMap0);
      assertEquals(0, tSynchronizedFloatDoubleMap0.size());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.containsKey(F)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.<init>(Lgnu/trove/map/TFloatDoubleMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap((-350), (-350));
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0, (Object) "Deutsch");
      boolean boolean0 = tSynchronizedFloatDoubleMap0.containsKey((float) (-350));
      assertEquals(false, boolean0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.getNoEntryKey()F: root-Branch
   */

//   @Test
//   public void test2()  throws Throwable  {
//       TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
//       TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
//       float float0 = tSynchronizedFloatDoubleMap0.getNoEntryKey();
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.containsValue(D)Z: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      boolean boolean0 = tSynchronizedFloatDoubleMap0.containsValue((-113.76845156445926));
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(7, 7, 7, 7);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      tSynchronizedFloatDoubleMap0.transformValues((TDoubleFunction) null);
      assertEquals(0, tSynchronizedFloatDoubleMap0.size());
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.hashCode()I: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(1852, 1852);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      int int0 = tSynchronizedFloatDoubleMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.adjustOrPutValue(FDD)D: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      double double0 = tSynchronizedFloatDoubleMap0.adjustOrPutValue((float) (byte)7, (double) (byte)7, (double) (byte)7);
      assertEquals(1, tFloatDoubleHashMap0.size());
      assertEquals(7.0, double0, 0.01D);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.keys([F)[F: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      float[] floatArray0 = tSynchronizedFloatDoubleMap0.keys(tFloatDoubleHashMap0._set);
      assertNotNull(floatArray0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.getNoEntryValue()D: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      double double0 = tSynchronizedFloatDoubleMap0.getNoEntryValue();
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.clear()V: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      tSynchronizedFloatDoubleMap0.clear();
      assertEquals(true, tSynchronizedFloatDoubleMap0.isEmpty());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.put(FD)D: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      tSynchronizedFloatDoubleMap0.put((float) (byte)7, (double) (byte)7);
      assertEquals(1, tFloatDoubleHashMap0.size());
      assertEquals("{7.0=7.0}", tFloatDoubleHashMap0.toString());
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.get(F)D: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      double double0 = tSynchronizedFloatDoubleMap0.get(0.0F);
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.retainEntries(Lgnu/trove/procedure/TFloatDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap((-350), (-350));
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0, (Object) "Deutsch");
      boolean boolean0 = tSynchronizedFloatDoubleMap0.retainEntries((TFloatDoubleProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.increment(F)Z: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap((-350), (-350));
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0, (Object) "Deutsch");
      boolean boolean0 = tSynchronizedFloatDoubleMap0.increment((float) (-350));
      assertEquals(false, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(1852, 1852);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      String string0 = tSynchronizedFloatDoubleMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(1852, 1852);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      tSynchronizedFloatDoubleMap0.putAll((Map<? extends Float, ? extends Double>) hashMap0);
      assertEquals("{}", hashMap0.toString());
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.forEachEntry(Lgnu/trove/procedure/TFloatDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap((-350), (-350));
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0, (Object) "Deutsch");
      boolean boolean0 = tSynchronizedFloatDoubleMap0.forEachEntry((TFloatDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 17
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.values([D)[D: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.values()[D: root-Branch
   * 3 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.<init>(Lgnu/trove/map/TFloatDoubleMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap((-350), (-350));
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0, (Object) "Deutsch");
      double[] doubleArray0 = tSynchronizedFloatDoubleMap0.values();
      double[] doubleArray1 = tSynchronizedFloatDoubleMap0.values(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.remove(F)D: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(1852, 1852);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      double double0 = tSynchronizedFloatDoubleMap0.remove((float) 0);
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.keys()[F: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(7, 7, 7, 7);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      float[] floatArray0 = tSynchronizedFloatDoubleMap0.keys();
      assertNotNull(floatArray0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      boolean boolean0 = tSynchronizedFloatDoubleMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.putIfAbsent(FD)D: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      tSynchronizedFloatDoubleMap0.putIfAbsent((float) (byte)7, (double) (byte)7);
      assertEquals(1, tFloatDoubleHashMap0.size());
      assertEquals("{7.0=7.0}", tSynchronizedFloatDoubleMap0.toString());
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      boolean boolean0 = tSynchronizedFloatDoubleMap0.forEachKey((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.adjustValue(FD)Z: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      boolean boolean0 = tSynchronizedFloatDoubleMap0.adjustValue(0.0F, (-113.76845156445926));
      assertEquals(false, boolean0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.equals(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(1852, 1852);
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      boolean boolean0 = tSynchronizedFloatDoubleMap0.equals((Object) "{}");
      assertEquals(false, boolean0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      boolean boolean0 = tSynchronizedFloatDoubleMap0.forEachValue((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.<init>(Lgnu/trove/map/TFloatDoubleMap;)V: I17 Branch 1 IFNONNULL L59 - false
   */

  @Test
  public void test26()  throws Throwable  {
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = null;
      try {
        tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 27
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.keySet()Lgnu/trove/set/TFloatSet;: I11 Branch 2 IFNONNULL L107 - true
   * 2 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.keySet()Lgnu/trove/set/TFloatSet;: I11 Branch 2 IFNONNULL L107 - false
   */

  @Test
  public void test27()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      TSynchronizedFloatSet tSynchronizedFloatSet0 = (TSynchronizedFloatSet)tSynchronizedFloatDoubleMap0.keySet();
      assertNotNull(tSynchronizedFloatSet0);
      
      TSynchronizedFloatSet tSynchronizedFloatSet1 = (TSynchronizedFloatSet)tSynchronizedFloatDoubleMap0.keySet();
      assertSame(tSynchronizedFloatSet1, tSynchronizedFloatSet0);
  }

  //Test case number: 28
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;: I11 Branch 3 IFNONNULL L121 - true
   * 2 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;: I11 Branch 3 IFNONNULL L121 - false
   * 3 gnu.trove.impl.sync.TSynchronizedFloatDoubleMap.<init>(Lgnu/trove/map/TFloatDoubleMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TSynchronizedFloatDoubleMap tSynchronizedFloatDoubleMap0 = new TSynchronizedFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      TSynchronizedDoubleCollection tSynchronizedDoubleCollection0 = (TSynchronizedDoubleCollection)tSynchronizedFloatDoubleMap0.valueCollection();
      assertNotNull(tSynchronizedDoubleCollection0);
      
      TSynchronizedDoubleCollection tSynchronizedDoubleCollection1 = (TSynchronizedDoubleCollection)tSynchronizedFloatDoubleMap0.valueCollection();
      assertSame(tSynchronizedDoubleCollection1, tSynchronizedDoubleCollection0);
  }
}
