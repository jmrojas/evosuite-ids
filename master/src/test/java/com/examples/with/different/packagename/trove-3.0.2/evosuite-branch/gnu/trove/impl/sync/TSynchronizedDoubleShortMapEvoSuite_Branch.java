/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TShortFunction;
import gnu.trove.impl.sync.TSynchronizedDoubleSet;
import gnu.trove.impl.sync.TSynchronizedDoubleShortMap;
import gnu.trove.impl.sync.TSynchronizedShortCollection;
import gnu.trove.map.TDoubleShortMap;
import gnu.trove.map.hash.TDoubleShortHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.procedure.TDoubleShortProcedure;
import gnu.trove.procedure.TShortProcedure;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedDoubleShortMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.forEachValue(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.<init>(Lgnu/trove/map/TDoubleShortMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      boolean boolean0 = tSynchronizedDoubleShortMap0.forEachValue((TShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.containsKey(D)Z: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(43);
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      boolean boolean0 = tSynchronizedDoubleShortMap0.containsKey((double) 43);
      assertEquals(false, boolean0);
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.getNoEntryKey()D: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.<init>(Lgnu/trove/map/TDoubleShortMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap((-565), (float) (-565), (double) (short) (-1458), (short) (-1458));
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0, (Object) "fran\u00E7ais");
      double double0 = tSynchronizedDoubleShortMap0.getNoEntryKey();
      assertEquals((-1458.0), double0, 0.01D);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.putIfAbsent(DS)S: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(43);
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      tSynchronizedDoubleShortMap0.putIfAbsent((double) 43, (short)2);
      assertEquals("{43.0=2}", tDoubleShortHashMap0.toString());
      assertEquals(1, tDoubleShortHashMap0.size());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.put(DS)S: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap((-565), (float) (-565), (double) (short) (-1458), (short) (-1458));
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0, (Object) "fran\u00E7ais");
      short short0 = tSynchronizedDoubleShortMap0.put((double) 1063858766, (short) (-1458));
      assertEquals(false, tDoubleShortHashMap0.isEmpty());
      assertEquals((short) (-1458), short0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.retainEntries(Lgnu/trove/procedure/TDoubleShortProcedure;)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      boolean boolean0 = tSynchronizedDoubleShortMap0.retainEntries((TDoubleShortProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(43);
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      String string0 = tSynchronizedDoubleShortMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.hashCode()I: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap((-565), (float) (-565), (double) (short) (-1458), (short) (-1458));
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0, (Object) "fran\u00E7ais");
      int int0 = tSynchronizedDoubleShortMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.transformValues(Lgnu/trove/function/TShortFunction;)V: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) null, (Object) ":");
      // Undeclared exception!
      try {
        tSynchronizedDoubleShortMap0.transformValues((TShortFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.iterator()Lgnu/trove/iterator/TDoubleShortIterator;: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.size()I: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap((-565), (float) (-565), (double) (short) (-1458), (short) (-1458));
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0, (Object) "fran\u00E7ais");
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap((TDoubleShortMap) tSynchronizedDoubleShortMap0);
      assertTrue(tDoubleShortHashMap1.equals(tDoubleShortHashMap0));
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.forEachEntry(Lgnu/trove/procedure/TDoubleShortProcedure;)Z: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      boolean boolean0 = tSynchronizedDoubleShortMap0.forEachEntry((TDoubleShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.getNoEntryValue()S: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      short short0 = tSynchronizedDoubleShortMap0.getNoEntryValue();
      assertEquals((short)0, short0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.putAll(Lgnu/trove/map/TDoubleShortMap;)V: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap((-565), (float) (-565), (double) (short) (-1458), (short) (-1458));
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0, (Object) "fran\u00E7ais");
      tSynchronizedDoubleShortMap0.putAll((TDoubleShortMap) tDoubleShortHashMap0);
      assertEquals(0, tDoubleShortHashMap0.size());
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.containsValue(S)Z: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      boolean boolean0 = tSynchronizedDoubleShortMap0.containsValue((short)1);
      assertEquals(false, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.increment(D)Z: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      boolean boolean0 = tSynchronizedDoubleShortMap0.increment((double) (-1));
      assertEquals(false, boolean0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.keys()[D: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap((-9), (float) (-9), (double) (-9), (short) (-1));
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0, (Object) "/");
      double[] doubleArray0 = tSynchronizedDoubleShortMap0.keys();
      assertNotNull(doubleArray0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap((-9), (float) (-9), (double) (-9), (short) (-1));
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0, (Object) "/");
      boolean boolean0 = tSynchronizedDoubleShortMap0.forEachKey((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.keys([D)[D: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap((-565), (float) (-565), (double) (short) (-1458), (short) (-1458));
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0, (Object) "fran\u00E7ais");
      double[] doubleArray0 = tSynchronizedDoubleShortMap0.keys(tDoubleShortHashMap0._set);
      assertNotNull(doubleArray0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      boolean boolean0 = tSynchronizedDoubleShortMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.get(D)S: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      short short0 = tSynchronizedDoubleShortMap0.get((double) (short)1);
      assertEquals((short)0, short0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.equals(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      boolean boolean0 = tSynchronizedDoubleShortMap0.equals((Object) "");
      assertEquals(false, boolean0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.values()[S: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap((-565), (float) (-565), (double) (short) (-1458), (short) (-1458));
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0, (Object) "fran\u00E7ais");
      short[] shortArray0 = tSynchronizedDoubleShortMap0.values();
      assertNotNull(shortArray0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.clear()V: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      tSynchronizedDoubleShortMap0.clear();
      assertEquals("{}", tSynchronizedDoubleShortMap0.toString());
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      // Undeclared exception!
      try {
        tSynchronizedDoubleShortMap0.putAll((Map<? extends Double, ? extends Short>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.remove(D)S: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(43);
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      short short0 = tSynchronizedDoubleShortMap0.remove((double) (short)0);
      assertEquals((short)0, short0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.adjustOrPutValue(DSS)S: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap((-565), (float) (-565), (double) (short) (-1458), (short) (-1458));
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0, (Object) "fran\u00E7ais");
      short short0 = tSynchronizedDoubleShortMap0.adjustOrPutValue((double) (short) (-1458), (short) (-1458), (short) (-1458));
      assertEquals(1, tDoubleShortHashMap0.size());
      assertEquals((short) (-1458), short0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.values([S)[S: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      short[] shortArray0 = new short[4];
      short[] shortArray1 = tSynchronizedDoubleShortMap0.values(shortArray0);
      assertSame(shortArray0, shortArray1);
  }

  //Test case number: 27
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.adjustValue(DS)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.<init>(Lgnu/trove/map/TDoubleShortMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap((-565), (float) (-565), (double) (short) (-1458), (short) (-1458));
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0, (Object) "fran\u00E7ais");
      boolean boolean0 = tSynchronizedDoubleShortMap0.adjustValue((double) (-565), (short) (-1458));
      assertEquals(false, boolean0);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.<init>(Lgnu/trove/map/TDoubleShortMap;)V: I17 Branch 1 IFNONNULL L59 - false
   */

  @Test
  public void test28()  throws Throwable  {
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = null;
      try {
        tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.keySet()Lgnu/trove/set/TDoubleSet;: I11 Branch 2 IFNONNULL L107 - true
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.keySet()Lgnu/trove/set/TDoubleSet;: I11 Branch 2 IFNONNULL L107 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      TSynchronizedDoubleSet tSynchronizedDoubleSet0 = (TSynchronizedDoubleSet)tSynchronizedDoubleShortMap0.keySet();
      assertNotNull(tSynchronizedDoubleSet0);
      
      TSynchronizedDoubleSet tSynchronizedDoubleSet1 = (TSynchronizedDoubleSet)tSynchronizedDoubleShortMap0.keySet();
      assertSame(tSynchronizedDoubleSet1, tSynchronizedDoubleSet0);
  }

  //Test case number: 30
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.valueCollection()Lgnu/trove/TShortCollection;: I11 Branch 3 IFNONNULL L121 - true
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.valueCollection()Lgnu/trove/TShortCollection;: I11 Branch 3 IFNONNULL L121 - false
   * 3 gnu.trove.impl.sync.TSynchronizedDoubleShortMap.<init>(Lgnu/trove/map/TDoubleShortMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test30()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(43);
      TSynchronizedDoubleShortMap tSynchronizedDoubleShortMap0 = new TSynchronizedDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      TSynchronizedShortCollection tSynchronizedShortCollection0 = (TSynchronizedShortCollection)tSynchronizedDoubleShortMap0.valueCollection();
      assertNotNull(tSynchronizedShortCollection0);
      
      TSynchronizedShortCollection tSynchronizedShortCollection1 = (TSynchronizedShortCollection)tSynchronizedDoubleShortMap0.valueCollection();
      assertSame(tSynchronizedShortCollection1, tSynchronizedShortCollection0);
  }
}
