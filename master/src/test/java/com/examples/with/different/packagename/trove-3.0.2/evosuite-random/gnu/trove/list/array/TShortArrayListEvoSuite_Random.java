/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.list.array;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TShortCollection;
import gnu.trove.impl.sync.TSynchronizedShortCollection;
import gnu.trove.impl.sync.TSynchronizedShortSet;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessShortList;
import gnu.trove.list.TShortList;
import gnu.trove.list.array.TShortArrayList;
import gnu.trove.list.linked.TShortLinkedList;
import gnu.trove.procedure.TShortProcedure;
import gnu.trove.set.TShortSet;
import gnu.trove.set.hash.TShortHashSet;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import java.util.Set;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortArrayListEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


//   @Test
//   public void test0()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList();
//       Locale locale0 = Locale.KOREA;
//       Set<String> set0 = locale0.getUnicodeLocaleKeys();
//       boolean boolean0 = tShortArrayList0.removeAll((Collection<?>) set0);
//       assertEquals(false, boolean0);
//       assertEquals("{}", tShortArrayList0.toString());
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//   }

//   @Test
//   public void test1()  throws Throwable  {
//       int int0 = 0;
//       short short0 = (short)1;
//       TShortArrayList tShortArrayList0 = new TShortArrayList(int0, short0);
//       tShortArrayList0.sort();
//       assertEquals(true, tShortArrayList0.isEmpty());
//       assertEquals(1, tShortArrayList0.getNoEntryValue());
//   }

//   @Test
//   public void test2()  throws Throwable  {
//       int int0 = 16;
//       TShortArrayList tShortArrayList0 = new TShortArrayList(int0);
//       tShortArrayList0.reverse();
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       assertEquals("{}", tShortArrayList0.toString());
//   }

//   @Test
//   public void test3()  throws Throwable  {
//       int int0 = 0;
//       short short0 = (short)31;
//       short[] shortArray0 = new short[8];
//       shortArray0[0] = short0;
//       shortArray0[1] = short0;
//       shortArray0[2] = short0;
//       short short1 = (short)0;
//       shortArray0[3] = short1;
//       shortArray0[4] = short0;
//       shortArray0[5] = short0;
//       shortArray0[6] = short0;
//       shortArray0[7] = short0;
//       TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
//       assertNotNull(tShortArrayList0);
//       
//       LinkedList<Short> linkedList0 = new LinkedList<Short>();
//       boolean boolean0 = tShortArrayList0.removeAll((Collection<?>) linkedList0);
//       assertEquals(false, boolean0);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       
//       TShortArrayList tShortArrayList1 = new TShortArrayList(int0, short0);
//       tShortArrayList1.resetQuick();
//       assertEquals(0, tShortArrayList1.size());
//       assertEquals(31, tShortArrayList1.getNoEntryValue());
//   }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-1375);
      short[] shortArray0 = new short[10];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)1;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)606;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)955;
      shortArray0[7] = short7;
      short short8 = (short) (-1997);
      shortArray0[8] = short8;
      short short9 = (short)1781;
      shortArray0[9] = short9;
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
      assertNotNull(tShortArrayList0);
      
      // Undeclared exception!
      try {
        tShortArrayList0.insert((int) shortArray0[2], shortArray0[5]);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not grow ArrayList wrapped external array
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short)244;
      shortArray0[0] = short0;
      short short1 = (short)338;
      shortArray0[1] = short1;
      short short2 = (short) (-1);
      shortArray0[2] = short2;
      short short3 = (short)31;
      shortArray0[3] = short3;
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
      assertNotNull(tShortArrayList0);
      
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)10;
      TShortHashSet tShortHashSet0 = new TShortHashSet();
      tShortArrayList0.containsAll((TShortCollection) tShortHashSet0);
      shortArray0[5] = short5;
      TShortArrayList tShortArrayList1 = TShortArrayList.wrap(shortArray0, shortArray0[0]);
      tShortArrayList1.reverse();
      TShortArrayList tShortArrayList2 = new TShortArrayList();
      short[] shortArray1 = new short[6];
      short short6 = (short)32767;
      shortArray1[0] = short6;
      short short7 = (short)916;
      shortArray1[1] = short7;
      short short8 = (short)0;
      tShortArrayList0.reset();
      assertEquals(0, tShortArrayList0.size());
      
      shortArray1[2] = short8;
      short short9 = (short) (-1865);
      shortArray1[3] = short9;
      short short10 = (short)0;
      shortArray1[4] = short10;
      short short11 = (short)611;
      shortArray1[5] = short11;
      tShortArrayList2.addAll(shortArray1);
      short short12 = (short) (-779);
      tShortArrayList2.lastIndexOf((int) short9, short12);
      tShortArrayList2.iterator();
      TShortArrayList tShortArrayList3 = new TShortArrayList();
      TShortArrayList tShortArrayList4 = new TShortArrayList();
      assertFalse(tShortArrayList4.equals(tShortArrayList2));
  }

  @Test
  public void test6()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      short[] shortArray0 = new short[8];
      short short0 = (short) (-626);
      shortArray0[0] = short0;
      short short1 = (short)10593;
      shortArray0[1] = short1;
      int int0 = 1338;
      short[] shortArray1 = new short[5];
      shortArray1[0] = short1;
      shortArray1[1] = short1;
      short short2 = (short)0;
      shortArray1[2] = short2;
      shortArray1[3] = short1;
      shortArray1[4] = short1;
      // Undeclared exception!
      try {
        tShortArrayList0.insert(int0, shortArray1, (int) shortArray1[0], int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short)84;
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      TShortArrayList tShortArrayList1 = new TShortArrayList((TShortCollection) tShortArrayList0);
      short short1 = (short)182;
      String string0 = tShortArrayList0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try {
        tShortArrayList1.max();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot find maximum of an empty list
         //
      }
  }

//   @Test
//   public void test8()  throws Throwable  {
//       short[] shortArray0 = new short[8];
//       short short0 = (short)612;
//       shortArray0[0] = short0;
//       short short1 = (short) (-2013);
//       shortArray0[1] = short1;
//       short short2 = (short)32767;
//       shortArray0[2] = short2;
//       short short3 = (short) (-1506);
//       shortArray0[3] = short3;
//       short short4 = (short) (-960);
//       shortArray0[4] = short4;
//       short short5 = (short)0;
//       shortArray0[5] = short5;
//       short short6 = (short) (-1701);
//       shortArray0[6] = short6;
//       short short7 = (short)10;
//       shortArray0[7] = short7;
//       TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
//       short short8 = tShortArrayList0.min();
//       assertEquals((short) (-2013), short8);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       assertEquals(8, tShortArrayList0.size());
//   }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-1731);
      TShortArrayList tShortArrayList0 = null;
      try {
        tShortArrayList0 = new TShortArrayList(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      int int0 = 421439783;
      short[] shortArray0 = new short[3];
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      TShortHashSet tShortHashSet0 = new TShortHashSet((Collection<? extends Short>) linkedList0);
      TSynchronizedShortSet tSynchronizedShortSet0 = new TSynchronizedShortSet((TShortSet) tShortHashSet0);
      short[] shortArray1 = new short[8];
      short short0 = (short)0;
      shortArray1[0] = short0;
      short short1 = (short)113;
      shortArray1[1] = short1;
      short short2 = (short)1;
      shortArray1[2] = short2;
      short short3 = (short)10;
      shortArray1[3] = short3;
      short short4 = (short)30;
      shortArray1[4] = short4;
      short short5 = (short)0;
      shortArray1[5] = short5;
      short short6 = (short) (-82);
      shortArray1[6] = short6;
      short short7 = (short)0;
      shortArray1[7] = short7;
      tShortHashSet0._set = shortArray1;
      boolean boolean0 = tShortArrayList0.containsAll((TShortCollection) tSynchronizedShortSet0);
      assertEquals(true, boolean0);
      
      short short8 = (short) (-1890);
      shortArray0[0] = short8;
      short short9 = (short)1691;
      shortArray0[1] = short9;
      short short10 = (short)10;
      int int1 = 913;
      int int2 = (-32768);
      // Undeclared exception!
      try {
        tShortArrayList0.set(int1, shortArray0, int2, (int) shortArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test11()  throws Throwable  {
//       short[] shortArray0 = new short[2];
//       short short0 = (short)0;
//       shortArray0[0] = short0;
//       TShortHashSet tShortHashSet0 = new TShortHashSet(shortArray0);
//       TSynchronizedShortCollection tSynchronizedShortCollection0 = new TSynchronizedShortCollection((TShortCollection) tShortHashSet0);
//       TShortArrayList tShortArrayList0 = new TShortArrayList((TShortCollection) tSynchronizedShortCollection0);
//       int int0 = tShortArrayList0.hashCode();
//       assertEquals("{0}", tShortArrayList0.toString());
//       assertEquals(0, int0);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       
//       byte[] byteArray0 = new byte[5];
//       byte byte0 = (byte) (-32);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)0;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)40;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte)37;
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)0;
//       byteArray0[4] = byte4;
//       tShortHashSet0._states = byteArray0;
//       short short1 = (short)719;
//       shortArray0[1] = short1;
//       TShortArrayList tShortArrayList1 = TShortArrayList.wrap(shortArray0);
//       assertNotNull(tShortArrayList1);
//       
//       // Undeclared exception!
//       try {
//         tShortArrayList1.addAll(shortArray0);
//         fail("Expecting exception: IllegalStateException");
//       
//       } catch(IllegalStateException e) {
//          //
//          // Can not grow ArrayList wrapped external array
//          //
//       }
//   }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 10;
      short short0 = (short) (-1022);
      TShortArrayList tShortArrayList0 = new TShortArrayList(int0, short0);
      int int1 = 10;
      short[] shortArray0 = new short[4];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      int int2 = (-32768);
      TShortHashSet tShortHashSet0 = new TShortHashSet(int2);
      TSynchronizedShortSet tSynchronizedShortSet0 = new TSynchronizedShortSet((TShortSet) tShortHashSet0);
      boolean boolean0 = tShortArrayList0.retainAll((TShortCollection) tSynchronizedShortSet0);
      assertEquals(false, boolean0);
      
      tShortArrayList0.sort();
      int int3 = 0;
      tShortArrayList0.clear(int3);
      shortArray0[3] = short0;
      // Undeclared exception!
      try {
        tShortArrayList0.min();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot find minimum of an empty list
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TShortCollection tShortCollection0 = null;
      TShortArrayList tShortArrayList0 = null;
      try {
        tShortArrayList0 = new TShortArrayList(tShortCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      TShortArrayList tShortArrayList0 = new TShortArrayList(int0);
      short[] shortArray0 = new short[6];
      short short0 = (short)181;
      shortArray0[0] = short0;
      short short1 = (short)376;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short) (-745);
      shortArray0[3] = short3;
      boolean boolean0 = tShortArrayList0.remove(short3);
      assertEquals(false, boolean0);
      assertEquals(0, tShortArrayList0.size());
      
      short short4 = (short) (-1170);
      shortArray0[4] = short4;
      short short5 = (short)1732;
      int int1 = (-1093);
      // Undeclared exception!
      try {
        tShortArrayList0.remove((int) short1, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 376
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short) (-1437);
      shortArray0[0] = short0;
      TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortArrayList0);
      TShortArrayList tShortArrayList1 = new TShortArrayList((TShortCollection) tUnmodifiableRandomAccessShortList0);
      assertEquals("{-1437}", tShortArrayList1.toString());
      
      // Undeclared exception!
      try {
        tShortArrayList0.insert((int) shortArray0[0], shortArray0, (int) shortArray0[0], (int) shortArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 16729;
      TShortArrayList tShortArrayList0 = new TShortArrayList(int0);
      TShortProcedure tShortProcedure0 = null;
      TShortArrayList tShortArrayList1 = (TShortArrayList)tShortArrayList0.inverseGrep(tShortProcedure0);
      assertNotNull(tShortArrayList1);
      
      tShortArrayList0.removeAll((TShortCollection) tShortArrayList1);
      Random random0 = new Random((long) int0);
      tShortArrayList0.shuffle(random0);
      short short0 = (short) (-1414);
      tShortArrayList0.lastIndexOf(short0);
      int int1 = 1361;
      TShortArrayList tShortArrayList2 = new TShortArrayList();
      int int2 = 136;
      short short1 = (short)0;
      tShortArrayList2.fill(int2, int2, short1);
      assertEquals("{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}", tShortArrayList2.toString());
      
      TShortArrayList tShortArrayList3 = new TShortArrayList(int1);
      tShortArrayList3.sum();
      tShortArrayList3.hashCode();
      // Undeclared exception!
      try {
        tShortArrayList3.min();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot find minimum of an empty list
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      // Undeclared exception!
      try {
        tShortArrayList0.min();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot find minimum of an empty list
         //
      }
  }

//   @Test
//   public void test18()  throws Throwable  {
//       short[] shortArray0 = new short[7];
//       short short0 = (short)898;
//       shortArray0[0] = short0;
//       short short1 = (short)167;
//       shortArray0[1] = short1;
//       short short2 = (short)581;
//       shortArray0[2] = short2;
//       short short3 = (short) (-1679);
//       shortArray0[3] = short3;
//       short short4 = (short)7057;
//       shortArray0[4] = short4;
//       short short5 = (short)0;
//       shortArray0[5] = short5;
//       short short6 = (short)0;
//       shortArray0[6] = short6;
//       TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
//       short short7 = (short) (-1614);
//       tShortArrayList0.fill(short7);
//       assertEquals(7, tShortArrayList0.size());
//       assertEquals(-11298, tShortArrayList0.sum());
//       
//       short[] shortArray1 = new short[4];
//       short short8 = (short)0;
//       shortArray1[0] = short8;
//       short short9 = (short)0;
//       shortArray1[1] = short9;
//       short short10 = (short)1750;
//       shortArray1[2] = short10;
//       short short11 = (short) (-32768);
//       shortArray1[3] = short11;
//       TShortArrayList tShortArrayList1 = new TShortArrayList(shortArray1);
//       int int0 = (-1512);
//       int int1 = (-1986);
//       tShortArrayList1.toArray(shortArray1, int0, int1, (int) shortArray1[1]);
//       TShortArrayList tShortArrayList2 = new TShortArrayList();
//       LinkedList<Short> linkedList0 = new LinkedList<Short>();
//       boolean boolean0 = tShortArrayList2.retainAll((Collection<?>) linkedList0);
//       assertEquals(false, boolean0);
//   }

  @Test
  public void test19()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short) (-1056);
      shortArray0[0] = short0;
      short short1 = (short) (-1);
      shortArray0[1] = short1;
      short short2 = (short)2729;
      shortArray0[2] = short2;
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      TShortArrayList tShortArrayList0 = new TShortArrayList((TShortCollection) tShortLinkedList0);
      // Undeclared exception!
      try {
        tShortArrayList0.min();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot find minimum of an empty list
         //
      }
  }
}
