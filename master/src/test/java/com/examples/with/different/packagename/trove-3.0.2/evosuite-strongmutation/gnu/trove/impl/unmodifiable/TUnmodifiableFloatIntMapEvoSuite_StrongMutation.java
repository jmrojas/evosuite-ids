/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableFloatSet;
import gnu.trove.impl.unmodifiable.TUnmodifiableIntCollection;
import gnu.trove.map.TFloatIntMap;
import gnu.trove.map.hash.TFloatIntHashMap;
import gnu.trove.procedure.TFloatIntProcedure;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.procedure.TIntProcedure;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableFloatIntMapEvoSuite_StrongMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 6 covered goals:
   * 1 Strong Mutation 11: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.isEmpty()Z:64 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.isEmpty()Z: root-Branch
   * 3 Strong Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.<init>(Lgnu/trove/map/TFloatIntMap;)V:58 - ReplaceComparisonOperator != null -> = null
   * 4 Strong Mutation 11: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.isEmpty()Z:64 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 5 Strong Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.isEmpty()Z:64 - DeleteStatement: isEmpty()Z
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.<init>(Lgnu/trove/map/TFloatIntMap;)V: I17 Branch 1 IFNONNULL L58 - true
   */

  @Test
  public void test0()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[2] = 2036.8842F;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap((-581), 0.0F);
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      tUnmodifiableFloatIntMap0.isEmpty();
      floatArray0[2] = (-1.0F);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 Strong Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.isEmpty()Z:64 - DeleteStatement: isEmpty()Z
   */

  @Test
  public void test1()  throws Throwable  {
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap((-1709), (-1709));
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      boolean boolean0 = tUnmodifiableFloatIntMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 Strong Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.containsKey(F)Z:65 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.containsKey(F)Z: root-Branch
   * 3 Strong Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.containsKey(F)Z:65 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   */

  @Test
  public void test2()  throws Throwable  {
      float[] floatArray0 = new float[10];
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap();
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      floatArray0[2] = (-1.0F);
      tUnmodifiableFloatIntMap0.containsKey(1.0F);
      floatArray0[2] = (float) (-851);
  }

  //Test case number: 3
  /*
   * 3 covered goals:
   * 1 Strong Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.containsKey(F)Z:65 - InsertUnaryOp Negation of key
   * 2 Strong Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.containsKey(F)Z:65 - InsertUnaryOp Negation of key
   * 3 Strong Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.containsKey(F)Z:65 - DeleteStatement: containsKey(F)Z
   */

  @Test
  public void test3()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[2] = (-82.96605F);
      int[] intArray0 = new int[10];
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      boolean boolean0 = tUnmodifiableFloatIntMap0.containsKey((-82.96605F));
      assertEquals(true, boolean0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 Strong Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.containsKey(F)Z:65 - DeleteStatement: containsKey(F)Z
   */

  @Test
  public void test4()  throws Throwable  {
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap((-582));
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      tFloatIntHashMap0.adjustOrPutValue(0.0F, 1887, (-666));
      boolean boolean0 = tUnmodifiableFloatIntMap0.containsKey(0.0F);
      assertEquals(true, boolean0);
  }

  //Test case number: 5
  /*
   * 6 covered goals:
   * 1 Strong Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.containsValue(I)Z:66 - InsertUnaryOp Negation of val
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.containsValue(I)Z: root-Branch
   * 3 Strong Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.containsValue(I)Z:66 - InsertUnaryOp Negation of val
   * 4 Strong Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.containsValue(I)Z:66 - InsertUnaryOp IINC -1 val
   * 5 Strong Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.containsValue(I)Z:66 - InsertUnaryOp IINC 1 val
   * 6 Strong Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.containsValue(I)Z:66 - DeleteStatement: containsValue(I)Z
   */

  @Test
  public void test5()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int[] intArray0 = new int[10];
      intArray0[0] = (-1720);
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      boolean boolean0 = tUnmodifiableFloatIntMap0.containsValue((-1720));
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * 1 Strong Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.containsValue(I)Z:66 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 2 Strong Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.containsValue(I)Z:66 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   */

  @Test
  public void test6()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[0] = 1.0F;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap();
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      tUnmodifiableFloatIntMap0.containsValue((-1));
      floatArray0[0] = 1248.1549F;
  }

  //Test case number: 7
  /*
   * 3 covered goals:
   * 1 Strong Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.containsValue(I)Z:66 - DeleteStatement: containsValue(I)Z
   * 2 Strong Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.containsValue(I)Z:66 - InsertUnaryOp IINC -1 val
   * 3 Strong Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.containsValue(I)Z:66 - InsertUnaryOp IINC 1 val
   */

  @Test
  public void test7()  throws Throwable  {
      float[] floatArray0 = new float[10];
      int[] intArray0 = new int[5];
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      boolean boolean0 = tUnmodifiableFloatIntMap0.containsValue(0);
      assertEquals(true, boolean0);
  }

  //Test case number: 8
  /*
   * 3 covered goals:
   * 1 Strong Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.get(F)I:67 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.get(F)I: root-Branch
   * 3 Strong Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.get(F)I:67 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   */

  @Test
  public void test8()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[3] = 10.0F;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(0, 578.66077F, Float.NEGATIVE_INFINITY, 0);
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      tUnmodifiableFloatIntMap0.get(322.7591F);
      floatArray0[3] = (float) 0;
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * 1 Strong Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.get(F)I:67 - DeleteStatement: get(F)I
   * 2 Strong Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.get(F)I:67 - DeleteStatement: get(F)I
   */

  @Test
  public void test9()  throws Throwable  {
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(1730, 0.0F, 1094.7014F, 31);
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      int int0 = tUnmodifiableFloatIntMap0.get((float) 1730);
      assertEquals(31, int0);
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * 1 Strong Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.get(F)I:67 - InsertUnaryOp Negation of key
   * 2 Strong Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.get(F)I:67 - InsertUnaryOp Negation of key
   */

  @Test
  public void test10()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      int[] intArray0 = new int[10];
      intArray0[0] = (-1720);
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      int int0 = tUnmodifiableFloatIntMap0.get((-1.0F));
      assertEquals(0, int0);
  }

  //Test case number: 11
  /*
   * 5 covered goals:
   * 1 Strong Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.keys()[F:83 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 2 Strong Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.keys()[F:83 - DeleteStatement: keys()[F
   * 3 Strong Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.keys()[F:83 - DeleteStatement: keys()[F
   * 4 Strong Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.keys()[F:83 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.keys()[F: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap((-582));
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      float[] floatArray0 = tUnmodifiableFloatIntMap0.keys();
      assertNotNull(floatArray0);
  }

  //Test case number: 12
  /*
   * 5 covered goals:
   * 1 Strong Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.keys([F)[F:84 - DeleteStatement: keys([F)[F
   * 2 Strong Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.keys([F)[F:84 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 3 Strong Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.keys([F)[F:84 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 4 Strong Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.keys([F)[F:84 - DeleteStatement: keys([F)[F
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.keys([F)[F: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap((-1709), (-1709));
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      float[] floatArray0 = tUnmodifiableFloatIntMap0.keys(tFloatIntHashMap0._set);
      assertNotNull(floatArray0);
  }

  //Test case number: 13
  /*
   * 5 covered goals:
   * 1 Strong Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.values()[I:91 - DeleteStatement: values()[I
   * 2 Strong Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.values()[I:91 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 3 Strong Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.values()[I:91 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 4 Strong Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.values()[I:91 - DeleteStatement: values()[I
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.values()[I: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap((-1), 0.0F, 0.0F, (-1));
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      int[] intArray0 = tUnmodifiableFloatIntMap0.values();
      assertNotNull(intArray0);
  }

  //Test case number: 14
  /*
   * 5 covered goals:
   * 1 Strong Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.values([I)[I:92 - DeleteStatement: values([I)[I
   * 2 Strong Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.values([I)[I:92 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 3 Strong Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.values([I)[I:92 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 4 Strong Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.values([I)[I:92 - DeleteStatement: values([I)[I
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.values([I)[I: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap((-582));
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      int[] intArray0 = new int[6];
      int[] intArray1 = tUnmodifiableFloatIntMap0.values(intArray0);
      assertSame(intArray0, intArray1);
  }

  //Test case number: 15
  /*
   * 7 covered goals:
   * 1 Strong Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.equals(Ljava/lang/Object;)Z:94 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 2 Strong Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.equals(Ljava/lang/Object;)Z:94 - ReplaceComparisonOperator == -> !=
   * 3 Strong Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.equals(Ljava/lang/Object;)Z:94 - ReplaceComparisonOperator == -> !=
   * 4 Strong Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.equals(Ljava/lang/Object;)Z:94 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 5 Strong Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.equals(Ljava/lang/Object;)Z:94 - ReplaceConstant - 0 -> 1
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L94 - false
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L94 - true
   */

  @Test
  public void test15()  throws Throwable  {
      float[] floatArray0 = new float[10];
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap();
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      floatArray0[2] = (-1.0F);
      tUnmodifiableFloatIntMap0.equals((Object) "zh");
      floatArray0[2] = (float) (-851);
  }

  //Test case number: 16
  /*
   * 2 covered goals:
   * 1 Strong Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.equals(Ljava/lang/Object;)Z:94 - ReplaceConstant - 0 -> 1
   * 2 Strong Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.equals(Ljava/lang/Object;)Z:94 - ReplaceComparisonOperator == -> !=
   */

  @Test
  public void test16()  throws Throwable  {
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap((-1217));
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      Object object0 = new Object();
      boolean boolean0 = tUnmodifiableFloatIntMap0.equals(object0);
      assertEquals(false, boolean0);
  }

  //Test case number: 17
  /*
   * 3 covered goals:
   * 1 Strong Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.hashCode()I:95 - DeleteStatement: hashCode()I
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.hashCode()I: root-Branch
   * 3 Strong Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.hashCode()I:95 - DeleteStatement: hashCode()I
   */

  @Test
  public void test17()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1522;
      int[] intArray0 = new int[7];
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      int int0 = tUnmodifiableFloatIntMap0.hashCode();
      assertEquals(1399531893, int0);
  }

  //Test case number: 18
  /*
   * 2 covered goals:
   * 1 Strong Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.hashCode()I:95 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 2 Strong Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.hashCode()I:95 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   */

  @Test
  public void test18()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[0] = 1.0F;
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap();
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      tUnmodifiableFloatIntMap0.hashCode();
      floatArray0[0] = 1248.1549F;
  }

  //Test case number: 19
  /*
   * 5 covered goals:
   * 1 Strong Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.toString()Ljava/lang/String;:96 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 2 Strong Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.toString()Ljava/lang/String;:96 - DeleteStatement: toString()Ljava/lang/String;
   * 3 Strong Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.toString()Ljava/lang/String;:96 - DeleteStatement: toString()Ljava/lang/String;
   * 4 Strong Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.toString()Ljava/lang/String;:96 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap((-1217));
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      String string0 = tUnmodifiableFloatIntMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 20
  /*
   * 3 covered goals:
   * 1 Strong Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.getNoEntryKey()F:97 - DeleteStatement: getNoEntryKey()F
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.getNoEntryKey()F: root-Branch
   * 3 Strong Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.getNoEntryKey()F:97 - DeleteStatement: getNoEntryKey()F
   */

//   @Test
//   public void test20()  throws Throwable  {
//       TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(0, (float) 0, 1759.1322F, 0);
//       TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
//       float float0 = tUnmodifiableFloatIntMap0.getNoEntryKey();
//       assertEquals(1759.1322F, float0, 0.01F);
//   }

  //Test case number: 21
  /*
   * 2 covered goals:
   * 1 Strong Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.getNoEntryKey()F:97 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 2 Strong Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.getNoEntryKey()F:97 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   */

  @Test
  public void test21()  throws Throwable  {
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap();
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      float[] floatArray0 = new float[7];
      floatArray0[1] = 0.0F;
      tUnmodifiableFloatIntMap0.getNoEntryKey();
      floatArray0[1] = (-1749.385F);
  }

  //Test case number: 22
  /*
   * 3 covered goals:
   * 1 Strong Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.getNoEntryValue()I:98 - DeleteStatement: getNoEntryValue()I
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.getNoEntryValue()I: root-Branch
   * 3 Strong Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.getNoEntryValue()I:98 - DeleteStatement: getNoEntryValue()I
   */

  @Test
  public void test22()  throws Throwable  {
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap((-1), 0.0F, 0.0F, (-1));
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      int int0 = tUnmodifiableFloatIntMap0.getNoEntryValue();
      assertEquals((-1), int0);
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * 1 Strong Mutation 59: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z:101 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   * 3 Strong Mutation 59: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z:101 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z
   */

  @Test
  public void test23()  throws Throwable  {
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap((-582));
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      boolean boolean0 = tUnmodifiableFloatIntMap0.forEachKey((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 Strong Mutation 61: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:104 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: root-Branch
   * 3 Strong Mutation 61: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z:104 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z
   */

  @Test
  public void test24()  throws Throwable  {
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap((-1217));
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      boolean boolean0 = tUnmodifiableFloatIntMap0.forEachValue((TIntProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 Strong Mutation 63: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.forEachEntry(Lgnu/trove/procedure/TFloatIntProcedure;)Z:107 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TFloatIntProcedure;)Z
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.forEachEntry(Lgnu/trove/procedure/TFloatIntProcedure;)Z: root-Branch
   * 3 Strong Mutation 63: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.forEachEntry(Lgnu/trove/procedure/TFloatIntProcedure;)Z:107 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TFloatIntProcedure;)Z
   */

  @Test
  public void test25()  throws Throwable  {
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap((-1217));
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      boolean boolean0 = tUnmodifiableFloatIntMap0.forEachEntry((TFloatIntProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 26
  /*
   * 17 covered goals:
   * 1 Strong Mutation 1: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap$1.key()F:114 - DeleteStatement: key()F
   * 2 Strong Mutation 0: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap$1.key()F:114 - DeleteField: iterLgnu/trove/iterator/TFloatIntIterator;
   * 3 Strong Mutation 1: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap$1.key()F:114 - DeleteStatement: key()F
   * 4 Strong Mutation 2: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap$1.value()I:115 - DeleteField: iterLgnu/trove/iterator/TFloatIntIterator;
   * 5 Strong Mutation 4: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap$1.advance()V:116 - DeleteField: iterLgnu/trove/iterator/TFloatIntIterator;
   * 6 Strong Mutation 5: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap$1.advance()V:116 - DeleteStatement: advance()V
   * 7 Strong Mutation 6: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap$1.hasNext()Z:117 - DeleteField: iterLgnu/trove/iterator/TFloatIntIterator;
   * 8 Strong Mutation 7: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap$1.hasNext()Z:117 - DeleteStatement: hasNext()Z
   * 9 Strong Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.size()I:63 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 10 Strong Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.size()I:63 - DeleteStatement: size()I
   * 11 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.size()I: root-Branch
   * 12 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.iterator()Lgnu/trove/iterator/TFloatIntIterator;: root-Branch
   * 13 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap$1.advance()V: root-Branch
   * 14 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap$1.hasNext()Z: root-Branch
   * 15 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap$1.key()F: root-Branch
   * 16 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap$1.value()I: root-Branch
   * 17 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap$1.<init>(Lgnu/trove/impl/unmodifiable/TUnmodifiableFloatIntMap;)V: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 878.0673F;
      int[] intArray0 = new int[5];
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap((TFloatIntMap) tUnmodifiableFloatIntMap0);
      assertEquals(5, tFloatIntHashMap1.capacity());
      assertEquals(2, tFloatIntHashMap1.size());
  }

  //Test case number: 27
  /*
   * 2 covered goals:
   * 1 Strong Mutation 3: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap$1.value()I:115 - DeleteStatement: value()I
   * 2 Strong Mutation 3: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap$1.value()I:115 - DeleteStatement: value()I
   */

  @Test
  public void test27()  throws Throwable  {
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap((-582));
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      tFloatIntHashMap0.adjustOrPutValue(0.0F, 1887, (-666));
      tFloatIntHashMap0.putAll((TFloatIntMap) tUnmodifiableFloatIntMap0);
      assertEquals("{0.0=-666}", tFloatIntHashMap0.toString());
      assertEquals(5, tFloatIntHashMap0.capacity());
  }

  //Test case number: 28
  /*
   * 8 covered goals:
   * 1 Strong Mutation 7: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap$1.hasNext()Z:117 - DeleteStatement: hasNext()Z
   * 2 Strong Mutation 0: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap$1.key()F:114 - DeleteField: iterLgnu/trove/iterator/TFloatIntIterator;
   * 3 Strong Mutation 2: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap$1.value()I:115 - DeleteField: iterLgnu/trove/iterator/TFloatIntIterator;
   * 4 Strong Mutation 4: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap$1.advance()V:116 - DeleteField: iterLgnu/trove/iterator/TFloatIntIterator;
   * 5 Strong Mutation 5: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap$1.advance()V:116 - DeleteStatement: advance()V
   * 6 Strong Mutation 6: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap$1.hasNext()Z:117 - DeleteField: iterLgnu/trove/iterator/TFloatIntIterator;
   * 7 Strong Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.size()I:63 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 8 Strong Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.size()I:63 - DeleteStatement: size()I
   */

  @Test
  public void test28()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int[] intArray0 = new int[5];
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap(floatArray0, intArray0);
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      TFloatIntHashMap tFloatIntHashMap1 = new TFloatIntHashMap((TFloatIntMap) tUnmodifiableFloatIntMap0);
      assertEquals(1, tUnmodifiableFloatIntMap0.size());
      assertEquals(false, tFloatIntHashMap1.isEmpty());
  }

  //Test case number: 29
  /*
   * 12 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.keySet()Lgnu/trove/set/TFloatSet;: I4 Branch 2 IFNONNULL L79 - true
   * 2 Strong Mutation 25: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.keySet()Lgnu/trove/set/TFloatSet;:79 - ReplaceComparisonOperator != null -> = null
   * 3 Strong Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.keySet()Lgnu/trove/set/TFloatSet;:80 - DeleteStatement: keySet()Lgnu/trove/set/TFloatSet;
   * 4 Strong Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.keySet()Lgnu/trove/set/TFloatSet;:80 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 5 Strong Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.keySet()Lgnu/trove/set/TFloatSet;:81 - DeleteField: keySetLgnu/trove/set/TFloatSet;
   * 6 Strong Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.keySet()Lgnu/trove/set/TFloatSet;:80 - DeleteStatement: unmodifiableSet(Lgnu/trove/set/TFloatSet;)Lgnu/trove/set/TFloatSet;
   * 7 Strong Mutation 25: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.keySet()Lgnu/trove/set/TFloatSet;:79 - ReplaceComparisonOperator != null -> = null
   * 8 Strong Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.keySet()Lgnu/trove/set/TFloatSet;:80 - DeleteStatement: keySet()Lgnu/trove/set/TFloatSet;
   * 9 Strong Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.keySet()Lgnu/trove/set/TFloatSet;:80 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 10 Strong Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.keySet()Lgnu/trove/set/TFloatSet;:81 - DeleteField: keySetLgnu/trove/set/TFloatSet;
   * 11 Strong Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.keySet()Lgnu/trove/set/TFloatSet;:80 - DeleteStatement: unmodifiableSet(Lgnu/trove/set/TFloatSet;)Lgnu/trove/set/TFloatSet;
   * 12 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.keySet()Lgnu/trove/set/TFloatSet;: I4 Branch 2 IFNONNULL L79 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap();
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      TUnmodifiableFloatSet tUnmodifiableFloatSet0 = (TUnmodifiableFloatSet)tUnmodifiableFloatIntMap0.keySet();
      assertNotNull(tUnmodifiableFloatSet0);
      
      TUnmodifiableFloatSet tUnmodifiableFloatSet1 = (TUnmodifiableFloatSet)tUnmodifiableFloatIntMap0.keySet();
      assertSame(tUnmodifiableFloatSet1, tUnmodifiableFloatSet0);
  }

  //Test case number: 30
  /*
   * 12 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.valueCollection()Lgnu/trove/TIntCollection;: I4 Branch 3 IFNONNULL L87 - true
   * 2 Strong Mutation 35: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.valueCollection()Lgnu/trove/TIntCollection;:87 - ReplaceComparisonOperator != null -> = null
   * 3 Strong Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.valueCollection()Lgnu/trove/TIntCollection;:88 - DeleteStatement: unmodifiableCollection(Lgnu/trove/TIntCollection;)Lgnu/trove/TIntCollection;
   * 4 Strong Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.valueCollection()Lgnu/trove/TIntCollection;:89 - DeleteField: valuesLgnu/trove/TIntCollection;
   * 5 Strong Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.valueCollection()Lgnu/trove/TIntCollection;:88 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 6 Strong Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.valueCollection()Lgnu/trove/TIntCollection;:88 - DeleteStatement: valueCollection()Lgnu/trove/TIntCollection;
   * 7 Strong Mutation 35: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.valueCollection()Lgnu/trove/TIntCollection;:87 - ReplaceComparisonOperator != null -> = null
   * 8 Strong Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.valueCollection()Lgnu/trove/TIntCollection;:88 - DeleteStatement: unmodifiableCollection(Lgnu/trove/TIntCollection;)Lgnu/trove/TIntCollection;
   * 9 Strong Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.valueCollection()Lgnu/trove/TIntCollection;:89 - DeleteField: valuesLgnu/trove/TIntCollection;
   * 10 Strong Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.valueCollection()Lgnu/trove/TIntCollection;:88 - DeleteField: mLgnu/trove/map/TFloatIntMap;
   * 11 Strong Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.valueCollection()Lgnu/trove/TIntCollection;:88 - DeleteStatement: valueCollection()Lgnu/trove/TIntCollection;
   * 12 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.valueCollection()Lgnu/trove/TIntCollection;: I4 Branch 3 IFNONNULL L87 - false
   */

  @Test
  public void test30()  throws Throwable  {
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap((-1));
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      TUnmodifiableIntCollection tUnmodifiableIntCollection0 = (TUnmodifiableIntCollection)tUnmodifiableFloatIntMap0.valueCollection();
      assertNotNull(tUnmodifiableIntCollection0);
      
      TUnmodifiableIntCollection tUnmodifiableIntCollection1 = (TUnmodifiableIntCollection)tUnmodifiableFloatIntMap0.valueCollection();
      assertSame(tUnmodifiableIntCollection1, tUnmodifiableIntCollection0);
  }

  //Test case number: 31
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L94 - false
   * 2 Strong Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.<init>(Lgnu/trove/map/TFloatIntMap;)V:58 - ReplaceComparisonOperator != null -> = null
   * 3 Strong Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.equals(Ljava/lang/Object;)Z:94 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 4 Strong Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.equals(Ljava/lang/Object;)Z:94 - ReplaceComparisonOperator == -> !=
   * 5 Strong Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.equals(Ljava/lang/Object;)Z:94 - ReplaceConstant - 1 -> 0
   * 6 Strong Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.equals(Ljava/lang/Object;)Z:94 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 7 Strong Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.equals(Ljava/lang/Object;)Z:94 - ReplaceConstant - 1 -> 0
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L94 - true
   */

  @Test
  public void test31()  throws Throwable  {
      TFloatIntHashMap tFloatIntHashMap0 = new TFloatIntHashMap((-1709), (-1709));
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap0 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      TUnmodifiableFloatIntMap tUnmodifiableFloatIntMap1 = new TUnmodifiableFloatIntMap((TFloatIntMap) tFloatIntHashMap0);
      boolean boolean0 = tUnmodifiableFloatIntMap1.equals((Object) tUnmodifiableFloatIntMap0);
      assertEquals(true, boolean0);
  }
}
