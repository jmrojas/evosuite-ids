/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TCharObjectMap;
import gnu.trove.map.hash.TCharObjectHashMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.RandomAccessFile;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharObjectHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


//  @Test
//  public void test0()  throws Throwable  {
//      int int0 = 182;
//      char char0 = 'M';
//      TCharObjectHashMap<Object> tCharObjectHashMap0 = new TCharObjectHashMap<Object>(int0, (float) int0, char0);
//      tCharObjectHashMap0.compact();
//      TCharObjectMap<String> tCharObjectMap0 = null;
//      int int1 = 2411;
//      TCharObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> tCharObjectHashMap1 = new TCharObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(int1);
//      AbstractMap.SimpleImmutableEntry<String, String>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<String, String>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 10);
//      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = null;
//      try {
//        abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>((Map.Entry<? extends String, ? extends String>) abstractMap_SimpleImmutableEntryArray0);
//        fail("Expecting exception: IllegalArgumentException");
//      
//      } catch(IllegalArgumentException e) {
//         //
//         // java.lang.ClassCastException@1e86486b
//         //
//      }
//  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      float float0 = 1499.9648F;
      char char0 = '0';
      TCharObjectHashMap<TCharObjectHashMap<String>> tCharObjectHashMap0 = new TCharObjectHashMap<TCharObjectHashMap<String>>(int0, float0, char0);
      char char1 = 'K';
      tCharObjectHashMap0.get(char1);
      assertEquals('0', tCharObjectHashMap0.getNoEntryKey());
      
      TCharObjectHashMap<Object> tCharObjectHashMap1 = new TCharObjectHashMap<Object>();
      ObjectOutput objectOutput0 = null;
      // Undeclared exception!
      try {
        tCharObjectHashMap1.writeExternal(objectOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 0;
      float float0 = (-1.0F);
      char char0 = '$';
      String string0 = "";
      File file0 = new File(string0, string0);
      File file1 = file0.getCanonicalFile();
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(file1, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 1868;
      float float0 = 1.17549435E-38F;
      char char0 = 'R';
      TCharObjectHashMap<TCharObjectHashMap<Integer>> tCharObjectHashMap0 = new TCharObjectHashMap<TCharObjectHashMap<Integer>>(int0, float0, char0);
      TCharObjectHashMap<Object> tCharObjectHashMap1 = new TCharObjectHashMap<Object>();
      tCharObjectHashMap1.size();
      TCharObjectHashMap<Character> tCharObjectHashMap2 = new TCharObjectHashMap<Character>();
      Locale locale0 = Locale.GERMANY;
      String string0 = "";
      // Undeclared exception!
      try {
        locale0.getUnicodeLocaleType(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-2016);
      TCharObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> tCharObjectHashMap0 = new TCharObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>();
      char[] charArray0 = new char[8];
      char char0 = '8';
      charArray0[0] = char0;
      char char1 = '{';
      charArray0[1] = char1;
      char char2 = 'u';
      charArray0[2] = char2;
      char char3 = 'x';
      charArray0[3] = char3;
      char char4 = '@';
      charArray0[4] = char4;
      char char5 = '=';
      charArray0[5] = char5;
      char char6 = 'L';
      charArray0[6] = char6;
      char char7 = '<';
      charArray0[7] = char7;
      tCharObjectHashMap0._set = charArray0;
      assertEquals(23, tCharObjectHashMap0.capacity());
      
      char char8 = '-';
      TCharObjectHashMap<Integer> tCharObjectHashMap1 = new TCharObjectHashMap<Integer>(int0, (float) int0, char8);
      tCharObjectHashMap1.trimToSize();
      String string0 = tCharObjectHashMap1.toString();
      assertNotNull(string0);
      
      tCharObjectHashMap1.size();
      assertEquals("{}", tCharObjectHashMap1.toString());
      assertEquals(3, tCharObjectHashMap1.capacity());
      assertEquals('-', tCharObjectHashMap1.getNoEntryKey());
  }
}
