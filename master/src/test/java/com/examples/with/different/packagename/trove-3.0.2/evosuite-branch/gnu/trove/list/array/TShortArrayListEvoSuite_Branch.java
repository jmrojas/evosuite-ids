/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.list.array;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TShortCollection;
import gnu.trove.function.TShortFunction;
import gnu.trove.impl.sync.TSynchronizedRandomAccessShortList;
import gnu.trove.impl.sync.TSynchronizedShortCollection;
import gnu.trove.impl.sync.TSynchronizedShortList;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessShortList;
import gnu.trove.list.TShortList;
import gnu.trove.list.array.TShortArrayList;
import gnu.trove.procedure.TShortProcedure;
import gnu.trove.set.hash.TShortHashSet;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Random;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortArrayListEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 5 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.getQuick(I)S: root-Branch
   * 2 gnu.trove.list.array.TShortArrayList$1.<init>([SSZ)V: root-Branch
   * 3 gnu.trove.list.array.TShortArrayList.wrap([SS)Lgnu/trove/list/array/TShortArrayList;: root-Branch
   * 4 gnu.trove.list.array.TShortArrayList.<init>([SSZ)V: I7 Branch 2 IFNE L123 - true
   * 5 gnu.trove.list.array.TShortArrayList.<init>([SSZ)V: I18 Branch 3 IFNONNULL L126 - true
   */

  @Test
  public void test0()  throws Throwable  {
      short[] shortArray0 = new short[10];
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0, (short) (-801));
      assertNotNull(tShortArrayList0);
      
      // Undeclared exception!
      try {
        tShortArrayList0.getQuick((int) (short)201);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 201
         //
      }
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.getNoEntryValue()S: root-Branch
   * 2 gnu.trove.list.array.TShortArrayList.<init>()V: root-Branch
   * 3 gnu.trove.list.array.TShortArrayList.<init>(IS)V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      short short0 = tShortArrayList0.getNoEntryValue();
      assertEquals(0, tShortArrayList0.size());
      assertEquals((short)0, short0);
  }

  //Test case number: 2
  /*
   * 4 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.toArray(II)[S: root-Branch
   * 2 gnu.trove.list.array.TShortArrayList.toArray()[S: root-Branch
   * 3 gnu.trove.list.array.TShortArrayList.toArray([SII)[S: I3 Branch 60 IFNE L709 - false
   * 4 gnu.trove.list.array.TShortArrayList.<init>(I)V: root-Branch
   */

//   @Test
//   public void test2()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList(0);
//       TSynchronizedShortList tSynchronizedShortList0 = new TSynchronizedShortList((TShortList) tShortArrayList0);
//       short[] shortArray0 = tSynchronizedShortList0.toArray();
//       assertNotNull(shortArray0);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       assertEquals(0, tSynchronizedShortList0.getNoEntryValue());
//   }

  //Test case number: 3
  /*
   * 5 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.fill(S)V: root-Branch
   * 2 gnu.trove.list.array.TShortArrayList.<init>([S)V: root-Branch
   * 3 gnu.trove.list.array.TShortArrayList.add([S)V: root-Branch
   * 4 gnu.trove.list.array.TShortArrayList.add([SII)V: root-Branch
   * 5 gnu.trove.list.array.TShortArrayList.ensureCapacity(I)V: I6 Branch 4 IF_ICMPLE L184 - true
   */

//   @Test
//   public void test3()  throws Throwable  {
//       short[] shortArray0 = new short[2];
//       TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
//       tShortArrayList0.fill((short)0);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       assertEquals(2, tShortArrayList0.size());
//       assertEquals("{0, 0}", tShortArrayList0.toString());
//   }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.set(I[S)V: root-Branch
   * 2 gnu.trove.list.array.TShortArrayList.set(I[SII)V: I3 Branch 12 IFLT L326 - true
   */

  @Test
  public void test4()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      short[] shortArray0 = new short[10];
      // Undeclared exception!
      try {
        tShortArrayList0.set((int) (short) (-1), shortArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -1
         //
      }
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.clear()V: root-Branch
   * 2 gnu.trove.list.array.TShortArrayList.clear(I)V: root-Branch
   * 3 gnu.trove.list.array.TShortArrayList.wrap([S)Lgnu/trove/list/array/TShortArrayList;: root-Branch
   */

//   @Test
//   public void test5()  throws Throwable  {
//       short[] shortArray0 = new short[2];
//       TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
//       assertNotNull(tShortArrayList0);
//       
//       tShortArrayList0.clear();
//       assertEquals("{}", tShortArrayList0.toString());
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//   }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.reset()V: root-Branch
   */

//   @Test
//   public void test6()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList(0);
//       tShortArrayList0.reset();
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       assertEquals(true, tShortArrayList0.isEmpty());
//   }

  //Test case number: 7
  /*
   * 7 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.binarySearch(S)I: root-Branch
   * 2 gnu.trove.list.array.TShortArrayList.binarySearch(SII)I: I3 Branch 77 IFGE L834 - true
   * 3 gnu.trove.list.array.TShortArrayList.binarySearch(SII)I: I16 Branch 78 IF_ICMPLE L837 - true
   * 4 gnu.trove.list.array.TShortArrayList.binarySearch(SII)I: I38 Branch 79 IF_ICMPGT L844 - true
   * 5 gnu.trove.list.array.TShortArrayList.binarySearch(SII)I: I38 Branch 79 IF_ICMPGT L844 - false
   * 6 gnu.trove.list.array.TShortArrayList.binarySearch(SII)I: I58 Branch 80 IF_ICMPGE L848 - true
   * 7 gnu.trove.list.array.TShortArrayList.binarySearch(SII)I: I70 Branch 81 IF_ICMPLE L851 - false
   */

//   @Test
//   public void test7()  throws Throwable  {
//       short[] shortArray0 = new short[2];
//       TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0, (short) (-838));
//       assertNotNull(tShortArrayList0);
//       
//       int int0 = tShortArrayList0.binarySearch((short) (-838));
//       assertEquals(-838, tShortArrayList0.getNoEntryValue());
//       assertEquals((-1), int0);
//   }

  //Test case number: 8
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.reverse()V: root-Branch
   * 2 gnu.trove.list.array.TShortArrayList.reverse(II)V: I4 Branch 51 IF_ICMPNE L626 - false
   */

//   @Test
//   public void test8()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList();
//       tShortArrayList0.reverse();
//       assertEquals(true, tShortArrayList0.isEmpty());
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//   }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.sort()V: root-Branch
   */

//   @Test
//   public void test9()  throws Throwable  {
//       short[] shortArray0 = new short[2];
//       TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
//       assertNotNull(tShortArrayList0);
//       
//       tShortArrayList0.sort();
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//   }

  //Test case number: 10
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.removeAt(I)S: root-Branch
   * 2 gnu.trove.list.array.TShortArrayList.get(I)S: I5 Branch 9 IF_ICMPLT L280 - false
   */

  @Test
  public void test10()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(0, (short) (-1910));
      // Undeclared exception!
      try {
        tShortArrayList0.removeAt(1557);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1557
         //
      }
  }

  //Test case number: 11
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.indexOf(S)I: root-Branch
   * 2 gnu.trove.list.array.TShortArrayList.indexOf(IS)I: I8 Branch 82 IF_ICMPGE L870 - false
   * 3 gnu.trove.list.array.TShortArrayList.indexOf(IS)I: I16 Branch 83 IF_ICMPNE L871 - false
   */

//   @Test
//   public void test11()  throws Throwable  {
//       short[] shortArray0 = new short[8];
//       TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
//       int int0 = tShortArrayList0.indexOf((short)0);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       assertEquals(0, int0);
//       assertEquals(8, tShortArrayList0.size());
//   }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.sort(II)V: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      // Undeclared exception!
      try {
        tShortArrayList0.sort(673, 1367);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1367
         //
      }
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.setQuick(IS)V: root-Branch
   */

//   @Test
//   public void test13()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList(44);
//       tShortArrayList0.setQuick((int) (short)0, (short)653);
//       assertEquals(0, tShortArrayList0.size());
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       assertEquals("{}", tShortArrayList0.toString());
//   }

  //Test case number: 14
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.swap(II)V: root-Branch
   * 2 gnu.trove.list.array.TShortArrayList.shuffle(Ljava/util/Random;)V: I9 Branch 54 IF_ICMPLE L640 - true
   * 3 gnu.trove.list.array.TShortArrayList.shuffle(Ljava/util/Random;)V: I9 Branch 54 IF_ICMPLE L640 - false
   */

//   @Test
//   public void test14()  throws Throwable  {
//       short[] shortArray0 = new short[2];
//       TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
//       assertNotNull(tShortArrayList0);
//       
//       Random random0 = new Random((-1471L));
//       tShortArrayList0.shuffle(random0);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       assertEquals(0, tShortArrayList0.sum());
//   }

  //Test case number: 15
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.insert(I[S)V: root-Branch
   * 2 gnu.trove.list.array.TShortArrayList.ensureCapacity(I)V: I6 Branch 4 IF_ICMPLE L184 - false
   * 3 gnu.trove.list.array.TShortArrayList.insert(I[SII)V: I5 Branch 8 IF_ICMPNE L264 - false
   */

  @Test
  public void test15()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(0);
      short[] shortArray0 = new short[7];
      tShortArrayList0.insert(0, shortArray0);
      assertEquals(7, tShortArrayList0.size());
      assertEquals("{0, 0, 0, 0, 0, 0, 0}", tShortArrayList0.toString());
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.<init>([SSZ)V: I18 Branch 3 IFNONNULL L126 - false
   */

  @Test
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try {
        TShortArrayList.wrap((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // values can not be null
         //
      }
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList$1.ensureCapacity(I)V: I6 Branch 1 IF_ICMPLE L164 - true
   * 2 gnu.trove.list.array.TShortArrayList.insert(I[SII)V: I5 Branch 8 IF_ICMPNE L264 - true
   */

//   @Test
//   public void test17()  throws Throwable  {
//       short[] shortArray0 = new short[2];
//       TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0, (short) (-838));
//       assertNotNull(tShortArrayList0);
//       
//       tShortArrayList0.insert(0, shortArray0, 0, 0);
//       assertEquals(2, tShortArrayList0.size());
//       assertEquals(-838, tShortArrayList0.getNoEntryValue());
//   }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.isEmpty()Z: I4 Branch 5 IFNE L201 - true
   */

//   @Test
//   public void test18()  throws Throwable  {
//       short[] shortArray0 = new short[4];
//       TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0, (short)0);
//       assertNotNull(tShortArrayList0);
//       
//       boolean boolean0 = tShortArrayList0.isEmpty();
//       assertEquals(false, boolean0);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//   }

  //Test case number: 19
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.isEmpty()Z: I4 Branch 5 IFNE L201 - false
   * 2 gnu.trove.list.array.TShortArrayList.resetQuick()V: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      short[] shortArray0 = new short[2];
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
      assertNotNull(tShortArrayList0);
      
      tShortArrayList0.resetQuick();
      boolean boolean0 = tShortArrayList0.isEmpty();
      assertEquals("{}", tShortArrayList0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 20
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.trimToSize()V: I7 Branch 6 IF_ICMPLE L209 - true
   * 2 gnu.trove.list.array.TShortArrayList.size()I: root-Branch
   */

//   @Test
//   public void test20()  throws Throwable  {
//       short[] shortArray0 = new short[7];
//       TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
//       tShortArrayList0.trimToSize();
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       assertEquals(7, tShortArrayList0.size());
//       assertEquals("{0, 0, 0, 0, 0, 0, 0}", tShortArrayList0.toString());
//   }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.trimToSize()V: I7 Branch 6 IF_ICMPLE L209 - false
   */

//   @Test
//   public void test21()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList();
//       tShortArrayList0.trimToSize();
//       assertEquals(0, tShortArrayList0.size());
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//   }

  //Test case number: 22
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.insert(IS)V: I5 Branch 7 IF_ICMPNE L243 - true
   * 2 gnu.trove.list.array.TShortArrayList$1.ensureCapacity(I)V: I6 Branch 1 IF_ICMPLE L164 - false
   */

  @Test
  public void test22()  throws Throwable  {
      short[] shortArray0 = new short[6];
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
      assertNotNull(tShortArrayList0);
      
      // Undeclared exception!
      try {
        tShortArrayList0.insert((-1519), (short)0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not grow ArrayList wrapped external array
         //
      }
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.set(IS)S: I5 Branch 10 IF_ICMPLT L297 - true
   */

//   @Test
//   public void test23()  throws Throwable  {
//       short[] shortArray0 = new short[2];
//       TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
//       assertNotNull(tShortArrayList0);
//       
//       short short0 = tShortArrayList0.set((int) (short)1, (short)1);
//       assertEquals(1, tShortArrayList0.max());
//       assertEquals((short)0, short0);
//   }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.set(IS)S: I5 Branch 10 IF_ICMPLT L297 - false
   */

  @Test
  public void test24()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      // Undeclared exception!
      try {
        tShortArrayList0.set(205759, (short)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 205759
         //
      }
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.replace(IS)S: I5 Branch 11 IF_ICMPLT L309 - true
   */

  @Test
  public void test25()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList((int) (short)0, (short)23210);
      // Undeclared exception!
      try {
        tShortArrayList0.replace((int) (short) (-421), (short)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -421
         //
      }
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.replace(IS)S: I5 Branch 11 IF_ICMPLT L309 - false
   */

  @Test
  public void test26()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      // Undeclared exception!
      try {
        tShortArrayList0.replace(0, (short) (-530));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
      }
  }

  //Test case number: 27
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.set(I[SII)V: I3 Branch 12 IFLT L326 - false
   * 2 gnu.trove.list.array.TShortArrayList.set(I[SII)V: I9 Branch 13 IF_ICMPLE L326 - false
   */

  @Test
  public void test27()  throws Throwable  {
      short[] shortArray0 = new short[4];
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
      assertNotNull(tShortArrayList0);
      
      // Undeclared exception!
      try {
        tShortArrayList0.set(759, shortArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 759
         //
      }
  }

  //Test case number: 28
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.set(I[SII)V: I9 Branch 13 IF_ICMPLE L326 - true
   * 2 gnu.trove.list.array.TShortArrayList.set(I[S)V: root-Branch
   * 3 gnu.trove.list.array.TShortArrayList.set(I[SII)V: I3 Branch 12 IFLT L326 - false
   */

//   @Test
//   public void test28()  throws Throwable  {
//       short[] shortArray0 = new short[2];
//       TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0, (short) (-838));
//       assertNotNull(tShortArrayList0);
//       
//       tShortArrayList0.set(0, shortArray0);
//       assertEquals(-838, tShortArrayList0.getNoEntryValue());
//   }

  //Test case number: 29
  /*
   * 16 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.remove(S)Z: I8 Branch 14 IF_ICMPGE L383 - true
   * 2 gnu.trove.list.array.TShortArrayList.remove(S)Z: I8 Branch 14 IF_ICMPGE L383 - false
   * 3 gnu.trove.list.array.TShortArrayList.remove(S)Z: I16 Branch 15 IF_ICMPNE L384 - false
   * 4 gnu.trove.list.array.TShortArrayList.remove(II)V: I3 Branch 16 IFNE L403 - true
   * 5 gnu.trove.list.array.TShortArrayList.remove(II)V: I8 Branch 17 IFLT L404 - false
   * 6 gnu.trove.list.array.TShortArrayList.remove(II)V: I12 Branch 18 IF_ICMPLT L404 - true
   * 7 gnu.trove.list.array.TShortArrayList.remove(II)V: I23 Branch 19 IFNE L408 - false
   * 8 gnu.trove.list.array.TShortArrayList.removeAll([S)Z: I12 Branch 48 IFLE L601 - true
   * 9 gnu.trove.list.array.TShortArrayList.removeAll([S)Z: I12 Branch 48 IFLE L601 - false
   * 10 gnu.trove.list.array.TShortArrayList.removeAll([S)Z: I20 Branch 49 IFEQ L602 - true
   * 11 gnu.trove.list.array.TShortArrayList.removeAll([S)Z: I20 Branch 49 IFEQ L602 - false
   * 12 gnu.trove.list.array.TShortArrayList.<init>(Lgnu/trove/TShortCollection;)V: root-Branch
   * 13 gnu.trove.list.array.TShortArrayList.add(S)Z: root-Branch
   * 14 gnu.trove.list.array.TShortArrayList.addAll(Lgnu/trove/TShortCollection;)Z: I13 Branch 31 IFEQ L495 - true
   * 15 gnu.trove.list.array.TShortArrayList.addAll(Lgnu/trove/TShortCollection;)Z: I13 Branch 31 IFEQ L495 - false
   * 16 gnu.trove.list.array.TShortArrayList.addAll(Lgnu/trove/TShortCollection;)Z: I24 Branch 32 IFEQ L497 - false
   */

  @Test
  public void test29()  throws Throwable  {
      short[] shortArray0 = new short[2];
      TShortHashSet tShortHashSet0 = new TShortHashSet(shortArray0);
      TShortArrayList tShortArrayList0 = new TShortArrayList((TShortCollection) tShortHashSet0);
      boolean boolean0 = tShortArrayList0.removeAll(tShortHashSet0._set);
      assertEquals(true, boolean0);
      assertEquals("{}", tShortArrayList0.toString());
  }

  //Test case number: 30
  /*
   * 5 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.remove(S)Z: I16 Branch 15 IF_ICMPNE L384 - true
   * 2 gnu.trove.list.array.TShortArrayList.removeAll(Lgnu/trove/TShortCollection;)Z: I4 Branch 45 IF_ACMPNE L582 - true
   * 3 gnu.trove.list.array.TShortArrayList.removeAll(Lgnu/trove/TShortCollection;)Z: I26 Branch 46 IFEQ L588 - true
   * 4 gnu.trove.list.array.TShortArrayList.removeAll(Lgnu/trove/TShortCollection;)Z: I26 Branch 46 IFEQ L588 - false
   * 5 gnu.trove.list.array.TShortArrayList.removeAll(Lgnu/trove/TShortCollection;)Z: I37 Branch 47 IFEQ L590 - true
   */

//   @Test
//   public void test30()  throws Throwable  {
//       short[] shortArray0 = new short[1];
//       short[] shortArray1 = new short[2];
//       TShortHashSet tShortHashSet0 = new TShortHashSet(shortArray1);
//       shortArray0[0] = (short) (-1);
//       TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
//       assertNotNull(tShortArrayList0);
//       
//       boolean boolean0 = tShortArrayList0.removeAll((TShortCollection) tShortHashSet0);
//       assertEquals(false, boolean0);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//   }

  //Test case number: 31
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.remove(II)V: I3 Branch 16 IFNE L403 - false
   */

//   @Test
//   public void test31()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList((int) (short)10, (short)0);
//       tShortArrayList0.remove((int) (short)0, (int) (short)0);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       assertEquals(0, tShortArrayList0.size());
//       assertEquals(true, tShortArrayList0.isEmpty());
//   }

  //Test case number: 32
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.remove(II)V: I8 Branch 17 IFLT L404 - true
   */

  @Test
  public void test32()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(626);
      // Undeclared exception!
      try {
        tShortArrayList0.remove((-1037), 1882);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -1037
         //
      }
  }

  //Test case number: 33
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.remove(II)V: I12 Branch 18 IF_ICMPLT L404 - false
   * 2 gnu.trove.list.array.TShortArrayList.resetQuick()V: root-Branch
   */

  @Test
  public void test33()  throws Throwable  {
      short[] shortArray0 = new short[2];
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
      assertNotNull(tShortArrayList0);
      
      tShortArrayList0.resetQuick();
      // Undeclared exception!
      try {
        tShortArrayList0.remove((int) (short)1, (-1200));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1
         //
      }
  }

  //Test case number: 34
  /*
   * 12 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.remove(II)V: I45 Branch 20 IF_ICMPNE L412 - false
   * 2 gnu.trove.list.array.TShortArrayList.remove(II)V: I23 Branch 19 IFNE L408 - true
   * 3 gnu.trove.list.array.TShortArrayList.remove(II)V: I45 Branch 20 IF_ICMPNE L412 - true
   * 4 gnu.trove.list.array.TShortArrayList.remove(S)Z: I16 Branch 15 IF_ICMPNE L384 - true
   * 5 gnu.trove.list.array.TShortArrayList.removeAll(Lgnu/trove/TShortCollection;)Z: I4 Branch 45 IF_ACMPNE L582 - true
   * 6 gnu.trove.list.array.TShortArrayList$TShortArrayIterator.<init>(Lgnu/trove/list/array/TShortArrayList;I)V: root-Branch
   * 7 gnu.trove.list.array.TShortArrayList$TShortArrayIterator.next()S: root-Branch
   * 8 gnu.trove.list.array.TShortArrayList$TShortArrayIterator.hasNext()Z: I7 Branch 102 IF_ICMPGE L1005 - true
   * 9 gnu.trove.list.array.TShortArrayList$TShortArrayIterator.hasNext()Z: I7 Branch 102 IF_ICMPGE L1005 - false
   * 10 gnu.trove.list.array.TShortArrayList.iterator()Lgnu/trove/iterator/TShortIterator;: root-Branch
   * 11 gnu.trove.list.array.TShortArrayList.get(I)S: I5 Branch 9 IF_ICMPLT L280 - true
   * 12 gnu.trove.list.array.TShortArrayList.removeAll(Lgnu/trove/TShortCollection;)Z: I37 Branch 47 IFEQ L590 - false
   */

  @Test
  public void test34()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)752;
      shortArray0[3] = (short) (-24519);
      TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
      TSynchronizedShortCollection tSynchronizedShortCollection0 = new TSynchronizedShortCollection((TShortCollection) tShortArrayList0);
      boolean boolean0 = tShortArrayList0.removeAll((TShortCollection) tSynchronizedShortCollection0);
      assertEquals(2, tShortArrayList0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.containsAll(Ljava/util/Collection;)Z: I8 Branch 21 IFEQ L436 - true
   */

//   @Test
//   public void test35()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList();
//       LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//       boolean boolean0 = tShortArrayList0.containsAll((Collection<?>) linkedList0);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       assertEquals(0, tShortArrayList0.size());
//       assertEquals(true, boolean0);
//   }

  //Test case number: 36
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.containsAll(Ljava/util/Collection;)Z: I8 Branch 21 IFEQ L436 - false
   * 2 gnu.trove.list.array.TShortArrayList.containsAll(Ljava/util/Collection;)Z: I16 Branch 22 IFEQ L437 - true
   */

  @Test
  public void test36()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      LinkedList<TShortArrayList> linkedList0 = new LinkedList<TShortArrayList>();
      linkedList0.add(tShortArrayList0);
      boolean boolean0 = tShortArrayList0.containsAll((Collection<?>) linkedList0);
      assertEquals("[{}]", linkedList0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 37
  /*
   * 6 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.containsAll(Ljava/util/Collection;)Z: I16 Branch 22 IFEQ L437 - false
   * 2 gnu.trove.list.array.TShortArrayList.containsAll(Ljava/util/Collection;)Z: I28 Branch 23 IFNE L439 - false
   * 3 gnu.trove.list.array.TShortArrayList.lastIndexOf(IS)I: I7 Branch 84 IFLE L887 - true
   * 4 gnu.trove.list.array.TShortArrayList.contains(S)Z: I5 Branch 86 IFLT L898 - true
   * 5 gnu.trove.list.array.TShortArrayList.containsAll(Ljava/util/Collection;)Z: I8 Branch 21 IFEQ L436 - false
   * 6 gnu.trove.list.array.TShortArrayList.lastIndexOf(S)I: root-Branch
   */

//   @Test
//   public void test37()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList(0);
//       LinkedList<Short> linkedList0 = new LinkedList<Short>();
//       Short short0 = new Short((short)0);
//       linkedList0.add(short0);
//       boolean boolean0 = tShortArrayList0.containsAll((Collection<?>) linkedList0);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       assertEquals(0, tShortArrayList0.size());
//       assertEquals(false, boolean0);
//   }

  //Test case number: 38
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.containsAll(Lgnu/trove/TShortCollection;)Z: I4 Branch 24 IF_ACMPNE L453 - true
   * 2 gnu.trove.list.array.TShortArrayList.containsAll(Lgnu/trove/TShortCollection;)Z: I18 Branch 25 IFEQ L457 - false
   * 3 gnu.trove.list.array.TShortArrayList.containsAll(Lgnu/trove/TShortCollection;)Z: I29 Branch 26 IFNE L459 - false
   */

//   @Test
//   public void test38()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList(44);
//       short[] shortArray0 = new short[10];
//       TShortArrayList tShortArrayList1 = TShortArrayList.wrap(shortArray0, (short)0);
//       assertNotNull(tShortArrayList1);
//       
//       boolean boolean0 = tShortArrayList0.containsAll((TShortCollection) tShortArrayList1);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       assertEquals(0, tShortArrayList0.size());
//       assertEquals(0, tShortArrayList1.getNoEntryValue());
//       assertEquals(false, boolean0);
//   }

  //Test case number: 39
  /*
   * 10 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.containsAll(Lgnu/trove/TShortCollection;)Z: I18 Branch 25 IFEQ L457 - true
   * 2 gnu.trove.list.array.TShortArrayList.containsAll(Lgnu/trove/TShortCollection;)Z: I29 Branch 26 IFNE L459 - true
   * 3 gnu.trove.list.array.TShortArrayList.addAll([S)Z: I18 Branch 33 IF_ICMPGE L508 - true
   * 4 gnu.trove.list.array.TShortArrayList.addAll([S)Z: I18 Branch 33 IF_ICMPGE L508 - false
   * 5 gnu.trove.list.array.TShortArrayList.addAll([S)Z: I28 Branch 34 IFEQ L509 - false
   * 6 gnu.trove.list.array.TShortArrayList.containsAll(Lgnu/trove/TShortCollection;)Z: I4 Branch 24 IF_ACMPNE L453 - false
   * 7 gnu.trove.list.array.TShortArrayList.containsAll(Lgnu/trove/TShortCollection;)Z: I18 Branch 25 IFEQ L457 - false
   * 8 gnu.trove.list.array.TShortArrayList.lastIndexOf(IS)I: I7 Branch 84 IFLE L887 - false
   * 9 gnu.trove.list.array.TShortArrayList.lastIndexOf(IS)I: I15 Branch 85 IF_ICMPNE L888 - false
   * 10 gnu.trove.list.array.TShortArrayList.contains(S)Z: I5 Branch 86 IFLT L898 - false
   */

  @Test
  public void test39()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      short[] shortArray0 = new short[2];
      TShortArrayList tShortArrayList1 = TShortArrayList.wrap(shortArray0);
      tShortArrayList0.addAll(shortArray0);
      boolean boolean0 = tShortArrayList0.containsAll((TShortCollection) tShortArrayList1);
      assertEquals(2, tShortArrayList0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 40
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.containsAll([S)Z: I8 Branch 27 IFLE L469 - true
   * 2 gnu.trove.list.array.TShortArrayList.containsAll([S)Z: I8 Branch 27 IFLE L469 - false
   * 3 gnu.trove.list.array.TShortArrayList.containsAll([S)Z: I16 Branch 28 IFNE L470 - true
   */

//   @Test
//   public void test40()  throws Throwable  {
//       short[] shortArray0 = new short[1];
//       short[] shortArray1 = new short[2];
//       TShortHashSet tShortHashSet0 = new TShortHashSet(shortArray1);
//       TShortArrayList tShortArrayList0 = new TShortArrayList((TShortCollection) tShortHashSet0);
//       boolean boolean0 = tShortArrayList0.containsAll(shortArray0);
//       assertEquals(true, boolean0);
//       assertEquals(1, tShortArrayList0.size());
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//   }

  //Test case number: 41
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.containsAll([S)Z: I16 Branch 28 IFNE L470 - false
   * 2 gnu.trove.list.array.TShortArrayList.containsAll([S)Z: I8 Branch 27 IFLE L469 - false
   */

//   @Test
//   public void test41()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList((int) (short)10, (short)0);
//       short[] shortArray0 = new short[6];
//       boolean boolean0 = tShortArrayList0.containsAll(shortArray0);
//       assertEquals(false, boolean0);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//   }

  //Test case number: 42
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.retainAll(Lgnu/trove/TShortCollection;)Z: I4 Branch 37 IF_ACMPNE L534 - false
   */

//   @Test
//   public void test42()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList(100, (short) (-1709));
//       boolean boolean0 = tShortArrayList0.retainAll((TShortCollection) tShortArrayList0);
//       assertEquals(false, boolean0);
//       assertEquals(-1709, tShortArrayList0.getNoEntryValue());
//       assertEquals(0, tShortArrayList0.size());
//   }

  //Test case number: 43
  /*
   * 12 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.retainAll(Lgnu/trove/TShortCollection;)Z: I29 Branch 39 IFNE L540 - false
   * 2 gnu.trove.list.array.TShortArrayList.subList(II)Lgnu/trove/list/TShortList;: I4 Branch 55 IF_ICMPGE L663 - true
   * 3 gnu.trove.list.array.TShortArrayList.subList(II)Lgnu/trove/list/TShortList;: I26 Branch 56 IFGE L667 - true
   * 4 gnu.trove.list.array.TShortArrayList.subList(II)Lgnu/trove/list/TShortList;: I40 Branch 57 IF_ICMPLE L670 - true
   * 5 gnu.trove.list.array.TShortArrayList.subList(II)Lgnu/trove/list/TShortList;: I73 Branch 58 IF_ICMPGE L674 - true
   * 6 gnu.trove.list.array.TShortArrayList.lastIndexOf(IS)I: I7 Branch 84 IFLE L887 - true
   * 7 gnu.trove.list.array.TShortArrayList.contains(S)Z: I5 Branch 86 IFLT L898 - true
   * 8 gnu.trove.list.array.TShortArrayList$TShortArrayIterator.remove()V: I5 Branch 103 IF_ICMPNE L1023 - true
   * 9 gnu.trove.list.array.TShortArrayList$TShortArrayIterator.remove()V: I26 Branch 104 IF_ICMPGE L1028 - false
   * 10 gnu.trove.list.array.TShortArrayList.retainAll(Lgnu/trove/TShortCollection;)Z: I4 Branch 37 IF_ACMPNE L534 - true
   * 11 gnu.trove.list.array.TShortArrayList.retainAll(Lgnu/trove/TShortCollection;)Z: I22 Branch 38 IFEQ L539 - true
   * 12 gnu.trove.list.array.TShortArrayList.retainAll(Lgnu/trove/TShortCollection;)Z: I22 Branch 38 IFEQ L539 - false
   */

  @Test
  public void test43()  throws Throwable  {
      short[] shortArray0 = new short[6];
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0, (short)0);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList1 = (TSynchronizedRandomAccessShortList)tSynchronizedRandomAccessShortList0.subList(0, 0);
      boolean boolean0 = tShortArrayList0.retainAll((TShortCollection) tSynchronizedRandomAccessShortList1);
      assertEquals(true, tSynchronizedRandomAccessShortList0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 44
  /*
   * 4 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.retainAll([S)Z: I29 Branch 41 IFGE L556 - false
   * 2 gnu.trove.list.array.TShortArrayList.retainAll([S)Z: I21 Branch 40 IFLE L555 - true
   * 3 gnu.trove.list.array.TShortArrayList.retainAll([S)Z: I21 Branch 40 IFLE L555 - false
   * 4 gnu.trove.list.array.TShortArrayList.retainAll([S)Z: I29 Branch 41 IFGE L556 - true
   */

  @Test
  public void test44()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)258;
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
      assertNotNull(tShortArrayList0);
      
      short[] shortArray1 = new short[6];
      boolean boolean0 = tShortArrayList0.retainAll(shortArray1);
      assertEquals("{0, 0, 0, 0, 0}", tShortArrayList0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 45
  /*
   * 5 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.removeAll(Ljava/util/Collection;)Z: I12 Branch 42 IFEQ L568 - false
   * 2 gnu.trove.list.array.TShortArrayList.removeAll(Ljava/util/Collection;)Z: I20 Branch 43 IFEQ L569 - false
   * 3 gnu.trove.list.array.TShortArrayList.removeAll(Ljava/util/Collection;)Z: I32 Branch 44 IFEQ L571 - true
   * 4 gnu.trove.list.array.TShortArrayList.remove(S)Z: I8 Branch 14 IF_ICMPGE L383 - true
   * 5 gnu.trove.list.array.TShortArrayList.removeAll(Ljava/util/Collection;)Z: I12 Branch 42 IFEQ L568 - true
   */

//   @Test
//   public void test45()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList(0);
//       LinkedList<Short> linkedList0 = new LinkedList<Short>();
//       Short short0 = new Short((short)0);
//       linkedList0.add(short0);
//       boolean boolean0 = tShortArrayList0.removeAll((Collection<?>) linkedList0);
//       assertEquals(false, boolean0);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       assertEquals(0, tShortArrayList0.size());
//   }

  //Test case number: 46
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.removeAll(Ljava/util/Collection;)Z: I20 Branch 43 IFEQ L569 - true
   */

  @Test
  public void test46()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      LinkedList<TShortArrayList> linkedList0 = new LinkedList<TShortArrayList>();
      linkedList0.add(tShortArrayList0);
      boolean boolean0 = tShortArrayList0.removeAll((Collection<?>) linkedList0);
      assertEquals("[{}]", linkedList0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 47
  /*
   * 7 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.removeAll(Ljava/util/Collection;)Z: I32 Branch 44 IFEQ L571 - false
   * 2 gnu.trove.list.array.TShortArrayList.removeAll(Ljava/util/Collection;)Z: I12 Branch 42 IFEQ L568 - true
   * 3 gnu.trove.list.array.TShortArrayList.removeAll(Ljava/util/Collection;)Z: I12 Branch 42 IFEQ L568 - false
   * 4 gnu.trove.list.array.TShortArrayList.removeAll(Ljava/util/Collection;)Z: I20 Branch 43 IFEQ L569 - false
   * 5 gnu.trove.list.array.TShortArrayList.addAll(Ljava/util/Collection;)Z: I12 Branch 29 IFEQ L481 - true
   * 6 gnu.trove.list.array.TShortArrayList.addAll(Ljava/util/Collection;)Z: I12 Branch 29 IFEQ L481 - false
   * 7 gnu.trove.list.array.TShortArrayList.addAll(Ljava/util/Collection;)Z: I27 Branch 30 IFEQ L483 - false
   */

  @Test
  public void test47()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)0);
      linkedList0.add(short0);
      tShortArrayList0.addAll((Collection<? extends Short>) linkedList0);
      assertEquals(1, tShortArrayList0.size());
      
      boolean boolean0 = tShortArrayList0.removeAll((Collection<?>) linkedList0);
      assertEquals(true, boolean0);
  }

  //Test case number: 48
  /*
   * 6 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.removeAll(Lgnu/trove/TShortCollection;)Z: I4 Branch 45 IF_ACMPNE L582 - false
   * 2 gnu.trove.list.array.TShortArrayList.remove(S)Z: I8 Branch 14 IF_ICMPGE L383 - false
   * 3 gnu.trove.list.array.TShortArrayList.remove(S)Z: I16 Branch 15 IF_ICMPNE L384 - false
   * 4 gnu.trove.list.array.TShortArrayList.removeAll(Lgnu/trove/TShortCollection;)Z: I26 Branch 46 IFEQ L588 - true
   * 5 gnu.trove.list.array.TShortArrayList.removeAll(Lgnu/trove/TShortCollection;)Z: I26 Branch 46 IFEQ L588 - false
   * 6 gnu.trove.list.array.TShortArrayList.removeAll(Lgnu/trove/TShortCollection;)Z: I37 Branch 47 IFEQ L590 - false
   */

  @Test
  public void test48()  throws Throwable  {
      short[] shortArray0 = new short[8];
      TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortArrayList0);
      boolean boolean0 = tShortArrayList0.removeAll((TShortCollection) tUnmodifiableRandomAccessShortList0);
      assertEquals(4, tUnmodifiableRandomAccessShortList0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 49
  /*
   * 10 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.transformValues(Lgnu/trove/function/TShortFunction;)V: I8 Branch 50 IFLE L612 - true
   * 2 gnu.trove.list.array.TShortArrayList$TShortArrayIterator.remove()V: I5 Branch 103 IF_ICMPNE L1023 - true
   * 3 gnu.trove.list.array.TShortArrayList$TShortArrayIterator.remove()V: I26 Branch 104 IF_ICMPGE L1028 - false
   * 4 gnu.trove.list.array.TShortArrayList.retainAll(Ljava/util/Collection;)Z: I13 Branch 35 IFEQ L522 - true
   * 5 gnu.trove.list.array.TShortArrayList.retainAll(Ljava/util/Collection;)Z: I13 Branch 35 IFEQ L522 - false
   * 6 gnu.trove.list.array.TShortArrayList.retainAll(Ljava/util/Collection;)Z: I21 Branch 36 IFGT L523 - false
   * 7 gnu.trove.list.array.TShortArrayList.remove(II)V: I3 Branch 16 IFNE L403 - true
   * 8 gnu.trove.list.array.TShortArrayList.remove(II)V: I8 Branch 17 IFLT L404 - false
   * 9 gnu.trove.list.array.TShortArrayList.remove(II)V: I12 Branch 18 IF_ICMPLT L404 - true
   * 10 gnu.trove.list.array.TShortArrayList.remove(II)V: I23 Branch 19 IFNE L408 - false
   */

  @Test
  public void test49()  throws Throwable  {
      short[] shortArray0 = new short[10];
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0, (short)0);
      assertNotNull(tShortArrayList0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      tShortArrayList0.retainAll((Collection<?>) linkedList0);
      tShortArrayList0.transformValues((TShortFunction) null);
      assertEquals("{}", tShortArrayList0.toString());
      assertEquals(true, tShortArrayList0.isEmpty());
  }

  //Test case number: 50
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.transformValues(Lgnu/trove/function/TShortFunction;)V: I8 Branch 50 IFLE L612 - false
   * 2 gnu.trove.list.array.TShortArrayList.insert(IS)V: I5 Branch 7 IF_ICMPNE L243 - false
   */

  @Test
  public void test50()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      tShortArrayList0.insert(0, (short) (-988));
      // Undeclared exception!
      try {
        tShortArrayList0.transformValues((TShortFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 51
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.reverse(II)V: I4 Branch 51 IF_ICMPNE L626 - true
   * 2 gnu.trove.list.array.TShortArrayList.reverse(II)V: I12 Branch 52 IF_ICMPLE L629 - false
   */

  @Test
  public void test51()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(661);
      // Undeclared exception!
      try {
        tShortArrayList0.reverse(1, (int) (short)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // from cannot be greater than to
         //
      }
  }

  //Test case number: 52
  /*
   * 6 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.reverse(II)V: I12 Branch 52 IF_ICMPLE L629 - true
   * 2 gnu.trove.list.array.TShortArrayList.reverse(II)V: I32 Branch 53 IF_ICMPGE L632 - true
   * 3 gnu.trove.list.array.TShortArrayList.reverse(II)V: I32 Branch 53 IF_ICMPGE L632 - false
   * 4 gnu.trove.list.array.TShortArrayList.reverse()V: root-Branch
   * 5 gnu.trove.list.array.TShortArrayList.swap(II)V: root-Branch
   * 6 gnu.trove.list.array.TShortArrayList.reverse(II)V: I4 Branch 51 IF_ICMPNE L626 - true
   */

//   @Test
//   public void test52()  throws Throwable  {
//       short[] shortArray0 = new short[2];
//       TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
//       assertNotNull(tShortArrayList0);
//       
//       tShortArrayList0.reverse();
//       assertEquals("{0, 0}", tShortArrayList0.toString());
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//   }

  //Test case number: 53
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.subList(II)Lgnu/trove/list/TShortList;: I4 Branch 55 IF_ICMPGE L663 - false
   */

  @Test
  public void test53()  throws Throwable  {
      short[] shortArray0 = new short[6];
      TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0, (Object) "^ (FR!P{BI%,^)");
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessShortList0.subList((int) (short)243, (int) (short)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // end index 0 greater than begin index 243
         //
      }
  }

  //Test case number: 54
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.subList(II)Lgnu/trove/list/TShortList;: I26 Branch 56 IFGE L667 - false
   */

  @Test
  public void test54()  throws Throwable  {
      short[] shortArray0 = new short[4];
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0, (short)88);
      assertNotNull(tShortArrayList0);
      
      // Undeclared exception!
      try {
        tShortArrayList0.subList((-1910), 620171);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // begin index can not be < 0
         //
      }
  }

  //Test case number: 55
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.subList(II)Lgnu/trove/list/TShortList;: I40 Branch 57 IF_ICMPLE L670 - false
   */

  @Test
  public void test55()  throws Throwable  {
      short[] shortArray0 = new short[6];
      TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
      // Undeclared exception!
      try {
        tShortArrayList0.subList((int) (short)1001, 2021);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // end index < 6
         //
      }
  }

  //Test case number: 56
  /*
   * 5 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.subList(II)Lgnu/trove/list/TShortList;: I73 Branch 58 IF_ICMPGE L674 - false
   * 2 gnu.trove.list.array.TShortArrayList.subList(II)Lgnu/trove/list/TShortList;: I4 Branch 55 IF_ICMPGE L663 - true
   * 3 gnu.trove.list.array.TShortArrayList.subList(II)Lgnu/trove/list/TShortList;: I26 Branch 56 IFGE L667 - true
   * 4 gnu.trove.list.array.TShortArrayList.subList(II)Lgnu/trove/list/TShortList;: I40 Branch 57 IF_ICMPLE L670 - true
   * 5 gnu.trove.list.array.TShortArrayList.subList(II)Lgnu/trove/list/TShortList;: I73 Branch 58 IF_ICMPGE L674 - true
   */

//   @Test
//   public void test56()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList(903);
//       TShortArrayList tShortArrayList1 = (TShortArrayList)tShortArrayList0.subList(0, (int) (short)173);
//       assertNotNull(tShortArrayList1);
//       assertEquals(0, tShortArrayList1.getNoEntryValue());
//       assertEquals("{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}", tShortArrayList1.toString());
//   }

  //Test case number: 57
  /*
   * 4 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.toArray([S)[S: I11 Branch 59 IF_ICMPLE L698 - true
   * 2 gnu.trove.list.array.TShortArrayList.toArray([SII)[S: I3 Branch 60 IFNE L709 - true
   * 3 gnu.trove.list.array.TShortArrayList.toArray([SII)[S: I11 Branch 61 IFLT L712 - false
   * 4 gnu.trove.list.array.TShortArrayList.toArray([SII)[S: I15 Branch 62 IF_ICMPLT L712 - true
   */

//   @Test
//   public void test57()  throws Throwable  {
//       short[] shortArray0 = new short[2];
//       TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
//       assertNotNull(tShortArrayList0);
//       
//       short[] shortArray1 = tShortArrayList0.toArray(shortArray0);
//       assertNotNull(shortArray1);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//   }

  //Test case number: 58
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.toArray([SII)[S: I11 Branch 61 IFLT L712 - true
   */

  @Test
  public void test58()  throws Throwable  {
      short[] shortArray0 = new short[1];
      TShortArrayList tShortArrayList0 = new TShortArrayList(1615);
      // Undeclared exception!
      try {
        tShortArrayList0.toArray(shortArray0, (-1954), (-1954));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -1954
         //
      }
  }

  //Test case number: 59
  /*
   * 4 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.toArray([SII)[S: I15 Branch 62 IF_ICMPLT L712 - false
   * 2 gnu.trove.list.array.TShortArrayList.toArray(II)[S: root-Branch
   * 3 gnu.trove.list.array.TShortArrayList.toArray([SII)[S: I3 Branch 60 IFNE L709 - true
   * 4 gnu.trove.list.array.TShortArrayList.toArray([SII)[S: I11 Branch 61 IFLT L712 - false
   */

  @Test
  public void test59()  throws Throwable  {
      short[] shortArray0 = new short[3];
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0, (short)1227);
      assertNotNull(tShortArrayList0);
      
      // Undeclared exception!
      try {
        tShortArrayList0.toArray(7830701, (int) (short)1227);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 7830701
         //
      }
  }

  //Test case number: 60
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.toArray([SIII)[S: I3 Branch 63 IFNE L722 - true
   * 2 gnu.trove.list.array.TShortArrayList.toArray([SIII)[S: I11 Branch 64 IFLT L725 - false
   * 3 gnu.trove.list.array.TShortArrayList.toArray([SIII)[S: I15 Branch 65 IF_ICMPLT L725 - false
   */

  @Test
  public void test60()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      short[] shortArray0 = new short[4];
      // Undeclared exception!
      try {
        tShortArrayList0.toArray(shortArray0, (int) (short)0, (int) (short)0, (-1996));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
      }
  }

  //Test case number: 61
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.toArray([SIII)[S: I3 Branch 63 IFNE L722 - false
   */

//   @Test
//   public void test61()  throws Throwable  {
//       short[] shortArray0 = new short[7];
//       TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
//       short[] shortArray1 = tShortArrayList0.toArray(shortArray0, (int) (short) (-1381), (int) (short) (-1479), 0);
//       assertNotNull(shortArray1);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       assertEquals(7, tShortArrayList0.size());
//       assertEquals("{0, 0, 0, 0, 0, 0, 0}", tShortArrayList0.toString());
//   }

  //Test case number: 62
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.toArray([SIII)[S: I11 Branch 64 IFLT L725 - true
   */

  @Test
  public void test62()  throws Throwable  {
      short[] shortArray0 = new short[8];
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
      assertNotNull(tShortArrayList0);
      
      // Undeclared exception!
      try {
        tShortArrayList0.toArray(shortArray0, (-87), 750, (int) (short)655);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -87
         //
      }
  }

  //Test case number: 63
  /*
   * 5 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.toArray([SIII)[S: I15 Branch 65 IF_ICMPLT L725 - true
   * 2 gnu.trove.list.array.TShortArrayList.toArray([S)[S: I11 Branch 59 IF_ICMPLE L698 - false
   * 3 gnu.trove.list.array.TShortArrayList.toArray([SII)[S: I3 Branch 60 IFNE L709 - false
   * 4 gnu.trove.list.array.TShortArrayList.toArray([SIII)[S: I3 Branch 63 IFNE L722 - true
   * 5 gnu.trove.list.array.TShortArrayList.toArray([SIII)[S: I11 Branch 64 IFLT L725 - false
   */

  @Test
  public void test63()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      short[] shortArray0 = new short[4];
      short[] shortArray1 = tShortArrayList0.toArray(shortArray0);
      tShortArrayList0.add(shortArray0);
      // Undeclared exception!
      try {
        tShortArrayList0.toArray(shortArray1, (int) (short)0, (int) (short)0, (-1996));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 64
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.equals(Ljava/lang/Object;)Z: I4 Branch 66 IF_ACMPNE L738 - true
   * 2 gnu.trove.list.array.TShortArrayList.equals(Ljava/lang/Object;)Z: I13 Branch 67 IFEQ L741 - false
   * 3 gnu.trove.list.array.TShortArrayList.equals(Ljava/lang/Object;)Z: I25 Branch 68 IF_ICMPEQ L743 - false
   */

//   @Test
//   public void test64()  throws Throwable  {
//       short[] shortArray0 = new short[3];
//       TShortArrayList tShortArrayList0 = new TShortArrayList((int) (short)10, (short)0);
//       TShortArrayList tShortArrayList1 = new TShortArrayList(shortArray0);
//       boolean boolean0 = tShortArrayList0.equals((Object) tShortArrayList1);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       assertFalse(tShortArrayList1.equals(tShortArrayList0));
//       assertEquals(3, tShortArrayList1.size());
//       assertEquals(false, boolean0);
//   }

  //Test case number: 65
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.equals(Ljava/lang/Object;)Z: I13 Branch 67 IFEQ L741 - true
   * 2 gnu.trove.list.array.TShortArrayList.equals(Ljava/lang/Object;)Z: I4 Branch 66 IF_ACMPNE L738 - true
   */

//   @Test
//   public void test65()  throws Throwable  {
//       short[] shortArray0 = new short[6];
//       TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
//       boolean boolean0 = tShortArrayList0.equals((Object) "{0, 0, 1001, 0, 1425, 1425}");
//       assertEquals(6, tShortArrayList0.size());
//       assertEquals(false, boolean0);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//   }

  //Test case number: 66
  /*
   * 11 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.equals(Ljava/lang/Object;)Z: I25 Branch 68 IF_ICMPEQ L743 - true
   * 2 gnu.trove.list.array.TShortArrayList.equals(Ljava/lang/Object;)Z: I36 Branch 69 IFLE L745 - true
   * 3 gnu.trove.list.array.TShortArrayList.equals(Ljava/lang/Object;)Z: I36 Branch 69 IFLE L745 - false
   * 4 gnu.trove.list.array.TShortArrayList.equals(Ljava/lang/Object;)Z: I47 Branch 70 IF_ICMPEQ L746 - true
   * 5 gnu.trove.list.array.TShortArrayList.<init>(Lgnu/trove/TShortCollection;)V: root-Branch
   * 6 gnu.trove.list.array.TShortArrayList.add(S)Z: root-Branch
   * 7 gnu.trove.list.array.TShortArrayList.equals(Ljava/lang/Object;)Z: I4 Branch 66 IF_ACMPNE L738 - false
   * 8 gnu.trove.list.array.TShortArrayList.equals(Ljava/lang/Object;)Z: I13 Branch 67 IFEQ L741 - false
   * 9 gnu.trove.list.array.TShortArrayList.addAll(Lgnu/trove/TShortCollection;)Z: I13 Branch 31 IFEQ L495 - true
   * 10 gnu.trove.list.array.TShortArrayList.addAll(Lgnu/trove/TShortCollection;)Z: I13 Branch 31 IFEQ L495 - false
   * 11 gnu.trove.list.array.TShortArrayList.addAll(Lgnu/trove/TShortCollection;)Z: I24 Branch 32 IFEQ L497 - false
   */

//   @Test
//   public void test66()  throws Throwable  {
//       short[] shortArray0 = new short[3];
//       TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
//       TShortArrayList tShortArrayList1 = new TShortArrayList((TShortCollection) tShortArrayList0);
//       boolean boolean0 = tShortArrayList0.equals((Object) tShortArrayList1);
//       assertEquals("{0, 0, 0}", tShortArrayList1.toString());
//       assertEquals(true, boolean0);
//       assertEquals(0, tShortArrayList1.getNoEntryValue());
//   }

  //Test case number: 67
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.hashCode()I: I12 Branch 71 IFLE L761 - false
   * 2 gnu.trove.list.array.TShortArrayList.hashCode()I: I12 Branch 71 IFLE L761 - true
   */

//   @Test
//   public void test67()  throws Throwable  {
//       short[] shortArray0 = new short[3];
//       TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
//       assertNotNull(tShortArrayList0);
//       
//       int int0 = tShortArrayList0.hashCode();
//       assertEquals(0, int0);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//   }

  //Test case number: 68
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.forEach(Lgnu/trove/procedure/TShortProcedure;)Z: I8 Branch 72 IF_ICMPGE L772 - true
   */

//   @Test
//   public void test68()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList(626);
//       boolean boolean0 = tShortArrayList0.forEach((TShortProcedure) null);
//       assertEquals(0, tShortArrayList0.size());
//       assertEquals(true, boolean0);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//   }

  //Test case number: 69
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.forEach(Lgnu/trove/procedure/TShortProcedure;)Z: I8 Branch 72 IF_ICMPGE L772 - false
   */

  @Test
  public void test69()  throws Throwable  {
      short[] shortArray0 = new short[6];
      TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
      // Undeclared exception!
      try {
        tShortArrayList0.forEach((TShortProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 70
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.forEachDescending(Lgnu/trove/procedure/TShortProcedure;)Z: I8 Branch 74 IFLE L783 - true
   */

//   @Test
//   public void test70()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList();
//       boolean boolean0 = tShortArrayList0.forEachDescending((TShortProcedure) null);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       assertEquals(true, boolean0);
//       assertEquals(true, tShortArrayList0.isEmpty());
//   }

  //Test case number: 71
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.forEachDescending(Lgnu/trove/procedure/TShortProcedure;)Z: I8 Branch 74 IFLE L783 - false
   */

  @Test
  public void test71()  throws Throwable  {
      short[] shortArray0 = new short[2];
      TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
      // Undeclared exception!
      try {
        tShortArrayList0.forEachDescending((TShortProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 72
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.fill(IIS)V: I5 Branch 76 IF_ICMPLE L816 - true
   */

//   @Test
//   public void test72()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList();
//       tShortArrayList0.fill(0, 0, (short) (-1022));
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       assertEquals("{}", tShortArrayList0.toString());
//   }

  //Test case number: 73
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.fill(IIS)V: I5 Branch 76 IF_ICMPLE L816 - false
   * 2 gnu.trove.list.array.TShortArrayList.ensureCapacity(I)V: I6 Branch 4 IF_ICMPLE L184 - false
   */

  @Test
  public void test73()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      tShortArrayList0.fill(1226, 1226, (short) (-1017));
      assertEquals("{}", tShortArrayList0.toString());
      assertEquals(1226, tShortArrayList0.size());
  }

  //Test case number: 74
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.binarySearch(SII)I: I3 Branch 77 IFGE L834 - false
   */

  @Test
  public void test74()  throws Throwable  {
      short[] shortArray0 = new short[8];
      TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessShortList0.binarySearch((short)0, (short) (-378), (short)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -378
         //
      }
  }

  //Test case number: 75
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.binarySearch(SII)I: I16 Branch 78 IF_ICMPLE L837 - false
   */

  @Test
  public void test75()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      // Undeclared exception!
      try {
        tShortArrayList0.binarySearch((short) (-625), 262, 974);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 974
         //
      }
  }

  //Test case number: 76
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.binarySearch(SII)I: I58 Branch 80 IF_ICMPGE L848 - false
   * 2 gnu.trove.list.array.TShortArrayList.binarySearch(SII)I: I38 Branch 79 IF_ICMPGT L844 - true
   */

//   @Test
//   public void test76()  throws Throwable  {
//       short[] shortArray0 = new short[6];
//       TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
//       TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortArrayList0);
//       int int0 = tUnmodifiableRandomAccessShortList0.binarySearch((short)1425);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       assertEquals(6, tShortArrayList0.size());
//       assertEquals((-7), int0);
//   }

  //Test case number: 77
  /*
   * 7 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.binarySearch(SII)I: I70 Branch 81 IF_ICMPLE L851 - true
   * 2 gnu.trove.list.array.TShortArrayList.binarySearch(S)I: root-Branch
   * 3 gnu.trove.list.array.TShortArrayList.binarySearch(SII)I: I3 Branch 77 IFGE L834 - true
   * 4 gnu.trove.list.array.TShortArrayList.binarySearch(SII)I: I16 Branch 78 IF_ICMPLE L837 - true
   * 5 gnu.trove.list.array.TShortArrayList.binarySearch(SII)I: I38 Branch 79 IF_ICMPGT L844 - false
   * 6 gnu.trove.list.array.TShortArrayList.binarySearch(SII)I: I58 Branch 80 IF_ICMPGE L848 - true
   * 7 gnu.trove.list.array.TShortArrayList.binarySearch(SII)I: I58 Branch 80 IF_ICMPGE L848 - false
   */

  @Test
  public void test77()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[4] = (short)1425;
      TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortArrayList0);
      int int0 = tUnmodifiableRandomAccessShortList0.binarySearch((short)1425);
      assertEquals(6, tUnmodifiableRandomAccessShortList0.size());
      assertEquals(4, int0);
  }

  //Test case number: 78
  /*
   * 4 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.indexOf(IS)I: I8 Branch 82 IF_ICMPGE L870 - true
   * 2 gnu.trove.list.array.TShortArrayList.indexOf(IS)I: I16 Branch 83 IF_ICMPNE L871 - true
   * 3 gnu.trove.list.array.TShortArrayList.indexOf(S)I: root-Branch
   * 4 gnu.trove.list.array.TShortArrayList.indexOf(IS)I: I8 Branch 82 IF_ICMPGE L870 - false
   */

//   @Test
//   public void test78()  throws Throwable  {
//       short[] shortArray0 = new short[8];
//       TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
//       int int0 = tShortArrayList0.indexOf((short)1227);
//       assertEquals(8, tShortArrayList0.size());
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       assertEquals((-1), int0);
//   }

  //Test case number: 79
  /*
   * 15 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.lastIndexOf(IS)I: I15 Branch 85 IF_ICMPNE L888 - true
   * 2 gnu.trove.list.array.TShortArrayList$TShortArrayIterator.<init>(Lgnu/trove/list/array/TShortArrayList;I)V: root-Branch
   * 3 gnu.trove.list.array.TShortArrayList$TShortArrayIterator.next()S: root-Branch
   * 4 gnu.trove.list.array.TShortArrayList$TShortArrayIterator.hasNext()Z: I7 Branch 102 IF_ICMPGE L1005 - true
   * 5 gnu.trove.list.array.TShortArrayList$TShortArrayIterator.hasNext()Z: I7 Branch 102 IF_ICMPGE L1005 - false
   * 6 gnu.trove.list.array.TShortArrayList.lastIndexOf(S)I: root-Branch
   * 7 gnu.trove.list.array.TShortArrayList.iterator()Lgnu/trove/iterator/TShortIterator;: root-Branch
   * 8 gnu.trove.list.array.TShortArrayList.get(I)S: I5 Branch 9 IF_ICMPLT L280 - true
   * 9 gnu.trove.list.array.TShortArrayList.lastIndexOf(IS)I: I7 Branch 84 IFLE L887 - false
   * 10 gnu.trove.list.array.TShortArrayList.lastIndexOf(IS)I: I15 Branch 85 IF_ICMPNE L888 - false
   * 11 gnu.trove.list.array.TShortArrayList.retainAll(Lgnu/trove/TShortCollection;)Z: I4 Branch 37 IF_ACMPNE L534 - true
   * 12 gnu.trove.list.array.TShortArrayList.retainAll(Lgnu/trove/TShortCollection;)Z: I22 Branch 38 IFEQ L539 - true
   * 13 gnu.trove.list.array.TShortArrayList.retainAll(Lgnu/trove/TShortCollection;)Z: I22 Branch 38 IFEQ L539 - false
   * 14 gnu.trove.list.array.TShortArrayList.retainAll(Lgnu/trove/TShortCollection;)Z: I29 Branch 39 IFNE L540 - true
   * 15 gnu.trove.list.array.TShortArrayList.contains(S)Z: I5 Branch 86 IFLT L898 - false
   */

//   @Test
//   public void test79()  throws Throwable  {
//       short[] shortArray0 = new short[7];
//       shortArray0[0] = (short) (-1217);
//       TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
//       assertNotNull(tShortArrayList0);
//       
//       TSynchronizedShortCollection tSynchronizedShortCollection0 = new TSynchronizedShortCollection((TShortCollection) tShortArrayList0);
//       boolean boolean0 = tShortArrayList0.retainAll((TShortCollection) tSynchronizedShortCollection0);
//       assertEquals(false, boolean0);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       assertEquals(7, tShortArrayList0.size());
//   }

  //Test case number: 80
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.grep(Lgnu/trove/procedure/TShortProcedure;)Lgnu/trove/list/TShortList;: I14 Branch 87 IF_ICMPGE L905 - true
   */

//   @Test
//   public void test80()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList(0, (short) (-1910));
//       TShortArrayList tShortArrayList1 = (TShortArrayList)tShortArrayList0.grep((TShortProcedure) null);
//       assertEquals(0, tShortArrayList1.getNoEntryValue());
//       assertEquals(-1910, tShortArrayList0.getNoEntryValue());
//       assertNotNull(tShortArrayList1);
//   }

  //Test case number: 81
  /*
   * 3 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.grep(Lgnu/trove/procedure/TShortProcedure;)Lgnu/trove/list/TShortList;: I14 Branch 87 IF_ICMPGE L905 - false
   * 2 gnu.trove.list.array.TShortArrayList.<init>([S)V: root-Branch
   * 3 gnu.trove.list.array.TShortArrayList.<init>(I)V: root-Branch
   */

  @Test
  public void test81()  throws Throwable  {
      short[] shortArray0 = new short[2];
      TShortArrayList tShortArrayList0 = new TShortArrayList(shortArray0);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0);
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessShortList0.grep((TShortProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 82
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.inverseGrep(Lgnu/trove/procedure/TShortProcedure;)Lgnu/trove/list/TShortList;: I14 Branch 89 IF_ICMPGE L917 - true
   */

//   @Test
//   public void test82()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList(10, (short)0);
//       TShortArrayList tShortArrayList1 = (TShortArrayList)tShortArrayList0.inverseGrep((TShortProcedure) null);
//       assertNotNull(tShortArrayList1);
//       assertEquals(0, tShortArrayList1.getNoEntryValue());
//       assertNotSame(tShortArrayList1, tShortArrayList0);
//   }

  //Test case number: 83
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.inverseGrep(Lgnu/trove/procedure/TShortProcedure;)Lgnu/trove/list/TShortList;: I14 Branch 89 IF_ICMPGE L917 - false
   */

  @Test
  public void test83()  throws Throwable  {
      short[] shortArray0 = new short[4];
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0, (short)0);
      assertNotNull(tShortArrayList0);
      
      // Undeclared exception!
      try {
        tShortArrayList0.inverseGrep((TShortProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 84
  /*
   * 5 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.max()S: I4 Branch 91 IFNE L928 - true
   * 2 gnu.trove.list.array.TShortArrayList.max()S: I24 Branch 92 IF_ICMPGE L932 - true
   * 3 gnu.trove.list.array.TShortArrayList.max()S: I24 Branch 92 IF_ICMPGE L932 - false
   * 4 gnu.trove.list.array.TShortArrayList.max()S: I32 Branch 93 IF_ICMPLE L933 - true
   * 5 gnu.trove.list.array.TShortArrayList.max()S: I32 Branch 93 IF_ICMPLE L933 - false
   */

//   @Test
//   public void test84()  throws Throwable  {
//       short[] shortArray0 = new short[2];
//       TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
//       assertNotNull(tShortArrayList0);
//       
//       short short0 = tShortArrayList0.max();
//       assertEquals(2, tShortArrayList0.size());
//       assertEquals((short)0, short0);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//   }

  //Test case number: 85
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.max()S: I4 Branch 91 IFNE L928 - false
   */

  @Test
  public void test85()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(100, (short) (-1709));
      // Undeclared exception!
      try {
        tShortArrayList0.max();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot find maximum of an empty list
         //
      }
  }

  //Test case number: 86
  /*
   * 1 covered goal:
   * 1 gnu.trove.list.array.TShortArrayList.min()S: I4 Branch 94 IFNE L943 - false
   */

  @Test
  public void test86()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList(0, (short)7837);
      // Undeclared exception!
      try {
        tShortArrayList0.min();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot find minimum of an empty list
         //
      }
  }

  //Test case number: 87
  /*
   * 5 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.min()S: I32 Branch 96 IF_ICMPGE L948 - true
   * 2 gnu.trove.list.array.TShortArrayList.min()S: I4 Branch 94 IFNE L943 - true
   * 3 gnu.trove.list.array.TShortArrayList.min()S: I24 Branch 95 IF_ICMPGE L947 - true
   * 4 gnu.trove.list.array.TShortArrayList.min()S: I24 Branch 95 IF_ICMPGE L947 - false
   * 5 gnu.trove.list.array.TShortArrayList.min()S: I32 Branch 96 IF_ICMPGE L948 - false
   */

//   @Test
//   public void test87()  throws Throwable  {
//       short[] shortArray0 = new short[3];
//       TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0, (short)1227);
//       assertNotNull(tShortArrayList0);
//       
//       short short0 = tShortArrayList0.min();
//       assertEquals(1227, tShortArrayList0.getNoEntryValue());
//       assertEquals((short)0, short0);
//       assertEquals(3, tShortArrayList0.size());
//   }

  //Test case number: 88
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.sum()S: I12 Branch 97 IF_ICMPGE L959 - false
   * 2 gnu.trove.list.array.TShortArrayList.sum()S: I12 Branch 97 IF_ICMPGE L959 - true
   */

//   @Test
//   public void test88()  throws Throwable  {
//       short[] shortArray0 = new short[3];
//       TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0, (short)1227);
//       assertNotNull(tShortArrayList0);
//       
//       short short0 = tShortArrayList0.sum();
//       assertEquals((short)0, short0);
//       assertEquals(1227, tShortArrayList0.getNoEntryValue());
//   }

  //Test case number: 89
  /*
   * 2 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.toString()Ljava/lang/String;: I20 Branch 98 IF_ICMPGE L972 - true
   * 2 gnu.trove.list.array.TShortArrayList.toString()Ljava/lang/String;: I44 Branch 99 IFLE L976 - true
   */

//   @Test
//   public void test89()  throws Throwable  {
//       TShortArrayList tShortArrayList0 = new TShortArrayList();
//       String string0 = tShortArrayList0.toString();
//       assertNotNull(string0);
//       assertEquals("{}", string0);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//       assertEquals(0, tShortArrayList0.size());
//   }

  //Test case number: 90
  /*
   * 9 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.toString()Ljava/lang/String;: I20 Branch 98 IF_ICMPGE L972 - false
   * 2 gnu.trove.list.array.TShortArrayList.toString()Ljava/lang/String;: I44 Branch 99 IFLE L976 - false
   * 3 gnu.trove.list.array.TShortArrayList.<init>(IS)V: root-Branch
   * 4 gnu.trove.list.array.TShortArrayList.size()I: root-Branch
   * 5 gnu.trove.list.array.TShortArrayList.<init>()V: root-Branch
   * 6 gnu.trove.list.array.TShortArrayList.add([S)V: root-Branch
   * 7 gnu.trove.list.array.TShortArrayList.add([SII)V: root-Branch
   * 8 gnu.trove.list.array.TShortArrayList.ensureCapacity(I)V: I6 Branch 4 IF_ICMPLE L184 - true
   * 9 gnu.trove.list.array.TShortArrayList.toString()Ljava/lang/String;: I20 Branch 98 IF_ICMPGE L972 - true
   */

  @Test
  public void test90()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      short[] shortArray0 = new short[4];
      tShortArrayList0.add(shortArray0);
      String string0 = tShortArrayList0.toString();
      assertEquals(4, tShortArrayList0.size());
      assertEquals("{0, 0, 0, 0}", string0);
  }

  //Test case number: 91
  /*
   * 7 covered goals:
   * 1 gnu.trove.list.array.TShortArrayList.writeExternal(Ljava/io/ObjectOutput;)V: I35 Branch 100 IF_ICMPGE L1051 - true
   * 2 gnu.trove.list.array.TShortArrayList.writeExternal(Ljava/io/ObjectOutput;)V: I35 Branch 100 IF_ICMPGE L1051 - false
   * 3 gnu.trove.list.array.TShortArrayList$1.<init>([SSZ)V: root-Branch
   * 4 gnu.trove.list.array.TShortArrayList.wrap([S)Lgnu/trove/list/array/TShortArrayList;: root-Branch
   * 5 gnu.trove.list.array.TShortArrayList.wrap([SS)Lgnu/trove/list/array/TShortArrayList;: root-Branch
   * 6 gnu.trove.list.array.TShortArrayList.<init>([SSZ)V: I7 Branch 2 IFNE L123 - true
   * 7 gnu.trove.list.array.TShortArrayList.<init>([SSZ)V: I18 Branch 3 IFNONNULL L126 - true
   */

//   @Test
//   public void test91()  throws Throwable  {
//       short[] shortArray0 = new short[8];
//       TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
//       assertNotNull(tShortArrayList0);
//       
//       ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
//       ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
//       tShortArrayList0.writeExternal((ObjectOutput) objectOutputStream0);
//       assertEquals(0, tShortArrayList0.getNoEntryValue());
//   }
}
