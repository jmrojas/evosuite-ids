/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleShortMap;
import gnu.trove.iterator.TDoubleShortIterator;
import gnu.trove.map.TDoubleShortMap;
import gnu.trove.map.hash.TDoubleShortHashMap;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableDoubleShortMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      short[] shortArray0 = new short[5];
      short short0 = (short) (-745);
      shortArray0[0] = short0;
      short short1 = (short) (-288);
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)480;
      shortArray0[3] = short3;
      short short4 = (short) (-1);
      shortArray0[4] = short4;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap0 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      tUnmodifiableDoubleShortMap0.values();
      short short5 = (short)0;
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap(int1, (float) int0, (double) int0, short5);
      TDoubleShortHashMap tDoubleShortHashMap2 = null;
      try {
        tDoubleShortHashMap2 = new TDoubleShortHashMap((TDoubleShortMap) tDoubleShortHashMap1);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

//   @Test
//   public void test1()  throws Throwable  {
//       int int0 = 0;
//       TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0, int0);
//       TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap0 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
//       tUnmodifiableDoubleShortMap0.keys();
//       TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap();
//       TDoubleShortHashMap tDoubleShortHashMap2 = new TDoubleShortHashMap((TDoubleShortMap) tDoubleShortHashMap1);
//       TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap1 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap2);
//       TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap2 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tUnmodifiableDoubleShortMap1);
//       tUnmodifiableDoubleShortMap2.getNoEntryValue();
//       TDoubleShortHashMap tDoubleShortHashMap3 = new TDoubleShortHashMap();
//       tDoubleShortHashMap3.trimToSize();
//       TDoubleShortHashMap tDoubleShortHashMap4 = new TDoubleShortHashMap((TDoubleShortMap) tDoubleShortHashMap3);
//       TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap3 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap4);
//       tUnmodifiableDoubleShortMap3.values();
//       int int1 = 73467739;
//       TDoubleShortHashMap tDoubleShortHashMap5 = null;
//       try {
//         tDoubleShortHashMap5 = new TDoubleShortHashMap(int1);
//         fail("Expecting exception: OutOfMemoryError");
//       
//       } catch(OutOfMemoryError e) {
//          //
//          // Java heap space
//          //
//       }
//   }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-464);
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0);
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap0 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      short short0 = (short)653;
      short short1 = (short)1228;
      // Undeclared exception!
      try {
        tUnmodifiableDoubleShortMap0.adjustOrPutValue((double) int0, short0, short1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      double double1 = 1.0;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 88.61096722730736;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = Double.POSITIVE_INFINITY;
      doubleArray0[5] = double5;
      short[] shortArray0 = new short[2];
      short short0 = (short) (-755);
      shortArray0[0] = short0;
      short short1 = (short) (-711);
      shortArray0[1] = short1;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap0 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleShortMap0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 623;
      float float0 = (-1345.6475F);
      double double0 = (-974.8924765863926);
      short short0 = (short) (-1084);
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0, float0, double0, short0);
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap((TDoubleShortMap) tDoubleShortHashMap0);
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap0 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap1);
      Object object0 = new Object();
      boolean boolean0 = tUnmodifiableDoubleShortMap0.equals(object0);
      assertEquals(false, boolean0);
      
      double[] doubleArray0 = new double[1];
      double double1 = (-1106.0537314217706);
      doubleArray0[0] = double1;
      short[] shortArray0 = new short[1];
      short short1 = (short)27385;
      shortArray0[0] = short1;
      TDoubleShortHashMap tDoubleShortHashMap2 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap1 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap2);
      tDoubleShortHashMap2.clear();
      // Undeclared exception!
      try {
        tUnmodifiableDoubleShortMap1.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TDoubleShortMap tDoubleShortMap0 = null;
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap0 = null;
      try {
        tUnmodifiableDoubleShortMap0 = new TUnmodifiableDoubleShortMap(tDoubleShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      short[] shortArray0 = new short[6];
      short short0 = (short)1905;
      shortArray0[0] = short0;
      short short1 = (short) (-1219);
      shortArray0[1] = short1;
      short short2 = (short) (-1479);
      shortArray0[2] = short2;
      short short3 = (short)1118;
      shortArray0[3] = short3;
      short short4 = (short) (-1);
      shortArray0[4] = short4;
      short short5 = (short)1947;
      shortArray0[5] = short5;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap0 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      tUnmodifiableDoubleShortMap0.containsValue(shortArray0[4]);
      double double0 = (-1.0);
      short short6 = (short)0;
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap(int0, (float) int0, double0, short6);
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap1 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap1);
      TDoubleShortIterator tDoubleShortIterator0 = tUnmodifiableDoubleShortMap1.iterator();
      assertEquals(false, tDoubleShortIterator0.hasNext());
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-1972);
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0, int0);
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap0 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      double double0 = 0.0;
      tUnmodifiableDoubleShortMap0.keys(tDoubleShortHashMap0._set);
      short short0 = (short) (-1160);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleShortMap0.putIfAbsent(double0, short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      short short0 = (short)1797;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0, (float) int0, (double) int0, short0);
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap0 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      tDoubleShortHashMap0.values();
      double double0 = 0.0;
      // Undeclared exception!
      try {
        tUnmodifiableDoubleShortMap0.increment(double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0, int0);
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap0 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      double double0 = 523.1495248202948;
      short[] shortArray0 = new short[5];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short) (-534);
      shortArray0[2] = short2;
      short short3 = (short) (-678);
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      tUnmodifiableDoubleShortMap0.values(shortArray0);
      short short5 = (short) (-1021);
      tDoubleShortHashMap0.adjustOrPutValue(double0, short5, short5);
      short short6 = (short)1;
      // Undeclared exception!
      try {
        tUnmodifiableDoubleShortMap0.putIfAbsent((double) int0, short6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 171;
      double double0 = 1338.834480781112;
      short short0 = (short) (-279);
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0, (float) int0, double0, short0);
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap0 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      short short1 = (short) (-1311);
      boolean boolean0 = tUnmodifiableDoubleShortMap0.containsValue(short1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap0 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      double double0 = 795.7970269055887;
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte) (-82);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)91;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)80;
      byteArray0[4] = byte4;
      byte byte5 = (byte)99;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-105);
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-77);
      byteArray0[8] = byte8;
      byte byte9 = (byte)85;
      byteArray0[9] = byte9;
      tDoubleShortHashMap0._states = byteArray0;
      short short0 = (short)0;
      // Undeclared exception!
      try {
        tUnmodifiableDoubleShortMap0.adjustValue(double0, short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-1049.7693920996107);
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = (-541.9784905950439);
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = 1.0;
      doubleArray0[4] = double4;
      double double5 = (-742.7497965983185);
      doubleArray0[5] = double5;
      double double6 = 0.0;
      doubleArray0[6] = double6;
      short[] shortArray0 = new short[4];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short) (-1818);
      shortArray0[2] = short2;
      short short3 = (short) (-1618);
      shortArray0[3] = short3;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap0 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      tUnmodifiableDoubleShortMap0.getNoEntryValue();
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap();
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap1 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap1);
      tDoubleShortHashMap1.getNoEntryKey();
      tDoubleShortHashMap1.toString();
      tDoubleShortHashMap1.getNoEntryKey();
      TDoubleShortIterator tDoubleShortIterator0 = tUnmodifiableDoubleShortMap1.iterator();
      assertEquals(false, tDoubleShortIterator0.hasNext());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-1014);
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0);
      short[] shortArray0 = new short[3];
      short short0 = (short)0;
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap0 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleShortMap0.increment((double) int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-516.7429576128739);
      doubleArray0[0] = double0;
      double double1 = (-102.72989199541377);
      doubleArray0[1] = double1;
      double double2 = 65.05819165655228;
      doubleArray0[2] = double2;
      double double3 = Double.POSITIVE_INFINITY;
      doubleArray0[3] = double3;
      double double4 = (-253.86318694860918);
      doubleArray0[4] = double4;
      double double5 = 1.0;
      doubleArray0[5] = double5;
      short[] shortArray0 = new short[1];
      short short0 = (short)1;
      shortArray0[0] = short0;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap0 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      double double6 = tUnmodifiableDoubleShortMap0.getNoEntryKey();
      assertFalse(double6 == double3);
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = (-93.65051306711788);
      doubleArray0[1] = double1;
      double double2 = (-766.7716754052396);
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = (-1782.0054567629081);
      doubleArray0[5] = double5;
      short[] shortArray0 = new short[10];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)1123;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short) (-1839);
      shortArray0[4] = short4;
      short short5 = (short)239;
      shortArray0[5] = short5;
      short short6 = (short) (-1199);
      shortArray0[6] = short6;
      short short7 = (short) (-1);
      shortArray0[7] = short7;
      short short8 = (short) (-878);
      shortArray0[8] = short8;
      short short9 = (short) (-1079);
      shortArray0[9] = short9;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap0 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      assertEquals(0.0, tUnmodifiableDoubleShortMap0.getNoEntryKey(), 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 823117;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int0;
      double double0 = 1384.9619615879403;
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) int0;
      short[] shortArray0 = new short[9];
      short short0 = (short)1450;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)364;
      shortArray0[2] = short2;
      short short3 = (short)533;
      shortArray0[3] = short3;
      short short4 = (short) (-225);
      shortArray0[4] = short4;
      short short5 = (short)12221;
      shortArray0[5] = short5;
      short short6 = (short) (-1455);
      shortArray0[6] = short6;
      short short7 = (short)1026;
      shortArray0[7] = short7;
      short short8 = (short) (-95);
      shortArray0[8] = short8;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap0 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap1 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tUnmodifiableDoubleShortMap0);
      tUnmodifiableDoubleShortMap1.isEmpty();
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap(int0);
      TDoubleShortHashMap tDoubleShortHashMap2 = new TDoubleShortHashMap((TDoubleShortMap) tDoubleShortHashMap1);
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap2 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap2);
      tUnmodifiableDoubleShortMap2.size();
      assertEquals(true, tUnmodifiableDoubleShortMap2.isEmpty());
      assertFalse(tUnmodifiableDoubleShortMap2.equals(tUnmodifiableDoubleShortMap1));
      assertFalse(tUnmodifiableDoubleShortMap2.equals(tUnmodifiableDoubleShortMap0));
  }

  @Test
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-307.39031316894153);
      doubleArray0[0] = double0;
      double double1 = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = double1;
      int int0 = (-1919);
      float float0 = 1000.5094F;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0, float0);
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap0 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      tUnmodifiableDoubleShortMap0.valueCollection();
      double double2 = (-2029.4128538139526);
      doubleArray0[2] = double2;
      short[] shortArray0 = new short[3];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)1273;
      shortArray0[2] = short2;
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      TDoubleShortHashMap tDoubleShortHashMap2 = new TDoubleShortHashMap((TDoubleShortMap) tDoubleShortHashMap1);
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap1 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap2);
      tUnmodifiableDoubleShortMap1.keySet();
      boolean boolean0 = tUnmodifiableDoubleShortMap1.containsKey((double) shortArray0[0]);
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 1;
      float float0 = 0.0F;
      short short0 = (short)1327;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0, float0, (double) int0, short0);
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap0 = new TUnmodifiableDoubleShortMap((TDoubleShortMap) tDoubleShortHashMap0);
      int int1 = (-2000);
      TDoubleShortMap tDoubleShortMap0 = null;
      TUnmodifiableDoubleShortMap tUnmodifiableDoubleShortMap1 = null;
      try {
        tUnmodifiableDoubleShortMap1 = new TUnmodifiableDoubleShortMap(tDoubleShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
