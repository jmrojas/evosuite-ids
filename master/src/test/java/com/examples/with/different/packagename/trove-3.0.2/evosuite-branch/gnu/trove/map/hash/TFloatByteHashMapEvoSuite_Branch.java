/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TByteFunction;
import gnu.trove.map.TFloatByteMap;
import gnu.trove.map.hash.TFloatByteHashMap;
import gnu.trove.procedure.TByteProcedure;
import gnu.trove.procedure.TFloatByteProcedure;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.set.TFloatSet;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatByteHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.increment(F)Z: root-Branch
   * 2 gnu.trove.map.hash.TFloatByteHashMap.<init>(I)V: root-Branch
   * 3 gnu.trove.map.hash.TFloatByteHashMap.setUp(I)I: root-Branch
   * 4 gnu.trove.map.hash.TFloatByteHashMap.adjustValue(FB)Z: I9 Branch 71 IFGE L477 - false
   */

  @Test
  public void test0()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap((-2048));
      boolean boolean0 = tFloatByteHashMap0.increment(6.6360896E8F);
      assertEquals(false, boolean0);
  }

  //Test case number: 1
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.valueCollection()Lgnu/trove/TByteCollection;: root-Branch
   * 2 gnu.trove.map.hash.TFloatByteHashMap.put(FB)B: root-Branch
   * 3 gnu.trove.map.hash.TFloatByteHashMap$TValueView.<init>(Lgnu/trove/map/hash/TFloatByteHashMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TFloatByteHashMap.<init>([F[B)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 5 gnu.trove.map.hash.TFloatByteHashMap.<init>([F[B)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 6 gnu.trove.map.hash.TFloatByteHashMap.doPut(FBI)B: I12 Branch 40 IFGE L214 - true
   * 7 gnu.trove.map.hash.TFloatByteHashMap.doPut(FBI)B: I12 Branch 40 IFGE L214 - false
   * 8 gnu.trove.map.hash.TFloatByteHashMap.doPut(FBI)B: I41 Branch 41 IFEQ L221 - true
   * 9 gnu.trove.map.hash.TFloatByteHashMap.doPut(FBI)B: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test1()  throws Throwable  {
      float[] floatArray0 = new float[9];
      byte[] byteArray0 = new byte[23];
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      tFloatByteHashMap0.valueCollection();
      assertEquals("{0.0=0}", tFloatByteHashMap0.toString());
      assertEquals(1, tFloatByteHashMap0.size());
      assertEquals(47, tFloatByteHashMap0.capacity());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.containsKey(F)Z: root-Branch
   * 2 gnu.trove.map.hash.TFloatByteHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap((-1911), (-1036));
      boolean boolean0 = tFloatByteHashMap0.containsKey(0.0F);
      assertEquals(false, boolean0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.clear()V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap((-2048));
      tFloatByteHashMap0.clear();
      assertEquals("{}", tFloatByteHashMap0.toString());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TFloatByteHashMap.remove(F)B: I14 Branch 46 IFLT L276 - false
   */

  @Test
  public void test4()  throws Throwable  {
      float[] floatArray0 = new float[1];
      byte[] byteArray0 = new byte[14];
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      assertEquals(1, tFloatByteHashMap0.size());
      
      byte byte0 = tFloatByteHashMap0.remove((float) (byte)0);
      assertEquals(true, tFloatByteHashMap0.isEmpty());
      assertEquals((byte)0, byte0);
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   * 2 gnu.trove.map.hash.TFloatByteHashMap.<init>()V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap();
      boolean boolean0 = tFloatByteHashMap0.forEachKey((TFloatProcedure) null);
      assertEquals(true, boolean0);
      assertEquals(23, tFloatByteHashMap0.capacity());
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.keySet()Lgnu/trove/set/TFloatSet;: root-Branch
   * 2 gnu.trove.map.hash.TFloatByteHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TFloatByteHashMap;)V: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(0);
      TFloatSet tFloatSet0 = tFloatByteHashMap0.keySet();
      assertEquals(0, tFloatSet0.size());
  }

  //Test case number: 7
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap$TFloatByteHashIterator.key()F: root-Branch
   * 2 gnu.trove.map.hash.TFloatByteHashMap$TFloatByteHashIterator.advance()V: root-Branch
   * 3 gnu.trove.map.hash.TFloatByteHashMap$TFloatByteHashIterator.value()B: root-Branch
   * 4 gnu.trove.map.hash.TFloatByteHashMap.<init>(Lgnu/trove/map/TFloatByteMap;)V: I10 Branch 34 IFEQ L133 - false
   * 5 gnu.trove.map.hash.TFloatByteHashMap.<init>(Lgnu/trove/map/TFloatByteMap;)V: I40 Branch 35 IFEQ L139 - true
   * 6 gnu.trove.map.hash.TFloatByteHashMap.<init>(Lgnu/trove/map/TFloatByteMap;)V: I52 Branch 36 IFEQ L143 - true
   * 7 gnu.trove.map.hash.TFloatByteHashMap.putAll(Lgnu/trove/map/TFloatByteMap;)V: I15 Branch 43 IFEQ L243 - true
   * 8 gnu.trove.map.hash.TFloatByteHashMap.putAll(Lgnu/trove/map/TFloatByteMap;)V: I15 Branch 43 IFEQ L243 - false
   * 9 gnu.trove.map.hash.TFloatByteHashMap.iterator()Lgnu/trove/iterator/TFloatByteIterator;: root-Branch
   * 10 gnu.trove.map.hash.TFloatByteHashMap$TFloatByteHashIterator.<init>(Lgnu/trove/map/hash/TFloatByteHashMap;Lgnu/trove/map/hash/TFloatByteHashMap;)V: root-Branch
   */

//   @Test
//   public void test7()  throws Throwable  {
//       float[] floatArray0 = new float[1];
//       byte[] byteArray0 = new byte[14];
//       TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
//       TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap((TFloatByteMap) tFloatByteHashMap0);
//       assertEquals("{0.0=0}", tFloatByteHashMap1.toString());
//       assertEquals(23, tFloatByteHashMap1.capacity());
//       assertEquals(0, tFloatByteHashMap1.getNoEntryValue());
//       assertEquals("{0.0=0}", tFloatByteHashMap0.toString());
//       assertEquals(false, tFloatByteHashMap0.isEmpty());
//   }

  //Test case number: 8
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.<init>(Lgnu/trove/map/TFloatByteMap;)V: I40 Branch 35 IFEQ L139 - false
   * 2 gnu.trove.map.hash.TFloatByteHashMap.<init>(Lgnu/trove/map/TFloatByteMap;)V: I52 Branch 36 IFEQ L143 - true
   * 3 gnu.trove.map.hash.TFloatByteHashMap.<init>(IFFB)V: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(0, (float) 0, 3.8567526F, (byte)0);
      TFloatByteHashMap tFloatByteHashMap1 = null;
      try {
        tFloatByteHashMap1 = new TFloatByteHashMap((TFloatByteMap) tFloatByteHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  //Test case number: 9
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.<init>(Lgnu/trove/map/TFloatByteMap;)V: I52 Branch 36 IFEQ L143 - false
   * 2 gnu.trove.map.hash.TFloatByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 3 gnu.trove.map.hash.TFloatByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 4 gnu.trove.map.hash.TFloatByteHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 5 gnu.trove.map.hash.TFloatByteHashMap.iterator()Lgnu/trove/iterator/TFloatByteIterator;: root-Branch
   * 6 gnu.trove.map.hash.TFloatByteHashMap.putAll(Lgnu/trove/map/TFloatByteMap;)V: I15 Branch 43 IFEQ L243 - true
   * 7 gnu.trove.map.hash.TFloatByteHashMap.<init>(Lgnu/trove/map/TFloatByteMap;)V: I10 Branch 34 IFEQ L133 - false
   * 8 gnu.trove.map.hash.TFloatByteHashMap.<init>(Lgnu/trove/map/TFloatByteMap;)V: I40 Branch 35 IFEQ L139 - true
   * 9 gnu.trove.map.hash.TFloatByteHashMap$TFloatByteHashIterator.<init>(Lgnu/trove/map/hash/TFloatByteHashMap;Lgnu/trove/map/hash/TFloatByteHashMap;)V: root-Branch
   */

//   @Test
//   public void test9()  throws Throwable  {
//       TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(0, (float) (byte) (-99), (float) 0, (byte)67);
//       TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap((TFloatByteMap) tFloatByteHashMap0);
//       assertEquals(67, tFloatByteHashMap1.getNoEntryValue());
//       assertEquals(0.0F, tFloatByteHashMap1.getNoEntryKey(), 0.01F);
//       assertEquals(3, tFloatByteHashMap1.capacity());
//   }

  //Test case number: 10
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 2 gnu.trove.map.hash.TFloatByteHashMap.putIfAbsent(FB)B: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test10()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap((-1911), (-1036));
      byte byte0 = tFloatByteHashMap0.putIfAbsent(469.57227F, (byte)0);
      assertEquals(1, tFloatByteHashMap0.size());
      assertEquals((byte)0, byte0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.putIfAbsent(FB)B: I9 Branch 39 IFGE L205 - false
   */

  @Test
  public void test11()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap((-2048));
      tFloatByteHashMap0.putIfAbsent((float) 3, (byte)0);
      byte byte0 = tFloatByteHashMap0.putIfAbsent((float) 3, (byte)74);
      assertEquals(false, tFloatByteHashMap0.isEmpty());
      assertEquals((byte)0, byte0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap((-1911), (-1036));
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      tFloatByteHashMap0.putAll((Map<? extends Float, ? extends Byte>) hashMap0);
      assertEquals(3, tFloatByteHashMap0.capacity());
      assertEquals("{}", tFloatByteHashMap0.toString());
  }

  //Test case number: 13
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.get(F)B: I9 Branch 44 IFGE L253 - true
   * 2 gnu.trove.map.hash.TFloatByteHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 3 gnu.trove.map.hash.TFloatByteHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 4 gnu.trove.map.hash.TFloatByteHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 5 gnu.trove.map.hash.TFloatByteHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 6 gnu.trove.map.hash.TFloatByteHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 7 gnu.trove.map.hash.TFloatByteHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 8 gnu.trove.map.hash.TFloatByteHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(0);
      tFloatByteHashMap0.put((float) 0, (byte) (-99));
      boolean boolean0 = tFloatByteHashMap0.equals((Object) tFloatByteHashMap0);
      assertEquals("{0.0=-99}", tFloatByteHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.get(F)B: I9 Branch 44 IFGE L253 - false
   */

  @Test
  public void test14()  throws Throwable  {
      float[] floatArray0 = new float[1];
      byte[] byteArray0 = new byte[14];
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      floatArray0[0] = 921.4309F;
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(floatArray0, tFloatByteHashMap0._states);
      byte byte0 = tFloatByteHashMap1.get(0.0F);
      assertEquals(67, tFloatByteHashMap1.capacity());
      assertEquals("{921.4309=1}", tFloatByteHashMap1.toString());
      assertEquals((byte)0, byte0);
      assertEquals("{0.0=0}", tFloatByteHashMap0.toString());
      assertEquals(false, tFloatByteHashMap1.isEmpty());
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap((-2048));
      tFloatByteHashMap0.putIfAbsent((float) 3, (byte)0);
      boolean boolean0 = tFloatByteHashMap0.isEmpty();
      assertEquals(1, tFloatByteHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test16()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(1526, 1526);
      boolean boolean0 = tFloatByteHashMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.remove(F)B: I14 Branch 46 IFLT L276 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap((-1911), (-1036));
      byte byte0 = tFloatByteHashMap0.remove((float) (-1036));
      assertEquals((byte)0, byte0);
      assertEquals(0, tFloatByteHashMap0.size());
  }

  //Test case number: 18
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.keys()[F: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TFloatByteHashMap.keys()[F: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TFloatByteHashMap.keys()[F: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TFloatByteHashMap.keys()[F: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(1);
      tFloatByteHashMap0.put((float) 1, (byte)25);
      tFloatByteHashMap0.keys();
      assertEquals(1, tFloatByteHashMap0.size());
      assertEquals("{1.0=25}", tFloatByteHashMap0.toString());
  }

  //Test case number: 19
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.keys([F)[F: I10 Branch 49 IF_ICMPGE L315 - true
   * 2 gnu.trove.map.hash.TFloatByteHashMap.keys([F)[F: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TFloatByteHashMap.keys([F)[F: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TFloatByteHashMap.keys([F)[F: I44 Branch 51 IF_ICMPNE L323 - true
   * 5 gnu.trove.map.hash.TFloatByteHashMap.keys([F)[F: I44 Branch 51 IF_ICMPNE L323 - false
   */

  @Test
  public void test19()  throws Throwable  {
      float[] floatArray0 = new float[1];
      byte[] byteArray0 = new byte[14];
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      float[] floatArray1 = tFloatByteHashMap0.keys(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(31, tFloatByteHashMap0.capacity());
      assertEquals("{0.0=0}", tFloatByteHashMap0.toString());
      assertEquals(false, tFloatByteHashMap0.isEmpty());
  }

  //Test case number: 20
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.values()[B: I27 Branch 52 IFLE L343 - true
   * 2 gnu.trove.map.hash.TFloatByteHashMap.values()[B: I27 Branch 52 IFLE L343 - false
   * 3 gnu.trove.map.hash.TFloatByteHashMap.values()[B: I34 Branch 53 IF_ICMPNE L344 - true
   * 4 gnu.trove.map.hash.TFloatByteHashMap.values()[B: I34 Branch 53 IF_ICMPNE L344 - false
   */

  @Test
  public void test20()  throws Throwable  {
      float[] floatArray0 = new float[1];
      byte[] byteArray0 = new byte[14];
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      byte[] byteArray1 = tFloatByteHashMap0.values();
      assertEquals("{0.0=0}", tFloatByteHashMap0.toString());
      assertNotNull(byteArray1);
      assertEquals(31, tFloatByteHashMap0.capacity());
  }

  //Test case number: 21
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.values([B)[B: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TFloatByteHashMap.values([B)[B: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TFloatByteHashMap.values([B)[B: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TFloatByteHashMap.values([B)[B: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap((-1911), (-1036));
      byte[] byteArray0 = tFloatByteHashMap0.values(tFloatByteHashMap0._states);
      assertNotNull(byteArray0);
  }

  //Test case number: 22
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.values([B)[B: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TFloatByteHashMap.values([B)[B: I44 Branch 56 IF_ICMPNE L363 - false
   * 3 gnu.trove.map.hash.TFloatByteHashMap.adjustOrPutValue(FBB)B: I9 Branch 72 IFGE L491 - true
   * 4 gnu.trove.map.hash.TFloatByteHashMap.adjustOrPutValue(FBB)B: I59 Branch 73 IFEQ L502 - false
   * 5 gnu.trove.map.hash.TFloatByteHashMap.values([B)[B: I37 Branch 55 IFLE L362 - true
   * 6 gnu.trove.map.hash.TFloatByteHashMap.values([B)[B: I37 Branch 55 IFLE L362 - false
   * 7 gnu.trove.map.hash.TFloatByteHashMap.values([B)[B: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(549, 549);
      tFloatByteHashMap0.adjustOrPutValue(549.0F, (byte)59, (byte) (-11));
      tFloatByteHashMap0.putIfAbsent((float) (byte)0, (byte) (-116));
      byte[] byteArray0 = new byte[1];
      tFloatByteHashMap0.values(byteArray0);
      assertEquals(2, tFloatByteHashMap0.size());
      assertEquals("{549.0=-11, 0.0=-116}", tFloatByteHashMap0.toString());
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.containsValue(B)Z: I18 Branch 57 IFLE L376 - true
   * 2 gnu.trove.map.hash.TFloatByteHashMap.containsValue(B)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TFloatByteHashMap.containsValue(B)Z: I25 Branch 58 IF_ICMPNE L377 - true
   */

  @Test
  public void test23()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap();
      boolean boolean0 = tFloatByteHashMap0.containsValue((byte)37);
      assertEquals(false, boolean0);
      assertEquals(23, tFloatByteHashMap0.capacity());
  }

  //Test case number: 24
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.containsValue(B)Z: I30 Branch 59 IF_ICMPNE L377 - true
   * 2 gnu.trove.map.hash.TFloatByteHashMap.containsValue(B)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TFloatByteHashMap.containsValue(B)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 4 gnu.trove.map.hash.TFloatByteHashMap.containsValue(B)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 5 gnu.trove.map.hash.TFloatByteHashMap.containsValue(B)Z: I30 Branch 59 IF_ICMPNE L377 - false
   */

  @Test
  public void test24()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[3] = (-847.15546F);
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte) (-1);
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      boolean boolean0 = tFloatByteHashMap0.containsValue((byte)0);
      assertEquals(2, tFloatByteHashMap0.size());
      assertEquals(true, boolean0);
      assertEquals("{-847.15546=-1, 0.0=0}", tFloatByteHashMap0.toString());
      assertEquals(17, tFloatByteHashMap0.capacity());
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TFloatByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TFloatByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test25()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(1526, 1526);
      boolean boolean0 = tFloatByteHashMap0.forEachValue((TByteProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TFloatByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TFloatByteHashMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap();
      tFloatByteHashMap0.putIfAbsent(0.0F, (byte)45);
      // Undeclared exception!
      try {
        tFloatByteHashMap0.forEachValue((TByteProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TFloatByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TFloatByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test27()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(0, (float) 0, (-255.9938F), (byte) (-51));
      tFloatByteHashMap0.transformValues((TByteFunction) null);
      assertEquals(0, tFloatByteHashMap0.size());
  }

  //Test case number: 28
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TFloatByteHashMap.<init>(I)V: root-Branch
   * 3 gnu.trove.map.hash.TFloatByteHashMap.putIfAbsent(FB)B: I9 Branch 39 IFGE L205 - true
   * 4 gnu.trove.map.hash.TFloatByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I18 Branch 66 IFLE L434 - false
   * 5 gnu.trove.map.hash.TFloatByteHashMap.transformValues(Lgnu/trove/function/TByteFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap((-2048));
      tFloatByteHashMap0.putIfAbsent((float) 3, (byte)0);
      // Undeclared exception!
      try {
        tFloatByteHashMap0.transformValues((TByteFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 29
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.retainEntries(Lgnu/trove/procedure/TFloatByteProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TFloatByteHashMap.retainEntries(Lgnu/trove/procedure/TFloatByteProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TFloatByteHashMap.retainEntries(Lgnu/trove/procedure/TFloatByteProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   * 4 gnu.trove.map.hash.TFloatByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 5 gnu.trove.map.hash.TFloatByteHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 6 gnu.trove.map.hash.TFloatByteHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   */

  @Test
  public void test29()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(0, 0.0F, 0.0F, (byte)53);
      boolean boolean0 = tFloatByteHashMap0.retainEntries((TFloatByteProcedure) null);
      assertEquals("{}", tFloatByteHashMap0.toString());
      assertEquals(false, boolean0);
      assertEquals(3, tFloatByteHashMap0.capacity());
  }

  //Test case number: 30
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.retainEntries(Lgnu/trove/procedure/TFloatByteProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TFloatByteHashMap.<init>(IFFB)V: root-Branch
   * 3 gnu.trove.map.hash.TFloatByteHashMap.retainEntries(Lgnu/trove/procedure/TFloatByteProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 4 gnu.trove.map.hash.TFloatByteHashMap.retainEntries(Lgnu/trove/procedure/TFloatByteProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test30()  throws Throwable  {
      float[] floatArray0 = new float[5];
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(0, 0.0F, 0.0F, (byte)53);
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(floatArray0, tFloatByteHashMap0._states);
      // Undeclared exception!
      try {
        tFloatByteHashMap1.retainEntries((TFloatByteProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.adjustValue(FB)Z: I9 Branch 71 IFGE L477 - true
   */

  @Test
  public void test31()  throws Throwable  {
      float[] floatArray0 = new float[10];
      byte[] byteArray0 = new byte[6];
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      boolean boolean0 = tFloatByteHashMap0.adjustValue(0.0F, (byte) (-1));
      assertEquals("{0.0=-1}", tFloatByteHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 32
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.adjustOrPutValue(FBB)B: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TFloatByteHashMap.adjustOrPutValue(FBB)B: I59 Branch 73 IFEQ L502 - true
   */

  @Test
  public void test32()  throws Throwable  {
      float[] floatArray0 = new float[3];
      byte[] byteArray0 = new byte[6];
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      byte byte0 = tFloatByteHashMap0.adjustOrPutValue(0.0F, (byte)2, (byte) (-10));
      assertEquals("{0.0=2}", tFloatByteHashMap0.toString());
      assertEquals((byte)2, byte0);
  }

  //Test case number: 33
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   * 2 gnu.trove.map.hash.TFloatByteHashMap.<init>()V: root-Branch
   */

  @Test
  public void test33()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap();
      boolean boolean0 = tFloatByteHashMap0.equals((Object) "German");
      assertEquals(23, tFloatByteHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 34
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 2 gnu.trove.map.hash.TFloatByteHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 3 gnu.trove.map.hash.TFloatByteHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 4 gnu.trove.map.hash.TFloatByteHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   */

  @Test
  public void test34()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(107, 107);
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(tFloatByteHashMap0._set, tFloatByteHashMap0._states);
      int int0 = tFloatByteHashMap1.hashCode();
      assertEquals(7, tFloatByteHashMap1.capacity());
      assertEquals(1, tFloatByteHashMap1.size());
      assertEquals(0, int0);
  }

  //Test case number: 35
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap$1.execute(FB)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TFloatByteHashMap.toString()Ljava/lang/String;: root-Branch
   * 3 gnu.trove.map.hash.TFloatByteHashMap.forEachEntry(Lgnu/trove/procedure/TFloatByteProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 4 gnu.trove.map.hash.TFloatByteHashMap.forEachEntry(Lgnu/trove/procedure/TFloatByteProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 5 gnu.trove.map.hash.TFloatByteHashMap.forEachEntry(Lgnu/trove/procedure/TFloatByteProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 6 gnu.trove.map.hash.TFloatByteHashMap.forEachEntry(Lgnu/trove/procedure/TFloatByteProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 7 gnu.trove.map.hash.TFloatByteHashMap.forEachEntry(Lgnu/trove/procedure/TFloatByteProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 8 gnu.trove.map.hash.TFloatByteHashMap$1.<init>(Lgnu/trove/map/hash/TFloatByteHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 9 gnu.trove.map.hash.TFloatByteHashMap$1.execute(FB)Z: I4 Branch 115 IFEQ L1233 - false
   */

  @Test
  public void test35()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[1] = (-232.79681F);
      byte[] byteArray0 = new byte[2];
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(floatArray0, byteArray0);
      String string0 = tFloatByteHashMap0.toString();
      assertEquals(2, tFloatByteHashMap0.size());
      assertEquals("{-232.79681=0, 0.0=0}", string0);
      assertNotNull(string0);
      assertEquals(17, tFloatByteHashMap0.capacity());
  }

  //Test case number: 36
  /*
   * 13 covered goals:
   * 1 gnu.trove.map.hash.TFloatByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 2 gnu.trove.map.hash.TFloatByteHashMap.<init>(IF)V: root-Branch
   * 3 gnu.trove.map.hash.TFloatByteHashMap.setUp(I)I: root-Branch
   * 4 gnu.trove.map.hash.TFloatByteHashMap.put(FB)B: root-Branch
   * 5 gnu.trove.map.hash.TFloatByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 6 gnu.trove.map.hash.TFloatByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 7 gnu.trove.map.hash.TFloatByteHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 8 gnu.trove.map.hash.TFloatByteHashMap.<init>([F[B)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 9 gnu.trove.map.hash.TFloatByteHashMap.<init>([F[B)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 10 gnu.trove.map.hash.TFloatByteHashMap.doPut(FBI)B: I12 Branch 40 IFGE L214 - true
   * 11 gnu.trove.map.hash.TFloatByteHashMap.doPut(FBI)B: I12 Branch 40 IFGE L214 - false
   * 12 gnu.trove.map.hash.TFloatByteHashMap.doPut(FBI)B: I41 Branch 41 IFEQ L221 - true
   * 13 gnu.trove.map.hash.TFloatByteHashMap.doPut(FBI)B: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test36()  throws Throwable  {
      TFloatByteHashMap tFloatByteHashMap0 = new TFloatByteHashMap(107, 107);
      TFloatByteHashMap tFloatByteHashMap1 = new TFloatByteHashMap(tFloatByteHashMap0._set, tFloatByteHashMap0._states);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) bufferedOutputStream0);
      tFloatByteHashMap1.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(1, tFloatByteHashMap1.size());
      assertEquals("{0.0=0}", tFloatByteHashMap1.toString());
      assertEquals(7, tFloatByteHashMap1.capacity());
      assertFalse(tFloatByteHashMap0.equals(tFloatByteHashMap1));
  }
}
