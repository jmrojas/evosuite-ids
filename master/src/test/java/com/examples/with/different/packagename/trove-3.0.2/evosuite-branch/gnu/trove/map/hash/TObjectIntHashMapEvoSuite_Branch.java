/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TIntFunction;
import gnu.trove.impl.hash.TObjectHash;
import gnu.trove.map.TObjectIntMap;
import gnu.trove.map.custom_hash.TObjectIntCustomHashMap;
import gnu.trove.map.hash.TObjectIntHashMap;
import gnu.trove.procedure.TIntProcedure;
import gnu.trove.procedure.TObjectIntProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectIntHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 27 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap$TObjectIntHashIterator.value()I: root-Branch
   * 2 gnu.trove.map.hash.TObjectIntHashMap$TObjectIntHashIterator.key()Ljava/lang/Object;: root-Branch
   * 3 gnu.trove.map.hash.TObjectIntHashMap$TObjectIntHashIterator.advance()V: root-Branch
   * 4 gnu.trove.map.hash.TObjectIntHashMap$TObjectIntHashIterator.<init>(Lgnu/trove/map/hash/TObjectIntHashMap;Lgnu/trove/map/hash/TObjectIntHashMap;)V: root-Branch
   * 5 gnu.trove.map.hash.TObjectIntHashMap$1.<init>(Lgnu/trove/map/hash/TObjectIntHashMap;)V: root-Branch
   * 6 gnu.trove.map.hash.TObjectIntHashMap.iterator()Lgnu/trove/iterator/TObjectIntIterator;: root-Branch
   * 7 gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I: root-Branch
   * 8 gnu.trove.map.hash.TObjectIntHashMap.getNoEntryValue()I: root-Branch
   * 9 gnu.trove.map.hash.TObjectIntHashMap.containsKey(Ljava/lang/Object;)Z: root-Branch
   * 10 gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V: I23 Branch 8 IFEQ L124 - true
   * 11 gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - true
   * 12 gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - false
   * 13 gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - true
   * 14 gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - false
   * 15 gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V: I61 Branch 13 IF_ACMPEQ L186 - false
   * 16 gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V: I77 Branch 14 IFGE L189 - true
   * 17 gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I: I9 Branch 19 IFGE L230 - true
   * 18 gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I: I9 Branch 20 IFGE L246 - true
   * 19 gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I: I12 Branch 21 IFGE L255 - true
   * 20 gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I: I41 Branch 22 IFEQ L263 - false
   * 21 gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 58 IFNE L576 - true
   * 22 gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 59 IF_ICMPEQ L580 - true
   * 23 gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 60 IFEQ L585 - true
   * 24 gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 60 IFEQ L585 - false
   * 25 gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z: I54 Branch 61 IF_ICMPNE L589 - false
   * 26 gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z: I62 Branch 62 IF_ICMPNE L590 - false
   * 27 gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z: I66 Branch 63 IFNE L590 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>(0, 0, 0);
      tObjectIntHashMap0.putIfAbsent("Class of objects differ a=", 0);
      boolean boolean0 = tObjectIntHashMap0.equals((Object) tObjectIntHashMap0);
      assertEquals(1, tObjectIntHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap$TIntValueCollection.<init>(Lgnu/trove/map/hash/TObjectIntHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TObjectIntHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TObjectIntHashMap.valueCollection()Lgnu/trove/TIntCollection;: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>();
      tObjectIntHashMap0.valueCollection();
      assertEquals(23, tObjectIntHashMap0.capacity());
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap$KeyView.<init>(Lgnu/trove/map/hash/TObjectIntHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TObjectIntHashMap.keySet()Ljava/util/Set;: root-Branch
   * 3 gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V: I23 Branch 8 IFEQ L124 - false
   */

  @Test
  public void test2()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>(441, 441, 441);
      tObjectIntHashMap0.keySet();
      assertEquals(441, tObjectIntHashMap0.getNoEntryValue());
  }

  //Test case number: 3
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap$1.execute(Ljava/lang/Object;I)Z: root-Branch
   * 2 gnu.trove.map.hash.TObjectIntHashMap.putAll(Lgnu/trove/map/TObjectIntMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I: root-Branch
   * 4 gnu.trove.map.hash.TObjectIntHashMap.<init>(IF)V: root-Branch
   * 5 gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V: I13 Branch 9 IFEQ L138 - false
   * 6 gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V: I35 Branch 10 IFEQ L143 - true
   * 7 gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - false
   * 8 gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I30 Branch 49 IF_ACMPEQ L507 - false
   * 9 gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I39 Branch 50 IFNE L507 - true
   * 10 gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I18 Branch 47 IFLE L506 - true
   * 11 gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I18 Branch 47 IFLE L506 - false
   * 12 gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - true
   */

  @Test
  public void test3()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>((-1000), (-1000));
      tObjectIntHashMap0.put("fra", 0);
      TObjectIntHashMap<String> tObjectIntHashMap1 = new TObjectIntHashMap<String>((TObjectIntMap<? extends String>) tObjectIntHashMap0);
      assertEquals("{fra=0}", tObjectIntHashMap0.toString());
      assertEquals(false, tObjectIntHashMap1.isEmpty());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.forEachKey(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>();
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(tObjectIntHashMap0._set);
      boolean boolean0 = tObjectIntHashMap0.forEachKey((TObjectProcedure<? super String>) toObjectArrayProceedure0);
      assertEquals(23, tObjectIntHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V: I61 Branch 13 IF_ACMPEQ L186 - true
   * 3 gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I: I14 Branch 23 IFLT L274 - false
   */

  @Test
  public void test5()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>((-1000), (-1000));
      tObjectIntHashMap0.put((Integer) null, 287);
      assertEquals(1, tObjectIntHashMap0.size());
      
      int int0 = tObjectIntHashMap0.remove((Object) null);
      assertEquals(287, int0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.clear()V: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>((-1000), (-1000));
      tObjectIntHashMap0.clear();
      assertEquals("{}", tObjectIntHashMap0.toString());
      assertEquals(0, tObjectIntHashMap0.getNoEntryValue());
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.increment(Ljava/lang/Object;)Z: root-Branch
   * 2 gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z: I9 Branch 40 IFGE L427 - false
   */

  @Test
  public void test7()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>();
      boolean boolean0 = tObjectIntHashMap0.increment("");
      assertEquals(false, boolean0);
      assertEquals(23, tObjectIntHashMap0.capacity());
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V: I13 Branch 9 IFEQ L138 - true
   */

  @Test
  public void test8()  throws Throwable  {
      IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
      TObjectIntCustomHashMap<Integer> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, 0);
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>((TObjectIntMap<? extends Integer>) tObjectIntCustomHashMap0);
      assertEquals(0, tObjectIntHashMap0.getNoEntryValue());
  }

  //Test case number: 9
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V: I35 Branch 10 IFEQ L143 - false
   * 2 gnu.trove.map.hash.TObjectIntHashMap.putAll(Lgnu/trove/map/TObjectIntMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TObjectIntHashMap.getNoEntryValue()I: root-Branch
   * 4 gnu.trove.map.hash.TObjectIntHashMap.<init>(Lgnu/trove/map/TObjectIntMap;)V: I13 Branch 9 IFEQ L138 - false
   */

  @Test
  public void test9()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>(600, 324.24872F, 118);
      TObjectIntHashMap<Object> tObjectIntHashMap1 = new TObjectIntHashMap<Object>((TObjectIntMap<?>) tObjectIntHashMap0);
      assertEquals(118, tObjectIntHashMap1.getNoEntryValue());
      assertEquals(3, tObjectIntHashMap1.capacity());
  }

  //Test case number: 10
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z: I25 Branch 16 IF_ACMPEQ L219 - false
   * 2 gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z: I30 Branch 17 IF_ACMPEQ L219 - false
   * 3 gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z: I35 Branch 18 IF_ICMPNE L219 - false
   * 4 gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z: I18 Branch 15 IFLE L218 - false
   */

  @Test
  public void test10()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>((-1000), (-1000));
      tObjectIntHashMap0.put("fra", 0);
      boolean boolean0 = tObjectIntHashMap0.containsValue(0);
      assertEquals(false, tObjectIntHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 11
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z: I30 Branch 17 IF_ACMPEQ L219 - true
   * 2 gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I: I9 Branch 41 IFGE L443 - true
   * 3 gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I: I51 Branch 42 IFEQ L454 - false
   * 4 gnu.trove.map.hash.TObjectIntHashMap.<init>(I)V: root-Branch
   * 5 gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z: I18 Branch 15 IFLE L218 - true
   * 6 gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z: I25 Branch 16 IF_ACMPEQ L219 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TObjectIntHashMap<Object> tObjectIntHashMap0 = new TObjectIntHashMap<Object>(362);
      Object object0 = TObjectHash.REMOVED;
      tObjectIntHashMap0.adjustOrPutValue(object0, 362, 362);
      boolean boolean0 = tObjectIntHashMap0.containsValue((-1));
      assertEquals(false, tObjectIntHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 12
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z: I35 Branch 18 IF_ICMPNE L219 - true
   * 2 gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z: I18 Branch 15 IFLE L218 - true
   * 3 gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z: I18 Branch 15 IFLE L218 - false
   * 4 gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z: I25 Branch 16 IF_ACMPEQ L219 - true
   * 5 gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z: I25 Branch 16 IF_ACMPEQ L219 - false
   * 6 gnu.trove.map.hash.TObjectIntHashMap.containsValue(I)Z: I30 Branch 17 IF_ACMPEQ L219 - false
   */

  @Test
  public void test12()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>();
      tObjectIntHashMap0.put((String) null, 0);
      boolean boolean0 = tObjectIntHashMap0.containsValue(600);
      assertEquals(false, tObjectIntHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I: I9 Branch 19 IFGE L230 - false
   */

  @Test
  public void test13()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>();
      int int0 = tObjectIntHashMap0.get((Object) "0");
      assertEquals(23, tObjectIntHashMap0.capacity());
      assertEquals(0, int0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I: I9 Branch 20 IFGE L246 - false
   */

  @Test
  public void test14()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>((-1540), (-1540));
      tObjectIntHashMap0.put("-1540", (-1540));
      int int0 = tObjectIntHashMap0.putIfAbsent("-1540", (-1540));
      assertEquals(false, tObjectIntHashMap0.isEmpty());
      assertEquals((-1540), int0);
  }

  //Test case number: 15
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I: I12 Branch 21 IFGE L255 - false
   * 2 gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I: I41 Branch 22 IFEQ L263 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>();
      tObjectIntHashMap0.adjustOrPutValue((Integer) 0, 0, 0);
      int int0 = tObjectIntHashMap0.put((Integer) 0, 0);
      assertEquals("{0=0}", tObjectIntHashMap0.toString());
      assertEquals(0, int0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.remove(Ljava/lang/Object;)I: I14 Branch 23 IFLT L274 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>(600, 324.24872F, 118);
      int int0 = tObjectIntHashMap0.remove((Object) "{null=0}");
      assertEquals(118, int0);
      assertEquals(true, tObjectIntHashMap0.isEmpty());
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.putAll(Ljava/util/Map;)V: I13 Branch 24 IFEQ L300 - false
   * 2 gnu.trove.map.hash.TObjectIntHashMap.putAll(Ljava/util/Map;)V: I13 Branch 24 IFEQ L300 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>((-1000), (-1000));
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put((Integer) 0, (Integer) 0);
      tObjectIntHashMap0.putAll((Map<? extends Integer, ? extends Integer>) hashMap0);
      assertEquals(1, tObjectIntHashMap0.size());
      assertEquals("{0=0}", tObjectIntHashMap0.toString());
  }

  //Test case number: 18
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;: I30 Branch 26 IF_ACMPEQ L335 - false
   * 2 gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;: I35 Branch 27 IF_ACMPEQ L335 - false
   * 3 gnu.trove.map.hash.TObjectIntHashMap.hashCode()I: I22 Branch 65 IFLE L613 - true
   * 4 gnu.trove.map.hash.TObjectIntHashMap.hashCode()I: I22 Branch 65 IFLE L613 - false
   * 5 gnu.trove.map.hash.TObjectIntHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - true
   * 6 gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;: I23 Branch 25 IFLE L334 - true
   * 7 gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;: I23 Branch 25 IFLE L334 - false
   * 8 gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;: I30 Branch 26 IF_ACMPEQ L335 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TObjectIntHashMap<Object> tObjectIntHashMap0 = new TObjectIntHashMap<Object>(362);
      tObjectIntHashMap0.adjustOrPutValue((Object) tObjectIntHashMap0, 362, 362);
      tObjectIntHashMap0.keys();
      assertEquals(false, tObjectIntHashMap0.isEmpty());
      assertEquals(1, tObjectIntHashMap0.size());
  }

  //Test case number: 19
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;: I35 Branch 27 IF_ACMPEQ L335 - true
   * 2 gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;: I23 Branch 25 IFLE L334 - true
   * 3 gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;: I23 Branch 25 IFLE L334 - false
   * 4 gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;: I30 Branch 26 IF_ACMPEQ L335 - true
   * 5 gnu.trove.map.hash.TObjectIntHashMap.keys()[Ljava/lang/Object;: I30 Branch 26 IF_ACMPEQ L335 - false
   */

  @Test
  public void test19()  throws Throwable  {
      TObjectIntHashMap<Object> tObjectIntHashMap0 = new TObjectIntHashMap<Object>(362);
      Object object0 = TObjectHash.REMOVED;
      tObjectIntHashMap0.adjustOrPutValue(object0, 362, 362);
      tObjectIntHashMap0.keys();
      assertEquals(false, tObjectIntHashMap0.isEmpty());
      assertEquals(761, tObjectIntHashMap0.capacity());
  }

  //Test case number: 20
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I10 Branch 28 IF_ICMPGE L347 - false
   * 2 gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I44 Branch 30 IF_ACMPEQ L356 - false
   * 3 gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I49 Branch 31 IF_ACMPEQ L356 - false
   * 4 gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L355 - true
   * 5 gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L355 - false
   * 6 gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I44 Branch 30 IF_ACMPEQ L356 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>(441, 441, 441);
      Integer[] integerArray0 = new Integer[1];
      tObjectIntHashMap0.putIfAbsent((Integer) 0, 1);
      tObjectIntHashMap0.putIfAbsent((Integer) 600, 1603);
      tObjectIntHashMap0.keys(integerArray0);
      assertEquals(false, tObjectIntHashMap0.isEmpty());
      assertEquals(441, tObjectIntHashMap0.getNoEntryValue());
  }

  //Test case number: 21
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I49 Branch 31 IF_ACMPEQ L356 - true
   * 2 gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I10 Branch 28 IF_ICMPGE L347 - true
   * 3 gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L355 - true
   * 4 gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I37 Branch 29 IFLE L355 - false
   * 5 gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I44 Branch 30 IF_ACMPEQ L356 - true
   * 6 gnu.trove.map.hash.TObjectIntHashMap.keys([Ljava/lang/Object;)[Ljava/lang/Object;: I44 Branch 30 IF_ACMPEQ L356 - false
   */

  @Test
  public void test21()  throws Throwable  {
      TObjectIntHashMap<Object> tObjectIntHashMap0 = new TObjectIntHashMap<Object>(362);
      Object object0 = TObjectHash.REMOVED;
      tObjectIntHashMap0.adjustOrPutValue(object0, 362, 362);
      tObjectIntHashMap0.keys(tObjectIntHashMap0._set);
      assertEquals(false, tObjectIntHashMap0.isEmpty());
      assertEquals(0, tObjectIntHashMap0.getNoEntryValue());
  }

  //Test case number: 22
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.values()[I: I34 Branch 33 IF_ACMPEQ L378 - false
   * 2 gnu.trove.map.hash.TObjectIntHashMap.values()[I: I39 Branch 34 IF_ACMPEQ L378 - false
   * 3 gnu.trove.map.hash.TObjectIntHashMap.values()[I: I27 Branch 32 IFLE L377 - true
   * 4 gnu.trove.map.hash.TObjectIntHashMap.values()[I: I27 Branch 32 IFLE L377 - false
   * 5 gnu.trove.map.hash.TObjectIntHashMap.values()[I: I34 Branch 33 IF_ACMPEQ L378 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>((-1000), (-1000));
      tObjectIntHashMap0.put("fra", 0);
      tObjectIntHashMap0.values();
      assertEquals("{fra=0}", tObjectIntHashMap0.toString());
      assertEquals(7, tObjectIntHashMap0.capacity());
  }

  //Test case number: 23
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.values([I)[I: I10 Branch 35 IF_ICMPGE L389 - true
   * 2 gnu.trove.map.hash.TObjectIntHashMap.values([I)[I: I37 Branch 36 IFLE L396 - true
   * 3 gnu.trove.map.hash.TObjectIntHashMap.values([I)[I: I37 Branch 36 IFLE L396 - false
   * 4 gnu.trove.map.hash.TObjectIntHashMap.values([I)[I: I44 Branch 37 IF_ACMPEQ L397 - true
   * 5 gnu.trove.map.hash.TObjectIntHashMap.values([I)[I: I65 Branch 39 IF_ICMPLE L401 - false
   */

  @Test
  public void test23()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>(424, 424, 424);
      int[] intArray0 = new int[3];
      int[] intArray1 = tObjectIntHashMap0.values(intArray0);
      assertEquals(424, tObjectIntHashMap0.getNoEntryValue());
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  //Test case number: 24
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.values([I)[I: I10 Branch 35 IF_ICMPGE L389 - false
   * 2 gnu.trove.map.hash.TObjectIntHashMap.values([I)[I: I44 Branch 37 IF_ACMPEQ L397 - false
   * 3 gnu.trove.map.hash.TObjectIntHashMap.values([I)[I: I49 Branch 38 IF_ACMPEQ L397 - false
   * 4 gnu.trove.map.hash.TObjectIntHashMap.values([I)[I: I65 Branch 39 IF_ICMPLE L401 - true
   * 5 gnu.trove.map.hash.TObjectIntHashMap.values([I)[I: I37 Branch 36 IFLE L396 - true
   * 6 gnu.trove.map.hash.TObjectIntHashMap.values([I)[I: I37 Branch 36 IFLE L396 - false
   * 7 gnu.trove.map.hash.TObjectIntHashMap.values([I)[I: I44 Branch 37 IF_ACMPEQ L397 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>();
      Integer integer0 = new Integer(524);
      tObjectIntHashMap0.put(integer0, (int) integer0);
      tObjectIntHashMap0.adjustOrPutValue((Integer) 0, 0, 0);
      int[] intArray0 = new int[1];
      tObjectIntHashMap0.values(intArray0);
      assertEquals(2, tObjectIntHashMap0.size());
      assertEquals("{524=524,0=0}", tObjectIntHashMap0.toString());
  }

  //Test case number: 25
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.adjustValue(Ljava/lang/Object;I)Z: I9 Branch 40 IFGE L427 - true
   * 2 gnu.trove.map.hash.TObjectIntHashMap.increment(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>();
      tObjectIntHashMap0.put("", 1);
      boolean boolean0 = tObjectIntHashMap0.increment("");
      assertEquals(1, tObjectIntHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 26
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I: I9 Branch 41 IFGE L443 - false
   * 2 gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I: I51 Branch 42 IFEQ L454 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>();
      tObjectIntHashMap0.put("", 1);
      int int0 = tObjectIntHashMap0.adjustOrPutValue("", 0, 0);
      assertEquals(false, tObjectIntHashMap0.isEmpty());
      assertEquals(1, int0);
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I18 Branch 43 IFLE L484 - true
   * 2 gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I18 Branch 43 IFLE L484 - false
   * 3 gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I25 Branch 44 IF_ACMPEQ L485 - true
   */

  @Test
  public void test27()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>();
      boolean boolean0 = tObjectIntHashMap0.forEachValue((TIntProcedure) null);
      assertEquals(true, boolean0);
      assertEquals(23, tObjectIntHashMap0.capacity());
  }

  //Test case number: 28
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I25 Branch 44 IF_ACMPEQ L485 - false
   * 2 gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I30 Branch 45 IF_ACMPEQ L485 - false
   * 3 gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I18 Branch 43 IFLE L484 - false
   * 4 gnu.trove.map.hash.TObjectIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I25 Branch 44 IF_ACMPEQ L485 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>((-1421));
      tObjectIntHashMap0.put((Integer) (-1421), (-1421));
      // Undeclared exception!
      try {
        tObjectIntHashMap0.forEachValue((TIntProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 29
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I30 Branch 49 IF_ACMPEQ L507 - true
   * 2 gnu.trove.map.hash.TObjectIntHashMap$2.<init>(Lgnu/trove/map/hash/TObjectIntHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 3 gnu.trove.map.hash.TObjectIntHashMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test29()  throws Throwable  {
      TObjectIntHashMap<Object> tObjectIntHashMap0 = new TObjectIntHashMap<Object>(362);
      Object object0 = TObjectHash.REMOVED;
      tObjectIntHashMap0.adjustOrPutValue(object0, 362, 362);
      String string0 = tObjectIntHashMap0.toString();
      assertEquals(false, tObjectIntHashMap0.isEmpty());
      assertEquals("{}", string0);
  }

  //Test case number: 30
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I27 Branch 51 IFLE L533 - true
   * 2 gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I27 Branch 51 IFLE L533 - false
   * 3 gnu.trove.map.hash.TObjectIntHashMap.retainEntries(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I34 Branch 52 IF_ACMPEQ L534 - true
   */

  @Test
  public void test30()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>((-1000), (-1000));
      boolean boolean0 = tObjectIntHashMap0.retainEntries((TObjectIntProcedure<? super Integer>) null);
      assertEquals(false, boolean0);
      assertEquals(3, tObjectIntHashMap0.capacity());
      assertEquals("{}", tObjectIntHashMap0.toString());
      assertEquals(0, tObjectIntHashMap0.getNoEntryValue());
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V: I18 Branch 55 IFLE L558 - false
   * 2 gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V: I24 Branch 56 IFNULL L559 - false
   * 3 gnu.trove.map.hash.TObjectIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V: I29 Branch 57 IF_ACMPEQ L559 - false
   */

  @Test
  public void test31()  throws Throwable  {
      TObjectIntHashMap<Object> tObjectIntHashMap0 = new TObjectIntHashMap<Object>((-10));
      // Undeclared exception!
      try {
        tObjectIntHashMap0.transformValues((TIntFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 58 IFNE L576 - false
   */

  @Test
  public void test32()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>((-1000), (-1000));
      boolean boolean0 = tObjectIntHashMap0.equals((Object) "fra");
      assertEquals(0, tObjectIntHashMap0.getNoEntryValue());
      assertEquals(false, boolean0);
  }

  //Test case number: 33
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 59 IF_ICMPEQ L580 - false
   * 2 gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V: I23 Branch 8 IFEQ L124 - false
   */

  @Test
  public void test33()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>(1353, 1353);
      tObjectIntHashMap0.putIfAbsent((Integer) 1353, 0);
      TObjectIntHashMap<Object> tObjectIntHashMap1 = new TObjectIntHashMap<Object>(1353, Float.POSITIVE_INFINITY, 1353);
      boolean boolean0 = tObjectIntHashMap0.equals((Object) tObjectIntHashMap1);
      assertEquals(1, tObjectIntHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 34
  /*
   * 13 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z: I54 Branch 61 IF_ICMPNE L589 - true
   * 2 gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z: I78 Branch 64 IF_ICMPEQ L596 - true
   * 3 gnu.trove.map.hash.TObjectIntHashMap$TObjectIntHashIterator.value()I: root-Branch
   * 4 gnu.trove.map.hash.TObjectIntHashMap$TObjectIntHashIterator.key()Ljava/lang/Object;: root-Branch
   * 5 gnu.trove.map.hash.TObjectIntHashMap$TObjectIntHashIterator.advance()V: root-Branch
   * 6 gnu.trove.map.hash.TObjectIntHashMap$TObjectIntHashIterator.<init>(Lgnu/trove/map/hash/TObjectIntHashMap;Lgnu/trove/map/hash/TObjectIntHashMap;)V: root-Branch
   * 7 gnu.trove.map.hash.TObjectIntHashMap.iterator()Lgnu/trove/iterator/TObjectIntIterator;: root-Branch
   * 8 gnu.trove.map.hash.TObjectIntHashMap.<init>(IFI)V: I23 Branch 8 IFEQ L124 - true
   * 9 gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 58 IFNE L576 - true
   * 10 gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 59 IF_ICMPEQ L580 - true
   * 11 gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 60 IFEQ L585 - true
   * 12 gnu.trove.map.hash.TObjectIntHashMap.equals(Ljava/lang/Object;)Z: I34 Branch 60 IFEQ L585 - false
   * 13 gnu.trove.map.hash.TObjectIntHashMap.get(Ljava/lang/Object;)I: I9 Branch 19 IFGE L230 - true
   */

  @Test
  public void test34()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>(0, 0, 0);
      tObjectIntHashMap0.adjustOrPutValue("gfZ25+BOS;c]$", 0, (-673));
      boolean boolean0 = tObjectIntHashMap0.equals((Object) tObjectIntHashMap0);
      assertEquals(false, tObjectIntHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 35
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - false
   * 2 gnu.trove.map.hash.TObjectIntHashMap.hashCode()I: I34 Branch 67 IF_ACMPEQ L614 - false
   * 3 gnu.trove.map.hash.TObjectIntHashMap.hashCode()I: I45 Branch 68 IFNONNULL L615 - true
   */

  @Test
  public void test35()  throws Throwable  {
      TObjectIntHashMap<Integer> tObjectIntHashMap0 = new TObjectIntHashMap<Integer>();
      Integer integer0 = new Integer(524);
      tObjectIntHashMap0.put(integer0, (int) integer0);
      int int0 = tObjectIntHashMap0.hashCode();
      assertEquals(1, tObjectIntHashMap0.size());
      assertEquals(0, int0);
  }

  //Test case number: 36
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.hashCode()I: I34 Branch 67 IF_ACMPEQ L614 - true
   * 2 gnu.trove.map.hash.TObjectIntHashMap.<init>(I)V: root-Branch
   * 3 gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I: I9 Branch 41 IFGE L443 - true
   * 4 gnu.trove.map.hash.TObjectIntHashMap.adjustOrPutValue(Ljava/lang/Object;II)I: I51 Branch 42 IFEQ L454 - false
   */

  @Test
  public void test36()  throws Throwable  {
      TObjectIntHashMap<Object> tObjectIntHashMap0 = new TObjectIntHashMap<Object>(362);
      Object object0 = TObjectHash.REMOVED;
      tObjectIntHashMap0.adjustOrPutValue(object0, 362, 362);
      int int0 = tObjectIntHashMap0.hashCode();
      assertEquals(1, tObjectIntHashMap0.size());
      assertEquals(0, int0);
  }

  //Test case number: 37
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.hashCode()I: I45 Branch 68 IFNONNULL L615 - false
   * 2 gnu.trove.map.hash.TObjectIntHashMap.hashCode()I: I22 Branch 65 IFLE L613 - true
   * 3 gnu.trove.map.hash.TObjectIntHashMap.hashCode()I: I22 Branch 65 IFLE L613 - false
   * 4 gnu.trove.map.hash.TObjectIntHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - true
   * 5 gnu.trove.map.hash.TObjectIntHashMap.hashCode()I: I29 Branch 66 IF_ACMPEQ L614 - false
   * 6 gnu.trove.map.hash.TObjectIntHashMap.hashCode()I: I34 Branch 67 IF_ACMPEQ L614 - false
   */

  @Test
  public void test37()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>();
      tObjectIntHashMap0.put((String) null, 0);
      int int0 = tObjectIntHashMap0.hashCode();
      assertEquals(false, tObjectIntHashMap0.isEmpty());
      assertEquals(0, int0);
  }

  //Test case number: 38
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I45 Branch 71 IF_ACMPEQ L1094 - false
   * 2 gnu.trove.map.hash.TObjectIntHashMap.<init>(IF)V: root-Branch
   * 3 gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 69 IFLE L1093 - true
   * 4 gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I31 Branch 69 IFLE L1093 - false
   * 5 gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I39 Branch 70 IF_ACMPEQ L1094 - false
   * 6 gnu.trove.map.hash.TObjectIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I45 Branch 71 IF_ACMPEQ L1094 - true
   * 7 gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - true
   * 8 gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V: I49 Branch 11 IFLE L185 - false
   * 9 gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - true
   * 10 gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V: I56 Branch 12 IF_ACMPEQ L186 - false
   * 11 gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V: I61 Branch 13 IF_ACMPEQ L186 - false
   * 12 gnu.trove.map.hash.TObjectIntHashMap.rehash(I)V: I77 Branch 14 IFGE L189 - true
   */

  @Test
  public void test38()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>((-1540), (-1540));
      tObjectIntHashMap0.put("-1540", (-1540));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tObjectIntHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(7, tObjectIntHashMap0.capacity());
      assertEquals("{-1540=-1540}", tObjectIntHashMap0.toString());
  }

  //Test case number: 39
  /*
   * 17 covered goals:
   * 1 gnu.trove.map.hash.TObjectIntHashMap$2.execute(Ljava/lang/Object;I)Z: I4 Branch 102 IFEQ L1134 - true
   * 2 gnu.trove.map.hash.TObjectIntHashMap$2.execute(Ljava/lang/Object;I)Z: I4 Branch 102 IFEQ L1134 - false
   * 3 gnu.trove.map.hash.TObjectIntHashMap$2.<init>(Lgnu/trove/map/hash/TObjectIntHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 4 gnu.trove.map.hash.TObjectIntHashMap$1.<init>(Lgnu/trove/map/hash/TObjectIntHashMap;)V: root-Branch
   * 5 gnu.trove.map.hash.TObjectIntHashMap.toString()Ljava/lang/String;: root-Branch
   * 6 gnu.trove.map.hash.TObjectIntHashMap.setUp(I)I: root-Branch
   * 7 gnu.trove.map.hash.TObjectIntHashMap.put(Ljava/lang/Object;I)I: root-Branch
   * 8 gnu.trove.map.hash.TObjectIntHashMap.<init>()V: root-Branch
   * 9 gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I: I12 Branch 21 IFGE L255 - true
   * 10 gnu.trove.map.hash.TObjectIntHashMap.doPut(II)I: I41 Branch 22 IFEQ L263 - false
   * 11 gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I18 Branch 47 IFLE L506 - true
   * 12 gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I18 Branch 47 IFLE L506 - false
   * 13 gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - true
   * 14 gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I25 Branch 48 IF_ACMPEQ L507 - false
   * 15 gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I30 Branch 49 IF_ACMPEQ L507 - false
   * 16 gnu.trove.map.hash.TObjectIntHashMap.forEachEntry(Lgnu/trove/procedure/TObjectIntProcedure;)Z: I39 Branch 50 IFNE L507 - true
   * 17 gnu.trove.map.hash.TObjectIntHashMap.putIfAbsent(Ljava/lang/Object;I)I: I9 Branch 20 IFGE L246 - true
   */

  @Test
  public void test39()  throws Throwable  {
      TObjectIntHashMap<String> tObjectIntHashMap0 = new TObjectIntHashMap<String>();
      tObjectIntHashMap0.putIfAbsent("6G*qE \"Vt4l", 441);
      tObjectIntHashMap0.put("", 1);
      String string0 = tObjectIntHashMap0.toString();
      assertEquals(false, tObjectIntHashMap0.isEmpty());
      assertEquals("{6G*qE \"Vt4l=441,=1}", string0);
  }
}
