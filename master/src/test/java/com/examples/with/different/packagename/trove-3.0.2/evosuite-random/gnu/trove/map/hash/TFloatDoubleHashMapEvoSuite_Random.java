/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TDoubleCollection;
import gnu.trove.function.TDoubleFunction;
import gnu.trove.map.TFloatDoubleMap;
import gnu.trove.map.hash.TFloatDoubleHashMap;
import gnu.trove.procedure.TFloatDoubleProcedure;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.util.AbstractMap;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatDoubleHashMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 0;
      float float0 = 1636.3542F;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0, (float) int0, float0, (double) float0);
      TFloatDoubleHashMap tFloatDoubleHashMap1 = null;
      try {
        tFloatDoubleHashMap1 = new TFloatDoubleHashMap((TFloatDoubleMap) tFloatDoubleHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0);
      TFloatDoubleProcedure tFloatDoubleProcedure0 = null;
      float float0 = 0.0F;
      float float1 = (-1422.7405F);
      double double0 = 0.0;
      tFloatDoubleHashMap0.adjustOrPutValue(float1, double0, double0);
      float float2 = 0.0F;
      tFloatDoubleHashMap0.put(float2, float0);
      tFloatDoubleHashMap0.setAutoCompactionFactor(float0);
      // Undeclared exception!
      try {
        tFloatDoubleHashMap0.retainEntries(tFloatDoubleProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 102877;
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) int0;
      floatArray0[6] = (float) int0;
      floatArray0[7] = (float) int0;
      floatArray0[8] = (float) int0;
      floatArray0[9] = (float) int0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) floatArray0[7];
      double double0 = 0.0;
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) floatArray0[4];
      doubleArray0[3] = (double) floatArray0[7];
      doubleArray0[4] = (double) floatArray0[8];
      doubleArray0[5] = (double) floatArray0[0];
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      int int1 = tFloatDoubleHashMap0.hashCode();
      assertEquals(377569452, int1);
      assertEquals(1, tFloatDoubleHashMap0.size());
      
      float float0 = 1.0F;
      TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap(int0, float0);
      tFloatDoubleHashMap1.hashCode();
      float float1 = 273.9513F;
      boolean boolean0 = tFloatDoubleHashMap1.adjustValue(float1, (double) int0);
      assertEquals(false, boolean0);
      
      float float2 = 10.0F;
      tFloatDoubleHashMap1.contains(float2);
      assertEquals(102877, tFloatDoubleHashMap1.capacity());
      assertFalse(tFloatDoubleHashMap1.equals(tFloatDoubleHashMap0));
  }

  @Test
  public void test3()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = 1584.7406F;
      int int0 = 213;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) float0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) float0;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      tFloatDoubleHashMap0.setAutoCompactionFactor(float0);
      double double0 = (-1.0);
      TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap(int0, float0, float0, double0);
      tFloatDoubleHashMap1.keySet();
      floatArray0[0] = float0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) floatArray0[0];
      doubleArray1[1] = (double) float0;
      TFloatDoubleHashMap tFloatDoubleHashMap2 = new TFloatDoubleHashMap(floatArray0, doubleArray1);
      float[] floatArray1 = tFloatDoubleHashMap2.keys();
      assertNotNull(floatArray1);
      
      doubleArray1[2] = (double) float0;
      double double1 = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = double1;
      double double2 = (-1434.6211910292);
      doubleArray1[4] = double2;
      doubleArray1[5] = (double) float0;
      double[] doubleArray2 = tFloatDoubleHashMap2.values(doubleArray1);
      assertNotNull(doubleArray2);
      
      tFloatDoubleHashMap2.tempDisableAutoCompaction();
      TFloatDoubleHashMap tFloatDoubleHashMap3 = new TFloatDoubleHashMap(floatArray0, doubleArray1);
      int int1 = 1735;
      float float1 = 823.2424F;
      TFloatDoubleHashMap tFloatDoubleHashMap4 = new TFloatDoubleHashMap(int1, float1);
      assertEquals(3, tFloatDoubleHashMap4.capacity());
      
      float float2 = 10.0F;
      boolean boolean0 = tFloatDoubleHashMap3.adjustValue(float2, float2);
      assertSame(doubleArray1, doubleArray2);
      assertEquals(false, boolean0);
      assertTrue(tFloatDoubleHashMap3.equals(tFloatDoubleHashMap2));
      assertEquals("{1584.7406=1584.7406005859375}", tFloatDoubleHashMap3.toString());
      assertEquals(17, tFloatDoubleHashMap3.capacity());
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) int0;
      floatArray0[6] = (float) int0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) floatArray0[3];
      doubleArray0[1] = (double) floatArray0[5];
      doubleArray0[2] = (double) floatArray0[1];
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) floatArray0[5];
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      int int1 = 311;
      tFloatDoubleHashMap0.ensureCapacity(int1);
      float float0 = 1254.534F;
      tFloatDoubleHashMap0.contains(float0);
      assertEquals(631, tFloatDoubleHashMap0.capacity());
      
      TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap(int0);
      int int2 = (-573);
      tFloatDoubleHashMap1.compact();
      TFloatDoubleHashMap tFloatDoubleHashMap2 = new TFloatDoubleHashMap((TFloatDoubleMap) tFloatDoubleHashMap1);
      tFloatDoubleHashMap1.putAll((TFloatDoubleMap) tFloatDoubleHashMap2);
      doubleArray0[0] = (double) floatArray0[5];
      doubleArray0[0] = (double) floatArray0[6];
      doubleArray0[1] = (double) float0;
      doubleArray0[2] = (double) floatArray0[1];
      doubleArray0[3] = (double) floatArray0[1];
      doubleArray0[4] = (double) floatArray0[0];
      doubleArray0[1] = (double) int2;
      doubleArray0[2] = (double) floatArray0[4];
      doubleArray0[3] = (double) floatArray0[0];
      doubleArray0[4] = (double) floatArray0[3];
      TFloatDoubleHashMap tFloatDoubleHashMap3 = new TFloatDoubleHashMap(int2);
      float float1 = 281.14655F;
      double double0 = tFloatDoubleHashMap3.adjustOrPutValue(float1, (double) float1, (double) int2);
      assertEquals((-573.0), double0, 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = (-1324.6426F);
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      float float2 = (-1062.537F);
      floatArray0[2] = float2;
      float float3 = (-386.8105F);
      floatArray0[3] = float3;
      float float4 = 10.0F;
      floatArray0[4] = float4;
      float float5 = 1236.3848F;
      floatArray0[5] = float5;
      float float6 = 283.42273F;
      floatArray0[6] = float6;
      float float7 = 1951.8207F;
      floatArray0[7] = float7;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) float7;
      doubleArray0[1] = (double) floatArray0[0];
      doubleArray0[2] = (double) float7;
      doubleArray0[3] = (double) floatArray0[0];
      doubleArray0[4] = (double) float5;
      doubleArray0[5] = (double) floatArray0[3];
      doubleArray0[6] = (double) float1;
      doubleArray0[7] = (double) floatArray0[1];
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      float float8 = Float.NEGATIVE_INFINITY;
      Float float9 = Float.valueOf(float8);
      AbstractMap.SimpleEntry<Double, Float> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Double, Float>((Double) doubleArray0[1], float9);
      tFloatDoubleHashMap0.equals((Object) abstractMap_SimpleEntry0);
      int int0 = 1;
      TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap(int0);
      double double0 = (-823.4985598918065);
      double double1 = 0.0;
      tFloatDoubleHashMap1.adjustOrPutValue((float) int0, double0, double1);
      float float10 = 1.0F;
      double double2 = Double.NEGATIVE_INFINITY;
      boolean boolean0 = tFloatDoubleHashMap1.adjustValue(float10, double2);
      assertEquals(1, tFloatDoubleHashMap1.size());
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 1259;
          TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0, int0);
          TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap((TFloatDoubleMap) tFloatDoubleHashMap0);
          int int1 = 1727;
          float float0 = (-2027.9065F);
          TFloatDoubleHashMap tFloatDoubleHashMap2 = new TFloatDoubleHashMap(int1, float0);
          String string0 = "v#SO$GH:ghN\"j33m=t";
          boolean boolean0 = true;
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0, boolean0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"v#SO$GH:ghN\"j33m=t\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:136)
             // sun.reflect.GeneratedConstructorAccessor14.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test7()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      float float2 = 0.0F;
      floatArray0[2] = float2;
      float float3 = (-339.31238F);
      floatArray0[3] = float3;
      float float4 = (-679.6546F);
      floatArray0[4] = float4;
      float float5 = 10.0F;
      floatArray0[5] = float5;
      float float6 = 680.652F;
      floatArray0[6] = float6;
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) floatArray0[6];
      doubleArray0[1] = (double) float1;
      doubleArray0[2] = (double) float4;
      doubleArray0[3] = (double) floatArray0[0];
      doubleArray0[4] = (double) floatArray0[4];
      doubleArray0[5] = (double) float4;
      doubleArray0[6] = (double) float4;
      doubleArray0[7] = (double) float4;
      doubleArray0[8] = (double) float2;
      doubleArray0[9] = (double) float3;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      assertEquals(5, tFloatDoubleHashMap0.size());
      assertEquals("{680.652=-679.6546020507812, 10.0=-679.6546020507812, -339.31238=0.0, -679.6546=-679.6546020507812, 0.0=-679.6546020507812}", tFloatDoubleHashMap0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      assertEquals(23, tFloatDoubleHashMap0.capacity());
      
      tFloatDoubleHashMap0.compact();
      double[] doubleArray0 = new double[5];
      double double0 = (-1215.4415315417068);
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = 1958.384200271525;
      doubleArray0[4] = double4;
      tFloatDoubleHashMap0.values(doubleArray0);
      tFloatDoubleHashMap0.keySet();
      float float0 = 1588.4376F;
      tFloatDoubleHashMap0.remove(float0);
      double double5 = 0.0;
      tFloatDoubleHashMap0.size();
      ObjectOutput objectOutput0 = null;
      tFloatDoubleHashMap0.keySet();
      tFloatDoubleHashMap0.trimToSize();
      // Undeclared exception!
      try {
        tFloatDoubleHashMap0.writeExternal(objectOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = 547.4344F;
      floatArray0[0] = float0;
      float float1 = 1445.1447F;
      floatArray0[1] = float1;
      float float2 = 0.0F;
      floatArray0[2] = float2;
      float float3 = 0.0F;
      floatArray0[3] = float3;
      float float4 = 0.0F;
      floatArray0[4] = float4;
      float float5 = 10.0F;
      floatArray0[5] = float5;
      float float6 = (-1238.4679F);
      floatArray0[6] = float6;
      float float7 = (-1929.2242F);
      floatArray0[7] = float7;
      float float8 = 1.0F;
      floatArray0[8] = float8;
      float float9 = 0.0F;
      floatArray0[9] = float9;
      double[] doubleArray0 = new double[8];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) floatArray0[6];
      doubleArray0[2] = (double) float1;
      doubleArray0[3] = (double) float3;
      doubleArray0[4] = (double) floatArray0[9];
      doubleArray0[5] = (double) floatArray0[4];
      doubleArray0[6] = (double) floatArray0[5];
      doubleArray0[7] = (double) float2;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      TDoubleCollection tDoubleCollection0 = tFloatDoubleHashMap0.valueCollection();
      assertEquals("{547.4344=1.0, 1445.1447=-1238.4678955078125, 10.0=0.0, -1238.4679=10.0, -1929.2242=0.0, 0.0=0.0}", tFloatDoubleHashMap0.toString());
      assertEquals(6, tFloatDoubleHashMap0.size());
      assertEquals(6, tDoubleCollection0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      Object object0 = null;
      AbstractMap.SimpleImmutableEntry<Double, TFloatDoubleHashMap> abstractMap_SimpleImmutableEntry0 = null;
      AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Double, TFloatDoubleHashMap>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Double, TFloatDoubleHashMap>>(object0, abstractMap_SimpleImmutableEntry0);
      Object object1 = abstractMap_SimpleEntry0.getKey();
      assertNull(object1);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 167;
      float float0 = 0.0F;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int0, float0);
      TFloatDoubleHashMap tFloatDoubleHashMap1 = null;
      try {
        tFloatDoubleHashMap1 = new TFloatDoubleHashMap((TFloatDoubleMap) tFloatDoubleHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 52;
      float float0 = 0.0F;
      float float1 = (-1.0F);
      double double0 = (-140.31317113020165);
      int int1 = 91;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(int1, float0);
      float float2 = (-272.07874F);
      double double1 = 0.0;
      tFloatDoubleHashMap0.putIfAbsent(float2, double1);
      assertEquals(1, tFloatDoubleHashMap0.size());
      
      TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap(int0, float0, float1, double0);
      assertFalse(tFloatDoubleHashMap1.equals(tFloatDoubleHashMap0));
  }

  @Test
  public void test13()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = 606.21875F;
      floatArray0[1] = float1;
      float float2 = 0.0F;
      floatArray0[2] = float2;
      float float3 = 575.81494F;
      floatArray0[3] = float3;
      float float4 = 0.0F;
      floatArray0[4] = float4;
      float float5 = 1619.085F;
      floatArray0[5] = float5;
      float float6 = 34.65718F;
      floatArray0[6] = float6;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) float3;
      doubleArray0[1] = (double) float0;
      doubleArray0[2] = (double) floatArray0[6];
      doubleArray0[3] = (double) floatArray0[5];
      doubleArray0[4] = (double) floatArray0[5];
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      int int0 = tFloatDoubleHashMap0.size();
      assertEquals("{575.81494=1619.0849609375, 606.21875=0.0, 0.0=1619.0849609375}", tFloatDoubleHashMap0.toString());
      assertEquals(3, int0);
      assertEquals(17, tFloatDoubleHashMap0.capacity());
  }

  @Test
  public void test14()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = 10.0F;
      floatArray0[0] = float0;
      float float1 = 747.80646F;
      floatArray0[1] = float1;
      float float2 = (-2038.9885F);
      floatArray0[2] = float2;
      float float3 = (-590.1192F);
      floatArray0[3] = float3;
      float float4 = (-1430.1417F);
      floatArray0[4] = float4;
      float float5 = (-300.98657F);
      floatArray0[5] = float5;
      float float6 = 0.0F;
      floatArray0[6] = float6;
      float float7 = (-676.4406F);
      floatArray0[7] = float7;
      float float8 = 1858.8015F;
      floatArray0[8] = float8;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) floatArray0[4];
      double double0 = 0.0;
      doubleArray0[1] = double0;
      double double1 = 249.75783750637737;
      doubleArray0[0] = double1;
      doubleArray0[1] = (double) float5;
      doubleArray0[2] = (double) floatArray0[6];
      doubleArray0[2] = (double) floatArray0[4];
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      boolean boolean0 = tFloatDoubleHashMap0.containsKey(floatArray0[2]);
      assertEquals("{747.80646=-300.986572265625, 10.0=249.75783750637737, -2038.9885=-1430.1417236328125}", tFloatDoubleHashMap0.toString());
      assertEquals(23, tFloatDoubleHashMap0.capacity());
      assertEquals(true, boolean0);
      assertEquals(false, tFloatDoubleHashMap0.isEmpty());
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-1161);
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TDoubleFunction tDoubleFunction0 = null;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      tFloatDoubleHashMap0.values(doubleArray0);
      TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      tFloatDoubleHashMap0.transformValues(tDoubleFunction0);
      TFloatDoubleHashMap tFloatDoubleHashMap2 = new TFloatDoubleHashMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      tFloatDoubleHashMap1.trimToSize();
      tFloatDoubleHashMap1.isEmpty();
      tFloatDoubleHashMap2.iterator();
      TFloatDoubleHashMap tFloatDoubleHashMap3 = new TFloatDoubleHashMap((TFloatDoubleMap) tFloatDoubleHashMap2);
      float float0 = 0.0F;
      double double0 = (-1766.376207468449);
      String string0 = "";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0);
      // Undeclared exception!
      try {
        stringTokenizer0.nextToken();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test16()  throws Throwable  {
//       TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
//       int int0 = (-1063);
//       TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap(int0);
//       assertEquals(0.0F, tFloatDoubleHashMap1.getNoEntryKey(), 0.01F);
//   }
}
