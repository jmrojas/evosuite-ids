/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TCharCollection;
import gnu.trove.function.TCharFunction;
import gnu.trove.map.TCharCharMap;
import gnu.trove.map.hash.TCharCharHashMap;
import gnu.trove.procedure.TCharCharProcedure;
import gnu.trove.procedure.TCharProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharCharHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.keySet()Lgnu/trove/set/TCharSet;: root-Branch
   * 2 gnu.trove.map.hash.TCharCharHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TCharCharHashMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TCharCharHashMap.setUp(I)I: root-Branch
   * 4 gnu.trove.map.hash.TCharCharHashMap.<init>()V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap();
      tCharCharHashMap0.keySet();
      assertEquals(23, tCharCharHashMap0.capacity());
  }

  //Test case number: 1
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.forEachKey(Lgnu/trove/procedure/TCharProcedure;)Z: root-Branch
   * 2 gnu.trove.map.hash.TCharCharHashMap.put(CC)C: root-Branch
   * 3 gnu.trove.map.hash.TCharCharHashMap.<init>([C[C)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 4 gnu.trove.map.hash.TCharCharHashMap.<init>([C[C)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 5 gnu.trove.map.hash.TCharCharHashMap.doPut(CCI)C: I12 Branch 40 IFGE L214 - true
   * 6 gnu.trove.map.hash.TCharCharHashMap.doPut(CCI)C: I12 Branch 40 IFGE L214 - false
   * 7 gnu.trove.map.hash.TCharCharHashMap.doPut(CCI)C: I41 Branch 41 IFEQ L221 - true
   * 8 gnu.trove.map.hash.TCharCharHashMap.doPut(CCI)C: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test1()  throws Throwable  {
      char[] charArray0 = new char[6];
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(charArray0, charArray0);
      // Undeclared exception!
      try {
        tCharCharHashMap0.forEachKey((TCharProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.clear()V: root-Branch
   * 2 gnu.trove.map.hash.TCharCharHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(0);
      tCharCharHashMap0.clear();
      assertEquals("{}", tCharCharHashMap0.toString());
  }

  //Test case number: 3
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.valueCollection()Lgnu/trove/TCharCollection;: root-Branch
   * 2 gnu.trove.map.hash.TCharCharHashMap.<init>(IF)V: root-Branch
   * 3 gnu.trove.map.hash.TCharCharHashMap$TValueView.<init>(Lgnu/trove/map/hash/TCharCharHashMap;)V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(1280, 1280);
      TCharCollection tCharCollection0 = tCharCharHashMap0.valueCollection();
      assertEquals(0, tCharCollection0.size());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.increment(C)Z: root-Branch
   * 2 gnu.trove.map.hash.TCharCharHashMap.adjustValue(CC)Z: I9 Branch 71 IFGE L477 - false
   */

  @Test
  public void test4()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap();
      boolean boolean0 = tCharCharHashMap0.increment('d');
      assertEquals(23, tCharCharHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharCharHashMap.containsKey(C)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      char[] charArray0 = new char[3];
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(charArray0, charArray0);
      tCharCharHashMap0.containsKey('y');
      assertEquals("{\u0000=\u0000}", tCharCharHashMap0.toString());
      assertEquals(1, tCharCharHashMap0.size());
      assertEquals(7, tCharCharHashMap0.capacity());
  }

  //Test case number: 6
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TCharCharHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 3 gnu.trove.map.hash.TCharCharHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 4 gnu.trove.map.hash.TCharCharHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 5 gnu.trove.map.hash.TCharCharHashMap.putIfAbsent(CC)C: I9 Branch 39 IFGE L205 - true
   * 6 gnu.trove.map.hash.TCharCharHashMap.remove(C)C: I14 Branch 46 IFLT L276 - false
   */

  @Test
  public void test6()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(1280, 1280);
      tCharCharHashMap0.putIfAbsent('(', 'r');
      assertEquals(false, tCharCharHashMap0.isEmpty());
      
      char char0 = tCharCharHashMap0.remove('(');
      assertEquals('r', char0);
  }

  //Test case number: 7
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap$TCharCharHashIterator.advance()V: root-Branch
   * 2 gnu.trove.map.hash.TCharCharHashMap$TCharCharHashIterator.key()C: root-Branch
   * 3 gnu.trove.map.hash.TCharCharHashMap$TCharCharHashIterator.value()C: root-Branch
   * 4 gnu.trove.map.hash.TCharCharHashMap.putAll(Lgnu/trove/map/TCharCharMap;)V: I15 Branch 43 IFEQ L243 - false
   * 5 gnu.trove.map.hash.TCharCharHashMap.<init>(Lgnu/trove/map/TCharCharMap;)V: I38 Branch 35 IFEQ L139 - true
   * 6 gnu.trove.map.hash.TCharCharHashMap.<init>(Lgnu/trove/map/TCharCharMap;)V: I50 Branch 36 IFEQ L143 - true
   * 7 gnu.trove.map.hash.TCharCharHashMap.iterator()Lgnu/trove/iterator/TCharCharIterator;: root-Branch
   * 8 gnu.trove.map.hash.TCharCharHashMap.putAll(Lgnu/trove/map/TCharCharMap;)V: I15 Branch 43 IFEQ L243 - true
   * 9 gnu.trove.map.hash.TCharCharHashMap.<init>(Lgnu/trove/map/TCharCharMap;)V: I10 Branch 34 IFEQ L133 - false
   * 10 gnu.trove.map.hash.TCharCharHashMap$TCharCharHashIterator.<init>(Lgnu/trove/map/hash/TCharCharHashMap;Lgnu/trove/map/hash/TCharCharHashMap;)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap();
      tCharCharHashMap0.put('k', '\u0000');
      TCharCharHashMap tCharCharHashMap1 = new TCharCharHashMap((TCharCharMap) tCharCharHashMap0);
      assertEquals(false, tCharCharHashMap0.isEmpty());
      assertEquals(23, tCharCharHashMap1.capacity());
  }

  //Test case number: 8
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.<init>(Lgnu/trove/map/TCharCharMap;)V: I38 Branch 35 IFEQ L139 - false
   * 2 gnu.trove.map.hash.TCharCharHashMap.<init>(Lgnu/trove/map/TCharCharMap;)V: I50 Branch 36 IFEQ L143 - false
   * 3 gnu.trove.map.hash.TCharCharHashMap.iterator()Lgnu/trove/iterator/TCharCharIterator;: root-Branch
   * 4 gnu.trove.map.hash.TCharCharHashMap.putAll(Lgnu/trove/map/TCharCharMap;)V: I15 Branch 43 IFEQ L243 - true
   * 5 gnu.trove.map.hash.TCharCharHashMap.<init>(Lgnu/trove/map/TCharCharMap;)V: I10 Branch 34 IFEQ L133 - false
   * 6 gnu.trove.map.hash.TCharCharHashMap$TCharCharHashIterator.<init>(Lgnu/trove/map/hash/TCharCharHashMap;Lgnu/trove/map/hash/TCharCharHashMap;)V: root-Branch
   * 7 gnu.trove.map.hash.TCharCharHashMap.<init>(IFCC)V: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(1, (-1.0F), '7', 'g');
      TCharCharHashMap tCharCharHashMap1 = new TCharCharHashMap((TCharCharMap) tCharCharHashMap0);
      assertEquals(3, tCharCharHashMap1.capacity());
      assertEquals('7', tCharCharHashMap1.getNoEntryKey());
      assertEquals('g', tCharCharHashMap1.getNoEntryValue());
  }

  //Test case number: 9
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 2 gnu.trove.map.hash.TCharCharHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 3 gnu.trove.map.hash.TCharCharHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 4 gnu.trove.map.hash.TCharCharHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   */

  @Test
  public void test9()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap();
      tCharCharHashMap0.put('k', '\u0000');
      tCharCharHashMap0.trimToSize();
      assertEquals(1, tCharCharHashMap0.size());
      assertEquals("{k=\u0000}", tCharCharHashMap0.toString());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharCharHashMap.putIfAbsent(CC)C: I9 Branch 39 IFGE L205 - false
   */

  @Test
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'y';
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(charArray0, charArray0);
      char char0 = tCharCharHashMap0.putIfAbsent('y', '[');
      assertEquals("{\u0000=\u0000, y=y}", tCharCharHashMap0.toString());
      assertEquals(2, tCharCharHashMap0.size());
      assertEquals('y', char0);
  }

  //Test case number: 11
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - false
   * 2 gnu.trove.map.hash.TCharCharHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(0);
      HashMap<Character, Character> hashMap0 = new HashMap<Character, Character>();
      hashMap0.put((Character) 'j', (Character) '\u0000');
      tCharCharHashMap0.putAll((Map<? extends Character, ? extends Character>) hashMap0);
      assertEquals("{j=\u0000}", tCharCharHashMap0.toString());
      assertEquals(1, tCharCharHashMap0.size());
  }

  //Test case number: 12
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.get(C)C: I9 Branch 44 IFGE L253 - true
   * 2 gnu.trove.map.hash.TCharCharHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 3 gnu.trove.map.hash.TCharCharHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 4 gnu.trove.map.hash.TCharCharHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 5 gnu.trove.map.hash.TCharCharHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 6 gnu.trove.map.hash.TCharCharHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 7 gnu.trove.map.hash.TCharCharHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 8 gnu.trove.map.hash.TCharCharHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - true
   */

  @Test
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[8];
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(charArray0, charArray0);
      boolean boolean0 = tCharCharHashMap0.equals((Object) tCharCharHashMap0);
      assertEquals(17, tCharCharHashMap0.capacity());
      assertEquals(1, tCharCharHashMap0.size());
      assertEquals(true, boolean0);
      assertEquals("{\u0000=\u0000}", tCharCharHashMap0.toString());
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharCharHashMap.get(C)C: I9 Branch 44 IFGE L253 - false
   */

  @Test
  public void test13()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap((int) 'n', 0.0F);
      char char0 = tCharCharHashMap0.get('\u0000');
      assertEquals('\u0000', char0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharCharHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   */

  @Test
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[3];
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(charArray0, charArray0);
      boolean boolean0 = tCharCharHashMap0.isEmpty();
      assertEquals("{\u0000=\u0000}", tCharCharHashMap0.toString());
      assertEquals(7, tCharCharHashMap0.capacity());
      assertEquals(false, boolean0);
      assertEquals(1, tCharCharHashMap0.size());
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharCharHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test15()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap();
      boolean boolean0 = tCharCharHashMap0.isEmpty();
      assertEquals(23, tCharCharHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharCharHashMap.remove(C)C: I14 Branch 46 IFLT L276 - true
   */

  @Test
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[6];
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(charArray0, charArray0);
      char char0 = tCharCharHashMap0.remove('w');
      assertEquals(17, tCharCharHashMap0.capacity());
      assertEquals('\u0000', char0);
      assertEquals(1, tCharCharHashMap0.size());
      assertEquals("{\u0000=\u0000}", tCharCharHashMap0.toString());
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.keys()[C: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TCharCharHashMap.keys()[C: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TCharCharHashMap.keys()[C: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TCharCharHashMap.keys()[C: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[6];
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(charArray0, charArray0);
      char[] charArray1 = tCharCharHashMap0.keys();
      assertEquals(17, tCharCharHashMap0.capacity());
      assertEquals("{\u0000=\u0000}", tCharCharHashMap0.toString());
      assertEquals(1, tCharCharHashMap0.size());
      assertNotNull(charArray1);
  }

  //Test case number: 18
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.keys([C)[C: I10 Branch 49 IF_ICMPGE L315 - true
   * 2 gnu.trove.map.hash.TCharCharHashMap.keys([C)[C: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TCharCharHashMap.keys([C)[C: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TCharCharHashMap.keys([C)[C: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap();
      char[] charArray0 = tCharCharHashMap0.keys(tCharCharHashMap0._set);
      assertEquals(23, tCharCharHashMap0.capacity());
      assertNotNull(charArray0);
  }

  //Test case number: 19
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.keys([C)[C: I10 Branch 49 IF_ICMPGE L315 - false
   * 2 gnu.trove.map.hash.TCharCharHashMap.keys([C)[C: I44 Branch 51 IF_ICMPNE L323 - false
   * 3 gnu.trove.map.hash.TCharCharHashMap.keys([C)[C: I37 Branch 50 IFLE L322 - true
   * 4 gnu.trove.map.hash.TCharCharHashMap.keys([C)[C: I37 Branch 50 IFLE L322 - false
   * 5 gnu.trove.map.hash.TCharCharHashMap.keys([C)[C: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '?';
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(1058, (-517.26764F));
      charArray0[3] = 'w';
      charArray0[5] = '|';
      TCharCharHashMap tCharCharHashMap1 = new TCharCharHashMap(charArray0, charArray0);
      char[] charArray1 = tCharCharHashMap1.keys(tCharCharHashMap0._set);
      assertEquals("{?=?, |=|, w=w, \u0000=\u0000}", tCharCharHashMap1.toString());
      assertNotNull(charArray1);
      assertFalse(tCharCharHashMap1.equals(tCharCharHashMap0));
  }

  //Test case number: 20
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.values()[C: I27 Branch 52 IFLE L343 - true
   * 2 gnu.trove.map.hash.TCharCharHashMap.values()[C: I27 Branch 52 IFLE L343 - false
   * 3 gnu.trove.map.hash.TCharCharHashMap.values()[C: I34 Branch 53 IF_ICMPNE L344 - true
   * 4 gnu.trove.map.hash.TCharCharHashMap.values()[C: I34 Branch 53 IF_ICMPNE L344 - false
   */

  @Test
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[3];
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(charArray0, charArray0);
      char[] charArray1 = tCharCharHashMap0.values();
      assertNotNull(charArray1);
      assertEquals(1, tCharCharHashMap0.size());
      assertEquals(7, tCharCharHashMap0.capacity());
      assertEquals("{\u0000=\u0000}", tCharCharHashMap0.toString());
  }

  //Test case number: 21
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.values([C)[C: I44 Branch 56 IF_ICMPNE L363 - false
   * 2 gnu.trove.map.hash.TCharCharHashMap.values([C)[C: I10 Branch 54 IF_ICMPGE L355 - true
   * 3 gnu.trove.map.hash.TCharCharHashMap.values([C)[C: I37 Branch 55 IFLE L362 - true
   * 4 gnu.trove.map.hash.TCharCharHashMap.values([C)[C: I37 Branch 55 IFLE L362 - false
   * 5 gnu.trove.map.hash.TCharCharHashMap.values([C)[C: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(1280, 1280);
      tCharCharHashMap0.putIfAbsent('(', 'r');
      tCharCharHashMap0.values(tCharCharHashMap0._set);
      assertEquals(false, tCharCharHashMap0.isEmpty());
      assertEquals("{(=r}", tCharCharHashMap0.toString());
  }

  //Test case number: 22
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.containsValue(C)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TCharCharHashMap.containsValue(C)Z: I30 Branch 59 IF_ICMPNE L377 - true
   * 3 gnu.trove.map.hash.TCharCharHashMap.containsValue(C)Z: I18 Branch 57 IFLE L376 - true
   * 4 gnu.trove.map.hash.TCharCharHashMap.containsValue(C)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 5 gnu.trove.map.hash.TCharCharHashMap.containsValue(C)Z: I18 Branch 57 IFLE L376 - false
   */

  @Test
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[2];
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(charArray0, charArray0);
      boolean boolean0 = tCharCharHashMap0.containsValue('{');
      assertEquals(5, tCharCharHashMap0.capacity());
      assertEquals(1, tCharCharHashMap0.size());
      assertEquals("{\u0000=\u0000}", tCharCharHashMap0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.containsValue(C)Z: I30 Branch 59 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TCharCharHashMap.containsValue(C)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TCharCharHashMap.containsValue(C)Z: I25 Branch 58 IF_ICMPNE L377 - false
   */

  @Test
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[3] = '!';
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(charArray0, charArray0);
      boolean boolean0 = tCharCharHashMap0.containsValue('!');
      assertEquals(2, tCharCharHashMap0.size());
      assertEquals("{!=!, \u0000=\u0000}", tCharCharHashMap0.toString());
      assertEquals(true, boolean0);
      assertEquals(17, tCharCharHashMap0.capacity());
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TCharCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TCharCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap();
      boolean boolean0 = tCharCharHashMap0.forEachValue((TCharProcedure) null);
      assertEquals(23, tCharCharHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 25
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TCharCharHashMap.adjustOrPutValue(CCC)C: I9 Branch 72 IFGE L491 - true
   * 3 gnu.trove.map.hash.TCharCharHashMap.adjustOrPutValue(CCC)C: I59 Branch 73 IFEQ L502 - false
   * 4 gnu.trove.map.hash.TCharCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 5 gnu.trove.map.hash.TCharCharHashMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test25()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(379, 379);
      tCharCharHashMap0.adjustOrPutValue('%', 'I', '&');
      // Undeclared exception!
      try {
        tCharCharHashMap0.forEachValue((TCharProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TCharCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TCharCharHashMap.transformValues(Lgnu/trove/function/TCharFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap((int) 'n', 0.0F);
      tCharCharHashMap0.transformValues((TCharFunction) null);
      assertEquals("{}", tCharCharHashMap0.toString());
  }

  //Test case number: 27
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.retainEntries(Lgnu/trove/procedure/TCharCharProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TCharCharHashMap.retainEntries(Lgnu/trove/procedure/TCharCharProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TCharCharHashMap.retainEntries(Lgnu/trove/procedure/TCharCharProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   * 4 gnu.trove.map.hash.TCharCharHashMap.<init>(IFCC)V: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap((int) 'I', 363.25836F, 'f', 'I');
      boolean boolean0 = tCharCharHashMap0.retainEntries((TCharCharProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 28
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.retainEntries(Lgnu/trove/procedure/TCharCharProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TCharCharHashMap.retainEntries(Lgnu/trove/procedure/TCharCharProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TCharCharHashMap.retainEntries(Lgnu/trove/procedure/TCharCharProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[8];
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(charArray0, charArray0);
      // Undeclared exception!
      try {
        tCharCharHashMap0.retainEntries((TCharCharProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 29
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.adjustValue(CC)Z: I9 Branch 71 IFGE L477 - true
   * 2 gnu.trove.map.hash.TCharCharHashMap.increment(C)Z: root-Branch
   * 3 gnu.trove.map.hash.TCharCharHashMap.<init>([C[C)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 4 gnu.trove.map.hash.TCharCharHashMap.<init>([C[C)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 5 gnu.trove.map.hash.TCharCharHashMap.doPut(CCI)C: I12 Branch 40 IFGE L214 - false
   * 6 gnu.trove.map.hash.TCharCharHashMap.doPut(CCI)C: I41 Branch 41 IFEQ L221 - true
   */

  @Test
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[6];
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(charArray0, charArray0);
      boolean boolean0 = tCharCharHashMap0.increment('\u0000');
      assertEquals("{\u0000=\u0001}", tCharCharHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 30
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.adjustOrPutValue(CCC)C: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TCharCharHashMap.adjustOrPutValue(CCC)C: I59 Branch 73 IFEQ L502 - true
   * 3 gnu.trove.map.hash.TCharCharHashMap.<init>()V: root-Branch
   */

  @Test
  public void test30()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap();
      tCharCharHashMap0.put('k', '\u0000');
      char char0 = tCharCharHashMap0.adjustOrPutValue('k', '&', '\u0000');
      assertEquals(false, tCharCharHashMap0.isEmpty());
      assertEquals('&', char0);
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharCharHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   */

  @Test
  public void test31()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(1280, 1280);
      boolean boolean0 = tCharCharHashMap0.equals((Object) "");
      assertEquals(false, boolean0);
  }

  //Test case number: 32
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   * 2 gnu.trove.map.hash.TCharCharHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   */

  @Test
  public void test32()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(0);
      tCharCharHashMap0.put('j', 'j');
      TCharCharHashMap tCharCharHashMap1 = new TCharCharHashMap((int) ']', (float) '\u0000');
      boolean boolean0 = tCharCharHashMap0.equals((Object) tCharCharHashMap1);
      assertEquals(false, tCharCharHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 33
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 2 gnu.trove.map.hash.TCharCharHashMap.<init>(I)V: root-Branch
   * 3 gnu.trove.map.hash.TCharCharHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 4 gnu.trove.map.hash.TCharCharHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 5 gnu.trove.map.hash.TCharCharHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   */

  @Test
  public void test33()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(0);
      tCharCharHashMap0.put('j', 'j');
      int int0 = tCharCharHashMap0.hashCode();
      assertEquals("{j=j}", tCharCharHashMap0.toString());
      assertEquals(0, int0);
  }

  //Test case number: 34
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap$1.execute(CC)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TCharCharHashMap.toString()Ljava/lang/String;: root-Branch
   * 3 gnu.trove.map.hash.TCharCharHashMap.put(CC)C: root-Branch
   * 4 gnu.trove.map.hash.TCharCharHashMap.forEachEntry(Lgnu/trove/procedure/TCharCharProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 5 gnu.trove.map.hash.TCharCharHashMap.forEachEntry(Lgnu/trove/procedure/TCharCharProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 6 gnu.trove.map.hash.TCharCharHashMap.forEachEntry(Lgnu/trove/procedure/TCharCharProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 7 gnu.trove.map.hash.TCharCharHashMap.forEachEntry(Lgnu/trove/procedure/TCharCharProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 8 gnu.trove.map.hash.TCharCharHashMap.forEachEntry(Lgnu/trove/procedure/TCharCharProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 9 gnu.trove.map.hash.TCharCharHashMap$1.<init>(Lgnu/trove/map/hash/TCharCharHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 10 gnu.trove.map.hash.TCharCharHashMap$1.execute(CC)Z: I4 Branch 115 IFEQ L1233 - false
   */

  @Test
  public void test34()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(1280, 1280);
      tCharCharHashMap0.putIfAbsent('(', 'r');
      tCharCharHashMap0.put('\u0000', '3');
      String string0 = tCharCharHashMap0.toString();
      assertEquals(2, tCharCharHashMap0.size());
      assertEquals("{(=r, \u0000=3}", string0);
  }

  //Test case number: 35
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TCharCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 2 gnu.trove.map.hash.TCharCharHashMap.setUp(I)I: root-Branch
   * 3 gnu.trove.map.hash.TCharCharHashMap.<init>(IF)V: root-Branch
   * 4 gnu.trove.map.hash.TCharCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 5 gnu.trove.map.hash.TCharCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 6 gnu.trove.map.hash.TCharCharHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 7 gnu.trove.map.hash.TCharCharHashMap.putIfAbsent(CC)C: I9 Branch 39 IFGE L205 - true
   * 8 gnu.trove.map.hash.TCharCharHashMap.doPut(CCI)C: I12 Branch 40 IFGE L214 - true
   * 9 gnu.trove.map.hash.TCharCharHashMap.doPut(CCI)C: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test35()  throws Throwable  {
      TCharCharHashMap tCharCharHashMap0 = new TCharCharHashMap(1280, 1280);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tCharCharHashMap0.putIfAbsent('(', 'r');
      tCharCharHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals("{(=r}", tCharCharHashMap0.toString());
      assertEquals(1, tCharCharHashMap0.size());
  }
}
