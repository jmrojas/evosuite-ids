/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TShortCollection;
import gnu.trove.map.TFloatShortMap;
import gnu.trove.map.hash.TFloatShortHashMap;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatShortHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


//   @Test
//   public void test0()  throws Throwable  {
//       int int0 = 0;
//       int int1 = (-770);
//       float float0 = 0.0F;
//       short short0 = (short) (-1106);
//       int int2 = 200;
//       float float1 = 736.333F;
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int2, (float) short0, float1, short0);
//       short[] shortArray0 = new short[3];
//       shortArray0[0] = short0;
//       shortArray0[1] = short0;
//       shortArray0[2] = short0;
//       short[] shortArray1 = tFloatShortHashMap0.values(shortArray0);
//       assertEquals(736.333F, tFloatShortHashMap0.getNoEntryKey(), 0.01F);
//       assertNotNull(shortArray1);
//       
//       TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap(int1, (float) int0, float0, short0);
//       float float2 = 0.0F;
//       TFloatShortHashMap tFloatShortHashMap2 = new TFloatShortHashMap(int0, float2);
//       tFloatShortHashMap1.putAll((TFloatShortMap) tFloatShortHashMap2);
//       assertEquals(0, tFloatShortHashMap2.getNoEntryValue());
//       assertEquals(0.0F, tFloatShortHashMap2.getNoEntryKey(), 0.01F);
//       assertEquals(-1106, tFloatShortHashMap1.getNoEntryValue());
//       
//       int int3 = (-1190);
//       TFloatShortHashMap tFloatShortHashMap3 = new TFloatShortHashMap(int3);
//       float float3 = tFloatShortHashMap3.getNoEntryKey();
//       assertEquals(0.0F, float3, 0.01F);
//       
//       short short1 = tFloatShortHashMap3.remove((float) int0);
//       assertEquals((short)0, short1);
//       
//       TFloatShortHashMap tFloatShortHashMap4 = new TFloatShortHashMap(int0);
//       assertTrue(tFloatShortHashMap4.equals(tFloatShortHashMap3));
//   }

//   @Test
//   public void test1()  throws Throwable  {
//       int int0 = (-1);
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int0, int0);
//       Locale locale0 = Locale.CHINA;
//       String string0 = locale0.getISO3Language();
//       tFloatShortHashMap0.equals((Object) string0);
//       TShortCollection tShortCollection0 = tFloatShortHashMap0.valueCollection();
//       assertEquals(0.0F, tFloatShortHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals(0, tShortCollection0.getNoEntryValue());
//   }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 1557;
          int int1 = 0;
          float float0 = (-623.184F);
          float float1 = (-1838.7014F);
          short short0 = (short)382;
          TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int1, float0, float1, short0);
          tFloatShortHashMap0.keys();
          tFloatShortHashMap0.getAutoCompactionFactor();
          String string0 = "";
          File file0 = new File(string0);
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:165)
             // sun.reflect.GeneratedConstructorAccessor13.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

//   @Test
//   public void test3()  throws Throwable  {
//       int int0 = 1;
//       float[] floatArray0 = new float[1];
//       floatArray0[0] = (float) int0;
//       short[] shortArray0 = new short[6];
//       short short0 = (short) (-20711);
//       shortArray0[0] = short0;
//       short short1 = (short)159;
//       shortArray0[1] = short1;
//       short short2 = (short)0;
//       shortArray0[2] = short2;
//       short short3 = (short)1909;
//       shortArray0[3] = short3;
//       short short4 = (short) (-2021);
//       shortArray0[4] = short4;
//       short short5 = (short)0;
//       shortArray0[5] = short5;
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
//       TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap((TFloatShortMap) tFloatShortHashMap0);
//       tFloatShortHashMap1.isEmpty();
//       assertEquals(17, tFloatShortHashMap0.capacity());
//       assertEquals(0.0F, tFloatShortHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals("{1.0=-20711}", tFloatShortHashMap0.toString());
//       assertEquals(0, tFloatShortHashMap0.getNoEntryValue());
//       
//       float float0 = 314.40665F;
//       TFloatShortHashMap tFloatShortHashMap2 = new TFloatShortHashMap(int0, float0);
//       tFloatShortHashMap2.capacity();
//       TFloatShortHashMap tFloatShortHashMap3 = new TFloatShortHashMap();
//       TFloatShortHashMap tFloatShortHashMap4 = new TFloatShortHashMap();
//       tFloatShortHashMap3.putAll((TFloatShortMap) tFloatShortHashMap4);
//       float float1 = (-1156.6323F);
//       float float2 = (-238.4693F);
//       boolean boolean0 = tFloatShortHashMap2.containsKey(float2);
//       assertEquals(false, boolean0);
//       assertEquals(0, tFloatShortHashMap2.getNoEntryValue());
//       assertEquals(0.0F, tFloatShortHashMap2.getNoEntryKey(), 0.01F);
//       
//       tFloatShortHashMap3.trimToSize();
//       // Undeclared exception!
//       try {
//         tFloatShortHashMap3.setAutoCompactionFactor(float1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Factor must be >= 0: -1156.6323
//          //
//       }
//   }

  @Test
  public void test4()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      short[] shortArray0 = new short[2];
      short short0 = (short)0;
      int int0 = 0;
      float float1 = (-1663.8469F);
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((int) short0, float0, floatArray0[0], short0);
      float float2 = 0.0F;
      tFloatShortHashMap0.adjustValue(float2, short0);
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap(int0, float1);
      shortArray0[0] = short0;
      short short1 = (short)1802;
      shortArray0[1] = short1;
      shortArray0[0] = short1;
      shortArray0[1] = short1;
      String string0 = "bw;z>TE*-M|z@#";
      File file0 = new File(string0);
      String string1 = "aT";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(file0, string1);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // aT
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = 421.32648F;
      floatArray0[0] = float0;
      float float1 = (-877.6559F);
      floatArray0[1] = float1;
      float float2 = 1619.9498F;
      floatArray0[2] = float2;
      float float3 = (-779.93353F);
      floatArray0[3] = float3;
      float float4 = 493.48422F;
      floatArray0[4] = float4;
      short[] shortArray0 = new short[9];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)202;
      shortArray0[2] = short2;
      short short3 = (short) (-1853);
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)208;
      shortArray0[5] = short5;
      short short6 = (short)609;
      shortArray0[6] = short6;
      short short7 = (short)0;
      shortArray0[7] = short7;
      short short8 = (short)0;
      shortArray0[8] = short8;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      TFloatShortMap tFloatShortMap0 = null;
      TFloatShortHashMap tFloatShortHashMap1 = null;
      try {
        tFloatShortHashMap1 = new TFloatShortHashMap(tFloatShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test6()  throws Throwable  {
//       int int0 = (-860);
//       int int1 = 199;
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int1);
//       float[] floatArray0 = new float[6];
//       floatArray0[0] = (float) int0;
//       floatArray0[1] = (float) int0;
//       floatArray0[2] = (float) int0;
//       floatArray0[3] = (float) int0;
//       floatArray0[4] = (float) int0;
//       floatArray0[5] = (float) int0;
//       short[] shortArray0 = new short[9];
//       short short0 = (short) (-1);
//       shortArray0[0] = short0;
//       short short1 = (short)1301;
//       shortArray0[1] = short1;
//       short short2 = (short)1;
//       shortArray0[2] = short2;
//       short short3 = (short)0;
//       shortArray0[3] = short3;
//       short short4 = (short)996;
//       shortArray0[4] = short4;
//       short short5 = (short)1;
//       shortArray0[5] = short5;
//       short short6 = (short) (-1105);
//       shortArray0[6] = short6;
//       short short7 = (short)1779;
//       shortArray0[7] = short7;
//       short short8 = (short)5471;
//       shortArray0[8] = short8;
//       TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap(floatArray0, shortArray0);
//       tFloatShortHashMap1.isEmpty();
//       assertEquals(23, tFloatShortHashMap1.capacity());
//       assertEquals(1, tFloatShortHashMap1.size());
//       assertEquals("{-860.0=1}", tFloatShortHashMap1.toString());
//       
//       float float0 = (-1.0F);
//       TFloatShortHashMap tFloatShortHashMap2 = new TFloatShortHashMap(int0);
//       String string0 = tFloatShortHashMap2.toString();
//       assertNotNull(string0);
//       
//       short short9 = (short) (-1);
//       TFloatShortHashMap tFloatShortHashMap3 = new TFloatShortHashMap(int0, (float) int0, float0, short9);
//       tFloatShortHashMap3.tempDisableAutoCompaction();
//       assertEquals((-1.0F), tFloatShortHashMap3.getNoEntryKey(), 0.01F);
//       assertEquals(-1, tFloatShortHashMap3.getNoEntryValue());
//       
//       TFloatShortHashMap tFloatShortHashMap4 = new TFloatShortHashMap((int) short8);
//       assertEquals(0.0F, tFloatShortHashMap4.getNoEntryKey(), 0.01F);
//       assertEquals(0, tFloatShortHashMap4.getNoEntryValue());
//   }

  @Test
  public void test7()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = 0.5F;
      floatArray0[1] = float1;
      float float2 = 1307.9031F;
      int int0 = 1;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int0, float0);
      tFloatShortHashMap0.valueCollection();
      floatArray0[2] = float2;
      float float3 = (-1699.2444F);
      floatArray0[3] = float3;
      float float4 = 0.0F;
      floatArray0[4] = float4;
      float float5 = (-1858.9149F);
      floatArray0[5] = float5;
      float float6 = 1600.1235F;
      floatArray0[6] = float6;
      short[] shortArray0 = new short[4];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short) (-23057);
      shortArray0[1] = short1;
      short short2 = (short)202;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap(floatArray0, shortArray0);
      float float7 = 0.0F;
      boolean boolean0 = tFloatShortHashMap1.increment(float7);
      assertEquals("{1307.9031=202, -1699.2444=0, 0.5=-23057, 0.0=1}", tFloatShortHashMap1.toString());
      assertEquals(true, boolean0);
  }

//   @Test
//   public void test8()  throws Throwable  {
//       float[] floatArray0 = new float[8];
//       float float0 = 0.5F;
//       floatArray0[0] = float0;
//       float float1 = 0.0F;
//       floatArray0[1] = float1;
//       float float2 = 1289.0387F;
//       floatArray0[2] = float2;
//       float float3 = 1243.7775F;
//       floatArray0[3] = float3;
//       float float4 = 0.0F;
//       floatArray0[4] = float4;
//       float float5 = Float.POSITIVE_INFINITY;
//       floatArray0[5] = float5;
//       float float6 = (-125.05487F);
//       floatArray0[6] = float6;
//       float float7 = 1662.2817F;
//       floatArray0[7] = float7;
//       short[] shortArray0 = new short[9];
//       short short0 = (short) (-401);
//       shortArray0[0] = short0;
//       short short1 = (short)0;
//       shortArray0[1] = short1;
//       short short2 = (short)0;
//       shortArray0[2] = short2;
//       short short3 = (short)136;
//       shortArray0[3] = short3;
//       short short4 = (short) (-1106);
//       shortArray0[4] = short4;
//       short short5 = (short) (-1);
//       shortArray0[5] = short5;
//       short short6 = (short) (-16819);
//       shortArray0[6] = short6;
//       short short7 = (short)0;
//       shortArray0[7] = short7;
//       short short8 = (short)0;
//       shortArray0[8] = short8;
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
//       assertEquals(0, tFloatShortHashMap0.getNoEntryValue());
//       assertEquals(7, tFloatShortHashMap0.size());
//       assertEquals("{1243.7775=136, 0.5=-401, -125.05487=-16819, 1662.2817=0, 1289.0387=0, Infinity=-1, 0.0=-1106}", tFloatShortHashMap0.toString());
//   }

  @Test
  public void test9()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      byte[] byteArray0 = tFloatShortHashMap0._states;
      String string0 = tFloatShortHashMap0.toString();
      assertNotNull(string0);
      
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // {} (No such file or directory)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      int int1 = (-994);
      float float0 = 1513.1343F;
      short short0 = (short)760;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int1, float0, float0, short0);
      short short1 = (short) (-1977);
      tFloatShortHashMap0.put((float) int0, short1);
      float float1 = 886.4061F;
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap(int0);
      tFloatShortHashMap1.clear();
      String string0 = "=Xp_X6%,eM|*;on:-;";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // =Xp_X6%,eM|*;on:-;
         //
      }
  }

//   @Test
//   public void test11()  throws Throwable  {
//       int int0 = 354;
//       float float0 = 1655.9718F;
//       float float1 = (-1.0F);
//       short short0 = (short) (-1);
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int0, float0, float1, short0);
//       float[] floatArray0 = new float[6];
//       floatArray0[0] = (float) short0;
//       floatArray0[1] = float1;
//       floatArray0[2] = (float) int0;
//       floatArray0[3] = float0;
//       floatArray0[4] = (float) short0;
//       floatArray0[5] = (float) short0;
//       float[] floatArray1 = tFloatShortHashMap0.keys(floatArray0);
//       assertEquals(-1, tFloatShortHashMap0.getNoEntryValue());
//       assertNotNull(floatArray1);
//       assertEquals((-1.0F), tFloatShortHashMap0.getNoEntryKey(), 0.01F);
//       
//       TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap();
//       tFloatShortHashMap1.tempDisableAutoCompaction();
//       tFloatShortHashMap1.toString();
//       tFloatShortHashMap1.isEmpty();
//       float float2 = tFloatShortHashMap1.getNoEntryKey();
//       assertEquals(23, tFloatShortHashMap1.capacity());
//       assertEquals(0, tFloatShortHashMap1.getNoEntryValue());
//       assertEquals(0.0F, float2, 0.01F);
//   }

  @Test
  public void test12()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      int int0 = 1;
      PipedInputStream pipedInputStream0 = new PipedInputStream(int0);
      int int1 = 0;
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream((InputStream) pipedInputStream0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-1267);
      int int1 = (-807);
      float float0 = 10.0F;
      short short0 = (short) (-183);
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int1, float0, float0, short0);
      String string0 = "";
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         //  (No such file or directory)
         //
      }
  }

//   @Test
//   public void test14()  throws Throwable  {
//       float[] floatArray0 = new float[8];
//       float float0 = (-992.2446F);
//       floatArray0[0] = float0;
//       float float1 = Float.NEGATIVE_INFINITY;
//       floatArray0[1] = float1;
//       float float2 = 0.0F;
//       floatArray0[2] = float2;
//       float float3 = 182.4302F;
//       floatArray0[3] = float3;
//       float float4 = 344.0036F;
//       floatArray0[4] = float4;
//       float float5 = 0.0F;
//       floatArray0[5] = float5;
//       float float6 = 0.0F;
//       floatArray0[6] = float6;
//       float float7 = (-1363.7762F);
//       floatArray0[7] = float7;
//       short[] shortArray0 = new short[9];
//       short short0 = (short)100;
//       shortArray0[0] = short0;
//       short short1 = (short)0;
//       shortArray0[1] = short1;
//       short short2 = (short)0;
//       shortArray0[2] = short2;
//       short short3 = (short) (-271);
//       shortArray0[3] = short3;
//       short short4 = (short)0;
//       shortArray0[4] = short4;
//       short short5 = (short)0;
//       shortArray0[5] = short5;
//       short short6 = (short)1318;
//       shortArray0[6] = short6;
//       short short7 = (short)0;
//       shortArray0[7] = short7;
//       short short8 = (short)0;
//       shortArray0[8] = short8;
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
//       tFloatShortHashMap0.tempDisableAutoCompaction();
//       assertEquals(0, tFloatShortHashMap0.getNoEntryValue());
//       assertEquals(0.0F, tFloatShortHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals("{-1363.7762=0, 182.4302=-271, 344.0036=0, -992.2446=0, 0.0=1318}", tFloatShortHashMap0.toString());
//   }
}
