/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableFloatSet;
import gnu.trove.map.TFloatDoubleMap;
import gnu.trove.map.hash.TFloatDoubleHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.procedure.TFloatDoubleProcedure;
import gnu.trove.procedure.TFloatProcedure;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableFloatDoubleMapEvoSuite_StrongMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 6 covered goals:
   * 1 Strong Mutation 11: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.isEmpty()Z:64 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.isEmpty()Z: root-Branch
   * 3 Strong Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.<init>(Lgnu/trove/map/TFloatDoubleMap;)V:58 - ReplaceComparisonOperator != null -> = null
   * 4 Strong Mutation 11: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.isEmpty()Z:64 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 5 Strong Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.isEmpty()Z:64 - DeleteStatement: isEmpty()Z
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.<init>(Lgnu/trove/map/TFloatDoubleMap;)V: I17 Branch 1 IFNONNULL L58 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 1307.7747226153183;
      tUnmodifiableFloatDoubleMap0.isEmpty();
      doubleArray0[2] = 1.0;
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 Strong Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.isEmpty()Z:64 - DeleteStatement: isEmpty()Z
   */

  @Test
  public void test1()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      boolean boolean0 = tUnmodifiableFloatDoubleMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 Strong Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.containsKey(F)Z:65 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.containsKey(F)Z: root-Branch
   * 3 Strong Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.containsKey(F)Z:65 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   */

  @Test
  public void test2()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 1307.7747226153183;
      tUnmodifiableFloatDoubleMap0.containsKey(Float.NEGATIVE_INFINITY);
      doubleArray0[2] = 1.0;
  }

  //Test case number: 3
  /*
   * 4 covered goals:
   * 1 Strong Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.containsKey(F)Z:65 - DeleteStatement: containsKey(F)Z
   * 2 Strong Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.containsKey(F)Z:65 - InsertUnaryOp Negation of key
   * 3 Strong Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.containsKey(F)Z:65 - InsertUnaryOp Negation of key
   * 4 Strong Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.containsKey(F)Z:65 - DeleteStatement: containsKey(F)Z
   */

  @Test
  public void test3()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1223.1079F;
      double[] doubleArray0 = new double[5];
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      boolean boolean0 = tUnmodifiableFloatDoubleMap0.containsKey(1223.1079F);
      assertEquals(true, boolean0);
  }

  //Test case number: 4
  /*
   * 3 covered goals:
   * 1 Strong Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.containsValue(D)Z:66 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 2 Strong Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.containsValue(D)Z:66 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.containsValue(D)Z: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 1307.7747226153183;
      tUnmodifiableFloatDoubleMap0.containsValue(1672.1609550921626);
      doubleArray0[2] = 1.0;
  }

  //Test case number: 5
  /*
   * 4 covered goals:
   * 1 Strong Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.containsValue(D)Z:66 - DeleteStatement: containsValue(D)Z
   * 2 Strong Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.containsValue(D)Z:66 - InsertUnaryOp Negation of val
   * 3 Strong Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.containsValue(D)Z:66 - InsertUnaryOp Negation of val
   * 4 Strong Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.containsValue(D)Z:66 - DeleteStatement: containsValue(D)Z
   */

  @Test
  public void test5()  throws Throwable  {
      float[] floatArray0 = new float[10];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2.0F;
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      boolean boolean0 = tUnmodifiableFloatDoubleMap0.containsValue((double) 2.0F);
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 5 covered goals:
   * 1 Strong Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.get(F)D:67 - InsertUnaryOp Negation of key
   * 2 Strong Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.get(F)D:67 - DeleteStatement: get(F)D
   * 3 Strong Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.get(F)D:67 - DeleteStatement: get(F)D
   * 4 Strong Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.get(F)D:67 - InsertUnaryOp Negation of key
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.get(F)D: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(2004663929, 2004663929);
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      tFloatDoubleHashMap0.putIfAbsent((-823.7795F), (-1737.6909971442042));
      double double0 = tUnmodifiableFloatDoubleMap0.get((-823.7795F));
      assertEquals((-1737.6909971442042), double0, 0.01D);
  }

  //Test case number: 7
  /*
   * 5 covered goals:
   * 1 Strong Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.keys()[F:83 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 2 Strong Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.keys()[F:83 - DeleteStatement: keys()[F
   * 3 Strong Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.keys()[F:83 - DeleteStatement: keys()[F
   * 4 Strong Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.keys()[F:83 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.keys()[F: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap((-1));
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      float[] floatArray0 = tUnmodifiableFloatDoubleMap0.keys();
      assertNotNull(floatArray0);
  }

  //Test case number: 8
  /*
   * 5 covered goals:
   * 1 Strong Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.keys([F)[F:84 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 2 Strong Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.keys([F)[F:84 - DeleteStatement: keys([F)[F
   * 3 Strong Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.keys([F)[F:84 - DeleteStatement: keys([F)[F
   * 4 Strong Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.keys([F)[F:84 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.keys([F)[F: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap((-1818));
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      float[] floatArray0 = tUnmodifiableFloatDoubleMap0.keys(tFloatDoubleHashMap0._set);
      assertNotNull(floatArray0);
  }

  //Test case number: 9
  /*
   * 5 covered goals:
   * 1 Strong Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.values()[D:91 - DeleteStatement: values()[D
   * 2 Strong Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.values()[D:91 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 3 Strong Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.values()[D:91 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 4 Strong Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.values()[D:91 - DeleteStatement: values()[D
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.values()[D: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap((-1818));
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      double[] doubleArray0 = tUnmodifiableFloatDoubleMap0.values();
      assertNotNull(doubleArray0);
  }

  //Test case number: 10
  /*
   * 5 covered goals:
   * 1 Strong Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.values([D)[D:92 - DeleteStatement: values([D)[D
   * 2 Strong Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.values([D)[D:92 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 3 Strong Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.values([D)[D:92 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 4 Strong Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.values([D)[D:92 - DeleteStatement: values([D)[D
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.values([D)[D: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap((-1818));
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = tUnmodifiableFloatDoubleMap0.values(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
  }

  //Test case number: 11
  /*
   * 7 covered goals:
   * 1 Strong Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.equals(Ljava/lang/Object;)Z:94 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 2 Strong Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.equals(Ljava/lang/Object;)Z:94 - ReplaceComparisonOperator == -> !=
   * 3 Strong Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.equals(Ljava/lang/Object;)Z:94 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 4 Strong Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.equals(Ljava/lang/Object;)Z:94 - ReplaceConstant - 0 -> 1
   * 5 Strong Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.equals(Ljava/lang/Object;)Z:94 - ReplaceComparisonOperator == -> !=
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L94 - false
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L94 - true
   */

  @Test
  public void test11()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1645.2289F);
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(0, (-1.0F));
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      tUnmodifiableFloatDoubleMap0.equals((Object) "");
      floatArray0[0] = (-500.8997F);
  }

  //Test case number: 12
  /*
   * 5 covered goals:
   * 1 Strong Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.equals(Ljava/lang/Object;)Z:94 - ReplaceConstant - 1 -> 0
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L94 - true
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L94 - false
   * 4 Strong Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.equals(Ljava/lang/Object;)Z:94 - ReplaceConstant - 1 -> 0
   * 5 Strong Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.equals(Ljava/lang/Object;)Z:94 - DeleteStatement: equals(Ljava/lang/Object;)Z
   */

  @Test
  public void test12()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(328213, 661.7634F, (-918.9047F), (double) 328213);
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      boolean boolean0 = tUnmodifiableFloatDoubleMap0.equals((Object) tFloatDoubleHashMap0);
      assertEquals(true, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 Strong Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.equals(Ljava/lang/Object;)Z:94 - DeleteStatement: equals(Ljava/lang/Object;)Z
   */

  @Test
  public void test13()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap((-1));
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap1 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      boolean boolean0 = tUnmodifiableFloatDoubleMap0.equals((Object) "/");
      assertTrue(tUnmodifiableFloatDoubleMap0.equals(tUnmodifiableFloatDoubleMap1));
      assertEquals(false, boolean0);
  }

  //Test case number: 14
  /*
   * 3 covered goals:
   * 1 Strong Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.equals(Ljava/lang/Object;)Z:94 - ReplaceComparisonOperator == -> !=
   * 2 Strong Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.equals(Ljava/lang/Object;)Z:94 - ReplaceComparisonOperator == -> !=
   * 3 Strong Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.equals(Ljava/lang/Object;)Z:94 - ReplaceConstant - 0 -> 1
   */

  @Test
  public void test14()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap((-1));
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      boolean boolean0 = tUnmodifiableFloatDoubleMap0.equals((Object) "/");
      assertEquals(false, boolean0);
  }

  //Test case number: 15
  /*
   * 3 covered goals:
   * 1 Strong Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.hashCode()I:95 - DeleteStatement: hashCode()I
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.hashCode()I: root-Branch
   * 3 Strong Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.hashCode()I:95 - DeleteStatement: hashCode()I
   */

  @Test
  public void test15()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 10;
      double[] doubleArray0 = new double[6];
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      int int0 = tUnmodifiableFloatDoubleMap0.hashCode();
      assertEquals(1338361176, int0);
  }

  //Test case number: 16
  /*
   * 5 covered goals:
   * 1 Strong Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.toString()Ljava/lang/String;:96 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 2 Strong Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.toString()Ljava/lang/String;:96 - DeleteStatement: toString()Ljava/lang/String;
   * 3 Strong Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.toString()Ljava/lang/String;:96 - DeleteStatement: toString()Ljava/lang/String;
   * 4 Strong Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.toString()Ljava/lang/String;:96 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap((-1));
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      String string0 = tUnmodifiableFloatDoubleMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 17
  /*
   * 3 covered goals:
   * 1 Strong Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.getNoEntryKey()F:97 - DeleteStatement: getNoEntryKey()F
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.getNoEntryKey()F: root-Branch
   * 3 Strong Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.getNoEntryKey()F:97 - DeleteStatement: getNoEntryKey()F
   */

//   @Test
//   public void test17()  throws Throwable  {
//       TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
//       TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
//       tUnmodifiableFloatDoubleMap0.getNoEntryKey();
//       TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap((-544), 0.0F, (-1.0F), 7.780623566389508);
//       TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap1 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap1);
//       assertEquals((-1.0F), tUnmodifiableFloatDoubleMap1.getNoEntryKey(), 0.01F);
//   }

  //Test case number: 18
  /*
   * 2 covered goals:
   * 1 Strong Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.getNoEntryKey()F:97 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 2 Strong Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.getNoEntryKey()F:97 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   */

  @Test
  public void test18()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 1307.7747226153183;
      tUnmodifiableFloatDoubleMap0.getNoEntryKey();
      doubleArray0[2] = 1.0;
  }

  //Test case number: 19
  /*
   * 3 covered goals:
   * 1 Strong Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.getNoEntryValue()D:98 - DeleteStatement: getNoEntryValue()D
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.getNoEntryValue()D: root-Branch
   * 3 Strong Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.getNoEntryValue()D:98 - DeleteStatement: getNoEntryValue()D
   */

  @Test
  public void test19()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      tUnmodifiableFloatDoubleMap0.getNoEntryValue();
      TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap((-544), 0.0F, (-1.0F), 7.780623566389508);
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap1 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap1);
      assertEquals(7.780623566389508, tUnmodifiableFloatDoubleMap1.getNoEntryValue(), 0.01D);
  }

  //Test case number: 20
  /*
   * 2 covered goals:
   * 1 Strong Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.getNoEntryValue()D:98 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 2 Strong Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.getNoEntryValue()D:98 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   */

  @Test
  public void test20()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 1307.7747226153183;
      tUnmodifiableFloatDoubleMap0.getNoEntryValue();
      doubleArray0[2] = 1.0;
  }

  //Test case number: 21
  /*
   * 5 covered goals:
   * 1 Strong Mutation 56: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z:101 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 2 Strong Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z:101 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z
   * 3 Strong Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z:101 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z
   * 4 Strong Mutation 56: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z:101 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1645.2289F);
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(0, (-1.0F));
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      tUnmodifiableFloatDoubleMap0.forEachKey((TFloatProcedure) null);
      floatArray0[0] = (-500.8997F);
  }

  //Test case number: 22
  /*
   * 5 covered goals:
   * 1 Strong Mutation 58: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:104 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 2 Strong Mutation 59: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:104 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z
   * 3 Strong Mutation 59: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:104 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z
   * 4 Strong Mutation 58: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z:104 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap();
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 1307.7747226153183;
      tUnmodifiableFloatDoubleMap0.forEachValue((TDoubleProcedure) null);
      doubleArray0[2] = 1.0;
  }

  //Test case number: 23
  /*
   * 5 covered goals:
   * 1 Strong Mutation 60: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.forEachEntry(Lgnu/trove/procedure/TFloatDoubleProcedure;)Z:107 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 2 Strong Mutation 61: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.forEachEntry(Lgnu/trove/procedure/TFloatDoubleProcedure;)Z:107 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TFloatDoubleProcedure;)Z
   * 3 Strong Mutation 61: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.forEachEntry(Lgnu/trove/procedure/TFloatDoubleProcedure;)Z:107 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TFloatDoubleProcedure;)Z
   * 4 Strong Mutation 60: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.forEachEntry(Lgnu/trove/procedure/TFloatDoubleProcedure;)Z:107 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.forEachEntry(Lgnu/trove/procedure/TFloatDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      float[] floatArray0 = new float[8];
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(239, (-205.22183F), (-1.0F), 358.18369406220205);
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      floatArray0[1] = (-205.22183F);
      tUnmodifiableFloatDoubleMap0.forEachEntry((TFloatDoubleProcedure) null);
      floatArray0[1] = 1042.6849F;
  }

  //Test case number: 24
  /*
   * 17 covered goals:
   * 1 Strong Mutation 1: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap$1.key()F:114 - DeleteStatement: key()F
   * 2 Strong Mutation 0: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap$1.key()F:114 - DeleteField: iterLgnu/trove/iterator/TFloatDoubleIterator;
   * 3 Strong Mutation 1: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap$1.key()F:114 - DeleteStatement: key()F
   * 4 Strong Mutation 2: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap$1.value()D:115 - DeleteField: iterLgnu/trove/iterator/TFloatDoubleIterator;
   * 5 Strong Mutation 4: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap$1.advance()V:116 - DeleteField: iterLgnu/trove/iterator/TFloatDoubleIterator;
   * 6 Strong Mutation 5: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap$1.advance()V:116 - DeleteStatement: advance()V
   * 7 Strong Mutation 6: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap$1.hasNext()Z:117 - DeleteField: iterLgnu/trove/iterator/TFloatDoubleIterator;
   * 8 Strong Mutation 7: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap$1.hasNext()Z:117 - DeleteStatement: hasNext()Z
   * 9 Strong Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.size()I:63 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 10 Strong Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.size()I:63 - DeleteStatement: size()I
   * 11 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap$1.value()D: root-Branch
   * 12 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap$1.hasNext()Z: root-Branch
   * 13 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap$1.advance()V: root-Branch
   * 14 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap$1.key()F: root-Branch
   * 15 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap$1.<init>(Lgnu/trove/impl/unmodifiable/TUnmodifiableFloatDoubleMap;)V: root-Branch
   * 16 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.size()I: root-Branch
   * 17 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.iterator()Lgnu/trove/iterator/TFloatDoubleIterator;: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1645.2289F);
      double[] doubleArray0 = new double[14];
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap((TFloatDoubleMap) tUnmodifiableFloatDoubleMap0);
      assertEquals("{-1645.2289=0.0, 0.0=0.0}", tFloatDoubleHashMap1.toString());
      assertEquals(2, tUnmodifiableFloatDoubleMap0.size());
  }

  //Test case number: 25
  /*
   * 2 covered goals:
   * 1 Strong Mutation 3: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap$1.value()D:115 - DeleteStatement: value()D
   * 2 Strong Mutation 3: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap$1.value()D:115 - DeleteStatement: value()D
   */

  @Test
  public void test25()  throws Throwable  {
      float[] floatArray0 = new float[7];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-500.8997F);
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap((TFloatDoubleMap) tUnmodifiableFloatDoubleMap0);
      assertEquals(1, tUnmodifiableFloatDoubleMap0.size());
      assertEquals("{0.0=-500.8996887207031}", tFloatDoubleHashMap1.toString());
  }

  //Test case number: 26
  /*
   * 8 covered goals:
   * 1 Strong Mutation 7: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap$1.hasNext()Z:117 - DeleteStatement: hasNext()Z
   * 2 Strong Mutation 0: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap$1.key()F:114 - DeleteField: iterLgnu/trove/iterator/TFloatDoubleIterator;
   * 3 Strong Mutation 2: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap$1.value()D:115 - DeleteField: iterLgnu/trove/iterator/TFloatDoubleIterator;
   * 4 Strong Mutation 4: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap$1.advance()V:116 - DeleteField: iterLgnu/trove/iterator/TFloatDoubleIterator;
   * 5 Strong Mutation 5: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap$1.advance()V:116 - DeleteStatement: advance()V
   * 6 Strong Mutation 6: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap$1.hasNext()Z:117 - DeleteField: iterLgnu/trove/iterator/TFloatDoubleIterator;
   * 7 Strong Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.size()I:63 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 8 Strong Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.size()I:63 - DeleteStatement: size()I
   */

  @Test
  public void test26()  throws Throwable  {
      float[] floatArray0 = new float[7];
      double[] doubleArray0 = new double[14];
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap(floatArray0, doubleArray0);
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      TFloatDoubleHashMap tFloatDoubleHashMap1 = new TFloatDoubleHashMap((TFloatDoubleMap) tUnmodifiableFloatDoubleMap0);
      assertEquals(1, tUnmodifiableFloatDoubleMap0.size());
      assertEquals(false, tFloatDoubleHashMap1.isEmpty());
  }

  //Test case number: 27
  /*
   * 12 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.keySet()Lgnu/trove/set/TFloatSet;: I4 Branch 2 IFNONNULL L79 - true
   * 2 Strong Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.keySet()Lgnu/trove/set/TFloatSet;:79 - ReplaceComparisonOperator != null -> = null
   * 3 Strong Mutation 25: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.keySet()Lgnu/trove/set/TFloatSet;:80 - DeleteStatement: keySet()Lgnu/trove/set/TFloatSet;
   * 4 Strong Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.keySet()Lgnu/trove/set/TFloatSet;:80 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 5 Strong Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.keySet()Lgnu/trove/set/TFloatSet;:81 - DeleteField: keySetLgnu/trove/set/TFloatSet;
   * 6 Strong Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.keySet()Lgnu/trove/set/TFloatSet;:80 - DeleteStatement: unmodifiableSet(Lgnu/trove/set/TFloatSet;)Lgnu/trove/set/TFloatSet;
   * 7 Strong Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.keySet()Lgnu/trove/set/TFloatSet;:79 - ReplaceComparisonOperator != null -> = null
   * 8 Strong Mutation 25: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.keySet()Lgnu/trove/set/TFloatSet;:80 - DeleteStatement: keySet()Lgnu/trove/set/TFloatSet;
   * 9 Strong Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.keySet()Lgnu/trove/set/TFloatSet;:80 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 10 Strong Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.keySet()Lgnu/trove/set/TFloatSet;:81 - DeleteField: keySetLgnu/trove/set/TFloatSet;
   * 11 Strong Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.keySet()Lgnu/trove/set/TFloatSet;:80 - DeleteStatement: unmodifiableSet(Lgnu/trove/set/TFloatSet;)Lgnu/trove/set/TFloatSet;
   * 12 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.keySet()Lgnu/trove/set/TFloatSet;: I4 Branch 2 IFNONNULL L79 - false
   */

  @Test
  public void test27()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap((-1962));
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      TUnmodifiableFloatSet tUnmodifiableFloatSet0 = (TUnmodifiableFloatSet)tUnmodifiableFloatDoubleMap0.keySet();
      assertNotNull(tUnmodifiableFloatSet0);
      
      TUnmodifiableFloatSet tUnmodifiableFloatSet1 = (TUnmodifiableFloatSet)tUnmodifiableFloatDoubleMap0.keySet();
      assertSame(tUnmodifiableFloatSet1, tUnmodifiableFloatSet0);
  }

  //Test case number: 28
  /*
   * 13 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;: I4 Branch 3 IFNONNULL L87 - true
   * 2 Strong Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.<init>(Lgnu/trove/map/TFloatDoubleMap;)V:58 - ReplaceComparisonOperator != null -> = null
   * 3 Strong Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;:88 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 4 Strong Mutation 35: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;:88 - DeleteStatement: valueCollection()Lgnu/trove/TDoubleCollection;
   * 5 Strong Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;:87 - ReplaceComparisonOperator != null -> = null
   * 6 Strong Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;:88 - DeleteStatement: unmodifiableCollection(Lgnu/trove/TDoubleCollection;)Lgnu/trove/TDoubleCollection;
   * 7 Strong Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;:89 - DeleteField: valuesLgnu/trove/TDoubleCollection;
   * 8 Strong Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;:88 - DeleteField: mLgnu/trove/map/TFloatDoubleMap;
   * 9 Strong Mutation 35: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;:88 - DeleteStatement: valueCollection()Lgnu/trove/TDoubleCollection;
   * 10 Strong Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;:87 - ReplaceComparisonOperator != null -> = null
   * 11 Strong Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;:88 - DeleteStatement: unmodifiableCollection(Lgnu/trove/TDoubleCollection;)Lgnu/trove/TDoubleCollection;
   * 12 Strong Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;:89 - DeleteField: valuesLgnu/trove/TDoubleCollection;
   * 13 gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;: I4 Branch 3 IFNONNULL L87 - false
   */

  @Test
  public void test28()  throws Throwable  {
      TFloatDoubleHashMap tFloatDoubleHashMap0 = new TFloatDoubleHashMap((-1962));
      TUnmodifiableFloatDoubleMap tUnmodifiableFloatDoubleMap0 = new TUnmodifiableFloatDoubleMap((TFloatDoubleMap) tFloatDoubleHashMap0);
      TUnmodifiableDoubleCollection tUnmodifiableDoubleCollection0 = (TUnmodifiableDoubleCollection)tUnmodifiableFloatDoubleMap0.valueCollection();
      assertNotNull(tUnmodifiableDoubleCollection0);
      
      TUnmodifiableDoubleCollection tUnmodifiableDoubleCollection1 = (TUnmodifiableDoubleCollection)tUnmodifiableFloatDoubleMap0.valueCollection();
      assertSame(tUnmodifiableDoubleCollection1, tUnmodifiableDoubleCollection0);
  }
}
