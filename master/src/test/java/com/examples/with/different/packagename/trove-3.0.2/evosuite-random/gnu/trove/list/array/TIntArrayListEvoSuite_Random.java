/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.list.array;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TIntCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableIntSet;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessIntList;
import gnu.trove.list.TIntList;
import gnu.trove.list.array.TIntArrayList;
import gnu.trove.list.linked.TIntLinkedList;
import gnu.trove.set.TIntSet;
import gnu.trove.set.hash.TIntHashSet;
import java.util.Collection;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.StringTokenizer;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntArrayListEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      int int0 = 0;
      tIntArrayList0.getQuick(int0);
      int int1 = (-71);
      int int2 = 601;
      int int3 = 31;
      // Undeclared exception!
      try {
        tIntArrayList0.fill(int1, int2, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -71
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = Integer.MIN_VALUE;
      intArray0[0] = int0;
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0);
      assertNotNull(tIntArrayList0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = tIntArrayList0.containsAll((Collection<?>) linkedList0);
      assertEquals(true, boolean0);
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      
      TIntHashSet tIntHashSet0 = new TIntHashSet();
      TUnmodifiableIntSet tUnmodifiableIntSet0 = new TUnmodifiableIntSet((TIntSet) tIntHashSet0);
      TIntArrayList tIntArrayList1 = new TIntArrayList((TIntCollection) tUnmodifiableIntSet0);
      int int1 = 2;
      int int2 = 1436;
      tIntArrayList1.iterator();
      // Undeclared exception!
      try {
        tIntArrayList1.sort(int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1436
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-832);
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0);
      assertNotNull(tIntArrayList0);
      
      // Undeclared exception!
      try {
        tIntArrayList0.add(intArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not grow ArrayList wrapped external array
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      int int0 = 1981;
      tIntArrayList0.clear(int0);
      int int1 = 10;
      tIntArrayList0.fill(int0, int0, int1);
      assertEquals(false, tIntArrayList0.isEmpty());
      assertEquals("{}", tIntArrayList0.toString());
  }

//   @Test
//   public void test4()  throws Throwable  {
//       int[] intArray0 = new int[6];
//       int int0 = (-1168);
//       intArray0[0] = int0;
//       int int1 = 1611;
//       intArray0[1] = int1;
//       int int2 = (-1672);
//       intArray0[2] = int2;
//       int int3 = (-1167);
//       intArray0[3] = int3;
//       int int4 = 0;
//       intArray0[4] = int4;
//       int int5 = (-1);
//       intArray0[5] = int5;
//       TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0, int4);
//       assertNotNull(tIntArrayList0);
//       
//       TIntArrayList tIntArrayList1 = new TIntArrayList((TIntCollection) tIntArrayList0);
//       Random random0 = new Random();
//       tIntArrayList1.shuffle(random0);
//       assertEquals("{1611, -1672, -1167, 0, -1, -1168}", tIntArrayList1.toString());
//       assertEquals(1.316210414705872, random0.nextGaussian(), 0.01D);
//   }

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 1855;
      intArray0[0] = int0;
      TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
      int int1 = 1465;
      // Undeclared exception!
      try {
        tIntArrayList0.removeAt(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1465
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TIntCollection tIntCollection0 = null;
      TIntArrayList tIntArrayList0 = null;
      try {
        tIntArrayList0 = new TIntArrayList(tIntCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-469);
      int int1 = 0;
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList(int1);
      int[] intArray0 = new int[6];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int1;
      intArray0[3] = int0;
      intArray0[4] = int1;
      intArray0[5] = int0;
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0, intArray0[4]);
      assertNotNull(tIntArrayList0);
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      
      TIntArrayList tIntArrayList1 = new TIntArrayList((TIntCollection) tIntLinkedList0);
      int int2 = 1647;
      // Undeclared exception!
      try {
        tIntArrayList1.insert(int0, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      TIntArrayList tIntArrayList1 = new TIntArrayList();
      tIntArrayList1.reset();
      tIntArrayList0.binarySearch(int0);
      TIntArrayList tIntArrayList2 = new TIntArrayList(int0);
      int[] intArray0 = new int[2];
      int int1 = 781;
      tIntArrayList0.insert(int0, int1);
      assertEquals(1, tIntArrayList0.size());
      
      tIntArrayList2.reset();
      int int2 = 38;
      intArray0[0] = int2;
      intArray0[1] = int0;
      int int3 = 0;
      tIntArrayList2.toArray(intArray0, intArray0[0], int3);
      assertFalse(tIntArrayList2.equals(tIntArrayList0));
  }

  @Test
  public void test9()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-361);
      intArray0[0] = int0;
      int int1 = 80;
      intArray0[1] = int1;
      TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
      int int2 = (-1609);
      int int3 = 0;
      int[] intArray1 = tIntArrayList0.toArray(intArray0, int2, int2, int3);
      assertEquals(2, tIntArrayList0.size());
      assertEquals(-281, tIntArrayList0.sum());
      assertNotNull(intArray1);
      
      int int4 = 235;
      int int5 = 1;
      TIntArrayList tIntArrayList1 = new TIntArrayList(int4, int5);
      int[] intArray2 = new int[2];
      intArray2[0] = int5;
      intArray2[1] = int4;
      // Undeclared exception!
      try {
        tIntArrayList1.set(int5, intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 842879579;
      int int1 = 0;
      TIntArrayList tIntArrayList0 = new TIntArrayList(int1);
      int int2 = Integer.MAX_VALUE;
      int[] intArray0 = new int[8];
      intArray0[0] = int2;
      intArray0[0] = int1;
      int int3 = (-231);
      intArray0[1] = int3;
      intArray0[2] = int2;
      intArray0[3] = int0;
      intArray0[4] = int3;
      intArray0[5] = int0;
      intArray0[6] = int2;
      intArray0[7] = int0;
      intArray0[1] = int0;
      intArray0[2] = int1;
      intArray0[3] = int0;
      intArray0[4] = int2;
      intArray0[5] = int2;
      intArray0[6] = int1;
      intArray0[7] = int0;
      tIntArrayList0.retainAll(intArray0);
      tIntArrayList0.contains(int2);
      TIntHashSet tIntHashSet0 = null;
      try {
        tIntHashSet0 = new TIntHashSet(int0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      int int1 = 1611;
      TIntArrayList tIntArrayList0 = new TIntArrayList(int0, int1);
      int[] intArray0 = new int[6];
      intArray0[0] = int0;
      intArray0[1] = int1;
      intArray0[2] = int0;
      int int2 = (-717);
      intArray0[3] = int2;
      intArray0[4] = int1;
      intArray0[5] = int1;
      int int3 = (-1797);
      int int4 = (-1914);
      // Undeclared exception!
      try {
        tIntArrayList0.toArray(intArray0, int3, intArray0[0], int4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -1797
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TIntArrayList tIntArrayList0 = new TIntArrayList();
      int int0 = 86;
      int int1 = 1957651;
      // Undeclared exception!
      try {
        tIntArrayList0.set(int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 86
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = (-944);
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = Integer.MIN_VALUE;
      intArray0[2] = int2;
      int int3 = 0;
      intArray0[3] = int3;
      int int4 = 899;
      intArray0[4] = int4;
      int int5 = (-1014);
      intArray0[5] = int5;
      int int6 = 1242;
      intArray0[6] = int6;
      int int7 = 1823;
      intArray0[7] = int7;
      int int8 = 1;
      intArray0[8] = int8;
      int int9 = 0;
      intArray0[9] = int9;
      int int10 = 0;
      TIntArrayList.wrap(intArray0, int10);
      String string0 = "";
      boolean boolean0 = true;
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0, boolean0);
      // Undeclared exception!
      try {
        stringTokenizer0.nextToken();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-1);
      int[] intArray0 = new int[5];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0, intArray0[3]);
      assertNotNull(tIntArrayList0);
      
      int int1 = (-95);
      int int2 = 286;
      // Undeclared exception!
      try {
        tIntArrayList0.insert(int1, intArray0, int2, intArray0[1]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-165);
      TIntLinkedList tIntLinkedList0 = new TIntLinkedList(int0);
      int[] intArray0 = new int[7];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      TIntArrayList.wrap(intArray0);
      TUnmodifiableRandomAccessIntList tUnmodifiableRandomAccessIntList0 = new TUnmodifiableRandomAccessIntList((TIntList) tIntLinkedList0);
      int int1 = 899;
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessIntList0.subList(int0, int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // begin index can not be < 0
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 0;
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      int int1 = 56;
      TIntArrayList tIntArrayList0 = TIntArrayList.wrap(intArray0, int0);
      assertNotNull(tIntArrayList0);
      
      int int2 = (-1328);
      tIntArrayList0.ensureCapacity(int2);
      intArray0[0] = int1;
      int int3 = 0;
      TIntArrayList tIntArrayList1 = new TIntArrayList(intArray0);
      int int4 = 0;
      int int5 = Integer.MIN_VALUE;
      tIntArrayList1.insert(int4, int5);
      assertEquals("{-2147483648, 56, 0, 0, 0, 0, 0}", tIntArrayList1.toString());
      
      intArray0[1] = int3;
      TIntArrayList tIntArrayList2 = TIntArrayList.wrap(intArray0);
      tIntArrayList2.clear();
      int int6 = 1256;
      intArray0[2] = int6;
      int int7 = Integer.MAX_VALUE;
      intArray0[3] = int7;
      int int8 = 1443;
      intArray0[4] = int8;
      // Undeclared exception!
      try {
        tIntArrayList2.subList(intArray0[3], intArray0[4]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // end index 1443 greater than begin index 2147483647
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      intArray0[2] = int1;
      intArray0[3] = int1;
      int int2 = 20507;
      intArray0[0] = int2;
      int int3 = (-1293);
      intArray0[1] = int3;
      int int4 = 38;
      intArray0[2] = int4;
      int int5 = 0;
      intArray0[3] = int5;
      TIntArrayList tIntArrayList0 = new TIntArrayList(intArray0);
      int[] intArray1 = tIntArrayList0.toArray(intArray0);
      assertNotNull(intArray1);
      
      TIntArrayList tIntArrayList1 = new TIntArrayList();
      int[] intArray2 = tIntArrayList0.toArray();
      assertEquals("{20507, -1293, 38, 0}", tIntArrayList0.toString());
      assertNotNull(intArray2);
      assertEquals(0, tIntArrayList0.getNoEntryValue());
      assertFalse(tIntArrayList0.equals(tIntArrayList1));
  }
}
