/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TShortByteMap;
import gnu.trove.map.hash.TShortByteHashMap;
import gnu.trove.procedure.TShortByteProcedure;
import gnu.trove.procedure.TShortProcedure;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.util.AbstractMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortByteHashMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-543);
      short[] shortArray0 = new short[8];
      short short0 = (short) (-1138);
      shortArray0[0] = short0;
      short short1 = (short) (-1);
      shortArray0[1] = short1;
      short short2 = (short) (-201);
      shortArray0[2] = short2;
      short short3 = (short) (-446);
      shortArray0[3] = short3;
      short short4 = (short) (-1857);
      shortArray0[4] = short4;
      short short5 = (short)1419;
      shortArray0[5] = short5;
      short short6 = (short)1713;
      shortArray0[6] = short6;
      short short7 = (short) (-123);
      shortArray0[7] = short7;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-41);
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)31;
      byteArray0[2] = byte2;
      byte byte3 = (byte)67;
      byteArray0[3] = byte3;
      byte byte4 = (byte)71;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-66);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-116);
      byteArray0[6] = byte6;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(shortArray0, byteArray0);
      tShortByteHashMap0.getNoEntryKey();
      assertEquals("{-1857=71, 1713=-116, -201=31, -1138=-41, -1=1, -446=67, 1419=-66}", tShortByteHashMap0.toString());
      
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap(int0, int0);
      tShortByteHashMap1.clear();
      tShortByteHashMap1.iterator();
      float float0 = (-1.0F);
      short short8 = (short) (-32768);
      byte byte7 = (byte)78;
      TShortByteHashMap tShortByteHashMap2 = new TShortByteHashMap(int0, float0, short8, byte7);
      tShortByteHashMap1.putAll((TShortByteMap) tShortByteHashMap2);
      assertFalse(tShortByteHashMap2.equals(tShortByteHashMap0));
      assertEquals(3, tShortByteHashMap1.capacity());
      assertEquals("{}", tShortByteHashMap1.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 1020;
      int int1 = (-1648);
      int int2 = (-2);
      int int3 = (-1);
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(int3);
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap((TShortByteMap) tShortByteHashMap0);
      short short0 = tShortByteHashMap1.getNoEntryKey();
      short[] shortArray0 = new short[4];
      short short1 = (short) (-1626);
      shortArray0[0] = short1;
      short short2 = (short) (-1380);
      shortArray0[1] = short2;
      short short3 = (short) (-92);
      short short4 = (short)23159;
      byte byte0 = (byte)0;
      shortArray0[0] = (short) byte0;
      shortArray0[1] = short0;
      shortArray0[2] = short2;
      shortArray0[3] = short0;
      tShortByteHashMap1.putIfAbsent(short4, byte0);
      assertEquals(1, tShortByteHashMap1.size());
      
      shortArray0[2] = short3;
      short short5 = (short)0;
      shortArray0[3] = short5;
      byte[] byteArray0 = new byte[4];
      byte byte1 = (byte)1;
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-114);
      byteArray0[1] = byte2;
      byte byte3 = (byte)20;
      byteArray0[2] = byte3;
      byte byte4 = (byte) (-16);
      byteArray0[3] = byte4;
      TShortByteHashMap tShortByteHashMap2 = new TShortByteHashMap(shortArray0, byteArray0);
      TShortByteProcedure tShortByteProcedure0 = null;
      // Undeclared exception!
      try {
        tShortByteHashMap2.forEachEntry(tShortByteProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 94;
      float float0 = 0.0F;
      short short0 = (short)0;
      byte byte0 = (byte) (-63);
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(int0, float0, short0, byte0);
      short short1 = (short)168;
      boolean boolean0 = tShortByteHashMap0.increment(short1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short)1899;
      shortArray0[0] = short0;
      short short1 = (short)7429;
      shortArray0[1] = short1;
      short short2 = (short) (-1942);
      shortArray0[2] = short2;
      short short3 = (short)0;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      byte byte0 = (byte)40;
      tShortByteHashMap0.adjustValue(shortArray0[2], byte0);
      shortArray0[3] = short3;
      byte[] byteArray0 = new byte[6];
      byte byte1 = (byte)120;
      byteArray0[0] = byte1;
      short short4 = (short) (-26677);
      byte byte2 = (byte)3;
      tShortByteHashMap0.putIfAbsent(short4, byte2);
      assertEquals(false, tShortByteHashMap0.isEmpty());
      
      byte byte3 = (byte) (-28);
      byteArray0[1] = byte3;
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap();
      byte byte4 = (byte) (-57);
      byteArray0[2] = byte4;
      byte byte5 = (byte) (-118);
      byteArray0[3] = byte5;
      byte byte6 = (byte) (-108);
      byteArray0[4] = byte6;
      byte byte7 = (byte) (-39);
      byteArray0[5] = byte7;
      TShortByteHashMap tShortByteHashMap2 = new TShortByteHashMap(shortArray0, byteArray0);
      TShortByteHashMap tShortByteHashMap3 = new TShortByteHashMap((TShortByteMap) tShortByteHashMap2);
      tShortByteHashMap2.putAll((TShortByteMap) tShortByteHashMap3);
      assertEquals("{-1942=-57, 1899=120, 7429=-28, 0=-118}", tShortByteHashMap3.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      short[] shortArray0 = new short[4];
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      short short0 = (short)122;
      byte byte0 = (byte)83;
      byte byte1 = (byte)0;
      tShortByteHashMap0.adjustOrPutValue(short0, byte0, byte1);
      assertEquals("{122=0}", tShortByteHashMap0.toString());
      
      short short1 = (short)1;
      shortArray0[0] = short1;
      short short2 = (short)576;
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap();
      tShortByteHashMap1.tempDisableAutoCompaction();
      shortArray0[1] = short2;
      short short3 = (short)907;
      shortArray0[2] = short3;
      boolean boolean0 = true;
      tShortByteHashMap1.reenableAutoCompaction(boolean0);
      short short4 = (short)1081;
      shortArray0[3] = short4;
      byte[] byteArray0 = new byte[4];
      byte byte2 = (byte)0;
      byteArray0[0] = byte2;
      byte byte3 = (byte) (-19);
      byteArray0[1] = byte3;
      byte byte4 = (byte)22;
      byteArray0[2] = byte4;
      byte byte5 = (byte) (-27);
      tShortByteHashMap1.tempDisableAutoCompaction();
      byteArray0[3] = byte5;
      TShortByteHashMap tShortByteHashMap2 = new TShortByteHashMap(shortArray0, byteArray0);
      boolean boolean1 = tShortByteHashMap2.containsKey(short3);
      assertEquals(true, boolean1);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 0;
      short short0 = (short)346;
      short[] shortArray0 = new short[8];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      short short1 = (short)1108;
      shortArray0[2] = short1;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      shortArray0[7] = short0;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)39;
      byteArray0[0] = byte0;
      byte byte1 = (byte)17;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)119;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-78);
      byteArray0[4] = byte4;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(shortArray0, byteArray0);
      int int1 = tShortByteHashMap0.size();
      assertEquals("{346=-78, 1108=0}", tShortByteHashMap0.toString());
      assertEquals(2, int1);
      
      byte byte5 = (byte)0;
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap(int0, (float) int0, short0, byte5);
      TShortByteHashMap tShortByteHashMap2 = null;
      try {
        tShortByteHashMap2 = new TShortByteHashMap((TShortByteMap) tShortByteHashMap1);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short)1982;
      shortArray0[0] = short0;
      short short1 = (short)347;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short) (-1832);
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short) (-1681);
      shortArray0[5] = short5;
      short short6 = (short)1159;
      shortArray0[6] = short6;
      short short7 = (short) (-1);
      shortArray0[7] = short7;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-46);
      byteArray0[1] = byte1;
      byte byte2 = (byte)15;
      byteArray0[2] = byte2;
      byte byte3 = (byte)72;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)1;
      byteArray0[5] = byte5;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(shortArray0, byteArray0);
      tShortByteHashMap0.remove(shortArray0[5]);
      assertEquals(4, tShortByteHashMap0.size());
      
      int int0 = 1043;
      float float0 = 1.0F;
      short short8 = (short)15;
      byte byte6 = (byte)0;
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap(int0, float0, short8, byte6);
      TShortByteHashMap tShortByteHashMap2 = new TShortByteHashMap((TShortByteMap) tShortByteHashMap1);
      short short9 = (short) (-1215);
      byte byte7 = tShortByteHashMap2.adjustOrPutValue(short9, byte6, byte6);
      assertEquals((byte)0, byte7);
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      float float0 = 1210.4901F;
      short short0 = (short)674;
      byte byte0 = (byte)115;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(int0, float0, short0, byte0);
      TShortProcedure tShortProcedure0 = null;
      tShortByteHashMap0.forEach(tShortProcedure0);
      int int1 = (-96);
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap(int1);
      byte[] byteArray0 = new byte[9];
      byte byte1 = (byte) (-71);
      byteArray0[0] = byte1;
      byte byte2 = (byte)0;
      byteArray0[1] = byte2;
      byte byte3 = (byte)0;
      byteArray0[2] = byte3;
      byte byte4 = (byte)0;
      byteArray0[3] = byte4;
      byte byte5 = (byte)104;
      byteArray0[4] = byte5;
      byte byte6 = (byte) (-117);
      byteArray0[5] = byte6;
      byte byte7 = (byte) (-70);
      byteArray0[6] = byte7;
      byte byte8 = (byte)22;
      byteArray0[7] = byte8;
      byte byte9 = (byte)1;
      short[] shortArray0 = tShortByteHashMap1.keys();
      assertNotNull(shortArray0);
      
      byteArray0[8] = byte9;
      byte[] byteArray1 = tShortByteHashMap1.values(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 177;
      float float0 = 266.1393F;
      short[] shortArray0 = new short[10];
      short short0 = (short) (-2035);
      shortArray0[0] = short0;
      short short1 = (short)175;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)1675;
      shortArray0[3] = short3;
      short short4 = (short) (-495);
      shortArray0[4] = short4;
      short short5 = (short) (-1209);
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)1;
      shortArray0[7] = short7;
      short short8 = (short)0;
      shortArray0[8] = short8;
      short short9 = (short)93;
      shortArray0[9] = short9;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)95;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)76;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-1);
      byteArray0[5] = byte5;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(shortArray0, byteArray0);
      byte byte6 = tShortByteHashMap0.putIfAbsent(short5, byte1);
      assertEquals((byte) (-1), byte6);
      assertEquals("{1675=76, -2035=0, -495=0, -1209=-1, 175=95, 0=0}", tShortByteHashMap0.toString());
      
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap(int0, float0);
      short short10 = (short) (-45);
      tShortByteHashMap1.containsKey(short10);
      assertFalse(tShortByteHashMap1.equals(tShortByteHashMap0));
  }

  @Test
  public void test9()  throws Throwable  {
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap();
      int int0 = 0;
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap(int0);
      boolean boolean0 = false;
      tShortByteHashMap1.reenableAutoCompaction(boolean0);
      TShortByteHashMap tShortByteHashMap2 = new TShortByteHashMap((TShortByteMap) tShortByteHashMap0);
      byte byte0 = (byte) (-72);
      byte[] byteArray0 = tShortByteHashMap0.values(tShortByteHashMap1._states);
      tShortByteHashMap0.containsValue(byte0);
      byte byte1 = (byte)109;
      int int1 = 949;
      short short0 = (short) (-1227);
      byte byte2 = (byte)0;
      TShortByteHashMap tShortByteHashMap3 = new TShortByteHashMap(int1, (float) int1, short0, byte2);
      tShortByteHashMap0.equals((Object) tShortByteHashMap3);
      tShortByteHashMap3.toString();
      byte byte3 = tShortByteHashMap0.put((short) byte0, byte1);
      assertEquals(false, tShortByteHashMap0.isEmpty());
      
      tShortByteHashMap1.values(byteArray0);
      short short1 = (short)1423;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) int0, (Integer) int0);
      AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Short> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Short>(abstractMap_SimpleImmutableEntry0, (Short) short1);
      tShortByteHashMap1.size();
      abstractMap_SimpleImmutableEntry1.getValue();
      tShortByteHashMap0.remove(short1);
      byte byte4 = (byte)0;
      tShortByteHashMap0.containsValue(byte4);
      tShortByteHashMap0.containsKey((short) byte3);
      assertEquals("{-72=109}", tShortByteHashMap0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 1824;
      TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(int0, int0);
      tShortByteHashMap0.size();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap((TShortByteMap) tShortByteHashMap0);
      pipedInputStream0.available();
      short short0 = (short)0;
      byte byte0 = (byte) (-128);
      TShortByteHashMap tShortByteHashMap2 = new TShortByteHashMap();
      byte byte1 = (byte) (-56);
      tShortByteHashMap0.adjustOrPutValue(short0, byte0, byte1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) pipedInputStream0, int0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          String string0 = "begin index can not be < 0";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

//   @Test
//   public void test12()  throws Throwable  {
//       int int0 = 0;
//       float float0 = 1122.5018F;
//       short short0 = (short)646;
//       byte byte0 = (byte)21;
//       short[] shortArray0 = new short[7];
//       shortArray0[0] = short0;
//       shortArray0[1] = (short) byte0;
//       shortArray0[2] = (short) byte0;
//       shortArray0[3] = short0;
//       shortArray0[4] = (short) byte0;
//       shortArray0[5] = short0;
//       shortArray0[6] = short0;
//       byte[] byteArray0 = new byte[8];
//       byteArray0[0] = byte0;
//       byteArray0[1] = byte0;
//       byteArray0[2] = byte0;
//       byteArray0[3] = byte0;
//       byteArray0[4] = byte0;
//       byteArray0[5] = byte0;
//       byteArray0[6] = byte0;
//       byteArray0[7] = byte0;
//       TShortByteHashMap tShortByteHashMap0 = new TShortByteHashMap(shortArray0, byteArray0);
//       tShortByteHashMap0.getNoEntryKey();
//       assertEquals("{21=21, 646=21}", tShortByteHashMap0.toString());
//       assertEquals(2, tShortByteHashMap0.size());
//       
//       TShortByteHashMap tShortByteHashMap1 = new TShortByteHashMap();
//       TShortByteHashMap tShortByteHashMap2 = new TShortByteHashMap(int0, float0, short0, byte0);
//       TShortByteHashMap tShortByteHashMap3 = new TShortByteHashMap((TShortByteMap) tShortByteHashMap2);
//       assertEquals(3, tShortByteHashMap3.capacity());
//       assertEquals(646, tShortByteHashMap3.getNoEntryKey());
//       assertEquals(21, tShortByteHashMap3.getNoEntryValue());
//   }
}
