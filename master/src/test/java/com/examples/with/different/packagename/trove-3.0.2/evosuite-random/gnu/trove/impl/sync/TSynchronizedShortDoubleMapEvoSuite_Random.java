/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedDoubleCollection;
import gnu.trove.impl.sync.TSynchronizedShortDoubleMap;
import gnu.trove.impl.sync.TSynchronizedShortSet;
import gnu.trove.map.TShortDoubleMap;
import gnu.trove.map.hash.TShortDoubleHashMap;
import gnu.trove.procedure.TShortProcedure;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.MissingResourceException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedShortDoubleMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)1529;
      shortArray0[0] = short0;
      short short1 = (short)307;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)1;
      shortArray0[4] = short4;
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) shortArray0[3];
      double double0 = (-2047.7889830789043);
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) shortArray0[0];
      doubleArray0[3] = (double) short4;
      doubleArray0[4] = (double) shortArray0[0];
      doubleArray0[5] = (double) shortArray0[1];
      doubleArray0[6] = (double) shortArray0[0];
      double double1 = 1237.5422515842906;
      doubleArray0[7] = double1;
      doubleArray0[8] = (double) shortArray0[2];
      doubleArray0[0] = (double) shortArray0[4];
      doubleArray0[1] = (double) short4;
      doubleArray0[2] = (double) short2;
      doubleArray0[3] = (double) shortArray0[4];
      doubleArray0[4] = (double) shortArray0[4];
      doubleArray0[5] = (double) shortArray0[0];
      doubleArray0[6] = (double) short4;
      doubleArray0[7] = double0;
      doubleArray0[8] = (double) short0;
      doubleArray0[9] = (double) short0;
      doubleArray0[9] = (double) shortArray0[3];
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      TSynchronizedShortSet tSynchronizedShortSet0 = (TSynchronizedShortSet)tSynchronizedShortDoubleMap0.keySet();
      assertEquals(false, tSynchronizedShortSet0.isEmpty());
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 1893;
      short[] shortArray0 = new short[8];
      short short0 = (short)231;
      shortArray0[0] = short0;
      short short1 = (short)664;
      shortArray0[1] = short1;
      short short2 = (short)717;
      shortArray0[2] = short2;
      short short3 = (short)5779;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)197;
      shortArray0[5] = short5;
      short short6 = (short)98;
      shortArray0[6] = short6;
      short short7 = (short) (-1051);
      shortArray0[7] = short7;
      double[] doubleArray0 = new double[8];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) short0;
      doubleArray0[2] = (double) short6;
      doubleArray0[3] = (double) shortArray0[0];
      doubleArray0[4] = (double) shortArray0[7];
      doubleArray0[5] = (double) shortArray0[3];
      doubleArray0[6] = (double) short5;
      doubleArray0[7] = (double) shortArray0[5];
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      tSynchronizedShortDoubleMap0.keys(tShortDoubleHashMap0._set);
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap(int0, int0);
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap1 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap1);
      TShortDoubleHashMap tShortDoubleHashMap2 = new TShortDoubleHashMap();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap2 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap2);
      assertEquals("{}", tSynchronizedShortDoubleMap2.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 124;
      float float0 = 0.5F;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0, float0);
      short short0 = (short) (-266);
      double double0 = 0.0;
      double double1 = 96.65174939539115;
      tShortDoubleHashMap0.adjustOrPutValue(short0, double0, double1);
      tShortDoubleHashMap0.toString();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      short short1 = (short) (-1057);
      Locale locale0 = Locale.ITALY;
      TShortProcedure tShortProcedure0 = null;
      // Undeclared exception!
      try {
        tSynchronizedShortDoubleMap0.forEachKey(tShortProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short)57;
      shortArray0[0] = short0;
      short short1 = (short) (-1671);
      shortArray0[1] = short1;
      short short2 = (short)165;
      shortArray0[2] = short2;
      short short3 = (short) (-18);
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short) (-1);
      shortArray0[5] = short5;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) short2;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      Object object0 = null;
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0, object0);
      // Undeclared exception!
      try {
        tSynchronizedShortDoubleMap0.increment(short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-1);
      short short0 = (short)188;
      TShortDoubleMap tShortDoubleMap0 = null;
      int int1 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int1);
      String string0 = "";
      try {
        byteArrayOutputStream0.toString(string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // 
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TShortDoubleMap tShortDoubleMap0 = null;
      Object object0 = null;
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap(tShortDoubleMap0, object0);
      // Undeclared exception!
      try {
        tSynchronizedShortDoubleMap0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-854);
      float float0 = 1805.3613F;
      short short0 = (short) (-1399);
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0, float0, short0, (double) short0);
      short short1 = (short)0;
      tShortDoubleHashMap0.remove(short1);
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap((TShortDoubleMap) tShortDoubleHashMap0);
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = Locale.ENGLISH;
      locale0.getDisplayVariant();
      String string0 = locale0.getDisplayName(locale1);
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap1, (Object) string0);
      tShortDoubleHashMap0._states = tShortDoubleHashMap1._states;
      double double0 = tSynchronizedShortDoubleMap0.get(short0);
      assertEquals((-1399.0), double0, 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      short short0 = (short)857;
      double double0 = (-1012.4141282359335);
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0, (float) int0, short0, double0);
      TShortDoubleHashMap tShortDoubleHashMap1 = null;
      try {
        tShortDoubleHashMap1 = new TShortDoubleHashMap((TShortDoubleMap) tShortDoubleHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 1222;
      short[] shortArray0 = new short[5];
      short short0 = (short)1;
      shortArray0[0] = short0;
      short short1 = (short)498;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)658;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) shortArray0[4];
      doubleArray0[1] = (double) shortArray0[3];
      double double0 = 1421.975486731303;
      doubleArray0[2] = double0;
      doubleArray0[3] = (double) shortArray0[2];
      doubleArray0[4] = (double) short3;
      doubleArray0[5] = (double) short4;
      doubleArray0[6] = (double) shortArray0[1];
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      Object object0 = null;
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0, object0);
      // Undeclared exception!
      try {
        tSynchronizedShortDoubleMap0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-2001);
      TShortDoubleMap tShortDoubleMap0 = null;
      String string0 = "LJ$:Q&k_m";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 2: LJ$:Q&k_m:LJ$:Q&k_m#LJ$:Q&k_m
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      float float0 = (-1.0F);
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0);
      short short0 = (short) (-1552);
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0);
      String string0 = Short.toString(short0);
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap();
      URI uRI0 = URI.create(string0);
      URI uRI1 = uRI0.parseServerAuthority();
      URI uRI2 = uRI1.normalize();
      String string1 = uRI2.getRawFragment();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap1 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap1, (Object) string1);
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap2 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tSynchronizedShortDoubleMap0);
      int int1 = tSynchronizedShortDoubleMap0.size();
      tSynchronizedShortDoubleMap0.containsKey(short0);
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap3 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0, (Object) string0);
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap4 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tSynchronizedShortDoubleMap3);
      short short1 = (short)1713;
      tSynchronizedShortDoubleMap2.hashCode();
      double double0 = 0.0;
      String string2 = Double.toHexString((double) float0);
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap5 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0, (Object) string2);
      tSynchronizedShortDoubleMap4.adjustValue(short1, double0);
      TShortDoubleHashMap tShortDoubleHashMap2 = new TShortDoubleHashMap(int0, float0);
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap6 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap2);
      int int2 = tSynchronizedShortDoubleMap6.hashCode();
      assertTrue(int2 == int1);
  }

  @Test
  public void test11()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      tShortDoubleHashMap0.values();
      Object object0 = null;
      short short0 = (short)108;
      tShortDoubleHashMap0.contains(short0);
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0, object0);
      TShortDoubleHashMap tShortDoubleHashMap1 = null;
      try {
        tShortDoubleHashMap1 = new TShortDoubleHashMap((TShortDoubleMap) tSynchronizedShortDoubleMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap();
      Locale locale0 = Locale.ENGLISH;
      String string0 = locale0.getDisplayCountry();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0, (Object) string0);
      tSynchronizedShortDoubleMap0.toString();
      int int0 = 72;
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap(int0);
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap1 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap1);
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap2 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tSynchronizedShortDoubleMap1);
      assertEquals(0, tSynchronizedShortDoubleMap2.size());
  }

  @Test
  public void test13()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short) (-119);
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short) (-399);
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) short2;
      doubleArray0[1] = (double) shortArray0[3];
      doubleArray0[2] = (double) short3;
      doubleArray0[3] = (double) short1;
      doubleArray0[4] = (double) shortArray0[3];
      doubleArray0[5] = (double) shortArray0[1];
      doubleArray0[6] = (double) short4;
      doubleArray0[7] = (double) shortArray0[0];
      doubleArray0[8] = (double) short2;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      short short5 = (short)0;
      Short short6 = new Short(short5);
      String string0 = short6.toString();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0, (Object) string0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string1 = locale0.getDisplayScript();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap1 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tSynchronizedShortDoubleMap0, (Object) string1);
      assertTrue(tSynchronizedShortDoubleMap0.equals(tSynchronizedShortDoubleMap1));
  }

//   @Test
//   public void test14()  throws Throwable  {
//       short[] shortArray0 = new short[4];
//       short short0 = (short) (-1795);
//       shortArray0[0] = short0;
//       short short1 = (short)0;
//       shortArray0[1] = short1;
//       short short2 = (short) (-2031);
//       shortArray0[2] = short2;
//       short short3 = (short)527;
//       shortArray0[3] = short3;
//       double[] doubleArray0 = new double[9];
//       doubleArray0[0] = (double) short1;
//       doubleArray0[1] = (double) shortArray0[1];
//       doubleArray0[2] = (double) short3;
//       doubleArray0[3] = (double) short0;
//       doubleArray0[4] = (double) short2;
//       doubleArray0[5] = (double) shortArray0[2];
//       doubleArray0[6] = (double) short2;
//       doubleArray0[7] = (double) shortArray0[1];
//       doubleArray0[8] = (double) short0;
//       TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
//       Locale locale0 = Locale.JAPAN;
//       String string0 = locale0.getDisplayName();
//       TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0, (Object) string0);
//       assertEquals(0, tSynchronizedShortDoubleMap0.getNoEntryKey());
//   }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 5779;
      float float0 = 0.0F;
      short[] shortArray0 = new short[4];
      short short0 = (short)1072;
      shortArray0[0] = short0;
      short short1 = (short)1686;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)179;
      shortArray0[3] = short3;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) shortArray0[0];
      doubleArray0[1] = (double) short3;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(shortArray0, doubleArray0);
      TShortDoubleHashMap tShortDoubleHashMap1 = new TShortDoubleHashMap((TShortDoubleMap) tShortDoubleHashMap0);
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap1);
      tSynchronizedShortDoubleMap0.keySet();
      TShortDoubleHashMap tShortDoubleHashMap2 = new TShortDoubleHashMap(int0, float0);
      tShortDoubleHashMap2.size();
      Locale locale0 = Locale.KOREAN;
      String string0 = locale0.getISO3Country();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap1 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap2, (Object) string0);
      short short4 = (short)138;
      tShortDoubleHashMap0.containsKey(short4);
      TSynchronizedDoubleCollection tSynchronizedDoubleCollection0 = (TSynchronizedDoubleCollection)tSynchronizedShortDoubleMap1.valueCollection();
      assertEquals(0, tSynchronizedDoubleCollection0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      TShortDoubleMap tShortDoubleMap0 = null;
      short short0 = (short) (-1);
      Short short1 = new Short(short0);
      String string0 = short1.toString();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap(tShortDoubleMap0, (Object) string0);
      // Undeclared exception!
      try {
        tSynchronizedShortDoubleMap0.values();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 1522;
      float float0 = 0.0F;
      short short0 = (short)747;
      TShortDoubleHashMap tShortDoubleHashMap0 = new TShortDoubleHashMap(int0, float0, short0, (double) short0);
      String string0 = "";
      Locale locale0 = Locale.GERMANY;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale1 = Locale.getDefault(locale_Category0);
      String string1 = locale0.getDisplayScript(locale1);
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap0 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0, (Object) string1);
      tSynchronizedShortDoubleMap0.clear();
      Locale locale2 = new Locale(string0, string0, string0);
      String string2 = locale2.getLanguage();
      TSynchronizedShortDoubleMap tSynchronizedShortDoubleMap1 = new TSynchronizedShortDoubleMap((TShortDoubleMap) tShortDoubleHashMap0, (Object) string2);
      // Undeclared exception!
      try {
        File.createTempFile(string0, string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }
}
