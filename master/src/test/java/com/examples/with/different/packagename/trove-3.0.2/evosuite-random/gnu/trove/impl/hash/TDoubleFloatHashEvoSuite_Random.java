/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TFloatFunction;
import gnu.trove.map.TDoubleFloatMap;
import gnu.trove.map.hash.TDoubleFloatHashMap;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.net.URI;
import java.net.URISyntaxException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleFloatHashEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      int int0 = (-1060);
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap(int0);
      tDoubleFloatHashMap0.keySet();
      TDoubleFloatHashMap tDoubleFloatHashMap2 = new TDoubleFloatHashMap(int0, int0);
      int int1 = (-81);
      float float0 = 0.0F;
      double double0 = 1054.3535890116855;
      float float1 = Float.POSITIVE_INFINITY;
      TDoubleFloatHashMap tDoubleFloatHashMap3 = new TDoubleFloatHashMap(int1, float0, double0, float1);
      tDoubleFloatHashMap2.isEmpty();
      double double1 = 613.2857942542748;
      double[] doubleArray0 = tDoubleFloatHashMap2._set;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

//   @Test
//   public void test1()  throws Throwable  {
//       int int0 = 75;
//       float float0 = 0.0F;
//       float float1 = (-404.75742F);
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0, float0, (double) float0, float1);
//       float float2 = 0.0F;
//       tDoubleFloatHashMap0.setAutoCompactionFactor(float2);
//       int int1 = 1366;
//       TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap();
//       tDoubleFloatHashMap1.size();
//       assertEquals(0.0, tDoubleFloatHashMap1.getNoEntryKey(), 0.01D);
//       assertEquals(0.0F, tDoubleFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals(23, tDoubleFloatHashMap1.capacity());
//       
//       float float3 = 0.0F;
//       TDoubleFloatHashMap tDoubleFloatHashMap2 = new TDoubleFloatHashMap(int1, float3);
//       tDoubleFloatHashMap2.isEmpty();
//       assertEquals(0.0F, tDoubleFloatHashMap2.getNoEntryValue(), 0.01F);
//       assertEquals(0.0, tDoubleFloatHashMap2.getNoEntryKey(), 0.01D);
//       
//       int int2 = 1;
//       float float4 = 1605.8928F;
//       float float5 = 1852.5352F;
//       TDoubleFloatHashMap tDoubleFloatHashMap3 = new TDoubleFloatHashMap(int2, float4, (double) float4, float5);
//       assertEquals(1852.5352F, tDoubleFloatHashMap3.getNoEntryValue(), 0.01F);
//       assertEquals(1605.892822265625, tDoubleFloatHashMap3.getNoEntryKey(), 0.01D);
//   }

//   @Test
//   public void test2()  throws Throwable  {
//       double[] doubleArray0 = new double[9];
//       double double0 = 176.23124233640945;
//       doubleArray0[0] = double0;
//       double double1 = (-1026.4987699564174);
//       doubleArray0[1] = double1;
//       double double2 = (-906.2282682135619);
//       doubleArray0[2] = double2;
//       double double3 = (-761.9899667084027);
//       doubleArray0[3] = double3;
//       double double4 = (-1.0);
//       doubleArray0[4] = double4;
//       double double5 = 0.0;
//       doubleArray0[5] = double5;
//       double double6 = 1.0;
//       doubleArray0[6] = double6;
//       double double7 = 0.0;
//       doubleArray0[7] = double7;
//       double double8 = 646.8157162024148;
//       doubleArray0[8] = double8;
//       float[] floatArray0 = new float[4];
//       float float0 = 399.25146F;
//       floatArray0[0] = float0;
//       float float1 = 1.0F;
//       floatArray0[1] = float1;
//       float float2 = (-100.550095F);
//       floatArray0[2] = float2;
//       float float3 = 0.0F;
//       floatArray0[3] = float3;
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
//       assertEquals("{-906.2282682135619=-100.550095, 176.23124233640945=399.25146, -761.9899667084027=0.0, -1026.4987699564174=1.0}", tDoubleFloatHashMap0.toString());
//       assertEquals(0.0, tDoubleFloatHashMap0.getNoEntryKey(), 0.01D);
//       assertEquals(0.0F, tDoubleFloatHashMap0.getNoEntryValue(), 0.01F);
//       
//       int int0 = 212;
//       TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap(int0, int0);
//       assertEquals(0.0F, tDoubleFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals(0.0, tDoubleFloatHashMap1.getNoEntryKey(), 0.01D);
//   }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 1647;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0, int0);
      double double0 = (-1.0);
      boolean boolean0 = tDoubleFloatHashMap0.contains(double0);
      assertEquals(false, boolean0);
      
      int int1 = 816;
      float float0 = 1634.9818F;
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap(int1, float0);
      ObjectInput objectInput0 = null;
      // Undeclared exception!
      try {
        tDoubleFloatHashMap1.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-1839);
      int int1 = 0;
      double double0 = 0.0;
      float float0 = 1.0F;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int1, (float) int0, double0, float0);
      byte[] byteArray0 = new byte[1];
      String string0 = "";
      File file0 = new File(string0);
      File file1 = new File(file0, string0);
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0, file1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-844);
      float float0 = 0.0F;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0, float0, (double) int0, (float) int0);
      ObjectOutput objectOutput0 = null;
      int int1 = 835;
      tDoubleFloatHashMap0.ensureCapacity(int1);
      // Undeclared exception!
      try {
        tDoubleFloatHashMap0.writeExternal(objectOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      boolean boolean0 = false;
      tDoubleFloatHashMap0.reenableAutoCompaction(boolean0);
      String string0 = "";
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         //  (No such file or directory)
         //
      }
  }

//   @Test
//   public void test7()  throws Throwable  {
//       int int0 = Integer.MAX_VALUE;
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0, int0);
//       tDoubleFloatHashMap0.size();
//       assertEquals(0.0F, tDoubleFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(0.0, tDoubleFloatHashMap0.getNoEntryKey(), 0.01D);
//       
//       TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap(int0);
//       int int1 = (-453);
//       TDoubleFloatHashMap tDoubleFloatHashMap2 = new TDoubleFloatHashMap(int1);
//       double[] doubleArray0 = tDoubleFloatHashMap2._set;
//       assertEquals(0.0F, tDoubleFloatHashMap2.getNoEntryValue(), 0.01F);
//       assertEquals(0.0, tDoubleFloatHashMap2.getNoEntryKey(), 0.01D);
//   }

//   @Test
//   public void test8()  throws Throwable  {
//       int int0 = 389;
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0, int0);
//       TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap();
//       tDoubleFloatHashMap0.putAll((TDoubleFloatMap) tDoubleFloatHashMap1);
//       assertEquals(23, tDoubleFloatHashMap1.capacity());
//       assertEquals(0.0, tDoubleFloatHashMap1.getNoEntryKey(), 0.01D);
//       assertEquals(0.0F, tDoubleFloatHashMap1.getNoEntryValue(), 0.01F);
//       
//       int int1 = 0;
//       TDoubleFloatHashMap tDoubleFloatHashMap2 = new TDoubleFloatHashMap(int1, int1);
//       assertEquals(0.0F, tDoubleFloatHashMap2.getNoEntryValue(), 0.01F);
//       assertEquals(0.0, tDoubleFloatHashMap2.getNoEntryKey(), 0.01D);
//   }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 186;
      float float0 = 0.0F;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0, float0);
      String string0 = ">";
      File file0 = new File(string0);
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // > (No such file or directory)
         //
      }
  }

//   @Test
//   public void test10()  throws Throwable  {
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
//       double double0 = (-1.0);
//       float float0 = 1.0F;
//       tDoubleFloatHashMap0.put(double0, float0);
//       double double1 = (-1633.3148597442278);
//       float float1 = 2028.7589F;
//       tDoubleFloatHashMap0.clear();
//       float float2 = tDoubleFloatHashMap0.putIfAbsent(double1, float1);
//       assertEquals(1, tDoubleFloatHashMap0.size());
//       assertEquals(0.0F, float2, 0.01F);
//   }

//   @Test
//   public void test11()  throws Throwable  {
//       int int0 = (-1592);
//       double double0 = 1.0;
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
//       TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap((TDoubleFloatMap) tDoubleFloatHashMap0);
//       TDoubleFloatHashMap tDoubleFloatHashMap2 = new TDoubleFloatHashMap(int0, (float) int0, double0, (float) int0);
//       double double1 = 1528.7764826311127;
//       boolean boolean0 = tDoubleFloatHashMap2.contains(double1);
//       assertEquals(false, boolean0);
//       
//       tDoubleFloatHashMap2.iterator();
//       double[] doubleArray0 = new double[8];
//       doubleArray0[0] = double1;
//       doubleArray0[1] = (double) int0;
//       doubleArray0[2] = (double) int0;
//       doubleArray0[3] = (double) int0;
//       float float0 = 1332.035F;
//       tDoubleFloatHashMap1.setAutoCompactionFactor(float0);
//       doubleArray0[4] = double1;
//       doubleArray0[5] = double1;
//       doubleArray0[6] = double0;
//       TDoubleFloatHashMap tDoubleFloatHashMap3 = new TDoubleFloatHashMap();
//       double[] doubleArray1 = tDoubleFloatHashMap3.keys();
//       assertNotNull(doubleArray1);
//       
//       float[] floatArray0 = new float[6];
//       floatArray0[0] = float0;
//       floatArray0[1] = float0;
//       floatArray0[2] = (float) int0;
//       floatArray0[3] = float0;
//       floatArray0[4] = (float) int0;
//       floatArray0[5] = (float) int0;
//       float[] floatArray1 = tDoubleFloatHashMap3.values(floatArray0);
//       assertEquals(23, tDoubleFloatHashMap3.capacity());
//       assertNotNull(floatArray1);
//       assertEquals(0.0, tDoubleFloatHashMap3.getNoEntryKey(), 0.01D);
//       assertEquals(0.0F, tDoubleFloatHashMap3.getNoEntryValue(), 0.01F);
//       
//       doubleArray0[7] = double0;
//       tDoubleFloatHashMap2._set = doubleArray0;
//       assertEquals((-1592.0F), tDoubleFloatHashMap2.getNoEntryValue(), 0.01F);
//       assertEquals(1.0, tDoubleFloatHashMap2.getNoEntryKey(), 0.01D);
//   }

  @Test
  public void test12()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0);
      tDoubleFloatHashMap0.tempDisableAutoCompaction();
      float float0 = (-884.64026F);
      int int1 = 0;
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap();
      tDoubleFloatHashMap1.size();
      assertEquals(23, tDoubleFloatHashMap1.capacity());
      
      int int2 = 1014;
      tDoubleFloatHashMap1.ensureCapacity(int2);
      tDoubleFloatHashMap0.size();
      tDoubleFloatHashMap1.isEmpty();
      float float1 = 0.0F;
      tDoubleFloatHashMap0.setAutoCompactionFactor(float1);
      float float2 = 0.0F;
      TDoubleFloatHashMap tDoubleFloatHashMap2 = new TDoubleFloatHashMap(int0, float2, (double) float2, (float) int0);
      tDoubleFloatHashMap1.ensureCapacity(int0);
      TDoubleFloatHashMap tDoubleFloatHashMap3 = null;
      try {
        tDoubleFloatHashMap3 = new TDoubleFloatHashMap((TDoubleFloatMap) tDoubleFloatHashMap2);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1632;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0);
      double[] doubleArray0 = new double[5];
      double double0 = (-423.1328271411519);
      doubleArray0[0] = double0;
      double double1 = 280.7717512772646;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = 250.12603697678514;
      doubleArray0[4] = double4;
      float[] floatArray0 = new float[2];
      float float0 = 916.2661F;
      int int1 = 1446;
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap(int1);
      double double5 = (-1703.618362321882);
      float float1 = 1831.2454F;
      float float2 = 1748.0251F;
      float float3 = tDoubleFloatHashMap1.adjustOrPutValue(double5, float1, float2);
      floatArray0[0] = float0;
      floatArray0[0] = (float) int0;
      floatArray0[1] = float3;
      assertEquals(false, tDoubleFloatHashMap1.isEmpty());
      
      float float4 = 0.0F;
      floatArray0[1] = float4;
      TDoubleFloatHashMap tDoubleFloatHashMap2 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      TDoubleFloatHashMap tDoubleFloatHashMap3 = new TDoubleFloatHashMap((TDoubleFloatMap) tDoubleFloatHashMap2);
      byte[] byteArray0 = tDoubleFloatHashMap3._states;
      assertEquals("{280.7717512772646=0.0, -423.1328271411519=1632.0}", tDoubleFloatHashMap3.toString());
  }

//   @Test
//   public void test14()  throws Throwable  {
//       int int0 = (-1701);
//       float float0 = 0.0F;
//       float float1 = 1.0F;
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0, float0, (double) float0, float1);
//       float float2 = tDoubleFloatHashMap0.getNoEntryValue();
//       assertEquals(1.0F, float2, 0.01F);
//       assertEquals(0.0, tDoubleFloatHashMap0.getNoEntryKey(), 0.01D);
//   }

//   @Test
//   public void test15()  throws Throwable  {
//       double[] doubleArray0 = new double[4];
//       double double0 = 0.0;
//       doubleArray0[0] = double0;
//       double double1 = 0.0;
//       doubleArray0[1] = double1;
//       double double2 = (-909.8571133774607);
//       doubleArray0[2] = double2;
//       double double3 = (-1.0);
//       doubleArray0[3] = double3;
//       float[] floatArray0 = new float[6];
//       float float0 = 1550.5503F;
//       floatArray0[0] = float0;
//       float float1 = (-283.86984F);
//       floatArray0[1] = float1;
//       float float2 = (-518.4461F);
//       floatArray0[2] = float2;
//       float float3 = 0.0F;
//       floatArray0[3] = float3;
//       float float4 = 1449.9897F;
//       floatArray0[4] = float4;
//       float float5 = 841.44507F;
//       floatArray0[5] = float5;
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
//       TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap((TDoubleFloatMap) tDoubleFloatHashMap0);
//       tDoubleFloatHashMap1.containsValue(floatArray0[5]);
//       assertEquals(3, tDoubleFloatHashMap0.size());
//       assertEquals(0.0F, tDoubleFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals("{-1.0=0.0, -909.8571133774607=-518.4461, 0.0=-283.86984}", tDoubleFloatHashMap0.toString());
//       assertEquals(17, tDoubleFloatHashMap0.capacity());
//       assertEquals("{-1.0=0.0, -909.8571133774607=-518.4461, 0.0=-283.86984}", tDoubleFloatHashMap1.toString());
//       assertEquals(0.0, tDoubleFloatHashMap1.getNoEntryKey(), 0.01D);
//   }

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-215.87913586282838);
      doubleArray0[0] = double0;
      float[] floatArray0 = new float[8];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = (-1.0F);
      floatArray0[1] = float1;
      float float2 = 0.0F;
      floatArray0[2] = float2;
      float float3 = (-66.403F);
      floatArray0[3] = float3;
      float float4 = 1981.742F;
      floatArray0[4] = float4;
      float float5 = (-1265.3977F);
      floatArray0[5] = float5;
      float float6 = 668.986F;
      floatArray0[6] = float6;
      float float7 = (-1365.1249F);
      floatArray0[7] = float7;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      String string0 = " greater than end index ";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 0:  greater than end index 
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-971);
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0);
      tDoubleFloatHashMap0.contains((double) int0);
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      tDoubleFloatHashMap1.putAll((TDoubleFloatMap) tDoubleFloatHashMap0);
      int int1 = 34;
      TDoubleFloatHashMap tDoubleFloatHashMap2 = new TDoubleFloatHashMap(int1);
      float float0 = (-258.41693F);
      tDoubleFloatHashMap1.putIfAbsent((double) int0, float0);
      double double0 = 586.7724614963334;
      float float1 = tDoubleFloatHashMap2.put(double0, float0);
      TDoubleFloatHashMap tDoubleFloatHashMap3 = new TDoubleFloatHashMap((TDoubleFloatMap) tDoubleFloatHashMap2);
      tDoubleFloatHashMap3.keys(tDoubleFloatHashMap2._set);
      int int2 = 0;
      TDoubleFloatHashMap tDoubleFloatHashMap4 = new TDoubleFloatHashMap(int2, int2);
      tDoubleFloatHashMap4.capacity();
      double[] doubleArray0 = tDoubleFloatHashMap0._set;
      double double1 = (-1436.3488257150243);
      tDoubleFloatHashMap2.adjustValue(double1, (float) int2);
      TFloatFunction tFloatFunction0 = null;
      double[] doubleArray1 = new double[10];
      doubleArray1[0] = (double) float0;
      double double2 = (-1497.379531939909);
      doubleArray1[1] = double2;
      doubleArray1[2] = double1;
      doubleArray1[3] = (double) float1;
      doubleArray1[4] = (double) float1;
      doubleArray1[5] = double0;
      doubleArray1[6] = double0;
      doubleArray1[7] = (double) float0;
      doubleArray1[8] = double1;
      doubleArray1[9] = (double) int1;
      tDoubleFloatHashMap3.keys(doubleArray1);
      assertEquals(false, tDoubleFloatHashMap2.isEmpty());
      
      tDoubleFloatHashMap4.transformValues(tFloatFunction0);
      assertEquals(0.0, tDoubleFloatHashMap4.getNoEntryKey(), 0.01D);
  }

  @Test
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 211.4506245141633;
      doubleArray0[0] = double0;
      double double1 = 1326.7052857040162;
      doubleArray0[1] = double1;
      double double2 = (-641.1859050534629);
      doubleArray0[2] = double2;
      double double3 = 1021.8693909911852;
      doubleArray0[3] = double3;
      double double4 = 2035.5166005964236;
      doubleArray0[4] = double4;
      double double5 = 1976.9554134740638;
      doubleArray0[5] = double5;
      double double6 = (-951.0911100799078);
      doubleArray0[6] = double6;
      double double7 = (-642.6972822589763);
      doubleArray0[7] = double7;
      float[] floatArray0 = new float[9];
      float float0 = (-1.0F);
      floatArray0[0] = float0;
      float float1 = (-169.07881F);
      floatArray0[1] = float1;
      float float2 = 1708.745F;
      floatArray0[2] = float2;
      float float3 = 83.97215F;
      floatArray0[3] = float3;
      float float4 = 753.4095F;
      floatArray0[4] = float4;
      float float5 = (-1886.2037F);
      floatArray0[5] = float5;
      float float6 = (-1027.808F);
      floatArray0[6] = float6;
      float float7 = 512.3949F;
      floatArray0[7] = float7;
      float float8 = (-1825.4044F);
      floatArray0[8] = float8;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      // Undeclared exception!
      try {
        tDoubleFloatHashMap1.setAutoCompactionFactor(floatArray0[8]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1825.4044
         //
      }
  }
}
