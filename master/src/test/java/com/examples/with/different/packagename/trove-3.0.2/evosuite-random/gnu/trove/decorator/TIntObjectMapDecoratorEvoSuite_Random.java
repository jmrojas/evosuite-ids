/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TIntObjectMapDecorator;
import gnu.trove.map.TIntObjectMap;
import gnu.trove.map.hash.TIntObjectHashMap;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.StringTokenizer;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntObjectMapDecoratorEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TIntObjectMapDecorator<Object> tIntObjectMapDecorator0 = new TIntObjectMapDecorator<Object>();
      Set<Map.Entry<Integer, Object>> set0 = (Set<Map.Entry<Integer, Object>>)tIntObjectMapDecorator0.entrySet();
      assertNotNull(set0);
  }

  @Test
  public void test1()  throws Throwable  {
      TIntObjectHashMap<TIntObjectHashMap<Object>> tIntObjectHashMap0 = new TIntObjectHashMap<TIntObjectHashMap<Object>>();
      TIntObjectMapDecorator<TIntObjectHashMap<Object>> tIntObjectMapDecorator0 = new TIntObjectMapDecorator<TIntObjectHashMap<Object>>((TIntObjectMap<TIntObjectHashMap<Object>>) tIntObjectHashMap0);
      tIntObjectMapDecorator0.size();
      TIntObjectHashMap<Object> tIntObjectHashMap1 = new TIntObjectHashMap<Object>();
      TIntObjectMapDecorator<Object> tIntObjectMapDecorator1 = new TIntObjectMapDecorator<Object>((TIntObjectMap<Object>) tIntObjectHashMap1);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = null;
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = null;
      try {
        abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Object>((Map.Entry<?, ?>) abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TIntObjectMapDecorator<Integer> tIntObjectMapDecorator0 = new TIntObjectMapDecorator<Integer>();
      TIntObjectMap<Integer> tIntObjectMap0 = tIntObjectMapDecorator0.getMap();
      assertNull(tIntObjectMap0);
  }

  @Test
  public void test3()  throws Throwable  {
      TIntObjectMapDecorator<Integer> tIntObjectMapDecorator0 = new TIntObjectMapDecorator<Integer>();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)109;
      byteArray0[0] = byte0;
      byte byte1 = (byte)81;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      int int0 = 1;
      int int1 = (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, int0, int1);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = null;
      TIntObjectMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Object>> tIntObjectMapDecorator0 = new TIntObjectMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      InputStream inputStream0 = null;
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TIntObjectMapDecorator<String> tIntObjectMapDecorator0 = new TIntObjectMapDecorator<String>();
      String string0 = "+. >?A3N6DtahP";
      int int0 = 1897;
      Integer integer0 = new Integer(int0);
      Integer integer1 = Integer.getInteger(string0, integer0);
      // Undeclared exception!
      try {
        tIntObjectMapDecorator0.put(integer1, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TIntObjectHashMap<Object> tIntObjectHashMap0 = new TIntObjectHashMap<Object>();
      Locale locale0 = Locale.FRANCE;
      String string0 = locale0.getDisplayLanguage();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>((Object) tIntObjectHashMap0, (Object) string0);
      Object object0 = null;
      // Undeclared exception!
      try {
        abstractMap_SimpleImmutableEntry0.setValue(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TIntObjectMapDecorator<AbstractMap.SimpleImmutableEntry<Integer, Object>> tIntObjectMapDecorator0 = new TIntObjectMapDecorator<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      String string0 = "_dA6kju[;n>MSYp";
      int int0 = (-1366);
      try {
        Integer.valueOf(string0, int0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1366 less than Character.MIN_RADIX
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-1);
      float float0 = 0.0F;
      TIntObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, Object>> tIntObjectHashMap0 = new TIntObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, Object>>(int0, float0, int0);
      TIntObjectMapDecorator<AbstractMap.SimpleImmutableEntry<Integer, Object>> tIntObjectMapDecorator0 = new TIntObjectMapDecorator<AbstractMap.SimpleImmutableEntry<Integer, Object>>((TIntObjectMap<AbstractMap.SimpleImmutableEntry<Integer, Object>>) tIntObjectHashMap0);
      String string0 = "";
      File file0 = new File(string0);
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         //  (No such file or directory)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      String string0 = "ks90>Y^7:tV$";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0);
      // Undeclared exception!
      try {
        stringTokenizer0.nextToken();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "MIN_NORMAL";
      TIntObjectMapDecorator<Integer> tIntObjectMapDecorator0 = new TIntObjectMapDecorator<Integer>();
      int int0 = 12203;
      Integer integer0 = new Integer(int0);
      TIntObjectMapDecorator<Object> tIntObjectMapDecorator1 = new TIntObjectMapDecorator<Object>();
      URI uRI0 = new URI(string0);
      String string1 = uRI0.toString();
      // Undeclared exception!
      try {
        tIntObjectMapDecorator1.put((Integer) int0, (Object) string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TIntObjectMapDecorator<Integer> tIntObjectMapDecorator0 = new TIntObjectMapDecorator<Integer>();
      String string0 = "k%!b'QEdVSh<Z2]";
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      // Undeclared exception!
      try {
        tIntObjectMapDecorator0.put(integer0, (Integer) int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TIntObjectMapDecorator<Object> tIntObjectMapDecorator0 = new TIntObjectMapDecorator<Object>();
      TIntObjectMap<Object> tIntObjectMap0 = tIntObjectMapDecorator0.getMap();
      TIntObjectMapDecorator<Object> tIntObjectMapDecorator1 = new TIntObjectMapDecorator<Object>(tIntObjectMap0);
      String string0 = "";
      try {
        Integer.valueOf(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.US;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale1 = Locale.getDefault(locale_Category0);
      locale0.getDisplayScript(locale1);
      String string0 = "~)I2'.+%gU0pV>Ea(DK";
      int int0 = 693;
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ~)I2'.+%gU0pV>Ea(DK://~)I2'.+%25gU0pV%3EEa(DK@~)I2'.+%gU0pV>Ea(DK:693~)I2'.+%25gU0pV%3EEa(DK?~)I2'.+%25gU0pV%3EEa(DK#~)I2'.+%25gU0pV%3EEa(DK
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TIntObjectMapDecorator<Integer> tIntObjectMapDecorator0 = new TIntObjectMapDecorator<Integer>();
      tIntObjectMapDecorator0.entrySet();
      String string0 = "Order not changed after insert";
      Integer integer0 = null;
      TIntObjectMap<Object> tIntObjectMap0 = null;
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 5: Order not changed after insert
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-421);
      int int1 = (-307);
      TIntObjectHashMap<Integer> tIntObjectHashMap0 = new TIntObjectHashMap<Integer>(int0, int0, int1);
      TIntObjectMapDecorator<Integer> tIntObjectMapDecorator0 = new TIntObjectMapDecorator<Integer>((TIntObjectMap<Integer>) tIntObjectHashMap0);
      tIntObjectMapDecorator0.put((Integer) int1, (Integer) int1);
      assertEquals(7, tIntObjectHashMap0.capacity());
      assertEquals(false, tIntObjectMapDecorator0.isEmpty());
  }

  @Test
  public void test16()  throws Throwable  {
      TIntObjectMap<String> tIntObjectMap0 = null;
      TIntObjectMapDecorator<String> tIntObjectMapDecorator0 = new TIntObjectMapDecorator<String>(tIntObjectMap0);
      TIntObjectHashMap<String> tIntObjectHashMap0 = new TIntObjectHashMap<String>();
      TIntObjectMapDecorator<String> tIntObjectMapDecorator1 = new TIntObjectMapDecorator<String>((TIntObjectMap<String>) tIntObjectHashMap0);
      String string0 = "vAs/4%%O+~%r$=d$k_";
      String string1 = "\nMore than one type used for keys. Watch out for asymmetric equals(). Read about the 'Liskov substitution principle' and the implications for equals() in java.";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string1, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: vAs/4%%O+~%r$=d$k_://vAs/4%%O+~%r$=d$k_%0AMore%20than%20one%20type%20used%20for%20keys.%20Watch%20out%20for%20asymmetric%20equals().%20Read%20about%20the%20'Liskov%20substitution%20principle'%20and%20the%20implications%20for%20equals()%20in%20java.#%0AMore%20than%20one%20type%20used%20for%20keys.%20Watch%20out%20for%20asymmetric%20equals().%20Read%20about%20the%20'Liskov%20substitution%20principle'%20and%20the%20implications%20for%20equals()%20in%20java.
         //
      }
  }
}
