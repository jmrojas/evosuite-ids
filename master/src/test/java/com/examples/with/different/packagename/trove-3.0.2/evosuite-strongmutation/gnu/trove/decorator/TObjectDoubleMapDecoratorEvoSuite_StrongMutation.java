/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TObjectDoubleMapDecorator;
import gnu.trove.map.TObjectDoubleMap;
import gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap;
import gnu.trove.map.hash.TObjectDoubleHashMap;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectDoubleMapDecoratorEvoSuite_StrongMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 Strong Mutation 39: gnu.trove.decorator.TObjectDoubleMapDecorator.getMap()Lgnu/trove/map/TObjectDoubleMap;:84 - DeleteField: _mapLgnu/trove/map/TObjectDoubleMap;
   * 2 gnu.trove.decorator.TObjectDoubleMapDecorator.getMap()Lgnu/trove/map/TObjectDoubleMap;: root-Branch
   * 3 gnu.trove.decorator.TObjectDoubleMapDecorator.<init>(Lgnu/trove/map/TObjectDoubleMap;)V: root-Branch
   * 4 Strong Mutation 39: gnu.trove.decorator.TObjectDoubleMapDecorator.getMap()Lgnu/trove/map/TObjectDoubleMap;:84 - DeleteField: _mapLgnu/trove/map/TObjectDoubleMap;
   */

  @Test
  public void test0()  throws Throwable  {
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Object>(0);
      TObjectDoubleMapDecorator<Object> tObjectDoubleMapDecorator0 = new TObjectDoubleMapDecorator<Object>((TObjectDoubleMap<Object>) tObjectDoubleHashMap0);
      TObjectDoubleMap<Object> tObjectDoubleMap0 = tObjectDoubleMapDecorator0.getMap();
      assertEquals(0.0, tObjectDoubleMap0.getNoEntryValue(), 0.01D);
  }

  //Test case number: 1
  /*
   * 11 covered goals:
   * 1 Strong Mutation 44: gnu.trove.decorator.TObjectDoubleMapDecorator.put(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double;:97 - DeleteStatement: put(Ljava/lang/Object;D)D
   * 2 Strong Mutation 42: gnu.trove.decorator.TObjectDoubleMapDecorator.put(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double;:97 - DeleteField: _mapLgnu/trove/map/TObjectDoubleMap;
   * 3 Strong Mutation 41: gnu.trove.decorator.TObjectDoubleMapDecorator.put(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double;:97 - DeleteField: _mapLgnu/trove/map/TObjectDoubleMap;
   * 4 Strong Mutation 42: gnu.trove.decorator.TObjectDoubleMapDecorator.put(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double;:97 - DeleteField: _mapLgnu/trove/map/TObjectDoubleMap;
   * 5 Strong Mutation 40: gnu.trove.decorator.TObjectDoubleMapDecorator.put(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double;:97 - ReplaceComparisonOperator != null -> = null
   * 6 Strong Mutation 41: gnu.trove.decorator.TObjectDoubleMapDecorator.put(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double;:97 - DeleteField: _mapLgnu/trove/map/TObjectDoubleMap;
   * 7 Strong Mutation 44: gnu.trove.decorator.TObjectDoubleMapDecorator.put(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double;:97 - DeleteStatement: put(Ljava/lang/Object;D)D
   * 8 Strong Mutation 106: gnu.trove.decorator.TObjectDoubleMapDecorator.wrapValue(D)Ljava/lang/Double;:311 - DeleteStatement: valueOf(D)Ljava/lang/Double;
   * 9 Strong Mutation 105: gnu.trove.decorator.TObjectDoubleMapDecorator.wrapValue(D)Ljava/lang/Double;:311 - InsertUnaryOp Negation of k
   * 10 gnu.trove.decorator.TObjectDoubleMapDecorator.wrapValue(D)Ljava/lang/Double;: root-Branch
   * 11 gnu.trove.decorator.TObjectDoubleMapDecorator.put(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double;: I3 Branch 5 IFNONNULL L97 - false
   */

  @Test
  public void test1()  throws Throwable  {
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>((-862));
      TObjectDoubleMapDecorator<Integer> tObjectDoubleMapDecorator0 = new TObjectDoubleMapDecorator<Integer>((TObjectDoubleMap<Integer>) tObjectDoubleHashMap0);
      Double double0 = tObjectDoubleMapDecorator0.put((Integer) (-862), (Double) null);
      assertEquals(1, tObjectDoubleMapDecorator0.size());
      assertEquals(0.0, (double)double0, 0.01D);
  }

  //Test case number: 2
  /*
   * 4 covered goals:
   * 1 Strong Mutation 80: gnu.trove.decorator.TObjectDoubleMapDecorator.containsValue(Ljava/lang/Object;)Z:253 - ReplaceConstant - 0 -> 1
   * 2 gnu.trove.decorator.TObjectDoubleMapDecorator.<init>()V: root-Branch
   * 3 gnu.trove.decorator.TObjectDoubleMapDecorator.containsValue(Ljava/lang/Object;)Z: I4 Branch 8 IFEQ L253 - true
   * 4 Strong Mutation 80: gnu.trove.decorator.TObjectDoubleMapDecorator.containsValue(Ljava/lang/Object;)Z:253 - ReplaceConstant - 0 -> 1
   */

  @Test
  public void test2()  throws Throwable  {
      TObjectDoubleMapDecorator<Double> tObjectDoubleMapDecorator0 = new TObjectDoubleMapDecorator<Double>();
      boolean boolean0 = tObjectDoubleMapDecorator0.containsValue((Object) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 3
  /*
   * 8 covered goals:
   * 1 Strong Mutation 84: gnu.trove.decorator.TObjectDoubleMapDecorator.size()I:274 - DeleteStatement: size()I
   * 2 gnu.trove.decorator.TObjectDoubleMapDecorator.size()I: root-Branch
   * 3 Strong Mutation 46: gnu.trove.decorator.TObjectDoubleMapDecorator.put(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double;:98 - DeleteField: _mapLgnu/trove/map/TObjectDoubleMap;
   * 4 Strong Mutation 47: gnu.trove.decorator.TObjectDoubleMapDecorator.put(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double;:98 - DeleteStatement: unwrapValue(Ljava/lang/Object;)D
   * 5 Strong Mutation 84: gnu.trove.decorator.TObjectDoubleMapDecorator.size()I:274 - DeleteStatement: size()I
   * 6 Strong Mutation 107: gnu.trove.decorator.TObjectDoubleMapDecorator.unwrapValue(Ljava/lang/Object;)D:322 - DeleteStatement: doubleValue()D
   * 7 gnu.trove.decorator.TObjectDoubleMapDecorator.unwrapValue(Ljava/lang/Object;)D: root-Branch
   * 8 gnu.trove.decorator.TObjectDoubleMapDecorator.put(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double;: I3 Branch 5 IFNONNULL L97 - true
   */

  @Test
  public void test3()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(10, 10);
      TObjectDoubleMapDecorator<Double> tObjectDoubleMapDecorator0 = new TObjectDoubleMapDecorator<Double>((TObjectDoubleMap<Double>) tObjectDoubleHashMap0);
      Double double0 = new Double((double) 10);
      tObjectDoubleMapDecorator0.put(double0, double0);
      TObjectDoubleCustomHashMap<Object> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, 10, (-906.94653F));
      TObjectDoubleMapDecorator<Object> tObjectDoubleMapDecorator1 = new TObjectDoubleMapDecorator<Object>((TObjectDoubleMap<Object>) tObjectDoubleCustomHashMap0);
      int int0 = tObjectDoubleMapDecorator1.size();
      assertEquals(0, int0);
  }

  //Test case number: 4
  /*
   * 5 covered goals:
   * 1 Strong Mutation 90: gnu.trove.decorator.TObjectDoubleMapDecorator.isEmpty()Z:284 - ReplaceConstant - 1 -> 0
   * 2 Strong Mutation 89: gnu.trove.decorator.TObjectDoubleMapDecorator.isEmpty()Z:284 - ReplaceComparisonOperator != -> -1
   * 3 Strong Mutation 89: gnu.trove.decorator.TObjectDoubleMapDecorator.isEmpty()Z:284 - ReplaceComparisonOperator != -> -1
   * 4 Strong Mutation 90: gnu.trove.decorator.TObjectDoubleMapDecorator.isEmpty()Z:284 - ReplaceConstant - 1 -> 0
   * 5 gnu.trove.decorator.TObjectDoubleMapDecorator.isEmpty()Z: I5 Branch 10 IFNE L284 - false
   */

  @Test
  public void test4()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectDoubleCustomHashMap<Object> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, 1202, (float) 1202, (double) 1202);
      TObjectDoubleMapDecorator<Object> tObjectDoubleMapDecorator0 = new TObjectDoubleMapDecorator<Object>((TObjectDoubleMap<Object>) tObjectDoubleCustomHashMap0);
      boolean boolean0 = tObjectDoubleMapDecorator0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 5
  /*
   * 6 covered goals:
   * 1 Strong Mutation 107: gnu.trove.decorator.TObjectDoubleMapDecorator.unwrapValue(Ljava/lang/Object;)D:322 - DeleteStatement: doubleValue()D
   * 2 Strong Mutation 40: gnu.trove.decorator.TObjectDoubleMapDecorator.put(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double;:97 - ReplaceComparisonOperator != null -> = null
   * 3 Strong Mutation 46: gnu.trove.decorator.TObjectDoubleMapDecorator.put(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double;:98 - DeleteField: _mapLgnu/trove/map/TObjectDoubleMap;
   * 4 Strong Mutation 47: gnu.trove.decorator.TObjectDoubleMapDecorator.put(Ljava/lang/Object;Ljava/lang/Double;)Ljava/lang/Double;:98 - DeleteStatement: unwrapValue(Ljava/lang/Object;)D
   * 5 Strong Mutation 106: gnu.trove.decorator.TObjectDoubleMapDecorator.wrapValue(D)Ljava/lang/Double;:311 - DeleteStatement: valueOf(D)Ljava/lang/Double;
   * 6 Strong Mutation 105: gnu.trove.decorator.TObjectDoubleMapDecorator.wrapValue(D)Ljava/lang/Double;:311 - InsertUnaryOp Negation of k
   */

  @Test
  public void test5()  throws Throwable  {
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(1, 202.88582F, (double) 1);
      TObjectDoubleMapDecorator<Double> tObjectDoubleMapDecorator0 = new TObjectDoubleMapDecorator<Double>((TObjectDoubleMap<Double>) tObjectDoubleHashMap0);
      Double double0 = new Double((double) 202.88582F);
      Double double1 = tObjectDoubleMapDecorator0.put(double0, double0);
      assertEquals(false, tObjectDoubleMapDecorator0.isEmpty());
      assertEquals(1.0, (double)double1, 0.01D);
  }
}
