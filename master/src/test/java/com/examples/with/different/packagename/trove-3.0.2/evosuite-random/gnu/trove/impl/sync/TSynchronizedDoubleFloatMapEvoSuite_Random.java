/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedDoubleFloatMap;
import gnu.trove.impl.sync.TSynchronizedDoubleSet;
import gnu.trove.impl.sync.TSynchronizedFloatCollection;
import gnu.trove.map.TDoubleFloatMap;
import gnu.trove.map.hash.TDoubleFloatHashMap;
import gnu.trove.procedure.TFloatProcedure;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedDoubleFloatMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
          String string0 = "y*S@nG:";
          File file0 = new File(string0, string0);
          File file1 = file0.getCanonicalFile();
          TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
          double double0 = 0.0;
          float float0 = 0.0F;
          tSynchronizedDoubleFloatMap0.put(double0, float0);
          TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap1 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
          boolean boolean0 = true;
          // Undeclared exception!
          try {
            file1.setReadable(boolean0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/mnt/fastdata/ac1gf/Experiments_Major/apps/trove-3.0.2/y*S@nG:/y*S@nG:\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.File.setReadable(File.java:1480)
             // java.io.File.setReadable(File.java:1514)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:601)
             // org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:264)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      TDoubleFloatMap tDoubleFloatMap0 = null;
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = null;
      try {
        tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap(tDoubleFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test2()  throws Throwable  {
//       int int0 = (-817);
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0);
//       String string0 = "";
//       File file0 = new File(string0);
//       String string1 = file0.getAbsolutePath();
//       TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0, (Object) string1);
//       double double0 = (-230.43472491613443);
//       float float0 = tSynchronizedDoubleFloatMap0.remove(double0);
//       assertEquals(0.0F, float0, 0.01F);
//   }

  @Test
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-489.5332963825824);
      doubleArray0[0] = double0;
      double double1 = (-177.9550419545126);
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 1818.755671830199;
      doubleArray0[3] = double3;
      double double4 = Double.POSITIVE_INFINITY;
      doubleArray0[4] = double4;
      double double5 = (-1841.7185307709613);
      doubleArray0[5] = double5;
      double double6 = 1.0;
      doubleArray0[6] = double6;
      double double7 = Double.POSITIVE_INFINITY;
      doubleArray0[7] = double7;
      double double8 = 0.0;
      doubleArray0[8] = double8;
      float[] floatArray0 = new float[4];
      float float0 = Float.POSITIVE_INFINITY;
      floatArray0[0] = float0;
      float float1 = 592.82874F;
      floatArray0[1] = float1;
      float float2 = 0.0F;
      floatArray0[2] = float2;
      float float3 = (-553.6067F);
      floatArray0[3] = float3;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      Locale locale0 = Locale.PRC;
      String string0 = "";
      Locale locale1 = new Locale(string0, string0);
      String string1 = locale0.getDisplayLanguage(locale1);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0, (Object) string1);
      TSynchronizedFloatCollection tSynchronizedFloatCollection0 = (TSynchronizedFloatCollection)tSynchronizedDoubleFloatMap0.valueCollection();
      assertEquals("{-553.6067, 592.82874, Infinity, 0.0}", tSynchronizedFloatCollection0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap1 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tSynchronizedDoubleFloatMap0);
      double double0 = (-1.0);
      tSynchronizedDoubleFloatMap0.remove(double0);
      double[] doubleArray0 = tSynchronizedDoubleFloatMap1.keys();
      assertNotNull(doubleArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale0 = Locale.getDefault(locale_Category0);
      Locale locale1 = Locale.CHINESE;
      String string0 = locale0.getDisplayScript(locale1);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0, (Object) string0);
      tSynchronizedDoubleFloatMap0.size();
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      Locale locale2 = Locale.TAIWAN;
      String string1 = locale2.toString();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap1 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap1, (Object) string1);
      TFloatProcedure tFloatProcedure0 = null;
      boolean boolean0 = tSynchronizedDoubleFloatMap1.forEachValue(tFloatProcedure0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-464.7917103837519);
      doubleArray0[0] = double0;
      float[] floatArray0 = new float[2];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      String string0 = tSynchronizedDoubleFloatMap0.toString();
      assertNotNull(string0);
      
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap1 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tSynchronizedDoubleFloatMap0, (Object) string0);
      Locale locale0 = Locale.CANADA;
      String string1 = locale0.toString();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap2 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tSynchronizedDoubleFloatMap1, (Object) string1);
      tSynchronizedDoubleFloatMap2.putIfAbsent(double0, float0);
      assertEquals(1, tSynchronizedDoubleFloatMap1.size());
      assertEquals(1, tSynchronizedDoubleFloatMap2.size());
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-66);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      double double0 = 2.0;
      doubleArray0[3] = double0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      double double1 = 0.0;
      tSynchronizedDoubleFloatMap0.containsKey(double1);
      int int1 = 719;
      float float0 = 0.0F;
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap(int1, float0);
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.ITALY;
      String string0 = locale0.getDisplayName(locale1);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap1 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap1, (Object) string0);
      tSynchronizedDoubleFloatMap1.getNoEntryKey();
      String string1 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string1, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: inglese (Stati Uniti)://inglese%20(Stati%20Uniti)#inglese%20(Stati%20Uniti)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = 183.9032F;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0, float0, (double) float0, float1);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      int int1 = tSynchronizedDoubleFloatMap0.hashCode();
      assertTrue(int1 == int0);
  }

  @Test
  public void test9()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 1864.9138309667771;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      float[] floatArray0 = new float[5];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      float float2 = (-1409.1981F);
      floatArray0[2] = float2;
      float float3 = 1196.662F;
      floatArray0[3] = float3;
      float float4 = 1249.327F;
      floatArray0[4] = float4;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      tSynchronizedDoubleFloatMap0.clear();
      assertEquals(true, tDoubleFloatHashMap0.isEmpty());
      assertEquals(0, tSynchronizedDoubleFloatMap0.size());
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 4177;
          float float0 = (-1506.0919F);
          int int1 = 1;
          TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int1);
          String string0 = "tq4$wvLQ/S";
          File file0 = new File(string0);
          File file1 = file0.getParentFile();
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0, file1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"tq4$wvLQ/tq4$wvLQ/S3749551793931416900tq4$wvLQ/S\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.File.createTempFile(File.java:1871)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:601)
             // org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:264)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-1524.2816440179229);
      doubleArray0[0] = double0;
      float[] floatArray0 = new float[5];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = (-1925.1122F);
      floatArray0[1] = float1;
      float float2 = 0.0F;
      floatArray0[2] = float2;
      float float3 = (-1625.3927F);
      floatArray0[3] = float3;
      int int0 = (-2017);
      double double1 = (-960.9396819998678);
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0, floatArray0[1], double1, floatArray0[0]);
      String string0 = "JzV*\\Dgox";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 4: JzV*\\Dgox
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-1);
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0, int0, int0, int0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) int0;
      float float0 = (-1000.85614F);
      floatArray0[1] = float0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) int0;
      float[] floatArray1 = tSynchronizedDoubleFloatMap0.values(floatArray0);
      assertSame(floatArray0, floatArray1);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-598);
      float float0 = 977.48303F;
      double double0 = (-22.621267805547333);
      float float1 = 0.5F;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0, float0, double0, float1);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap((TDoubleFloatMap) tSynchronizedDoubleFloatMap0);
      String string0 = "";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0);
      // Undeclared exception!
      try {
        stringTokenizer0.nextToken(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      double double1 = 435.715853510138;
      doubleArray0[1] = double1;
      int int0 = 730;
      float float0 = (-364.6676F);
      double double2 = 0.0;
      float float1 = 0.0F;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(int0, float0, double2, float1);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      tSynchronizedDoubleFloatMap0.values();
      double double3 = (-1232.9373488920317);
      doubleArray0[2] = double3;
      double double4 = 2.0;
      doubleArray0[3] = double4;
      double double5 = 0.0;
      doubleArray0[4] = double5;
      double double6 = 153.15902686627135;
      doubleArray0[5] = double6;
      double double7 = (-126.72473770667612);
      doubleArray0[6] = double7;
      double double8 = 0.0;
      doubleArray0[7] = double8;
      float[] floatArray0 = new float[5];
      float float2 = 0.0F;
      floatArray0[0] = float2;
      float float3 = (-658.4844F);
      floatArray0[1] = float3;
      float float4 = 1050.4573F;
      floatArray0[2] = float4;
      float float5 = (-1436.066F);
      floatArray0[3] = float5;
      float float6 = 0.0F;
      floatArray0[4] = float6;
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap1 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap1);
      TSynchronizedDoubleSet tSynchronizedDoubleSet0 = (TSynchronizedDoubleSet)tSynchronizedDoubleFloatMap1.keySet();
      assertEquals(0.0, tSynchronizedDoubleSet0.getNoEntryValue(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      double double0 = (-1195.9967737830887);
      Float float0 = new Float(double0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0, (Object) float0);
      TSynchronizedDoubleSet tSynchronizedDoubleSet0 = (TSynchronizedDoubleSet)tSynchronizedDoubleFloatMap0.keySet();
      assertEquals(0, tSynchronizedDoubleSet0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = (-266.1488745340396);
      doubleArray0[2] = double2;
      double double3 = 2.0;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = (-1772.9849742654415);
      doubleArray0[5] = double5;
      double double6 = 804.0621290481524;
      doubleArray0[6] = double6;
      double double7 = 0.0;
      doubleArray0[7] = double7;
      float[] floatArray0 = new float[4];
      float float0 = (-1.0F);
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      float float2 = 6.6360896E8F;
      floatArray0[2] = float2;
      float float3 = (-1.0F);
      floatArray0[3] = float3;
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      TDoubleFloatHashMap tDoubleFloatHashMap1 = new TDoubleFloatHashMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap1);
      assertEquals(false, tSynchronizedDoubleFloatMap0.isEmpty());
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 191;
      TDoubleFloatMap tDoubleFloatMap0 = null;
      float float0 = 767.80566F;
      String string0 = Float.toString(float0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap(tDoubleFloatMap0, (Object) string0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap1 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tSynchronizedDoubleFloatMap0);
      double double0 = 0.0;
      // Undeclared exception!
      try {
        tSynchronizedDoubleFloatMap1.get(double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
