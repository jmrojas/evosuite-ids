/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.set.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TByteCollection;
import gnu.trove.impl.sync.TSynchronizedByteSet;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessByteList;
import gnu.trove.list.TByteList;
import gnu.trove.list.array.TByteArrayList;
import gnu.trove.set.TByteSet;
import gnu.trove.set.hash.TByteHashSet;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteHashSetEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 12 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet$TByteHashIterator.next()B: root-Branch
   * 2 gnu.trove.set.hash.TByteHashSet.add(B)Z: I9 Branch 9 IFGE L196 - true
   * 3 gnu.trove.set.hash.TByteHashSet.addAll(Ljava/util/Collection;)Z: I12 Branch 18 IFEQ L261 - false
   * 4 gnu.trove.set.hash.TByteHashSet.addAll(Ljava/util/Collection;)Z: I27 Branch 19 IFEQ L263 - false
   * 5 gnu.trove.set.hash.TByteHashSet.retainAll(Ljava/util/Collection;)Z: I13 Branch 24 IFEQ L302 - false
   * 6 gnu.trove.set.hash.TByteHashSet.retainAll(Ljava/util/Collection;)Z: I21 Branch 25 IFGT L303 - true
   * 7 gnu.trove.set.hash.TByteHashSet$TByteHashIterator.<init>(Lgnu/trove/set/hash/TByteHashSet;Lgnu/trove/impl/hash/TByteHash;)V: root-Branch
   * 8 gnu.trove.set.hash.TByteHashSet.<init>(Ljava/util/Collection;)V: root-Branch
   * 9 gnu.trove.set.hash.TByteHashSet.<init>(I)V: root-Branch
   * 10 gnu.trove.set.hash.TByteHashSet.iterator()Lgnu/trove/iterator/TByteIterator;: root-Branch
   * 11 gnu.trove.set.hash.TByteHashSet.retainAll(Ljava/util/Collection;)Z: I13 Branch 24 IFEQ L302 - true
   * 12 gnu.trove.set.hash.TByteHashSet.addAll(Ljava/util/Collection;)Z: I12 Branch 18 IFEQ L261 - true
   */

  @Test
  public void test0()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)0);
      TByteHashSet tByteHashSet0 = new TByteHashSet((Collection<? extends Byte>) linkedList0);
      linkedList0.add(byte0);
      tByteHashSet0.addAll((Collection<? extends Byte>) linkedList0);
      boolean boolean0 = tByteHashSet0.retainAll((Collection<?>) linkedList0);
      assertEquals(false, tByteHashSet0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.set.hash.TByteHashSet.<init>(IFB)V: I10 Branch 1 IFEQ L101 - true
   */

  @Test
  public void test1()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet(0, (float) 0, (byte)0);
      assertEquals(3, tByteHashSet0.capacity());
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.<init>(Lgnu/trove/TByteCollection;)V: I12 Branch 2 IFEQ L127 - false
   * 2 gnu.trove.set.hash.TByteHashSet.<init>(Lgnu/trove/TByteCollection;)V: I34 Branch 3 IFEQ L132 - true
   * 3 gnu.trove.set.hash.TByteHashSet.<init>(IF)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet(74, 0);
      TByteHashSet tByteHashSet1 = null;
      try {
        tByteHashSet1 = new TByteHashSet((TByteCollection) tByteHashSet0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  //Test case number: 3
  /*
   * 4 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.<init>(Lgnu/trove/TByteCollection;)V: I34 Branch 3 IFEQ L132 - false
   * 2 gnu.trove.set.hash.TByteHashSet.<init>(Lgnu/trove/TByteCollection;)V: I12 Branch 2 IFEQ L127 - false
   * 3 gnu.trove.set.hash.TByteHashSet.<init>(IFB)V: I10 Branch 1 IFEQ L101 - false
   * 4 gnu.trove.set.hash.TByteHashSet.addAll(Lgnu/trove/TByteCollection;)Z: I13 Branch 20 IFEQ L275 - true
   */

//   @Test
//   public void test3()  throws Throwable  {
//       TByteHashSet tByteHashSet0 = new TByteHashSet(74, (-1.0F), (byte) (-23));
//       TByteHashSet tByteHashSet1 = new TByteHashSet((TByteCollection) tByteHashSet0);
//       assertEquals(3, tByteHashSet1.capacity());
//       assertEquals(-23, tByteHashSet1.getNoEntryValue());
//   }

  //Test case number: 4
  /*
   * 10 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.toArray()[B: I34 Branch 5 IF_ICMPNE L166 - false
   * 2 gnu.trove.set.hash.TByteHashSet.toArray()[B: I27 Branch 4 IFLE L165 - true
   * 3 gnu.trove.set.hash.TByteHashSet.toArray()[B: I27 Branch 4 IFLE L165 - false
   * 4 gnu.trove.set.hash.TByteHashSet.toArray()[B: I34 Branch 5 IF_ICMPNE L166 - true
   * 5 gnu.trove.set.hash.TByteHashSet.<init>([B)V: root-Branch
   * 6 gnu.trove.set.hash.TByteHashSet.add(B)Z: I9 Branch 9 IFGE L196 - false
   * 7 gnu.trove.set.hash.TByteHashSet.addAll([B)Z: I12 Branch 22 IFLE L288 - true
   * 8 gnu.trove.set.hash.TByteHashSet.addAll([B)Z: I12 Branch 22 IFLE L288 - false
   * 9 gnu.trove.set.hash.TByteHashSet.addAll([B)Z: I20 Branch 23 IFEQ L289 - true
   * 10 gnu.trove.set.hash.TByteHashSet.addAll([B)Z: I20 Branch 23 IFEQ L289 - false
   */

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      TByteHashSet tByteHashSet0 = new TByteHashSet(byteArray0);
      byte[] byteArray1 = tByteHashSet0.toArray();
      assertEquals("{0}", tByteHashSet0.toString());
      assertNotNull(byteArray1);
  }

  //Test case number: 5
  /*
   * 9 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.toArray([B)[B: I28 Branch 7 IF_ICMPNE L180 - false
   * 2 gnu.trove.set.hash.TByteHashSet.rehash(I)V: I35 Branch 40 IFLE L410 - true
   * 3 gnu.trove.set.hash.TByteHashSet.rehash(I)V: I35 Branch 40 IFLE L410 - false
   * 4 gnu.trove.set.hash.TByteHashSet.rehash(I)V: I42 Branch 41 IF_ICMPNE L411 - true
   * 5 gnu.trove.set.hash.TByteHashSet.rehash(I)V: I42 Branch 41 IF_ICMPNE L411 - false
   * 6 gnu.trove.set.hash.TByteHashSet.toArray([B)[B: I45 Branch 8 IF_ICMPLE L185 - false
   * 7 gnu.trove.set.hash.TByteHashSet.toArray([B)[B: I21 Branch 6 IFLE L179 - true
   * 8 gnu.trove.set.hash.TByteHashSet.toArray([B)[B: I21 Branch 6 IFLE L179 - false
   * 9 gnu.trove.set.hash.TByteHashSet.toArray([B)[B: I28 Branch 7 IF_ICMPNE L180 - true
   */

  @Test
  public void test5()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet(74, 0);
      tByteHashSet0.add((byte)1);
      tByteHashSet0.toArray(tByteHashSet0._set);
      assertEquals(7, tByteHashSet0.capacity());
      assertEquals("{0}", tByteHashSet0.toString());
  }

  //Test case number: 6
  /*
   * 5 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.toArray([B)[B: I45 Branch 8 IF_ICMPLE L185 - true
   * 2 gnu.trove.set.hash.TByteHashSet.toArray([B)[B: I21 Branch 6 IFLE L179 - true
   * 3 gnu.trove.set.hash.TByteHashSet.toArray([B)[B: I21 Branch 6 IFLE L179 - false
   * 4 gnu.trove.set.hash.TByteHashSet.toArray([B)[B: I28 Branch 7 IF_ICMPNE L180 - true
   * 5 gnu.trove.set.hash.TByteHashSet.toArray([B)[B: I28 Branch 7 IF_ICMPNE L180 - false
   */

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)1;
      byteArray0[4] = (byte) (-12);
      byteArray0[6] = (byte) (-65);
      byteArray0[8] = (byte) (-121);
      TByteHashSet tByteHashSet0 = new TByteHashSet(byteArray0);
      byte[] byteArray1 = new byte[6];
      byte[] byteArray2 = tByteHashSet0.toArray(byteArray1);
      assertEquals("{113,-12,-121,-65,1,0}", tByteHashSet0.toString());
      assertSame(byteArray1, byteArray2);
      assertNotNull(byteArray2);
  }

  //Test case number: 7
  /*
   * 5 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.remove(B)Z: I9 Branch 10 IFLT L209 - false
   * 2 gnu.trove.set.hash.TByteHashSet.removeAll(Ljava/util/Collection;)Z: I12 Branch 32 IFEQ L349 - true
   * 3 gnu.trove.set.hash.TByteHashSet.removeAll(Ljava/util/Collection;)Z: I12 Branch 32 IFEQ L349 - false
   * 4 gnu.trove.set.hash.TByteHashSet.removeAll(Ljava/util/Collection;)Z: I20 Branch 33 IFEQ L350 - false
   * 5 gnu.trove.set.hash.TByteHashSet.removeAll(Ljava/util/Collection;)Z: I32 Branch 34 IFEQ L352 - false
   */

  @Test
  public void test7()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)0);
      TByteHashSet tByteHashSet0 = new TByteHashSet((Collection<? extends Byte>) linkedList0);
      linkedList0.add(byte0);
      tByteHashSet0.addAll((Collection<? extends Byte>) linkedList0);
      assertEquals(false, tByteHashSet0.isEmpty());
      
      boolean boolean0 = tByteHashSet0.removeAll((Collection<?>) linkedList0);
      assertEquals(true, boolean0);
  }

  //Test case number: 8
  /*
   * 3 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.containsAll(Ljava/util/Collection;)Z: I8 Branch 11 IFEQ L219 - false
   * 2 gnu.trove.set.hash.TByteHashSet.containsAll(Ljava/util/Collection;)Z: I16 Branch 12 IFEQ L220 - false
   * 3 gnu.trove.set.hash.TByteHashSet.containsAll(Ljava/util/Collection;)Z: I28 Branch 13 IFNE L222 - false
   */

  @Test
  public void test8()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)0);
      TByteHashSet tByteHashSet0 = new TByteHashSet((Collection<? extends Byte>) linkedList0);
      linkedList0.add(byte0);
      boolean boolean0 = tByteHashSet0.containsAll((Collection<?>) linkedList0);
      assertEquals(false, boolean0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.set.hash.TByteHashSet.containsAll(Ljava/util/Collection;)Z: I16 Branch 12 IFEQ L220 - true
   */

  @Test
  public void test9()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet(0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "");
      boolean boolean0 = tByteHashSet0.containsAll((Collection<?>) linkedList0);
      assertEquals(false, boolean0);
  }

  //Test case number: 10
  /*
   * 4 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.containsAll(Ljava/util/Collection;)Z: I28 Branch 13 IFNE L222 - true
   * 2 gnu.trove.set.hash.TByteHashSet.containsAll(Ljava/util/Collection;)Z: I8 Branch 11 IFEQ L219 - true
   * 3 gnu.trove.set.hash.TByteHashSet.containsAll(Ljava/util/Collection;)Z: I8 Branch 11 IFEQ L219 - false
   * 4 gnu.trove.set.hash.TByteHashSet.containsAll(Ljava/util/Collection;)Z: I16 Branch 12 IFEQ L220 - false
   */

  @Test
  public void test10()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)0);
      TByteHashSet tByteHashSet0 = new TByteHashSet((Collection<? extends Byte>) linkedList0);
      linkedList0.add(byte0);
      tByteHashSet0.addAll((Collection<? extends Byte>) linkedList0);
      boolean boolean0 = tByteHashSet0.containsAll((Collection<?>) linkedList0);
      assertEquals(1, tByteHashSet0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 11
  /*
   * 3 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.containsAll(Lgnu/trove/TByteCollection;)Z: I9 Branch 14 IFEQ L237 - false
   * 2 gnu.trove.set.hash.TByteHashSet.containsAll(Lgnu/trove/TByteCollection;)Z: I20 Branch 15 IFNE L239 - true
   * 3 gnu.trove.set.hash.TByteHashSet.containsAll(Lgnu/trove/TByteCollection;)Z: I9 Branch 14 IFEQ L237 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet(74, 0);
      tByteHashSet0.add((byte)1);
      TSynchronizedByteSet tSynchronizedByteSet0 = new TSynchronizedByteSet((TByteSet) tByteHashSet0, (Object) "und");
      boolean boolean0 = tByteHashSet0.containsAll((TByteCollection) tSynchronizedByteSet0);
      assertEquals("{1}", tByteHashSet0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 2 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.containsAll(Lgnu/trove/TByteCollection;)Z: I20 Branch 15 IFNE L239 - false
   * 2 gnu.trove.set.hash.TByteHashSet.containsAll(Lgnu/trove/TByteCollection;)Z: I9 Branch 14 IFEQ L237 - false
   */

  @Test
  public void test12()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet((-544), (float) (-544), (byte)5);
      TByteHashSet tByteHashSet1 = new TByteHashSet(tByteHashSet0._set);
      boolean boolean0 = tByteHashSet0.containsAll((TByteCollection) tByteHashSet1);
      assertEquals("{5}", tByteHashSet1.toString());
      assertEquals(false, boolean0);
      assertEquals(1, tByteHashSet1.size());
  }

  //Test case number: 13
  /*
   * 3 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.containsAll([B)Z: I8 Branch 16 IFLE L249 - true
   * 2 gnu.trove.set.hash.TByteHashSet.containsAll([B)Z: I8 Branch 16 IFLE L249 - false
   * 3 gnu.trove.set.hash.TByteHashSet.containsAll([B)Z: I16 Branch 17 IFNE L250 - true
   */

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      TByteHashSet tByteHashSet0 = new TByteHashSet(byteArray0);
      boolean boolean0 = tByteHashSet0.containsAll(byteArray0);
      assertEquals(true, boolean0);
      assertEquals("{0}", tByteHashSet0.toString());
      assertEquals(false, tByteHashSet0.isEmpty());
  }

  //Test case number: 14
  /*
   * 3 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.containsAll([B)Z: I16 Branch 17 IFNE L250 - false
   * 2 gnu.trove.set.hash.TByteHashSet.containsAll([B)Z: I8 Branch 16 IFLE L249 - false
   * 3 gnu.trove.set.hash.TByteHashSet.<init>()V: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet();
      boolean boolean0 = tByteHashSet0.containsAll(tByteHashSet0._set);
      assertEquals(false, boolean0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.set.hash.TByteHashSet.addAll(Ljava/util/Collection;)Z: I27 Branch 19 IFEQ L263 - true
   */

  @Test
  public void test15()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)0);
      linkedList0.add(byte0);
      linkedList0.add(byte0);
      TByteHashSet tByteHashSet0 = new TByteHashSet((Collection<? extends Byte>) linkedList0);
      assertEquals(false, tByteHashSet0.isEmpty());
      assertEquals("{0}", tByteHashSet0.toString());
  }

  //Test case number: 16
  /*
   * 7 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.addAll(Lgnu/trove/TByteCollection;)Z: I13 Branch 20 IFEQ L275 - false
   * 2 gnu.trove.set.hash.TByteHashSet.addAll(Lgnu/trove/TByteCollection;)Z: I24 Branch 21 IFEQ L277 - false
   * 3 gnu.trove.set.hash.TByteHashSet.rehash(I)V: I35 Branch 40 IFLE L410 - true
   * 4 gnu.trove.set.hash.TByteHashSet.rehash(I)V: I35 Branch 40 IFLE L410 - false
   * 5 gnu.trove.set.hash.TByteHashSet.rehash(I)V: I42 Branch 41 IF_ICMPNE L411 - true
   * 6 gnu.trove.set.hash.TByteHashSet.rehash(I)V: I42 Branch 41 IF_ICMPNE L411 - false
   * 7 gnu.trove.set.hash.TByteHashSet.<init>(Lgnu/trove/TByteCollection;)V: I12 Branch 2 IFEQ L127 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet(74, 0);
      tByteHashSet0.add((byte)1);
      TSynchronizedByteSet tSynchronizedByteSet0 = new TSynchronizedByteSet((TByteSet) tByteHashSet0, (Object) "und");
      TByteHashSet tByteHashSet1 = new TByteHashSet((TByteCollection) tSynchronizedByteSet0);
      assertEquals(7, tByteHashSet0.capacity());
      assertTrue(tByteHashSet0.equals(tByteHashSet1));
  }

  //Test case number: 17
  /*
   * 3 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.addAll(Lgnu/trove/TByteCollection;)Z: I24 Branch 21 IFEQ L277 - true
   * 2 gnu.trove.set.hash.TByteHashSet.addAll(Lgnu/trove/TByteCollection;)Z: I13 Branch 20 IFEQ L275 - true
   * 3 gnu.trove.set.hash.TByteHashSet.addAll(Lgnu/trove/TByteCollection;)Z: I13 Branch 20 IFEQ L275 - false
   */

  @Test
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      TByteHashSet tByteHashSet0 = new TByteHashSet(byteArray0);
      boolean boolean0 = tByteHashSet0.addAll((TByteCollection) tByteHashSet0);
      assertEquals(1, tByteHashSet0.size());
      assertEquals("{0}", tByteHashSet0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 18
  /*
   * 3 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.retainAll(Ljava/util/Collection;)Z: I21 Branch 25 IFGT L303 - false
   * 2 gnu.trove.set.hash.TByteHashSet.retainAll(Ljava/util/Collection;)Z: I13 Branch 24 IFEQ L302 - true
   * 3 gnu.trove.set.hash.TByteHashSet.retainAll(Ljava/util/Collection;)Z: I13 Branch 24 IFEQ L302 - false
   */

  @Test
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      TByteHashSet tByteHashSet0 = new TByteHashSet(byteArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = tByteHashSet0.retainAll((Collection<?>) linkedList0);
      assertEquals(true, boolean0);
      assertEquals(0, tByteHashSet0.size());
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.retainAll(Lgnu/trove/TByteCollection;)Z: I22 Branch 27 IFEQ L319 - false
   * 2 gnu.trove.set.hash.TByteHashSet.retainAll(Lgnu/trove/TByteCollection;)Z: I29 Branch 28 IFNE L320 - false
   * 3 gnu.trove.set.hash.TByteHashSet.retainAll(Lgnu/trove/TByteCollection;)Z: I4 Branch 26 IF_ACMPNE L314 - true
   * 4 gnu.trove.set.hash.TByteHashSet.retainAll(Lgnu/trove/TByteCollection;)Z: I22 Branch 27 IFEQ L319 - true
   */

  @Test
  public void test19()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)0);
      TByteHashSet tByteHashSet0 = new TByteHashSet((Collection<? extends Byte>) linkedList0);
      linkedList0.add(byte0);
      tByteHashSet0.addAll((Collection<? extends Byte>) linkedList0);
      assertEquals(1, tByteHashSet0.size());
      
      TByteHashSet tByteHashSet1 = new TByteHashSet((int) (byte)0);
      boolean boolean0 = tByteHashSet0.retainAll((TByteCollection) tByteHashSet1);
      assertEquals(true, boolean0);
  }

  //Test case number: 20
  /*
   * 6 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.retainAll(Lgnu/trove/TByteCollection;)Z: I29 Branch 28 IFNE L320 - true
   * 2 gnu.trove.set.hash.TByteHashSet.retainAll(Lgnu/trove/TByteCollection;)Z: I4 Branch 26 IF_ACMPNE L314 - false
   * 3 gnu.trove.set.hash.TByteHashSet.retainAll(Lgnu/trove/TByteCollection;)Z: I22 Branch 27 IFEQ L319 - true
   * 4 gnu.trove.set.hash.TByteHashSet.retainAll(Lgnu/trove/TByteCollection;)Z: I22 Branch 27 IFEQ L319 - false
   * 5 gnu.trove.set.hash.TByteHashSet.addAll(Ljava/util/Collection;)Z: I12 Branch 18 IFEQ L261 - false
   * 6 gnu.trove.set.hash.TByteHashSet.addAll(Ljava/util/Collection;)Z: I27 Branch 19 IFEQ L263 - false
   */

  @Test
  public void test20()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)0);
      TByteHashSet tByteHashSet0 = new TByteHashSet((Collection<? extends Byte>) linkedList0);
      linkedList0.add(byte0);
      tByteHashSet0.addAll((Collection<? extends Byte>) linkedList0);
      TByteHashSet tByteHashSet1 = new TByteHashSet(tByteHashSet0._set);
      boolean boolean0 = tByteHashSet0.retainAll((TByteCollection) tByteHashSet1);
      assertEquals(false, tByteHashSet0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 21
  /*
   * 5 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.retainAll([B)Z: I33 Branch 30 IF_ICMPNE L337 - false
   * 2 gnu.trove.set.hash.TByteHashSet.retainAll([B)Z: I39 Branch 31 IFGE L337 - false
   * 3 gnu.trove.set.hash.TByteHashSet.retainAll([B)Z: I26 Branch 29 IFLE L336 - true
   * 4 gnu.trove.set.hash.TByteHashSet.retainAll([B)Z: I26 Branch 29 IFLE L336 - false
   * 5 gnu.trove.set.hash.TByteHashSet.retainAll([B)Z: I33 Branch 30 IF_ICMPNE L337 - true
   */

  @Test
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      TByteHashSet tByteHashSet0 = new TByteHashSet((int) (byte)1, (float) (byte)113, (byte)1);
      TByteHashSet tByteHashSet1 = new TByteHashSet(byteArray0);
      boolean boolean0 = tByteHashSet1.retainAll(tByteHashSet0._set);
      assertEquals(0, tByteHashSet1.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 5 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.retainAll([B)Z: I39 Branch 31 IFGE L337 - true
   * 2 gnu.trove.set.hash.TByteHashSet.retainAll([B)Z: I26 Branch 29 IFLE L336 - true
   * 3 gnu.trove.set.hash.TByteHashSet.retainAll([B)Z: I26 Branch 29 IFLE L336 - false
   * 4 gnu.trove.set.hash.TByteHashSet.retainAll([B)Z: I33 Branch 30 IF_ICMPNE L337 - true
   * 5 gnu.trove.set.hash.TByteHashSet.retainAll([B)Z: I33 Branch 30 IF_ICMPNE L337 - false
   */

  @Test
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      TByteHashSet tByteHashSet0 = new TByteHashSet(byteArray0);
      boolean boolean0 = tByteHashSet0.retainAll(tByteHashSet0._states);
      assertEquals(false, boolean0);
      assertEquals(1, tByteHashSet0.size());
      assertEquals("{0}", tByteHashSet0.toString());
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.set.hash.TByteHashSet.removeAll(Ljava/util/Collection;)Z: I20 Branch 33 IFEQ L350 - true
   */

  @Test
  public void test23()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) 0);
      boolean boolean0 = tByteHashSet0.removeAll((Collection<?>) linkedList0);
      assertEquals(false, boolean0);
  }

  //Test case number: 24
  /*
   * 7 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.removeAll(Ljava/util/Collection;)Z: I32 Branch 34 IFEQ L352 - true
   * 2 gnu.trove.set.hash.TByteHashSet.<init>(Ljava/util/Collection;)V: root-Branch
   * 3 gnu.trove.set.hash.TByteHashSet.removeAll(Ljava/util/Collection;)Z: I12 Branch 32 IFEQ L349 - true
   * 4 gnu.trove.set.hash.TByteHashSet.removeAll(Ljava/util/Collection;)Z: I12 Branch 32 IFEQ L349 - false
   * 5 gnu.trove.set.hash.TByteHashSet.removeAll(Ljava/util/Collection;)Z: I20 Branch 33 IFEQ L350 - false
   * 6 gnu.trove.set.hash.TByteHashSet.addAll(Ljava/util/Collection;)Z: I12 Branch 18 IFEQ L261 - true
   * 7 gnu.trove.set.hash.TByteHashSet.remove(B)Z: I9 Branch 10 IFLT L209 - true
   */

  @Test
  public void test24()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)0);
      TByteHashSet tByteHashSet0 = new TByteHashSet((Collection<? extends Byte>) linkedList0);
      linkedList0.add(byte0);
      boolean boolean0 = tByteHashSet0.removeAll((Collection<?>) linkedList0);
      assertEquals(false, boolean0);
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.removeAll(Lgnu/trove/TByteCollection;)Z: I13 Branch 35 IFEQ L365 - true
   * 2 gnu.trove.set.hash.TByteHashSet.removeAll(Lgnu/trove/TByteCollection;)Z: I13 Branch 35 IFEQ L365 - false
   * 3 gnu.trove.set.hash.TByteHashSet.removeAll(Lgnu/trove/TByteCollection;)Z: I24 Branch 36 IFEQ L367 - true
   */

//   @Test
//   public void test25()  throws Throwable  {
//       TByteHashSet tByteHashSet0 = new TByteHashSet(10, (float) 10, (byte)1);
//       TByteArrayList tByteArrayList0 = TByteArrayList.wrap(tByteHashSet0._set, (byte)0);
//       TUnmodifiableRandomAccessByteList tUnmodifiableRandomAccessByteList0 = new TUnmodifiableRandomAccessByteList((TByteList) tByteArrayList0);
//       boolean boolean0 = tByteHashSet0.removeAll((TByteCollection) tUnmodifiableRandomAccessByteList0);
//       assertEquals(false, boolean0);
//       assertEquals(1, tByteArrayList0.max());
//   }

  //Test case number: 26
  /*
   * 5 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.removeAll(Lgnu/trove/TByteCollection;)Z: I24 Branch 36 IFEQ L367 - false
   * 2 gnu.trove.set.hash.TByteHashSet$TByteHashIterator.<init>(Lgnu/trove/set/hash/TByteHashSet;Lgnu/trove/impl/hash/TByteHash;)V: root-Branch
   * 3 gnu.trove.set.hash.TByteHashSet$TByteHashIterator.next()B: root-Branch
   * 4 gnu.trove.set.hash.TByteHashSet.iterator()Lgnu/trove/iterator/TByteIterator;: root-Branch
   * 5 gnu.trove.set.hash.TByteHashSet.removeAll(Lgnu/trove/TByteCollection;)Z: I13 Branch 35 IFEQ L365 - false
   */

  @Test
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      TByteHashSet tByteHashSet0 = new TByteHashSet(byteArray0);
      assertEquals("{0}", tByteHashSet0.toString());
      
      // Undeclared exception!
      try {
        tByteHashSet0.removeAll((TByteCollection) tByteHashSet0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 27
  /*
   * 6 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.removeAll([B)Z: I20 Branch 38 IFEQ L379 - false
   * 2 gnu.trove.set.hash.TByteHashSet.removeAll([B)Z: I12 Branch 37 IFLE L378 - true
   * 3 gnu.trove.set.hash.TByteHashSet.removeAll([B)Z: I12 Branch 37 IFLE L378 - false
   * 4 gnu.trove.set.hash.TByteHashSet.removeAll([B)Z: I20 Branch 38 IFEQ L379 - true
   * 5 gnu.trove.set.hash.TByteHashSet.remove(B)Z: I9 Branch 10 IFLT L209 - true
   * 6 gnu.trove.set.hash.TByteHashSet.remove(B)Z: I9 Branch 10 IFLT L209 - false
   */

  @Test
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      TByteHashSet tByteHashSet0 = new TByteHashSet(byteArray0);
      boolean boolean0 = tByteHashSet0.removeAll(tByteHashSet0._states);
      assertEquals(true, boolean0);
      assertEquals(0, tByteHashSet0.size());
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.clear()V: I22 Branch 39 IFLE L393 - true
   * 2 gnu.trove.set.hash.TByteHashSet.clear()V: I22 Branch 39 IFLE L393 - false
   */

  @Test
  public void test28()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet();
      tByteHashSet0.clear();
      assertEquals("{}", tByteHashSet0.toString());
  }

  //Test case number: 29
  /*
   * 5 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.equals(Ljava/lang/Object;)Z: I4 Branch 42 IFNE L421 - true
   * 2 gnu.trove.set.hash.TByteHashSet.equals(Ljava/lang/Object;)Z: I20 Branch 43 IF_ICMPEQ L425 - true
   * 3 gnu.trove.set.hash.TByteHashSet.equals(Ljava/lang/Object;)Z: I34 Branch 44 IFLE L428 - true
   * 4 gnu.trove.set.hash.TByteHashSet.equals(Ljava/lang/Object;)Z: I34 Branch 44 IFLE L428 - false
   * 5 gnu.trove.set.hash.TByteHashSet.equals(Ljava/lang/Object;)Z: I42 Branch 45 IF_ICMPNE L429 - true
   */

  @Test
  public void test29()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet();
      boolean boolean0 = tByteHashSet0.equals((Object) tByteHashSet0);
      assertEquals(true, boolean0);
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * 1 gnu.trove.set.hash.TByteHashSet.equals(Ljava/lang/Object;)Z: I4 Branch 42 IFNE L421 - false
   */

  @Test
  public void test30()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet();
      boolean boolean0 = tByteHashSet0.equals((Object) "{}");
      assertEquals(false, boolean0);
  }

  //Test case number: 31
  /*
   * 2 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.equals(Ljava/lang/Object;)Z: I20 Branch 43 IF_ICMPEQ L425 - false
   * 2 gnu.trove.set.hash.TByteHashSet.equals(Ljava/lang/Object;)Z: I4 Branch 42 IFNE L421 - true
   */

  @Test
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      TByteHashSet tByteHashSet0 = new TByteHashSet((int) (byte)1, (float) (byte)113, (byte)1);
      TByteHashSet tByteHashSet1 = new TByteHashSet(byteArray0);
      boolean boolean0 = tByteHashSet1.equals((Object) tByteHashSet0);
      assertFalse(tByteHashSet0.equals(tByteHashSet1));
      assertEquals("{}", tByteHashSet0.toString());
      assertEquals("{0}", tByteHashSet1.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 32
  /*
   * 4 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.hashCode()I: I13 Branch 47 IFLE L442 - true
   * 2 gnu.trove.set.hash.TByteHashSet.hashCode()I: I13 Branch 47 IFLE L442 - false
   * 3 gnu.trove.set.hash.TByteHashSet.hashCode()I: I21 Branch 48 IF_ICMPNE L443 - true
   * 4 gnu.trove.set.hash.TByteHashSet.<init>(IF)V: root-Branch
   */

  @Test
  public void test32()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet(74, 0);
      int int0 = tByteHashSet0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 33
  /*
   * 5 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.hashCode()I: I21 Branch 48 IF_ICMPNE L443 - false
   * 2 gnu.trove.set.hash.TByteHashSet.<init>(IFB)V: I10 Branch 1 IFEQ L101 - false
   * 3 gnu.trove.set.hash.TByteHashSet.hashCode()I: I13 Branch 47 IFLE L442 - true
   * 4 gnu.trove.set.hash.TByteHashSet.hashCode()I: I13 Branch 47 IFLE L442 - false
   * 5 gnu.trove.set.hash.TByteHashSet.hashCode()I: I21 Branch 48 IF_ICMPNE L443 - true
   */

  @Test
  public void test33()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet((int) (byte)1, (float) (byte)113, (byte)1);
      tByteHashSet0.addAll(tByteHashSet0._states);
      int int0 = tByteHashSet0.hashCode();
      assertEquals(false, tByteHashSet0.isEmpty());
      assertEquals(1, int0);
  }

  //Test case number: 34
  /*
   * 4 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.toString()Ljava/lang/String;: I30 Branch 49 IFLE L455 - true
   * 2 gnu.trove.set.hash.TByteHashSet.toString()Ljava/lang/String;: I30 Branch 49 IFLE L455 - false
   * 3 gnu.trove.set.hash.TByteHashSet.toString()Ljava/lang/String;: I38 Branch 50 IF_ICMPNE L456 - true
   * 4 gnu.trove.set.hash.TByteHashSet.<init>()V: root-Branch
   */

  @Test
  public void test34()  throws Throwable  {
      TByteHashSet tByteHashSet0 = new TByteHashSet();
      String string0 = tByteHashSet0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  //Test case number: 35
  /*
   * 6 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.toString()Ljava/lang/String;: I54 Branch 51 IF_ICMPGE L458 - false
   * 2 gnu.trove.set.hash.TByteHashSet.toString()Ljava/lang/String;: I30 Branch 49 IFLE L455 - true
   * 3 gnu.trove.set.hash.TByteHashSet.toString()Ljava/lang/String;: I30 Branch 49 IFLE L455 - false
   * 4 gnu.trove.set.hash.TByteHashSet.toString()Ljava/lang/String;: I38 Branch 50 IF_ICMPNE L456 - true
   * 5 gnu.trove.set.hash.TByteHashSet.toString()Ljava/lang/String;: I38 Branch 50 IF_ICMPNE L456 - false
   * 6 gnu.trove.set.hash.TByteHashSet.toString()Ljava/lang/String;: I54 Branch 51 IF_ICMPGE L458 - true
   */

  @Test
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)113;
      TByteHashSet tByteHashSet0 = new TByteHashSet(byteArray0);
      String string0 = tByteHashSet0.toString();
      assertEquals("{113,0}", string0);
      assertNotNull(string0);
  }

  //Test case number: 36
  /*
   * 12 covered goals:
   * 1 gnu.trove.set.hash.TByteHashSet.writeExternal(Ljava/io/ObjectOutput;)V: I37 Branch 52 IFLE L506 - true
   * 2 gnu.trove.set.hash.TByteHashSet.writeExternal(Ljava/io/ObjectOutput;)V: I37 Branch 52 IFLE L506 - false
   * 3 gnu.trove.set.hash.TByteHashSet.writeExternal(Ljava/io/ObjectOutput;)V: I45 Branch 53 IF_ICMPNE L507 - true
   * 4 gnu.trove.set.hash.TByteHashSet.writeExternal(Ljava/io/ObjectOutput;)V: I45 Branch 53 IF_ICMPNE L507 - false
   * 5 gnu.trove.set.hash.TByteHashSet.<init>([B)V: root-Branch
   * 6 gnu.trove.set.hash.TByteHashSet.<init>(I)V: root-Branch
   * 7 gnu.trove.set.hash.TByteHashSet.add(B)Z: I9 Branch 9 IFGE L196 - true
   * 8 gnu.trove.set.hash.TByteHashSet.add(B)Z: I9 Branch 9 IFGE L196 - false
   * 9 gnu.trove.set.hash.TByteHashSet.addAll([B)Z: I12 Branch 22 IFLE L288 - true
   * 10 gnu.trove.set.hash.TByteHashSet.addAll([B)Z: I12 Branch 22 IFLE L288 - false
   * 11 gnu.trove.set.hash.TByteHashSet.addAll([B)Z: I20 Branch 23 IFEQ L289 - true
   * 12 gnu.trove.set.hash.TByteHashSet.addAll([B)Z: I20 Branch 23 IFEQ L289 - false
   */

  @Test
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      TByteHashSet tByteHashSet0 = new TByteHashSet(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tByteHashSet0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals("{0}", tByteHashSet0.toString());
      assertEquals(false, tByteHashSet0.isEmpty());
  }
}
