/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TShortFloatMap;
import gnu.trove.map.hash.TShortFloatHashMap;
import gnu.trove.procedure.TShortProcedure;
import java.io.IOException;
import java.io.ObjectInput;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.HashMap;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortFloatHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short) (-1783);
      shortArray0[0] = short0;
      short short1 = (short)172;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)1607;
      shortArray0[4] = short4;
      short short5 = (short)641;
      shortArray0[5] = short5;
      short short6 = (short) (-1);
      shortArray0[6] = short6;
      float[] floatArray0 = new float[8];
      float float0 = 1536.5747F;
      floatArray0[0] = float0;
      floatArray0[1] = (float) short4;
      floatArray0[2] = (float) shortArray0[6];
      floatArray0[3] = (float) shortArray0[5];
      floatArray0[4] = (float) shortArray0[6];
      floatArray0[5] = (float) short6;
      float float1 = 1118.2515F;
      floatArray0[6] = float1;
      floatArray0[7] = (float) shortArray0[3];
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      assertEquals("{641=-1.0, -1783=1536.5747, 1607=-1.0, -1=1118.2515, 172=1607.0, 0=641.0}", tShortFloatHashMap0.toString());
      assertEquals(6, tShortFloatHashMap0.size());
      
      int int0 = (-65);
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(int0, int0);
      assertFalse(tShortFloatHashMap1.equals(tShortFloatHashMap0));
  }

//   @Test
//   public void test1()  throws Throwable  {
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
//       TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap((TShortFloatMap) tShortFloatHashMap0);
//       int int0 = tShortFloatHashMap1.capacity();
//       assertEquals(23, int0);
//       
//       short short0 = (short)471;
//       tShortFloatHashMap1.contains(short0);
//       assertEquals(0.0F, tShortFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals(23, tShortFloatHashMap1.capacity());
//   }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 0;
      short short0 = (short) (-924);
      float float0 = 0.0F;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((int) short0, (float) int0);
      boolean boolean0 = tShortFloatHashMap0.increment(short0);
      assertEquals(false, boolean0);
      
      short[] shortArray0 = tShortFloatHashMap0._set;
      tShortFloatHashMap0.compact();
      assertEquals("{}", tShortFloatHashMap0.toString());
      
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(int0, (float) int0, short0, float0);
      float[] floatArray0 = new float[10];
      floatArray0[0] = float0;
      floatArray0[1] = (float) short0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      float float1 = 1.0F;
      floatArray0[5] = float1;
      floatArray0[6] = (float) short0;
      floatArray0[7] = float0;
      floatArray0[8] = (float) short0;
      floatArray0[9] = (float) short0;
      TShortFloatHashMap tShortFloatHashMap2 = new TShortFloatHashMap(tShortFloatHashMap0._set, floatArray0);
      assertEquals(1, tShortFloatHashMap2.size());
      assertEquals(3, tShortFloatHashMap0.capacity());
      assertEquals("{0=0.0}", tShortFloatHashMap2.toString());
      
      short[] shortArray1 = tShortFloatHashMap1.keys();
      assertNotNull(shortArray1);
      assertFalse(tShortFloatHashMap1.equals(tShortFloatHashMap2));
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 1699;
      short short0 = (short)1215;
      short[] shortArray0 = new short[1];
      shortArray0[0] = short0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) shortArray0[0];
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) short0;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) short0;
      floatArray0[6] = (float) shortArray0[0];
      floatArray0[7] = (float) shortArray0[0];
      floatArray0[8] = (float) short0;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      floatArray0[0] = (float) short0;
      floatArray0[1] = (float) shortArray0[0];
      floatArray0[2] = (float) short0;
      floatArray0[3] = (float) shortArray0[0];
      floatArray0[4] = (float) short0;
      floatArray0[5] = (float) short0;
      floatArray0[6] = (float) shortArray0[0];
      floatArray0[7] = (float) short0;
      floatArray0[8] = (float) shortArray0[0];
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap((TShortFloatMap) tShortFloatHashMap0);
      int int1 = tShortFloatHashMap1.hashCode();
      assertEquals(23, tShortFloatHashMap1.capacity());
      assertEquals("{1215=1699.0}", tShortFloatHashMap0.toString());
      assertEquals(23, tShortFloatHashMap0.capacity());
      assertEquals(1401112057, int1);
      
      float float0 = 1.0F;
      TShortFloatHashMap tShortFloatHashMap2 = new TShortFloatHashMap(int0, (float) int0, short0, float0);
      int int2 = 1459;
      tShortFloatHashMap2.ensureCapacity(int2);
      assertEquals(3, tShortFloatHashMap2.capacity());
      assertEquals("{}", tShortFloatHashMap2.toString());
      assertFalse(tShortFloatHashMap2.equals(tShortFloatHashMap0));
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = 1.0;
      Float float0 = new Float(double0);
      int int0 = (-1868);
      float float1 = 636.37775F;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, float1);
      AbstractMap.SimpleImmutableEntry<Float, TShortFloatHashMap> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Float, TShortFloatHashMap>(float0, tShortFloatHashMap0);
      TShortFloatHashMap tShortFloatHashMap1 = abstractMap_SimpleImmutableEntry0.getValue();
      assertSame(tShortFloatHashMap0, tShortFloatHashMap1);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 1047;
      short short0 = (short)139;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, (float) int0, short0, (float) int0);
      short[] shortArray0 = tShortFloatHashMap0._set;
      int int1 = (-145);
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(int1);
      tShortFloatHashMap1.keySet();
      TShortProcedure tShortProcedure0 = null;
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      String string0 = hashMap0.toString();
      tShortFloatHashMap0.equals((Object) string0);
      tShortFloatHashMap1.forEach(tShortProcedure0);
      String string1 = "}";
      short short1 = (short)328;
      tShortFloatHashMap1.remove(short1);
      tShortFloatHashMap1.keys();
      ObjectInput objectInput0 = null;
      // Undeclared exception!
      try {
        tShortFloatHashMap0.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      float float0 = 10.0F;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, float0);
      byte[] byteArray0 = tShortFloatHashMap0._states;
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap();
      String string0 = "";
      TShortProcedure tShortProcedure0 = null;
      tShortFloatHashMap0.forEachKey(tShortProcedure0);
      short short0 = (short)0;
      tShortFloatHashMap0.contains(short0);
      int int1 = 87719;
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int1, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://@:87719?#
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 30577;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) int0;
      float float0 = 0.0F;
      floatArray0[5] = float0;
      float float1 = (-1960.6259F);
      floatArray0[6] = float1;
      floatArray0[7] = (float) int0;
      floatArray0[8] = (float) int0;
      float[] floatArray1 = tShortFloatHashMap0.values(floatArray0);
      assertEquals(61169, tShortFloatHashMap0.capacity());
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 1;
      short short0 = (short)0;
      short[] shortArray0 = new short[8];
      short short1 = (short)1148;
      shortArray0[0] = short1;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      shortArray0[7] = short0;
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) shortArray0[2];
      floatArray0[1] = (float) shortArray0[1];
      floatArray0[2] = (float) short1;
      floatArray0[3] = (float) short1;
      floatArray0[4] = (float) shortArray0[1];
      floatArray0[5] = (float) shortArray0[1];
      floatArray0[6] = (float) short0;
      floatArray0[7] = (float) short1;
      float float0 = (-45.554916F);
      floatArray0[8] = float0;
      float float1 = (-1398.0631F);
      floatArray0[9] = float1;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      tShortFloatHashMap0.contains(shortArray0[4]);
      assertEquals(2, tShortFloatHashMap0.size());
      assertEquals("{1148=0.0, 0=1148.0}", tShortFloatHashMap0.toString());
      
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(int0, (float) int0, short0, (float) short0);
      tShortFloatHashMap1.tempDisableAutoCompaction();
      assertFalse(tShortFloatHashMap1.equals(tShortFloatHashMap0));
  }

//   @Test
//   public void test9()  throws Throwable  {
//       short[] shortArray0 = new short[10];
//       short short0 = (short) (-794);
//       shortArray0[0] = short0;
//       short short1 = (short) (-972);
//       shortArray0[1] = short1;
//       short short2 = (short) (-257);
//       shortArray0[2] = short2;
//       short short3 = (short) (-273);
//       shortArray0[3] = short3;
//       short short4 = (short)2043;
//       shortArray0[4] = short4;
//       short short5 = (short)798;
//       shortArray0[5] = short5;
//       short short6 = (short)1201;
//       shortArray0[6] = short6;
//       short short7 = (short) (-1512);
//       shortArray0[7] = short7;
//       short short8 = (short)79;
//       shortArray0[8] = short8;
//       short short9 = (short) (-704);
//       shortArray0[9] = short9;
//       float[] floatArray0 = new float[8];
//       floatArray0[0] = (float) shortArray0[5];
//       floatArray0[1] = (float) short3;
//       floatArray0[2] = (float) short1;
//       floatArray0[3] = (float) short5;
//       floatArray0[4] = (float) shortArray0[6];
//       floatArray0[5] = (float) short6;
//       floatArray0[6] = (float) short7;
//       floatArray0[7] = (float) short8;
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
//       TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap((TShortFloatMap) tShortFloatHashMap0);
//       byte[] byteArray0 = tShortFloatHashMap1._states;
//       assertEquals("{2043=1201.0, -794=798.0, 798=1201.0, -1512=79.0, -273=798.0, 1201=-1512.0, -257=-972.0, -972=-273.0}", tShortFloatHashMap0.toString());
//       assertEquals("{2043=1201.0, -794=798.0, 798=1201.0, -1512=79.0, -273=798.0, 1201=-1512.0, -257=-972.0, -972=-273.0}", tShortFloatHashMap1.toString());
//       assertEquals(0.0F, tShortFloatHashMap1.getNoEntryValue(), 0.01F);
//       
//       int int0 = (-1222);
//       float float0 = (-499.62048F);
//       short short10 = (short)0;
//       float float1 = 1.0F;
//       TShortFloatHashMap tShortFloatHashMap2 = new TShortFloatHashMap(int0, float0, short10, float1);
//       assertFalse(tShortFloatHashMap2.equals(tShortFloatHashMap0));
//   }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 7;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, int0);
      tShortFloatHashMap0.tempDisableAutoCompaction();
      int int1 = 84;
      short short0 = (short) (-858);
      int int2 = 1;
      float float0 = (-1383.0072F);
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(int2, (float) short0, short0, float0);
      tShortFloatHashMap1.hashCode();
      TShortFloatHashMap tShortFloatHashMap2 = new TShortFloatHashMap();
      TShortFloatHashMap tShortFloatHashMap3 = new TShortFloatHashMap(int1, (float) int1, short0, (float) short0);
      TShortFloatHashMap tShortFloatHashMap4 = new TShortFloatHashMap(int1, int1);
      tShortFloatHashMap3.trimToSize();
      int int3 = 32;
      tShortFloatHashMap0.ensureCapacity(int3);
      assertEquals(7, tShortFloatHashMap0.capacity());
      
      float float1 = 659.23834F;
      tShortFloatHashMap4.adjustOrPutValue(short0, (float) int0, float1);
      short short1 = (short)1;
      tShortFloatHashMap1.getAutoCompactionFactor();
      tShortFloatHashMap4.increment(short1);
      tShortFloatHashMap1.get(short1);
      short short2 = (short)0;
      tShortFloatHashMap2.contains(short2);
      tShortFloatHashMap4.get(short0);
      TShortFloatHashMap tShortFloatHashMap5 = new TShortFloatHashMap(int1);
      assertFalse(tShortFloatHashMap5.equals(tShortFloatHashMap4));
  }

  @Test
  public void test11()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short) (-137);
      shortArray0[0] = short0;
      short short1 = (short) (-773);
      shortArray0[1] = short1;
      short short2 = (short)382;
      shortArray0[2] = short2;
      short short3 = (short) (-35);
      shortArray0[3] = short3;
      short short4 = (short)622;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short) (-1);
      shortArray0[7] = short7;
      short short8 = (short)0;
      shortArray0[8] = short8;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) shortArray0[7];
      floatArray0[1] = (float) shortArray0[4];
      floatArray0[2] = (float) shortArray0[2];
      floatArray0[3] = (float) shortArray0[8];
      floatArray0[4] = (float) short2;
      floatArray0[5] = (float) short8;
      floatArray0[6] = (float) shortArray0[0];
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      short[] shortArray1 = tShortFloatHashMap0.keys();
      assertEquals(6, tShortFloatHashMap0.size());
      assertEquals("{-35=0.0, -773=622.0, 382=382.0, -137=-1.0, 622=382.0, 0=-137.0}", tShortFloatHashMap0.toString());
      assertNotNull(shortArray1);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1250;
      float float0 = 6.6360896E8F;
      short short0 = (short)0;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, float0, short0, float0);
      assertEquals("{}", tShortFloatHashMap0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-1);
      float float0 = 0.0F;
      int int1 = 0;
      short short0 = (short) (-1763);
      float float1 = 0.0F;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int1, (float) int1, short0, float1);
      float[] floatArray0 = tShortFloatHashMap0.values();
      assertNotNull(floatArray0);
      
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(int0, float0);
      short short1 = tShortFloatHashMap1.getNoEntryKey();
      short[] shortArray0 = new short[5];
      shortArray0[0] = short1;
      short short2 = (short)1972;
      shortArray0[0] = short2;
      shortArray0[1] = short2;
      shortArray0[2] = short2;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short1;
      shortArray0[3] = short1;
      shortArray0[4] = short1;
      TShortFloatHashMap tShortFloatHashMap2 = new TShortFloatHashMap(shortArray0, floatArray0);
      assertEquals("{}", tShortFloatHashMap2.toString());
      assertEquals(11, tShortFloatHashMap2.capacity());
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1705;
      short[] shortArray0 = new short[8];
      short short0 = (short) (-14291);
      shortArray0[0] = short0;
      short short1 = (short)1492;
      shortArray0[1] = short1;
      short short2 = (short) (-1310);
      shortArray0[2] = short2;
      short short3 = (short)601;
      shortArray0[3] = short3;
      short short4 = (short)492;
      shortArray0[4] = short4;
      short short5 = (short)956;
      shortArray0[5] = short5;
      short short6 = (short)32113;
      shortArray0[6] = short6;
      short short7 = (short)724;
      shortArray0[7] = short7;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) shortArray0[3];
      float float0 = 0.0F;
      floatArray0[1] = float0;
      floatArray0[2] = (float) short6;
      floatArray0[3] = (float) short3;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      tShortFloatHashMap0.values(floatArray0);
      int int1 = 0;
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(int1);
      tShortFloatHashMap1.compact();
      tShortFloatHashMap1.capacity();
      float[] floatArray1 = tShortFloatHashMap1.values();
      TShortFloatHashMap tShortFloatHashMap2 = new TShortFloatHashMap(int0);
      double double0 = 1203.947728623816;
      tShortFloatHashMap2.tempDisableAutoCompaction();
      Float float1 = new Float(double0);
      tShortFloatHashMap2.equals((Object) float1);
      tShortFloatHashMap1.values(floatArray1);
      tShortFloatHashMap2.values(floatArray1);
      String string0 = "";
      short short8 = (short)164;
      Short short9 = new Short(short8);
      AbstractMap.SimpleEntry<String, Short> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Short>(string0, short9);
      int int2 = abstractMap_SimpleEntry0.hashCode();
      assertEquals(164, int2);
  }

//   @Test
//   public void test15()  throws Throwable  {
//       short[] shortArray0 = new short[4];
//       short short0 = (short)837;
//       int int0 = (-739);
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0);
//       tShortFloatHashMap0.contains(short0);
//       shortArray0[0] = short0;
//       short short1 = (short)10593;
//       shortArray0[0] = short0;
//       shortArray0[1] = short0;
//       shortArray0[2] = short1;
//       shortArray0[3] = short1;
//       shortArray0[1] = short1;
//       short short2 = (short)0;
//       shortArray0[2] = short2;
//       short short3 = (short) (-964);
//       shortArray0[3] = short3;
//       tShortFloatHashMap0.compact();
//       float[] floatArray0 = new float[3];
//       int int1 = 133853;
//       floatArray0[0] = (float) shortArray0[3];
//       String string0 = tShortFloatHashMap0.toString();
//       assertNotNull(string0);
//       
//       floatArray0[1] = (float) shortArray0[1];
//       floatArray0[2] = (float) shortArray0[2];
//       TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(int1, (float) shortArray0[0]);
//       tShortFloatHashMap1.keySet();
//       TShortFloatHashMap tShortFloatHashMap2 = new TShortFloatHashMap((TShortFloatMap) tShortFloatHashMap1);
//       floatArray0[0] = (float) shortArray0[0];
//       floatArray0[1] = (float) short0;
//       floatArray0[2] = (float) shortArray0[3];
//       tShortFloatHashMap1.compact();
//       assertEquals(3, tShortFloatHashMap1.capacity());
//       
//       TShortFloatHashMap tShortFloatHashMap3 = new TShortFloatHashMap(shortArray0, floatArray0);
//       TShortFloatHashMap tShortFloatHashMap4 = new TShortFloatHashMap((TShortFloatMap) tShortFloatHashMap3);
//       tShortFloatHashMap4.getNoEntryValue();
//       int int2 = 0;
//       TShortFloatHashMap tShortFloatHashMap5 = new TShortFloatHashMap(int2, (float) short3);
//       floatArray0[0] = (float) shortArray0[1];
//       floatArray0[1] = (float) shortArray0[0];
//       floatArray0[2] = (float) int1;
//       float float0 = tShortFloatHashMap4.adjustOrPutValue(short2, floatArray0[1], (float) shortArray0[1]);
//       assertEquals((-127.0F), float0, 0.01F);
//   }
}
