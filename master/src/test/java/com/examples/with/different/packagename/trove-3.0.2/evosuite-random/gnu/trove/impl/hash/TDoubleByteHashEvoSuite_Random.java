/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TDoubleByteMap;
import gnu.trove.map.hash.TDoubleByteHashMap;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleByteHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 653.3259964789574;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = (-1148.1674698944394);
      doubleArray0[3] = double3;
      double double4 = 1.0;
      doubleArray0[4] = double4;
      double double5 = 0.0;
      doubleArray0[5] = double5;
      double double6 = 1.0;
      doubleArray0[6] = double6;
      double double7 = 68.35934512052485;
      doubleArray0[7] = double7;
      double double8 = 0.0;
      doubleArray0[8] = double8;
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)2;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-124);
      byteArray0[1] = byte1;
      byte byte2 = (byte)48;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-46);
      byteArray0[4] = byte4;
      byte byte5 = (byte)127;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-1);
      byteArray0[7] = byte7;
      byte byte8 = (byte)113;
      byteArray0[8] = byte8;
      byte byte9 = (byte)0;
      byteArray0[9] = byte9;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap((TDoubleByteMap) tDoubleByteHashMap0);
      tDoubleByteHashMap1.trimToSize();
      assertEquals(11, tDoubleByteHashMap1.capacity());
      assertEquals("{68.35934512052485=-1, -1148.1674698944394=0, 653.3259964789574=-124, 1.0=0, 0.0=113}", tDoubleByteHashMap1.toString());
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = (-997);
          byte byte0 = (byte) (-83);
          TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(int0, (float) int0, (double) int0, byte0);
          tDoubleByteHashMap0.clear();
          TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap();
          tDoubleByteHashMap1.remove((double) int0);
          TDoubleByteHashMap tDoubleByteHashMap2 = new TDoubleByteHashMap(int0, int0);
          TDoubleByteHashMap tDoubleByteHashMap3 = new TDoubleByteHashMap((TDoubleByteMap) tDoubleByteHashMap2);
          boolean boolean0 = true;
          tDoubleByteHashMap2.reenableAutoCompaction(boolean0);
          byte byte1 = (byte)0;
          tDoubleByteHashMap3.adjustValue((double) int0, byte1);
          tDoubleByteHashMap3._set = tDoubleByteHashMap1._set;
          float float0 = (-1.0F);
          double double0 = (-1.0);
          String string0 = "[_`lN*|1y4n$_";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

//   @Test
//   public void test2()  throws Throwable  {
//       int int0 = (-1023);
//       float float0 = 0.0F;
//       TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
//       boolean boolean0 = false;
//       tDoubleByteHashMap0.reenableAutoCompaction(boolean0);
//       assertEquals(0, tDoubleByteHashMap0.getNoEntryValue());
//       assertEquals(23, tDoubleByteHashMap0.capacity());
//       assertEquals(0.0, tDoubleByteHashMap0.getNoEntryKey(), 0.01D);
//       
//       TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap(int0, float0);
//       double[] doubleArray0 = new double[2];
//       doubleArray0[0] = (double) float0;
//       doubleArray0[1] = (double) float0;
//       double[] doubleArray1 = tDoubleByteHashMap1.keys(doubleArray0);
//       assertEquals(0, tDoubleByteHashMap1.getNoEntryValue());
//       assertNotNull(doubleArray1);
//       assertEquals(0.0, tDoubleByteHashMap1.getNoEntryKey(), 0.01D);
//   }

//   @Test
//   public void test3()  throws Throwable  {
//       TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
//       double double0 = (-1.0);
//       tDoubleByteHashMap0.contains(double0);
//       TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap();
//       int int0 = tDoubleByteHashMap1.capacity();
//       assertEquals(23, int0);
//       
//       boolean boolean0 = tDoubleByteHashMap1.containsKey((double) int0);
//       assertEquals(false, boolean0);
//       
//       double[] doubleArray0 = tDoubleByteHashMap1._set;
//       int int1 = 0;
//       float float0 = 891.6306F;
//       TDoubleByteHashMap tDoubleByteHashMap2 = new TDoubleByteHashMap(int1, float0);
//       tDoubleByteHashMap1.clear();
//       double[] doubleArray1 = tDoubleByteHashMap0._set;
//       assertEquals(0, tDoubleByteHashMap0.getNoEntryValue());
//       assertEquals(0.0, tDoubleByteHashMap0.getNoEntryKey(), 0.01D);
//       
//       tDoubleByteHashMap2.size();
//       assertEquals(0, tDoubleByteHashMap2.getNoEntryValue());
//       assertEquals(0.0, tDoubleByteHashMap2.getNoEntryKey(), 0.01D);
//   }

  @Test
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      double double1 = (-287.0031934250275);
      doubleArray0[1] = double1;
      double double2 = 818.8554360771743;
      doubleArray0[2] = double2;
      double double3 = (-1.0);
      doubleArray0[3] = double3;
      double double4 = (-2044.761255171952);
      doubleArray0[4] = double4;
      double double5 = 1.0;
      doubleArray0[5] = double5;
      double double6 = Double.POSITIVE_INFINITY;
      doubleArray0[6] = double6;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)95;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-53);
      byteArray0[1] = byte1;
      byte byte2 = (byte)45;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-49);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-31);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-20);
      byteArray0[6] = byte6;
      byte byte7 = (byte)81;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-65);
      byteArray0[8] = byte8;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      double double7 = 78.61132935498804;
      doubleArray0[7] = double7;
      double double8 = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = double8;
      double double9 = (-592.7635467927304);
      doubleArray0[9] = double9;
      byte[] byteArray1 = new byte[6];
      byte byte9 = (byte) (-1);
      byteArray1[0] = byte9;
      byte byte10 = (byte) (-31);
      byteArray1[1] = byte10;
      byte byte11 = (byte)95;
      byteArray1[2] = byte11;
      byte byte12 = (byte) (-30);
      byteArray1[3] = byte12;
      byte byte13 = (byte) (-48);
      byteArray1[4] = byte13;
      byte byte14 = (byte)0;
      byteArray1[5] = byte14;
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap(doubleArray0, byteArray1);
      assertEquals(23, tDoubleByteHashMap1.capacity());
      
      tDoubleByteHashMap1._states = byteArray1;
      assertEquals(5, tDoubleByteHashMap1.size());
  }

//   @Test
//   public void test5()  throws Throwable  {
//       double[] doubleArray0 = new double[8];
//       double double0 = (-1010.5392242866245);
//       doubleArray0[0] = double0;
//       double double1 = 0.0;
//       doubleArray0[1] = double1;
//       double double2 = (-1240.2017938970896);
//       doubleArray0[2] = double2;
//       double double3 = Double.POSITIVE_INFINITY;
//       doubleArray0[3] = double3;
//       double double4 = 0.0;
//       doubleArray0[4] = double4;
//       double double5 = 0.0;
//       doubleArray0[5] = double5;
//       double double6 = 0.0;
//       doubleArray0[6] = double6;
//       double double7 = (-1645.5498372721706);
//       doubleArray0[7] = double7;
//       byte[] byteArray0 = new byte[10];
//       byte byte0 = (byte)44;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)0;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte) (-75);
//       byteArray0[2] = byte2;
//       byte byte3 = (byte)0;
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)0;
//       byteArray0[4] = byte4;
//       byte byte5 = (byte)36;
//       byteArray0[5] = byte5;
//       byte byte6 = (byte)79;
//       byteArray0[6] = byte6;
//       byte byte7 = (byte) (-95);
//       byteArray0[7] = byte7;
//       byte byte8 = (byte)75;
//       byteArray0[8] = byte8;
//       byte byte9 = (byte)96;
//       byteArray0[9] = byte9;
//       TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
//       boolean boolean0 = false;
//       tDoubleByteHashMap0.reenableAutoCompaction(boolean0);
//       assertEquals(0, tDoubleByteHashMap0.getNoEntryValue());
//       assertEquals("{0.0=79, -1645.5498372721706=-95, -1240.2017938970896=-75, -1010.5392242866245=0}", tDoubleByteHashMap0.toString());
//       assertEquals(0.0, tDoubleByteHashMap0.getNoEntryKey(), 0.01D);
//       assertEquals(4, tDoubleByteHashMap0.size());
//   }

  @Test
  public void test6()  throws Throwable  {
      TDoubleByteMap tDoubleByteMap0 = null;
      TDoubleByteHashMap tDoubleByteHashMap0 = null;
      try {
        tDoubleByteHashMap0 = new TDoubleByteHashMap(tDoubleByteMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1783.5747739546023);
      doubleArray0[0] = double0;
      TDoubleByteMap tDoubleByteMap0 = null;
      TDoubleByteHashMap tDoubleByteHashMap0 = null;
      try {
        tDoubleByteHashMap0 = new TDoubleByteHashMap(tDoubleByteMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      String string0 = " > ";
      String string1 = "";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string1);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // 
         //
      }
  }

//   @Test
//   public void test9()  throws Throwable  {
//       int int0 = 1350;
//       TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(int0);
//       byte[] byteArray0 = tDoubleByteHashMap0._states;
//       assertEquals(2729, tDoubleByteHashMap0.capacity());
//       assertEquals(0, tDoubleByteHashMap0.getNoEntryValue());
//       assertEquals(0.0, tDoubleByteHashMap0.getNoEntryKey(), 0.01D);
//   }

//   @Test
//   public void test10()  throws Throwable  {
//       TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
//       double double0 = 0.0;
//       boolean boolean0 = tDoubleByteHashMap0.increment(double0);
//       assertEquals(false, boolean0);
//       
//       float float0 = 0.0F;
//       Locale locale0 = Locale.ITALIAN;
//       String string0 = locale0.getVariant();
//       tDoubleByteHashMap0.equals((Object) string0);
//       tDoubleByteHashMap0.setAutoCompactionFactor(float0);
//       int int0 = tDoubleByteHashMap0.capacity();
//       assertEquals(23, int0);
//       
//       TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap(int0, int0);
//       TDoubleByteHashMap tDoubleByteHashMap2 = new TDoubleByteHashMap((TDoubleByteMap) tDoubleByteHashMap0);
//       tDoubleByteHashMap1.valueCollection();
//       byte byte0 = tDoubleByteHashMap2.getNoEntryValue();
//       assertEquals((byte)0, byte0);
//       
//       tDoubleByteHashMap1.trimToSize();
//       assertEquals(0.0, tDoubleByteHashMap1.getNoEntryKey(), 0.01D);
//       assertEquals(0, tDoubleByteHashMap1.getNoEntryValue());
//       
//       TDoubleByteHashMap tDoubleByteHashMap3 = new TDoubleByteHashMap((TDoubleByteMap) tDoubleByteHashMap2);
//       tDoubleByteHashMap3.iterator();
//       assertEquals(0.0, tDoubleByteHashMap3.getNoEntryKey(), 0.01D);
//       assertEquals(23, tDoubleByteHashMap0.capacity());
//   }

//   @Test
//   public void test11()  throws Throwable  {
//       double[] doubleArray0 = new double[6];
//       double double0 = (-1.0);
//       doubleArray0[0] = double0;
//       double double1 = (-1428.9986496165668);
//       doubleArray0[1] = double1;
//       double double2 = 1.0;
//       doubleArray0[2] = double2;
//       double double3 = (-498.481075951375);
//       doubleArray0[3] = double3;
//       double double4 = 0.0;
//       doubleArray0[4] = double4;
//       double double5 = (-1.0);
//       doubleArray0[5] = double5;
//       byte[] byteArray0 = new byte[1];
//       byte byte0 = (byte)1;
//       byteArray0[0] = byte0;
//       TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
//       byte[] byteArray1 = tDoubleByteHashMap0.values(byteArray0);
//       assertEquals(17, tDoubleByteHashMap0.capacity());
//       assertEquals(0.0, tDoubleByteHashMap0.getNoEntryKey(), 0.01D);
//       assertEquals("{-1.0=1}", tDoubleByteHashMap0.toString());
//       assertNotNull(byteArray1);
//       assertEquals(0, tDoubleByteHashMap0.getNoEntryValue());
//       
//       TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap();
//       float float0 = (-291.51144F);
//       // Undeclared exception!
//       try {
//         tDoubleByteHashMap1.setAutoCompactionFactor(float0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Factor must be >= 0: -291.51144
//          //
//       }
//   }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-1);
      byteArray0[0] = byte0;
      byte byte1 = (byte)123;
      byteArray0[1] = byte1;
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      int int0 = 0;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

//   @Test
//   public void test13()  throws Throwable  {
//       double[] doubleArray0 = new double[1];
//       double double0 = 477.52483162421703;
//       doubleArray0[0] = double0;
//       byte[] byteArray0 = new byte[4];
//       byte byte0 = (byte) (-46);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)74;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)0;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte)0;
//       byteArray0[3] = byte3;
//       TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
//       ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
//       FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) byteArrayOutputStream0);
//       boolean boolean0 = true;
//       PrintStream printStream0 = new PrintStream((OutputStream) filterOutputStream0, boolean0);
//       ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
//       tDoubleByteHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
//       assertEquals("{477.52483162421703=-46}", tDoubleByteHashMap0.toString());
//       assertEquals(0.0, tDoubleByteHashMap0.getNoEntryKey(), 0.01D);
//       assertEquals(11, tDoubleByteHashMap0.capacity());
//       assertEquals(0, tDoubleByteHashMap0.getNoEntryValue());
//   }

//   @Test
//   public void test14()  throws Throwable  {
//       int int0 = 0;
//       int int1 = 0;
//       byte byte0 = (byte)0;
//       int int2 = 189;
//       float float0 = (-1866.9801F);
//       double double0 = (-831.8859557142378);
//       TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(int2, float0, double0, byte0);
//       TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap((TDoubleByteMap) tDoubleByteHashMap0);
//       TDoubleByteHashMap tDoubleByteHashMap2 = new TDoubleByteHashMap(int1, (float) int0, (double) int1, byte0);
//       assertEquals(0, tDoubleByteHashMap2.getNoEntryValue());
//       assertEquals(0.0, tDoubleByteHashMap2.getNoEntryKey(), 0.01D);
//       
//       TDoubleByteHashMap tDoubleByteHashMap3 = new TDoubleByteHashMap(int0);
//       assertEquals(0, tDoubleByteHashMap3.getNoEntryValue());
//       assertEquals(0.0, tDoubleByteHashMap3.getNoEntryKey(), 0.01D);
//       
//       TDoubleByteHashMap tDoubleByteHashMap4 = new TDoubleByteHashMap();
//       tDoubleByteHashMap4.size();
//       assertEquals(0.0, tDoubleByteHashMap4.getNoEntryKey(), 0.01D);
//       assertEquals(23, tDoubleByteHashMap4.capacity());
//       assertEquals(0, tDoubleByteHashMap4.getNoEntryValue());
//   }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      double double0 = 0.0;
      byte byte0 = (byte) (-108);
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(int0, (float) int0, double0, byte0);
      TDoubleByteHashMap tDoubleByteHashMap1 = null;
      try {
        tDoubleByteHashMap1 = new TDoubleByteHashMap((TDoubleByteMap) tDoubleByteHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

//   @Test
//   public void test16()  throws Throwable  {
//       int int0 = 1022;
//       int int1 = 1709;
//       float float0 = 0.0F;
//       double double0 = 1.0;
//       byte byte0 = (byte)0;
//       TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(int1, float0, double0, byte0);
//       tDoubleByteHashMap0.clear();
//       double double1 = 1.0;
//       byte byte1 = (byte)42;
//       byte[] byteArray0 = tDoubleByteHashMap0.values();
//       assertNotNull(byteArray0);
//       
//       TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap(int0, (float) int0, double1, byte1);
//       TDoubleByteHashMap tDoubleByteHashMap2 = new TDoubleByteHashMap();
//       tDoubleByteHashMap1.keys();
//       tDoubleByteHashMap2.keySet();
//       tDoubleByteHashMap2.keySet();
//       assertEquals(23, tDoubleByteHashMap2.capacity());
//       assertEquals(0, tDoubleByteHashMap2.getNoEntryValue());
//       assertEquals(0.0, tDoubleByteHashMap2.getNoEntryKey(), 0.01D);
//       
//       byte byte2 = tDoubleByteHashMap1.getNoEntryValue();
//       assertEquals(1.0, tDoubleByteHashMap1.getNoEntryKey(), 0.01D);
//       assertEquals((byte)42, byte2);
//   }

//   @Test
//   public void test17()  throws Throwable  {
//       double[] doubleArray0 = new double[4];
//       double double0 = (-1618.9997135159429);
//       doubleArray0[0] = double0;
//       double double1 = 0.0;
//       doubleArray0[1] = double1;
//       double double2 = 0.0;
//       doubleArray0[2] = double2;
//       double double3 = 0.0;
//       doubleArray0[3] = double3;
//       byte[] byteArray0 = new byte[3];
//       byte byte0 = (byte)0;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte) (-1);
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)26;
//       byteArray0[2] = byte2;
//       TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
//       assertEquals(0, tDoubleByteHashMap0.getNoEntryValue());
//       assertEquals(11, tDoubleByteHashMap0.capacity());
//       assertEquals("{-1618.9997135159429=0, 0.0=26}", tDoubleByteHashMap0.toString());
//       assertEquals(0.0, tDoubleByteHashMap0.getNoEntryKey(), 0.01D);
//       assertEquals(2, tDoubleByteHashMap0.size());
//   }
}
