/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TShortFunction;
import gnu.trove.map.TShortShortMap;
import gnu.trove.map.hash.TShortShortHashMap;
import gnu.trove.procedure.TShortShortProcedure;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortShortHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          short[] shortArray0 = new short[10];
          short short0 = (short)549;
          shortArray0[0] = short0;
          short short1 = (short)0;
          shortArray0[1] = short1;
          short short2 = (short)1;
          shortArray0[2] = short2;
          short short3 = (short)0;
          shortArray0[3] = short3;
          short short4 = (short)32767;
          shortArray0[4] = short4;
          short short5 = (short)195;
          shortArray0[5] = short5;
          short short6 = (short) (-142);
          shortArray0[6] = short6;
          short short7 = (short) (-1353);
          shortArray0[7] = short7;
          short short8 = (short)0;
          shortArray0[8] = short8;
          short short9 = (short)31;
          shortArray0[9] = short9;
          TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(shortArray0, shortArray0);
          tShortShortHashMap0.compact();
          int int0 = 0;
          float float0 = (-54.718224F);
          short short10 = (short)0;
          TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap(int0, float0, short10, short10);
          String string0 = "No free or removed slots available. Key set full?!!";
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"No free or removed slots available. Key set full?!!\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.GeneratedConstructorAccessor10.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0, float0);
      tShortShortHashMap0.compact();
      OutputStream outputStream0 = null;
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test2()  throws Throwable  {
//       int int0 = 310081;
//       TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0);
//       short[] shortArray0 = new short[6];
//       short short0 = (short)86;
//       shortArray0[0] = short0;
//       short short1 = (short)1686;
//       shortArray0[1] = short1;
//       short short2 = (short) (-916);
//       TShortFunction tShortFunction0 = null;
//       tShortShortHashMap0.transformValues(tShortFunction0);
//       shortArray0[2] = short2;
//       short short3 = (short) (-1657);
//       shortArray0[3] = short3;
//       short short4 = (short) (-1);
//       shortArray0[4] = short4;
//       short short5 = (short)0;
//       shortArray0[5] = short5;
//       tShortShortHashMap0._set = shortArray0;
//       assertEquals(0, tShortShortHashMap0.getNoEntryValue());
//       assertEquals(620171, tShortShortHashMap0.capacity());
//       assertEquals(0, tShortShortHashMap0.getNoEntryKey());
//   }

//   @Test
//   public void test3()  throws Throwable  {
//       TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
//       assertEquals(0, tShortShortHashMap0.getNoEntryValue());
//       assertEquals(23, tShortShortHashMap0.capacity());
//       assertEquals(0, tShortShortHashMap0.getNoEntryKey());
//   }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-47);
      short[] shortArray0 = new short[5];
      short short0 = (short) (-970);
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)1;
      shortArray0[2] = short2;
      short short3 = (short) (-1882);
      shortArray0[3] = short3;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(shortArray0, shortArray0);
      short short4 = (short)90;
      short short5 = (short) (-201);
      tShortShortHashMap0.adjustOrPutValue(short4, short1, short5);
      assertEquals(5, tShortShortHashMap0.size());
      
      short short6 = (short)1355;
      shortArray0[4] = short6;
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap(shortArray0, shortArray0);
      // Undeclared exception!
      try {
        tShortShortHashMap1.setAutoCompactionFactor((float) shortArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -970.0
         //
      }
  }

//   @Test
//   public void test5()  throws Throwable  {
//       int int0 = 1496;
//       float float0 = 10.0F;
//       TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0, float0);
//       String string0 = tShortShortHashMap0.toString();
//       assertEquals(0, tShortShortHashMap0.getNoEntryValue());
//       assertEquals(0, tShortShortHashMap0.getNoEntryKey());
//       assertEquals(163, tShortShortHashMap0.capacity());
//       assertNotNull(string0);
//   }

//   @Test
//   public void test6()  throws Throwable  {
//       int int0 = (-1);
//       float float0 = 0.0F;
//       TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0, float0);
//       short short0 = (short)692;
//       tShortShortHashMap0.remove(short0);
//       short[] shortArray0 = new short[9];
//       short short1 = (short) (-820);
//       shortArray0[0] = short1;
//       short short2 = (short)406;
//       shortArray0[1] = short2;
//       short short3 = (short)36;
//       shortArray0[2] = short3;
//       short short4 = (short)0;
//       shortArray0[3] = short4;
//       short short5 = (short) (-1983);
//       TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap();
//       tShortShortHashMap1.capacity();
//       short[] shortArray1 = tShortShortHashMap0._set;
//       shortArray0[4] = short5;
//       short short6 = (short) (-377);
//       shortArray0[5] = short6;
//       short short7 = (short)1354;
//       shortArray0[6] = short7;
//       short short8 = (short) (-1647);
//       shortArray0[7] = short8;
//       short short9 = (short)1;
//       tShortShortHashMap1.containsValue(short9);
//       assertTrue(tShortShortHashMap1.equals(tShortShortHashMap0));
//       assertEquals(0, tShortShortHashMap1.getNoEntryValue());
//       assertEquals(0, tShortShortHashMap1.getNoEntryKey());
//       
//       short short10 = (short) (-302);
//       shortArray0[8] = short10;
//       TShortShortHashMap tShortShortHashMap2 = new TShortShortHashMap(shortArray0, shortArray0);
//       short short11 = tShortShortHashMap2.getNoEntryKey();
//       assertEquals(0, tShortShortHashMap2.getNoEntryValue());
//       assertEquals((short)0, short11);
//       assertEquals("{-377=-377, 406=406, -820=-820, 36=36, 1354=1354, -1647=-1647, -302=-302, -1983=-1983, 0=0}", tShortShortHashMap2.toString());
//   }

//   @Test
//   public void test7()  throws Throwable  {
//       int int0 = 692;
//       short short0 = (short) (-129);
//       short short1 = (short) (-616);
//       TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0, (float) int0, short0, short1);
//       boolean boolean0 = tShortShortHashMap0.contains(short0);
//       assertEquals(-129, tShortShortHashMap0.getNoEntryKey());
//       assertEquals(-616, tShortShortHashMap0.getNoEntryValue());
//       assertEquals(false, boolean0);
//   }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = Integer.MAX_VALUE;
          float float0 = 0.0F;
          short short0 = (short) (-77);
          TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0, float0, short0, short0);
          assertEquals(-77, tShortShortHashMap0.getNoEntryKey());
          assertEquals(-77, tShortShortHashMap0.getNoEntryValue());
          
          TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap();
          String string0 = tShortShortHashMap1.toString();
          assertNotNull(string0);
          
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"{}\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.GeneratedConstructorAccessor10.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      tShortShortHashMap0.tempDisableAutoCompaction();
      String string0 = "S";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 1;
      float float0 = 149.18932F;
      short short0 = (short)1;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      boolean boolean0 = true;
      tShortShortHashMap0.reenableAutoCompaction(boolean0);
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap((int) short0, (float) int0);
      tShortShortHashMap1.tempDisableAutoCompaction();
      short short1 = (short)1;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int1 = (-1547);
      TShortShortHashMap tShortShortHashMap2 = new TShortShortHashMap(tShortShortHashMap1._set, tShortShortHashMap1._set);
      short short2 = (short)40;
      tShortShortHashMap2.increment(short2);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-1);
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0);
      float float0 = (-1518.5942F);
      int int1 = (-168);
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap(int1);
      InputStream inputStream0 = null;
      short short0 = (short)1005;
      tShortShortHashMap1.contains(short0);
      short short1 = (short)24123;
      tShortShortHashMap1.increment(short1);
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream(inputStream0, inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test12()  throws Throwable  {
//       int int0 = 0;
//       TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0);
//       short[] shortArray0 = new short[10];
//       short short0 = (short)44;
//       shortArray0[0] = short0;
//       short short1 = (short)0;
//       shortArray0[1] = short1;
//       short short2 = (short)0;
//       shortArray0[2] = short2;
//       short short3 = (short)1228;
//       shortArray0[3] = short3;
//       short short4 = (short) (-1112);
//       shortArray0[4] = short4;
//       short short5 = (short)1883;
//       shortArray0[5] = short5;
//       short short6 = (short)0;
//       shortArray0[6] = short6;
//       short short7 = (short) (-1959);
//       shortArray0[7] = short7;
//       short short8 = (short)0;
//       shortArray0[8] = short8;
//       short short9 = (short) (-40);
//       shortArray0[9] = short9;
//       tShortShortHashMap0._set = shortArray0;
//       assertEquals(0, tShortShortHashMap0.getNoEntryKey());
//       assertEquals(0, tShortShortHashMap0.getNoEntryValue());
//   }

  @Test
  public void test13()  throws Throwable  {
      short[] shortArray0 = new short[2];
      int int0 = 99;
      float float0 = 0.0F;
      short short0 = (short)1436;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0, float0, short0, short0);
      short short1 = (short)0;
      boolean boolean0 = tShortShortHashMap0.increment(short1);
      assertEquals(false, boolean0);
      
      TShortShortHashMap tShortShortHashMap1 = null;
      try {
        tShortShortHashMap1 = new TShortShortHashMap((TShortShortMap) tShortShortHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

//   @Test
//   public void test14()  throws Throwable  {
//       int int0 = 1429;
//       float float0 = 0.5F;
//       short short0 = (short)415;
//       TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0, float0, short0, short0);
//       short[] shortArray0 = new short[10];
//       shortArray0[0] = short0;
//       shortArray0[1] = short0;
//       shortArray0[2] = short0;
//       shortArray0[3] = short0;
//       shortArray0[4] = short0;
//       shortArray0[5] = short0;
//       shortArray0[6] = short0;
//       shortArray0[7] = short0;
//       short short1 = (short) (-634);
//       shortArray0[8] = short1;
//       shortArray0[9] = short0;
//       short[] shortArray1 = tShortShortHashMap0.keys(shortArray0);
//       assertEquals(415, tShortShortHashMap0.getNoEntryKey());
//       assertEquals(2879, tShortShortHashMap0.capacity());
//       assertNotNull(shortArray1);
//       assertEquals(415, tShortShortHashMap0.getNoEntryValue());
//   }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0);
      tShortShortHashMap0.trimToSize();
      tShortShortHashMap0.compact();
      short[] shortArray0 = new short[1];
      short short0 = (short)1939;
      shortArray0[0] = short0;
      shortArray0[0] = short0;
      short short1 = (short) (-1);
      shortArray0[0] = short1;
      tShortShortHashMap0.trimToSize();
      short short2 = (short)74;
      shortArray0[0] = short2;
      TShortShortProcedure tShortShortProcedure0 = null;
      tShortShortHashMap0.retainEntries(tShortShortProcedure0);
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      tShortShortHashMap0.tempDisableAutoCompaction();
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap();
      short[] shortArray0 = new short[3];
      short short0 = (short)6101;
      shortArray0[0] = short0;
      short short1 = (short)1747;
      shortArray0[1] = short1;
      short short2 = (short)182;
      shortArray0[2] = short2;
      tShortShortHashMap0.keys(shortArray0);
      short[] shortArray1 = new short[7];
      short short3 = (short)0;
      tShortShortHashMap0.ensureCapacity((int) short3);
      tShortShortHashMap0.contains(short3);
      short short4 = (short) (-733);
      tShortShortHashMap1.capacity();
      shortArray1[0] = short4;
      tShortShortHashMap1.trimToSize();
      short short5 = (short)113;
      shortArray1[1] = short5;
      tShortShortHashMap1.toString();
      short short6 = (short) (-1880);
      short short7 = (short) (-934);
      tShortShortHashMap1.adjustOrPutValue(short6, short7, short5);
      short short8 = (short)0;
      shortArray1[2] = short8;
      TShortShortHashMap tShortShortHashMap2 = new TShortShortHashMap((int) short3, (float) short5, shortArray1[1], short4);
      short short9 = (short)1411;
      shortArray1[3] = short9;
      tShortShortHashMap1.iterator();
      assertEquals("{-1880=113}", tShortShortHashMap1.toString());
      
      short short10 = (short) (-1646);
      shortArray1[4] = short10;
      short short11 = (short)1005;
      shortArray1[5] = short11;
      short short12 = (short) (-1);
      shortArray1[6] = short12;
      tShortShortHashMap0.iterator();
      TShortShortHashMap tShortShortHashMap3 = new TShortShortHashMap(shortArray1, shortArray1);
      tShortShortHashMap3.capacity();
      short short13 = (short) (-1844);
      short short14 = tShortShortHashMap3.putIfAbsent(shortArray1[4], short13);
      assertEquals((short) (-1646), short14);
  }
}
