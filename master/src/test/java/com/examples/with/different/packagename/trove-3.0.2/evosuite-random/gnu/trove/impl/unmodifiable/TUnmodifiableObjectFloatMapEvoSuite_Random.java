/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap;
import gnu.trove.map.TObjectFloatMap;
import gnu.trove.map.custom_hash.TObjectFloatCustomHashMap;
import gnu.trove.map.hash.TObjectFloatHashMap;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.net.URI;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.Set;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableObjectFloatMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TObjectFloatMap<Float> tObjectFloatMap0 = null;
      TObjectFloatMap<Integer> tObjectFloatMap1 = null;
      TUnmodifiableObjectFloatMap<Integer> tUnmodifiableObjectFloatMap0 = null;
      try {
        tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Integer>(tObjectFloatMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-84);
      TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>(int0);
      TUnmodifiableObjectFloatMap<Float> tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Float>((TObjectFloatMap<Float>) tObjectFloatHashMap0);
      tUnmodifiableObjectFloatMap0.hashCode();
      TObjectFloatCustomHashMap<Integer> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Integer>();
      TUnmodifiableObjectFloatMap<Integer> tUnmodifiableObjectFloatMap1 = new TUnmodifiableObjectFloatMap<Integer>((TObjectFloatMap<Integer>) tObjectFloatCustomHashMap0);
      TUnmodifiableObjectFloatMap<Integer> tUnmodifiableObjectFloatMap2 = new TUnmodifiableObjectFloatMap<Integer>((TObjectFloatMap<Integer>) tUnmodifiableObjectFloatMap1);
      assertTrue(tUnmodifiableObjectFloatMap1.equals(tUnmodifiableObjectFloatMap2));
  }

  @Test
  public void test2()  throws Throwable  {
      TObjectFloatMap<Integer> tObjectFloatMap0 = null;
      IdentityHashingStrategy<Float> identityHashingStrategy0 = new IdentityHashingStrategy<Float>();
      TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>();
      Float float0 = null;
      float float1 = 0.0F;
      TUnmodifiableObjectFloatMap<Integer> tUnmodifiableObjectFloatMap0 = null;
      try {
        tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Integer>(tObjectFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TObjectFloatCustomHashMap<Float> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Float>();
      TUnmodifiableObjectFloatMap<Float> tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Float>((TObjectFloatMap<Float>) tObjectFloatCustomHashMap0);
      float float0 = 396.58795F;
      Float float1 = new Float(float0);
      float float2 = (-1954.7604F);
      // Undeclared exception!
      try {
        tUnmodifiableObjectFloatMap0.put(float1, float2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-1250);
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      Locale locale0 = Locale.JAPANESE;
      char char0 = 'E';
      String string0 = locale0.getExtension(char0);
      identityHashingStrategy0.computeHashCode((Object) string0);
      TObjectFloatCustomHashMap<String> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<String>((HashingStrategy<? super String>) identityHashingStrategy0);
      TUnmodifiableObjectFloatMap<String> tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<String>((TObjectFloatMap<String>) tObjectFloatCustomHashMap0);
      String string1 = "9=m<97S?m50X%";
      // Undeclared exception!
      try {
        URI.create(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 3: 9=m<97S?m50X%
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      TObjectFloatCustomHashMap<Integer> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Integer>();
      tObjectFloatCustomHashMap0.clear();
      TObjectFloatHashMap<Float> tObjectFloatHashMap0 = new TObjectFloatHashMap<Float>();
      TUnmodifiableObjectFloatMap<Float> tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Float>((TObjectFloatMap<Float>) tObjectFloatHashMap0);
      float float0 = (-1.0F);
      Float float1 = new Float(float0);
      float float2 = Float.NEGATIVE_INFINITY;
      tObjectFloatHashMap0.adjustOrPutValue(float1, float0, float2);
      TUnmodifiableObjectFloatMap<Integer> tUnmodifiableObjectFloatMap1 = new TUnmodifiableObjectFloatMap<Integer>((TObjectFloatMap<Integer>) tObjectFloatCustomHashMap0);
      assertEquals("{}", tUnmodifiableObjectFloatMap1.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
      int int0 = 0;
      identityHashingStrategy0.equals((Integer) int0, (Integer) int0);
      float float0 = Float.POSITIVE_INFINITY;
      TObjectFloatCustomHashMap<Integer> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, int0, (float) int0, float0);
      TUnmodifiableObjectFloatMap<Integer> tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Integer>((TObjectFloatMap<Integer>) tObjectFloatCustomHashMap0);
      TObjectFloatCustomHashMap<String> tObjectFloatCustomHashMap1 = new TObjectFloatCustomHashMap<String>();
      TUnmodifiableObjectFloatMap<String> tUnmodifiableObjectFloatMap1 = new TUnmodifiableObjectFloatMap<String>((TObjectFloatMap<String>) tObjectFloatCustomHashMap1);
      tUnmodifiableObjectFloatMap1.hashCode();
      Set<Integer> set0 = tUnmodifiableObjectFloatMap0.keySet();
      assertEquals(true, set0.isEmpty());
  }

  @Test
  public void test7()  throws Throwable  {
      HashingStrategy<String> hashingStrategy0 = null;
      int int0 = 172;
      float float0 = (-425.997F);
      float float1 = 0.0F;
      float float2 = (-1.0F);
      TObjectFloatHashMap<Object> tObjectFloatHashMap0 = new TObjectFloatHashMap<Object>(int0, float2);
      TUnmodifiableObjectFloatMap<Object> tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Object>((TObjectFloatMap<Object>) tObjectFloatHashMap0);
      TUnmodifiableObjectFloatMap<Object> tUnmodifiableObjectFloatMap1 = new TUnmodifiableObjectFloatMap<Object>((TObjectFloatMap<Object>) tUnmodifiableObjectFloatMap0);
      Locale locale0 = Locale.CHINA;
      String string0 = locale0.getISO3Country();
      float float3 = 1225.9884F;
      // Undeclared exception!
      try {
        tUnmodifiableObjectFloatMap1.put((Object) string0, float3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
      int int0 = 0;
      IdentityHashingStrategy<Float> identityHashingStrategy1 = new IdentityHashingStrategy<Float>();
      TObjectFloatCustomHashMap<Float> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<Float>((HashingStrategy<? super Float>) identityHashingStrategy1, int0);
      TUnmodifiableObjectFloatMap<Float> tUnmodifiableObjectFloatMap0 = new TUnmodifiableObjectFloatMap<Float>((TObjectFloatMap<Float>) tObjectFloatCustomHashMap0);
      int int1 = (-33);
      float float0 = 831.58466F;
      TObjectFloatHashMap<Integer> tObjectFloatHashMap0 = new TObjectFloatHashMap<Integer>(int1, float0);
      Float float1 = new Float((double) int0);
      float float2 = 316.95828F;
      // Undeclared exception!
      try {
        tUnmodifiableObjectFloatMap0.put(float1, float2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
