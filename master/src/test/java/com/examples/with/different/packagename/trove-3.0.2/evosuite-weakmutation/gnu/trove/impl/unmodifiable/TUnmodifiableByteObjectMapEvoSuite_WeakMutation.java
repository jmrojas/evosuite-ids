/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableByteSet;
import gnu.trove.map.TByteObjectMap;
import gnu.trove.map.hash.TByteObjectHashMap;
import gnu.trove.procedure.TByteProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import java.util.Collection;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableByteObjectMapEvoSuite_WeakMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 17 covered goals:
   * 1 Weak Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.size()I:58 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 2 Weak Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.size()I:58 - DeleteStatement: size()I
   * 3 Weak Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.getNoEntryKey()B:92 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 4 Weak Mutation 56: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.getNoEntryKey()B:92 - DeleteStatement: getNoEntryKey()B
   * 5 Weak Mutation 62: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.forEachEntry(Lgnu/trove/procedure/TByteObjectProcedure;)Z:101 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TByteObjectProcedure;)Z
   * 6 Weak Mutation 61: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.forEachEntry(Lgnu/trove/procedure/TByteObjectProcedure;)Z:101 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.size()I: root-Branch
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.forEachEntry(Lgnu/trove/procedure/TByteObjectProcedure;)Z: root-Branch
   * 9 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.getNoEntryKey()B: root-Branch
   * 10 Weak Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.<init>(Lgnu/trove/map/TByteObjectMap;)V:53 - ReplaceComparisonOperator != null -> = null
   * 11 Weak Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.size()I:58 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 12 Weak Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.size()I:58 - DeleteStatement: size()I
   * 13 Weak Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.getNoEntryKey()B:92 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 14 Weak Mutation 56: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.getNoEntryKey()B:92 - DeleteStatement: getNoEntryKey()B
   * 15 Weak Mutation 62: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.forEachEntry(Lgnu/trove/procedure/TByteObjectProcedure;)Z:101 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TByteObjectProcedure;)Z
   * 16 Weak Mutation 61: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.forEachEntry(Lgnu/trove/procedure/TByteObjectProcedure;)Z:101 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 17 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.<init>(Lgnu/trove/map/TByteObjectMap;)V: I17 Branch 1 IFNONNULL L53 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>((-14));
      TUnmodifiableByteObjectMap<Integer> tUnmodifiableByteObjectMap0 = new TUnmodifiableByteObjectMap<Integer>((TByteObjectMap<Integer>) tByteObjectHashMap0);
      TByteObjectHashMap<Object> tByteObjectHashMap1 = new TByteObjectHashMap<Object>((TByteObjectMap<?>) tUnmodifiableByteObjectMap0);
      assertEquals(0, tByteObjectHashMap1.size());
  }

  //Test case number: 1
  /*
   * 5 covered goals:
   * 1 Weak Mutation 11: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.isEmpty()Z:59 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 2 Weak Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.isEmpty()Z:59 - DeleteStatement: isEmpty()Z
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.isEmpty()Z: root-Branch
   * 4 Weak Mutation 11: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.isEmpty()Z:59 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 5 Weak Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.isEmpty()Z:59 - DeleteStatement: isEmpty()Z
   */

  @Test
  public void test1()  throws Throwable  {
      TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>(0, (float) 0, (byte) (-35));
      TUnmodifiableByteObjectMap<Integer> tUnmodifiableByteObjectMap0 = new TUnmodifiableByteObjectMap<Integer>((TByteObjectMap<Integer>) tByteObjectHashMap0);
      boolean boolean0 = tUnmodifiableByteObjectMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 11 covered goals:
   * 1 Weak Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.containsKey(B)Z:60 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 2 Weak Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.containsKey(B)Z:60 - InsertUnaryOp Negation of key
   * 3 Weak Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.containsKey(B)Z:60 - InsertUnaryOp IINC 1 key
   * 4 Weak Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.containsKey(B)Z:60 - DeleteStatement: containsKey(B)Z
   * 5 Weak Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.containsKey(B)Z:60 - InsertUnaryOp IINC -1 key
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.containsKey(B)Z: root-Branch
   * 7 Weak Mutation 13: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.containsKey(B)Z:60 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 8 Weak Mutation 14: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.containsKey(B)Z:60 - InsertUnaryOp Negation of key
   * 9 Weak Mutation 15: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.containsKey(B)Z:60 - InsertUnaryOp IINC 1 key
   * 10 Weak Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.containsKey(B)Z:60 - DeleteStatement: containsKey(B)Z
   * 11 Weak Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.containsKey(B)Z:60 - InsertUnaryOp IINC -1 key
   */

  @Test
  public void test2()  throws Throwable  {
      TByteObjectHashMap<Object> tByteObjectHashMap0 = new TByteObjectHashMap<Object>((int) (byte)92, (float) (-128), (byte)92);
      TUnmodifiableByteObjectMap<Object> tUnmodifiableByteObjectMap0 = new TUnmodifiableByteObjectMap<Object>((TByteObjectMap<Object>) tByteObjectHashMap0);
      boolean boolean0 = tUnmodifiableByteObjectMap0.containsKey((byte)92);
      assertEquals(false, boolean0);
  }

  //Test case number: 3
  /*
   * 5 covered goals:
   * 1 Weak Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.containsValue(Ljava/lang/Object;)Z:61 - DeleteStatement: containsValue(Ljava/lang/Object;)Z
   * 2 Weak Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.containsValue(Ljava/lang/Object;)Z:61 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.containsValue(Ljava/lang/Object;)Z: root-Branch
   * 4 Weak Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.containsValue(Ljava/lang/Object;)Z:61 - DeleteStatement: containsValue(Ljava/lang/Object;)Z
   * 5 Weak Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.containsValue(Ljava/lang/Object;)Z:61 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   */

  @Test
  public void test3()  throws Throwable  {
      TByteObjectHashMap<Object> tByteObjectHashMap0 = new TByteObjectHashMap<Object>();
      TUnmodifiableByteObjectMap<Object> tUnmodifiableByteObjectMap0 = new TUnmodifiableByteObjectMap<Object>((TByteObjectMap<Object>) tByteObjectHashMap0);
      boolean boolean0 = tUnmodifiableByteObjectMap0.containsValue((Object) "fr");
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 11 covered goals:
   * 1 Weak Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.get(B)Ljava/lang/Object;:62 - InsertUnaryOp Negation of key
   * 2 Weak Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.get(B)Ljava/lang/Object;:62 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 3 Weak Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.get(B)Ljava/lang/Object;:62 - InsertUnaryOp IINC -1 key
   * 4 Weak Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.get(B)Ljava/lang/Object;:62 - InsertUnaryOp IINC 1 key
   * 5 Weak Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.get(B)Ljava/lang/Object;:62 - DeleteStatement: get(B)Ljava/lang/Object;
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.get(B)Ljava/lang/Object;: root-Branch
   * 7 Weak Mutation 21: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.get(B)Ljava/lang/Object;:62 - InsertUnaryOp Negation of key
   * 8 Weak Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.get(B)Ljava/lang/Object;:62 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 9 Weak Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.get(B)Ljava/lang/Object;:62 - InsertUnaryOp IINC -1 key
   * 10 Weak Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.get(B)Ljava/lang/Object;:62 - InsertUnaryOp IINC 1 key
   * 11 Weak Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.get(B)Ljava/lang/Object;:62 - DeleteStatement: get(B)Ljava/lang/Object;
   */

  @Test
  public void test4()  throws Throwable  {
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>((-128));
      TUnmodifiableByteObjectMap<String> tUnmodifiableByteObjectMap0 = new TUnmodifiableByteObjectMap<String>((TByteObjectMap<String>) tByteObjectHashMap0);
      String string0 = tUnmodifiableByteObjectMap0.get((byte)92);
      assertNull(string0);
  }

  //Test case number: 5
  /*
   * 14 covered goals:
   * 1 Weak Mutation 25: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keySet()Lgnu/trove/set/TByteSet;:74 - DeleteField: keySetLgnu/trove/set/TByteSet;
   * 2 Weak Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keySet()Lgnu/trove/set/TByteSet;:74 - ReplaceComparisonOperator != null -> = null
   * 3 Weak Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keySet()Lgnu/trove/set/TByteSet;:75 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 4 Weak Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keySet()Lgnu/trove/set/TByteSet;:75 - DeleteStatement: unmodifiableSet(Lgnu/trove/set/TByteSet;)Lgnu/trove/set/TByteSet;
   * 5 Weak Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keySet()Lgnu/trove/set/TByteSet;:75 - DeleteStatement: keySet()Lgnu/trove/set/TByteSet;
   * 6 Weak Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keySet()Lgnu/trove/set/TByteSet;:76 - DeleteField: keySetLgnu/trove/set/TByteSet;
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keySet()Lgnu/trove/set/TByteSet;: I4 Branch 2 IFNONNULL L74 - true
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keySet()Lgnu/trove/set/TByteSet;: I4 Branch 2 IFNONNULL L74 - false
   * 9 Weak Mutation 25: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keySet()Lgnu/trove/set/TByteSet;:74 - DeleteField: keySetLgnu/trove/set/TByteSet;
   * 10 Weak Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keySet()Lgnu/trove/set/TByteSet;:75 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 11 Weak Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keySet()Lgnu/trove/set/TByteSet;:74 - ReplaceComparisonOperator != null -> = null
   * 12 Weak Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keySet()Lgnu/trove/set/TByteSet;:75 - DeleteStatement: unmodifiableSet(Lgnu/trove/set/TByteSet;)Lgnu/trove/set/TByteSet;
   * 13 Weak Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keySet()Lgnu/trove/set/TByteSet;:75 - DeleteStatement: keySet()Lgnu/trove/set/TByteSet;
   * 14 Weak Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keySet()Lgnu/trove/set/TByteSet;:76 - DeleteField: keySetLgnu/trove/set/TByteSet;
   */

  @Test
  public void test5()  throws Throwable  {
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>((int) (byte) (-32), (float) (byte) (-32));
      TUnmodifiableByteObjectMap<String> tUnmodifiableByteObjectMap0 = new TUnmodifiableByteObjectMap<String>((TByteObjectMap<String>) tByteObjectHashMap0);
      TUnmodifiableByteSet tUnmodifiableByteSet0 = (TUnmodifiableByteSet)tUnmodifiableByteObjectMap0.keySet();
      assertNotNull(tUnmodifiableByteSet0);
      
      TUnmodifiableByteSet tUnmodifiableByteSet1 = (TUnmodifiableByteSet)tUnmodifiableByteObjectMap0.keySet();
      assertSame(tUnmodifiableByteSet1, tUnmodifiableByteSet0);
  }

  //Test case number: 6
  /*
   * 5 covered goals:
   * 1 Weak Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keys()[B:78 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 2 Weak Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keys()[B:78 - DeleteStatement: keys()[B
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keys()[B: root-Branch
   * 4 Weak Mutation 31: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keys()[B:78 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 5 Weak Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keys()[B:78 - DeleteStatement: keys()[B
   */

  @Test
  public void test6()  throws Throwable  {
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>((-128));
      TUnmodifiableByteObjectMap<String> tUnmodifiableByteObjectMap0 = new TUnmodifiableByteObjectMap<String>((TByteObjectMap<String>) tByteObjectHashMap0);
      byte[] byteArray0 = tUnmodifiableByteObjectMap0.keys();
      assertNotNull(byteArray0);
  }

  //Test case number: 7
  /*
   * 5 covered goals:
   * 1 Weak Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keys([B)[B:79 - DeleteStatement: keys([B)[B
   * 2 Weak Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keys([B)[B:79 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keys([B)[B: root-Branch
   * 4 Weak Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keys([B)[B:79 - DeleteStatement: keys([B)[B
   * 5 Weak Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.keys([B)[B:79 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   */

  @Test
  public void test7()  throws Throwable  {
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>(370645);
      TUnmodifiableByteObjectMap<String> tUnmodifiableByteObjectMap0 = new TUnmodifiableByteObjectMap<String>((TByteObjectMap<String>) tByteObjectHashMap0);
      byte[] byteArray0 = tUnmodifiableByteObjectMap0.keys(tByteObjectHashMap0._set);
      assertNotNull(byteArray0);
  }

  //Test case number: 8
  /*
   * 14 covered goals:
   * 1 Weak Mutation 35: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.valueCollection()Ljava/util/Collection;:82 - DeleteField: valuesLjava/util/Collection;
   * 2 Weak Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.valueCollection()Ljava/util/Collection;:82 - ReplaceComparisonOperator != null -> = null
   * 3 Weak Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: valueCollection()Ljava/util/Collection;
   * 4 Weak Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: unmodifiableCollection(Ljava/util/Collection;)Ljava/util/Collection;
   * 5 Weak Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 6 Weak Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.valueCollection()Ljava/util/Collection;:84 - DeleteField: valuesLjava/util/Collection;
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.valueCollection()Ljava/util/Collection;: I4 Branch 3 IFNONNULL L82 - true
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.valueCollection()Ljava/util/Collection;: I4 Branch 3 IFNONNULL L82 - false
   * 9 Weak Mutation 35: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.valueCollection()Ljava/util/Collection;:82 - DeleteField: valuesLjava/util/Collection;
   * 10 Weak Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: valueCollection()Ljava/util/Collection;
   * 11 Weak Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: unmodifiableCollection(Ljava/util/Collection;)Ljava/util/Collection;
   * 12 Weak Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.valueCollection()Ljava/util/Collection;:82 - ReplaceComparisonOperator != null -> = null
   * 13 Weak Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 14 Weak Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.valueCollection()Ljava/util/Collection;:84 - DeleteField: valuesLjava/util/Collection;
   */

  @Test
  public void test8()  throws Throwable  {
      TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>(107, 107);
      TUnmodifiableByteObjectMap<Integer> tUnmodifiableByteObjectMap0 = new TUnmodifiableByteObjectMap<Integer>((TByteObjectMap<Integer>) tByteObjectHashMap0);
      Collection<Integer> collection0 = tUnmodifiableByteObjectMap0.valueCollection();
      assertNotNull(collection0);
      
      Collection<Integer> collection1 = tUnmodifiableByteObjectMap0.valueCollection();
      assertSame(collection1, collection0);
  }

  //Test case number: 9
  /*
   * 5 covered goals:
   * 1 Weak Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.values()[Ljava/lang/Object;:86 - DeleteStatement: values()[Ljava/lang/Object;
   * 2 Weak Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.values()[Ljava/lang/Object;:86 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.values()[Ljava/lang/Object;: root-Branch
   * 4 Weak Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.values()[Ljava/lang/Object;:86 - DeleteStatement: values()[Ljava/lang/Object;
   * 5 Weak Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.values()[Ljava/lang/Object;:86 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   */

  @Test
  public void test9()  throws Throwable  {
      TByteObjectHashMap<Object> tByteObjectHashMap0 = new TByteObjectHashMap<Object>();
      TUnmodifiableByteObjectMap<Object> tUnmodifiableByteObjectMap0 = new TUnmodifiableByteObjectMap<Object>((TByteObjectMap<Object>) tByteObjectHashMap0);
      Object[] objectArray0 = tUnmodifiableByteObjectMap0.values();
      assertNotNull(objectArray0);
  }

  //Test case number: 10
  /*
   * 5 covered goals:
   * 1 Weak Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 2 Weak Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteStatement: values([Ljava/lang/Object;)[Ljava/lang/Object;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: root-Branch
   * 4 Weak Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 5 Weak Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteStatement: values([Ljava/lang/Object;)[Ljava/lang/Object;
   */

  @Test
  public void test10()  throws Throwable  {
      TByteObjectHashMap<Byte> tByteObjectHashMap0 = new TByteObjectHashMap<Byte>((-291), (float) (-291), (byte)127);
      TUnmodifiableByteObjectMap<Byte> tUnmodifiableByteObjectMap0 = new TUnmodifiableByteObjectMap<Byte>((TByteObjectMap<Byte>) tByteObjectHashMap0);
      Byte[] byteArray0 = new Byte[10];
      Byte[] byteArray1 = tUnmodifiableByteObjectMap0.values(byteArray0);
      assertSame(byteArray1, byteArray0);
  }

  //Test case number: 11
  /*
   * 12 covered goals:
   * 1 Weak Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 2 Weak Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 3 Weak Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 4 Weak Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 0 -> 1
   * 5 Weak Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - false
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - true
   * 8 Weak Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 9 Weak Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 10 Weak Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 11 Weak Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 0 -> 1
   * 12 Weak Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   */

  @Test
  public void test11()  throws Throwable  {
      TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>((-291), (float) (-291), (byte)127);
      TUnmodifiableByteObjectMap<Integer> tUnmodifiableByteObjectMap0 = new TUnmodifiableByteObjectMap<Integer>((TByteObjectMap<Integer>) tByteObjectHashMap0);
      boolean boolean0 = tUnmodifiableByteObjectMap0.equals((Object) "fr");
      assertEquals(false, boolean0);
  }

  //Test case number: 12
  /*
   * 10 covered goals:
   * 1 Weak Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 1 -> 0
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - true
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - false
   * 4 Weak Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.size()I:58 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 5 Weak Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.size()I:58 - DeleteStatement: size()I
   * 6 Weak Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 7 Weak Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 8 Weak Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 9 Weak Mutation 48: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 10 Weak Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 1 -> 0
   */

  @Test
  public void test12()  throws Throwable  {
      TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>(107, 107);
      TUnmodifiableByteObjectMap<Integer> tUnmodifiableByteObjectMap0 = new TUnmodifiableByteObjectMap<Integer>((TByteObjectMap<Integer>) tByteObjectHashMap0);
      TByteObjectHashMap<Object> tByteObjectHashMap1 = new TByteObjectHashMap<Object>(107, 107);
      TUnmodifiableByteObjectMap<Object> tUnmodifiableByteObjectMap1 = new TUnmodifiableByteObjectMap<Object>((TByteObjectMap<Object>) tByteObjectHashMap1);
      boolean boolean0 = tUnmodifiableByteObjectMap0.equals((Object) tUnmodifiableByteObjectMap1);
      assertEquals(true, boolean0);
  }

  //Test case number: 13
  /*
   * 5 covered goals:
   * 1 Weak Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.hashCode()I:90 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 2 Weak Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.hashCode()I:90 - DeleteStatement: hashCode()I
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.hashCode()I: root-Branch
   * 4 Weak Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.hashCode()I:90 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 5 Weak Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.hashCode()I:90 - DeleteStatement: hashCode()I
   */

  @Test
  public void test13()  throws Throwable  {
      TByteObjectHashMap<Object> tByteObjectHashMap0 = new TByteObjectHashMap<Object>((int) (byte)92, (float) (-128), (byte)92);
      TUnmodifiableByteObjectMap<Object> tUnmodifiableByteObjectMap0 = new TUnmodifiableByteObjectMap<Object>((TByteObjectMap<Object>) tByteObjectHashMap0);
      int int0 = tUnmodifiableByteObjectMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 14
  /*
   * 5 covered goals:
   * 1 Weak Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.toString()Ljava/lang/String;:91 - DeleteStatement: toString()Ljava/lang/String;
   * 2 Weak Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.toString()Ljava/lang/String;:91 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.toString()Ljava/lang/String;: root-Branch
   * 4 Weak Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.toString()Ljava/lang/String;:91 - DeleteStatement: toString()Ljava/lang/String;
   * 5 Weak Mutation 53: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.toString()Ljava/lang/String;:91 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   */

  @Test
  public void test14()  throws Throwable  {
      TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>(107, 107);
      TUnmodifiableByteObjectMap<Integer> tUnmodifiableByteObjectMap0 = new TUnmodifiableByteObjectMap<Integer>((TByteObjectMap<Integer>) tByteObjectHashMap0);
      String string0 = tUnmodifiableByteObjectMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 15
  /*
   * 5 covered goals:
   * 1 Weak Mutation 58: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.forEachKey(Lgnu/trove/procedure/TByteProcedure;)Z:95 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TByteProcedure;)Z
   * 2 Weak Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.forEachKey(Lgnu/trove/procedure/TByteProcedure;)Z:95 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.forEachKey(Lgnu/trove/procedure/TByteProcedure;)Z: root-Branch
   * 4 Weak Mutation 58: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.forEachKey(Lgnu/trove/procedure/TByteProcedure;)Z:95 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TByteProcedure;)Z
   * 5 Weak Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.forEachKey(Lgnu/trove/procedure/TByteProcedure;)Z:95 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   */

  @Test
  public void test15()  throws Throwable  {
      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>();
      TUnmodifiableByteObjectMap<String> tUnmodifiableByteObjectMap0 = new TUnmodifiableByteObjectMap<String>((TByteObjectMap<String>) tByteObjectHashMap0);
      boolean boolean0 = tUnmodifiableByteObjectMap0.forEachKey((TByteProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 16
  /*
   * 5 covered goals:
   * 1 Weak Mutation 59: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 2 Weak Mutation 60: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   * 4 Weak Mutation 59: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteField: mLgnu/trove/map/TByteObjectMap;
   * 5 Weak Mutation 60: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z
   */

  @Test
  public void test16()  throws Throwable  {
      TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>(1482707);
      TUnmodifiableByteObjectMap<Integer> tUnmodifiableByteObjectMap0 = new TUnmodifiableByteObjectMap<Integer>((TByteObjectMap<Integer>) tByteObjectHashMap0);
      Object[] objectArray0 = new Object[5];
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(objectArray0);
      boolean boolean0 = tUnmodifiableByteObjectMap0.forEachValue((TObjectProcedure<? super Integer>) toObjectArrayProceedure0);
      assertEquals(true, boolean0);
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.<init>(Lgnu/trove/map/TByteObjectMap;)V: I17 Branch 1 IFNONNULL L53 - false
   * 2 Weak Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap.<init>(Lgnu/trove/map/TByteObjectMap;)V:53 - ReplaceComparisonOperator != null -> = null
   */

  @Test
  public void test17()  throws Throwable  {
      TUnmodifiableByteObjectMap<Integer> tUnmodifiableByteObjectMap0 = null;
      try {
        tUnmodifiableByteObjectMap0 = new TUnmodifiableByteObjectMap<Integer>((TByteObjectMap<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
