/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TFloatFunction;
import gnu.trove.impl.sync.TSynchronizedFloatCollection;
import gnu.trove.impl.sync.TSynchronizedShortFloatMap;
import gnu.trove.impl.sync.TSynchronizedShortSet;
import gnu.trove.iterator.TShortFloatIterator;
import gnu.trove.map.TShortFloatMap;
import gnu.trove.map.hash.TShortFloatHashMap;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.procedure.TShortFloatProcedure;
import gnu.trove.procedure.TShortProcedure;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedShortFloatMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.put(SF)F: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedShortFloatMap.<init>(Lgnu/trove/map/TShortFloatMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((int) (short)20);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      tSynchronizedShortFloatMap0.put((short)20, (short)20);
      assertEquals(false, tShortFloatHashMap0.isEmpty());
      assertEquals("{20=20.0}", tShortFloatHashMap0.toString());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.get(S)F: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedShortFloatMap.<init>(Lgnu/trove/map/TShortFloatMap;Ljava/lang/Object;)V: root-Branch
   */

//   @Test
//   public void test1()  throws Throwable  {
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((int) (short) (-687), (float) (short)0, (short) (-687), (float) (short) (-687));
//       TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0, (Object) "-687");
//       float float0 = tSynchronizedShortFloatMap0.get((short)0);
//       assertEquals((-687.0F), float0, 0.01F);
//   }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.iterator()Lgnu/trove/iterator/TShortFloatIterator;: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((int) (short) (-687), (float) (short)0, (short) (-687), (float) (short) (-687));
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0, (Object) "-687");
      TShortFloatIterator tShortFloatIterator0 = tSynchronizedShortFloatMap0.iterator();
      assertEquals(false, tShortFloatIterator0.hasNext());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.forEachEntry(Lgnu/trove/procedure/TShortFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      Float float0 = new Float((double) (-1));
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0, (Object) float0);
      boolean boolean0 = tSynchronizedShortFloatMap0.forEachEntry((TShortFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.containsKey(S)Z: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(11229331);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      boolean boolean0 = tSynchronizedShortFloatMap0.containsKey((short)0);
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.increment(S)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(11229331);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      boolean boolean0 = tSynchronizedShortFloatMap0.increment((short)0);
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.values()[F: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      float[] floatArray0 = tSynchronizedShortFloatMap0.values();
      assertNotNull(floatArray0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.putAll(Lgnu/trove/map/TShortFloatMap;)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((-1712));
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0, (Object) "eng");
      tSynchronizedShortFloatMap0.putAll((TShortFloatMap) tShortFloatHashMap0);
      assertEquals(true, tSynchronizedShortFloatMap0.isEmpty());
  }

  //Test case number: 8
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.equals(Ljava/lang/Object;)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedShortFloatMap.size()I: root-Branch
   * 3 gnu.trove.impl.sync.TSynchronizedShortFloatMap.getNoEntryValue()F: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(32751);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      boolean boolean0 = tSynchronizedShortFloatMap0.equals((Object) tSynchronizedShortFloatMap0);
      assertEquals(true, boolean0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.clear()V: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(982, 982);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0, (Object) "zh");
      tSynchronizedShortFloatMap0.clear();
      assertEquals(0, tSynchronizedShortFloatMap0.size());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.hashCode()I: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((-1712));
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0, (Object) "eng");
      int int0 = tSynchronizedShortFloatMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.adjustValue(SF)Z: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((int) (short) (-687), (float) (short)0, (short) (-687), (float) (short) (-687));
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0, (Object) "-687");
      boolean boolean0 = tSynchronizedShortFloatMap0.adjustValue((short)0, (short)0);
      assertEquals(false, boolean0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.keys([S)[S: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(982, 982);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0, (Object) "zh");
      short[] shortArray0 = tSynchronizedShortFloatMap0.keys(tShortFloatHashMap0._set);
      assertNotNull(shortArray0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.getNoEntryKey()S: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((-1712));
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0, (Object) "eng");
      short short0 = tSynchronizedShortFloatMap0.getNoEntryKey();
      assertEquals((short)0, short0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.keys()[S: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      short[] shortArray0 = tSynchronizedShortFloatMap0.keys();
      assertNotNull(shortArray0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.values([F)[F: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(982, 982);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0, (Object) "zh");
      float[] floatArray0 = new float[2];
      float[] floatArray1 = tSynchronizedShortFloatMap0.values(floatArray0);
      assertSame(floatArray1, floatArray0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.retainEntries(Lgnu/trove/procedure/TShortFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      Float float0 = new Float((double) (-1));
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0, (Object) float0);
      boolean boolean0 = tSynchronizedShortFloatMap0.retainEntries((TShortFloatProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.containsValue(F)Z: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(982, 982);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0, (Object) "zh");
      boolean boolean0 = tSynchronizedShortFloatMap0.containsValue((float) 982);
      assertEquals(false, boolean0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.remove(S)F: root-Branch
   */

//   @Test
//   public void test18()  throws Throwable  {
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(982, 982);
//       TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0, (Object) "zh");
//       float float0 = tSynchronizedShortFloatMap0.remove((short)19);
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      Float float0 = new Float((double) (-1));
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0, (Object) float0);
      boolean boolean0 = tSynchronizedShortFloatMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      boolean boolean0 = tSynchronizedShortFloatMap0.forEachValue((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.putIfAbsent(SF)F: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((int) (short)20);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      tSynchronizedShortFloatMap0.putIfAbsent((short)20, (short)20);
      assertEquals(1, tShortFloatHashMap0.size());
      assertEquals(false, tSynchronizedShortFloatMap0.isEmpty());
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) null, (Object) "");
      // Undeclared exception!
      try {
        tSynchronizedShortFloatMap0.putAll((Map<? extends Short, ? extends Float>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.forEachKey(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      Float float0 = new Float((double) (-1));
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0, (Object) float0);
      boolean boolean0 = tSynchronizedShortFloatMap0.forEachKey((TShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(0);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      String string0 = tSynchronizedShortFloatMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.adjustOrPutValue(SFF)F: root-Branch
   */

//   @Test
//   public void test25()  throws Throwable  {
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(0);
//       TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
//       float float0 = tSynchronizedShortFloatMap0.adjustOrPutValue((short)148, (float) (short)148, (float) 0);
//       assertEquals(1, tShortFloatHashMap0.size());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(0);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      tSynchronizedShortFloatMap0.transformValues((TFloatFunction) null);
      assertEquals(true, tSynchronizedShortFloatMap0.isEmpty());
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.<init>(Lgnu/trove/map/TShortFloatMap;)V: I17 Branch 1 IFNONNULL L59 - false
   */

  @Test
  public void test27()  throws Throwable  {
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = null;
      try {
        tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.keySet()Lgnu/trove/set/TShortSet;: I11 Branch 2 IFNONNULL L107 - true
   * 2 gnu.trove.impl.sync.TSynchronizedShortFloatMap.keySet()Lgnu/trove/set/TShortSet;: I11 Branch 2 IFNONNULL L107 - false
   * 3 gnu.trove.impl.sync.TSynchronizedShortFloatMap.<init>(Lgnu/trove/map/TShortFloatMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test28()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((int) (short) (-687), (float) (short)0, (short) (-687), (float) (short) (-687));
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0, (Object) "-687");
      TSynchronizedShortSet tSynchronizedShortSet0 = (TSynchronizedShortSet)tSynchronizedShortFloatMap0.keySet();
      assertNotNull(tSynchronizedShortSet0);
      
      TSynchronizedShortSet tSynchronizedShortSet1 = (TSynchronizedShortSet)tSynchronizedShortFloatMap0.keySet();
      assertSame(tSynchronizedShortSet1, tSynchronizedShortSet0);
  }

  //Test case number: 29
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortFloatMap.valueCollection()Lgnu/trove/TFloatCollection;: I11 Branch 3 IFNONNULL L121 - true
   * 2 gnu.trove.impl.sync.TSynchronizedShortFloatMap.valueCollection()Lgnu/trove/TFloatCollection;: I11 Branch 3 IFNONNULL L121 - false
   * 3 gnu.trove.impl.sync.TSynchronizedShortFloatMap.<init>(Lgnu/trove/map/TShortFloatMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test29()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(11229331);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      TSynchronizedFloatCollection tSynchronizedFloatCollection0 = (TSynchronizedFloatCollection)tSynchronizedShortFloatMap0.valueCollection();
      assertNotNull(tSynchronizedFloatCollection0);
      
      TSynchronizedFloatCollection tSynchronizedFloatCollection1 = (TSynchronizedFloatCollection)tSynchronizedShortFloatMap0.valueCollection();
      assertSame(tSynchronizedFloatCollection1, tSynchronizedFloatCollection0);
  }
}
