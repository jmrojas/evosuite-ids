/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TFloatFunction;
import gnu.trove.impl.sync.TSynchronizedDoubleFloatMap;
import gnu.trove.impl.sync.TSynchronizedDoubleSet;
import gnu.trove.impl.sync.TSynchronizedFloatCollection;
import gnu.trove.iterator.TDoubleFloatIterator;
import gnu.trove.map.TDoubleFloatMap;
import gnu.trove.map.hash.TDoubleFloatHashMap;
import gnu.trove.procedure.TDoubleFloatProcedure;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.procedure.TFloatProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedDoubleFloatMapEvoSuite_WeakMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 9 covered goals:
   * 1 Weak Mutation 2: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.size()I:71 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 3: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.size()I:71 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 3 Weak Mutation 4: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.size()I:71 - DeleteStatement: size()I
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.size()I: root-Branch
   * 5 Weak Mutation 0: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.<init>(Lgnu/trove/map/TDoubleFloatMap;)V:59 - ReplaceComparisonOperator != null -> = null
   * 6 Weak Mutation 2: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.size()I:71 - DeleteField: mutexLjava/lang/Object;
   * 7 Weak Mutation 3: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.size()I:71 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 8 Weak Mutation 4: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.size()I:71 - DeleteStatement: size()I
   * 9 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.<init>(Lgnu/trove/map/TDoubleFloatMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(486, 486);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      int int0 = tSynchronizedDoubleFloatMap0.size();
      assertEquals(0, int0);
  }

  //Test case number: 1
  /*
   * 7 covered goals:
   * 1 Weak Mutation 5: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.isEmpty()Z:74 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 6: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.isEmpty()Z:74 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 3 Weak Mutation 7: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.isEmpty()Z:74 - DeleteStatement: isEmpty()Z
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.isEmpty()Z: root-Branch
   * 5 Weak Mutation 5: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.isEmpty()Z:74 - DeleteField: mutexLjava/lang/Object;
   * 6 Weak Mutation 6: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.isEmpty()Z:74 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 7 Weak Mutation 7: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.isEmpty()Z:74 - DeleteStatement: isEmpty()Z
   */

  @Test
  public void test1()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1480));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 9 covered goals:
   * 1 Weak Mutation 8: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsKey(D)Z:77 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 9: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsKey(D)Z:77 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 3 Weak Mutation 10: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsKey(D)Z:77 - InsertUnaryOp Negation of key
   * 4 Weak Mutation 11: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsKey(D)Z:77 - DeleteStatement: containsKey(D)Z
   * 5 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsKey(D)Z: root-Branch
   * 6 Weak Mutation 8: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsKey(D)Z:77 - DeleteField: mutexLjava/lang/Object;
   * 7 Weak Mutation 9: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsKey(D)Z:77 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 8 Weak Mutation 10: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsKey(D)Z:77 - InsertUnaryOp Negation of key
   * 9 Weak Mutation 11: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsKey(D)Z:77 - DeleteStatement: containsKey(D)Z
   */

  @Test
  public void test2()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-578));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.containsKey((double) 0.0F);
      assertEquals(false, boolean0);
  }

  //Test case number: 3
  /*
   * 9 covered goals:
   * 1 Weak Mutation 12: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsValue(F)Z:80 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 13: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsValue(F)Z:80 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 3 Weak Mutation 14: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsValue(F)Z:80 - InsertUnaryOp Negation of value
   * 4 Weak Mutation 15: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsValue(F)Z:80 - DeleteStatement: containsValue(F)Z
   * 5 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsValue(F)Z: root-Branch
   * 6 Weak Mutation 12: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsValue(F)Z:80 - DeleteField: mutexLjava/lang/Object;
   * 7 Weak Mutation 13: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsValue(F)Z:80 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 8 Weak Mutation 14: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsValue(F)Z:80 - InsertUnaryOp Negation of value
   * 9 Weak Mutation 15: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsValue(F)Z:80 - DeleteStatement: containsValue(F)Z
   */

  @Test
  public void test3()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1480));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.containsValue((float) (-1480));
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 9 covered goals:
   * 1 Weak Mutation 17: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.get(D)F:83 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 2 Weak Mutation 16: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.get(D)F:83 - DeleteField: mutexLjava/lang/Object;
   * 3 Weak Mutation 19: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.get(D)F:83 - DeleteStatement: get(D)F
   * 4 Weak Mutation 18: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.get(D)F:83 - InsertUnaryOp Negation of key
   * 5 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.get(D)F: root-Branch
   * 6 Weak Mutation 17: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.get(D)F:83 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 7 Weak Mutation 16: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.get(D)F:83 - DeleteField: mutexLjava/lang/Object;
   * 8 Weak Mutation 19: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.get(D)F:83 - DeleteStatement: get(D)F
   * 9 Weak Mutation 18: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.get(D)F:83 - InsertUnaryOp Negation of key
   */

//   @Test
//   public void test4()  throws Throwable  {
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-578));
//       TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
//       float float0 = tSynchronizedDoubleFloatMap0.get((double) (-578));
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 5
  /*
   * 11 covered goals:
   * 1 Weak Mutation 21: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.put(DF)F:87 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 2 Weak Mutation 20: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.put(DF)F:87 - DeleteField: mutexLjava/lang/Object;
   * 3 Weak Mutation 23: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.put(DF)F:87 - InsertUnaryOp Negation of value
   * 4 Weak Mutation 22: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.put(DF)F:87 - InsertUnaryOp Negation of key
   * 5 Weak Mutation 24: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.put(DF)F:87 - DeleteStatement: put(DF)F
   * 6 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.put(DF)F: root-Branch
   * 7 Weak Mutation 21: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.put(DF)F:87 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 8 Weak Mutation 20: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.put(DF)F:87 - DeleteField: mutexLjava/lang/Object;
   * 9 Weak Mutation 23: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.put(DF)F:87 - InsertUnaryOp Negation of value
   * 10 Weak Mutation 22: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.put(DF)F:87 - InsertUnaryOp Negation of key
   * 11 Weak Mutation 24: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.put(DF)F:87 - DeleteStatement: put(DF)F
   */

  @Test
  public void test5()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(486, 486);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      tSynchronizedDoubleFloatMap0.put((double) 486, (float) 486);
      assertEquals(1, tDoubleFloatHashMap0.size());
      assertEquals("{486.0=486.0}", tDoubleFloatHashMap0.toString());
  }

  //Test case number: 6
  /*
   * 9 covered goals:
   * 1 Weak Mutation 25: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.remove(D)F:90 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 27: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.remove(D)F:90 - InsertUnaryOp Negation of key
   * 3 Weak Mutation 26: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.remove(D)F:90 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 4 Weak Mutation 28: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.remove(D)F:90 - DeleteStatement: remove(D)F
   * 5 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.remove(D)F: root-Branch
   * 6 Weak Mutation 25: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.remove(D)F:90 - DeleteField: mutexLjava/lang/Object;
   * 7 Weak Mutation 27: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.remove(D)F:90 - InsertUnaryOp Negation of key
   * 8 Weak Mutation 26: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.remove(D)F:90 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 9 Weak Mutation 28: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.remove(D)F:90 - DeleteStatement: remove(D)F
   */

//   @Test
//   public void test6()  throws Throwable  {
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
//       TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
//       float float0 = tSynchronizedDoubleFloatMap0.remove((double) 489);
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 7
  /*
   * 7 covered goals:
   * 1 Weak Mutation 29: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putAll(Ljava/util/Map;)V:93 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 31: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putAll(Ljava/util/Map;)V:93 - DeleteStatement: putAll(Ljava/util/Map;)V
   * 3 Weak Mutation 30: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putAll(Ljava/util/Map;)V:93 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putAll(Ljava/util/Map;)V: root-Branch
   * 5 Weak Mutation 29: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putAll(Ljava/util/Map;)V:93 - DeleteField: mutexLjava/lang/Object;
   * 6 Weak Mutation 31: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putAll(Ljava/util/Map;)V:93 - DeleteStatement: putAll(Ljava/util/Map;)V
   * 7 Weak Mutation 30: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putAll(Ljava/util/Map;)V:93 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   */

  @Test
  public void test7()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1480));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      tSynchronizedDoubleFloatMap0.putAll((Map<? extends Double, ? extends Float>) hashMap0);
      assertEquals("{}", hashMap0.toString());
  }

  //Test case number: 8
  /*
   * 7 covered goals:
   * 1 Weak Mutation 34: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putAll(Lgnu/trove/map/TDoubleFloatMap;)V:96 - DeleteStatement: putAll(Lgnu/trove/map/TDoubleFloatMap;)V
   * 2 Weak Mutation 32: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putAll(Lgnu/trove/map/TDoubleFloatMap;)V:96 - DeleteField: mutexLjava/lang/Object;
   * 3 Weak Mutation 33: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putAll(Lgnu/trove/map/TDoubleFloatMap;)V:96 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putAll(Lgnu/trove/map/TDoubleFloatMap;)V: root-Branch
   * 5 Weak Mutation 34: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putAll(Lgnu/trove/map/TDoubleFloatMap;)V:96 - DeleteStatement: putAll(Lgnu/trove/map/TDoubleFloatMap;)V
   * 6 Weak Mutation 32: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putAll(Lgnu/trove/map/TDoubleFloatMap;)V:96 - DeleteField: mutexLjava/lang/Object;
   * 7 Weak Mutation 33: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putAll(Lgnu/trove/map/TDoubleFloatMap;)V:96 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   */

  @Test
  public void test8()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1480));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      tSynchronizedDoubleFloatMap0.putAll((TDoubleFloatMap) tDoubleFloatHashMap0);
      assertEquals(true, tDoubleFloatHashMap0.isEmpty());
  }

  //Test case number: 9
  /*
   * 7 covered goals:
   * 1 Weak Mutation 35: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.clear()V:99 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 36: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.clear()V:99 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 3 Weak Mutation 37: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.clear()V:99 - DeleteStatement: clear()V
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.clear()V: root-Branch
   * 5 Weak Mutation 35: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.clear()V:99 - DeleteField: mutexLjava/lang/Object;
   * 6 Weak Mutation 36: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.clear()V:99 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 7 Weak Mutation 37: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.clear()V:99 - DeleteStatement: clear()V
   */

//   @Test
//   public void test9()  throws Throwable  {
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-578));
//       TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
//       tSynchronizedDoubleFloatMap0.clear();
//       assertEquals(0.0F, tSynchronizedDoubleFloatMap0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 10
  /*
   * 18 covered goals:
   * 1 Weak Mutation 39: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;:107 - DeleteField: keySetLgnu/trove/set/TDoubleSet;
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;: I11 Branch 2 IFNONNULL L107 - true
   * 3 Weak Mutation 38: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;:106 - DeleteField: mutexLjava/lang/Object;
   * 4 Weak Mutation 42: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;:108 - DeleteStatement: keySet()Lgnu/trove/set/TDoubleSet;
   * 5 Weak Mutation 43: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;:108 - DeleteField: mutexLjava/lang/Object;
   * 6 Weak Mutation 40: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;:107 - ReplaceComparisonOperator != null -> = null
   * 7 Weak Mutation 41: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;:108 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 8 Weak Mutation 44: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;:109 - DeleteField: keySetLgnu/trove/set/TDoubleSet;
   * 9 Weak Mutation 1: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.<init>(Lgnu/trove/map/TDoubleFloatMap;Ljava/lang/Object;)V:67 - ReplaceVariable mutex -> mutex
   * 10 Weak Mutation 38: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;:106 - DeleteField: mutexLjava/lang/Object;
   * 11 Weak Mutation 39: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;:107 - DeleteField: keySetLgnu/trove/set/TDoubleSet;
   * 12 Weak Mutation 42: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;:108 - DeleteStatement: keySet()Lgnu/trove/set/TDoubleSet;
   * 13 Weak Mutation 43: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;:108 - DeleteField: mutexLjava/lang/Object;
   * 14 Weak Mutation 40: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;:107 - ReplaceComparisonOperator != null -> = null
   * 15 Weak Mutation 41: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;:108 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 16 Weak Mutation 44: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;:109 - DeleteField: keySetLgnu/trove/set/TDoubleSet;
   * 17 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.<init>(Lgnu/trove/map/TDoubleFloatMap;Ljava/lang/Object;)V: root-Branch
   * 18 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;: I11 Branch 2 IFNONNULL L107 - false
   */

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      float[] floatArray0 = new float[10];
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0, (Object) "0.0");
      TSynchronizedDoubleSet tSynchronizedDoubleSet0 = (TSynchronizedDoubleSet)tSynchronizedDoubleFloatMap0.keySet();
      assertNotNull(tSynchronizedDoubleSet0);
      
      TSynchronizedDoubleSet tSynchronizedDoubleSet1 = (TSynchronizedDoubleSet)tSynchronizedDoubleFloatMap0.keySet();
      assertSame(tSynchronizedDoubleSet1, tSynchronizedDoubleSet0);
  }

  //Test case number: 11
  /*
   * 7 covered goals:
   * 1 Weak Mutation 46: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys()[D:113 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 2 Weak Mutation 47: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys()[D:113 - DeleteStatement: keys()[D
   * 3 Weak Mutation 45: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys()[D:113 - DeleteField: mutexLjava/lang/Object;
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys()[D: root-Branch
   * 5 Weak Mutation 46: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys()[D:113 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 6 Weak Mutation 47: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys()[D:113 - DeleteStatement: keys()[D
   * 7 Weak Mutation 45: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys()[D:113 - DeleteField: mutexLjava/lang/Object;
   */

  @Test
  public void test11()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-578));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      double[] doubleArray0 = tSynchronizedDoubleFloatMap0.keys();
      assertNotNull(doubleArray0);
  }

  //Test case number: 12
  /*
   * 7 covered goals:
   * 1 Weak Mutation 50: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys([D)[D:116 - DeleteStatement: keys([D)[D
   * 2 Weak Mutation 49: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys([D)[D:116 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 3 Weak Mutation 48: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys([D)[D:116 - DeleteField: mutexLjava/lang/Object;
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys([D)[D: root-Branch
   * 5 Weak Mutation 50: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys([D)[D:116 - DeleteStatement: keys([D)[D
   * 6 Weak Mutation 49: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys([D)[D:116 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 7 Weak Mutation 48: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys([D)[D:116 - DeleteField: mutexLjava/lang/Object;
   */

  @Test
  public void test12()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(486, 486);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      double[] doubleArray0 = tSynchronizedDoubleFloatMap0.keys(tDoubleFloatHashMap0._set);
      assertNotNull(doubleArray0);
  }

  //Test case number: 13
  /*
   * 16 covered goals:
   * 1 Weak Mutation 52: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:121 - DeleteField: valuesLgnu/trove/TFloatCollection;
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;: I11 Branch 3 IFNONNULL L121 - true
   * 3 Weak Mutation 51: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:120 - DeleteField: mutexLjava/lang/Object;
   * 4 Weak Mutation 55: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:122 - DeleteStatement: valueCollection()Lgnu/trove/TFloatCollection;
   * 5 Weak Mutation 54: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:122 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 6 Weak Mutation 53: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:121 - ReplaceComparisonOperator != null -> = null
   * 7 Weak Mutation 57: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:123 - DeleteField: valuesLgnu/trove/TFloatCollection;
   * 8 Weak Mutation 56: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:122 - DeleteField: mutexLjava/lang/Object;
   * 9 Weak Mutation 51: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:120 - DeleteField: mutexLjava/lang/Object;
   * 10 Weak Mutation 55: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:122 - DeleteStatement: valueCollection()Lgnu/trove/TFloatCollection;
   * 11 Weak Mutation 54: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:122 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 12 Weak Mutation 53: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:121 - ReplaceComparisonOperator != null -> = null
   * 13 Weak Mutation 52: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:121 - DeleteField: valuesLgnu/trove/TFloatCollection;
   * 14 Weak Mutation 57: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:123 - DeleteField: valuesLgnu/trove/TFloatCollection;
   * 15 Weak Mutation 56: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;:122 - DeleteField: mutexLjava/lang/Object;
   * 16 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;: I11 Branch 3 IFNONNULL L121 - false
   */

  @Test
  public void test13()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-578));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      TSynchronizedFloatCollection tSynchronizedFloatCollection0 = (TSynchronizedFloatCollection)tSynchronizedDoubleFloatMap0.valueCollection();
      assertNotNull(tSynchronizedFloatCollection0);
      
      TSynchronizedFloatCollection tSynchronizedFloatCollection1 = (TSynchronizedFloatCollection)tSynchronizedDoubleFloatMap0.valueCollection();
      assertSame(tSynchronizedFloatCollection1, tSynchronizedFloatCollection0);
  }

  //Test case number: 14
  /*
   * 7 covered goals:
   * 1 Weak Mutation 59: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values()[F:127 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 2 Weak Mutation 58: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values()[F:127 - DeleteField: mutexLjava/lang/Object;
   * 3 Weak Mutation 60: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values()[F:127 - DeleteStatement: values()[F
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values()[F: root-Branch
   * 5 Weak Mutation 59: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values()[F:127 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 6 Weak Mutation 58: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values()[F:127 - DeleteField: mutexLjava/lang/Object;
   * 7 Weak Mutation 60: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values()[F:127 - DeleteStatement: values()[F
   */

  @Test
  public void test14()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-578));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      float[] floatArray0 = tSynchronizedDoubleFloatMap0.values();
      assertNotNull(floatArray0);
  }

  //Test case number: 15
  /*
   * 7 covered goals:
   * 1 Weak Mutation 63: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values([F)[F:130 - DeleteStatement: values([F)[F
   * 2 Weak Mutation 62: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values([F)[F:130 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 3 Weak Mutation 61: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values([F)[F:130 - DeleteField: mutexLjava/lang/Object;
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values([F)[F: root-Branch
   * 5 Weak Mutation 63: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values([F)[F:130 - DeleteStatement: values([F)[F
   * 6 Weak Mutation 62: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values([F)[F:130 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 7 Weak Mutation 61: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values([F)[F:130 - DeleteField: mutexLjava/lang/Object;
   */

  @Test
  public void test15()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-578));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      float[] floatArray0 = new float[27];
      float[] floatArray1 = tSynchronizedDoubleFloatMap0.values(floatArray0);
      assertSame(floatArray0, floatArray1);
  }

  //Test case number: 16
  /*
   * 5 covered goals:
   * 1 Weak Mutation 64: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.iterator()Lgnu/trove/iterator/TDoubleFloatIterator;:134 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 2 Weak Mutation 65: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.iterator()Lgnu/trove/iterator/TDoubleFloatIterator;:134 - DeleteStatement: iterator()Lgnu/trove/iterator/TDoubleFloatIterator;
   * 3 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.iterator()Lgnu/trove/iterator/TDoubleFloatIterator;: root-Branch
   * 4 Weak Mutation 64: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.iterator()Lgnu/trove/iterator/TDoubleFloatIterator;:134 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 5 Weak Mutation 65: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.iterator()Lgnu/trove/iterator/TDoubleFloatIterator;:134 - DeleteStatement: iterator()Lgnu/trove/iterator/TDoubleFloatIterator;
   */

  @Test
  public void test16()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(486, 486);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      TDoubleFloatIterator tDoubleFloatIterator0 = tSynchronizedDoubleFloatMap0.iterator();
      assertEquals(false, tDoubleFloatIterator0.hasNext());
  }

  //Test case number: 17
  /*
   * 5 covered goals:
   * 1 Weak Mutation 66: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.getNoEntryKey()D:138 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 2 Weak Mutation 67: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.getNoEntryKey()D:138 - DeleteStatement: getNoEntryKey()D
   * 3 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.getNoEntryKey()D: root-Branch
   * 4 Weak Mutation 66: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.getNoEntryKey()D:138 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 5 Weak Mutation 67: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.getNoEntryKey()D:138 - DeleteStatement: getNoEntryKey()D
   */

  @Test
  public void test17()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-578));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      double double0 = tSynchronizedDoubleFloatMap0.getNoEntryKey();
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 18
  /*
   * 6 covered goals:
   * 1 Weak Mutation 68: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.getNoEntryValue()F:139 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 2 Weak Mutation 69: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.getNoEntryValue()F:139 - DeleteStatement: getNoEntryValue()F
   * 3 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.getNoEntryValue()F: root-Branch
   * 4 Weak Mutation 1: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.<init>(Lgnu/trove/map/TDoubleFloatMap;Ljava/lang/Object;)V:67 - ReplaceVariable mutex -> mutex
   * 5 Weak Mutation 68: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.getNoEntryValue()F:139 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 6 Weak Mutation 69: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.getNoEntryValue()F:139 - DeleteStatement: getNoEntryValue()F
   */

//   @Test
//   public void test18()  throws Throwable  {
//       double[] doubleArray0 = new double[7];
//       float[] floatArray0 = new float[10];
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
//       TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0, (Object) "0.0");
//       float float0 = tSynchronizedDoubleFloatMap0.getNoEntryValue();
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 19
  /*
   * 11 covered goals:
   * 1 Weak Mutation 70: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putIfAbsent(DF)F:142 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 71: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putIfAbsent(DF)F:142 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 3 Weak Mutation 72: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putIfAbsent(DF)F:142 - InsertUnaryOp Negation of key
   * 4 Weak Mutation 73: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putIfAbsent(DF)F:142 - InsertUnaryOp Negation of value
   * 5 Weak Mutation 74: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putIfAbsent(DF)F:142 - DeleteStatement: putIfAbsent(DF)F
   * 6 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putIfAbsent(DF)F: root-Branch
   * 7 Weak Mutation 70: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putIfAbsent(DF)F:142 - DeleteField: mutexLjava/lang/Object;
   * 8 Weak Mutation 71: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putIfAbsent(DF)F:142 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 9 Weak Mutation 72: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putIfAbsent(DF)F:142 - InsertUnaryOp Negation of key
   * 10 Weak Mutation 73: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putIfAbsent(DF)F:142 - InsertUnaryOp Negation of value
   * 11 Weak Mutation 74: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putIfAbsent(DF)F:142 - DeleteStatement: putIfAbsent(DF)F
   */

  @Test
  public void test19()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-578));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      tSynchronizedDoubleFloatMap0.putIfAbsent((double) 0.0F, (float) 0);
      assertEquals("{0.0=0.0}", tDoubleFloatHashMap0.toString());
      assertEquals(false, tDoubleFloatHashMap0.isEmpty());
  }

  //Test case number: 20
  /*
   * 7 covered goals:
   * 1 Weak Mutation 76: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z:145 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 2 Weak Mutation 77: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z:145 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z
   * 3 Weak Mutation 75: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z:145 - DeleteField: mutexLjava/lang/Object;
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   * 5 Weak Mutation 76: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z:145 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 6 Weak Mutation 77: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z:145 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z
   * 7 Weak Mutation 75: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z:145 - DeleteField: mutexLjava/lang/Object;
   */

  @Test
  public void test20()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.forEachKey((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 21
  /*
   * 7 covered goals:
   * 1 Weak Mutation 78: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z:148 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 79: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z:148 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 3 Weak Mutation 80: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z:148 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   * 5 Weak Mutation 78: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z:148 - DeleteField: mutexLjava/lang/Object;
   * 6 Weak Mutation 79: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z:148 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 7 Weak Mutation 80: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z:148 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z
   */

  @Test
  public void test21()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-578));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.forEachValue((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 7 covered goals:
   * 1 Weak Mutation 81: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachEntry(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z:151 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 83: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachEntry(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z:151 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z
   * 3 Weak Mutation 82: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachEntry(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z:151 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachEntry(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z: root-Branch
   * 5 Weak Mutation 81: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachEntry(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z:151 - DeleteField: mutexLjava/lang/Object;
   * 6 Weak Mutation 83: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachEntry(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z:151 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z
   * 7 Weak Mutation 82: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachEntry(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z:151 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   */

  @Test
  public void test22()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.forEachEntry((TDoubleFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 23
  /*
   * 7 covered goals:
   * 1 Weak Mutation 85: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.transformValues(Lgnu/trove/function/TFloatFunction;)V:154 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 2 Weak Mutation 84: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.transformValues(Lgnu/trove/function/TFloatFunction;)V:154 - DeleteField: mutexLjava/lang/Object;
   * 3 Weak Mutation 86: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.transformValues(Lgnu/trove/function/TFloatFunction;)V:154 - DeleteStatement: transformValues(Lgnu/trove/function/TFloatFunction;)V
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: root-Branch
   * 5 Weak Mutation 85: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.transformValues(Lgnu/trove/function/TFloatFunction;)V:154 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 6 Weak Mutation 84: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.transformValues(Lgnu/trove/function/TFloatFunction;)V:154 - DeleteField: mutexLjava/lang/Object;
   * 7 Weak Mutation 86: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.transformValues(Lgnu/trove/function/TFloatFunction;)V:154 - DeleteStatement: transformValues(Lgnu/trove/function/TFloatFunction;)V
   */

  @Test
  public void test23()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-578));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      tSynchronizedDoubleFloatMap0.transformValues((TFloatFunction) null);
      assertEquals(0, tSynchronizedDoubleFloatMap0.size());
  }

  //Test case number: 24
  /*
   * 7 covered goals:
   * 1 Weak Mutation 87: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.retainEntries(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z:157 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 89: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.retainEntries(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z:157 - DeleteStatement: retainEntries(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z
   * 3 Weak Mutation 88: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.retainEntries(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z:157 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.retainEntries(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z: root-Branch
   * 5 Weak Mutation 87: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.retainEntries(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z:157 - DeleteField: mutexLjava/lang/Object;
   * 6 Weak Mutation 89: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.retainEntries(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z:157 - DeleteStatement: retainEntries(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z
   * 7 Weak Mutation 88: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.retainEntries(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z:157 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   */

  @Test
  public void test24()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(486, 486);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.retainEntries((TDoubleFloatProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 25
  /*
   * 9 covered goals:
   * 1 Weak Mutation 93: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.increment(D)Z:160 - DeleteStatement: increment(D)Z
   * 2 Weak Mutation 92: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.increment(D)Z:160 - InsertUnaryOp Negation of key
   * 3 Weak Mutation 91: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.increment(D)Z:160 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 4 Weak Mutation 90: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.increment(D)Z:160 - DeleteField: mutexLjava/lang/Object;
   * 5 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.increment(D)Z: root-Branch
   * 6 Weak Mutation 93: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.increment(D)Z:160 - DeleteStatement: increment(D)Z
   * 7 Weak Mutation 92: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.increment(D)Z:160 - InsertUnaryOp Negation of key
   * 8 Weak Mutation 91: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.increment(D)Z:160 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 9 Weak Mutation 90: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.increment(D)Z:160 - DeleteField: mutexLjava/lang/Object;
   */

  @Test
  public void test25()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-578));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.increment((double) (-578));
      assertEquals(false, boolean0);
  }

  //Test case number: 26
  /*
   * 11 covered goals:
   * 1 Weak Mutation 95: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustValue(DF)Z:163 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 2 Weak Mutation 94: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustValue(DF)Z:163 - DeleteField: mutexLjava/lang/Object;
   * 3 Weak Mutation 98: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustValue(DF)Z:163 - DeleteStatement: adjustValue(DF)Z
   * 4 Weak Mutation 96: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustValue(DF)Z:163 - InsertUnaryOp Negation of key
   * 5 Weak Mutation 97: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustValue(DF)Z:163 - InsertUnaryOp Negation of amount
   * 6 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustValue(DF)Z: root-Branch
   * 7 Weak Mutation 95: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustValue(DF)Z:163 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 8 Weak Mutation 94: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustValue(DF)Z:163 - DeleteField: mutexLjava/lang/Object;
   * 9 Weak Mutation 98: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustValue(DF)Z:163 - DeleteStatement: adjustValue(DF)Z
   * 10 Weak Mutation 96: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustValue(DF)Z:163 - InsertUnaryOp Negation of key
   * 11 Weak Mutation 97: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustValue(DF)Z:163 - InsertUnaryOp Negation of amount
   */

  @Test
  public void test26()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.adjustValue((double) 489, (float) 489);
      assertEquals(false, boolean0);
  }

  //Test case number: 27
  /*
   * 17 covered goals:
   * 1 Weak Mutation 102: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - ReplaceVariable adjust_amount -> put_amount
   * 2 Weak Mutation 103: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - InsertUnaryOp Negation of adjust_amount
   * 3 Weak Mutation 100: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 4 Weak Mutation 101: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - InsertUnaryOp Negation of key
   * 5 Weak Mutation 99: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - DeleteField: mutexLjava/lang/Object;
   * 6 Weak Mutation 106: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - DeleteStatement: adjustOrPutValue(DFF)F
   * 7 Weak Mutation 104: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - ReplaceVariable put_amount -> adjust_amount
   * 8 Weak Mutation 105: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - InsertUnaryOp Negation of put_amount
   * 9 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F: root-Branch
   * 10 Weak Mutation 102: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - ReplaceVariable adjust_amount -> put_amount
   * 11 Weak Mutation 103: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - InsertUnaryOp Negation of adjust_amount
   * 12 Weak Mutation 100: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 13 Weak Mutation 101: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - InsertUnaryOp Negation of key
   * 14 Weak Mutation 99: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - DeleteField: mutexLjava/lang/Object;
   * 15 Weak Mutation 106: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - DeleteStatement: adjustOrPutValue(DFF)F
   * 16 Weak Mutation 104: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - ReplaceVariable put_amount -> adjust_amount
   * 17 Weak Mutation 105: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F:166 - InsertUnaryOp Negation of put_amount
   */

//   @Test
//   public void test27()  throws Throwable  {
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-1480));
//       TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
//       float float0 = tSynchronizedDoubleFloatMap0.adjustOrPutValue((double) (-1480), (float) (-1480), 3.4357991F);
//       assertEquals("{-1480.0=3.4357991}", tDoubleFloatHashMap0.toString());
//       assertEquals(3.4357991F, float0, 0.01F);
//   }

  //Test case number: 28
  /*
   * 9 covered goals:
   * 1 Weak Mutation 110: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.equals(Ljava/lang/Object;)Z:170 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 2 Weak Mutation 108: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.equals(Ljava/lang/Object;)Z:170 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 3 Weak Mutation 109: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.equals(Ljava/lang/Object;)Z:170 - ReplaceVariable o -> mutex
   * 4 Weak Mutation 107: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.equals(Ljava/lang/Object;)Z:170 - DeleteField: mutexLjava/lang/Object;
   * 5 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.equals(Ljava/lang/Object;)Z: root-Branch
   * 6 Weak Mutation 110: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.equals(Ljava/lang/Object;)Z:170 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 7 Weak Mutation 108: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.equals(Ljava/lang/Object;)Z:170 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 8 Weak Mutation 109: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.equals(Ljava/lang/Object;)Z:170 - ReplaceVariable o -> mutex
   * 9 Weak Mutation 107: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.equals(Ljava/lang/Object;)Z:170 - DeleteField: mutexLjava/lang/Object;
   */

  @Test
  public void test28()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.equals((Object) ":");
      assertEquals(false, boolean0);
  }

  //Test case number: 29
  /*
   * 7 covered goals:
   * 1 Weak Mutation 111: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.hashCode()I:173 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 113: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.hashCode()I:173 - DeleteStatement: hashCode()I
   * 3 Weak Mutation 112: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.hashCode()I:173 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.hashCode()I: root-Branch
   * 5 Weak Mutation 111: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.hashCode()I:173 - DeleteField: mutexLjava/lang/Object;
   * 6 Weak Mutation 113: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.hashCode()I:173 - DeleteStatement: hashCode()I
   * 7 Weak Mutation 112: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.hashCode()I:173 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   */

  @Test
  public void test29()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap((-578));
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      int int0 = tSynchronizedDoubleFloatMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 30
  /*
   * 7 covered goals:
   * 1 Weak Mutation 116: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.toString()Ljava/lang/String;:176 - DeleteStatement: toString()Ljava/lang/String;
   * 2 Weak Mutation 115: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.toString()Ljava/lang/String;:176 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 3 Weak Mutation 114: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.toString()Ljava/lang/String;:176 - DeleteField: mutexLjava/lang/Object;
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.toString()Ljava/lang/String;: root-Branch
   * 5 Weak Mutation 116: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.toString()Ljava/lang/String;:176 - DeleteStatement: toString()Ljava/lang/String;
   * 6 Weak Mutation 115: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.toString()Ljava/lang/String;:176 - DeleteField: mLgnu/trove/map/TDoubleFloatMap;
   * 7 Weak Mutation 114: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.toString()Ljava/lang/String;:176 - DeleteField: mutexLjava/lang/Object;
   */

  @Test
  public void test30()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      String string0 = tSynchronizedDoubleFloatMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 31
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.<init>(Lgnu/trove/map/TDoubleFloatMap;)V: I17 Branch 1 IFNONNULL L59 - false
   * 2 Weak Mutation 0: gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.<init>(Lgnu/trove/map/TDoubleFloatMap;)V:59 - ReplaceComparisonOperator != null -> = null
   */

  @Test
  public void test31()  throws Throwable  {
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = null;
      try {
        tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
