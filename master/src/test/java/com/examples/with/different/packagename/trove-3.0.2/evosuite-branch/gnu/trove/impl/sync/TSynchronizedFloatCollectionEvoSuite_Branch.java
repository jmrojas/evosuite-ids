/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TFloatCollection;
import gnu.trove.impl.sync.TSynchronizedFloatList;
import gnu.trove.impl.sync.TSynchronizedFloatSet;
import gnu.trove.impl.sync.TSynchronizedRandomAccessFloatList;
import gnu.trove.iterator.TFloatIterator;
import gnu.trove.list.TFloatList;
import gnu.trove.list.array.TFloatArrayList;
import gnu.trove.list.linked.TFloatLinkedList;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.set.TFloatSet;
import gnu.trove.set.hash.TFloatHashSet;
import java.util.Collection;
import java.util.LinkedList;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedFloatCollectionEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCollection.containsAll([F)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatCollection.toArray()[F: root-Branch
   * 3 gnu.trove.impl.sync.TSynchronizedFloatCollection.<init>(Lgnu/trove/TFloatCollection;)V: I7 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList(83.26329F);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatLinkedList0);
      float[] floatArray0 = tSynchronizedRandomAccessFloatList0.toArray();
      boolean boolean0 = tSynchronizedRandomAccessFloatList0.containsAll(floatArray0);
      assertEquals(false, boolean0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCollection.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList(83.26329F);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatLinkedList0);
      String string0 = tSynchronizedRandomAccessFloatList0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCollection.size()I: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(17, 17);
      TSynchronizedFloatList tSynchronizedFloatList0 = new TSynchronizedFloatList((TFloatList) tFloatArrayList0);
      int int0 = tSynchronizedFloatList0.size();
      assertEquals(0, int0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCollection.isEmpty()Z: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(9);
      TSynchronizedFloatSet tSynchronizedFloatSet0 = new TSynchronizedFloatSet((TFloatSet) tFloatHashSet0);
      boolean boolean0 = tSynchronizedFloatSet0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCollection.iterator()Lgnu/trove/iterator/TFloatIterator;: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(17, 17);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0);
      TFloatIterator tFloatIterator0 = tSynchronizedRandomAccessFloatList0.iterator();
      assertEquals(false, tFloatIterator0.hasNext());
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCollection.getNoEntryValue()F: root-Branch
   */

//   @Test
//   public void test5()  throws Throwable  {
//       TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList(83.26329F);
//       TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatLinkedList0);
//       float float0 = tSynchronizedRandomAccessFloatList0.getNoEntryValue();
//       assertEquals(83.26329F, float0, 0.01F);
//   }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCollection.addAll(Lgnu/trove/TFloatCollection;)Z: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(17, 17);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0);
      boolean boolean0 = tSynchronizedRandomAccessFloatList0.addAll((TFloatCollection) tFloatArrayList0);
      assertEquals(false, boolean0);
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCollection.add(F)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatCollection.<init>(Lgnu/trove/TFloatCollection;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(0, 0);
      TSynchronizedFloatSet tSynchronizedFloatSet0 = new TSynchronizedFloatSet((TFloatSet) tFloatHashSet0, (Object) "");
      boolean boolean0 = tSynchronizedFloatSet0.add((float) 0);
      assertEquals(1, tFloatHashSet0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCollection.removeAll(Ljava/util/Collection;)Z: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(0, 0);
      TSynchronizedFloatSet tSynchronizedFloatSet0 = new TSynchronizedFloatSet((TFloatSet) tFloatHashSet0, (Object) "");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = tSynchronizedFloatSet0.removeAll((Collection<?>) linkedList0);
      assertEquals(false, boolean0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCollection.containsAll(Lgnu/trove/TFloatCollection;)Z: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TSynchronizedFloatSet tSynchronizedFloatSet0 = new TSynchronizedFloatSet((TFloatSet) null, (Object) "{}");
      // Undeclared exception!
      try {
        tSynchronizedFloatSet0.containsAll((TFloatCollection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCollection.retainAll(Ljava/util/Collection;)Z: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(17, 17);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      boolean boolean0 = tSynchronizedRandomAccessFloatList0.retainAll((Collection<?>) linkedList0);
      assertEquals(false, boolean0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCollection.removeAll([F)Z: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(0, 0);
      TSynchronizedFloatSet tSynchronizedFloatSet0 = new TSynchronizedFloatSet((TFloatSet) tFloatHashSet0, (Object) "");
      boolean boolean0 = tSynchronizedFloatSet0.removeAll(tFloatHashSet0._set);
      assertEquals(false, boolean0);
  }

  //Test case number: 12
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCollection.contains(F)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatCollection.addAll([F)Z: root-Branch
   * 3 gnu.trove.impl.sync.TSynchronizedFloatCollection.retainAll(Lgnu/trove/TFloatCollection;)Z: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(9);
      TSynchronizedFloatSet tSynchronizedFloatSet0 = new TSynchronizedFloatSet((TFloatSet) tFloatHashSet0);
      tSynchronizedFloatSet0.addAll(tFloatHashSet0._set);
      boolean boolean0 = tSynchronizedFloatSet0.retainAll((TFloatCollection) tSynchronizedFloatSet0);
      assertEquals(false, tFloatHashSet0.isEmpty());
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCollection.removeAll(Lgnu/trove/TFloatCollection;)Z: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TFloatLinkedList tFloatLinkedList0 = new TFloatLinkedList(83.26329F);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatLinkedList0);
      boolean boolean0 = tSynchronizedRandomAccessFloatList0.removeAll((TFloatCollection) tSynchronizedRandomAccessFloatList0);
      assertEquals(false, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCollection.retainAll([F)Z: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(0, 0);
      TSynchronizedFloatSet tSynchronizedFloatSet0 = new TSynchronizedFloatSet((TFloatSet) tFloatHashSet0, (Object) "");
      boolean boolean0 = tSynchronizedFloatSet0.retainAll(tFloatHashSet0._set);
      assertEquals(false, boolean0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCollection.remove(F)Z: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(9);
      TSynchronizedFloatSet tSynchronizedFloatSet0 = new TSynchronizedFloatSet((TFloatSet) tFloatHashSet0);
      boolean boolean0 = tSynchronizedFloatSet0.remove((float) 9);
      assertEquals(false, boolean0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCollection.toArray([F)[F: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(0, 0);
      TSynchronizedFloatSet tSynchronizedFloatSet0 = new TSynchronizedFloatSet((TFloatSet) tFloatHashSet0, (Object) "");
      float[] floatArray0 = tSynchronizedFloatSet0.toArray(tFloatHashSet0._set);
      assertNotNull(floatArray0);
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCollection.clear()V: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatCollection.<init>(Lgnu/trove/TFloatCollection;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TFloatHashSet tFloatHashSet0 = new TFloatHashSet(0, 0);
      TSynchronizedFloatSet tSynchronizedFloatSet0 = new TSynchronizedFloatSet((TFloatSet) tFloatHashSet0, (Object) "");
      tSynchronizedFloatSet0.clear();
      assertEquals(true, tSynchronizedFloatSet0.isEmpty());
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCollection.containsAll(Ljava/util/Collection;)Z: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(17, 17);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = tSynchronizedRandomAccessFloatList0.containsAll((Collection<?>) linkedList0);
      assertEquals(true, boolean0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCollection.forEach(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(17, 17);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0);
      boolean boolean0 = tSynchronizedRandomAccessFloatList0.forEach((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 20
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCollection.addAll(Ljava/util/Collection;)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatCollection.<init>(Lgnu/trove/TFloatCollection;)V: I7 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TFloatArrayList tFloatArrayList0 = new TFloatArrayList(17, 17);
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) tFloatArrayList0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      boolean boolean0 = tSynchronizedRandomAccessFloatList0.addAll((Collection<? extends Float>) linkedList0);
      assertEquals(false, boolean0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCollection.<init>(Lgnu/trove/TFloatCollection;)V: I7 Branch 1 IFNONNULL L59 - false
   */

  @Test
  public void test21()  throws Throwable  {
      TSynchronizedRandomAccessFloatList tSynchronizedRandomAccessFloatList0 = null;
      try {
        tSynchronizedRandomAccessFloatList0 = new TSynchronizedRandomAccessFloatList((TFloatList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
