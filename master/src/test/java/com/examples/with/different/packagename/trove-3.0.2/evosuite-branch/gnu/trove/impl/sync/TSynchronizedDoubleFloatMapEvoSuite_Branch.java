/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TFloatFunction;
import gnu.trove.impl.sync.TSynchronizedDoubleFloatMap;
import gnu.trove.impl.sync.TSynchronizedDoubleSet;
import gnu.trove.impl.sync.TSynchronizedFloatCollection;
import gnu.trove.iterator.TDoubleFloatIterator;
import gnu.trove.map.TDoubleFloatMap;
import gnu.trove.map.hash.TDoubleFloatHashMap;
import gnu.trove.procedure.TDoubleFloatProcedure;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.procedure.TFloatProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedDoubleFloatMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.toString()Ljava/lang/String;: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.<init>(Lgnu/trove/map/TDoubleFloatMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(1, 1, 1, 1);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0, (Object) "1.0");
      String string0 = tSynchronizedDoubleFloatMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 1
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.size()I: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.getNoEntryValue()F: root-Branch
   * 3 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.equals(Ljava/lang/Object;)Z: root-Branch
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.<init>(Lgnu/trove/map/TDoubleFloatMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test1()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.equals((Object) tSynchronizedDoubleFloatMap0);
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putAll(Lgnu/trove/map/TDoubleFloatMap;)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      float[] floatArray0 = new float[7];
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      tSynchronizedDoubleFloatMap0.putAll((TDoubleFloatMap) tDoubleFloatHashMap0);
      assertEquals(0.0, tSynchronizedDoubleFloatMap0.getNoEntryKey(), 0.01D);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values()[F: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      float[] floatArray0 = new float[7];
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      float[] floatArray1 = tSynchronizedDoubleFloatMap0.values();
      assertFalse(floatArray0.equals(floatArray1));
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      float[] floatArray0 = new float[7];
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.isEmpty();
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putIfAbsent(DF)F: root-Branch
   */

//   @Test
//   public void test5()  throws Throwable  {
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(153, 153, 153, 153);
//       TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
//       float float0 = tSynchronizedDoubleFloatMap0.putIfAbsent((double) 153, (float) 153);
//       assertEquals(1, tDoubleFloatHashMap0.size());
//       assertEquals(153.0F, float0, 0.01F);
//   }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.hashCode()I: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(303, 303);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      int int0 = tSynchronizedDoubleFloatMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.transformValues(Lgnu/trove/function/TFloatFunction;)V: root-Branch
   */

//   @Test
//   public void test7()  throws Throwable  {
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
//       TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
//       tSynchronizedDoubleFloatMap0.transformValues((TFloatFunction) null);
//       assertEquals(0.0F, tSynchronizedDoubleFloatMap0.getNoEntryValue(), 0.01F);
//   }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.remove(D)F: root-Branch
   */

//   @Test
//   public void test8()  throws Throwable  {
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(1825);
//       TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
//       float float0 = tSynchronizedDoubleFloatMap0.remove((double) 1825);
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.iterator()Lgnu/trove/iterator/TDoubleFloatIterator;: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      float[] floatArray0 = new float[1];
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0, (Object) "");
      TDoubleFloatIterator tDoubleFloatIterator0 = tSynchronizedDoubleFloatMap0.iterator();
      assertEquals(true, tDoubleFloatIterator0.hasNext());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustOrPutValue(DFF)F: root-Branch
   */

//   @Test
//   public void test10()  throws Throwable  {
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
//       TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
//       float float0 = tSynchronizedDoubleFloatMap0.adjustOrPutValue((-6.068081750054462), (-12.750946F), (-12.750946F));
//       assertEquals("{-6.068081750054462=-12.750946}", tDoubleFloatHashMap0.toString());
//       assertEquals((-12.750946F), float0, 0.01F);
//   }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.values([F)[F: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      float[] floatArray0 = new float[8];
      float[] floatArray1 = tSynchronizedDoubleFloatMap0.values(floatArray0);
      assertSame(floatArray1, floatArray0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsKey(D)Z: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(1, 1, 1, 1);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0, (Object) "1.0");
      boolean boolean0 = tSynchronizedDoubleFloatMap0.containsKey((double) 1);
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.retainEntries(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(1, 1, 1, 1);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0, (Object) "1.0");
      boolean boolean0 = tSynchronizedDoubleFloatMap0.retainEntries((TDoubleFloatProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.forEachKey((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys()[D: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(1825);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      double[] doubleArray0 = tSynchronizedDoubleFloatMap0.keys();
      assertNotNull(doubleArray0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.adjustValue(DF)Z: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(1, 1, 1, 1);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0, (Object) "1.0");
      boolean boolean0 = tSynchronizedDoubleFloatMap0.adjustValue((double) 1, (float) 1);
      assertEquals(false, boolean0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.clear()V: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      tSynchronizedDoubleFloatMap0.clear();
      assertEquals("{}", tSynchronizedDoubleFloatMap0.toString());
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.getNoEntryKey()D: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(303, 303);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      double double0 = tSynchronizedDoubleFloatMap0.getNoEntryKey();
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.containsValue(F)Z: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      float[] floatArray0 = new float[7];
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.containsValue(0.0F);
      assertEquals(true, boolean0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      float[] floatArray0 = new float[1];
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0, (Object) "-354.5099");
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      tSynchronizedDoubleFloatMap0.putAll((Map<? extends Double, ? extends Float>) hashMap0);
      assertEquals(0, hashMap0.size());
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachEntry(Lgnu/trove/procedure/TDoubleFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(153, 153, 153, 153);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.forEachEntry((TDoubleFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keys([D)[D: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(303, 303);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      double[] doubleArray0 = tSynchronizedDoubleFloatMap0.keys(tDoubleFloatHashMap0._set);
      assertNotNull(doubleArray0);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.increment(D)Z: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap();
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      boolean boolean0 = tSynchronizedDoubleFloatMap0.increment((double) (-12.750946F));
      assertEquals(false, boolean0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.forEachValue(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      float[] floatArray0 = new float[1];
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0, (Object) "");
      // Undeclared exception!
      try {
        tSynchronizedDoubleFloatMap0.forEachValue((TFloatProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.put(DF)F: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(303, 303);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      tSynchronizedDoubleFloatMap0.put((double) 303, (float) 303);
      assertEquals(1, tDoubleFloatHashMap0.size());
      assertEquals("{303.0=303.0}", tDoubleFloatHashMap0.toString());
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.get(D)F: root-Branch
   */

//   @Test
//   public void test26()  throws Throwable  {
//       TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(303, 303);
//       TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
//       float float0 = tSynchronizedDoubleFloatMap0.get(0.0);
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.<init>(Lgnu/trove/map/TDoubleFloatMap;)V: I17 Branch 1 IFNONNULL L59 - false
   */

  @Test
  public void test27()  throws Throwable  {
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = null;
      try {
        tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;: I11 Branch 2 IFNONNULL L107 - true
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.keySet()Lgnu/trove/set/TDoubleSet;: I11 Branch 2 IFNONNULL L107 - false
   * 3 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.<init>(Lgnu/trove/map/TDoubleFloatMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      float[] floatArray0 = new float[7];
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0);
      TSynchronizedDoubleSet tSynchronizedDoubleSet0 = (TSynchronizedDoubleSet)tSynchronizedDoubleFloatMap0.keySet();
      assertNotNull(tSynchronizedDoubleSet0);
      
      TSynchronizedDoubleSet tSynchronizedDoubleSet1 = (TSynchronizedDoubleSet)tSynchronizedDoubleFloatMap0.keySet();
      assertSame(tSynchronizedDoubleSet1, tSynchronizedDoubleSet0);
  }

  //Test case number: 29
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;: I11 Branch 3 IFNONNULL L121 - true
   * 2 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.valueCollection()Lgnu/trove/TFloatCollection;: I11 Branch 3 IFNONNULL L121 - false
   * 3 gnu.trove.impl.sync.TSynchronizedDoubleFloatMap.<init>(Lgnu/trove/map/TDoubleFloatMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      float[] floatArray0 = new float[1];
      TDoubleFloatHashMap tDoubleFloatHashMap0 = new TDoubleFloatHashMap(doubleArray0, floatArray0);
      TSynchronizedDoubleFloatMap tSynchronizedDoubleFloatMap0 = new TSynchronizedDoubleFloatMap((TDoubleFloatMap) tDoubleFloatHashMap0, (Object) "");
      TSynchronizedFloatCollection tSynchronizedFloatCollection0 = (TSynchronizedFloatCollection)tSynchronizedDoubleFloatMap0.valueCollection();
      assertNotNull(tSynchronizedFloatCollection0);
      
      TSynchronizedFloatCollection tSynchronizedFloatCollection1 = (TSynchronizedFloatCollection)tSynchronizedDoubleFloatMap0.valueCollection();
      assertSame(tSynchronizedFloatCollection1, tSynchronizedFloatCollection0);
  }
}
