/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TByteDoubleMap;
import gnu.trove.map.hash.TByteDoubleHashMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteDoubleHashMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap();
      Locale locale0 = Locale.ROOT;
      byte byte0 = (byte)11;
      tByteDoubleHashMap0.containsKey(byte0);
      String string0 = locale0.getVariant();
      tByteDoubleHashMap0.equals((Object) string0);
      String string1 = locale0.toString();
      assertEquals("", string1);
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-13);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-28);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-37);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-93);
      byteArray0[4] = byte4;
      byte byte5 = (byte)30;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-3);
      byteArray0[7] = byte7;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) byte7;
      doubleArray0[1] = (double) byteArray0[2];
      doubleArray0[2] = (double) byte1;
      doubleArray0[3] = (double) byteArray0[7];
      doubleArray0[4] = (double) byteArray0[4];
      doubleArray0[5] = (double) byte0;
      doubleArray0[6] = (double) byteArray0[3];
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(byteArray0, doubleArray0);
      tByteDoubleHashMap0.increment(byte1);
      assertEquals("{-28=1.0, -13=-3.0, 30=-13.0, -37=-3.0, -93=-93.0, 0=-37.0}", tByteDoubleHashMap0.toString());
      
      int int0 = 0;
      int int1 = 0;
      int int2 = 2035;
      float float0 = 1664.1368F;
      TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap(int2, float0);
      byte byte8 = (byte)0;
      tByteDoubleHashMap1.increment(byte8);
      float float1 = 0.0F;
      TByteDoubleHashMap tByteDoubleHashMap2 = new TByteDoubleHashMap(int1, float1);
      TByteDoubleHashMap tByteDoubleHashMap3 = null;
      try {
        tByteDoubleHashMap3 = new TByteDoubleHashMap((TByteDoubleMap) tByteDoubleHashMap2);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap();
      tByteDoubleHashMap0.tempDisableAutoCompaction();
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) byteArray0[0];
      tByteDoubleHashMap1.trimToSize();
      doubleArray0[1] = (double) byteArray0[1];
      doubleArray0[2] = (double) byteArray0[0];
      doubleArray0[3] = (double) byte0;
      doubleArray0[4] = (double) byteArray0[1];
      doubleArray0[5] = (double) byte0;
      doubleArray0[6] = (double) byteArray0[1];
      doubleArray0[7] = (double) byteArray0[1];
      doubleArray0[8] = (double) byteArray0[1];
      tByteDoubleHashMap1.values(doubleArray0);
      byteArray0[0] = byte1;
      doubleArray0[0] = (double) byte1;
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) byte1;
      doubleArray0[3] = (double) byteArray0[1];
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray0[4] = double0;
      doubleArray0[5] = (double) byteArray0[1];
      doubleArray0[6] = (double) byteArray0[1];
      doubleArray0[7] = (double) byte0;
      doubleArray0[8] = double0;
      double double1 = 879.9373793121373;
      TByteDoubleHashMap tByteDoubleHashMap2 = new TByteDoubleHashMap((TByteDoubleMap) tByteDoubleHashMap0);
      TByteDoubleHashMap tByteDoubleHashMap3 = new TByteDoubleHashMap((int) byteArray0[0], (float) byteArray0[1], byte0, double1);
      byteArray0[1] = byte0;
      tByteDoubleHashMap0._states = byteArray0;
      assertSame(tByteDoubleHashMap0._states, byteArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-376);
      byte byte0 = (byte)86;
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int0, (float) int0, byte0, (double) byte0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 118;
          int int1 = 1791;
          byte[] byteArray0 = new byte[10];
          byte byte0 = (byte)0;
          byteArray0[0] = byte0;
          byte byte1 = (byte) (-1);
          byteArray0[1] = byte1;
          byte byte2 = (byte) (-6);
          byteArray0[2] = byte2;
          byte byte3 = (byte) (-102);
          byteArray0[3] = byte3;
          byte byte4 = (byte)112;
          byteArray0[4] = byte4;
          byte byte5 = (byte)28;
          byteArray0[5] = byte5;
          byte byte6 = (byte)0;
          byteArray0[6] = byte6;
          byte byte7 = (byte)118;
          byteArray0[7] = byte7;
          byte byte8 = (byte)64;
          byteArray0[8] = byte8;
          byte byte9 = (byte) (-124);
          byteArray0[9] = byte9;
          double[] doubleArray0 = new double[3];
          doubleArray0[0] = (double) byte8;
          doubleArray0[1] = (double) byteArray0[3];
          doubleArray0[2] = (double) byte5;
          TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(byteArray0, doubleArray0);
          double[] doubleArray1 = tByteDoubleHashMap0.values();
          assertNotNull(doubleArray1);
          
          TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap(int1);
          TByteDoubleHashMap tByteDoubleHashMap2 = new TByteDoubleHashMap((TByteDoubleMap) tByteDoubleHashMap1);
          double double0 = 1733.664952607791;
          byte byte10 = (byte)1;
          tByteDoubleHashMap1.contains(byte10);
          tByteDoubleHashMap1.containsValue(double0);
          byte byte11 = (byte) (-111);
          byte byte12 = (byte)33;
          double double1 = 1.0;
          tByteDoubleHashMap1.putIfAbsent(byte12, double1);
          tByteDoubleHashMap1.isEmpty();
          tByteDoubleHashMap2.containsKey(byte11);
          assertEquals(1, tByteDoubleHashMap1.size());
          
          byte byte13 = (byte)1;
          TByteDoubleHashMap tByteDoubleHashMap3 = new TByteDoubleHashMap(int0, (float) int0, byte13, (double) int0);
          String string0 = "\"@WV/T`uB)Kl8C[ad";
          boolean boolean0 = true;
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0, boolean0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\"@WV/T`uB)Kl8C[ad\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:136)
             // sun.reflect.GeneratedConstructorAccessor14.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

//   @Test
//   public void test5()  throws Throwable  {
//       int int0 = 1315;
//       byte[] byteArray0 = new byte[10];
//       byte byte0 = (byte)33;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)0;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)127;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte) (-121);
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)0;
//       byteArray0[4] = byte4;
//       byte byte5 = (byte)79;
//       byteArray0[5] = byte5;
//       byte byte6 = (byte)78;
//       byteArray0[6] = byte6;
//       byte byte7 = (byte)0;
//       byteArray0[7] = byte7;
//       byte byte8 = (byte)0;
//       byteArray0[8] = byte8;
//       byte byte9 = (byte)38;
//       byteArray0[9] = byte9;
//       double[] doubleArray0 = new double[9];
//       doubleArray0[0] = (double) byteArray0[4];
//       doubleArray0[1] = (double) int0;
//       doubleArray0[2] = (double) byteArray0[7];
//       doubleArray0[3] = (double) byteArray0[9];
//       doubleArray0[4] = (double) byteArray0[4];
//       double double0 = 1.0;
//       doubleArray0[5] = double0;
//       doubleArray0[6] = (double) byteArray0[0];
//       doubleArray0[7] = (double) byteArray0[0];
//       doubleArray0[8] = (double) byteArray0[8];
//       TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(byteArray0, doubleArray0);
//       TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap((TByteDoubleMap) tByteDoubleHashMap0);
//       assertEquals(0.0, tByteDoubleHashMap1.getNoEntryValue(), 0.01D);
//       assertEquals("{0=0.0, 33=0.0, 127=0.0, 79=1.0, 78=33.0, -121=38.0}", tByteDoubleHashMap1.toString());
//       assertEquals(0, tByteDoubleHashMap1.getNoEntryKey());
//       assertEquals("{79=1.0, -121=38.0, 127=0.0, 33=0.0, 78=33.0, 0=0.0}", tByteDoubleHashMap0.toString());
//       
//       TByteDoubleHashMap tByteDoubleHashMap2 = new TByteDoubleHashMap(int0);
//       assertFalse(tByteDoubleHashMap2.equals(tByteDoubleHashMap1));
//   }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)92;
      byteArray0[0] = byte0;
      byte byte1 = (byte)86;
      byteArray0[1] = byte1;
      byte byte2 = (byte)51;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-78);
      byteArray0[3] = byte3;
      byte byte4 = (byte)111;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-38);
      byteArray0[5] = byte5;
      byte byte6 = (byte)85;
      byteArray0[6] = byte6;
      byte byte7 = (byte)1;
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      byteArray0[8] = byte8;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) byte6;
      doubleArray0[1] = (double) byte3;
      doubleArray0[2] = (double) byte2;
      doubleArray0[0] = (double) byteArray0[5];
      doubleArray0[1] = (double) byte1;
      doubleArray0[2] = (double) byte7;
      doubleArray0[3] = (double) byte0;
      doubleArray0[4] = (double) byte7;
      doubleArray0[5] = (double) byteArray0[5];
      double double0 = 1610.4315149598172;
      doubleArray0[6] = double0;
      doubleArray0[7] = (double) byteArray0[0];
      doubleArray0[8] = (double) byte6;
      doubleArray0[3] = (double) byte5;
      doubleArray0[4] = (double) byte7;
      doubleArray0[5] = (double) byteArray0[2];
      doubleArray0[6] = (double) byte0;
      doubleArray0[7] = (double) byte5;
      doubleArray0[8] = (double) byteArray0[3];
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(byteArray0, doubleArray0);
      double[] doubleArray1 = tByteDoubleHashMap0.values();
      assertEquals("{0=-78.0, -78=-38.0, 111=1.0, 86=86.0, 85=92.0, -38=51.0, 51=1.0, 1=-38.0, 92=-38.0}", tByteDoubleHashMap0.toString());
      assertNotNull(doubleArray1);
  }

  @Test
  public void test7()  throws Throwable  {
      String string0 = "\\<YX/iSM";
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap();
      TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap((TByteDoubleMap) tByteDoubleHashMap0);
      File file0 = null;
      String string1 = "";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(file0, string1);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // 
         //
      }
  }

//   @Test
//   public void test8()  throws Throwable  {
//       byte[] byteArray0 = new byte[6];
//       byte byte0 = (byte)0;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte) (-91);
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)0;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte)0;
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)36;
//       byteArray0[4] = byte4;
//       byte byte5 = (byte) (-8);
//       byteArray0[5] = byte5;
//       double[] doubleArray0 = new double[10];
//       doubleArray0[0] = (double) byte0;
//       double double0 = Double.NEGATIVE_INFINITY;
//       doubleArray0[1] = double0;
//       doubleArray0[2] = (double) byte4;
//       doubleArray0[3] = (double) byte0;
//       doubleArray0[4] = (double) byteArray0[3];
//       doubleArray0[5] = (double) byte1;
//       double double1 = 1642.3070697396213;
//       doubleArray0[6] = double1;
//       doubleArray0[7] = (double) byte0;
//       doubleArray0[8] = (double) byteArray0[3];
//       doubleArray0[9] = (double) byte3;
//       TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(byteArray0, doubleArray0);
//       TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap((TByteDoubleMap) tByteDoubleHashMap0);
//       tByteDoubleHashMap1.getNoEntryValue();
//       assertEquals("{-8=-91.0, 36=0.0, -91=-Infinity, 0=0.0}", tByteDoubleHashMap1.toString());
//       assertEquals("{-8=-91.0, 36=0.0, -91=-Infinity, 0=0.0}", tByteDoubleHashMap0.toString());
//       assertTrue(tByteDoubleHashMap0.equals(tByteDoubleHashMap1));
//       assertEquals(false, tByteDoubleHashMap0.isEmpty());
//       assertEquals(0, tByteDoubleHashMap1.getNoEntryKey());
//       assertEquals(23, tByteDoubleHashMap1.capacity());
//   }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      byte byte0 = (byte) (-57);
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int1, (float) int0, byte0, (double) int0);
      TByteDoubleHashMap tByteDoubleHashMap1 = null;
      try {
        tByteDoubleHashMap1 = new TByteDoubleHashMap((TByteDoubleMap) tByteDoubleHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TByteDoubleHashMap tByteDoubleHashMap0 = null;
      Locale locale0 = Locale.UK;
      String string0 = "'tq3 <";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: 'tq3 <:'tq3%20%3C#'tq3%20%3C
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-572);
      float float0 = 0.0F;
      byte byte0 = (byte)0;
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int0, float0, byte0, (double) float0);
      byte[] byteArray0 = tByteDoubleHashMap0._set;
      assertNotNull(byteArray0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = ">";
      int int0 = (-672);
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int0, int0);
      TByteDoubleHashMap tByteDoubleHashMap1 = new TByteDoubleHashMap();
      TByteDoubleHashMap tByteDoubleHashMap2 = new TByteDoubleHashMap((TByteDoubleMap) tByteDoubleHashMap1);
      TByteDoubleHashMap tByteDoubleHashMap3 = new TByteDoubleHashMap((TByteDoubleMap) tByteDoubleHashMap2);
      double[] doubleArray0 = new double[5];
      double double0 = 1807.8892612063469;
      tByteDoubleHashMap1.putAll((TByteDoubleMap) tByteDoubleHashMap3);
      doubleArray0[0] = double0;
      double double1 = Double.POSITIVE_INFINITY;
      doubleArray0[1] = double1;
      tByteDoubleHashMap0.isEmpty();
      double double2 = 101.2761083312503;
      byte byte0 = (byte) (-83);
      tByteDoubleHashMap2.contains(byte0);
      doubleArray0[2] = double2;
      doubleArray0[0] = double0;
      doubleArray0[1] = double2;
      doubleArray0[2] = double1;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = Double.POSITIVE_INFINITY;
      tByteDoubleHashMap2.getNoEntryKey();
      doubleArray0[4] = double4;
      tByteDoubleHashMap3.values(doubleArray0);
      Locale locale0 = new Locale(string0);
      // Undeclared exception!
      try {
        locale0.getUnicodeLocaleType(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: >
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-638);
      float float0 = 0.0F;
      TByteDoubleHashMap tByteDoubleHashMap0 = new TByteDoubleHashMap(int0, float0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) float0;
      double double0 = 0.0;
      doubleArray0[3] = double0;
      double double1 = 0.0;
      doubleArray0[4] = double1;
      doubleArray0[5] = (double) float0;
      doubleArray0[6] = (double) float0;
      doubleArray0[7] = (double) float0;
      doubleArray0[8] = (double) float0;
      tByteDoubleHashMap0.values(doubleArray0);
      tByteDoubleHashMap0.clear();
      byte byte0 = (byte) (-36);
      tByteDoubleHashMap0.containsKey(byte0);
      TByteDoubleMap tByteDoubleMap0 = null;
      TByteDoubleHashMap tByteDoubleHashMap1 = null;
      try {
        tByteDoubleHashMap1 = new TByteDoubleHashMap(tByteDoubleMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
