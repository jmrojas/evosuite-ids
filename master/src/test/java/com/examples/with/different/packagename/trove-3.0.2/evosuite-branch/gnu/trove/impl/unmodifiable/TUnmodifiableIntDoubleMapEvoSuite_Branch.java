/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TDoubleFunction;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableIntSet;
import gnu.trove.map.TIntDoubleMap;
import gnu.trove.map.hash.TIntDoubleHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.procedure.TIntDoubleProcedure;
import gnu.trove.procedure.TIntProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableIntDoubleMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap$1.hasNext()Z: root-Branch
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap$1.advance()V: root-Branch
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap$1.<init>(Lgnu/trove/impl/unmodifiable/TUnmodifiableIntDoubleMap;)V: root-Branch
   * 4 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap$1.key()I: root-Branch
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap$1.value()D: root-Branch
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.iterator()Lgnu/trove/iterator/TIntDoubleIterator;: root-Branch
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.size()I: root-Branch
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.<init>(Lgnu/trove/map/TIntDoubleMap;)V: I17 Branch 1 IFNONNULL L58 - true
   */

  @Test
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[9];
      double[] doubleArray0 = new double[1];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      TIntDoubleHashMap tIntDoubleHashMap1 = new TIntDoubleHashMap((TIntDoubleMap) tUnmodifiableIntDoubleMap0);
      assertEquals(1, tUnmodifiableIntDoubleMap0.size());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.values()[D: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      double[] doubleArray0 = tUnmodifiableIntDoubleMap0.values();
      assertNotNull(doubleArray0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.hashCode()I: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      int int0 = tUnmodifiableIntDoubleMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.adjustOrPutValue(IDD)D: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap((-593), (-593), (-593), (-593));
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableIntDoubleMap0.adjustOrPutValue((-593), 0, (-593));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.keys([I)[I: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap((-1442), (-1442), (-1442), (-1442));
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      int[] intArray0 = tUnmodifiableIntDoubleMap0.keys(tIntDoubleHashMap0._set);
      assertNotNull(intArray0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.retainEntries(Lgnu/trove/procedure/TIntDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableIntDoubleMap0.retainEntries((TIntDoubleProcedure) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.getNoEntryKey()I: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      int int0 = tUnmodifiableIntDoubleMap0.getNoEntryKey();
      assertEquals(0, int0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.containsValue(D)Z: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      boolean boolean0 = tUnmodifiableIntDoubleMap0.containsValue((double) 17);
      assertEquals(false, boolean0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.forEachValue(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      int[] intArray0 = new int[9];
      double[] doubleArray0 = new double[1];
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(intArray0, doubleArray0);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableIntDoubleMap0.forEachValue((TDoubleProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.putAll(Lgnu/trove/map/TIntDoubleMap;)V: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableIntDoubleMap0.putAll((TIntDoubleMap) tIntDoubleHashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.clear()V: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableIntDoubleMap0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      boolean boolean0 = tUnmodifiableIntDoubleMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(0);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      // Undeclared exception!
      try {
        tUnmodifiableIntDoubleMap0.putAll((Map<? extends Integer, ? extends Double>) hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.adjustValue(ID)Z: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap((-1820), (-1820), (-1820), (-1820));
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableIntDoubleMap0.adjustValue((-1820), (-1820));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.getNoEntryValue()D: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap((-593), (-593), (-593), (-593));
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      double double0 = tUnmodifiableIntDoubleMap0.getNoEntryValue();
      assertEquals((-593.0), double0, 0.01D);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.values([D)[D: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = tUnmodifiableIntDoubleMap0.values(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.keys()[I: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      int[] intArray0 = tUnmodifiableIntDoubleMap0.keys();
      assertNotNull(intArray0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.increment(I)Z: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableIntDoubleMap0.increment(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap((-1820), (-1820), (-1820), (-1820));
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      String string0 = tUnmodifiableIntDoubleMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.forEachKey(Lgnu/trove/procedure/TIntProcedure;)Z: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap((-1442), (-1442), (-1442), (-1442));
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      boolean boolean0 = tUnmodifiableIntDoubleMap0.forEachKey((TIntProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.forEachEntry(Lgnu/trove/procedure/TIntDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      boolean boolean0 = tUnmodifiableIntDoubleMap0.forEachEntry((TIntDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.put(ID)D: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableIntDoubleMap0.put(0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.get(I)D: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      double double0 = tUnmodifiableIntDoubleMap0.get(17);
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.remove(I)D: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap((-1442), (-1442), (-1442), (-1442));
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableIntDoubleMap0.remove((-1442));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.putIfAbsent(ID)D: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap(366, 366);
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableIntDoubleMap0.putIfAbsent(366, 366);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.containsKey(I)Z: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap((-593), (-593), (-593), (-593));
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      boolean boolean0 = tUnmodifiableIntDoubleMap0.containsKey(0);
      assertEquals(false, boolean0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.transformValues(Lgnu/trove/function/TDoubleFunction;)V: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableIntDoubleMap0.transformValues((TDoubleFunction) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.<init>(Lgnu/trove/map/TIntDoubleMap;)V: I17 Branch 1 IFNONNULL L58 - false
   */

  @Test
  public void test27()  throws Throwable  {
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = null;
      try {
        tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.keySet()Lgnu/trove/set/TIntSet;: I4 Branch 2 IFNONNULL L79 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.keySet()Lgnu/trove/set/TIntSet;: I4 Branch 2 IFNONNULL L79 - false
   */

  @Test
  public void test28()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      TUnmodifiableIntSet tUnmodifiableIntSet0 = (TUnmodifiableIntSet)tUnmodifiableIntDoubleMap0.keySet();
      assertNotNull(tUnmodifiableIntSet0);
      
      TUnmodifiableIntSet tUnmodifiableIntSet1 = (TUnmodifiableIntSet)tUnmodifiableIntDoubleMap0.keySet();
      assertSame(tUnmodifiableIntSet1, tUnmodifiableIntSet0);
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;: I4 Branch 3 IFNONNULL L87 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.valueCollection()Lgnu/trove/TDoubleCollection;: I4 Branch 3 IFNONNULL L87 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap();
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      TUnmodifiableDoubleCollection tUnmodifiableDoubleCollection0 = (TUnmodifiableDoubleCollection)tUnmodifiableIntDoubleMap0.valueCollection();
      assertNotNull(tUnmodifiableDoubleCollection0);
      
      TUnmodifiableDoubleCollection tUnmodifiableDoubleCollection1 = (TUnmodifiableDoubleCollection)tUnmodifiableIntDoubleMap0.valueCollection();
      assertSame(tUnmodifiableDoubleCollection1, tUnmodifiableDoubleCollection0);
  }

  //Test case number: 30
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L94 - false
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L94 - true
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap.<init>(Lgnu/trove/map/TIntDoubleMap;)V: I17 Branch 1 IFNONNULL L58 - true
   */

  @Test
  public void test30()  throws Throwable  {
      TIntDoubleHashMap tIntDoubleHashMap0 = new TIntDoubleHashMap((-1442), (-1442), (-1442), (-1442));
      TUnmodifiableIntDoubleMap tUnmodifiableIntDoubleMap0 = new TUnmodifiableIntDoubleMap((TIntDoubleMap) tIntDoubleHashMap0);
      boolean boolean0 = tUnmodifiableIntDoubleMap0.equals((Object) null);
      assertEquals(false, boolean0);
  }
}
