/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.hash.TCustomHashMap;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCustomHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TCustomHashMap<Object, Object> tCustomHashMap0 = new TCustomHashMap<Object, Object>();
      Object object0 = new Object();
      // Undeclared exception!
      try {
        tCustomHashMap0.put(object0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TCustomHashMap<Object, Integer> tCustomHashMap0 = new TCustomHashMap<Object, Integer>();
      int int0 = (-1342);
      int int1 = tCustomHashMap0.setUp(int0);
      tCustomHashMap0.keySet();
      IdentityHashingStrategy<AbstractMap.SimpleImmutableEntry<Integer, Integer>> identityHashingStrategy0 = new IdentityHashingStrategy<AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      int int2 = 548348231;
      IdentityHashingStrategy<Integer> identityHashingStrategy1 = new IdentityHashingStrategy<Integer>();
      identityHashingStrategy1.computeHashCode((Integer) int0);
      identityHashingStrategy1.equals((Integer) int2, (Integer) int1);
      TCustomHashMap<Integer, HashMap<String, String>> tCustomHashMap1 = new TCustomHashMap<Integer, HashMap<String, String>>((HashingStrategy<? super Integer>) identityHashingStrategy1);
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://?#
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = locale0.getScript();
      File file0 = new File(string0);
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      int int0 = 0;
      TCustomHashMap<AbstractMap.SimpleEntry<String, Integer>, String> tCustomHashMap0 = new TCustomHashMap<AbstractMap.SimpleEntry<String, Integer>, String>((HashingStrategy<? super AbstractMap.SimpleEntry<String, Integer>>) identityHashingStrategy0, int0);
      int int1 = tCustomHashMap0.hashCode();
      assertEquals(0, int1);
  }

  @Test
  public void test4()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      String string0 = "";
      File file0 = new File(string0);
      File file1 = file0.getCanonicalFile();
      File file2 = file1.getParentFile();
      URI uRI0 = file2.toURI();
      String string1 = uRI0.toASCIIString();
      String string2 = uRI0.getAuthority();
      identityHashingStrategy0.equals((Object) string1, (Object) string2);
      int int0 = 201;
      TCustomHashMap<Integer, Integer> tCustomHashMap0 = new TCustomHashMap<Integer, Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0);
      TCustomHashMap<Integer, HashMap<String, Integer>> tCustomHashMap1 = new TCustomHashMap<Integer, HashMap<String, Integer>>((HashingStrategy<? super Integer>) identityHashingStrategy0, int0);
      assertEquals(433, tCustomHashMap1.capacity());
      
      tCustomHashMap1.compact();
      assertEquals(3, tCustomHashMap1.capacity());
  }

  @Test
  public void test5()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      int int0 = (-897);
      TCustomHashMap<Object, AbstractMap.SimpleImmutableEntry<String, Integer>> tCustomHashMap0 = new TCustomHashMap<Object, AbstractMap.SimpleImmutableEntry<String, Integer>>((HashingStrategy<? super Object>) identityHashingStrategy0, int0);
      tCustomHashMap0.getAutoCompactionFactor();
      assertEquals(3, tCustomHashMap0.capacity());
  }
}
