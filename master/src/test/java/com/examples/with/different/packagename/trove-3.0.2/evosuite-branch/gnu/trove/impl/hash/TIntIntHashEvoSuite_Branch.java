/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.hash.TIntIntHashMap;
import gnu.trove.procedure.TIntProcedure;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntIntHashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TIntIntHash.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   * 2 gnu.trove.impl.hash.TIntIntHash.<init>()V: root-Branch
   * 3 gnu.trove.impl.hash.TIntIntHash.setUp(I)I: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
      tIntIntHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
  }

  //Test case number: 1
  /*
   * 7 covered goals:
   * 1 gnu.trove.impl.hash.TIntIntHash.getNoEntryKey()I: root-Branch
   * 2 gnu.trove.impl.hash.TIntIntHash.insertKeyAt(II)V: root-Branch
   * 3 gnu.trove.impl.hash.TIntIntHash.<init>(I)V: root-Branch
   * 4 gnu.trove.impl.hash.TIntIntHash.insertKey(I)I: I30 Branch 13 IFNE L279 - true
   * 5 gnu.trove.impl.hash.TIntIntHash.insertKey(I)I: I30 Branch 13 IFNE L279 - false
   * 6 gnu.trove.impl.hash.TIntIntHash.insertKey(I)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 7 gnu.trove.impl.hash.TIntIntHash.insertKey(I)I: I56 Branch 15 IF_ICMPNE L286 - false
   */

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[7];
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      int int0 = tIntIntHashMap0.getNoEntryKey();
      assertEquals(17, tIntIntHashMap0.capacity());
      assertEquals(0, int0);
      assertEquals("{0=0}", tIntIntHashMap0.toString());
      assertEquals(1, tIntIntHashMap0.size());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TIntIntHash.getNoEntryValue()I: root-Branch
   * 2 gnu.trove.impl.hash.TIntIntHash.<init>()V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      int int0 = tIntIntHashMap0.getNoEntryValue();
      assertEquals(23, tIntIntHashMap0.capacity());
      assertEquals(0, tIntIntHashMap0.getNoEntryKey());
      assertEquals(0, int0);
  }

  //Test case number: 3
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TIntIntHash.contains(I)Z: I5 Branch 1 IFLT L178 - true
   * 2 gnu.trove.impl.hash.TIntIntHash.index(I)I: I37 Branch 5 IFNE L228 - false
   * 3 gnu.trove.impl.hash.TIntIntHash.<init>(IFII)V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(Integer.MAX_VALUE, 0, 0, 0);
      boolean boolean0 = tIntIntHashMap0.containsKey((int) (byte)0);
      assertEquals(false, boolean0);
      assertEquals(0, tIntIntHashMap0.getNoEntryValue());
      assertEquals(0, tIntIntHashMap0.getNoEntryKey());
  }

  //Test case number: 4
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TIntIntHash.forEach(Lgnu/trove/procedure/TIntProcedure;)Z: I18 Branch 2 IFLE L192 - true
   * 2 gnu.trove.impl.hash.TIntIntHash.forEach(Lgnu/trove/procedure/TIntProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TIntIntHash.forEach(Lgnu/trove/procedure/TIntProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   * 4 gnu.trove.impl.hash.TIntIntHash.<init>(IF)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(93, (-1));
      boolean boolean0 = tIntIntHashMap0.forEachKey((TIntProcedure) null);
      assertEquals(0, tIntIntHashMap0.getNoEntryValue());
      assertEquals(true, boolean0);
      assertEquals(3, tIntIntHashMap0.capacity());
      assertEquals(0, tIntIntHashMap0.getNoEntryKey());
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TIntIntHash.forEach(Lgnu/trove/procedure/TIntProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - false
   * 2 gnu.trove.impl.hash.TIntIntHash.forEach(Lgnu/trove/procedure/TIntProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TIntIntHash.forEach(Lgnu/trove/procedure/TIntProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

  @Test
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[7];
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      // Undeclared exception!
      try {
        tIntIntHashMap0.forEach((TIntProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 6
  /*
   * 16 covered goals:
   * 1 gnu.trove.impl.hash.TIntIntHash.index(I)I: I51 Branch 7 IF_ICMPNE L231 - true
   * 2 gnu.trove.impl.hash.TIntIntHash.indexRehashed(IIIB)I: I46 Branch 9 IFNE L250 - true
   * 3 gnu.trove.impl.hash.TIntIntHash.indexRehashed(IIIB)I: I58 Branch 10 IF_ICMPNE L254 - false
   * 4 gnu.trove.impl.hash.TIntIntHash.indexRehashed(IIIB)I: I61 Branch 11 IF_ICMPEQ L254 - false
   * 5 gnu.trove.impl.hash.TIntIntHash.insertKey(I)I: I56 Branch 15 IF_ICMPNE L286 - true
   * 6 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 7 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I45 Branch 18 IFGE L310 - false
   * 8 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I62 Branch 19 IFNE L316 - true
   * 9 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I62 Branch 19 IFNE L316 - false
   * 10 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 11 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 12 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I103 Branch 22 IF_ICMPNE L327 - false
   * 13 gnu.trove.impl.hash.TIntIntHash.contains(I)Z: I5 Branch 1 IFLT L178 - false
   * 14 gnu.trove.impl.hash.TIntIntHash.indexRehashed(IIIB)I: I29 Branch 8 IFGE L245 - false
   * 15 gnu.trove.impl.hash.TIntIntHash.index(I)I: I37 Branch 5 IFNE L228 - true
   * 16 gnu.trove.impl.hash.TIntIntHash.index(I)I: I46 Branch 6 IF_ICMPNE L231 - false
   */

  @Test
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = Integer.MIN_VALUE;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      boolean boolean0 = tIntIntHashMap0.contains(0);
      assertEquals(true, boolean0);
      assertEquals("{0=0, -2147483648=-2147483648}", tIntIntHashMap0.toString());
  }

  //Test case number: 7
  /*
   * 10 covered goals:
   * 1 gnu.trove.impl.hash.TIntIntHash.indexRehashed(IIIB)I: I29 Branch 8 IFGE L245 - true
   * 2 gnu.trove.impl.hash.TIntIntHash.indexRehashed(IIIB)I: I58 Branch 10 IF_ICMPNE L254 - true
   * 3 gnu.trove.impl.hash.TIntIntHash.indexRehashed(IIIB)I: I70 Branch 12 IF_ICMPNE L256 - true
   * 4 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I45 Branch 18 IFGE L310 - true
   * 5 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I103 Branch 22 IF_ICMPNE L327 - true
   * 6 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I115 Branch 23 IF_ICMPNE L332 - true
   * 7 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 8 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 9 gnu.trove.impl.hash.TIntIntHash.index(I)I: I51 Branch 7 IF_ICMPNE L231 - true
   * 10 gnu.trove.impl.hash.TIntIntHash.indexRehashed(IIIB)I: I46 Branch 9 IFNE L250 - false
   */

  @Test
  public void test7()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[3] = (-1860);
      intArray0[4] = 2047;
      intArray0[5] = (-784);
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      int int0 = tIntIntHashMap0.get((-1032));
      assertEquals(0, int0);
      assertEquals(4, tIntIntHashMap0.size());
      assertEquals(17, tIntIntHashMap0.capacity());
      assertEquals("{-784=-784, 2047=2047, -1860=-1860, 0=0}", tIntIntHashMap0.toString());
      assertEquals(0, tIntIntHashMap0.getNoEntryKey());
  }

  //Test case number: 8
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TIntIntHash.indexRehashed(IIIB)I: I61 Branch 11 IF_ICMPEQ L254 - true
   * 2 gnu.trove.impl.hash.TIntIntHash.indexRehashed(IIIB)I: I46 Branch 9 IFNE L250 - false
   * 3 gnu.trove.impl.hash.TIntIntHash.index(I)I: I46 Branch 6 IF_ICMPNE L231 - true
   */

  @Test
  public void test8()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(Integer.MAX_VALUE, 0, 0, 0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[2] = (byte)2;
      tIntIntHashMap0._states = byteArray0;
      boolean boolean0 = tIntIntHashMap0.containsKey((int) (byte)0);
      assertEquals(false, boolean0);
      assertEquals(0, tIntIntHashMap0.getNoEntryKey());
      assertEquals(0, tIntIntHashMap0.getNoEntryValue());
  }

  //Test case number: 9
  /*
   * 10 covered goals:
   * 1 gnu.trove.impl.hash.TIntIntHash.indexRehashed(IIIB)I: I70 Branch 12 IF_ICMPNE L256 - false
   * 2 gnu.trove.impl.hash.TIntIntHash.<init>(IFII)V: root-Branch
   * 3 gnu.trove.impl.hash.TIntIntHash.indexRehashed(IIIB)I: I29 Branch 8 IFGE L245 - true
   * 4 gnu.trove.impl.hash.TIntIntHash.indexRehashed(IIIB)I: I29 Branch 8 IFGE L245 - false
   * 5 gnu.trove.impl.hash.TIntIntHash.indexRehashed(IIIB)I: I46 Branch 9 IFNE L250 - true
   * 6 gnu.trove.impl.hash.TIntIntHash.indexRehashed(IIIB)I: I58 Branch 10 IF_ICMPNE L254 - false
   * 7 gnu.trove.impl.hash.TIntIntHash.indexRehashed(IIIB)I: I61 Branch 11 IF_ICMPEQ L254 - true
   * 8 gnu.trove.impl.hash.TIntIntHash.indexRehashed(IIIB)I: I70 Branch 12 IF_ICMPNE L256 - true
   * 9 gnu.trove.impl.hash.TIntIntHash.index(I)I: I46 Branch 6 IF_ICMPNE L231 - true
   * 10 gnu.trove.impl.hash.TIntIntHash.contains(I)Z: I5 Branch 1 IFLT L178 - true
   */

  @Test
  public void test9()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(Integer.MAX_VALUE, 0, 0, 0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      tIntIntHashMap0._states = byteArray0;
      boolean boolean0 = tIntIntHashMap0.containsKey((int) (byte)0);
      assertEquals(false, boolean0);
      assertEquals(0, tIntIntHashMap0.getNoEntryKey());
      assertEquals(0, tIntIntHashMap0.getNoEntryValue());
  }

  //Test case number: 10
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.TIntIntHash.insertKey(I)I: I50 Branch 14 IF_ICMPNE L286 - true
   * 2 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 3 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 4 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I67 Branch 20 IF_ICMPEQ L317 - false
   * 5 gnu.trove.impl.hash.TIntIntHash.removeAt(I)V: root-Branch
   * 6 gnu.trove.impl.hash.TIntIntHash.index(I)I: I51 Branch 7 IF_ICMPNE L231 - false
   */

  @Test
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[6];
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      tIntIntHashMap0.remove(0);
      assertEquals(true, tIntIntHashMap0.isEmpty());
      
      tIntIntHashMap0.adjustOrPutValue(0, 0, 0);
      assertEquals(false, tIntIntHashMap0.isEmpty());
  }

  //Test case number: 11
  /*
   * 22 covered goals:
   * 1 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 2 gnu.trove.impl.hash.TIntIntHash.insertKeyAt(II)V: root-Branch
   * 3 gnu.trove.impl.hash.TIntIntHash.setUp(I)I: root-Branch
   * 4 gnu.trove.impl.hash.TIntIntHash.removeAt(I)V: root-Branch
   * 5 gnu.trove.impl.hash.TIntIntHash.<init>(I)V: root-Branch
   * 6 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 7 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 8 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 9 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I45 Branch 18 IFGE L310 - true
   * 10 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I45 Branch 18 IFGE L310 - false
   * 11 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I62 Branch 19 IFNE L316 - true
   * 12 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I62 Branch 19 IFNE L316 - false
   * 13 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I67 Branch 20 IF_ICMPEQ L317 - false
   * 14 gnu.trove.impl.hash.TIntIntHash.insertKeyRehash(IIIB)I: I115 Branch 23 IF_ICMPNE L332 - true
   * 15 gnu.trove.impl.hash.TIntIntHash.index(I)I: I37 Branch 5 IFNE L228 - true
   * 16 gnu.trove.impl.hash.TIntIntHash.index(I)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 17 gnu.trove.impl.hash.TIntIntHash.index(I)I: I51 Branch 7 IF_ICMPNE L231 - false
   * 18 gnu.trove.impl.hash.TIntIntHash.insertKey(I)I: I30 Branch 13 IFNE L279 - true
   * 19 gnu.trove.impl.hash.TIntIntHash.insertKey(I)I: I30 Branch 13 IFNE L279 - false
   * 20 gnu.trove.impl.hash.TIntIntHash.insertKey(I)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 21 gnu.trove.impl.hash.TIntIntHash.insertKey(I)I: I56 Branch 15 IF_ICMPNE L286 - true
   * 22 gnu.trove.impl.hash.TIntIntHash.insertKey(I)I: I56 Branch 15 IF_ICMPNE L286 - false
   */

  @Test
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[4] = 93;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      tIntIntHashMap0.remove(0);
      tIntIntHashMap0.adjustOrPutValue((-1), 93, 93);
      assertEquals("{93=93, -1=93}", tIntIntHashMap0.toString());
  }
}
