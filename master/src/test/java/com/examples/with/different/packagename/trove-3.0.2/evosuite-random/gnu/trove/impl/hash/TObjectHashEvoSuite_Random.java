/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.hash.TObjectHash;
import gnu.trove.map.TObjectFloatMap;
import gnu.trove.map.TObjectIntMap;
import gnu.trove.map.TObjectShortMap;
import gnu.trove.map.custom_hash.TObjectByteCustomHashMap;
import gnu.trove.map.custom_hash.TObjectCharCustomHashMap;
import gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap;
import gnu.trove.map.custom_hash.TObjectFloatCustomHashMap;
import gnu.trove.map.custom_hash.TObjectIntCustomHashMap;
import gnu.trove.map.custom_hash.TObjectLongCustomHashMap;
import gnu.trove.map.custom_hash.TObjectShortCustomHashMap;
import gnu.trove.map.hash.TCustomHashMap;
import gnu.trove.map.hash.THashMap;
import gnu.trove.map.hash.TObjectByteHashMap;
import gnu.trove.map.hash.TObjectCharHashMap;
import gnu.trove.map.hash.TObjectDoubleHashMap;
import gnu.trove.map.hash.TObjectFloatHashMap;
import gnu.trove.map.hash.TObjectIntHashMap;
import gnu.trove.map.hash.TObjectLongHashMap;
import gnu.trove.map.hash.TObjectShortHashMap;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import gnu.trove.set.hash.TLinkedHashSet;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TObjectHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TObjectLongHashMap<Integer> tObjectLongHashMap0 = new TObjectLongHashMap<Integer>();
      IdentityHashingStrategy<String> identityHashingStrategy0 = new IdentityHashingStrategy<String>();
      int int0 = 0;
      TObjectFloatCustomHashMap<String> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<String>((HashingStrategy<? super String>) identityHashingStrategy0, int0);
      tObjectFloatCustomHashMap0.iterator();
      TObjectShortMap<Integer> tObjectShortMap0 = null;
      IdentityHashingStrategy<String> identityHashingStrategy1 = new IdentityHashingStrategy<String>();
      int int1 = 0;
      String string0 = " greater than end index ";
      identityHashingStrategy1.computeHashCode(string0);
      TCustomHashMap<String, Object> tCustomHashMap0 = new TCustomHashMap<String, Object>((HashingStrategy<? super String>) identityHashingStrategy1, int1);
      Locale locale0 = Locale.KOREA;
      TObjectShortCustomHashMap<Object> tObjectShortCustomHashMap0 = new TObjectShortCustomHashMap<Object>();
      String string1 = "?hJT<wH*[";
      Locale locale1 = new Locale(string1, string1);
      String string2 = locale0.getDisplayVariant(locale1);
      tCustomHashMap0.contains((Object) string2);
      THashMap<String, Integer> tHashMap0 = new THashMap<String, Integer>();
      tHashMap0.values();
      Object object0 = TObjectHash.REMOVED;
      tObjectShortCustomHashMap0.compact();
      tCustomHashMap0.put(string1, object0);
      TObjectShortHashMap<Integer> tObjectShortHashMap0 = null;
      try {
        tObjectShortHashMap0 = new TObjectShortHashMap<Integer>(tObjectShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
      int int0 = 2038;
      float float0 = 0.0F;
      TObjectByteCustomHashMap<Integer> tObjectByteCustomHashMap0 = new TObjectByteCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, int0, float0);
      float float1 = (-272.29382F);
      // Undeclared exception!
      try {
        tObjectByteCustomHashMap0.setAutoCompactionFactor(float1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -272.29382
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 0;
      TObjectCharHashMap<String> tObjectCharHashMap0 = new TObjectCharHashMap<String>(int0);
      String string0 = "WZ\\^59J";
      char char0 = 'D';
      tObjectCharHashMap0.putIfAbsent(string0, char0);
      assertEquals(false, tObjectCharHashMap0.isEmpty());
      assertEquals("{WZ\\^59J=D}", tObjectCharHashMap0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      TObjectCharCustomHashMap<Integer> tObjectCharCustomHashMap0 = new TObjectCharCustomHashMap<Integer>();
      tObjectCharCustomHashMap0.valueCollection();
      IdentityHashingStrategy<String> identityHashingStrategy0 = new IdentityHashingStrategy<String>();
      TCustomHashMap<Integer, Object> tCustomHashMap0 = new TCustomHashMap<Integer, Object>();
      tCustomHashMap0.tempDisableAutoCompaction();
      assertEquals(23, tCustomHashMap0.capacity());
      
      HashingStrategy<String> hashingStrategy0 = null;
      int int0 = 100009607;
      IdentityHashingStrategy<Object> identityHashingStrategy1 = new IdentityHashingStrategy<Object>();
      int int1 = 444;
      int int2 = 0;
      float float0 = 0.0F;
      byte byte0 = (byte)0;
      TObjectByteHashMap<String> tObjectByteHashMap0 = new TObjectByteHashMap<String>(int1, float0, byte0);
      float float1 = (-1956.4395F);
      TObjectShortHashMap<Object> tObjectShortHashMap0 = new TObjectShortHashMap<Object>(int2, float1);
      tObjectShortHashMap0.getAutoCompactionFactor();
      TObjectIntCustomHashMap<Object> tObjectIntCustomHashMap0 = new TObjectIntCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy1, int1, (float) int0, int1);
      TObjectIntMap<Integer> tObjectIntMap0 = null;
      // Undeclared exception!
      try {
        tObjectIntCustomHashMap0.putAll(tObjectIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
          int int0 = (-729);
          String string0 = "WcGvi1u*PI7jY";
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 0;
          HashingStrategy<Integer> hashingStrategy0 = null;
          int int1 = (-1);
          TObjectByteCustomHashMap<Integer> tObjectByteCustomHashMap0 = new TObjectByteCustomHashMap<Integer>((HashingStrategy<? super Integer>) hashingStrategy0, int1, (float) int1);
          tObjectByteCustomHashMap0.getNoEntryValue();
          String string0 = "ApF;:?M!TPm,'BPm-";
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"ApF;:?M!TPm,'BPm-\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test6()  throws Throwable  {
      IdentityHashingStrategy<String> identityHashingStrategy0 = new IdentityHashingStrategy<String>();
      int int0 = 0;
      float float0 = 1098.1781F;
      String string0 = "qRsa/";
      identityHashingStrategy0.equals(string0, string0);
      TObjectByteHashMap<Object> tObjectByteHashMap0 = new TObjectByteHashMap<Object>();
      tObjectByteHashMap0.size();
      assertEquals(23, tObjectByteHashMap0.capacity());
      
      TObjectLongCustomHashMap<String> tObjectLongCustomHashMap0 = new TObjectLongCustomHashMap<String>((HashingStrategy<? super String>) identityHashingStrategy0, int0, float0, (long) int0);
      String[] stringArray0 = new String[7];
      String string1 = ")iH35i_oZ{P#/5.z|%j";
      stringArray0[0] = string1;
      String string2 = "'pq]neA1>a+$F|";
      stringArray0[1] = string2;
      String string3 = "";
      stringArray0[2] = string3;
      String string4 = "!77N]o5J";
      stringArray0[3] = string4;
      IdentityHashingStrategy<Integer> identityHashingStrategy1 = new IdentityHashingStrategy<Integer>();
      int int1 = (-1628);
      TObjectDoubleCustomHashMap<Integer> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy1, int1, float0);
      tObjectDoubleCustomHashMap0.keySet();
      String string5 = "";
      stringArray0[4] = string5;
      String string6 = "lleuHCT<L";
      stringArray0[5] = string6;
      String string7 = ">";
      stringArray0[6] = string7;
      ToObjectArrayProceedure<String> toObjectArrayProceedure0 = new ToObjectArrayProceedure<String>(stringArray0);
      boolean boolean0 = tObjectLongCustomHashMap0.forEach((TObjectProcedure<? super String>) toObjectArrayProceedure0);
      assertEquals(true, boolean0);
      
      tObjectLongCustomHashMap0.isEmpty();
      assertEquals("{}", tObjectLongCustomHashMap0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 1;
      float float0 = 269.49567F;
      TObjectDoubleHashMap<String> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<String>(int0, float0, (double) float0);
      boolean boolean0 = true;
      tObjectDoubleHashMap0.reenableAutoCompaction(boolean0);
      IdentityHashingStrategy<String> identityHashingStrategy0 = new IdentityHashingStrategy<String>();
      int int1 = 1814;
      float float1 = (-321.1497F);
      TLinkedHashSet<String> tLinkedHashSet0 = new TLinkedHashSet<String>();
      tObjectDoubleHashMap0.tempDisableAutoCompaction();
      int int2 = 1;
      float float2 = 1140.3917F;
      TObjectIntHashMap<Object> tObjectIntHashMap0 = new TObjectIntHashMap<Object>(int2, float2, int1);
      tObjectIntHashMap0.tempDisableAutoCompaction();
      tLinkedHashSet0.isEmpty();
      TObjectFloatCustomHashMap<String> tObjectFloatCustomHashMap0 = new TObjectFloatCustomHashMap<String>((HashingStrategy<? super String>) identityHashingStrategy0, int1, float1);
      TObjectFloatHashMap<String> tObjectFloatHashMap0 = new TObjectFloatHashMap<String>((TObjectFloatMap<? extends String>) tObjectFloatCustomHashMap0);
      String string0 = "\na.equals(b) =";
      float float3 = 0.5F;
      tObjectFloatHashMap0.putIfAbsent(string0, float3);
      TObjectFloatHashMap<Integer> tObjectFloatHashMap1 = new TObjectFloatHashMap<Integer>(int1);
      OutputStream outputStream0 = null;
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
