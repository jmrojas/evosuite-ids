/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TByteLongMap;
import gnu.trove.map.hash.TByteLongHashMap;
import gnu.trove.procedure.TByteLongProcedure;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.PipedInputStream;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteLongHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 2;
      float float0 = (-1222.2782F);
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int0, float0);
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap((TByteLongMap) tByteLongHashMap0);
      TByteLongHashMap tByteLongHashMap2 = new TByteLongHashMap();
      byte byte0 = (byte) (-82);
      tByteLongHashMap0.putIfAbsent(byte0, (long) int0);
      assertEquals(7, tByteLongHashMap0.capacity());
      
      byte byte1 = (byte)0;
      long long0 = 1569L;
      long long1 = tByteLongHashMap2.adjustOrPutValue(byte1, long0, (long) int0);
      boolean boolean0 = false;
      tByteLongHashMap2.reenableAutoCompaction(boolean0);
      ObjectOutput objectOutput0 = null;
      long[] longArray0 = new long[7];
      longArray0[0] = long1;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) byte0;
      longArray0[4] = long0;
      longArray0[5] = long0;
      long long2 = 1563L;
      longArray0[6] = long2;
      tByteLongHashMap2.values(longArray0);
      // Undeclared exception!
      try {
        tByteLongHashMap2.writeExternal(objectOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-65);
      byteArray0[0] = byte0;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) byteArray0[0];
      longArray0[3] = (long) byte0;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(byteArray0, longArray0);
      tByteLongHashMap0.ensureCapacity((int) byteArray0[0]);
      assertEquals(11, tByteLongHashMap0.capacity());
      assertEquals("{-65=-65}", tByteLongHashMap0.toString());
      
      int int0 = 0;
      byte byte1 = (byte)74;
      long long0 = 985L;
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap(int0, (float) int0, byte1, long0);
      tByteLongHashMap1.capacity();
      assertFalse(tByteLongHashMap1.equals(tByteLongHashMap0));
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)100;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-114);
      byteArray0[1] = byte1;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) byte1;
      longArray0[3] = (long) byteArray0[0];
      longArray0[4] = (long) byteArray0[0];
      longArray0[5] = (long) byte1;
      longArray0[6] = (long) byte0;
      byte byte2 = (byte) (-65);
      long long0 = (-1943L);
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap((int) byteArray0[0], (float) longArray0[3], byte2, long0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = byte2;
      byteArray1[1] = byte0;
      byteArray1[2] = byte0;
      byteArray1[3] = byte1;
      byte byte3 = (byte) (-7);
      byteArray1[4] = byte3;
      byteArray1[5] = byte1;
      byte byte4 = (byte)58;
      byteArray1[6] = byte4;
      tByteLongHashMap0._set = byteArray1;
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap(byteArray0, longArray0);
      assertEquals(17, tByteLongHashMap1.capacity());
      
      tByteLongHashMap1._states = byteArray0;
      assertEquals(2, tByteLongHashMap1.size());
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      byte byte0 = (byte)100;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int0, (float) int0, byte0, (long) int0);
      TByteLongHashMap tByteLongHashMap1 = null;
      try {
        tByteLongHashMap1 = new TByteLongHashMap((TByteLongMap) tByteLongHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 2003;
      float float0 = 1942.0525F;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int0, float0);
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap((TByteLongMap) tByteLongHashMap0);
      float float1 = (-1517.9547F);
      // Undeclared exception!
      try {
        tByteLongHashMap1.setAutoCompactionFactor(float1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1517.9547
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-7);
      int int0 = 22;
      float float0 = 10.0F;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int0, float0);
      byte byte1 = (byte) (-105);
      long long0 = (-1467L);
      boolean boolean0 = tByteLongHashMap0.adjustValue(byte1, long0);
      assertEquals(false, boolean0);
      assertEquals(3, tByteLongHashMap0.capacity());
      
      byteArray0[0] = byte0;
      long[] longArray0 = new long[8];
      long long1 = (-526L);
      longArray0[0] = long1;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) byteArray0[0];
      longArray0[4] = (long) byteArray0[0];
      longArray0[5] = (long) byteArray0[0];
      longArray0[6] = (long) byte0;
      longArray0[7] = (long) byteArray0[0];
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap(byteArray0, longArray0);
      assertEquals("{-7=-526}", tByteLongHashMap1.toString());
      assertEquals(17, tByteLongHashMap1.capacity());
      
      int int1 = 1039;
      byte byte2 = (byte) (-110);
      long long2 = (-88L);
      TByteLongHashMap tByteLongHashMap2 = new TByteLongHashMap(int1, (float) int1, byte2, long2);
      String string0 = tByteLongHashMap2.toString();
      assertFalse(tByteLongHashMap2.equals(tByteLongHashMap1));
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      long[] longArray0 = new long[10];
      longArray0[0] = (long) byteArray0[0];
      long long0 = 1956L;
      longArray0[1] = long0;
      longArray0[2] = (long) byteArray0[0];
      longArray0[3] = (long) byteArray0[0];
      longArray0[4] = (long) byte0;
      longArray0[5] = (long) byteArray0[0];
      long long1 = (-1L);
      longArray0[6] = long1;
      long long2 = 1118L;
      longArray0[7] = long2;
      longArray0[8] = (long) byte0;
      longArray0[9] = (long) byteArray0[0];
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(byteArray0, longArray0);
      tByteLongHashMap0.toString();
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap();
      int int0 = 424;
      float float0 = 1.0F;
      tByteLongHashMap1.tempDisableAutoCompaction();
      TByteLongHashMap tByteLongHashMap2 = new TByteLongHashMap(int0, float0);
      float float1 = 0.0F;
      tByteLongHashMap1.setAutoCompactionFactor(float1);
      byte byte1 = (byte)1;
      long long3 = (-1L);
      tByteLongHashMap2.putIfAbsent(byte1, long3);
      tByteLongHashMap1.contains(byte1);
      TByteLongMap tByteLongMap0 = null;
      TByteLongHashMap tByteLongHashMap3 = null;
      try {
        tByteLongHashMap3 = new TByteLongHashMap(tByteLongMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 1;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int0);
      byte byte0 = (byte) (-20);
      tByteLongHashMap0.get(byte0);
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap((TByteLongMap) tByteLongHashMap0);
      tByteLongHashMap1.clear();
      TByteLongHashMap tByteLongHashMap2 = new TByteLongHashMap(int0);
      byte byte1 = (byte)31;
      long long0 = 0L;
      byte[] byteArray0 = tByteLongHashMap2._states;
      tByteLongHashMap1.putIfAbsent(byte1, long0);
      boolean boolean0 = tByteLongHashMap0.contains(byte1);
      byte byte2 = (byte) (-91);
      byte[] byteArray1 = new byte[5];
      tByteLongHashMap2.reenableAutoCompaction(boolean0);
      tByteLongHashMap0.toString();
      byteArray1[0] = byte2;
      byteArray1[1] = byte2;
      Locale locale0 = Locale.getDefault();
      String string0 = "";
      // Undeclared exception!
      try {
        locale0.getUnicodeLocaleType(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
      }
  }

//   @Test
//   public void test8()  throws Throwable  {
//       byte[] byteArray0 = new byte[8];
//       byte byte0 = (byte)25;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte) (-49);
//       byteArray0[1] = byte1;
//       byte byte2 = (byte) (-56);
//       byteArray0[2] = byte2;
//       byte byte3 = (byte)0;
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)125;
//       byteArray0[4] = byte4;
//       byte byte5 = (byte)53;
//       byteArray0[5] = byte5;
//       byte byte6 = (byte)0;
//       byteArray0[6] = byte6;
//       byte byte7 = (byte)0;
//       byteArray0[7] = byte7;
//       long[] longArray0 = new long[7];
//       longArray0[0] = (long) byteArray0[7];
//       longArray0[1] = (long) byteArray0[6];
//       longArray0[2] = (long) byteArray0[6];
//       longArray0[3] = (long) byte7;
//       longArray0[4] = (long) byte1;
//       longArray0[5] = (long) byteArray0[0];
//       longArray0[6] = (long) byte2;
//       TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(byteArray0, longArray0);
//       TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap((TByteLongMap) tByteLongHashMap0);
//       long[] longArray1 = tByteLongHashMap1.values(longArray0);
//       assertEquals("{-49=0, 25=0, 125=-49, -56=0, 53=25, 0=-56}", tByteLongHashMap0.toString());
//       assertEquals(0L, tByteLongHashMap1.getNoEntryValue());
//       assertEquals("{-56=0, 125=-49, 53=25, -49=0, 25=0, 0=-56}", tByteLongHashMap1.toString());
//       assertEquals(6, tByteLongHashMap0.size());
//       assertSame(longArray1, longArray0);
//       assertEquals(0, tByteLongHashMap1.getNoEntryKey());
//       assertNotNull(longArray1);
//   }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 476;
      byte byte0 = (byte)77;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int0, (float) int0, byte0, (long) int0);
      tByteLongHashMap0.valueCollection();
      tByteLongHashMap0.toString();
      Map.Entry<Integer, Byte> map_Entry0 = null;
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = null;
      try {
        abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(map_Entry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 35863;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-1);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)12;
      byteArray0[2] = byte2;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap((int) byteArray0[1]);
      byte[] byteArray1 = tByteLongHashMap0.keys(byteArray0);
      assertNotNull(byteArray1);
      
      byte byte3 = (byte)17;
      byteArray0[3] = byte3;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) byte1;
      longArray0[1] = (long) byteArray0[0];
      longArray0[2] = (long) byte1;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) byteArray0[1];
      longArray0[5] = (long) byteArray0[0];
      longArray0[6] = (long) byte1;
      longArray0[7] = (long) byteArray0[0];
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap(byteArray0, longArray0);
      int int1 = tByteLongHashMap1.hashCode();
      assertSame(byteArray0, byteArray1);
      assertEquals(35857, int1);
      
      float float0 = 822.20386F;
      byte byte4 = (byte) (-33);
      TByteLongHashMap tByteLongHashMap2 = new TByteLongHashMap(int0, float0, byte4, (long) byte4);
      assertEquals(47, tByteLongHashMap2.capacity());
      assertFalse(tByteLongHashMap2.equals(tByteLongHashMap1));
  }

  @Test
  public void test11()  throws Throwable  {
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap();
      tByteLongHashMap0.tempDisableAutoCompaction();
      assertEquals(23, tByteLongHashMap0.capacity());
  }

  @Test
  public void test12()  throws Throwable  {
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap();
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap((TByteLongMap) tByteLongHashMap0);
      tByteLongHashMap0.getAutoCompactionFactor();
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap();
      int int0 = tByteLongHashMap0.size();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1660;
      float float0 = 0.0F;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(int0, float0);
      tByteLongHashMap0.getNoEntryKey();
      long[] longArray0 = new long[4];
      int int1 = 226379;
      tByteLongHashMap0.ensureCapacity(int1);
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      tByteLongHashMap0.values(longArray0);
      int int2 = 0;
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap(int2, int2);
      byte byte0 = (byte)29;
      TByteLongProcedure tByteLongProcedure0 = null;
      tByteLongHashMap1.forEachEntry(tByteLongProcedure0);
      long long0 = tByteLongHashMap0.putIfAbsent(byte0, byte0);
      assertEquals(7, tByteLongHashMap0.capacity());
      assertEquals(0L, long0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "VgVPpY>w^CyA";
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(string0, string0);
      // Undeclared exception!
      try {
        abstractMap_SimpleImmutableEntry0.setValue(string0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-118);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-15);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)46;
      byteArray0[3] = byte3;
      byte byte4 = (byte)34;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-8);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-96);
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) byteArray0[3];
      long long0 = 897L;
      longArray0[1] = long0;
      longArray0[2] = (long) byteArray0[3];
      longArray0[3] = (long) byteArray0[3];
      longArray0[4] = (long) byteArray0[4];
      long long1 = (-1673L);
      longArray0[5] = long1;
      TByteLongHashMap tByteLongHashMap0 = new TByteLongHashMap(byteArray0, longArray0);
      TByteLongHashMap tByteLongHashMap1 = new TByteLongHashMap((TByteLongMap) tByteLongHashMap0);
      long long2 = 787L;
      long long3 = tByteLongHashMap1.adjustOrPutValue(byte6, (long) byteArray0[3], long2);
      assertEquals("{0=46, -8=-1673, -15=897, 34=34, -118=46, -96=787, 46=46}", tByteLongHashMap1.toString());
      assertEquals(787L, long3);
  }
}
