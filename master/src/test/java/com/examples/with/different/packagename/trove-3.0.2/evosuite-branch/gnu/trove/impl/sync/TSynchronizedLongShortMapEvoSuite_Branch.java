/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TShortFunction;
import gnu.trove.impl.sync.TSynchronizedLongSet;
import gnu.trove.impl.sync.TSynchronizedLongShortMap;
import gnu.trove.impl.sync.TSynchronizedShortCollection;
import gnu.trove.iterator.TLongShortIterator;
import gnu.trove.map.TLongShortMap;
import gnu.trove.map.hash.TLongShortHashMap;
import gnu.trove.procedure.TLongProcedure;
import gnu.trove.procedure.TLongShortProcedure;
import gnu.trove.procedure.TShortProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedLongShortMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.toString()Ljava/lang/String;: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedLongShortMap.<init>(Lgnu/trove/map/TLongShortMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(174, 174);
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      String string0 = tSynchronizedLongShortMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.clear()V: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      tSynchronizedLongShortMap0.clear();
      assertEquals(true, tSynchronizedLongShortMap0.isEmpty());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.putAll(Lgnu/trove/map/TLongShortMap;)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      tSynchronizedLongShortMap0.putAll((TLongShortMap) tLongShortHashMap0);
      assertEquals(0L, tLongShortHashMap0.getNoEntryKey());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.size()I: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      int int0 = tSynchronizedLongShortMap0.size();
      assertEquals(0, int0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.increment(J)Z: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      boolean boolean0 = tSynchronizedLongShortMap0.increment((long) (short)0);
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.adjustValue(JS)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedLongShortMap.<init>(Lgnu/trove/map/TLongShortMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(32767, (float) 32767, (long) 32767, (short) (-203));
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0, (Object) "");
      boolean boolean0 = tSynchronizedLongShortMap0.adjustValue((long) (short) (-203), (short) (-203));
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(32767, (float) 32767, (long) 32767, (short) (-203));
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0, (Object) "");
      boolean boolean0 = tSynchronizedLongShortMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      HashMap<Long, Short> hashMap0 = new HashMap<Long, Short>();
      tSynchronizedLongShortMap0.putAll((Map<? extends Long, ? extends Short>) hashMap0);
      assertEquals(0, tSynchronizedLongShortMap0.size());
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.values([S)[S: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      short[] shortArray0 = new short[15];
      short[] shortArray1 = tSynchronizedLongShortMap0.values(shortArray0);
      assertSame(shortArray0, shortArray1);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.retainEntries(Lgnu/trove/procedure/TLongShortProcedure;)Z: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(32767, (float) 32767, (long) 32767, (short) (-203));
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0, (Object) "");
      boolean boolean0 = tSynchronizedLongShortMap0.retainEntries((TLongShortProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.transformValues(Lgnu/trove/function/TShortFunction;)V: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      tSynchronizedLongShortMap0.transformValues((TShortFunction) null);
      assertEquals(0, tSynchronizedLongShortMap0.size());
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.adjustOrPutValue(JSS)S: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(32767, (float) 32767, (long) 32767, (short) (-203));
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0, (Object) "");
      short short0 = tSynchronizedLongShortMap0.adjustOrPutValue((long) (short) (-203), (short) (-203), (short) (-203));
      assertEquals(false, tLongShortHashMap0.isEmpty());
      assertEquals((short) (-203), short0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.getNoEntryKey()J: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      long long0 = tSynchronizedLongShortMap0.getNoEntryKey();
      assertEquals(0L, long0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.forEachValue(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      boolean boolean0 = tSynchronizedLongShortMap0.forEachValue((TShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.get(J)S: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      short short0 = tSynchronizedLongShortMap0.get((long) (-23));
      assertEquals((short)0, short0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.keys([J)[J: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(174, 174);
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      long[] longArray0 = tSynchronizedLongShortMap0.keys(tLongShortHashMap0._set);
      assertNotNull(longArray0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.equals(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(174, 174);
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      boolean boolean0 = tSynchronizedLongShortMap0.equals((Object) "{}");
      assertEquals(false, boolean0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.put(JS)S: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      tSynchronizedLongShortMap0.put((long) (short)4, (short)4);
      assertEquals(false, tLongShortHashMap0.isEmpty());
      assertEquals("{4=4}", tSynchronizedLongShortMap0.toString());
  }

  //Test case number: 18
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.getNoEntryValue()S: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedLongShortMap.<init>(Lgnu/trove/map/TLongShortMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(32767, (float) 32767, (long) 32767, (short) (-203));
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0, (Object) "");
      short short0 = tSynchronizedLongShortMap0.getNoEntryValue();
      assertEquals((short) (-203), short0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.containsValue(S)Z: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(174, 174);
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      boolean boolean0 = tSynchronizedLongShortMap0.containsValue((short)706);
      assertEquals(false, boolean0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.putIfAbsent(JS)S: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      tSynchronizedLongShortMap0.putIfAbsent((long) (-23), (short)0);
      assertEquals(1, tLongShortHashMap0.size());
      assertEquals("{-23=0}", tLongShortHashMap0.toString());
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.keys()[J: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      long[] longArray0 = tSynchronizedLongShortMap0.keys();
      assertNotNull(longArray0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.hashCode()I: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      int int0 = tSynchronizedLongShortMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.iterator()Lgnu/trove/iterator/TLongShortIterator;: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      TLongShortIterator tLongShortIterator0 = tSynchronizedLongShortMap0.iterator();
      assertEquals(false, tLongShortIterator0.hasNext());
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.forEachEntry(Lgnu/trove/procedure/TLongShortProcedure;)Z: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap((int) (short) (-35));
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      boolean boolean0 = tSynchronizedLongShortMap0.forEachEntry((TLongShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.values()[S: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      short[] shortArray0 = tSynchronizedLongShortMap0.values();
      assertNotNull(shortArray0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.remove(J)S: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap((int) (short) (-35));
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      short short0 = tSynchronizedLongShortMap0.remove((long) (short) (-35));
      assertEquals((short)0, short0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.containsKey(J)Z: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      boolean boolean0 = tSynchronizedLongShortMap0.containsKey((long) (short)0);
      assertEquals(false, boolean0);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.forEachKey(Lgnu/trove/procedure/TLongProcedure;)Z: root-Branch
   */

  @Test
  public void test28()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      boolean boolean0 = tSynchronizedLongShortMap0.forEachKey((TLongProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.<init>(Lgnu/trove/map/TLongShortMap;)V: I17 Branch 1 IFNONNULL L59 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = null;
      try {
        tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.keySet()Lgnu/trove/set/TLongSet;: I11 Branch 2 IFNONNULL L107 - true
   * 2 gnu.trove.impl.sync.TSynchronizedLongShortMap.keySet()Lgnu/trove/set/TLongSet;: I11 Branch 2 IFNONNULL L107 - false
   */

  @Test
  public void test30()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap();
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      TSynchronizedLongSet tSynchronizedLongSet0 = (TSynchronizedLongSet)tSynchronizedLongShortMap0.keySet();
      assertNotNull(tSynchronizedLongSet0);
      
      TSynchronizedLongSet tSynchronizedLongSet1 = (TSynchronizedLongSet)tSynchronizedLongShortMap0.keySet();
      assertSame(tSynchronizedLongSet1, tSynchronizedLongSet0);
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedLongShortMap.valueCollection()Lgnu/trove/TShortCollection;: I11 Branch 3 IFNONNULL L121 - true
   * 2 gnu.trove.impl.sync.TSynchronizedLongShortMap.valueCollection()Lgnu/trove/TShortCollection;: I11 Branch 3 IFNONNULL L121 - false
   * 3 gnu.trove.impl.sync.TSynchronizedLongShortMap.<init>(Lgnu/trove/map/TLongShortMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test31()  throws Throwable  {
      TLongShortHashMap tLongShortHashMap0 = new TLongShortHashMap(174, 174);
      TSynchronizedLongShortMap tSynchronizedLongShortMap0 = new TSynchronizedLongShortMap((TLongShortMap) tLongShortHashMap0);
      TSynchronizedShortCollection tSynchronizedShortCollection0 = (TSynchronizedShortCollection)tSynchronizedLongShortMap0.valueCollection();
      assertNotNull(tSynchronizedShortCollection0);
      
      TSynchronizedShortCollection tSynchronizedShortCollection1 = (TSynchronizedShortCollection)tSynchronizedLongShortMap0.valueCollection();
      assertSame(tSynchronizedShortCollection1, tSynchronizedShortCollection0);
  }
}
