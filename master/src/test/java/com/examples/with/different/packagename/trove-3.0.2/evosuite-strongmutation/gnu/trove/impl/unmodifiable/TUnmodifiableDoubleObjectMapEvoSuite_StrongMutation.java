/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleSet;
import gnu.trove.map.TDoubleObjectMap;
import gnu.trove.map.hash.TDoubleObjectHashMap;
import gnu.trove.procedure.TDoubleObjectProcedure;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import java.util.Collection;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableDoubleObjectMapEvoSuite_StrongMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 Strong Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.size()I:58 - DeleteStatement: size()I
   * 2 Strong Mutation 10: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.size()I:58 - DeleteStatement: size()I
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.size()I: root-Branch
   * 4 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.<init>(Lgnu/trove/map/TDoubleObjectMap;)V: I17 Branch 1 IFNONNULL L53 - true
   */

//   @Test
//   public void test0()  throws Throwable  {
//       TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>(0);
//       TDoubleObjectHashMap<Object> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Object>((TDoubleObjectMap<?>) tDoubleObjectHashMap0);
//       TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap1);
//       tUnmodifiableDoubleObjectMap0.size();
//       TUnmodifiableDoubleObjectMap<Integer> tUnmodifiableDoubleObjectMap1 = new TUnmodifiableDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap0);
//       tDoubleObjectHashMap0.put(0.0, (Integer) (-479));
//       // Undeclared exception!
//       try {
//         tUnmodifiableDoubleObjectMap1.get((double) (Double) null);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  //Test case number: 1
  /*
   * 3 covered goals:
   * 1 Strong Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.isEmpty()Z:59 - DeleteStatement: isEmpty()Z
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.isEmpty()Z: root-Branch
   * 3 Strong Mutation 12: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.isEmpty()Z:59 - DeleteStatement: isEmpty()Z
   */

  @Test
  public void test1()  throws Throwable  {
      TDoubleObjectHashMap<String> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<String>(0, 0, 0);
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Object>((TDoubleObjectMap<?>) tDoubleObjectHashMap0);
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap1);
      boolean boolean0 = tUnmodifiableDoubleObjectMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 Strong Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.containsValue(Ljava/lang/Object;)Z:61 - DeleteStatement: containsValue(Ljava/lang/Object;)Z
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.containsValue(Ljava/lang/Object;)Z: root-Branch
   * 3 Strong Mutation 17: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.containsValue(Ljava/lang/Object;)Z:61 - DeleteStatement: containsValue(Ljava/lang/Object;)Z
   */

  @Test
  public void test2()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>();
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      tDoubleObjectHashMap0.putIfAbsent((double) 0, (Object) null);
      boolean boolean0 = tUnmodifiableDoubleObjectMap0.containsValue((Object) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 Strong Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.containsValue(Ljava/lang/Object;)Z:61 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 2 Strong Mutation 16: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.containsValue(Ljava/lang/Object;)Z:61 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   */

  @Test
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      objectArray0[1] = (Object) 1527.0499F;
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>(219, 219);
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      tUnmodifiableDoubleObjectMap0.containsValue(objectArray0[9]);
      objectArray0[1] = (Object) (-1.0F);
  }

  //Test case number: 4
  /*
   * 4 covered goals:
   * 1 Strong Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.get(D)Ljava/lang/Object;:62 - InsertUnaryOp Negation of key
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.get(D)Ljava/lang/Object;: root-Branch
   * 3 Strong Mutation 19: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.get(D)Ljava/lang/Object;:62 - InsertUnaryOp Negation of key
   * 4 Strong Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.get(D)Ljava/lang/Object;:62 - DeleteStatement: get(D)Ljava/lang/Object;
   */

  @Test
  public void test4()  throws Throwable  {
      TDoubleObjectHashMap<String> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<String>();
      tDoubleObjectHashMap0.put(1675.457348328071, ">py(T$%y294s^");
      TUnmodifiableDoubleObjectMap<String> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<String>((TDoubleObjectMap<String>) tDoubleObjectHashMap0);
      tUnmodifiableDoubleObjectMap0.get((-445.48575684813045));
      TUnmodifiableDoubleObjectMap<String> tUnmodifiableDoubleObjectMap1 = new TUnmodifiableDoubleObjectMap<String>((TDoubleObjectMap<String>) tDoubleObjectHashMap0);
      assertTrue(tUnmodifiableDoubleObjectMap1.equals(tUnmodifiableDoubleObjectMap0));
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 Strong Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.get(D)Ljava/lang/Object;:62 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 2 Strong Mutation 18: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.get(D)Ljava/lang/Object;:62 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   */

  @Test
  public void test5()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>(215, 1635.8096F, (-743.3858221823351));
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      objectArray0[1] = (Object) 1527.0499F;
      tUnmodifiableDoubleObjectMap0.get((-328.05309622014));
      objectArray0[1] = (Object) (-1.0F);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 Strong Mutation 20: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.get(D)Ljava/lang/Object;:62 - DeleteStatement: get(D)Ljava/lang/Object;
   */

  @Test
  public void test6()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>();
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Object>((TDoubleObjectMap<?>) tDoubleObjectHashMap0);
      tDoubleObjectHashMap1.putIfAbsent(0.0, (Object) "");
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap1);
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap1 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tUnmodifiableDoubleObjectMap0);
      tUnmodifiableDoubleObjectMap1.get((-634.1134607443123));
      assertTrue(tUnmodifiableDoubleObjectMap0.equals(tUnmodifiableDoubleObjectMap1));
  }

  //Test case number: 7
  /*
   * 5 covered goals:
   * 1 Strong Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keys()[D:78 - DeleteStatement: keys()[D
   * 2 Strong Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keys()[D:78 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 3 Strong Mutation 27: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keys()[D:78 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 4 Strong Mutation 28: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keys()[D:78 - DeleteStatement: keys()[D
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keys()[D: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TDoubleObjectHashMap<String> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<String>((-1647));
      TUnmodifiableDoubleObjectMap<String> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<String>((TDoubleObjectMap<String>) tDoubleObjectHashMap0);
      double[] doubleArray0 = tUnmodifiableDoubleObjectMap0.keys();
      assertNotNull(doubleArray0);
  }

  //Test case number: 8
  /*
   * 5 covered goals:
   * 1 Strong Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keys([D)[D:79 - DeleteStatement: keys([D)[D
   * 2 Strong Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keys([D)[D:79 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 3 Strong Mutation 29: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keys([D)[D:79 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 4 Strong Mutation 30: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keys([D)[D:79 - DeleteStatement: keys([D)[D
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keys([D)[D: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>();
      TDoubleObjectHashMap<String> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<String>((-1225), (-1225));
      TUnmodifiableDoubleObjectMap<String> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<String>((TDoubleObjectMap<String>) tDoubleObjectHashMap1);
      double[] doubleArray0 = tUnmodifiableDoubleObjectMap0.keys(tDoubleObjectHashMap0._set);
      assertNotNull(doubleArray0);
  }

  //Test case number: 9
  /*
   * 5 covered goals:
   * 1 Strong Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.values()[Ljava/lang/Object;:86 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 2 Strong Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.values()[Ljava/lang/Object;:86 - DeleteStatement: values()[Ljava/lang/Object;
   * 3 Strong Mutation 38: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.values()[Ljava/lang/Object;:86 - DeleteStatement: values()[Ljava/lang/Object;
   * 4 Strong Mutation 37: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.values()[Ljava/lang/Object;:86 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.values()[Ljava/lang/Object;: root-Branch
   */

//   @Test
//   public void test9()  throws Throwable  {
//       TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>(0);
//       TUnmodifiableDoubleObjectMap<Integer> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap0);
//       Integer[] integerArray0 = tUnmodifiableDoubleObjectMap0.values();
//       assertNotNull(integerArray0);
//   }

  //Test case number: 10
  /*
   * 5 covered goals:
   * 1 Strong Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteStatement: values([Ljava/lang/Object;)[Ljava/lang/Object;
   * 2 Strong Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 3 Strong Mutation 39: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 4 Strong Mutation 40: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;:87 - DeleteStatement: values([Ljava/lang/Object;)[Ljava/lang/Object;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>();
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      Double[] doubleArray0 = new Double[4];
      Double[] doubleArray1 = tUnmodifiableDoubleObjectMap0.values(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
  }

  //Test case number: 11
  /*
   * 7 covered goals:
   * 1 Strong Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - false
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - true
   * 4 Strong Mutation 42: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 5 Strong Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 6 Strong Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 0 -> 1
   * 7 Strong Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   */

  @Test
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      objectArray0[1] = (Object) 1527.0499F;
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>(219, 219);
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      tUnmodifiableDoubleObjectMap0.equals((Object) ":");
      objectArray0[1] = (Object) (-1.0F);
  }

  //Test case number: 12
  /*
   * 3 covered goals:
   * 1 Strong Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 2 Strong Mutation 41: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 3 Strong Mutation 46: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 0 -> 1
   */

  @Test
  public void test12()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>((-18), (-18), (-18));
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      boolean boolean0 = tUnmodifiableDoubleObjectMap0.equals((Object) "\uC774\uD0C8\uB9AC\uC544\uC5B4");
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 7 covered goals:
   * 1 Strong Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 1 -> 0
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - true
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - false
   * 4 Strong Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 5 Strong Mutation 44: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator == -> !=
   * 6 Strong Mutation 43: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 7 Strong Mutation 45: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z:89 - ReplaceConstant - 1 -> 0
   */

  @Test
  public void test13()  throws Throwable  {
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>(1254, 1527.0499F, (-1.0));
      TUnmodifiableDoubleObjectMap<Integer> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap0);
      boolean boolean0 = tUnmodifiableDoubleObjectMap0.equals((Object) tDoubleObjectHashMap0);
      assertEquals(true, boolean0);
  }

  //Test case number: 14
  /*
   * 3 covered goals:
   * 1 Strong Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.hashCode()I:90 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.hashCode()I: root-Branch
   * 3 Strong Mutation 47: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.hashCode()I:90 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   */

  @Test
  public void test14()  throws Throwable  {
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>(1254, 1527.0499F, (-1.0));
      TUnmodifiableDoubleObjectMap<Integer> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap0);
      Object[] objectArray0 = new Object[10];
      objectArray0[1] = (Object) 1527.0499F;
      tUnmodifiableDoubleObjectMap0.hashCode();
      objectArray0[1] = (Object) (-1.0F);
  }

  //Test case number: 15
  /*
   * 5 covered goals:
   * 1 Strong Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.toString()Ljava/lang/String;:91 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 2 Strong Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.toString()Ljava/lang/String;:91 - DeleteStatement: toString()Ljava/lang/String;
   * 3 Strong Mutation 50: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.toString()Ljava/lang/String;:91 - DeleteStatement: toString()Ljava/lang/String;
   * 4 Strong Mutation 49: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.toString()Ljava/lang/String;:91 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>((-18), (-18), (-18));
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      String string0 = tUnmodifiableDoubleObjectMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 16
  /*
   * 3 covered goals:
   * 1 Strong Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.getNoEntryKey()D:92 - DeleteStatement: getNoEntryKey()D
   * 2 Strong Mutation 52: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.getNoEntryKey()D:92 - DeleteStatement: getNoEntryKey()D
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.getNoEntryKey()D: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>((-18), (-18), (-18));
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Integer>();
      TUnmodifiableDoubleObjectMap<Integer> tUnmodifiableDoubleObjectMap1 = new TUnmodifiableDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap1);
      double double0 = tUnmodifiableDoubleObjectMap1.getNoEntryKey();
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 17
  /*
   * 3 covered goals:
   * 1 Strong Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z:95 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   * 3 Strong Mutation 54: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z:95 - DeleteStatement: forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z
   */

  @Test
  public void test17()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>((-18), (-18), (-18));
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      boolean boolean0 = tUnmodifiableDoubleObjectMap0.forEachKey((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 18
  /*
   * 4 covered goals:
   * 1 Strong Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   * 3 Strong Mutation 55: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 4 Strong Mutation 56: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z
   */

  @Test
  public void test18()  throws Throwable  {
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>(1254, 1527.0499F, (-1.0));
      TUnmodifiableDoubleObjectMap<Integer> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap0);
      Object[] objectArray0 = new Object[10];
      objectArray0[1] = (Object) 1527.0499F;
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(objectArray0);
      tUnmodifiableDoubleObjectMap0.forEachValue((TObjectProcedure<? super Integer>) toObjectArrayProceedure0);
      objectArray0[1] = (Object) (-1.0F);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 Strong Mutation 56: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z:98 - DeleteStatement: forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z
   */

  @Test
  public void test19()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>((-18), (-18), (-18));
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      Object[] objectArray0 = new Object[5];
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(objectArray0);
      boolean boolean0 = tUnmodifiableDoubleObjectMap0.forEachValue((TObjectProcedure<? super Object>) toObjectArrayProceedure0);
      assertEquals(true, boolean0);
  }

  //Test case number: 20
  /*
   * 3 covered goals:
   * 1 Strong Mutation 58: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachEntry(Lgnu/trove/procedure/TDoubleObjectProcedure;)Z:101 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TDoubleObjectProcedure;)Z
   * 2 Strong Mutation 58: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachEntry(Lgnu/trove/procedure/TDoubleObjectProcedure;)Z:101 - DeleteStatement: forEachEntry(Lgnu/trove/procedure/TDoubleObjectProcedure;)Z
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachEntry(Lgnu/trove/procedure/TDoubleObjectProcedure;)Z: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>((-1634), (-191.9968F));
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      boolean boolean0 = tUnmodifiableDoubleObjectMap0.forEachEntry((TDoubleObjectProcedure<? super Double>) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 21
  /*
   * 6 covered goals:
   * 1 Strong Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachEntry(Lgnu/trove/procedure/TDoubleObjectProcedure;)Z:101 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 2 Strong Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.size()I:58 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 3 Strong Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.getNoEntryKey()D:92 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 4 Strong Mutation 9: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.size()I:58 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 5 Strong Mutation 51: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.getNoEntryKey()D:92 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 6 Strong Mutation 57: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachEntry(Lgnu/trove/procedure/TDoubleObjectProcedure;)Z:101 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   */

  @Test
  public void test21()  throws Throwable  {
      TDoubleObjectHashMap<String> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<String>((-1225), (-1225));
      TUnmodifiableDoubleObjectMap<String> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<String>((TDoubleObjectMap<String>) tDoubleObjectHashMap0);
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Object>((TDoubleObjectMap<?>) tUnmodifiableDoubleObjectMap0);
      assertEquals(true, tDoubleObjectHashMap1.isEmpty());
  }

  //Test case number: 22
  /*
   * 12 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;: I4 Branch 2 IFNONNULL L74 - true
   * 2 Strong Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;:75 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 3 Strong Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;:74 - ReplaceComparisonOperator != null -> = null
   * 4 Strong Mutation 25: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;:75 - DeleteStatement: unmodifiableSet(Lgnu/trove/set/TDoubleSet;)Lgnu/trove/set/TDoubleSet;
   * 5 Strong Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;:75 - DeleteStatement: keySet()Lgnu/trove/set/TDoubleSet;
   * 6 Strong Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;:76 - DeleteField: keySetLgnu/trove/set/TDoubleSet;
   * 7 Strong Mutation 23: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;:75 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 8 Strong Mutation 22: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;:74 - ReplaceComparisonOperator != null -> = null
   * 9 Strong Mutation 25: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;:75 - DeleteStatement: unmodifiableSet(Lgnu/trove/set/TDoubleSet;)Lgnu/trove/set/TDoubleSet;
   * 10 Strong Mutation 24: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;:75 - DeleteStatement: keySet()Lgnu/trove/set/TDoubleSet;
   * 11 Strong Mutation 26: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;:76 - DeleteField: keySetLgnu/trove/set/TDoubleSet;
   * 12 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;: I4 Branch 2 IFNONNULL L74 - false
   */

  @Test
  public void test22()  throws Throwable  {
      TDoubleObjectHashMap<String> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<String>(0, 0);
      TUnmodifiableDoubleObjectMap<String> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<String>((TDoubleObjectMap<String>) tDoubleObjectHashMap0);
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = (TUnmodifiableDoubleSet)tUnmodifiableDoubleObjectMap0.keySet();
      assertNotNull(tUnmodifiableDoubleSet0);
      
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet1 = (TUnmodifiableDoubleSet)tUnmodifiableDoubleObjectMap0.keySet();
      assertSame(tUnmodifiableDoubleSet1, tUnmodifiableDoubleSet0);
  }

  //Test case number: 23
  /*
   * 13 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;: I4 Branch 3 IFNONNULL L82 - true
   * 2 Strong Mutation 8: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.<init>(Lgnu/trove/map/TDoubleObjectMap;)V:53 - ReplaceComparisonOperator != null -> = null
   * 3 Strong Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: valueCollection()Ljava/util/Collection;
   * 4 Strong Mutation 35: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: unmodifiableCollection(Ljava/util/Collection;)Ljava/util/Collection;
   * 5 Strong Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;:82 - ReplaceComparisonOperator != null -> = null
   * 6 Strong Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 7 Strong Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;:84 - DeleteField: valuesLjava/util/Collection;
   * 8 Strong Mutation 34: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: valueCollection()Ljava/util/Collection;
   * 9 Strong Mutation 35: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteStatement: unmodifiableCollection(Ljava/util/Collection;)Ljava/util/Collection;
   * 10 Strong Mutation 32: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;:82 - ReplaceComparisonOperator != null -> = null
   * 11 Strong Mutation 33: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;:83 - DeleteField: mLgnu/trove/map/TDoubleObjectMap;
   * 12 Strong Mutation 36: gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;:84 - DeleteField: valuesLjava/util/Collection;
   * 13 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;: I4 Branch 3 IFNONNULL L82 - false
   */

  @Test
  public void test23()  throws Throwable  {
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>(2);
      TUnmodifiableDoubleObjectMap<Integer> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap0);
      Collection<Integer> collection0 = tUnmodifiableDoubleObjectMap0.valueCollection();
      assertNotNull(collection0);
      
      Collection<Integer> collection1 = tUnmodifiableDoubleObjectMap0.valueCollection();
      assertSame(collection1, collection0);
  }
}
