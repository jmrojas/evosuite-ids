/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TDoubleCollection;
import gnu.trove.function.TDoubleFunction;
import gnu.trove.map.TLongDoubleMap;
import gnu.trove.map.hash.TLongDoubleHashMap;
import gnu.trove.procedure.TLongDoubleProcedure;
import gnu.trove.procedure.TLongProcedure;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.StringTokenizer;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TLongDoubleHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 1968;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      longArray0[6] = (long) int0;
      longArray0[7] = (long) int0;
      longArray0[8] = (long) int0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) longArray0[7];
      doubleArray0[1] = (double) longArray0[7];
      doubleArray0[2] = (double) longArray0[4];
      doubleArray0[3] = (double) longArray0[7];
      doubleArray0[4] = (double) longArray0[0];
      doubleArray0[5] = (double) longArray0[7];
      doubleArray0[6] = (double) longArray0[8];
      doubleArray0[7] = (double) longArray0[4];
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(longArray0, doubleArray0);
      tLongDoubleHashMap0.iterator();
      assertEquals(1, tLongDoubleHashMap0.size());
      assertEquals(23, tLongDoubleHashMap0.capacity());
      assertEquals("{1968=1968.0}", tLongDoubleHashMap0.toString());
      
      double double0 = 1391.5772197681038;
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap(int0, (float) int0, (long) int0, double0);
      tLongDoubleHashMap1.valueCollection();
      assertFalse(tLongDoubleHashMap1.equals(tLongDoubleHashMap0));
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 96;
      int int1 = 0;
      float float0 = 1748.1768F;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(int1, float0, (long) int0, (double) int1);
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap((TLongDoubleMap) tLongDoubleHashMap0);
      TLongDoubleHashMap tLongDoubleHashMap2 = new TLongDoubleHashMap(int0, int0);
      tLongDoubleHashMap2.capacity();
      TLongDoubleHashMap tLongDoubleHashMap3 = new TLongDoubleHashMap();
      long long0 = (-189L);
      tLongDoubleHashMap2.keys();
      String string0 = "{";
      boolean boolean0 = true;
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0, boolean0);
      String string1 = stringTokenizer0.nextToken(string0);
      tLongDoubleHashMap3.equals((Object) string1);
      double double0 = (-1310.142524867125);
      tLongDoubleHashMap3.put(long0, double0);
      tLongDoubleHashMap3.toString();
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 0;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) longArray0[0];
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(int0);
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap((TLongDoubleMap) tLongDoubleHashMap0);
      tLongDoubleHashMap1.putAll((TLongDoubleMap) tLongDoubleHashMap0);
      doubleArray0[1] = (double) int0;
      TLongDoubleHashMap tLongDoubleHashMap2 = new TLongDoubleHashMap(longArray0, doubleArray0);
      tLongDoubleHashMap2.size();
      int int1 = (-815);
      TLongDoubleHashMap tLongDoubleHashMap3 = new TLongDoubleHashMap(int1);
      TDoubleFunction tDoubleFunction0 = null;
      tLongDoubleHashMap3.transformValues(tDoubleFunction0);
      String string0 = "";
      URI uRI0 = new URI(string0);
      String string1 = uRI0.getRawUserInfo();
      long long0 = 1974L;
      String string2 = uRI0.getQuery();
      uRI0.equals((Object) string2);
      // Undeclared exception!
      try {
        uRI0.resolve(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(int0);
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap((TLongDoubleMap) tLongDoubleHashMap0);
      tLongDoubleHashMap1.putAll((TLongDoubleMap) tLongDoubleHashMap0);
      assertEquals(23, tLongDoubleHashMap1.capacity());
      assertEquals(0.0, tLongDoubleHashMap1.getNoEntryValue(), 0.01D);
      assertEquals(0L, tLongDoubleHashMap1.getNoEntryKey());
  }

  @Test
  public void test4()  throws Throwable  {
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap();
      int int0 = 1100;
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap(int0);
      tLongDoubleHashMap0.putAll((TLongDoubleMap) tLongDoubleHashMap1);
      long long0 = 133L;
      tLongDoubleHashMap1.adjustOrPutValue(long0, long0, long0);
      String string0 = ":uC;Td^F";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: :uC;Td^F://:uC;Td%5EF:uC;Td%5EF?:uC;Td%5EF#:uC;Td%5EF
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-1568);
      long long0 = 0L;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(int0, (float) int0, long0, (double) long0);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) int0;
      longArray0[1] = long0;
      long long1 = 982L;
      longArray0[2] = long1;
      longArray0[3] = long0;
      longArray0[4] = long0;
      longArray0[5] = (long) int0;
      longArray0[6] = long0;
      longArray0[7] = long0;
      longArray0[8] = (long) int0;
      long[] longArray1 = tLongDoubleHashMap0.keys(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      float float0 = 2045.6721F;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(int0, float0);
      int int1 = 0;
      float float1 = (-1817.4785F);
      HashMap<TLongDoubleHashMap, Long> hashMap0 = null;
      try {
        hashMap0 = new HashMap<TLongDoubleHashMap, Long>(int1, float1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -1817.4785
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(int0, float0);
      tLongDoubleHashMap0.valueCollection();
      int int1 = (-959);
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap();
      tLongDoubleHashMap1.hashCode();
      float float1 = 257.23248F;
      TLongDoubleHashMap tLongDoubleHashMap2 = new TLongDoubleHashMap(int1);
      String string0 = "I";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = (-728L);
      longArray0[0] = long0;
      long long1 = 0L;
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = 1L;
      longArray0[3] = long3;
      long long4 = 482L;
      longArray0[4] = long4;
      long long5 = 0L;
      longArray0[5] = long5;
      long long6 = 668L;
      longArray0[6] = long6;
      long long7 = 0L;
      longArray0[7] = long7;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) long1;
      doubleArray0[1] = (double) longArray0[5];
      doubleArray0[2] = (double) longArray0[1];
      doubleArray0[3] = (double) long7;
      doubleArray0[4] = (double) longArray0[4];
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(longArray0, doubleArray0);
      long[] longArray1 = tLongDoubleHashMap0.keys(longArray0);
      assertSame(longArray1, longArray0);
      assertEquals("{-728=0.0, 482=482.0, 1=0.0, 0=0.0}", tLongDoubleHashMap0.toString());
      assertNotNull(longArray1);
      assertEquals(4, tLongDoubleHashMap0.size());
      
      int int0 = (-609);
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap(int0, int0);
      TLongDoubleHashMap tLongDoubleHashMap2 = new TLongDoubleHashMap((TLongDoubleMap) tLongDoubleHashMap1);
      String string0 = tLongDoubleHashMap2.toString();
      assertNotNull(string0);
      assertEquals(3, tLongDoubleHashMap2.capacity());
      assertEquals("{}", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 961;
      float float0 = (-1162.0527F);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) int0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) float0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      double double0 = 1.0;
      doubleArray0[3] = double0;
      doubleArray0[4] = (double) float0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) float0;
      doubleArray0[7] = (double) longArray0[0];
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(longArray0, doubleArray0);
      boolean boolean0 = tLongDoubleHashMap0.isEmpty();
      assertEquals("{961=-1162.052734375}", tLongDoubleHashMap0.toString());
      assertEquals(17, tLongDoubleHashMap0.capacity());
      
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap(int0, float0);
      double double1 = (-1772.8039843731522);
      boolean boolean1 = tLongDoubleHashMap1.adjustValue((long) int0, double1);
      assertTrue(boolean1 == boolean0);
      
      tLongDoubleHashMap1.compact();
      assertEquals(3, tLongDoubleHashMap1.capacity());
      assertEquals("{}", tLongDoubleHashMap1.toString());
      assertEquals(true, tLongDoubleHashMap1.isEmpty());
  }

  @Test
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = 666L;
      longArray0[0] = long0;
      long long1 = 1146L;
      longArray0[1] = long1;
      long long2 = (-9223372036854775808L);
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      long long4 = 625L;
      longArray0[4] = long4;
      long long5 = 0L;
      longArray0[5] = long5;
      long long6 = 0L;
      longArray0[6] = long6;
      long long7 = 1699L;
      longArray0[7] = long7;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) long5;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(longArray0, doubleArray0);
      tLongDoubleHashMap0.compact();
      assertEquals(3, tLongDoubleHashMap0.capacity());
      
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap();
      int int0 = (-392);
      tLongDoubleHashMap1.increment((long) int0);
      float float0 = 1193.9625F;
      tLongDoubleHashMap1.size();
      TLongDoubleHashMap tLongDoubleHashMap2 = new TLongDoubleHashMap(int0, float0);
      String string0 = tLongDoubleHashMap2.toString();
      boolean boolean0 = tLongDoubleHashMap2.equals((Object) string0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 665;
      float float0 = 0.0F;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(int0, float0);
      TLongProcedure tLongProcedure0 = null;
      tLongDoubleHashMap0.setAutoCompactionFactor((float) int0);
      tLongDoubleHashMap0.forEachKey(tLongProcedure0);
      tLongDoubleHashMap0.values();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      long long0 = (-365L);
      tLongDoubleHashMap0.remove(long0);
      long[] longArray0 = new long[5];
      longArray0[0] = long0;
      longArray0[1] = (long) int0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = long0;
      tLongDoubleHashMap0.keys(longArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      long long0 = (-1L);
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(int1, (float) int1, long0, (double) long0);
      tLongDoubleHashMap0.iterator();
      double double0 = Double.NEGATIVE_INFINITY;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int1;
      longArray0[0] = long0;
      longArray0[1] = (long) int0;
      longArray0[2] = long0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int1;
      longArray0[5] = long0;
      longArray0[2] = (long) int1;
      long long1 = 0L;
      longArray0[3] = long1;
      longArray0[4] = (long) int1;
      longArray0[5] = (long) int1;
      tLongDoubleHashMap0.keys(longArray0);
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap(int0, (float) int0, (long) int0, double0);
      TDoubleCollection tDoubleCollection0 = tLongDoubleHashMap1.valueCollection();
      assertEquals(Double.NEGATIVE_INFINITY, tDoubleCollection0.getNoEntryValue(), 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = 0L;
      longArray0[0] = long0;
      long long1 = 0L;
      longArray0[1] = long1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) long0;
      doubleArray0[1] = (double) long0;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(longArray0, doubleArray0);
      assertEquals(5, tLongDoubleHashMap0.capacity());
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      tLongDoubleHashMap0._states = byteArray0;
      assertEquals(1, tLongDoubleHashMap0.size());
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-1);
      long long0 = 1169L;
      double double0 = 0.0;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(int0, (float) int0, long0, double0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = double0;
      double double1 = (-1.0);
      doubleArray0[1] = double1;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = double0;
      doubleArray0[4] = (double) long0;
      double double2 = 1.0;
      doubleArray0[5] = double2;
      doubleArray0[6] = (double) long0;
      double[] doubleArray1 = tLongDoubleHashMap0.values(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 1149;
      float float0 = 0.0F;
      long long0 = 1287L;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap();
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap(int0, float0, long0, (double) int0);
      boolean boolean0 = false;
      tLongDoubleHashMap1.reenableAutoCompaction(boolean0);
      TLongDoubleHashMap tLongDoubleHashMap2 = new TLongDoubleHashMap(int0);
      TLongDoubleProcedure tLongDoubleProcedure0 = null;
      boolean boolean1 = tLongDoubleHashMap2.retainEntries(tLongDoubleProcedure0);
      float float1 = (-1055.0042F);
      TLongDoubleHashMap tLongDoubleHashMap3 = new TLongDoubleHashMap(int0, float1);
      int int1 = tLongDoubleHashMap2.hashCode();
      tLongDoubleHashMap2.putAll((TLongDoubleMap) tLongDoubleHashMap3);
      long long1 = 1L;
      tLongDoubleHashMap0.contains((long) int1);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) int1;
      longArray0[0] = (long) int0;
      tLongDoubleHashMap0.getAutoCompactionFactor();
      longArray0[1] = (long) int1;
      longArray0[2] = long0;
      longArray0[1] = (long) int0;
      TLongProcedure tLongProcedure0 = null;
      tLongDoubleHashMap3.forEachKey(tLongProcedure0);
      longArray0[2] = (long) int0;
      tLongDoubleHashMap3._set = longArray0;
      tLongDoubleHashMap3.reenableAutoCompaction(boolean1);
      tLongDoubleHashMap2.containsKey(long1);
      TLongDoubleHashMap tLongDoubleHashMap4 = new TLongDoubleHashMap(int0);
      tLongDoubleHashMap4.increment((long) int0);
      tLongDoubleHashMap2.ensureCapacity(int0);
      tLongDoubleHashMap3.forEachEntry(tLongDoubleProcedure0);
      tLongDoubleHashMap4.compact();
      tLongDoubleHashMap4.getNoEntryKey();
      tLongDoubleHashMap2.tempDisableAutoCompaction();
      assertNotSame(tLongDoubleHashMap2, tLongDoubleHashMap3);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 1344;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(int0);
      tLongDoubleHashMap0.contains((long) int0);
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap();
      double[] doubleArray0 = tLongDoubleHashMap1.values();
      assertNotNull(doubleArray0);
      
      String string0 = Long.toBinaryString((long) int0);
      boolean boolean0 = tLongDoubleHashMap1.equals((Object) string0);
      assertTrue(tLongDoubleHashMap1.equals(tLongDoubleHashMap0));
      assertEquals(23, tLongDoubleHashMap1.capacity());
      
      int int1 = 1;
      TLongDoubleHashMap tLongDoubleHashMap2 = new TLongDoubleHashMap(int1, int1);
      long long0 = 0L;
      tLongDoubleHashMap2.containsKey(long0);
      float float0 = 1954.6241F;
      TLongDoubleHashMap tLongDoubleHashMap3 = new TLongDoubleHashMap(int1, float0, (long) int1, (double) float0);
      tLongDoubleHashMap3.ensureCapacity(int1);
      TLongProcedure tLongProcedure0 = null;
      boolean boolean1 = tLongDoubleHashMap3.forEachKey(tLongProcedure0);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 208;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(int0, int0);
      tLongDoubleHashMap0.getNoEntryKey();
      TLongDoubleMap tLongDoubleMap0 = null;
      TLongDoubleHashMap tLongDoubleHashMap1 = null;
      try {
        tLongDoubleHashMap1 = new TLongDoubleHashMap(tLongDoubleMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
