/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TShortShortMap;
import gnu.trove.map.hash.TShortShortHashMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortShortHashMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short) (-145);
      shortArray0[0] = short0;
      short short1 = (short) (-615);
      shortArray0[1] = short1;
      short short2 = (short) (-920);
      shortArray0[2] = short2;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(shortArray0, shortArray0);
      String string0 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://?#
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)107;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short) (-1342);
      shortArray0[3] = short3;
      short short4 = (short) (-1944);
      shortArray0[4] = short4;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(shortArray0, shortArray0);
      tShortShortHashMap0._set = shortArray0;
      assertEquals("{0=-1342, 107=0}", tShortShortHashMap0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-463);
      String string0 = "):s\"I mnyYk&I";
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(string0, string0);
      abstractMap_SimpleEntry0.getValue();
      float float0 = 0.0F;
      int int1 = 145;
      short short0 = (short)2002;
      short short1 = (short)0;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int1, (float) int0, short0, short1);
      tShortShortHashMap0.ensureCapacity(int0);
      assertEquals("{}", tShortShortHashMap0.toString());
      
      tShortShortHashMap0.containsKey(short1);
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap((TShortShortMap) tShortShortHashMap0);
      tShortShortHashMap1.keySet();
      tShortShortHashMap1.putAll((TShortShortMap) tShortShortHashMap0);
      tShortShortHashMap1.isEmpty();
      assertEquals(3, tShortShortHashMap0.capacity());
      
      TShortShortHashMap tShortShortHashMap2 = new TShortShortHashMap(int0, float0);
      TShortShortHashMap tShortShortHashMap3 = new TShortShortHashMap();
      short short2 = tShortShortHashMap3.getNoEntryKey();
      short short3 = (short) (-1473);
      tShortShortHashMap2.adjustOrPutValue(short2, short1, short3);
      tShortShortHashMap3.trimToSize();
      short short4 = (short)1769;
      tShortShortHashMap3.put(short4, short4);
      tShortShortHashMap3.getAutoCompactionFactor();
      assertEquals(3, tShortShortHashMap3.capacity());
      assertEquals("{1769=1769}", tShortShortHashMap3.toString());
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          short[] shortArray0 = new short[1];
          short short0 = (short) (-1545);
          shortArray0[0] = short0;
          TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(shortArray0, shortArray0);
          String string0 = "f6";
          boolean boolean0 = true;
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0, boolean0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"f6\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:136)
             // sun.reflect.GeneratedConstructorAccessor15.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      OutputStream outputStream0 = null;
      boolean boolean0 = false;
      String string0 = "'F:2*{?F[A4\\&oe-}";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(outputStream0, boolean0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)1135;
      shortArray0[0] = short0;
      short short1 = (short)1571;
      shortArray0[1] = short1;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(shortArray0, shortArray0);
      short[] shortArray1 = tShortShortHashMap0.keys();
      assertNotNull(shortArray1);
      
      int int0 = 0;
      float float0 = 10.0F;
      short short2 = (short) (-15871);
      short short3 = (short)0;
      short[] shortArray2 = new short[9];
      shortArray2[0] = short2;
      shortArray2[1] = short2;
      short short4 = (short)228;
      shortArray2[2] = short4;
      shortArray2[3] = short3;
      tShortShortHashMap0.remove(shortArray2[1]);
      shortArray2[4] = short2;
      short short5 = (short) (-28513);
      shortArray2[5] = short5;
      shortArray2[6] = short3;
      shortArray2[7] = short2;
      shortArray2[8] = short3;
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap(shortArray2, shortArray2);
      short short6 = (short) (-77);
      tShortShortHashMap1.put(short6, short6);
      assertEquals(5, tShortShortHashMap1.size());
      
      TShortShortHashMap tShortShortHashMap2 = new TShortShortHashMap(int0, float0, short2, short3);
      short[] shortArray3 = new short[2];
      shortArray3[0] = short2;
      shortArray3[1] = short2;
      tShortShortHashMap2.values(shortArray3);
      assertFalse(tShortShortHashMap2.equals(tShortShortHashMap0));
  }

  @Test
  public void test6()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short)0;
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)0;
      int int0 = 0;
      int int1 = 150;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int1, (float) short2);
      TShortShortHashMap tShortShortHashMap1 = null;
      try {
        tShortShortHashMap1 = new TShortShortHashMap((TShortShortMap) tShortShortHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 0;
          float float0 = (-1626.0944F);
          TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0, float0);
          String string0 = "";
          short short0 = (short)50;
          tShortShortHashMap0.containsKey(short0);
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short)1;
      shortArray0[0] = short0;
      short short1 = (short) (-456);
      shortArray0[1] = short1;
      short short2 = (short) (-271);
      shortArray0[2] = short2;
      short short3 = (short) (-1080);
      shortArray0[3] = short3;
      short short4 = (short)1278;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short) (-1989);
      shortArray0[6] = short6;
      short short7 = (short)771;
      shortArray0[7] = short7;
      short short8 = (short)0;
      shortArray0[8] = short8;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(shortArray0, shortArray0);
      short[] shortArray1 = tShortShortHashMap0.keys(shortArray0);
      assertEquals(8, tShortShortHashMap0.size());
      assertEquals("{-1989=-1989, 1278=1278, 771=771, -271=-271, -456=-456, -1080=-1080, 1=1, 0=0}", tShortShortHashMap0.toString());
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 472;
      short short0 = (short)0;
      short short1 = (short) (-20177);
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0, (float) int0, short0, short1);
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap((TShortShortMap) tShortShortHashMap0);
      File file0 = null;
      FileOutputStream fileOutputStream0 = null;
      try {
        fileOutputStream0 = new FileOutputStream(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name can't be null
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-333);
      int int1 = 0;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int1);
      String string0 = "}";
      File file0 = new File(string0);
      String string1 = file0.getParent();
      tShortShortHashMap0.equals((Object) string1);
      short short0 = (short) (-1518);
      float float0 = 0.5F;
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap(int0, float0, short0, short0);
      boolean boolean0 = true;
      tShortShortHashMap1.reenableAutoCompaction(boolean0);
      TShortShortHashMap tShortShortHashMap2 = new TShortShortHashMap(int0, (float) int0, short0, short0);
      TShortShortHashMap tShortShortHashMap3 = new TShortShortHashMap();
      tShortShortHashMap3.iterator();
      tShortShortHashMap3.iterator();
      assertEquals(23, tShortShortHashMap3.capacity());
      
      tShortShortHashMap3.trimToSize();
      tShortShortHashMap3.trimToSize();
      assertEquals(3, tShortShortHashMap3.capacity());
  }

//   @Test
//   public void test11()  throws Throwable  {
//       int int0 = 0;
//       short[] shortArray0 = new short[5];
//       short short0 = (short)1430;
//       shortArray0[0] = short0;
//       short short1 = (short)401;
//       shortArray0[0] = short0;
//       shortArray0[1] = short0;
//       shortArray0[2] = short0;
//       short short2 = (short)962;
//       shortArray0[3] = short2;
//       shortArray0[4] = short1;
//       shortArray0[1] = short1;
//       short short3 = (short)135;
//       shortArray0[2] = short3;
//       short short4 = (short) (-1093);
//       shortArray0[3] = short4;
//       short short5 = (short)0;
//       shortArray0[4] = short5;
//       TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(shortArray0, shortArray0);
//       assertEquals("{0=0, -1093=-1093, 401=401, 135=135, 1430=1430}", tShortShortHashMap0.toString());
//       
//       float float0 = 935.2819F;
//       float float1 = (-1064.1489F);
//       short short6 = (short)379;
//       TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap();
//       TShortShortHashMap tShortShortHashMap2 = new TShortShortHashMap(int0, float1, short6, short6);
//       TShortShortHashMap tShortShortHashMap3 = new TShortShortHashMap((TShortShortMap) tShortShortHashMap2);
//       tShortShortHashMap2.putAll((TShortShortMap) tShortShortHashMap3);
//       assertEquals(3, tShortShortHashMap3.capacity());
//       assertEquals(379, tShortShortHashMap3.getNoEntryValue());
//       assertEquals(379, tShortShortHashMap3.getNoEntryKey());
//       
//       short short7 = (short)0;
//       short short8 = (short)0;
//       TShortShortHashMap tShortShortHashMap4 = new TShortShortHashMap(int0, float0, short7, short8);
//       assertFalse(tShortShortHashMap4.equals(tShortShortHashMap0));
//   }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 0;
      float float0 = 1.0F;
      int int1 = (-1102);
      short[] shortArray0 = new short[4];
      short short0 = (short)331;
      shortArray0[0] = short0;
      short short1 = (short) (-1172);
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)952;
      shortArray0[3] = short3;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(shortArray0, shortArray0);
      tShortShortHashMap0.valueCollection();
      assertEquals("{-1172=-1172, 952=952, 331=331, 0=0}", tShortShortHashMap0.toString());
      
      short short4 = (short)22;
      short short5 = (short)0;
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap(int1, (float) int0, short4, short5);
      short[] shortArray1 = tShortShortHashMap1.keys();
      assertNotNull(shortArray1);
      
      TShortShortHashMap tShortShortHashMap2 = new TShortShortHashMap();
      TShortShortHashMap tShortShortHashMap3 = new TShortShortHashMap(int0, float0);
      short short6 = (short)0;
      short short7 = tShortShortHashMap3.remove(short6);
      assertEquals((short)0, short7);
      
      TShortShortHashMap tShortShortHashMap4 = new TShortShortHashMap();
      short short8 = (short)0;
      tShortShortHashMap4.containsKey(short8);
      tShortShortHashMap4.getNoEntryKey();
      assertTrue(tShortShortHashMap4.equals(tShortShortHashMap3));
      assertFalse(tShortShortHashMap4.equals(tShortShortHashMap0));
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-459);
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0, int0);
      int int1 = 96;
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap(int1);
      TShortShortHashMap tShortShortHashMap2 = new TShortShortHashMap((TShortShortMap) tShortShortHashMap1);
      short short0 = (short)682;
      boolean boolean0 = tShortShortHashMap2.increment(short0);
      assertEquals(23, tShortShortHashMap2.capacity());
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)231;
      shortArray0[1] = short1;
      short short2 = (short)1811;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)1409;
      shortArray0[4] = short4;
      short short5 = (short)158;
      shortArray0[5] = short5;
      short short6 = (short)92;
      shortArray0[6] = short6;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(shortArray0, shortArray0);
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap((TShortShortMap) tShortShortHashMap0);
      short[] shortArray1 = tShortShortHashMap1.keys();
      assertEquals("{0=0, 158=158, 1811=1811, 1409=1409, 231=231, 92=92}", tShortShortHashMap1.toString());
      assertNotNull(shortArray1);
      assertEquals("{1409=1409, 231=231, 1811=1811, 92=92, 158=158, 0=0}", tShortShortHashMap0.toString());
      assertEquals(6, tShortShortHashMap0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)149;
      shortArray0[3] = short3;
      short short4 = (short)125;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)0;
      shortArray0[7] = short7;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(shortArray0, shortArray0);
      String string0 = "Hwg";
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(string0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // Hwg
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap();
      float float0 = (-1.0F);
      // Undeclared exception!
      try {
        tShortShortHashMap0.setAutoCompactionFactor(float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1.0
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-595);
      float float0 = 1.0F;
      short short0 = (short)1;
      short short1 = (short) (-622);
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0, float0, short0, short1);
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap((TShortShortMap) tShortShortHashMap0);
      String string0 = "";
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(string0, string0);
      String string1 = abstractMap_SimpleImmutableEntry0.getValue();
      assertSame(string0, string1);
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 32;
      float float0 = 1984.7875F;
      short short0 = (short)163;
      short short1 = (short)205;
      TShortShortHashMap tShortShortHashMap0 = new TShortShortHashMap(int0, float0, short0, short1);
      int int1 = 1303;
      TShortShortHashMap tShortShortHashMap1 = new TShortShortHashMap(int1);
      short short2 = (short)2045;
      short short3 = (short)0;
      tShortShortHashMap0.contains(short3);
      short short4 = (short)76;
      short short5 = tShortShortHashMap1.put(short2, short4);
      tShortShortHashMap1.toString();
      short short6 = (short)0;
      TShortShortHashMap tShortShortHashMap2 = new TShortShortHashMap((int) short5, (float) short4, short2, short6);
      short short7 = (short)1;
      tShortShortHashMap1.get(short7);
      int int2 = (-1934);
      TShortShortHashMap tShortShortHashMap3 = new TShortShortHashMap(int2);
      tShortShortHashMap3.capacity();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale0 = Locale.getDefault(locale_Category0);
      char char0 = 'o';
      String string0 = locale0.getExtension(char0);
      short[] shortArray0 = tShortShortHashMap3._set;
      boolean boolean0 = tShortShortHashMap1.equals((Object) string0);
      assertEquals(1, tShortShortHashMap1.size());
      assertEquals(false, boolean0);
  }
}
