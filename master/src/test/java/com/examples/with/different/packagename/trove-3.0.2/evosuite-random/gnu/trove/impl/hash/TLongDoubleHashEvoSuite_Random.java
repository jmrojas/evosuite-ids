/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TLongDoubleMap;
import gnu.trove.map.hash.TLongDoubleHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.procedure.TLongDoubleProcedure;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TLongDoubleHashEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap();
      tLongDoubleHashMap0.size();
      assertEquals(0L, tLongDoubleHashMap0.getNoEntryKey());
      assertEquals(0.0, tLongDoubleHashMap0.getNoEntryValue(), 0.01D);
      
      long[] longArray0 = new long[1];
      long long0 = (-1033L);
      longArray0[0] = long0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) long0;
      doubleArray0[1] = (double) long0;
      doubleArray0[2] = (double) long0;
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap(longArray0, doubleArray0);
      long long1 = tLongDoubleHashMap1.getNoEntryKey();
      assertEquals(0.0, tLongDoubleHashMap1.getNoEntryValue(), 0.01D);
      assertEquals(0L, long1);
      assertEquals(7, tLongDoubleHashMap1.capacity());
      assertEquals("{-1033=-1033.0}", tLongDoubleHashMap1.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-53);
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(int0);
      long long0 = tLongDoubleHashMap0.getNoEntryKey();
      assertEquals(0L, long0);
      
      float float0 = (-1376.5135F);
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap(int0, float0);
      long long1 = tLongDoubleHashMap1.getNoEntryKey();
      boolean boolean0 = true;
      tLongDoubleHashMap0.reenableAutoCompaction(boolean0);
      int int1 = (-499);
      float float1 = 1315.8481F;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) long1;
      TLongDoubleHashMap tLongDoubleHashMap2 = new TLongDoubleHashMap(tLongDoubleHashMap1._set, doubleArray0);
      assertEquals(7, tLongDoubleHashMap2.capacity());
      assertEquals("{0=0.0}", tLongDoubleHashMap2.toString());
      assertEquals(0.0, tLongDoubleHashMap2.getNoEntryValue(), 0.01D);
      
      TLongDoubleHashMap tLongDoubleHashMap3 = new TLongDoubleHashMap(int1, float1);
      tLongDoubleHashMap3.size();
      assertEquals(0.0, tLongDoubleHashMap3.getNoEntryValue(), 0.01D);
      assertFalse(tLongDoubleHashMap3.equals(tLongDoubleHashMap2));
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-900);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) longArray0[0];
      doubleArray0[1] = (double) longArray0[1];
      double double0 = (-49.81741455362006);
      doubleArray0[2] = double0;
      doubleArray0[3] = (double) int0;
      double double1 = (-450.6205588255333);
      doubleArray0[4] = double1;
      doubleArray0[5] = (double) longArray0[0];
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      doubleArray0[8] = (double) int0;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(longArray0, doubleArray0);
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap((TLongDoubleMap) tLongDoubleHashMap0);
      tLongDoubleHashMap1.clear();
      TLongDoubleHashMap tLongDoubleHashMap2 = new TLongDoubleHashMap(int0);
      tLongDoubleHashMap2.getNoEntryValue();
      double double2 = 1888.4910132676396;
      tLongDoubleHashMap0.getNoEntryValue();
      assertEquals(1, tLongDoubleHashMap0.size());
      
      double double3 = tLongDoubleHashMap2.put((long) int0, double2);
      assertEquals(1, tLongDoubleHashMap2.size());
      assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap();
      long long0 = (-1720L);
      tLongDoubleHashMap0.hashCode();
      boolean boolean0 = tLongDoubleHashMap0.adjustValue(long0, long0);
      TLongDoubleProcedure tLongDoubleProcedure0 = null;
      tLongDoubleHashMap0.retainEntries(tLongDoubleProcedure0);
      long long1 = 0L;
      double double0 = Double.NEGATIVE_INFINITY;
      tLongDoubleHashMap0.put(long1, double0);
      tLongDoubleHashMap0.toString();
      OutputStream outputStream0 = null;
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(outputStream0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = 0L;
      longArray0[0] = long0;
      double[] doubleArray0 = new double[4];
      int int0 = 1;
      float float0 = 606.2087F;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(int0, float0);
      long long1 = 0L;
      tLongDoubleHashMap0.capacity();
      double double0 = tLongDoubleHashMap0.remove(long1);
      assertEquals(0.0, double0, 0.01D);
      
      doubleArray0[0] = (double) long0;
      doubleArray0[1] = (double) long0;
      doubleArray0[2] = (double) long0;
      doubleArray0[0] = (double) long0;
      doubleArray0[1] = (double) longArray0[0];
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap();
      tLongDoubleHashMap1.tempDisableAutoCompaction();
      doubleArray0[0] = (double) long0;
      doubleArray0[1] = (double) long0;
      String string0 = tLongDoubleHashMap1.toString();
      assertNotNull(string0);
      
      doubleArray0[2] = (double) longArray0[0];
      doubleArray0[3] = (double) long0;
      doubleArray0[2] = (double) long0;
      doubleArray0[3] = (double) longArray0[0];
      doubleArray0[3] = (double) long0;
      tLongDoubleHashMap1.keys();
      assertTrue(tLongDoubleHashMap1.equals(tLongDoubleHashMap0));
      
      tLongDoubleHashMap0.clear();
      double[] doubleArray1 = tLongDoubleHashMap0.values();
      assertNotNull(doubleArray1);
      assertEquals(0L, tLongDoubleHashMap0.getNoEntryKey());
      
      TLongDoubleHashMap tLongDoubleHashMap2 = new TLongDoubleHashMap(longArray0, doubleArray0);
      int int1 = tLongDoubleHashMap2.capacity();
      assertEquals(11, int1);
      
      TLongDoubleHashMap tLongDoubleHashMap3 = new TLongDoubleHashMap();
      tLongDoubleHashMap3.ensureCapacity(int1);
      assertEquals(0.0, tLongDoubleHashMap3.getNoEntryValue(), 0.01D);
      assertEquals(false, tLongDoubleHashMap2.isEmpty());
      assertEquals(0L, tLongDoubleHashMap3.getNoEntryKey());
      assertEquals(0.0, tLongDoubleHashMap2.getNoEntryValue(), 0.01D);
      assertEquals(0L, tLongDoubleHashMap2.getNoEntryKey());
      assertEquals("{0=0.0}", tLongDoubleHashMap2.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-221);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) longArray0[1];
      doubleArray0[3] = (double) int0;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(longArray0, doubleArray0);
      tLongDoubleHashMap0.getNoEntryValue();
      float float0 = 1.0F;
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap(int0, float0);
      double double1 = Double.POSITIVE_INFINITY;
      tLongDoubleHashMap1.put((long) int0, double1);
      assertEquals(1, tLongDoubleHashMap1.size());
      
      int int1 = (-1622);
      float float1 = 1596.1786F;
      TLongDoubleHashMap tLongDoubleHashMap2 = new TLongDoubleHashMap(int1, float1);
      tLongDoubleHashMap2.compact();
      tLongDoubleHashMap2.clear();
      int int2 = 56;
      tLongDoubleHashMap2.ensureCapacity(int2);
      int int3 = 232;
      TLongDoubleHashMap tLongDoubleHashMap3 = new TLongDoubleHashMap(int3);
      tLongDoubleHashMap3.tempDisableAutoCompaction();
      int int4 = tLongDoubleHashMap3.capacity();
      tLongDoubleHashMap2.valueCollection();
      int int5 = 0;
      tLongDoubleHashMap2.putIfAbsent((long) int3, (double) int4);
      TLongDoubleHashMap tLongDoubleHashMap4 = new TLongDoubleHashMap(int5, int5, int5, int5);
      tLongDoubleHashMap2.clear();
      long long0 = tLongDoubleHashMap4.getNoEntryKey();
      assertEquals(0L, long0);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      long long0 = (-733L);
      double double0 = 0.0;
      int int1 = (-1);
      float float1 = (-1452.3481F);
      double double1 = 0.0;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(int1, float1, long0, double1);
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap((TLongDoubleMap) tLongDoubleHashMap0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-119);
      byteArray0[1] = byte1;
      byte byte2 = (byte)114;
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      tLongDoubleHashMap1._states = byteArray0;
      TLongDoubleHashMap tLongDoubleHashMap2 = new TLongDoubleHashMap(int0, float0, long0, double0);
      assertEquals(0.0, tLongDoubleHashMap2.getNoEntryValue(), 0.01D);
      assertEquals((-733L), tLongDoubleHashMap2.getNoEntryKey());
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 953;
      float float0 = 1.0F;
      long[] longArray0 = new long[6];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) float0;
      doubleArray0[1] = (double) int0;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(longArray0, doubleArray0);
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap((TLongDoubleMap) tLongDoubleHashMap0);
      assertEquals(false, tLongDoubleHashMap1.isEmpty());
      
      tLongDoubleHashMap1.clear();
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      int int1 = (-587);
      tLongDoubleHashMap0.ensureCapacity(int1);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) longArray0[5];
      doubleArray1[1] = (double) longArray0[4];
      int int2 = 0;
      float float1 = (-859.4651F);
      TLongDoubleHashMap tLongDoubleHashMap2 = new TLongDoubleHashMap(int2, float1);
      TLongDoubleHashMap tLongDoubleHashMap3 = new TLongDoubleHashMap((TLongDoubleMap) tLongDoubleHashMap2);
      tLongDoubleHashMap3.getNoEntryValue();
      TLongDoubleHashMap tLongDoubleHashMap4 = new TLongDoubleHashMap(longArray0, doubleArray1);
      double double0 = 303.5132969971665;
      TLongDoubleHashMap tLongDoubleHashMap5 = new TLongDoubleHashMap(int0, float0, (long) int0, double0);
      byte[] byteArray0 = tLongDoubleHashMap5._states;
      assertFalse(tLongDoubleHashMap5.equals(tLongDoubleHashMap0));
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 1;
      int int1 = (-1173);
      float float0 = 0.5F;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(int1, float0);
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap((TLongDoubleMap) tLongDoubleHashMap0);
      ObjectInput objectInput0 = null;
      // Undeclared exception!
      try {
        tLongDoubleHashMap1.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TLongDoubleMap tLongDoubleMap0 = null;
      int int0 = (-1831);
      float float0 = 7.194334F;
      long long0 = (-872L);
      long[] longArray0 = new long[3];
      longArray0[0] = long0;
      longArray0[1] = (long) int0;
      long long1 = 0L;
      longArray0[2] = long1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) float0;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(longArray0, doubleArray0);
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = Locale.CHINA;
      String string0 = locale0.getDisplayLanguage(locale1);
      tLongDoubleHashMap0.equals((Object) string0);
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap(int0, float0, long0, (double) float0);
      tLongDoubleHashMap1.ensureCapacity(int0);
      int int1 = (-171);
      TLongDoubleHashMap tLongDoubleHashMap2 = new TLongDoubleHashMap(int1);
      long long2 = (-1273L);
      tLongDoubleHashMap2.remove(long2);
      TLongDoubleHashMap tLongDoubleHashMap3 = null;
      try {
        tLongDoubleHashMap3 = new TLongDoubleHashMap(tLongDoubleMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = 509L;
      longArray0[0] = long0;
      long long1 = 0L;
      longArray0[1] = long1;
      long long2 = (-1L);
      longArray0[2] = long2;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) longArray0[2];
      doubleArray0[1] = (double) longArray0[0];
      doubleArray0[2] = (double) long2;
      doubleArray0[3] = (double) long0;
      double double0 = 0.0;
      doubleArray0[4] = double0;
      doubleArray0[5] = (double) longArray0[1];
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(longArray0, doubleArray0);
      ObjectInput objectInput0 = null;
      // Undeclared exception!
      try {
        tLongDoubleHashMap0.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(int0);
      String string0 = "Values of NaN are not supported.";
      File file0 = new File(string0, string0);
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Values of NaN are not supported./Values of NaN are not supported. (No such file or directory)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = 734L;
      longArray0[0] = long0;
      long long1 = 1L;
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) longArray0[0];
      doubleArray0[1] = (double) long1;
      doubleArray0[2] = (double) long1;
      doubleArray0[3] = (double) longArray0[2];
      doubleArray0[4] = (double) long2;
      double double0 = 1681.4994809369093;
      doubleArray0[5] = double0;
      double double1 = 0.0;
      doubleArray0[6] = double1;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(longArray0, doubleArray0);
      boolean boolean0 = true;
      tLongDoubleHashMap0.reenableAutoCompaction(boolean0);
      long long3 = 1L;
      longArray0[3] = long3;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) long1;
      doubleArray1[1] = (double) long2;
      doubleArray1[2] = (double) long0;
      doubleArray1[3] = (double) longArray0[2];
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap(longArray0, doubleArray1);
      double double2 = 1.0;
      boolean boolean1 = tLongDoubleHashMap1.adjustValue(longArray0[3], double2);
      assertEquals("{734=1.0, 1=1.0, 0=734.0}", tLongDoubleHashMap1.toString());
      assertEquals(true, boolean1);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 9183457;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap();
      assertEquals(23, tLongDoubleHashMap0.capacity());
      
      tLongDoubleHashMap0.trimToSize();
      TLongDoubleProcedure tLongDoubleProcedure0 = null;
      double[] doubleArray0 = new double[3];
      double double0 = (-281.02823308381454);
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int0;
      double double1 = 0.0;
      doubleArray0[2] = double1;
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap(tLongDoubleHashMap0._set, doubleArray0);
      tLongDoubleHashMap0.remove((long) int0);
      byte[] byteArray0 = tLongDoubleHashMap0._states;
      boolean boolean0 = tLongDoubleHashMap0.forEachEntry(tLongDoubleProcedure0);
      float float0 = (-1487.2136F);
      double double2 = (-1.0);
      Object object0 = null;
      tLongDoubleHashMap0.equals(object0);
      tLongDoubleHashMap0.keySet();
      tLongDoubleHashMap0.hashCode();
      TLongDoubleHashMap tLongDoubleHashMap2 = new TLongDoubleHashMap(int0, float0, (long) int0, double2);
      tLongDoubleHashMap2.keySet();
      tLongDoubleHashMap0.putAll((TLongDoubleMap) tLongDoubleHashMap2);
      double double3 = (-810.728227017974);
      tLongDoubleHashMap2.containsValue(double3);
      tLongDoubleHashMap0.valueCollection();
      TLongDoubleHashMap tLongDoubleHashMap3 = new TLongDoubleHashMap(int0, int0, int0, int0);
      tLongDoubleHashMap3.tempDisableAutoCompaction();
      tLongDoubleHashMap2.reenableAutoCompaction(boolean0);
      int int1 = tLongDoubleHashMap3.size();
      TLongDoubleHashMap tLongDoubleHashMap4 = new TLongDoubleHashMap((TLongDoubleMap) tLongDoubleHashMap3);
      tLongDoubleHashMap4.contains((long) int0);
      tLongDoubleHashMap4.increment((long) int0);
      double double4 = tLongDoubleHashMap4.remove((long) int1);
      assertEquals(9183457.0, double4, 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap();
      int int0 = 774;
      tLongDoubleHashMap0.getAutoCompactionFactor();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      TLongDoubleProcedure tLongDoubleProcedure0 = null;
      tLongDoubleHashMap0.retainEntries(tLongDoubleProcedure0);
      tLongDoubleHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      byte[] byteArray0 = byteArrayOutputStream0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 115911563;
      int int1 = 818;
      float float0 = 0.0F;
      double double0 = (-1.0);
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(int1, float0, (long) int0, double0);
      tLongDoubleHashMap0.capacity();
      float float1 = 0.0F;
      long long0 = (-1335L);
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap(int0, float1, long0, (double) long0);
      tLongDoubleHashMap1.setAutoCompactionFactor((float) int0);
      assertEquals((-1335.0), tLongDoubleHashMap1.getNoEntryValue(), 0.01D);
      assertEquals((-1335L), tLongDoubleHashMap1.getNoEntryKey());
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 1163;
      int int1 = 0;
      long long0 = (-486L);
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(int1, (float) int0, long0, (double) long0);
      String string0 = tLongDoubleHashMap0.toString();
      assertNotNull(string0);
      
      boolean boolean0 = tLongDoubleHashMap0.contains(long0);
      assertEquals(false, boolean0);
      
      float float0 = (-169.75201F);
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap(int0);
      double double0 = 0.0;
      int int2 = 0;
      tLongDoubleHashMap1.ensureCapacity(int2);
      tLongDoubleHashMap1.containsValue(double0);
      assertEquals(0.0, tLongDoubleHashMap1.getNoEntryValue(), 0.01D);
      assertEquals(0L, tLongDoubleHashMap1.getNoEntryKey());
      
      TLongDoubleHashMap tLongDoubleHashMap2 = new TLongDoubleHashMap(int0, float0, (long) int0, (double) int0);
      TDoubleProcedure tDoubleProcedure0 = null;
      tLongDoubleHashMap2.forEachValue(tDoubleProcedure0);
      assertEquals(3, tLongDoubleHashMap2.capacity());
      
      tLongDoubleHashMap0.capacity();
      int int3 = 1256;
      String string1 = "dvMpGT&2Mv])Ai*y|";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = 1899L;
      longArray0[0] = long0;
      long long1 = (-1L);
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      double[] doubleArray0 = new double[7];
      int int0 = 421;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(int0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-6);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      tLongDoubleHashMap0._states = byteArray0;
      doubleArray0[0] = (double) longArray0[1];
      doubleArray0[1] = (double) long0;
      doubleArray0[2] = (double) long1;
      doubleArray0[3] = (double) longArray0[1];
      doubleArray0[4] = (double) long0;
      doubleArray0[5] = (double) long2;
      doubleArray0[6] = (double) long2;
      longArray0[0] = long1;
      longArray0[1] = long2;
      longArray0[2] = long2;
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap(longArray0, doubleArray0);
      doubleArray0[0] = (double) longArray0[1];
      doubleArray0[1] = (double) longArray0[0];
      double double0 = (-1986.980021688826);
      doubleArray0[2] = double0;
      double double1 = 0.0;
      doubleArray0[3] = double1;
      double double2 = (-1.0);
      doubleArray0[4] = double2;
      doubleArray0[5] = (double) long2;
      doubleArray0[6] = double0;
      TLongDoubleHashMap tLongDoubleHashMap2 = new TLongDoubleHashMap((TLongDoubleMap) tLongDoubleHashMap1);
      tLongDoubleHashMap2.getNoEntryKey();
      assertEquals("{-1=-1.0, 0=-1.0}", tLongDoubleHashMap2.toString());
      
      long long3 = (-1L);
      double double3 = tLongDoubleHashMap1.putIfAbsent(long3, double2);
      assertEquals("{0=-1.0, -1=-1.0}", tLongDoubleHashMap1.toString());
      assertEquals(0.0, tLongDoubleHashMap1.getNoEntryValue(), 0.01D);
      assertTrue(tLongDoubleHashMap1.equals(tLongDoubleHashMap2));
      assertEquals((-1.0), double3, 0.01D);
  }

  @Test
  public void test18()  throws Throwable  {
      long[] longArray0 = new long[8];
      int int0 = 801;
      long long0 = 0L;
      double double0 = 0.0;
      TLongDoubleHashMap tLongDoubleHashMap0 = new TLongDoubleHashMap(int0, (float) int0, long0, double0);
      long long1 = (-1L);
      longArray0[0] = long1;
      long long2 = 0L;
      longArray0[1] = long2;
      long long3 = 1059L;
      longArray0[2] = long3;
      long long4 = 0L;
      longArray0[3] = long4;
      long long5 = 205L;
      longArray0[4] = long5;
      long long6 = 0L;
      tLongDoubleHashMap0.size();
      longArray0[5] = long6;
      long long7 = 0L;
      longArray0[6] = long7;
      long long8 = 1254L;
      longArray0[7] = long8;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) longArray0[3];
      tLongDoubleHashMap0.size();
      doubleArray0[1] = (double) long8;
      TLongDoubleHashMap tLongDoubleHashMap1 = new TLongDoubleHashMap(longArray0, doubleArray0);
      long long9 = 1L;
      double double1 = tLongDoubleHashMap1.get(long9);
      doubleArray0[0] = (double) longArray0[0];
      doubleArray0[1] = (double) longArray0[1];
      assertTrue(doubleArray0[1] == double1);
  }
}
