/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedShortFloatMap;
import gnu.trove.impl.sync.TSynchronizedShortSet;
import gnu.trove.map.TShortFloatMap;
import gnu.trove.map.hash.TShortFloatHashMap;
import gnu.trove.procedure.TShortFloatProcedure;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedShortFloatMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      String string0 = "";
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0, (Object) string0);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap1 = new TSynchronizedShortFloatMap((TShortFloatMap) tSynchronizedShortFloatMap0);
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap((TShortFloatMap) tSynchronizedShortFloatMap1);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap2 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap1);
      short short0 = (short) (-1391);
      float float0 = (-348.4386F);
      tSynchronizedShortFloatMap2.put(short0, float0);
      assertEquals(false, tSynchronizedShortFloatMap2.isEmpty());
      assertEquals("{-1391=-348.4386}", tShortFloatHashMap1.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)823;
      shortArray0[0] = short0;
      short short1 = (short)1762;
      shortArray0[1] = short1;
      short short2 = (short) (-1);
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short) (-1297);
      shortArray0[4] = short4;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) short3;
      floatArray0[1] = (float) shortArray0[3];
      floatArray0[2] = (float) short0;
      floatArray0[3] = (float) shortArray0[1];
      int int0 = 56;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, (float) shortArray0[4], shortArray0[2], (float) shortArray0[3]);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap((TShortFloatMap) tSynchronizedShortFloatMap0);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap1 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap1);
      tSynchronizedShortFloatMap1.toString();
      floatArray0[4] = (float) shortArray0[1];
      floatArray0[5] = (float) shortArray0[0];
      floatArray0[6] = (float) short1;
      TShortFloatHashMap tShortFloatHashMap2 = new TShortFloatHashMap(shortArray0, floatArray0);
      String string0 = " greater than end index ";
      // Undeclared exception!
      try {
        URI.create(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 0:  greater than end index 
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short) (-1493);
      shortArray0[0] = short0;
      short short1 = (short) (-2007);
      shortArray0[1] = short1;
      short short2 = (short)245;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short) (-2021);
      shortArray0[4] = short4;
      short short5 = (short) (-307);
      shortArray0[5] = short5;
      short short6 = (short)241;
      shortArray0[6] = short6;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) short6;
      float float0 = (-1359.4248F);
      floatArray0[1] = float0;
      floatArray0[2] = (float) short0;
      floatArray0[3] = (float) short0;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      tSynchronizedShortFloatMap0.iterator();
      TShortFloatMap tShortFloatMap0 = null;
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap1 = null;
      try {
        tSynchronizedShortFloatMap1 = new TSynchronizedShortFloatMap(tShortFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      String string0 = "[id^b YUP/6";
      File file0 = new File(string0);
      URI uRI0 = file0.toURI();
      String string1 = uRI0.getRawQuery();
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0, (Object) string1);
      TShortFloatProcedure tShortFloatProcedure0 = null;
      // Undeclared exception!
      try {
        tSynchronizedShortFloatMap0.retainEntries(tShortFloatProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short)317;
      shortArray0[0] = short0;
      short short1 = (short)1117;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)259;
      shortArray0[3] = short3;
      short short4 = (short) (-1459);
      shortArray0[4] = short4;
      short short5 = (short)160;
      shortArray0[5] = short5;
      short short6 = (short)1;
      shortArray0[6] = short6;
      short short7 = (short) (-620);
      shortArray0[7] = short7;
      short short8 = (short)0;
      shortArray0[8] = short8;
      float[] floatArray0 = new float[8];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = 6.6360896E8F;
      floatArray0[1] = float1;
      floatArray0[2] = (float) short2;
      floatArray0[3] = (float) short0;
      floatArray0[4] = (float) shortArray0[0];
      floatArray0[5] = (float) short4;
      floatArray0[6] = (float) shortArray0[3];
      floatArray0[7] = (float) shortArray0[5];
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap((TShortFloatMap) tShortFloatHashMap0);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap1);
      TSynchronizedShortSet tSynchronizedShortSet0 = (TSynchronizedShortSet)tSynchronizedShortFloatMap0.keySet();
      assertEquals("{160, -1459, 317, 1117, -620, 259, 1, 0}", tSynchronizedShortSet0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short)1691;
      shortArray0[0] = short0;
      short short1 = (short) (-1860);
      shortArray0[1] = short1;
      short short2 = (short)2012;
      shortArray0[2] = short2;
      short short3 = (short)70;
      shortArray0[3] = short3;
      short short4 = (short) (-240);
      shortArray0[4] = short4;
      short short5 = (short) (-1403);
      shortArray0[5] = short5;
      short short6 = (short)147;
      shortArray0[6] = short6;
      short short7 = (short)1499;
      shortArray0[7] = short7;
      short short8 = (short)2781;
      shortArray0[8] = short8;
      short short9 = (short)0;
      shortArray0[9] = short9;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) short8;
      floatArray0[1] = (float) short5;
      floatArray0[2] = (float) short6;
      floatArray0[3] = (float) shortArray0[1];
      float float0 = 0.0F;
      floatArray0[4] = float0;
      floatArray0[5] = (float) short3;
      floatArray0[6] = (float) shortArray0[1];
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap((TShortFloatMap) tShortFloatHashMap0);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap1);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap1 = new TSynchronizedShortFloatMap((TShortFloatMap) tSynchronizedShortFloatMap0);
      float[] floatArray1 = tSynchronizedShortFloatMap1.values(floatArray0);
      assertSame(floatArray1, floatArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)973;
      shortArray0[0] = short0;
      short short1 = (short) (-764);
      shortArray0[1] = short1;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) short1;
      float float0 = 0.0F;
      floatArray0[1] = float0;
      floatArray0[2] = (float) shortArray0[0];
      floatArray0[3] = (float) short1;
      floatArray0[4] = (float) short0;
      floatArray0[5] = (float) shortArray0[0];
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      Locale locale0 = Locale.ITALIAN;
      String string0 = locale0.getScript();
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0, (Object) string0);
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap((TShortFloatMap) tSynchronizedShortFloatMap0);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap1 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap1);
      int int0 = tSynchronizedShortFloatMap1.size();
      assertEquals(2, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, int0);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      short[] shortArray0 = new short[3];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short) (-6);
      shortArray0[2] = short2;
      tShortFloatHashMap0._set = shortArray0;
      String string0 = tSynchronizedShortFloatMap0.toString();
      assertEquals("{}", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      TShortFloatMap tShortFloatMap0 = null;
      String string0 = "";
      boolean boolean0 = true;
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0, boolean0);
      // Undeclared exception!
      try {
        stringTokenizer0.nextToken();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TShortFloatMap tShortFloatMap0 = null;
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = null;
      try {
        tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap(tShortFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test10()  throws Throwable  {
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
//       TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
//       short short0 = (short)1246;
//       float float0 = 258.2336F;
//       float float1 = tSynchronizedShortFloatMap0.adjustOrPutValue(short0, float0, float0);
//       assertEquals(1, tShortFloatHashMap0.size());
//       assertEquals(258.2336F, float1, 0.01F);
//   }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 26339969;
      float float0 = (-1275.6017F);
      short short0 = (short) (-1644);
      float float1 = 0.0F;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, float0, short0, float1);
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap((TShortFloatMap) tShortFloatHashMap0);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap1);
      short short1 = (short) (-1105);
      float float2 = (-1857.3632F);
      tSynchronizedShortFloatMap0.putIfAbsent(short1, float2);
      assertEquals(1, tShortFloatHashMap1.size());
      assertEquals("{-1105=-1857.3632}", tSynchronizedShortFloatMap0.toString());
  }

//   @Test
//   public void test12()  throws Throwable  {
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
//       Locale locale0 = Locale.FRANCE;
//       String string0 = locale0.getDisplayVariant();
//       TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0, (Object) string0);
//       short short0 = (short)1456;
//       short[] shortArray0 = new short[7];
//       shortArray0[0] = short0;
//       shortArray0[1] = short0;
//       shortArray0[2] = short0;
//       shortArray0[3] = short0;
//       short short1 = (short) (-1789);
//       shortArray0[4] = short1;
//       shortArray0[5] = short0;
//       shortArray0[6] = short0;
//       tShortFloatHashMap0.keys(shortArray0);
//       float float0 = tSynchronizedShortFloatMap0.remove(short0);
//       assertEquals(0.0F, float0, 0.01F);
//   }

  @Test
  public void test13()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      Locale locale0 = Locale.KOREA;
      String string0 = locale0.getCountry();
      tShortFloatHashMap0.getAutoCompactionFactor();
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      Object object0 = null;
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0, object0);
      // Undeclared exception!
      try {
        tSynchronizedShortFloatMap0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short)1461;
      shortArray0[0] = short0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) shortArray0[0];
      floatArray0[1] = (float) short0;
      floatArray0[2] = (float) shortArray0[0];
      floatArray0[3] = (float) short0;
      float float0 = 4.654734F;
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      float float1 = (-1019.0562F);
      floatArray0[4] = float1;
      floatArray0[5] = float1;
      floatArray0[6] = float0;
      floatArray0[7] = (float) shortArray0[0];
      floatArray0[4] = (float) short0;
      floatArray0[5] = (float) shortArray0[0];
      floatArray0[6] = (float) short0;
      floatArray0[7] = (float) shortArray0[0];
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      short short1 = tSynchronizedShortFloatMap0.getNoEntryKey();
      assertEquals((short)0, short1);
  }

//   @Test
//   public void test16()  throws Throwable  {
//       int int0 = (-1170);
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, int0);
//       TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap((TShortFloatMap) tShortFloatHashMap0);
//       String string0 = tShortFloatHashMap1.toString();
//       TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap1, (Object) string0);
//       float[] floatArray0 = new float[6];
//       floatArray0[0] = (float) int0;
//       floatArray0[1] = (float) int0;
//       floatArray0[2] = (float) int0;
//       floatArray0[3] = (float) int0;
//       float float0 = 1.0F;
//       floatArray0[4] = float0;
//       floatArray0[5] = (float) int0;
//       tSynchronizedShortFloatMap0.values(floatArray0);
//       int int1 = (-268);
//       short short0 = (short)1658;
//       TShortFloatHashMap tShortFloatHashMap2 = new TShortFloatHashMap(int1, (float) int1, short0, (float) int1);
//       TSynchronizedShortFloatMap tSynchronizedShortFloatMap1 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap2);
//       TSynchronizedShortSet tSynchronizedShortSet0 = (TSynchronizedShortSet)tSynchronizedShortFloatMap1.keySet();
//       assertEquals(1658, tSynchronizedShortSet0.getNoEntryValue());
//   }

  @Test
  public void test17()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)489;
      shortArray0[0] = short0;
      short short1 = (short)1667;
      shortArray0[1] = short1;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) short0;
      floatArray0[1] = (float) shortArray0[0];
      floatArray0[2] = (float) short0;
      floatArray0[3] = (float) shortArray0[0];
      floatArray0[4] = (float) short1;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      String string0 = File.separator;
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0, (Object) string0);
      assertEquals(false, tSynchronizedShortFloatMap0.isEmpty());
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = (-1);
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, int0);
      Locale locale0 = Locale.KOREAN;
      String string0 = "[IoCY<\\$H\\\"7-`H4";
      Locale locale1 = new Locale(string0);
      String string1 = locale0.getDisplayVariant(locale1);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0, (Object) string1);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap1 = new TSynchronizedShortFloatMap((TShortFloatMap) tSynchronizedShortFloatMap0);
      tSynchronizedShortFloatMap1.toString();
      int int1 = 1591;
      TShortFloatMap tShortFloatMap0 = null;
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap2 = null;
      try {
        tSynchronizedShortFloatMap2 = new TSynchronizedShortFloatMap(tShortFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)0;
      int int0 = (-965);
      float float0 = (-1337.2714F);
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, float0);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap0 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap0);
      tSynchronizedShortFloatMap0.getNoEntryKey();
      shortArray0[0] = short0;
      short short1 = (short) (-188);
      shortArray0[1] = short1;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) shortArray0[1];
      int int1 = 0;
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(int1, (float) short0);
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap1 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap1);
      tSynchronizedShortFloatMap1.putAll((TShortFloatMap) tShortFloatHashMap1);
      tSynchronizedShortFloatMap1.toString();
      floatArray0[1] = (float) shortArray0[1];
      float float1 = Float.POSITIVE_INFINITY;
      floatArray0[2] = float1;
      TShortFloatHashMap tShortFloatHashMap2 = new TShortFloatHashMap(shortArray0, floatArray0);
      tSynchronizedShortFloatMap1.getNoEntryKey();
      Object object0 = null;
      TSynchronizedShortFloatMap tSynchronizedShortFloatMap2 = new TSynchronizedShortFloatMap((TShortFloatMap) tShortFloatHashMap2, object0);
      // Undeclared exception!
      try {
        tSynchronizedShortFloatMap2.containsKey(short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
