/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TFloatFunction;
import gnu.trove.impl.sync.TSynchronizedFloatCollection;
import gnu.trove.impl.sync.TSynchronizedLongFloatMap;
import gnu.trove.iterator.TLongFloatIterator;
import gnu.trove.map.TLongFloatMap;
import gnu.trove.map.hash.TLongFloatHashMap;
import gnu.trove.procedure.TFloatProcedure;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedLongFloatMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap();
      tLongFloatHashMap0.trimToSize();
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap0 = new TSynchronizedLongFloatMap((TLongFloatMap) tLongFloatHashMap0);
      float[] floatArray0 = new float[7];
      float float0 = (-1.0F);
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      float float2 = (-704.3866F);
      floatArray0[2] = float2;
      float float3 = (-1.0F);
      floatArray0[3] = float3;
      float float4 = (-1021.9423F);
      floatArray0[4] = float4;
      float float5 = 0.0F;
      floatArray0[5] = float5;
      float float6 = 0.5F;
      floatArray0[6] = float6;
      tSynchronizedLongFloatMap0.values(floatArray0);
      long long0 = 0L;
      tLongFloatHashMap0.values();
      tSynchronizedLongFloatMap0.adjustOrPutValue(long0, long0, long0);
      String string0 = tSynchronizedLongFloatMap0.toString();
      assertEquals(1, tLongFloatHashMap0.size());
      assertEquals("{0=0.0}", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap();
      String string0 = "GF";
      String string1 = "at offset ";
      String string2 = "M)q}6Dy$!3";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string1, string0, string2, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: GF://at%20offset%20GF?M)q%7D6Dy$!3#GF
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = 0L;
      longArray0[0] = long0;
      long long1 = (-1561L);
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = 1647L;
      longArray0[3] = long3;
      long long4 = 1L;
      int int0 = 1979;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int0, (float) longArray0[3]);
      Locale locale0 = Locale.US;
      Locale locale1 = null;
      String string0 = locale0.getDisplayScript(locale1);
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap0 = new TSynchronizedLongFloatMap((TLongFloatMap) tLongFloatHashMap0, (Object) string0);
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap1 = new TSynchronizedLongFloatMap((TLongFloatMap) tSynchronizedLongFloatMap0);
      FileDescriptor fileDescriptor0 = FileDescriptor.err;
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      int int1 = 0;
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream((InputStream) fileInputStream0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap();
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap0 = new TSynchronizedLongFloatMap((TLongFloatMap) tLongFloatHashMap0);
      String string0 = tSynchronizedLongFloatMap0.toString();
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap1 = new TSynchronizedLongFloatMap((TLongFloatMap) tSynchronizedLongFloatMap0, (Object) string0);
      Locale locale0 = Locale.JAPANESE;
      String string1 = locale0.getDisplayLanguage();
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap2 = new TSynchronizedLongFloatMap((TLongFloatMap) tSynchronizedLongFloatMap1, (Object) string1);
      assertNotSame(tSynchronizedLongFloatMap2, tSynchronizedLongFloatMap0);
  }

  @Test
  public void test4()  throws Throwable  {
      TLongFloatMap tLongFloatMap0 = null;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = locale0.toString();
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap0 = new TSynchronizedLongFloatMap(tLongFloatMap0, (Object) string0);
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap1 = null;
      try {
        tSynchronizedLongFloatMap1 = new TSynchronizedLongFloatMap(tLongFloatMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      long[] longArray0 = new long[5];
      long long0 = 738L;
      longArray0[0] = long0;
      long long1 = 9223372036854775807L;
      longArray0[1] = long1;
      long long2 = 1043L;
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      long long4 = (-1059L);
      longArray0[4] = long4;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) long3;
      floatArray0[1] = (float) long2;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap0);
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap0 = new TSynchronizedLongFloatMap((TLongFloatMap) tLongFloatHashMap1);
      tSynchronizedLongFloatMap0.getNoEntryKey();
      long[] longArray1 = new long[1];
      long long5 = 1778L;
      longArray1[0] = long5;
      longArray1[0] = long5;
      float[] floatArray1 = new float[9];
      floatArray1[0] = (float) long5;
      floatArray1[1] = (float) longArray1[0];
      floatArray1[2] = (float) longArray1[0];
      floatArray1[3] = (float) long5;
      floatArray1[4] = (float) long5;
      floatArray1[5] = (float) longArray1[0];
      floatArray1[6] = (float) longArray1[0];
      floatArray1[7] = (float) long5;
      floatArray1[8] = (float) longArray1[0];
      TLongFloatHashMap tLongFloatHashMap2 = new TLongFloatHashMap(longArray1, floatArray1);
      String string0 = "ul6OiHT&jcuyUl;x";
      URI uRI0 = URI.create(string0);
      String string1 = uRI0.getRawPath();
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap1 = new TSynchronizedLongFloatMap((TLongFloatMap) tLongFloatHashMap2, (Object) string1);
      assertNotSame(tSynchronizedLongFloatMap1, tSynchronizedLongFloatMap0);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) longArray0[0];
      floatArray0[1] = (float) longArray0[2];
      floatArray0[2] = (float) longArray0[2];
      float float0 = (-1.0F);
      floatArray0[3] = float0;
      float float1 = (-1086.3478F);
      floatArray0[4] = float1;
      floatArray0[5] = (float) longArray0[4];
      float float2 = (-932.04297F);
      floatArray0[6] = float2;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap0);
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap0 = new TSynchronizedLongFloatMap((TLongFloatMap) tLongFloatHashMap1);
      tSynchronizedLongFloatMap0.keySet();
      TLongFloatHashMap tLongFloatHashMap2 = new TLongFloatHashMap(int0);
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap1 = new TSynchronizedLongFloatMap((TLongFloatMap) tLongFloatHashMap2);
      TSynchronizedFloatCollection tSynchronizedFloatCollection0 = (TSynchronizedFloatCollection)tSynchronizedLongFloatMap1.valueCollection();
      assertEquals(0, tSynchronizedFloatCollection0.size());
  }

  @Test
  public void test7()  throws Throwable  {
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap();
      TFloatFunction tFloatFunction0 = null;
      tLongFloatHashMap0.transformValues(tFloatFunction0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)68;
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)89;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-97);
      byteArray0[5] = byte5;
      byte byte6 = (byte)5;
      byteArray0[6] = byte6;
      tLongFloatHashMap0._states = byteArray0;
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap0 = new TSynchronizedLongFloatMap((TLongFloatMap) tLongFloatHashMap0);
      boolean boolean0 = tSynchronizedLongFloatMap0.isEmpty();
      assertEquals(true, boolean0);
      
      tSynchronizedLongFloatMap0.getNoEntryValue();
      long long0 = 1048L;
      // Undeclared exception!
      try {
        tSynchronizedLongFloatMap0.get(long0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap();
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap0);
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap0 = new TSynchronizedLongFloatMap((TLongFloatMap) tLongFloatHashMap1);
      long long0 = 1L;
      float float0 = (-1594.045F);
      tSynchronizedLongFloatMap0.putIfAbsent(long0, float0);
      assertEquals("{1=-1594.045}", tLongFloatHashMap1.toString());
      
      TLongFloatHashMap tLongFloatHashMap2 = new TLongFloatHashMap();
      TLongFloatHashMap tLongFloatHashMap3 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap2);
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap1 = new TSynchronizedLongFloatMap((TLongFloatMap) tLongFloatHashMap3);
      assertFalse(tSynchronizedLongFloatMap1.equals(tSynchronizedLongFloatMap0));
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-1);
      int int1 = (-1831);
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(int1);
      Locale locale0 = Locale.FRENCH;
      long long0 = (-1374L);
      tLongFloatHashMap0.containsKey(long0);
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap0);
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap0 = new TSynchronizedLongFloatMap((TLongFloatMap) tLongFloatHashMap1);
      tSynchronizedLongFloatMap0.keys(tLongFloatHashMap1._set);
      Locale locale1 = Locale.FRANCE;
      String string0 = locale0.getDisplayCountry(locale1);
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap1 = new TSynchronizedLongFloatMap((TLongFloatMap) tLongFloatHashMap0, (Object) string0);
      tSynchronizedLongFloatMap1.adjustValue((long) int1, (float) int0);
      long long1 = 0L;
      float float0 = (-1237.4124F);
      tSynchronizedLongFloatMap1.put(long1, float0);
      tSynchronizedLongFloatMap1.getNoEntryKey();
      float float1 = 205.18102F;
      long long2 = (-1746L);
      tSynchronizedLongFloatMap1.getNoEntryKey();
      tSynchronizedLongFloatMap1.hashCode();
      tSynchronizedLongFloatMap0.getNoEntryKey();
      tSynchronizedLongFloatMap1.increment(long2);
      TLongFloatHashMap tLongFloatHashMap2 = new TLongFloatHashMap(int0, (float) int0, (long) int0, float1);
      tSynchronizedLongFloatMap0.valueCollection();
      TLongFloatHashMap tLongFloatHashMap3 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap2);
      // Undeclared exception!
      try {
        tLongFloatHashMap0.setAutoCompactionFactor((float) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1.0
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = 0L;
      longArray0[0] = long0;
      long long1 = 0L;
      longArray0[1] = long1;
      long long2 = 0L;
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      long long4 = (-1462L);
      longArray0[4] = long4;
      long long5 = (-1L);
      longArray0[5] = long5;
      long long6 = 886L;
      longArray0[6] = long6;
      long long7 = 1L;
      longArray0[7] = long7;
      float[] floatArray0 = new float[3];
      float float0 = (-1.0F);
      floatArray0[0] = float0;
      floatArray0[1] = (float) long4;
      floatArray0[2] = (float) long2;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap0 = new TSynchronizedLongFloatMap((TLongFloatMap) tLongFloatHashMap0);
      Object object0 = new Object();
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap1 = new TSynchronizedLongFloatMap((TLongFloatMap) tSynchronizedLongFloatMap0, object0);
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap2 = new TSynchronizedLongFloatMap((TLongFloatMap) tSynchronizedLongFloatMap1, object0);
      TFloatProcedure tFloatProcedure0 = null;
      // Undeclared exception!
      try {
        tSynchronizedLongFloatMap2.forEachValue(tFloatProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = 1923L;
      longArray0[0] = long0;
      long long1 = (-933L);
      longArray0[1] = long1;
      long long2 = 1871L;
      longArray0[2] = long2;
      long long3 = (-1L);
      longArray0[3] = long3;
      long long4 = 862L;
      longArray0[4] = long4;
      long long5 = (-1L);
      longArray0[5] = long5;
      long long6 = 0L;
      longArray0[6] = long6;
      long long7 = 1603L;
      longArray0[7] = long7;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) longArray0[3];
      floatArray0[1] = (float) longArray0[6];
      floatArray0[2] = (float) long0;
      floatArray0[3] = (float) longArray0[4];
      floatArray0[4] = (float) longArray0[0];
      floatArray0[5] = (float) long3;
      floatArray0[6] = (float) longArray0[4];
      floatArray0[7] = (float) longArray0[4];
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap0 = new TSynchronizedLongFloatMap((TLongFloatMap) tLongFloatHashMap0);
      long[] longArray1 = tSynchronizedLongFloatMap0.keys(longArray0);
      assertSame(longArray0, longArray1);
  }

  @Test
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = 0L;
      longArray0[0] = long0;
      long long1 = (-1L);
      longArray0[1] = long1;
      float[] floatArray0 = new float[6];
      float float0 = 1186.2854F;
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      floatArray0[2] = (float) longArray0[0];
      floatArray0[3] = (float) long1;
      floatArray0[4] = (float) long0;
      floatArray0[5] = (float) longArray0[1];
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap0 = new TSynchronizedLongFloatMap((TLongFloatMap) tLongFloatHashMap0);
      Object object0 = null;
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap1 = new TSynchronizedLongFloatMap((TLongFloatMap) tSynchronizedLongFloatMap0, object0);
      tSynchronizedLongFloatMap1.getNoEntryValue();
      int int0 = (-1386);
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(int0, int0);
      Float float2 = new Float((float) int0);
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap2 = new TSynchronizedLongFloatMap((TLongFloatMap) tLongFloatHashMap1, (Object) float2);
      boolean boolean0 = tSynchronizedLongFloatMap2.containsKey((long) int0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-852);
      float float0 = (-300.62735F);
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap();
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap0);
      int int1 = (-153);
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -153
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = 213L;
      longArray0[0] = long0;
      long long1 = (-1320L);
      longArray0[1] = long1;
      long long2 = (-964L);
      longArray0[2] = long2;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) long2;
      floatArray0[1] = (float) longArray0[0];
      floatArray0[2] = (float) long1;
      floatArray0[3] = (float) long1;
      floatArray0[4] = (float) longArray0[2];
      floatArray0[5] = (float) long0;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
      String string0 = "from > to : ";
      boolean boolean0 = false;
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0, boolean0);
      // Undeclared exception!
      try {
        stringTokenizer0.nextToken(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-1002);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) int0;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) longArray0[0];
      float float0 = 0.0F;
      floatArray0[2] = float0;
      floatArray0[3] = (float) longArray0[0];
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) int0;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
      String string0 = Long.toBinaryString((long) int0);
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap0 = new TSynchronizedLongFloatMap((TLongFloatMap) tLongFloatHashMap0, (Object) string0);
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap1 = new TSynchronizedLongFloatMap((TLongFloatMap) tSynchronizedLongFloatMap0);
      String string1 = tSynchronizedLongFloatMap1.toString();
      assertNotNull(string1);
      
      int int1 = 878;
      TLongFloatHashMap tLongFloatHashMap1 = new TLongFloatHashMap(int1);
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap2 = new TSynchronizedLongFloatMap((TLongFloatMap) tLongFloatHashMap1);
      float float1 = (-1799.3418F);
      tLongFloatHashMap1.getAutoCompactionFactor();
      TLongFloatHashMap tLongFloatHashMap2 = new TLongFloatHashMap(int0);
      TLongFloatHashMap tLongFloatHashMap3 = new TLongFloatHashMap((TLongFloatMap) tLongFloatHashMap2);
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap3 = new TSynchronizedLongFloatMap((TLongFloatMap) tLongFloatHashMap3);
      tSynchronizedLongFloatMap3.size();
      TLongFloatHashMap tLongFloatHashMap4 = new TLongFloatHashMap(int0, float1);
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap4 = new TSynchronizedLongFloatMap((TLongFloatMap) tLongFloatHashMap4);
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = Locale.ENGLISH;
      String string2 = locale0.getDisplayCountry(locale1);
      tLongFloatHashMap2.equals((Object) string2);
      tSynchronizedLongFloatMap4.toString();
      Object object0 = null;
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap5 = new TSynchronizedLongFloatMap((TLongFloatMap) tSynchronizedLongFloatMap4, object0);
      // Undeclared exception!
      try {
        tSynchronizedLongFloatMap5.keySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = 0L;
      longArray0[0] = long0;
      long long1 = 647L;
      longArray0[1] = long1;
      long long2 = (-334L);
      longArray0[2] = long2;
      long long3 = 1066L;
      longArray0[3] = long3;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) long0;
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
      TSynchronizedLongFloatMap tSynchronizedLongFloatMap0 = new TSynchronizedLongFloatMap((TLongFloatMap) tLongFloatHashMap0);
      TLongFloatIterator tLongFloatIterator0 = tSynchronizedLongFloatMap0.iterator();
      assertEquals(true, tLongFloatIterator0.hasNext());
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-485);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      longArray0[6] = (long) int0;
      long long0 = (-9223372036854775808L);
      longArray0[7] = long0;
      longArray0[8] = (long) int0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) longArray0[3];
      TLongFloatHashMap tLongFloatHashMap0 = new TLongFloatHashMap(longArray0, floatArray0);
      String string0 = "{";
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"{\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }
}
