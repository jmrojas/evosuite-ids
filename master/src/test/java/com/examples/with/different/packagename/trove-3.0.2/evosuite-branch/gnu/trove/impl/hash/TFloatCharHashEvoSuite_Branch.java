/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.hash.TFloatCharHashMap;
import gnu.trove.procedure.TFloatProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatCharHashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TFloatCharHash.getNoEntryValue()C: root-Branch
   * 2 gnu.trove.impl.hash.TFloatCharHash.<init>(I)V: root-Branch
   * 3 gnu.trove.impl.hash.TFloatCharHash.setUp(I)I: root-Branch
   */

//   @Test
//   public void test0()  throws Throwable  {
//       TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap((int) '\u0000');
//       char char0 = tFloatCharHashMap0.getNoEntryValue();
//       assertEquals(0.0F, tFloatCharHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals('\u0000', char0);
//   }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TFloatCharHash.getNoEntryKey()F: root-Branch
   * 2 gnu.trove.impl.hash.TFloatCharHash.<init>()V: root-Branch
   */

//   @Test
//   public void test1()  throws Throwable  {
//       TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
//       float float0 = tFloatCharHashMap0.getNoEntryKey();
//       assertEquals(23, tFloatCharHashMap0.capacity());
//       assertEquals('\u0000', tFloatCharHashMap0.getNoEntryValue());
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TFloatCharHash.<init>(IFFC)V: root-Branch
   */

//   @Test
//   public void test2()  throws Throwable  {
//       TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(171, (float) 'I', (float) 171, '\u0000');
//       assertEquals(3, tFloatCharHashMap0.capacity());
//       assertEquals(171.0F, tFloatCharHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals('\u0000', tFloatCharHashMap0.getNoEntryValue());
//   }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TFloatCharHash.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   * 2 gnu.trove.impl.hash.TFloatCharHash.<init>(IF)V: root-Branch
   */

//   @Test
//   public void test3()  throws Throwable  {
//       TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(31322867, 31322867);
//       ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(31322867);
//       ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
//       tFloatCharHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
//       assertEquals(0.0F, tFloatCharHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals('\u0000', tFloatCharHashMap0.getNoEntryValue());
//   }

  //Test case number: 4
  /*
   * 9 covered goals:
   * 1 gnu.trove.impl.hash.TFloatCharHash.contains(F)Z: I5 Branch 1 IFLT L178 - false
   * 2 gnu.trove.impl.hash.TFloatCharHash.insertKeyAt(IF)V: root-Branch
   * 3 gnu.trove.impl.hash.TFloatCharHash.insertKey(F)I: I30 Branch 13 IFNE L279 - true
   * 4 gnu.trove.impl.hash.TFloatCharHash.insertKey(F)I: I30 Branch 13 IFNE L279 - false
   * 5 gnu.trove.impl.hash.TFloatCharHash.insertKey(F)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 6 gnu.trove.impl.hash.TFloatCharHash.insertKey(F)I: I57 Branch 15 IFNE L286 - false
   * 7 gnu.trove.impl.hash.TFloatCharHash.index(F)I: I37 Branch 5 IFNE L228 - true
   * 8 gnu.trove.impl.hash.TFloatCharHash.index(F)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 9 gnu.trove.impl.hash.TFloatCharHash.index(F)I: I52 Branch 7 IFNE L231 - false
   */

//   @Test
//   public void test4()  throws Throwable  {
//       float[] floatArray0 = new float[26];
//       char[] charArray0 = new char[19];
//       TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(floatArray0, charArray0);
//       boolean boolean0 = tFloatCharHashMap0.contains(0.0F);
//       assertEquals("{0.0=\u0000}", tFloatCharHashMap0.toString());
//       assertEquals(1, tFloatCharHashMap0.size());
//       assertEquals('\u0000', tFloatCharHashMap0.getNoEntryValue());
//       assertEquals(0.0F, tFloatCharHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals(true, boolean0);
//   }

  //Test case number: 5
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TFloatCharHash.forEach(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 2 IFLE L192 - true
   * 2 gnu.trove.impl.hash.TFloatCharHash.forEach(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TFloatCharHash.forEach(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

//   @Test
//   public void test5()  throws Throwable  {
//       TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap((int) '\u0000');
//       boolean boolean0 = tFloatCharHashMap0.forEach((TFloatProcedure) null);
//       assertEquals(0.0F, tFloatCharHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals('\u0000', tFloatCharHashMap0.getNoEntryValue());
//       assertEquals(true, boolean0);
//   }

  //Test case number: 6
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TFloatCharHash.forEach(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - false
   * 2 gnu.trove.impl.hash.TFloatCharHash.forEach(Lgnu/trove/procedure/TFloatProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TFloatCharHash.forEach(Lgnu/trove/procedure/TFloatProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

  @Test
  public void test6()  throws Throwable  {
      float[] floatArray0 = new float[6];
      char[] charArray0 = new char[6];
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(floatArray0, charArray0);
      // Undeclared exception!
      try {
        tFloatCharHashMap0.forEachKey((TFloatProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TFloatCharHash.index(F)I: I37 Branch 5 IFNE L228 - false
   * 2 gnu.trove.impl.hash.TFloatCharHash.contains(F)Z: I5 Branch 1 IFLT L178 - true
   */

//   @Test
//   public void test7()  throws Throwable  {
//       TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
//       boolean boolean0 = tFloatCharHashMap0.contains(0.0F);
//       assertEquals('\u0000', tFloatCharHashMap0.getNoEntryValue());
//       assertEquals(23, tFloatCharHashMap0.capacity());
//       assertEquals(0.0F, tFloatCharHashMap0.getNoEntryKey(), 0.01F);
//       assertEquals(false, boolean0);
//   }

  //Test case number: 8
  /*
   * 18 covered goals:
   * 1 gnu.trove.impl.hash.TFloatCharHash.indexRehashed(FIIB)I: I62 Branch 11 IF_ICMPEQ L254 - true
   * 2 gnu.trove.impl.hash.TFloatCharHash.indexRehashed(FIIB)I: I46 Branch 9 IFNE L250 - false
   * 3 gnu.trove.impl.hash.TFloatCharHash.removeAt(I)V: root-Branch
   * 4 gnu.trove.impl.hash.TFloatCharHash.indexRehashed(FIIB)I: I29 Branch 8 IFGE L245 - true
   * 5 gnu.trove.impl.hash.TFloatCharHash.indexRehashed(FIIB)I: I29 Branch 8 IFGE L245 - false
   * 6 gnu.trove.impl.hash.TFloatCharHash.indexRehashed(FIIB)I: I46 Branch 9 IFNE L250 - true
   * 7 gnu.trove.impl.hash.TFloatCharHash.indexRehashed(FIIB)I: I59 Branch 10 IFNE L254 - false
   * 8 gnu.trove.impl.hash.TFloatCharHash.indexRehashed(FIIB)I: I62 Branch 11 IF_ICMPEQ L254 - false
   * 9 gnu.trove.impl.hash.TFloatCharHash.indexRehashed(FIIB)I: I71 Branch 12 IF_ICMPNE L256 - true
   * 10 gnu.trove.impl.hash.TFloatCharHash.insertKey(F)I: I57 Branch 15 IFNE L286 - true
   * 11 gnu.trove.impl.hash.TFloatCharHash.index(F)I: I52 Branch 7 IFNE L231 - true
   * 12 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 13 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I45 Branch 18 IFGE L310 - false
   * 14 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I62 Branch 19 IFNE L316 - true
   * 15 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I62 Branch 19 IFNE L316 - false
   * 16 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 17 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 18 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I104 Branch 22 IFNE L327 - false
   */

  @Test
  public void test8()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[0] = (-1350.6727F);
      char[] charArray0 = new char[4];
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(floatArray0, charArray0);
      tFloatCharHashMap0.remove(0.0F);
      boolean boolean0 = tFloatCharHashMap0.increment(0.0F);
      assertEquals(1, tFloatCharHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 9
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.TFloatCharHash.indexRehashed(FIIB)I: I71 Branch 12 IF_ICMPNE L256 - false
   * 2 gnu.trove.impl.hash.TFloatCharHash.<init>()V: root-Branch
   * 3 gnu.trove.impl.hash.TFloatCharHash.indexRehashed(FIIB)I: I29 Branch 8 IFGE L245 - true
   * 4 gnu.trove.impl.hash.TFloatCharHash.indexRehashed(FIIB)I: I59 Branch 10 IFNE L254 - true
   * 5 gnu.trove.impl.hash.TFloatCharHash.indexRehashed(FIIB)I: I71 Branch 12 IF_ICMPNE L256 - true
   * 6 gnu.trove.impl.hash.TFloatCharHash.index(F)I: I46 Branch 6 IF_ICMPNE L231 - true
   */

//   @Test
//   public void test9()  throws Throwable  {
//       TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
//       assertEquals(23, tFloatCharHashMap0.capacity());
//       
//       byte[] byteArray0 = new byte[23];
//       byteArray0[1] = (byte)52;
//       byteArray0[2] = (byte)52;
//       byteArray0[3] = (byte)52;
//       byteArray0[4] = (byte)52;
//       byteArray0[6] = (byte)52;
//       byteArray0[7] = (byte)52;
//       byteArray0[8] = (byte)52;
//       byteArray0[9] = (byte)52;
//       byteArray0[10] = (byte)52;
//       byteArray0[11] = (byte)52;
//       byteArray0[12] = (byte)52;
//       byteArray0[13] = (byte)52;
//       byteArray0[14] = (byte)52;
//       byteArray0[15] = (byte)52;
//       byteArray0[16] = (byte)52;
//       byteArray0[17] = (byte)52;
//       byteArray0[18] = (byte)52;
//       byteArray0[19] = (byte)52;
//       byteArray0[20] = (byte)52;
//       byteArray0[21] = (byte)52;
//       byteArray0[22] = (byte)52;
//       byteArray0[0] = (byte)52;
//       byteArray0[5] = (byte)52;
//       tFloatCharHashMap0._states = byteArray0;
//       boolean boolean0 = tFloatCharHashMap0.increment((float) (byte)52);
//       assertEquals(false, boolean0);
//       assertEquals(0.0F, tFloatCharHashMap0.getNoEntryKey(), 0.01F);
//   }

  //Test case number: 10
  /*
   * 5 covered goals:
   * 1 gnu.trove.impl.hash.TFloatCharHash.insertKey(F)I: I50 Branch 14 IF_ICMPNE L286 - true
   * 2 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 3 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 4 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I67 Branch 20 IF_ICMPEQ L317 - false
   * 5 gnu.trove.impl.hash.TFloatCharHash.index(F)I: I52 Branch 7 IFNE L231 - false
   */

  @Test
  public void test10()  throws Throwable  {
      float[] floatArray0 = new float[26];
      char[] charArray0 = new char[19];
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(floatArray0, charArray0);
      tFloatCharHashMap0.remove(0.0F);
      assertEquals(0, tFloatCharHashMap0.size());
      
      tFloatCharHashMap0.adjustOrPutValue(0.0F, 'A', 'A');
      assertEquals("{0.0=A}", tFloatCharHashMap0.toString());
  }

  //Test case number: 11
  /*
   * 16 covered goals:
   * 1 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I45 Branch 18 IFGE L310 - true
   * 2 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 3 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I116 Branch 23 IF_ICMPNE L332 - true
   * 4 gnu.trove.impl.hash.TFloatCharHash.removeAt(I)V: root-Branch
   * 5 gnu.trove.impl.hash.TFloatCharHash.indexRehashed(FIIB)I: I29 Branch 8 IFGE L245 - false
   * 6 gnu.trove.impl.hash.TFloatCharHash.indexRehashed(FIIB)I: I46 Branch 9 IFNE L250 - true
   * 7 gnu.trove.impl.hash.TFloatCharHash.indexRehashed(FIIB)I: I59 Branch 10 IFNE L254 - false
   * 8 gnu.trove.impl.hash.TFloatCharHash.indexRehashed(FIIB)I: I62 Branch 11 IF_ICMPEQ L254 - false
   * 9 gnu.trove.impl.hash.TFloatCharHash.index(F)I: I37 Branch 5 IFNE L228 - true
   * 10 gnu.trove.impl.hash.TFloatCharHash.index(F)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 11 gnu.trove.impl.hash.TFloatCharHash.index(F)I: I52 Branch 7 IFNE L231 - true
   * 12 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 13 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 14 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I45 Branch 18 IFGE L310 - false
   * 15 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I67 Branch 20 IF_ICMPEQ L317 - false
   * 16 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I104 Branch 22 IFNE L327 - false
   */

  @Test
  public void test11()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[0] = (-1350.6727F);
      char[] charArray0 = new char[4];
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(floatArray0, charArray0);
      tFloatCharHashMap0.remove(0.0F);
      char char0 = tFloatCharHashMap0.adjustOrPutValue(0.0F, '\u0000', '8');
      assertEquals("{0.0=8, -1350.6727=\u0000}", tFloatCharHashMap0.toString());
      assertEquals('8', char0);
  }

  //Test case number: 12
  /*
   * 16 covered goals:
   * 1 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I104 Branch 22 IFNE L327 - true
   * 2 gnu.trove.impl.hash.TFloatCharHash.setUp(I)I: root-Branch
   * 3 gnu.trove.impl.hash.TFloatCharHash.<init>(I)V: root-Branch
   * 4 gnu.trove.impl.hash.TFloatCharHash.insertKeyAt(IF)V: root-Branch
   * 5 gnu.trove.impl.hash.TFloatCharHash.insertKey(F)I: I30 Branch 13 IFNE L279 - true
   * 6 gnu.trove.impl.hash.TFloatCharHash.insertKey(F)I: I30 Branch 13 IFNE L279 - false
   * 7 gnu.trove.impl.hash.TFloatCharHash.insertKey(F)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 8 gnu.trove.impl.hash.TFloatCharHash.insertKey(F)I: I57 Branch 15 IFNE L286 - true
   * 9 gnu.trove.impl.hash.TFloatCharHash.insertKey(F)I: I57 Branch 15 IFNE L286 - false
   * 10 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 11 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I45 Branch 18 IFGE L310 - true
   * 12 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I62 Branch 19 IFNE L316 - true
   * 13 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I62 Branch 19 IFNE L316 - false
   * 14 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 15 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 16 gnu.trove.impl.hash.TFloatCharHash.insertKeyRehash(FIIB)I: I116 Branch 23 IF_ICMPNE L332 - true
   */

//   @Test
//   public void test12()  throws Throwable  {
//       float[] floatArray0 = new float[8];
//       floatArray0[0] = 1.0F;
//       floatArray0[5] = (-1.0F);
//       char[] charArray0 = new char[7];
//       floatArray0[4] = (float) '?';
//       TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(floatArray0, charArray0);
//       assertEquals('\u0000', tFloatCharHashMap0.getNoEntryValue());
//       assertEquals(4, tFloatCharHashMap0.size());
//       assertEquals("{1.0=\u0000, 63.0=\u0000, -1.0=\u0000, 0.0=\u0000}", tFloatCharHashMap0.toString());
//       assertEquals(0.0F, tFloatCharHashMap0.getNoEntryKey(), 0.01F);
//   }
}
