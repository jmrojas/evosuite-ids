/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TLongFunction;
import gnu.trove.impl.sync.TSynchronizedLongCollection;
import gnu.trove.impl.sync.TSynchronizedShortLongMap;
import gnu.trove.impl.sync.TSynchronizedShortSet;
import gnu.trove.map.TShortLongMap;
import gnu.trove.map.hash.TShortLongHashMap;
import gnu.trove.procedure.TLongProcedure;
import gnu.trove.procedure.TShortLongProcedure;
import gnu.trove.procedure.TShortProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedShortLongMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.iterator()Lgnu/trove/iterator/TShortLongIterator;: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedShortLongMap.size()I: root-Branch
   * 3 gnu.trove.impl.sync.TSynchronizedShortLongMap.<init>(Lgnu/trove/map/TShortLongMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((int) (short)0, (float) (short)1, (short)1, (long) (short)0);
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap((TShortLongMap) tSynchronizedShortLongMap0);
      assertNotSame(tShortLongHashMap1, tShortLongHashMap0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.put(SJ)J: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      tSynchronizedShortLongMap0.put((short)1158, (short)1158);
      assertEquals(false, tShortLongHashMap0.isEmpty());
      assertEquals(1, tSynchronizedShortLongMap0.size());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      boolean boolean0 = tSynchronizedShortLongMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.forEachKey(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedShortLongMap.<init>(Lgnu/trove/map/TShortLongMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(1211, 1211);
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0, (Object) "Taiwan");
      boolean boolean0 = tSynchronizedShortLongMap0.forEachKey((TShortProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.transformValues(Lgnu/trove/function/TLongFunction;)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(1328, (-184.81732F));
      Long long0 = new Long((long) 1328);
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0, (Object) long0);
      tSynchronizedShortLongMap0.transformValues((TLongFunction) null);
      assertEquals(0, tSynchronizedShortLongMap0.size());
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      String string0 = tSynchronizedShortLongMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.getNoEntryValue()J: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      long long0 = tSynchronizedShortLongMap0.getNoEntryValue();
      assertEquals(0L, long0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.keys()[S: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      short[] shortArray0 = tSynchronizedShortLongMap0.keys();
      assertNotNull(shortArray0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>();
      tSynchronizedShortLongMap0.putAll((Map<? extends Short, ? extends Long>) hashMap0);
      assertEquals(true, tSynchronizedShortLongMap0.isEmpty());
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.increment(S)Z: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      boolean boolean0 = tSynchronizedShortLongMap0.increment((short)1836);
      assertEquals(false, boolean0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.putIfAbsent(SJ)J: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      tSynchronizedShortLongMap0.putIfAbsent((short)1814, (short)1814);
      assertEquals(false, tShortLongHashMap0.isEmpty());
      assertEquals("{1814=1814}", tSynchronizedShortLongMap0.toString());
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.adjustValue(SJ)Z: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0, (Object) "zh-CN");
      boolean boolean0 = tSynchronizedShortLongMap0.adjustValue((short) (-1165), (short) (-1165));
      assertEquals(false, boolean0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.keys([S)[S: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      short[] shortArray0 = tSynchronizedShortLongMap0.keys(tShortLongHashMap0._set);
      assertNotNull(shortArray0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.values([J)[J: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      long[] longArray0 = new long[1];
      long[] longArray1 = tSynchronizedShortLongMap0.values(longArray0);
      assertSame(longArray1, longArray0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.forEachEntry(Lgnu/trove/procedure/TShortLongProcedure;)Z: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      short[] shortArray0 = new short[20];
      long[] longArray0 = new long[5];
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      // Undeclared exception!
      try {
        tSynchronizedShortLongMap0.forEachEntry((TShortLongProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.get(S)J: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      long long0 = tSynchronizedShortLongMap0.get((short)1814);
      assertEquals(0L, long0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.containsValue(J)Z: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      boolean boolean0 = tSynchronizedShortLongMap0.containsValue((long) 0);
      assertEquals(false, boolean0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.getNoEntryKey()S: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((int) (short)1291, (float) (short)1291);
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0, (Object) "2413");
      short short0 = tSynchronizedShortLongMap0.getNoEntryKey();
      assertEquals((short)0, short0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.equals(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      boolean boolean0 = tSynchronizedShortLongMap0.equals((Object) "");
      assertEquals(false, boolean0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.values()[J: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      long[] longArray0 = tSynchronizedShortLongMap0.values();
      assertNotNull(longArray0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.clear()V: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      tSynchronizedShortLongMap0.clear();
      assertEquals(0, tSynchronizedShortLongMap0.size());
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.remove(S)J: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      long long0 = tSynchronizedShortLongMap0.remove((short)1814);
      assertEquals(0L, long0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.hashCode()I: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      int int0 = tSynchronizedShortLongMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.containsKey(S)Z: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      boolean boolean0 = tSynchronizedShortLongMap0.containsKey((short)1836);
      assertEquals(false, boolean0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.putAll(Lgnu/trove/map/TShortLongMap;)V: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0, (Object) "zh-CN");
      tSynchronizedShortLongMap0.putAll((TShortLongMap) tShortLongHashMap0);
      assertEquals("{}", tShortLongHashMap0.toString());
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.forEachValue(Lgnu/trove/procedure/TLongProcedure;)Z: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      boolean boolean0 = tSynchronizedShortLongMap0.forEachValue((TLongProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.retainEntries(Lgnu/trove/procedure/TShortLongProcedure;)Z: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0, (Object) "zh-CN");
      boolean boolean0 = tSynchronizedShortLongMap0.retainEntries((TShortLongProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.adjustOrPutValue(SJJ)J: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0, (Object) "zh-CN");
      long long0 = tSynchronizedShortLongMap0.adjustOrPutValue((short) (-1165), (long) (short) (-1165), (long) 1);
      assertEquals(false, tShortLongHashMap0.isEmpty());
      assertEquals(1L, long0);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.<init>(Lgnu/trove/map/TShortLongMap;)V: I17 Branch 1 IFNONNULL L59 - false
   */

  @Test
  public void test28()  throws Throwable  {
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = null;
      try {
        tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 29
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.keySet()Lgnu/trove/set/TShortSet;: I11 Branch 2 IFNONNULL L107 - true
   * 2 gnu.trove.impl.sync.TSynchronizedShortLongMap.keySet()Lgnu/trove/set/TShortSet;: I11 Branch 2 IFNONNULL L107 - false
   * 3 gnu.trove.impl.sync.TSynchronizedShortLongMap.<init>(Lgnu/trove/map/TShortLongMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test29()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0);
      TSynchronizedShortSet tSynchronizedShortSet0 = (TSynchronizedShortSet)tSynchronizedShortLongMap0.keySet();
      assertNotNull(tSynchronizedShortSet0);
      
      TSynchronizedShortSet tSynchronizedShortSet1 = (TSynchronizedShortSet)tSynchronizedShortLongMap0.keySet();
      assertSame(tSynchronizedShortSet1, tSynchronizedShortSet0);
  }

  //Test case number: 30
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedShortLongMap.valueCollection()Lgnu/trove/TLongCollection;: I11 Branch 3 IFNONNULL L121 - true
   * 2 gnu.trove.impl.sync.TSynchronizedShortLongMap.valueCollection()Lgnu/trove/TLongCollection;: I11 Branch 3 IFNONNULL L121 - false
   * 3 gnu.trove.impl.sync.TSynchronizedShortLongMap.<init>(Lgnu/trove/map/TShortLongMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test30()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((int) (short)1291, (float) (short)1291);
      TSynchronizedShortLongMap tSynchronizedShortLongMap0 = new TSynchronizedShortLongMap((TShortLongMap) tShortLongHashMap0, (Object) "2413");
      TSynchronizedLongCollection tSynchronizedLongCollection0 = (TSynchronizedLongCollection)tSynchronizedShortLongMap0.valueCollection();
      assertNotNull(tSynchronizedLongCollection0);
      
      TSynchronizedLongCollection tSynchronizedLongCollection1 = (TSynchronizedLongCollection)tSynchronizedShortLongMap0.valueCollection();
      assertSame(tSynchronizedLongCollection1, tSynchronizedLongCollection0);
  }
}
