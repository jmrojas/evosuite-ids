/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TCharFunction;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortCharMap;
import gnu.trove.iterator.TShortCharIterator;
import gnu.trove.map.TShortCharMap;
import gnu.trove.map.hash.TShortCharHashMap;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableShortCharMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)1017;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)1;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short) (-32768);
      shortArray0[4] = short4;
      char[] charArray0 = new char[2];
      char char0 = 't';
      charArray0[0] = char0;
      char char1 = '';
      charArray0[1] = char1;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap0 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap0);
      short short5 = (short) (-1);
      char char2 = tUnmodifiableShortCharMap0.get(short5);
      assertEquals('\u0000', char2);
  }

  @Test
  public void test1()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      int int0 = 1190;
      float float0 = 0.0F;
      short short0 = (short)1739;
      char char0 = 'J';
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap(int0, float0, short0, char0);
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap0 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap1);
      char char1 = 'P';
      char char2 = 'J';
      // Undeclared exception!
      try {
        tUnmodifiableShortCharMap0.adjustOrPutValue(short0, char1, char2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-115);
      float float0 = 0.0F;
      short short0 = (short)0;
      char char0 = 'V';
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0, float0, short0, char0);
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap0 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap0);
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap((TShortCharMap) tUnmodifiableShortCharMap0);
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap1 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap1);
      TShortCharHashMap tShortCharHashMap2 = new TShortCharHashMap();
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap2 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap2);
      String string0 = "yHuD[3C";
      int int1 = 0;
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int1, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: yHuD[3C://yHuD%5B3C@yHuD[3C:0yHuD%5B3C?yHuD[3C#yHuD[3C
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TShortCharMap tShortCharMap0 = null;
      TShortCharMap tShortCharMap1 = null;
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap0 = null;
      try {
        tUnmodifiableShortCharMap0 = new TUnmodifiableShortCharMap(tShortCharMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short) (-1693);
      shortArray0[0] = short0;
      short short1 = (short) (-1);
      shortArray0[1] = short1;
      short short2 = (short)208;
      shortArray0[2] = short2;
      short short3 = (short)44;
      shortArray0[3] = short3;
      short short4 = (short)16729;
      shortArray0[4] = short4;
      char[] charArray0 = new char[4];
      char char0 = 'j';
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[0] = char0;
      char char1 = '_';
      charArray0[1] = char1;
      charArray0[2] = char1;
      charArray0[3] = char0;
      charArray0[2] = char0;
      char char2 = 'U';
      charArray0[3] = char2;
      charArray0[0] = char0;
      char char3 = 'x';
      charArray0[0] = char2;
      charArray0[1] = char0;
      charArray0[2] = char2;
      charArray0[3] = char2;
      charArray0[1] = char3;
      char char4 = '~';
      charArray0[2] = char4;
      char char5 = ' ';
      charArray0[3] = char5;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap0 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap0);
      tShortCharHashMap0.values();
      TShortCharIterator tShortCharIterator0 = tUnmodifiableShortCharMap0.iterator();
      assertEquals(true, tShortCharIterator0.hasNext());
  }

  @Test
  public void test5()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short) (-1790);
      shortArray0[0] = short0;
      short short1 = (short) (-1);
      shortArray0[1] = short1;
      short short2 = (short) (-1);
      shortArray0[2] = short2;
      short short3 = (short)907;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)15201;
      shortArray0[5] = short5;
      short short6 = (short)264;
      shortArray0[6] = short6;
      short short7 = (short) (-10975);
      shortArray0[7] = short7;
      short short8 = (short) (-1);
      shortArray0[8] = short8;
      short short9 = (short)1480;
      shortArray0[9] = short9;
      char[] charArray0 = new char[6];
      char char0 = 'w';
      charArray0[0] = char0;
      char char1 = ';';
      charArray0[1] = char1;
      char char2 = ' ';
      charArray0[2] = char2;
      char char3 = '@';
      charArray0[3] = char3;
      char char4 = '3';
      charArray0[4] = char4;
      char char5 = 'w';
      charArray0[5] = char5;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap((TShortCharMap) tShortCharHashMap0);
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap0 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap1);
      // Undeclared exception!
      try {
        tUnmodifiableShortCharMap0.remove(shortArray0[3]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short) (-1697);
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      char[] charArray0 = new char[4];
      char char0 = 'Y';
      charArray0[0] = char0;
      char char1 = 'M';
      charArray0[1] = char1;
      char char2 = 'D';
      charArray0[2] = char2;
      char char3 = 'k';
      charArray0[3] = char3;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap0 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap0);
      short short2 = (short)0;
      char char4 = '{';
      // Undeclared exception!
      try {
        tUnmodifiableShortCharMap0.put(short2, char4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 13;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0);
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap0 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap0);
      short short0 = (short)0;
      char char0 = 'J';
      // Undeclared exception!
      try {
        tUnmodifiableShortCharMap0.adjustValue(short0, char0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      TShortCharMap tShortCharMap0 = null;
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap0 = null;
      try {
        tUnmodifiableShortCharMap0 = new TUnmodifiableShortCharMap(tShortCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short) (-296);
      shortArray0[0] = short0;
      short short1 = (short) (-1);
      shortArray0[1] = short1;
      short short2 = (short)279;
      shortArray0[2] = short2;
      short short3 = (short)229;
      shortArray0[3] = short3;
      short short4 = (short)1405;
      shortArray0[4] = short4;
      short short5 = (short)739;
      shortArray0[5] = short5;
      short short6 = (short)31383;
      shortArray0[6] = short6;
      short short7 = (short) (-696);
      shortArray0[7] = short7;
      short short8 = (short) (-75);
      shortArray0[8] = short8;
      short short9 = (short)2020;
      shortArray0[9] = short9;
      char[] charArray0 = new char[9];
      char char0 = '\"';
      charArray0[0] = char0;
      char char1 = ']';
      charArray0[1] = char1;
      char char2 = '$';
      charArray0[2] = char2;
      char char3 = 'q';
      charArray0[3] = char3;
      char char4 = 'e';
      charArray0[4] = char4;
      char char5 = 'o';
      charArray0[5] = char5;
      char char6 = '\'';
      charArray0[6] = char6;
      char char7 = '^';
      charArray0[7] = char7;
      char char8 = '-';
      charArray0[8] = char8;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap0 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap0);
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap1 = new TUnmodifiableShortCharMap((TShortCharMap) tUnmodifiableShortCharMap0);
      char[] charArray1 = new char[10];
      charArray1[0] = char8;
      charArray1[1] = char1;
      charArray1[2] = char4;
      charArray1[3] = char6;
      charArray1[4] = char1;
      charArray1[5] = char4;
      charArray1[6] = char8;
      charArray1[7] = char4;
      charArray1[8] = char2;
      char char9 = '{';
      charArray1[9] = char9;
      char[] charArray2 = tUnmodifiableShortCharMap1.values(charArray1);
      assertSame(charArray2, charArray1);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 548348231;
      TShortCharHashMap tShortCharHashMap0 = null;
      try {
        tShortCharHashMap0 = new TShortCharHashMap(int0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 4177;
      int int1 = 0;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int1, int1);
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap0 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap0);
      float float0 = (-1.0F);
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap(int0, float0);
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap1 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap1);
      tUnmodifiableShortCharMap1.valueCollection();
      float float1 = 0.0F;
      short short0 = (short) (-10253);
      tUnmodifiableShortCharMap1.toString();
      char char0 = '\"';
      // Undeclared exception!
      try {
        tUnmodifiableShortCharMap1.put(short0, char0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short) (-1968);
      shortArray0[0] = short0;
      short short1 = (short)16301;
      shortArray0[1] = short1;
      short short2 = (short) (-445);
      shortArray0[2] = short2;
      short short3 = (short) (-524);
      shortArray0[3] = short3;
      short short4 = (short)15287;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)877;
      shortArray0[7] = short7;
      char[] charArray0 = new char[6];
      char char0 = ':';
      charArray0[0] = char0;
      char char1 = 'F';
      charArray0[1] = char1;
      char char2 = '%';
      charArray0[2] = char2;
      char char3 = 's';
      charArray0[3] = char3;
      char char4 = 'Q';
      charArray0[4] = char4;
      char char5 = 'J';
      charArray0[5] = char5;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap0 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap0);
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap((TShortCharMap) tUnmodifiableShortCharMap0);
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap1 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap1);
      tUnmodifiableShortCharMap1.isEmpty();
      assertEquals(6, tUnmodifiableShortCharMap0.size());
      assertTrue(tUnmodifiableShortCharMap1.equals(tUnmodifiableShortCharMap0));
  }

  @Test
  public void test13()  throws Throwable  {
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap();
      tShortCharHashMap0.capacity();
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap0 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap0);
      tUnmodifiableShortCharMap0.valueCollection();
      tUnmodifiableShortCharMap0.keys();
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap((TShortCharMap) tShortCharHashMap0);
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap1 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap1);
      TCharFunction tCharFunction0 = null;
      // Undeclared exception!
      try {
        tUnmodifiableShortCharMap1.transformValues(tCharFunction0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short)11579;
      shortArray0[0] = short0;
      char[] charArray0 = new char[10];
      char char0 = 'x';
      charArray0[0] = char0;
      char char1 = 'a';
      charArray0[1] = char1;
      char char2 = ';';
      charArray0[2] = char2;
      char char3 = 'r';
      charArray0[3] = char3;
      char char4 = ']';
      charArray0[4] = char4;
      char char5 = 'Y';
      charArray0[5] = char5;
      char char6 = '\'';
      charArray0[6] = char6;
      char char7 = 'o';
      charArray0[7] = char7;
      char char8 = 'H';
      charArray0[8] = char8;
      char char9 = 'i';
      charArray0[9] = char9;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap0 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap0);
      char char10 = 'I';
      // Undeclared exception!
      try {
        tUnmodifiableShortCharMap0.adjustOrPutValue(shortArray0[0], char10, charArray0[1]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-409);
      float float0 = 0.0F;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0, float0);
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap0 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap0);
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap((TShortCharMap) tUnmodifiableShortCharMap0);
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap1 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap1);
      short short0 = (short) (-2009);
      char char0 = 'J';
      // Undeclared exception!
      try {
        tUnmodifiableShortCharMap1.put(short0, char0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      TShortCharMap tShortCharMap0 = null;
      TShortCharHashMap tShortCharHashMap0 = null;
      try {
        tShortCharHashMap0 = new TShortCharHashMap(tShortCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short)360;
      shortArray0[0] = short0;
      short short1 = (short)1;
      shortArray0[1] = short1;
      short short2 = (short) (-1078);
      shortArray0[2] = short2;
      short short3 = (short) (-1796);
      shortArray0[3] = short3;
      short short4 = (short) (-1173);
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      char[] charArray0 = new char[9];
      char char0 = 'D';
      charArray0[0] = char0;
      char char1 = 'H';
      charArray0[1] = char1;
      char char2 = 'P';
      charArray0[2] = char2;
      char char3 = '';
      charArray0[3] = char3;
      char char4 = '[';
      charArray0[4] = char4;
      char char5 = ';';
      charArray0[5] = char5;
      char char6 = 'C';
      charArray0[6] = char6;
      char char7 = ']';
      charArray0[7] = char7;
      char char8 = '(';
      charArray0[8] = char8;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap((TShortCharMap) tShortCharHashMap0);
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap0 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap1);
      TShortCharHashMap tShortCharHashMap2 = new TShortCharHashMap();
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap1 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap2);
      String string0 = tUnmodifiableShortCharMap1.toString();
      assertEquals("{}", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 1959;
      short short0 = (short)1973;
      char char0 = '*';
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(int0, (float) int0, short0, char0);
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap0 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap0);
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap1 = new TUnmodifiableShortCharMap((TShortCharMap) tUnmodifiableShortCharMap0);
      char[] charArray0 = new char[8];
      char char1 = ';';
      charArray0[0] = char1;
      charArray0[1] = char0;
      charArray0[2] = char0;
      char char2 = 's';
      charArray0[3] = char2;
      charArray0[4] = char0;
      charArray0[5] = char0;
      charArray0[6] = char0;
      charArray0[7] = char0;
      tUnmodifiableShortCharMap1.values(charArray0);
      float float0 = 0.0F;
      TShortCharHashMap tShortCharHashMap1 = new TShortCharHashMap(int0, float0);
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap2 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap1);
      // Undeclared exception!
      try {
        tUnmodifiableShortCharMap2.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short) (-1421);
      shortArray0[0] = short0;
      char[] charArray0 = new char[5];
      char char0 = 'u';
      charArray0[0] = char0;
      char char1 = 'v';
      charArray0[1] = char1;
      char char2 = 'F';
      charArray0[2] = char2;
      char char3 = '5';
      charArray0[3] = char3;
      char char4 = 's';
      charArray0[4] = char4;
      TShortCharHashMap tShortCharHashMap0 = new TShortCharHashMap(shortArray0, charArray0);
      TUnmodifiableShortCharMap tUnmodifiableShortCharMap0 = new TUnmodifiableShortCharMap((TShortCharMap) tShortCharHashMap0);
      String string0 = "=";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0);
      // Undeclared exception!
      try {
        stringTokenizer0.nextToken(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
