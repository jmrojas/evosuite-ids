/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap;
import gnu.trove.map.TFloatShortMap;
import gnu.trove.map.hash.TFloatShortHashMap;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableFloatShortMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TFloatShortMap tFloatShortMap0 = null;
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = null;
      try {
        tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap(tFloatShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = 205.04555F;
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      float float2 = (-1305.9818F);
      floatArray0[2] = float2;
      float float3 = 1668.3206F;
      floatArray0[3] = float3;
      float float4 = (-1366.2811F);
      floatArray0[4] = float4;
      float float5 = 783.00775F;
      floatArray0[5] = float5;
      float float6 = 0.0F;
      floatArray0[6] = float6;
      float float7 = (-1.0F);
      floatArray0[7] = float7;
      short[] shortArray0 = new short[5];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)1603;
      shortArray0[1] = short1;
      short short2 = (short)162;
      shortArray0[2] = short2;
      short short3 = (short)98;
      shortArray0[3] = short3;
      short short4 = (short) (-1993);
      shortArray0[4] = short4;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      short[] shortArray1 = tUnmodifiableFloatShortMap0.values();
      assertNotSame(shortArray0, shortArray1);
  }

  @Test
  public void test2()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = (-1.0F);
      floatArray0[0] = float0;
      float float1 = 1.0F;
      floatArray0[1] = float1;
      float float2 = (-380.73306F);
      floatArray0[2] = float2;
      float float3 = 0.0F;
      floatArray0[3] = float3;
      float float4 = 1276.1678F;
      floatArray0[4] = float4;
      float float5 = (-2017.7592F);
      floatArray0[5] = float5;
      float float6 = 1435.6681F;
      floatArray0[6] = float6;
      float float7 = 0.0F;
      floatArray0[7] = float7;
      short[] shortArray0 = new short[8];
      short short0 = (short)1174;
      shortArray0[0] = short0;
      short short1 = (short)620;
      shortArray0[1] = short1;
      short short2 = (short)113;
      shortArray0[2] = short2;
      short short3 = (short)17739;
      shortArray0[3] = short3;
      short short4 = (short) (-415);
      shortArray0[4] = short4;
      short short5 = (short)1504;
      shortArray0[5] = short5;
      short short6 = (short) (-943);
      shortArray0[6] = short6;
      short short7 = (short)0;
      shortArray0[7] = short7;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      short[] shortArray1 = tUnmodifiableFloatShortMap0.values(shortArray0);
      assertSame(shortArray0, shortArray1);
  }

  @Test
  public void test3()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = 1.0F;
      floatArray0[0] = float0;
      float float1 = (-1.0F);
      floatArray0[1] = float1;
      float float2 = 0.5F;
      floatArray0[2] = float2;
      float float3 = (-1093.3591F);
      floatArray0[3] = float3;
      float float4 = 1.0F;
      floatArray0[4] = float4;
      float float5 = 1675.5872F;
      floatArray0[5] = float5;
      float float6 = (-1939.7039F);
      floatArray0[6] = float6;
      float float7 = 0.5F;
      floatArray0[7] = float7;
      short[] shortArray0 = new short[8];
      short short0 = (short)490;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)1803;
      shortArray0[2] = short2;
      short short3 = (short)862;
      shortArray0[3] = short3;
      short short4 = (short) (-394);
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)1607;
      shortArray0[6] = short6;
      short short7 = (short)1;
      shortArray0[7] = short7;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap0.adjustValue(float6, short3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = (-146.01047F);
      floatArray0[0] = float0;
      float float1 = 1.0F;
      floatArray0[1] = float1;
      float float2 = 0.0F;
      floatArray0[2] = float2;
      float float3 = 0.0F;
      floatArray0[3] = float3;
      float float4 = 0.0F;
      floatArray0[4] = float4;
      float float5 = (-169.6117F);
      floatArray0[5] = float5;
      float float6 = 0.0F;
      floatArray0[6] = float6;
      float float7 = 1821.3824F;
      floatArray0[7] = float7;
      short[] shortArray0 = new short[9];
      short short0 = (short)1;
      shortArray0[0] = short0;
      short short1 = (short) (-1369);
      shortArray0[1] = short1;
      short short2 = (short)1156;
      shortArray0[2] = short2;
      short short3 = (short) (-633);
      shortArray0[3] = short3;
      short short4 = (short)274;
      shortArray0[4] = short4;
      short short5 = (short) (-610);
      shortArray0[5] = short5;
      short short6 = (short) (-1557);
      shortArray0[6] = short6;
      short short7 = (short) (-1250);
      shortArray0[7] = short7;
      short short8 = (short) (-1);
      shortArray0[8] = short8;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      short short9 = (short)0;
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap0.put(float3, short9);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 97649;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int0, int0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      int int1 = 1;
      float float0 = 1616.0717F;
      float float1 = (-1133.5078F);
      short short0 = (short)2237;
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap(int1, float0, float1, short0);
      tFloatShortHashMap1.trimToSize();
      TFloatShortHashMap tFloatShortHashMap2 = new TFloatShortHashMap((TFloatShortMap) tFloatShortHashMap1);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap1 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap2);
      assertEquals(true, tUnmodifiableFloatShortMap1.isEmpty());
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 567;
      float float0 = 0.0F;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int0, float0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      tUnmodifiableFloatShortMap0.iterator();
      int int1 = (-1);
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap(int1);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap1 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap1);
      tFloatShortHashMap1.values();
      tFloatShortHashMap1.clear();
      float float1 = (-1751.6888F);
      short short0 = (short)185;
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap1.put(float1, short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = (-136.03384F);
      floatArray0[1] = float1;
      float float2 = (-482.6176F);
      floatArray0[2] = float2;
      short[] shortArray0 = new short[7];
      short short0 = (short)875;
      shortArray0[0] = short0;
      short short1 = (short) (-773);
      shortArray0[1] = short1;
      short short2 = (short)1736;
      shortArray0[2] = short2;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap((TFloatShortMap) tFloatShortHashMap0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap1);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap1 = new TUnmodifiableFloatShortMap((TFloatShortMap) tUnmodifiableFloatShortMap0);
      float float3 = 230.91405F;
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap1.increment(float3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = 1527.8326F;
      floatArray0[1] = float1;
      float float2 = 1889.0339F;
      floatArray0[2] = float2;
      float float3 = (-380.09464F);
      floatArray0[3] = float3;
      float float4 = (-1.0F);
      floatArray0[4] = float4;
      float float5 = 0.0F;
      floatArray0[5] = float5;
      short[] shortArray0 = new short[8];
      short short0 = (short) (-1706);
      shortArray0[0] = short0;
      short short1 = (short) (-802);
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short) (-1731);
      shortArray0[3] = short3;
      short short4 = (short)29771;
      shortArray0[4] = short4;
      short short5 = (short) (-1657);
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)220;
      shortArray0[7] = short7;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap((TFloatShortMap) tFloatShortHashMap0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap1);
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 10503061;
      float float0 = (-821.8934F);
      short short0 = (short)1;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int0, float0, float0, short0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = null;
      String string0 = locale0.getDisplayCountry(locale1);
      boolean boolean0 = tUnmodifiableFloatShortMap0.equals((Object) string0);
      assertEquals(false, boolean0);
      
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap();
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap1 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap1);
      float float1 = (-495.4315F);
      short short1 = (short) (-210);
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap1.putIfAbsent(float1, short1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      tUnmodifiableFloatShortMap0.toString();
      int int1 = (-1343);
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap(int1);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap1 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap1);
      tUnmodifiableFloatShortMap1.valueCollection();
      TFloatShortHashMap tFloatShortHashMap2 = new TFloatShortHashMap(int1);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap2 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap2);
      assertEquals("{}", tUnmodifiableFloatShortMap2.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 1;
      short short0 = (short)714;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int0, (float) int0, (float) int0, short0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      short short1 = (short)0;
      short short2 = (short) (-266);
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap0.adjustOrPutValue((float) int0, short1, short2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = Float.POSITIVE_INFINITY;
      floatArray0[0] = float0;
      float float1 = 0.0F;
      floatArray0[1] = float1;
      float float2 = 566.43207F;
      floatArray0[2] = float2;
      float float3 = 10.0F;
      floatArray0[3] = float3;
      float float4 = 0.0F;
      floatArray0[4] = float4;
      short[] shortArray0 = new short[6];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)927;
      shortArray0[2] = short2;
      short short3 = (short) (-684);
      shortArray0[3] = short3;
      short short4 = (short)226;
      shortArray0[4] = short4;
      short short5 = (short)1;
      shortArray0[5] = short5;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      String string0 = tUnmodifiableFloatShortMap0.toString();
      assertEquals("{0.0=226, 10.0=-684, 566.43207=927, Infinity=0}", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 122;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int0, int0);
      float float0 = 0.5F;
      float float1 = 1008.3491F;
      short short0 = (short)458;
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap(int0, float0, float1, short0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap1);
      Object object0 = null;
      tUnmodifiableFloatShortMap0.equals(object0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap1 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap2 = new TUnmodifiableFloatShortMap((TFloatShortMap) tUnmodifiableFloatShortMap1);
      float float2 = 1.0F;
      tUnmodifiableFloatShortMap2.containsKey(float2);
      int int1 = 204;
      tUnmodifiableFloatShortMap1.hashCode();
      short short1 = (short)0;
      tFloatShortHashMap0.putIfAbsent(float2, short1);
      short short2 = (short)0;
      TFloatShortHashMap tFloatShortHashMap2 = new TFloatShortHashMap(int1, (float) int1, (float) int1, short2);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap3 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap2);
      tUnmodifiableFloatShortMap3.containsValue(short2);
      float float3 = 0.5F;
      tUnmodifiableFloatShortMap2.getNoEntryKey();
      assertEquals(1, tUnmodifiableFloatShortMap1.size());
      
      float float4 = (-623.8855F);
      short short3 = (short) (-30919);
      tUnmodifiableFloatShortMap3.size();
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap3.putIfAbsent(float4, short3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = 0.0F;
      floatArray0[0] = float0;
      float float1 = (-1824.7716F);
      floatArray0[1] = float1;
      float float2 = 0.0F;
      floatArray0[2] = float2;
      float float3 = 737.9603F;
      floatArray0[3] = float3;
      float float4 = 6.6360896E8F;
      floatArray0[4] = float4;
      float float5 = 0.0F;
      floatArray0[5] = float5;
      float float6 = 0.0F;
      floatArray0[6] = float6;
      float float7 = 711.7681F;
      floatArray0[7] = float7;
      short[] shortArray0 = new short[9];
      short short0 = (short)99;
      shortArray0[0] = short0;
      short short1 = (short) (-1542);
      shortArray0[1] = short1;
      short short2 = (short) (-1185);
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)2045;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)0;
      shortArray0[7] = short7;
      short short8 = (short)1474;
      shortArray0[8] = short8;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      tUnmodifiableFloatShortMap0.values(shortArray0);
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap();
      TFloatShortHashMap tFloatShortHashMap2 = new TFloatShortHashMap((TFloatShortMap) tFloatShortHashMap1);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap1 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap2);
      tUnmodifiableFloatShortMap1.iterator();
      float float8 = 1172.4468F;
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap1.increment(float8);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      tFloatShortHashMap0.keySet();
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      int int0 = 0;
      float float0 = 1675.7842F;
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap(int0, float0);
      boolean boolean0 = tUnmodifiableFloatShortMap0.isEmpty();
      assertEquals(true, boolean0);
      
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap1 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap1);
      tFloatShortHashMap1.clear();
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap1.increment(float0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 356;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int0, int0);
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap((TFloatShortMap) tFloatShortHashMap0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap1);
      float float0 = 1376.8188F;
      short short0 = (short) (-1312);
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap0.put(float0, short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 1304;
      float float0 = 6.6360896E8F;
      int int1 = (-508);
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int1);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) int0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      float float1 = (-850.9259F);
      floatArray0[3] = float1;
      floatArray0[4] = (float) int1;
      tFloatShortHashMap0.keys(floatArray0);
      int int2 = 796;
      tFloatShortHashMap0.ensureCapacity(int2);
      tUnmodifiableFloatShortMap0.getNoEntryKey();
      tFloatShortHashMap0.tempDisableAutoCompaction();
      tUnmodifiableFloatShortMap0.keys();
      tFloatShortHashMap0.values();
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap(int0, float0);
      tUnmodifiableFloatShortMap0.keySet();
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap1 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap1);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap2 = new TUnmodifiableFloatShortMap((TFloatShortMap) tUnmodifiableFloatShortMap1);
      float float2 = 0.0F;
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap2.increment(float2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = (-1669);
      int int1 = 0;
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(int1);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap0 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap0);
      tUnmodifiableFloatShortMap0.size();
      float float0 = 1.0F;
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap(int0, float0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap1 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap1);
      Locale locale0 = Locale.KOREA;
      Locale locale1 = Locale.FRENCH;
      String string0 = locale0.getDisplayVariant(locale1);
      boolean boolean0 = tUnmodifiableFloatShortMap1.equals((Object) string0);
      assertEquals(false, boolean0);
      
      tFloatShortHashMap1.keys(tFloatShortHashMap0._set);
      float float1 = 1.0F;
      int int2 = 0;
      TFloatShortHashMap tFloatShortHashMap2 = new TFloatShortHashMap(int2, int0);
      TUnmodifiableFloatShortMap tUnmodifiableFloatShortMap2 = new TUnmodifiableFloatShortMap((TFloatShortMap) tFloatShortHashMap2);
      // Undeclared exception!
      try {
        tUnmodifiableFloatShortMap2.remove((float) int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
