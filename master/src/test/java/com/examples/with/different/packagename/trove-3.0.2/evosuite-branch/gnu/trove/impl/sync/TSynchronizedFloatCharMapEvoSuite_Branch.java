/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TCharFunction;
import gnu.trove.impl.sync.TSynchronizedCharCollection;
import gnu.trove.impl.sync.TSynchronizedFloatCharMap;
import gnu.trove.impl.sync.TSynchronizedFloatSet;
import gnu.trove.iterator.TFloatCharIterator;
import gnu.trove.map.TFloatCharMap;
import gnu.trove.map.hash.TFloatCharHashMap;
import gnu.trove.procedure.TCharProcedure;
import gnu.trove.procedure.TFloatCharProcedure;
import gnu.trove.procedure.TFloatProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedFloatCharMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.increment(F)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatCharMap.<init>(Lgnu/trove/map/TFloatCharMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      boolean boolean0 = tSynchronizedFloatCharMap0.increment(1701.028F);
      assertEquals(false, boolean0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.adjustValue(FC)Z: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      boolean boolean0 = tSynchronizedFloatCharMap0.adjustValue((float) 202, '\u0000');
      assertEquals(false, boolean0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.keys()[F: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      float[] floatArray0 = tSynchronizedFloatCharMap0.keys();
      assertNotNull(floatArray0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      HashMap<Float, Character> hashMap0 = new HashMap<Float, Character>();
      tSynchronizedFloatCharMap0.putAll((Map<? extends Float, ? extends Character>) hashMap0);
      assertEquals(0, hashMap0.size());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.get(F)C: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(0, (float) 0, (float) 0, 'T');
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      char char0 = tSynchronizedFloatCharMap0.get((float) 0);
      assertEquals('T', char0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.forEachValue(Lgnu/trove/procedure/TCharProcedure;)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap((-6));
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      boolean boolean0 = tSynchronizedFloatCharMap0.forEachValue((TCharProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.values()[C: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      char[] charArray0 = tSynchronizedFloatCharMap0.values();
      assertNotNull(charArray0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.putAll(Lgnu/trove/map/TFloatCharMap;)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      tSynchronizedFloatCharMap0.putAll((TFloatCharMap) tFloatCharHashMap0);
      assertEquals("{}", tSynchronizedFloatCharMap0.toString());
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.transformValues(Lgnu/trove/function/TCharFunction;)V: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(0, (float) 0, (float) 0, 'T');
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      tSynchronizedFloatCharMap0.transformValues((TCharFunction) null);
      assertEquals(true, tSynchronizedFloatCharMap0.isEmpty());
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.retainEntries(Lgnu/trove/procedure/TFloatCharProcedure;)Z: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      boolean boolean0 = tSynchronizedFloatCharMap0.retainEntries((TFloatCharProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.getNoEntryKey()F: root-Branch
   */

//   @Test
//   public void test10()  throws Throwable  {
//       TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
//       TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
//       float float0 = tSynchronizedFloatCharMap0.getNoEntryKey();
//       assertEquals(0.0F, float0, 0.01F);
//   }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.forEachEntry(Lgnu/trove/procedure/TFloatCharProcedure;)Z: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(0, (float) 0, (float) 0, 'T');
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      boolean boolean0 = tSynchronizedFloatCharMap0.forEachEntry((TFloatCharProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.values([C)[C: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      char[] charArray0 = new char[12];
      char[] charArray1 = tSynchronizedFloatCharMap0.values(charArray0);
      assertSame(charArray1, charArray0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.getNoEntryValue()C: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      char char0 = tSynchronizedFloatCharMap0.getNoEntryValue();
      assertEquals('\u0000', char0);
  }

  //Test case number: 14
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatCharMap.<init>(Lgnu/trove/map/TFloatCharMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(1223, (float) 1223, (float) 1223, 'r');
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0, (Object) "Chinese");
      boolean boolean0 = tSynchronizedFloatCharMap0.forEachKey((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.size()I: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      int int0 = tSynchronizedFloatCharMap0.size();
      assertEquals(0, int0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.remove(F)C: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      char char0 = tSynchronizedFloatCharMap0.remove((float) 202);
      assertEquals('\u0000', char0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.containsValue(C)Z: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(1223, (float) 1223, (float) 1223, 'r');
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0, (Object) "Chinese");
      boolean boolean0 = tSynchronizedFloatCharMap0.containsValue('r');
      assertEquals(false, boolean0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.containsKey(F)Z: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      boolean boolean0 = tSynchronizedFloatCharMap0.containsKey((float) 202);
      assertEquals(false, boolean0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      boolean boolean0 = tSynchronizedFloatCharMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.hashCode()I: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      int int0 = tSynchronizedFloatCharMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.iterator()Lgnu/trove/iterator/TFloatCharIterator;: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      TFloatCharIterator tFloatCharIterator0 = tSynchronizedFloatCharMap0.iterator();
      assertEquals(false, tFloatCharIterator0.hasNext());
  }

  //Test case number: 22
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.adjustOrPutValue(FCC)C: root-Branch
   * 2 gnu.trove.impl.sync.TSynchronizedFloatCharMap.<init>(Lgnu/trove/map/TFloatCharMap;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap(1223, (float) 1223, (float) 1223, 'r');
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0, (Object) "Chinese");
      char char0 = tSynchronizedFloatCharMap0.adjustOrPutValue((float) 1223, 'r', 'r');
      assertEquals(false, tFloatCharHashMap0.isEmpty());
      assertEquals('r', char0);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.clear()V: root-Branch
   */

//   @Test
//   public void test23()  throws Throwable  {
//       TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
//       TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
//       tSynchronizedFloatCharMap0.clear();
//       assertEquals(0.0F, tSynchronizedFloatCharMap0.getNoEntryKey(), 0.01F);
//   }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.equals(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      boolean boolean0 = tSynchronizedFloatCharMap0.equals((Object) "Korean");
      assertEquals(false, boolean0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.put(FC)C: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      tSynchronizedFloatCharMap0.put((float) '\u0000', '\u0000');
      assertEquals(false, tFloatCharHashMap0.isEmpty());
      assertEquals("{0.0=\u0000}", tFloatCharHashMap0.toString());
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.keys([F)[F: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      float[] floatArray0 = tSynchronizedFloatCharMap0.keys(tFloatCharHashMap0._set);
      assertNotNull(floatArray0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.putIfAbsent(FC)C: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      tSynchronizedFloatCharMap0.putIfAbsent((float) 202, 's');
      assertEquals(1, tFloatCharHashMap0.size());
      assertEquals("{202.0=s}", tFloatCharHashMap0.toString());
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test28()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      String string0 = tSynchronizedFloatCharMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.<init>(Lgnu/trove/map/TFloatCharMap;)V: I17 Branch 1 IFNONNULL L59 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = null;
      try {
        tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.keySet()Lgnu/trove/set/TFloatSet;: I11 Branch 2 IFNONNULL L107 - true
   * 2 gnu.trove.impl.sync.TSynchronizedFloatCharMap.keySet()Lgnu/trove/set/TFloatSet;: I11 Branch 2 IFNONNULL L107 - false
   */

  @Test
  public void test30()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      TSynchronizedFloatSet tSynchronizedFloatSet0 = (TSynchronizedFloatSet)tSynchronizedFloatCharMap0.keySet();
      assertNotNull(tSynchronizedFloatSet0);
      
      TSynchronizedFloatSet tSynchronizedFloatSet1 = (TSynchronizedFloatSet)tSynchronizedFloatCharMap0.keySet();
      assertSame(tSynchronizedFloatSet1, tSynchronizedFloatSet0);
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.sync.TSynchronizedFloatCharMap.valueCollection()Lgnu/trove/TCharCollection;: I11 Branch 3 IFNONNULL L121 - true
   * 2 gnu.trove.impl.sync.TSynchronizedFloatCharMap.valueCollection()Lgnu/trove/TCharCollection;: I11 Branch 3 IFNONNULL L121 - false
   * 3 gnu.trove.impl.sync.TSynchronizedFloatCharMap.<init>(Lgnu/trove/map/TFloatCharMap;)V: I17 Branch 1 IFNONNULL L59 - true
   */

  @Test
  public void test31()  throws Throwable  {
      TFloatCharHashMap tFloatCharHashMap0 = new TFloatCharHashMap();
      TSynchronizedFloatCharMap tSynchronizedFloatCharMap0 = new TSynchronizedFloatCharMap((TFloatCharMap) tFloatCharHashMap0);
      TSynchronizedCharCollection tSynchronizedCharCollection0 = (TSynchronizedCharCollection)tSynchronizedFloatCharMap0.valueCollection();
      assertNotNull(tSynchronizedCharCollection0);
      
      TSynchronizedCharCollection tSynchronizedCharCollection1 = (TSynchronizedCharCollection)tSynchronizedFloatCharMap0.valueCollection();
      assertSame(tSynchronizedCharCollection1, tSynchronizedCharCollection0);
  }
}
