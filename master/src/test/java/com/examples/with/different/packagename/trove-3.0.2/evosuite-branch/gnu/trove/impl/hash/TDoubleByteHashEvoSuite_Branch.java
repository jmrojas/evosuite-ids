/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.hash.TDoubleByteHashMap;
import gnu.trove.procedure.TDoubleProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleByteHashEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleByteHash.<init>(IF)V: root-Branch
   * 2 gnu.trove.impl.hash.TDoubleByteHash.setUp(I)I: root-Branch
   */

//   @Test
//   public void test0()  throws Throwable  {
//       TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((int) (byte)0, (float) (byte)0);
//       assertEquals(0, tDoubleByteHashMap0.getNoEntryValue());
//       assertEquals(0.0, tDoubleByteHashMap0.getNoEntryKey(), 0.01D);
//   }

  //Test case number: 1
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleByteHash.getNoEntryKey()D: root-Branch
   * 2 gnu.trove.impl.hash.TDoubleByteHash.<init>()V: root-Branch
   */

//   @Test
//   public void test1()  throws Throwable  {
//       TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
//       double double0 = tDoubleByteHashMap0.getNoEntryKey();
//       assertEquals(0.0, double0, 0.01D);
//       assertEquals(23, tDoubleByteHashMap0.capacity());
//       assertEquals(0, tDoubleByteHashMap0.getNoEntryValue());
//   }

  //Test case number: 2
  /*
   * 7 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleByteHash.getNoEntryValue()B: root-Branch
   * 2 gnu.trove.impl.hash.TDoubleByteHash.<init>(I)V: root-Branch
   * 3 gnu.trove.impl.hash.TDoubleByteHash.insertKey(D)I: I30 Branch 13 IFNE L279 - true
   * 4 gnu.trove.impl.hash.TDoubleByteHash.insertKey(D)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 5 gnu.trove.impl.hash.TDoubleByteHash.insertKey(D)I: I57 Branch 15 IFNE L286 - false
   * 6 gnu.trove.impl.hash.TDoubleByteHash.insertKeyAt(ID)V: root-Branch
   * 7 gnu.trove.impl.hash.TDoubleByteHash.insertKey(D)I: I30 Branch 13 IFNE L279 - false
   */

  @Test
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      byte[] byteArray0 = new byte[9];
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      byte byte0 = tDoubleByteHashMap0.getNoEntryValue();
      assertEquals(23, tDoubleByteHashMap0.capacity());
      assertEquals("{0.0=0}", tDoubleByteHashMap0.toString());
      assertEquals((byte)0, byte0);
      assertEquals(0.0, tDoubleByteHashMap0.getNoEntryKey(), 0.01D);
      assertEquals(1, tDoubleByteHashMap0.size());
  }

  //Test case number: 3
  /*
   * 5 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleByteHash.removeAt(I)V: root-Branch
   * 2 gnu.trove.impl.hash.TDoubleByteHash.index(D)I: I37 Branch 5 IFNE L228 - true
   * 3 gnu.trove.impl.hash.TDoubleByteHash.index(D)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 4 gnu.trove.impl.hash.TDoubleByteHash.index(D)I: I52 Branch 7 IFNE L231 - false
   * 5 gnu.trove.impl.hash.TDoubleByteHash.<init>(IFDB)V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(1747, (float) 1747, (double) 1747, (byte)0);
      tDoubleByteHashMap0.adjustOrPutValue((double) (byte)0, (byte)0, (byte)0);
      assertEquals(1, tDoubleByteHashMap0.size());
      
      tDoubleByteHashMap0.remove((double) (byte)0);
      assertEquals(true, tDoubleByteHashMap0.isEmpty());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.hash.TDoubleByteHash.writeExternal(Ljava/io/ObjectOutput;)V: root-Branch
   */

//   @Test
//   public void test4()  throws Throwable  {
//       TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
//       ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
//       ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
//       tDoubleByteHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
//       assertEquals(0.0, tDoubleByteHashMap0.getNoEntryKey(), 0.01D);
//       assertEquals(23, tDoubleByteHashMap0.capacity());
//       assertEquals(0, tDoubleByteHashMap0.getNoEntryValue());
//   }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleByteHash.contains(D)Z: I5 Branch 1 IFLT L178 - true
   * 2 gnu.trove.impl.hash.TDoubleByteHash.index(D)I: I37 Branch 5 IFNE L228 - false
   */

//   @Test
//   public void test5()  throws Throwable  {
//       TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(1496);
//       boolean boolean0 = tDoubleByteHashMap0.containsKey((double) 1496);
//       assertEquals(0, tDoubleByteHashMap0.getNoEntryValue());
//       assertEquals(0.0, tDoubleByteHashMap0.getNoEntryKey(), 0.01D);
//       assertEquals(false, boolean0);
//       assertEquals(3049, tDoubleByteHashMap0.capacity());
//   }

  //Test case number: 6
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleByteHash.contains(D)Z: I5 Branch 1 IFLT L178 - false
   * 2 gnu.trove.impl.hash.TDoubleByteHash.index(D)I: I52 Branch 7 IFNE L231 - false
   */

  @Test
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      byte[] byteArray0 = new byte[5];
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      boolean boolean0 = tDoubleByteHashMap0.contains(0.0);
      assertEquals(1, tDoubleByteHashMap0.size());
      assertEquals("{0.0=0}", tDoubleByteHashMap0.toString());
      assertEquals(0.0, tDoubleByteHashMap0.getNoEntryKey(), 0.01D);
      assertEquals(23, tDoubleByteHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 7
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleByteHash.forEach(Lgnu/trove/procedure/TDoubleProcedure;)Z: I18 Branch 2 IFLE L192 - true
   * 2 gnu.trove.impl.hash.TDoubleByteHash.forEach(Lgnu/trove/procedure/TDoubleProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TDoubleByteHash.forEach(Lgnu/trove/procedure/TDoubleProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

//   @Test
//   public void test7()  throws Throwable  {
//       TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(3213);
//       boolean boolean0 = tDoubleByteHashMap0.forEach((TDoubleProcedure) null);
//       assertEquals(true, boolean0);
//       assertEquals(7057, tDoubleByteHashMap0.capacity());
//       assertEquals(0.0, tDoubleByteHashMap0.getNoEntryKey(), 0.01D);
//       assertEquals(0, tDoubleByteHashMap0.getNoEntryValue());
//   }

  //Test case number: 8
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleByteHash.forEach(Lgnu/trove/procedure/TDoubleProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - false
   * 2 gnu.trove.impl.hash.TDoubleByteHash.forEach(Lgnu/trove/procedure/TDoubleProcedure;)Z: I18 Branch 2 IFLE L192 - false
   * 3 gnu.trove.impl.hash.TDoubleByteHash.forEach(Lgnu/trove/procedure/TDoubleProcedure;)Z: I25 Branch 3 IF_ICMPNE L193 - true
   */

  @Test
  public void test8()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(3213);
      tDoubleByteHashMap0.adjustOrPutValue((double) 3213, (byte)97, (byte)97);
      // Undeclared exception!
      try {
        tDoubleByteHashMap0.forEach((TDoubleProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 4 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleByteHash.index(D)I: I52 Branch 7 IFNE L231 - true
   * 2 gnu.trove.impl.hash.TDoubleByteHash.indexRehashed(DIIB)I: I46 Branch 9 IFNE L250 - false
   * 3 gnu.trove.impl.hash.TDoubleByteHash.insertKey(D)I: I57 Branch 15 IFNE L286 - false
   * 4 gnu.trove.impl.hash.TDoubleByteHash.indexRehashed(DIIB)I: I29 Branch 8 IFGE L245 - false
   */

  @Test
  public void test9()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      byte[] byteArray0 = new byte[9];
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      boolean boolean0 = tDoubleByteHashMap0.contains(1510.7894404786227);
      assertEquals(23, tDoubleByteHashMap0.capacity());
      assertEquals(false, boolean0);
      assertEquals(1, tDoubleByteHashMap0.size());
      assertEquals(0.0, tDoubleByteHashMap0.getNoEntryKey(), 0.01D);
  }

  //Test case number: 10
  /*
   * 6 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleByteHash.indexRehashed(DIIB)I: I46 Branch 9 IFNE L250 - true
   * 2 gnu.trove.impl.hash.TDoubleByteHash.indexRehashed(DIIB)I: I59 Branch 10 IFNE L254 - true
   * 3 gnu.trove.impl.hash.TDoubleByteHash.indexRehashed(DIIB)I: I71 Branch 12 IF_ICMPNE L256 - true
   * 4 gnu.trove.impl.hash.TDoubleByteHash.indexRehashed(DIIB)I: I46 Branch 9 IFNE L250 - false
   * 5 gnu.trove.impl.hash.TDoubleByteHash.index(D)I: I46 Branch 6 IF_ICMPNE L231 - true
   * 6 gnu.trove.impl.hash.TDoubleByteHash.indexRehashed(DIIB)I: I29 Branch 8 IFGE L245 - true
   */

  @Test
  public void test10()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(1496);
      tDoubleByteHashMap0.compact();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      tDoubleByteHashMap0._states = byteArray0;
      boolean boolean0 = tDoubleByteHashMap0.containsKey((double) 1496);
      assertEquals(0.0, tDoubleByteHashMap0.getNoEntryKey(), 0.01D);
      assertEquals(false, boolean0);
  }

  //Test case number: 11
  /*
   * 18 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleByteHash.indexRehashed(DIIB)I: I59 Branch 10 IFNE L254 - false
   * 2 gnu.trove.impl.hash.TDoubleByteHash.indexRehashed(DIIB)I: I62 Branch 11 IF_ICMPEQ L254 - false
   * 3 gnu.trove.impl.hash.TDoubleByteHash.insertKey(D)I: I57 Branch 15 IFNE L286 - true
   * 4 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 5 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I45 Branch 18 IFGE L310 - true
   * 6 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I45 Branch 18 IFGE L310 - false
   * 7 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I62 Branch 19 IFNE L316 - true
   * 8 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I62 Branch 19 IFNE L316 - false
   * 9 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I67 Branch 20 IF_ICMPEQ L317 - true
   * 10 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I97 Branch 21 IF_ICMPNE L327 - false
   * 11 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I104 Branch 22 IFNE L327 - true
   * 12 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I104 Branch 22 IFNE L327 - false
   * 13 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I116 Branch 23 IF_ICMPNE L332 - true
   * 14 gnu.trove.impl.hash.TDoubleByteHash.insertKey(D)I: I30 Branch 13 IFNE L279 - false
   * 15 gnu.trove.impl.hash.TDoubleByteHash.insertKey(D)I: I50 Branch 14 IF_ICMPNE L286 - false
   * 16 gnu.trove.impl.hash.TDoubleByteHash.contains(D)Z: I5 Branch 1 IFLT L178 - false
   * 17 gnu.trove.impl.hash.TDoubleByteHash.index(D)I: I46 Branch 6 IF_ICMPNE L231 - false
   * 18 gnu.trove.impl.hash.TDoubleByteHash.index(D)I: I52 Branch 7 IFNE L231 - true
   */

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 198.2210338290332;
      doubleArray0[1] = 491.0898004412243;
      byte[] byteArray0 = new byte[5];
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      boolean boolean0 = tDoubleByteHashMap0.contains(0.0);
      assertEquals(3, tDoubleByteHashMap0.size());
      assertEquals(true, boolean0);
      assertEquals("{198.2210338290332=0, 0.0=0, 491.0898004412243=0}", tDoubleByteHashMap0.toString());
  }

  //Test case number: 12
  /*
   * 10 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleByteHash.indexRehashed(DIIB)I: I71 Branch 12 IF_ICMPNE L256 - false
   * 2 gnu.trove.impl.hash.TDoubleByteHash.<init>(I)V: root-Branch
   * 3 gnu.trove.impl.hash.TDoubleByteHash.contains(D)Z: I5 Branch 1 IFLT L178 - true
   * 4 gnu.trove.impl.hash.TDoubleByteHash.index(D)I: I37 Branch 5 IFNE L228 - true
   * 5 gnu.trove.impl.hash.TDoubleByteHash.index(D)I: I46 Branch 6 IF_ICMPNE L231 - true
   * 6 gnu.trove.impl.hash.TDoubleByteHash.indexRehashed(DIIB)I: I29 Branch 8 IFGE L245 - true
   * 7 gnu.trove.impl.hash.TDoubleByteHash.indexRehashed(DIIB)I: I29 Branch 8 IFGE L245 - false
   * 8 gnu.trove.impl.hash.TDoubleByteHash.indexRehashed(DIIB)I: I46 Branch 9 IFNE L250 - true
   * 9 gnu.trove.impl.hash.TDoubleByteHash.indexRehashed(DIIB)I: I59 Branch 10 IFNE L254 - true
   * 10 gnu.trove.impl.hash.TDoubleByteHash.indexRehashed(DIIB)I: I71 Branch 12 IF_ICMPNE L256 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(1496);
      assertEquals(3049, tDoubleByteHashMap0.capacity());
      
      tDoubleByteHashMap0.compact();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      tDoubleByteHashMap0._states = byteArray0;
      boolean boolean0 = tDoubleByteHashMap0.containsKey((double) 1496);
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 7 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I31 Branch 17 IF_ICMPNE L306 - true
   * 2 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I67 Branch 20 IF_ICMPEQ L317 - false
   * 3 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 4 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I62 Branch 19 IFNE L316 - false
   * 5 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 6 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 7 gnu.trove.impl.hash.TDoubleByteHash.insertKey(D)I: I50 Branch 14 IF_ICMPNE L286 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[2] = (byte)2;
      tDoubleByteHashMap0.trimToSize();
      tDoubleByteHashMap0._states = byteArray0;
      tDoubleByteHashMap0.put(0.0, (byte)2);
      assertEquals(false, tDoubleByteHashMap0.isEmpty());
      assertEquals("{0.0=2}", tDoubleByteHashMap0.toString());
  }

  //Test case number: 14
  /*
   * 16 covered goals:
   * 1 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I116 Branch 23 IF_ICMPNE L332 - false
   * 2 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I121 Branch 24 IF_ICMPEQ L336 - false
   * 3 gnu.trove.impl.hash.TDoubleByteHash.insertKeyAt(ID)V: root-Branch
   * 4 gnu.trove.impl.hash.TDoubleByteHash.setUp(I)I: root-Branch
   * 5 gnu.trove.impl.hash.TDoubleByteHash.<init>()V: root-Branch
   * 6 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I28 Branch 16 IF_ICMPNE L306 - true
   * 7 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I28 Branch 16 IF_ICMPNE L306 - false
   * 8 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I31 Branch 17 IF_ICMPNE L306 - true
   * 9 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I31 Branch 17 IF_ICMPNE L306 - false
   * 10 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I45 Branch 18 IFGE L310 - true
   * 11 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I45 Branch 18 IFGE L310 - false
   * 12 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I62 Branch 19 IFNE L316 - true
   * 13 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I97 Branch 21 IF_ICMPNE L327 - true
   * 14 gnu.trove.impl.hash.TDoubleByteHash.insertKeyRehash(DIIB)I: I116 Branch 23 IF_ICMPNE L332 - true
   * 15 gnu.trove.impl.hash.TDoubleByteHash.insertKey(D)I: I30 Branch 13 IFNE L279 - true
   * 16 gnu.trove.impl.hash.TDoubleByteHash.insertKey(D)I: I50 Branch 14 IF_ICMPNE L286 - true
   */

  @Test
  public void test14()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-17);
      byteArray0[0] = (byte)2;
      byteArray0[2] = (byte)2;
      tDoubleByteHashMap0.trimToSize();
      tDoubleByteHashMap0._states = byteArray0;
      tDoubleByteHashMap0.put(0.0, (byte)2);
      assertEquals("{0.0=2}", tDoubleByteHashMap0.toString());
      assertEquals(1, tDoubleByteHashMap0.size());
  }
}
