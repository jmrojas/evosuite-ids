/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TCharByteMap;
import gnu.trove.map.hash.TCharByteHashMap;
import gnu.trove.set.TCharSet;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharByteHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = '1';
      charArray0[0] = char0;
      char char1 = 'h';
      charArray0[1] = char1;
      char char2 = '8';
      charArray0[2] = char2;
      char char3 = '!';
      charArray0[3] = char3;
      char char4 = 'A';
      charArray0[4] = char4;
      TCharByteMap tCharByteMap0 = null;
      TCharByteHashMap tCharByteHashMap0 = null;
      try {
        tCharByteHashMap0 = new TCharByteHashMap(tCharByteMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test1()  throws Throwable  {
//       int int0 = (-295);
//       TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap();
//       TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap((TCharByteMap) tCharByteHashMap0);
//       TCharByteHashMap tCharByteHashMap2 = new TCharByteHashMap((TCharByteMap) tCharByteHashMap1);
//       tCharByteHashMap2.toString();
//       TCharByteHashMap tCharByteHashMap3 = new TCharByteHashMap(int0);
//       int int1 = 2;
//       PipedInputStream pipedInputStream0 = new PipedInputStream(int1);
//       PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
//       BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) pipedOutputStream0, int1);
//       ObjectOutputStream objectOutputStream0 = null;
//       try {
//         objectOutputStream0 = new ObjectOutputStream((OutputStream) bufferedOutputStream0);
//         fail("Expecting exception: InterruptedIOException");
//       
//       } catch(InterruptedIOException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int1);
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap((TCharByteMap) tCharByteHashMap0);
      tCharByteHashMap1.setAutoCompactionFactor((float) int0);
      char[] charArray0 = new char[1];
      char char0 = 'D';
      charArray0[0] = char0;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)81;
      byteArray0[0] = byte0;
      TCharByteHashMap tCharByteHashMap2 = new TCharByteHashMap((int) byte0, (float) char0);
      TCharByteHashMap tCharByteHashMap3 = new TCharByteHashMap(charArray0, byteArray0);
      tCharByteHashMap3.keySet();
      int int2 = 688;
      tCharByteHashMap3.containsKey(char0);
      TCharByteHashMap tCharByteHashMap4 = new TCharByteHashMap(int2, int2);
      TCharByteHashMap tCharByteHashMap5 = new TCharByteHashMap((TCharByteMap) tCharByteHashMap4);
      tCharByteHashMap4.getNoEntryKey();
      tCharByteHashMap5.trimToSize();
      float float0 = (-1812.1832F);
      tCharByteHashMap2.putAll((TCharByteMap) tCharByteHashMap3);
      assertEquals(1, tCharByteHashMap2.size());
      
      char char1 = 'n';
      byteArray0[0] = byte0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      TCharByteHashMap tCharByteHashMap6 = new TCharByteHashMap(int0, float0, char1, byte1);
      tCharByteHashMap5.iterator();
      byte[] byteArray1 = tCharByteHashMap6._states;
      assertFalse(tCharByteHashMap6.equals(tCharByteHashMap2));
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 1001;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0);
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap((TCharByteMap) tCharByteHashMap0);
      tCharByteHashMap0.getNoEntryValue();
      tCharByteHashMap0.values();
      tCharByteHashMap1.clear();
      tCharByteHashMap1.getNoEntryKey();
      tCharByteHashMap0.capacity();
      char char0 = '\\';
      tCharByteHashMap1.containsKey(char0);
      int int1 = 30;
      byte[] byteArray0 = tCharByteHashMap1._states;
      int int2 = (-1904);
      float float0 = 197.82056F;
      char char1 = 'A';
      char[] charArray0 = tCharByteHashMap1._set;
      byte byte0 = (byte)10;
      TCharByteHashMap tCharByteHashMap2 = new TCharByteHashMap(int2, float0, char1, byte0);
      tCharByteHashMap1.ensureCapacity((int) char1);
      tCharByteHashMap2.keys();
      tCharByteHashMap2.iterator();
      tCharByteHashMap1.ensureCapacity(int1);
      TCharByteHashMap tCharByteHashMap3 = new TCharByteHashMap(int1);
      tCharByteHashMap2.iterator();
      String string0 = "";
      tCharByteHashMap0.getNoEntryValue();
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         //  (No such file or directory)
         //
      }
  }

//   @Test
//   public void test4()  throws Throwable  {
//       int int0 = 0;
//       char char0 = '`';
//       byte byte0 = (byte)0;
//       TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, (float) int0, char0, byte0);
//       float float0 = 1359.7745F;
//       char char1 = '!';
//       byte byte1 = (byte)120;
//       TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(int0, float0, char1, byte1);
//       assertEquals(120, tCharByteHashMap1.getNoEntryValue());
//       assertEquals('!', tCharByteHashMap1.getNoEntryKey());
//   }

//   @Test
//   public void test5()  throws Throwable  {
//       int int0 = (-802);
//       TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, int0);
//       char char0 = 'E';
//       char[] charArray0 = new char[10];
//       charArray0[0] = char0;
//       charArray0[1] = char0;
//       charArray0[2] = char0;
//       charArray0[3] = char0;
//       charArray0[4] = char0;
//       charArray0[5] = char0;
//       charArray0[6] = char0;
//       charArray0[7] = char0;
//       charArray0[8] = char0;
//       charArray0[9] = char0;
//       tCharByteHashMap0._set = charArray0;
//       byte byte0 = (byte) (-113);
//       boolean boolean0 = tCharByteHashMap0.adjustValue(char0, byte0);
//       assertEquals(false, boolean0);
//       
//       tCharByteHashMap0.hashCode();
//       TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap((TCharByteMap) tCharByteHashMap0);
//       char char1 = '.';
//       tCharByteHashMap0.iterator();
//       tCharByteHashMap1.increment(char1);
//       tCharByteHashMap1.hashCode();
//       int int1 = (-1947);
//       int int2 = (-814);
//       tCharByteHashMap1.ensureCapacity(int2);
//       tCharByteHashMap1.ensureCapacity(int1);
//       assertEquals(0, tCharByteHashMap1.getNoEntryValue());
//       assertEquals('\u0000', tCharByteHashMap1.getNoEntryKey());
//       assertEquals('\u0000', tCharByteHashMap0.getNoEntryKey());
//   }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 196;
      float float0 = 1958.2289F;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, float0);
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap((TCharByteMap) tCharByteHashMap0);
      char[] charArray0 = new char[7];
      char char0 = '\"';
      charArray0[0] = char0;
      char char1 = 'w';
      charArray0[1] = char1;
      char char2 = 'a';
      charArray0[2] = char2;
      char char3 = '~';
      tCharByteHashMap1.getNoEntryValue();
      String string0 = "W0sn";
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // W0sn (No such file or directory)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap();
      char char0 = 'Q';
      byte byte0 = (byte)3;
      tCharByteHashMap0.adjustValue(char0, byte0);
      float float0 = 10.0F;
      char char1 = '4';
      byte byte1 = (byte)115;
      char[] charArray0 = new char[3];
      charArray0[0] = char1;
      charArray0[1] = char1;
      charArray0[0] = char1;
      char char2 = '9';
      charArray0[1] = char2;
      charArray0[2] = char0;
      charArray0[2] = char1;
      tCharByteHashMap0.keys(charArray0);
      tCharByteHashMap0.putIfAbsent(char1, byte1);
      assertEquals(false, tCharByteHashMap0.isEmpty());
      
      tCharByteHashMap0.values();
      tCharByteHashMap0.setAutoCompactionFactor(float0);
      assertEquals("{4=115}", tCharByteHashMap0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap();
      char char0 = 'j';
      char[] charArray0 = new char[1];
      charArray0[0] = char0;
      char[] charArray1 = tCharByteHashMap0.keys(charArray0);
      assertNotNull(charArray1);
      
      int int0 = tCharByteHashMap0.capacity();
      assertEquals(23, int0);
      
      byte byte0 = tCharByteHashMap0.getNoEntryValue();
      assertEquals((byte)0, byte0);
      
      tCharByteHashMap0.clear();
      tCharByteHashMap0.get(char0);
      TCharSet tCharSet0 = tCharByteHashMap0.keySet();
      assertEquals('\u0000', tCharSet0.getNoEntryValue());
  }

//   @Test
//   public void test9()  throws Throwable  {
//       char[] charArray0 = new char[9];
//       char char0 = 'h';
//       charArray0[0] = char0;
//       char char1 = 'M';
//       charArray0[1] = char1;
//       char char2 = '{';
//       charArray0[2] = char2;
//       char char3 = ',';
//       charArray0[3] = char3;
//       char char4 = 'i';
//       charArray0[4] = char4;
//       char char5 = 'j';
//       charArray0[5] = char5;
//       char char6 = ';';
//       charArray0[6] = char6;
//       char char7 = '!';
//       charArray0[7] = char7;
//       char char8 = '5';
//       charArray0[8] = char8;
//       byte[] byteArray0 = new byte[7];
//       byte byte0 = (byte)122;
//       byteArray0[0] = byte0;
//       byte byte1 = (byte) (-127);
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)68;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte)0;
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)0;
//       byteArray0[4] = byte4;
//       byte byte5 = (byte)0;
//       byteArray0[5] = byte5;
//       byte byte6 = (byte)69;
//       byteArray0[6] = byte6;
//       TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
//       int int0 = Integer.MAX_VALUE;
//       TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(int0);
//       TCharByteHashMap tCharByteHashMap2 = new TCharByteHashMap((TCharByteMap) tCharByteHashMap1);
//       char char9 = '>';
//       byte byte7 = (byte)0;
//       tCharByteHashMap2.put(char9, byte7);
//       int int1 = 1907;
//       TCharByteHashMap tCharByteHashMap3 = new TCharByteHashMap((TCharByteMap) tCharByteHashMap1);
//       TCharByteHashMap tCharByteHashMap4 = new TCharByteHashMap(int1, int1);
//       assertEquals(0.5F, tCharByteHashMap4.getAutoCompactionFactor(), 0.01F);
//   }

  @Test
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = 'F';
      charArray0[0] = char0;
      char char1 = '-';
      charArray0[1] = char1;
      char char2 = '|';
      charArray0[2] = char2;
      char char3 = '$';
      charArray0[3] = char3;
      char char4 = '*';
      charArray0[4] = char4;
      char char5 = '%';
      charArray0[5] = char5;
      char char6 = 'h';
      charArray0[6] = char6;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-124);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      byte byte2 = (byte)0;
      tCharByteHashMap0.adjustValue(charArray0[3], byte2);
      assertEquals("{-=-1, F=-124}", tCharByteHashMap0.toString());
  }

//   @Test
//   public void test11()  throws Throwable  {
//       char[] charArray0 = new char[9];
//       char char0 = 'H';
//       charArray0[0] = char0;
//       char char1 = 'B';
//       charArray0[1] = char1;
//       char char2 = 'K';
//       charArray0[2] = char2;
//       char char3 = 's';
//       charArray0[3] = char3;
//       char char4 = 'x';
//       charArray0[4] = char4;
//       char char5 = 'l';
//       charArray0[5] = char5;
//       char char6 = '<';
//       charArray0[6] = char6;
//       char char7 = '_';
//       charArray0[7] = char7;
//       char char8 = 'G';
//       charArray0[8] = char8;
//       byte[] byteArray0 = new byte[9];
//       byte byte0 = (byte) (-49);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte) (-8);
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)57;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte)65;
//       byteArray0[3] = byte3;
//       byte byte4 = (byte) (-47);
//       byteArray0[4] = byte4;
//       byte byte5 = (byte)35;
//       byteArray0[5] = byte5;
//       byte byte6 = (byte)21;
//       byteArray0[6] = byte6;
//       byte byte7 = (byte) (-109);
//       byteArray0[7] = byte7;
//       byte byte8 = (byte)63;
//       byteArray0[8] = byte8;
//       TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
//       tCharByteHashMap0.keys();
//       assertEquals('\u0000', tCharByteHashMap0.getNoEntryKey());
//       assertEquals(0, tCharByteHashMap0.getNoEntryValue());
//       assertEquals("{B=-8, l=35, <=21, G=63, K=57, x=-47, H=-49, _=-109, s=65}", tCharByteHashMap0.toString());
//   }

//   @Test
//   public void test12()  throws Throwable  {
//       int int0 = (-294);
//       TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, int0);
//       char[] charArray0 = new char[7];
//       char char0 = '>';
//       charArray0[0] = char0;
//       char char1 = '6';
//       charArray0[1] = char1;
//       char char2 = '.';
//       charArray0[2] = char2;
//       char char3 = '\\';
//       charArray0[3] = char3;
//       char char4 = '}';
//       charArray0[4] = char4;
//       char char5 = '_';
//       charArray0[5] = char5;
//       char char6 = '*';
//       charArray0[6] = char6;
//       tCharByteHashMap0._set = charArray0;
//       assertEquals(0, tCharByteHashMap0.getNoEntryValue());
//       assertEquals('\u0000', tCharByteHashMap0.getNoEntryKey());
//   }

  @Test
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = 'w';
      charArray0[0] = char0;
      char char1 = 'n';
      charArray0[1] = char1;
      char char2 = 'r';
      charArray0[2] = char2;
      char char3 = 'U';
      charArray0[3] = char3;
      char char4 = '<';
      charArray0[4] = char4;
      char char5 = 'A';
      charArray0[5] = char5;
      char char6 = 'l';
      charArray0[6] = char6;
      char char7 = 'F';
      charArray0[7] = char7;
      char char8 = 'E';
      charArray0[8] = char8;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)92;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-16);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      byte byte5 = (byte)39;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-1);
      byteArray0[6] = byte6;
      byte byte7 = (byte)80;
      byteArray0[7] = byte7;
      byte byte8 = (byte)82;
      byteArray0[8] = byte8;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      tCharByteHashMap0.getNoEntryKey();
      int int0 = (-1976);
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(int0);
      int int1 = (-389);
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -389
         //
      }
  }

//   @Test
//   public void test14()  throws Throwable  {
//       int int0 = 1;
//       TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, int0);
//       tCharByteHashMap0.capacity();
//       assertEquals('\u0000', tCharByteHashMap0.getNoEntryKey());
//       assertEquals(0, tCharByteHashMap0.getNoEntryValue());
//       
//       TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap();
//       tCharByteHashMap1.size();
//       assertEquals(23, tCharByteHashMap1.capacity());
//       assertEquals(0, tCharByteHashMap1.getNoEntryValue());
//       assertEquals('\u0000', tCharByteHashMap1.getNoEntryKey());
//   }

  @Test
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = 'F';
      charArray0[0] = char0;
      char char1 = '}';
      charArray0[1] = char1;
      char char2 = '(';
      charArray0[2] = char2;
      char char3 = 'U';
      charArray0[3] = char3;
      char char4 = 'v';
      charArray0[4] = char4;
      char char5 = 'm';
      charArray0[5] = char5;
      char char6 = 'G';
      charArray0[6] = char6;
      char char7 = 'Q';
      charArray0[7] = char7;
      char char8 = 'W';
      charArray0[8] = char8;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)6;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-84);
      byteArray0[1] = byte1;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      assertEquals(false, tCharByteHashMap0.isEmpty());
      
      tCharByteHashMap0.clear();
      assertEquals(23, tCharByteHashMap0.capacity());
  }

  @Test
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = (-1995);
          int int1 = (-1733);
          TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int1);
          TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(int0);
          String string0 = "L";
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"L\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-806);
      float float0 = (-1887.5352F);
      char char0 = '$';
      byte byte0 = (byte)96;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, float0, char0, byte0);
      tCharByteHashMap0.putIfAbsent(char0, byte0);
      assertEquals("{$=96}", tCharByteHashMap0.toString());
      
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap();
      tCharByteHashMap1.getAutoCompactionFactor();
      TCharByteMap tCharByteMap0 = null;
      // Undeclared exception!
      try {
        tCharByteHashMap1.putAll(tCharByteMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
