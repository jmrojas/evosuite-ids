/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.unmodifiable.TUnmodifiableCharByteMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableCharSet;
import gnu.trove.iterator.TCharByteIterator;
import gnu.trove.map.TCharByteMap;
import gnu.trove.map.hash.TCharByteHashMap;
import gnu.trove.procedure.TCharProcedure;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableCharByteMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-1427);
      float float0 = 0.0F;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, float0);
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap0 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap0);
      tUnmodifiableCharByteMap0.keys();
      TCharByteMap tCharByteMap0 = null;
      char char0 = 'Z';
      byte byte0 = (byte) (-6);
      // Undeclared exception!
      try {
        tUnmodifiableCharByteMap0.put(char0, byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-1098);
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0);
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap0 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap0);
      assertEquals("{}", tUnmodifiableCharByteMap0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 0;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap();
      tCharByteHashMap0.compact();
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap0 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap0);
      tUnmodifiableCharByteMap0.getNoEntryValue();
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap1 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap0);
      tUnmodifiableCharByteMap1.toString();
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap2 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap0);
      tUnmodifiableCharByteMap2.valueCollection();
      char char0 = 'G';
      byte byte0 = (byte) (-40);
      tUnmodifiableCharByteMap2.containsValue(byte0);
      // Undeclared exception!
      try {
        tUnmodifiableCharByteMap2.remove(char0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 419;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0);
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap0 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap0);
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap1 = new TUnmodifiableCharByteMap((TCharByteMap) tUnmodifiableCharByteMap0);
      assertNotSame(tUnmodifiableCharByteMap0, tUnmodifiableCharByteMap1);
  }

  @Test
  public void test4()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = 'Q';
      charArray0[0] = char0;
      char char1 = '`';
      charArray0[1] = char1;
      char char2 = 'j';
      charArray0[2] = char2;
      char char3 = '\\';
      charArray0[3] = char3;
      char char4 = 'U';
      charArray0[4] = char4;
      char char5 = '}';
      charArray0[5] = char5;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-41);
      byteArray0[2] = byte2;
      byte byte3 = (byte)43;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap0 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableCharByteMap0.put(charArray0[2], byteArray0[2]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-1969);
      char char0 = '3';
      byte byte0 = (byte)0;
      char[] charArray0 = new char[2];
      charArray0[0] = char0;
      charArray0[1] = char0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      byteArray0[6] = byte0;
      byteArray0[7] = byte0;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap0 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap0);
      tUnmodifiableCharByteMap0.iterator();
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(int0, (float) int0, char0, byte0);
      TCharByteHashMap tCharByteHashMap2 = new TCharByteHashMap((TCharByteMap) tCharByteHashMap1);
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap1 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap2);
      TCharByteIterator tCharByteIterator0 = tUnmodifiableCharByteMap1.iterator();
      assertEquals(false, tCharByteIterator0.hasNext());
  }

  @Test
  public void test6()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = ')';
      charArray0[0] = char0;
      char char1 = '0';
      charArray0[1] = char1;
      char char2 = 'I';
      charArray0[2] = char2;
      char char3 = 'H';
      charArray0[3] = char3;
      char char4 = 'q';
      charArray0[4] = char4;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)9;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)97;
      byteArray0[3] = byte3;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap((TCharByteMap) tCharByteHashMap0);
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap0 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap1);
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap1 = new TUnmodifiableCharByteMap((TCharByteMap) tUnmodifiableCharByteMap0);
      assertEquals("{)=9, I=0, H=97, 0=0}", tUnmodifiableCharByteMap1.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap();
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap0 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap0);
      tUnmodifiableCharByteMap0.values(tCharByteHashMap0._states);
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap1 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap0);
      char[] charArray0 = new char[9];
      char char0 = 'A';
      charArray0[0] = char0;
      char char1 = '7';
      charArray0[1] = char1;
      char char2 = 'i';
      charArray0[2] = char2;
      char char3 = '?';
      TCharProcedure tCharProcedure0 = null;
      tUnmodifiableCharByteMap1.forEachKey(tCharProcedure0);
      charArray0[3] = char3;
      char char4 = 'E';
      charArray0[4] = char4;
      char char5 = '\'';
      charArray0[5] = char5;
      char char6 = 'D';
      charArray0[6] = char6;
      char char7 = 'q';
      charArray0[7] = char7;
      char char8 = '}';
      charArray0[8] = char8;
      tUnmodifiableCharByteMap0.keys(charArray0);
      byte byte0 = tUnmodifiableCharByteMap1.getNoEntryValue();
      tUnmodifiableCharByteMap1.keys(tCharByteHashMap0._set);
      tCharByteHashMap0.setAutoCompactionFactor((float) byte0);
      TUnmodifiableCharSet tUnmodifiableCharSet0 = (TUnmodifiableCharSet)tUnmodifiableCharByteMap1.keySet();
      assertEquals(0, tUnmodifiableCharSet0.size());
  }

  @Test
  public void test8()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = ';';
      charArray0[0] = char0;
      char char1 = 'd';
      charArray0[1] = char1;
      char char2 = ':';
      charArray0[2] = char2;
      char char3 = 'C';
      charArray0[3] = char3;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)17;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-123);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-88);
      byteArray0[3] = byte3;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap0 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap0);
      int int0 = 1;
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(int0, int0);
      tCharByteHashMap1.compact();
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap1 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap1);
      byte byte4 = (byte)0;
      tUnmodifiableCharByteMap1.containsValue(byte4);
      tUnmodifiableCharByteMap1.keySet();
      byte byte5 = (byte)0;
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap2 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap1);
      tUnmodifiableCharByteMap1.containsValue(byte5);
      tCharByteHashMap1.values();
      char[] charArray1 = new char[5];
      char char4 = '8';
      charArray1[0] = char4;
      char char5 = '[';
      charArray1[1] = char5;
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap3 = new TUnmodifiableCharByteMap((TCharByteMap) tUnmodifiableCharByteMap1);
      char char6 = '~';
      charArray1[2] = char6;
      char char7 = 'y';
      charArray1[3] = char7;
      char char8 = '7';
      charArray1[4] = char8;
      char[] charArray2 = tUnmodifiableCharByteMap1.keys(charArray1);
      assertSame(charArray2, charArray1);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-1191);
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, int0);
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap0 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap0);
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap1 = new TUnmodifiableCharByteMap((TCharByteMap) tUnmodifiableCharByteMap0);
      assertNotSame(tUnmodifiableCharByteMap1, tUnmodifiableCharByteMap0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 500;
      char char0 = '8';
      byte byte0 = (byte)119;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, (float) int0, char0, byte0);
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap0 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableCharByteMap0.putAll((TCharByteMap) tCharByteHashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = '^';
      charArray0[0] = char0;
      char char1 = 'd';
      charArray0[1] = char1;
      char char2 = '1';
      charArray0[2] = char2;
      char char3 = '*';
      charArray0[3] = char3;
      char char4 = 'w';
      charArray0[4] = char4;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-1);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-127);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-12);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-1);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-115);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-1);
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap0 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap0);
      char[] charArray1 = tUnmodifiableCharByteMap0.keys();
      assertFalse(charArray1.equals(charArray0));
  }

  @Test
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 'u';
      charArray0[0] = char0;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-79);
      byteArray0[0] = byte0;
      byte byte1 = (byte)24;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap();
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap0 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap0);
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap1 = new TUnmodifiableCharByteMap((TCharByteMap) tUnmodifiableCharByteMap0);
      tUnmodifiableCharByteMap1.values();
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap();
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap2 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap1);
      tUnmodifiableCharByteMap2.containsValue(byteArray0[2]);
      byte byte3 = (byte) (-96);
      byteArray0[3] = byte3;
      TCharByteHashMap tCharByteHashMap2 = new TCharByteHashMap(charArray0, byteArray0);
      TCharByteHashMap tCharByteHashMap3 = new TCharByteHashMap((TCharByteMap) tCharByteHashMap2);
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap3 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap3);
      char char1 = '`';
      tCharByteHashMap0.get(char1);
      byte byte4 = tUnmodifiableCharByteMap3.getNoEntryValue();
      assertEquals((byte)0, byte4);
  }

  @Test
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = ',';
      charArray0[0] = char0;
      char char1 = 'd';
      charArray0[1] = char1;
      char char2 = 'Q';
      charArray0[2] = char2;
      char char3 = ')';
      charArray0[3] = char3;
      char char4 = 'i';
      charArray0[4] = char4;
      char char5 = 'p';
      charArray0[5] = char5;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)107;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-35);
      byteArray0[6] = byte6;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(charArray0, byteArray0);
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap0 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap0);
      char char6 = '^';
      byte byte7 = (byte) (-99);
      // Undeclared exception!
      try {
        tUnmodifiableCharByteMap0.adjustOrPutValue(char6, byte7, byte5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1684;
      char[] charArray0 = new char[3];
      char char0 = '$';
      charArray0[0] = char0;
      char char1 = 'P';
      char char2 = 'P';
      charArray0[0] = char2;
      charArray0[1] = char1;
      charArray0[2] = char1;
      charArray0[1] = char1;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int0, (float) char1);
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap0 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap0);
      boolean boolean0 = tUnmodifiableCharByteMap0.isEmpty();
      assertEquals(true, boolean0);
      
      char char3 = 'j';
      charArray0[2] = char3;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)39;
      byteArray0[0] = byte0;
      byte byte1 = (byte)47;
      byteArray0[1] = byte1;
      TCharByteHashMap tCharByteHashMap1 = new TCharByteHashMap(charArray0, byteArray0);
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap1 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap1);
      byte[] byteArray1 = tUnmodifiableCharByteMap1.values(tCharByteHashMap1._states);
      assertNotNull(byteArray1);
      
      TCharByteHashMap tCharByteHashMap2 = new TCharByteHashMap(int0);
      tCharByteHashMap1.values(byteArray0);
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap2 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap2);
      char char4 = 'E';
      // Undeclared exception!
      try {
        tUnmodifiableCharByteMap2.remove(char4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap();
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap0 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap0);
      char char0 = 'U';
      byte byte0 = (byte) (-28);
      // Undeclared exception!
      try {
        tUnmodifiableCharByteMap0.adjustOrPutValue(char0, byte0, byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = (-1277);
      float float0 = 10.0F;
      int int1 = (-955);
      char char0 = 'j';
      byte byte0 = (byte)42;
      TCharByteHashMap tCharByteHashMap0 = new TCharByteHashMap(int1, float0, char0, byte0);
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap0 = new TUnmodifiableCharByteMap((TCharByteMap) tCharByteHashMap0);
      byte byte1 = (byte)79;
      // Undeclared exception!
      try {
        tUnmodifiableCharByteMap0.put(char0, byte1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      TCharByteMap tCharByteMap0 = null;
      TUnmodifiableCharByteMap tUnmodifiableCharByteMap0 = null;
      try {
        tUnmodifiableCharByteMap0 = new TUnmodifiableCharByteMap(tCharByteMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
