/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TIntFunction;
import gnu.trove.map.TIntIntMap;
import gnu.trove.map.hash.TIntIntHashMap;
import gnu.trove.procedure.TIntIntProcedure;
import gnu.trove.procedure.TIntProcedure;
import gnu.trove.set.TIntSet;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntIntHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap$TValueView.<init>(Lgnu/trove/map/hash/TIntIntHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TIntIntHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TIntIntHashMap.setUp(I)I: root-Branch
   * 4 gnu.trove.map.hash.TIntIntHashMap.valueCollection()Lgnu/trove/TIntCollection;: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap();
      tIntIntHashMap0.valueCollection();
      assertEquals(23, tIntIntHashMap0.capacity());
  }

  //Test case number: 1
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TIntIntHashMap.<init>([I[I)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 3 gnu.trove.map.hash.TIntIntHashMap.<init>([I[I)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 4 gnu.trove.map.hash.TIntIntHashMap.remove(I)I: I14 Branch 46 IFLT L276 - false
   * 5 gnu.trove.map.hash.TIntIntHashMap.put(II)I: root-Branch
   * 6 gnu.trove.map.hash.TIntIntHashMap.doPut(III)I: I12 Branch 40 IFGE L214 - true
   * 7 gnu.trove.map.hash.TIntIntHashMap.doPut(III)I: I12 Branch 40 IFGE L214 - false
   * 8 gnu.trove.map.hash.TIntIntHashMap.doPut(III)I: I41 Branch 41 IFEQ L221 - true
   * 9 gnu.trove.map.hash.TIntIntHashMap.doPut(III)I: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[20];
      intArray0[0] = (-465);
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      int int0 = tIntIntHashMap0.remove((-465));
      assertEquals((-465), int0);
      assertEquals(1, tIntIntHashMap0.size());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntIntHashMap.forEachKey(Lgnu/trove/procedure/TIntProcedure;)Z: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[1];
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      // Undeclared exception!
      try {
        tIntIntHashMap0.forEachKey((TIntProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 3
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.keySet()Lgnu/trove/set/TIntSet;: root-Branch
   * 2 gnu.trove.map.hash.TIntIntHashMap.<init>(IF)V: root-Branch
   * 3 gnu.trove.map.hash.TIntIntHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TIntIntHashMap;)V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(706, 706);
      TIntSet tIntSet0 = tIntIntHashMap0.keySet();
      assertEquals(true, tIntSet0.isEmpty());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.increment(I)Z: root-Branch
   * 2 gnu.trove.map.hash.TIntIntHashMap.adjustValue(II)Z: I9 Branch 71 IFGE L477 - false
   */

  @Test
  public void test4()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(706, 706);
      boolean boolean0 = tIntIntHashMap0.increment(0);
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.containsKey(I)Z: root-Branch
   * 2 gnu.trove.map.hash.TIntIntHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(0);
      boolean boolean0 = tIntIntHashMap0.containsKey(689);
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.<init>(Lgnu/trove/map/TIntIntMap;)V: I10 Branch 34 IFEQ L133 - false
   * 2 gnu.trove.map.hash.TIntIntHashMap.<init>(Lgnu/trove/map/TIntIntMap;)V: I38 Branch 35 IFEQ L139 - true
   * 3 gnu.trove.map.hash.TIntIntHashMap.<init>(Lgnu/trove/map/TIntIntMap;)V: I50 Branch 36 IFEQ L143 - true
   * 4 gnu.trove.map.hash.TIntIntHashMap$TIntIntHashIterator.<init>(Lgnu/trove/map/hash/TIntIntHashMap;Lgnu/trove/map/hash/TIntIntHashMap;)V: root-Branch
   * 5 gnu.trove.map.hash.TIntIntHashMap.iterator()Lgnu/trove/iterator/TIntIntIterator;: root-Branch
   * 6 gnu.trove.map.hash.TIntIntHashMap.putAll(Lgnu/trove/map/TIntIntMap;)V: I15 Branch 43 IFEQ L243 - true
   */

  @Test
  public void test6()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(0);
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap0);
      assertEquals(0, tIntIntHashMap1.getNoEntryKey());
      assertEquals(0, tIntIntHashMap1.getNoEntryValue());
      assertEquals(23, tIntIntHashMap1.capacity());
  }

  //Test case number: 7
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.<init>(Lgnu/trove/map/TIntIntMap;)V: I38 Branch 35 IFEQ L139 - false
   * 2 gnu.trove.map.hash.TIntIntHashMap.<init>(Lgnu/trove/map/TIntIntMap;)V: I50 Branch 36 IFEQ L143 - false
   * 3 gnu.trove.map.hash.TIntIntHashMap.<init>(Lgnu/trove/map/TIntIntMap;)V: I10 Branch 34 IFEQ L133 - false
   * 4 gnu.trove.map.hash.TIntIntHashMap.<init>(IFII)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(0, 0, (-1), (-1));
      TIntIntHashMap tIntIntHashMap1 = null;
      try {
        tIntIntHashMap1 = new TIntIntHashMap((TIntIntMap) tIntIntHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  //Test case number: 8
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.putIfAbsent(II)I: I9 Branch 39 IFGE L205 - false
   * 2 gnu.trove.map.hash.TIntIntHashMap.putIfAbsent(II)I: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test8()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(0);
      tIntIntHashMap0.putIfAbsent(133, 0);
      int int0 = tIntIntHashMap0.putIfAbsent(133, (-1));
      assertEquals(1, tIntIntHashMap0.size());
      assertEquals(0, int0);
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - false
   * 2 gnu.trove.map.hash.TIntIntHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   */

  @Test
  public void test9()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(706, 706);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put((Integer) 0, (Integer) 706);
      tIntIntHashMap0.putAll((Map<? extends Integer, ? extends Integer>) hashMap0);
      assertEquals(false, tIntIntHashMap0.isEmpty());
      assertEquals("{0=706}", tIntIntHashMap0.toString());
  }

  //Test case number: 10
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.get(I)I: I9 Branch 44 IFGE L253 - true
   * 2 gnu.trove.map.hash.TIntIntHashMap.adjustOrPutValue(III)I: I9 Branch 72 IFGE L491 - true
   * 3 gnu.trove.map.hash.TIntIntHashMap.adjustOrPutValue(III)I: I58 Branch 73 IFEQ L502 - false
   * 4 gnu.trove.map.hash.TIntIntHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 5 gnu.trove.map.hash.TIntIntHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 6 gnu.trove.map.hash.TIntIntHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 7 gnu.trove.map.hash.TIntIntHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 8 gnu.trove.map.hash.TIntIntHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 9 gnu.trove.map.hash.TIntIntHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 10 gnu.trove.map.hash.TIntIntHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - true
   */

  @Test
  public void test10()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(11);
      tIntIntHashMap0.adjustOrPutValue(11, 11, 11);
      boolean boolean0 = tIntIntHashMap0.equals((Object) tIntIntHashMap0);
      assertEquals("{11=11}", tIntIntHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntIntHashMap.get(I)I: I9 Branch 44 IFGE L253 - false
   */

  @Test
  public void test11()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(0);
      int int0 = tIntIntHashMap0.get((-1));
      assertEquals(0, int0);
  }

  //Test case number: 12
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   * 2 gnu.trove.map.hash.TIntIntHashMap$TIntIntHashIterator.key()I: root-Branch
   * 3 gnu.trove.map.hash.TIntIntHashMap$TIntIntHashIterator.advance()V: root-Branch
   * 4 gnu.trove.map.hash.TIntIntHashMap$TIntIntHashIterator.value()I: root-Branch
   * 5 gnu.trove.map.hash.TIntIntHashMap.putAll(Lgnu/trove/map/TIntIntMap;)V: I15 Branch 43 IFEQ L243 - false
   */

  @Test
  public void test12()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(706, 706);
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(tIntIntHashMap0._set, tIntIntHashMap0._set);
      tIntIntHashMap0.putAll((TIntIntMap) tIntIntHashMap1);
      boolean boolean0 = tIntIntHashMap0.isEmpty();
      assertEquals("{0=0}", tIntIntHashMap0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntIntHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test13()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(1354);
      boolean boolean0 = tIntIntHashMap0.isEmpty();
      assertEquals(2729, tIntIntHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntIntHashMap.remove(I)I: I14 Branch 46 IFLT L276 - true
   */

  @Test
  public void test14()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(0);
      int int0 = tIntIntHashMap0.remove(186);
      assertEquals(0, int0);
      assertEquals(0, tIntIntHashMap0.size());
  }

  //Test case number: 15
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.keys()[I: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TIntIntHashMap.keys()[I: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TIntIntHashMap.keys()[I: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TIntIntHashMap.keys()[I: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(706, 706);
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(tIntIntHashMap0._set, tIntIntHashMap0._set);
      tIntIntHashMap0.putAll((TIntIntMap) tIntIntHashMap1);
      tIntIntHashMap0.keys();
      assertEquals(1, tIntIntHashMap0.size());
      assertTrue(tIntIntHashMap0.equals(tIntIntHashMap1));
  }

  //Test case number: 16
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.keys([I)[I: I44 Branch 51 IF_ICMPNE L323 - false
   * 2 gnu.trove.map.hash.TIntIntHashMap.keys([I)[I: I10 Branch 49 IF_ICMPGE L315 - true
   * 3 gnu.trove.map.hash.TIntIntHashMap.keys([I)[I: I37 Branch 50 IFLE L322 - true
   * 4 gnu.trove.map.hash.TIntIntHashMap.keys([I)[I: I37 Branch 50 IFLE L322 - false
   * 5 gnu.trove.map.hash.TIntIntHashMap.keys([I)[I: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(706, 706);
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(tIntIntHashMap0._set, tIntIntHashMap0._set);
      int[] intArray0 = tIntIntHashMap1.keys(tIntIntHashMap0._set);
      assertNotNull(intArray0);
      assertEquals(1, tIntIntHashMap1.size());
      assertEquals(7, tIntIntHashMap1.capacity());
      assertEquals("{0=0}", tIntIntHashMap1.toString());
      assertFalse(tIntIntHashMap1.equals(tIntIntHashMap0));
  }

  //Test case number: 17
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.values()[I: I34 Branch 53 IF_ICMPNE L344 - false
   * 2 gnu.trove.map.hash.TIntIntHashMap.values()[I: I27 Branch 52 IFLE L343 - true
   * 3 gnu.trove.map.hash.TIntIntHashMap.values()[I: I27 Branch 52 IFLE L343 - false
   * 4 gnu.trove.map.hash.TIntIntHashMap.values()[I: I34 Branch 53 IF_ICMPNE L344 - true
   * 5 gnu.trove.map.hash.TIntIntHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 6 gnu.trove.map.hash.TIntIntHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 7 gnu.trove.map.hash.TIntIntHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 8 gnu.trove.map.hash.TIntIntHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   */

  @Test
  public void test17()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(0, 0);
      tIntIntHashMap0.put(0, 0);
      tIntIntHashMap0.values();
      assertEquals("{0=0}", tIntIntHashMap0.toString());
      assertEquals(7, tIntIntHashMap0.capacity());
  }

  //Test case number: 18
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.values([I)[I: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TIntIntHashMap.values([I)[I: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TIntIntHashMap.values([I)[I: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TIntIntHashMap.values([I)[I: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(706, 706);
      int[] intArray0 = tIntIntHashMap0.values(tIntIntHashMap0._set);
      assertNotNull(intArray0);
  }

  //Test case number: 19
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.values([I)[I: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TIntIntHashMap.values([I)[I: I44 Branch 56 IF_ICMPNE L363 - false
   * 3 gnu.trove.map.hash.TIntIntHashMap.values([I)[I: I37 Branch 55 IFLE L362 - true
   * 4 gnu.trove.map.hash.TIntIntHashMap.values([I)[I: I37 Branch 55 IFLE L362 - false
   * 5 gnu.trove.map.hash.TIntIntHashMap.values([I)[I: I44 Branch 56 IF_ICMPNE L363 - true
   * 6 gnu.trove.map.hash.TIntIntHashMap.keys()[I: I27 Branch 47 IFLE L303 - true
   * 7 gnu.trove.map.hash.TIntIntHashMap.keys()[I: I27 Branch 47 IFLE L303 - false
   * 8 gnu.trove.map.hash.TIntIntHashMap.keys()[I: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test19()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(0, 0);
      int[] intArray0 = tIntIntHashMap0.keys();
      tIntIntHashMap0.put(0, 0);
      tIntIntHashMap0.values(intArray0);
      assertEquals(1, tIntIntHashMap0.size());
      assertEquals("{0=0}", tIntIntHashMap0.toString());
  }

  //Test case number: 20
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.containsValue(I)Z: I18 Branch 57 IFLE L376 - true
   * 2 gnu.trove.map.hash.TIntIntHashMap.containsValue(I)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TIntIntHashMap.containsValue(I)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 4 gnu.trove.map.hash.TIntIntHashMap.containsValue(I)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 5 gnu.trove.map.hash.TIntIntHashMap.containsValue(I)Z: I30 Branch 59 IF_ICMPNE L377 - true
   */

  @Test
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[20];
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      boolean boolean0 = tIntIntHashMap0.containsValue((-465));
      assertEquals(false, boolean0);
      assertEquals("{0=0}", tIntIntHashMap0.toString());
      assertEquals(1, tIntIntHashMap0.size());
      assertEquals(43, tIntIntHashMap0.capacity());
  }

  //Test case number: 21
  /*
   * 11 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.containsValue(I)Z: I30 Branch 59 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TIntIntHashMap$TIntIntHashIterator.<init>(Lgnu/trove/map/hash/TIntIntHashMap;Lgnu/trove/map/hash/TIntIntHashMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TIntIntHashMap$TIntIntHashIterator.key()I: root-Branch
   * 4 gnu.trove.map.hash.TIntIntHashMap$TIntIntHashIterator.advance()V: root-Branch
   * 5 gnu.trove.map.hash.TIntIntHashMap$TIntIntHashIterator.value()I: root-Branch
   * 6 gnu.trove.map.hash.TIntIntHashMap.iterator()Lgnu/trove/iterator/TIntIntIterator;: root-Branch
   * 7 gnu.trove.map.hash.TIntIntHashMap.containsValue(I)Z: I18 Branch 57 IFLE L376 - false
   * 8 gnu.trove.map.hash.TIntIntHashMap.containsValue(I)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 9 gnu.trove.map.hash.TIntIntHashMap.containsValue(I)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 10 gnu.trove.map.hash.TIntIntHashMap.putAll(Lgnu/trove/map/TIntIntMap;)V: I15 Branch 43 IFEQ L243 - true
   * 11 gnu.trove.map.hash.TIntIntHashMap.putAll(Lgnu/trove/map/TIntIntMap;)V: I15 Branch 43 IFEQ L243 - false
   */

  @Test
  public void test21()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(706, 706);
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(tIntIntHashMap0._set, tIntIntHashMap0._set);
      tIntIntHashMap0.putAll((TIntIntMap) tIntIntHashMap1);
      boolean boolean0 = tIntIntHashMap0.containsValue(0);
      assertEquals(false, tIntIntHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 22
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TIntIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TIntIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(0);
      boolean boolean0 = tIntIntHashMap0.forEachValue((TIntProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 23
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TIntIntHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 3 gnu.trove.map.hash.TIntIntHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 4 gnu.trove.map.hash.TIntIntHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 5 gnu.trove.map.hash.TIntIntHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 6 gnu.trove.map.hash.TIntIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 7 gnu.trove.map.hash.TIntIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test23()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(0, 0);
      tIntIntHashMap0.put(0, 0);
      // Undeclared exception!
      try {
        tIntIntHashMap0.forEachValue((TIntProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 24
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.forEachEntry(Lgnu/trove/procedure/TIntIntProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 2 gnu.trove.map.hash.TIntIntHashMap.forEachEntry(Lgnu/trove/procedure/TIntIntProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 3 gnu.trove.map.hash.TIntIntHashMap$1.execute(II)Z: I4 Branch 115 IFEQ L1233 - false
   * 4 gnu.trove.map.hash.TIntIntHashMap.putIfAbsent(II)I: I9 Branch 39 IFGE L205 - true
   * 5 gnu.trove.map.hash.TIntIntHashMap$1.<init>(Lgnu/trove/map/hash/TIntIntHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 6 gnu.trove.map.hash.TIntIntHashMap.toString()Ljava/lang/String;: root-Branch
   * 7 gnu.trove.map.hash.TIntIntHashMap.forEachEntry(Lgnu/trove/procedure/TIntIntProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 8 gnu.trove.map.hash.TIntIntHashMap.forEachEntry(Lgnu/trove/procedure/TIntIntProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 9 gnu.trove.map.hash.TIntIntHashMap.forEachEntry(Lgnu/trove/procedure/TIntIntProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(0);
      tIntIntHashMap0.putIfAbsent(133, 0);
      String string0 = tIntIntHashMap0.toString();
      assertEquals(1, tIntIntHashMap0.size());
      assertEquals("{133=0}", string0);
  }

  //Test case number: 25
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TIntIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TIntIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   * 4 gnu.trove.map.hash.TIntIntHashMap.clear()V: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[1];
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      assertEquals(1, tIntIntHashMap0.size());
      
      tIntIntHashMap0.clear();
      tIntIntHashMap0.transformValues((TIntFunction) null);
      assertEquals("{}", tIntIntHashMap0.toString());
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TIntIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TIntIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[1];
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      // Undeclared exception!
      try {
        tIntIntHashMap0.transformValues((TIntFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 27
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.retainEntries(Lgnu/trove/procedure/TIntIntProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TIntIntHashMap.retainEntries(Lgnu/trove/procedure/TIntIntProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TIntIntHashMap.retainEntries(Lgnu/trove/procedure/TIntIntProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   * 4 gnu.trove.map.hash.TIntIntHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(1354);
      boolean boolean0 = tIntIntHashMap0.retainEntries((TIntIntProcedure) null);
      assertEquals(2729, tIntIntHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 28
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.retainEntries(Lgnu/trove/procedure/TIntIntProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TIntIntHashMap.retainEntries(Lgnu/trove/procedure/TIntIntProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TIntIntHashMap.retainEntries(Lgnu/trove/procedure/TIntIntProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[4];
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      // Undeclared exception!
      try {
        tIntIntHashMap0.retainEntries((TIntIntProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.adjustValue(II)Z: I9 Branch 71 IFGE L477 - true
   * 2 gnu.trove.map.hash.TIntIntHashMap.increment(I)Z: root-Branch
   */

  @Test
  public void test29()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(706, 706);
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(tIntIntHashMap0._set, tIntIntHashMap0._set);
      boolean boolean0 = tIntIntHashMap1.increment(0);
      assertEquals("{0=1}", tIntIntHashMap1.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.adjustOrPutValue(III)I: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TIntIntHashMap.adjustOrPutValue(III)I: I58 Branch 73 IFEQ L502 - true
   */

  @Test
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[1];
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      int int0 = tIntIntHashMap0.adjustOrPutValue(0, 0, 0);
      assertEquals(0, int0);
      assertEquals(1, tIntIntHashMap0.size());
      assertEquals("{0=0}", tIntIntHashMap0.toString());
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TIntIntHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   */

  @Test
  public void test31()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(706, 706);
      boolean boolean0 = tIntIntHashMap0.equals((Object) "");
      assertEquals(false, boolean0);
  }

  //Test case number: 32
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   * 2 gnu.trove.map.hash.TIntIntHashMap.<init>(IFII)V: root-Branch
   * 3 gnu.trove.map.hash.TIntIntHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   */

  @Test
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[1];
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(0, (-1867.7723F), (-1), 0);
      boolean boolean0 = tIntIntHashMap0.equals((Object) tIntIntHashMap1);
      assertFalse(tIntIntHashMap1.equals(tIntIntHashMap0));
      assertEquals("{0=0}", tIntIntHashMap0.toString());
      assertEquals(false, boolean0);
  }

  //Test case number: 33
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 2 gnu.trove.map.hash.TIntIntHashMap.<init>(IF)V: root-Branch
   * 3 gnu.trove.map.hash.TIntIntHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 4 gnu.trove.map.hash.TIntIntHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 5 gnu.trove.map.hash.TIntIntHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   */

  @Test
  public void test33()  throws Throwable  {
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(706, 706);
      TIntIntHashMap tIntIntHashMap1 = new TIntIntHashMap(tIntIntHashMap0._set, tIntIntHashMap0._set);
      int int0 = tIntIntHashMap1.hashCode();
      assertEquals(0, int0);
      assertEquals(7, tIntIntHashMap1.capacity());
      assertEquals(1, tIntIntHashMap1.size());
  }

  //Test case number: 34
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap$1.execute(II)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TIntIntHashMap$1.<init>(Lgnu/trove/map/hash/TIntIntHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 3 gnu.trove.map.hash.TIntIntHashMap$1.execute(II)Z: I4 Branch 115 IFEQ L1233 - false
   * 4 gnu.trove.map.hash.TIntIntHashMap.toString()Ljava/lang/String;: root-Branch
   * 5 gnu.trove.map.hash.TIntIntHashMap.forEachEntry(Lgnu/trove/procedure/TIntIntProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 6 gnu.trove.map.hash.TIntIntHashMap.forEachEntry(Lgnu/trove/procedure/TIntIntProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 7 gnu.trove.map.hash.TIntIntHashMap.forEachEntry(Lgnu/trove/procedure/TIntIntProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 8 gnu.trove.map.hash.TIntIntHashMap.forEachEntry(Lgnu/trove/procedure/TIntIntProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 9 gnu.trove.map.hash.TIntIntHashMap.forEachEntry(Lgnu/trove/procedure/TIntIntProcedure;)Z: I39 Branch 65 IFNE L422 - true
   */

  @Test
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[4] = 12203;
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      String string0 = tIntIntHashMap0.toString();
      assertEquals(2, tIntIntHashMap0.size());
      assertNotNull(string0);
      assertEquals("{12203=12203, 0=0}", string0);
  }

  //Test case number: 35
  /*
   * 12 covered goals:
   * 1 gnu.trove.map.hash.TIntIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 2 gnu.trove.map.hash.TIntIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 3 gnu.trove.map.hash.TIntIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 4 gnu.trove.map.hash.TIntIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 5 gnu.trove.map.hash.TIntIntHashMap.put(II)I: root-Branch
   * 6 gnu.trove.map.hash.TIntIntHashMap.setUp(I)I: root-Branch
   * 7 gnu.trove.map.hash.TIntIntHashMap.<init>([I[I)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 8 gnu.trove.map.hash.TIntIntHashMap.<init>([I[I)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 9 gnu.trove.map.hash.TIntIntHashMap.doPut(III)I: I12 Branch 40 IFGE L214 - true
   * 10 gnu.trove.map.hash.TIntIntHashMap.doPut(III)I: I12 Branch 40 IFGE L214 - false
   * 11 gnu.trove.map.hash.TIntIntHashMap.doPut(III)I: I41 Branch 41 IFEQ L221 - true
   * 12 gnu.trove.map.hash.TIntIntHashMap.doPut(III)I: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[10];
      TIntIntHashMap tIntIntHashMap0 = new TIntIntHashMap(intArray0, intArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(17);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tIntIntHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals("{0=0}", tIntIntHashMap0.toString());
      assertEquals(1, tIntIntHashMap0.size());
      assertEquals(23, tIntIntHashMap0.capacity());
  }
}
