/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TCharIntMap;
import gnu.trove.map.hash.TCharIntHashMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharIntHashEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      char char0 = 'u';
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0, float0, char0, (int) char0);
      TCharIntHashMap tCharIntHashMap1 = null;
      try {
        tCharIntHashMap1 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = '?';
      charArray0[0] = char0;
      char char1 = '-';
      charArray0[1] = char1;
      char char2 = '^';
      charArray0[2] = char2;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) char0;
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      char char3 = '$';
      tCharIntHashMap0.remove(char3);
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap(charArray0, intArray0);
      TCharIntHashMap tCharIntHashMap2 = new TCharIntHashMap();
      assertEquals(23, tCharIntHashMap2.capacity());
      
      tCharIntHashMap2.compact();
      assertFalse(tCharIntHashMap2.equals(tCharIntHashMap0));
  }

  @Test
  public void test2()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      boolean boolean0 = true;
      tCharIntHashMap0.reenableAutoCompaction(boolean0);
      assertEquals(23, tCharIntHashMap0.capacity());
      assertEquals(0, tCharIntHashMap0.getNoEntryValue());
      assertEquals('\u0000', tCharIntHashMap0.getNoEntryKey());
  }

  @Test
  public void test3()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = 'g';
      charArray0[0] = char0;
      char char1 = '[';
      charArray0[1] = char1;
      char char2 = 'c';
      charArray0[2] = char2;
      char char3 = 'T';
      charArray0[3] = char3;
      char char4 = '5';
      charArray0[4] = char4;
      charArray0[0] = char0;
      charArray0[1] = char3;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) charArray0[1];
      intArray0[1] = (int) charArray0[2];
      int int0 = 0;
      intArray0[2] = int0;
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      charArray0[2] = char1;
      charArray0[3] = char3;
      charArray0[4] = char1;
      charArray0[5] = char4;
      char char5 = 'M';
      charArray0[5] = char5;
      int[] intArray1 = new int[3];
      intArray1[0] = (int) char2;
      intArray1[1] = (int) charArray0[5];
      intArray1[0] = (int) char5;
      intArray1[1] = (int) charArray0[1];
      intArray1[2] = (int) char3;
      intArray1[2] = (int) charArray0[1];
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap(charArray0, intArray1);
      int[] intArray2 = tCharIntHashMap1.values();
      assertEquals(0, tCharIntHashMap1.getNoEntryValue());
      assertNotNull(intArray2);
      assertEquals("{T=84, [=84, g=77}", tCharIntHashMap1.toString());
      assertEquals('\u0000', tCharIntHashMap1.getNoEntryKey());
      assertFalse(tCharIntHashMap1.equals(tCharIntHashMap0));
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 473;
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap0);
      boolean boolean0 = true;
      tCharIntHashMap1.reenableAutoCompaction(boolean0);
      assertEquals('\u0000', tCharIntHashMap1.getNoEntryKey());
      assertEquals(23, tCharIntHashMap1.capacity());
      assertEquals(0, tCharIntHashMap1.getNoEntryValue());
      
      float float0 = (-497.23462F);
      char char0 = '}';
      TCharIntHashMap tCharIntHashMap2 = new TCharIntHashMap(int0, float0, char0, (int) char0);
      int int1 = 143483;
      boolean boolean1 = tCharIntHashMap2.adjustValue(char0, int1);
      assertEquals(false, boolean1);
      assertEquals(125, tCharIntHashMap2.getNoEntryValue());
      assertEquals('}', tCharIntHashMap2.getNoEntryKey());
      
      int int2 = 561;
      TCharIntHashMap tCharIntHashMap3 = new TCharIntHashMap(int2, int2);
      tCharIntHashMap3.size();
      tCharIntHashMap3.capacity();
      assertEquals(0, tCharIntHashMap3.getNoEntryValue());
      assertEquals('\u0000', tCharIntHashMap3.getNoEntryKey());
  }

  @Test
  public void test5()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap();
      char char0 = 'S';
      float float0 = (-1.0F);
      // Undeclared exception!
      try {
        tCharIntHashMap0.setAutoCompactionFactor(float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1.0
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 97649;
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0);
      tCharIntHashMap0.tempDisableAutoCompaction();
      int int1 = 571;
      char char0 = 'Z';
      tCharIntHashMap0.adjustValue(char0, int0);
      char char1 = '\"';
      boolean boolean0 = tCharIntHashMap0.increment(char1);
      assertEquals('\u0000', tCharIntHashMap0.getNoEntryKey());
      assertEquals(195311, tCharIntHashMap0.capacity());
      assertEquals(false, boolean0);
      assertEquals(0, tCharIntHashMap0.getNoEntryValue());
      
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap(int1, int1);
      char[] charArray0 = tCharIntHashMap1.keys();
      assertEquals('\u0000', tCharIntHashMap1.getNoEntryKey());
      assertEquals(0, tCharIntHashMap1.getNoEntryValue());
      assertNotNull(charArray0);
  }

  @Test
  public void test7()  throws Throwable  {
      char[] charArray0 = new char[10];
      char char0 = '}';
      charArray0[0] = char0;
      char char1 = '@';
      charArray0[1] = char1;
      char char2 = 'x';
      charArray0[2] = char2;
      char char3 = 'N';
      charArray0[3] = char3;
      char char4 = '4';
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap((int) char1, (float) charArray0[1]);
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap0);
      tCharIntHashMap1.isEmpty();
      charArray0[4] = char4;
      int int0 = 1;
      TCharIntHashMap tCharIntHashMap2 = new TCharIntHashMap(int0, (float) char3);
      tCharIntHashMap2.clear();
      char char5 = 'j';
      charArray0[5] = char5;
      char char6 = 'Z';
      charArray0[6] = char6;
      char char7 = 'D';
      int[] intArray0 = tCharIntHashMap2.values();
      assertNotNull(intArray0);
      
      charArray0[7] = char7;
      char char8 = '9';
      charArray0[8] = char8;
      char char9 = '>';
      charArray0[9] = char9;
      int[] intArray1 = new int[1];
      intArray1[0] = (int) char7;
      intArray1[0] = (int) char0;
      TCharIntHashMap tCharIntHashMap3 = new TCharIntHashMap(charArray0, intArray1);
      TCharIntHashMap tCharIntHashMap4 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap3);
      assertEquals('\u0000', tCharIntHashMap3.getNoEntryKey());
      assertEquals(23, tCharIntHashMap3.capacity());
      assertEquals(0, tCharIntHashMap3.getNoEntryValue());
      assertEquals("{}=125}", tCharIntHashMap3.toString());
      
      int int1 = (-1038);
      float float0 = (-209.43665F);
      TCharIntHashMap tCharIntHashMap5 = new TCharIntHashMap(int1, float0);
      assertEquals(0, tCharIntHashMap5.getNoEntryValue());
      assertEquals('\u0000', tCharIntHashMap5.getNoEntryKey());
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-1844);
      char char0 = '-';
      char[] charArray0 = new char[2];
      charArray0[0] = char0;
      charArray0[1] = char0;
      int[] intArray0 = new int[4];
      int int1 = 0;
      intArray0[0] = int1;
      int int2 = 111;
      float float0 = 162.20117F;
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int2, float0);
      tCharIntHashMap0.capacity();
      intArray0[1] = (int) charArray0[0];
      intArray0[2] = (int) char0;
      intArray0[3] = int0;
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap(charArray0, intArray0);
      char char1 = '|';
      tCharIntHashMap1.size();
      tCharIntHashMap1.increment(char1);
      int int3 = 0;
      TCharIntHashMap tCharIntHashMap2 = new TCharIntHashMap(int0, (float) int0, char0, int3);
      int int4 = (-879);
      int int5 = 0;
      int int6 = tCharIntHashMap2.adjustOrPutValue(char0, int4, int5);
      intArray0[0] = int0;
      intArray0[1] = int6;
      intArray0[2] = (int) charArray0[0];
      intArray0[3] = (int) charArray0[0];
      tCharIntHashMap2.get(char0);
      tCharIntHashMap2.hashCode();
      tCharIntHashMap2.toString();
      int int7 = tCharIntHashMap2.capacity();
      assertEquals(7, tCharIntHashMap2.capacity());
      assertEquals(7, int7);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-1299);
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0);
      String string0 = "";
      String string1 = "";
      File file0 = new File(string0, string1);
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(file0, string1);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // 
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = '#';
      charArray0[0] = char0;
      char char1 = 'H';
      charArray0[1] = char1;
      char char2 = '+';
      charArray0[2] = char2;
      char char3 = '3';
      charArray0[3] = char3;
      char char4 = 'F';
      charArray0[4] = char4;
      char char5 = '^';
      charArray0[5] = char5;
      char char6 = 'm';
      charArray0[6] = char6;
      char char7 = 'B';
      charArray0[7] = char7;
      char char8 = '3';
      charArray0[8] = char8;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) char0;
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      tCharIntHashMap0.getAutoCompactionFactor();
      assertEquals(23, tCharIntHashMap0.capacity());
      assertEquals('\u0000', tCharIntHashMap0.getNoEntryKey());
      assertEquals(0, tCharIntHashMap0.getNoEntryValue());
      assertEquals("{#=35}", tCharIntHashMap0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 'h';
      charArray0[0] = char0;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) char0;
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      tCharIntHashMap0.valueCollection();
      assertEquals('\u0000', tCharIntHashMap0.getNoEntryKey());
      assertEquals(0, tCharIntHashMap0.getNoEntryValue());
      assertEquals("{h=104}", tCharIntHashMap0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-100);
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0);
      char char0 = '+';
      int int1 = 1649;
      tCharIntHashMap0.adjustOrPutValue(char0, (int) char0, int1);
      int int2 = 52679969;
      tCharIntHashMap0.tempDisableAutoCompaction();
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap();
      tCharIntHashMap1.contains(char0);
      char char1 = '8';
      byte[] byteArray0 = tCharIntHashMap0._states;
      tCharIntHashMap0.contains(char1);
      assertEquals(1, tCharIntHashMap0.size());
      
      TCharIntHashMap tCharIntHashMap2 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap1);
      int int3 = 1386;
      tCharIntHashMap2.ensureCapacity(int3);
      float float0 = 667.5585F;
      char[] charArray0 = new char[10];
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = char0;
      charArray0[3] = char1;
      charArray0[4] = char1;
      charArray0[5] = char0;
      charArray0[6] = char0;
      charArray0[7] = char0;
      charArray0[8] = char0;
      charArray0[9] = char0;
      tCharIntHashMap1._set = charArray0;
      TCharIntHashMap tCharIntHashMap3 = new TCharIntHashMap(int2, float0);
      tCharIntHashMap3.iterator();
      tCharIntHashMap3.ensureCapacity(int2);
      int int4 = (-1082);
      tCharIntHashMap2.capacity();
      float float1 = 1.0F;
      TCharIntHashMap tCharIntHashMap4 = new TCharIntHashMap(int4, float1);
      tCharIntHashMap3.isEmpty();
      TCharIntHashMap tCharIntHashMap5 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap4);
      tCharIntHashMap5.tempDisableAutoCompaction();
      tCharIntHashMap2._set = tCharIntHashMap5._set;
      tCharIntHashMap1.hashCode();
      float float2 = 0.0F;
      TCharIntHashMap tCharIntHashMap6 = new TCharIntHashMap(int2, float2);
      char[] charArray1 = tCharIntHashMap3._set;
      tCharIntHashMap6.capacity();
      assertEquals(0, tCharIntHashMap6.getNoEntryValue());
  }

//   @Test
//   public void test13()  throws Throwable  {
//       TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
//       tCharIntHashMap0.isEmpty();
//       char char0 = '.';
//       tCharIntHashMap0.contains(char0);
//       tCharIntHashMap0.tempDisableAutoCompaction();
//       char char1 = tCharIntHashMap0.getNoEntryKey();
//       TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap0);
//       TCharIntHashMap tCharIntHashMap2 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap1);
//       int int0 = tCharIntHashMap2.capacity();
//       char char2 = '&';
//       tCharIntHashMap2.remove(char2);
//       char char3 = '5';
//       tCharIntHashMap0.putIfAbsent(char3, int0);
//       boolean boolean0 = false;
//       tCharIntHashMap2.keys();
//       tCharIntHashMap0.setAutoCompactionFactor((float) char1);
//       tCharIntHashMap0.reenableAutoCompaction(boolean0);
//       char char4 = 'o';
//       byte[] byteArray0 = tCharIntHashMap0._states;
//       tCharIntHashMap0.tempDisableAutoCompaction();
//       tCharIntHashMap1.capacity();
//       byte[] byteArray1 = tCharIntHashMap1._states;
//       tCharIntHashMap0.contains(char4);
//       tCharIntHashMap2.toString();
//       assertEquals(0.0F, tCharIntHashMap0.getAutoCompactionFactor(), 0.01F);
//       assertEquals("{5=23}", tCharIntHashMap0.toString());
//   }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 207;
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0, int0);
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap0);
      tCharIntHashMap0.putAll((TCharIntMap) tCharIntHashMap1);
      tCharIntHashMap0.trimToSize();
      char char0 = 'R';
      tCharIntHashMap1.getNoEntryKey();
      tCharIntHashMap0.containsKey(char0);
      char char1 = 'M';
      tCharIntHashMap0.contains(char1);
      TCharIntHashMap tCharIntHashMap2 = new TCharIntHashMap(int0, int0);
      tCharIntHashMap2.contains(char0);
      tCharIntHashMap2.getNoEntryKey();
      char[] charArray0 = tCharIntHashMap2._set;
      int int1 = 339;
      tCharIntHashMap2.adjustOrPutValue(char0, int1, int0);
      int int2 = (-1193);
      tCharIntHashMap2.capacity();
      char char2 = '\"';
      float float0 = 653.66187F;
      tCharIntHashMap1.setAutoCompactionFactor(float0);
      TCharIntHashMap tCharIntHashMap3 = new TCharIntHashMap(int2, (float) int2, char2, int2);
      tCharIntHashMap2.putAll((TCharIntMap) tCharIntHashMap1);
      assertEquals(false, tCharIntHashMap2.isEmpty());
      
      byte[] byteArray0 = tCharIntHashMap3._states;
      ObjectInput objectInput0 = null;
      tCharIntHashMap1.getAutoCompactionFactor();
      // Undeclared exception!
      try {
        tCharIntHashMap3.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TCharIntMap tCharIntMap0 = null;
      TCharIntHashMap tCharIntHashMap0 = null;
      try {
        tCharIntHashMap0 = new TCharIntHashMap(tCharIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = (-1795);
      char char0 = '?';
      int int1 = Integer.MAX_VALUE;
      char[] charArray0 = new char[5];
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = char0;
      charArray0[3] = char0;
      char char1 = 'j';
      charArray0[4] = char1;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) charArray0[1];
      intArray0[1] = (int) charArray0[2];
      int int2 = 546;
      intArray0[2] = int2;
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      tCharIntHashMap0.trimToSize();
      assertEquals(3, tCharIntHashMap0.capacity());
      
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap(int0, (float) int0, char0, int1);
      char char2 = '-';
      int int3 = 0;
      tCharIntHashMap1.increment(char2);
      int int4 = 1745;
      tCharIntHashMap1.adjustOrPutValue(char2, int3, int4);
      assertTrue(tCharIntHashMap1.equals(tCharIntHashMap0));
  }

  @Test
  public void test17()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      int[] intArray0 = new int[8];
      int int0 = (-1007);
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 0;
      intArray0[2] = int2;
      int int3 = (-1888);
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      int int6 = 0;
      intArray0[6] = int6;
      int int7 = (-1676);
      intArray0[7] = int7;
      int[] intArray1 = tCharIntHashMap0.values(intArray0);
      assertNotNull(intArray1);
      
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap0);
      int int8 = 223;
      TCharIntHashMap tCharIntHashMap2 = new TCharIntHashMap(int8, int8);
      char char0 = '6';
      tCharIntHashMap2.put(char0, int8);
      assertEquals("{6=223}", tCharIntHashMap2.toString());
      
      TCharIntHashMap tCharIntHashMap3 = new TCharIntHashMap();
      tCharIntHashMap3.clear();
      tCharIntHashMap3.isEmpty();
      assertEquals(0, tCharIntHashMap3.getNoEntryValue());
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = (-1389);
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(int0);
      tCharIntHashMap0.keySet();
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap();
      char char0 = 'P';
      tCharIntHashMap1.contains(char0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      tCharIntHashMap0.iterator();
      int int0 = 0;
      tCharIntHashMap0.containsValue(int0);
      int int1 = 188;
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap(int1);
      tCharIntHashMap1.compact();
      String string0 = "";
      String string1 = "from > to : ";
      File file0 = new File(string0, string1);
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }
}
