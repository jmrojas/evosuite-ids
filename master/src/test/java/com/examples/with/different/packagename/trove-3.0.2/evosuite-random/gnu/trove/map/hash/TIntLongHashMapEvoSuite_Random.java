/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TIntLongMap;
import gnu.trove.map.hash.TIntLongHashMap;
import gnu.trove.procedure.TIntLongProcedure;
import gnu.trove.procedure.TLongProcedure;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InterruptedIOException;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.AbstractMap;
import java.util.Locale;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TIntLongHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-1);
      intArray0[0] = int0;
      int int1 = 1806;
      intArray0[1] = int1;
      int int2 = (-99);
      intArray0[2] = int2;
      long[] longArray0 = new long[7];
      long long0 = (-1844L);
      longArray0[0] = long0;
      long long1 = (-957L);
      longArray0[1] = long1;
      longArray0[2] = (long) int2;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) intArray0[0];
      longArray0[6] = (long) intArray0[1];
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(intArray0, longArray0);
      int int3 = tIntLongHashMap0.size();
      assertEquals("{-99=-99, -1=-1844, 1806=-957}", tIntLongHashMap0.toString());
      assertEquals(3, int3);
      assertEquals(17, tIntLongHashMap0.capacity());
  }

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 6421;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 150;
      intArray0[2] = int2;
      int int3 = 702;
      intArray0[3] = int3;
      int int4 = 611;
      intArray0[4] = int4;
      int int5 = 1466;
      intArray0[5] = int5;
      int int6 = (-1780);
      intArray0[6] = int6;
      int int7 = 138;
      intArray0[7] = int7;
      int int8 = 1262;
      intArray0[8] = int8;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) intArray0[8];
      longArray0[1] = (long) int8;
      long long0 = 995L;
      longArray0[2] = long0;
      longArray0[3] = (long) int5;
      longArray0[4] = (long) intArray0[6];
      longArray0[5] = (long) int5;
      longArray0[6] = (long) int0;
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(intArray0, longArray0);
      TIntLongHashMap tIntLongHashMap1 = new TIntLongHashMap((TIntLongMap) tIntLongHashMap0);
      int int9 = (-1389);
      long long1 = tIntLongHashMap1.get(int9);
      assertTrue(tIntLongHashMap1.equals(tIntLongHashMap0));
      assertEquals(0, tIntLongHashMap1.getNoEntryKey());
      assertEquals(0L, long1);
      assertEquals(false, tIntLongHashMap0.isEmpty());
      assertEquals("{-1780=6421, 1466=1466, 611=-1780, 150=995, 6421=1262, 702=1466, 0=1262}", tIntLongHashMap1.toString());
      assertEquals("{-1780=6421, 1466=1466, 611=-1780, 150=995, 6421=1262, 702=1466, 0=1262}", tIntLongHashMap0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 1883;
      long long0 = 214L;
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(int0, (float) int0, int0, long0);
      tIntLongHashMap0.getNoEntryKey();
      int int1 = 1002331963;
      TIntLongHashMap tIntLongHashMap1 = null;
      try {
        tIntLongHashMap1 = new TIntLongHashMap(int1);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 679;
      intArray0[0] = int0;
      int int1 = (-599);
      intArray0[1] = int1;
      int int2 = 830;
      intArray0[2] = int2;
      int int3 = 1385;
      intArray0[3] = int3;
      int int4 = 0;
      intArray0[4] = int4;
      int int5 = (-1);
      intArray0[5] = int5;
      int int6 = (-207);
      intArray0[6] = int6;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) int2;
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(intArray0, longArray0);
      int int7 = 1110;
      long long0 = tIntLongHashMap0.remove(int7);
      assertEquals(17, tIntLongHashMap0.capacity());
      assertEquals(1, tIntLongHashMap0.size());
      assertEquals(0L, long0);
      assertEquals("{679=830}", tIntLongHashMap0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 0;
      intArray0[0] = int0;
      int int1 = 0;
      intArray0[1] = int1;
      int int2 = 1975;
      intArray0[2] = int2;
      int int3 = 768;
      intArray0[3] = int3;
      int int4 = 17929;
      intArray0[4] = int4;
      int int5 = 0;
      intArray0[5] = int5;
      int int6 = 779;
      intArray0[6] = int6;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) int1;
      longArray0[1] = (long) int3;
      longArray0[2] = (long) int2;
      longArray0[3] = (long) int3;
      longArray0[4] = (long) intArray0[2];
      longArray0[5] = (long) intArray0[4];
      longArray0[6] = (long) intArray0[1];
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(intArray0, longArray0);
      tIntLongHashMap0.ensureCapacity(int3);
      assertEquals(1597, tIntLongHashMap0.capacity());
      assertEquals("{779=0, 768=768, 1975=1975, 17929=1975, 0=17929}", tIntLongHashMap0.toString());
  }

//   @Test
//   public void test5()  throws Throwable  {
//       int int0 = 0;
//       int[] intArray0 = new int[7];
//       intArray0[0] = int0;
//       intArray0[1] = int0;
//       intArray0[2] = int0;
//       intArray0[3] = int0;
//       intArray0[4] = int0;
//       int int1 = 0;
//       intArray0[5] = int1;
//       intArray0[6] = int0;
//       long[] longArray0 = new long[9];
//       longArray0[0] = (long) int1;
//       longArray0[1] = (long) intArray0[6];
//       longArray0[2] = (long) intArray0[1];
//       longArray0[3] = (long) intArray0[4];
//       longArray0[4] = (long) int1;
//       longArray0[5] = (long) int0;
//       longArray0[6] = (long) intArray0[0];
//       longArray0[7] = (long) intArray0[4];
//       longArray0[8] = (long) intArray0[0];
//       TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(intArray0, longArray0);
//       int int2 = 75;
//       TIntLongHashMap tIntLongHashMap1 = new TIntLongHashMap(int2, intArray0[3]);
//       tIntLongHashMap0.putAll((TIntLongMap) tIntLongHashMap1);
//       int int3 = 1217;
//       float float0 = 0.0F;
//       TIntLongHashMap tIntLongHashMap2 = new TIntLongHashMap(int3, float0);
//       int int4 = (-1201);
//       long long0 = (-1419L);
//       tIntLongHashMap2.adjustValue(int4, long0);
//       PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
//       PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, int3);
//       ObjectInputStream objectInputStream0 = null;
//       try {
//         objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
//         fail("Expecting exception: InterruptedIOException");
//       
//       } catch(InterruptedIOException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test6()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Long long1 = new Long(long0);
      String string0 = "";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Long long0 = null;
      int int0 = 1;
      Integer integer0 = new Integer(int0);
      AbstractMap.SimpleEntry<Long, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, Integer>(long0, integer0);
      abstractMap_SimpleEntry0.getValue();
      int int1 = 0;
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayVariant();
      integer0.equals((Object) string0);
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(int1);
      TIntLongProcedure tIntLongProcedure0 = null;
      boolean boolean0 = tIntLongHashMap0.forEachEntry(tIntLongProcedure0);
      assertEquals("{}", tIntLongHashMap0.toString());
      assertEquals(true, boolean0);
      
      int int2 = (-1);
      TIntLongHashMap tIntLongHashMap1 = new TIntLongHashMap(int2);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)122;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-30);
      String string1 = tIntLongHashMap1.toString();
      assertNotNull(string1);
      
      byteArray0[1] = byte1;
      tIntLongHashMap1.getNoEntryValue();
      byte byte2 = (byte)29;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-59);
      byteArray0[3] = byte3;
      byte byte4 = (byte)69;
      long[] longArray0 = tIntLongHashMap1.values();
      assertNotNull(longArray0);
      
      byteArray0[4] = byte4;
      byte byte5 = (byte)34;
      byteArray0[5] = byte5;
      tIntLongHashMap1._states = byteArray0;
      tIntLongHashMap1.capacity();
      tIntLongHashMap1.tempDisableAutoCompaction();
      int int3 = 1;
      TIntLongHashMap tIntLongHashMap2 = new TIntLongHashMap(int3);
      tIntLongHashMap2.setAutoCompactionFactor((float) int3);
      assertEquals("{}", tIntLongHashMap2.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      float float0 = 1.0F;
      int int1 = 0;
      long long0 = 0L;
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(int0, float0, int1, long0);
      String string0 = tIntLongHashMap0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-525);
      int int1 = 1434;
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(int1, int1);
      tIntLongHashMap0.toString();
      TIntLongHashMap tIntLongHashMap1 = new TIntLongHashMap();
      tIntLongHashMap0.isEmpty();
      tIntLongHashMap1.tempDisableAutoCompaction();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-1440);
      int int1 = 112;
      long long0 = (-1158L);
      int[] intArray0 = new int[6];
      intArray0[0] = int1;
      int int2 = (-193);
      intArray0[1] = int2;
      intArray0[2] = int1;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int1;
      long[] longArray0 = new long[9];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = (long) intArray0[0];
      longArray0[4] = (long) intArray0[2];
      longArray0[5] = (long) int0;
      longArray0[6] = (long) int0;
      longArray0[7] = (long) intArray0[2];
      longArray0[8] = (long) intArray0[0];
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(intArray0, longArray0);
      tIntLongHashMap0.keySet();
      assertEquals("{112=-1440, -1440=112, -193=-1158}", tIntLongHashMap0.toString());
      
      int int3 = (-369);
      TIntLongHashMap tIntLongHashMap1 = new TIntLongHashMap(int3, (float) long0, int0, (long) int1);
      boolean boolean0 = tIntLongHashMap1.isEmpty();
      assertEquals(true, boolean0);
      
      TIntLongHashMap tIntLongHashMap2 = new TIntLongHashMap(int0, (float) int0, int1, long0);
      tIntLongHashMap2.compact();
      assertEquals("{}", tIntLongHashMap2.toString());
      
      int int4 = (-1965);
      tIntLongHashMap2.tempDisableAutoCompaction();
      tIntLongHashMap2.contains(int4);
      assertFalse(tIntLongHashMap2.equals(tIntLongHashMap0));
      assertEquals(3, tIntLongHashMap2.capacity());
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-1146);
      int[] intArray0 = new int[7];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) intArray0[3];
      longArray0[1] = (long) int0;
      longArray0[2] = (long) intArray0[5];
      longArray0[3] = (long) intArray0[2];
      longArray0[4] = (long) intArray0[6];
      longArray0[5] = (long) intArray0[5];
      longArray0[6] = (long) intArray0[2];
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(intArray0, longArray0);
      assertEquals(17, tIntLongHashMap0.capacity());
      assertEquals("{-1146=-1146}", tIntLongHashMap0.toString());
      assertEquals(1, tIntLongHashMap0.size());
      
      float float0 = 33.871212F;
      TIntLongHashMap tIntLongHashMap1 = new TIntLongHashMap(int0, float0, int0, (long) int0);
      tIntLongHashMap1.tempDisableAutoCompaction();
      boolean boolean0 = false;
      tIntLongHashMap1.reenableAutoCompaction(boolean0);
      int[] intArray1 = tIntLongHashMap1._set;
      tIntLongHashMap1.valueCollection();
      assertFalse(tIntLongHashMap1.equals(tIntLongHashMap0));
  }

  @Test
  public void test12()  throws Throwable  {
      TIntLongMap tIntLongMap0 = null;
      TIntLongHashMap tIntLongHashMap0 = null;
      try {
        tIntLongHashMap0 = new TIntLongHashMap(tIntLongMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-1434);
      int[] intArray0 = new int[6];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) intArray0[0];
      longArray0[1] = (long) intArray0[1];
      long long0 = (-1L);
      longArray0[2] = long0;
      longArray0[3] = (long) intArray0[5];
      longArray0[4] = (long) intArray0[1];
      longArray0[5] = (long) intArray0[0];
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(intArray0, longArray0);
      tIntLongHashMap0.contains(intArray0[0]);
      TIntLongHashMap tIntLongHashMap1 = new TIntLongHashMap();
      tIntLongHashMap1.keySet();
      int int1 = tIntLongHashMap1.hashCode();
      TIntLongHashMap tIntLongHashMap2 = new TIntLongHashMap(int0);
      TLongProcedure tLongProcedure0 = null;
      tIntLongHashMap2.setAutoCompactionFactor((float) int1);
      tIntLongHashMap2.forEachValue(tLongProcedure0);
      // Undeclared exception!
      try {
        tIntLongHashMap2.setAutoCompactionFactor((float) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1434.0
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1;
      float float0 = 535.31134F;
      int int1 = 0;
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap();
      int int2 = 0;
      long long0 = 9223372036854775807L;
      tIntLongHashMap0.putIfAbsent(int2, long0);
      assertEquals(false, tIntLongHashMap0.isEmpty());
      
      long long1 = 0L;
      TIntLongHashMap tIntLongHashMap1 = new TIntLongHashMap(int0, float0, int1, long1);
      float float1 = 10.0F;
      tIntLongHashMap1.setAutoCompactionFactor(float1);
      assertFalse(tIntLongHashMap1.equals(tIntLongHashMap0));
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 924;
      TIntLongHashMap tIntLongHashMap0 = new TIntLongHashMap(int0, int0);
      TIntLongHashMap tIntLongHashMap1 = new TIntLongHashMap((TIntLongMap) tIntLongHashMap0);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      tIntLongHashMap0.values(longArray0);
      tIntLongHashMap1.putIfAbsent(int0, int0);
      assertEquals(1, tIntLongHashMap1.size());
      
      int int1 = 71741;
      float float0 = 0.0F;
      TIntLongHashMap tIntLongHashMap2 = new TIntLongHashMap(int1, float0, int1, (long) int1);
      TIntLongHashMap tIntLongHashMap3 = null;
      try {
        tIntLongHashMap3 = new TIntLongHashMap((TIntLongMap) tIntLongHashMap2);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }
}
