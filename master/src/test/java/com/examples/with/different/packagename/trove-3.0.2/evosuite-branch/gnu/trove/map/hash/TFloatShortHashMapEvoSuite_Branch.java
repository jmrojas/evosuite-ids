/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TShortCollection;
import gnu.trove.function.TShortFunction;
import gnu.trove.map.TFloatShortMap;
import gnu.trove.map.hash.TFloatShortHashMap;
import gnu.trove.procedure.TFloatProcedure;
import gnu.trove.procedure.TFloatShortProcedure;
import gnu.trove.procedure.TShortProcedure;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TFloatShortHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TFloatShortHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TFloatShortHashMap.setUp(I)I: root-Branch
   * 3 gnu.trove.map.hash.TFloatShortHashMap.<init>()V: root-Branch
   * 4 gnu.trove.map.hash.TFloatShortHashMap.keySet()Lgnu/trove/set/TFloatSet;: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      tFloatShortHashMap0.keySet();
      assertEquals(23, tFloatShortHashMap0.capacity());
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap$TValueView.<init>(Lgnu/trove/map/hash/TFloatShortHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TFloatShortHashMap.<init>(I)V: root-Branch
   * 3 gnu.trove.map.hash.TFloatShortHashMap.valueCollection()Lgnu/trove/TShortCollection;: root-Branch
   */

//   @Test
//   public void test1()  throws Throwable  {
//       TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1331));
//       TShortCollection tShortCollection0 = tFloatShortHashMap0.valueCollection();
//       assertEquals(0, tShortCollection0.getNoEntryValue());
//   }

  //Test case number: 2
  /*
   * 14 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap$TFloatShortHashIterator.key()F: root-Branch
   * 2 gnu.trove.map.hash.TFloatShortHashMap$TFloatShortHashIterator.advance()V: root-Branch
   * 3 gnu.trove.map.hash.TFloatShortHashMap$TFloatShortHashIterator.<init>(Lgnu/trove/map/hash/TFloatShortHashMap;Lgnu/trove/map/hash/TFloatShortHashMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TFloatShortHashMap$TFloatShortHashIterator.value()S: root-Branch
   * 5 gnu.trove.map.hash.TFloatShortHashMap.iterator()Lgnu/trove/iterator/TFloatShortIterator;: root-Branch
   * 6 gnu.trove.map.hash.TFloatShortHashMap.put(FS)S: root-Branch
   * 7 gnu.trove.map.hash.TFloatShortHashMap.<init>(Lgnu/trove/map/TFloatShortMap;)V: I10 Branch 34 IFEQ L133 - false
   * 8 gnu.trove.map.hash.TFloatShortHashMap.<init>(Lgnu/trove/map/TFloatShortMap;)V: I40 Branch 35 IFEQ L139 - true
   * 9 gnu.trove.map.hash.TFloatShortHashMap.<init>(Lgnu/trove/map/TFloatShortMap;)V: I52 Branch 36 IFEQ L143 - true
   * 10 gnu.trove.map.hash.TFloatShortHashMap.putIfAbsent(FS)S: I9 Branch 39 IFGE L205 - true
   * 11 gnu.trove.map.hash.TFloatShortHashMap.doPut(FSI)S: I12 Branch 40 IFGE L214 - true
   * 12 gnu.trove.map.hash.TFloatShortHashMap.doPut(FSI)S: I41 Branch 41 IFEQ L221 - false
   * 13 gnu.trove.map.hash.TFloatShortHashMap.putAll(Lgnu/trove/map/TFloatShortMap;)V: I15 Branch 43 IFEQ L243 - true
   * 14 gnu.trove.map.hash.TFloatShortHashMap.putAll(Lgnu/trove/map/TFloatShortMap;)V: I15 Branch 43 IFEQ L243 - false
   */

  @Test
  public void test2()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      tFloatShortHashMap0.putIfAbsent((float) 507, (short)1496);
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap((TFloatShortMap) tFloatShortHashMap0);
      assertEquals(1, tFloatShortHashMap0.size());
      assertTrue(tFloatShortHashMap0.equals(tFloatShortHashMap1));
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.increment(F)Z: root-Branch
   * 2 gnu.trove.map.hash.TFloatShortHashMap.adjustValue(FS)Z: I9 Branch 71 IFGE L477 - false
   */

  @Test
  public void test3()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      boolean boolean0 = tFloatShortHashMap0.increment(Float.POSITIVE_INFINITY);
      assertEquals(23, tFloatShortHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((int) (short) (-354), (-1.0F));
      assertEquals("{}", tFloatShortHashMap0.toString());
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.forEachKey(Lgnu/trove/procedure/TFloatProcedure;)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1331));
      boolean boolean0 = tFloatShortHashMap0.forEachKey((TFloatProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.clear()V: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((int) (short)0);
      tFloatShortHashMap0.clear();
      assertEquals("{}", tFloatShortHashMap0.toString());
  }

  //Test case number: 7
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TFloatShortHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 3 gnu.trove.map.hash.TFloatShortHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 4 gnu.trove.map.hash.TFloatShortHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 5 gnu.trove.map.hash.TFloatShortHashMap.remove(F)S: I14 Branch 46 IFLT L276 - false
   */

  @Test
  public void test7()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(0);
      tFloatShortHashMap0.putIfAbsent(0.0F, (short) (-354));
      assertEquals(false, tFloatShortHashMap0.isEmpty());
      
      short short0 = tFloatShortHashMap0.remove((float) 0);
      assertEquals((short) (-354), short0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.containsKey(F)Z: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((int) (short)0);
      boolean boolean0 = tFloatShortHashMap0.containsKey(1205.2877F);
      assertEquals(false, boolean0);
  }

  //Test case number: 9
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.<init>(Lgnu/trove/map/TFloatShortMap;)V: I40 Branch 35 IFEQ L139 - false
   * 2 gnu.trove.map.hash.TFloatShortHashMap.<init>(Lgnu/trove/map/TFloatShortMap;)V: I52 Branch 36 IFEQ L143 - false
   * 3 gnu.trove.map.hash.TFloatShortHashMap.<init>(Lgnu/trove/map/TFloatShortMap;)V: I10 Branch 34 IFEQ L133 - false
   * 4 gnu.trove.map.hash.TFloatShortHashMap.<init>(IFFS)V: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((int) (short)0, (float) (short)0, 1205.2877F, (short)1);
      TFloatShortHashMap tFloatShortHashMap1 = null;
      try {
        tFloatShortHashMap1 = new TFloatShortHashMap((TFloatShortMap) tFloatShortHashMap0);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   */

  @Test
  public void test10()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1522), (float) (-1522), 0.0F, (short)0);
      short short0 = tFloatShortHashMap0.putIfAbsent((float) (short)0, (short) (-358));
      assertEquals(7, tFloatShortHashMap0.capacity());
      assertEquals((short)0, short0);
  }

  //Test case number: 11
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.putIfAbsent(FS)S: I9 Branch 39 IFGE L205 - false
   * 2 gnu.trove.map.hash.TFloatShortHashMap.<init>([F[S)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 3 gnu.trove.map.hash.TFloatShortHashMap.<init>([F[S)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 4 gnu.trove.map.hash.TFloatShortHashMap.doPut(FSI)S: I12 Branch 40 IFGE L214 - false
   * 5 gnu.trove.map.hash.TFloatShortHashMap.doPut(FSI)S: I41 Branch 41 IFEQ L221 - true
   */

  @Test
  public void test11()  throws Throwable  {
      float[] floatArray0 = new float[5];
      short[] shortArray0 = new short[9];
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      short short0 = tFloatShortHashMap0.putIfAbsent((float) (short)0, (short) (-1276));
      assertEquals(1, tFloatShortHashMap0.size());
      assertEquals(23, tFloatShortHashMap0.capacity());
      assertEquals("{0.0=0}", tFloatShortHashMap0.toString());
      assertEquals((short)0, short0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   */

  @Test
  public void test12()  throws Throwable  {
      float[] floatArray0 = new float[10];
      short[] shortArray0 = new short[5];
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      tFloatShortHashMap0.putAll((Map<? extends Float, ? extends Short>) hashMap0);
      assertEquals(1, tFloatShortHashMap0.size());
      assertEquals(23, tFloatShortHashMap0.capacity());
      assertEquals("{0.0=0}", tFloatShortHashMap0.toString());
  }

  //Test case number: 13
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.get(F)S: I9 Branch 44 IFGE L253 - true
   * 2 gnu.trove.map.hash.TFloatShortHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 3 gnu.trove.map.hash.TFloatShortHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 4 gnu.trove.map.hash.TFloatShortHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 5 gnu.trove.map.hash.TFloatShortHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 6 gnu.trove.map.hash.TFloatShortHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 7 gnu.trove.map.hash.TFloatShortHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 8 gnu.trove.map.hash.TFloatShortHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      tFloatShortHashMap0.putIfAbsent((float) 507, (short)1496);
      boolean boolean0 = tFloatShortHashMap0.equals((Object) tFloatShortHashMap0);
      assertEquals(1, tFloatShortHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.get(F)S: I9 Branch 44 IFGE L253 - false
   */

  @Test
  public void test14()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1331));
      short short0 = tFloatShortHashMap0.get((-1294.0818F));
      assertEquals((short)0, short0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      tFloatShortHashMap0.putIfAbsent((-662.6762F), (short)850);
      boolean boolean0 = tFloatShortHashMap0.isEmpty();
      assertEquals(1, tFloatShortHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test16()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      boolean boolean0 = tFloatShortHashMap0.isEmpty();
      assertEquals(true, boolean0);
      assertEquals(23, tFloatShortHashMap0.capacity());
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.remove(F)S: I14 Branch 46 IFLT L276 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((int) (short)0);
      short short0 = tFloatShortHashMap0.remove((float) (-1522));
      assertEquals((short)0, short0);
      assertEquals(true, tFloatShortHashMap0.isEmpty());
  }

  //Test case number: 18
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.keys()[F: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TFloatShortHashMap.keys()[F: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TFloatShortHashMap.keys()[F: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TFloatShortHashMap.keys()[F: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      tFloatShortHashMap0.put((float) (short)0, (short) (-234));
      tFloatShortHashMap0.keys();
      assertEquals(false, tFloatShortHashMap0.isEmpty());
      assertEquals("{0.0=-234}", tFloatShortHashMap0.toString());
  }

  //Test case number: 19
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.keys([F)[F: I44 Branch 51 IF_ICMPNE L323 - false
   * 2 gnu.trove.map.hash.TFloatShortHashMap.keys([F)[F: I10 Branch 49 IF_ICMPGE L315 - true
   * 3 gnu.trove.map.hash.TFloatShortHashMap.keys([F)[F: I37 Branch 50 IFLE L322 - true
   * 4 gnu.trove.map.hash.TFloatShortHashMap.keys([F)[F: I37 Branch 50 IFLE L322 - false
   * 5 gnu.trove.map.hash.TFloatShortHashMap.keys([F)[F: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test19()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((int) (short)0);
      tFloatShortHashMap0.putIfAbsent((float) (short)0, (short) (-358));
      tFloatShortHashMap0.keys(tFloatShortHashMap0._set);
      assertEquals("{0.0=-358}", tFloatShortHashMap0.toString());
      assertEquals(1, tFloatShortHashMap0.size());
  }

  //Test case number: 20
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.values()[S: I34 Branch 53 IF_ICMPNE L344 - false
   * 2 gnu.trove.map.hash.TFloatShortHashMap.values()[S: I27 Branch 52 IFLE L343 - true
   * 3 gnu.trove.map.hash.TFloatShortHashMap.values()[S: I27 Branch 52 IFLE L343 - false
   * 4 gnu.trove.map.hash.TFloatShortHashMap.values()[S: I34 Branch 53 IF_ICMPNE L344 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      tFloatShortHashMap0.putIfAbsent((-1346.8555F), (short) (-4219));
      tFloatShortHashMap0.values();
      assertEquals(1, tFloatShortHashMap0.size());
      assertEquals("{-1346.8555=-4219}", tFloatShortHashMap0.toString());
  }

  //Test case number: 21
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.values([S)[S: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TFloatShortHashMap.values([S)[S: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TFloatShortHashMap.values([S)[S: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TFloatShortHashMap.values([S)[S: I44 Branch 56 IF_ICMPNE L363 - true
   * 5 gnu.trove.map.hash.TFloatShortHashMap.values([S)[S: I44 Branch 56 IF_ICMPNE L363 - false
   */

  @Test
  public void test21()  throws Throwable  {
      float[] floatArray0 = new float[10];
      short[] shortArray0 = new short[5];
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      short[] shortArray1 = tFloatShortHashMap0.values(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, tFloatShortHashMap0.size());
      assertEquals("{0.0=0}", tFloatShortHashMap0.toString());
  }

  //Test case number: 22
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.values([S)[S: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TFloatShortHashMap.values([S)[S: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TFloatShortHashMap.values([S)[S: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TFloatShortHashMap.values([S)[S: I44 Branch 56 IF_ICMPNE L363 - true
   * 5 gnu.trove.map.hash.TFloatShortHashMap.values([S)[S: I44 Branch 56 IF_ICMPNE L363 - false
   */

  @Test
  public void test22()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[0] = 1696.6533F;
      short[] shortArray0 = new short[9];
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      short[] shortArray1 = new short[1];
      short[] shortArray2 = tFloatShortHashMap0.values(shortArray1);
      assertNotNull(shortArray2);
      assertEquals(2, tFloatShortHashMap0.size());
      assertEquals(23, tFloatShortHashMap0.capacity());
      assertEquals("{1696.6533=0, 0.0=0}", tFloatShortHashMap0.toString());
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.containsValue(S)Z: I18 Branch 57 IFLE L376 - true
   * 2 gnu.trove.map.hash.TFloatShortHashMap.containsValue(S)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TFloatShortHashMap.containsValue(S)Z: I25 Branch 58 IF_ICMPNE L377 - true
   */

  @Test
  public void test23()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      boolean boolean0 = tFloatShortHashMap0.containsValue((short)4);
      assertEquals(false, boolean0);
      assertEquals(23, tFloatShortHashMap0.capacity());
  }

  //Test case number: 24
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.containsValue(S)Z: I30 Branch 59 IF_ICMPNE L377 - true
   * 2 gnu.trove.map.hash.TFloatShortHashMap.containsValue(S)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TFloatShortHashMap.containsValue(S)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 4 gnu.trove.map.hash.TFloatShortHashMap.containsValue(S)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 5 gnu.trove.map.hash.TFloatShortHashMap.containsValue(S)Z: I30 Branch 59 IF_ICMPNE L377 - false
   */

  @Test
  public void test24()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[2] = 1431.1052F;
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short) (-1895);
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      boolean boolean0 = tFloatShortHashMap0.containsValue((short)0);
      assertEquals(true, boolean0);
      assertEquals(2, tFloatShortHashMap0.size());
      assertEquals(17, tFloatShortHashMap0.capacity());
      assertEquals("{1431.1052=-1895, 0.0=0}", tFloatShortHashMap0.toString());
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.forEachValue(Lgnu/trove/procedure/TShortProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TFloatShortHashMap.forEachValue(Lgnu/trove/procedure/TShortProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TFloatShortHashMap.forEachValue(Lgnu/trove/procedure/TShortProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test25()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      boolean boolean0 = tFloatShortHashMap0.forEachValue((TShortProcedure) null);
      assertEquals(23, tFloatShortHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 26
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.forEachValue(Lgnu/trove/procedure/TShortProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TFloatShortHashMap.adjustOrPutValue(FSS)S: I9 Branch 72 IFGE L491 - true
   * 3 gnu.trove.map.hash.TFloatShortHashMap.adjustOrPutValue(FSS)S: I59 Branch 73 IFEQ L502 - false
   * 4 gnu.trove.map.hash.TFloatShortHashMap.forEachValue(Lgnu/trove/procedure/TShortProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 5 gnu.trove.map.hash.TFloatShortHashMap.forEachValue(Lgnu/trove/procedure/TShortProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((-1331));
      tFloatShortHashMap0.adjustOrPutValue(0.0F, (short)1387, (short)0);
      // Undeclared exception!
      try {
        tFloatShortHashMap0.forEachValue((TShortProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.transformValues(Lgnu/trove/function/TShortFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TFloatShortHashMap.transformValues(Lgnu/trove/function/TShortFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TFloatShortHashMap.transformValues(Lgnu/trove/function/TShortFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test27()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(1);
      tFloatShortHashMap0.transformValues((TShortFunction) null);
      assertEquals(0, tFloatShortHashMap0.size());
  }

  //Test case number: 28
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.transformValues(Lgnu/trove/function/TShortFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TFloatShortHashMap.transformValues(Lgnu/trove/function/TShortFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TFloatShortHashMap.transformValues(Lgnu/trove/function/TShortFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   * 4 gnu.trove.map.hash.TFloatShortHashMap.adjustOrPutValue(FSS)S: I9 Branch 72 IFGE L491 - true
   * 5 gnu.trove.map.hash.TFloatShortHashMap.adjustOrPutValue(FSS)S: I59 Branch 73 IFEQ L502 - false
   */

  @Test
  public void test28()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      tFloatShortHashMap0.adjustOrPutValue(6.6360896E8F, (short) (-1968), (short) (-1968));
      // Undeclared exception!
      try {
        tFloatShortHashMap0.transformValues((TShortFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 29
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.retainEntries(Lgnu/trove/procedure/TFloatShortProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TFloatShortHashMap.retainEntries(Lgnu/trove/procedure/TFloatShortProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TFloatShortHashMap.retainEntries(Lgnu/trove/procedure/TFloatShortProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   * 4 gnu.trove.map.hash.TFloatShortHashMap.<init>(IFFS)V: root-Branch
   * 5 gnu.trove.map.hash.TFloatShortHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 6 gnu.trove.map.hash.TFloatShortHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 7 gnu.trove.map.hash.TFloatShortHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   */

  @Test
  public void test29()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(0, (float) 0, (-401.0146F), (short)0);
      boolean boolean0 = tFloatShortHashMap0.retainEntries((TFloatShortProcedure) null);
      assertEquals("{}", tFloatShortHashMap0.toString());
      assertEquals(3, tFloatShortHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.adjustValue(FS)Z: I9 Branch 71 IFGE L477 - true
   */

  @Test
  public void test30()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[2] = 1431.1052F;
      short[] shortArray0 = new short[6];
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      boolean boolean0 = tFloatShortHashMap0.adjustValue(1431.1052F, (short)746);
      assertEquals("{1431.1052=746, 0.0=0}", tFloatShortHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 31
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.adjustOrPutValue(FSS)S: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TFloatShortHashMap.adjustOrPutValue(FSS)S: I59 Branch 73 IFEQ L502 - true
   */

  @Test
  public void test31()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      tFloatShortHashMap0.putIfAbsent((-1346.8555F), (short) (-4219));
      short short0 = tFloatShortHashMap0.adjustOrPutValue((-1346.8555F), (short)0, (short)708);
      assertEquals(false, tFloatShortHashMap0.isEmpty());
      assertEquals((short) (-4219), short0);
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   */

  @Test
  public void test32()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((int) (short)0);
      boolean boolean0 = tFloatShortHashMap0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 33
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   * 2 gnu.trove.map.hash.TFloatShortHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   */

  @Test
  public void test33()  throws Throwable  {
      float[] floatArray0 = new float[5];
      short[] shortArray0 = new short[9];
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      TFloatShortHashMap tFloatShortHashMap1 = new TFloatShortHashMap();
      boolean boolean0 = tFloatShortHashMap0.equals((Object) tFloatShortHashMap1);
      assertEquals("{0.0=0}", tFloatShortHashMap0.toString());
      assertFalse(tFloatShortHashMap1.equals(tFloatShortHashMap0));
      assertEquals(false, boolean0);
      assertEquals(23, tFloatShortHashMap0.capacity());
      assertEquals(1, tFloatShortHashMap0.size());
  }

  //Test case number: 34
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 2 gnu.trove.map.hash.TFloatShortHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 3 gnu.trove.map.hash.TFloatShortHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   * 4 gnu.trove.map.hash.TFloatShortHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test34()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap((int) (short)0);
      int int0 = tFloatShortHashMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 35
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 2 gnu.trove.map.hash.TFloatShortHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 3 gnu.trove.map.hash.TFloatShortHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 4 gnu.trove.map.hash.TFloatShortHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   */

  @Test
  public void test35()  throws Throwable  {
      float[] floatArray0 = new float[1];
      short[] shortArray0 = new short[3];
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      int int0 = tFloatShortHashMap0.hashCode();
      assertEquals(false, tFloatShortHashMap0.isEmpty());
      assertEquals("{0.0=0}", tFloatShortHashMap0.toString());
      assertEquals(7, tFloatShortHashMap0.capacity());
      assertEquals(0, int0);
  }

  //Test case number: 36
  /*
   * 14 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap$1.execute(FS)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TFloatShortHashMap.toString()Ljava/lang/String;: root-Branch
   * 3 gnu.trove.map.hash.TFloatShortHashMap.put(FS)S: root-Branch
   * 4 gnu.trove.map.hash.TFloatShortHashMap.forEachEntry(Lgnu/trove/procedure/TFloatShortProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 5 gnu.trove.map.hash.TFloatShortHashMap.forEachEntry(Lgnu/trove/procedure/TFloatShortProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 6 gnu.trove.map.hash.TFloatShortHashMap.forEachEntry(Lgnu/trove/procedure/TFloatShortProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 7 gnu.trove.map.hash.TFloatShortHashMap.forEachEntry(Lgnu/trove/procedure/TFloatShortProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 8 gnu.trove.map.hash.TFloatShortHashMap.forEachEntry(Lgnu/trove/procedure/TFloatShortProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 9 gnu.trove.map.hash.TFloatShortHashMap.<init>([F[S)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 10 gnu.trove.map.hash.TFloatShortHashMap.<init>([F[S)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 11 gnu.trove.map.hash.TFloatShortHashMap.doPut(FSI)S: I12 Branch 40 IFGE L214 - false
   * 12 gnu.trove.map.hash.TFloatShortHashMap.doPut(FSI)S: I41 Branch 41 IFEQ L221 - true
   * 13 gnu.trove.map.hash.TFloatShortHashMap$1.<init>(Lgnu/trove/map/hash/TFloatShortHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 14 gnu.trove.map.hash.TFloatShortHashMap$1.execute(FS)Z: I4 Branch 115 IFEQ L1233 - false
   */

  @Test
  public void test36()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1129.1763F);
      short[] shortArray0 = new short[8];
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap(floatArray0, shortArray0);
      String string0 = tFloatShortHashMap0.toString();
      assertEquals("{-1129.1763=0, 0.0=0}", string0);
      assertNotNull(string0);
      assertEquals(17, tFloatShortHashMap0.capacity());
      assertEquals(2, tFloatShortHashMap0.size());
  }

  //Test case number: 37
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TFloatShortHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 2 gnu.trove.map.hash.TFloatShortHashMap.setUp(I)I: root-Branch
   * 3 gnu.trove.map.hash.TFloatShortHashMap.<init>()V: root-Branch
   * 4 gnu.trove.map.hash.TFloatShortHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 5 gnu.trove.map.hash.TFloatShortHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 6 gnu.trove.map.hash.TFloatShortHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 7 gnu.trove.map.hash.TFloatShortHashMap.putIfAbsent(FS)S: I9 Branch 39 IFGE L205 - true
   * 8 gnu.trove.map.hash.TFloatShortHashMap.doPut(FSI)S: I12 Branch 40 IFGE L214 - true
   * 9 gnu.trove.map.hash.TFloatShortHashMap.doPut(FSI)S: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test37()  throws Throwable  {
      TFloatShortHashMap tFloatShortHashMap0 = new TFloatShortHashMap();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tFloatShortHashMap0.putIfAbsent((-662.6762F), (short)850);
      tFloatShortHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(false, tFloatShortHashMap0.isEmpty());
      assertEquals("{-662.6762=850}", tFloatShortHashMap0.toString());
  }
}
