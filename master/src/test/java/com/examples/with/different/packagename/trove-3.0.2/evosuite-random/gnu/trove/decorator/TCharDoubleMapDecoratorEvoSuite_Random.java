/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.decorator;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.decorator.TCharDoubleMapDecorator;
import gnu.trove.map.TCharDoubleMap;
import gnu.trove.map.hash.TCharDoubleHashMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharDoubleMapDecoratorEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap();
      TCharDoubleMapDecorator tCharDoubleMapDecorator0 = new TCharDoubleMapDecorator((TCharDoubleMap) tCharDoubleHashMap0);
      TCharDoubleHashMap tCharDoubleHashMap1 = new TCharDoubleHashMap((TCharDoubleMap) tCharDoubleHashMap0);
      TCharDoubleMapDecorator tCharDoubleMapDecorator1 = new TCharDoubleMapDecorator((TCharDoubleMap) tCharDoubleHashMap1);
      tCharDoubleMapDecorator0.toString();
      tCharDoubleMapDecorator1.isEmpty();
      int int0 = 105;
      PipedInputStream pipedInputStream0 = new PipedInputStream(int0);
      tCharDoubleMapDecorator0.entrySet();
      char char0 = '~';
      Character character0 = new Character(char0);
      double double0 = 0.0;
      Double double1 = new Double(double0);
      tCharDoubleMapDecorator1.put(character0, double1);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = '^';
      charArray0[0] = char0;
      char char1 = '';
      charArray0[1] = char1;
      char char2 = '>';
      charArray0[2] = char2;
      char char3 = '3';
      charArray0[3] = char3;
      char char4 = 'G';
      charArray0[4] = char4;
      char char5 = ':';
      charArray0[5] = char5;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) char4;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      TCharDoubleMapDecorator tCharDoubleMapDecorator0 = new TCharDoubleMapDecorator((TCharDoubleMap) tCharDoubleHashMap0);
      TCharDoubleHashMap tCharDoubleHashMap1 = (TCharDoubleHashMap)tCharDoubleMapDecorator0.getMap();
      TCharDoubleMapDecorator tCharDoubleMapDecorator1 = new TCharDoubleMapDecorator((TCharDoubleMap) tCharDoubleHashMap1);
      String string0 = "";
      URI uRI0 = URI.create(string0);
      URI uRI1 = new URI(string0);
      URI uRI2 = uRI0.resolve(uRI1);
      URI uRI3 = uRI2.normalize();
      URI uRI4 = uRI3.parseServerAuthority();
      URI uRI5 = uRI4.relativize(uRI2);
      String string1 = uRI5.getScheme();
      boolean boolean0 = tCharDoubleMapDecorator1.equals((Object) string1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      TCharDoubleMapDecorator tCharDoubleMapDecorator0 = new TCharDoubleMapDecorator();
      // Undeclared exception!
      try {
        tCharDoubleMapDecorator0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TCharDoubleMapDecorator tCharDoubleMapDecorator0 = new TCharDoubleMapDecorator();
      tCharDoubleMapDecorator0.entrySet();
      char char0 = 'u';
      int int0 = 904;
      float float0 = 537.9361F;
      double double0 = 2017.9168495428266;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int0, float0, char0, double0);
      TCharDoubleMapDecorator tCharDoubleMapDecorator1 = new TCharDoubleMapDecorator((TCharDoubleMap) tCharDoubleHashMap0);
      tCharDoubleMapDecorator1.clear();
      Character character0 = Character.valueOf(char0);
      String string0 = "g8 (abfG{:g`H";
      AbstractMap.SimpleImmutableEntry<Character, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Character, String>(character0, string0);
      abstractMap_SimpleImmutableEntry0.getValue();
      String string1 = "No free or removed slots available. Key set full?!!";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 2: g8 (abfG{:g`H:g8%20(abfG%7B:g%60H#No%20free%20or%20removed%20slots%20available.%20Key%20set%20full?!!
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TCharDoubleMapDecorator tCharDoubleMapDecorator0 = new TCharDoubleMapDecorator();
      String string0 = "s.UncQxrr";
      Character character0 = null;
      Double double0 = null;
      // Undeclared exception!
      try {
        tCharDoubleMapDecorator0.put(character0, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      String string0 = "";
      URI uRI0 = new URI(string0);
      uRI0.toASCIIString();
      TCharDoubleMap tCharDoubleMap0 = null;
      TCharDoubleHashMap tCharDoubleHashMap0 = null;
      try {
        tCharDoubleHashMap0 = new TCharDoubleHashMap(tCharDoubleMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = '=';
      charArray0[0] = char0;
      char char1 = '&';
      charArray0[1] = char1;
      char char2 = 'G';
      charArray0[2] = char2;
      char char3 = '3';
      charArray0[3] = char3;
      char char4 = 'j';
      charArray0[4] = char4;
      char char5 = '#';
      charArray0[5] = char5;
      char char6 = '#';
      charArray0[6] = char6;
      char char7 = '`';
      charArray0[7] = char7;
      char char8 = ':';
      charArray0[8] = char8;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) char7;
      double double0 = 1759.7795016660216;
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) charArray0[7];
      doubleArray0[3] = (double) charArray0[8];
      doubleArray0[4] = (double) charArray0[1];
      doubleArray0[5] = (double) charArray0[3];
      doubleArray0[6] = (double) charArray0[1];
      doubleArray0[7] = (double) char1;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      TCharDoubleMapDecorator tCharDoubleMapDecorator0 = new TCharDoubleMapDecorator((TCharDoubleMap) tCharDoubleHashMap0);
      Set<Map.Entry<Character, Double>> set0 = (Set<Map.Entry<Character, Double>>)tCharDoubleMapDecorator0.entrySet();
      assertEquals(false, set0.isEmpty());
  }

  @Test
  public void test7()  throws Throwable  {
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap();
      TCharDoubleMapDecorator tCharDoubleMapDecorator0 = new TCharDoubleMapDecorator((TCharDoubleMap) tCharDoubleHashMap0);
      char char0 = '$';
      Character character0 = Character.valueOf(char0);
      double double0 = (-1710.423326225655);
      Double double1 = new Double(double0);
      tCharDoubleMapDecorator0.put(character0, double1);
      tCharDoubleMapDecorator0.getMap();
      String string0 = tCharDoubleMapDecorator0.toString();
      assertEquals(false, tCharDoubleMapDecorator0.isEmpty());
      assertEquals("{$=-1710.423326225655}", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      TCharDoubleMapDecorator tCharDoubleMapDecorator0 = new TCharDoubleMapDecorator();
      TCharDoubleMap tCharDoubleMap0 = tCharDoubleMapDecorator0.getMap();
      TCharDoubleMapDecorator tCharDoubleMapDecorator1 = new TCharDoubleMapDecorator(tCharDoubleMap0);
      tCharDoubleMapDecorator1.getMap();
      AbstractMap.SimpleEntry<TCharDoubleHashMap, String> abstractMap_SimpleEntry0 = null;
      Object object0 = null;
      AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleEntry<TCharDoubleHashMap, String>, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleEntry<TCharDoubleHashMap, String>, Object>(abstractMap_SimpleEntry0, object0);
      abstractMap_SimpleImmutableEntry0.getKey();
      char char0 = 'm';
      Character character0 = new Character(char0);
      Double double0 = new Double((double) character0);
      // Undeclared exception!
      try {
        tCharDoubleMapDecorator1.put(character0, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-1);
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(int0);
      TCharDoubleMapDecorator tCharDoubleMapDecorator0 = new TCharDoubleMapDecorator((TCharDoubleMap) tCharDoubleHashMap0);
      String string0 = "Factor must be >= 0: ";
      File file0 = new File(string0, string0);
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(file0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // Factor must be >= 0: 
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TCharDoubleMapDecorator tCharDoubleMapDecorator0 = new TCharDoubleMapDecorator();
      String string0 = "&&El\"jaUg/d";
      String string1 = "begin index can not be < 0";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string1, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: &&El\"jaUg/d://&&El%22jaUg%2Fdbegin%20index%20can%20not%20be%20%3C%200?&&El%22jaUg/d#&&El%22jaUg/d
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TCharDoubleMapDecorator tCharDoubleMapDecorator0 = new TCharDoubleMapDecorator();
      char char0 = '5';
      Character character0 = Character.valueOf(char0);
      Character.isMirrored((int) char0);
      Double double0 = new Double((double) char0);
      // Undeclared exception!
      try {
        tCharDoubleMapDecorator0.put(character0, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TCharDoubleMapDecorator tCharDoubleMapDecorator0 = new TCharDoubleMapDecorator();
      char char0 = 'P';
      Character character0 = new Character(char0);
      char char1 = 's';
      Character character1 = Character.valueOf(char1);
      Double double0 = new Double((double) character0);
      // Undeclared exception!
      try {
        tCharDoubleMapDecorator0.put(character1, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = '-';
      charArray0[0] = char0;
      char char1 = '5';
      charArray0[1] = char1;
      char char2 = '5';
      charArray0[2] = char2;
      char char3 = ']';
      charArray0[3] = char3;
      double double0 = (-1619.9820588497882);
      Double double1 = Double.valueOf(double0);
      String string0 = File.pathSeparator;
      Integer integer0 = null;
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>((Object) string0, integer0);
      AbstractMap.SimpleImmutableEntry<Double, AbstractMap.SimpleEntry<Object, Integer>> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, AbstractMap.SimpleEntry<Object, Integer>>(double1, abstractMap_SimpleEntry0);
      Locale locale0 = Locale.FRENCH;
      Locale locale1 = Locale.KOREA;
      String string1 = locale0.getDisplayName(locale1);
      abstractMap_SimpleImmutableEntry0.equals((Object) string1);
      char char4 = 'S';
      charArray0[4] = char4;
      char char5 = '(';
      charArray0[5] = char5;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) charArray0[0];
      doubleArray0[1] = (double) char1;
      double double2 = 473.9980531973679;
      doubleArray0[2] = double2;
      double double3 = (-494.633567611257);
      doubleArray0[3] = double3;
      doubleArray0[4] = (double) char0;
      doubleArray0[5] = (double) char0;
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      TCharDoubleMapDecorator tCharDoubleMapDecorator0 = new TCharDoubleMapDecorator((TCharDoubleMap) tCharDoubleHashMap0);
      assertEquals("{S=45.0, -=45.0, ]=-494.633567611257, (=45.0, 5=473.9980531973679}", tCharDoubleMapDecorator0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = 'B';
      charArray0[0] = char0;
      char char1 = 'z';
      charArray0[1] = char1;
      char char2 = '*';
      charArray0[2] = char2;
      char char3 = '&';
      charArray0[3] = char3;
      char char4 = 'V';
      charArray0[4] = char4;
      char char5 = '!';
      charArray0[5] = char5;
      char char6 = 'K';
      charArray0[6] = char6;
      char char7 = ')';
      charArray0[7] = char7;
      char char8 = 'w';
      charArray0[8] = char8;
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) charArray0[6];
      doubleArray0[1] = (double) char4;
      doubleArray0[2] = (double) char8;
      doubleArray0[3] = (double) char8;
      doubleArray0[4] = (double) char8;
      doubleArray0[5] = (double) charArray0[7];
      doubleArray0[6] = (double) charArray0[8];
      doubleArray0[7] = (double) char0;
      doubleArray0[8] = (double) char5;
      doubleArray0[9] = (double) charArray0[4];
      TCharDoubleHashMap tCharDoubleHashMap0 = new TCharDoubleHashMap(charArray0, doubleArray0);
      TCharDoubleMapDecorator tCharDoubleMapDecorator0 = new TCharDoubleMapDecorator((TCharDoubleMap) tCharDoubleHashMap0);
      assertEquals(false, tCharDoubleMapDecorator0.isEmpty());
  }
}
