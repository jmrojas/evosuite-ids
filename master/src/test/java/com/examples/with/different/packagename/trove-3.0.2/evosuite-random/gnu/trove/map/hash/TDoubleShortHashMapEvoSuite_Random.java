/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TShortCollection;
import gnu.trove.map.TDoubleShortMap;
import gnu.trove.map.hash.TDoubleShortHashMap;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleShortHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-1);
      TDoubleShortMap tDoubleShortMap0 = null;
      TDoubleShortHashMap tDoubleShortHashMap0 = null;
      try {
        tDoubleShortHashMap0 = new TDoubleShortHashMap(tDoubleShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      double double1 = (-481.41117420790556);
      doubleArray0[1] = double1;
      double double2 = 398.7450517837459;
      doubleArray0[2] = double2;
      double double3 = (-1066.6358752790425);
      doubleArray0[3] = double3;
      short[] shortArray0 = new short[8];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)386;
      shortArray0[1] = short1;
      short short2 = (short) (-1);
      shortArray0[2] = short2;
      short short3 = (short)10;
      shortArray0[3] = short3;
      short short4 = (short)745;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)1441;
      shortArray0[6] = short6;
      short short7 = (short)0;
      shortArray0[7] = short7;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap((TDoubleShortMap) tDoubleShortHashMap0);
      ObjectInput objectInput0 = null;
      // Undeclared exception!
      try {
        tDoubleShortHashMap1.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 1;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      double double0 = (-1013.3595811214112);
      doubleArray0[7] = double0;
      double[] doubleArray1 = tDoubleShortHashMap0.keys(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 2879;
      double double0 = 0.0;
      short short0 = (short)1;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0, (float) int0, double0, short0);
      OutputStream outputStream0 = null;
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = (-740.9615643743246);
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = (-1992.575943573147);
      doubleArray0[3] = double3;
      double double4 = 3.7177788224990653;
      doubleArray0[4] = double4;
      double double5 = 0.0;
      doubleArray0[5] = double5;
      double double6 = (-204.90275949742414);
      doubleArray0[6] = double6;
      double double7 = (-1064.129505631256);
      doubleArray0[7] = double7;
      short[] shortArray0 = new short[5];
      short short0 = (short) (-1766);
      shortArray0[0] = short0;
      short short1 = (short)441;
      shortArray0[1] = short1;
      short short2 = (short)794;
      shortArray0[2] = short2;
      short short3 = (short) (-736);
      shortArray0[3] = short3;
      short short4 = (short)184;
      shortArray0[4] = short4;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap((TDoubleShortMap) tDoubleShortHashMap0);
      assertTrue(tDoubleShortHashMap0.equals(tDoubleShortHashMap1));
      assertEquals(0.0, tDoubleShortHashMap1.getNoEntryKey(), 0.01D);
      assertEquals("{-740.9615643743246=441, 3.7177788224990653=184, -1992.575943573147=-736, 0.0=794}", tDoubleShortHashMap0.toString());
      assertEquals("{-1992.575943573147=-736, -740.9615643743246=441, 3.7177788224990653=184, 0.0=794}", tDoubleShortHashMap1.toString());
      
      int int0 = 1158;
      TDoubleShortHashMap tDoubleShortHashMap2 = new TDoubleShortHashMap(int0);
      tDoubleShortHashMap2.remove((double) int0);
      assertFalse(tDoubleShortHashMap2.equals(tDoubleShortHashMap0));
      assertEquals(true, tDoubleShortHashMap2.isEmpty());
      assertFalse(tDoubleShortHashMap2.equals(tDoubleShortHashMap1));
  }

  @Test
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = (-1.0);
      doubleArray0[1] = double1;
      short[] shortArray0 = new short[9];
      short short0 = (short)808;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)263;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)919;
      shortArray0[7] = short7;
      short short8 = (short)388;
      shortArray0[8] = short8;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      short[] shortArray1 = tDoubleShortHashMap0.values();
      assertNotNull(shortArray1);
      
      double double2 = (-1271.735623819555);
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = 0.0;
      doubleArray0[5] = double5;
      double double6 = 1.0;
      doubleArray0[6] = double6;
      double double7 = 1942.801213066089;
      doubleArray0[7] = double7;
      double double8 = 1004.4143864140631;
      doubleArray0[8] = double8;
      double double9 = (-1184.3291108788421);
      doubleArray0[9] = double9;
      short[] shortArray2 = new short[1];
      short short9 = (short) (-1935);
      shortArray2[0] = short9;
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap(doubleArray0, shortArray2);
      double double10 = 311.57494406973404;
      short short10 = (short)277;
      short short11 = tDoubleShortHashMap1.putIfAbsent(double10, short10);
      assertEquals(2, tDoubleShortHashMap1.size());
      assertEquals((short)0, short11);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 1277;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      short[] shortArray0 = new short[9];
      short short0 = (short) (-44);
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)35;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short) (-300);
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)379;
      shortArray0[7] = short7;
      short short8 = (short)141;
      shortArray0[8] = short8;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      tDoubleShortHashMap0.trimToSize();
      int int1 = 1743;
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap(int1);
      boolean boolean0 = true;
      tDoubleShortHashMap1.reenableAutoCompaction(boolean0);
      float float0 = 458.09854F;
      TDoubleShortMap tDoubleShortMap0 = null;
      TDoubleShortHashMap tDoubleShortHashMap2 = null;
      try {
        tDoubleShortHashMap2 = new TDoubleShortHashMap(tDoubleShortMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      double double0 = 0.0;
      tDoubleShortHashMap0.containsKey(double0);
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap();
      int int0 = (-421);
      tDoubleShortHashMap1.ensureCapacity(int0);
      assertEquals(23, tDoubleShortHashMap1.capacity());
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 46327;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      tDoubleShortHashMap0.iterator();
      assertEquals("{}", tDoubleShortHashMap0.toString());
      
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap(int0);
      String string0 = tDoubleShortHashMap1.toString();
      assertNotNull(string0);
      
      int int1 = 193;
      TDoubleShortHashMap tDoubleShortHashMap2 = new TDoubleShortHashMap(int1, int1);
      TDoubleShortHashMap tDoubleShortHashMap3 = new TDoubleShortHashMap((TDoubleShortMap) tDoubleShortHashMap2);
      tDoubleShortHashMap3.keys(tDoubleShortHashMap2._set);
      double double0 = 1.0;
      short short0 = (short) (-915);
      short short1 = tDoubleShortHashMap2.adjustOrPutValue(double0, short0, short0);
      AbstractMap.SimpleImmutableEntry<Short, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Short, Double>((Short) short1, (Double) double0);
      assertEquals(false, tDoubleShortHashMap2.isEmpty());
      
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: {}:%7B%7D#%7B%7D
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap();
      double double0 = 0.0;
      tDoubleShortHashMap0.valueCollection();
      int int0 = tDoubleShortHashMap0.capacity();
      int int1 = tDoubleShortHashMap0.hashCode();
      short short0 = (short)789;
      tDoubleShortHashMap0.put(double0, short0);
      double double1 = 159.85139225026612;
      tDoubleShortHashMap0.containsValue(short0);
      double[] doubleArray0 = new double[3];
      double double2 = 0.0;
      doubleArray0[0] = double2;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = double0;
      tDoubleShortHashMap0._set = doubleArray0;
      double[] doubleArray1 = tDoubleShortHashMap0._set;
      short short1 = (short) (-1521);
      tDoubleShortHashMap0.valueCollection();
      tDoubleShortHashMap0.adjustValue(double1, short1);
      int int2 = (-923);
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap(int2);
      tDoubleShortHashMap1.putAll((TDoubleShortMap) tDoubleShortHashMap0);
      double double3 = 2021.18949874502;
      int int3 = tDoubleShortHashMap0.capacity();
      tDoubleShortHashMap1.increment(double3);
      double double4 = 0.0;
      tDoubleShortHashMap1.increment(double4);
      tDoubleShortHashMap1.get((double) int1);
      tDoubleShortHashMap0.capacity();
      double double5 = (-1.0);
      TDoubleShortHashMap tDoubleShortHashMap2 = new TDoubleShortHashMap((int) short1, (float) int3, double5, short1);
      tDoubleShortHashMap1.putAll((TDoubleShortMap) tDoubleShortHashMap0);
      assertEquals(1, tDoubleShortHashMap0.size());
      assertTrue(tDoubleShortHashMap0.equals(tDoubleShortHashMap1));
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      short short0 = (short)1820;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0, (float) int0, (double) int0, short0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) short0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) short0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) short0;
      doubleArray0[7] = (double) int0;
      tDoubleShortHashMap0._set = doubleArray0;
      assertSame(tDoubleShortHashMap0._set, doubleArray0);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-1);
      float float0 = 0.0F;
      double double0 = (-1692.4578364503266);
      float float1 = 0.0F;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0);
      int int1 = Integer.MAX_VALUE;
      String string0 = "";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1674;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0);
      tDoubleShortHashMap0.iterator();
      tDoubleShortHashMap0.setAutoCompactionFactor((float) int0);
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap((TDoubleShortMap) tDoubleShortHashMap0);
      double double0 = 2.0;
      tDoubleShortHashMap0.putAll((TDoubleShortMap) tDoubleShortHashMap1);
      tDoubleShortHashMap1.increment(double0);
      TDoubleShortHashMap tDoubleShortHashMap2 = new TDoubleShortHashMap();
      assertEquals(23, tDoubleShortHashMap2.capacity());
      
      tDoubleShortHashMap2.compact();
      tDoubleShortHashMap2.getAutoCompactionFactor();
      tDoubleShortHashMap2.clear();
      int int1 = tDoubleShortHashMap2.capacity();
      assertEquals(3, tDoubleShortHashMap2.capacity());
      assertEquals(3, int1);
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 1532.3314504528482;
      doubleArray0[0] = double0;
      int int0 = 1659;
      float float0 = 10.0F;
      double double1 = 0.0;
      short short0 = (short) (-1737);
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(int0, float0, double1, short0);
      tDoubleShortHashMap0.keySet();
      doubleArray0[1] = double0;
      doubleArray0[0] = double0;
      double double2 = 0.0;
      doubleArray0[1] = double2;
      short[] shortArray0 = new short[5];
      short short1 = (short)1093;
      shortArray0[0] = short1;
      short short2 = (short)0;
      shortArray0[1] = short2;
      short short3 = (short)1285;
      shortArray0[2] = short3;
      short short4 = (short)0;
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      shortArray0[0] = short1;
      shortArray0[1] = short3;
      shortArray0[2] = short4;
      shortArray0[3] = short1;
      shortArray0[4] = short2;
      shortArray0[3] = short4;
      short short5 = (short) (-698);
      shortArray0[4] = short5;
      TDoubleShortHashMap tDoubleShortHashMap2 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      tDoubleShortHashMap2._set = doubleArray0;
      assertEquals("{1532.3314504528482=1285}", tDoubleShortHashMap2.toString());
      assertEquals(2, tDoubleShortHashMap2.size());
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      doubleArray0[0] = double0;
      short[] shortArray0 = new short[7];
      short short0 = (short) (-325);
      shortArray0[0] = short0;
      short short1 = (short)1475;
      shortArray0[1] = short1;
      short short2 = (short)1368;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)788;
      shortArray0[5] = short5;
      short short6 = (short) (-1537);
      shortArray0[6] = short6;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      tDoubleShortHashMap0.iterator();
      TDoubleShortHashMap tDoubleShortHashMap1 = new TDoubleShortHashMap((TDoubleShortMap) tDoubleShortHashMap0);
      assertEquals("{0.0=-325}", tDoubleShortHashMap0.toString());
      assertEquals(1, tDoubleShortHashMap0.size());
      assertEquals("{0.0=-325}", tDoubleShortHashMap1.toString());
      assertEquals(23, tDoubleShortHashMap1.capacity());
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 847.1856209262533;
      doubleArray0[0] = double0;
      double double1 = 1593.5817566526264;
      doubleArray0[1] = double1;
      double double2 = 1537.009474250416;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = 1.0;
      doubleArray0[4] = double4;
      double double5 = (-831.5292986854836);
      doubleArray0[5] = double5;
      double double6 = 1.0;
      doubleArray0[6] = double6;
      double double7 = (-739.8660748279564);
      doubleArray0[7] = double7;
      short[] shortArray0 = new short[1];
      short short0 = (short)0;
      shortArray0[0] = short0;
      TDoubleShortHashMap tDoubleShortHashMap0 = new TDoubleShortHashMap(doubleArray0, shortArray0);
      TShortCollection tShortCollection0 = tDoubleShortHashMap0.valueCollection();
      assertEquals("{847.1856209262533=0}", tDoubleShortHashMap0.toString());
      assertEquals(17, tDoubleShortHashMap0.capacity());
      assertEquals(false, tShortCollection0.isEmpty());
  }
}
