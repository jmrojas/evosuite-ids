/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TDoubleLongMap;
import gnu.trove.map.hash.TDoubleLongHashMap;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleLongHashEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-924.884581981993);
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = (-1.0);
      doubleArray0[2] = double2;
      double double3 = (-503.3053562317374);
      doubleArray0[3] = double3;
      double double4 = 1.0;
      doubleArray0[4] = double4;
      double double5 = 0.0;
      doubleArray0[5] = double5;
      long[] longArray0 = new long[4];
      long long0 = 0L;
      longArray0[0] = long0;
      long long1 = (-285L);
      longArray0[1] = long1;
      long long2 = 1L;
      longArray0[2] = long2;
      long long3 = 0L;
      longArray0[3] = long3;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(doubleArray0, longArray0);
      assertEquals(0L, tDoubleLongHashMap0.getNoEntryValue());
      assertEquals("{-924.884581981993=0, -1.0=1, -503.3053562317374=0, 0.0=-285}", tDoubleLongHashMap0.toString());
      assertEquals(4, tDoubleLongHashMap0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-1259);
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap();
      tDoubleLongHashMap0.keys();
      double double0 = 0.0;
      int int1 = 0;
      tDoubleLongHashMap0.ensureCapacity(int1);
      long long0 = (-620L);
      TDoubleLongHashMap tDoubleLongHashMap1 = new TDoubleLongHashMap(int0, (float) int0, double0, long0);
      boolean boolean0 = false;
      tDoubleLongHashMap0.compact();
      tDoubleLongHashMap1.reenableAutoCompaction(boolean0);
      double double1 = (-1423.3930957866294);
      double double2 = 1.0;
      tDoubleLongHashMap1.put(double2, (long) int0);
      tDoubleLongHashMap1.contains(double0);
      tDoubleLongHashMap1.contains(double1);
      tDoubleLongHashMap1.compact();
      String string0 = "";
      tDoubleLongHashMap1.getNoEntryKey();
      File file0 = new File(string0);
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         //  (No such file or directory)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 386;
      double double0 = 0.0;
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = double0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = double0;
      doubleArray0[8] = (double) int0;
      doubleArray0[9] = (double) int0;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(doubleArray0, longArray0);
      float float0 = (-1641.9917F);
      // Undeclared exception!
      try {
        tDoubleLongHashMap0.setAutoCompactionFactor(float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -1641.9917
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-830.8919728956917);
      doubleArray0[0] = double0;
      double double1 = 1562.9117381358315;
      doubleArray0[1] = double1;
      double double2 = 606.733918854586;
      doubleArray0[2] = double2;
      double double3 = 33.49837399719866;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = (-102.62604730940218);
      doubleArray0[5] = double5;
      double double6 = (-1320.574573043117);
      doubleArray0[6] = double6;
      double double7 = (-700.1317814873813);
      doubleArray0[7] = double7;
      long[] longArray0 = new long[4];
      long long0 = (-411L);
      longArray0[0] = long0;
      long long1 = (-24L);
      longArray0[1] = long1;
      long long2 = (-1378L);
      longArray0[2] = long2;
      long long3 = (-735L);
      longArray0[3] = long3;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(doubleArray0, longArray0);
      tDoubleLongHashMap0.size();
      assertEquals(0L, tDoubleLongHashMap0.getNoEntryValue());
      assertEquals("{606.733918854586=-1378, 1562.9117381358315=-24, 33.49837399719866=-735, -830.8919728956917=-411}", tDoubleLongHashMap0.toString());
      assertEquals(0.0, tDoubleLongHashMap0.getNoEntryKey(), 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-1425);
      float float0 = 994.3797F;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(int0, float0);
      assertEquals(0.0, tDoubleLongHashMap0.getNoEntryKey(), 0.01D);
      assertEquals(0L, tDoubleLongHashMap0.getNoEntryValue());
  }

//   @Test
//   public void test5()  throws Throwable  {
//       double[] doubleArray0 = new double[7];
//       double double0 = 1095.7435194208067;
//       doubleArray0[0] = double0;
//       double double1 = 0.0;
//       doubleArray0[1] = double1;
//       double double2 = 0.0;
//       doubleArray0[2] = double2;
//       double double3 = 0.0;
//       doubleArray0[3] = double3;
//       double double4 = 0.0;
//       doubleArray0[4] = double4;
//       double double5 = 448.0071151218157;
//       doubleArray0[5] = double5;
//       double double6 = Double.POSITIVE_INFINITY;
//       doubleArray0[6] = double6;
//       long[] longArray0 = new long[9];
//       long long0 = (-299L);
//       longArray0[0] = long0;
//       long long1 = 1392L;
//       longArray0[1] = long1;
//       long long2 = 0L;
//       longArray0[2] = long2;
//       long long3 = 827L;
//       longArray0[3] = long3;
//       long long4 = (-9223372036854775808L);
//       longArray0[4] = long4;
//       long long5 = 260L;
//       longArray0[5] = long5;
//       long long6 = 0L;
//       longArray0[6] = long6;
//       long long7 = 0L;
//       longArray0[7] = long7;
//       long long8 = 1L;
//       longArray0[8] = long8;
//       TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(doubleArray0, longArray0);
//       double double7 = 1.0;
//       tDoubleLongHashMap0.increment(double7);
//       assertEquals("{1095.7435194208067=-299, 448.0071151218157=260, 0.0=0}", tDoubleLongHashMap0.toString());
//       assertEquals(0.0, tDoubleLongHashMap0.getNoEntryKey(), 0.01D);
//       assertEquals(3, tDoubleLongHashMap0.size());
//       
//       TDoubleLongHashMap tDoubleLongHashMap1 = new TDoubleLongHashMap();
//       assertEquals(0.0, tDoubleLongHashMap1.getNoEntryKey(), 0.01D);
//       assertEquals(0L, tDoubleLongHashMap1.getNoEntryValue());
//   }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-1586);
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(int0, int0);
      double double0 = 1.0;
      long long0 = 172L;
      boolean boolean0 = tDoubleLongHashMap0.adjustValue(double0, long0);
      assertEquals(0L, tDoubleLongHashMap0.getNoEntryValue());
      assertEquals(0.0, tDoubleLongHashMap0.getNoEntryKey(), 0.01D);
      assertEquals(false, boolean0);
      
      int int1 = (-1879);
      double double1 = (-1.0);
      TDoubleLongHashMap tDoubleLongHashMap1 = new TDoubleLongHashMap(int1, (float) int1, double1, (long) int1);
      ObjectInput objectInput0 = null;
      String string0 = tDoubleLongHashMap1.toString();
      assertNotNull(string0);
      
      // Undeclared exception!
      try {
        tDoubleLongHashMap1.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 33;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(int0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tDoubleLongHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      int int1 = Integer.MAX_VALUE;
      TDoubleLongHashMap tDoubleLongHashMap1 = new TDoubleLongHashMap(int1);
      int int2 = (-842);
      ByteArrayOutputStream byteArrayOutputStream1 = null;
      try {
        byteArrayOutputStream1 = new ByteArrayOutputStream(int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -842
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 1502;
      int int1 = (-116);
      float float0 = (-821.948F);
      double double0 = 1.0;
      long long0 = (-1L);
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(int1, float0, double0, long0);
      tDoubleLongHashMap0.getAutoCompactionFactor();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream((InputStream) pipedInputStream0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 228;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(int0, int0);
      double double0 = (-1.0);
      long long0 = tDoubleLongHashMap0.get(double0);
      assertEquals(0L, long0);
      
      tDoubleLongHashMap0.size();
      assertEquals(0.0, tDoubleLongHashMap0.getNoEntryKey(), 0.01D);
      assertEquals(0L, tDoubleLongHashMap0.getNoEntryValue());
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 1;
      double double0 = (-601.5395701869008);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = double0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = double0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = double0;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(doubleArray0, longArray0);
      TDoubleLongHashMap tDoubleLongHashMap1 = new TDoubleLongHashMap(int0, (float) int0, double0, (long) int0);
      double double1 = 687.7801427360837;
      long long0 = tDoubleLongHashMap1.putIfAbsent(double1, (long) int0);
      assertEquals(1, tDoubleLongHashMap1.size());
      assertEquals(1L, long0);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 1996;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      double double0 = 1356.9312423095066;
      doubleArray0[4] = double0;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      longArray0[6] = (long) int0;
      float float0 = (-876.77313F);
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(int0, float0, (double) longArray0[1], longArray0[6]);
      long long0 = 0L;
      long long1 = tDoubleLongHashMap0.putIfAbsent((double) longArray0[5], long0);
      assertEquals(1, tDoubleLongHashMap0.size());
      
      TDoubleLongHashMap tDoubleLongHashMap1 = new TDoubleLongHashMap(doubleArray0, longArray0);
      float float1 = 540.86975F;
      double double1 = 0.0;
      long long2 = 1L;
      TDoubleLongHashMap tDoubleLongHashMap2 = new TDoubleLongHashMap(int0, float1, double1, long2);
      assertFalse(long2 == long1);
  }

//   @Test
//   public void test12()  throws Throwable  {
//       int int0 = (-1);
//       TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap();
//       byte[] byteArray0 = new byte[2];
//       byte byte0 = (byte) (-47);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte) (-62);
//       byteArray0[1] = byte1;
//       tDoubleLongHashMap0._states = byteArray0;
//       TDoubleLongHashMap tDoubleLongHashMap1 = new TDoubleLongHashMap(int0);
//       TDoubleLongHashMap tDoubleLongHashMap2 = new TDoubleLongHashMap();
//       int int1 = 2;
//       TDoubleLongHashMap tDoubleLongHashMap3 = new TDoubleLongHashMap(int1);
//       double double0 = 1311.5894125657771;
//       tDoubleLongHashMap1.keys();
//       long long0 = tDoubleLongHashMap1.get(double0);
//       tDoubleLongHashMap1.containsValue(long0);
//       tDoubleLongHashMap1.setAutoCompactionFactor((float) long0);
//       assertEquals(0.0F, tDoubleLongHashMap1.getAutoCompactionFactor(), 0.01F);
//       assertEquals(0.0, tDoubleLongHashMap1.getNoEntryKey(), 0.01D);
//   }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 860;
      float float0 = 1875.652F;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(int0, float0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tDoubleLongHashMap0._states);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) byteArrayInputStream0, int0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) bufferedInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream((InputStream) dataInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) bufferedInputStream1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-1351);
      float float0 = 1852.2552F;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(int0, float0, (double) float0, (long) int0);
      OutputStream outputStream0 = null;
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) int0;
      long[] longArray1 = tDoubleLongHashMap0.values(longArray0);
      assertEquals(23, tDoubleLongHashMap0.capacity());
      assertNotNull(longArray1);
      
      tDoubleLongHashMap0.trimToSize();
      int int1 = (-503);
      double double0 = (-963.1810968607841);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int1;
      double double1 = 0.0;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      tDoubleLongHashMap0.keys(doubleArray0);
      float float0 = 1.0F;
      tDoubleLongHashMap0.values(longArray1);
      long long0 = (-1097L);
      tDoubleLongHashMap0.clear();
      TDoubleLongHashMap tDoubleLongHashMap1 = new TDoubleLongHashMap(int1, float0, (double) int0, long0);
      double double2 = (-1926.4423594056193);
      tDoubleLongHashMap1.containsValue(longArray0[0]);
      tDoubleLongHashMap1.containsKey(double2);
      long long1 = (-1L);
      TDoubleLongHashMap tDoubleLongHashMap2 = new TDoubleLongHashMap(int1, (float) int0, double0, long1);
      tDoubleLongHashMap2.getNoEntryKey();
      TDoubleLongHashMap tDoubleLongHashMap3 = new TDoubleLongHashMap(int0);
      long long2 = tDoubleLongHashMap3.remove((double) long0);
      tDoubleLongHashMap3.setAutoCompactionFactor((float) int0);
      long[] longArray2 = new long[8];
      longArray2[0] = long2;
      longArray2[1] = long0;
      longArray2[2] = (long) int1;
      longArray2[3] = (long) int0;
      longArray2[4] = long1;
      longArray2[5] = long2;
      longArray2[6] = long0;
      longArray2[7] = long1;
      tDoubleLongHashMap0.values(longArray2);
      tDoubleLongHashMap2.toString();
      TDoubleLongHashMap tDoubleLongHashMap4 = new TDoubleLongHashMap();
      double double3 = 0.0;
      long long3 = (-312L);
      tDoubleLongHashMap4.putIfAbsent(double3, long3);
      tDoubleLongHashMap2.toString();
      assertFalse(tDoubleLongHashMap2.equals(tDoubleLongHashMap4));
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 1020;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      long[] longArray0 = new long[10];
      longArray0[0] = (long) int0;
      long long0 = 337L;
      longArray0[1] = long0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      longArray0[6] = (long) int0;
      longArray0[7] = (long) int0;
      longArray0[8] = (long) int0;
      longArray0[9] = (long) int0;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(doubleArray0, longArray0);
      assertEquals(false, tDoubleLongHashMap0.isEmpty());
      
      tDoubleLongHashMap0.clear();
      TDoubleLongHashMap tDoubleLongHashMap1 = new TDoubleLongHashMap((TDoubleLongMap) tDoubleLongHashMap0);
      double double0 = Double.NEGATIVE_INFINITY;
      tDoubleLongHashMap1.contains(double0);
      float float0 = (-342.13007F);
      TDoubleLongHashMap tDoubleLongHashMap2 = new TDoubleLongHashMap(int0, float0);
      double double1 = 0.0;
      tDoubleLongHashMap2.contains(double1);
      tDoubleLongHashMap2.capacity();
      double double2 = 1214.324744537914;
      tDoubleLongHashMap2.trimToSize();
      double double3 = Double.NEGATIVE_INFINITY;
      tDoubleLongHashMap2.get(double3);
      tDoubleLongHashMap2.contains(double2);
      tDoubleLongHashMap2.compact();
      tDoubleLongHashMap2.tempDisableAutoCompaction();
      assertEquals(0L, tDoubleLongHashMap2.getNoEntryValue());
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 0;
      float float0 = 1644.2343F;
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(int0, float0);
      double double0 = (-1135.2710373550203);
      tDoubleLongHashMap0.contains(double0);
      double double1 = 1.0;
      boolean boolean0 = true;
      tDoubleLongHashMap0.reenableAutoCompaction(boolean0);
      InputStream inputStream0 = null;
      double double2 = (-363.38544409056857);
      tDoubleLongHashMap0.remove(double2);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = (-1969);
      float float0 = (-300.4897F);
      TDoubleLongHashMap tDoubleLongHashMap0 = new TDoubleLongHashMap(int0, float0);
      double[] doubleArray0 = tDoubleLongHashMap0.keys();
      assertNotNull(doubleArray0);
      assertEquals(0L, tDoubleLongHashMap0.getNoEntryValue());
      assertEquals(0.0, tDoubleLongHashMap0.getNoEntryKey(), 0.01D);
  }
}
