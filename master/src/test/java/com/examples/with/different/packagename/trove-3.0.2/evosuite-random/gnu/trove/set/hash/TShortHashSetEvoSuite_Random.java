/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.set.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TShortCollection;
import gnu.trove.impl.sync.TSynchronizedShortSet;
import gnu.trove.list.array.TShortArrayList;
import gnu.trove.set.TShortSet;
import gnu.trove.set.hash.TShortHashSet;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.RandomAccessFile;
import java.util.Collection;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortHashSetEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short)1;
      shortArray0[0] = short0;
      short short1 = (short)1286;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)10;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)1;
      shortArray0[6] = short6;
      short short7 = (short) (-1468);
      shortArray0[7] = short7;
      short short8 = (short)491;
      shortArray0[8] = short8;
      short short9 = (short)622;
      shortArray0[9] = short9;
      TShortHashSet tShortHashSet0 = new TShortHashSet(shortArray0);
      String string0 = "YlPCV%gzr#ND\\";
      File file0 = new File(string0, string0);
      File file1 = file0.getParentFile();
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(file1, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"YlPCV%gzr#ND\\\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TShortHashSet tShortHashSet0 = new TShortHashSet();
      short[] shortArray0 = new short[9];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short) (-1437);
      shortArray0[1] = short1;
      short short2 = (short) (-27081);
      shortArray0[2] = short2;
      short short3 = (short)182;
      shortArray0[3] = short3;
      short short4 = (short)11973;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short) (-602);
      shortArray0[6] = short6;
      short short7 = (short)760;
      shortArray0[7] = short7;
      short short8 = (short)1243;
      shortArray0[8] = short8;
      tShortHashSet0._set = shortArray0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TShortSet tShortSet0 = null;
      Locale locale0 = Locale.TAIWAN;
      String string0 = locale0.getDisplayScript();
      TSynchronizedShortSet tSynchronizedShortSet0 = new TSynchronizedShortSet(tShortSet0, (Object) string0);
      TShortHashSet tShortHashSet0 = null;
      try {
        tShortHashSet0 = new TShortHashSet((TShortCollection) tSynchronizedShortSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 231823147;
      int int1 = (-656);
      TShortCollection tShortCollection0 = null;
      int int2 = (-658);
      TShortHashSet tShortHashSet0 = new TShortHashSet(int2, int2);
      short[] shortArray0 = new short[8];
      short short0 = (short)1283;
      shortArray0[0] = short0;
      short short1 = (short)1224;
      shortArray0[1] = short1;
      short short2 = (short)156;
      shortArray0[2] = short2;
      short short3 = (short)1923;
      shortArray0[3] = short3;
      short short4 = (short)10;
      shortArray0[4] = short4;
      short short5 = (short)1870;
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)805;
      shortArray0[7] = short7;
      tShortHashSet0._set = shortArray0;
      TShortHashSet tShortHashSet1 = null;
      try {
        tShortHashSet1 = new TShortHashSet(tShortCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 1625;
      float float0 = 10.0F;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0, float0);
      tShortHashSet0.capacity();
      int int1 = 0;
      float float1 = 0.0F;
      TShortHashSet tShortHashSet1 = new TShortHashSet(int1, float1);
      ObjectInput objectInput0 = null;
      // Undeclared exception!
      try {
        tShortHashSet1.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short)1361;
      shortArray0[0] = short0;
      TShortHashSet tShortHashSet0 = new TShortHashSet(shortArray0);
      short[] shortArray1 = tShortHashSet0.toArray();
      assertEquals("{1361}", tShortHashSet0.toString());
      assertNotNull(shortArray1);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 12203;
      short short0 = (short)0;
      short[] shortArray0 = new short[10];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      shortArray0[7] = short0;
      shortArray0[8] = short0;
      shortArray0[9] = short0;
      TShortHashSet tShortHashSet0 = new TShortHashSet(shortArray0);
      tShortHashSet0.setAutoCompactionFactor((float) shortArray0[2]);
      assertEquals(1, tShortHashSet0.size());
      assertEquals("{0}", tShortHashSet0.toString());
      
      TShortHashSet tShortHashSet1 = new TShortHashSet(int0, (float) int0, short0);
      int int1 = tShortHashSet1.hashCode();
      assertEquals(0, int1);
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 18;
      short[] shortArray0 = new short[7];
      short short0 = (short)748;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short) (-1899);
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)1438;
      shortArray0[4] = short4;
      short short5 = (short)1812;
      shortArray0[5] = short5;
      int int1 = 0;
      float float0 = 10.0F;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int1, float0, shortArray0[5]);
      tShortHashSet0.add(short4);
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)135;
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0, short7);
      TShortArrayList tShortArrayList1 = new TShortArrayList((TShortCollection) tShortArrayList0);
      int int2 = 1809;
      // Undeclared exception!
      try {
        tShortArrayList1.subList((int) shortArray0[6], int2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // end index < 7
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-1);
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0);
      short short0 = (short)121;
      boolean boolean0 = tShortHashSet0.remove(short0);
      tShortHashSet0.iterator();
      int int1 = (-2009);
      TShortHashSet tShortHashSet1 = new TShortHashSet(int1, int1);
      short short1 = tShortHashSet1.getNoEntryValue();
      short[] shortArray0 = new short[7];
      TShortHashSet tShortHashSet2 = new TShortHashSet();
      shortArray0[0] = short1;
      shortArray0[1] = short1;
      shortArray0[2] = short1;
      TShortHashSet tShortHashSet3 = new TShortHashSet((TShortCollection) tShortHashSet0);
      short[] shortArray1 = tShortHashSet1.toArray(shortArray0);
      assertNotNull(shortArray1);
      
      tShortHashSet0.capacity();
      float float0 = 0.0F;
      TShortHashSet tShortHashSet4 = new TShortHashSet((int) shortArray0[2], float0);
      shortArray0[3] = short1;
      int int2 = tShortHashSet3.hashCode();
      assertEquals(0, int2);
      
      shortArray0[4] = short1;
      shortArray0[5] = short1;
      assertSame(shortArray0, shortArray1);
      
      Collection<Short> collection0 = null;
      boolean boolean1 = tShortHashSet0.retainAll((TShortCollection) tShortHashSet3);
      assertEquals(23, tShortHashSet3.capacity());
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try {
        tShortHashSet1.containsAll(collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TShortHashSet tShortHashSet0 = new TShortHashSet();
      tShortHashSet0.hashCode();
      int int0 = 112;
      short[] shortArray0 = new short[7];
      short short0 = (short)980;
      shortArray0[0] = short0;
      short short1 = (short) (-8);
      shortArray0[1] = short1;
      short short2 = (short) (-1);
      shortArray0[2] = short2;
      short short3 = (short) (-456);
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short) (-1143);
      shortArray0[5] = short5;
      short short6 = (short) (-1039);
      shortArray0[6] = short6;
      tShortHashSet0.retainAll(shortArray0);
      float float0 = 1918.649F;
      tShortHashSet0.isEmpty();
      short short7 = (short)0;
      TShortCollection tShortCollection0 = null;
      // Undeclared exception!
      try {
        tShortHashSet0.removeAll(tShortCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test10()  throws Throwable  {
//       int int0 = (-831);
//       short short0 = (short) (-1681);
//       short short1 = (short)1108;
//       TShortHashSet tShortHashSet0 = new TShortHashSet(int0, (float) int0, short1);
//       tShortHashSet0.getNoEntryValue();
//       TShortHashSet tShortHashSet1 = new TShortHashSet((int) short0, (float) int0);
//       tShortHashSet1.size();
//       TShortHashSet tShortHashSet2 = new TShortHashSet(int0, (float) int0, short0);
//       assertEquals(-1681, tShortHashSet2.getNoEntryValue());
//   }
}
