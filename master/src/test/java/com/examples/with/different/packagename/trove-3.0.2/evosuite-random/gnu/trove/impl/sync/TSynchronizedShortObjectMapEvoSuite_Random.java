/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.impl.sync.TSynchronizedShortObjectMap;
import gnu.trove.map.TShortObjectMap;
import gnu.trove.map.hash.TShortObjectHashMap;
import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import javax.swing.text.Segment;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedShortObjectMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TShortObjectMap<String> tShortObjectMap0 = null;
      TSynchronizedShortObjectMap<String> tSynchronizedShortObjectMap0 = null;
      try {
        tSynchronizedShortObjectMap0 = new TSynchronizedShortObjectMap<String>(tShortObjectMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 1403641;
      short short0 = (short)78;
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>(int0, (float) int0, short0);
      TSynchronizedShortObjectMap<Short> tSynchronizedShortObjectMap0 = new TSynchronizedShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      short short1 = (short) (-1613);
      tSynchronizedShortObjectMap0.remove(short1);
  }

  @Test
  public void test2()  throws Throwable  {
      TShortObjectMap<Short> tShortObjectMap0 = null;
      int int0 = 1360;
      float float0 = (-90.76788F);
      short short0 = (short) (-1939);
      TShortObjectHashMap<String> tShortObjectHashMap0 = new TShortObjectHashMap<String>(int0, float0, short0);
      String string0 = "a#A9Yn/ &FaC";
      Locale locale0 = new Locale(string0);
      Locale locale1 = Locale.JAPAN;
      String string1 = locale0.getDisplayName(locale1);
      TSynchronizedShortObjectMap<String> tSynchronizedShortObjectMap0 = new TSynchronizedShortObjectMap<String>((TShortObjectMap<String>) tShortObjectHashMap0, (Object) string1);
      TSynchronizedShortObjectMap<Short> tSynchronizedShortObjectMap1 = null;
      try {
        tSynchronizedShortObjectMap1 = new TSynchronizedShortObjectMap<Short>(tShortObjectMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TShortObjectMap<Short> tShortObjectMap0 = null;
      TShortObjectMap<Integer> tShortObjectMap1 = null;
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = null;
      try {
        tShortObjectHashMap0 = new TShortObjectHashMap<Integer>(tShortObjectMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>(int0);
      char[] charArray0 = new char[1];
      char char0 = '%';
      charArray0[0] = char0;
      int int1 = (-1);
      Segment segment0 = new Segment(charArray0, int1, (int) charArray0[0]);
      // Undeclared exception!
      try {
        segment0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 1437;
      float float0 = 439.50192F;
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>(int0, float0);
      TSynchronizedShortObjectMap<Short> tSynchronizedShortObjectMap0 = new TSynchronizedShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0);
      short short0 = (short) (-263);
      tSynchronizedShortObjectMap0.containsKey(short0);
      int int1 = 216;
      short short1 = (short)319;
      TShortObjectHashMap<Integer> tShortObjectHashMap1 = new TShortObjectHashMap<Integer>(int1, (float) int1, short1);
      TSynchronizedShortObjectMap<Integer> tSynchronizedShortObjectMap1 = new TSynchronizedShortObjectMap<Integer>((TShortObjectMap<Integer>) tShortObjectHashMap1);
      short short2 = tSynchronizedShortObjectMap1.getNoEntryKey();
      assertEquals((short)319, short2);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-401);
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>(int0, int0);
      String string0 = "OSpnTLyhj";
      String string1 = "";
      URI uRI0 = new URI(string0, string0, string1);
      URI uRI1 = uRI0.resolve(string1);
      URI uRI2 = uRI1.resolve(uRI0);
      URI uRI3 = uRI2.parseServerAuthority();
      String string2 = uRI3.getRawQuery();
      TSynchronizedShortObjectMap<Short> tSynchronizedShortObjectMap0 = new TSynchronizedShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0, (Object) string2);
      // Undeclared exception!
      try {
        tSynchronizedShortObjectMap0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      short short0 = (short)1747;
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>(int1, (float) int1, short0);
      TSynchronizedShortObjectMap<Integer> tSynchronizedShortObjectMap0 = new TSynchronizedShortObjectMap<Integer>((TShortObjectMap<Integer>) tShortObjectHashMap0);
      Object object0 = new Object();
      TSynchronizedShortObjectMap<Integer> tSynchronizedShortObjectMap1 = new TSynchronizedShortObjectMap<Integer>((TShortObjectMap<Integer>) tSynchronizedShortObjectMap0, object0);
      tSynchronizedShortObjectMap1.getNoEntryKey();
      TShortObjectHashMap<Object> tShortObjectHashMap1 = new TShortObjectHashMap<Object>(int0);
      TSynchronizedShortObjectMap<Object> tSynchronizedShortObjectMap2 = new TSynchronizedShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap1);
      Object[] objectArray0 = tSynchronizedShortObjectMap2.values();
      assertNotNull(objectArray0);
  }

  @Test
  public void test8()  throws Throwable  {
      TShortObjectHashMap<Integer> tShortObjectHashMap0 = new TShortObjectHashMap<Integer>();
      String string0 = File.pathSeparator;
      TSynchronizedShortObjectMap<Integer> tSynchronizedShortObjectMap0 = new TSynchronizedShortObjectMap<Integer>((TShortObjectMap<Integer>) tShortObjectHashMap0, (Object) string0);
      File file0 = null;
      tSynchronizedShortObjectMap0.isEmpty();
      File file1 = new File(file0, string0);
      int int0 = 452759;
      TShortObjectHashMap<Object> tShortObjectHashMap1 = new TShortObjectHashMap<Object>(int0, int0);
      TSynchronizedShortObjectMap<Object> tSynchronizedShortObjectMap1 = new TSynchronizedShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap1);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: :://[:]:#:
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 26;
      float float0 = 0.0F;
      TShortObjectHashMap<String> tShortObjectHashMap0 = new TShortObjectHashMap<String>(int0, float0);
      TShortObjectHashMap<Object> tShortObjectHashMap1 = new TShortObjectHashMap<Object>();
      tShortObjectHashMap0.isEmpty();
      TSynchronizedShortObjectMap<Object> tSynchronizedShortObjectMap0 = new TSynchronizedShortObjectMap<Object>((TShortObjectMap<Object>) tShortObjectHashMap1);
      tSynchronizedShortObjectMap0.putAll((TShortObjectMap<?>) tShortObjectHashMap0);
      String[] stringArray0 = new String[3];
      String string0 = "";
      int int1 = 0;
      float float1 = 0.0F;
      short short0 = (short) (-10975);
      TShortObjectHashMap<Short> tShortObjectHashMap2 = new TShortObjectHashMap<Short>(int1, float1, short0);
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://#
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 80;
      TShortObjectHashMap<Object> tShortObjectHashMap0 = new TShortObjectHashMap<Object>(int0, int0);
      String string0 = "gnu.trove.no_entry.double";
      String string1 = "";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0, string1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: gnu.trove.no_entry.double://gnu.trove.no_entry.doublegnu.trove.no_entry.double?gnu.trove.no_entry.double#
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TShortObjectMap<Object> tShortObjectMap0 = null;
      String string0 = "$sM";
      TShortObjectHashMap<Short> tShortObjectHashMap0 = new TShortObjectHashMap<Short>();
      Locale locale0 = Locale.FRENCH;
      String string1 = locale0.getDisplayVariant();
      TSynchronizedShortObjectMap<Short> tSynchronizedShortObjectMap0 = new TSynchronizedShortObjectMap<Short>((TShortObjectMap<Short>) tShortObjectHashMap0, (Object) string1);
      tSynchronizedShortObjectMap0.putAll((TShortObjectMap<? extends Short>) tShortObjectHashMap0);
      Locale locale1 = new Locale(string0);
      String string2 = locale1.getDisplayName();
      TSynchronizedShortObjectMap<Object> tSynchronizedShortObjectMap1 = new TSynchronizedShortObjectMap<Object>(tShortObjectMap0, (Object) string2);
      Locale locale2 = Locale.ITALY;
      locale1.getDisplayLanguage(locale2);
      int int0 = 0;
      short short0 = (short) (-17599);
      TShortObjectHashMap<Integer> tShortObjectHashMap1 = new TShortObjectHashMap<Integer>(int0, (float) int0, short0);
      short short1 = (short)240;
      TShortObjectMap<Integer> tShortObjectMap1 = null;
      String string3 = locale2.getScript();
      TSynchronizedShortObjectMap<Integer> tSynchronizedShortObjectMap2 = new TSynchronizedShortObjectMap<Integer>(tShortObjectMap1, (Object) string3);
      // Undeclared exception!
      try {
        tSynchronizedShortObjectMap2.getNoEntryKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
