/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TShortCollection;
import gnu.trove.impl.sync.TSynchronizedRandomAccessShortList;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessShortList;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortList;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortSet;
import gnu.trove.list.TShortList;
import gnu.trove.list.array.TShortArrayList;
import gnu.trove.list.linked.TShortLinkedList;
import gnu.trove.set.TShortSet;
import gnu.trove.set.hash.TShortHashSet;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableShortCollectionEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TShortCollection tShortCollection0 = null;
      TShortHashSet tShortHashSet0 = new TShortHashSet();
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      Object object0 = null;
      tUnmodifiableShortSet0.equals(object0);
      TUnmodifiableShortCollection tUnmodifiableShortCollection0 = null;
      try {
        tUnmodifiableShortCollection0 = new TUnmodifiableShortCollection(tShortCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)458;
      shortArray0[0] = short0;
      short short1 = (short)1411;
      shortArray0[1] = short1;
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0, short1);
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList((TShortList) tShortArrayList0);
      short short2 = (short)902;
      int int0 = tShortArrayList0.lastIndexOf(short2);
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tUnmodifiableRandomAccessShortList0);
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList1 = (TUnmodifiableRandomAccessShortList)tUnmodifiableShortList0.list;
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList2 = new TUnmodifiableRandomAccessShortList((TShortList) tUnmodifiableRandomAccessShortList1);
      tUnmodifiableRandomAccessShortList2.toArray();
      int int1 = (-151);
      short short3 = (short) (-83);
      int int2 = tShortArrayList0.lastIndexOf(int1, short3);
      assertTrue(int2 == int0);
  }

  @Test
  public void test2()  throws Throwable  {
      TShortCollection tShortCollection0 = null;
      TUnmodifiableShortCollection tUnmodifiableShortCollection0 = null;
      try {
        tUnmodifiableShortCollection0 = new TUnmodifiableShortCollection(tShortCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short) (-1494);
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      short short1 = (short)506;
      shortArray0[0] = short1;
      short short2 = (short)0;
      shortArray0[1] = short2;
      short short3 = (short) (-188);
      shortArray0[2] = short3;
      short short4 = (short) (-92);
      shortArray0[3] = short4;
      short short5 = (short)0;
      int int0 = 331;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0, (float) shortArray0[0]);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      // Undeclared exception!
      try {
        tUnmodifiableShortSet0.removeAll(shortArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//   @Test
//   public void test4()  throws Throwable  {
//       TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
//       int int0 = 1196;
//       int int1 = 293871013;
//       TShortHashSet tShortHashSet0 = null;
//       try {
//         tShortHashSet0 = new TShortHashSet(int1);
//         fail("Expecting exception: OutOfMemoryError");
//       
//       } catch(OutOfMemoryError e) {
//          //
//          // Java heap space
//          //
//       }
//   }

  @Test
  public void test5()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short)379;
      shortArray0[0] = short0;
      short short1 = (short) (-28851);
      shortArray0[1] = short1;
      short short2 = (short)180;
      shortArray0[2] = short2;
      short short3 = (short)1075;
      float float0 = 1.0F;
      TShortHashSet tShortHashSet0 = new TShortHashSet((int) short0, float0);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      // Undeclared exception!
      try {
        tUnmodifiableShortSet0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short)1;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      TShortSet tShortSet0 = null;
      TUnmodifiableShortSet tUnmodifiableShortSet0 = null;
      try {
        tUnmodifiableShortSet0 = new TUnmodifiableShortSet(tShortSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 1189;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0, int0);
      short[] shortArray0 = new short[2];
      short short0 = (short)195;
      shortArray0[0] = short0;
      short short1 = (short)564;
      shortArray0[1] = short1;
      tShortHashSet0.removeAll(shortArray0);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      // Undeclared exception!
      try {
        tUnmodifiableShortSet0.removeAll(shortArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      short short0 = (short)1;
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList(short0);
      int int0 = 0;
      int int1 = 0;
      TShortLinkedList tShortLinkedList1 = (TShortLinkedList)tShortLinkedList0.subList(int0, int1);
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortLinkedList1);
      short short1 = (short) (-1);
      tUnmodifiableShortList0.contains(short1);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      TShortHashSet tShortHashSet0 = new TShortHashSet((Collection<? extends Short>) linkedList0);
      float float0 = 612.6958F;
      tShortHashSet0.setAutoCompactionFactor(float0);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      String string0 = "0<a";
      // Undeclared exception!
      try {
        tUnmodifiableShortSet0.removeAll(tShortHashSet0._set);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short)829;
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      shortArray0[7] = short0;
      shortArray0[8] = short0;
      shortArray0[9] = short0;
      shortArray0[0] = short0;
      short short1 = (short)1633;
      TShortHashSet tShortHashSet0 = new TShortHashSet((int) shortArray0[0]);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      tUnmodifiableShortSet0.iterator();
      shortArray0[1] = short1;
      short short2 = (short)24829;
      tUnmodifiableShortSet0.hashCode();
      shortArray0[2] = short2;
      short short3 = (short)1;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)1264;
      shortArray0[5] = short5;
      short short6 = (short)1;
      shortArray0[6] = short6;
      short short7 = (short)0;
      shortArray0[7] = short7;
      short short8 = (short) (-1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      tShortHashSet0.containsAll((Collection<?>) linkedList0);
      shortArray0[8] = short8;
      short short9 = (short) (-122);
      shortArray0[9] = short9;
      TShortHashSet tShortHashSet1 = new TShortHashSet(shortArray0);
      TUnmodifiableShortSet tUnmodifiableShortSet1 = new TUnmodifiableShortSet((TShortSet) tShortHashSet1);
      short[] shortArray1 = tUnmodifiableShortSet1.toArray();
      assertNotSame(shortArray0, shortArray1);
  }

  @Test
  public void test10()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short)48;
      shortArray0[0] = short0;
      short short1 = (short)119;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short)500;
      shortArray0[5] = short5;
      TShortArrayList tShortArrayList0 = TShortArrayList.wrap(shortArray0);
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortArrayList0);
      // Undeclared exception!
      try {
        tUnmodifiableShortList0.retainAll(shortArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      int int0 = 513;
      // Undeclared exception!
      try {
        tShortArrayList0.subList(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // end index < 10
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      Locale locale0 = Locale.ROOT;
      String string0 = locale0.toString();
      int int0 = 15661423;
      tShortArrayList0.ensureCapacity(int0);
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList((TShortList) tShortArrayList0, (Object) string0);
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tSynchronizedRandomAccessShortList0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try {
        tUnmodifiableShortList0.retainAll((Collection<?>) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      int int0 = 1223;
      int int1 = (-1702);
      // Undeclared exception!
      try {
        tShortLinkedList0.subList(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // begin index 1223 greater than end index -1702
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TShortLinkedList tShortLinkedList0 = new TShortLinkedList();
      int int0 = 0;
      int int1 = 0;
      TShortLinkedList tShortLinkedList1 = (TShortLinkedList)tShortLinkedList0.subList(int0, int1);
      TUnmodifiableShortCollection tUnmodifiableShortCollection0 = new TUnmodifiableShortCollection((TShortCollection) tShortLinkedList1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      tUnmodifiableShortCollection0.containsAll((Collection<?>) linkedList0);
      TUnmodifiableShortList tUnmodifiableShortList0 = new TUnmodifiableShortList((TShortList) tShortLinkedList0);
      // Undeclared exception!
      try {
        tUnmodifiableShortList0.removeAll((TShortCollection) tShortLinkedList1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TShortList tShortList0 = null;
      TUnmodifiableRandomAccessShortList tUnmodifiableRandomAccessShortList0 = null;
      try {
        tUnmodifiableRandomAccessShortList0 = new TUnmodifiableRandomAccessShortList(tShortList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 0;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0, int0);
      TUnmodifiableShortCollection tUnmodifiableShortCollection0 = new TUnmodifiableShortCollection((TShortCollection) tShortHashSet0);
      tShortHashSet0.isEmpty();
      // Undeclared exception!
      try {
        tUnmodifiableShortCollection0.removeAll(tShortHashSet0._set);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-1209);
      int int1 = (-1946);
      short short0 = (short)123;
      int int2 = 1401;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int2);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try {
        tUnmodifiableShortSet0.removeAll((Collection<?>) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      TShortArrayList tShortArrayList0 = new TShortArrayList();
      int int0 = (-793);
      // Undeclared exception!
      try {
        tShortArrayList0.subList(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // begin index can not be < 0
         //
      }
  }
}
