/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TDoubleCharMap;
import gnu.trove.map.hash.TDoubleCharHashMap;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TDoubleCharHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TDoubleCharMap tDoubleCharMap0 = null;
      double[] doubleArray0 = new double[1];
      double double0 = (-919.2025519481691);
      doubleArray0[0] = double0;
      char[] charArray0 = new char[8];
      char char0 = ';';
      charArray0[0] = char0;
      char char1 = 'q';
      charArray0[1] = char1;
      char char2 = '9';
      charArray0[2] = char2;
      char char3 = 'W';
      charArray0[3] = char3;
      char char4 = 'K';
      charArray0[4] = char4;
      char char5 = '{';
      charArray0[5] = char5;
      char char6 = '\"';
      charArray0[6] = char6;
      char char7 = '-';
      charArray0[7] = char7;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      tDoubleCharHashMap0.hashCode();
      TDoubleCharHashMap tDoubleCharHashMap1 = null;
      try {
        tDoubleCharHashMap1 = new TDoubleCharHashMap(tDoubleCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-42.150481519376875);
      doubleArray0[0] = double0;
      double double1 = Double.POSITIVE_INFINITY;
      doubleArray0[1] = double1;
      double double2 = 1284.218879369896;
      doubleArray0[2] = double2;
      double double3 = (-2004.4711647164681);
      doubleArray0[3] = double3;
      double double4 = 691.1195464758007;
      doubleArray0[4] = double4;
      double double5 = 1984.5692598780636;
      doubleArray0[5] = double5;
      char[] charArray0 = new char[6];
      char char0 = 'W';
      charArray0[0] = char0;
      char char1 = ':';
      charArray0[1] = char1;
      char char2 = 'i';
      charArray0[2] = char2;
      char char3 = 'h';
      charArray0[3] = char3;
      char char4 = '-';
      charArray0[4] = char4;
      char char5 = 'U';
      charArray0[5] = char5;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap((TDoubleCharMap) tDoubleCharHashMap0);
      tDoubleCharHashMap1.isEmpty();
      assertEquals("{-42.150481519376875=W, 691.1195464758007=-, 1984.5692598780636=U, -2004.4711647164681=h, Infinity=:, 1284.218879369896=i}", tDoubleCharHashMap0.toString());
      assertEquals("{-2004.4711647164681=h, 1284.218879369896=i, -42.150481519376875=W, 691.1195464758007=-, 1984.5692598780636=U, Infinity=:}", tDoubleCharHashMap1.toString());
      assertEquals(0.0, tDoubleCharHashMap1.getNoEntryKey(), 0.01D);
      assertEquals('\u0000', tDoubleCharHashMap1.getNoEntryValue());
      
      int int0 = 0;
      char char6 = 'o';
      TDoubleCharHashMap tDoubleCharHashMap2 = new TDoubleCharHashMap(int0, (float) int0, (double) int0, char6);
      tDoubleCharHashMap2.getAutoCompactionFactor();
      tDoubleCharHashMap2.valueCollection();
      tDoubleCharHashMap2.iterator();
      tDoubleCharHashMap2.isEmpty();
      assertEquals('o', tDoubleCharHashMap2.getNoEntryValue());
  }

  @Test
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      tDoubleCharHashMap0.keySet();
      double double1 = 1450.5446240899048;
      doubleArray0[1] = double1;
      double double2 = (-226.5035603244963);
      double[] doubleArray1 = tDoubleCharHashMap0._set;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = (-69.15598381479793);
      doubleArray0[4] = double4;
      double double5 = 1.0;
      doubleArray0[5] = double5;
      double double6 = 2.0;
      doubleArray0[6] = double6;
      tDoubleCharHashMap0.capacity();
      double double7 = 0.0;
      doubleArray0[7] = double7;
      tDoubleCharHashMap0._set = doubleArray1;
      assertEquals('\u0000', tDoubleCharHashMap0.getNoEntryValue());
      assertEquals(0.0, tDoubleCharHashMap0.getNoEntryKey(), 0.01D);
      
      double double8 = 0.0;
      doubleArray0[8] = double8;
      char[] charArray0 = new char[1];
      char char0 = '^';
      charArray0[0] = char0;
      charArray0[0] = char0;
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap(doubleArray0, charArray0);
      boolean boolean0 = true;
      tDoubleCharHashMap1.reenableAutoCompaction(boolean0);
      assertEquals('\u0000', tDoubleCharHashMap1.getNoEntryValue());
      assertEquals("{-1.0=^}", tDoubleCharHashMap1.toString());
      assertEquals(23, tDoubleCharHashMap1.capacity());
      assertEquals(0.0, tDoubleCharHashMap1.getNoEntryKey(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0);
      int int1 = (-1002);
      tDoubleCharHashMap0.clear();
      char char0 = tDoubleCharHashMap0.getNoEntryValue();
      tDoubleCharHashMap0.compact();
      tDoubleCharHashMap0.remove((double) char0);
      tDoubleCharHashMap0.tempDisableAutoCompaction();
      char char1 = tDoubleCharHashMap0.remove((double) int0);
      tDoubleCharHashMap0.ensureCapacity(int1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) char0;
      doubleArray0[3] = (double) char1;
      assertEquals(0.0, doubleArray0[3], 0.01D);
      
      doubleArray0[4] = (double) int0;
      tDoubleCharHashMap0._set = doubleArray0;
      // Undeclared exception!
      try {
        tDoubleCharHashMap0.trimToSize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)18;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-11);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)7;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-94);
      byteArray0[5] = byte5;
      byte byte6 = (byte)32;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      byteArray0[8] = byte8;
      tDoubleCharHashMap0._states = byteArray0;
      TDoubleCharMap tDoubleCharMap0 = null;
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap();
      TDoubleCharHashMap tDoubleCharHashMap2 = null;
      try {
        tDoubleCharHashMap2 = new TDoubleCharHashMap(tDoubleCharMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      char char0 = 'x';
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0, (float) int0, (double) int0, char0);
      tDoubleCharHashMap0.trimToSize();
      assertEquals('x', tDoubleCharHashMap0.getNoEntryValue());
      assertEquals(2.147483647E9, tDoubleCharHashMap0.getNoEntryKey(), 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) pipedInputStream0);
      int int0 = (-1958);
      PushbackInputStream pushbackInputStream1 = null;
      try {
        pushbackInputStream1 = new PushbackInputStream((InputStream) pushbackInputStream0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
      double double0 = (-261.4410330156274);
      char char0 = '[';
      char char1 = 'q';
      tDoubleCharHashMap0.adjustOrPutValue(double0, char0, char1);
      assertEquals(1, tDoubleCharHashMap0.size());
      
      int int0 = 1;
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap(int0, int0);
      assertEquals('\u0000', tDoubleCharHashMap1.getNoEntryValue());
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 1905;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0);
      char char0 = tDoubleCharHashMap0.getNoEntryValue();
      double[] doubleArray0 = new double[7];
      char char1 = 'O';
      char char2 = tDoubleCharHashMap0.putIfAbsent((double) char0, char1);
      double double0 = 1.0;
      doubleArray0[0] = (double) char0;
      doubleArray0[1] = (double) char1;
      double double1 = (-707.038941808517);
      doubleArray0[2] = double1;
      doubleArray0[3] = (double) char2;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) char0;
      doubleArray0[6] = (double) int0;
      tDoubleCharHashMap0.get(double0);
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      double double2 = (-1571.57534331674);
      int int1 = 0;
      tDoubleCharHashMap0.ensureCapacity(int1);
      tDoubleCharHashMap0.contains(doubleArray0[3]);
      doubleArray0[4] = double2;
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap();
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      tDoubleCharHashMap0.values();
      tDoubleCharHashMap0.isEmpty();
      tDoubleCharHashMap0._set = doubleArray0;
      assertEquals(false, tDoubleCharHashMap0.isEmpty());
      assertEquals("{1905.0=O}", tDoubleCharHashMap0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      double double0 = 1075.8164950479622;
      int int1 = 0;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int1, int1);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-110);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-82);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)66;
      byteArray0[3] = byte3;
      byte byte4 = (byte)3;
      byteArray0[4] = byte4;
      tDoubleCharHashMap0._states = byteArray0;
      assertEquals(0.0, tDoubleCharHashMap0.getNoEntryKey(), 0.01D);
      assertEquals('\u0000', tDoubleCharHashMap0.getNoEntryValue());
      
      char char0 = '';
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap(int0, (float) int0, double0, char0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = (double) int0;
      double double2 = (-617.4083127323108);
      doubleArray0[6] = double2;
      doubleArray0[7] = double0;
      tDoubleCharHashMap1._set = doubleArray0;
      assertEquals('', tDoubleCharHashMap1.getNoEntryValue());
      assertEquals(1075.8164950479622, tDoubleCharHashMap1.getNoEntryKey(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 0;
          TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap();
          double[] doubleArray0 = new double[9];
          boolean boolean0 = tDoubleCharHashMap0.increment((double) int0);
          assertEquals(false, boolean0);
          
          doubleArray0[0] = (double) int0;
          double double0 = 1.0;
          char char0 = 'V';
          tDoubleCharHashMap0.adjustValue(double0, char0);
          doubleArray0[1] = (double) int0;
          TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap();
          assertEquals('\u0000', tDoubleCharHashMap1.getNoEntryValue());
          assertEquals(23, tDoubleCharHashMap1.capacity());
          assertEquals(0.0, tDoubleCharHashMap1.getNoEntryKey(), 0.01D);
          
          doubleArray0[2] = (double) int0;
          String string0 = "";
          boolean boolean1 = true;
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0, boolean1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:136)
             // sun.reflect.GeneratedConstructorAccessor12.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 2.0;
      doubleArray0[3] = double3;
      double double4 = (-1.0);
      doubleArray0[4] = double4;
      double double5 = (-1296.1857749196504);
      doubleArray0[5] = double5;
      double double6 = 1.0;
      doubleArray0[6] = double6;
      double double7 = 115.90592073497695;
      doubleArray0[7] = double7;
      double double8 = (-1076.030539666763);
      doubleArray0[8] = double8;
      double double9 = 0.0;
      doubleArray0[9] = double9;
      char[] charArray0 = new char[7];
      char char0 = 'l';
      charArray0[0] = char0;
      char char1 = '';
      charArray0[1] = char1;
      char char2 = 'd';
      charArray0[2] = char2;
      char char3 = 'S';
      charArray0[3] = char3;
      char char4 = '?';
      charArray0[4] = char4;
      char char5 = 'J';
      charArray0[5] = char5;
      char char6 = '~';
      charArray0[6] = char6;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      assertEquals("{-1.0=?, -1296.1857749196504=J, 2.0=S, 1.0=~, 0.0=d}", tDoubleCharHashMap0.toString());
      assertEquals(0.0, tDoubleCharHashMap0.getNoEntryKey(), 0.01D);
  }

//   @Test
//   public void test12()  throws Throwable  {
//       double[] doubleArray0 = new double[10];
//       double double0 = 0.0;
//       doubleArray0[0] = double0;
//       double double1 = Double.NEGATIVE_INFINITY;
//       doubleArray0[1] = double1;
//       double double2 = 2.0;
//       doubleArray0[2] = double2;
//       double double3 = 1.0;
//       doubleArray0[3] = double3;
//       double double4 = (-1.0);
//       doubleArray0[4] = double4;
//       double double5 = Double.POSITIVE_INFINITY;
//       doubleArray0[5] = double5;
//       double double6 = 0.0;
//       doubleArray0[6] = double6;
//       double double7 = 1628.030256464108;
//       doubleArray0[7] = double7;
//       double double8 = (-1.0);
//       doubleArray0[8] = double8;
//       double double9 = 2.0;
//       doubleArray0[9] = double9;
//       char[] charArray0 = new char[4];
//       char char0 = 'y';
//       charArray0[0] = char0;
//       char char1 = ' ';
//       charArray0[1] = char1;
//       char char2 = 'Z';
//       charArray0[2] = char2;
//       char char3 = '[';
//       charArray0[3] = char3;
//       TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
//       tDoubleCharHashMap0.compact();
//       assertEquals(7, tDoubleCharHashMap0.capacity());
//   }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = (-1330.1727552108157);
      doubleArray0[4] = double4;
      char[] charArray0 = new char[5];
      char char0 = 'Q';
      charArray0[0] = char0;
      char char1 = 'd';
      charArray0[1] = char1;
      char char2 = ' ';
      charArray0[2] = char2;
      char char3 = 'k';
      charArray0[3] = char3;
      char char4 = '7';
      charArray0[4] = char4;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap((TDoubleCharMap) tDoubleCharHashMap0);
      tDoubleCharHashMap1.putAll((TDoubleCharMap) tDoubleCharHashMap0);
      assertEquals(11, tDoubleCharHashMap0.capacity());
      assertEquals("{-1330.1727552108157=7, 0.0=k}", tDoubleCharHashMap1.toString());
      assertEquals(0.0, tDoubleCharHashMap0.getNoEntryKey(), 0.01D);
      assertEquals("{-1330.1727552108157=7, 0.0=k}", tDoubleCharHashMap0.toString());
      assertEquals('\u0000', tDoubleCharHashMap0.getNoEntryValue());
      assertEquals(2, tDoubleCharHashMap1.size());
      assertTrue(tDoubleCharHashMap1.equals(tDoubleCharHashMap0));
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 658;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      char[] charArray0 = new char[10];
      char char0 = 'N';
      charArray0[0] = char0;
      char char1 = 'B';
      charArray0[1] = char1;
      char char2 = 'D';
      charArray0[2] = char2;
      char char3 = '2';
      charArray0[3] = char3;
      char char4 = 'T';
      charArray0[4] = char4;
      char char5 = '\\';
      charArray0[5] = char5;
      char char6 = '`';
      charArray0[6] = char6;
      char char7 = '@';
      charArray0[7] = char7;
      char char8 = '\\';
      charArray0[8] = char8;
      char char9 = '*';
      charArray0[9] = char9;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      tDoubleCharHashMap0.isEmpty();
      assertEquals(1, tDoubleCharHashMap0.size());
      assertEquals(0.0, tDoubleCharHashMap0.getNoEntryKey(), 0.01D);
      assertEquals("{658.0=B}", tDoubleCharHashMap0.toString());
      assertEquals('\u0000', tDoubleCharHashMap0.getNoEntryValue());
      
      float float0 = 304.20615F;
      double double0 = 546.4894225958202;
      char char10 = 'm';
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap(int0, float0, double0, char10);
      tDoubleCharHashMap1.size();
      TDoubleCharHashMap tDoubleCharHashMap2 = new TDoubleCharHashMap();
      String string0 = tDoubleCharHashMap2.toString();
      assertNotNull(string0);
      
      double double1 = tDoubleCharHashMap2.getNoEntryKey();
      assertEquals(0.0, double1, 0.01D);
      
      TDoubleCharHashMap tDoubleCharHashMap3 = new TDoubleCharHashMap();
      tDoubleCharHashMap2.putAll((TDoubleCharMap) tDoubleCharHashMap3);
      tDoubleCharHashMap3.getNoEntryValue();
      assertEquals(23, tDoubleCharHashMap3.capacity());
      
      boolean boolean0 = false;
      tDoubleCharHashMap1.reenableAutoCompaction(boolean0);
      assertEquals(3, tDoubleCharHashMap1.capacity());
      assertEquals('m', tDoubleCharHashMap1.getNoEntryValue());
      assertEquals(546.4894225958202, tDoubleCharHashMap1.getNoEntryKey(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-1921);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      char[] charArray0 = new char[9];
      char char0 = 'm';
      charArray0[0] = char0;
      char char1 = 'p';
      charArray0[1] = char1;
      char char2 = 'N';
      charArray0[2] = char2;
      char char3 = '0';
      charArray0[3] = char3;
      char char4 = ']';
      charArray0[4] = char4;
      char char5 = 'r';
      charArray0[5] = char5;
      char char6 = 'a';
      charArray0[6] = char6;
      char char7 = '(';
      charArray0[7] = char7;
      char char8 = '4';
      charArray0[8] = char8;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      boolean boolean0 = true;
      tDoubleCharHashMap0.reenableAutoCompaction(boolean0);
      assertEquals(23, tDoubleCharHashMap0.capacity());
      assertEquals(1, tDoubleCharHashMap0.size());
      assertEquals('\u0000', tDoubleCharHashMap0.getNoEntryValue());
      assertEquals("{-1921.0=]}", tDoubleCharHashMap0.toString());
      assertEquals(0.0, tDoubleCharHashMap0.getNoEntryKey(), 0.01D);
      
      float float0 = 1781.2284F;
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap(int0, float0);
      boolean boolean1 = tDoubleCharHashMap1.containsKey((double) float0);
      assertEquals(false, boolean1);
      
      float float1 = (-1.0F);
      TDoubleCharHashMap tDoubleCharHashMap2 = new TDoubleCharHashMap();
      assertEquals('\u0000', tDoubleCharHashMap2.getNoEntryValue());
      assertEquals(0.0, tDoubleCharHashMap2.getNoEntryKey(), 0.01D);
      
      TDoubleCharHashMap tDoubleCharHashMap3 = new TDoubleCharHashMap(int0, float1);
      assertEquals(0.0, tDoubleCharHashMap3.getNoEntryKey(), 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 1105.2042591120235;
      doubleArray0[0] = double0;
      double double1 = 2.0;
      doubleArray0[1] = double1;
      double double2 = (-1774.8136627405827);
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = (-309.2926355888433);
      doubleArray0[5] = double5;
      double double6 = (-1950.4722746387934);
      doubleArray0[6] = double6;
      double double7 = (-1717.5589166712214);
      doubleArray0[7] = double7;
      double double8 = 0.0;
      doubleArray0[8] = double8;
      double double9 = 0.0;
      doubleArray0[9] = double9;
      char[] charArray0 = new char[5];
      char char0 = 'e';
      charArray0[0] = char0;
      char char1 = '!';
      charArray0[1] = char1;
      char char2 = ']';
      charArray0[2] = char2;
      char char3 = 'G';
      charArray0[3] = char3;
      char char4 = '%';
      charArray0[4] = char4;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(doubleArray0, charArray0);
      double[] doubleArray1 = tDoubleCharHashMap0._set;
      assertEquals(4, tDoubleCharHashMap0.size());
      assertEquals("{-1774.8136627405827=], 1105.2042591120235=e, 2.0=!, 0.0=%}", tDoubleCharHashMap0.toString());
      assertEquals(0.0, tDoubleCharHashMap0.getNoEntryKey(), 0.01D);
      assertEquals('\u0000', tDoubleCharHashMap0.getNoEntryValue());
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 0;
      TDoubleCharHashMap tDoubleCharHashMap0 = new TDoubleCharHashMap(int0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      tDoubleCharHashMap0._set = doubleArray0;
      char[] charArray0 = new char[5];
      char char0 = 'y';
      charArray0[0] = char0;
      char char1 = 'K';
      charArray0[1] = char1;
      char char2 = 'y';
      charArray0[2] = char2;
      char char3 = '';
      charArray0[3] = char3;
      char char4 = 'h';
      charArray0[4] = char4;
      TDoubleCharHashMap tDoubleCharHashMap1 = new TDoubleCharHashMap(doubleArray0, charArray0);
      tDoubleCharHashMap0.putAll((TDoubleCharMap) tDoubleCharHashMap1);
      assertEquals(1, tDoubleCharHashMap0.size());
      assertTrue(tDoubleCharHashMap1.equals(tDoubleCharHashMap0));
  }
}
