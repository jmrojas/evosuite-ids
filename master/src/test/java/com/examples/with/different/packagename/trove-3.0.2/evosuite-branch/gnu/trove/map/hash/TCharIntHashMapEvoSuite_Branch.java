/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TIntFunction;
import gnu.trove.map.TCharIntMap;
import gnu.trove.map.hash.TCharIntHashMap;
import gnu.trove.procedure.TCharIntProcedure;
import gnu.trove.procedure.TCharProcedure;
import gnu.trove.procedure.TIntProcedure;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TCharIntHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.valueCollection()Lgnu/trove/TIntCollection;: root-Branch
   * 2 gnu.trove.map.hash.TCharIntHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TCharIntHashMap$TValueView.<init>(Lgnu/trove/map/hash/TCharIntHashMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TCharIntHashMap.setUp(I)I: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      tCharIntHashMap0.valueCollection();
      assertEquals(23, tCharIntHashMap0.capacity());
  }

  //Test case number: 1
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TCharIntHashMap.remove(C)I: I14 Branch 46 IFLT L276 - false
   * 3 gnu.trove.map.hash.TCharIntHashMap.put(CI)I: root-Branch
   * 4 gnu.trove.map.hash.TCharIntHashMap.doPut(CII)I: I12 Branch 40 IFGE L214 - true
   * 5 gnu.trove.map.hash.TCharIntHashMap.doPut(CII)I: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test1()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      tCharIntHashMap0.put('t', (-80));
      assertEquals(1, tCharIntHashMap0.size());
      
      int int0 = tCharIntHashMap0.remove('t');
      assertEquals((-80), int0);
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.clear()V: root-Branch
   * 2 gnu.trove.map.hash.TCharIntHashMap.<init>([C[I)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 3 gnu.trove.map.hash.TCharIntHashMap.<init>([C[I)V: I24 Branch 33 IF_ICMPGE L119 - false
   */

  @Test
  public void test2()  throws Throwable  {
      char[] charArray0 = new char[1];
      int[] intArray0 = new int[10];
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      assertEquals(false, tCharIntHashMap0.isEmpty());
      
      tCharIntHashMap0.clear();
      assertEquals("{}", tCharIntHashMap0.toString());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharIntHashMap.containsKey(C)Z: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      tCharIntHashMap0.containsKey('j');
      assertEquals(23, tCharIntHashMap0.capacity());
  }

  //Test case number: 4
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.keySet()Lgnu/trove/set/TCharSet;: root-Branch
   * 2 gnu.trove.map.hash.TCharIntHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TCharIntHashMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TCharIntHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap((int) '@');
      tCharIntHashMap0.keySet();
      assertEquals(137, tCharIntHashMap0.capacity());
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.increment(C)Z: root-Branch
   * 2 gnu.trove.map.hash.TCharIntHashMap.adjustValue(CI)Z: I9 Branch 71 IFGE L477 - false
   * 3 gnu.trove.map.hash.TCharIntHashMap.<init>(IFCI)V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap((-1387), (float) (-1387), 'a', (int) 'a');
      boolean boolean0 = tCharIntHashMap0.increment('a');
      assertEquals(false, boolean0);
  }

  //Test case number: 6
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.iterator()Lgnu/trove/iterator/TCharIntIterator;: root-Branch
   * 2 gnu.trove.map.hash.TCharIntHashMap$TCharIntHashIterator.<init>(Lgnu/trove/map/hash/TCharIntHashMap;Lgnu/trove/map/hash/TCharIntHashMap;)V: root-Branch
   * 3 gnu.trove.map.hash.TCharIntHashMap.<init>(Lgnu/trove/map/TCharIntMap;)V: I10 Branch 34 IFEQ L133 - false
   * 4 gnu.trove.map.hash.TCharIntHashMap.<init>(Lgnu/trove/map/TCharIntMap;)V: I38 Branch 35 IFEQ L139 - false
   * 5 gnu.trove.map.hash.TCharIntHashMap.<init>(Lgnu/trove/map/TCharIntMap;)V: I50 Branch 36 IFEQ L143 - false
   * 6 gnu.trove.map.hash.TCharIntHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 7 gnu.trove.map.hash.TCharIntHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 8 gnu.trove.map.hash.TCharIntHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 9 gnu.trove.map.hash.TCharIntHashMap.putAll(Lgnu/trove/map/TCharIntMap;)V: I15 Branch 43 IFEQ L243 - true
   */

  @Test
  public void test6()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap((-1387), (float) (-1387), 'a', (int) 'a');
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap0);
      assertEquals(3, tCharIntHashMap1.capacity());
      assertEquals('a', tCharIntHashMap1.getNoEntryKey());
      assertEquals(97, tCharIntHashMap1.getNoEntryValue());
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharIntHashMap.forEachKey(Lgnu/trove/procedure/TCharProcedure;)Z: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      boolean boolean0 = tCharIntHashMap0.forEachKey((TCharProcedure) null);
      assertEquals(23, tCharIntHashMap0.capacity());
      assertEquals(true, boolean0);
  }

  //Test case number: 8
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap$TCharIntHashIterator.advance()V: root-Branch
   * 2 gnu.trove.map.hash.TCharIntHashMap$TCharIntHashIterator.value()I: root-Branch
   * 3 gnu.trove.map.hash.TCharIntHashMap$TCharIntHashIterator.key()C: root-Branch
   * 4 gnu.trove.map.hash.TCharIntHashMap.<init>(Lgnu/trove/map/TCharIntMap;)V: I38 Branch 35 IFEQ L139 - true
   * 5 gnu.trove.map.hash.TCharIntHashMap.<init>(Lgnu/trove/map/TCharIntMap;)V: I50 Branch 36 IFEQ L143 - true
   * 6 gnu.trove.map.hash.TCharIntHashMap.putAll(Lgnu/trove/map/TCharIntMap;)V: I15 Branch 43 IFEQ L243 - false
   * 7 gnu.trove.map.hash.TCharIntHashMap.iterator()Lgnu/trove/iterator/TCharIntIterator;: root-Branch
   * 8 gnu.trove.map.hash.TCharIntHashMap.putAll(Lgnu/trove/map/TCharIntMap;)V: I15 Branch 43 IFEQ L243 - true
   * 9 gnu.trove.map.hash.TCharIntHashMap.<init>(Lgnu/trove/map/TCharIntMap;)V: I10 Branch 34 IFEQ L133 - false
   * 10 gnu.trove.map.hash.TCharIntHashMap$TCharIntHashIterator.<init>(Lgnu/trove/map/hash/TCharIntHashMap;Lgnu/trove/map/hash/TCharIntHashMap;)V: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      char[] charArray0 = new char[1];
      int[] intArray0 = new int[10];
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap((TCharIntMap) tCharIntHashMap0);
      assertEquals(0, tCharIntHashMap1.getNoEntryValue());
      assertEquals(1, tCharIntHashMap1.size());
      assertEquals(23, tCharIntHashMap1.capacity());
      assertEquals("{\u0000=0}", tCharIntHashMap1.toString());
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharIntHashMap.putIfAbsent(CI)I: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test9()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap((int) '@');
      int int0 = tCharIntHashMap0.putIfAbsent('\u0000', '\u0000');
      assertEquals("{\u0000=0}", tCharIntHashMap0.toString());
      assertEquals(0, int0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharIntHashMap.putIfAbsent(CI)I: I9 Branch 39 IFGE L205 - false
   */

  @Test
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[1];
      int[] intArray0 = new int[10];
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      int int0 = tCharIntHashMap0.putIfAbsent('\u0000', 0);
      assertEquals(1, tCharIntHashMap0.size());
      assertEquals(0, int0);
      assertEquals(23, tCharIntHashMap0.capacity());
  }

  //Test case number: 11
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   * 2 gnu.trove.map.hash.TCharIntHashMap.doPut(CII)I: I12 Branch 40 IFGE L214 - false
   * 3 gnu.trove.map.hash.TCharIntHashMap.doPut(CII)I: I41 Branch 41 IFEQ L221 - true
   */

  @Test
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[10];
      int[] intArray0 = new int[3];
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      HashMap<Character, Integer> hashMap0 = new HashMap<Character, Integer>();
      tCharIntHashMap0.putAll((Map<? extends Character, ? extends Integer>) hashMap0);
      assertEquals(23, tCharIntHashMap0.capacity());
      assertEquals("{\u0000=0}", tCharIntHashMap0.toString());
      assertEquals(1, tCharIntHashMap0.size());
  }

  //Test case number: 12
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.get(C)I: I9 Branch 44 IFGE L253 - true
   * 2 gnu.trove.map.hash.TCharIntHashMap.adjustOrPutValue(CII)I: I9 Branch 72 IFGE L491 - true
   * 3 gnu.trove.map.hash.TCharIntHashMap.adjustOrPutValue(CII)I: I58 Branch 73 IFEQ L502 - false
   * 4 gnu.trove.map.hash.TCharIntHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 5 gnu.trove.map.hash.TCharIntHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 6 gnu.trove.map.hash.TCharIntHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 7 gnu.trove.map.hash.TCharIntHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 8 gnu.trove.map.hash.TCharIntHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 9 gnu.trove.map.hash.TCharIntHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 10 gnu.trove.map.hash.TCharIntHashMap.equals(Ljava/lang/Object;)Z: I84 Branch 78 IF_ICMPEQ L1200 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      tCharIntHashMap0.adjustOrPutValue('L', 0, (int) 'L');
      boolean boolean0 = tCharIntHashMap0.equals((Object) tCharIntHashMap0);
      assertEquals("{L=76}", tCharIntHashMap0.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharIntHashMap.get(C)I: I9 Branch 44 IFGE L253 - false
   */

  @Test
  public void test13()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      int int0 = tCharIntHashMap0.get('.');
      assertEquals(23, tCharIntHashMap0.capacity());
      assertEquals(0, int0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharIntHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   */

  @Test
  public void test14()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      tCharIntHashMap0.put('t', (-80));
      boolean boolean0 = tCharIntHashMap0.isEmpty();
      assertEquals(1, tCharIntHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 15
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   * 2 gnu.trove.map.hash.TCharIntHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(0, (float) 'k');
      boolean boolean0 = tCharIntHashMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TCharIntHashMap.remove(C)I: I14 Branch 46 IFLT L276 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      int int0 = tCharIntHashMap0.remove('4');
      assertEquals(0, int0);
      assertEquals(0, tCharIntHashMap0.size());
      assertEquals(23, tCharIntHashMap0.capacity());
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.keys()[C: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TCharIntHashMap.keys()[C: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TCharIntHashMap.keys()[C: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TCharIntHashMap.keys()[C: I34 Branch 48 IF_ICMPNE L304 - true
   */

  @Test
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[10];
      int[] intArray0 = new int[3];
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      char[] charArray1 = tCharIntHashMap0.keys();
      assertEquals(1, tCharIntHashMap0.size());
      assertEquals("{\u0000=0}", tCharIntHashMap0.toString());
      assertNotNull(charArray1);
      assertEquals(23, tCharIntHashMap0.capacity());
  }

  //Test case number: 18
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.keys([C)[C: I10 Branch 49 IF_ICMPGE L315 - true
   * 2 gnu.trove.map.hash.TCharIntHashMap.keys([C)[C: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TCharIntHashMap.keys([C)[C: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TCharIntHashMap.keys([C)[C: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(1264, (float) 1264, '~', 1918);
      char[] charArray0 = tCharIntHashMap0.keys(tCharIntHashMap0._set);
      assertNotNull(charArray0);
  }

  //Test case number: 19
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.keys([C)[C: I10 Branch 49 IF_ICMPGE L315 - false
   * 2 gnu.trove.map.hash.TCharIntHashMap.keys([C)[C: I44 Branch 51 IF_ICMPNE L323 - false
   * 3 gnu.trove.map.hash.TCharIntHashMap.keys([C)[C: I37 Branch 50 IFLE L322 - true
   * 4 gnu.trove.map.hash.TCharIntHashMap.keys([C)[C: I37 Branch 50 IFLE L322 - false
   * 5 gnu.trove.map.hash.TCharIntHashMap.keys([C)[C: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = '_';
      charArray0[3] = 'y';
      int[] intArray0 = new int[9];
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      TCharIntHashMap tCharIntHashMap1 = new TCharIntHashMap((-988), (-988));
      char[] charArray1 = tCharIntHashMap0.keys(tCharIntHashMap1._set);
      assertEquals(4, tCharIntHashMap0.size());
      assertNotNull(charArray1);
      assertEquals("{~=0, y=0, _=0, \u0000=0}", tCharIntHashMap0.toString());
  }

  //Test case number: 20
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.values()[I: I34 Branch 53 IF_ICMPNE L344 - false
   * 2 gnu.trove.map.hash.TCharIntHashMap.values()[I: I27 Branch 52 IFLE L343 - true
   * 3 gnu.trove.map.hash.TCharIntHashMap.values()[I: I27 Branch 52 IFLE L343 - false
   * 4 gnu.trove.map.hash.TCharIntHashMap.values()[I: I34 Branch 53 IF_ICMPNE L344 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(1264, (float) 1264, '~', 1918);
      tCharIntHashMap0.put('~', 0);
      tCharIntHashMap0.values();
      assertEquals(false, tCharIntHashMap0.isEmpty());
      assertEquals("{~=0}", tCharIntHashMap0.toString());
  }

  //Test case number: 21
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.values([I)[I: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TCharIntHashMap.values([I)[I: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TCharIntHashMap.values([I)[I: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TCharIntHashMap.values([I)[I: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap((int) '@');
      int[] intArray0 = new int[5];
      int[] intArray1 = tCharIntHashMap0.values(intArray0);
      assertNotNull(intArray1);
      assertEquals(137, tCharIntHashMap0.capacity());
      assertSame(intArray1, intArray0);
  }

  //Test case number: 22
  /*
   * 8 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.values([I)[I: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TCharIntHashMap.values([I)[I: I44 Branch 56 IF_ICMPNE L363 - false
   * 3 gnu.trove.map.hash.TCharIntHashMap.values()[I: I27 Branch 52 IFLE L343 - true
   * 4 gnu.trove.map.hash.TCharIntHashMap.values()[I: I27 Branch 52 IFLE L343 - false
   * 5 gnu.trove.map.hash.TCharIntHashMap.values()[I: I34 Branch 53 IF_ICMPNE L344 - true
   * 6 gnu.trove.map.hash.TCharIntHashMap.values([I)[I: I37 Branch 55 IFLE L362 - true
   * 7 gnu.trove.map.hash.TCharIntHashMap.values([I)[I: I37 Branch 55 IFLE L362 - false
   * 8 gnu.trove.map.hash.TCharIntHashMap.values([I)[I: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(1264, (float) 1264, '~', 1918);
      int[] intArray0 = tCharIntHashMap0.values();
      tCharIntHashMap0.put('~', 0);
      tCharIntHashMap0.values(intArray0);
      assertEquals("{~=0}", tCharIntHashMap0.toString());
      assertEquals(false, tCharIntHashMap0.isEmpty());
  }

  //Test case number: 23
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.containsValue(I)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TCharIntHashMap.containsValue(I)Z: I30 Branch 59 IF_ICMPNE L377 - true
   * 3 gnu.trove.map.hash.TCharIntHashMap.containsValue(I)Z: I18 Branch 57 IFLE L376 - true
   * 4 gnu.trove.map.hash.TCharIntHashMap.containsValue(I)Z: I18 Branch 57 IFLE L376 - false
   * 5 gnu.trove.map.hash.TCharIntHashMap.containsValue(I)Z: I25 Branch 58 IF_ICMPNE L377 - true
   */

  @Test
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[5];
      int[] intArray0 = new int[9];
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      boolean boolean0 = tCharIntHashMap0.containsValue((int) '_');
      assertEquals(23, tCharIntHashMap0.capacity());
      assertEquals("{\u0000=0}", tCharIntHashMap0.toString());
      assertEquals(1, tCharIntHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 24
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.containsValue(I)Z: I30 Branch 59 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TCharIntHashMap.containsValue(I)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TCharIntHashMap.containsValue(I)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 4 gnu.trove.map.hash.TCharIntHashMap.containsValue(I)Z: I25 Branch 58 IF_ICMPNE L377 - false
   */

  @Test
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '_';
      int[] intArray0 = new int[9];
      intArray0[1] = (int) '_';
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      boolean boolean0 = tCharIntHashMap0.containsValue((int) '_');
      assertEquals(23, tCharIntHashMap0.capacity());
      assertEquals(2, tCharIntHashMap0.size());
      assertEquals(true, boolean0);
      assertEquals("{_=95, \u0000=0}", tCharIntHashMap0.toString());
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TCharIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TCharIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test25()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(1264, (float) 1264, '~', 1918);
      boolean boolean0 = tCharIntHashMap0.forEachValue((TIntProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TCharIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TCharIntHashMap.forEachValue(Lgnu/trove/procedure/TIntProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(1264, (float) 1264, '~', 1918);
      tCharIntHashMap0.put('~', 0);
      // Undeclared exception!
      try {
        tCharIntHashMap0.forEachValue((TIntProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 27
  /*
   * 14 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.forEachEntry(Lgnu/trove/procedure/TCharIntProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 2 gnu.trove.map.hash.TCharIntHashMap.forEachEntry(Lgnu/trove/procedure/TCharIntProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 3 gnu.trove.map.hash.TCharIntHashMap$1.execute(CI)Z: I4 Branch 115 IFEQ L1233 - false
   * 4 gnu.trove.map.hash.TCharIntHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 5 gnu.trove.map.hash.TCharIntHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 6 gnu.trove.map.hash.TCharIntHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 7 gnu.trove.map.hash.TCharIntHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 8 gnu.trove.map.hash.TCharIntHashMap.adjustOrPutValue(CII)I: I9 Branch 72 IFGE L491 - true
   * 9 gnu.trove.map.hash.TCharIntHashMap.adjustOrPutValue(CII)I: I58 Branch 73 IFEQ L502 - false
   * 10 gnu.trove.map.hash.TCharIntHashMap$1.<init>(Lgnu/trove/map/hash/TCharIntHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 11 gnu.trove.map.hash.TCharIntHashMap.toString()Ljava/lang/String;: root-Branch
   * 12 gnu.trove.map.hash.TCharIntHashMap.forEachEntry(Lgnu/trove/procedure/TCharIntProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 13 gnu.trove.map.hash.TCharIntHashMap.forEachEntry(Lgnu/trove/procedure/TCharIntProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 14 gnu.trove.map.hash.TCharIntHashMap.forEachEntry(Lgnu/trove/procedure/TCharIntProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   */

  @Test
  public void test27()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(0, (-1.0F), ']', (int) '5');
      tCharIntHashMap0.adjustOrPutValue('i', (-1056), (-1766));
      String string0 = tCharIntHashMap0.toString();
      assertEquals(false, tCharIntHashMap0.isEmpty());
      assertEquals("{i=-1766}", string0);
  }

  //Test case number: 28
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TCharIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TCharIntHashMap.transformValues(Lgnu/trove/function/TIntFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(0, (float) 'k');
      tCharIntHashMap0.transformValues((TIntFunction) null);
      assertEquals('\u0000', tCharIntHashMap0.getNoEntryKey());
  }

  //Test case number: 29
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.retainEntries(Lgnu/trove/procedure/TCharIntProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TCharIntHashMap.retainEntries(Lgnu/trove/procedure/TCharIntProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TCharIntHashMap.retainEntries(Lgnu/trove/procedure/TCharIntProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   * 4 gnu.trove.map.hash.TCharIntHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test29()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(0);
      boolean boolean0 = tCharIntHashMap0.retainEntries((TCharIntProcedure) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 30
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.retainEntries(Lgnu/trove/procedure/TCharIntProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TCharIntHashMap.retainEntries(Lgnu/trove/procedure/TCharIntProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TCharIntHashMap.retainEntries(Lgnu/trove/procedure/TCharIntProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test30()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      tCharIntHashMap0.put('t', (-80));
      // Undeclared exception!
      try {
        tCharIntHashMap0.retainEntries((TCharIntProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 31
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.adjustValue(CI)Z: I9 Branch 71 IFGE L477 - true
   * 2 gnu.trove.map.hash.TCharIntHashMap.increment(C)Z: root-Branch
   */

  @Test
  public void test31()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(1264, (float) 1264, '~', 1918);
      tCharIntHashMap0.put('~', 0);
      boolean boolean0 = tCharIntHashMap0.increment('~');
      assertEquals(1, tCharIntHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 32
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.adjustOrPutValue(CII)I: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TCharIntHashMap.adjustOrPutValue(CII)I: I58 Branch 73 IFEQ L502 - true
   * 3 gnu.trove.map.hash.TCharIntHashMap.<init>(IFCI)V: root-Branch
   */

  @Test
  public void test32()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(1264, (float) 1264, '~', 1918);
      tCharIntHashMap0.put('~', 0);
      int int0 = tCharIntHashMap0.adjustOrPutValue('~', (int) '~', (-1411));
      assertEquals(false, tCharIntHashMap0.isEmpty());
      assertEquals(126, int0);
  }

  //Test case number: 33
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   * 2 gnu.trove.map.hash.TCharIntHashMap.<init>()V: root-Branch
   */

  @Test
  public void test33()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap();
      boolean boolean0 = tCharIntHashMap0.equals((Object) null);
      assertEquals(false, boolean0);
      assertEquals(23, tCharIntHashMap0.capacity());
  }

  //Test case number: 34
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 2 gnu.trove.map.hash.TCharIntHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 3 gnu.trove.map.hash.TCharIntHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   * 4 gnu.trove.map.hash.TCharIntHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   */

  @Test
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[1];
      int[] intArray0 = new int[10];
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      int int0 = tCharIntHashMap0.hashCode();
      assertEquals(23, tCharIntHashMap0.capacity());
      assertEquals(0, int0);
      assertEquals(1, tCharIntHashMap0.size());
  }

  //Test case number: 35
  /*
   * 13 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap$1.execute(CI)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TCharIntHashMap$1.<init>(Lgnu/trove/map/hash/TCharIntHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 3 gnu.trove.map.hash.TCharIntHashMap$1.execute(CI)Z: I4 Branch 115 IFEQ L1233 - false
   * 4 gnu.trove.map.hash.TCharIntHashMap.toString()Ljava/lang/String;: root-Branch
   * 5 gnu.trove.map.hash.TCharIntHashMap.doPut(CII)I: I12 Branch 40 IFGE L214 - false
   * 6 gnu.trove.map.hash.TCharIntHashMap.doPut(CII)I: I41 Branch 41 IFEQ L221 - true
   * 7 gnu.trove.map.hash.TCharIntHashMap.forEachEntry(Lgnu/trove/procedure/TCharIntProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 8 gnu.trove.map.hash.TCharIntHashMap.forEachEntry(Lgnu/trove/procedure/TCharIntProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 9 gnu.trove.map.hash.TCharIntHashMap.forEachEntry(Lgnu/trove/procedure/TCharIntProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 10 gnu.trove.map.hash.TCharIntHashMap.forEachEntry(Lgnu/trove/procedure/TCharIntProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 11 gnu.trove.map.hash.TCharIntHashMap.forEachEntry(Lgnu/trove/procedure/TCharIntProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 12 gnu.trove.map.hash.TCharIntHashMap.<init>([C[I)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 13 gnu.trove.map.hash.TCharIntHashMap.<init>([C[I)V: I24 Branch 33 IF_ICMPGE L119 - false
   */

  @Test
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'M';
      int[] intArray0 = new int[8];
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(charArray0, intArray0);
      String string0 = tCharIntHashMap0.toString();
      assertEquals(2, tCharIntHashMap0.size());
      assertEquals(23, tCharIntHashMap0.capacity());
      assertEquals("{M=0, \u0000=0}", string0);
      assertNotNull(string0);
  }

  //Test case number: 36
  /*
   * 11 covered goals:
   * 1 gnu.trove.map.hash.TCharIntHashMap.readExternal(Ljava/io/ObjectInput;)V: I25 Branch 85 IFLE L1281 - false
   * 2 gnu.trove.map.hash.TCharIntHashMap.<init>(IF)V: root-Branch
   * 3 gnu.trove.map.hash.TCharIntHashMap.put(CI)I: root-Branch
   * 4 gnu.trove.map.hash.TCharIntHashMap.setUp(I)I: root-Branch
   * 5 gnu.trove.map.hash.TCharIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 6 gnu.trove.map.hash.TCharIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 7 gnu.trove.map.hash.TCharIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 8 gnu.trove.map.hash.TCharIntHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 9 gnu.trove.map.hash.TCharIntHashMap.doPut(CII)I: I12 Branch 40 IFGE L214 - true
   * 10 gnu.trove.map.hash.TCharIntHashMap.doPut(CII)I: I41 Branch 41 IFEQ L221 - false
   * 11 gnu.trove.map.hash.TCharIntHashMap.readExternal(Ljava/io/ObjectInput;)V: I25 Branch 85 IFLE L1281 - true
   */

  @Test
  public void test36()  throws Throwable  {
      TCharIntHashMap tCharIntHashMap0 = new TCharIntHashMap(73, 73);
      tCharIntHashMap0.put('L', 73);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 109);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
      tCharIntHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      objectOutputStream0.reset();
      ObjectInputStream objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
      tCharIntHashMap0.readExternal((ObjectInput) objectInputStream0);
  }
}
