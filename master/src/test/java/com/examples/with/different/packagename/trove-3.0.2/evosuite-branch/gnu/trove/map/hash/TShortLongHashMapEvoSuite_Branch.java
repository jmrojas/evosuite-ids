/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TLongCollection;
import gnu.trove.function.TLongFunction;
import gnu.trove.map.TShortLongMap;
import gnu.trove.map.hash.TShortLongHashMap;
import gnu.trove.procedure.TLongProcedure;
import gnu.trove.procedure.TShortLongProcedure;
import gnu.trove.procedure.TShortProcedure;
import gnu.trove.set.TShortSet;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortLongHashMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap$TValueView.<init>(Lgnu/trove/map/hash/TShortLongHashMap;)V: root-Branch
   * 2 gnu.trove.map.hash.TShortLongHashMap.setUp(I)I: root-Branch
   * 3 gnu.trove.map.hash.TShortLongHashMap.valueCollection()Lgnu/trove/TLongCollection;: root-Branch
   * 4 gnu.trove.map.hash.TShortLongHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((int) (short)1113, (float) (short)1555);
      TLongCollection tLongCollection0 = tShortLongHashMap0.valueCollection();
      assertEquals(true, tLongCollection0.isEmpty());
  }

  //Test case number: 1
  /*
   * 15 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap$TShortLongHashIterator.value()J: root-Branch
   * 2 gnu.trove.map.hash.TShortLongHashMap$TShortLongHashIterator.advance()V: root-Branch
   * 3 gnu.trove.map.hash.TShortLongHashMap$TShortLongHashIterator.<init>(Lgnu/trove/map/hash/TShortLongHashMap;Lgnu/trove/map/hash/TShortLongHashMap;)V: root-Branch
   * 4 gnu.trove.map.hash.TShortLongHashMap$TShortLongHashIterator.key()S: root-Branch
   * 5 gnu.trove.map.hash.TShortLongHashMap.iterator()Lgnu/trove/iterator/TShortLongIterator;: root-Branch
   * 6 gnu.trove.map.hash.TShortLongHashMap.put(SJ)J: root-Branch
   * 7 gnu.trove.map.hash.TShortLongHashMap.<init>([S[J)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 8 gnu.trove.map.hash.TShortLongHashMap.<init>([S[J)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 9 gnu.trove.map.hash.TShortLongHashMap.<init>(Lgnu/trove/map/TShortLongMap;)V: I10 Branch 34 IFEQ L133 - false
   * 10 gnu.trove.map.hash.TShortLongHashMap.<init>(Lgnu/trove/map/TShortLongMap;)V: I38 Branch 35 IFEQ L139 - true
   * 11 gnu.trove.map.hash.TShortLongHashMap.<init>(Lgnu/trove/map/TShortLongMap;)V: I52 Branch 36 IFEQ L143 - true
   * 12 gnu.trove.map.hash.TShortLongHashMap.doPut(SJI)J: I12 Branch 40 IFGE L214 - true
   * 13 gnu.trove.map.hash.TShortLongHashMap.doPut(SJI)J: I41 Branch 41 IFEQ L221 - false
   * 14 gnu.trove.map.hash.TShortLongHashMap.putAll(Lgnu/trove/map/TShortLongMap;)V: I15 Branch 43 IFEQ L243 - true
   * 15 gnu.trove.map.hash.TShortLongHashMap.putAll(Lgnu/trove/map/TShortLongMap;)V: I15 Branch 43 IFEQ L243 - false
   */

  @Test
  public void test1()  throws Throwable  {
      short[] shortArray0 = new short[1];
      long[] longArray0 = new long[7];
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap((TShortLongMap) tShortLongHashMap0);
      assertEquals(23, tShortLongHashMap1.capacity());
      assertEquals(0L, tShortLongHashMap1.getNoEntryValue());
      assertEquals("{0=0}", tShortLongHashMap1.toString());
      assertEquals(false, tShortLongHashMap1.isEmpty());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.clear()V: root-Branch
   * 2 gnu.trove.map.hash.TShortLongHashMap.<init>(I)V: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(13);
      tShortLongHashMap0.clear();
      assertEquals(31, tShortLongHashMap0.capacity());
      assertEquals("{}", tShortLongHashMap0.toString());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TShortLongHashMap.forEachKey(Lgnu/trove/procedure/TShortProcedure;)Z: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      short[] shortArray0 = new short[1];
      long[] longArray0 = new long[7];
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
      // Undeclared exception!
      try {
        tShortLongHashMap0.forEachKey((TShortProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 4
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.increment(S)Z: root-Branch
   * 2 gnu.trove.map.hash.TShortLongHashMap.<init>()V: root-Branch
   * 3 gnu.trove.map.hash.TShortLongHashMap.adjustValue(SJ)Z: I9 Branch 71 IFGE L477 - false
   */

  @Test
  public void test4()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      boolean boolean0 = tShortLongHashMap0.increment((short)0);
      assertEquals(23, tShortLongHashMap0.capacity());
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.keySet()Lgnu/trove/set/TShortSet;: root-Branch
   * 2 gnu.trove.map.hash.TShortLongHashMap$TKeyView.<init>(Lgnu/trove/map/hash/TShortLongHashMap;)V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((-1055), (-1055));
      TShortSet tShortSet0 = tShortLongHashMap0.keySet();
      assertEquals(true, tShortSet0.isEmpty());
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TShortLongHashMap.containsKey(S)Z: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((int) (short)1113, (float) (short)1555);
      boolean boolean0 = tShortLongHashMap0.containsKey((short)1555);
      assertEquals(false, boolean0);
  }

  //Test case number: 7
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.removeAt(I)V: root-Branch
   * 2 gnu.trove.map.hash.TShortLongHashMap.remove(S)J: I14 Branch 46 IFLT L276 - false
   * 3 gnu.trove.map.hash.TShortLongHashMap.doPut(SJI)J: I12 Branch 40 IFGE L214 - false
   * 4 gnu.trove.map.hash.TShortLongHashMap.doPut(SJI)J: I41 Branch 41 IFEQ L221 - true
   */

  @Test
  public void test7()  throws Throwable  {
      short[] shortArray0 = new short[7];
      long[] longArray0 = new long[6];
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
      assertEquals("{0=0}", tShortLongHashMap0.toString());
      
      long long0 = tShortLongHashMap0.remove((short)0);
      assertEquals(0, tShortLongHashMap0.size());
      assertEquals(0L, long0);
  }

  //Test case number: 8
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.<init>(Lgnu/trove/map/TShortLongMap;)V: I38 Branch 35 IFEQ L139 - false
   * 2 gnu.trove.map.hash.TShortLongHashMap.<init>(Lgnu/trove/map/TShortLongMap;)V: I52 Branch 36 IFEQ L143 - false
   * 3 gnu.trove.map.hash.TShortLongHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 4 gnu.trove.map.hash.TShortLongHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 5 gnu.trove.map.hash.TShortLongHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   * 6 gnu.trove.map.hash.TShortLongHashMap$TShortLongHashIterator.<init>(Lgnu/trove/map/hash/TShortLongHashMap;Lgnu/trove/map/hash/TShortLongHashMap;)V: root-Branch
   * 7 gnu.trove.map.hash.TShortLongHashMap.iterator()Lgnu/trove/iterator/TShortLongIterator;: root-Branch
   * 8 gnu.trove.map.hash.TShortLongHashMap.<init>(IFSJ)V: root-Branch
   * 9 gnu.trove.map.hash.TShortLongHashMap.putAll(Lgnu/trove/map/TShortLongMap;)V: I15 Branch 43 IFEQ L243 - true
   * 10 gnu.trove.map.hash.TShortLongHashMap.<init>(Lgnu/trove/map/TShortLongMap;)V: I10 Branch 34 IFEQ L133 - false
   */

//   @Test
//   public void test8()  throws Throwable  {
//       TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((-1), (float) (-1), (short)10, (long) (short)10);
//       TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap((TShortLongMap) tShortLongHashMap0);
//       assertEquals(10, tShortLongHashMap1.getNoEntryKey());
//       assertEquals(10L, tShortLongHashMap1.getNoEntryValue());
//       assertEquals(3, tShortLongHashMap1.capacity());
//   }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TShortLongHashMap.putIfAbsent(SJ)J: I9 Branch 39 IFGE L205 - false
   */

  @Test
  public void test9()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)257;
      long[] longArray0 = new long[7];
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
      long long0 = tShortLongHashMap0.putIfAbsent((short)257, 0L);
      assertEquals(1, tShortLongHashMap0.size());
      assertEquals(0L, long0);
      assertEquals(17, tShortLongHashMap0.capacity());
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - false
   * 2 gnu.trove.map.hash.TShortLongHashMap.putAll(Ljava/util/Map;)V: I15 Branch 42 IFEQ L233 - true
   */

  @Test
  public void test10()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(13);
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>();
      Short short0 = new Short((short)0);
      Long long0 = new Long((long) 13);
      hashMap0.put(short0, long0);
      tShortLongHashMap0.putAll((Map<? extends Short, ? extends Long>) hashMap0);
      assertEquals(false, tShortLongHashMap0.isEmpty());
      assertEquals("{0=13}", tShortLongHashMap0.toString());
  }

  //Test case number: 11
  /*
   * 10 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.get(S)J: I9 Branch 44 IFGE L253 - true
   * 2 gnu.trove.map.hash.TShortLongHashMap.adjustOrPutValue(SJJ)J: I9 Branch 72 IFGE L491 - true
   * 3 gnu.trove.map.hash.TShortLongHashMap.adjustOrPutValue(SJJ)J: I58 Branch 73 IFEQ L502 - false
   * 4 gnu.trove.map.hash.TShortLongHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 5 gnu.trove.map.hash.TShortLongHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 6 gnu.trove.map.hash.TShortLongHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   * 7 gnu.trove.map.hash.TShortLongHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 8 gnu.trove.map.hash.TShortLongHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 9 gnu.trove.map.hash.TShortLongHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 10 gnu.trove.map.hash.TShortLongHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((-947));
      tShortLongHashMap0.adjustOrPutValue((short)0, 0L, (-947L));
      boolean boolean0 = tShortLongHashMap0.equals((Object) tShortLongHashMap0);
      assertEquals(false, tShortLongHashMap0.isEmpty());
      assertEquals(true, boolean0);
  }

  //Test case number: 12
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.get(S)J: I9 Branch 44 IFGE L253 - false
   * 2 gnu.trove.map.hash.TShortLongHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - false
   * 3 gnu.trove.map.hash.TShortLongHashMap.equals(Ljava/lang/Object;)Z: I89 Branch 79 IFEQ L1200 - false
   * 4 gnu.trove.map.hash.TShortLongHashMap.equals(Ljava/lang/Object;)Z: I93 Branch 80 IFEQ L1200 - true
   * 5 gnu.trove.map.hash.TShortLongHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      long[] longArray0 = new long[3];
      tShortLongHashMap0.adjustOrPutValue((short) (-1), 0L, (-1L));
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap(tShortLongHashMap0._set, longArray0);
      boolean boolean0 = tShortLongHashMap0.equals((Object) tShortLongHashMap1);
      assertEquals(1, tShortLongHashMap0.size());
      assertEquals(true, boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TShortLongHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((int) (short)1113, (float) (short)1555);
      tShortLongHashMap0.put((short)0, (short) (-659));
      boolean boolean0 = tShortLongHashMap0.isEmpty();
      assertEquals(1, tShortLongHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TShortLongHashMap.isEmpty()Z: I5 Branch 45 IF_ICMPNE L268 - false
   */

  @Test
  public void test14()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((-947));
      boolean boolean0 = tShortLongHashMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TShortLongHashMap.remove(S)J: I14 Branch 46 IFLT L276 - true
   */

  @Test
  public void test15()  throws Throwable  {
      short[] shortArray0 = new short[7];
      long[] longArray0 = new long[6];
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
      long long0 = tShortLongHashMap0.remove((short)1751);
      assertEquals("{0=0}", tShortLongHashMap0.toString());
      assertEquals(17, tShortLongHashMap0.capacity());
      assertEquals(1, tShortLongHashMap0.size());
      assertEquals(0L, long0);
  }

  //Test case number: 16
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.keys()[S: I34 Branch 48 IF_ICMPNE L304 - false
   * 2 gnu.trove.map.hash.TShortLongHashMap.keys()[S: I27 Branch 47 IFLE L303 - true
   * 3 gnu.trove.map.hash.TShortLongHashMap.keys()[S: I27 Branch 47 IFLE L303 - false
   * 4 gnu.trove.map.hash.TShortLongHashMap.keys()[S: I34 Branch 48 IF_ICMPNE L304 - true
   * 5 gnu.trove.map.hash.TShortLongHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 6 gnu.trove.map.hash.TShortLongHashMap.putIfAbsent(SJ)J: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((-326), (-326));
      tShortLongHashMap0.putIfAbsent((short) (-1313), (short) (-1313));
      tShortLongHashMap0.keys();
      assertEquals(1, tShortLongHashMap0.size());
      assertEquals("{-1313=-1313}", tShortLongHashMap0.toString());
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.keys([S)[S: I10 Branch 49 IF_ICMPGE L315 - true
   * 2 gnu.trove.map.hash.TShortLongHashMap.keys([S)[S: I37 Branch 50 IFLE L322 - true
   * 3 gnu.trove.map.hash.TShortLongHashMap.keys([S)[S: I37 Branch 50 IFLE L322 - false
   * 4 gnu.trove.map.hash.TShortLongHashMap.keys([S)[S: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test17()  throws Throwable  {
      short[] shortArray0 = new short[7];
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((-326), (-326));
      short[] shortArray1 = tShortLongHashMap0.keys(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
  }

  //Test case number: 18
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.keys([S)[S: I10 Branch 49 IF_ICMPGE L315 - false
   * 2 gnu.trove.map.hash.TShortLongHashMap.keys([S)[S: I44 Branch 51 IF_ICMPNE L323 - false
   * 3 gnu.trove.map.hash.TShortLongHashMap.keys([S)[S: I37 Branch 50 IFLE L322 - true
   * 4 gnu.trove.map.hash.TShortLongHashMap.keys([S)[S: I37 Branch 50 IFLE L322 - false
   * 5 gnu.trove.map.hash.TShortLongHashMap.keys([S)[S: I44 Branch 51 IF_ICMPNE L323 - true
   */

  @Test
  public void test18()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[1] = (short)1113;
      shortArray0[4] = (short)1555;
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((int) (short)1113, (float) (short)1555);
      shortArray0[6] = (short) (-659);
      long[] longArray0 = new long[9];
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap(shortArray0, longArray0);
      short[] shortArray1 = tShortLongHashMap1.keys(tShortLongHashMap0._set);
      assertNotNull(shortArray1);
      assertEquals(4, tShortLongHashMap1.size());
      assertEquals("{-659=0, 1555=0, 1113=0, 0=0}", tShortLongHashMap1.toString());
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.values()[J: I27 Branch 52 IFLE L343 - true
   * 2 gnu.trove.map.hash.TShortLongHashMap.values()[J: I27 Branch 52 IFLE L343 - false
   * 3 gnu.trove.map.hash.TShortLongHashMap.values()[J: I34 Branch 53 IF_ICMPNE L344 - true
   * 4 gnu.trove.map.hash.TShortLongHashMap.values()[J: I34 Branch 53 IF_ICMPNE L344 - false
   */

  @Test
  public void test19()  throws Throwable  {
      short[] shortArray0 = new short[7];
      long[] longArray0 = new long[6];
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
      long[] longArray1 = tShortLongHashMap0.values();
      assertEquals("{0=0}", tShortLongHashMap0.toString());
      assertNotNull(longArray1);
      assertEquals(1, tShortLongHashMap0.size());
  }

  //Test case number: 20
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.values([J)[J: I10 Branch 54 IF_ICMPGE L355 - true
   * 2 gnu.trove.map.hash.TShortLongHashMap.values([J)[J: I37 Branch 55 IFLE L362 - true
   * 3 gnu.trove.map.hash.TShortLongHashMap.values([J)[J: I37 Branch 55 IFLE L362 - false
   * 4 gnu.trove.map.hash.TShortLongHashMap.values([J)[J: I44 Branch 56 IF_ICMPNE L363 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((-947));
      long[] longArray0 = new long[3];
      long[] longArray1 = tShortLongHashMap0.values(longArray0);
      assertSame(longArray0, longArray1);
      assertNotNull(longArray1);
  }

  //Test case number: 21
  /*
   * 7 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.values([J)[J: I10 Branch 54 IF_ICMPGE L355 - false
   * 2 gnu.trove.map.hash.TShortLongHashMap.values([J)[J: I44 Branch 56 IF_ICMPNE L363 - false
   * 3 gnu.trove.map.hash.TShortLongHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - false
   * 4 gnu.trove.map.hash.TShortLongHashMap.values([J)[J: I37 Branch 55 IFLE L362 - true
   * 5 gnu.trove.map.hash.TShortLongHashMap.values([J)[J: I37 Branch 55 IFLE L362 - false
   * 6 gnu.trove.map.hash.TShortLongHashMap.values([J)[J: I44 Branch 56 IF_ICMPNE L363 - true
   * 7 gnu.trove.map.hash.TShortLongHashMap.putIfAbsent(SJ)J: I9 Branch 39 IFGE L205 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((-326), (-326));
      tShortLongHashMap0.putIfAbsent((short) (-1313), (short) (-1313));
      tShortLongHashMap0.put((short)0, (short) (-1313));
      long[] longArray0 = new long[1];
      tShortLongHashMap0.values(longArray0);
      assertEquals(false, tShortLongHashMap0.isEmpty());
      assertEquals("{-1313=-1313, 0=-1313}", tShortLongHashMap0.toString());
  }

  //Test case number: 22
  /*
   * 5 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.containsValue(J)Z: I25 Branch 58 IF_ICMPNE L377 - false
   * 2 gnu.trove.map.hash.TShortLongHashMap.containsValue(J)Z: I31 Branch 59 IFNE L377 - true
   * 3 gnu.trove.map.hash.TShortLongHashMap.containsValue(J)Z: I18 Branch 57 IFLE L376 - true
   * 4 gnu.trove.map.hash.TShortLongHashMap.containsValue(J)Z: I18 Branch 57 IFLE L376 - false
   * 5 gnu.trove.map.hash.TShortLongHashMap.containsValue(J)Z: I25 Branch 58 IF_ICMPNE L377 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((int) (short)1113, (float) (short)1555);
      tShortLongHashMap0.put((short)0, (short) (-659));
      boolean boolean0 = tShortLongHashMap0.containsValue(0L);
      assertEquals(1, tShortLongHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 23
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.containsValue(J)Z: I31 Branch 59 IFNE L377 - false
   * 2 gnu.trove.map.hash.TShortLongHashMap.containsValue(J)Z: I18 Branch 57 IFLE L376 - false
   * 3 gnu.trove.map.hash.TShortLongHashMap.containsValue(J)Z: I25 Branch 58 IF_ICMPNE L377 - true
   * 4 gnu.trove.map.hash.TShortLongHashMap.containsValue(J)Z: I25 Branch 58 IF_ICMPNE L377 - false
   */

  @Test
  public void test23()  throws Throwable  {
      short[] shortArray0 = new short[10];
      long[] longArray0 = new long[9];
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
      boolean boolean0 = tShortLongHashMap0.containsValue(0L);
      assertEquals(true, boolean0);
      assertEquals(1, tShortLongHashMap0.size());
      assertEquals("{0=0}", tShortLongHashMap0.toString());
      assertEquals(23, tShortLongHashMap0.capacity());
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.forEachValue(Lgnu/trove/procedure/TLongProcedure;)Z: I18 Branch 60 IFLE L407 - true
   * 2 gnu.trove.map.hash.TShortLongHashMap.forEachValue(Lgnu/trove/procedure/TLongProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TShortLongHashMap.forEachValue(Lgnu/trove/procedure/TLongProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((int) (short)10);
      boolean boolean0 = tShortLongHashMap0.forEachValue((TLongProcedure) null);
      assertEquals(true, boolean0);
      assertEquals(23, tShortLongHashMap0.capacity());
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.forEachValue(Lgnu/trove/procedure/TLongProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - false
   * 2 gnu.trove.map.hash.TShortLongHashMap.forEachValue(Lgnu/trove/procedure/TLongProcedure;)Z: I18 Branch 60 IFLE L407 - false
   * 3 gnu.trove.map.hash.TShortLongHashMap.forEachValue(Lgnu/trove/procedure/TLongProcedure;)Z: I25 Branch 61 IF_ICMPNE L408 - true
   */

  @Test
  public void test25()  throws Throwable  {
      short[] shortArray0 = new short[7];
      long[] longArray0 = new long[5];
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
      // Undeclared exception!
      try {
        tShortLongHashMap0.forEachValue((TLongProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.transformValues(Lgnu/trove/function/TLongFunction;)V: I18 Branch 66 IFLE L434 - true
   * 2 gnu.trove.map.hash.TShortLongHashMap.transformValues(Lgnu/trove/function/TLongFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TShortLongHashMap.transformValues(Lgnu/trove/function/TLongFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((int) (short)1184);
      tShortLongHashMap0.transformValues((TLongFunction) null);
      assertEquals(2411, tShortLongHashMap0.capacity());
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.transformValues(Lgnu/trove/function/TLongFunction;)V: I25 Branch 67 IF_ICMPNE L435 - false
   * 2 gnu.trove.map.hash.TShortLongHashMap.transformValues(Lgnu/trove/function/TLongFunction;)V: I18 Branch 66 IFLE L434 - false
   * 3 gnu.trove.map.hash.TShortLongHashMap.transformValues(Lgnu/trove/function/TLongFunction;)V: I25 Branch 67 IF_ICMPNE L435 - true
   */

  @Test
  public void test27()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((int) (short)1113, (float) (short)1555);
      tShortLongHashMap0.put((short)0, (short) (-659));
      // Undeclared exception!
      try {
        tShortLongHashMap0.transformValues((TLongFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 6 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.retainEntries(Lgnu/trove/procedure/TShortLongProcedure;)Z: I31 Branch 68 IFLE L453 - true
   * 2 gnu.trove.map.hash.TShortLongHashMap.retainEntries(Lgnu/trove/procedure/TShortLongProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TShortLongHashMap.retainEntries(Lgnu/trove/procedure/TShortLongProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   * 4 gnu.trove.map.hash.TShortLongHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - true
   * 5 gnu.trove.map.hash.TShortLongHashMap.rehash(I)V: I46 Branch 37 IFLE L185 - false
   * 6 gnu.trove.map.hash.TShortLongHashMap.rehash(I)V: I53 Branch 38 IF_ICMPNE L186 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((-1055), (-1055));
      boolean boolean0 = tShortLongHashMap0.retainEntries((TShortLongProcedure) null);
      assertEquals(false, boolean0);
      assertEquals(3, tShortLongHashMap0.capacity());
      assertEquals("{}", tShortLongHashMap0.toString());
  }

  //Test case number: 29
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.retainEntries(Lgnu/trove/procedure/TShortLongProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - false
   * 2 gnu.trove.map.hash.TShortLongHashMap.retainEntries(Lgnu/trove/procedure/TShortLongProcedure;)Z: I31 Branch 68 IFLE L453 - false
   * 3 gnu.trove.map.hash.TShortLongHashMap.retainEntries(Lgnu/trove/procedure/TShortLongProcedure;)Z: I38 Branch 69 IF_ICMPNE L454 - true
   */

  @Test
  public void test29()  throws Throwable  {
      short[] shortArray0 = new short[6];
      long[] longArray0 = new long[8];
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
      // Undeclared exception!
      try {
        tShortLongHashMap0.retainEntries((TShortLongProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.adjustValue(SJ)Z: I9 Branch 71 IFGE L477 - true
   * 2 gnu.trove.map.hash.TShortLongHashMap.increment(S)Z: root-Branch
   */

  @Test
  public void test30()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap();
      long[] longArray0 = new long[1];
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap(tShortLongHashMap0._set, longArray0);
      boolean boolean0 = tShortLongHashMap1.increment((short)0);
      assertEquals("{0=1}", tShortLongHashMap1.toString());
      assertEquals(true, boolean0);
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.adjustOrPutValue(SJJ)J: I9 Branch 72 IFGE L491 - false
   * 2 gnu.trove.map.hash.TShortLongHashMap.adjustOrPutValue(SJJ)J: I58 Branch 73 IFEQ L502 - true
   * 3 gnu.trove.map.hash.TShortLongHashMap.<init>(IF)V: root-Branch
   */

  @Test
  public void test31()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((int) (short)1113, (float) (short)1555);
      tShortLongHashMap0.put((short)0, (short) (-659));
      long long0 = tShortLongHashMap0.adjustOrPutValue((short)0, 0L, (long) (short)1113);
      assertEquals(false, tShortLongHashMap0.isEmpty());
      assertEquals((-659L), long0);
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * 1 gnu.trove.map.hash.TShortLongHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - false
   */

  @Test
  public void test32()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((-947));
      boolean boolean0 = tShortLongHashMap0.equals((Object) "-689");
      assertEquals(false, boolean0);
  }

  //Test case number: 33
  /*
   * 2 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - false
   * 2 gnu.trove.map.hash.TShortLongHashMap.<init>()V: root-Branch
   */

  @Test
  public void test33()  throws Throwable  {
      short[] shortArray0 = new short[7];
      long[] longArray0 = new long[6];
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap();
      boolean boolean0 = tShortLongHashMap0.equals((Object) tShortLongHashMap1);
      assertEquals(17, tShortLongHashMap0.capacity());
      assertEquals("{0=0}", tShortLongHashMap0.toString());
      assertEquals(1, tShortLongHashMap0.size());
      assertEquals(false, boolean0);
      assertFalse(tShortLongHashMap1.equals(tShortLongHashMap0));
  }

  //Test case number: 34
  /*
   * 11 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.equals(Ljava/lang/Object;)Z: I93 Branch 80 IFEQ L1200 - false
   * 2 gnu.trove.map.hash.TShortLongHashMap.equals(Ljava/lang/Object;)Z: I4 Branch 74 IFNE L1184 - true
   * 3 gnu.trove.map.hash.TShortLongHashMap.equals(Ljava/lang/Object;)Z: I20 Branch 75 IF_ICMPEQ L1188 - true
   * 4 gnu.trove.map.hash.TShortLongHashMap.equals(Ljava/lang/Object;)Z: I53 Branch 76 IFLE L1195 - false
   * 5 gnu.trove.map.hash.TShortLongHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - true
   * 6 gnu.trove.map.hash.TShortLongHashMap.equals(Ljava/lang/Object;)Z: I60 Branch 77 IF_ICMPNE L1196 - false
   * 7 gnu.trove.map.hash.TShortLongHashMap.equals(Ljava/lang/Object;)Z: I85 Branch 78 IFEQ L1200 - false
   * 8 gnu.trove.map.hash.TShortLongHashMap.equals(Ljava/lang/Object;)Z: I89 Branch 79 IFEQ L1200 - false
   * 9 gnu.trove.map.hash.TShortLongHashMap.adjustOrPutValue(SJJ)J: I9 Branch 72 IFGE L491 - true
   * 10 gnu.trove.map.hash.TShortLongHashMap.adjustOrPutValue(SJJ)J: I58 Branch 73 IFEQ L502 - false
   * 11 gnu.trove.map.hash.TShortLongHashMap.get(S)J: I9 Branch 44 IFGE L253 - true
   */

  @Test
  public void test34()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((-947));
      long[] longArray0 = new long[3];
      tShortLongHashMap0.adjustOrPutValue((short)0, 0L, (-947L));
      longArray0[2] = (long) (short) (-689);
      TShortLongHashMap tShortLongHashMap1 = new TShortLongHashMap(tShortLongHashMap0._set, longArray0);
      boolean boolean0 = tShortLongHashMap0.equals((Object) tShortLongHashMap1);
      assertEquals(1, tShortLongHashMap0.size());
      assertEquals(false, boolean0);
  }

  //Test case number: 35
  /*
   * 4 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - false
   * 2 gnu.trove.map.hash.TShortLongHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - true
   * 3 gnu.trove.map.hash.TShortLongHashMap.hashCode()I: I18 Branch 81 IFLE L1216 - false
   * 4 gnu.trove.map.hash.TShortLongHashMap.hashCode()I: I25 Branch 82 IF_ICMPNE L1217 - true
   */

  @Test
  public void test35()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((-1793));
      tShortLongHashMap0.put((short)0, (long) (-1793));
      int int0 = tShortLongHashMap0.hashCode();
      assertEquals(false, tShortLongHashMap0.isEmpty());
      assertEquals(1792, int0);
  }

  //Test case number: 36
  /*
   * 13 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap$1.execute(SJ)Z: I4 Branch 115 IFEQ L1233 - true
   * 2 gnu.trove.map.hash.TShortLongHashMap.toString()Ljava/lang/String;: root-Branch
   * 3 gnu.trove.map.hash.TShortLongHashMap.forEachEntry(Lgnu/trove/procedure/TShortLongProcedure;)Z: I23 Branch 63 IFLE L421 - true
   * 4 gnu.trove.map.hash.TShortLongHashMap.forEachEntry(Lgnu/trove/procedure/TShortLongProcedure;)Z: I23 Branch 63 IFLE L421 - false
   * 5 gnu.trove.map.hash.TShortLongHashMap.forEachEntry(Lgnu/trove/procedure/TShortLongProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - true
   * 6 gnu.trove.map.hash.TShortLongHashMap.forEachEntry(Lgnu/trove/procedure/TShortLongProcedure;)Z: I30 Branch 64 IF_ICMPNE L422 - false
   * 7 gnu.trove.map.hash.TShortLongHashMap.forEachEntry(Lgnu/trove/procedure/TShortLongProcedure;)Z: I39 Branch 65 IFNE L422 - true
   * 8 gnu.trove.map.hash.TShortLongHashMap.<init>([S[J)V: I24 Branch 33 IF_ICMPGE L119 - true
   * 9 gnu.trove.map.hash.TShortLongHashMap.<init>([S[J)V: I24 Branch 33 IF_ICMPGE L119 - false
   * 10 gnu.trove.map.hash.TShortLongHashMap.doPut(SJI)J: I12 Branch 40 IFGE L214 - false
   * 11 gnu.trove.map.hash.TShortLongHashMap.doPut(SJI)J: I41 Branch 41 IFEQ L221 - true
   * 12 gnu.trove.map.hash.TShortLongHashMap$1.<init>(Lgnu/trove/map/hash/TShortLongHashMap;Ljava/lang/StringBuilder;)V: root-Branch
   * 13 gnu.trove.map.hash.TShortLongHashMap$1.execute(SJ)Z: I4 Branch 115 IFEQ L1233 - false
   */

  @Test
  public void test36()  throws Throwable  {
      short[] shortArray0 = new short[19];
      shortArray0[2] = (short)545;
      long[] longArray0 = new long[7];
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap(shortArray0, longArray0);
      String string0 = tShortLongHashMap0.toString();
      assertEquals("{545=0, 0=0}", string0);
      assertEquals(43, tShortLongHashMap0.capacity());
      assertNotNull(string0);
      assertEquals(2, tShortLongHashMap0.size());
  }

  //Test case number: 37
  /*
   * 9 covered goals:
   * 1 gnu.trove.map.hash.TShortLongHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - false
   * 2 gnu.trove.map.hash.TShortLongHashMap.<init>(I)V: root-Branch
   * 3 gnu.trove.map.hash.TShortLongHashMap.setUp(I)I: root-Branch
   * 4 gnu.trove.map.hash.TShortLongHashMap.put(SJ)J: root-Branch
   * 5 gnu.trove.map.hash.TShortLongHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - true
   * 6 gnu.trove.map.hash.TShortLongHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I25 Branch 83 IFLE L1259 - false
   * 7 gnu.trove.map.hash.TShortLongHashMap.writeExternal(Ljava/io/ObjectOutput;)V: I33 Branch 84 IF_ICMPNE L1260 - true
   * 8 gnu.trove.map.hash.TShortLongHashMap.doPut(SJI)J: I12 Branch 40 IFGE L214 - true
   * 9 gnu.trove.map.hash.TShortLongHashMap.doPut(SJI)J: I41 Branch 41 IFEQ L221 - false
   */

  @Test
  public void test37()  throws Throwable  {
      TShortLongHashMap tShortLongHashMap0 = new TShortLongHashMap((-1793));
      tShortLongHashMap0.put((short)0, (long) (-1793));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      tShortLongHashMap0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(false, tShortLongHashMap0.isEmpty());
      assertEquals("{0=-1793}", tShortLongHashMap0.toString());
  }
}
