/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TByteFunction;
import gnu.trove.impl.unmodifiable.TUnmodifiableByteCollection;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleSet;
import gnu.trove.map.TDoubleByteMap;
import gnu.trove.map.hash.TDoubleByteHashMap;
import gnu.trove.procedure.TByteProcedure;
import gnu.trove.procedure.TDoubleByteProcedure;
import gnu.trove.procedure.TDoubleProcedure;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableDoubleByteMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 8 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.<init>(Lgnu/trove/impl/unmodifiable/TUnmodifiableDoubleByteMap;)V: root-Branch
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.hasNext()Z: root-Branch
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.value()B: root-Branch
   * 4 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.key()D: root-Branch
   * 5 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1.advance()V: root-Branch
   * 6 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.iterator()Lgnu/trove/iterator/TDoubleByteIterator;: root-Branch
   * 7 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.size()I: root-Branch
   * 8 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.<init>(Lgnu/trove/map/TDoubleByteMap;)V: I17 Branch 1 IFNONNULL L58 - true
   */

  @Test
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      byte[] byteArray0 = new byte[1];
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      TDoubleByteHashMap tDoubleByteHashMap1 = new TDoubleByteHashMap((TDoubleByteMap) tUnmodifiableDoubleByteMap0);
      assertEquals(1, tUnmodifiableDoubleByteMap0.size());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.hashCode()I: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-1324), (-1324));
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      int int0 = tUnmodifiableDoubleByteMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keys()[D: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      double[] doubleArray0 = tUnmodifiableDoubleByteMap0.keys();
      assertNotNull(doubleArray0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      String string0 = tUnmodifiableDoubleByteMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.values([B)[B: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-613), (-613));
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      byte[] byteArray0 = tUnmodifiableDoubleByteMap0.values(tDoubleByteHashMap0._states);
      assertNotNull(byteArray0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.forEachValue(Lgnu/trove/procedure/TByteProcedure;)Z: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tUnmodifiableDoubleByteMap0.forEachValue((TByteProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tUnmodifiableDoubleByteMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      // Undeclared exception!
      try {
        tUnmodifiableDoubleByteMap0.putAll((Map<? extends Double, ? extends Byte>) hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keys([D)[D: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-613), (-613));
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      double[] doubleArray0 = tUnmodifiableDoubleByteMap0.keys(tDoubleByteHashMap0._set);
      assertNotNull(doubleArray0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.put(DB)B: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(0);
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleByteMap0.put((double) (byte) (-13), (byte) (-13));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.forEachEntry(Lgnu/trove/procedure/TDoubleByteProcedure;)Z: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-1324), (-1324));
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tUnmodifiableDoubleByteMap0.forEachEntry((TDoubleByteProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.containsKey(D)Z: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(0);
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tUnmodifiableDoubleByteMap0.containsKey((double) 0);
      assertEquals(false, boolean0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.adjustValue(DB)Z: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-6), (-6));
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleByteMap0.adjustValue((double) (-6), (byte)24);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.retainEntries(Lgnu/trove/procedure/TDoubleByteProcedure;)Z: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleByteMap0.retainEntries((TDoubleByteProcedure) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.clear()V: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleByteMap0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.putAll(Lgnu/trove/map/TDoubleByteMap;)V: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-1404), (-1404));
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleByteMap0.putAll((TDoubleByteMap) tDoubleByteHashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.remove(D)B: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleByteMap0.remove((double) (byte) (-15));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.putIfAbsent(DB)B: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-1324), (-1324));
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleByteMap0.putIfAbsent((double) (-1324), (byte)119);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.increment(D)Z: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap((-613), (-613));
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleByteMap0.increment((double) (-613));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.adjustOrPutValue(DBB)B: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(0);
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleByteMap0.adjustOrPutValue((double) (byte)0, (byte)0, (byte)0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.transformValues(Lgnu/trove/function/TByteFunction;)V: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleByteMap0.transformValues((TByteFunction) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.getNoEntryKey()D: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(0);
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      double double0 = tUnmodifiableDoubleByteMap0.getNoEntryKey();
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.containsValue(B)Z: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tUnmodifiableDoubleByteMap0.containsValue((byte)97);
      assertEquals(false, boolean0);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.get(D)B: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(0);
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      byte byte0 = tUnmodifiableDoubleByteMap0.get((double) 0);
      assertEquals((byte)0, byte0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tUnmodifiableDoubleByteMap0.forEachKey((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.values()[B: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      byte[] byteArray0 = tUnmodifiableDoubleByteMap0.values();
      assertNotNull(byteArray0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.getNoEntryValue()B: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      byte byte0 = tUnmodifiableDoubleByteMap0.getNoEntryValue();
      assertEquals((byte)0, byte0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.<init>(Lgnu/trove/map/TDoubleByteMap;)V: I17 Branch 1 IFNONNULL L58 - false
   */

  @Test
  public void test27()  throws Throwable  {
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = null;
      try {
        tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keySet()Lgnu/trove/set/TDoubleSet;: I4 Branch 2 IFNONNULL L79 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.keySet()Lgnu/trove/set/TDoubleSet;: I4 Branch 2 IFNONNULL L79 - false
   */

  @Test
  public void test28()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap();
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = (TUnmodifiableDoubleSet)tUnmodifiableDoubleByteMap0.keySet();
      assertNotNull(tUnmodifiableDoubleSet0);
      
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet1 = (TUnmodifiableDoubleSet)tUnmodifiableDoubleByteMap0.keySet();
      assertSame(tUnmodifiableDoubleSet1, tUnmodifiableDoubleSet0);
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.valueCollection()Lgnu/trove/TByteCollection;: I4 Branch 3 IFNONNULL L87 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.valueCollection()Lgnu/trove/TByteCollection;: I4 Branch 3 IFNONNULL L87 - false
   */

  @Test
  public void test29()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(0);
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      TUnmodifiableByteCollection tUnmodifiableByteCollection0 = (TUnmodifiableByteCollection)tUnmodifiableDoubleByteMap0.valueCollection();
      assertNotNull(tUnmodifiableByteCollection0);
      
      TUnmodifiableByteCollection tUnmodifiableByteCollection1 = (TUnmodifiableByteCollection)tUnmodifiableDoubleByteMap0.valueCollection();
      assertSame(tUnmodifiableByteCollection1, tUnmodifiableByteCollection0);
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L94 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L94 - false
   */

  @Test
  public void test30()  throws Throwable  {
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(0);
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tUnmodifiableDoubleByteMap0.equals((Object) tDoubleByteHashMap0);
      assertEquals(true, boolean0);
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L94 - false
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L94 - true
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap.<init>(Lgnu/trove/map/TDoubleByteMap;)V: I17 Branch 1 IFNONNULL L58 - true
   */

  @Test
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      byte[] byteArray0 = new byte[1];
      TDoubleByteHashMap tDoubleByteHashMap0 = new TDoubleByteHashMap(doubleArray0, byteArray0);
      TUnmodifiableDoubleByteMap tUnmodifiableDoubleByteMap0 = new TUnmodifiableDoubleByteMap((TDoubleByteMap) tDoubleByteHashMap0);
      boolean boolean0 = tUnmodifiableDoubleByteMap0.equals((Object) null);
      assertEquals(false, boolean0);
  }
}
