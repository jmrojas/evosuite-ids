/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TDoubleFunction;
import gnu.trove.impl.sync.TSynchronizedDoubleList;
import gnu.trove.impl.sync.TSynchronizedRandomAccessDoubleList;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList;
import gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessDoubleList;
import gnu.trove.list.TDoubleList;
import gnu.trove.list.array.TDoubleArrayList;
import gnu.trove.list.linked.TDoubleLinkedList;
import gnu.trove.procedure.TDoubleProcedure;
import java.util.Random;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TSynchronizedDoubleListEvoSuite_WeakMutation {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 11 covered goals:
   * 1 Weak Mutation 2: gnu.trove.impl.sync.TSynchronizedDoubleList.equals(Ljava/lang/Object;)Z:69 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 3: gnu.trove.impl.sync.TSynchronizedDoubleList.equals(Ljava/lang/Object;)Z:69 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 3 Weak Mutation 4: gnu.trove.impl.sync.TSynchronizedDoubleList.equals(Ljava/lang/Object;)Z:69 - ReplaceVariable o -> mutex
   * 4 Weak Mutation 5: gnu.trove.impl.sync.TSynchronizedDoubleList.equals(Ljava/lang/Object;)Z:69 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 5 gnu.trove.impl.sync.TSynchronizedDoubleList.equals(Ljava/lang/Object;)Z: root-Branch
   * 6 Weak Mutation 1: gnu.trove.impl.sync.TSynchronizedDoubleList.<init>(Lgnu/trove/list/TDoubleList;Ljava/lang/Object;)V:65 - ReplaceVariable list -> list
   * 7 Weak Mutation 2: gnu.trove.impl.sync.TSynchronizedDoubleList.equals(Ljava/lang/Object;)Z:69 - DeleteField: mutexLjava/lang/Object;
   * 8 Weak Mutation 3: gnu.trove.impl.sync.TSynchronizedDoubleList.equals(Ljava/lang/Object;)Z:69 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 9 Weak Mutation 4: gnu.trove.impl.sync.TSynchronizedDoubleList.equals(Ljava/lang/Object;)Z:69 - ReplaceVariable o -> mutex
   * 10 Weak Mutation 5: gnu.trove.impl.sync.TSynchronizedDoubleList.equals(Ljava/lang/Object;)Z:69 - DeleteStatement: equals(Ljava/lang/Object;)Z
   * 11 gnu.trove.impl.sync.TSynchronizedDoubleList.<init>(Lgnu/trove/list/TDoubleList;Ljava/lang/Object;)V: root-Branch
   */

  @Test
  public void test0()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList((double) 19);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) "");
      boolean boolean0 = tSynchronizedRandomAccessDoubleList0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 1
  /*
   * 7 covered goals:
   * 1 Weak Mutation 6: gnu.trove.impl.sync.TSynchronizedDoubleList.hashCode()I:72 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 7: gnu.trove.impl.sync.TSynchronizedDoubleList.hashCode()I:72 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 3 Weak Mutation 8: gnu.trove.impl.sync.TSynchronizedDoubleList.hashCode()I:72 - DeleteStatement: hashCode()I
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleList.hashCode()I: root-Branch
   * 5 Weak Mutation 6: gnu.trove.impl.sync.TSynchronizedDoubleList.hashCode()I:72 - DeleteField: mutexLjava/lang/Object;
   * 6 Weak Mutation 7: gnu.trove.impl.sync.TSynchronizedDoubleList.hashCode()I:72 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 7 Weak Mutation 8: gnu.trove.impl.sync.TSynchronizedDoubleList.hashCode()I:72 - DeleteStatement: hashCode()I
   */

  @Test
  public void test1()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(0, 0.0);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0, (Object) "");
      int int0 = tSynchronizedRandomAccessDoubleList0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 2
  /*
   * 13 covered goals:
   * 1 Weak Mutation 9: gnu.trove.impl.sync.TSynchronizedDoubleList.get(I)D:76 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 10: gnu.trove.impl.sync.TSynchronizedDoubleList.get(I)D:76 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 3 Weak Mutation 11: gnu.trove.impl.sync.TSynchronizedDoubleList.get(I)D:76 - InsertUnaryOp Negation of index
   * 4 Weak Mutation 12: gnu.trove.impl.sync.TSynchronizedDoubleList.get(I)D:76 - InsertUnaryOp IINC 1 index
   * 5 Weak Mutation 13: gnu.trove.impl.sync.TSynchronizedDoubleList.get(I)D:76 - InsertUnaryOp IINC -1 index
   * 6 Weak Mutation 14: gnu.trove.impl.sync.TSynchronizedDoubleList.get(I)D:76 - DeleteStatement: get(I)D
   * 7 gnu.trove.impl.sync.TSynchronizedDoubleList.get(I)D: root-Branch
   * 8 Weak Mutation 9: gnu.trove.impl.sync.TSynchronizedDoubleList.get(I)D:76 - DeleteField: mutexLjava/lang/Object;
   * 9 Weak Mutation 10: gnu.trove.impl.sync.TSynchronizedDoubleList.get(I)D:76 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 10 Weak Mutation 11: gnu.trove.impl.sync.TSynchronizedDoubleList.get(I)D:76 - InsertUnaryOp Negation of index
   * 11 Weak Mutation 12: gnu.trove.impl.sync.TSynchronizedDoubleList.get(I)D:76 - InsertUnaryOp IINC 1 index
   * 12 Weak Mutation 13: gnu.trove.impl.sync.TSynchronizedDoubleList.get(I)D:76 - InsertUnaryOp IINC -1 index
   * 13 Weak Mutation 14: gnu.trove.impl.sync.TSynchronizedDoubleList.get(I)D:76 - DeleteStatement: get(I)D
   */

  @Test
  public void test2()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) "zh");
      double double0 = tSynchronizedRandomAccessDoubleList0.get((-1));
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 3
  /*
   * 15 covered goals:
   * 1 Weak Mutation 15: gnu.trove.impl.sync.TSynchronizedDoubleList.set(ID)D:79 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 17: gnu.trove.impl.sync.TSynchronizedDoubleList.set(ID)D:79 - InsertUnaryOp Negation of index
   * 3 Weak Mutation 16: gnu.trove.impl.sync.TSynchronizedDoubleList.set(ID)D:79 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 4 Weak Mutation 19: gnu.trove.impl.sync.TSynchronizedDoubleList.set(ID)D:79 - InsertUnaryOp IINC -1 index
   * 5 Weak Mutation 18: gnu.trove.impl.sync.TSynchronizedDoubleList.set(ID)D:79 - InsertUnaryOp IINC 1 index
   * 6 Weak Mutation 21: gnu.trove.impl.sync.TSynchronizedDoubleList.set(ID)D:79 - DeleteStatement: set(ID)D
   * 7 Weak Mutation 20: gnu.trove.impl.sync.TSynchronizedDoubleList.set(ID)D:79 - InsertUnaryOp Negation of element
   * 8 gnu.trove.impl.sync.TSynchronizedDoubleList.set(ID)D: root-Branch
   * 9 Weak Mutation 15: gnu.trove.impl.sync.TSynchronizedDoubleList.set(ID)D:79 - DeleteField: mutexLjava/lang/Object;
   * 10 Weak Mutation 17: gnu.trove.impl.sync.TSynchronizedDoubleList.set(ID)D:79 - InsertUnaryOp Negation of index
   * 11 Weak Mutation 16: gnu.trove.impl.sync.TSynchronizedDoubleList.set(ID)D:79 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 12 Weak Mutation 19: gnu.trove.impl.sync.TSynchronizedDoubleList.set(ID)D:79 - InsertUnaryOp IINC -1 index
   * 13 Weak Mutation 18: gnu.trove.impl.sync.TSynchronizedDoubleList.set(ID)D:79 - InsertUnaryOp IINC 1 index
   * 14 Weak Mutation 21: gnu.trove.impl.sync.TSynchronizedDoubleList.set(ID)D:79 - DeleteStatement: set(ID)D
   * 15 Weak Mutation 20: gnu.trove.impl.sync.TSynchronizedDoubleList.set(ID)D:79 - InsertUnaryOp Negation of element
   */

  @Test
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(doubleArray0);
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleArrayList0, (Object) "[]");
      tSynchronizedDoubleList0.set(4, 4);
      assertEquals("{0.0, 0.0, 0.0, 0.0, 4.0, 0.0}", tDoubleArrayList0.toString());
      assertEquals(4.0, tSynchronizedDoubleList0.max(), 0.01D);
  }

  //Test case number: 4
  /*
   * 13 covered goals:
   * 1 Weak Mutation 23: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[D)V:82 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 2 Weak Mutation 22: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[D)V:82 - DeleteField: mutexLjava/lang/Object;
   * 3 Weak Mutation 25: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[D)V:82 - InsertUnaryOp IINC 1 offset
   * 4 Weak Mutation 24: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[D)V:82 - InsertUnaryOp Negation of offset
   * 5 Weak Mutation 27: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[D)V:82 - DeleteStatement: set(I[D)V
   * 6 Weak Mutation 26: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[D)V:82 - InsertUnaryOp IINC -1 offset
   * 7 gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[D)V: root-Branch
   * 8 Weak Mutation 23: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[D)V:82 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 9 Weak Mutation 22: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[D)V:82 - DeleteField: mutexLjava/lang/Object;
   * 10 Weak Mutation 25: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[D)V:82 - InsertUnaryOp IINC 1 offset
   * 11 Weak Mutation 24: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[D)V:82 - InsertUnaryOp Negation of offset
   * 12 Weak Mutation 27: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[D)V:82 - DeleteStatement: set(I[D)V
   * 13 Weak Mutation 26: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[D)V:82 - InsertUnaryOp IINC -1 offset
   */

  @Test
  public void test4()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList((double) 19);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) "");
      double[] doubleArray0 = new double[13];
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessDoubleList0.set((-1), doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // at offset -1
         //
      }
  }

  //Test case number: 5
  /*
   * 37 covered goals:
   * 1 Weak Mutation 29: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 2 Weak Mutation 28: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - DeleteField: mutexLjava/lang/Object;
   * 3 Weak Mutation 31: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - ReplaceVariable offset -> length
   * 4 Weak Mutation 30: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - ReplaceVariable offset -> valOffset
   * 5 Weak Mutation 34: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - InsertUnaryOp IINC -1 offset
   * 6 Weak Mutation 35: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - ReplaceVariable valOffset -> length
   * 7 Weak Mutation 32: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - InsertUnaryOp Negation of offset
   * 8 Weak Mutation 33: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - InsertUnaryOp IINC 1 offset
   * 9 Weak Mutation 38: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - InsertUnaryOp IINC 1 valOffset
   * 10 Weak Mutation 39: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - InsertUnaryOp IINC -1 valOffset
   * 11 Weak Mutation 36: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - ReplaceVariable valOffset -> offset
   * 12 Weak Mutation 37: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - InsertUnaryOp Negation of valOffset
   * 13 Weak Mutation 42: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - InsertUnaryOp Negation of length
   * 14 Weak Mutation 43: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - InsertUnaryOp IINC 1 length
   * 15 Weak Mutation 40: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - ReplaceVariable length -> valOffset
   * 16 Weak Mutation 41: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - ReplaceVariable length -> offset
   * 17 Weak Mutation 44: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - InsertUnaryOp IINC -1 length
   * 18 Weak Mutation 45: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - DeleteStatement: set(I[DII)V
   * 19 gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V: root-Branch
   * 20 Weak Mutation 29: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 21 Weak Mutation 28: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - DeleteField: mutexLjava/lang/Object;
   * 22 Weak Mutation 31: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - ReplaceVariable offset -> length
   * 23 Weak Mutation 30: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - ReplaceVariable offset -> valOffset
   * 24 Weak Mutation 34: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - InsertUnaryOp IINC -1 offset
   * 25 Weak Mutation 35: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - ReplaceVariable valOffset -> length
   * 26 Weak Mutation 32: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - InsertUnaryOp Negation of offset
   * 27 Weak Mutation 33: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - InsertUnaryOp IINC 1 offset
   * 28 Weak Mutation 38: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - InsertUnaryOp IINC 1 valOffset
   * 29 Weak Mutation 39: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - InsertUnaryOp IINC -1 valOffset
   * 30 Weak Mutation 36: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - ReplaceVariable valOffset -> offset
   * 31 Weak Mutation 37: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - InsertUnaryOp Negation of valOffset
   * 32 Weak Mutation 42: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - InsertUnaryOp Negation of length
   * 33 Weak Mutation 43: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - InsertUnaryOp IINC 1 length
   * 34 Weak Mutation 40: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - ReplaceVariable length -> valOffset
   * 35 Weak Mutation 41: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - ReplaceVariable length -> offset
   * 36 Weak Mutation 44: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - InsertUnaryOp IINC -1 length
   * 37 Weak Mutation 45: gnu.trove.impl.sync.TSynchronizedDoubleList.set(I[DII)V:85 - DeleteStatement: set(I[DII)V
   */

  @Test
  public void test5()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList((double) 19);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) "");
      double[] doubleArray0 = new double[13];
      tSynchronizedRandomAccessDoubleList0.set(19, doubleArray0, (-1), (-1514));
      assertEquals(true, tSynchronizedRandomAccessDoubleList0.isEmpty());
  }

  //Test case number: 6
  /*
   * 15 covered goals:
   * 1 Weak Mutation 46: gnu.trove.impl.sync.TSynchronizedDoubleList.replace(ID)D:89 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 47: gnu.trove.impl.sync.TSynchronizedDoubleList.replace(ID)D:89 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 3 Weak Mutation 51: gnu.trove.impl.sync.TSynchronizedDoubleList.replace(ID)D:89 - InsertUnaryOp Negation of val
   * 4 Weak Mutation 50: gnu.trove.impl.sync.TSynchronizedDoubleList.replace(ID)D:89 - InsertUnaryOp IINC -1 offset
   * 5 Weak Mutation 49: gnu.trove.impl.sync.TSynchronizedDoubleList.replace(ID)D:89 - InsertUnaryOp IINC 1 offset
   * 6 Weak Mutation 48: gnu.trove.impl.sync.TSynchronizedDoubleList.replace(ID)D:89 - InsertUnaryOp Negation of offset
   * 7 Weak Mutation 52: gnu.trove.impl.sync.TSynchronizedDoubleList.replace(ID)D:89 - DeleteStatement: replace(ID)D
   * 8 gnu.trove.impl.sync.TSynchronizedDoubleList.replace(ID)D: root-Branch
   * 9 Weak Mutation 46: gnu.trove.impl.sync.TSynchronizedDoubleList.replace(ID)D:89 - DeleteField: mutexLjava/lang/Object;
   * 10 Weak Mutation 47: gnu.trove.impl.sync.TSynchronizedDoubleList.replace(ID)D:89 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 11 Weak Mutation 51: gnu.trove.impl.sync.TSynchronizedDoubleList.replace(ID)D:89 - InsertUnaryOp Negation of val
   * 12 Weak Mutation 50: gnu.trove.impl.sync.TSynchronizedDoubleList.replace(ID)D:89 - InsertUnaryOp IINC -1 offset
   * 13 Weak Mutation 49: gnu.trove.impl.sync.TSynchronizedDoubleList.replace(ID)D:89 - InsertUnaryOp IINC 1 offset
   * 14 Weak Mutation 48: gnu.trove.impl.sync.TSynchronizedDoubleList.replace(ID)D:89 - InsertUnaryOp Negation of offset
   * 15 Weak Mutation 52: gnu.trove.impl.sync.TSynchronizedDoubleList.replace(ID)D:89 - DeleteStatement: replace(ID)D
   */

  @Test
  public void test6()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) ":");
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessDoubleList0.replace((-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // at offset -1
         //
      }
  }

  //Test case number: 7
  /*
   * 25 covered goals:
   * 1 Weak Mutation 55: gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V:92 - ReplaceVariable offset -> length
   * 2 Weak Mutation 54: gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V:92 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 3 Weak Mutation 53: gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V:92 - DeleteField: mutexLjava/lang/Object;
   * 4 Weak Mutation 59: gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V:92 - ReplaceVariable length -> offset
   * 5 Weak Mutation 58: gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V:92 - InsertUnaryOp IINC -1 offset
   * 6 Weak Mutation 57: gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V:92 - InsertUnaryOp IINC 1 offset
   * 7 Weak Mutation 56: gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V:92 - InsertUnaryOp Negation of offset
   * 8 Weak Mutation 63: gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V:92 - DeleteStatement: remove(II)V
   * 9 Weak Mutation 62: gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V:92 - InsertUnaryOp IINC -1 length
   * 10 Weak Mutation 61: gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V:92 - InsertUnaryOp IINC 1 length
   * 11 Weak Mutation 60: gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V:92 - InsertUnaryOp Negation of length
   * 12 gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V: root-Branch
   * 13 Weak Mutation 0: gnu.trove.impl.sync.TSynchronizedDoubleList.<init>(Lgnu/trove/list/TDoubleList;)V:61 - ReplaceVariable list -> list
   * 14 Weak Mutation 55: gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V:92 - ReplaceVariable offset -> length
   * 15 Weak Mutation 54: gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V:92 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 16 Weak Mutation 53: gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V:92 - DeleteField: mutexLjava/lang/Object;
   * 17 Weak Mutation 59: gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V:92 - ReplaceVariable length -> offset
   * 18 Weak Mutation 58: gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V:92 - InsertUnaryOp IINC -1 offset
   * 19 Weak Mutation 57: gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V:92 - InsertUnaryOp IINC 1 offset
   * 20 Weak Mutation 56: gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V:92 - InsertUnaryOp Negation of offset
   * 21 Weak Mutation 63: gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V:92 - DeleteStatement: remove(II)V
   * 22 Weak Mutation 62: gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V:92 - InsertUnaryOp IINC -1 length
   * 23 Weak Mutation 61: gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V:92 - InsertUnaryOp IINC 1 length
   * 24 Weak Mutation 60: gnu.trove.impl.sync.TSynchronizedDoubleList.remove(II)V:92 - InsertUnaryOp Negation of length
   * 25 gnu.trove.impl.sync.TSynchronizedDoubleList.<init>(Lgnu/trove/list/TDoubleList;)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList((double) (-20));
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleLinkedList0);
      tSynchronizedDoubleList0.remove(4, (-20));
      assertEquals(0.0, tSynchronizedDoubleList0.sum(), 0.01D);
  }

  //Test case number: 8
  /*
   * 13 covered goals:
   * 1 Weak Mutation 68: gnu.trove.impl.sync.TSynchronizedDoubleList.removeAt(I)D:95 - InsertUnaryOp IINC -1 offset
   * 2 Weak Mutation 69: gnu.trove.impl.sync.TSynchronizedDoubleList.removeAt(I)D:95 - DeleteStatement: removeAt(I)D
   * 3 Weak Mutation 64: gnu.trove.impl.sync.TSynchronizedDoubleList.removeAt(I)D:95 - DeleteField: mutexLjava/lang/Object;
   * 4 Weak Mutation 65: gnu.trove.impl.sync.TSynchronizedDoubleList.removeAt(I)D:95 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 5 Weak Mutation 66: gnu.trove.impl.sync.TSynchronizedDoubleList.removeAt(I)D:95 - InsertUnaryOp Negation of offset
   * 6 Weak Mutation 67: gnu.trove.impl.sync.TSynchronizedDoubleList.removeAt(I)D:95 - InsertUnaryOp IINC 1 offset
   * 7 gnu.trove.impl.sync.TSynchronizedDoubleList.removeAt(I)D: root-Branch
   * 8 Weak Mutation 68: gnu.trove.impl.sync.TSynchronizedDoubleList.removeAt(I)D:95 - InsertUnaryOp IINC -1 offset
   * 9 Weak Mutation 69: gnu.trove.impl.sync.TSynchronizedDoubleList.removeAt(I)D:95 - DeleteStatement: removeAt(I)D
   * 10 Weak Mutation 64: gnu.trove.impl.sync.TSynchronizedDoubleList.removeAt(I)D:95 - DeleteField: mutexLjava/lang/Object;
   * 11 Weak Mutation 65: gnu.trove.impl.sync.TSynchronizedDoubleList.removeAt(I)D:95 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 12 Weak Mutation 66: gnu.trove.impl.sync.TSynchronizedDoubleList.removeAt(I)D:95 - InsertUnaryOp Negation of offset
   * 13 Weak Mutation 67: gnu.trove.impl.sync.TSynchronizedDoubleList.removeAt(I)D:95 - InsertUnaryOp IINC 1 offset
   */

  @Test
  public void test8()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) ":");
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessDoubleList0.removeAt((-6));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no elemenet at -6
         //
      }
  }

  //Test case number: 9
  /*
   * 7 covered goals:
   * 1 Weak Mutation 70: gnu.trove.impl.sync.TSynchronizedDoubleList.add([D)V:99 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 71: gnu.trove.impl.sync.TSynchronizedDoubleList.add([D)V:99 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 3 Weak Mutation 72: gnu.trove.impl.sync.TSynchronizedDoubleList.add([D)V:99 - DeleteStatement: add([D)V
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleList.add([D)V: root-Branch
   * 5 Weak Mutation 70: gnu.trove.impl.sync.TSynchronizedDoubleList.add([D)V:99 - DeleteField: mutexLjava/lang/Object;
   * 6 Weak Mutation 71: gnu.trove.impl.sync.TSynchronizedDoubleList.add([D)V:99 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 7 Weak Mutation 72: gnu.trove.impl.sync.TSynchronizedDoubleList.add([D)V:99 - DeleteStatement: add([D)V
   */

  @Test
  public void test9()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList((double) 19);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) "");
      double[] doubleArray0 = new double[4];
      tSynchronizedRandomAccessDoubleList0.add(doubleArray0);
      assertEquals(false, tDoubleLinkedList0.isEmpty());
      assertEquals(false, tSynchronizedRandomAccessDoubleList0.isEmpty());
  }

  //Test case number: 10
  /*
   * 23 covered goals:
   * 1 Weak Mutation 76: gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V:102 - InsertUnaryOp Negation of offset
   * 2 Weak Mutation 77: gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V:102 - InsertUnaryOp IINC 1 offset
   * 3 Weak Mutation 78: gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V:102 - InsertUnaryOp IINC -1 offset
   * 4 Weak Mutation 79: gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V:102 - ReplaceVariable length -> offset
   * 5 Weak Mutation 73: gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V:102 - DeleteField: mutexLjava/lang/Object;
   * 6 Weak Mutation 74: gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V:102 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 7 Weak Mutation 75: gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V:102 - ReplaceVariable offset -> length
   * 8 Weak Mutation 81: gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V:102 - InsertUnaryOp IINC 1 length
   * 9 Weak Mutation 80: gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V:102 - InsertUnaryOp Negation of length
   * 10 Weak Mutation 83: gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V:102 - DeleteStatement: add([DII)V
   * 11 Weak Mutation 82: gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V:102 - InsertUnaryOp IINC -1 length
   * 12 gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V: root-Branch
   * 13 Weak Mutation 76: gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V:102 - InsertUnaryOp Negation of offset
   * 14 Weak Mutation 77: gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V:102 - InsertUnaryOp IINC 1 offset
   * 15 Weak Mutation 78: gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V:102 - InsertUnaryOp IINC -1 offset
   * 16 Weak Mutation 79: gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V:102 - ReplaceVariable length -> offset
   * 17 Weak Mutation 73: gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V:102 - DeleteField: mutexLjava/lang/Object;
   * 18 Weak Mutation 74: gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V:102 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 19 Weak Mutation 75: gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V:102 - ReplaceVariable offset -> length
   * 20 Weak Mutation 81: gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V:102 - InsertUnaryOp IINC 1 length
   * 21 Weak Mutation 80: gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V:102 - InsertUnaryOp Negation of length
   * 22 Weak Mutation 83: gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V:102 - DeleteStatement: add([DII)V
   * 23 Weak Mutation 82: gnu.trove.impl.sync.TSynchronizedDoubleList.add([DII)V:102 - InsertUnaryOp IINC -1 length
   */

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(doubleArray0);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0, (Object) "[]");
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessDoubleList0.add(doubleArray0, 579, 196);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 11
  /*
   * 15 covered goals:
   * 1 Weak Mutation 85: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(ID)V:106 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 2 Weak Mutation 84: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(ID)V:106 - DeleteField: mutexLjava/lang/Object;
   * 3 Weak Mutation 87: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(ID)V:106 - InsertUnaryOp IINC 1 offset
   * 4 Weak Mutation 86: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(ID)V:106 - InsertUnaryOp Negation of offset
   * 5 Weak Mutation 89: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(ID)V:106 - InsertUnaryOp Negation of value
   * 6 Weak Mutation 88: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(ID)V:106 - InsertUnaryOp IINC -1 offset
   * 7 Weak Mutation 90: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(ID)V:106 - DeleteStatement: insert(ID)V
   * 8 gnu.trove.impl.sync.TSynchronizedDoubleList.insert(ID)V: root-Branch
   * 9 Weak Mutation 85: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(ID)V:106 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 10 Weak Mutation 84: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(ID)V:106 - DeleteField: mutexLjava/lang/Object;
   * 11 Weak Mutation 87: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(ID)V:106 - InsertUnaryOp IINC 1 offset
   * 12 Weak Mutation 86: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(ID)V:106 - InsertUnaryOp Negation of offset
   * 13 Weak Mutation 89: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(ID)V:106 - InsertUnaryOp Negation of value
   * 14 Weak Mutation 88: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(ID)V:106 - InsertUnaryOp IINC -1 offset
   * 15 Weak Mutation 90: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(ID)V:106 - DeleteStatement: insert(ID)V
   */

  @Test
  public void test11()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(532, 532);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessDoubleList0.insert(532, 532);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 12
  /*
   * 13 covered goals:
   * 1 Weak Mutation 93: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[D)V:109 - InsertUnaryOp Negation of offset
   * 2 Weak Mutation 92: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[D)V:109 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 3 Weak Mutation 95: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[D)V:109 - InsertUnaryOp IINC -1 offset
   * 4 Weak Mutation 94: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[D)V:109 - InsertUnaryOp IINC 1 offset
   * 5 Weak Mutation 91: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[D)V:109 - DeleteField: mutexLjava/lang/Object;
   * 6 Weak Mutation 96: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[D)V:109 - DeleteStatement: insert(I[D)V
   * 7 gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[D)V: root-Branch
   * 8 Weak Mutation 93: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[D)V:109 - InsertUnaryOp Negation of offset
   * 9 Weak Mutation 92: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[D)V:109 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 10 Weak Mutation 95: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[D)V:109 - InsertUnaryOp IINC -1 offset
   * 11 Weak Mutation 94: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[D)V:109 - InsertUnaryOp IINC 1 offset
   * 12 Weak Mutation 91: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[D)V:109 - DeleteField: mutexLjava/lang/Object;
   * 13 Weak Mutation 96: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[D)V:109 - DeleteStatement: insert(I[D)V
   */

  @Test
  public void test12()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) "zh");
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessDoubleList0.insert((-1), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 13
  /*
   * 33 covered goals:
   * 1 Weak Mutation 102: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp IINC 1 offset
   * 2 Weak Mutation 103: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp IINC -1 offset
   * 3 Weak Mutation 101: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp Negation of offset
   * 4 Weak Mutation 98: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 5 Weak Mutation 99: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - ReplaceVariable offset -> valOffset
   * 6 Weak Mutation 97: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - DeleteField: mutexLjava/lang/Object;
   * 7 Weak Mutation 111: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp Negation of len
   * 8 Weak Mutation 108: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp IINC -1 valOffset
   * 9 Weak Mutation 109: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - ReplaceVariable len -> valOffset
   * 10 Weak Mutation 106: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp Negation of valOffset
   * 11 Weak Mutation 107: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp IINC 1 valOffset
   * 12 Weak Mutation 104: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - ReplaceVariable valOffset -> len
   * 13 Weak Mutation 105: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - ReplaceVariable valOffset -> offset
   * 14 Weak Mutation 114: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - DeleteStatement: insert(I[DII)V
   * 15 Weak Mutation 113: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp IINC -1 len
   * 16 Weak Mutation 112: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp IINC 1 len
   * 17 gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V: root-Branch
   * 18 Weak Mutation 102: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp IINC 1 offset
   * 19 Weak Mutation 103: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp IINC -1 offset
   * 20 Weak Mutation 101: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp Negation of offset
   * 21 Weak Mutation 98: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 22 Weak Mutation 99: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - ReplaceVariable offset -> valOffset
   * 23 Weak Mutation 97: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - DeleteField: mutexLjava/lang/Object;
   * 24 Weak Mutation 111: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp Negation of len
   * 25 Weak Mutation 108: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp IINC -1 valOffset
   * 26 Weak Mutation 109: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - ReplaceVariable len -> valOffset
   * 27 Weak Mutation 106: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp Negation of valOffset
   * 28 Weak Mutation 107: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp IINC 1 valOffset
   * 29 Weak Mutation 104: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - ReplaceVariable valOffset -> len
   * 30 Weak Mutation 105: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - ReplaceVariable valOffset -> offset
   * 31 Weak Mutation 114: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - DeleteStatement: insert(I[DII)V
   * 32 Weak Mutation 113: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp IINC -1 len
   * 33 Weak Mutation 112: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp IINC 1 len
   */

  @Test
  public void test13()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0);
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessDoubleList0.insert((-1240), doubleArray0, 462, (-1240));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 14
  /*
   * 18 covered goals:
   * 1 Weak Mutation 100: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - ReplaceVariable offset -> len
   * 2 Weak Mutation 110: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - ReplaceVariable len -> offset
   * 3 Weak Mutation 102: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp IINC 1 offset
   * 4 Weak Mutation 103: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp IINC -1 offset
   * 5 Weak Mutation 101: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp Negation of offset
   * 6 Weak Mutation 98: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 7 Weak Mutation 97: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - DeleteField: mutexLjava/lang/Object;
   * 8 Weak Mutation 111: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp Negation of len
   * 9 Weak Mutation 108: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp IINC -1 valOffset
   * 10 Weak Mutation 109: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - ReplaceVariable len -> valOffset
   * 11 Weak Mutation 106: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp Negation of valOffset
   * 12 Weak Mutation 107: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp IINC 1 valOffset
   * 13 Weak Mutation 104: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - ReplaceVariable valOffset -> len
   * 14 Weak Mutation 114: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - DeleteStatement: insert(I[DII)V
   * 15 Weak Mutation 113: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp IINC -1 len
   * 16 Weak Mutation 112: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - InsertUnaryOp IINC 1 len
   * 17 Weak Mutation 100: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - ReplaceVariable offset -> len
   * 18 Weak Mutation 110: gnu.trove.impl.sync.TSynchronizedDoubleList.insert(I[DII)V:112 - ReplaceVariable len -> offset
   */

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0, (Object) "[]");
      double[] doubleArray1 = new double[10];
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessDoubleList0.insert((-810), doubleArray1, (-810), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 15
  /*
   * 9 covered goals:
   * 1 Weak Mutation 118: gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(D)I:116 - DeleteStatement: indexOf(D)I
   * 2 Weak Mutation 117: gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(D)I:116 - InsertUnaryOp Negation of o
   * 3 Weak Mutation 116: gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(D)I:116 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 4 Weak Mutation 115: gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(D)I:116 - DeleteField: mutexLjava/lang/Object;
   * 5 gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(D)I: root-Branch
   * 6 Weak Mutation 118: gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(D)I:116 - DeleteStatement: indexOf(D)I
   * 7 Weak Mutation 117: gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(D)I:116 - InsertUnaryOp Negation of o
   * 8 Weak Mutation 116: gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(D)I:116 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 9 Weak Mutation 115: gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(D)I:116 - DeleteField: mutexLjava/lang/Object;
   */

  @Test
  public void test15()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(0, 0.0);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0, (Object) "");
      int int0 = tSynchronizedRandomAccessDoubleList0.indexOf(0.0);
      assertEquals((-1), int0);
  }

  //Test case number: 16
  /*
   * 9 covered goals:
   * 1 Weak Mutation 119: gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(D)I:119 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 122: gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(D)I:119 - DeleteStatement: lastIndexOf(D)I
   * 3 Weak Mutation 121: gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(D)I:119 - InsertUnaryOp Negation of o
   * 4 Weak Mutation 120: gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(D)I:119 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 5 gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(D)I: root-Branch
   * 6 Weak Mutation 119: gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(D)I:119 - DeleteField: mutexLjava/lang/Object;
   * 7 Weak Mutation 122: gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(D)I:119 - DeleteStatement: lastIndexOf(D)I
   * 8 Weak Mutation 121: gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(D)I:119 - InsertUnaryOp Negation of o
   * 9 Weak Mutation 120: gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(D)I:119 - DeleteField: listLgnu/trove/list/TDoubleList;
   */

  @Test
  public void test16()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList((double) 19);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) "");
      int int0 = tSynchronizedRandomAccessDoubleList0.lastIndexOf((double) 19);
      assertEquals((-1), int0);
  }

  //Test case number: 17
  /*
   * 23 covered goals:
   * 1 Weak Mutation 123: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:131 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 127: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - InsertUnaryOp IINC 1 fromIndex
   * 3 Weak Mutation 126: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - InsertUnaryOp Negation of fromIndex
   * 4 Weak Mutation 125: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - ReplaceVariable fromIndex -> toIndex
   * 5 Weak Mutation 124: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 6 Weak Mutation 129: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - ReplaceVariable toIndex -> fromIndex
   * 7 Weak Mutation 128: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - InsertUnaryOp IINC -1 fromIndex
   * 8 Weak Mutation 131: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - InsertUnaryOp IINC 1 toIndex
   * 9 Weak Mutation 130: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - InsertUnaryOp Negation of toIndex
   * 10 Weak Mutation 133: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - DeleteStatement: subList(II)Lgnu/trove/list/TDoubleList;
   * 11 Weak Mutation 132: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - InsertUnaryOp IINC -1 toIndex
   * 12 gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;: root-Branch
   * 13 Weak Mutation 127: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - InsertUnaryOp IINC 1 fromIndex
   * 14 Weak Mutation 126: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - InsertUnaryOp Negation of fromIndex
   * 15 Weak Mutation 125: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - ReplaceVariable fromIndex -> toIndex
   * 16 Weak Mutation 124: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 17 Weak Mutation 123: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:131 - DeleteField: mutexLjava/lang/Object;
   * 18 Weak Mutation 129: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - ReplaceVariable toIndex -> fromIndex
   * 19 Weak Mutation 128: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - InsertUnaryOp IINC -1 fromIndex
   * 20 Weak Mutation 131: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - InsertUnaryOp IINC 1 toIndex
   * 21 Weak Mutation 130: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - InsertUnaryOp Negation of toIndex
   * 22 Weak Mutation 133: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - DeleteStatement: subList(II)Lgnu/trove/list/TDoubleList;
   * 23 Weak Mutation 132: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - InsertUnaryOp IINC -1 toIndex
   */

  @Test
  public void test17()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleLinkedList0, (Object) "ja-JP");
      TUnmodifiableRandomAccessDoubleList tUnmodifiableRandomAccessDoubleList0 = new TUnmodifiableRandomAccessDoubleList((TDoubleList) tSynchronizedDoubleList0);
      // Undeclared exception!
      try {
        tUnmodifiableRandomAccessDoubleList0.subList((-1832), 1980);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // begin index can not be < 0
         //
      }
  }

  //Test case number: 18
  /*
   * 11 covered goals:
   * 1 Weak Mutation 134: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 127: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - InsertUnaryOp IINC 1 fromIndex
   * 3 Weak Mutation 126: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - InsertUnaryOp Negation of fromIndex
   * 4 Weak Mutation 124: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 5 Weak Mutation 123: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:131 - DeleteField: mutexLjava/lang/Object;
   * 6 Weak Mutation 128: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - InsertUnaryOp IINC -1 fromIndex
   * 7 Weak Mutation 131: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - InsertUnaryOp IINC 1 toIndex
   * 8 Weak Mutation 130: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - InsertUnaryOp Negation of toIndex
   * 9 Weak Mutation 133: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - DeleteStatement: subList(II)Lgnu/trove/list/TDoubleList;
   * 10 Weak Mutation 132: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - InsertUnaryOp IINC -1 toIndex
   * 11 Weak Mutation 134: gnu.trove.impl.sync.TSynchronizedDoubleList.subList(II)Lgnu/trove/list/TDoubleList;:132 - DeleteField: mutexLjava/lang/Object;
   */

  @Test
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0);
      TSynchronizedDoubleList tSynchronizedDoubleList0 = new TSynchronizedDoubleList((TDoubleList) tDoubleArrayList0, (Object) "ncf&ZKHr,`yLW:i/ncf&ZKHr,`yLW:i");
      TSynchronizedDoubleList tSynchronizedDoubleList1 = (TSynchronizedDoubleList)tSynchronizedDoubleList0.subList(1, 1);
      assertNotNull(tSynchronizedDoubleList1);
      assertEquals(true, tSynchronizedDoubleList1.isEmpty());
  }

  //Test case number: 19
  /*
   * 23 covered goals:
   * 1 Weak Mutation 137: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D:138 - ReplaceVariable offset -> len
   * 2 Weak Mutation 136: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D:138 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 3 Weak Mutation 139: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D:138 - InsertUnaryOp IINC 1 offset
   * 4 Weak Mutation 138: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D:138 - InsertUnaryOp Negation of offset
   * 5 Weak Mutation 141: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D:138 - ReplaceVariable len -> offset
   * 6 Weak Mutation 140: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D:138 - InsertUnaryOp IINC -1 offset
   * 7 Weak Mutation 143: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D:138 - InsertUnaryOp IINC 1 len
   * 8 Weak Mutation 142: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D:138 - InsertUnaryOp Negation of len
   * 9 Weak Mutation 135: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D:138 - DeleteField: mutexLjava/lang/Object;
   * 10 Weak Mutation 144: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D:138 - InsertUnaryOp IINC -1 len
   * 11 Weak Mutation 145: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D:138 - DeleteStatement: toArray(II)[D
   * 12 gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D: root-Branch
   * 13 Weak Mutation 137: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D:138 - ReplaceVariable offset -> len
   * 14 Weak Mutation 136: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D:138 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 15 Weak Mutation 139: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D:138 - InsertUnaryOp IINC 1 offset
   * 16 Weak Mutation 138: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D:138 - InsertUnaryOp Negation of offset
   * 17 Weak Mutation 141: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D:138 - ReplaceVariable len -> offset
   * 18 Weak Mutation 140: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D:138 - InsertUnaryOp IINC -1 offset
   * 19 Weak Mutation 143: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D:138 - InsertUnaryOp IINC 1 len
   * 20 Weak Mutation 142: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D:138 - InsertUnaryOp Negation of len
   * 21 Weak Mutation 135: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D:138 - DeleteField: mutexLjava/lang/Object;
   * 22 Weak Mutation 144: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D:138 - InsertUnaryOp IINC -1 len
   * 23 Weak Mutation 145: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray(II)[D:138 - DeleteStatement: toArray(II)[D
   */

  @Test
  public void test19()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(0, 0.0);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0, (Object) "");
      double[] doubleArray0 = tSynchronizedRandomAccessDoubleList0.toArray((-1), 0);
      assertNotNull(doubleArray0);
  }

  //Test case number: 20
  /*
   * 23 covered goals:
   * 1 Weak Mutation 152: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D:141 - ReplaceVariable len -> offset
   * 2 Weak Mutation 153: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D:141 - InsertUnaryOp Negation of len
   * 3 Weak Mutation 154: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D:141 - InsertUnaryOp IINC 1 len
   * 4 Weak Mutation 155: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D:141 - InsertUnaryOp IINC -1 len
   * 5 Weak Mutation 156: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D:141 - DeleteStatement: toArray([DII)[D
   * 6 Weak Mutation 146: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D:141 - DeleteField: mutexLjava/lang/Object;
   * 7 Weak Mutation 147: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D:141 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 8 Weak Mutation 148: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D:141 - ReplaceVariable offset -> len
   * 9 Weak Mutation 149: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D:141 - InsertUnaryOp Negation of offset
   * 10 Weak Mutation 150: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D:141 - InsertUnaryOp IINC 1 offset
   * 11 Weak Mutation 151: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D:141 - InsertUnaryOp IINC -1 offset
   * 12 gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D: root-Branch
   * 13 Weak Mutation 152: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D:141 - ReplaceVariable len -> offset
   * 14 Weak Mutation 153: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D:141 - InsertUnaryOp Negation of len
   * 15 Weak Mutation 154: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D:141 - InsertUnaryOp IINC 1 len
   * 16 Weak Mutation 155: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D:141 - InsertUnaryOp IINC -1 len
   * 17 Weak Mutation 156: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D:141 - DeleteStatement: toArray([DII)[D
   * 18 Weak Mutation 146: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D:141 - DeleteField: mutexLjava/lang/Object;
   * 19 Weak Mutation 147: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D:141 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 20 Weak Mutation 148: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D:141 - ReplaceVariable offset -> len
   * 21 Weak Mutation 149: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D:141 - InsertUnaryOp Negation of offset
   * 22 Weak Mutation 150: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D:141 - InsertUnaryOp IINC 1 offset
   * 23 Weak Mutation 151: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DII)[D:141 - InsertUnaryOp IINC -1 offset
   */

  @Test
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(doubleArray0);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      double[] doubleArray1 = tSynchronizedRandomAccessDoubleList0.toArray(doubleArray0, (-1932), 0);
      assertSame(doubleArray0, doubleArray1);
  }

  //Test case number: 21
  /*
   * 37 covered goals:
   * 1 Weak Mutation 158: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 2 Weak Mutation 157: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - DeleteField: mutexLjava/lang/Object;
   * 3 Weak Mutation 159: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - ReplaceVariable source_pos -> dest_pos
   * 4 Weak Mutation 171: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - InsertUnaryOp Negation of len
   * 5 Weak Mutation 170: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - ReplaceVariable len -> source_pos
   * 6 Weak Mutation 169: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - ReplaceVariable len -> dest_pos
   * 7 Weak Mutation 168: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - InsertUnaryOp IINC -1 dest_pos
   * 8 Weak Mutation 174: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - DeleteStatement: toArray([DIII)[D
   * 9 Weak Mutation 173: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - InsertUnaryOp IINC -1 len
   * 10 Weak Mutation 172: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - InsertUnaryOp IINC 1 len
   * 11 Weak Mutation 163: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - InsertUnaryOp IINC -1 source_pos
   * 12 Weak Mutation 162: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - InsertUnaryOp IINC 1 source_pos
   * 13 Weak Mutation 161: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - InsertUnaryOp Negation of source_pos
   * 14 Weak Mutation 160: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - ReplaceVariable source_pos -> len
   * 15 Weak Mutation 167: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - InsertUnaryOp IINC 1 dest_pos
   * 16 Weak Mutation 166: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - InsertUnaryOp Negation of dest_pos
   * 17 Weak Mutation 165: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - ReplaceVariable dest_pos -> source_pos
   * 18 Weak Mutation 164: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - ReplaceVariable dest_pos -> len
   * 19 Weak Mutation 157: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - DeleteField: mutexLjava/lang/Object;
   * 20 Weak Mutation 158: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 21 Weak Mutation 159: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - ReplaceVariable source_pos -> dest_pos
   * 22 Weak Mutation 171: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - InsertUnaryOp Negation of len
   * 23 Weak Mutation 170: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - ReplaceVariable len -> source_pos
   * 24 Weak Mutation 169: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - ReplaceVariable len -> dest_pos
   * 25 Weak Mutation 168: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - InsertUnaryOp IINC -1 dest_pos
   * 26 Weak Mutation 174: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - DeleteStatement: toArray([DIII)[D
   * 27 Weak Mutation 173: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - InsertUnaryOp IINC -1 len
   * 28 Weak Mutation 172: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - InsertUnaryOp IINC 1 len
   * 29 Weak Mutation 163: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - InsertUnaryOp IINC -1 source_pos
   * 30 Weak Mutation 162: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - InsertUnaryOp IINC 1 source_pos
   * 31 Weak Mutation 161: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - InsertUnaryOp Negation of source_pos
   * 32 Weak Mutation 160: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - ReplaceVariable source_pos -> len
   * 33 Weak Mutation 167: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - InsertUnaryOp IINC 1 dest_pos
   * 34 Weak Mutation 166: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - InsertUnaryOp Negation of dest_pos
   * 35 Weak Mutation 165: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - ReplaceVariable dest_pos -> source_pos
   * 36 Weak Mutation 164: gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D:144 - ReplaceVariable dest_pos -> len
   * 37 gnu.trove.impl.sync.TSynchronizedDoubleList.toArray([DIII)[D: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) null, object0);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList1 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tSynchronizedRandomAccessDoubleList0);
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessDoubleList1.toArray(doubleArray0, (-2), 1, (-651));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 22
  /*
   * 15 covered goals:
   * 1 Weak Mutation 175: gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(ID)I:148 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 178: gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(ID)I:148 - InsertUnaryOp IINC 1 offset
   * 3 Weak Mutation 179: gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(ID)I:148 - InsertUnaryOp IINC -1 offset
   * 4 Weak Mutation 176: gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(ID)I:148 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 5 Weak Mutation 177: gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(ID)I:148 - InsertUnaryOp Negation of offset
   * 6 Weak Mutation 180: gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(ID)I:148 - InsertUnaryOp Negation of value
   * 7 Weak Mutation 181: gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(ID)I:148 - DeleteStatement: indexOf(ID)I
   * 8 gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(ID)I: root-Branch
   * 9 Weak Mutation 175: gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(ID)I:148 - DeleteField: mutexLjava/lang/Object;
   * 10 Weak Mutation 178: gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(ID)I:148 - InsertUnaryOp IINC 1 offset
   * 11 Weak Mutation 179: gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(ID)I:148 - InsertUnaryOp IINC -1 offset
   * 12 Weak Mutation 176: gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(ID)I:148 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 13 Weak Mutation 177: gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(ID)I:148 - InsertUnaryOp Negation of offset
   * 14 Weak Mutation 180: gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(ID)I:148 - InsertUnaryOp Negation of value
   * 15 Weak Mutation 181: gnu.trove.impl.sync.TSynchronizedDoubleList.indexOf(ID)I:148 - DeleteStatement: indexOf(ID)I
   */

  @Test
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0, (Object) "[]");
      int int0 = tSynchronizedRandomAccessDoubleList0.indexOf(228, 228);
      assertEquals((-1), int0);
  }

  //Test case number: 23
  /*
   * 15 covered goals:
   * 1 Weak Mutation 186: gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(ID)I:151 - InsertUnaryOp IINC -1 offset
   * 2 Weak Mutation 187: gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(ID)I:151 - InsertUnaryOp Negation of value
   * 3 Weak Mutation 184: gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(ID)I:151 - InsertUnaryOp Negation of offset
   * 4 Weak Mutation 185: gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(ID)I:151 - InsertUnaryOp IINC 1 offset
   * 5 Weak Mutation 188: gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(ID)I:151 - DeleteStatement: lastIndexOf(ID)I
   * 6 Weak Mutation 182: gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(ID)I:151 - DeleteField: mutexLjava/lang/Object;
   * 7 Weak Mutation 183: gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(ID)I:151 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 8 gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(ID)I: root-Branch
   * 9 Weak Mutation 186: gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(ID)I:151 - InsertUnaryOp IINC -1 offset
   * 10 Weak Mutation 187: gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(ID)I:151 - InsertUnaryOp Negation of value
   * 11 Weak Mutation 184: gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(ID)I:151 - InsertUnaryOp Negation of offset
   * 12 Weak Mutation 185: gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(ID)I:151 - InsertUnaryOp IINC 1 offset
   * 13 Weak Mutation 188: gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(ID)I:151 - DeleteStatement: lastIndexOf(ID)I
   * 14 Weak Mutation 182: gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(ID)I:151 - DeleteField: mutexLjava/lang/Object;
   * 15 Weak Mutation 183: gnu.trove.impl.sync.TSynchronizedDoubleList.lastIndexOf(ID)I:151 - DeleteField: listLgnu/trove/list/TDoubleList;
   */

  @Test
  public void test23()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(532, 532);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      int int0 = tSynchronizedRandomAccessDoubleList0.lastIndexOf(532, 532);
      assertEquals((-1), int0);
  }

  //Test case number: 24
  /*
   * 9 covered goals:
   * 1 Weak Mutation 190: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(D)V:155 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 2 Weak Mutation 191: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(D)V:155 - InsertUnaryOp Negation of val
   * 3 Weak Mutation 189: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(D)V:155 - DeleteField: mutexLjava/lang/Object;
   * 4 Weak Mutation 192: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(D)V:155 - DeleteStatement: fill(D)V
   * 5 gnu.trove.impl.sync.TSynchronizedDoubleList.fill(D)V: root-Branch
   * 6 Weak Mutation 190: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(D)V:155 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 7 Weak Mutation 191: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(D)V:155 - InsertUnaryOp Negation of val
   * 8 Weak Mutation 189: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(D)V:155 - DeleteField: mutexLjava/lang/Object;
   * 9 Weak Mutation 192: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(D)V:155 - DeleteStatement: fill(D)V
   */

  @Test
  public void test24()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) ":");
      tSynchronizedRandomAccessDoubleList0.fill((double) 0);
      assertEquals(0, tSynchronizedRandomAccessDoubleList0.size());
  }

  //Test case number: 25
  /*
   * 25 covered goals:
   * 1 Weak Mutation 204: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - DeleteStatement: fill(IID)V
   * 2 Weak Mutation 201: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - InsertUnaryOp IINC 1 toIndex
   * 3 Weak Mutation 200: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - InsertUnaryOp Negation of toIndex
   * 4 Weak Mutation 203: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - InsertUnaryOp Negation of val
   * 5 Weak Mutation 202: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - InsertUnaryOp IINC -1 toIndex
   * 6 Weak Mutation 197: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - InsertUnaryOp IINC 1 fromIndex
   * 7 Weak Mutation 196: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - InsertUnaryOp Negation of fromIndex
   * 8 Weak Mutation 199: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - ReplaceVariable toIndex -> fromIndex
   * 9 Weak Mutation 198: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - InsertUnaryOp IINC -1 fromIndex
   * 10 Weak Mutation 193: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - DeleteField: mutexLjava/lang/Object;
   * 11 Weak Mutation 195: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - ReplaceVariable fromIndex -> toIndex
   * 12 Weak Mutation 194: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 13 gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V: root-Branch
   * 14 Weak Mutation 204: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - DeleteStatement: fill(IID)V
   * 15 Weak Mutation 201: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - InsertUnaryOp IINC 1 toIndex
   * 16 Weak Mutation 200: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - InsertUnaryOp Negation of toIndex
   * 17 Weak Mutation 203: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - InsertUnaryOp Negation of val
   * 18 Weak Mutation 202: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - InsertUnaryOp IINC -1 toIndex
   * 19 Weak Mutation 197: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - InsertUnaryOp IINC 1 fromIndex
   * 20 Weak Mutation 196: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - InsertUnaryOp Negation of fromIndex
   * 21 Weak Mutation 199: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - ReplaceVariable toIndex -> fromIndex
   * 22 Weak Mutation 198: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - InsertUnaryOp IINC -1 fromIndex
   * 23 Weak Mutation 193: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - DeleteField: mutexLjava/lang/Object;
   * 24 Weak Mutation 195: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - ReplaceVariable fromIndex -> toIndex
   * 25 Weak Mutation 194: gnu.trove.impl.sync.TSynchronizedDoubleList.fill(IID)V:158 - DeleteField: listLgnu/trove/list/TDoubleList;
   */

  @Test
  public void test25()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList((double) 19);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) "");
      tSynchronizedRandomAccessDoubleList0.fill(19, (-1), 0.0);
      assertEquals(true, tDoubleLinkedList0.isEmpty());
      assertEquals(true, tSynchronizedRandomAccessDoubleList0.isEmpty());
  }

  //Test case number: 26
  /*
   * 7 covered goals:
   * 1 Weak Mutation 205: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse()V:162 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 207: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse()V:162 - DeleteStatement: reverse()V
   * 3 Weak Mutation 206: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse()V:162 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleList.reverse()V: root-Branch
   * 5 Weak Mutation 205: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse()V:162 - DeleteField: mutexLjava/lang/Object;
   * 6 Weak Mutation 207: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse()V:162 - DeleteStatement: reverse()V
   * 7 Weak Mutation 206: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse()V:162 - DeleteField: listLgnu/trove/list/TDoubleList;
   */

  @Test
  public void test26()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) ":");
      tSynchronizedRandomAccessDoubleList0.reverse();
      assertEquals(true, tSynchronizedRandomAccessDoubleList0.isEmpty());
  }

  //Test case number: 27
  /*
   * 23 covered goals:
   * 1 Weak Mutation 216: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V:165 - InsertUnaryOp IINC 1 to
   * 2 Weak Mutation 217: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V:165 - InsertUnaryOp IINC -1 to
   * 3 Weak Mutation 218: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V:165 - DeleteStatement: reverse(II)V
   * 4 Weak Mutation 212: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V:165 - InsertUnaryOp IINC 1 from
   * 5 Weak Mutation 213: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V:165 - InsertUnaryOp IINC -1 from
   * 6 Weak Mutation 214: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V:165 - ReplaceVariable to -> from
   * 7 Weak Mutation 215: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V:165 - InsertUnaryOp Negation of to
   * 8 Weak Mutation 208: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V:165 - DeleteField: mutexLjava/lang/Object;
   * 9 Weak Mutation 209: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V:165 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 10 Weak Mutation 210: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V:165 - ReplaceVariable from -> to
   * 11 Weak Mutation 211: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V:165 - InsertUnaryOp Negation of from
   * 12 gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V: root-Branch
   * 13 Weak Mutation 216: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V:165 - InsertUnaryOp IINC 1 to
   * 14 Weak Mutation 217: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V:165 - InsertUnaryOp IINC -1 to
   * 15 Weak Mutation 218: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V:165 - DeleteStatement: reverse(II)V
   * 16 Weak Mutation 212: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V:165 - InsertUnaryOp IINC 1 from
   * 17 Weak Mutation 213: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V:165 - InsertUnaryOp IINC -1 from
   * 18 Weak Mutation 214: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V:165 - ReplaceVariable to -> from
   * 19 Weak Mutation 215: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V:165 - InsertUnaryOp Negation of to
   * 20 Weak Mutation 208: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V:165 - DeleteField: mutexLjava/lang/Object;
   * 21 Weak Mutation 209: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V:165 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 22 Weak Mutation 210: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V:165 - ReplaceVariable from -> to
   * 23 Weak Mutation 211: gnu.trove.impl.sync.TSynchronizedDoubleList.reverse(II)V:165 - InsertUnaryOp Negation of from
   */

  @Test
  public void test27()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) ":");
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessDoubleList0.reverse(0, 1126);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 7 covered goals:
   * 1 Weak Mutation 220: gnu.trove.impl.sync.TSynchronizedDoubleList.shuffle(Ljava/util/Random;)V:169 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 2 Weak Mutation 221: gnu.trove.impl.sync.TSynchronizedDoubleList.shuffle(Ljava/util/Random;)V:169 - DeleteStatement: shuffle(Ljava/util/Random;)V
   * 3 Weak Mutation 219: gnu.trove.impl.sync.TSynchronizedDoubleList.shuffle(Ljava/util/Random;)V:169 - DeleteField: mutexLjava/lang/Object;
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleList.shuffle(Ljava/util/Random;)V: root-Branch
   * 5 Weak Mutation 220: gnu.trove.impl.sync.TSynchronizedDoubleList.shuffle(Ljava/util/Random;)V:169 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 6 Weak Mutation 221: gnu.trove.impl.sync.TSynchronizedDoubleList.shuffle(Ljava/util/Random;)V:169 - DeleteStatement: shuffle(Ljava/util/Random;)V
   * 7 Weak Mutation 219: gnu.trove.impl.sync.TSynchronizedDoubleList.shuffle(Ljava/util/Random;)V:169 - DeleteField: mutexLjava/lang/Object;
   */

//   @Test
//   public void test28()  throws Throwable  {
//       TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList((double) 19);
//       TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) "");
//       Random random0 = new Random((long) (-1));
//       tSynchronizedRandomAccessDoubleList0.shuffle(random0);
//       assertEquals(0.9026164F, random0.nextFloat(), 0.01F);
//   }

  //Test case number: 29
  /*
   * 7 covered goals:
   * 1 Weak Mutation 222: gnu.trove.impl.sync.TSynchronizedDoubleList.sort()V:173 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 223: gnu.trove.impl.sync.TSynchronizedDoubleList.sort()V:173 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 3 Weak Mutation 224: gnu.trove.impl.sync.TSynchronizedDoubleList.sort()V:173 - DeleteStatement: sort()V
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleList.sort()V: root-Branch
   * 5 Weak Mutation 222: gnu.trove.impl.sync.TSynchronizedDoubleList.sort()V:173 - DeleteField: mutexLjava/lang/Object;
   * 6 Weak Mutation 223: gnu.trove.impl.sync.TSynchronizedDoubleList.sort()V:173 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 7 Weak Mutation 224: gnu.trove.impl.sync.TSynchronizedDoubleList.sort()V:173 - DeleteStatement: sort()V
   */

  @Test
  public void test29()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList((double) 19);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) "");
      tSynchronizedRandomAccessDoubleList0.sort();
      assertEquals(0.0, tSynchronizedRandomAccessDoubleList0.sum(), 0.01D);
  }

  //Test case number: 30
  /*
   * 23 covered goals:
   * 1 Weak Mutation 235: gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V:176 - DeleteStatement: sort(II)V
   * 2 Weak Mutation 234: gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V:176 - InsertUnaryOp IINC -1 toIndex
   * 3 Weak Mutation 233: gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V:176 - InsertUnaryOp IINC 1 toIndex
   * 4 Weak Mutation 232: gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V:176 - InsertUnaryOp Negation of toIndex
   * 5 Weak Mutation 231: gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V:176 - ReplaceVariable toIndex -> fromIndex
   * 6 Weak Mutation 230: gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V:176 - InsertUnaryOp IINC -1 fromIndex
   * 7 Weak Mutation 229: gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V:176 - InsertUnaryOp IINC 1 fromIndex
   * 8 Weak Mutation 228: gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V:176 - InsertUnaryOp Negation of fromIndex
   * 9 Weak Mutation 227: gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V:176 - ReplaceVariable fromIndex -> toIndex
   * 10 Weak Mutation 226: gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V:176 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 11 Weak Mutation 225: gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V:176 - DeleteField: mutexLjava/lang/Object;
   * 12 gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V: root-Branch
   * 13 Weak Mutation 235: gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V:176 - DeleteStatement: sort(II)V
   * 14 Weak Mutation 234: gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V:176 - InsertUnaryOp IINC -1 toIndex
   * 15 Weak Mutation 233: gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V:176 - InsertUnaryOp IINC 1 toIndex
   * 16 Weak Mutation 232: gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V:176 - InsertUnaryOp Negation of toIndex
   * 17 Weak Mutation 231: gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V:176 - ReplaceVariable toIndex -> fromIndex
   * 18 Weak Mutation 230: gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V:176 - InsertUnaryOp IINC -1 fromIndex
   * 19 Weak Mutation 229: gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V:176 - InsertUnaryOp IINC 1 fromIndex
   * 20 Weak Mutation 228: gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V:176 - InsertUnaryOp Negation of fromIndex
   * 21 Weak Mutation 227: gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V:176 - ReplaceVariable fromIndex -> toIndex
   * 22 Weak Mutation 226: gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V:176 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 23 Weak Mutation 225: gnu.trove.impl.sync.TSynchronizedDoubleList.sort(II)V:176 - DeleteField: mutexLjava/lang/Object;
   */

  @Test
  public void test30()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0, (Object) "CN");
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessDoubleList0.sort(57, 1256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1256
         //
      }
  }

  //Test case number: 31
  /*
   * 9 covered goals:
   * 1 Weak Mutation 239: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(D)I:180 - DeleteStatement: binarySearch(D)I
   * 2 Weak Mutation 238: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(D)I:180 - InsertUnaryOp Negation of value
   * 3 Weak Mutation 237: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(D)I:180 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 4 Weak Mutation 236: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(D)I:180 - DeleteField: mutexLjava/lang/Object;
   * 5 gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(D)I: root-Branch
   * 6 Weak Mutation 239: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(D)I:180 - DeleteStatement: binarySearch(D)I
   * 7 Weak Mutation 238: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(D)I:180 - InsertUnaryOp Negation of value
   * 8 Weak Mutation 237: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(D)I:180 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 9 Weak Mutation 236: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(D)I:180 - DeleteField: mutexLjava/lang/Object;
   */

  @Test
  public void test31()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) "zh");
      int int0 = tSynchronizedRandomAccessDoubleList0.binarySearch(13.870773812459607);
      assertEquals((-1), int0);
  }

  //Test case number: 32
  /*
   * 25 covered goals:
   * 1 Weak Mutation 250: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - InsertUnaryOp IINC -1 toIndex
   * 2 Weak Mutation 251: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - DeleteStatement: binarySearch(DII)I
   * 3 Weak Mutation 248: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - InsertUnaryOp Negation of toIndex
   * 4 Weak Mutation 249: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - InsertUnaryOp IINC 1 toIndex
   * 5 Weak Mutation 246: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - InsertUnaryOp IINC -1 fromIndex
   * 6 Weak Mutation 247: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - ReplaceVariable toIndex -> fromIndex
   * 7 Weak Mutation 244: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - InsertUnaryOp Negation of fromIndex
   * 8 Weak Mutation 245: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - InsertUnaryOp IINC 1 fromIndex
   * 9 Weak Mutation 242: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - InsertUnaryOp Negation of value
   * 10 Weak Mutation 243: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - ReplaceVariable fromIndex -> toIndex
   * 11 Weak Mutation 240: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - DeleteField: mutexLjava/lang/Object;
   * 12 Weak Mutation 241: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 13 gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I: root-Branch
   * 14 Weak Mutation 250: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - InsertUnaryOp IINC -1 toIndex
   * 15 Weak Mutation 251: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - DeleteStatement: binarySearch(DII)I
   * 16 Weak Mutation 248: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - InsertUnaryOp Negation of toIndex
   * 17 Weak Mutation 249: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - InsertUnaryOp IINC 1 toIndex
   * 18 Weak Mutation 246: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - InsertUnaryOp IINC -1 fromIndex
   * 19 Weak Mutation 247: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - ReplaceVariable toIndex -> fromIndex
   * 20 Weak Mutation 244: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - InsertUnaryOp Negation of fromIndex
   * 21 Weak Mutation 245: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - InsertUnaryOp IINC 1 fromIndex
   * 22 Weak Mutation 242: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - InsertUnaryOp Negation of value
   * 23 Weak Mutation 243: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - ReplaceVariable fromIndex -> toIndex
   * 24 Weak Mutation 240: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - DeleteField: mutexLjava/lang/Object;
   * 25 Weak Mutation 241: gnu.trove.impl.sync.TSynchronizedDoubleList.binarySearch(DII)I:183 - DeleteField: listLgnu/trove/list/TDoubleList;
   */

  @Test
  public void test32()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) "[]");
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessDoubleList0.binarySearch((double) (-1552), (-1552), 1290);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // begin index can not be < 0
         //
      }
  }

  //Test case number: 33
  /*
   * 7 covered goals:
   * 1 Weak Mutation 254: gnu.trove.impl.sync.TSynchronizedDoubleList.grep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;:187 - DeleteStatement: grep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;
   * 2 Weak Mutation 252: gnu.trove.impl.sync.TSynchronizedDoubleList.grep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;:187 - DeleteField: mutexLjava/lang/Object;
   * 3 Weak Mutation 253: gnu.trove.impl.sync.TSynchronizedDoubleList.grep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;:187 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleList.grep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;: root-Branch
   * 5 Weak Mutation 254: gnu.trove.impl.sync.TSynchronizedDoubleList.grep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;:187 - DeleteStatement: grep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;
   * 6 Weak Mutation 252: gnu.trove.impl.sync.TSynchronizedDoubleList.grep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;:187 - DeleteField: mutexLjava/lang/Object;
   * 7 Weak Mutation 253: gnu.trove.impl.sync.TSynchronizedDoubleList.grep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;:187 - DeleteField: listLgnu/trove/list/TDoubleList;
   */

  @Test
  public void test33()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList((double) 19);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) "");
      TDoubleLinkedList tDoubleLinkedList1 = (TDoubleLinkedList)tSynchronizedRandomAccessDoubleList0.grep((TDoubleProcedure) null);
      assertEquals(true, tDoubleLinkedList1.isEmpty());
  }

  //Test case number: 34
  /*
   * 7 covered goals:
   * 1 Weak Mutation 255: gnu.trove.impl.sync.TSynchronizedDoubleList.inverseGrep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;:190 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 256: gnu.trove.impl.sync.TSynchronizedDoubleList.inverseGrep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;:190 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 3 Weak Mutation 257: gnu.trove.impl.sync.TSynchronizedDoubleList.inverseGrep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;:190 - DeleteStatement: inverseGrep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleList.inverseGrep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;: root-Branch
   * 5 Weak Mutation 255: gnu.trove.impl.sync.TSynchronizedDoubleList.inverseGrep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;:190 - DeleteField: mutexLjava/lang/Object;
   * 6 Weak Mutation 256: gnu.trove.impl.sync.TSynchronizedDoubleList.inverseGrep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;:190 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 7 Weak Mutation 257: gnu.trove.impl.sync.TSynchronizedDoubleList.inverseGrep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;:190 - DeleteStatement: inverseGrep(Lgnu/trove/procedure/TDoubleProcedure;)Lgnu/trove/list/TDoubleList;
   */

  @Test
  public void test34()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList((double) (-20));
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) "{}");
      TUnmodifiableDoubleList tUnmodifiableDoubleList0 = new TUnmodifiableDoubleList((TDoubleList) tSynchronizedRandomAccessDoubleList0);
      TDoubleLinkedList tDoubleLinkedList1 = (TDoubleLinkedList)tUnmodifiableDoubleList0.inverseGrep((TDoubleProcedure) null);
      assertEquals(0, tDoubleLinkedList1.size());
  }

  //Test case number: 35
  /*
   * 7 covered goals:
   * 1 Weak Mutation 258: gnu.trove.impl.sync.TSynchronizedDoubleList.max()D:193 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 259: gnu.trove.impl.sync.TSynchronizedDoubleList.max()D:193 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 3 Weak Mutation 260: gnu.trove.impl.sync.TSynchronizedDoubleList.max()D:193 - DeleteStatement: max()D
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleList.max()D: root-Branch
   * 5 Weak Mutation 258: gnu.trove.impl.sync.TSynchronizedDoubleList.max()D:193 - DeleteField: mutexLjava/lang/Object;
   * 6 Weak Mutation 259: gnu.trove.impl.sync.TSynchronizedDoubleList.max()D:193 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 7 Weak Mutation 260: gnu.trove.impl.sync.TSynchronizedDoubleList.max()D:193 - DeleteStatement: max()D
   */

  @Test
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      TDoubleArrayList tDoubleArrayList0 = TDoubleArrayList.wrap(doubleArray0);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0, (Object) "[]");
      double double0 = tSynchronizedRandomAccessDoubleList0.max();
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 36
  /*
   * 7 covered goals:
   * 1 Weak Mutation 262: gnu.trove.impl.sync.TSynchronizedDoubleList.min()D:194 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 2 Weak Mutation 263: gnu.trove.impl.sync.TSynchronizedDoubleList.min()D:194 - DeleteStatement: min()D
   * 3 Weak Mutation 261: gnu.trove.impl.sync.TSynchronizedDoubleList.min()D:194 - DeleteField: mutexLjava/lang/Object;
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleList.min()D: root-Branch
   * 5 Weak Mutation 262: gnu.trove.impl.sync.TSynchronizedDoubleList.min()D:194 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 6 Weak Mutation 263: gnu.trove.impl.sync.TSynchronizedDoubleList.min()D:194 - DeleteStatement: min()D
   * 7 Weak Mutation 261: gnu.trove.impl.sync.TSynchronizedDoubleList.min()D:194 - DeleteField: mutexLjava/lang/Object;
   */

  @Test
  public void test36()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList();
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) ":");
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessDoubleList0.min();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 37
  /*
   * 7 covered goals:
   * 1 Weak Mutation 266: gnu.trove.impl.sync.TSynchronizedDoubleList.sum()D:195 - DeleteStatement: sum()D
   * 2 Weak Mutation 264: gnu.trove.impl.sync.TSynchronizedDoubleList.sum()D:195 - DeleteField: mutexLjava/lang/Object;
   * 3 Weak Mutation 265: gnu.trove.impl.sync.TSynchronizedDoubleList.sum()D:195 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleList.sum()D: root-Branch
   * 5 Weak Mutation 266: gnu.trove.impl.sync.TSynchronizedDoubleList.sum()D:195 - DeleteStatement: sum()D
   * 6 Weak Mutation 264: gnu.trove.impl.sync.TSynchronizedDoubleList.sum()D:195 - DeleteField: mutexLjava/lang/Object;
   * 7 Weak Mutation 265: gnu.trove.impl.sync.TSynchronizedDoubleList.sum()D:195 - DeleteField: listLgnu/trove/list/TDoubleList;
   */

  @Test
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(doubleArray0);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      double double0 = tSynchronizedRandomAccessDoubleList0.sum();
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 38
  /*
   * 8 covered goals:
   * 1 Weak Mutation 267: gnu.trove.impl.sync.TSynchronizedDoubleList.forEachDescending(Lgnu/trove/procedure/TDoubleProcedure;)Z:198 - DeleteField: mutexLjava/lang/Object;
   * 2 Weak Mutation 268: gnu.trove.impl.sync.TSynchronizedDoubleList.forEachDescending(Lgnu/trove/procedure/TDoubleProcedure;)Z:198 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 3 Weak Mutation 269: gnu.trove.impl.sync.TSynchronizedDoubleList.forEachDescending(Lgnu/trove/procedure/TDoubleProcedure;)Z:198 - DeleteStatement: forEachDescending(Lgnu/trove/procedure/TDoubleProcedure;)Z
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleList.forEachDescending(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   * 5 Weak Mutation 1: gnu.trove.impl.sync.TSynchronizedDoubleList.<init>(Lgnu/trove/list/TDoubleList;Ljava/lang/Object;)V:65 - ReplaceVariable list -> list
   * 6 Weak Mutation 267: gnu.trove.impl.sync.TSynchronizedDoubleList.forEachDescending(Lgnu/trove/procedure/TDoubleProcedure;)Z:198 - DeleteField: mutexLjava/lang/Object;
   * 7 Weak Mutation 268: gnu.trove.impl.sync.TSynchronizedDoubleList.forEachDescending(Lgnu/trove/procedure/TDoubleProcedure;)Z:198 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 8 Weak Mutation 269: gnu.trove.impl.sync.TSynchronizedDoubleList.forEachDescending(Lgnu/trove/procedure/TDoubleProcedure;)Z:198 - DeleteStatement: forEachDescending(Lgnu/trove/procedure/TDoubleProcedure;)Z
   */

  @Test
  public void test38()  throws Throwable  {
      TDoubleLinkedList tDoubleLinkedList0 = new TDoubleLinkedList((double) 19);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleLinkedList0, (Object) "");
      boolean boolean0 = tSynchronizedRandomAccessDoubleList0.forEachDescending((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 39
  /*
   * 8 covered goals:
   * 1 Weak Mutation 272: gnu.trove.impl.sync.TSynchronizedDoubleList.transformValues(Lgnu/trove/function/TDoubleFunction;)V:202 - DeleteStatement: transformValues(Lgnu/trove/function/TDoubleFunction;)V
   * 2 Weak Mutation 270: gnu.trove.impl.sync.TSynchronizedDoubleList.transformValues(Lgnu/trove/function/TDoubleFunction;)V:202 - DeleteField: mutexLjava/lang/Object;
   * 3 Weak Mutation 271: gnu.trove.impl.sync.TSynchronizedDoubleList.transformValues(Lgnu/trove/function/TDoubleFunction;)V:202 - DeleteField: listLgnu/trove/list/TDoubleList;
   * 4 gnu.trove.impl.sync.TSynchronizedDoubleList.transformValues(Lgnu/trove/function/TDoubleFunction;)V: root-Branch
   * 5 Weak Mutation 0: gnu.trove.impl.sync.TSynchronizedDoubleList.<init>(Lgnu/trove/list/TDoubleList;)V:61 - ReplaceVariable list -> list
   * 6 Weak Mutation 272: gnu.trove.impl.sync.TSynchronizedDoubleList.transformValues(Lgnu/trove/function/TDoubleFunction;)V:202 - DeleteStatement: transformValues(Lgnu/trove/function/TDoubleFunction;)V
   * 7 Weak Mutation 270: gnu.trove.impl.sync.TSynchronizedDoubleList.transformValues(Lgnu/trove/function/TDoubleFunction;)V:202 - DeleteField: mutexLjava/lang/Object;
   * 8 Weak Mutation 271: gnu.trove.impl.sync.TSynchronizedDoubleList.transformValues(Lgnu/trove/function/TDoubleFunction;)V:202 - DeleteField: listLgnu/trove/list/TDoubleList;
   */

  @Test
  public void test39()  throws Throwable  {
      TDoubleArrayList tDoubleArrayList0 = new TDoubleArrayList(532, 532);
      TSynchronizedRandomAccessDoubleList tSynchronizedRandomAccessDoubleList0 = new TSynchronizedRandomAccessDoubleList((TDoubleList) tDoubleArrayList0);
      tSynchronizedRandomAccessDoubleList0.transformValues((TDoubleFunction) null);
      assertEquals(0, tSynchronizedRandomAccessDoubleList0.size());
  }
}
