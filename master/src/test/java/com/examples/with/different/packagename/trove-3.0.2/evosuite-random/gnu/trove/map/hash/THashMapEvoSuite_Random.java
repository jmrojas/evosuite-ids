/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.hash.THashMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.lang.reflect.Array;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.AbstractMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class THashMapEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      THashMap<Object, String> tHashMap0 = new THashMap<Object, String>();
      String string0 = "\na.equals(b) =";
      int int0 = 703;
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, int0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 
         // a.equals(b) =://%0Aa.equals(b)%20=@
         // a.equals(b) =:703%0Aa.equals(b)%20=?%0Aa.equals(b)%20=#%0Aa.equals(b)%20=
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 125;
      float float0 = 0.0F;
      THashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, String> tHashMap0 = new THashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, String>(int0, float0);
      String string0 = " id= ";
      String string1 = "\\LoE.umx(0PtZ\"Bc7i[";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string1, string1, string1, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI:  id= ://%5CLoE.umx(0PtZ%22Bc7i[%5CLoE.umx(0PtZ%22Bc7i%5B?%5CLoE.umx(0PtZ%22Bc7i[#%20id=%20
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = 1811107;
          float float0 = (-745.0677F);
          THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>(int0, float0);
          tHashMap0.isEmpty();
          int int1 = 0;
          THashMap<Object, Integer> tHashMap1 = new THashMap<Object, Integer>(tHashMap0);
          String string0 = "=";
          FileOutputStream fileOutputStream0 = null;
          try {
            fileOutputStream0 = new FileOutputStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"=\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:104)
             // sun.reflect.GeneratedConstructorAccessor7.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 489407;
      float float0 = 1522.9225F;
      THashMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleEntry<Object, Integer>> tHashMap0 = new THashMap<AbstractMap.SimpleImmutableEntry<String, Integer>, AbstractMap.SimpleEntry<Object, Integer>>(int0, float0);
      tHashMap0.getAutoCompactionFactor();
      assertEquals(331, tHashMap0.capacity());
  }

//  @Test
//  public void test4()  throws Throwable  {
//      int int0 = 0;
//      THashMap<Integer, Integer> tHashMap0 = new THashMap<Integer, Integer>();
//      THashMap<String, String> tHashMap1 = new THashMap<String, String>(int0);
//      THashMap<Object, Object> tHashMap2 = new THashMap<Object, Object>(tHashMap0);
//      AbstractMap.SimpleEntry<Integer, Integer>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 4);
//      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = null;
//      try {
//        abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>((Map.Entry<? extends Integer, ? extends Integer>) abstractMap_SimpleEntryArray0);
//        fail("Expecting exception: IllegalArgumentException");
//      
//      } catch(IllegalArgumentException e) {
//         //
//         // java.lang.ClassCastException@71a67848
//         //
//      }
//  }

  @Test
  public void test5()  throws Throwable  {
      THashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, String> tHashMap0 = new THashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, String>();
      File file0 = null;
      String string0 = "";
      File file1 = new File(file0, string0);
      File file2 = file1.getCanonicalFile();
      String string1 = "";
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(file2, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }
}
