/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TDoubleFunction;
import gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap;
import gnu.trove.map.TObjectDoubleMap;
import gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap;
import gnu.trove.map.hash.TObjectDoubleHashMap;
import gnu.trove.strategy.HashingStrategy;
import gnu.trove.strategy.IdentityHashingStrategy;
import java.io.FileNotFoundException;
import java.io.PipedInputStream;
import java.io.RandomAccessFile;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.MissingResourceException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableObjectDoubleMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      TObjectDoubleCustomHashMap<Double> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Double>((HashingStrategy<? super Double>) identityHashingStrategy0);
      TUnmodifiableObjectDoubleMap<Double> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Double>((TObjectDoubleMap<Double>) tObjectDoubleCustomHashMap0);
      double[] doubleArray0 = new double[5];
      double double0 = 1688.0961115954485;
      doubleArray0[0] = double0;
      double double1 = (-1124.9935667057518);
      doubleArray0[1] = double1;
      double double2 = (-1.0);
      doubleArray0[2] = double2;
      double double3 = 1490.6833560728892;
      doubleArray0[3] = double3;
      double double4 = 1463.893322638773;
      doubleArray0[4] = double4;
      tUnmodifiableObjectDoubleMap0.values(doubleArray0);
      tObjectDoubleCustomHashMap0.size();
      TObjectDoubleHashMap<Object> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Object>();
      TUnmodifiableObjectDoubleMap<Object> tUnmodifiableObjectDoubleMap1 = new TUnmodifiableObjectDoubleMap<Object>((TObjectDoubleMap<Object>) tObjectDoubleHashMap0);
      tUnmodifiableObjectDoubleMap1.keys();
      Locale locale0 = Locale.FRENCH;
      String string0 = locale0.getISO3Country();
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      TObjectDoubleMap<Integer> tObjectDoubleMap0 = null;
      TUnmodifiableObjectDoubleMap<Integer> tUnmodifiableObjectDoubleMap0 = null;
      try {
        tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Integer>(tObjectDoubleMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      HashingStrategy<Object> hashingStrategy0 = null;
      int int0 = 1272;
      TObjectDoubleCustomHashMap<Double> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Double>((HashingStrategy<? super Double>) hashingStrategy0, int0, (float) int0);
      tObjectDoubleCustomHashMap0.tempDisableAutoCompaction();
      TUnmodifiableObjectDoubleMap<Double> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Double>((TObjectDoubleMap<Double>) tObjectDoubleCustomHashMap0);
      assertEquals(0, tUnmodifiableObjectDoubleMap0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-1729);
      TObjectDoubleCustomHashMap<Integer> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Integer>();
      TUnmodifiableObjectDoubleMap<Integer> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Integer>((TObjectDoubleMap<Integer>) tObjectDoubleCustomHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableObjectDoubleMap0.putIfAbsent((Integer) int0, (double) int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-932);
      float float0 = (-1.0F);
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(int0, float0, (double) int0);
      TUnmodifiableObjectDoubleMap<Double> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Double>((TObjectDoubleMap<Double>) tObjectDoubleHashMap0);
      TObjectDoubleMap<Object> tObjectDoubleMap0 = null;
      TUnmodifiableObjectDoubleMap<Object> tUnmodifiableObjectDoubleMap1 = null;
      try {
        tUnmodifiableObjectDoubleMap1 = new TUnmodifiableObjectDoubleMap<Object>(tObjectDoubleMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 0;
      TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(int0);
      TUnmodifiableObjectDoubleMap<Integer> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Integer>((TObjectDoubleMap<Integer>) tObjectDoubleHashMap0);
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      int int1 = 903;
      int int2 = (-1626);
      float float0 = (-523.72766F);
      TObjectDoubleCustomHashMap<Double> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Double>((HashingStrategy<? super Double>) identityHashingStrategy0, int2, float0, (double) float0);
      TUnmodifiableObjectDoubleMap<Double> tUnmodifiableObjectDoubleMap1 = new TUnmodifiableObjectDoubleMap<Double>((TObjectDoubleMap<Double>) tObjectDoubleCustomHashMap0);
      TDoubleFunction tDoubleFunction0 = null;
      // Undeclared exception!
      try {
        tUnmodifiableObjectDoubleMap1.transformValues(tDoubleFunction0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      IdentityHashingStrategy<Object> identityHashingStrategy0 = new IdentityHashingStrategy<Object>();
      int int0 = 171;
      TObjectDoubleCustomHashMap<Object> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Object>((HashingStrategy<? super Object>) identityHashingStrategy0, int0);
      TUnmodifiableObjectDoubleMap<Object> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Object>((TObjectDoubleMap<Object>) tObjectDoubleCustomHashMap0);
      String string0 = "L$gR>R'nXtL";
      URI uRI0 = null;
      try {
        uRI0 = new URI(string0, string0, string0, string0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: L$gR>R'nXtL://L$gR>R'nXtLL$gR%3ER'nXtL#L$gR%3ER'nXtL
         //
      }
  }

//   @Test
//   public void test7()  throws Throwable  {
//       IdentityHashingStrategy<Integer> identityHashingStrategy0 = new IdentityHashingStrategy<Integer>();
//       Integer integer0 = null;
//       identityHashingStrategy0.equals(integer0, integer0);
//       int int0 = 119;
//       int int1 = 0;
//       TObjectDoubleHashMap<Integer> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Integer>(int1);
//       TUnmodifiableObjectDoubleMap<Integer> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Integer>((TObjectDoubleMap<Integer>) tObjectDoubleHashMap0);
//       TObjectDoubleCustomHashMap<Integer> tObjectDoubleCustomHashMap0 = new TObjectDoubleCustomHashMap<Integer>((HashingStrategy<? super Integer>) identityHashingStrategy0, int0);
//       TUnmodifiableObjectDoubleMap<Integer> tUnmodifiableObjectDoubleMap1 = new TUnmodifiableObjectDoubleMap<Integer>((TObjectDoubleMap<Integer>) tObjectDoubleCustomHashMap0);
//       PipedInputStream pipedInputStream0 = null;
//       try {
//         pipedInputStream0 = new PipedInputStream((int) integer0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      float float0 = 0.0F;
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap0 = new TObjectDoubleHashMap<Double>(int0, float0);
      TUnmodifiableObjectDoubleMap<Double> tUnmodifiableObjectDoubleMap0 = new TUnmodifiableObjectDoubleMap<Double>((TObjectDoubleMap<Double>) tObjectDoubleHashMap0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) float0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) float0;
      doubleArray0[5] = (double) float0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) float0;
      doubleArray0[8] = (double) int0;
      tUnmodifiableObjectDoubleMap0.values(doubleArray0);
      int int1 = 1045;
      float float1 = 1098.4475F;
      TObjectDoubleHashMap<Double> tObjectDoubleHashMap1 = new TObjectDoubleHashMap<Double>(int1, float1, (double) int1);
      TUnmodifiableObjectDoubleMap<Double> tUnmodifiableObjectDoubleMap1 = new TUnmodifiableObjectDoubleMap<Double>((TObjectDoubleMap<Double>) tObjectDoubleHashMap1);
      int int2 = tUnmodifiableObjectDoubleMap1.size();
      assertEquals(0, int2);
  }
}
