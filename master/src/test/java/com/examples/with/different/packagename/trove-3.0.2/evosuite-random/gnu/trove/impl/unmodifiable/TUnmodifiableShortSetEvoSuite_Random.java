/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TShortCollection;
import gnu.trove.impl.sync.TSynchronizedRandomAccessShortList;
import gnu.trove.impl.sync.TSynchronizedShortSet;
import gnu.trove.impl.unmodifiable.TUnmodifiableShortSet;
import gnu.trove.list.TShortList;
import gnu.trove.list.array.TShortArrayList;
import gnu.trove.procedure.TShortProcedure;
import gnu.trove.set.TShortSet;
import gnu.trove.set.hash.TShortHashSet;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.util.Collection;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.text.Segment;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableShortSetEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      int int0 = (-814);
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      // Undeclared exception!
      try {
        tUnmodifiableShortSet0.retainAll((TShortCollection) tShortHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0, int0);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      TUnmodifiableShortSet tUnmodifiableShortSet1 = new TUnmodifiableShortSet((TShortSet) tUnmodifiableShortSet0);
      // Undeclared exception!
      try {
        tUnmodifiableShortSet1.removeAll((TShortCollection) tUnmodifiableShortSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 223;
      float float0 = 0.0F;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0, float0);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      Collection<Integer> collection0 = null;
      // Undeclared exception!
      try {
        tUnmodifiableShortSet0.retainAll(collection0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 15287;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      tUnmodifiableShortSet0.size();
      TShortHashSet tShortHashSet1 = new TShortHashSet();
      tShortHashSet1.isEmpty();
      TUnmodifiableShortSet tUnmodifiableShortSet1 = new TUnmodifiableShortSet((TShortSet) tShortHashSet1);
      Collection<Integer> collection0 = null;
      // Undeclared exception!
      try {
        tUnmodifiableShortSet1.removeAll(collection0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 753;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0, int0);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      tUnmodifiableShortSet0.toString();
      short short0 = (short)1;
      TShortHashSet tShortHashSet1 = new TShortHashSet(int0, (float) int0, short0);
      TUnmodifiableShortSet tUnmodifiableShortSet1 = new TUnmodifiableShortSet((TShortSet) tShortHashSet1);
      boolean boolean0 = tUnmodifiableShortSet1.isEmpty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short)1357;
      shortArray0[0] = short0;
      short short1 = (short) (-2016);
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short) (-1591);
      shortArray0[3] = short3;
      float float0 = 0.0F;
      TShortHashSet tShortHashSet0 = new TShortHashSet((int) shortArray0[0], float0, short2);
      char[] charArray0 = new char[4];
      char char0 = 'H';
      charArray0[0] = char0;
      char char1 = 'A';
      charArray0[1] = char1;
      char char2 = 'M';
      charArray0[2] = char2;
      char char3 = '_';
      charArray0[3] = char3;
      int int0 = 1;
      Segment segment0 = new Segment(charArray0, int0, (int) short2);
      String string0 = segment0.toString();
      TSynchronizedShortSet tSynchronizedShortSet0 = new TSynchronizedShortSet((TShortSet) tShortHashSet0, (Object) string0);
      TSynchronizedShortSet tSynchronizedShortSet1 = new TSynchronizedShortSet((TShortSet) tSynchronizedShortSet0);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tSynchronizedShortSet1);
      tUnmodifiableShortSet0.size();
      short short4 = (short) (-1758);
      shortArray0[4] = short4;
      short short5 = (short)397;
      shortArray0[5] = short5;
      short short6 = (short) (-1072);
      shortArray0[6] = short6;
      TShortHashSet tShortHashSet1 = new TShortHashSet(shortArray0);
      tShortHashSet1.capacity();
      tShortHashSet1.iterator();
      TUnmodifiableShortSet tUnmodifiableShortSet1 = new TUnmodifiableShortSet((TShortSet) tShortHashSet1);
      short short7 = tUnmodifiableShortSet1.getNoEntryValue();
      assertEquals((short)0, short7);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      short short0 = (short) (-1);
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0, (float) int0, short0);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      tShortHashSet0.size();
      TUnmodifiableShortSet tUnmodifiableShortSet1 = new TUnmodifiableShortSet((TShortSet) tUnmodifiableShortSet0);
      // Undeclared exception!
      try {
        tUnmodifiableShortSet1.addAll((TShortCollection) tShortHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short) (-1616);
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      short short1 = (short)880;
      shortArray0[0] = short1;
      short short2 = (short)1965;
      shortArray0[0] = short1;
      shortArray0[1] = short2;
      TShortHashSet tShortHashSet0 = new TShortHashSet((int) shortArray0[0]);
      TSynchronizedShortSet tSynchronizedShortSet0 = new TSynchronizedShortSet((TShortSet) tShortHashSet0);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tSynchronizedShortSet0);
      TShortSet tShortSet0 = null;
      TShortList tShortList0 = null;
      String string0 = File.pathSeparator;
      TSynchronizedRandomAccessShortList tSynchronizedRandomAccessShortList0 = new TSynchronizedRandomAccessShortList(tShortList0, (Object) string0);
      // Undeclared exception!
      try {
        tSynchronizedRandomAccessShortList0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      int int1 = (-444);
      float float0 = 0.0F;
      short short0 = (short)0;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int1, float0, short0);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      TUnmodifiableShortSet tUnmodifiableShortSet1 = new TUnmodifiableShortSet((TShortSet) tUnmodifiableShortSet0);
      tUnmodifiableShortSet1.iterator();
      float float1 = 0.0F;
      TShortHashSet tShortHashSet1 = new TShortHashSet(int0, float1);
      TUnmodifiableShortSet tUnmodifiableShortSet2 = new TUnmodifiableShortSet((TShortSet) tShortHashSet1);
      TSynchronizedShortSet tSynchronizedShortSet0 = new TSynchronizedShortSet((TShortSet) tShortHashSet1);
      TUnmodifiableShortSet tUnmodifiableShortSet3 = new TUnmodifiableShortSet((TShortSet) tShortHashSet1);
      tUnmodifiableShortSet3.containsAll(tShortHashSet1._set);
      TUnmodifiableShortSet tUnmodifiableShortSet4 = new TUnmodifiableShortSet((TShortSet) tSynchronizedShortSet0);
      tShortHashSet1.getNoEntryValue();
      tUnmodifiableShortSet4.containsAll(tShortHashSet1._set);
      // Undeclared exception!
      try {
        tUnmodifiableShortSet2.removeAll(tShortHashSet1._set);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TShortSet tShortSet0 = null;
      TUnmodifiableShortSet tUnmodifiableShortSet0 = null;
      try {
        tUnmodifiableShortSet0 = new TUnmodifiableShortSet(tShortSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 1507;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      short[] shortArray0 = new short[3];
      short short0 = (short)1514;
      shortArray0[0] = short0;
      short short1 = (short)1850;
      shortArray0[1] = short1;
      short short2 = (short)209;
      shortArray0[2] = short2;
      TShortHashSet tShortHashSet1 = new TShortHashSet(shortArray0);
      TUnmodifiableShortSet tUnmodifiableShortSet1 = new TUnmodifiableShortSet((TShortSet) tShortHashSet1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try {
        tUnmodifiableShortSet1.retainAll((Collection<?>) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 1038;
      TShortHashSet tShortHashSet0 = new TShortHashSet(int0);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      TUnmodifiableShortSet tUnmodifiableShortSet1 = new TUnmodifiableShortSet((TShortSet) tUnmodifiableShortSet0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try {
        tUnmodifiableShortSet1.retainAll((Collection<?>) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TShortArrayList tShortArrayList0 = new TShortArrayList();
          TShortProcedure tShortProcedure0 = null;
          tShortArrayList0.inverseGrep(tShortProcedure0);
          short[] shortArray0 = new short[10];
          short short0 = (short)1028;
          shortArray0[0] = short0;
          short short1 = (short)1361;
          shortArray0[1] = short1;
          TShortHashSet tShortHashSet0 = new TShortHashSet();
          TSynchronizedShortSet tSynchronizedShortSet0 = new TSynchronizedShortSet((TShortSet) tShortHashSet0);
          String string0 = "km#n(";
          File file0 = new File(string0);
          // Undeclared exception!
          try {
            File.createTempFile(string0, string0, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"km#n(/km#n(8758555860005394191km#n(\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.File.createTempFile(File.java:1871)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:601)
             // org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:264)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1;
      int int1 = (-1136);
      TShortHashSet tShortHashSet0 = new TShortHashSet(int1);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      short short0 = (short) (-1252);
      // Undeclared exception!
      try {
        tUnmodifiableShortSet0.add(short0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      TShortHashSet tShortHashSet0 = new TShortHashSet();
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tShortHashSet0);
      // Undeclared exception!
      try {
        tUnmodifiableShortSet0.addAll((TShortCollection) tShortHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)1092;
      shortArray0[1] = short1;
      short short2 = (short)1800;
      shortArray0[2] = short2;
      short short3 = (short)22;
      TShortHashSet tShortHashSet0 = new TShortHashSet(shortArray0);
      String string0 = "";
      URI uRI0 = URI.create(string0);
      String string1 = uRI0.getRawAuthority();
      TSynchronizedShortSet tSynchronizedShortSet0 = new TSynchronizedShortSet((TShortSet) tShortHashSet0, (Object) string1);
      TUnmodifiableShortSet tUnmodifiableShortSet0 = new TUnmodifiableShortSet((TShortSet) tSynchronizedShortSet0);
      // Undeclared exception!
      try {
        tUnmodifiableShortSet0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 1482707;
      float float0 = (-1.0F);
      TShortCollection tShortCollection0 = null;
      TShortHashSet tShortHashSet0 = null;
      try {
        tShortHashSet0 = new TShortHashSet(tShortCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
