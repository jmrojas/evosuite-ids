/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.map.TShortFloatMap;
import gnu.trove.map.hash.TShortFloatHashMap;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.StreamCorruptedException;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortFloatHashEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


//   @Test
//   public void test0()  throws Throwable  {
//       int int0 = 1019;
//       short[] shortArray0 = new short[5];
//       short short0 = (short) (-1179);
//       shortArray0[0] = short0;
//       short short1 = (short)1622;
//       shortArray0[1] = short1;
//       short short2 = (short)0;
//       shortArray0[2] = short2;
//       short short3 = (short)0;
//       shortArray0[3] = short3;
//       short short4 = (short)1;
//       shortArray0[4] = short4;
//       float[] floatArray0 = new float[9];
//       floatArray0[0] = (float) shortArray0[3];
//       floatArray0[1] = (float) short2;
//       floatArray0[2] = (float) short0;
//       float float0 = 603.2194F;
//       floatArray0[3] = float0;
//       floatArray0[4] = (float) shortArray0[3];
//       floatArray0[5] = (float) int0;
//       floatArray0[6] = (float) short0;
//       floatArray0[7] = (float) shortArray0[0];
//       floatArray0[8] = (float) shortArray0[1];
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
//       int int1 = tShortFloatHashMap0.size();
//       assertEquals(4, int1);
//       assertEquals("{0=603.2194, 1622=0.0, 1=0.0, -1179=0.0}", tShortFloatHashMap0.toString());
//       
//       TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(int0);
//       tShortFloatHashMap1.getNoEntryKey();
//       assertEquals(0.0F, tShortFloatHashMap1.getNoEntryValue(), 0.01F);
//   }

  @Test
  public void test1()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short) (-792);
      shortArray0[0] = short0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) shortArray0[0];
      floatArray0[1] = (float) short0;
      floatArray0[2] = (float) short0;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      tShortFloatHashMap0.getAutoCompactionFactor();
      short[] shortArray1 = new short[1];
      short short1 = (short)816;
      shortArray1[0] = short1;
      float[] floatArray1 = new float[6];
      floatArray1[0] = (float) short1;
      floatArray1[1] = (float) short1;
      floatArray1[2] = (float) short1;
      floatArray1[3] = (float) short1;
      floatArray1[4] = (float) shortArray1[0];
      floatArray1[5] = (float) short1;
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(shortArray1, floatArray1);
      assertEquals(17, tShortFloatHashMap1.capacity());
      
      tShortFloatHashMap1.trimToSize();
      assertTrue(tShortFloatHashMap1.equals(tShortFloatHashMap0));
  }

  @Test
  public void test2()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short) (-1064);
      shortArray0[0] = short0;
      short short1 = (short)27121;
      shortArray0[1] = short1;
      short short2 = (short) (-178);
      shortArray0[2] = short2;
      short short3 = (short) (-1);
      shortArray0[3] = short3;
      short short4 = (short) (-1);
      shortArray0[4] = short4;
      short short5 = (short) (-710);
      shortArray0[5] = short5;
      short short6 = (short) (-1868);
      shortArray0[6] = short6;
      short short7 = (short)540;
      shortArray0[7] = short7;
      short short8 = (short)0;
      shortArray0[8] = short8;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) short6;
      floatArray0[1] = (float) short7;
      floatArray0[2] = (float) short0;
      floatArray0[3] = (float) short0;
      floatArray0[4] = (float) short1;
      float float0 = (-1.0F);
      floatArray0[5] = float0;
      floatArray0[6] = (float) shortArray0[1];
      floatArray0[7] = (float) short3;
      floatArray0[8] = (float) shortArray0[7];
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
      tShortFloatHashMap0.clear();
      assertEquals("{}", tShortFloatHashMap0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0);
      short short0 = (short)0;
      tShortFloatHashMap0.contains(short0);
      float float0 = (-167.1035F);
      tShortFloatHashMap0.containsValue(float0);
      tShortFloatHashMap0.setAutoCompactionFactor((float) int0);
      tShortFloatHashMap0.size();
      tShortFloatHashMap0.clear();
      short short1 = (short)1045;
      tShortFloatHashMap0.trimToSize();
      int int1 = 9922933;
      float float1 = (-1234.8309F);
      float float2 = 1.0F;
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(int1, float1, short1, float2);
      boolean boolean0 = false;
      tShortFloatHashMap0.reenableAutoCompaction(boolean0);
      tShortFloatHashMap0.size();
      tShortFloatHashMap0.adjustValue(short1, (float) int0);
      short short2 = (short)0;
      float float3 = 1.0F;
      tShortFloatHashMap1.put(short2, float3);
      tShortFloatHashMap1._set = tShortFloatHashMap0._set;
      tShortFloatHashMap1.capacity();
      tShortFloatHashMap0.getNoEntryKey();
      int int2 = 0;
      tShortFloatHashMap0.ensureCapacity(int2);
      assertFalse(tShortFloatHashMap0.equals(tShortFloatHashMap1));
  }

//   @Test
//   public void test4()  throws Throwable  {
//       short[] shortArray0 = new short[1];
//       short short0 = (short) (-873);
//       shortArray0[0] = short0;
//       float[] floatArray0 = new float[2];
//       floatArray0[0] = (float) shortArray0[0];
//       floatArray0[1] = (float) short0;
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
//       tShortFloatHashMap0._set = shortArray0;
//       assertEquals(0.0F, tShortFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(0, tShortFloatHashMap0.getNoEntryKey());
//       assertEquals("{-873=-873.0}", tShortFloatHashMap0.toString());
//       
//       int int0 = (-886);
//       float float0 = 2028.965F;
//       TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(int0, float0);
//       short short1 = tShortFloatHashMap1.getNoEntryKey();
//       assertEquals((short)0, short1);
//       
//       float float1 = 1543.8534F;
//       short short2 = (short)540;
//       TShortFloatHashMap tShortFloatHashMap2 = new TShortFloatHashMap(int0, float1, short2, float1);
//       assertEquals(540, tShortFloatHashMap2.getNoEntryKey());
//       
//       int int1 = 1090;
//       TShortFloatHashMap tShortFloatHashMap3 = new TShortFloatHashMap();
//       String string0 = tShortFloatHashMap3.toString();
//       assertNotNull(string0);
//       
//       tShortFloatHashMap3.keySet();
//       float float2 = (-1.0F);
//       TShortFloatHashMap tShortFloatHashMap4 = new TShortFloatHashMap(int1, float2);
//       tShortFloatHashMap3.putAll((TShortFloatMap) tShortFloatHashMap4);
//       assertEquals(0.0F, tShortFloatHashMap4.getNoEntryValue(), 0.01F);
//       
//       float float3 = (-1376.204F);
//       short short3 = (short)0;
//       TShortFloatHashMap tShortFloatHashMap5 = new TShortFloatHashMap(int1, float3, short3, (float) short3);
//       assertEquals(0.0F, tShortFloatHashMap5.getNoEntryValue(), 0.01F);
//       
//       TShortFloatHashMap tShortFloatHashMap6 = new TShortFloatHashMap();
//       tShortFloatHashMap6.keys();
//       assertEquals(0.0F, tShortFloatHashMap6.getNoEntryValue(), 0.01F);
//       assertFalse(tShortFloatHashMap6.equals(tShortFloatHashMap0));
//       assertEquals(0, tShortFloatHashMap6.getNoEntryKey());
//       assertEquals(23, tShortFloatHashMap6.capacity());
//   }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-842);
      float float0 = (-1.0F);
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, float0);
      tShortFloatHashMap0.valueCollection();
      short short0 = (short)0;
      tShortFloatHashMap0.increment(short0);
      short[] shortArray0 = new short[3];
      short short1 = (short) (-513);
      shortArray0[0] = short1;
      short short2 = (short)0;
      shortArray0[1] = short2;
      short short3 = (short) (-829);
      shortArray0[2] = short3;
      float[] floatArray0 = new float[5];
      float float1 = (-1783.902F);
      floatArray0[0] = float1;
      floatArray0[1] = (float) shortArray0[1];
      floatArray0[2] = (float) short3;
      floatArray0[3] = (float) short3;
      float float2 = 1.0F;
      floatArray0[0] = (float) short2;
      floatArray0[1] = (float) shortArray0[2];
      floatArray0[2] = float1;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[4] = float2;
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(shortArray0, floatArray0);
      assertEquals(3, tShortFloatHashMap1.size());
      
      tShortFloatHashMap1.clear();
      assertEquals(11, tShortFloatHashMap1.capacity());
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 82037;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0);
      String string0 = "";
      // Undeclared exception!
      try {
        File.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 1822;
      int int1 = (-671);
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int1);
      tShortFloatHashMap0.capacity();
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(int0);
      TShortFloatHashMap tShortFloatHashMap2 = new TShortFloatHashMap((TShortFloatMap) tShortFloatHashMap1);
      int int2 = 0;
      int int3 = 242;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(tShortFloatHashMap2._states, int2, int3);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 00000000
         //
      }
  }

//   @Test
//   public void test8()  throws Throwable  {
//       int int0 = 0;
//       float float0 = (-1.0F);
//       short short0 = (short) (-1893);
//       float float1 = 1155.6173F;
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, float0, short0, float1);
//       TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap();
//       tShortFloatHashMap1.valueCollection();
//       assertEquals(23, tShortFloatHashMap1.capacity());
//       
//       int int1 = (-373);
//       float float2 = 260.70828F;
//       tShortFloatHashMap1.trimToSize();
//       int int2 = 31;
//       float float3 = 1.0F;
//       short[] shortArray0 = new short[4];
//       short short1 = (short)498;
//       shortArray0[0] = short1;
//       short short2 = (short) (-330);
//       shortArray0[1] = short2;
//       short short3 = (short)0;
//       shortArray0[2] = short3;
//       short short4 = (short)166;
//       shortArray0[3] = short4;
//       float[] floatArray0 = new float[10];
//       floatArray0[0] = (float) shortArray0[1];
//       floatArray0[1] = (float) short1;
//       floatArray0[2] = (float) short2;
//       floatArray0[3] = (float) short2;
//       float float4 = 705.72186F;
//       floatArray0[4] = float4;
//       floatArray0[5] = (float) int2;
//       floatArray0[6] = (float) int2;
//       floatArray0[7] = float3;
//       floatArray0[8] = (float) shortArray0[0];
//       floatArray0[9] = (float) short4;
//       TShortFloatHashMap tShortFloatHashMap2 = new TShortFloatHashMap(shortArray0, floatArray0);
//       short[] shortArray1 = tShortFloatHashMap2._set;
//       TShortFloatHashMap tShortFloatHashMap3 = new TShortFloatHashMap(int2, float3);
//       TShortFloatHashMap tShortFloatHashMap4 = new TShortFloatHashMap(int1, float2);
//       tShortFloatHashMap4.isEmpty();
//       assertEquals(0.0F, tShortFloatHashMap4.getNoEntryValue(), 0.01F);
//   }

//   @Test
//   public void test9()  throws Throwable  {
//       int int0 = 261;
//       int int1 = 0;
//       short short0 = (short)39;
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
//       float[] floatArray0 = new float[3];
//       floatArray0[0] = (float) int1;
//       floatArray0[1] = (float) short0;
//       floatArray0[2] = (float) int0;
//       float[] floatArray1 = tShortFloatHashMap0.values(floatArray0);
//       assertEquals(0.0F, tShortFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(0, tShortFloatHashMap0.getNoEntryKey());
//       assertNotNull(floatArray1);
//       
//       float float0 = (-1.0F);
//       TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(int1, (float) int0, short0, float0);
//       tShortFloatHashMap1.isEmpty();
//       short short1 = (short)0;
//       TShortFloatHashMap tShortFloatHashMap2 = new TShortFloatHashMap(int0, (float) int0, short1, (float) short1);
//       float float1 = (-1873.5762F);
//       short short2 = (short)161;
//       TShortFloatHashMap tShortFloatHashMap3 = new TShortFloatHashMap((int) short2);
//       assertEquals(331, tShortFloatHashMap3.capacity());
//       assertEquals(0, tShortFloatHashMap3.getNoEntryKey());
//       assertEquals(0.0F, tShortFloatHashMap3.getNoEntryValue(), 0.01F);
//       
//       boolean boolean0 = tShortFloatHashMap1.contains(short2);
//       assertEquals(39, tShortFloatHashMap1.getNoEntryKey());
//       assertEquals(false, boolean0);
//       
//       tShortFloatHashMap2.capacity();
//       tShortFloatHashMap2.isEmpty();
//       // Undeclared exception!
//       try {
//         tShortFloatHashMap2.setAutoCompactionFactor(float1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Factor must be >= 0: -1873.5762
//          //
//       }
//   }

//   @Test
//   public void test10()  throws Throwable  {
//       int int0 = 1;
//       short short0 = (short) (-1073);
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, (float) int0, short0, (float) int0);
//       short[] shortArray0 = new short[6];
//       shortArray0[0] = short0;
//       shortArray0[0] = short0;
//       short short1 = (short)106;
//       shortArray0[1] = short1;
//       shortArray0[2] = short0;
//       shortArray0[3] = short1;
//       shortArray0[4] = short0;
//       shortArray0[5] = short1;
//       shortArray0[1] = short0;
//       shortArray0[0] = short0;
//       shortArray0[1] = short0;
//       shortArray0[2] = short0;
//       shortArray0[3] = short0;
//       shortArray0[4] = short0;
//       shortArray0[5] = short0;
//       shortArray0[2] = short0;
//       short short2 = (short) (-6079);
//       shortArray0[3] = short2;
//       shortArray0[4] = short0;
//       shortArray0[5] = short0;
//       shortArray0[0] = short0;
//       short short3 = (short)494;
//       tShortFloatHashMap0.getAutoCompactionFactor();
//       tShortFloatHashMap0.isEmpty();
//       shortArray0[1] = short3;
//       shortArray0[2] = short0;
//       shortArray0[3] = short0;
//       tShortFloatHashMap0.size();
//       shortArray0[4] = short0;
//       shortArray0[5] = short0;
//       tShortFloatHashMap0._set = shortArray0;
//       assertEquals(-1073, tShortFloatHashMap0.getNoEntryKey());
//       assertEquals(1.0F, tShortFloatHashMap0.getNoEntryValue(), 0.01F);
//   }

//   @Test
//   public void test11()  throws Throwable  {
//       int int0 = 340;
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0);
//       float[] floatArray0 = new float[4];
//       floatArray0[0] = (float) int0;
//       floatArray0[1] = (float) int0;
//       floatArray0[2] = (float) int0;
//       floatArray0[3] = (float) int0;
//       float[] floatArray1 = tShortFloatHashMap0.values(floatArray0);
//       assertEquals(719, tShortFloatHashMap0.capacity());
//       assertEquals(0, tShortFloatHashMap0.getNoEntryKey());
//       assertNotNull(floatArray1);
//       assertEquals(0.0F, tShortFloatHashMap0.getNoEntryValue(), 0.01F);
//   }

//   @Test
//   public void test12()  throws Throwable  {
//       int int0 = (-1963);
//       float float0 = (-1013.3703F);
//       short short0 = (short)0;
//       float float1 = 1.0F;
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int0, (float) int0, short0, float1);
//       assertEquals(1.0F, tShortFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(0, tShortFloatHashMap0.getNoEntryKey());
//       
//       TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(int0, float0);
//       String string0 = tShortFloatHashMap1.toString();
//       assertNotNull(string0);
//       
//       int int1 = 129;
//       short short1 = (short)155;
//       boolean boolean0 = tShortFloatHashMap1.contains(short1);
//       assertEquals(false, boolean0);
//       
//       TShortFloatHashMap tShortFloatHashMap2 = new TShortFloatHashMap(int1);
//       assertEquals(277, tShortFloatHashMap2.capacity());
//       
//       tShortFloatHashMap2.ensureCapacity(int1);
//       int int2 = (-352);
//       TShortFloatHashMap tShortFloatHashMap3 = new TShortFloatHashMap(int2);
//       short short2 = (short) (-1478);
//       float float2 = tShortFloatHashMap2.remove(short2);
//       assertEquals(0, tShortFloatHashMap2.getNoEntryKey());
//       assertEquals(0.0F, float2, 0.01F);
//       
//       tShortFloatHashMap1.tempDisableAutoCompaction();
//       assertEquals(0, tShortFloatHashMap1.getNoEntryKey());
//       assertEquals(0.0F, tShortFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertTrue(tShortFloatHashMap1.equals(tShortFloatHashMap2));
//   }

//   @Test
//   public void test13()  throws Throwable  {
//       int int0 = 0;
//       short[] shortArray0 = new short[9];
//       short short0 = (short)17;
//       shortArray0[0] = short0;
//       short short1 = (short) (-1238);
//       shortArray0[1] = short1;
//       short short2 = (short) (-2023);
//       shortArray0[2] = short2;
//       short short3 = (short)1852;
//       shortArray0[3] = short3;
//       short short4 = (short)0;
//       shortArray0[4] = short4;
//       short short5 = (short)644;
//       shortArray0[5] = short5;
//       short short6 = (short) (-224);
//       shortArray0[6] = short6;
//       short short7 = (short)1735;
//       shortArray0[7] = short7;
//       short short8 = (short)653;
//       shortArray0[8] = short8;
//       float[] floatArray0 = new float[7];
//       floatArray0[0] = (float) shortArray0[5];
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
//       floatArray0[0] = (float) short3;
//       floatArray0[1] = (float) shortArray0[5];
//       floatArray0[2] = (float) shortArray0[8];
//       floatArray0[3] = (float) short5;
//       floatArray0[4] = (float) shortArray0[8];
//       floatArray0[5] = (float) shortArray0[8];
//       float float0 = (-183.37038F);
//       floatArray0[6] = float0;
//       TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap((TShortFloatMap) tShortFloatHashMap0);
//       boolean boolean0 = false;
//       tShortFloatHashMap1.reenableAutoCompaction(boolean0);
//       assertEquals("{17=644.0, 1852=0.0, -1238=0.0, 644=0.0, -2023=0.0, -224=0.0, 0=0.0}", tShortFloatHashMap0.toString());
//       
//       floatArray0[1] = (float) short7;
//       floatArray0[2] = (float) shortArray0[7];
//       floatArray0[3] = (float) short1;
//       floatArray0[4] = (float) short2;
//       floatArray0[5] = (float) shortArray0[7];
//       floatArray0[6] = (float) short4;
//       TShortFloatHashMap tShortFloatHashMap2 = new TShortFloatHashMap(shortArray0, floatArray0);
//       short short9 = tShortFloatHashMap2.getNoEntryKey();
//       assertFalse(tShortFloatHashMap2.equals(tShortFloatHashMap1));
//       assertEquals((short)0, short9);
//       
//       TShortFloatHashMap tShortFloatHashMap3 = new TShortFloatHashMap(int0);
//       tShortFloatHashMap3.getAutoCompactionFactor();
//       assertEquals(0.0F, tShortFloatHashMap3.getNoEntryValue(), 0.01F);
//   }

//   @Test
//   public void test14()  throws Throwable  {
//       short[] shortArray0 = new short[10];
//       short short0 = (short)0;
//       shortArray0[0] = short0;
//       short short1 = (short)0;
//       shortArray0[1] = short1;
//       short short2 = (short) (-1949);
//       shortArray0[2] = short2;
//       short short3 = (short)0;
//       shortArray0[3] = short3;
//       short short4 = (short)303;
//       shortArray0[4] = short4;
//       short short5 = (short)75;
//       shortArray0[5] = short5;
//       short short6 = (short)412;
//       shortArray0[6] = short6;
//       short short7 = (short)0;
//       shortArray0[7] = short7;
//       short short8 = (short) (-1791);
//       shortArray0[8] = short8;
//       short short9 = (short)94;
//       shortArray0[9] = short9;
//       float[] floatArray0 = new float[6];
//       floatArray0[0] = (float) shortArray0[3];
//       floatArray0[1] = (float) short3;
//       floatArray0[2] = (float) short2;
//       floatArray0[3] = (float) short9;
//       floatArray0[4] = (float) short7;
//       floatArray0[5] = (float) short9;
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(shortArray0, floatArray0);
//       assertEquals(0.0F, tShortFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(0, tShortFloatHashMap0.getNoEntryKey());
//       assertEquals("{-1949=-1949.0, 75=94.0, 303=0.0, 0=94.0}", tShortFloatHashMap0.toString());
//       assertEquals(4, tShortFloatHashMap0.size());
//   }

//   @Test
//   public void test15()  throws Throwable  {
//       short[] shortArray0 = new short[7];
//       short short0 = (short)1;
//       shortArray0[0] = short0;
//       short short1 = (short)1;
//       shortArray0[1] = short1;
//       short short2 = (short)1759;
//       shortArray0[2] = short2;
//       short short3 = (short)578;
//       shortArray0[3] = short3;
//       short short4 = (short)379;
//       shortArray0[4] = short4;
//       short short5 = (short) (-788);
//       shortArray0[5] = short5;
//       short short6 = (short)942;
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap((int) short2);
//       float[] floatArray0 = new float[6];
//       float float0 = (-1966.0627F);
//       floatArray0[0] = float0;
//       floatArray0[1] = (float) short6;
//       floatArray0[2] = (float) short6;
//       floatArray0[3] = (float) short4;
//       float float1 = 0.0F;
//       floatArray0[4] = float1;
//       floatArray0[5] = (float) short0;
//       float[] floatArray1 = tShortFloatHashMap0.values(floatArray0);
//       assertNotNull(floatArray1);
//       
//       shortArray0[6] = short6;
//       float[] floatArray2 = new float[2];
//       floatArray2[0] = (float) shortArray0[6];
//       floatArray2[1] = (float) shortArray0[0];
//       TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(shortArray0, floatArray2);
//       tShortFloatHashMap1.getAutoCompactionFactor();
//       assertEquals(17, tShortFloatHashMap1.capacity());
//       assertEquals(0, tShortFloatHashMap1.getNoEntryKey());
//       assertEquals(0.0F, tShortFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals(1, tShortFloatHashMap1.size());
//       assertEquals("{1=1.0}", tShortFloatHashMap1.toString());
//   }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 0;
      TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap();
      assertEquals(23, tShortFloatHashMap0.capacity());
      
      float float0 = 1.0F;
      TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(int0);
      tShortFloatHashMap1.clear();
      short short0 = (short)834;
      tShortFloatHashMap1.capacity();
      tShortFloatHashMap1.ensureCapacity(int0);
      TShortFloatHashMap tShortFloatHashMap2 = new TShortFloatHashMap(int0, float0, short0, (float) short0);
      tShortFloatHashMap2.size();
      int int1 = 159;
      tShortFloatHashMap0.ensureCapacity(int1);
      tShortFloatHashMap2.hashCode();
      boolean boolean0 = false;
      short short1 = (short) (-1);
      tShortFloatHashMap2.get(short1);
      tShortFloatHashMap1.reenableAutoCompaction(boolean0);
      short short2 = (short)0;
      tShortFloatHashMap1.toString();
      boolean boolean1 = tShortFloatHashMap0.adjustValue(short2, short0);
      assertEquals(false, boolean1);
  }

//   @Test
//   public void test17()  throws Throwable  {
//       int int0 = 0;
//       int int1 = 0;
//       TShortFloatHashMap tShortFloatHashMap0 = new TShortFloatHashMap(int1);
//       boolean boolean0 = true;
//       tShortFloatHashMap0.reenableAutoCompaction(boolean0);
//       assertEquals(0.0F, tShortFloatHashMap0.getNoEntryValue(), 0.01F);
//       assertEquals(0, tShortFloatHashMap0.getNoEntryKey());
//       
//       TShortFloatHashMap tShortFloatHashMap1 = new TShortFloatHashMap(int0, int0);
//       tShortFloatHashMap1.isEmpty();
//       assertEquals(0.0F, tShortFloatHashMap1.getNoEntryValue(), 0.01F);
//       assertEquals(0, tShortFloatHashMap1.getNoEntryKey());
//   }
}
