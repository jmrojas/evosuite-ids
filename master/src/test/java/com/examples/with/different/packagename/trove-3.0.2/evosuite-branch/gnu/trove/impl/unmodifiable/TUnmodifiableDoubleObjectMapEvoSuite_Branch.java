/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.unmodifiable;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.function.TObjectFunction;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap;
import gnu.trove.impl.unmodifiable.TUnmodifiableDoubleSet;
import gnu.trove.iterator.TDoubleObjectIterator;
import gnu.trove.map.TDoubleObjectMap;
import gnu.trove.map.hash.TDoubleObjectHashMap;
import gnu.trove.procedure.TDoubleObjectProcedure;
import gnu.trove.procedure.TDoubleProcedure;
import gnu.trove.procedure.TObjectProcedure;
import gnu.trove.procedure.array.ToObjectArrayProceedure;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TUnmodifiableDoubleObjectMapEvoSuite_Branch {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.loadLogbackForEvoSuite(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.put(DLjava/lang/Object;)Ljava/lang/Object;: root-Branch
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.<init>(Lgnu/trove/map/TDoubleObjectMap;)V: I17 Branch 1 IFNONNULL L53 - true
   */

  @Test
  public void test0()  throws Throwable  {
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>((-87));
      TUnmodifiableDoubleObjectMap<Integer> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleObjectMap0.put((double) (-87), (Integer) (-87));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachEntry(Lgnu/trove/procedure/TDoubleObjectProcedure;)Z: root-Branch
   */

  @Test
  public void test1()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>((-999));
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Object>();
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      tDoubleObjectHashMap1.putAll((TDoubleObjectMap<?>) tUnmodifiableDoubleObjectMap0);
      assertEquals(23, tDoubleObjectHashMap1.capacity());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachKey(Lgnu/trove/procedure/TDoubleProcedure;)Z: root-Branch
   */

  @Test
  public void test2()  throws Throwable  {
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>((-1801));
      TUnmodifiableDoubleObjectMap<Integer> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap0);
      boolean boolean0 = tUnmodifiableDoubleObjectMap0.forEachKey((TDoubleProcedure) null);
      assertEquals(true, boolean0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>();
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      String string0 = tUnmodifiableDoubleObjectMap0.toString();
      assertEquals("{}", string0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.hashCode()I: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>((-21), (-21));
      TUnmodifiableDoubleObjectMap<Integer> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap0);
      int int0 = tUnmodifiableDoubleObjectMap0.hashCode();
      assertEquals(0, int0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.transformValues(Lgnu/trove/function/TObjectFunction;)V: root-Branch
   */

  @Test
  public void test5()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>(84024581, 84024581);
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleObjectMap0.transformValues((TObjectFunction<Object, Object>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.retainEntries(Lgnu/trove/procedure/TDoubleObjectProcedure;)Z: root-Branch
   */

  @Test
  public void test6()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>();
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleObjectMap0.retainEntries((TDoubleObjectProcedure<? super Object>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.get(D)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>((-1801));
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      tUnmodifiableDoubleObjectMap0.get((double) (-1801));
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.putIfAbsent(DLjava/lang/Object;)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test8()  throws Throwable  {
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>((-21), (-21));
      TUnmodifiableDoubleObjectMap<Integer> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleObjectMap0.putIfAbsent((double) 0, (Integer) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.containsKey(D)Z: root-Branch
   */

  @Test
  public void test9()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>((-3), (-3));
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      boolean boolean0 = tUnmodifiableDoubleObjectMap0.containsKey((double) (-3));
      assertEquals(false, boolean0);
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.iterator()Lgnu/trove/iterator/TDoubleObjectIterator;: root-Branch
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap$1.<init>(Lgnu/trove/impl/unmodifiable/TUnmodifiableDoubleObjectMap;)V: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>();
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      TDoubleObjectIterator<Object> tDoubleObjectIterator0 = tUnmodifiableDoubleObjectMap0.iterator();
      assertEquals(false, tDoubleObjectIterator0.hasNext());
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keys()[D: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>();
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      double[] doubleArray0 = tUnmodifiableDoubleObjectMap0.keys();
      assertNotNull(doubleArray0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.size()I: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>((-3), (-3));
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Object>((TDoubleObjectMap<?>) tDoubleObjectHashMap0);
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap1);
      int int0 = tUnmodifiableDoubleObjectMap0.size();
      assertEquals(0, int0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.containsValue(Ljava/lang/Object;)Z: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>((-1801));
      TUnmodifiableDoubleObjectMap<Integer> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap0);
      boolean boolean0 = tUnmodifiableDoubleObjectMap0.containsValue((Object) null);
      assertEquals(false, boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.remove(D)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TDoubleObjectHashMap<String> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<String>(0);
      TUnmodifiableDoubleObjectMap<String> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<String>((TDoubleObjectMap<String>) tDoubleObjectHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleObjectMap0.remove((double) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.isEmpty()Z: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>((-3), (-3));
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Object>((TDoubleObjectMap<?>) tDoubleObjectHashMap0);
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap1);
      boolean boolean0 = tUnmodifiableDoubleObjectMap0.isEmpty();
      assertEquals(true, boolean0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.forEachValue(Lgnu/trove/procedure/TObjectProcedure;)Z: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>();
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      Object[] objectArray0 = new Object[4];
      ToObjectArrayProceedure<Object> toObjectArrayProceedure0 = new ToObjectArrayProceedure<Object>(objectArray0);
      boolean boolean0 = tUnmodifiableDoubleObjectMap0.forEachValue((TObjectProcedure<? super Object>) toObjectArrayProceedure0);
      assertEquals(true, boolean0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.putAll(Lgnu/trove/map/TDoubleObjectMap;)V: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>((-3), (-3));
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap1 = new TDoubleObjectHashMap<Object>((TDoubleObjectMap<?>) tDoubleObjectHashMap0);
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap1);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleObjectMap0.putAll((TDoubleObjectMap<?>) tDoubleObjectHashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.getNoEntryKey()D: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>((-3), (-3));
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      double double0 = tUnmodifiableDoubleObjectMap0.getNoEntryKey();
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.values([Ljava/lang/Object;)[Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>(0);
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      Double[] doubleArray0 = new Double[1];
      Double[] doubleArray1 = tUnmodifiableDoubleObjectMap0.values(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.putAll(Ljava/util/Map;)V: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>((-18));
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      // Undeclared exception!
      try {
        tUnmodifiableDoubleObjectMap0.putAll((Map<? extends Double, ?>) hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.values()[Ljava/lang/Object;: root-Branch
   */

//   @Test
//   public void test21()  throws Throwable  {
//       TDoubleObjectHashMap<Integer> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Integer>((-87));
//       TUnmodifiableDoubleObjectMap<Integer> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Integer>((TDoubleObjectMap<Integer>) tDoubleObjectHashMap0);
//       Integer[] integerArray0 = tUnmodifiableDoubleObjectMap0.values();
//       assertNotNull(integerArray0);
//   }

  //Test case number: 22
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keys([D)[D: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>((-1801));
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      double[] doubleArray0 = tUnmodifiableDoubleObjectMap0.keys(tDoubleObjectHashMap0._set);
      assertNotNull(doubleArray0);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.clear()V: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>();
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      // Undeclared exception!
      try {
        tUnmodifiableDoubleObjectMap0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.<init>(Lgnu/trove/map/TDoubleObjectMap;)V: I17 Branch 1 IFNONNULL L53 - false
   */

  @Test
  public void test24()  throws Throwable  {
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = null;
      try {
        tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 25
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;: I4 Branch 2 IFNONNULL L74 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.keySet()Lgnu/trove/set/TDoubleSet;: I4 Branch 2 IFNONNULL L74 - false
   */

  @Test
  public void test25()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>((-1801));
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet0 = (TUnmodifiableDoubleSet)tUnmodifiableDoubleObjectMap0.keySet();
      assertNotNull(tUnmodifiableDoubleSet0);
      
      TUnmodifiableDoubleSet tUnmodifiableDoubleSet1 = (TUnmodifiableDoubleSet)tUnmodifiableDoubleObjectMap0.keySet();
      assertSame(tUnmodifiableDoubleSet1, tUnmodifiableDoubleSet0);
  }

  //Test case number: 26
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;: I4 Branch 3 IFNONNULL L82 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.valueCollection()Ljava/util/Collection;: I4 Branch 3 IFNONNULL L82 - false
   */

  @Test
  public void test26()  throws Throwable  {
      TDoubleObjectHashMap<Object> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Object>();
      TUnmodifiableDoubleObjectMap<Object> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Object>((TDoubleObjectMap<Object>) tDoubleObjectHashMap0);
      Collection<Object> collection0 = tUnmodifiableDoubleObjectMap0.valueCollection();
      assertNotNull(collection0);
      
      Collection<Object> collection1 = tUnmodifiableDoubleObjectMap0.valueCollection();
      assertSame(collection1, collection0);
  }

  //Test case number: 27
  /*
   * 2 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - true
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - false
   */

  @Test
  public void test27()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>(0);
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      boolean boolean0 = tUnmodifiableDoubleObjectMap0.equals((Object) tDoubleObjectHashMap0);
      assertEquals(true, boolean0);
  }

  //Test case number: 28
  /*
   * 3 covered goals:
   * 1 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z: I4 Branch 4 IF_ACMPEQ L89 - false
   * 2 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.equals(Ljava/lang/Object;)Z: I9 Branch 5 IFEQ L89 - true
   * 3 gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap.<init>(Lgnu/trove/map/TDoubleObjectMap;)V: I17 Branch 1 IFNONNULL L53 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TDoubleObjectHashMap<Double> tDoubleObjectHashMap0 = new TDoubleObjectHashMap<Double>((-3), (-3));
      TUnmodifiableDoubleObjectMap<Double> tUnmodifiableDoubleObjectMap0 = new TUnmodifiableDoubleObjectMap<Double>((TDoubleObjectMap<Double>) tDoubleObjectHashMap0);
      boolean boolean0 = tUnmodifiableDoubleObjectMap0.equals((Object) (-3));
      assertEquals(false, boolean0);
  }
}
