/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.impl.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TByteCollection;
import gnu.trove.impl.sync.TSynchronizedByteSet;
import gnu.trove.list.TByteList;
import gnu.trove.list.array.TByteArrayList;
import gnu.trove.list.linked.TByteLinkedList;
import gnu.trove.map.TByteObjectMap;
import gnu.trove.map.hash.TByteObjectHashMap;
import gnu.trove.set.TByteSet;
import gnu.trove.set.hash.TByteHashSet;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.RandomAccessFile;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.LinkedList;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class TByteHashEvoSuite_Random {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = (-8);
      float float0 = 10.0F;
      byte byte0 = (byte)0;
      TByteHashSet tByteHashSet0 = new TByteHashSet(int0, float0, byte0);
      String string0 = "=K0=/A~Y{&>E";
      File file0 = new File(string0);
      File file1 = file0.getParentFile();
      File file2 = file1.getCanonicalFile();
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream(file2);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /mnt/fastdata/ac1gf/Experiments_Major/apps/trove-3.0.2/=K0= (No such file or directory)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 2295859;
      TByteCollection tByteCollection0 = null;
      TByteArrayList tByteArrayList0 = null;
      try {
        tByteArrayList0 = new TByteArrayList(tByteCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TByteArrayList tByteArrayList0 = new TByteArrayList();
      int int0 = 1570;
      // Undeclared exception!
      try {
        tByteArrayList0.subList(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // end index < 10
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)56;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-1);
      byteArray0[6] = byte6;
      TByteHashSet tByteHashSet0 = new TByteHashSet(byteArray0);
      assertEquals("{56,-1,0}", tByteHashSet0.toString());
      
      TByteHashSet tByteHashSet1 = new TByteHashSet();
      assertEquals(23, tByteHashSet1.capacity());
  }

//  @Test
//  public void test4()  throws Throwable  {
//      int int0 = 0;
//      TByteObjectHashMap<String> tByteObjectHashMap0 = new TByteObjectHashMap<String>(int0);
//      TByteObjectHashMap<Object> tByteObjectHashMap1 = new TByteObjectHashMap<Object>((TByteObjectMap<?>) tByteObjectHashMap0);
//      byte byte0 = (byte)48;
//      byte byte1 = (byte) (-110);
//      byte byte2 = (byte) (-45);
//      // Undeclared exception!
//      try {
//        tByteObjectHashMap0.indexRehashed(byte1, byte0, byte0, byte2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
//      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 47
//         //
//      }
//  }

  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          int int0 = Integer.MAX_VALUE;
          int int1 = (-113);
          int int2 = 0;
          float float0 = (-1.0F);
          byte byte0 = (byte) (-71);
          TByteObjectHashMap<Object> tByteObjectHashMap0 = new TByteObjectHashMap<Object>(int2, float0, byte0);
          String string0 = "gnu.trove.no_entry.char";
          File file0 = new File(string0);
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"gnu.trove.no_entry.char\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1567)
             // org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:165)
             // java.io.PrintStream.<init>(PrintStream.java:279)
             // sun.reflect.GeneratedConstructorAccessor13.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             // org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             // org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:144)
             // org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             // org.evosuite.testcase.TestRunnable.call(TestRunnable.java:1)
             // java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             // java.util.concurrent.FutureTask.run(FutureTask.java:166)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             // java.lang.Thread.run(Thread.java:722)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

//   @Test
//   public void test6()  throws Throwable  {
//       TByteHashSet tByteHashSet0 = new TByteHashSet();
//       byte[] byteArray0 = new byte[8];
//       byte byte0 = (byte) (-1);
//       byteArray0[0] = byte0;
//       byte byte1 = (byte)0;
//       byteArray0[1] = byte1;
//       byte byte2 = (byte)0;
//       byteArray0[2] = byte2;
//       byte byte3 = (byte) (-9);
//       byteArray0[3] = byte3;
//       byte byte4 = (byte)98;
//       byteArray0[4] = byte4;
//       byte byte5 = (byte)58;
//       byteArray0[5] = byte5;
//       byte byte6 = (byte)0;
//       byteArray0[6] = byte6;
//       byte byte7 = (byte)64;
//       byteArray0[7] = byte7;
//       boolean boolean0 = tByteHashSet0.removeAll(byteArray0);
//       assertEquals(23, tByteHashSet0.capacity());
//       assertEquals(false, boolean0);
//       
//       int int0 = 0;
//       byte byte8 = (byte) (-22);
//       TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>(int0, (float) int0, byte8);
//       TByteObjectHashMap<Object> tByteObjectHashMap1 = new TByteObjectHashMap<Object>((int) byte8);
//       TByteHashSet tByteHashSet1 = new TByteHashSet(int0, (float) int0, byte8);
//       byte[] byteArray1 = tByteHashSet1._set;
//       assertEquals(-22, tByteHashSet1.getNoEntryValue());
//       
//       String string0 = tByteObjectHashMap1.toString();
//       assertNotNull(string0);
//       
//       float float0 = 3.4028235E38F;
//       tByteObjectHashMap0.setAutoCompactionFactor(float0);
//       boolean boolean1 = tByteObjectHashMap1.contains(byte8);
//       assertEquals(false, boolean1);
//       
//       boolean boolean2 = tByteObjectHashMap0.containsValue((Object) string0);
//       assertTrue(boolean2 == boolean0);
//   }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-1383);
      TByteHashSet tByteHashSet0 = new TByteHashSet(int0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)53;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-27);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      tByteHashSet0.containsAll(byteArray0);
      int int1 = tByteHashSet0.size();
      assertFalse(int1 == int0);
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 243;
      float float0 = 0.0F;
      TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>(int0, float0);
      String string0 = "";
      TByteHashSet tByteHashSet0 = new TByteHashSet();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)82;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-117);
      byteArray0[2] = byte2;
      byte byte3 = (byte)64;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)95;
      byteArray0[5] = byte5;
      byte byte6 = (byte)49;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-103);
      byteArray0[7] = byte7;
      boolean boolean0 = tByteHashSet0.retainAll(byteArray0);
      int int1 = 0;
      TByteObjectHashMap<String> tByteObjectHashMap1 = new TByteObjectHashMap<String>(int1, int1);
      boolean boolean1 = true;
      tByteObjectHashMap1.reenableAutoCompaction(boolean1);
      URI uRI0 = new URI(string0);
      URI uRI1 = uRI0.parseServerAuthority();
      URI uRI2 = uRI1.relativize(uRI0);
      String string1 = uRI2.getRawPath();
      uRI0.parseServerAuthority();
      boolean boolean2 = tByteObjectHashMap0.equals((Object) string1);
      assertTrue(boolean2 == boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-152);
      int int1 = 0;
      int int2 = (-250);
      byte byte0 = (byte)75;
      TByteObjectHashMap<Object> tByteObjectHashMap0 = new TByteObjectHashMap<Object>(int2, (float) int2, byte0);
      TByteList tByteList0 = null;
      String string0 = "";
      RandomAccessFile randomAccessFile0 = null;
      try {
        randomAccessFile0 = new RandomAccessFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TByteObjectHashMap<Object> tByteObjectHashMap0 = new TByteObjectHashMap<Object>();
      byte byte0 = (byte) (-114);
      TByteLinkedList tByteLinkedList0 = new TByteLinkedList(byte0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[4] = byte1;
      byteArray0[5] = byte0;
      byteArray0[6] = byte0;
      byteArray0[7] = byte0;
      TByteHashSet tByteHashSet0 = new TByteHashSet(byteArray0);
      tByteHashSet0.add(byte1);
      // Undeclared exception!
      try {
        tByteLinkedList0.subList((int) byte0, (int) byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // begin index can not be < 0
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 163;
      byte byte0 = (byte)115;
      TByteObjectHashMap<Integer> tByteObjectHashMap0 = new TByteObjectHashMap<Integer>(int0, (float) int0, byte0);
      int int1 = (-295);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-1641);
      float float0 = 148.67842F;
      TByteHashSet tByteHashSet0 = new TByteHashSet(int0, float0);
      tByteHashSet0.getAutoCompactionFactor();
      Locale locale0 = Locale.KOREAN;
      String string0 = "gnu.trove.no_entry.short";
      Locale locale1 = Locale.forLanguageTag(string0);
      String string1 = locale0.getDisplayVariant(locale1);
      TSynchronizedByteSet tSynchronizedByteSet0 = new TSynchronizedByteSet((TByteSet) tByteHashSet0, (Object) string1);
      boolean boolean0 = tByteHashSet0.removeAll((TByteCollection) tSynchronizedByteSet0);
      assertEquals(false, boolean0);
  }
}
