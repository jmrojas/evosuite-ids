/*
 * This file was automatically generated by EvoSuite
 */

package gnu.trove.map.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import gnu.trove.TIntCollection;
import gnu.trove.map.TShortIntMap;
import gnu.trove.map.hash.TShortIntHashMap;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;

public class TShortIntHashMapEvoSuite_Random {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.utils.LoggingUtils.setLoggingForJUnit(); 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.agent.InstrumentingAgent.initialize(); 
  } 

  @Before 
  public void initTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    org.evosuite.agent.InstrumentingAgent.deactivate(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short) (-823);
      shortArray0[1] = short1;
      short short2 = (short)31;
      shortArray0[2] = short2;
      short short3 = (short) (-1);
      shortArray0[3] = short3;
      short short4 = (short)759;
      shortArray0[4] = short4;
      short short5 = (short)0;
      shortArray0[5] = short5;
      short short6 = (short)1;
      shortArray0[6] = short6;
      short short7 = (short) (-489);
      shortArray0[7] = short7;
      short short8 = (short) (-309);
      shortArray0[8] = short8;
      short short9 = (short) (-1729);
      shortArray0[9] = short9;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) short0;
      intArray0[1] = (int) shortArray0[4];
      intArray0[2] = (int) shortArray0[0];
      intArray0[3] = (int) shortArray0[3];
      intArray0[4] = (int) shortArray0[1];
      intArray0[5] = (int) short8;
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      short[] shortArray1 = tShortIntHashMap0._set;
      assertEquals(5, tShortIntHashMap0.size());
      assertEquals("{759=-823, -823=759, 31=0, -1=-1, 0=-309}", tShortIntHashMap0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short) (-1);
      shortArray0[0] = short0;
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      short short1 = (short) (-215);
      shortArray0[4] = short1;
      shortArray0[5] = short1;
      short short2 = (short)0;
      shortArray0[6] = short2;
      float float0 = (-1166.707F);
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap((int) shortArray0[0], float0);
      tShortIntHashMap0.clear();
      short short3 = (short)1;
      shortArray0[1] = short3;
      short short4 = (short)6101;
      shortArray0[2] = short4;
      short short5 = (short)0;
      tShortIntHashMap0.clear();
      shortArray0[3] = short5;
      short short6 = (short)0;
      shortArray0[4] = short6;
      short short7 = (short) (-456);
      shortArray0[5] = short7;
      short short8 = (short)0;
      tShortIntHashMap0.valueCollection();
      shortArray0[6] = short8;
      tShortIntHashMap0.clear();
      tShortIntHashMap0.getNoEntryValue();
      int[] intArray0 = new int[1];
      intArray0[0] = (int) shortArray0[6];
      tShortIntHashMap0.compact();
      assertEquals(3, tShortIntHashMap0.capacity());
      assertEquals("{}", tShortIntHashMap0.toString());
      
      TShortIntHashMap tShortIntHashMap1 = new TShortIntHashMap(shortArray0, intArray0);
      short[] shortArray1 = tShortIntHashMap1.keys();
      assertEquals("{-1=0}", tShortIntHashMap1.toString());
      assertNotNull(shortArray1);
      
      TShortIntHashMap tShortIntHashMap2 = new TShortIntHashMap();
      assertFalse(tShortIntHashMap2.equals(tShortIntHashMap1));
  }

  @Test
  public void test2()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short) (-1);
      shortArray0[0] = short0;
      short short1 = (short)123;
      shortArray0[1] = short1;
      short short2 = (short) (-1219);
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)1819;
      shortArray0[4] = short4;
      short short5 = (short) (-88);
      shortArray0[5] = short5;
      short short6 = (short)100;
      shortArray0[6] = short6;
      int[] intArray0 = new int[9];
      int int0 = 1105;
      intArray0[0] = int0;
      intArray0[1] = (int) shortArray0[0];
      intArray0[2] = (int) shortArray0[1];
      intArray0[3] = (int) short6;
      int int1 = (-1);
      intArray0[4] = int1;
      intArray0[5] = (int) short5;
      intArray0[6] = (int) short0;
      intArray0[7] = (int) short2;
      intArray0[8] = (int) short1;
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      int[] intArray1 = tShortIntHashMap0.values();
      assertNotNull(intArray1);
      assertEquals("{100=-1, -88=-88, 123=-1, -1219=123, -1=1105, 1819=-1, 0=100}", tShortIntHashMap0.toString());
      assertEquals(false, tShortIntHashMap0.isEmpty());
  }

  @Test
  public void test3()  throws Throwable  {
      TShortIntMap tShortIntMap0 = null;
      int int0 = 1;
      short short0 = (short)0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = short0;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) short0;
      int int1 = 0;
      intArray0[1] = int1;
      intArray0[2] = (int) short0;
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      tShortIntHashMap0.isEmpty();
      TShortIntHashMap tShortIntHashMap1 = new TShortIntHashMap(int0, (float) int0, short0, (int) short0);
      tShortIntHashMap1.keySet();
      TShortIntHashMap tShortIntHashMap2 = new TShortIntHashMap(int0);
      tShortIntHashMap2.size();
      TShortIntHashMap tShortIntHashMap3 = null;
      try {
        tShortIntHashMap3 = new TShortIntHashMap(tShortIntMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)845;
      shortArray0[1] = short1;
      short short2 = (short)823;
      shortArray0[2] = short2;
      short short3 = (short)773;
      shortArray0[3] = short3;
      short short4 = (short) (-631);
      shortArray0[4] = short4;
      short short5 = (short)293;
      shortArray0[5] = short5;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) shortArray0[2];
      intArray0[1] = (int) short0;
      intArray0[2] = (int) shortArray0[0];
      intArray0[3] = (int) shortArray0[4];
      intArray0[4] = (int) shortArray0[5];
      intArray0[5] = (int) shortArray0[4];
      int int0 = 1538;
      intArray0[6] = int0;
      intArray0[7] = (int) shortArray0[5];
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      TIntCollection tIntCollection0 = tShortIntHashMap0.valueCollection();
      assertEquals(6, tIntCollection0.size());
      assertEquals("{-631=293, 845=0, 773=-631, 823=0, 293=-631, 0=823}", tShortIntHashMap0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-1629);
      short short0 = (short)1045;
      int int1 = (-704);
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(int0, (float) int0, short0, int1);
      short short1 = (short) (-1);
      int int2 = 0;
      tShortIntHashMap0.getNoEntryValue();
      tShortIntHashMap0.adjustOrPutValue(short1, (int) short0, int2);
      ObjectInput objectInput0 = null;
      // Undeclared exception!
      try {
        tShortIntHashMap0.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      float float0 = 30.142395F;
      short[] shortArray0 = new short[3];
      short short0 = (short)179;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)251;
      shortArray0[2] = short2;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) short2;
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      assertEquals("{179=251}", tShortIntHashMap0.toString());
      
      short short3 = (short)1278;
      int int1 = (-1206);
      float float1 = 10.0F;
      int int2 = 0;
      TShortIntHashMap tShortIntHashMap1 = new TShortIntHashMap((int) short3, float1, short3, int2);
      tShortIntHashMap1.clear();
      short short4 = (short)1317;
      TShortIntHashMap tShortIntHashMap2 = new TShortIntHashMap(int1, (float) int0, short4, int0);
      tShortIntHashMap2.contains(short3);
      tShortIntHashMap1.getNoEntryValue();
      assertEquals("{}", tShortIntHashMap1.toString());
      assertEquals(137, tShortIntHashMap1.capacity());
      
      int int3 = 0;
      TShortIntHashMap tShortIntHashMap3 = new TShortIntHashMap(int0, float0, short3, int3);
      TShortIntHashMap tShortIntHashMap4 = new TShortIntHashMap(int0, int0);
      assertFalse(tShortIntHashMap4.equals(tShortIntHashMap0));
  }

//   @Test
//   public void test7()  throws Throwable  {
//       int int0 = 4591721;
//       float float0 = 0.0F;
//       short short0 = (short) (-2012);
//       TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(int0, (float) short0);
//       TShortIntHashMap tShortIntHashMap1 = new TShortIntHashMap(int0, float0, short0, int0);
//       float float1 = tShortIntHashMap1.getAutoCompactionFactor();
//       assertEquals(0.5F, float1, 0.01F);
//   }

  @Test
  public void test8()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short) (-1);
      shortArray0[2] = short2;
      short short3 = (short)772;
      shortArray0[3] = short3;
      short short4 = (short) (-119);
      shortArray0[4] = short4;
      short short5 = (short) (-1246);
      shortArray0[5] = short5;
      short short6 = (short)1976;
      shortArray0[6] = short6;
      short short7 = (short) (-681);
      shortArray0[7] = short7;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) short4;
      int int0 = 105359939;
      intArray0[1] = int0;
      intArray0[2] = (int) short2;
      intArray0[3] = (int) short7;
      intArray0[4] = (int) short4;
      intArray0[5] = (int) short0;
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      assertEquals("{-119=-119, -1=-1, 772=-681, -1246=0, 0=105359939}", tShortIntHashMap0.toString());
      assertEquals(5, tShortIntHashMap0.size());
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 0;
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(int0, int0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(int0, int0);
      short[] shortArray0 = new short[8];
      short short0 = (short)758;
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short)0;
      shortArray0[2] = short2;
      short short3 = (short)1;
      shortArray0[3] = short3;
      short short4 = (short)110;
      shortArray0[4] = short4;
      short short5 = (short) (-476);
      shortArray0[5] = short5;
      short short6 = (short)0;
      shortArray0[6] = short6;
      short short7 = (short)1;
      shortArray0[7] = short7;
      short[] shortArray1 = tShortIntHashMap0.keys(shortArray0);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-1);
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(int0, int0);
      TShortIntHashMap tShortIntHashMap1 = new TShortIntHashMap((TShortIntMap) tShortIntHashMap0);
      tShortIntHashMap0.valueCollection();
      int int1 = 0;
      tShortIntHashMap1.iterator();
      float float0 = 573.16034F;
      TShortIntHashMap tShortIntHashMap2 = new TShortIntHashMap(int1, float0);
      tShortIntHashMap0.keys();
      tShortIntHashMap1.iterator();
      short short0 = (short)0;
      tShortIntHashMap2.compact();
      int int2 = (-195);
      TShortIntHashMap tShortIntHashMap3 = new TShortIntHashMap(int1, (float) int1, short0, int2);
      assertTrue(tShortIntHashMap3.equals(tShortIntHashMap1));
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 269;
      short[] shortArray0 = new short[8];
      short short0 = (short)0;
      shortArray0[0] = short0;
      short short1 = (short) (-1626);
      shortArray0[1] = short1;
      short short2 = (short) (-291);
      shortArray0[2] = short2;
      short short3 = (short)115;
      shortArray0[3] = short3;
      short short4 = (short)0;
      shortArray0[4] = short4;
      short short5 = (short) (-25);
      shortArray0[5] = short5;
      short short6 = (short) (-502);
      shortArray0[6] = short6;
      short short7 = (short)0;
      shortArray0[7] = short7;
      int[] intArray0 = new int[6];
      intArray0[0] = int0;
      intArray0[1] = (int) short4;
      intArray0[2] = (int) short3;
      intArray0[3] = (int) short0;
      intArray0[4] = (int) short7;
      intArray0[5] = (int) short3;
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      tShortIntHashMap0.tempDisableAutoCompaction();
      TShortIntHashMap tShortIntHashMap1 = new TShortIntHashMap(int0);
      tShortIntHashMap1.valueCollection();
      TShortIntHashMap tShortIntHashMap2 = new TShortIntHashMap();
      int int1 = (-1);
      short short8 = (short)0;
      tShortIntHashMap2.putIfAbsent(short8, int1);
      float float0 = 0.0F;
      TShortIntHashMap tShortIntHashMap3 = new TShortIntHashMap(int1, float0);
      tShortIntHashMap2.putAll((TShortIntMap) tShortIntHashMap3);
      tShortIntHashMap1.getNoEntryValue();
      tShortIntHashMap2.keySet();
      assertEquals(false, tShortIntHashMap2.isEmpty());
      assertEquals(23, tShortIntHashMap2.capacity());
  }

  @Test
  public void test13()  throws Throwable  {
      Object object0 = null;
      short[] shortArray0 = new short[5];
      short short0 = (short) (-85);
      shortArray0[0] = short0;
      short short1 = (short)0;
      shortArray0[1] = short1;
      short short2 = (short) (-199);
      shortArray0[2] = short2;
      short short3 = (short)0;
      shortArray0[3] = short3;
      short short4 = (short)1012;
      shortArray0[4] = short4;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) shortArray0[0];
      intArray0[1] = (int) short1;
      int int0 = (-790);
      intArray0[2] = int0;
      intArray0[3] = (int) shortArray0[3];
      intArray0[4] = (int) short3;
      intArray0[5] = (int) shortArray0[3];
      intArray0[0] = (int) short3;
      intArray0[1] = (int) shortArray0[2];
      intArray0[2] = (int) short2;
      intArray0[3] = (int) short1;
      intArray0[4] = (int) shortArray0[4];
      intArray0[5] = (int) shortArray0[2];
      TShortIntHashMap tShortIntHashMap0 = new TShortIntHashMap(shortArray0, intArray0);
      TShortIntHashMap tShortIntHashMap1 = new TShortIntHashMap((TShortIntMap) tShortIntHashMap0);
      short short5 = (short)0;
      boolean boolean0 = tShortIntHashMap1.adjustValue(short5, shortArray0[3]);
      assertEquals(true, boolean0);
      assertEquals(0, tShortIntHashMap1.getNoEntryValue());
      assertEquals("{0=0, -199=-199, -85=0, 1012=1012}", tShortIntHashMap1.toString());
      
      // Undeclared exception!
      try {
        tShortIntHashMap0.setAutoCompactionFactor((float) intArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factor must be >= 0: -199.0
         //
      }
  }
}
